void *sub_2F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v14;
  uint64_t v16[6];
  v7 = (void *)a7;
  sub_3284(v16, a7);
  if (v7)
  {
    if (v7[57]) {
      v7 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*v7 + 576LL))( v7,  a1,  a2,  a3,  a4,  a5,  a6,  v7);
    }
    else {
      v7 = 0LL;
    }
  }

  v14 = v16[0];
  if (v16[0])
  {
    *(_BYTE *)(v16[0] + 320) = 0;
    *(void *)(v14 + 328) = 0LL;
  }

  return v7;
}

void sub_3064( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12)
{
  if (a2)
  {
    if (a2 == 3)
    {
      v13 = __cxa_begin_catch(a1);
      v14 = (os_log_t *)sub_138E8(16);
      v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = v13[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AggregateDevice_Common.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1211;
        WORD1(a12) = 1024;
        DWORD1(a12) = v16;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException thrown during HandleHALIOProc(): %d.",  (uint8_t *)&buf,  0x18u);
      }
    }

    else
    {
      v17 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v18 = v17;
        v19 = (os_log_t *)sub_138E8(16);
        v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16LL))(v18);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1216;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception thrown HandleHALIOProc(): %s.",  (uint8_t *)&buf,  0x1Cu);
        }
      }

      else
      {
        v22 = (os_log_t *)sub_138E8(16);
        v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1221;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception thrown HandleHALIOProc().",  (uint8_t *)&buf,  0x12u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x3018LL);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_3284(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  if (a2) {
    goto LABEL_6;
  }
  v3 = (os_log_t *)sub_138E8(13);
  v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315394;
    v9 = "AggregateDevice.h";
    __int16 v10 = 1024;
    int v11 = 525;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid aggregate device",  (uint8_t *)&v8,  0x12u);
  }

  if (*a1)
  {
LABEL_6:
    pthread_t v5 = pthread_self();
    uint64_t v6 = *a1;
    *(void *)(v6 + 328) = v5;
    *(_BYTE *)(v6 + 320) = 1;
  }

  return a1;
}

void sub_3368( uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, double *a5, _DWORD *a6, double *a7, uint64_t a8)
{
  if (!*(void *)(a1 + 456))
  {
    v45 = (os_log_t *)sub_138E8(13);
    v46 = *v45;
    if (*v45)
    {
      if (os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "AggregateDevice_Simple.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 376;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The client IO proc must exist for IO to run.",  buf,  0x12u);
      }
    }
  }

  uint64_t v174 = a1 + 688;
  v14 = *(_BYTE **)(a1 + 640);
  v15 = *(_BYTE **)(a1 + 648);
  uint64_t v166 = a3;
  uint64_t v167 = a8;
  int v16 = v14;
  if (v14 != v15)
  {
    while (*v16 != 1)
    {
      if (++v16 == v15)
      {
        int v16 = *(_BYTE **)(a1 + 648);
        break;
      }
    }
  }

  unsigned int v17 = (_DWORD)v16 - (_DWORD)v14;
  if (v15 == v16) {
    uint64_t v18 = 0LL;
  }
  else {
    uint64_t v18 = v17;
  }
  if (*(void *)(a1 + 696) != *(void *)(a1 + 688) && *a4 && *(void *)&a4[4 * v18 + 4])
  {
    uint64_t v19 = sub_45C8(v174, 0, 0);
    uint64_t v20 = *(void *)(v19 + 192);
    BOOL v21 = (*(_BYTE *)(v20 + 448) || *(void *)(v20 + 584) || *(void *)(v20 + 672))
       && *(_DWORD *)(v19 + 8) == 1819304813;
    int v22 = 1;
    uint64_t v23 = (a4[4 * v18 + 3] / *(_DWORD *)(sub_45C8(v174, 0, 0) + 64));
  }

  else
  {
    BOOL v21 = 0;
    int v22 = 0;
    uint64_t v23 = 0LL;
  }

  unint64_t v24 = *(void *)(a1 + 664);
  v25 = *(_BYTE **)(a1 + 672);
  v26 = (_BYTE *)v24;
  if ((_BYTE *)v24 != v25)
  {
    while (*v26 != 1)
    {
      if (++v26 == v25)
      {
        v26 = *(_BYTE **)(a1 + 672);
        break;
      }
    }
  }

  LODWORD(v24) = (_DWORD)v26 - v24;
  if (v25 == v26) {
    unint64_t v24 = 0LL;
  }
  else {
    unint64_t v24 = v24;
  }
  v169 = a4;
  unint64_t v170 = v24;
  if (*(void *)(a1 + 720) != *(void *)(a1 + 712) && *a6 && *(void *)&a6[4 * v24 + 4])
  {
    uint64_t v27 = sub_45C8(v174, 1, 0);
    uint64_t v28 = *(void *)(v27 + 192);
    BOOL v29 = (*(_BYTE *)(v28 + 448) || *(void *)(v28 + 584) || *(void *)(v28 + 672))
       && *(_DWORD *)(v27 + 8) == 1819304813;
    int v173 = 1;
    UInt32 v171 = a6[4 * v170 + 3] / *(_DWORD *)(sub_45C8(v174, 1, 0) + 64);
  }

  else
  {
    BOOL v29 = 0;
    int v173 = 0;
    UInt32 v171 = 0;
  }

  if (*(_BYTE *)(a1 + 104))
  {
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    *(_BYTE *)(a1 + 104) = 0;
  }

  v30 = 0LL;
  inInputData = 0LL;
  outOutputData = 0LL;
  if (v22)
  {
    v31 = (_DWORD *)sub_45C8(v174, 0, 0);
    v32 = v31;
    v30 = *(unsigned int **)(a1 + 736);
    uint64_t v33 = *(void *)(a1 + 688);
    v34 = *(AudioBufferList **)(v33 + 160);
    v35 = *(AudioBufferList **)(v33 + 176);
    inInputData = v35;
    outOutputData = v34;
    if (v21)
    {
      uint64_t v36 = *v30;
      if ((_DWORD)v36)
      {
        int v37 = v31[6] * v23;
        v38 = v30 + 3;
        do
        {
          _DWORD *v38 = v37;
          v38 += 4;
          --v36;
        }

        while (v36);
      }

      uint64_t mNumberBuffers = v34->mNumberBuffers;
      if ((_DWORD)mNumberBuffers)
      {
        UInt32 v40 = v31[26] * v23;
        p_UInt32 mDataByteSize = &v34->mBuffers[0].mDataByteSize;
        do
        {
          UInt32 *p_mDataByteSize = v40;
          p_mDataByteSize += 4;
          --mNumberBuffers;
        }

        while (mNumberBuffers);
      }

      uint64_t v42 = v35->mNumberBuffers;
      if ((_DWORD)v42)
      {
        UInt32 v43 = v31[36] * v23;
        v44 = &v35->mBuffers[0].mDataByteSize;
        do
        {
          UInt32 *v44 = v43;
          v44 += 4;
          --v42;
        }

        while (v42);
      }
    }

    else
    {
      v47 = &v169[4 * v18];
      *((void *)v30 + 2) = *((void *)v47 + 2);
      v30[3] = v47[3];
    }

    if (v31[2] == 1819304813)
    {
      *(_DWORD *)buf = 1;
      v48 = &v169[4 * v18];
      *(_OWORD *)&buf[8] = *(_OWORD *)(v48 + 2);
      uint64_t v49 = *(void *)(a1 + 88);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_403210;
      if (v49) {
        sub_4784(v49, &__p, (uint64_t)(v48 + 2));
      }
      sub_4974(a1 + 144, v32[50], (uint64_t)buf, v23, (uint64_t)a5);
    }
  }

  if (v21)
  {
    uint64_t v50 = sub_45C8(v174, 0, 0);
    v51 = *(OpaqueAudioConverter ***)(v50 + 192);
    *(_DWORD *)buf = 1;
    *(_OWORD *)&buf[8] = *(_OWORD *)&v169[4 * v18 + 2];
    sub_3014C(v51[73], v23, (AudioBufferList *)buf, outOutputData);
    if ((*(void *)(a1 + 768) & 0xFFFFFFFELL) == 2)
    {
      else {
        int v52 = *(_DWORD *)(*(void *)(a1 + 808) + 4LL);
      }
      int v53 = sub_231EDC(*(_BYTE **)(a1 + 640), *(_BYTE **)(a1 + 648), v52);
      LODWORD(__p.__r_.__value_.__l.__data_) = 1;
      v54 = &v169[4 * v53];
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)(v54 + 2);
      v179[0] = outOutputData;
      v179[1] = (AudioBufferList *)&__p;
      (*((void (**)(OpaqueAudioConverter **, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v51
       + 18))( v51,  a5,  v23,  2LL,  v179,  1LL,  &inInputData);
      uint64_t v55 = *(void *)(a1 + 832);
      if (*(_DWORD *)(v55 + 48) == 1819304813)
      {
        if (!*(_DWORD *)(v55 + 64))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v180 = 136315394;
            *(void *)&v180[4] = "CAStreamBasicDescription.h";
            LOWORD(v181[0]) = 1024;
            *(_DWORD *)((char *)v181 + 2) = 273;
            _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  bytesPerFrame must be > 0 in BytesToFrames",  v180,  0x12u);
          }

          __break(1u);
          return;
        }

        uint64_t v56 = *(void *)(a1 + 88);
        int v57 = *(_DWORD *)(*(void *)(a1 + 808) + 4LL);
        *(void *)v180 = 0x100000000LL;
        *(_DWORD *)&v180[8] = 0;
        v181[0] = v57;
        if (v56) {
          sub_4784(v56, v180, (uint64_t)(v54 + 2));
        }
      }
    }

    else
    {
      (*((void (**)(OpaqueAudioConverter **, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v51
       + 18))( v51,  a5,  v23,  1LL,  &outOutputData,  1LL,  &inInputData);
    }

    sub_3014C(v51[84], v23, inInputData, (AudioBufferList *)v30);
    uint64_t v58 = *(void *)(a1 + 88);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_403240;
    if (v58) {
      sub_75260(v58, &__p, (uint64_t)v30, v23, (uint64_t)*a5);
    }
    sub_4974(a1 + 144, *(unsigned int *)(v50 + 204), (uint64_t)v30, v23, (uint64_t)a5);
  }

  *(void *)v180 = 0LL;
  v179[0] = 0LL;
  if (v173)
  {
    v59 = *(AudioBufferList **)(a1 + 752);
    uint64_t v60 = *(void *)(a1 + 712);
    v61 = *(AudioBufferList **)(v60 + 160);
    *(void *)v180 = v61;
    v62 = *(AudioBufferList **)(v60 + 176);
    v179[0] = v62;
    if (v29)
    {
      uint64_t v63 = sub_45C8(v174, 1, 0);
      uint64_t v64 = v59->mNumberBuffers;
      if ((_DWORD)v64)
      {
        int v65 = *(_DWORD *)(v63 + 24) * v171;
        v66 = &v59->mBuffers[0].mDataByteSize;
        do
        {
          _DWORD *v66 = v65;
          v66 += 4;
          --v64;
        }

        while (v64);
      }

      uint64_t v67 = sub_45C8(v174, 1, 0);
      uint64_t v68 = v61->mNumberBuffers;
      if ((_DWORD)v68)
      {
        int v69 = *(_DWORD *)(v67 + 104) * v171;
        v70 = &v61->mBuffers[0].mDataByteSize;
        do
        {
          _DWORD *v70 = v69;
          v70 += 4;
          --v68;
        }

        while (v68);
      }

      uint64_t v71 = sub_45C8(v174, 1, 0);
      uint64_t v72 = v62->mNumberBuffers;
      if ((_DWORD)v72)
      {
        int v73 = *(_DWORD *)(v71 + 104) * v171;
        v74 = &v62->mBuffers[0].mDataByteSize;
        do
        {
          _DWORD *v74 = v73;
          v74 += 4;
          --v72;
        }

        while (v72);
      }

      UInt32 mDataByteSize = v59->mBuffers[0].mDataByteSize;
    }

    else
    {
      v76 = &a6[4 * v170];
      v59->mBuffers[0].mData = (void *)*((void *)v76 + 2);
      UInt32 mDataByteSize = v76[3];
      v59->mBuffers[0].UInt32 mDataByteSize = mDataByteSize;
    }
  }

  else
  {
    v61 = 0LL;
    v59 = 0LL;
    UInt32 mDataByteSize = 0;
  }

  if (*(_BYTE *)(a1 + 364)) {
    BOOL v77 = v30 == 0LL;
  }
  else {
    BOOL v77 = 1;
  }
  if (!v77 && *v30)
  {
    unint64_t v78 = 0LL;
    v79 = (void **)(v30 + 4);
    do
    {
      bzero(*v79, *((unsigned int *)v79 - 1));
      ++v78;
      v79 += 2;
    }

    while (v78 < *v30);
  }

  (*(void (**)(uint64_t, uint64_t, unsigned int *, double *, AudioBufferList *, double *, void))(a1 + 456))( v167,  v166,  v30,  a5,  v59,  a7,  *(void *)(a1 + 464));
  if (v29)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 448LL))(a1) & 1) != 0)
    {
      uint64_t v80 = sub_45C8(v174, 1, 0);
      uint64_t v81 = *(void *)(v80 + 192);
      if (v81)
      {
        char v82 = (*(uint64_t (**)(void))(*(void *)v81 + 80LL))(*(void *)(v80 + 192));
        char v168 = 0;
      }

      else
      {
        char v82 = 0;
        char v168 = 1;
      }

      int v83 = 1;
      goto LABEL_98;
    }

    bzero(*(void **)&a6[4 * v170 + 4], a6[4 * v170 + 3]);
  }

  uint64_t v81 = 0LL;
  int v83 = 0;
  char v82 = 0;
  char v168 = 1;
LABEL_98:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 448LL))(a1))
  {
    if (*(_BYTE *)(a1 + 637)) {
      int v84 = 3;
    }
    else {
      int v84 = 2;
    }
    if (*(_BYTE *)(a1 + 636)) {
      int v85 = v84;
    }
    else {
      int v85 = *(unsigned __int8 *)(a1 + 637);
    }
  }

  else
  {
    int v85 = 0;
  }

  if ((v173 & (*(unsigned int (**)(uint64_t))(*(void *)a1 + 448LL))(a1)) != 1
    || v59->mBuffers[0].mDataByteSize)
  {
    *(_DWORD *)(a1 + 632) = 0;
    goto LABEL_109;
  }

  if ((v82 & 1) != 0)
  {
    if ((v83 & 1) == 0) {
      goto LABEL_166;
    }
  }

  else
  {
    unsigned int v106 = *(_DWORD *)(a1 + 632);
    if (v106 >> 6 >= 0x177)
    {
      if (v106 <= v171 + 24000)
      {
        if ((v168 & 1) == 0)
        {
          sub_3057C(v81);
          unsigned int v106 = *(_DWORD *)(a1 + 632);
        }

        *(_DWORD *)(a1 + 632) = v106 + 2 * v171;
      }

LABEL_166:
      int v83 = 0;
      if ((*(_BYTE *)(a1 + 80) & 4) == 0) {
        goto LABEL_174;
      }
      goto LABEL_167;
    }

    *(_DWORD *)(a1 + 632) = v106 + v171;
    if ((v83 & 1) == 0) {
      goto LABEL_166;
    }
  }

  int v83 = 1;
LABEL_167:
  unint64_t v109 = v59->mNumberBuffers;
  if ((_DWORD)v109)
  {
    for (uint64_t i = 0LL; i != v109; ++i)
      v59->mBuffers[i].UInt32 mDataByteSize = mDataByteSize;
    unint64_t v111 = 0LL;
    p_mData = &v59->mBuffers[0].mData;
    do
    {
      if (*p_mData)
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        unint64_t v109 = v59->mNumberBuffers;
      }

      ++v111;
      p_mData += 2;
    }

    while (v111 < v109);
  }

      v75 = sub_138E8(2);
      v76 = sub_138E8(34);
      BOOL v77 = 0;
      unint64_t v78 = 0LL;
      *(void *)buf = 0x100000002LL;
      v79 = *(void *)(v75 + 8);
      while (1)
      {
        uint64_t v80 = *(int *)&buf[4 * v78];
        uint64_t v81 = v77;
        if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
          break;
        }
        BOOL v77 = 1;
        unint64_t v78 = 1LL;
        if ((v81 & 1) != 0) {
          goto LABEL_172;
        }
      }

      if ((v79 & v80) == 0) {
        v75 = v76;
      }
LABEL_172:
      char v82 = *(id *)v75;
      int v83 = v82;
      if (v82)
      {
        int v84 = (os_log_s *)v82;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v1076, *a2);
          int v85 = v1076[23] >= 0 ? v1076 : *(_BYTE **)v1076;
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6307;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v85;
          _os_log_impl(&dword_0, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d GetPropertyData() unsupported for '%s'", buf, 0x1Cu);
          if ((v1076[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1076);
          }
        }
      }

      goto LABEL_693;
    }

    if (v18 != 1651077731)
    {
      if (v18 == 1651664755)
      {
        int v91 = *a5;
        if (v91 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
        {
          BOOL v21 = MGGetBoolAnswer(@"DeviceSupportsSiriBargeIn");
          goto LABEL_198;
        }

        v552 = sub_138E8(13);
        v371 = 561211770;
        v553 = sub_8C7D4(1, *(void **)v552, *(void *)(v552 + 8));
        v554 = (void *)objc_claimAutoreleasedReturnValue(v553);
        if (v554)
        {
          v372 = v554;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            v555 = v1076[23];
            v556 = *(_BYTE **)v1076;
            v557 = *a5;
            v558 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v559 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
            if (v555 < 0) {
              v559 = v556;
            }
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6313;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v559;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v557;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v558;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      goto LABEL_409;
    }

    sub_277230((os_signpost_id_t *)&cf);
    v195 = *a5;
    if (v195 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
    {
      v732 = sub_138E8(13);
      v733 = sub_8C7D4(1, *(void **)v732, *(void *)(v732 + 8));
      v734 = (void *)objc_claimAutoreleasedReturnValue(v733);
      v735 = v734;
      if (v734)
      {
        v736 = v734;
        if (os_log_type_enabled(v736, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = a2[2];
          sub_613AC((uint64_t)v1076, (unsigned int *)__p);
          v737 = v1076[23];
          v738 = *(_BYTE **)v1076;
          v739 = *a5;
          v740 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
          v741 = v1076;
          *(_DWORD *)buf = 136316162;
          *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
          if (v737 < 0) {
            v741 = v738;
          }
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5882;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v741;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v739;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v740;
          _os_log_impl( &dword_0,  v736,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if ((v1076[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1076);
          }
        }
      }

      v742 = __cxa_allocate_exception(0x10uLL);
      *(void *)v742 = &off_4865A0;
      v742[2] = 561211770;
    }

    if ((a3 | 8) != 8)
    {
      v1043 = sub_138E8(13);
      v1044 = sub_8C7D4(1, *(void **)v1043, *(void *)(v1043 + 8));
      v1045 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1044);
      v1046 = v1045;
      if (v1045 && os_log_type_enabled(v1045, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5883;
        _os_log_impl( &dword_0,  v1046,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      v1047 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v1047, "Precondition failure.");
    }

    v1060.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    LOWORD(v1060.__r_.__value_.__r.__words[1]) = 0;
    if (!Mutable) {
      goto LABEL_420;
    }
    if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
    {
      v883 = sub_138E8(13);
      v884 = sub_8C7D4(1, *(void **)v883, *(void *)(v883 + 8));
      v885 = (os_log_s *)objc_claimAutoreleasedReturnValue(v884);
      v886 = v885;
      if (!v885 || !os_log_type_enabled(v885, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1241;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5892;
      v887 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)v1060.__r_.__value_.__l.__data_, @"routable ports"))
    {
      v897 = sub_138E8(13);
      v898 = sub_8C7D4(1, *(void **)v897, *(void *)(v897 + 8));
      v899 = (os_log_s *)objc_claimAutoreleasedReturnValue(v898);
      v886 = v899;
      if (!v899 || !os_log_type_enabled(v899, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1241;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5896;
      v887 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)v1060.__r_.__value_.__l.__data_, @"unroutable ports"))
    {
      v909 = sub_138E8(13);
      v910 = sub_8C7D4(1, *(void **)v909, *(void *)(v909 + 8));
      v911 = (os_log_s *)objc_claimAutoreleasedReturnValue(v910);
      v886 = v911;
      if (!v911 || !os_log_type_enabled(v911, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1241;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5900;
      v887 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)v1060.__r_.__value_.__l.__data_, @"preferred sub-ports"))
    {
      v928 = sub_138E8(13);
      v929 = sub_8C7D4(1, *(void **)v928, *(void *)(v928 + 8));
      v930 = (os_log_s *)objc_claimAutoreleasedReturnValue(v929);
      v886 = v930;
      if (!v930 || !os_log_type_enabled(v930, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1241;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5904;
      v887 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)v1060.__r_.__value_.__l.__data_, @"active data sources"))
    {
      v940 = sub_138E8(13);
      v941 = sub_8C7D4(1, *(void **)v940, *(void *)(v940 + 8));
      v942 = (os_log_s *)objc_claimAutoreleasedReturnValue(v941);
      v886 = v942;
      if (!v942 || !os_log_type_enabled(v942, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1241;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5908;
      v887 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.";
    }

    else
    {
      if (!CFDictionaryContainsKey( (CFDictionaryRef)v1060.__r_.__value_.__l.__data_,  @"voice processing configuration"))
      {
        if (!CFDictionaryContainsKey((CFDictionaryRef)v1060.__r_.__value_.__l.__data_, @"sub-port preferences"))
        {
          if (v1060.__r_.__value_.__r.__words[0])
          {
            sub_49A70(buf, a1, (const __CFDictionary **)&v1060, 0, 1);
            goto LABEL_421;
          }

          int v69 = 1;
          v70 = 1LL;
          if ((v68 != 0) | v71 & 1) {
            goto LABEL_170;
          }
        }

        v88 = *((void *)v85 - 5);
        int v89 = *(id *)sub_138E8(24);
        unint64_t v90 = v89;
        if (v89)
        {
          int v91 = (os_log_s *)v89;
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          {
            int v92 = (*(uint64_t (**)(void))(*(void *)*v14 + 152LL))(*v14);
            sub_2CA1C(&v267, v92);
            int v93 = &v267;
            if ((v267.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v93 = (std::string *)v267.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = "DSPChain.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1378;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v93;
            *(_WORD *)&_BYTE buf[28] = 2048;
            *(void *)&buf[30] = v88;
            _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Format was not specified for some busses on DSP processor of type '%s'.  Assuming these are auxi liary buses. Overwriting sample rate of unspecified busses' formats to %f, and marking as interleaved.",  buf,  0x26u);
          }
        }

        if (0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 3) >= 2)
        {
          v94 = (os_log_s *)*(id *)sub_138E8(24);
          unsigned int v95 = v94;
          if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "DSPChain.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1379;
            _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d More than one bus format was specified.  Using sample rate of the last specified format",  buf,  0x12u);
          }
        }

        if (v76 < v265)
        {
          do
          {
            unsigned int v96 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128LL))( *v14,  v72,  v76);
            uint64_t v97 = *(void *)(v96 + 32);
            int v98 = *(_OWORD *)(v96 + 16);
            *(_OWORD *)buf = *(_OWORD *)v96;
            *(_OWORD *)&buf[16] = v98;
            *(void *)&buf[32] = v97;
            *(void *)buf = v88;
            sub_2B77C((uint64_t)buf, SHIDWORD(v98), 1);
            uint64_t v99 = (*(uint64_t (**)(void, uint64_t, unint64_t, _BYTE *))(*(void *)*v14 + 120LL))( *v14,  v72,  v76,  buf);
            uint64_t v68 = v99;
            v76 = (v76 + 1);
          }

          while (v76 < v265 && !v99);
          goto LABEL_166;
        }

        v70 = 1LL;
        int v69 = 1;
      }

      while ((v71 & 1) == 0);
      uint64_t v68 = 0;
LABEL_170:
      (*(void (**)(void))(*(void *)*v14 + 16LL))(*v14);
      int v11 = v256;
LABEL_171:
      if (!v68)
      {
        __int16 v10 = v254 + 1;
        if (v254 + 1 < v253) {
          continue;
        }
      }

      if (v11) {
        uint64_t v100 = 0x100000000LL;
      }
      else {
        uint64_t v100 = 0LL;
      }
      a2 = v252;
      if (!v68) {
        goto LABEL_179;
      }
      goto LABEL_181;
    }
  }

  uint64_t v100 = 0x100000000LL;
LABEL_179:
  unsigned int v101 = *a3;
  uint64_t v68 = 0;
  if (a3[1] != *a3)
  {
    v102 = *v101;
    unint64_t v103 = v101[1];
    *(void *)(v8 + 488) = *((void *)v101 + 4);
    *(_OWORD *)(v8 + 456) = v102;
    *(_OWORD *)(v8 + 472) = v103;
  }

    if ((v29 & 0x80) != 0) {
      operator delete(v116);
    }
    goto LABEL_181;
  }

  v13 = sub_546E0();
  v14 = operator new(4uLL);
  _BYTE *v14 = 1885892674;
  *(void *)buf = v14;
  *(void *)&buf[8] = v14 + 1;
  *(void *)&buf[16] = v14 + 1;
  strcpy(&buf[24], "cwdv");
  BYTE2(v121) = 0;
  int v122 = 3;
  v124[0] = 0LL;
  v124[1] = 0LL;
  v123 = v124;
  v125 = 44739242;
  unint64_t v126 = 0LL;
  float v116 = &off_475D78;
  v119 = &v116;
  sub_FFB0C(v115, v13, buf, (uint64_t)&v116);
  v15 = v119;
  if (v119 == &v116)
  {
    int v16 = 4LL;
    v15 = &v116;
  }

  else
  {
    if (!v119) {
      goto LABEL_65;
    }
    int v16 = 5LL;
  }

  (*((void (**)(void))*v15 + v16))();
LABEL_65:
  if (v126) {
    CFRelease(v126);
  }
  sub_32C8C(v124[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  v38 = (uint64_t *)v115[1];
  if (*((char *)v8 + 23) < 0)
  {
    v39 = (unint64_t *)&v106;
    if (v7) {
      v39 = (unint64_t *)&v109;
    }
    sub_24054(__p, *v8, *v39);
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v114 = v8[2];
  }

  UInt32 v40 = v115;
  if (v38 != v115)
  {
    UInt32 v40 = v38;
    while (1)
    {
      sub_B8F68((uint64_t *)&v116, v40 + 2, "", 833);
      if (!v116 || !(*(unsigned int (**)(void *))(*(void *)v116 + 424LL))(v116))
      {
        int v52 = 0;
        goto LABEL_97;
      }

      (*(void (**)(_BYTE *__return_ptr))(*(void *)v116 + 440LL))(buf);
      if (buf[23] >= 0) {
        v41 = (void *)buf[23];
      }
      else {
        v41 = *(void **)&buf[8];
      }
      uint64_t v42 = (void *)HIBYTE(v114);
      if (SHIBYTE(v114) < 0) {
        uint64_t v42 = __p[1];
      }
      if (v41 != v42) {
        break;
      }
      if (SHIBYTE(v114) >= 0) {
        UInt32 v43 = __p;
      }
      else {
        UInt32 v43 = (void **)__p[0];
      }
      if ((buf[23] & 0x80) != 0)
      {
        uint64_t v56 = *(void **)buf;
        int v52 = memcmp(*(const void **)buf, v43, *(size_t *)&buf[8]) == 0;
LABEL_109:
        operator delete(v56);
        goto LABEL_97;
      }

      if (buf[23])
      {
        v44 = buf[23] - 1LL;
        v45 = buf;
        do
        {
          v47 = *v45++;
          v46 = v47;
          uint64_t v49 = *(unsigned __int8 *)v43;
          UInt32 v43 = (void **)((char *)v43 + 1);
          v48 = v49;
          v51 = v44-- != 0;
          int v52 = v46 == v48;
        }

        while (v46 == v48 && v51);
        goto LABEL_106;
      }

      int v52 = 1;
LABEL_97:
      int v53 = v117;
      if (v117)
      {
        p_shared_owners = (unint64_t *)&v117->__shared_owners_;
        do
          uint64_t v55 = __ldaxr(p_shared_owners);
        while (__stlxr(v55 - 1, p_shared_owners));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }

      if (v52) {
        goto LABEL_117;
      }
      UInt32 v40 = (uint64_t *)v40[1];
      if (v40 == v115)
      {
        UInt32 v40 = v115;
        goto LABEL_117;
      }
    }

    int v52 = 0;
LABEL_106:
    if ((buf[23] & 0x80) == 0) {
      goto LABEL_97;
    }
    uint64_t v56 = *(void **)buf;
    goto LABEL_109;
  }

    if (v86) {
      (*(void (**)(char *))(*(void *)v85 + 24LL))(v85);
    }
    sub_F16A4(*((void **)v85 + 21));
    sub_32C8C(*((void **)v85 + 18));
    sub_32C8C(*((void **)v85 + 13));
    *(void *)int v85 = off_46E4E8;
    pthread_mutex_destroy((pthread_mutex_t *)(v85 + 24));
    operator delete(v85);
LABEL_169:
    qword_490F28 = 0LL;
    unint64_t v111 = (os_log_t *)sub_138E8(6);
    v112 = *v111;
    if (*v111 && os_log_type_enabled(*v111, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"TimeSyncClockDeviceManager.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 61;
      _os_log_impl( &dword_0,  v112,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Destroying TimeSyncClockDeviceManager.",  (uint8_t *)buf,  0x12u);
    }

    if (qword_4A08A0)
    {
      (*(void (**)(uint64_t))(*(void *)qword_4A08A0 + 8LL))(qword_4A08A0);
      qword_4A08A0 = 0LL;
      unsigned int v113 = sub_138E8(7);
      uint64_t v114 = sub_138E8(6);
      float v115 = 0;
      float v116 = 0LL;
      buf[0].n128_u64[0] = 0x100000002LL;
      int v117 = *(void *)(v113 + 8);
      while (1)
      {
        uint64_t v118 = buf[0].n128_i32[v116];
        v119 = v115;
        if (((v117 & v118) != 0) != ((*(void *)(v114 + 8) & v118) != 0)) {
          break;
        }
        float v115 = 1;
        float v116 = 1LL;
        if ((v119 & 1) != 0) {
          goto LABEL_179;
        }
      }

      if ((v117 & v118) == 0) {
        unsigned int v113 = v114;
      }
LABEL_179:
      v120 = *(os_log_s **)v113;
      if (v120 && os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
      {
        buf[0].n128_u32[0] = 136315394;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"ObjectDestructionManager.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 38;
        _os_log_impl( &dword_0,  v120,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to destroy ObjectDestructionManager.",  (uint8_t *)buf,  0x12u);
      }

      if (qword_4A9BE8)
      {
        operator delete((void *)qword_4A9BE8);
        qword_4A9BE8 = 0LL;
        uint64_t v121 = sub_138E8(10);
        int v122 = sub_138E8(6);
        v123 = 0;
        v124 = 0LL;
        buf[0].n128_u64[0] = 0x100000002LL;
        v125 = *(void *)(v121 + 8);
        while (1)
        {
          unint64_t v126 = buf[0].n128_i32[v124];
          unint64_t v127 = v123;
          if (((v125 & v126) != 0) != ((*(void *)(v122 + 8) & v126) != 0)) {
            break;
          }
          v123 = 1;
          v124 = 1LL;
          if ((v127 & 1) != 0) {
            goto LABEL_189;
          }
        }

        if ((v125 & v126) == 0) {
          uint64_t v121 = v122;
        }
LABEL_189:
        v128 = *(os_log_s **)v121;
        if (v128 && os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"SystemSettingsManager_Aspen.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 1037;
          _os_log_impl( &dword_0,  v128,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to destroy SystemSettingsManager.",  (uint8_t *)buf,  0x12u);
        }

        if (qword_4927E0)
        {
          (*(void (**)(uint64_t))(*(void *)qword_4927E0 + 360LL))(qword_4927E0);
          qword_4927E0 = 0LL;
          v129 = (os_log_t *)sub_138E8(6);
          unsigned int v130 = *v129;
          if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_DEBUG))
          {
            buf[0].n128_u32[0] = 136315394;
            *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"SingletonFactory_Aspen.cpp";
            buf[0].n128_u16[6] = 1024;
            *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 113;
            _os_log_impl( &dword_0,  v130,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Completed destruction of singletons.",  (uint8_t *)buf,  0x12u);
          }

          AudioObjectRemovePropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_24CE98, a1);
          goto LABEL_197;
        }

        v149 = (os_log_t *)sub_138E8(13);
        uint64_t v150 = *v149;
        if (*v149 && os_log_type_enabled(*v149, OS_LOG_TYPE_ERROR))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"SystemSettingsManager_Aspen.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 1039;
          _os_log_impl( &dword_0,  v150,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sSystemSettingsManager is NULL]: sSystemSettingsManager is NULL!",  (uint8_t *)buf,  0x12u);
        }

        unint64_t v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v138, "sSystemSettingsManager is NULL!");
      }

      else
      {
        uint64_t v147 = (os_log_t *)sub_138E8(13);
        v148 = *v147;
        if (*v147 && os_log_type_enabled(*v147, OS_LOG_TYPE_ERROR))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"ObjectDestructionManager.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 39;
          _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sObjectDestructionManager is NULL]: sObjectDestructionManager is NULL!",  (uint8_t *)buf,  0x12u);
        }

        unint64_t v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v138, "sObjectDestructionManager is NULL!");
      }
    }

    else
    {
      v145 = (os_log_t *)sub_138E8(13);
      v146 = *v145;
      if (*v145 && os_log_type_enabled(*v145, OS_LOG_TYPE_ERROR))
      {
        buf[0].n128_u32[0] = 136315394;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"TimeSyncClockDeviceManager.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 63;
        _os_log_impl( &dword_0,  v146,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sTimeSyncClockDeviceManager is NULL]: sTimeSyncClockDeviceManager is NULL!",  (uint8_t *)buf,  0x12u);
      }

      unint64_t v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v138, "sTimeSyncClockDeviceManager is NULL!");
    }

  unint64_t v111 = 0;
LABEL_167:
  v112 = sub_335D30(v111);
  unsigned int v113 = (unsigned int *)v112;
  *a1 = v112;
  float v115 = v211;
  uint64_t v114 = v212;
  if (v211 != v212)
  {
    float v116 = 0;
    do
    {
      int v117 = *((_DWORD *)v115 + 2);
      uint64_t v118 = *((_DWORD *)v115 + 3);
      if (v118 != v117)
      {
        v119 = 0;
        v120 = v116;
        uint64_t v121 = 20LL * v116 + 12;
        do
        {
          if (!*v115)
          {
            v141 = (os_log_t *)sub_138E8(13);
            v142 = *v141;
            if (*v141 && os_log_type_enabled(*v141, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = "AggregateDevice_Multi.cpp";
              v215 = 1024;
              v216 = 105;
              _os_log_impl( &dword_0,  v142,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            v143 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v143, "Precondition failure.");
          }

          if (v118 - v117 <= v119)
          {
            v137 = (os_log_t *)sub_138E8(13);
            unint64_t v138 = *v137;
            if (*v137 && os_log_type_enabled(*v137, OS_LOG_TYPE_ERROR))
            {
              uint64_t v139 = *((_DWORD *)v115 + 3) + ~*((_DWORD *)v115 + 2);
              *(_DWORD *)buf = 136315906;
              *(void *)&buf[4] = "AggregateDevice_Multi.cpp";
              v215 = 1024;
              v216 = 106;
              v217 = 1024;
              *(_DWORD *)v218 = v119;
              *(_WORD *)&v218[4] = 1024;
              *(_DWORD *)&v218[6] = v139;
              _os_log_impl( &dword_0,  v138,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): Attempt to access index %u. Max index: %u",  buf,  0x1Eu);
            }

            unsigned int v140 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v140, "Attempt to access index %u. Max index: %u");
          }

          int v122 = (uint64_t)*v115 + 20 * v119 + 20 * v117;
          v123 = &v112[v121];
          v124 = *(_OWORD *)(v122 + 12);
          *((_DWORD *)v123 + 4) = *(_DWORD *)(v122 + 28);
          *(_OWORD *)v123 = v124;
          int v117 = *((_DWORD *)v115 + 2);
          uint64_t v118 = *((_DWORD *)v115 + 3);
          v121 += 20LL;
          ++v119;
        }

        while (v119 < v118 - v117);
        float v116 = v120 + v119;
      }

      v115 += 2;
    }

    while (v115 != v114);
  }

  if (v112)
  {
    v125 = sub_138E8(16);
    unint64_t v126 = sub_138E8(33);
    unint64_t v127 = 0;
    v128 = 0LL;
    *(void *)buf = 0x100000002LL;
    v129 = *(void *)(v125 + 8);
    while (1)
    {
      unsigned int v130 = *(int *)&buf[4 * v128];
      unsigned int v131 = v127;
      if (((v129 & v130) != 0) != ((*(void *)(v126 + 8) & v130) != 0)) {
        break;
      }
      unint64_t v127 = 1;
      v128 = 1LL;
      if ((v131 & 1) != 0)
      {
        if ((v129 & 1) == 0) {
          goto LABEL_196;
        }
        goto LABEL_185;
      }
    }

    if ((v129 & v130) == 0) {
      v125 = v126;
    }
    if ((*(void *)(v125 + 8) & 1) != 0)
    {
LABEL_185:
      signed int v132 = *(os_log_s **)v125;
      if (v132 && os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
      {
        sub_613AC((uint64_t)&__p, v201);
        int v133 = v210;
        unsigned int v134 = (void **)__p;
        sub_155138(&v207, v113);
        unint64_t v135 = &__p;
        if (v133 < 0) {
          unint64_t v135 = v134;
        }
        if ((v207.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unsigned int v136 = &v207;
        }
        else {
          unsigned int v136 = (std::string *)v207.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = "AggregateDevice_Multi.cpp";
        v215 = 1024;
        v216 = 651;
        v217 = 2080;
        *(void *)v218 = v135;
        *(_WORD *)&v218[8] = 2080;
        *(void *)&v218[10] = v136;
        _os_log_impl(&dword_0, v132, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioChannelLayout for property %s: %s", buf, 0x26u);
        if (v210 < 0) {
          operator delete(__p);
        }
      }
    }
  }

LABEL_174:
  if ((v83 & 1) == 0 && v85 != 3)
  {
    bzero(*(void **)&a6[4 * v170 + 4], a6[4 * v170 + 3]);
    LOBYTE(v83) = 0;
    goto LABEL_110;
  }

        uint64_t v56 = (void *)*((void *)a1 + 116);
        if (v56)
        {
          int v57 = 7LL;
LABEL_214:
          (*(void (**)(void))(*v56 + 8 * v57))();
          goto LABEL_215;
        }

        v223 = (os_log_t *)sub_138E8(13);
        v224 = *v223;
        if (*v223 && os_log_type_enabled(*v223, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2596;
          _os_log_impl( &dword_0,  v224,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_491;
      }

      if (v14 == 1684104051)
      {
        char v160 = *a5;
        if (v160 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          memset(cf, 0, 24);
          sub_B7A8C(cf, a4, (uint64_t)a4 + 4 * (a3 >> 2), a3 >> 2);
          v352 = 0LL;
          v353 = 0LL;
          v350.__r_.__value_.__l.__cap_ = (std::string::size_type)&__p;
          std::string __p = &v352;
          v350.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
          v350.__r_.__value_.__l.__size_ = (std::string::size_type)cf;
          uint64_t v161 = a2[1];
          if (v161 == 1768845428 || v161 == 1735159650)
          {
            sub_B7C98(&v350, 1);
            uint64_t v161 = a2[1];
          }

          if (v161 == 1869968496 || v161 == 1735159650) {
            sub_B7C98(&v350, 0);
          }
          sub_136E0((uint64_t)v346, __p, &v352);
          uint64_t v162 = sub_138E8(2);
          char v163 = sub_138E8(34);
          unint64_t v164 = 0;
          v165 = 0LL;
          *(void *)buf = 0x100000002LL;
          uint64_t v166 = *(void *)(v162 + 8);
          while (1)
          {
            uint64_t v167 = *(int *)&buf[4 * v165];
            char v168 = v164;
            if (((v166 & v167) != 0) != ((*(void *)(v163 + 8) & v167) != 0)) {
              break;
            }
            unint64_t v164 = 1;
            v165 = 1LL;
            if ((v168 & 1) != 0) {
              goto LABEL_402;
            }
          }

          if ((v166 & v167) == 0) {
            uint64_t v162 = v163;
          }
          uint64_t v166 = *(void *)(v162 + 8);
LABEL_402:
          if ((v166 & 1) != 0)
          {
            v189 = *(os_log_s **)v162;
            if (v189)
            {
              if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
              {
                std::to_string(&v349, a1[2]);
                if ((v349.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v190 = &v349;
                }
                else {
                  v190 = (std::string *)v349.__r_.__value_.__r.__words[0];
                }
                sub_2CA1C(&v348, a2[1]);
                if ((v348.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v191 = &v348;
                }
                else {
                  v191 = (std::string *)v348.__r_.__value_.__r.__words[0];
                }
                sub_8F640(&v347, *(unsigned int **)cf, *(unsigned int **)&cf[8]);
                v192 = (char)v347.__r_.__value_.__s.__size_;
                v193 = v347.__r_.__value_.__r.__words[0];
                sub_151A78(&v345, (const __CFArray *)v346[0]);
                v194 = &v347;
                if (v192 < 0) {
                  v194 = (std::string *)v193;
                }
                v195 = &v345;
                if ((v345.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v195 = (std::string *)v345.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136316418;
                *(void *)&buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2509;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v190;
                *(_WORD *)&_BYTE buf[28] = 2080;
                *(void *)v362 = v191;
                *(_WORD *)&v362[8] = 2080;
                *(void *)&v362[10] = v194;
                LOWORD(v363) = 2080;
                *(void *)((char *)&v363 + 2) = v195;
                _os_log_impl( &dword_0,  v189,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning active streams for device id %s, scope '%s' and VirtualAudioPortTypes %s: %s",  buf,  0x3Au);
              }
            }
          }

          if (v346[0])
          {
            CFRetain(v346[0]);
            v196 = v346[0];
          }

          else
          {
            v196 = 0LL;
          }

          *(void *)a6 = v196;
          sub_13818((uint64_t)v346);
          sub_32C8C(v352);
          unint64_t v155 = *(void **)cf;
          if (!*(void *)cf) {
            goto LABEL_215;
          }
          *(void *)&cf[8] = *(void *)cf;
          goto LABEL_454;
        }

        v310 = (os_log_t *)sub_138E8(13);
        uint64_t v49 = *v310;
        if (*v310 && os_log_type_enabled(*v310, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          LODWORD(v352) = a2[2];
          sub_613AC((uint64_t)cf, (unsigned int *)&__p);
          v311 = cf[23];
          v312 = *(_BYTE **)cf;
          v313 = *a5;
          v314 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v315 = cf;
          *(_DWORD *)buf = 136316162;
          *(void *)&buf[4] = "VirtualAudio_Device.cpp";
          if (v311 < 0) {
            v315 = v312;
          }
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2470;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v315;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)v362 = v313;
          *(_WORD *)&v362[4] = 1024;
          *(_DWORD *)&v362[6] = v314;
          uint64_t v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_486;
        }

        goto LABEL_596;
      }

      if (v14 == 1684107364) {
        goto LABEL_212;
      }
      if (v14 != 1684236338
        || a2[1] != 1869968496
        || !(*(unsigned int (**)(void))(**((void **)a1 + 126) + 336LL))(*((void *)a1 + 126)))
      {
        goto LABEL_300;
      }

      v39 = *a5;
      if (v39 < (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        v338 = (os_log_t *)sub_138E8(13);
        uint64_t v49 = *v338;
        if (*v338 && os_log_type_enabled(*v338, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          LODWORD(v352) = a2[2];
          sub_613AC((uint64_t)cf, (unsigned int *)&__p);
          v339 = cf[23];
          v340 = *(_BYTE **)cf;
          v341 = *a5;
          v342 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v343 = cf;
          *(_DWORD *)buf = 136316162;
          *(void *)&buf[4] = "VirtualAudio_Device.cpp";
          if (v339 < 0) {
            v343 = v340;
          }
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2401;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v343;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)v362 = v341;
          *(_WORD *)&v362[4] = 1024;
          *(_DWORD *)&v362[6] = v342;
          uint64_t v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_486;
        }

        goto LABEL_596;
      }

      UInt32 v40 = (*(uint64_t (**)(void))(**((void **)a1 + 126) + 344LL))(*((void *)a1 + 126));
LABEL_351:
      *(void *)a6 = v40;
      goto LABEL_215;
    }

    if (v14 <= 1685287010)
    {
      if (v14 > 1685087595)
      {
        v15 = 1685087596;
        goto LABEL_211;
      }

      if (v14 == 1684500594 || v14 == 1684893796) {
        goto LABEL_212;
      }
      if (v14 != 1685025633) {
        goto LABEL_300;
      }
      v32 = (void *)*((void *)a1 + 65);
      if (((*((void *)a1 + 66) - (void)v32) & 0x7FFFFFFF8LL) != 0)
      {
LABEL_76:
        (*(void (**)(void, int *, uint64_t, const void *, UInt32 *, double *))(*(void *)*v32 + 56LL))( *v32,  a2,  a3,  a4,  a5,  a6);
        goto LABEL_215;
      }

LABEL_109:
  if ((v173 & 1) == 0)
  {
    if (!v83) {
      return;
    }
    goto LABEL_118;
  }

    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      uint64_t v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }

    goto LABEL_113;
  }

        sub_1269B4(v16 + 16, v35, (void *)(v16 + 16));
      }

      goto LABEL_69;
    }

    BOOL v29 = 28001;
LABEL_50:
    if (v28 != (v29 | 0x63650000)) {
      goto LABEL_69;
    }
    v30 = v16 + 16;
    v31 = *(void **)(v16 + 24);
    v32 = (void *)(v16 + 16);
    if (v31 != (void *)(v16 + 16))
    {
      while ((sub_126A30(v31 + 2) & 1) == 0)
      {
        v31 = (void *)v31[1];
        if (v31 == (void *)v30)
        {
          v32 = (void *)(v16 + 16);
          goto LABEL_67;
        }
      }

      v32 = (void *)(v16 + 16);
      if (v31 != (void *)v30)
      {
        uint64_t v36 = v31[1];
        v32 = v31;
        while (v36 != v30)
        {
          if ((sub_126A30((uint64_t *)(v36 + 16)) & 1) == 0)
          {
            sub_126940((uint64_t)(v32 + 2), (__int128 *)(v36 + 16));
            v32 = (void *)v32[1];
          }

          uint64_t v36 = *(void *)(v36 + 8);
        }
      }
    }

          sub_2DBF5C((uint64_t)v52);
LABEL_110:
          sub_149990(&v53);
LABEL_111:
          result = sub_2DBF5C((uint64_t)v56);
          v3 = (uint64_t **)*v3;
          if (!v3) {
            return result;
          }
          break;
        case 18:
          v25 = *(void *)(sub_2DC354(v56) + 24);
          if (!v25) {
            sub_82CEC();
          }
          (*(void (**)(_BYTE *__return_ptr))(*(void *)v25 + 48LL))(buf);
          sub_1FD148(buf, a2);
          sub_D0C4C(*(void **)&v68[2]);
          v26 = *(void **)buf;
          *(void *)buf = 0LL;
          if (v26) {
            operator delete(v26);
          }
          goto LABEL_111;
        default:
          v14 = (os_log_t *)sub_138E8(24);
          v15 = *v14;
          if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "RouteUtilities.cpp";
            uint64_t v67 = 1024;
            *(_DWORD *)uint64_t v68 = 199;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v6;
            _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP property type (%d) is not supported.",  buf,  0x18u);
          }

          goto LABEL_111;
      }
    }
  }

  return result;
}

    v79 = *(void *)(v12 + 56);
    sub_DB44C((uint64_t)buf, 1, *(_DWORD *)(a2 + 12), *(_DWORD *)(v304 + 264));
    sub_2D9354(&v315, v79, (uint64_t)buf);
    if (*(void *)&buf[32])
    {
      v314 = *(void *)&buf[32];
      operator delete(*(void **)&buf[32]);
    }

    if (v316)
    {
      *(void *)buf = v305;
      *(void *)&buf[8] = v306;
      if (v306)
      {
        uint64_t v80 = (unint64_t *)&v306->__shared_weak_owners_;
        do
          uint64_t v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }

      *(_OWORD *)v287 = v304;
      if (*((void *)&v304 + 1))
      {
        char v82 = (unint64_t *)(*((void *)&v304 + 1) + 16LL);
        do
          int v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }

      if (!v316) {
        sub_8DEEC();
      }
      int v84 = (void *)(*(uint64_t (**)(uint64_t, _BYTE *, std::__shared_weak_count **, std::string *))(*(void *)a1 + 40LL))( a1,  buf,  v287,  &v315);
      if (v287[1]) {
        std::__shared_weak_count::__release_weak(v287[1]);
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
      }
      sub_1D8544((void **)v293 + 17, v84);
    }

    sub_1BCA68(a2, a3);
    (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))(*(void *)&v30->_os_unfair_lock_opaque
                                                                                        + 248LL))( &v291,  v30,  1LL,  v14);
    (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, void, void))(*(void *)&v16->_os_unfair_lock_opaque
                                                                                      + 256LL))( &v289,  v16,  0LL,  v265);
    if (!v292 || v292->__shared_owners_ == -1)
    {
      v227 = (os_log_t *)sub_138E8(13);
      v228 = *v227;
      if (*v227 && os_log_type_enabled(*v227, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 377;
        _os_log_impl( &dword_0,  v228,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control.",  buf,  0x12u);
      }

      v229 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v229, "Unable to locate mute control.");
    }

    v287[0] = 0LL;
    v287[1] = 0LL;
    v288 = 0LL;
    v286 = 0uLL;
    int v85 = sub_1BB104(a2, a5, 0LL);
    uint64_t v86 = (v85 & 0xFF00000000LL) != 0 && (_DWORD)v85 == 2;
    uint64_t v87 = v86;
    if (v86)
    {
      v88 = operator new(0x110uLL);
      v88[1] = 0LL;
      v88[2] = 0LL;
      double *v88 = off_4823F0;
      *(void *)&v286 = sub_2C8FE4((uint64_t)(v88 + 3));
      *((void *)&v286 + 1) = v88;
      int v89 = *(void *)(v12 + 56);
      LOBYTE(__p[0]) = 0;
      v285 = 0;
      sub_1B1E64(v286, (uint64_t)v293, (unsigned int *)v304, v89, a2, 0LL, (uint64_t)__p);
      if (v285 && __p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }

      goto LABEL_189;
    }

    if ((sub_1BB104(a2, a5, 1LL) & 0xFF00000000LL) != 0)
    {
      unint64_t v90 = sub_1F6EF0(v304);
      int v91 = v293;
      if (v90)
      {
        sub_1B2A3C(v283, a2, (uint64_t)v293, v304, *(void *)(v12 + 56), a3);
        if (!v283[0])
        {
          v262 = (os_log_t *)sub_138E8(13);
          v263 = *v262;
          if (*v262 && os_log_type_enabled(*v262, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 397;
            _os_log_impl( &dword_0,  v263,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control",  buf,  0x12u);
          }

          v264 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v264, "Unable to locate volume control");
        }

        int v92 = v287[1];
        if (v287[1] >= v288)
        {
          uint64_t v114 = ((char *)v287[1] - (char *)v287[0]) >> 4;
          float v115 = v114 + 1;
          float v116 = (char *)v288 - (char *)v287[0];
          else {
            int v117 = v115;
          }
          *(void *)&buf[32] = &v288;
          uint64_t v118 = (char *)sub_7BE90(v117);
          v120 = &v118[16 * v114];
          uint64_t v121 = v283[1];
          *(_OWORD *)v120 = *(_OWORD *)v283;
          if (v121)
          {
            int v122 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }

          v125 = v287[0];
          v124 = v287[1];
          if (v287[1] == v287[0])
          {
            v128 = vdupq_n_s64((unint64_t)v287[1]);
            unint64_t v126 = (std::__shared_weak_count *)&v118[16 * v114];
          }

          else
          {
            unint64_t v126 = (std::__shared_weak_count *)&v118[16 * v114];
            do
            {
              unint64_t v127 = *(_OWORD *)&v124[-1].__shared_owners_;
              v124 = (std::__shared_weak_count *)((char *)v124 - 16);
              *(_OWORD *)&v126[-1].__shared_owners_ = v127;
              unint64_t v126 = (std::__shared_weak_count *)((char *)v126 - 16);
              v124->__vftable = 0LL;
              v124->__shared_owners_ = 0LL;
            }

            while (v124 != v125);
            v128 = *(int64x2_t *)v287;
          }

          unsigned int v96 = (std::__shared_weak_count *)(v120 + 16);
          v287[0] = v126;
          v287[1] = (std::__shared_weak_count *)(v120 + 16);
          *(int64x2_t *)&buf[8] = v128;
          v223 = v288;
          v288 = (std::__shared_weak_count *)&v118[16 * v119];
          *(void *)&buf[24] = v223;
          *(void *)buf = v128.i64[0];
          sub_A0D64((uint64_t)buf);
        }

        else
        {
          v287[1]->__vftable = (std::__shared_weak_count_vtbl *)v283[0];
          int v93 = v283[1];
          v92->__shared_owners_ = (uint64_t)v283[1];
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              unsigned int v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }

          unsigned int v96 = (std::__shared_weak_count *)&v92->__shared_weak_owners_;
        }

        v287[1] = v96;
        v224 = v283[1];
        if (v283[1])
        {
          v225 = &v283[1]->__shared_owners_;
          do
            v226 = __ldaxr((unint64_t *)v225);
          while (__stlxr(v226 - 1, (unint64_t *)v225));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            unsigned int v134 = v224;
LABEL_188:
            std::__shared_weak_count::__release_weak(v134);
          }
        }

LABEL_110:
  uint64_t v86 = sub_45C8(v174, 1, 0);
  if (*(_DWORD *)(v86 + 8) == 1819304813)
  {
    uint64_t v87 = *(void *)(a1 + 88);
    *(_OWORD *)buf = xmmword_403250;
    if (v87) {
      sub_75260(v87, buf, (uint64_t)v59, v171, (uint64_t)*a7);
    }
    sub_4974(a1 + 144, *(unsigned int *)(v86 + 200), (uint64_t)v59, v171, (uint64_t)a7);
  }

  if ((v83 & 1) == 0)
  {
    v88 = (double *)sub_45C8(v174, 1, 0);
    int v89 = 0;
    if (!v85) {
      goto LABEL_258;
    }
LABEL_128:
    if (v85 - 1 >= 2)
    {
      if (v85 == 3)
      {
        unint64_t v103 = v59->mNumberBuffers;
        if ((_DWORD)v103)
        {
          unint64_t v104 = 0LL;
          v105 = &v59->mBuffers[0].mData;
          do
          {
            if (*v105)
            {
              bzero(*v105, *((unsigned int *)v105 - 1));
              unint64_t v103 = v59->mNumberBuffers;
            }

            ++v104;
            v105 += 2;
          }

          while (v104 < v103);
        }
      }

      else
      {
        v107 = (os_log_t *)sub_138E8(13);
        v108 = *v107;
        if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 949;
          _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected policy mute action",  buf,  0x12u);
        }
      }
    }

    else
    {
      int v178 = 0;
      BOOL v177 = 0;
      if (!sub_7A0F8(v88, &v178, &v177))
      {
LABEL_200:
        *(_BYTE *)(a1 + 637) = v85 != 1;
        if (v85 != 1)
        {
          unint64_t v126 = v59->mNumberBuffers;
          if ((_DWORD)v126)
          {
            unint64_t v127 = 0LL;
            v128 = &v59->mBuffers[0].mData;
            do
            {
              if (*v128)
              {
                bzero(*v128, *((unsigned int *)v128 - 1));
                unint64_t v126 = v59->mNumberBuffers;
              }

              ++v127;
              v128 += 2;
            }

            while (v127 < v126);
          }
        }

        goto LABEL_258;
      }

      if (v178 != 1)
      {
        if (v178 == 3)
        {
          int v122 = *((_DWORD *)v88 + 7);
          if (v177 || v122 == 1)
          {
            mData = (int *)v59->mBuffers[0].mData;
            unsigned int v130 = (*v88 * 0.03);
            if (v130 >= v171) {
              unsigned int v131 = v171;
            }
            else {
              unsigned int v131 = (*v88 * 0.03);
            }
            signed int v132 = 0x1000000 / v131;
            int v133 = *(unsigned __int8 *)(a1 + 637);
            if (!*(_BYTE *)(a1 + 637)) {
              signed int v132 = -v132;
            }
            unsigned int v134 = (*(_BYTE *)(a1 + 637) == 0) << 24;
            if (v122 == 1)
            {
              unint64_t v155 = v132 + (unint64_t)v134;
              unsigned int v156 = v131;
              v157 = mData;
              do
              {
                int *v157 = (v155 * *v157) >> 24;
                ++v157;
                v155 += v132;
                --v156;
              }

              while (v156);
            }

            else if (v122 == 2)
            {
              unint64_t v135 = v132 + (unint64_t)v134;
              unsigned int v136 = v131;
              v137 = mData;
              do
              {
                unint64_t v138 = (v135 * v137[1]) >> 24;
                int *v137 = (v135 * *v137) >> 24;
                v137[1] = v138;
                v137 += 2;
                v135 += v132;
                --v136;
              }

              while (v136);
            }

            else
            {
              v158 = (os_log_t *)sub_138E8(13);
              v159 = *v158;
              if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1294;
                _os_log_impl( &dword_0,  v159,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected number of channels",  buf,  0x12u);
              }
            }

            if (!v133)
            {
              if (v171 > v130)
              {
                size_t v144 = 4 * v122 * (v171 - v131);
                v145 = (__int16 *)&mData[v131 * v122];
                goto LABEL_255;
              }

            sub_32C38(v9, (uint64_t)v61, v62, (uint64_t *)v59);
            *(void *)buf = 0LL;
            sub_2D2F00((uint64_t)buf);
            uint64_t v63 = (void *)v10[1];
            if (v63)
            {
              do
              {
                uint64_t v64 = v63;
                uint64_t v63 = (void *)*v63;
              }

              while (v63);
            }

            else
            {
              do
              {
                uint64_t v64 = (void *)v10[2];
                int v57 = *v64 == (void)v10;
                __int16 v10 = v64;
              }

              while (!v57);
            }

            __int16 v10 = v64;
          }

          while (v64 != v78);
        }
      }

      int v65 = (void *)i[1];
      if (v65)
      {
        do
        {
          v66 = v65;
          int v65 = (void *)*v65;
        }

        while (v65);
      }

      else
      {
        do
        {
          v66 = (void *)i[2];
          int v57 = *v66 == (void)i;
          uint64_t i = v66;
        }

        while (!v57);
      }

      uint64_t i = v66;
    }

    while (v66 != v73);
  }

  sub_55C64(v7);
  sub_55C64(v7);
  return a1;
}

LABEL_256:
              char v160 = 1;
              goto LABEL_257;
            }

LABEL_252:
            char v160 = 0;
LABEL_257:
            *(_BYTE *)(a1 + 637) = v160;
            goto LABEL_258;
          }
        }

        else if (v178 == 2)
        {
          int v93 = *((_DWORD *)v88 + 7);
          if (v177 || v93 == 1)
          {
            v94 = (__int16 *)v59->mBuffers[0].mData;
            unsigned int v95 = (*v88 * 0.03);
            if (v95 >= v171) {
              unsigned int v96 = v171;
            }
            else {
              unsigned int v96 = (*v88 * 0.03);
            }
            LODWORD(v97) = 0x8000 / v96;
            int v98 = *(unsigned __int8 *)(a1 + 637);
            if (*(_BYTE *)(a1 + 637)) {
              uint64_t v97 = v97;
            }
            else {
              uint64_t v97 = -(int)v97;
            }
            uint64_t v99 = (*(_BYTE *)(a1 + 637) == 0) << 15;
            if (v93 == 1)
            {
              uint64_t v139 = v99 + v97;
              unsigned int v140 = v96;
              v141 = v94;
              do
              {
                __int16 *v141 = (v139 * *v141) >> 15;
                ++v141;
                v139 += v97;
                --v140;
              }

              while (v140);
            }

            else if (v93 == 2)
            {
              uint64_t v100 = v99 + v97;
              unsigned int v101 = v96;
              v102 = v94;
              do
              {
                __int16 *v102 = (v100 * *v102) >> 15;
                v102[1] = (v100 * v102[1]) >> 15;
                v100 += v97;
                v102 += 2;
                --v101;
              }

              while (v101);
            }

            else
            {
              v142 = (os_log_t *)sub_138E8(13);
              v143 = *v142;
              if (*v142 && os_log_type_enabled(*v142, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1294;
                _os_log_impl( &dword_0,  v143,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected number of channels",  buf,  0x12u);
              }
            }

            if (!v98)
            {
              if (v171 > v95)
              {
                size_t v144 = 2 * v93 * (v171 - v96);
                v145 = &v94[v96 * v93];
LABEL_255:
                bzero(v145, v144);
                goto LABEL_256;
              }

              goto LABEL_256;
            }

            goto LABEL_252;
          }
        }

        goto LABEL_193;
      }

      if (v177 && *((_DWORD *)v88 + 7) != 1)
      {
LABEL_193:
        v123 = (os_log_t *)sub_138E8(16);
        v124 = *v123;
        if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CC00(&__p, (uint64_t)v88);
          v125 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 923;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v125;
          _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Policy mute ramping unsupported for given stream format: %s",  buf,  0x1Cu);
        }

        goto LABEL_200;
      }

      unsigned int v113 = (*v88 * 0.03);
      if (v113 >= v171) {
        uint64_t v114 = v171;
      }
      else {
        uint64_t v114 = v113;
      }
      float v115 = 1.0;
      float v116 = 1.0 / (float)v114;
      int v117 = *(unsigned __int8 *)(a1 + 637);
      if (*(_BYTE *)(a1 + 637)) {
        float v115 = 0.0;
      }
      else {
        float v116 = -v116;
      }
      uint64_t v118 = v59->mNumberBuffers;
      if ((_DWORD)v118 == 1)
      {
        if ((_DWORD)v114)
        {
          v146 = (float *)v59->mBuffers[0].mData;
          uint64_t v147 = v114;
          do
          {
            float v115 = v116 + v115;
            float *v146 = v115 * *v146;
            ++v146;
            --v147;
          }

          while (v147);
        }
      }

      else if ((_DWORD)v118 == 2)
      {
        if ((_DWORD)v114)
        {
          v119 = (float *)v59->mBuffers[0].mData;
          v120 = *(float **)&v59[1].mBuffers[0].mNumberChannels;
          uint64_t v121 = v114;
          do
          {
            float v115 = v116 + v115;
            float *v119 = v115 * *v119;
            ++v119;
            float *v120 = v115 * *v120;
            ++v120;
            --v121;
          }

          while (v121);
        }
      }

      else if ((_DWORD)v114)
      {
        for (uint64_t j = 0LL; j != v114; ++j)
        {
          float v115 = v116 + v115;
          v149 = &v59->mBuffers[0].mData;
          uint64_t v150 = v118;
          if ((_DWORD)v118)
          {
            do
            {
              v151 = (float *)*v149;
              v149 += 2;
              v151[j] = v115 * v151[j];
              --v150;
            }

            while (v150);
          }
        }
      }

      if (v117)
      {
        char v152 = 0;
      }

      else
      {
        char v152 = 1;
        if (v171 > v113 && (_DWORD)v118)
        {
          unint64_t v153 = 0LL;
          uint64_t v154 = 16LL;
          do
          {
            bzero( (void *)(*(void *)((char *)&v59->mNumberBuffers + v154) + 4 * v114),  4 * (v171 - v114));
            ++v153;
            v154 += 16LL;
          }

          while (v153 < v59->mNumberBuffers);
          char v152 = 1;
        }
      }

      *(_BYTE *)(a1 + 637) = v152;
    }

      *(_DWORD *)a6 = v51;
      goto LABEL_266;
    }

    if (v13 <= 1684826731)
    {
      if (v13 > 1651797099)
      {
        if (v13 > 1651798885)
        {
          if (v13 != 1651798886)
          {
            uint64_t v20 = 1668051827;
            goto LABEL_166;
          }

          goto LABEL_167;
        }

        if (v13 == 1651797100) {
          goto LABEL_167;
        }
        uint64_t v19 = 28787;
      }

      else
      {
        if (v13 > 1651796324)
        {
          uint64_t v36 = v13 - 1651796325;
          if (v36 > 0xE || ((1 << v36) & 0x4801) == 0) {
            goto LABEL_277;
          }
          goto LABEL_167;
        }

        if (v13 == 1650551140 || v13 == 1651271025)
        {
LABEL_167:
          int v52 = *a5;
          if (v52 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            unsigned int v131 = (os_log_t *)sub_138E8(13);
            signed int v132 = *v131;
            if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_ERROR))
            {
              Mutable = *(CFTypeRef *)a2;
              v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v133 = v486;
              unsigned int v134 = (CFTypeRef *)v484;
              unint64_t v135 = *a5;
              unsigned int v136 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v137 = &v484;
              *(_DWORD *)cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v133 < 0) {
                v137 = v134;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 961;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v137;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)v488 = v135;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v136;
              _os_log_impl( &dword_0,  v132,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            unint64_t v138 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v138 = &off_4865A0;
            v138[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 962);
          (*(void (**)(void, unsigned int *, uint64_t, unsigned int *, unsigned int *, void *))(**(void **)cf + 40LL))( *(void *)cf,  a2,  a3,  a4,  a5,  a6);
          int v53 = *(std::__shared_weak_count **)&cf[8];
          if (*(void *)&cf[8])
          {
            v54 = (unint64_t *)(*(void *)&cf[8] + 8LL);
            do
              uint64_t v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }

          return;
        }

        uint64_t v19 = 24946;
      }

      uint64_t v20 = v19 | 0x62740000;
      goto LABEL_166;
    }

    if (v13 > 1685484389)
    {
      if (v13 > 1752462194)
      {
        if (v13 != 1752462195 && v13 != 1767989616)
        {
          uint64_t v20 = 1768382832;
          goto LABEL_166;
        }

        goto LABEL_167;
      }

      if (v13 == 1685484390) {
        goto LABEL_167;
      }
      if (v13 != 1752327777) {
        goto LABEL_277;
      }
      uint64_t v56 = *a5;
      if (v56 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        v251 = (os_log_t *)sub_138E8(13);
        v252 = *v251;
        if (*v251 && os_log_type_enabled(*v251, OS_LOG_TYPE_ERROR))
        {
          Mutable = *(CFTypeRef *)a2;
          v481 = a2[2];
          sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
          v253 = v486;
          v254 = (CFTypeRef *)v484;
          v255 = *a5;
          v256 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v257 = &v484;
          *(_DWORD *)cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v253 < 0) {
            v257 = v254;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 965;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v257;
          *(_WORD *)&cf[28] = 1024;
          *(_DWORD *)v488 = v255;
          *(_WORD *)&v488[4] = 1024;
          *(_DWORD *)&v488[6] = v256;
          _os_log_impl( &dword_0,  v252,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v486 < 0) {
            operator delete((void *)v484);
          }
        }

        v258 = __cxa_allocate_exception(0x10uLL);
        *(void *)v258 = &off_4865A0;
        v258[2] = 561211770;
      }

      sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 966);
      LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 496LL))(*(void *)cf);
    }

    else
    {
      if (v13 > 1685088611)
      {
        switch(v13)
        {
          case 1685088612:
            uint64_t v87 = *a5;
            if (v87 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              v379 = (os_log_t *)sub_138E8(13);
              v380 = *v379;
              if (*v379 && os_log_type_enabled(*v379, OS_LOG_TYPE_ERROR))
              {
                Mutable = *(CFTypeRef *)a2;
                v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                v381 = v486;
                v382 = (CFTypeRef *)v484;
                v383 = *a5;
                v384 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                v385 = &v484;
                *(_DWORD *)cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v381 < 0) {
                  v385 = v382;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 986;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v385;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)v488 = v383;
                *(_WORD *)&v488[4] = 1024;
                *(_DWORD *)&v488[6] = v384;
                _os_log_impl( &dword_0,  v380,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa ssed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              v386 = __cxa_allocate_exception(0x10uLL);
              *(void *)v386 = &off_4865A0;
              v386[2] = 561211770;
            }

            sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 988);
            if ((*(unsigned int (**)(CFTypeRef))(*(void *)v484 + 424LL))(v484))
            {
              sub_B8CBC((uint64_t *)&Mutable, (uint64_t *)(a1 + 88), "", 989);
              (*(void (**)(_BYTE *__return_ptr))(*(void *)Mutable + 440LL))(cf);
              if (cf[23] >= 0) {
                v88 = cf;
              }
              else {
                v88 = *(const UInt8 **)cf;
              }
              if (cf[23] >= 0) {
                int v89 = cf[23];
              }
              else {
                int v89 = *(void *)&cf[8];
              }
              sub_D4EC8(valuePtr, v88, v89);
              *a6 = valuePtr[0];
              sub_7A738((const void **)valuePtr);
              if ((cf[23] & 0x80000000) != 0) {
                operator delete(*(void **)cf);
              }
              sub_7A768((uint64_t)&Mutable);
            }

            else
            {
              *a6 = 0LL;
            }

            goto LABEL_290;
          case 1685287026:
            unsigned int v95 = *a5;
            if (v95 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              v419 = (os_log_t *)sub_138E8(13);
              v420 = *v419;
              if (*v419 && os_log_type_enabled(*v419, OS_LOG_TYPE_ERROR))
              {
                Mutable = *(CFTypeRef *)a2;
                v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                v421 = v486;
                v422 = (CFTypeRef *)v484;
                v423 = *a5;
                v424 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                v425 = &v484;
                *(_DWORD *)cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v421 < 0) {
                  v425 = v422;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 890;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v425;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)v488 = v423;
                *(_WORD *)&v488[4] = 1024;
                *(_DWORD *)&v488[6] = v424;
                _os_log_impl( &dword_0,  v420,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa ssed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              v426 = __cxa_allocate_exception(0x10uLL);
              *(void *)v426 = &off_4865A0;
              v426[2] = 561211770;
            }

            if ((_DWORD)a3 != 8 || !a4)
            {
              v463 = (os_log_t *)sub_138E8(13);
              v464 = *v463;
              if (*v463 && os_log_type_enabled(*v463, OS_LOG_TYPE_ERROR))
              {
                Mutable = *(CFTypeRef *)a2;
                v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                v465 = v486 >= 0 ? &v484 : (CFTypeRef *)v484;
                *(_DWORD *)cf = 136316674;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 891;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v465;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)v488 = 8;
                *(_WORD *)&v488[4] = 2080;
                *(void *)&v488[6] = "non-";
                v489 = 1024;
                *(_DWORD *)v490 = a3;
                *(_WORD *)&v490[4] = 2048;
                *(void *)&v490[6] = a4;
                _os_log_impl( &dword_0,  v464,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                  cf,
                  0x3Cu);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              v466 = __cxa_allocate_exception(0x10uLL);
              *(void *)v466 = &off_4865A0;
              v466[2] = 561211770;
            }

            *(float *)a6 = sub_278CCC(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), *a4, a4[1]);
            break;
          case 1685287027:
            unint64_t v24 = *a5;
            if (v24 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              char v163 = (os_log_t *)sub_138E8(13);
              unint64_t v164 = *v163;
              if (*v163 && os_log_type_enabled(*v163, OS_LOG_TYPE_ERROR))
              {
                Mutable = *(CFTypeRef *)a2;
                v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                v165 = v486;
                uint64_t v166 = (CFTypeRef *)v484;
                uint64_t v167 = *a5;
                char v168 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                v169 = &v484;
                *(_DWORD *)cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v165 < 0) {
                  v169 = v166;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 877;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v169;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)v488 = v167;
                *(_WORD *)&v488[4] = 1024;
                *(_DWORD *)&v488[6] = v168;
                _os_log_impl( &dword_0,  v164,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa ssed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              unint64_t v170 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v170 = &off_4865A0;
              v170[2] = 561211770;
            }

            if ((_DWORD)a3 != 8 || !a4)
            {
              v459 = (os_log_t *)sub_138E8(13);
              v460 = *v459;
              if (*v459 && os_log_type_enabled(*v459, OS_LOG_TYPE_ERROR))
              {
                Mutable = *(CFTypeRef *)a2;
                v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                v461 = v486 >= 0 ? &v484 : (CFTypeRef *)v484;
                *(_DWORD *)cf = 136316674;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 879;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v461;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)v488 = 8;
                *(_WORD *)&v488[4] = 2080;
                *(void *)&v488[6] = "non-";
                v489 = 1024;
                *(_DWORD *)v490 = a3;
                *(_WORD *)&v490[4] = 2048;
                *(void *)&v490[6] = a4;
                _os_log_impl( &dword_0,  v460,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                  cf,
                  0x3Cu);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              v462 = __cxa_allocate_exception(0x10uLL);
              *(void *)v462 = &off_4865A0;
              v462[2] = 561211770;
            }

            *(_DWORD *)a6 = sub_278B1C(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), *a4, a4[1]);
            break;
          default:
            goto LABEL_277;
        }

        return;
      }

      if (v13 == 1684826732) {
        goto LABEL_167;
      }
      if (v13 != 1685021040) {
        goto LABEL_277;
      }
      sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 982);
      LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 424LL))(*(void *)cf);
    }

    goto LABEL_265;
  }

  if (v13 > 1936746610)
  {
    if (v13 > 1953653605)
    {
      if (v13 > 1986164322)
      {
        if (v13 <= 1986947427)
        {
          if (v13 != 1986164323)
          {
            uint64_t v20 = 1986814563;
            goto LABEL_166;
          }
        }

        else if (v13 != 1986947428)
        {
          if (v13 == 2004050279)
          {
            Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
            LOWORD(v481) = 257;
            sub_B8CBC((uint64_t *)valuePtr, (uint64_t *)(a1 + 88), "", 972);
            (*((void (**)(_BYTE *__return_ptr))valuePtr[0]->isa + 34))(cf);
            sub_D4DA0((uint64_t *)&v484, (uint64_t)cf, "", 972);
            sub_85B80((uint64_t *)cf);
            sub_7A768((uint64_t)valuePtr);
            for (uint64_t i = v485; (CFTypeRef *)i != &v484; uint64_t i = *(void *)(i + 8))
            {
              uint64_t v80 = *(void *)(a1 + 80);
              uint64_t v81 = *(void *)(i + 16);
              memset(cf, 0, 24);
              strcpy(&cf[24], "cwdv");
              v488[2] = 0;
              *(_DWORD *)&v488[10] = 3;
              *(void *)&v490[10] = 0LL;
              v491 = 0LL;
              *(void *)&v490[2] = &v490[10];
              v492 = 44739242;
              v493 = 0LL;
              char v82 = sub_578E8(*(void *)(v80 + 128), v81, (uint64_t)cf);
              if (v493) {
                CFRelease(v493);
              }
              sub_32C8C(*(void **)&v490[10]);
              if (*(void *)cf)
              {
                *(void *)&cf[8] = *(void *)cf;
                operator delete(*(void **)cf);
              }

              sub_1378C((uint64_t)&Mutable, v82);
            }

            sub_1BB88((uint64_t *)&v484);
            if (Mutable)
            {
              CFRetain(Mutable);
              int v83 = Mutable;
            }

            else
            {
              int v83 = 0LL;
            }

            *a6 = v83;
            p_Mutable = &Mutable;
            goto LABEL_273;
          }

          uint64_t v20 = 2004054901;
          goto LABEL_166;
        }

        goto LABEL_167;
      }

      if (v13 > 1953719141)
      {
        if (v13 == 1953719142)
        {
          v61 = *a5;
          if (v61 < (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            v267 = (os_log_t *)sub_138E8(13);
            v268 = *v267;
            if (*v267 && os_log_type_enabled(*v267, OS_LOG_TYPE_ERROR))
            {
              Mutable = *(CFTypeRef *)a2;
              v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              v269 = v486;
              v270 = (CFTypeRef *)v484;
              v271 = *a5;
              v272 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v273 = &v484;
              *(_DWORD *)cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v269 < 0) {
                v273 = v270;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 861;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v273;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)v488 = v271;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v272;
              _os_log_impl( &dword_0,  v268,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            v274 = __cxa_allocate_exception(0x10uLL);
            *(void *)v274 = &off_4865A0;
            v274[2] = 561211770;
          }

          sub_380024((uint64_t *)cf);
          v62 = *(void *)cf;
          *(void *)cf = 0LL;
          *a6 = v62;
          sub_7A6D8((const void **)cf);
          return;
        }

        if (v13 != 1970040164)
        {
          uint64_t v20 = 1970496630;
          goto LABEL_166;
        }

        goto LABEL_167;
      }

      if (v13 != 1953653606)
      {
        if (v13 != 1953655149) {
          goto LABEL_277;
        }
        v48 = *a5;
        if (v48 < (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          v227 = (os_log_t *)sub_138E8(13);
          v228 = *v227;
          if (*v227 && os_log_type_enabled(*v227, OS_LOG_TYPE_ERROR))
          {
            Mutable = *(CFTypeRef *)a2;
            v481 = a2[2];
            sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
            v229 = v486;
            v230 = (CFTypeRef *)v484;
            v231 = *a5;
            v232 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            v233 = &v484;
            *(_DWORD *)cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v229 < 0) {
              v233 = v230;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 851;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v233;
            *(_WORD *)&cf[28] = 1024;
            *(_DWORD *)v488 = v231;
            *(_WORD *)&v488[4] = 1024;
            *(_DWORD *)&v488[6] = v232;
            _os_log_impl( &dword_0,  v228,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
              cf,
              0x28u);
            if (v486 < 0) {
              operator delete((void *)v484);
            }
          }

          v234 = __cxa_allocate_exception(0x10uLL);
          *(void *)v234 = &off_4865A0;
          v234[2] = 561211770;
        }

        sub_D4CB0(a1, a5, a6);
        return;
      }

      int v69 = *a5;
      if (v69 < (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        v307 = (os_log_t *)sub_138E8(13);
        v308 = *v307;
        if (*v307 && os_log_type_enabled(*v307, OS_LOG_TYPE_ERROR))
        {
          Mutable = *(CFTypeRef *)a2;
          v481 = a2[2];
          sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
          v309 = v486;
          v310 = (CFTypeRef *)v484;
          v311 = *a5;
          v312 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v313 = &v484;
          *(_DWORD *)cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v309 < 0) {
            v313 = v310;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 856;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v313;
          *(_WORD *)&cf[28] = 1024;
          *(_DWORD *)v488 = v311;
          *(_WORD *)&v488[4] = 1024;
          *(_DWORD *)&v488[6] = v312;
          _os_log_impl( &dword_0,  v308,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
            cf,
            0x28u);
          if (v486 < 0) {
            operator delete((void *)v484);
          }
        }

        v314 = __cxa_allocate_exception(0x10uLL);
        *(void *)v314 = &off_4865A0;
        v314[2] = 561211770;
      }

      sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 857);
      sub_2038A4((uint64_t *)&v484, *(uint64_t *)cf);
      v70 = v484;
      v484 = 0LL;
      *a6 = v70;
      sub_7A6D8(&v484);
    }

    else
    {
      if (v13 <= 1936749679)
      {
        if (v13 > 1936748140)
        {
          if (v13 != 1936748141)
          {
            if (v13 == 1936748656)
            {
              uint64_t v42 = *a5;
              if (v42 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
              {
                v211 = (os_log_t *)sub_138E8(13);
                v212 = *v211;
                if (*v211 && os_log_type_enabled(*v211, OS_LOG_TYPE_ERROR))
                {
                  Mutable = *(CFTypeRef *)a2;
                  v481 = a2[2];
                  sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                  v213 = v486;
                  v214 = (CFTypeRef *)v484;
                  v215 = *a5;
                  v216 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                  v217 = &v484;
                  *(_DWORD *)cf = 136316162;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  if (v213 < 0) {
                    v217 = v214;
                  }
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 845;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v217;
                  *(_WORD *)&cf[28] = 1024;
                  *(_DWORD *)v488 = v215;
                  *(_WORD *)&v488[4] = 1024;
                  *(_DWORD *)&v488[6] = v216;
                  _os_log_impl( &dword_0,  v212,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size(passed: %u; required: %u).",
                    cf,
                    0x28u);
                  if (v486 < 0) {
                    operator delete((void *)v484);
                  }
                }

                v218 = __cxa_allocate_exception(0x10uLL);
                *(void *)v218 = &off_4865A0;
                v218[2] = 561211770;
              }

              sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 847);
              UInt32 v43 = v484;
              v44 = a2[2];
              Mutable = (CFTypeRef)sub_D4ABC(a1);
              LODWORD(valuePtr[0]) = (*(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(void *)v43 + 248LL))( v43,  v44,  &Mutable);
              v45 = CFNumberCreate(0LL, kCFNumberSInt32Type, valuePtr);
              *(void *)cf = v45;
              cf[8] = 1;
              if (v45)
              {
                CFRetain(v45);
                v46 = *(void *)cf;
              }

              else
              {
                v46 = 0LL;
              }

              *a6 = v46;
              sub_1348C((uint64_t)cf);
              goto LABEL_290;
            }

            goto LABEL_277;
          }

          v66 = *a5;
          if (v66 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            v291 = (os_log_t *)sub_138E8(13);
            v292 = *v291;
            if (*v291 && os_log_type_enabled(*v291, OS_LOG_TYPE_ERROR))
            {
              Mutable = *(CFTypeRef *)a2;
              v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              v293 = v486;
              v294 = (CFTypeRef *)v484;
              v295 = *a5;
              v296 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v297 = &v484;
              *(_DWORD *)cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v293 < 0) {
                v297 = v294;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 827;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v297;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)v488 = v295;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v296;
              _os_log_impl( &dword_0,  v292,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            v298 = __cxa_allocate_exception(0x10uLL);
            *(void *)v298 = &off_4865A0;
            v298[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 828);
          (*(void (**)(_BYTE *__return_ptr, CFTypeRef, void))(*(void *)v484 + 240LL))(cf, v484, a2[2]);
          uint64_t v67 = *(const void **)cf;
          if (!*(void *)cf) {
            goto LABEL_288;
          }
          goto LABEL_261;
        }

        uint64_t v18 = 26739;
        goto LABEL_155;
      }

      if (v13 <= 1937204589)
      {
        if (v13 != 1936749680)
        {
          uint64_t v20 = 1936945763;
          goto LABEL_166;
        }

        uint64_t v71 = *a5;
        if (v71 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          v315 = (os_log_t *)sub_138E8(13);
          v316 = *v315;
          if (*v315 && os_log_type_enabled(*v315, OS_LOG_TYPE_ERROR))
          {
            Mutable = *(CFTypeRef *)a2;
            v481 = a2[2];
            sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
            v317 = v486;
            v318 = (CFTypeRef *)v484;
            v319 = *a5;
            v320 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            v321 = &v484;
            *(_DWORD *)cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v317 < 0) {
              v321 = v318;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 822;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v321;
            *(_WORD *)&cf[28] = 1024;
            *(_DWORD *)v488 = v319;
            *(_WORD *)&v488[4] = 1024;
            *(_DWORD *)&v488[6] = v320;
            _os_log_impl( &dword_0,  v316,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              cf,
              0x28u);
            if (v486 < 0) {
              operator delete((void *)v484);
            }
          }

          v322 = __cxa_allocate_exception(0x10uLL);
          *(void *)v322 = &off_4865A0;
          v322[2] = 561211770;
        }

        sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 823);
        LODWORD(v17) = (*(uint64_t (**)(void, void))(**(void **)cf + 232LL))(*(void *)cf, a2[2]);
        goto LABEL_265;
      }

      if (v13 == 1937204590) {
        goto LABEL_167;
      }
      if (v13 != 1952609377)
      {
        if (v13 == 1952740208)
        {
          uint64_t v27 = *a5;
          if (v27 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            v179 = (os_log_t *)sub_138E8(13);
            v180 = *v179;
            if (*v179 && os_log_type_enabled(*v179, OS_LOG_TYPE_ERROR))
            {
              Mutable = *(CFTypeRef *)a2;
              v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              v181 = v486;
              v182 = (CFTypeRef *)v484;
              v183 = *a5;
              v184 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v185 = &v484;
              *(_DWORD *)cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v181 < 0) {
                v185 = v182;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 866;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v185;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)v488 = v183;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v184;
              _os_log_impl( &dword_0,  v180,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            v186 = __cxa_allocate_exception(0x10uLL);
            *(void *)v186 = &off_4865A0;
            v186[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 867);
          (*(void (**)(_BYTE *__return_ptr))(*(void *)v484 + 368LL))(cf);
          v15 = *(const void **)cf;
          if (*(void *)cf) {
            goto LABEL_228;
          }
          goto LABEL_229;
        }

        goto LABEL_277;
      }

      BOOL v77 = *a5;
      if (v77 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        v347 = (os_log_t *)sub_138E8(13);
        v348 = *v347;
        if (*v347 && os_log_type_enabled(*v347, OS_LOG_TYPE_ERROR))
        {
          Mutable = *(CFTypeRef *)a2;
          v481 = a2[2];
          sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
          v349 = v486;
          v350 = (CFTypeRef *)v484;
          v351 = *a5;
          v352 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v353 = &v484;
          *(_DWORD *)cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v349 < 0) {
            v353 = v350;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 913;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v353;
          *(_WORD *)&cf[28] = 1024;
          *(_DWORD *)v488 = v351;
          *(_WORD *)&v488[4] = 1024;
          *(_DWORD *)&v488[6] = v352;
          _os_log_impl( &dword_0,  v348,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v486 < 0) {
            operator delete((void *)v484);
          }
        }

        v354 = __cxa_allocate_exception(0x10uLL);
        *(void *)v354 = &off_4865A0;
        v354[2] = 561211770;
      }

      sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 914);
      (*(void (**)(void, unsigned int *, uint64_t, unsigned int *, unsigned int *, void *))(**(void **)cf + 40LL))( *(void *)cf,  a2,  a3,  a4,  a5,  a6);
    }

LABEL_258:
    if (!v89)
    {
LABEL_262:
      if (*(_DWORD *)(sub_45C8(v174, 1, 0) + 8) == 1819304813)
      {
        uint64_t v162 = *(void *)(a1 + 88);
        *(_OWORD *)buf = xmmword_403260;
        if (v162) {
          sub_4784(v162, buf, (uint64_t)&a6[4 * v170 + 2]);
        }
      }

      char v163 = v173 ^ 1;
      if (!*(_BYTE *)(a1 + 364)) {
        char v163 = 1;
      }
      if ((v163 & 1) == 0 && *a6)
      {
        unint64_t v164 = 0LL;
        v165 = (void **)(a6 + 4);
        do
        {
          bzero(*v165, *((unsigned int *)v165 - 1));
          ++v164;
          v165 += 2;
        }

        while (v164 < *a6);
      }

      return;
    }

    goto LABEL_259;
  }

LABEL_118:
  sub_3014C(*(OpaqueAudioConverter **)(v81 + 584), v171, v59, v61);
  unint64_t v90 = *(void *)(a1 + 768);
  int v91 = sub_7531C() ^ 1;
  if (!HIDWORD(v90)) {
    int v91 = 1;
  }
  if (v91 == 1 && (v90 & 0xFFFFFFFD) == 1)
  {
    int v92 = sub_231EDC(*(_BYTE **)(a1 + 640), *(_BYTE **)(a1 + 648), 0);
    *(_DWORD *)buf = 1;
    *(_OWORD *)&buf[8] = *(_OWORD *)&v169[4 * v92 + 2];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)buf;
    (*(void (**)(uint64_t, double *, void, uint64_t, std::string *, uint64_t, AudioBufferList **))(*(void *)v81 + 144LL))( v81,  a7,  v171,  2LL,  &__p,  1LL,  v179);
  }

  else
  {
    (*(void (**)(uint64_t, double *, void, uint64_t, _BYTE *, uint64_t, AudioBufferList **))(*(void *)v81 + 144LL))( v81,  a7,  v171,  1LL,  v180,  1LL,  v179);
  }

  if (*(_DWORD *)(a1 + 268) != 1987277417) {
    (*(void (**)(uint64_t, double *))(*(void *)v81 + 152LL))(v81, a7);
  }
  sub_197EA0(*(void *)(v81 + 376), (uint64_t)a7);
  if (v173)
  {
    v59 = v179[0];
    v88 = (double *)(sub_45C8(v174, 1, 0) + 120);
    int v89 = 1;
    if (!v85) {
      goto LABEL_258;
    }
    goto LABEL_128;
  }

                    v70 = sub_138E8(13);
                    if ((*(_BYTE *)(v70 + 8) & 1) != 0)
                    {
                      uint64_t v71 = *(os_log_s **)v70;
                      if (*(void *)v70)
                      {
                        if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
                        {
                          std::string __p = inAddress;
                          sub_613AC((uint64_t)&v217, &__p.mSelector);
                          uint64_t v72 = v217.__cv_.__opaque[15] >= 0 ? &v217 : (std::condition_variable *)v217.__cv_.__sig;
                          buf.mSelector = 136315906;
                          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                          v208 = 1024;
                          v209 = 199;
                          v210 = 2080;
                          *(void *)v211 = v72;
                          *(_WORD *)&v211[8] = 1024;
                          *(_DWORD *)&v211[10] = v63;
                          _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
                          if (v217.__cv_.__opaque[15] < 0) {
                            operator delete((void *)v217.__cv_.__sig);
                          }
                        }
                      }
                    }

                    buf = inAddress;
                    int v73 = sub_90738(v63, &buf, v163, (int)v164);
                    if (!(_DWORD)v73)
                    {
                      LOBYTE(v76) = 1;
                      goto LABEL_158;
                    }

                    v74 = v73;
                    v75 = (os_log_t *)sub_138E8(13);
                    v76 = *v75;
                    if (!*v75) {
                      goto LABEL_158;
                    }
                    if (os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
                    {
                      sub_2CA1C(&v217, v74);
                      BOOL v77 = v217.__cv_.__opaque[15];
                      unint64_t v78 = v217.__cv_.__sig;
                      v194 = *(void **)&inAddress.mSelector;
                      LODWORD(v195) = inAddress.mElement;
                      sub_613AC((uint64_t)&__p, (unsigned int *)&v194);
                      v79 = &v217;
                      if (v77 < 0) {
                        v79 = (std::condition_variable *)v78;
                      }
                      if (v186 >= 0) {
                        p_p = &__p;
                      }
                      else {
                        p_p = *(AudioObjectPropertyAddress **)&__p.mSelector;
                      }
                      buf.mSelector = 136316418;
                      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                      v208 = 1024;
                      v209 = 207;
                      v210 = 1024;
                      *(_DWORD *)v211 = v74;
                      *(_WORD *)&v211[4] = 2080;
                      *(void *)&v211[6] = v79;
                      *(_WORD *)&v211[14] = 2080;
                      *(void *)&v211[16] = p_p;
                      *(_WORD *)&v211[24] = 1024;
                      *(_DWORD *)&v211[26] = v63;
                      _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
                      if (v186 < 0) {
                        operator delete(*(void **)&__p.mSelector);
                      }
                      if (v217.__cv_.__opaque[15] < 0) {
                        operator delete((void *)v217.__cv_.__sig);
                      }
                    }

                    goto LABEL_157;
                  }

                  uint64_t v154 = (os_log_t *)sub_138E8(13);
                  unint64_t v155 = *v154;
                  if (*v154 && os_log_type_enabled(*v154, OS_LOG_TYPE_ERROR))
                  {
                    buf.mSelector = 136315394;
                    *(void *)&buf.mScope = "AlwaysOnHapticDebug.cpp";
                    v208 = 1024;
                    v209 = 56;
                    _os_log_impl( &dword_0,  v155,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
                  }
                }
              }

              else
              {
                v145 = (os_log_t *)sub_138E8(13);
                v146 = *v145;
                if (*v145 && os_log_type_enabled(*v145, OS_LOG_TYPE_ERROR))
                {
                  buf.mSelector = 136315394;
                  *(void *)&buf.mScope = "AlwaysOnHapticDebug.cpp";
                  v208 = 1024;
                  v209 = 54;
                  _os_log_impl( &dword_0,  v146,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
                }
              }
            }

            else
            {
              v143 = (os_log_t *)sub_138E8(13);
              size_t v144 = *v143;
              if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_ERROR))
              {
                buf.mSelector = 136315394;
                *(void *)&buf.mScope = "AlwaysOnHapticDebug.cpp";
                v208 = 1024;
                v209 = 53;
                _os_log_impl( &dword_0,  v144,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
              }
            }

LABEL_259:
  *(_DWORD *)buf = 1;
  *(_OWORD *)&buf[8] = *(_OWORD *)&a6[4 * v170 + 2];
  uint64_t v161 = sub_45C8(v174, 1, 0);
  if ((v168 & 1) == 0) {
    sub_3014C(*(OpaqueAudioConverter **)(v81 + 672), v171, v179[0], (AudioBufferList *)buf);
  }
  sub_4974(a1 + 144, *(unsigned int *)(v161 + 204), (uint64_t)buf, v171, (uint64_t)a7);
  if (v173) {
    goto LABEL_262;
  }
}

uint64_t sub_45C8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = 8LL;
  if (a2) {
    uint64_t v3 = 32LL;
  }
  uint64_t v4 = 24LL;
  if (!a2) {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = *(void *)(a1 + v3);
  uint64_t v6 = *(void *)(a1 + v4);
  if (0x4EC4EC4EC4EC4EC5LL * ((v5 - v6) >> 4) <= (unint64_t)a3)
  {
    v9 = (os_log_t *)sub_138E8(13);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      if (a2) {
        int v11 = "output";
      }
      else {
        int v11 = "input";
      }
      sub_7D084(__p, v11);
      if (v16 >= 0) {
        v12 = __p;
      }
      else {
        v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      uint64_t v18 = "AggregateDevice_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 1542;
      __int16 v21 = 2080;
      int v22 = v12;
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): Requested stream does not exist: out of range. inDirection: %s; inIndex: %u",
        buf,
        0x22u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C(exception, "Requested stream does not exist: out of range. inDirection: %s; inIndex: %u");
  }

  return v6 + 208LL * a3;
}

void sub_4768(_Unwind_Exception *a1)
{
}

void sub_4784(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    sub_33C9CC(&v10, a1, a2);
    if (v10)
    {
      if (!*(void *)(a3 + 8))
      {
        v7 = (os_log_t *)sub_138E8(13);
        int v8 = *v7;
        if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v13 = "AudioIOMonitorBase.cpp";
          __int16 v14 = 1024;
          int v15 = 101;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [bufferList.mBuffers[0].mData is NULL]: data buffer is NULL",  buf,  0x12u);
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "data buffer is NULL");
      }

      (*(void (**)(void))(*(void *)v10 + 24LL))();
    }

    uint64_t v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_4900( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

BOOL sub_4930(_DWORD *a1, _DWORD *a2)
{
  BOOL v2 = *a1 < *a2;
  if (*a1 == *a2)
  {
    int v3 = a1[1];
    int v4 = a2[1];
    BOOL v2 = v3 < v4;
    if (v3 == v4)
    {
      int v5 = a1[2];
      int v6 = a2[2];
      BOOL v2 = v5 < v6;
      if (v5 == v6) {
        return a1[3] < a2[3];
      }
    }
  }

  return v2;
}

void sub_4974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((_DWORD)a2)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    int v10 = *(unsigned __int8 *)(a1 + 32);
    if (qword_49D060 != -1) {
      dispatch_once(&qword_49D060, &stru_4766F8);
    }
    if (off_49D098) {
      off_49D098(v9, a2, v10 != 0, a3, a4, a5);
    }
  }

void sub_4A20(uint64_t a1, uint64_t a2, void *a3, double *a4, unsigned int *a5, double *a6, uint64_t a7)
{
  v34 = (void *)a7;
  unsigned __int8 v33 = 0;
  int v13 = sub_4DDC(a7 + 736, (char *)&v33);
  int v14 = v33;
  if (v33 != v13)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    char v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "IOMonitor.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 173;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v13;
        LOWORD(v36) = 1024;
        *(_DWORD *)((char *)&v36 + 2) = v14;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: By definition, the IO thread is singular and not reentrant. As a result, it is a deep logic error if the IO thread already owns mIOProcThreadMutex. trySucceeded (%u) and outWasLocked (%u) i mply this logic error.",  buf,  0x1Eu);
      }
    }
  }

  if (v13)
  {
    v32[0] = &v33;
    v32[1] = &v34;
    pthread_t v17 = pthread_self();
    uint64_t v18 = v34;
    v34[80] = v17;
    ++*((_DWORD *)v18 + 228);
    uint64_t v20 = v18[58] + 8LL;
    __int16 v19 = *(uint64_t **)v20;
    if (*(void *)(v20 + 8) == *(void *)v20)
    {
      uint64_t v21 = 0LL;
      if (a3) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v21 = *v19;
      if (a3) {
        goto LABEL_19;
      }
    }

    uint64_t v25 = *(void *)(v21 + 200);
    if (!v25)
    {
      a3 = &unk_49D440;
      if (a5) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }

    sub_C5AB4(*(void *)v21, 1, v25, (void *)(v21 + 176));
    a3 = *(void **)(v21 + 200);
LABEL_19:
    if (a5) {
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v26 = *(void *)(v21 + 232);
    if (v26)
    {
      sub_C5AB4(*(void *)v21, 0, v26, (void *)(v21 + 208));
      a5 = *(unsigned int **)(v21 + 232);
    }

    else
    {
      a5 = (unsigned int *)&unk_49D440;
    }

LABEL_25:
    if (*(_BYTE *)(v21 + 54))
    {
      int v27 = *(_DWORD *)(v21 + 120);
      if (!v27 || ((v27 & 1) != 0 ? (double v28 = *a4) : (double v28 = *a6), v28 >= *(double *)(v21 + 56)))
      {
        BOOL v29 = *(void (**)(void, uint64_t, void *, double *, unsigned int *, double *, void))(v21 + 8);
        if (v29)
        {
          v29(*(unsigned int *)(*(void *)v21 + 8LL), a2, a3, a4, a5, a6, *(void *)(v21 + 16));
        }

        else
        {
          uint64_t v30 = *(void *)(v21 + 40);
          if (v30)
          {
            v31 = *(dispatch_queue_s **)(v21 + 32);
            if (v31)
            {
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = sub_C5BE4;
              uint64_t v36 = &unk_46E928;
              uint64_t v37 = v21;
              uint64_t v38 = a2;
              v39 = a3;
              UInt32 v40 = a4;
              v41 = a5;
              uint64_t v42 = a6;
              dispatch_sync(v31, buf);
            }

            else
            {
              (*(void (**)(void, uint64_t, void *, double *, unsigned int *, double *))(v30 + 16))( *(void *)(v21 + 40),  a2,  a3,  a4,  a5,  a6);
            }
          }
        }
      }
    }

    (*(void (**)(void *))(*v34 + 240LL))(v34);
    v34[80] = 0LL;
    sub_C59AC((uint64_t)v32);
    return;
  }

  ++*(_DWORD *)(a7 + 1076);
  if (a5)
  {
    unint64_t v22 = *a5;
    if ((_DWORD)v22)
    {
      unint64_t v23 = 0LL;
      unsigned int v24 = (void **)(a5 + 4);
      do
      {
        if (*v24)
        {
          bzero(*v24, *((unsigned int *)v24 - 1));
          unint64_t v22 = *a5;
        }

        ++v23;
        v24 += 2;
      }

      while (v23 < v22);
    }
  }

  char v16 = *(const __CFString **)(a2 + 80);
  if (v16)
  {
    pthread_t v17 = *(const __CFString **)(a1 + 248);
    BOOL v29 = v17;
    uint64_t v30 = *(_BYTE *)(a1 + 256);
    uint64_t v18 = v16;
    if (v30)
    {
      uint64_t v18 = v16;
      if (v17)
      {
        CFRetain(v17);
        uint64_t v18 = *(const __CFString **)(a2 + 80);
      }
    }

    if (CFStringCompare(v17, v18, 0LL))
    {
      __int16 v19 = 1;
      goto LABEL_48;
    }
  }

  uint64_t v20 = *(_DWORD *)(a2 + 72);
  if ((v20 & 3) != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 152LL))(a1))
  {
    uint64_t v21 = *(_DWORD *)(a2 + 72);
    if (((v21 >> 2) & 3) != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1))
    {
      unint64_t v22 = *(_DWORD *)(a2 + 72);
      unint64_t v23 = *(unsigned __int16 *)(a1 + 184);
      if (((v22 >> 4) & 3) != (v23 & 1)
        && v22 >> 6 != ((v23 >> 1) & 1)
        && ((v22 >> 8) & 3) != ((v23 >> 2) & 1)
        && ((v22 >> 10) & 3) != ((v23 >> 3) & 1)
        && ((v22 >> 12) & 3) != ((v23 >> 4) & 1)
        && (unsigned __int16)v22 >> 14 != ((v23 >> 5) & 1)
        && (HIWORD(v22) & 3) != ((v23 >> 6) & 1)
        && ((v22 >> 18) & 3) != ((v23 >> 7) & 1)
        && ((v22 >> 20) & 3) != ((v23 >> 8) & 1)
        && ((v22 >> 22) & 3) != ((v23 >> 9) & 1)
        && (!*(_BYTE *)(a2 + 32) || sub_F9AF4(a1, *(unsigned int *)(a2 + 28))))
      {
        __int16 v19 = sub_54F20(a2 + 40, *(_DWORD *)(a1 + 148)) ^ 1;
        if (!v16) {
          return v19 ^ 1u;
        }
        goto LABEL_48;
      }
    }
  }

  __int16 v19 = 1;
  if (v16) {
LABEL_48:
  }
    sub_19DFC((uint64_t)&v29);
  return v19 ^ 1u;
}

    sub_68168(a5, (float *)a6, v16);
    return result;
  }

  if (v14 <= 1986290210)
  {
    if (v14 == 1986098020) {
      goto LABEL_26;
    }
    if (v14 != 1986225518)
    {
      if (v14 == 1986229104)
      {
LABEL_16:
        pthread_t v17 = 1;
LABEL_32:
        sub_5CABC(v17, a5, (_DWORD *)a6);
        return result;
      }

      goto LABEL_33;
    }

  v61 = 0LL;
  v62 = 0LL;
  uint64_t v25 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v25)
  {
    uint64_t v26 = 0LL;
    goto LABEL_34;
  }

  uint64_t v26 = std::__shared_weak_count::lock(v25);
  v62 = v26;
  if (!v26 || (v61 = *(void *)(a1 + 24)) == 0)
  {
LABEL_34:
    v35 = sub_138E8(18);
    uint64_t v36 = sub_138E8(38);
    uint64_t v37 = 0;
    uint64_t v38 = 0LL;
    *(void *)buf = 0x100000002LL;
    v39 = *(void *)(v35 + 8);
    while (1)
    {
      UInt32 v40 = *(int *)&buf[4 * v38];
      v41 = v37;
      if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
        break;
      }
      uint64_t v37 = 1;
      uint64_t v38 = 1LL;
      if ((v41 & 1) != 0) {
        goto LABEL_40;
      }
    }

    if ((v39 & v40) == 0) {
      v35 = v36;
    }
LABEL_40:
    uint64_t v42 = *(os_log_s **)v35;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      v70 = 1024;
      uint64_t v71 = 342;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter",  buf,  0x12u);
    }

  sub_CAE54(&v103, (uint64_t *)buf, 1LL);
  *(void *)__int16 v19 = off_484140;
  *((_DWORD *)v19 + 2) = v21;
  *((void *)v19 + 2) = v19 + 16;
  *((void *)v19 + 3) = v19 + 16;
  *((void *)v19 + 4) = 0LL;
  v31 = v105;
  if (v105)
  {
    unsigned __int8 v33 = v103;
    v32 = v104;
    v34 = *v104;
    *(void *)(v34 + 8) = *(void *)(v103 + 8);
    **(void **)(v33 + 8) = v34;
    v35 = *((void *)v19 + 2);
    *(void *)(v35 + 8) = v32;
    _DWORD *v32 = v35;
    *((void *)v19 + 2) = v33;
    *(void *)(v33 + 8) = v19 + 16;
    *((void *)v19 + 4) = v31;
    v105 = 0LL;
  }

  strcpy(v19 + 40, "duar");
  uint64_t v36 = operator new(0x18uLL);
  uint64_t v37 = *(void **)(a3 + 8);
  *uint64_t v36 = a3;
  v36[1] = v37;
  v36[2] = v19;
  *uint64_t v37 = v36;
  uint64_t v38 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v36;
  *(void *)(a3 + 16) = v38;
  sub_CCAB4((uint64_t)v19);
  sub_85B80(&v103);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_108294(&v102, a1, a2, v10, (uint64_t)v113, (unsigned int **)__p);
  (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, void, uint64_t))(*(void *)&v10->_os_unfair_lock_opaque
                                                                                     + 256LL))( &v100,  v10,  0LL,  v20);
  int v98 = 0LL;
  uint64_t v99 = 0LL;
  if (!v101 || (v39 = std::__shared_weak_count::lock(v101), (v99 = v39) == 0LL) || (UInt32 v40 = v39, (v98 = v100) == 0))
  {
    v79 = (os_log_t *)sub_138E8(13);
    uint64_t v80 = *v79;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Record_Unk.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 74;
      _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate input volume control.",  buf,  0x12u);
    }

    uint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v81, "Unable to locate input volume control.");
  }

  sub_1B4C60( v100,  (uint64_t)v102,  v110,  *(unsigned int *)(v108 + 144),  (uint64_t)v113,  v7[9],  *(unsigned int *)(a2 + 12),  *(void *)(a2 + 104));
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    uint64_t v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }

  UInt32 v43 = v102;
  v102 = 0LL;
  a4[2] = v43;
  a4[3] = v10;
  v44 = operator new(0x68uLL);
  sub_CAEBC((uint64_t *)buf);
  uint64_t v87 = *(std::__shared_weak_count **)&buf[8];
  uint64_t v97 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v44, &v97);
  a4[4] = v44;
  if (v87)
  {
    v45 = (unint64_t *)&v87->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }

  v47 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      uint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  uint64_t v50 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  v88 = *(std::__shared_weak_count **)&buf[8];
  unsigned int v96 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v50, &v96);
  a4[5] = v50;
  if (v88)
  {
    v51 = (unint64_t *)&v88->__shared_owners_;
    do
      int v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }

  int v53 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v54 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      uint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  if (sub_1B5BF0(*(unsigned int *)(a2 + 12)))
  {
    uint64_t v56 = operator new(0x68uLL);
    sub_CB19C(buf, v100, v101);
    int v89 = *(std::__shared_weak_count **)&buf[8];
    unsigned int v95 = *(_OWORD *)buf;
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    sub_CAF18((uint64_t)v56, &v95);
    a4[6] = v56;
    if (v89)
    {
      int v57 = (unint64_t *)&v89->__shared_owners_;
      do
        uint64_t v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }

    v59 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v60 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      goto LABEL_74;
    }
  }

  else
  {
    v62 = operator new(0x68uLL);
    sub_CAEBC((uint64_t *)buf);
    unint64_t v90 = *(std::__shared_weak_count **)&buf[8];
    v94 = *(_OWORD *)buf;
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    sub_CAF18((uint64_t)v62, &v94);
    a4[6] = v62;
    if (v90)
    {
      uint64_t v63 = (unint64_t *)&v90->__shared_owners_;
      do
        uint64_t v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }

    v59 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v65 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        v61 = __ldaxr(v65);
      while (__stlxr(v61 - 1, v65));
LABEL_74:
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }

  v66 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  int v91 = *(std::__shared_weak_count **)&buf[8];
  int v93 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v66, &v93);
  a4[7] = v66;
  if (v91)
  {
    uint64_t v67 = (unint64_t *)&v91->__shared_owners_;
    do
      uint64_t v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

  int v69 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v70 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      uint64_t v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  if (v101) {
    std::__shared_weak_count::__release_weak(v101);
  }
  if (v102) {
    (*(void (**)(uint64_t *))(*v102 + 8))(v102);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (*(void *)v113)
  {
    *(void *)&v113[8] = *(void *)v113;
    operator delete(*(void **)v113);
  }

  uint64_t v72 = v109;
  if (v109)
  {
    int v73 = (unint64_t *)&v109->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

  v75 = v111;
  if (v111)
  {
    v76 = (unint64_t *)&v111->__shared_owners_;
    do
      BOOL v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }

  return 0LL;
}

      unsigned int v24 = std::__shared_weak_count::lock(v10);
      if (v24) {
        uint64_t v25 = v11;
      }
      else {
        uint64_t v25 = 0LL;
      }
      if (!v18)
      {
LABEL_37:
        double v28 = v25 == 0;
        goto LABEL_38;
      }

      if (v15)
      {
        unint64_t v22 = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if (!v8) {
            goto LABEL_31;
          }
LABEL_30:
          std::__shared_weak_count::__release_weak(v8);
          goto LABEL_31;
        }
      }

      if (v8) {
        goto LABEL_30;
      }
LABEL_31:
      if (v19) {
        return v3;
      }
      unsigned int v24 = (void *)v3[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          unsigned int v24 = (void *)*v24;
        }

        while (v24);
      }

      else
      {
        do
        {
          uint64_t v25 = (void *)v3[2];
          uint64_t v26 = *v25 == (void)v3;
          int v3 = v25;
        }

        while (!v26);
      }

      int v3 = v25;
      if (v25 == a2) {
        return a2;
      }
    }
  }

  return v3;
}

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    int v11 = (void (*)(void *))&std::logic_error::~logic_error;
    goto LABEL_11;
  }

  int v6 = 0LL;
  while (1)
  {
    v7 = *a3;
    a3 += 3;
    if (v7 == 1919186467) {
      break;
    }
    if (a2 == ++v6) {
      goto LABEL_7;
    }
  }

  int v13 = (dispatch_queue_s *)sub_869B4();
  int v14 = operator new(8uLL);
  _BYTE *v14 = a4;
  dispatch_async_f(v13, v14, (dispatch_function_t)sub_16EBC4);
  if ((_DWORD)v6 == a2)
  {
LABEL_7:
    int v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v22 = 136315394;
        unint64_t v23 = "DeviceListener_Aspen.cpp";
        unsigned int v24 = 1024;
        uint64_t v25 = 137;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate kAudioHardwarePropertyPhysicalDevices in inAddresses",  (uint8_t *)&v22,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( (std::runtime_error *)exception,  "Unable to locate kAudioHardwarePropertyPhysicalDevices in inAddresses");
    int v11 = (void (*)(void *))&std::runtime_error::~runtime_error;
LABEL_11:
    __cxa_throw(exception, v12, v11);
  }

  return 0LL;
}

  *(void *)cf = &v29;
  char v16 = (float)*((int *)sub_19EAA4((uint64_t **)(a1 + 64), (void **)&v29.__r_.__value_.__l.__data_, (__int128 **)cf) + 14);
  pthread_t v17 = *(id *)sub_138E8(16);
  uint64_t v18 = v17;
  if (v17)
  {
    __int16 v19 = (os_log_s *)v17;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (CFStringCompare(a2, (CFStringRef)qword_48F6B8, 0LL))
      {
        if (CFStringCompare(a2, (CFStringRef)qword_48F6C0, 0LL))
        {
          if (CFStringCompare(a2, (CFStringRef)qword_48F6C8, 0LL)) {
            uint64_t v20 = CFStringCompare(a2, (CFStringRef)qword_48F6D0, 0LL) ? "Unknown" : "1min";
          }
          else {
            uint64_t v20 = "1ms";
          }
        }

        else
        {
          uint64_t v20 = "100ms";
        }
      }

      else
      {
        uint64_t v20 = "1000ms";
      }

      sub_7D084(__p, v20);
      uint64_t v21 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)cf = 136316162;
      *(void *)&cf[4] = "CPMSInterface.mm";
      v31 = 1024;
      v32 = 277;
      unsigned __int8 v33 = 2080;
      v34 = v21;
      v35 = 1024;
      uint64_t v36 = v16;
      uint64_t v37 = 2048;
      uint64_t v38 = a4;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Continuous Haptics -- In Battery Referenced Value[%s]: %u ; Efficiency Factor: %4.3f",
        cf,
        0x2Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return (float)(v16 * a4);
}

  uint64_t v21 = (os_log_t *)sub_138E8(13);
  unint64_t v22 = *v21;
  if (*v21)
  {
    if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      int v27 = "RunLoopThread.cpp";
      double v28 = 1024;
      BOOL v29 = 230;
      uint64_t v30 = 2048;
      v31 = a1;
      v32 = 2048;
      unsigned __int8 v33 = a1 + 16;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Thread with RunLoopThread owner %p (CAPThread %p) exited.",  buf,  0x26u);
    }
  }

    v11 += 3;
  }

  while (v11 != v12);
  int v11 = v12;
LABEL_27:
  if (*(uint64_t **)(a1 + 40) == v11)
  {
LABEL_28:
    int v27 = (os_log_t *)sub_138E8(13);
    double v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v39 = 136315394;
      *(void *)&v39[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      UInt32 v40 = 1024;
      v41 = 83;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Could not locate codec device's port list in the provided device description",  v39,  0x12u);
    }
  }

  if (*(uint64_t **)(a1 + 40) != v11)
  {
    if (v5)
    {
      BOOL v29 = std::__shared_weak_count::lock(v5);
      uint64_t v30 = v29;
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_weak_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        unsigned __int8 v33 = (unint64_t *)&v29->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v30);
        }
      }

      else
      {
        int v6 = 0LL;
      }
    }

    else
    {
      int v6 = 0LL;
      uint64_t v30 = 0LL;
    }

    uint64_t v37 = operator new(0x20uLL);
    v37[2] = v6;
    v37[3] = v30;
    v37[1] = v11;
    uint64_t v38 = *v11;
    *uint64_t v37 = *v11;
    *(void *)(v38 + 8) = v37;
    *int v11 = (uint64_t)v37;
    ++v11[2];
  }

  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

  *(_DWORD *)buf = v4;
  int v15 = *(void *)(v1 + 40);
  if (!v15) {
    sub_82CEC();
  }
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v15 + 48LL))(v15, buf);
}

  uint64_t v30 = sub_138E8(18);
  v31 = sub_138E8(38);
  v32 = 0;
  unsigned __int8 v33 = 0LL;
  *(void *)buf = 0x100000002LL;
  v34 = *(void *)(v30 + 8);
  do
  {
    v35 = *(int *)&buf[4 * v33];
    uint64_t v36 = v32;
    if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0))
    {
      if ((v34 & v35) == 0) {
        uint64_t v30 = v31;
      }
      if ((*(void *)(v30 + 8) & 1) != 0) {
        goto LABEL_33;
      }
      goto LABEL_39;
    }

    v32 = 1;
    unsigned __int8 v33 = 1LL;
  }

  while ((v36 & 1) == 0);
  if ((v34 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v37 = *(os_log_s **)v30;
  if (!v37 || !os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_39;
  }
  sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8LL));
  if (v82 >= 0) {
    *(double *)&uint64_t v38 = COERCE_DOUBLE(&__p);
  }
  else {
    uint64_t v38 = (void **)__p;
  }
  *(_DWORD *)buf = 136315650;
  *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
  int v84 = 1024;
  int v85 = 609;
  uint64_t v86 = 2080;
  uint64_t v87 = *(double *)&v38;
  _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d  VAD '%s'", buf, 0x1Cu);
  if ((v82 & 0x80000000) == 0)
  {
LABEL_39:
    if (a4) {
      goto LABEL_40;
    }
LABEL_74:
    *(_DWORD *)(a1 + 248) = 0;
    goto LABEL_75;
  }

  operator delete(__p);
  if (!a4) {
    goto LABEL_74;
  }
LABEL_40:
  v39 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a1 + 248) = v39;
  if (v39)
  {
    UInt32 v40 = *a2;
    v41 = a2[1];
    UInt32 v43 = *(void *)(a4 + 24);
    uint64_t v42 = *(std::__shared_weak_count **)(a4 + 32);
    if (v42)
    {
      p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v45 = __ldxr(p_shared_weak_owners);
      while (__stxr(v45 + 1, p_shared_weak_owners));
    }

    v46 = *(std::__shared_weak_count **)(a1 + 264);
    *(void *)(a1 + 256) = v43;
    *(void *)(a1 + 264) = v42;
    if (v46)
    {
      std::__shared_weak_count::__release_weak(v46);
      uint64_t v42 = *(std::__shared_weak_count **)(a1 + 264);
    }

    *(_BYTE *)(a1 + 272) = 0;
    std::string __p = 0LL;
    uint64_t v81 = 0LL;
    if (v42)
    {
      v47 = std::__shared_weak_count::lock(v42);
      uint64_t v81 = v47;
      if (v47)
      {
        v48 = *(void **)(a1 + 256);
        std::string __p = v48;
        if (v48)
        {
          (*(void (**)(void *, uint64_t))(*(void *)v48 + 144LL))(v48, 1LL);
LABEL_55:
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            int v52 = __ldaxr(p_shared_owners);
          while (__stlxr(v52 - 1, p_shared_owners));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }

  uint64_t v20 = sub_138E8(10);
  if ((*(_BYTE *)(v20 + 8) & 1) != 0)
  {
    uint64_t v21 = *(os_log_s **)v20;
    if (*(void *)v20)
    {
      if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        unsigned int v24 = "SystemSettingsManager_Aspen.cpp";
        uint64_t v25 = 1024;
        uint64_t v26 = 1639;
        int v27 = 2048;
        double v28 = (const char *)a1;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateVoiceOverEnabledState()",  buf,  0x1Cu);
      }
    }
  }

      a2[1] = v5;
      ++v2;
    }

    while (v2 != v3);
  }

  uint64_t v21 = 0;
  unint64_t v22 = 0LL;
  unint64_t v23 = 0LL;
  unsigned int v24 = 0LL;
LABEL_27:
  operator delete(v16);
  uint64_t v26 = v24 | v22 | v23;
  v12 = v26 >> 8;
  int v11 = v23 >> 40;
  if (v22)
  {
    LOBYTE(v13) = v26 | v21;
    int v14 = v26 & 0xFFFFFFFF00000000LL;
    return ((_DWORD)v12 << 8) | v14 & 0xFF00000000LL | (v11 << 40) | v13;
  }

  uint64_t v21 = 0;
  unint64_t v22 = 0LL;
  unint64_t v23 = 0LL;
  unsigned int v24 = 0LL;
LABEL_27:
  operator delete(v16);
  uint64_t v26 = v24 | v22 | v23;
  v12 = v26 >> 8;
  int v11 = v23 >> 40;
  if (v22)
  {
    LOBYTE(v13) = v26 | v21;
    int v14 = v26 & 0xFFFFFFFF00000000LL;
    return ((_DWORD)v12 << 8) | v14 & 0xFF00000000LL | (v11 << 40) | v13;
  }

  uint64_t v21 = 0;
  unint64_t v22 = 0LL;
  unint64_t v23 = 0LL;
  unsigned int v24 = 0LL;
LABEL_27:
  operator delete(v16);
  uint64_t v26 = v24 | v22 | v23;
  v12 = v26 >> 8;
  int v11 = v23 >> 40;
  if (v22)
  {
    LOBYTE(v13) = v26 | v21;
    int v14 = v26 & 0xFFFFFFFF00000000LL;
    return ((_DWORD)v12 << 8) | v14 & 0xFF00000000LL | (v11 << 40) | v13;
  }

  LOBYTE(v19) = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0LL;
LABEL_27:
  operator delete(v14);
  int v11 = v21 >> 8;
  if ((_BYTE)v19)
  {
    LOBYTE(v12) = v20 | v21;
    return v12 | (v11 << 8);
  }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(void *)(v2 + 8))
  {
    int v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "AlwaysOnHapticDebug.cpp";
      int v15 = 1024;
      char v16 = 126;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    goto LABEL_25;
  }

  int v3 = *(void **)(v2 + 40);
  if (!v3)
  {
    int v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "AlwaysOnHapticDebug.cpp";
      int v15 = 1024;
      char v16 = 127;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    goto LABEL_25;
  }

  int v4 = v3[1];
  if (v4)
  {
    (*(void (**)(void))(*(void *)v4 + 32LL))(v3[1]);
    int v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;
    if (!v3) {
      goto LABEL_11;
    }
  }

  else
  {
    *(void *)(v2 + 40) = 0LL;
  }

  (*(void (**)(void *))(*v3 + 8LL))(v3);
LABEL_11:
  sub_31B6B8( *(AudioObjectID **)v2,  **(OSStatus (__cdecl ***)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v2 + 8));
  int v5 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_68314((void *)(v2 + 16));
  sub_904B0((uint64_t *)(v2 + 8));
  sub_904DC((uint64_t *)v2);
  operator delete((void *)v2);
}

  if (v9) {
    return (v9 >> 7) | 1u;
  }
  else {
    return 0LL;
  }
}

void sub_4D20( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    int v13 = (os_log_t *)sub_138E8(1);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 4067;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "%25s:%-5d swallowing an exception thrown during the IOProc",  (uint8_t *)&buf,  0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x4C5CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_4DDC(uint64_t a1, char *a2)
{
  *a2 = 0;
  int v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (pthread_equal(v4, v5))
  {
    char v6 = 0;
  }

  else
  {
    int v7 = pthread_mutex_trylock((pthread_mutex_t *)(a1 + 24));
    if (v7 == 16)
    {
      char v6 = 0;
      uint64_t result = 0LL;
      goto LABEL_7;
    }

    if (v7)
    {
      v11[0] = HIBYTE(v7);
      v11[1] = BYTE2(v7);
      v11[2] = BYTE1(v7);
      int v9 = v7;
      v11[3] = v7;
      v11[4] = 0;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        int v13 = "CAMutex.cpp";
        __int16 v14 = 1024;
        int v15 = 224;
        __int16 v16 = 1024;
        int v17 = v9;
        __int16 v18 = 2080;
        __int16 v19 = v11;
        _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAMutex::Try: call to pthread_mutex_trylock failed, Error: %d (%s)",  buf,  0x22u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v9;
    }

    atomic_store((unint64_t)v4, (unint64_t *)(a1 + 16));
    char v6 = 1;
  }

  uint64_t result = 1LL;
LABEL_7:
  *a2 = v6;
  return result;
}

uint64_t sub_4F5C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (!a1)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v35 = 1024;
      int v36 = 235;
      int v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_ObjectHasPro"
            "perty: no plug-in";
LABEL_22:
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x12u);
    }

LABEL_23:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a3)
  {
    __int16 v18 = (os_log_t *)sub_138E8(13);
    __int16 v16 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v35 = 1024;
      int v36 = 236;
      int v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: HP_HardwarePlugIn_ObjectHas"
            "Property: no address";
      goto LABEL_22;
    }

    goto LABEL_23;
  }

  if (*a3 == 1651798132)
  {
    sub_92EF8();
    v32 = &unk_49D240;
    char v33 = sub_287070((uint64_t)&unk_49D240);
    if ((v33 & 1) == 0)
    {
      uint64_t v20 = (os_log_t *)sub_138E8(13);
      uint64_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 66;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): TryExecuteSynchronized: unable to lock object map mutex",  buf,  0x12u);
      }

      unint64_t v22 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v22 = &off_4865A0;
      v22[2] = 560947818;
    }

    int v5 = sub_93068(a2);
    if (!v5)
    {
      uint64_t v26 = (os_log_t *)sub_138E8(13);
      int v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 69;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): ExecuteSynchronized: no object with given ID",  buf,  0x12u);
      }

      double v28 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v28 = &off_4865A0;
      v28[2] = 560947818;
    }

    char v6 = (void *)v5[3];
    sub_93128((uint64_t)&v32);
    v32 = v6 + 1;
    char v33 = sub_287070((uint64_t)(v6 + 1));
    if ((v33 & 1) == 0)
    {
      BOOL v29 = (os_log_t *)sub_138E8(13);
      uint64_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 75;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): TryExecuteSynchronized: unable to lock object mutex",  buf,  0x12u);
      }

      v31 = __cxa_allocate_exception(0x10uLL);
      *(void *)v31 = &off_4865A0;
      v31[2] = 560947818;
    }

    uint64_t v7 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*v6 + 32LL))(*v6, a3);
    sub_93128((uint64_t)&v32);
  }

  else
  {
    sub_92EF8();
    v32 = &unk_49D240;
    char v33 = 1;
    sub_92F80((uint64_t)&unk_49D240);
    int v8 = sub_93068(a2);
    if (!v8)
    {
      unint64_t v23 = (os_log_t *)sub_138E8(13);
      unsigned int v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 51;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): ExecuteSynchronized: no object with given ID",  buf,  0x12u);
      }

      uint64_t v25 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v25 = &off_4865A0;
      v25[2] = 560947818;
    }

    int v9 = (void *)v8[3];
    sub_93128((uint64_t)&v32);
    *(void *)buf = v9 + 1;
    buf[8] = 1;
    sub_92F80((uint64_t)(v9 + 1));
    uint64_t v10 = *v9;
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*v9 + 16LL))(*v9);
    uint64_t v12 = v11;
    if (v11) {
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16LL))(v11);
    }
    else {
      int v13 = 0;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v10 + 32LL))(v10, a3);
    sub_93128((uint64_t)buf);
    if (v12 && v13) {
      (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
    }
  }

  return v7;
}

    (*(void (**)(unint64_t *, uint64_t, int *, uint64_t))(*v10 + 72))(v10, a2, a3, 1LL);
    return;
  }

  uint64_t v63 = 0;
  int v15 = 0LL;
  __int16 v16 = 0LL;
  uint64_t v64 = 0LL;
  int v17 = 0LL;
  v62 = a2;
  __int16 v18 = a2;
  do
  {
    __int16 v19 = &a3[3 * v17];
    uint64_t v20 = *v19;
    if (*v19 > 1735354733)
    {
      if (v20 > 1935762280)
      {
        if (v20 == 1935762281)
        {
          sub_C250C((uint64_t)v10);
        }

        else if (v20 == 1953002354 || v20 == 1986225266)
        {
          sub_C1654((uint64_t)v10);
        }

        goto LABEL_80;
      }

      if (v20 != 1735354734)
      {
        unint64_t v22 = 1886807154;
LABEL_43:
        if (v20 == v22)
        {
          unint64_t v23 = (os_log_t *)sub_138E8(41);
          unsigned int v24 = *v23;
          if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(&v71, *v19);
            uint64_t v25 = &v71;
            if (SBYTE7(v72) < 0) {
              uint64_t v25 = (__int128 *)v71;
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3165;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v25;
            _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Forwarding '%s' property change.", buf, 0x1Cu);
            if (SBYTE7(v72) < 0) {
              operator delete((void *)v71);
            }
          }

          sub_C3328((unint64_t)v10);
        }

        goto LABEL_80;
      }

      if ((a4 & 1) == 0)
      {
        v10[80] = (unint64_t)pthread_self();
        uint64_t v63 = 1;
      }

      *(void *)buf = *(void *)v19;
      *(_DWORD *)&buf[8] = v19[2];
      if ((unint64_t)v16 >= v64)
      {
        char v33 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 2) + 1;
        if (v33 > 0x1555555555555555LL) {
          sub_7A87C();
        }
        else {
          v34 = v33;
        }
        if (v34) {
          v34 = (unint64_t)sub_87E70(v34);
        }
        else {
          __int16 v35 = 0LL;
        }
        int v36 = v34 + 4 * ((v16 - v15) >> 2);
        *(void *)int v36 = *(void *)buf;
        *(_DWORD *)(v36 + 8) = *(_DWORD *)&buf[8];
        uint64_t v37 = (char *)v36;
        while (v16 != v15)
        {
          uint64_t v38 = *(void *)(v16 - 12);
          v16 -= 12;
          v39 = *((_DWORD *)v16 + 2);
          *(void *)(v37 - 12) = v38;
          v37 -= 12;
          *((_DWORD *)v37 + 2) = v39;
        }

        uint64_t v64 = v34 + 12 * v35;
        __int16 v16 = (char *)(v36 + 12);
        if (v15) {
          operator delete(v15);
        }
        int v15 = v37;
      }

      else
      {
        uint64_t v30 = *(void *)v19;
        *((_DWORD *)v16 + 2) = v19[2];
        *(void *)__int16 v16 = v30;
        v16 += 12;
      }
    }

    else if (v20 <= 1635153006)
    {
      if (v20 != 1165513555)
      {
        unint64_t v22 = 1633973868;
        goto LABEL_43;
      }

      uint64_t v26 = (os_log_t *)sub_138E8(1);
      int v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3154;
        double v28 = v27;
        BOOL v29 = "%25s:%-5d ExclavesSensorStatus changed";
LABEL_61:
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_DEBUG, v29, buf, 0x12u);
      }
    }

    else
    {
      switch(v20)
      {
        case 1635153007:
          v31 = (os_log_t *)sub_138E8(1);
          v32 = *v31;
          if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3150;
            double v28 = v32;
            BOOL v29 = "%25s:%-5d voice trigger occurred";
            goto LABEL_61;
          }

          break;
        case 1684103987:
          sub_C6254(v10);
          break;
        case 1718839674:
          sub_B4380((uint64_t)v10);
          break;
      }
    }

  int v93 = *(_OWORD *)v126;
  v126[0] = 0LL;
  v126[1] = 0LL;
  sub_3711D4((uint64_t)a1, (void ***)&v93);
  int v17 = (std::__shared_weak_count *)*((void *)&v93 + 1);
  if (*((void *)&v93 + 1))
  {
    __int16 v18 = (unint64_t *)(*((void *)&v93 + 1) + 8LL);
    do
      __int16 v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    uint64_t v21 = (unint64_t *)((char *)v126[1] + 8);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  *(void *)&inAddress.mSelector = 0x696E707473737263LL;
  inAddress.mElement = 0;
  sub_238BD8();
  unint64_t v23 = (*(uint64_t (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                    + 16LL))( a1,  &inAddress);
  if (dword_492698) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = v23;
  }
  if (v24 == 1)
  {
    int v89 = 0LL;
    unint64_t v90 = 0LL;
    int v91 = 0LL;
    sub_7A5B8(&v89, (const void *)qword_4926A0, qword_4926A8, (qword_4926A8 - qword_4926A0) >> 2);
    os_unfair_lock_opaque = a1[67]._os_unfair_lock_opaque;
    uint64_t v26 = sub_138E8(13);
    if ((*(_BYTE *)(v26 + 8) & 1) != 0)
    {
      int v27 = *(os_log_s **)v26;
      if (*(void *)v26)
      {
        if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
        {
          v147.__cv_.__sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v147.__cv_.__opaque = inAddress.mElement;
          sub_613AC((uint64_t)&v148, (unsigned int *)&v147);
          double v28 = v148.__m_.__opaque[15] >= 0 ? &v148 : (std::mutex *)v148.__m_.__sig;
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          unint64_t v138 = 1024;
          uint64_t v139 = 166;
          unsigned int v140 = 2080;
          *(void *)v141 = v28;
          *(_WORD *)&v141[8] = 1024;
          *(_DWORD *)&v141[10] = os_unfair_lock_opaque;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v148.__m_.__opaque[15] < 0) {
            operator delete((void *)v148.__m_.__sig);
          }
        }
      }
    }

    *(AudioObjectPropertyAddress *)((char *)&v134 + 4) = inAddress;
    LODWORD(v134) = os_unfair_lock_opaque;
    unint64_t v135 = 0;
    unsigned int v136 = 0LL;
    sub_CFB64((uint64_t)&v148, (uint64_t)&v134);
    if (*(_DWORD *)&v148.__m_.__opaque[16]) {
      goto LABEL_46;
    }
    unsigned int v131 = 0LL;
    signed int v132 = 0LL;
    int v133 = 0LL;
    sub_7A5B8( &v131,  (const void *)v148.__m_.__sig,  *(uint64_t *)v148.__m_.__opaque,  (*(void *)v148.__m_.__opaque - v148.__m_.__sig) >> 2);
    v128 = 0LL;
    v129 = 0LL;
    unsigned int v130 = 0LL;
    v32 = v89;
    char v33 = v90;
    sub_7A5B8(&v128, v89, v90, (v90 - (uint64_t)v89) >> 2);
    uint64_t v42 = v131;
    UInt32 v43 = v128;
    if (v132 - v131 == v129 - v128)
    {
      v44 = memcmp(v131, v128, v132 - v131) == 0;
      if (!v43)
      {
LABEL_72:
        if (v42)
        {
          signed int v132 = v42;
          operator delete(v42);
          if (v44)
          {
LABEL_76:
            v45 = sub_138E8(13);
            if ((*(_BYTE *)(v45 + 8) & 1) != 0)
            {
              uint64_t v37 = *(os_log_s **)v45;
              if (!*(void *)v45) {
                goto LABEL_81;
              }
              if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
              {
                buf.mSelector = 136315650;
                *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                unint64_t v138 = 1024;
                uint64_t v139 = 191;
                unsigned int v140 = 1024;
                *(_DWORD *)v141 = os_unfair_lock_opaque;
                _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primit ive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
              }
            }

    __int16 v14 = *(_DWORD *)(a1 + 96);
    goto LABEL_24;
  }

  if (v13 == 1986817377) {
    goto LABEL_23;
  }
  if (v13 == 1987013732)
  {
    __int16 v14 = *(_DWORD *)(a1 + 92);
LABEL_24:
    *(_DWORD *)a6 = v14;
  }

    uint64_t v21 = std::__shared_weak_count::lock(v7);
    if (v21) {
      unint64_t v22 = v8;
    }
    else {
      unint64_t v22 = 0LL;
    }
    if (!v15)
    {
LABEL_35:
      uint64_t v25 = v22 == 0;
      goto LABEL_36;
    }

      unint64_t v22 = std::__shared_weak_count::lock(v8);
      if (v22) {
        unint64_t v23 = v9;
      }
      else {
        unint64_t v23 = 0LL;
      }
      if (!v16)
      {
LABEL_35:
        uint64_t v26 = v23 == 0;
        goto LABEL_36;
      }

  int v17 = a4;
  if (*(void *)(a4 + 16))
  {
    __int16 v18 = *(uint64_t **)(a4 + 8);
    if (v18 != (uint64_t *)a4)
    {
      __int16 v19 = (void *)(v71 + 88);
      uint64_t v72 = a2 + 1;
      while (1)
      {
        v75 = 0LL;
        v76[0] = 0LL;
        uint64_t v20 = (std::__shared_weak_count *)v18[3];
        if (!v20
          || (v76[0] = std::__shared_weak_count::lock(v20)) == 0LL
          || (uint64_t v21 = (os_unfair_lock_s *)v18[2], (v75 = v21) == 0LL))
        {
          int v27 = (os_log_t *)sub_138E8(9);
          double v28 = *v27;
          if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "PortManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 689;
            _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Encountered invalid port in disconnections list.",  buf,  0x12u);
          }

          goto LABEL_91;
        }

        unint64_t v22 = sub_FC61C((uint64_t)v19, (unint64_t)v21);
        if (v19 == (void *)v22) {
          break;
        }
        unint64_t v23 = v22;
        unsigned int v24 = (os_log_t *)sub_138E8(9);
        uint64_t v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
        {
          sub_23FE8((uint64_t)__p, v21 + 2);
          uint64_t v26 = __p;
          if (v81 < 0) {
            uint64_t v26 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "PortManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 696;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v26;
          _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing port %s", buf, 0x1Cu);
          if (v81 < 0) {
            operator delete(__p[0]);
          }
        }

        *(void *)buf = v23;
        sub_FC87C(v19, (uint64_t **)buf);
        __int16 v18 = (uint64_t *)v18[1];
LABEL_91:
        if (v76[0])
        {
          uint64_t v58 = v76[0] + 1;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            (*(void (**)(void *))(*v76[0] + 16LL))(v76[0]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v76[0]);
          }
        }
      }

      __int16 v18 = (uint64_t *)sub_FFABC(v17, v18);
      BOOL v29 = (void *)*a2;
      if ((void *)*a2 == v72) {
        goto LABEL_90;
      }
LABEL_41:
      uint64_t v30 = v29 + 5;
      for (uint64_t i = (uint64_t *)v29[6]; ; uint64_t i = (uint64_t *)i[1])
      {
        if (i == v30)
        {
LABEL_81:
          int v53 = (os_log_t *)sub_138E8(9);
          v54 = *v53;
          if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "PortManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 717;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v75;
            _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Disconnected port %p not present in update map",  buf,  0x1Cu);
          }

  int v8 = dword_48EAB8;
  uint64_t v12 = dword_48EAB8 == 0;
  int v13 = sub_138E8(21);
  __int16 v14 = sub_138E8(30);
  int v15 = 0;
  __int16 v16 = 0LL;
  if (v12)
  {
    *(void *)buf = 0x100000002LL;
    uint64_t v20 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v21 = *(int *)&buf[4 * v16];
      unint64_t v22 = v15;
      if (((v20 & v21) != 0) != ((*(void *)(v14 + 8) & v21) != 0)) {
        break;
      }
      int v15 = 1;
      __int16 v16 = 1LL;
      if ((v22 & 1) != 0) {
        goto LABEL_46;
      }
    }

    if ((v20 & v21) == 0) {
      int v13 = v14;
    }
LABEL_46:
    uint64_t v25 = *(os_log_s **)v13;
    if (*(void *)v13 && os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *v9;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      uint64_t v55 = 1024;
      uint64_t v56 = 300;
      int v57 = 2112;
      uint64_t v58 = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Headset could not be identified based on overridde identifier: %@. Using default settings.",  buf,  0x1Cu);
    }

    return v4;
  }

  *(void *)buf = 0x100000002LL;
  int v17 = *(void *)(v13 + 8);
  while (1)
  {
    __int16 v18 = *(int *)&buf[4 * v16];
    __int16 v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    int v15 = 1;
    __int16 v16 = 1LL;
    if ((v19 & 1) != 0)
    {
      if ((v17 & 1) == 0) {
        return v8;
      }
      goto LABEL_37;
    }
  }

  if ((v17 & v18) == 0) {
    int v13 = v14;
  }
  if ((*(void *)(v13 + 8) & 1) != 0)
  {
LABEL_37:
    unint64_t v23 = *(os_log_s **)v13;
    if (*(void *)v13 && os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(&__p, v8);
      unsigned int v24 = v37 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      uint64_t v55 = 1024;
      uint64_t v56 = 290;
      int v57 = 2080;
      uint64_t v58 = v24;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using headset override value: '%s'", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p);
      }
    }
  }

  return v8;
}

        __int16 v16 = *(uint64_t **)v17;
        unint64_t v22 = (uint64_t **)v17;
        if (!*(void *)v17) {
          goto LABEL_32;
        }
      }

      __int16 v19 = *(_DWORD *)(v17 + 36);
      uint64_t v20 = v19 == (_DWORD)a3;
      else {
        uint64_t v21 = -1;
      }
      if (v20) {
        uint64_t v21 = 0;
      }
      if ((v21 & 0x80) == 0) {
        goto LABEL_38;
      }
LABEL_29:
      unint64_t v22 = (uint64_t **)(v17 + 8);
      __int16 v16 = *(uint64_t **)(v17 + 8);
      if (!v16) {
        goto LABEL_32;
      }
    }
  }

  unint64_t v22 = (uint64_t **)(a1 + 216);
LABEL_32:
  unsigned int v24 = (uint64_t *)operator new(0x38uLL);
  uint64_t v25 = v24;
  v24[4] = (a3 << 32) | a2;
  v24[5] = a4;
  v24[6] = (uint64_t)v13;
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      int v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }

  *unsigned int v24 = 0LL;
  v24[1] = 0LL;
  v24[2] = v17;
  _DWORD *v22 = v24;
  double v28 = **(void **)(a1 + 208);
  if (v28)
  {
    *(void *)(a1 + 208) = v28;
    uint64_t v25 = *v22;
  }

  sub_7A420(*(uint64_t **)(a1 + 216), v25);
  ++*(void *)(a1 + 224);
  int v13 = *(std::__shared_weak_count **)&v31[8];
LABEL_38:
  if (v13)
  {
    BOOL v29 = (unint64_t *)&v13->__shared_owners_;
    do
      uint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  v34 = sub_21912C((uint64_t)v210, v27 & 1);
  __int16 v35 = sub_21912C((uint64_t)v210, (v27 & 1) == 0);
  sub_259EC((uint64_t)v210);
  else {
    int v36 = (void **)(v210 + 65);
  }
  uint64_t v38 = v36;
  uint64_t v37 = *v36;
  if (v38[1] == v37 || (v39 = *v37) == 0)
  {
    int v178 = (os_log_t *)sub_138E8(13);
    v179 = *v178;
    if (!*v178 || !os_log_type_enabled(*v178, OS_LOG_TYPE_ERROR)) {
      goto LABEL_230;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 125;
    v180 = "%25s:%-5d EXCEPTION (kAudioHardwareBadStreamError) [masterDeviceStream is NULL]: NULL master device stream";
    goto LABEL_229;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v39 + 112LL))(v39, &v225))
  {
    v182 = (os_log_t *)sub_138E8(13);
    v183 = *v182;
    if (!*v182 || !os_log_type_enabled(*v182, OS_LOG_TYPE_ERROR)) {
      goto LABEL_238;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 128;
    v184 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to get master device stream's current format";
    goto LABEL_237;
  }

  sub_259EC((uint64_t)v210);
  else {
    UInt32 v40 = (void **)(v210 + 68);
  }
  uint64_t v42 = v40;
  v41 = *v40;
  if (v42[1] == v41 || (UInt32 v43 = *v41) == 0)
  {
    v181 = (os_log_t *)sub_138E8(13);
    v179 = *v181;
    if (!*v181 || !os_log_type_enabled(*v181, OS_LOG_TYPE_ERROR)) {
      goto LABEL_230;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 132;
    v180 = "%25s:%-5d EXCEPTION (kAudioHardwareBadStreamError) [slaveDeviceStream is NULL]: NULL output stream";
LABEL_229:
    _os_log_impl(&dword_0, v179, OS_LOG_TYPE_ERROR, v180, buf, 0x12u);
LABEL_230:
    uint64_t v166 = 561214578;
    goto LABEL_205;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v43 + 112LL))(v43, &v223))
  {
    v185 = (os_log_t *)sub_138E8(13);
    v183 = *v185;
    if (!*v185 || !os_log_type_enabled(*v185, OS_LOG_TYPE_ERROR)) {
      goto LABEL_238;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 135;
    v184 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to get input stream's current format";
LABEL_237:
    _os_log_impl(&dword_0, v183, OS_LOG_TYPE_ERROR, v184, buf, 0x12u);
LABEL_238:
    uint64_t v166 = 2003329396;
LABEL_205:
    uint64_t v167 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v167 = &off_4865A0;
    v167[2] = v166;
  }

  if (v34 == v35 && (_DWORD)v226 == v224) {
    goto LABEL_190;
  }
  v44 = sub_138E8(16);
  v45 = sub_138E8(22);
  v46 = 0;
  v47 = 0LL;
  *(void *)buf = 0x100000002LL;
  v48 = *(void *)(v44 + 8);
  while (1)
  {
    uint64_t v49 = *(int *)&buf[4 * v47];
    uint64_t v50 = v46;
    if (((v48 & v49) != 0) != ((*(void *)(v45 + 8) & v49) != 0)) {
      break;
    }
    v46 = 1;
    v47 = 1LL;
    if ((v50 & 1) != 0) {
      goto LABEL_43;
    }
  }

  if ((v48 & v49) == 0) {
    v44 = v45;
  }
LABEL_43:
  v51 = sub_138E8(35);
  int v52 = 0;
  int v53 = 0LL;
  *(void *)buf = 0x100000002LL;
  v54 = *(void *)(v44 + 8);
  while (1)
  {
    uint64_t v55 = *(int *)&buf[4 * v53];
    uint64_t v56 = v52;
    if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
      break;
    }
    int v52 = 1;
    int v53 = 1LL;
    if ((v56 & 1) != 0) {
      goto LABEL_49;
    }
  }

  if ((v54 & v55) == 0) {
    v44 = v51;
  }
LABEL_49:
  int v57 = sub_138E8(36);
  uint64_t v58 = 0;
  v59 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v60 = *(void *)(v44 + 8);
  while (1)
  {
    v61 = *(int *)&buf[4 * v59];
    v62 = v58;
    if (((v60 & v61) != 0) != ((*(void *)(v57 + 8) & v61) != 0)) {
      break;
    }
    uint64_t v58 = 1;
    v59 = 1LL;
    if ((v62 & 1) != 0) {
      goto LABEL_55;
    }
  }

  if ((v60 & v61) == 0) {
    v44 = v57;
  }
LABEL_55:
  uint64_t v63 = *(os_log_s **)v44;
  if (v63 && os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
  {
    else {
      uint64_t v64 = "input";
    }
    int v65 = v229;
    sub_7D084(v229, v64);
    if (v229[23] < 0) {
      int v65 = *(_BYTE **)v229;
    }
    sub_2CA1C(v234, v226);
    v66 = v234[23];
    uint64_t v67 = *(_BYTE **)v234;
    sub_2CA1C(__p, v224);
    uint64_t v68 = v234;
    if (v66 < 0) {
      uint64_t v68 = v67;
    }
    int v69 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136316674;
    if (__p[23] >= 0) {
      int v69 = __p;
    }
    *(void *)&uint8_t buf[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 143;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v65;
    *(_WORD *)&_BYTE buf[28] = 2048;
    *(double *)&buf[30] = v34;
    *(_WORD *)&buf[38] = 2080;
    *(void *)&buf[40] = v68;
    *(_WORD *)v231 = 2048;
    *(double *)&v231[2] = v35;
    v232 = 2080;
    v233 = v69;
    _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_INFO,  "%25s:%-5d Diverging sample rates or formats, master (%s) sample rate:%f, master format:'%s', slave sample rate:%f, slave format:'%s'",  buf,  0x44u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((v234[23] & 0x80000000) != 0) {
      operator delete(*(void **)v234);
    }
    if ((v229[23] & 0x80000000) != 0) {
      operator delete(*(void **)v229);
    }
  }

  v220 = 0LL;
  v221 = 0LL;
  v222 = 0LL;
  if ((*(unsigned int (**)(uint64_t, void **))(*(void *)v39 + 96LL))(v39, &v220))
  {
    v186 = (os_log_t *)sub_138E8(13);
    v187 = *v186;
    if (*v186 && os_log_type_enabled(*v186, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 147;
      _os_log_impl( &dword_0,  v187,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to get master device stream's format list",  buf,  0x12u);
    }

    v188 = __cxa_allocate_exception(0x10uLL);
    *(void *)v188 = &off_4865A0;
    v188[2] = 2003329396;
  }

  v217 = 0LL;
  v218 = 0LL;
  v219 = 0LL;
  if ((*(unsigned int (**)(uint64_t, void **))(*(void *)v43 + 96LL))(v43, &v217))
  {
    v189 = (os_log_t *)sub_138E8(13);
    v190 = *v189;
    if (*v189 && os_log_type_enabled(*v189, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 151;
      _os_log_impl( &dword_0,  v190,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to get slave device stream's format list",  buf,  0x12u);
    }

    v191 = __cxa_allocate_exception(0x10uLL);
    *(void *)v191 = &off_4865A0;
    v191[2] = 2003329396;
  }

  v70 = (double *)v217;
  if (v217 != v218)
  {
    uint64_t v71 = (__n128 *)v217;
    while (1)
    {
      uint64_t v72 = v71[3].n128_u64[0];
      v74 = v71[1];
      int v73 = v71[2];
      v75 = *v71;
      *(__n128 *)&buf[16] = v74;
      *(__n128 *)&buf[32] = v73;
      *(void *)v231 = v72;
      *(__n128 *)buf = v75;
      if (v75.n128_u32[2] == (_DWORD)v226)
      {
        v73.n128_u64[0] = *(void *)&buf[40];
        v74.n128_u64[0] = *(void *)v231;
      }

      uint64_t v71 = (__n128 *)((char *)v71 + 56);
      if (v71 == (__n128 *)v218) {
        goto LABEL_83;
      }
    }

    *(double *)buf = v34;
    if ((*(unsigned int (**)(uint64_t, _BYTE *, __n128, __n128))(*(void *)v43 + 144LL))(v43, buf, v73, v74))
    {
      v204 = (os_log_t *)sub_138E8(13);
      v205 = *v204;
      if (*v204 && os_log_type_enabled(*v204, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v229 = 136315394;
        *(void *)&v229[4] = "AggregateDevice_Duplex.h";
        *(_WORD *)&v229[12] = 1024;
        *(_DWORD *)&v229[14] = 165;
        _os_log_impl( &dword_0,  v205,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to set the new format on the aggregate device",  v229,  0x12u);
      }

      v206 = __cxa_allocate_exception(0x10uLL);
      *(void *)v206 = &off_4865A0;
      v206[2] = 2003329396;
    }

    v105 = sub_138E8(16);
    unsigned int v106 = sub_138E8(22);
    v107 = 0;
    v108 = 0LL;
    *(void *)v229 = 0x100000002LL;
    unint64_t v109 = *(void *)(v105 + 8);
    while (1)
    {
      v110 = *(int *)&v229[4 * v108];
      unint64_t v111 = v107;
      if (((v109 & v110) != 0) != ((*(void *)(v106 + 8) & v110) != 0)) {
        break;
      }
      v107 = 1;
      v108 = 1LL;
      if ((v111 & 1) != 0) {
        goto LABEL_166;
      }
    }

    if ((v109 & v110) == 0) {
      v105 = v106;
    }
LABEL_166:
    v148 = sub_138E8(35);
    v149 = 0;
    uint64_t v150 = 0LL;
    *(void *)v229 = 0x100000002LL;
    v151 = *(void *)(v105 + 8);
    while (1)
    {
      char v152 = *(int *)&v229[4 * v150];
      unint64_t v153 = v149;
      if (((v151 & v152) != 0) != ((*(void *)(v148 + 8) & v152) != 0)) {
        break;
      }
      v149 = 1;
      uint64_t v150 = 1LL;
      if ((v153 & 1) != 0) {
        goto LABEL_172;
      }
    }

    if ((v151 & v152) == 0) {
      v105 = v148;
    }
LABEL_172:
    uint64_t v154 = sub_138E8(36);
    unint64_t v155 = 0;
    unsigned int v156 = 0LL;
    *(void *)v229 = 0x100000002LL;
    v157 = *(void *)(v105 + 8);
    while (1)
    {
      v158 = *(int *)&v229[4 * v156];
      v159 = v155;
      if (((v157 & v158) != 0) != ((*(void *)(v154 + 8) & v158) != 0)) {
        break;
      }
      unint64_t v155 = 1;
      unsigned int v156 = 1LL;
      if ((v159 & 1) != 0) {
        goto LABEL_178;
      }
    }

    if ((v157 & v158) == 0) {
      v105 = v154;
    }
LABEL_178:
    signed int v132 = *(os_log_s **)v105;
    if (!*(void *)v105 || !os_log_type_enabled(*(os_log_t *)v105, OS_LOG_TYPE_INFO)) {
      goto LABEL_186;
    }
    sub_2CC00((std::string *)v234, (uint64_t)buf);
    if (v234[23] >= 0) {
      char v160 = v234;
    }
    else {
      char v160 = *(_BYTE **)v234;
    }
    *(_DWORD *)v229 = 136315650;
    *(void *)&v229[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&v229[12] = 1024;
    *(_DWORD *)&v229[14] = 167;
    *(_WORD *)&v229[18] = 2080;
    *(void *)&v229[20] = v160;
    unsigned int v134 = "%25s:%-5d Successfully set slave format to match the master device: %s";
LABEL_184:
    _os_log_impl(&dword_0, v132, OS_LOG_TYPE_INFO, v134, v229, 0x1Cu);
    if ((v234[23] & 0x80000000) != 0) {
      operator delete(*(void **)v234);
    }
    goto LABEL_186;
  }

  int v13 = 0LL;
LABEL_24:
  if (v11) {
    operator delete(v11);
  }
  return v13;
}

    int v17 = operator new(0x10uLL);
    v17[2] = 0;
    *(void *)int v17 = &off_474AD0;
    (*(void (**)(uint64_t))(*(void *)a1 + 328LL))(a1);
  }

  __int16 v18 = sub_138E8(10);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
  {
    __int16 v19 = *(os_log_s **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v20 = 136315650;
        *(void *)&v20[4] = "SystemSettingsManager_Aspen.cpp";
        uint64_t v21 = 1024;
        unint64_t v22 = 1096;
        unint64_t v23 = 2048;
        unsigned int v24 = (const char *)a1;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateSilentModeState()",  v20,  0x1Cu);
      }
    }
  }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a5)
  {
    unint64_t v23 = (os_log_t *)sub_138E8(13);
    uint64_t v21 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = 136315394;
      uint64_t v26 = "HP_HardwarePlugInInterface.cpp";
      int v27 = 1024;
      double v28 = 1134;
      unint64_t v22 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioPropertyDataSize is NULL]: HP_HardwarePlugIn_"
            "StreamGetProperty: no data size";
      goto LABEL_22;
    }

    goto LABEL_23;
  }

  sub_92EF8();
  uint64_t v11 = (_DWORD *)sub_28AFEC(a2);
  uint64_t v12 = v11;
  if (!v11 || v11[3] != 1634956402)
  {
    int v17 = (os_log_t *)sub_138E8(13);
    __int16 v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = 136315394;
      uint64_t v26 = "HP_HardwarePlugInInterface.cpp";
      int v27 = 1024;
      double v28 = 1138;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theStream is NULL]: HP_HardwarePlugIn_StreamGetProperty: n o device with given ID",  (uint8_t *)&v25,  0x12u);
    }

    __int16 v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v19 = &off_4865A0;
    v19[2] = 560947818;
  }

  int v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 16LL))(v11);
  __int16 v14 = v13;
  if (v13) {
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16LL))(v13);
  }
  else {
    int v15 = 0;
  }
  uint64_t v25 = a4;
  LODWORD(v26) = 1735159650;
  HIDWORD(v26) = a3;
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t))(*(void *)v12 + 56LL))( v12,  &v25,  0LL,  0LL,  a5,  a6);
  if (v14 && v15) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
  }
  return 0LL;
}

  v74 = (uint64_t *)(a1 + 408);
  uint64_t v20 = 0x9DDFEA08EB382D69LL * (((8 * v14) + 8LL) ^ HIDWORD(v14));
  uint64_t v21 = 0x9DDFEA08EB382D69LL * (HIDWORD(v14) ^ (v20 >> 47) ^ v20);
  unint64_t v22 = 0x9DDFEA08EB382D69LL * (v21 ^ (v21 >> 47));
  unint64_t v23 = *(void *)(a1 + 416);
  if (v23)
  {
    unsigned int v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      BOOL v2 = 0x9DDFEA08EB382D69LL * (v21 ^ (v21 >> 47));
      if (v22 >= v23) {
        BOOL v2 = v22 % v23;
      }
    }

    else
    {
      BOOL v2 = v22 & (v23 - 1);
    }

    char v33 = *(void **)(*v74 + 8 * v2);
    if (v33)
    {
      for (uint64_t i = (void *)*v33; i; uint64_t i = (void *)*i)
      {
        __int16 v35 = i[1];
        if (v35 == v22)
        {
          if (i[2] == v14) {
            goto LABEL_81;
          }
        }

        else
        {
          if (v24.u32[0] > 1uLL)
          {
            if (v35 >= v23) {
              v35 %= v23;
            }
          }

          else
          {
            v35 &= v23 - 1;
          }

          if (v35 != v2) {
            break;
          }
        }
      }
    }
  }

  int v36 = operator new(0x20uLL);
  uint64_t v37 = (void *)(a1 + 424);
  *(void *)buf = v36;
  *(void *)&buf[8] = a1 + 424;
  *int v36 = 0LL;
  v36[1] = v22;
  v36[2] = v14;
  v36[3] = v15;
  if (v15)
  {
    uint64_t v38 = (unint64_t *)&v15->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }

  buf[16] = 1;
  UInt32 v40 = (float)(unint64_t)(*(void *)(a1 + 432) + 1LL);
  v41 = *(float *)(a1 + 440);
  if (!v23 || (float)(v41 * (float)v23) < v40)
  {
    uint64_t v42 = 1LL;
    if (v23 >= 3) {
      uint64_t v42 = (v23 & (v23 - 1)) != 0;
    }
    UInt32 v43 = v42 | (2 * v23);
    v44 = vcvtps_u32_f32(v40 / v41);
    if (v43 <= v44) {
      v45 = v44;
    }
    else {
      v45 = v43;
    }
    sub_52168((uint64_t)v74, v45);
    unint64_t v23 = *(void *)(a1 + 416);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23) {
        BOOL v2 = v22 % v23;
      }
      else {
        BOOL v2 = v22;
      }
    }

    else
    {
      BOOL v2 = (v23 - 1) & v22;
    }
  }

  v46 = *v74;
  v47 = *(void **)(*v74 + 8 * v2);
  if (v47)
  {
    *int v36 = *v47;
LABEL_79:
    _DWORD *v47 = v36;
    goto LABEL_80;
  }

  *int v36 = *v37;
  *uint64_t v37 = v36;
  *(void *)(v46 + 8 * v2) = v37;
  if (*v36)
  {
    v48 = *(void *)(*v36 + 8LL);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v48 >= v23) {
        v48 %= v23;
      }
    }

    else
    {
      v48 &= v23 - 1;
    }

    v47 = (void *)(*v74 + 8 * v48);
    goto LABEL_79;
  }

    unint64_t v23 = *(id *)sub_138E8(17);
    unsigned int v24 = v23;
    if (v23)
    {
      uint64_t v25 = (os_log_s *)v23;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(__p, a1);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 735;
        *(_WORD *)&buf[18] = 2112;
        *(void **)&buf[20] = __p[0];
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Overriding stream count change waiting policy for device %@: simulated devices must wait for stream count change",  buf,  0x1Cu);
        sub_19DFC((uint64_t)__p);
      }
    }

    a2 = 0;
  }

  if (a4)
  {
    inData = 1;
    *(_DWORD *)buf = 1668575852;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_DWORD *)&buf[8] = 0;
    if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)a1 + 16LL))(a1, buf))
    {
      LODWORD(__p[0]) = 1668575852;
      *(void **)((char *)__p + 4) = (void *)a3;
      sub_1919F8((uint64_t)buf, a1);
      uint64_t v26 = *(_DWORD *)buf;
      if (*(_DWORD *)buf || !v63[2])
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v26;
      }

      __p[0] = 0LL;
      __p[1] = 0LL;
      v59 = 0LL;
      int v27 = *(void **)&buf[8];
      sub_7A5B8( __p,  *(const void **)&buf[8],  *(uint64_t *)&buf[16],  (uint64_t)(*(void *)&buf[16] - *(void *)&buf[8]) >> 2);
      if (v27) {
        operator delete(v27);
      }
      double v28 = __p[0];
      BOOL v29 = (AudioObjectID *)__p[1];
      if (__p[0] != __p[1])
      {
        uint64_t v30 = (AudioObjectID *)__p[0];
        while (1)
        {
          LODWORD(__p[0]) = *v30;
          *(_DWORD *)buf = 1668047219;
          *(_DWORD *)&uint8_t buf[4] = a3;
          *(_DWORD *)&buf[8] = 0;
          v31 = sub_36EF4((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
          char v33 = v31;
          if ((_DWORD)v31 || !v32)
          {
            v51 = __cxa_allocate_exception(0x10uLL);
            *(void *)v51 = &off_4865A0;
            v51[2] = v33;
          }

          if (HIDWORD(v31) == 1702259059) {
            break;
          }
          if (++v30 == v29) {
            goto LABEL_66;
          }
        }

        *(void *)&inAddress.mSelector = 0x676C6F626263766CLL;
        inAddress.mElement = 0;
        v44 = AudioObjectSetPropertyData(*v30, &inAddress, 0, 0LL, 4u, &inData);
        v45 = *(id *)sub_138E8(17);
        v46 = v45;
        if (v45)
        {
          v47 = (os_log_s *)v45;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            v48 = inData;
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(__p, a1);
            uint64_t v49 = "Enabling";
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_DWORD *)buf = 136316162;
            *(_WORD *)&_BYTE buf[12] = 1024;
            if (!v48) {
              uint64_t v49 = "Disabling";
            }
            *(_DWORD *)&buf[14] = 776;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v49;
            v62 = 2112;
            *(void **)uint64_t v63 = __p[0];
            *(_WORD *)&v63[8] = 1024;
            *(_DWORD *)&v63[10] = v44;
            _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d %s reference stream control on device %@. status: %u",  buf,  0x2Cu);
            sub_19DFC((uint64_t)__p);
          }
        }
      }

  *a2 = v5 > 0;
  return v5 & ~(v5 >> 31);
}

void sub_5498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    sub_93128((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x50D4LL);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_5518(uint64_t a1)
{
  BOOL v2 = pthread_self();
  int v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  int v4 = pthread_equal(v2, v3);
  if (!v4)
  {
    int v5 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
    if (v5)
    {
      int v7 = v5;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        uint64_t v10 = "CAMutex.cpp";
        __int16 v11 = 1024;
        int v12 = 106;
        _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAMutex::Lock: Could not lock the mutex",  (uint8_t *)&v9,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v7;
    }

    atomic_store((unint64_t)v2, (unint64_t *)(a1 + 16));
  }

  return v4 == 0;
}

void sub_563C(uint64_t a1)
{
  BOOL v2 = pthread_self();
  int v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (pthread_equal(v2, v3))
  {
    atomic_store(0LL, (unint64_t *)(a1 + 16));
    int v4 = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
    if (v4)
    {
      int v5 = v4;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        int v8 = "CAMutex.cpp";
        __int16 v9 = 1024;
        int v10 = 152;
        _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAMutex::Unlock: Could not unlock the mutex",  (uint8_t *)&v7,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v5;
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    int v8 = "CAMutex.cpp";
    __int16 v9 = 1024;
    int v10 = 160;
    _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d  CAMutex::Unlock: A thread is attempting to unlock a Mutex it doesn't own",  (uint8_t *)&v7,  0x12u);
  }

BOOL sub_57A8(uint64_t a1)
{
  BOOL v2 = sub_5518(a1);
  if ((sub_58B0(a1) & 1) == 0)
  {
    int v3 = pthread_self();
    int v4 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
    if (!pthread_equal(v3, v4))
    {
      char v6 = (os_log_t *)sub_138E8(13);
      int v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315394;
          __int16 v9 = "RoutingMutex.cpp";
          __int16 v10 = 1024;
          int v11 = 217;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mutex not owned by current thread",  (uint8_t *)&v8,  0x12u);
        }
      }
    }

    do
      sub_377BF0(a1);
    while (!sub_58B0(a1));
  }

  return v2;
}

uint64_t sub_58B0(uint64_t a1)
{
  BOOL v2 = pthread_self();
  int v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (!pthread_equal(v2, v3))
  {
    int v5 = (os_log_t *)sub_138E8(13);
    char v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        int v15 = "RoutingMutex.cpp";
        __int16 v16 = 1024;
        int v17 = 199;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mutex not owned by current thread",  (uint8_t *)&v14,  0x12u);
      }
    }
  }

  if (*(_DWORD *)(a1 + 136)) {
    return AudioObjectIsOnListenerThread() != 0;
  }
  if (!*(_DWORD *)(a1 + 140)) {
    return 1LL;
  }
  int v7 = pthread_self();
  int v8 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (!pthread_equal(v7, v8))
  {
    int v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        int v15 = "RoutingMutex.cpp";
        __int16 v16 = 1024;
        int v17 = 229;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mutex not owned by current thread",  (uint8_t *)&v14,  0x12u);
      }
    }
  }

  uint64_t v9 = a1 + 144;
  uint64_t v10 = *(void *)(a1 + 152);
  if (v9 == v10) {
    return 0LL;
  }
  do
  {
    uint64_t result = sub_24320(*(void *)(*(void *)(v10 + 16) + 640LL));
    uint64_t v10 = *(void *)(v10 + 8);
    if (v9 == v10) {
      int v11 = 1;
    }
    else {
      int v11 = result;
    }
  }

  while (v11 != 1);
  return result;
}

BOOL sub_5A6C(uint64_t a1, int *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v2 & 1) == 0)
  {
    __int16 v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 205;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Underlying Port is not valid",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }

  int v4 = *a2;
  uint64_t v5 = 1LL;
  if (*a2 > 1886417761)
  {
    if (v4 > 1936746610)
    {
      if (v4 > 1953653605)
      {
        if (v4 > 1986164322)
        {
          if (v4 > 1986947427)
          {
            if (v4 == 1986947428 || v4 == 2004050279) {
              goto LABEL_136;
            }
            int v8 = 2004054901;
            goto LABEL_135;
          }

          if (v4 != 1986164323)
          {
            int v8 = 1986814563;
            goto LABEL_135;
          }

          goto LABEL_136;
        }

        if (v4 > 1953719141)
        {
          if (v4 == 1953719142)
          {
            sub_380024((uint64_t *)buf);
            uint64_t v5 = *(void *)buf != 0LL;
            sub_7A6D8((const void **)buf);
            return v5;
          }

          if (v4 == 1970040164) {
            goto LABEL_136;
          }
          int v8 = 1970496630;
          goto LABEL_135;
        }

        if (v4 != 1953653606)
        {
          if (v4 != 1953655149) {
            goto LABEL_155;
          }
          sub_B8CBC((uint64_t *)v22, (uint64_t *)(a1 + 88), "", 273);
          (*(void (**)(_BYTE *__return_ptr))(**((void **)v22[0] + 24) + 288LL))(buf);
          uint64_t v5 = *(void *)buf != *(void *)&buf[8];
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }

          int v14 = v22;
LABEL_153:
          sub_7A768((uint64_t)v14);
          return v5;
        }

        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 277);
        sub_2038A4((uint64_t *)v22, *(uint64_t *)buf);
        uint64_t v5 = v22[0] != 0LL;
        sub_7A6D8(v22);
LABEL_152:
        int v14 = (const void **)buf;
        goto LABEL_153;
      }

      if (v4 > 1936749679)
      {
        if (v4 <= 1937204589)
        {
          if (v4 == 1936749680) {
            goto LABEL_126;
          }
          if (v4 != 1936945763) {
            goto LABEL_155;
          }
          sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 344);
          uint64_t v10 = (*(uint64_t (**)(void, int *))(**(void **)buf + 16LL))(*(void *)buf, a2);
        }

        else
        {
          switch(v4)
          {
            case 1937204590:
              goto LABEL_136;
            case 1952609377:
              sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 293);
              uint64_t v10 = (*(uint64_t (**)(void, int *))(**(void **)buf + 16LL))(*(void *)buf, a2);
              break;
            case 1952740208:
              sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 285);
              uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 360LL))(*(void *)buf);
              break;
            default:
              goto LABEL_155;
          }
        }

        goto LABEL_151;
      }

      if (v4 > 1936748140)
      {
        if (v4 == 1936748141)
        {
          sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 261);
          BOOL v17 = *(void *)(*(void *)buf + 96LL) == *(void *)(*(void *)buf + 104LL);
LABEL_146:
          uint64_t v5 = !v17;
          goto LABEL_152;
        }

        if (v4 != 1936748656) {
          goto LABEL_155;
        }
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 269);
        uint64_t v10 = sub_F7070(*(uint64_t *)buf, a2[2]);
        goto LABEL_151;
      }

      unsigned __int16 v7 = 26739;
    }

    else
    {
      if (v4 <= 1886742883)
      {
        if (v4 > 1886613618)
        {
          if (v4 <= 1886614624)
          {
            if (v4 == 1886613619) {
              return v5;
            }
            int v8 = 1886614381;
            goto LABEL_135;
          }

          if (v4 == 1886614625 || v4 == 1886614882) {
            return v5;
          }
          int v9 = 1886681456;
          goto LABEL_113;
        }

        if (v4 > 1886484337)
        {
          if (v4 == 1886484338 || v4 == 1886611810) {
            return v5;
          }
          int v9 = 1886613101;
          goto LABEL_113;
        }

        if (v4 == 1886417762) {
          goto LABEL_126;
        }
        if (v4 != 1886417783) {
          goto LABEL_155;
        }
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 242);
        uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 328LL))(*(void *)buf);
LABEL_151:
        uint64_t v5 = v10;
        goto LABEL_152;
      }

      if (v4 <= 1936221549)
      {
        if (v4 <= 1886810225)
        {
          if (v4 == 1886742884) {
            return v5;
          }
          int v9 = 1886808435;
        }

        else
        {
          if (v4 == 1886810226) {
            return v5;
          }
          if (v4 == 1935762278) {
            goto LABEL_136;
          }
          int v9 = 1935895923;
        }

        goto LABEL_113;
      }

      if (v4 > 1936745317)
      {
        if (v4 == 1936745318) {
          goto LABEL_136;
        }
        if (v4 == 1936745586)
        {
          sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 265);
          uint64_t v10 = sub_F9F70(*(uint64_t *)buf, a2[2]);
          goto LABEL_151;
        }

        unsigned __int16 v7 = 25966;
      }

      else
      {
        if (v4 == 1936221550 || v4 == 1936225136) {
          goto LABEL_136;
        }
        unsigned __int16 v7 = 24944;
      }
    }

    int v8 = v7 | 0x73700000;
    goto LABEL_135;
  }

  if (v4 > 1819503986)
  {
    if (v4 <= 1885955427)
    {
      if (v4 <= 1885497709)
      {
        if (v4 > 1869832546)
        {
          if (v4 == 1869832547) {
            goto LABEL_136;
          }
          if (v4 != 1885430643 && v4 != 1885434722) {
            goto LABEL_155;
          }
LABEL_126:
          sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 253);
          int v11 = *(std::__shared_weak_count **)&buf[8];
          uint64_t v5 = *(void *)(*(void *)buf + 96LL) != *(void *)(*(void *)buf + 104LL);
          if (!*(void *)&buf[8]) {
            return v5;
          }
          int v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v13 = __ldaxr(v15);
          while (__stlxr(v13 - 1, v15));
          goto LABEL_139;
        }

        if (v4 != 1819503987)
        {
          int v8 = 1819505773;
          goto LABEL_135;
        }

LABEL_136:
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 340);
        uint64_t v5 = (*(uint64_t (**)(void, int *))(**(void **)buf + 16LL))(*(void *)buf, a2);
        int v11 = *(std::__shared_weak_count **)&buf[8];
        if (!*(void *)&buf[8]) {
          return v5;
        }
        __int16 v16 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v13 = __ldaxr(v16);
        while (__stlxr(v13 - 1, v16));
LABEL_139:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }

        return v5;
      }

      if (v4 > 1885566063)
      {
        if (v4 == 1885566064) {
          return v5;
        }
        if (v4 != 1885696116)
        {
          int v9 = 1885890929;
          goto LABEL_113;
        }

        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 289);
        BOOL v17 = ((*(uint64_t (**)(void))(**(void **)buf + 112LL))(*(void *)buf) & 0xFF00000000LL) == 0;
        goto LABEL_146;
      }

      if (v4 == 1885497710) {
        return v5;
      }
      if (v4 != 1885561196) {
        goto LABEL_155;
      }
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 297);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 376LL))(*(void *)buf);
      goto LABEL_151;
    }

    if (v4 <= 1886282098)
    {
      if (v4 <= 1885959025)
      {
        if (v4 == 1885955428) {
          goto LABEL_136;
        }
        int v9 = 1885956208;
      }

      else
      {
        if (v4 == 1885959026 || v4 == 1886218596) {
          return v5;
        }
        int v9 = 1886282093;
      }

LABEL_113:
      if (v4 == v9) {
        return v5;
      }
      goto LABEL_155;
    }

    if (v4 > 1886353261)
    {
      if (v4 == 1886353262 || v4 == 1886415204) {
        return v5;
      }
      int v9 = 1886417524;
      goto LABEL_113;
    }

    if (v4 == 1886282099)
    {
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 257);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 256LL))(*(void *)buf);
    }

    else
    {
      if (v4 != 1886283375) {
        goto LABEL_155;
      }
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 246);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 344LL))(*(void *)buf);
    }

    goto LABEL_151;
  }

  if (v4 > 1685021039)
  {
    if (v4 > 1752327776)
    {
      if (v4 <= 1767989615)
      {
        if (v4 == 1752327777) {
          return v5;
        }
        int v8 = 1752462195;
      }

      else
      {
        if (v4 == 1767989616 || v4 == 1768382832) {
          goto LABEL_136;
        }
        int v8 = 1819046768;
      }
    }

    else
    {
      if (v4 <= 1685287025)
      {
        if (v4 == 1685021040 || v4 == 1685088612)
        {
          sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 238);
          uint64_t v5 = (*(uint64_t (**)(void))(**(void **)buf + 424LL))(*(void *)buf);
          int v11 = *(std::__shared_weak_count **)&buf[8];
          if (!*(void *)&buf[8]) {
            return v5;
          }
          int v12 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          goto LABEL_139;
        }

        goto LABEL_155;
      }

      int v8 = 1685484390;
    }

    goto LABEL_135;
  }

  if (v4 <= 1651797099)
  {
    if (v4 > 1651796324)
    {
      goto LABEL_155;
    }

    if (v4 == 1650551140 || v4 == 1651271025) {
      goto LABEL_136;
    }
    unsigned __int16 v6 = 24946;
    goto LABEL_103;
  }

  if (v4 <= 1651798885)
  {
    if (v4 != 1651797100)
    {
      unsigned __int16 v6 = 28787;
LABEL_103:
      int v8 = v6 | 0x62740000;
      goto LABEL_135;
    }

    goto LABEL_136;
  }

  if (v4 == 1651798886 || v4 == 1668051827) {
    goto LABEL_136;
  }
  int v8 = 1684826732;
LABEL_135:
  if (v4 == v8) {
    goto LABEL_136;
  }
LABEL_155:
  if (v4 != 1818850145 && v4 != 1818850162) {
    return sub_5CC60(a1, a2) != 0;
  }
  return v5;
}

      uint64_t v56 = *(os_unfair_lock_s **)&v56[2]._os_unfair_lock_opaque;
      if (v56 == (os_unfair_lock_s *)&v89) {
        goto LABEL_114;
      }
    }

    v59 = v58;
    uint64_t v60 = *(void **)&v56[4]._os_unfair_lock_opaque;
    v88[0] = (uint64_t)v60;
    if (v60 && (sub_1FF9AC(v60) & 1) == 0)
    {
      sub_7D084(&v91, "kBluetoothAudioDeviceFeatureFindMyPlayBack");
      v61 = sub_204348((uint64_t)v60, (const UInt8 *)&v91);
      v62 = v61;
      if (((char)v91.__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        if (v61) {
          goto LABEL_109;
        }
        goto LABEL_108;
      }

      operator delete(v91.__r_.__value_.__l.__data_);
      if (!v62) {
LABEL_108:
      }
        sub_13315C((uint64_t **)(v85 + 40), (unint64_t *)&v56[4]._os_unfair_lock_opaque, (uint64_t *)&v56[4]);
    }

          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_4865A0;
          exception[2] = 561211770;
        }

        goto LABEL_37;
      }

      return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56LL))(v13, &v48, a3);
    }

    unsigned int v24 = *a5;
    if (v24 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])(a1, a2, a3, a4))
    {
      uint64_t v42 = (os_log_t *)sub_138E8(13);
      BOOL v17 = *v42;
      if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "HP_Control.cpp";
        int v52 = 1024;
        int v53 = 1095;
        __int16 v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyClockS"
              "ourceKindForID";
        goto LABEL_112;
      }

      goto LABEL_113;
    }

    if (*(_DWORD *)(a6 + 8) != 4)
    {
      UInt32 v43 = (os_log_t *)sub_138E8(13);
      BOOL v17 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "HP_Control.cpp";
        int v52 = 1024;
        int v53 = 1099;
        __int16 v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong input data size for kAudioDeviceProperty"
              "ClockSourceKindForID";
        goto LABEL_112;
      }

      goto LABEL_113;
    }

    if (!*(void *)a6)
    {
      v44 = (os_log_t *)sub_138E8(13);
      BOOL v17 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "HP_Control.cpp";
        int v52 = 1024;
        int v53 = 1100;
        __int16 v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: wrong"
              " input data buffer for kAudioDevicePropertyClockSourceKindForID";
        goto LABEL_112;
      }

      goto LABEL_113;
    }

    if (*(_DWORD *)(a6 + 24) != 4)
    {
      v45 = (os_log_t *)sub_138E8(13);
      BOOL v17 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "HP_Control.cpp";
        int v52 = 1024;
        int v53 = 1101;
        __int16 v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong output data size for kAudioDevicePropert"
              "yClockSourceKindForID";
        goto LABEL_112;
      }

      goto LABEL_113;
    }

    if (!*(void *)(a6 + 16))
    {
      v46 = (os_log_t *)sub_138E8(13);
      BOOL v17 = *v46;
      if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "HP_Control.cpp";
        int v52 = 1024;
        int v53 = 1102;
        __int16 v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: wron"
              "g output data buffer for kAudioDevicePropertyClockSourceKindForID";
        goto LABEL_112;
      }

      goto LABEL_113;
    }

    *(_DWORD *)buf = 4;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56LL))(v13, &v48, 4LL);
  }

  return result;
}

      sub_B8CBC((uint64_t *)v17, (uint64_t *)(a1 + 88), "", 457);
      int v4 = (*(uint64_t (**)(void, int *))(**(void **)v17 + 24LL))(*(void *)v17, a2);
      uint64_t v10 = *(std::__shared_weak_count **)&v17[8];
      if (*(void *)&v17[8])
      {
        int v11 = (unint64_t *)(*(void *)&v17[8] + 8LL);
        do
          int v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }

      return v4;
    }

    if (v5 > 1685484389)
    {
      if (v5 <= 1752462194)
      {
        if (v5 != 1685484390)
        {
          unsigned __int16 v6 = 1752327777;
          goto LABEL_120;
        }

        return v4;
      }

      if (v5 != 1752462195 && v5 != 1767989616)
      {
        unsigned __int16 v6 = 1768382832;
        goto LABEL_120;
      }

      goto LABEL_113;
    }

    if (v5 <= 1685088611)
    {
      if (v5 != 1684826732)
      {
        unsigned __int16 v6 = 1685021040;
        goto LABEL_120;
      }

      goto LABEL_113;
    }

    if (v5 == 1685088612) {
      return v4;
    }
    if (v5 != 1685287026)
    {
      unsigned __int16 v6 = 1685287027;
      goto LABEL_120;
    }

    return 1LL;
  }

  if (v5 <= 1885890928)
  {
    if (v5 > 1885434721)
    {
      if (v5 > 1885561195)
      {
        if (v5 == 1885561196 || v5 == 1885566064) {
          return v4;
        }
        unsigned __int16 v6 = 1885696116;
        goto LABEL_120;
      }

      if (v5 != 1885434722)
      {
        unsigned __int16 v6 = 1885497710;
        goto LABEL_120;
      }

      return v4;
    }

    if (v5 > 1819505772)
    {
      if (v5 != 1819505773 && v5 != 1869832547)
      {
        unsigned __int16 v6 = 1885430643;
        goto LABEL_120;
      }

      goto LABEL_113;
    }

    if (v5 == 1819046768) {
      return v4;
    }
    int v8 = 1819503987;
LABEL_112:
    if (v5 != v8) {
      return sub_5E070(a1, a2);
    }
    goto LABEL_113;
  }

  if (v5 <= 1886282092)
  {
    if (v5 > 1885956207)
    {
      if (v5 == 1885956208 || v5 == 1885959026) {
        return v4;
      }
      unsigned __int16 v6 = 1886218596;
      goto LABEL_120;
    }

    if (v5 != 1885890929)
    {
      unsigned __int16 v6 = 1885955428;
      goto LABEL_120;
    }

    return v4;
  }

  if (v5 > 1886353261)
  {
    if (v5 == 1886353262 || v5 == 1886415204) {
      return v4;
    }
    unsigned __int16 v6 = 1886417524;
  }

  else
  {
    if (v5 == 1886282093 || v5 == 1886282099) {
      return v4;
    }
    unsigned __int16 v6 = 1886283375;
  }

            int v93 = std::__shared_weak_count::lock(v82);
            if (!v93) {
              uint64_t v81 = 0LL;
            }
            if (!v87)
            {
LABEL_127:
              unsigned int v96 = v81 == 0LL;
              if (!v93) {
                goto LABEL_131;
              }
              goto LABEL_128;
            }

            *(void *)buf = v50 + 6;
            ((void (*)(_BYTE *))off_473BD0[v54])(buf);
          }
        }

        return;
      }
    }
  }

  uint64_t v50 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v82;
  if (!v50) {
    return;
  }
  int v91 = (unint64_t *)&v50->__shared_owners_;
  do
    int v52 = __ldaxr(v91);
  while (__stlxr(v52 - 1, v91));
LABEL_116:
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    uint64_t v72 = sub_138E8(13);
    if ((*(_BYTE *)(v72 + 8) & 1) != 0)
    {
      int v73 = *(os_log_t *)v72;
      if (*(void *)v72)
      {
        if (os_log_type_enabled(*(os_log_t *)v72, OS_LOG_TYPE_DEBUG))
        {
          int v133 = *(void *)a2;
          unsigned int v134 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v133);
          if (v136 >= 0) {
            m = &__lk;
          }
          else {
            m = __lk.__m_;
          }
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          v146 = 1024;
          uint64_t v147 = 288;
          v148 = 2080;
          *(void *)v149 = m;
          *(_WORD *)&v149[8] = 1024;
          *(_DWORD *)&v149[10] = v39;
          v75 = "%25s:%-5d Successfully synchronized the property %s on id %u.";
          v76 = v73;
          BOOL v77 = OS_LOG_TYPE_DEBUG;
          unint64_t v78 = 34;
          goto LABEL_147;
        }
      }
    }

                      uint64_t v56 = 1000 * v55.__d_.__rep_;
LABEL_114:
                      if (v56 > (v54.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                      {
                        v57.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                        goto LABEL_117;
                      }
                    }

                    v57.__d_.__rep_ = v56 + v54.__d_.__rep_;
LABEL_117:
                    std::condition_variable::__do_timed_wait(&v120, &__lk, v57);
                    std::chrono::steady_clock::now();
                  }

                  if (std::chrono::steady_clock::now().__d_.__rep_ >= v53 || v96) {
                    goto LABEL_92;
                  }
                  continue;
                }
              }

              uint64_t v37 = 12;
              if (v36) {
                goto LABEL_83;
              }
LABEL_84:
              if (v37)
              {
                if (v37 == 12)
                {
                  uint64_t v58 = sub_138E8(13);
                  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
                  {
                    v59 = *(os_log_s **)v58;
                    if (*(void *)v58)
                    {
                      if (os_log_type_enabled(*(os_log_t *)v58, OS_LOG_TYPE_DEBUG))
                      {
                        __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
                        *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
                        sub_613AC((uint64_t)&v89, (unsigned int *)&__lk);
                        uint64_t v60 = v91 >= 0 ? &v89 : (void **)v89;
                        *(_DWORD *)buf = 136315906;
                        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
                        *(_WORD *)&_BYTE buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 288;
                        *(_WORD *)&_BYTE buf[18] = 2080;
                        *(void *)&buf[20] = v60;
                        *(_WORD *)&_BYTE buf[28] = 1024;
                        *(_DWORD *)&buf[30] = v12;
                        _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  buf,  0x22u);
                        if (v91 < 0) {
                          operator delete(v89);
                        }
                      }
                    }
                  }
                }

                sub_7D898((uint64_t)&__p);
                std::condition_variable::~condition_variable(&v120);
                std::mutex::~mutex(&v121);
                v61 = v103[0];
LABEL_138:
                if (v61) {
                  operator delete(v61);
                }
LABEL_140:
                if (v21) {
                  operator delete(v21);
                }
                return 1LL;
              }
            }

            uint64_t v42 = 0;
            if (!v83) {
              goto LABEL_79;
            }
LABEL_78:
            int v84 = v41;
            operator delete(v41);
            goto LABEL_79;
          }
        }

        else if (v33)
        {
          goto LABEL_61;
        }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    uint64_t v72 = sub_138E8(13);
    if ((*(_BYTE *)(v72 + 8) & 1) != 0)
    {
      int v73 = *(os_log_t *)v72;
      if (*(void *)v72)
      {
        if (os_log_type_enabled(*(os_log_t *)v72, OS_LOG_TYPE_DEBUG))
        {
          int v133 = *(void *)a2;
          unsigned int v134 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v133);
          if (v136 >= 0) {
            m = &__lk;
          }
          else {
            m = __lk.__m_;
          }
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          v146 = 1024;
          uint64_t v147 = 288;
          v148 = 2080;
          *(void *)v149 = m;
          *(_WORD *)&v149[8] = 1024;
          *(_DWORD *)&v149[10] = v39;
          v75 = "%25s:%-5d Successfully synchronized the property %s on id %u.";
          v76 = v73;
          BOOL v77 = OS_LOG_TYPE_DEBUG;
          unint64_t v78 = 34;
          goto LABEL_147;
        }
      }
    }

  if (!*a2)
  {
    uint64_t v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v118, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"volumeCommands"))
  {
    if (!*a2)
    {
      unsigned int v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v131, "Could not construct");
    }

    sub_392AE8(buf, *a2, (const UInt8 *)"volumeCommands");
    sub_15805C((unsigned int **)v155, (CFArrayRef *)buf);
    v66 = *(void **)v8;
    if (*(void *)v8)
    {
      *(void *)(a1 + 168) = v66;
      operator delete(v66);
      *(void *)int v8 = 0LL;
      *(void *)(v8 + 8) = 0LL;
      *(void *)(v8 + 16) = 0LL;
    }

    *(_OWORD *)(a1 + 160) = *(_OWORD *)v155;
    *(void *)(a1 + 176) = *(void *)&v155[16];
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
  }

  if (!*a2)
  {
    v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v119, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"volumeInfo"))
  {
    if (!*a2)
    {
      signed int v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v132, "Could not construct");
    }

    sub_1468E4(v155, *a2, (const UInt8 *)"volumeInfo");
    uint64_t v67 = *v141;
    __int16 *v141 = *(const void **)v155;
    *(void *)unint64_t v155 = v67;
    if (v67) {
      CFRelease(v67);
    }
  }

  if (!*a2)
  {
    v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v120, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"busChannelCounts"))
  {
    *(void *)(a1 + 216) = *(void *)(a1 + 208);
    if (!*a2)
    {
      int v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v133, "Could not construct");
    }

    sub_392AE8(cf, *a2, (const UInt8 *)"busChannelCounts");
    uint64_t v68 = (const __CFArray *)cf[0];
    if (!cf[0])
    {
LABEL_149:
      uint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v87, "Could not construct");
    }

    int v69 = 0LL;
    while (v69 < CFArrayGetCount(v68))
    {
      v70 = (const __CFArray *)cf[0];
      if (!cf[0])
      {
        int v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v98, "Could not construct");
      }

      if (CFArrayGetCount((CFArrayRef)cf[0]) <= v69 || (uint64_t v71 = CFArrayGetValueAtIndex(v70, v69)) == 0LL)
      {
        uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v97, "Could not find item");
      }

      sub_2EA480((uint64_t)v155, v71);
      uint64_t v72 = *(void **)v155;
      if (*(void *)&v155[8] - *(void *)v155 != 8LL)
      {
        uint64_t v99 = (os_log_t *)sub_138E8(13);
        uint64_t v100 = *v99;
        if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 550;
          _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        unsigned int v101 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v101, "Precondition failure.");
      }

      int v73 = **(void **)v155;
      v75 = *(void **)(a1 + 216);
      v74 = *(void *)(a1 + 224);
      if ((unint64_t)v75 >= v74)
      {
        BOOL v77 = ((uint64_t)v75 - *v9) >> 3;
        unint64_t v78 = v74 - *v9;
        v79 = v78 >> 2;
        else {
          uint64_t v80 = v79;
        }
        uint64_t v81 = (char *)sub_7DC90(v80);
        int v83 = &v81[8 * v77];
        *(void *)int v83 = v73;
        v76 = v83 + 8;
        int v85 = *(char **)(a1 + 208);
        int v84 = *(char **)(a1 + 216);
        if (v84 != v85)
        {
          do
          {
            uint64_t v86 = *((void *)v84 - 1);
            v84 -= 8;
            *((void *)v83 - 1) = v86;
            v83 -= 8;
          }

          while (v84 != v85);
          int v84 = (char *)*v9;
        }

        *(void *)(a1 + 208) = v83;
        *(void *)(a1 + 216) = v76;
        *(void *)(a1 + 224) = &v81[8 * v82];
        if (v84) {
          operator delete(v84);
        }
      }

      else
      {
        *v75 = v73;
        v76 = v75 + 1;
      }

      *(void *)(a1 + 216) = v76;
      operator delete(v72);
      ++v69;
      uint64_t v68 = (const __CFArray *)cf[0];
      if (!cf[0]) {
        goto LABEL_149;
      }
    }

    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }

  if (!*a2)
  {
    uint64_t v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"busCount"))
  {
    if (*a2)
    {
      v88 = sub_D13C4(*a2, (const UInt8 *)"busCount");
      if (v88)
      {
        sub_2EA480((uint64_t)v155, v88);
        int v89 = *(void **)v155;
        if (*(void *)&v155[8] - *(void *)v155 != 8LL)
        {
          unint64_t v135 = (os_log_t *)sub_138E8(13);
          unsigned int v136 = *v135;
          if (*v135 && os_log_type_enabled(*v135, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 558;
            _os_log_impl( &dword_0,  v136,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          v137 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v137, "Precondition failure.");
        }

        unint64_t v90 = **(_DWORD **)v155;
        int v91 = *(unsigned int *)(*(void *)v155 + 4LL);
        if (*(_BYTE *)(a1 + 240))
        {
          *(_DWORD *)(a1 + 232) = v90;
          *(_DWORD *)(a1 + 236) = v91;
        }

        else
        {
          *(void *)(a1 + 232) = v90 | (v91 << 32);
          *(_BYTE *)(a1 + 240) = 1;
        }

        operator delete(v89);
        goto LABEL_161;
      }

      unsigned int v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v134, "Could not find item");
    }

    else
    {
      unsigned int v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v134, "Could not construct");
    }
  }

void sub_65E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_6648(void *result)
{
  v1 = (void *)result[56];
  if (v1 != (void *)result[55])
  {
    unsigned __int8 v2 = result;
    do
    {
      uint64_t v5 = 0LL;
      if ((*(unsigned int (**)(void *, void, uint64_t *))(*v2 + 264LL))(v2, *(v1 - 1), &v5))
      {
        (*(void (**)(void, void *))(*(void *)*(v1 - 1) + 16LL))(*(v1 - 1), v2);
        (*(void (**)(void *, uint64_t))(*v2 + 272LL))(v2, v5);
      }

      uint64_t v3 = v2[56];
      int v4 = *(void **)(v3 - 8);
      v1 = (void *)(v3 - 8);
      uint64_t result = v4;
      void *v1 = 0LL;
      if (v4) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
      }
      v2[56] = v1;
    }

    while (v1 != (void *)v2[55]);
  }

  return result;
}

uint64_t sub_66FC(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(a1 + 360));
  return (v1 >> 1) & 1;
}

uint64_t sub_670C()
{
  return 0LL;
}

uint64_t sub_6714(uint64_t a1, int *a2)
{
  if (*a2 == 1986095470) {
    return 1LL;
  }
  sub_6DD4();
  int v5 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  if (*(_DWORD *)(a1 + 108) != 2)
  {
    uint64_t v12 = sub_138E8(13);
    id v13 = sub_8C7D4(1, *(void **)v12, *(void *)(v12 + 8));
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    int v15 = v14;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      uint64_t v24 = (uint64_t)"VirtualAudio_PlugIn.mm";
      __int16 v25 = 1024;
      int v26 = 5134;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): VirtualAudio PlugIn is not initialized yet",  (uint8_t *)&v23,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
  }

  int v6 = *a2;
  BOOL v2 = 1LL;
  if (*a2 > 1818850144)
  {
    if (v6 > 1936028520)
    {
      if (v6 > 1986094178)
      {
        if (v6 > 1987077485)
        {
          if (v6 == 1987077486) {
            goto LABEL_66;
          }
          int v7 = 2019714413;
        }

        else
        {
          int v7 = 1987016304;
        }

        goto LABEL_64;
      }

      if (v6 > 1936745572)
      {
        if (v6 != 1936745573)
        {
          if (v6 == 1936746862) {
            goto LABEL_66;
          }
          int v7 = 1936882284;
          goto LABEL_64;
        }

        if ((MGGetBoolAnswer(@"assistant") & 1) != 0) {
          goto LABEL_66;
        }
        uint64_t v11 = sub_93B80();
LABEL_76:
        BOOL v2 = v11;
        goto LABEL_66;
      }

      if (v6 == 1936028521 || v6 == 1936225648) {
        goto LABEL_66;
      }
      int v7 = 1936745332;
    }

    else if (v6 > 1886549106)
    {
      if (v6 > 1920230245)
      {
        if (v6 == 1920230246 || v6 == 1920297328) {
          goto LABEL_66;
        }
        int v7 = 1920426613;
      }

      else
      {
        if (v6 == 1886549107 || v6 == 1903653475) {
          goto LABEL_66;
        }
        int v7 = 1919120504;
      }
    }

    else if (v6 > 1868853874)
    {
      if (v6 == 1868853875 || v6 == 1886350709) {
        goto LABEL_66;
      }
      int v7 = 1886548848;
    }

    else
    {
      if (v6 == 1818850145 || v6 == 1818850162) {
        goto LABEL_66;
      }
      int v7 = 1819173229;
    }

    goto LABEL_64;
  }

  if (v6 <= 1651664754)
  {
    if (v6 > 1634629489)
    {
      if (v6 <= 1635152482)
      {
        if (v6 == 1634629490 || v6 == 1634756195) {
          goto LABEL_66;
        }
        int v7 = 1634759267;
        goto LABEL_64;
      }

      if (v6 != 1635152483)
      {
        if (v6 == 1651077236) {
          goto LABEL_66;
        }
        int v7 = 1651077731;
        goto LABEL_64;
      }

      goto LABEL_69;
    }

    if (v6 <= 1634624370)
    {
      if (v6 != 1633907299)
      {
        int v7 = 1633969267;
        goto LABEL_64;
      }

LABEL_69:
      uint64_t v9 = sub_6A92C(*(void *)(a1 + 128), a2[2]);
      if (!v9)
      {
        uint64_t v17 = sub_138E8(13);
        id v18 = sub_8C7D4(1, *(void **)v17, *(void *)(v17 + 8));
        __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        uint64_t v20 = v19;
        if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          int v21 = a2[2];
          int v23 = 136315650;
          uint64_t v24 = (uint64_t)"VirtualAudio_PlugIn.mm";
          __int16 v25 = 1024;
          int v26 = 5199;
          __int16 v27 = 1024;
          int v28 = v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [vaPort is NULL]: VirtualAudio_Port could not be located for ID: %u",  (uint8_t *)&v23,  0x18u);
        }

        unint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v22, "VirtualAudio_Port could not be located for ID: %u");
      }

      if (*a2 == 1635152483) {
        int v10 = 1885434722;
      }
      else {
        int v10 = 1885430643;
      }
      int v23 = v10;
      uint64_t v24 = 1735159650LL;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v9 + 32LL))(v9, &v23);
      goto LABEL_76;
    }

    if (v6 == 1634624371 || v6 == 1634627952) {
      goto LABEL_66;
    }
    int v7 = 1634627954;
LABEL_64:
    if (v6 != v7) {
      BOOL v2 = sub_5CC60(a1, a2) != 0;
    }
    goto LABEL_66;
  }

  if (v6 > 1685283954)
  {
    if (v6 > 1751480690)
    {
      if (v6 == 1751480691 || v6 == 1768845421) {
        goto LABEL_66;
      }
      int v7 = 1769304164;
    }

    else
    {
      if (v6 == 1685283955) {
        goto LABEL_66;
      }
      if (v6 == 1701013875)
      {
        BOOL v2 = 0LL;
        goto LABEL_66;
      }

      int v7 = 1701737068;
    }

    goto LABEL_64;
  }

  if (v6 > 1668313698)
  {
    if (v6 == 1668313699 || v6 == 1668575346) {
      goto LABEL_66;
    }
    int v7 = 1684632434;
    goto LABEL_64;
  }

  if (v6 != 1651664755 && v6 != 1667329392)
  {
    int v7 = 1668310627;
    goto LABEL_64;
  }

      *((_DWORD *)buffer + 23) = v26;
      goto LABEL_70;
    }

    *(void *)buffer = 0LL;
    values = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    LOWORD(v34) = 257;
    sub_13408((uint64_t)&values, @"version", 0);
    sub_13408((uint64_t)&values, @"type", 1635083896);
    sub_13408((uint64_t)&values, @"subtype", 1936286821);
    sub_13408((uint64_t)&values, @"manufacturer", 1634758764);
    Mutable = CFDataCreateMutable(0LL, 0LL);
    *(void *)bytes = 0LL;
    CFDataAppendBytes(Mutable, bytes, 8LL);
    *(_DWORD *)v31 = bswap32(((*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2) + 1);
    CFDataAppendBytes(Mutable, v31, 4LL);
    int v14 = bswap32(*(_DWORD *)(a2 + 84));
    *(_DWORD *)BOOL v29 = 0;
    uint64_t v30 = v14;
    CFDataAppendBytes(Mutable, v29, 8LL);
    if (*(_DWORD *)(a2 + 80))
    {
      int v15 = 0LL;
      __int16 v16 = 0LL;
      do
      {
        *(_DWORD *)BOOL v29 = bswap32(v16 + 1000);
        uint64_t v30 = bswap32(COERCE_UNSIGNED_INT((float)*(unsigned int *)(*(void *)(a2 + 56) + v15)));
        CFDataAppendBytes(Mutable, v29, 8LL);
        *(_DWORD *)BOOL v29 = bswap32(v16 + 2000);
        uint64_t v30 = bswap32(COERCE_UNSIGNED_INT((float)*(unsigned int *)(*(void *)(a2 + 56) + v15 + 4)));
        CFDataAppendBytes(Mutable, v29, 8LL);
        *(_DWORD *)BOOL v29 = bswap32(v16 + 3000);
        uint64_t v30 = bswap32(*(_DWORD *)(*(void *)(a2 + 56) + v15 + 8));
        CFDataAppendBytes(Mutable, v29, 8LL);
        *(_DWORD *)BOOL v29 = bswap32(v16 + 4000);
        uint64_t v30 = bswap32(*(_DWORD *)(*(void *)(a2 + 56) + v15 + 12));
        CFDataAppendBytes(Mutable, v29, 8LL);
        *(_DWORD *)BOOL v29 = bswap32(v16 + 5000);
        uint64_t v30 = bswap32(*(_DWORD *)(*(void *)(a2 + 56) + v15 + 16));
        CFDataAppendBytes(Mutable, v29, 8LL);
        ++v16;
        v15 += 20LL;
      }

      while (v16 < *(unsigned int *)(a2 + 80));
    }

    if (BYTE1(v34) && Mutable && values) {
      CFDictionarySetValue((CFMutableDictionaryRef)values, @"data", Mutable);
    }
    CFRelease(Mutable);
    if (BYTE1(v34))
    {
      uint64_t v17 = *(const void **)(a2 + 176);
      id v18 = values;
      if (!v17 || !values)
      {
LABEL_36:
        if (v18)
        {
          CFRetain(v18);
          __int16 v19 = values;
        }

        else
        {
          __int16 v19 = 0LL;
        }

        *(void *)buffer = v19;
        sub_13850((uint64_t)&values);
        return 0LL;
      }

      CFDictionarySetValue((CFMutableDictionaryRef)values, @"name", v17);
    }

    id v18 = values;
    goto LABEL_36;
  }

  if (a3 > 20)
  {
    if (a3 == 21)
    {
      uint64_t result = 0LL;
      uint64_t v12 = *(_DWORD *)(a2 + 88);
      goto LABEL_48;
    }

    if (a3 != 36) {
      return result;
    }
    *(_OWORD *)buffer = *(_OWORD *)(a2 + 168);
    uint64_t result = *(void *)(a2 + 176);
    if (!result) {
      return result;
    }
    CFRetain((CFTypeRef)result);
    return 0LL;
  }

  if (a3 == 11)
  {
    uint64_t result = 0LL;
    uint64_t v12 = 1;
LABEL_48:
    *(_DWORD *)buffer = v12;
    return result;
  }

  if (a3 != 16) {
    return result;
  }
  if (a5 < 0x3E8) {
    return 4294956418LL;
  }
  uint64_t result = 4294956418LL;
  if (a5 % 0x3E8 < *(_DWORD *)(a2 + 80) && 1000 * (a5 / 0x3E8) == 2000)
  {
    if (buffer)
    {
      values = @"Parametric";
      v34 = @"Butterworth Low Pass";
      __int16 v35 = @"Butterworth High Pass";
      int v36 = @"Resonant Low Pass";
      uint64_t v37 = @"Resonant High Pass";
      uint64_t v38 = @"Band Pass";
      v39 = @"Band Stop";
      UInt32 v40 = @"Low Shelf";
      v41 = @"High Shelf";
      uint64_t v42 = @"Resonant Low Shelf";
      UInt32 v43 = @"Resonant High Shelf";
      int v10 = CFArrayCreate(0LL, (const void **)&values, 11LL, 0LL);
      uint64_t result = 0LL;
      *(void *)buffer = v10;
      return result;
    }

    return 0LL;
  }

  return result;
}

      BOOL v29 = v32 != 1;
    }

  CFRelease(v22);
  if (!v26)
  {
LABEL_73:
    cf = v23;
    UInt32 v40 = 0LL;
    goto LABEL_77;
  }

  CFRetain(v26);
  uint64_t v30 = sub_1477B0((const __CFDictionary *)v26, (const UInt8 *)(v46.__pn_.__r_.__value_.__l.__size_ - 24));
  if (!v30) {
    goto LABEL_75;
  }
  v31 = v30;
  CFRetain(v30);
  v32 = CFGetTypeID(v31);
  if (v32 != CFNumberGetTypeID())
  {
    CFRelease(v31);
LABEL_75:
    __dst.__r_.__value_.__s.__data_[0] = 0;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    cf = v40;
    UInt32 v40 = 0LL;
    goto LABEL_76;
  }

  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  __dst.__r_.__value_.__s.__data_[8] = 1;
  CFRetain(v31);
  cf = (CFNumberRef)v31;
LABEL_76:
  sub_14AB14((uint64_t)&__dst);
  CFRelease(v26);
  CFRelease(v26);
LABEL_77:
  v48 = 1718186616;
  v47 = 0LL;
  sub_149D44((uint64_t)&__dst, &v48);
  sub_59370((CFStringRef *)&__dst.__r_.__value_.__l.__cap_, "cfobject");
  if (cf) {
    CFRetain(cf);
  }
  v51[0] = cf;
  *(void *)&valuePtr = &__dst;
  *((void *)&valuePtr + 1) = 2LL;
  char v33 = sub_5A950((uint64_t)&valuePtr);
  v34 = 0LL;
  v47 = v33;
  do
  {
    __int16 v35 = (const void *)v51[v34];
    if (v35) {
      CFRelease(v35);
    }
    int v36 = *(const void **)((char *)&__dst.__r_.__value_.__l.__cap_ + v34 * 8);
    if (v36) {
      CFRelease(v36);
    }
    v34 -= 2LL;
  }

  while (v34 != -4);
  sub_2DC034((uint64_t)&valuePtr, v33);
  LODWORD(__dst.__r_.__value_.__l.__data_) = 1735553138;
  sub_2DC450((uint64_t)&__dst.__r_.__value_.__l.__size_, (uint64_t)&valuePtr);
  sub_149710((uint64_t)&v43, (int *)&__dst, 1LL);
  sub_2DBF5C((uint64_t)&__dst.__r_.__value_.__l.__size_);
  sub_2DBF5C((uint64_t)&valuePtr);
  CFRelease(v33);
  sub_392DEC(a3, (uint64_t)&v43);
  sub_D0C4C((void *)v43.__pn_.__r_.__value_.__l.__cap_);
  uint64_t v37 = (void *)v43.__pn_.__r_.__value_.__r.__words[0];
  v43.__pn_.__r_.__value_.__r.__words[0] = 0LL;
  if (v37) {
    operator delete(v37);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v40) {
    CFRelease(v40);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  sub_8CD60((void ***)&__dst);
  if (v41) {
    CFRelease(v41);
  }
  return 0LL;
}

  int v52 = operator new(8uLL);
  *int v52 = 0x70687062706D6274LL;
  int v53 = (uint64_t)(v52 + 1);
  if (sub_14EBAC())
  {
    memset(v194, 0, sizeof(v194));
    sub_7A5B8(v194, v52, v53, 2uLL);
    strcpy(v195, "cwdv");
    v196 = 0;
    v197 = 3;
    v199 = 0LL;
    v200 = 0LL;
    v198 = &v199;
    v201 = 44739242;
    v202 = 0LL;
    sub_203048(&v166, v194);
    if (v202) {
      CFRelease(v202);
    }
    sub_32C8C(v199);
    if (*(void *)v194)
    {
      *(void *)&v194[2] = *(void *)v194;
      operator delete(*(void **)v194);
    }
  }

  else
  {
    uint64_t v166 = (uint64_t)&v166;
    uint64_t v167 = &v166;
    char v168 = 0LL;
  }

  char v163 = (uint64_t)&v163;
  unint64_t v164 = &v163;
  v165 = 0LL;
  v54 = *(char *)(a2 + 183);
  if (v54 >= 0) {
    uint64_t v55 = *(unsigned __int8 *)(a2 + 183);
  }
  else {
    uint64_t v55 = *(void *)(a2 + 168);
  }
  if (v55)
  {
    uint64_t v56 = operator new(8uLL);
    *uint64_t v56 = 0x70687062706D6274LL;
    *(void *)v194 = v56;
    *(void *)&v194[2] = v56 + 1;
    *(void *)&v194[4] = v56 + 1;
    strcpy(v195, "cwdv");
    v196 = 0;
    v197 = 3;
    v199 = 0LL;
    v200 = 0LL;
    v198 = &v199;
    v201 = 44739242;
    if (v54 >= 0) {
      int v57 = (const UInt8 *)(a2 + 160);
    }
    else {
      int v57 = *(const UInt8 **)(a2 + 160);
    }
    v202 = 0LL;
    if (v57)
    {
      uint64_t v58 = CFStringCreateWithBytes(0LL, v57, v55, 0x8000100u, 0);
      if (!v58)
      {
        char v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v160, "Could not construct");
      }

      v59 = v202;
      v202 = v58;
      if (v59) {
        CFRelease(v59);
      }
    }

    uint64_t v60 = sub_546E0();
    *(void *)buf = &off_479168;
    *(void *)&buf[6] = buf;
    sub_FFB0C((uint64_t *)&__src, v60, v194, (uint64_t)buf);
    v61 = *(_DWORD **)&buf[6];
    if (*(_DWORD **)&buf[6] == buf)
    {
      v62 = 4LL;
      v61 = buf;
    }

    else
    {
      if (!*(void *)&buf[6]) {
        goto LABEL_95;
      }
      v62 = 5LL;
    }

    (*(void (**)(void))(*(void *)v61 + 8 * v62))();
LABEL_95:
    if (v168 && sub_1FF0FC((uint64_t)&__src))
    {
      sub_1FE510(&v163, v167, &v166);
    }

    else
    {
      int v65 = v175[0];
      p_src = (std::__shared_weak_count *)&__src;
      if ((void **)v175[0] == &__src)
      {
LABEL_107:
        sub_1FE510(&v163, p_src, &__src);
      }

      else
      {
        while (1)
        {
          sub_B8F68((uint64_t *)buf, &v65->__shared_weak_owners_, "", 3387);
          uint64_t v67 = (*(uint64_t (**)(void))(**(void **)buf + 400LL))(*(void *)buf);
          uint64_t v68 = *(std::__shared_weak_count **)&buf[2];
          if (*(void *)&buf[2])
          {
            int v69 = (unint64_t *)(*(void *)&buf[2] + 8LL);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }

          if (v67 == 2) {
            break;
          }
          int v65 = (std::__shared_weak_count *)v65->__shared_owners_;
          if (v65 == (std::__shared_weak_count *)&__src)
          {
            p_src = v175[0];
            goto LABEL_107;
          }
        }

        uint64_t v71 = sub_138E8(2);
        uint64_t v72 = sub_138E8(13);
        int v73 = 0;
        v74 = 0LL;
        *(void *)buf = 0x100000002LL;
        v75 = *(void *)(v71 + 8);
        while (1)
        {
          v76 = (int)buf[v74];
          BOOL v77 = v73;
          if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
            break;
          }
          int v73 = 1;
          v74 = 1LL;
          if ((v77 & 1) != 0) {
            goto LABEL_150;
          }
        }

        if ((v75 & v76) == 0) {
          uint64_t v71 = v72;
        }
LABEL_150:
        int v93 = (os_log_s *)*(id *)v71;
        v94 = v93;
        if (v93 && os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
        {
          else {
            unsigned int v95 = *(void *)(a2 + 160);
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3390;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v95;
          _os_log_impl( &dword_0,  v94,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Device: %s ports are not added to the routable list because device is out of ear.",  (uint8_t *)buf,  0x1Cu);
        }
      }
    }

    sub_85B80((uint64_t *)&__src);
    if (v202) {
      CFRelease(v202);
    }
    sub_32C8C(v199);
    unsigned int v96 = *(void **)v194;
    if (!*(void *)v194) {
      goto LABEL_194;
    }
    *(void *)&v194[2] = *(void *)v194;
    goto LABEL_193;
  }

  memset(buf, 0, 24);
  sub_7A5B8(buf, v52, v53, 2uLL);
  strcpy((char *)&buf[6], "cwdv");
  LOBYTE(v186) = 0;
  *(_DWORD *)&v188[2] = 3;
  v190 = 0LL;
  v191 = 0LL;
  v189 = &v190;
  v192 = 44739242;
  v193 = 0LL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_479220;
  int v173 = &__p;
  uint64_t v63 = (void *)sub_546E0();
  *(void *)&v194[2] = 0LL;
  *(void *)&v194[4] = 0LL;
  *(void *)v194 = &v194[2];
  uint64_t v64 = (uint64_t)v173;
  if (!v173) {
    goto LABEL_92;
  }
  if (v173 != &__p)
  {
    uint64_t v64 = (*(uint64_t (**)(void))(v173->__r_.__value_.__r.__words[0] + 16))();
LABEL_92:
    UInt32 v171 = (uint64_t *)v64;
    goto LABEL_113;
  }

  UInt32 v171 = v169;
  (*(void (**)(uint64_t, void *))(__p.__r_.__value_.__r.__words[0] + 24))((uint64_t)&__p, v169);
LABEL_113:
  sub_1009FC((uint64_t *)&__src, v63, (uint64_t)buf, (uint64_t)v194, (uint64_t)v169);
  unint64_t v78 = v171;
  if (v171 == v169)
  {
    v79 = 4LL;
    unint64_t v78 = v169;
  }

  else
  {
    if (!v171) {
      goto LABEL_118;
    }
    v79 = 5LL;
  }

  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_118:
  sub_FF3B8(*(void **)&v194[2]);
  uint64_t v80 = v175[0];
  if (!v175[0]) {
    goto LABEL_171;
  }
  if (v175[0]->__shared_owners_ == -1) {
    goto LABEL_170;
  }
  v183 = 0LL;
  v184 = 0LL;
  uint64_t v81 = std::__shared_weak_count::lock(v175[0]);
  if (!v81)
  {
    char v82 = v184;
    v183 = 0LL;
    v184 = 0LL;
    if (!v82) {
      goto LABEL_163;
    }
    goto LABEL_162;
  }

  char v82 = v81;
  int v83 = __src;
  p_shared_weak_owners = (unint64_t *)&v81->__shared_weak_owners_;
  do
    int v85 = __ldxr(p_shared_weak_owners);
  while (__stxr(v85 + 1, p_shared_weak_owners));
  uint64_t v86 = v184;
  v183 = v83;
  v184 = v82;
  if (v86) {
    std::__shared_weak_count::__release_weak(v86);
  }
  uint64_t v87 = (unint64_t *)&v82->__shared_owners_;
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
LABEL_162:
    std::__shared_weak_count::__release_weak(v82);
  }

LABEL_66:
  if (v5) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return v2;
}

        if (v5 != v8) {
          return;
        }
        goto LABEL_67;
      }

      if (v5 <= 1937140835)
      {
        if (v5 != 1937125988 && v5 != 1937138723) {
          return;
        }
      }

      else if (v5 != 1937140836 && v5 != 1937140845)
      {
        if (v5 != 1953002099) {
          return;
        }
        *a4 = 1886679669;
        int v5 = 1936682095;
        goto LABEL_73;
      }
    }

    int v5 = 1937072758;
    goto LABEL_73;
  }

  if (v5 > 1835295842)
  {
    if (v5 <= 1836462691)
    {
      if (v5 > 1836281890)
      {
        if (v5 != 1836281891 && v5 != 1836281966)
        {
          if (v5 != 1836414053) {
            return;
          }
          goto LABEL_73;
        }

        int v5 = 1936744814;
        goto LABEL_61;
      }

      if (v5 == 1835295843) {
        goto LABEL_45;
      }
      int v6 = 25715;
LABEL_44:
      if (v5 != (v6 | 0x6D640000)) {
        return;
      }
LABEL_45:
      *a4 = 1886679669;
      int v5 = 1684370292;
      goto LABEL_73;
    }

    if (v5 <= 1836475426)
    {
      if (v5 != 1836462692)
      {
        int v7 = 12915;
LABEL_59:
        if (v5 != (v7 | 0x6D760000)) {
          return;
        }
      }
    }

    else if (v5 != 1836475427 && v5 != 1836475490)
    {
      int v7 = 29539;
      goto LABEL_59;
    }

    int v5 = 1986817381;
LABEL_61:
    *a4 = 1886679669;
    goto LABEL_73;
  }

  if (v5 > 1784767338)
  {
    if (v5 > 1818456941)
    {
      if (v5 != 1818456942)
      {
        if (v5 != 1819501422)
        {
          int v6 = 25635;
          goto LABEL_44;
        }

  char v33 = *a1;
  v34 = *(void **)(*a1 + 8 * v9);
  if (v34)
  {
    os_log_s *v13 = *v34;
LABEL_74:
    void *v34 = v13;
    goto LABEL_75;
  }

  os_log_s *v13 = *v15;
  os_log_s *v15 = v13;
  *(void *)(v33 + 8 * v9) = v15;
  if (*v13)
  {
    __int16 v35 = *(void *)(*v13 + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10) {
        v35 %= v10;
      }
    }

    else
    {
      v35 &= v10 - 1;
    }

    v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_74;
  }

  uint64_t v30 = sub_138E8(19);
  if ((*(_BYTE *)(v30 + 8) & 1) != 0)
  {
    v31 = *(os_log_s **)v30;
    if (*(void *)v30)
    {
      if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
      {
        if ((_DWORD)v18) {
          v32 = "handles";
        }
        else {
          v32 = "does not handle";
        }
        sub_2DA408(&__p, *(void *)a2 + 16LL);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 568;
        v48 = 2080;
        uint64_t v49 = v32;
        uint64_t v50 = 2080;
        v51 = p_p;
        _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RoutingHandler_PlaybackAndRecord %s the given route: %s",  buf,  0x26u);
      }
    }
  }

  return v18;
}

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    goto LABEL_79;
  }

  id v18 = a1[1];
  __int16 v19 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v19 - v18) != (*(unsigned int (**)(uint64_t *, void))(**a1 + 88))(*a1, 0LL))
  {
    v59 = (os_log_t *)sub_138E8(13);
    uint64_t v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 243;
      _os_log_impl(&dword_0, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_78;
  }

  uint64_t v20 = a1[4];
  int v21 = a1[5];
  if (0xAAAAAAAAAAAAAAABLL * (v21 - v20) != (*(unsigned int (**)(uint64_t *, uint64_t))(**a1 + 88))(*a1, 1LL))
  {
    v61 = (os_log_t *)sub_138E8(13);
    v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 244;
      _os_log_impl(&dword_0, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }

        uint64_t v24 = (std::__shared_weak_count *)operator new(0x60uLL);
        int v10 = v24;
        v24->__shared_owners_ = 0LL;
        __int16 v25 = (unint64_t *)&v24->__shared_owners_;
        v24->__shared_weak_owners_ = 0LL;
        v24->__vftable = (std::__shared_weak_count_vtbl *)off_4770A0;
        v24[1].__vftable = (std::__shared_weak_count_vtbl *)&off_4770D8;
        uint64_t v12 = v24 + 1;
        v24[1].__shared_owners_ = 0LL;
        v24[1].__shared_weak_owners_ = 0LL;
        int v26 = *(void *)a2;
        v24[2].__vftable = a1;
        v24[2].__shared_owners_ = v26;
        LODWORD(v24[2].__shared_weak_owners_) = a2[2];
        BYTE4(v24[2].__shared_weak_owners_) = a3 & 1;
        BYTE5(v24[2].__shared_weak_owners_) = (a3 & 2) != 0;
        BYTE6(v24[2].__shared_weak_owners_) = (a3 & 4) != 0;
        HIBYTE(v24[2].__shared_weak_owners_) = (a3 & 8) != 0;
        LOBYTE(v24[3].__vftable) = 0;
        v24[3].__shared_owners_ = 0LL;
        v24[3].__shared_weak_owners_ = 0LL;
        do
          __int16 v27 = __ldxr(v25);
        while (__stxr(v27 + 1, v25));
        int v28 = (unint64_t *)&v24->__shared_weak_owners_;
        do
          BOOL v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v24[1].__shared_owners_ = (uint64_t)v12;
        v24[1].__shared_weak_owners_ = (uint64_t)v24;
        do
          uint64_t v17 = __ldaxr(v25);
        while (__stlxr(v17 - 1, v25));
        goto LABEL_120;
      }

      if (v6 == 1836414053) {
        goto LABEL_97;
      }
      v31 = 1852012899;
    }

    if (v6 != v31) {
      goto LABEL_125;
    }
    goto LABEL_90;
  }

  if (v6 > 1684103986)
  {
    if (v6 > 1685288050)
    {
      if (v6 <= 1735354733)
      {
        if (v6 != 1685288051)
        {
          if (v6 == 1718839674) {
            goto LABEL_97;
          }
          int v8 = 1718843939;
          goto LABEL_26;
        }

    if ((v8 & (v8 - 1)) != 0)
    {
      if (v5 >= v8) {
        uint64_t v3 = v5 % v8;
      }
      else {
        uint64_t v3 = v5;
      }
    }

    else
    {
      uint64_t v3 = (v8 - 1) & v5;
    }
  }

  char v33 = *(void **)(xmmword_499DE8 + 8 * v3);
  uint64_t i = (void *)v37[0];
  if (v33)
  {
    *(void *)v37[0] = *v33;
LABEL_79:
    *char v33 = i;
    goto LABEL_80;
  }

  *(void *)v37[0] = qword_499DF8;
  qword_499DF8 = (uint64_t)i;
  *(void *)(xmmword_499DE8 + 8 * v3) = &qword_499DF8;
  if (*i)
  {
    v34 = *(void *)(*i + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8) {
        v34 %= v8;
      }
    }

    else
    {
      v34 &= v8 - 1;
    }

    char v33 = (void *)(xmmword_499DE8 + 8 * v34);
    goto LABEL_79;
  }

  sub_31821C();
  if (!dword_49DAC8
    && ((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312LL))(a1) & 0xFF00000000LL) != 0)
  {
    int v65 = (os_log_t *)sub_138E8(17);
    v66 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 666;
      _os_log_impl(&dword_0, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a speaker tap port", (uint8_t *)buf, 0x12u);
    }

    uint64_t v67 = operator new(0x228uLL);
    v67[1] = 0LL;
    v67[2] = 0LL;
    *uint64_t v67 = off_484A28;
    sub_22CCE8((uint64_t)(v67 + 3), (uint64_t)a1);
    ioDataSize[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v67 + 3);
    ioDataSize[0].__r_.__value_.__l.__size_ = (std::string::size_type)v67;
    sub_AFDAC((uint64_t)ioDataSize, v67 + 13, (uint64_t)(v67 + 3));
    buf[0] = *(_OWORD *)&ioDataSize[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&ioDataSize[0].__r_.__value_.__l.__data_ = 0uLL;
    sub_3711D4((uint64_t)a1, (void ***)buf);
    uint64_t v68 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
    if (*((void *)&buf[0] + 1))
    {
      int v69 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }

    size = (std::__shared_weak_count *)ioDataSize[0].__r_.__value_.__l.__size_;
    if (ioDataSize[0].__r_.__value_.__l.__size_)
    {
      uint64_t v72 = (unint64_t *)(ioDataSize[0].__r_.__value_.__l.__size_ + 8);
      do
        int v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }

  v41 = qword_49DAB0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &qword_49CC00))
  {
    if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 24LL))( a1,  &qword_49CC00))
    {
      if (sub_3181A0(1, v41))
      {
        uint64_t v42 = sub_149A00(v41);
        UInt32 v43 = sub_2C63E0((uint64_t)a1, (unsigned int **)(v42 + 24));
        if ((_DWORD)v43)
        {
          uint64_t v86 = (os_log_t *)sub_138E8(13);
          uint64_t v87 = *v86;
          if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
          {
            sub_2CA1C(ioDataSize, v43);
            v88 = (ioDataSize[0].__r_.__value_.__s.__size_ & 0x80u) == 0
                ? ioDataSize
                : (std::string *)ioDataSize[0].__r_.__value_.__r.__words[0];
            LODWORD(buf[0]) = 136315650;
            *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
            WORD6(buf[0]) = 1024;
            *(_DWORD *)((char *)buf + 14) = 513;
            WORD1(buf[1]) = 2080;
            *(void *)((char *)&buf[1] + 4) = v88;
            _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Failed to set output data sources [%s]",  (uint8_t *)buf,  0x1Cu);
          }

          int v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v89, "Failed to set output data sources [%s]");
        }
      }
    }
  }

  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &qword_49CBF0)
    && (*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 24LL))( a1,  &qword_49CBF0)
    && sub_3181A0(0, v41))
  {
    v44 = (unsigned int **)sub_149A00(v41);
    v45 = sub_138E8(17);
    if ((*(_BYTE *)(v45 + 8) & 1) != 0)
    {
      v46 = *(os_log_s **)v45;
      if (*(void *)v45)
      {
        if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
        {
          sub_8F640(ioDataSize, *v44, v44[1]);
          v47 = (ioDataSize[0].__r_.__value_.__s.__size_ & 0x80u) == 0
              ? ioDataSize
              : (std::string *)ioDataSize[0].__r_.__value_.__r.__words[0];
          LODWORD(buf[0]) = 136315650;
          *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
          WORD6(buf[0]) = 1024;
          *(_DWORD *)((char *)buf + 14) = 686;
          WORD1(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 4) = v47;
          _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting telemetry data sources: [%s]",  (uint8_t *)buf,  0x1Cu);
        }
      }
    }

    v48 = sub_2C6504(a1[67]._os_unfair_lock_opaque, (uint64_t)&qword_49CBF0, (uint64_t)v44);
    if ((_DWORD)v48)
    {
      unint64_t v90 = (os_log_t *)sub_138E8(13);
      int v91 = *v90;
      if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(ioDataSize, v48);
        int v92 = (ioDataSize[0].__r_.__value_.__s.__size_ & 0x80u) == 0
            ? ioDataSize
            : (std::string *)ioDataSize[0].__r_.__value_.__r.__words[0];
        LODWORD(buf[0]) = 136315650;
        *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 522;
        WORD1(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 4) = v92;
        _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Failed to set telemetry data sources [%s]",  (uint8_t *)buf,  0x1Cu);
      }

      int v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v93, "Failed to set telemetry data sources [%s]");
    }
  }

  uint64_t v49 = operator new(4uLL);
  *uint64_t v49 = 1886614640;
  *(void *)&buf[0] = v49;
  *((void *)&buf[0] + 1) = v49 + 1;
  *(void *)&buf[1] = v49 + 1;
  strcpy((char *)&buf[1] + 8, "cwdv");
  LOBYTE(v112) = 0;
  unsigned int v113 = 3;
  float v115 = 0LL;
  float v116 = 0LL;
  uint64_t v114 = &v115;
  int v117 = 44739242;
  uint64_t v118 = 0LL;
  sub_3710DC((uint64_t *)ioDataSize, (uint64_t)a1, (uint64_t)buf);
  if (v118) {
    CFRelease(v118);
  }
  sub_32C8C(v115);
  if (*(void *)&buf[0])
  {
    *((void *)&buf[0] + 1) = *(void *)&buf[0];
    operator delete(*(void **)&buf[0]);
  }

  if (ioDataSize[0].__r_.__value_.__l.__cap_ == 1)
  {
    v51 = *(void *)(ioDataSize[0].__r_.__value_.__l.__size_ + 16);
    uint64_t v50 = *(std::__shared_weak_count **)(ioDataSize[0].__r_.__value_.__l.__size_ + 24);
    if (v50)
    {
      int v52 = (unint64_t *)&v50->__shared_weak_owners_;
      do
        int v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
  }

  else
  {
    v51 = 0LL;
    uint64_t v50 = 0LL;
  }

  v54 = operator new(4uLL);
  _DWORD *v54 = 1886613611;
  *(void *)&buf[0] = v54;
  *((void *)&buf[0] + 1) = v54 + 1;
  *(void *)&buf[1] = v54 + 1;
  strcpy((char *)&buf[1] + 8, "cwdv");
  LOBYTE(v112) = 0;
  unsigned int v113 = 3;
  float v115 = 0LL;
  float v116 = 0LL;
  uint64_t v114 = &v115;
  int v117 = 44739242;
  uint64_t v118 = 0LL;
  sub_3710DC((uint64_t *)&v107, (uint64_t)a1, (uint64_t)buf);
  if (v118) {
    CFRelease(v118);
  }
  sub_32C8C(v115);
  if (*(void *)&buf[0])
  {
    *((void *)&buf[0] + 1) = *(void *)&buf[0];
    operator delete(*(void **)&buf[0]);
  }

  if (v109 != 1)
  {
    uint64_t v55 = 0LL;
    uint64_t v56 = 0LL;
    if (!v50) {
      goto LABEL_135;
    }
LABEL_104:
    v59 = std::__shared_weak_count::lock(v50);
    *((void *)&buf[0] + 1) = v59;
    if (!v59) {
      goto LABEL_135;
    }
    *(void *)&buf[0] = v51;
    if (v51)
    {
      if (v56)
      {
        uint64_t v60 = std::__shared_weak_count::lock(v56);
        __p[1] = v60;
        if (v60)
        {
          v61 = v60;
          __p[0] = v55;
          if (v55) {
            sub_204854(v51, (uint64_t)v55);
          }
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            uint64_t v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }

      uint64_t v64 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
      if (!*((void *)&buf[0] + 1)) {
        goto LABEL_135;
      }
    }

    else
    {
      uint64_t v64 = v59;
    }

    v74 = (unint64_t *)&v64->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }

    goto LABEL_135;
  }

  uint64_t v55 = *(void **)(v108 + 16);
  uint64_t v56 = *(std::__shared_weak_count **)(v108 + 24);
  if (v56)
  {
    int v57 = (unint64_t *)&v56->__shared_weak_owners_;
    do
      uint64_t v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }

  if (v50) {
    goto LABEL_104;
  }
LABEL_135:
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  sub_85B80((uint64_t *)&v107);
  if (v50) {
    std::__shared_weak_count::__release_weak(v50);
  }
  sub_85B80((uint64_t *)ioDataSize);
  return 1LL;
}

      if (v28) {
        operator delete(v28);
      }
    }

    if (!a2)
    {
      uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      sub_36C768(v50, 0x696E7074u, &v54);
    }
  }

  else
  {
    *(_DWORD *)buf = 1952542820;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_DWORD *)&buf[8] = 0;
    if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)a1 + 16LL))(a1, buf))
    {
      *(_DWORD *)buf = 1952542820;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_DWORD *)&buf[8] = 0;
      v34 = sub_F2FAC(a1);
      __int16 v35 = *(id *)sub_138E8(17);
      int v36 = v35;
      if (v35)
      {
        uint64_t v37 = (os_log_s *)v35;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(__p, a1);
          uint64_t v38 = "Enabling";
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          *(_DWORD *)buf = 136316162;
          *(_WORD *)&_BYTE buf[12] = 1024;
          if (!v56) {
            uint64_t v38 = "Disabling";
          }
          *(_DWORD *)&buf[14] = 743;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v38;
          v62 = 2112;
          *(void **)uint64_t v63 = __p[0];
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v34;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d %s reference stream property on device %@. status: %u",  buf,  0x2Cu);
          sub_19DFC((uint64_t)__p);
        }
      }

      if (!a2)
      {
        v39 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        sub_36C768(v39, 0x696E7074u, &v54);
      }
    }
  }

void sub_6D6C(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_6DD4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48F8D0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48F8D0))
    {
      uint64_t v1 = (void *)sub_3781F0((uint64_t)&qword_48F828, (uint64_t)"Global Routing Mutex");
      void *v1 = off_4741C8;
      v1[17] = 0LL;
      v1[18] = v1 + 18;
      v1[19] = v1 + 18;
      v1[20] = 0LL;
      __cxa_guard_release(&qword_48F8D0);
    }
  }

void sub_6E4C(_Unwind_Exception *a1)
{
}

uint64_t sub_6E64(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    unint64_t v22 = (os_log_t *)sub_138E8(13);
    int v23 = *v22;
    if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 386;
    uint64_t v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_ObjectGetPrope"
          "rtyData: no plug-in";
LABEL_26:
    _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    goto LABEL_27;
  }

  if (!a3)
  {
    __int16 v25 = (os_log_t *)sub_138E8(13);
    int v23 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 387;
    uint64_t v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: HP_HardwarePlugIn_ObjectGetPr"
          "opertyData: no address";
    goto LABEL_26;
  }

  if (!a6)
  {
    int v26 = (os_log_t *)sub_138E8(13);
    int v23 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v43 = 1024;
      int v44 = 388;
      uint64_t v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioDataSize is NULL]: HP_HardwarePlugIn_ObjectGe"
            "tPropertyData: no info about the size of the property data";
      goto LABEL_26;
    }

LABEL_27:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (*a3 == 1651798132)
  {
    sub_92EF8();
    UInt32 v40 = &unk_49D240;
    char v41 = sub_287070((uint64_t)&unk_49D240);
    if ((v41 & 1) == 0)
    {
      int v28 = (os_log_t *)sub_138E8(13);
      BOOL v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 66;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): TryExecuteSynchronized: unable to lock object map mutex",  buf,  0x12u);
      }

      uint64_t v30 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v30 = &off_4865A0;
      v30[2] = 560947818;
    }

    id v13 = sub_93068(a2);
    if (!v13)
    {
      v34 = (os_log_t *)sub_138E8(13);
      __int16 v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 69;
        _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): ExecuteSynchronized: no object with given ID",  buf,  0x12u);
      }

      int v36 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v36 = &off_4865A0;
      v36[2] = 560947818;
    }

    int v14 = (void *)v13[3];
    sub_93128((uint64_t)&v40);
    UInt32 v40 = v14 + 1;
    char v41 = sub_287070((uint64_t)(v14 + 1));
    if ((v41 & 1) == 0)
    {
      uint64_t v37 = (os_log_t *)sub_138E8(13);
      uint64_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 75;
        _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): TryExecuteSynchronized: unable to lock object mutex",  buf,  0x12u);
      }

      v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)v39 = &off_4865A0;
      v39[2] = 560947818;
    }

    (*(void (**)(void, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v14 + 56LL))( *v14,  a3,  a4,  a5,  a6,  a7);
    sub_93128((uint64_t)&v40);
  }

  else
  {
    sub_92EF8();
    UInt32 v40 = &unk_49D240;
    char v41 = 1;
    sub_92F80((uint64_t)&unk_49D240);
    int v15 = sub_93068(a2);
    if (!v15)
    {
      v31 = (os_log_t *)sub_138E8(13);
      v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 51;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): ExecuteSynchronized: no object with given ID",  buf,  0x12u);
      }

      char v33 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v33 = &off_4865A0;
      v33[2] = 560947818;
    }

    __int16 v16 = (void *)v15[3];
    sub_93128((uint64_t)&v40);
    *(void *)buf = v16 + 1;
    buf[8] = 1;
    sub_92F80((uint64_t)(v16 + 1));
    uint64_t v17 = *v16;
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)*v16 + 16LL))(*v16);
    uint64_t v19 = v18;
    if (v18) {
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16LL))(v18);
    }
    else {
      int v20 = 0;
    }
    (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 56LL))( v17,  a3,  a4,  a5,  a6,  a7);
    sub_93128((uint64_t)buf);
    if (v19 && v20) {
      (*(void (**)(uint64_t))(*(void *)v19 + 24LL))(v19);
    }
  }

  return 0LL;
}

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (*a3 == 1651798132)
  {
    sub_92EF8();
    UInt32 v40 = &unk_49D240;
    char v41 = sub_287070((uint64_t)&unk_49D240);
    if ((v41 & 1) == 0)
    {
      int v28 = (os_log_t *)sub_138E8(13);
      BOOL v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 66;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): TryExecuteSynchronized: unable to lock object map mutex",  buf,  0x12u);
      }

      uint64_t v30 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v30 = &off_4865A0;
      v30[2] = 560947818;
    }

    uint64_t v11 = sub_93068(a2);
    if (!v11)
    {
      v34 = (os_log_t *)sub_138E8(13);
      __int16 v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 69;
        _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): ExecuteSynchronized: no object with given ID",  buf,  0x12u);
      }

      int v36 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v36 = &off_4865A0;
      v36[2] = 560947818;
    }

    uint64_t v12 = (void *)v11[3];
    sub_93128((uint64_t)&v40);
    UInt32 v40 = v12 + 1;
    char v41 = sub_287070((uint64_t)(v12 + 1));
    if ((v41 & 1) == 0)
    {
      uint64_t v37 = (os_log_t *)sub_138E8(13);
      uint64_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 75;
        _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): TryExecuteSynchronized: unable to lock object mutex",  buf,  0x12u);
      }

      v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)v39 = &off_4865A0;
      v39[2] = 560947818;
    }

    id v13 = (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t))(*(void *)*v12 + 48LL))(*v12, a3, a4, a5);
    sub_93128((uint64_t)&v40);
    *a6 = v13;
  }

  else
  {
    sub_92EF8();
    UInt32 v40 = &unk_49D240;
    char v41 = 1;
    sub_92F80((uint64_t)&unk_49D240);
    int v14 = sub_93068(a2);
    if (!v14)
    {
      v31 = (os_log_t *)sub_138E8(13);
      v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 51;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): ExecuteSynchronized: no object with given ID",  buf,  0x12u);
      }

      char v33 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v33 = &off_4865A0;
      v33[2] = 560947818;
    }

    int v15 = (void *)v14[3];
    sub_93128((uint64_t)&v40);
    *(void *)buf = v15 + 1;
    buf[8] = 1;
    sub_92F80((uint64_t)(v15 + 1));
    __int16 v16 = *v15;
    uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v15 + 16LL))(*v15);
    uint64_t v18 = v17;
    if (v17) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16LL))(v17);
    }
    else {
      uint64_t v19 = 0;
    }
    int v20 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v16 + 48LL))(v16, a3, a4, a5);
    sub_93128((uint64_t)buf);
    *a6 = v20;
    if (v18 && v19) {
      (*(void (**)(uint64_t))(*(void *)v18 + 24LL))(v18);
    }
  }

  return 0LL;
}

  (*(void (**)(uint64_t, void **))(*(void *)a1 + 496LL))(a1, &__p);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }

  if (v19) {
    operator delete(v19);
  }
  if (v22) {
    operator delete(v22);
  }
}

    uint64_t v17 = 0;
    goto LABEL_32;
  }

  if (v14 > 1987013740)
  {
    if (v14 != 2021027692)
    {
      int v15 = 1987013741;
LABEL_23:
      if (v14 == v15)
      {
        __int16 v16 = *(float *)(a1 + 192);
        goto LABEL_25;
      }

      goto LABEL_33;
    }

      int v15 = *v14;
    }

    if (v15 == 1684633187)
    {
      __int16 v35 = sub_138E8(0);
      int v36 = sub_138E8(38);
      uint64_t v37 = 0;
      uint64_t v38 = 0LL;
      *(void *)buf = 0x100000002LL;
      v39 = *(void *)(v35 + 8);
      while (1)
      {
        UInt32 v40 = *(int *)&buf[4 * v38];
        char v41 = v37;
        if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
          break;
        }
        uint64_t v37 = 1;
        uint64_t v38 = 1LL;
        if ((v41 & 1) != 0)
        {
          if ((v39 & 1) == 0) {
            goto LABEL_50;
          }
          goto LABEL_37;
        }
      }

      if ((v39 & v40) == 0) {
        __int16 v35 = v36;
      }
      if ((*(void *)(v35 + 8) & 1) != 0)
      {
LABEL_37:
        uint64_t v42 = *(os_log_s **)v35;
        if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v95 = v13;
          if (v103 >= 0) {
            __int16 v43 = v102;
          }
          else {
            __int16 v43 = (void **)v102[0];
          }
          int v44 = a3 + 12 * v12;
          sub_2CA1C(v100, *(unsigned int *)(v44 + 4));
          v45 = a3;
          v46 = v101;
          v47 = (void **)v100[0];
          v48 = *(_DWORD *)(v44 + 4);
          uint64_t v49 = *(_DWORD *)(v45 + 12 * v12 + 8);
          sub_2CA1C(v98, v5[26]);
          uint64_t v50 = v100;
          if (v46 < 0) {
            uint64_t v50 = v47;
          }
          v51 = v98;
          if (v99 < 0) {
            v51 = (void **)v98[0];
          }
          int v52 = v5[26];
          int v53 = v5[27];
          *(_DWORD *)buf = v89.n128_u32[0];
          *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
          v105 = 1024;
          unsigned int v106 = 390;
          v107 = 2080;
          *(void *)v108 = v43;
          *(_WORD *)&v108[8] = 2080;
          unint64_t v109 = v50;
          v110 = 1024;
          *(_DWORD *)unint64_t v111 = v48;
          *(_WORD *)&v111[4] = 1024;
          *(_DWORD *)&v111[6] = v49;
          *(_WORD *)v112 = 2080;
          *(void *)&v112[2] = v51;
          unsigned int v113 = 1024;
          *(_DWORD *)uint64_t v114 = v52;
          *(_WORD *)&v114[4] = 1024;
          *(_DWORD *)&v114[6] = v53;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Send property listener callback to VAD client '%s'. (selector: kVirtualAudioDevicePropertyDeviceIn itiatedVolumeChange; scope: '%s' (%u); element: %u) translated to (scope: '%s' (%u); element %u).",
            buf,
            0x48u);
          if (v99 < 0) {
            operator delete(v98[0]);
          }
          uint64_t v11 = v94;
          id v13 = v95;
          a3 = v93;
          int v8 = v92;
          if (v101 < 0) {
            operator delete(v100[0]);
          }
        }
      }
    }

      int v20 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v21 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }

      int v23 = (void **)v5[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          int v23 = (void **)*v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          uint64_t v24 = (void **)v5[2];
          __int16 v16 = *v24 == v5;
          int v5 = v24;
        }

        while (!v16);
      }

      int v6 = fminf(v6, v13);
      int v5 = v24;
    }

    while (v24 != a1 + 131);
  }

  __int16 v25 = fabsf(v6);
  int v26 = 0.00000011921;
  __int16 v27 = 1.0;
  if (v25 >= 1.0) {
    int v26 = v25 * 0.00000011921;
  }
  if (v25 > v26)
  {
    int v28 = a1[116];
    if (!v28)
    {
      uint64_t v42 = (os_log_t *)sub_138E8(13);
      __int16 v43 = *v42;
      if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2826;
        _os_log_impl(&dword_0, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      int v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v44, "Precondition failure.");
    }

    __int16 v27 = (*(float (**)(void *, float))(*(void *)v28 + 264LL))(v28, v6);
  }

  BOOL v29 = (os_log_t *)sub_138E8(1);
  uint64_t v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_INFO))
  {
    __p[0] = a1[72];
    sub_33464(&v48, (unsigned int *)__p);
    if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v31 = &v48;
    }
    else {
      v31 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2831;
    *(_WORD *)&_BYTE buf[18] = 2080;
    uint64_t v50 = v31;
    v51 = 2048;
    int v52 = v6;
    int v53 = 2048;
    v54 = v27;
    _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_INFO,  "%25s:%-5d SystemSoundVolumeCap for VAD '%s' is %f dB, %f scalar.",  buf,  0x30u);
LABEL_58:
  }

  return v27;
}

  if (*(_DWORD *)(v69 + 144) != 1886216809 || (int v21 = 1, v10 != 1986556788) && v10 != 1987208039 && v10 != 1987211117) {
    int v21 = 0;
  }
  unint64_t v22 = (std::__shared_weak_count *)a2[1];
  if (v22)
  {
    int v23 = std::__shared_weak_count::lock(v22);
    uint64_t v24 = v23;
    if (v23)
    {
      uint64_t v56 = *a2;
      p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
      do
        int v26 = __ldxr(p_shared_weak_owners);
      while (__stxr(v26 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        int v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    else
    {
      uint64_t v56 = 0LL;
    }
  }

  else
  {
    uint64_t v56 = 0LL;
    uint64_t v24 = 0LL;
  }

  v62 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  sub_7A5B8(&v62, v65[0], (uint64_t)v65[1], ((char *)v65[1] - (char *)v65[0]) >> 2);
  uint64_t v55 = v21;
  *(_DWORD *)v75 = 0;
  *(_DWORD *)&v75[4] = v10;
  *(_OWORD *)&v75[8] = *(_OWORD *)sub_2FC95C();
  v76 = 0;
  unint64_t v78 = 0LL;
  v79 = 0LL;
  BOOL v77 = 0LL;
  BOOL v29 = sub_2D90F0(v9, (uint64_t)v75);
  v31 = v30;
  int v73 = 0LL;
  v74 = 0LL;
  v32 = (std::__shared_weak_count *)a2[1];
  if (v32)
  {
    char v33 = std::__shared_weak_count::lock(v32);
    if (!v33)
    {
      v34 = v74;
      int v73 = 0LL;
      v74 = 0LL;
      if (!v34) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }

    v34 = v33;
    __int16 v35 = *a2;
    int v36 = (unint64_t *)&v33->__shared_weak_owners_;
    do
      uint64_t v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    uint64_t v38 = v74;
    int v73 = v35;
    v74 = v34;
    if (v38) {
      std::__shared_weak_count::__release_weak(v38);
    }
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      UInt32 v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
LABEL_53:
      std::__shared_weak_count::__release_weak(v34);
    }
  }

    *(_DWORD *)a6 = v15;
    return;
  }

  if (v13 > 1987013740)
  {
    if (v13 != 1987013741)
    {
      if (v13 == 2021027692)
      {
        int v21 = (os_log_t *)sub_138E8(13);
        unint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          v34 = *(void *)a2;
          __int16 v35 = a2[2];
          sub_613AC((uint64_t)__p, (unsigned int *)&v34);
          if (v37 >= 0) {
            int v23 = __p;
          }
          else {
            int v23 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          v39 = "NullControl.cpp";
          UInt32 v40 = 1024;
          char v41 = 251;
          uint64_t v42 = 2080;
          __int16 v43 = v23;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Attempt to GetPropertyData for %s.  This property is write-only.",  buf,  0x1Cu);
          if (v37 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v24, "Attempt to GetPropertyData for %s.  This property is write-only.");
      }

      return;
    }

  if (v19 == 845504882 || v19 == 1768764005 || v19 == 1635213689)
  {
    if (qword_48E8E8 != -1) {
      dispatch_once(&qword_48E8E8, &stru_471118);
    }
    if (!byte_48E8E0)
    {
      memset(buf, 0, 24);
      v310 = 3;
      v313 = 0LL;
      v312 = 0LL;
      v311 = &v312;
      cf = 0LL;
      buf[6] = 1986295651;
      buf[7] = HIDWORD(__p.__r_.__value_.__r.__words[0]);
      LOBYTE(buf[8]) = 1;
      v314 = 44722858;
      int v28 = sub_546E0();
      *(void *)v316 = &off_470B88;
      *(void *)&v316[24] = v316;
      sub_FFB0C(&v302, v28, buf, (uint64_t)v316);
      BOOL v29 = *(void **)&v316[24];
      if (*(_BYTE **)&v316[24] == v316)
      {
        uint64_t v30 = 4LL;
        BOOL v29 = v316;
      }

      else
      {
        if (!*(void *)&v316[24]) {
          goto LABEL_70;
        }
        uint64_t v30 = 5LL;
      }

      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_70:
      if (v304)
      {
        v275 = (os_log_t *)sub_138E8(13);
        v276 = *v275;
        if (*v275 && os_log_type_enabled(*v275, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v316 = 136315394;
          *(void *)&v316[4] = "RoutingManager.cpp";
          *(_WORD *)&v316[12] = 1024;
          *(_DWORD *)&v316[14] = 4979;
          _os_log_impl( &dword_0,  v276,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): activation with motion gesture while a non-built-in mode-capable port is connected",  v316,  0x12u);
        }

        v277 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( v277,  "activation with motion gesture while a non-built-in mode-capable port is connected");
      }

      sub_85B80(&v302);
      uint64_t v56 = cf;
      if (!cf) {
        goto LABEL_112;
      }
      goto LABEL_111;
    }
  }

  if (v13 == v14) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
  }
  return sub_F46A8((uint64_t)a1, (uint64_t *)a2, a3, a4, v12, a6);
}

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a6)
  {
    __int16 v27 = (os_log_t *)sub_138E8(13);
    __int16 v25 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      BOOL v29 = 136315394;
      uint64_t v30 = "HP_HardwarePlugInInterface.cpp";
      v31 = 1024;
      v32 = 977;
      int v26 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioPropertyDataSize is NULL]: HP_HardwarePlugIn_"
            "DeviceGetProperty: no data size";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  sub_92EF8();
  id v13 = (_DWORD *)sub_28AFEC(a2);
  int v14 = v13;
  if (!v13 || (int v15 = v13[3], v15 != 1633773415) && v15 != 1633969526)
  {
    int v21 = (os_log_t *)sub_138E8(13);
    unint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      BOOL v29 = 136315394;
      uint64_t v30 = "HP_HardwarePlugInInterface.cpp";
      v31 = 1024;
      v32 = 981;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceGetProperty: n o device with given ID",  (uint8_t *)&v29,  0x12u);
    }

    int v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v23 = &off_4865A0;
    v23[2] = 560947818;
  }

  __int16 v16 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16LL))(v13);
  uint64_t v17 = v16;
  if (v16) {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16LL))(v16);
  }
  else {
    uint64_t v18 = 0;
  }
  if (a4) {
    uint64_t v19 = 1768845428;
  }
  else {
    uint64_t v19 = 1869968496;
  }
  BOOL v29 = a5;
  uint64_t v30 = (const char *)__PAIR64__(a3, v19);
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t))(*(void *)v14 + 56LL))( v14,  &v29,  0LL,  0LL,  a6,  a7);
  if (v17 && v18) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
  }
  return 0LL;
}

void sub_7440( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    sub_93128((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x7000LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_7518(uint64_t a1, unsigned int *a2, uint64_t a3, __CFDictionary *a4, unsigned int *a5, uint64_t a6)
{
  CFMutableDictionaryRef Mutable = a4;
  if (*a2 == 1986095470)
  {
    unsigned int v12 = *a5;
    if (v12 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, __CFDictionary *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      uint64_t v352 = sub_138E8(13);
      id v353 = sub_8C7D4(1, *(void **)v352, *(void *)(v352 + 8));
      v354 = (void *)objc_claimAutoreleasedReturnValue(v353);
      v355 = v354;
      if (v354)
      {
        v356 = v354;
        if (os_log_type_enabled(v356, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = a2[2];
          sub_613AC((uint64_t)v1076, (unsigned int *)__p);
          int v357 = v1076[23];
          v358 = *(_BYTE **)v1076;
          unsigned int v359 = *a5;
          int v360 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
          v361 = v1076;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v357 < 0) {
            v361 = v358;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5466;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v361;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v359;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v360;
          _os_log_impl( &dword_0,  v356,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if ((v1076[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1076);
          }
        }
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = 561211770;
    }

    id v13 = (os_log_s *)*(id *)sub_138E8(2);
    int v14 = v13;
    if (v13)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5468;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Get on queue to get initialization state",  buf,  0x12u);
      }
    }

    v1065[0] = _NSConcreteStackBlock;
    v1065[1] = 3221225472LL;
    v1065[2] = sub_273254;
    v1065[3] = &unk_479068;
    v1065[4] = a1;
    int v15 = v1065;
    __int16 v16 = *(void **)(a1 + 496);
    uint64_t v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v16);
    dispatch_sync(v17, v15);

    *(_DWORD *)a6 = *(_DWORD *)(a1 + 108) != 2;
    return;
  }

  sub_6DD4();
  int v1052 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  if (*(_DWORD *)(a1 + 108) != 2)
  {
    uint64_t v363 = sub_138E8(13);
    id v364 = sub_8C7D4(1, *(void **)v363, *(void *)(v363 + 8));
    v365 = (os_log_s *)objc_claimAutoreleasedReturnValue(v364);
    v366 = v365;
    if (v365 && os_log_type_enabled(v365, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5483;
      _os_log_impl( &dword_0,  v366,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): VirtualAudio PlugIn is not initialized yet",  buf,  0x12u);
    }

    v367 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v367, "VirtualAudio PlugIn is not initialized yet");
LABEL_725:
  }

  if (((*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)a1 + 32LL))(a1, a2) & 1) == 0)
  {
    uint64_t v368 = sub_138E8(13);
    id v369 = sub_8C7D4(1, *(void **)v368, *(void *)(v368 + 8));
    v370 = (void *)objc_claimAutoreleasedReturnValue(v369);
    int v371 = 2003332927;
    if (v370)
    {
      v372 = v370;
      if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
      {
        *(void *)std::string __p = *(void *)a2;
        *(_DWORD *)&__p[8] = a2[2];
        sub_613AC((uint64_t)v1076, (unsigned int *)__p);
        if (v1076[23] >= 0) {
          v373 = v1076;
        }
        else {
          v373 = *(_BYTE **)v1076;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5485;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v373;
        _os_log_impl( &dword_0,  v372,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
        if ((v1076[23] & 0x80000000) != 0) {
          operator delete(*(void **)v1076);
        }
        int v371 = 2003332927;
      }

      goto LABEL_975;
    }

    goto LABEL_741;
  }

  if (((_DWORD)a3 == 0) != (Mutable == 0LL))
  {
    uint64_t v374 = sub_138E8(13);
    int v371 = 561211770;
    id v375 = sub_8C7D4(1, *(void **)v374, *(void *)(v374 + 8));
    v376 = (void *)objc_claimAutoreleasedReturnValue(v375);
    if (!v376) {
      goto LABEL_741;
    }
    v372 = v376;
    if (!os_log_type_enabled(v372, OS_LOG_TYPE_ERROR)) {
      goto LABEL_975;
    }
    *(void *)std::string __p = *(void *)a2;
    *(_DWORD *)&__p[8] = a2[2];
    sub_613AC((uint64_t)v1076, (unsigned int *)__p);
    if (v1076[23] >= 0) {
      v377 = v1076;
    }
    else {
      v377 = *(_BYTE **)v1076;
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5486;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v377;
    *(_WORD *)&_BYTE buf[28] = 1024;
    *(_DWORD *)&buf[30] = a3;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = Mutable;
    v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NU"
           "LL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).";
    v379 = v372;
    uint32_t v380 = 44;
LABEL_973:
    _os_log_impl(&dword_0, v379, OS_LOG_TYPE_ERROR, v378, buf, v380);
    if ((v1076[23] & 0x80000000) != 0) {
      operator delete(*(void **)v1076);
    }
    goto LABEL_975;
  }

  if (!a6)
  {
    uint64_t v381 = sub_138E8(13);
    int v371 = 561211770;
    id v382 = sub_8C7D4(1, *(void **)v381, *(void *)(v381 + 8));
    v383 = (void *)objc_claimAutoreleasedReturnValue(v382);
    if (!v383) {
      goto LABEL_741;
    }
    v372 = v383;
    if (!os_log_type_enabled(v372, OS_LOG_TYPE_ERROR)) {
      goto LABEL_975;
    }
    *(void *)std::string __p = *(void *)a2;
    *(_DWORD *)&__p[8] = a2[2];
    sub_613AC((uint64_t)v1076, (unsigned int *)__p);
    if (v1076[23] >= 0) {
      v384 = v1076;
    }
    else {
      v384 = *(_BYTE **)v1076;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5487;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = "outData";
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&buf[30] = v384;
    v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.";
    v379 = v372;
    uint32_t v380 = 38;
    goto LABEL_973;
  }

  int v18 = *a2;
  if ((int)*a2 > 1768845420)
  {
    if (v18 > 1936225647)
    {
      if (v18 > 1986094178)
      {
        if (v18 > 1987077485)
        {
          if (v18 != 1987077486)
          {
            if (v18 == 2019714413)
            {
              unsigned int v90 = *a5;
              if (v90 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
              {
                *(_OWORD *)a6 = *(_OWORD *)(*(void *)(a1 + 216) + 32LL);
                *a5 = 16;
                goto LABEL_693;
              }

              uint64_t v544 = sub_138E8(13);
              int v371 = 561211770;
              id v545 = sub_8C7D4(1, *(void **)v544, *(void *)(v544 + 8));
              v546 = (void *)objc_claimAutoreleasedReturnValue(v545);
              if (v546)
              {
                v372 = v546;
                if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
                {
                  *(void *)std::string __p = *(void *)a2;
                  *(_DWORD *)&__p[8] = a2[2];
                  sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                  int v547 = v1076[23];
                  v548 = *(_BYTE **)v1076;
                  unsigned int v549 = *a5;
                  int v550 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                  v551 = v1076;
                  *(_DWORD *)buf = 136316162;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  if (v547 < 0) {
                    v551 = v548;
                  }
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6219;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v551;
                  *(_WORD *)&_BYTE buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v549;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v550;
                  v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required s"
                         "ize (passed: %u; required: %u).";
                  goto LABEL_972;
                }

                goto LABEL_975;
              }

              goto LABEL_741;
            }

            goto LABEL_409;
          }

          unsigned int v163 = *a5;
          if (v163 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            uint64_t v640 = sub_138E8(13);
            int v371 = 561211770;
            id v641 = sub_8C7D4(1, *(void **)v640, *(void *)(v640 + 8));
            v642 = (void *)objc_claimAutoreleasedReturnValue(v641);
            if (v642)
            {
              v372 = v642;
              if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = a2[2];
                sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                int v643 = v1076[23];
                v644 = *(_BYTE **)v1076;
                unsigned int v645 = *a5;
                int v646 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                v647 = v1076;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v643 < 0) {
                  v647 = v644;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6273;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v647;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)&buf[30] = v645;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v646;
                v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_972;
              }

              goto LABEL_975;
            }

            goto LABEL_741;
          }

          int v101 = **(unsigned __int8 **)(a1 + 216);
          goto LABEL_460;
        }

        if ((v18 - 1986094179) >= 2)
        {
          if (v18 == 1987016304)
          {
            uint64_t v64 = sub_138E8(2);
            id v65 = sub_8C7D4(3, *(void **)v64, *(void *)(v64 + 8));
            v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
            uint64_t v67 = v66;
            if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6321;
              _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d GetProperty kVirtualAudioPlugInPropertyOverrideToPartnerPort not supported",  buf,  0x12u);
            }

            goto LABEL_693;
          }

          goto LABEL_409;
        }
      }

      else
      {
        if (v18 > 1936745572)
        {
          if (v18 != 1936745573)
          {
            if (v18 != 1936746862)
            {
              if (v18 == 1936882284)
              {
                unsigned int v46 = *a5;
                if (v46 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
                {
                  uint64_t v47 = sub_5954C();
                  (*(void (**)(_BYTE *__return_ptr))(*(void *)v47 + 312LL))(buf);
                  uint64_t v48 = *(void *)&buf[8];
                  uint64_t v49 = sub_5954C();
                  (*(void (**)(_BYTE *__return_ptr))(*(void *)v49 + 312LL))(v1076);
                  uint64_t v50 = *(void *)&v1076[16];
                  *(void *)a6 = v48;
                  *(void *)(a6 + 8) = v50;
                  goto LABEL_693;
                }

                uint64_t v504 = sub_138E8(13);
                int v371 = 561211770;
                id v505 = sub_8C7D4(1, *(void **)v504, *(void *)(v504 + 8));
                v506 = (void *)objc_claimAutoreleasedReturnValue(v505);
                if (v506)
                {
                  v372 = v506;
                  if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
                  {
                    *(void *)std::string __p = *(void *)a2;
                    *(_DWORD *)&__p[8] = a2[2];
                    sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                    int v507 = v1076[23];
                    v508 = *(_BYTE **)v1076;
                    unsigned int v509 = *a5;
                    int v510 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                    v511 = v1076;
                    *(_DWORD *)buf = 136316162;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                    if (v507 < 0) {
                      v511 = v508;
                    }
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 6258;
                    *(_WORD *)&_BYTE buf[18] = 2080;
                    *(void *)&buf[20] = v511;
                    *(_WORD *)&_BYTE buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v509;
                    *(_WORD *)&buf[34] = 1024;
                    *(_DWORD *)&buf[36] = v510;
                    v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required"
                           " size (passed: %u; required: %u).";
                    goto LABEL_972;
                  }

                  goto LABEL_975;
                }

                goto LABEL_741;
              }

              goto LABEL_409;
            }

LABEL_153:
            unsigned int v73 = *a5;
            if (v73 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
            {
              int v21 = sub_E6F10();
              goto LABEL_198;
            }

            uint64_t v422 = sub_138E8(13);
            int v371 = 561211770;
            id v423 = sub_8C7D4(1, *(void **)v422, *(void *)(v422 + 8));
            v424 = (void *)objc_claimAutoreleasedReturnValue(v423);
            if (v424)
            {
              v372 = v424;
              if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = a2[2];
                sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                int v425 = v1076[23];
                v426 = *(_BYTE **)v1076;
                unsigned int v427 = *a5;
                int v428 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                v429 = v1076;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v425 < 0) {
                  v429 = v426;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6294;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v429;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)&buf[30] = v427;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v428;
                v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_972;
              }

              goto LABEL_975;
            }

            goto LABEL_741;
          }

          unsigned int v99 = *a5;
          if (v99 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            uint64_t v576 = sub_138E8(13);
            int v371 = 561211770;
            id v577 = sub_8C7D4(1, *(void **)v576, *(void *)(v576 + 8));
            v578 = (void *)objc_claimAutoreleasedReturnValue(v577);
            if (v578)
            {
              v372 = v578;
              if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = a2[2];
                sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                int v579 = v1076[23];
                v580 = *(_BYTE **)v1076;
                unsigned int v581 = *a5;
                int v582 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                v583 = v1076;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v579 < 0) {
                  v583 = v580;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6284;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v583;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)&buf[30] = v581;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v582;
                v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_972;
              }

              goto LABEL_975;
            }

            goto LABEL_741;
          }

          uint64_t v100 = *(void *)(a1 + 112);
          if (!v100)
          {
            uint64_t v712 = sub_138E8(13);
            id v713 = sub_8C7D4(1, *(void **)v712, *(void *)(v712 + 8));
            v714 = (os_log_s *)objc_claimAutoreleasedReturnValue(v713);
            v711 = v714;
            if (v714 && os_log_type_enabled(v714, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6285;
              _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            goto LABEL_1313;
          }

          int v101 = !sub_13AFA0(v100, 6);
LABEL_460:
          *(_DWORD *)a6 = v101;
          goto LABEL_693;
        }

        if (v18 != 1936225648)
        {
          if (v18 == 1936745332)
          {
            unsigned int v74 = *a5;
            if (v74 >= (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
            {
              sub_12A734((uint64_t *)buf, *(void ***)(a1 + 112));
              sub_277BD4((uint64_t)buf, a5, a6);
              sub_68314(buf);
              goto LABEL_693;
            }

            uint64_t v528 = sub_138E8(13);
            int v371 = 561211770;
            id v529 = sub_8C7D4(1, *(void **)v528, *(void *)(v528 + 8));
            v530 = (void *)objc_claimAutoreleasedReturnValue(v529);
            if (v530)
            {
              v372 = v530;
              if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = a2[2];
                sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                int v531 = v1076[23];
                v532 = *(_BYTE **)v1076;
                unsigned int v533 = *a5;
                int v534 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                v535 = v1076;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v531 < 0) {
                  v535 = v532;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6268;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v535;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)&buf[30] = v533;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v534;
                v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
                goto LABEL_972;
              }

              goto LABEL_975;
            }

            goto LABEL_741;
          }

          goto LABEL_409;
        }
      }

      goto LABEL_166;
    }

    if (v18 > 1886549106)
    {
      if (v18 <= 1920297327)
      {
        if (v18 == 1886549107)
        {
          unsigned int v156 = *a5;
          if (v156 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            memset(buf, 0, 24);
            strcpy(&buf[24], "cwdv");
            buf[32] = 0;
            *(_DWORD *)&buf[40] = 3;
            v1088 = 0LL;
            *(void *)&buf[56] = 0LL;
            *(void *)&buf[48] = &buf[56];
            uint64_t v1090 = 0LL;
            LODWORD(v1089) = 44731050;
            memset(v1076, 0, 24);
            sub_B7A8C(v1076, Mutable, (uint64_t)Mutable + 4 * (a3 >> 2), a3 >> 2);
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }

            *(_OWORD *)buf = *(_OWORD *)v1076;
            *(void *)&buf[16] = *(void *)&v1076[16];
            unsigned int v157 = a2[1];
            if (v157 == 1768845428)
            {
              int v158 = v1089 & 0xFFFFFFCF;
            }

            else if (v157 == 1869968496)
            {
              int v158 = v1089 & 0xFFFFFFCF | 0x10;
            }

            else
            {
              int v158 = v1089 & 0xFFFFFFCF | 0x20;
            }

            LODWORD(v1089) = v158;
            sub_73504((uint64_t *)__p, *(void *)(a1 + 128), (uint64_t)buf);
            sub_2775F4((uint64_t)&v1060, *(uint64_t *)&__p[8], (uint64_t)__p);
            uint64_t v311 = sub_138E8(2);
            uint64_t v312 = sub_138E8(34);
            char v313 = 0;
            uint64_t v314 = 0LL;
            *(void *)v1076 = 0x100000002LL;
            uint64_t v315 = *(void *)(v311 + 8);
            while (1)
            {
              uint64_t v316 = *(int *)&v1076[4 * v314];
              char v317 = v313;
              if (((v315 & v316) != 0) != ((*(void *)(v312 + 8) & v316) != 0)) {
                break;
              }
              char v313 = 1;
              uint64_t v314 = 1LL;
              if ((v317 & 1) != 0) {
                goto LABEL_641;
              }
            }

            if ((v315 & v316) == 0) {
              uint64_t v311 = v312;
            }
LABEL_641:
            id v318 = sub_8C7D4(6, *(void **)v311, *(void *)(v311 + 8));
            v319 = (void *)objc_claimAutoreleasedReturnValue(v318);
            v320 = v319;
            if (v319)
            {
              v321 = v319;
              if (os_log_type_enabled(v321, OS_LOG_TYPE_DEBUG))
              {
                v322 = &v1074;
                sub_2CA1C(&v1074, a2[1]);
                if ((v1074.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v322 = (std::string *)v1074.__r_.__value_.__r.__words[0];
                }
                sub_F6EB0((std::string *)v1073, *(unsigned int **)buf, *(unsigned int **)&buf[8]);
                int v323 = v1073[23];
                v324 = *(_BYTE **)v1073;
                sub_151A78(&v1063, (const __CFArray *)v1060.__r_.__value_.__l.__data_);
                v325 = v1073;
                if (v323 < 0) {
                  v325 = v324;
                }
                if ((v1063.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v326 = &v1063;
                }
                else {
                  v326 = (std::string *)v1063.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)v1076 = 136316162;
                *(void *)&v1076[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v1076[12] = 1024;
                *(_DWORD *)&v1076[14] = 6093;
                *(_WORD *)&v1076[18] = 2080;
                *(void *)&v1076[20] = v322;
                *(_WORD *)&v1076[28] = 2080;
                *(void *)&v1076[30] = v325;
                __int16 v1077 = 2080;
                v1078 = v326;
                _os_log_impl( &dword_0,  v321,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning connected ports for scope '%s' and VirtualAudioPortTypes %s: %s",  v1076,  0x30u);
                if ((v1073[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v1073);
                }
              }
            }

            if (v1060.__r_.__value_.__r.__words[0])
            {
              CFRetain(v1060.__r_.__value_.__l.__data_);
              std::string::size_type v327 = v1060.__r_.__value_.__r.__words[0];
            }

            else
            {
              std::string::size_type v327 = 0LL;
            }

            *(void *)a6 = v327;
            sub_13818((uint64_t)&v1060);
            sub_68314(__p);
            sub_A0DB0((uint64_t)buf);
            goto LABEL_693;
          }

          uint64_t v616 = sub_138E8(13);
          int v371 = 561211770;
          id v617 = sub_8C7D4(1, *(void **)v616, *(void *)(v616 + 8));
          v618 = (void *)objc_claimAutoreleasedReturnValue(v617);
          if (v618)
          {
            v372 = v618;
            if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              int v619 = v1076[23];
              v620 = *(_BYTE **)v1076;
              unsigned int v621 = *a5;
              int v622 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
              v623 = v1076;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v619 < 0) {
                v623 = v620;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6065;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v623;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v621;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v622;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_972;
            }

            goto LABEL_975;
          }

          goto LABEL_741;
        }

        if (v18 == 1903653475)
        {
          unsigned int v183 = *a5;
          if (v183 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            uint64_t v672 = sub_138E8(13);
            int v371 = 561211770;
            id v673 = sub_8C7D4(1, *(void **)v672, *(void *)(v672 + 8));
            v674 = (void *)objc_claimAutoreleasedReturnValue(v673);
            if (v674)
            {
              v372 = v674;
              if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = a2[2];
                sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                int v675 = v1076[23];
                v676 = *(_BYTE **)v1076;
                unsigned int v677 = *a5;
                int v678 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                v679 = v1076;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v675 < 0) {
                  v679 = v676;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6195;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v679;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)&buf[30] = v677;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v678;
                v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_972;
              }

              goto LABEL_975;
            }

            goto LABEL_741;
          }

          if (!(_DWORD)a3)
          {
            int v184 = sub_D852C(*(void *)(a1 + 128));
            *(void *)std::string __p = 0LL;
            if (v184)
            {
              sub_277A38((CFNumberRef *)&v1074, v184);
              *(void *)buf = &v1074;
              *(void *)&buf[8] = 1LL;
              CFArrayRef v185 = sub_277AE4((uint64_t)buf);
              uint64_t v186 = *(void *)__p;
              *(void *)std::string __p = v185;
              *(void *)v1076 = v186;
              sub_7A6D8((const void **)v1076);
              if (v1074.__r_.__value_.__r.__words[0]) {
                CFRelease(v1074.__r_.__value_.__l.__data_);
              }
            }

            uint64_t v187 = sub_138E8(2);
            uint64_t v188 = sub_138E8(34);
            char v189 = 0;
            uint64_t v190 = 0LL;
            *(void *)buf = 0x100000002LL;
            uint64_t v191 = *(void *)(v187 + 8);
            while (1)
            {
              uint64_t v192 = *(int *)&buf[4 * v190];
              char v193 = v189;
              if (((v191 & v192) != 0) != ((*(void *)(v188 + 8) & v192) != 0)) {
                break;
              }
              char v189 = 1;
              uint64_t v190 = 1LL;
              if ((v193 & 1) != 0) {
                goto LABEL_463;
              }
            }

            if ((v191 & v192) == 0) {
              uint64_t v187 = v188;
            }
LABEL_463:
            id v236 = sub_8C7D4(6, *(void **)v187, *(void *)(v187 + 8));
            v237 = (void *)objc_claimAutoreleasedReturnValue(v236);
            v238 = v237;
            if (v237)
            {
              v239 = v237;
              if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
              {
                if (v184)
                {
                  sub_277B74((uint64_t)v1076, *(CFTypeRef *)__p);
                  if (v1076[23] >= 0) {
                    v240 = v1076;
                  }
                  else {
                    v240 = *(_BYTE **)v1076;
                  }
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6211;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v240;
                  _os_log_impl( &dword_0,  v239,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning Last connected quiesceable wired port: %s",  buf,  0x1Cu);
                  if ((v1076[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v1076);
                  }
                }

                else
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6211;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = "None";
                  _os_log_impl( &dword_0,  v239,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning Last connected quiesceable wired port: %s",  buf,  0x1Cu);
                }
              }
            }

            uint64_t v341 = *(void *)__p;
            *(void *)std::string __p = 0LL;
            *(void *)a6 = v341;
            sub_7A6D8((const void **)__p);
            goto LABEL_693;
          }

          uint64_t v729 = sub_138E8(13);
          id v730 = sub_8C7D4(1, *(void **)v729, *(void *)(v729 + 8));
          v731 = (os_log_s *)objc_claimAutoreleasedReturnValue(v730);
          v711 = v731;
          if (v731 && os_log_type_enabled(v731, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6196;
            _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          goto LABEL_1313;
        }

        if (v18 != 1919120504) {
          goto LABEL_409;
        }
        unsigned int v22 = *a5;
        if (v22 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
        {
          uint64_t v488 = sub_138E8(13);
          int v371 = 561211770;
          id v489 = sub_8C7D4(1, *(void **)v488, *(void *)(v488 + 8));
          v490 = (void *)objc_claimAutoreleasedReturnValue(v489);
          if (v490)
          {
            v372 = v490;
            if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              int v491 = v1076[23];
              v492 = *(_BYTE **)v1076;
              unsigned int v493 = *a5;
              int v494 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
              v495 = v1076;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v491 < 0) {
                v495 = v492;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6015;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v495;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v493;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v494;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_972;
            }

            goto LABEL_975;
          }

          goto LABEL_741;
        }

        uint64_t v23 = sub_138E8(2);
        uint64_t v24 = sub_138E8(34);
        char v25 = 0;
        uint64_t v26 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v27 = *(void *)(v23 + 8);
        while (1)
        {
          uint64_t v28 = *(int *)&buf[4 * v26];
          char v29 = v25;
          if (((v27 & v28) != 0) != ((*(void *)(v24 + 8) & v28) != 0)) {
            break;
          }
          char v25 = 1;
          uint64_t v26 = 1LL;
          if ((v29 & 1) != 0) {
            goto LABEL_440;
          }
        }

        if ((v27 & v28) == 0) {
          uint64_t v23 = v24;
        }
LABEL_440:
        id v226 = sub_8C7D4(6, *(void **)v23, *(void *)(v23 + 8));
        v227 = (void *)objc_claimAutoreleasedReturnValue(v226);
        v228 = v227;
        if (v227)
        {
          v229 = v227;
          if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(v1076, *(unsigned int *)(a1 + 224));
            v230 = v1076[23] >= 0 ? v1076 : *(_BYTE **)v1076;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6017;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v230;
            _os_log_impl(&dword_0, v229, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning current category: '%s'", buf, 0x1Cu);
            if ((v1076[23] & 0x80000000) != 0) {
              operator delete(*(void **)v1076);
            }
          }
        }

        int v101 = *(_DWORD *)(a1 + 224);
        goto LABEL_460;
      }

      if (v18 != 1920297328)
      {
        if (v18 == 1920426613)
        {
          unsigned int v194 = *a5;
          if (v194 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            *(_OWORD *)a6 = *(_OWORD *)(a1 + 200);
            goto LABEL_693;
          }

          uint64_t v680 = sub_138E8(13);
          int v371 = 561211770;
          id v681 = sub_8C7D4(1, *(void **)v680, *(void *)(v680 + 8));
          v682 = (void *)objc_claimAutoreleasedReturnValue(v681);
          if (v682)
          {
            v372 = v682;
            if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              int v683 = v1076[23];
              v684 = *(_BYTE **)v1076;
              unsigned int v685 = *a5;
              int v686 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
              v687 = v1076;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v683 < 0) {
                v687 = v684;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6242;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v687;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v685;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v686;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_972;
            }

            goto LABEL_975;
          }

          goto LABEL_741;
        }

        if (v18 != 1936028521) {
          goto LABEL_409;
        }
        goto LABEL_166;
      }

      unsigned int v160 = *a5;
      if (v160 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
      {
        uint64_t v632 = sub_138E8(13);
        int v371 = 561211770;
        id v633 = sub_8C7D4(1, *(void **)v632, *(void *)(v632 + 8));
        v634 = (void *)objc_claimAutoreleasedReturnValue(v633);
        if (v634)
        {
          v372 = v634;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v635 = v1076[23];
            v636 = *(_BYTE **)v1076;
            unsigned int v637 = *a5;
            int v638 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v639 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v635 < 0) {
              v639 = v636;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6252;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v639;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v637;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v638;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      BOOL v98 = *(void *)(a1 + 192) == 0LL;
      goto LABEL_351;
    }

    if (v18 <= 1868853874)
    {
      if (v18 != 1768845421)
      {
        if (v18 == 1819173229)
        {
          unsigned int v92 = *a5;
          if (v92 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            *(void *)a6 = @"com.apple.audio.CoreAudio.VirtualAudio";
            CFRetain(@"com.apple.audio.CoreAudio.VirtualAudio");
            goto LABEL_693;
          }

          uint64_t v560 = sub_138E8(13);
          int v371 = 561211770;
          id v561 = sub_8C7D4(1, *(void **)v560, *(void *)(v560 + 8));
          v562 = (void *)objc_claimAutoreleasedReturnValue(v561);
          if (v562)
          {
            v372 = v562;
            if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              int v563 = v1076[23];
              v564 = *(_BYTE **)v1076;
              unsigned int v565 = *a5;
              int v566 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
              v567 = v1076;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v563 < 0) {
                v567 = v564;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5492;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v567;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v565;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v566;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_972;
            }

            goto LABEL_975;
          }

          goto LABEL_741;
        }

        goto LABEL_409;
      }

      unsigned int v196 = *a5;
      if (v196 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
      {
        uint64_t v688 = sub_138E8(13);
        int v371 = 561211770;
        id v689 = sub_8C7D4(1, *(void **)v688, *(void *)(v688 + 8));
        v690 = (void *)objc_claimAutoreleasedReturnValue(v689);
        if (v690)
        {
          v372 = v690;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v691 = v1076[23];
            v692 = *(_BYTE **)v1076;
            unsigned int v693 = *a5;
            int v694 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v695 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v691 < 0) {
              v695 = v692;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6228;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v695;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v693;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v694;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      uint64_t v197 = sub_138E8(2);
      uint64_t v198 = sub_138E8(34);
      char v199 = 0;
      uint64_t v200 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v201 = *(void *)(v197 + 8);
      while (1)
      {
        uint64_t v202 = *(int *)&buf[4 * v200];
        char v203 = v199;
        if (((v201 & v202) != 0) != ((*(void *)(v198 + 8) & v202) != 0)) {
          break;
        }
        char v199 = 1;
        uint64_t v200 = 1LL;
        if ((v203 & 1) != 0) {
          goto LABEL_451;
        }
      }

      if ((v201 & v202) == 0) {
        uint64_t v197 = v198;
      }
LABEL_451:
      id v231 = sub_8C7D4(6, *(void **)v197, *(void *)(v197 + 8));
      v232 = (void *)objc_claimAutoreleasedReturnValue(v231);
      v233 = v232;
      if (v232)
      {
        v234 = v232;
        if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v1076, *(unsigned int *)(a1 + 228));
          v235 = v1076[23] >= 0 ? v1076 : *(_BYTE **)v1076;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6230;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v235;
          _os_log_impl(&dword_0, v234, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning current mode: '%s'", buf, 0x1Cu);
          if ((v1076[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1076);
          }
        }
      }

      int v101 = *(_DWORD *)(a1 + 228);
      goto LABEL_460;
    }

    if (v18 == 1868853875)
    {
      unsigned int v117 = *a5;
      if (v117 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
      {
        uint64_t v592 = sub_138E8(13);
        int v371 = 561211770;
        id v593 = sub_8C7D4(1, *(void **)v592, *(void *)(v592 + 8));
        v594 = (void *)objc_claimAutoreleasedReturnValue(v593);
        if (v594)
        {
          v372 = v594;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v595 = v1076[23];
            v596 = *(_BYTE **)v1076;
            unsigned int v597 = *a5;
            int v598 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v599 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v595 < 0) {
              v599 = v596;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6335;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v599;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v597;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v598;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      if ((_DWORD)a3 == 8)
      {
        if (Mutable)
        {
          sub_8B284((uint64_t)buf, Mutable);
          if (*(void *)&buf[16] != 1LL)
          {
            uint64_t v764 = sub_138E8(13);
            id v765 = sub_8C7D4(1, *(void **)v764, *(void *)(v764 + 8));
            v766 = (os_log_s *)objc_claimAutoreleasedReturnValue(v765);
            v767 = v766;
            if (v766 && os_log_type_enabled(v766, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v1076 = 136315394;
              *(void *)&v1076[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v1076[12] = 1024;
              *(_DWORD *)&v1076[14] = 6341;
              _os_log_impl( &dword_0,  v767,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v1076,  0x12u);
            }

            v768 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v768, "Precondition failure.");
          }

          sub_6EF6C((uint64_t *)v1076, buf);
          if (*(void *)&v1076[8] == *(void *)v1076) {
            int v118 = 0;
          }
          else {
            int v118 = sub_13B188(**(void **)(a1 + 112), *(uint64_t *)v1076);
          }
          *(_DWORD *)a6 = v118;
          *(void *)std::string __p = v1076;
          sub_8F2D4((void ***)__p);
          sub_734C4(*(void **)&buf[8]);
          goto LABEL_693;
        }

        uint64_t v751 = sub_138E8(13);
        id v752 = sub_8C7D4(1, *(void **)v751, *(void *)(v751 + 8));
        v753 = (os_log_s *)objc_claimAutoreleasedReturnValue(v752);
        v711 = v753;
        if (v753 && os_log_type_enabled(v753, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6337;
          _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      else
      {
        uint64_t v715 = sub_138E8(13);
        id v716 = sub_8C7D4(1, *(void **)v715, *(void *)(v715 + 8));
        v717 = (os_log_s *)objc_claimAutoreleasedReturnValue(v716);
        v711 = v717;
        if (v717 && os_log_type_enabled(v717, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6336;
          _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      goto LABEL_1313;
    }

    if (v18 == 1886350709)
    {
      unsigned int v174 = *a5;
      if (v174 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
      {
        uint64_t v656 = sub_138E8(13);
        int v371 = 561211770;
        id v657 = sub_8C7D4(1, *(void **)v656, *(void *)(v656 + 8));
        v658 = (void *)objc_claimAutoreleasedReturnValue(v657);
        if (v658)
        {
          v372 = v658;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v659 = v1076[23];
            v660 = *(_BYTE **)v1076;
            unsigned int v661 = *a5;
            int v662 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v663 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v659 < 0) {
              v663 = v660;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6236;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v663;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v661;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v662;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      uint64_t v175 = sub_138E8(2);
      uint64_t v176 = sub_138E8(38);
      char v177 = 0;
      uint64_t v178 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v179 = *(void *)(v175 + 8);
      while (1)
      {
        uint64_t v180 = *(int *)&buf[4 * v178];
        char v181 = v177;
        if (((v179 & v180) != 0) != ((*(void *)(v176 + 8) & v180) != 0)) {
          break;
        }
        char v177 = 1;
        uint64_t v178 = 1LL;
        if ((v181 & 1) != 0) {
          goto LABEL_434;
        }
      }

      if ((v179 & v180) == 0) {
        uint64_t v175 = v176;
      }
LABEL_434:
      id v222 = sub_8C7D4(3, *(void **)v175, *(void *)(v175 + 8));
      v223 = (os_log_s *)objc_claimAutoreleasedReturnValue(v222);
      v224 = v223;
      if (v223 && os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
      {
        int v225 = *(unsigned __int8 *)(a1 + 168);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6237;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v225;
        _os_log_impl(&dword_0, v224, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Returning policy mute: %u.", buf, 0x18u);
      }

      int v101 = *(unsigned __int8 *)(a1 + 168);
      goto LABEL_460;
    }

    if (v18 != 1886548848) {
      goto LABEL_409;
    }
    unsigned int v69 = *a5;
    if (v69 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
    {
      uint64_t v520 = sub_138E8(13);
      int v371 = 561211770;
      id v521 = sub_8C7D4(1, *(void **)v520, *(void *)(v520 + 8));
      v522 = (void *)objc_claimAutoreleasedReturnValue(v521);
      if (v522)
      {
        v372 = v522;
        if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = a2[2];
          sub_613AC((uint64_t)v1076, (unsigned int *)__p);
          int v523 = v1076[23];
          v524 = *(_BYTE **)v1076;
          unsigned int v525 = *a5;
          int v526 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
          v527 = v1076;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v523 < 0) {
            v527 = v524;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5745;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v527;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v525;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v526;
          v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_972;
        }

        goto LABEL_975;
      }

      goto LABEL_741;
    }

    if ((a3 | 8) != 8)
    {
      uint64_t v1012 = sub_138E8(13);
      id v1013 = sub_8C7D4(1, *(void **)v1012, *(void *)(v1012 + 8));
      v1014 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1013);
      v711 = v1014;
      if (v1014 && os_log_type_enabled(v1014, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5746;
        _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      goto LABEL_1313;
    }

    uint64_t v70 = a2[2];
    if (!Mutable)
    {
      sub_75418(buf, a1);
      sub_52CCC((uint64_t)v1076, (uint64_t)buf);
      sub_52EF0((uint64_t)buf);
      int v71 = sub_79670( **(void **)(a1 + 112),  *(unint64_t *)v1076,  *(uint64_t *)&v1076[8],  v70,  (uint64_t)v1084,  (uint64_t)v1085,  v1086);
      sub_53068((uint64_t)v1076);
      goto LABEL_379;
    }

    *(void *)std::string __p = Mutable;
    *(_WORD *)&__p[8] = 0;
    if (CFDictionaryContainsKey(Mutable, @"category"))
    {
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"mode"))
      {
        if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"overridden ports"))
        {
          uint64_t v900 = sub_138E8(13);
          id v901 = sub_8C7D4(1, *(void **)v900, *(void *)(v900 + 8));
          v902 = (os_log_s *)objc_claimAutoreleasedReturnValue(v901);
          v871 = v902;
          if (!v902 || !os_log_type_enabled(v902, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5769;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"routable ports"))
        {
          uint64_t v919 = sub_138E8(13);
          id v920 = sub_8C7D4(1, *(void **)v919, *(void *)(v919 + 8));
          v921 = (os_log_s *)objc_claimAutoreleasedReturnValue(v920);
          v871 = v921;
          if (!v921 || !os_log_type_enabled(v921, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5773;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"unroutable ports"))
        {
          uint64_t v931 = sub_138E8(13);
          id v932 = sub_8C7D4(1, *(void **)v931, *(void *)(v931 + 8));
          v933 = (os_log_s *)objc_claimAutoreleasedReturnValue(v932);
          v871 = v933;
          if (!v933 || !os_log_type_enabled(v933, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5777;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"preferred sub-ports"))
        {
          uint64_t v943 = sub_138E8(13);
          id v944 = sub_8C7D4(1, *(void **)v943, *(void *)(v943 + 8));
          v945 = (os_log_s *)objc_claimAutoreleasedReturnValue(v944);
          v871 = v945;
          if (!v945 || !os_log_type_enabled(v945, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5781;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"active data sources"))
        {
          uint64_t v955 = sub_138E8(13);
          id v956 = sub_8C7D4(1, *(void **)v955, *(void *)(v955 + 8));
          v957 = (os_log_s *)objc_claimAutoreleasedReturnValue(v956);
          v871 = v957;
          if (!v957 || !os_log_type_enabled(v957, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5785;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"initiation context"))
        {
          uint64_t v970 = sub_138E8(13);
          id v971 = sub_8C7D4(1, *(void **)v970, *(void *)(v970 + 8));
          v972 = (os_log_s *)objc_claimAutoreleasedReturnValue(v971);
          v871 = v972;
          if (!v972 || !os_log_type_enabled(v972, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5789;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationInitiationContextKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"voice processing configuration"))
        {
          uint64_t v973 = sub_138E8(13);
          id v974 = sub_8C7D4(1, *(void **)v973, *(void *)(v973 + 8));
          v975 = (os_log_s *)objc_claimAutoreleasedReturnValue(v974);
          v871 = v975;
          if (!v975 || !os_log_type_enabled(v975, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5793;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"sub-port preferences"))
        {
          uint64_t v984 = sub_138E8(13);
          id v985 = sub_8C7D4(1, *(void **)v984, *(void *)(v984 + 8));
          v986 = (os_log_s *)objc_claimAutoreleasedReturnValue(v985);
          v871 = v986;
          if (!v986 || !os_log_type_enabled(v986, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5797;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"screen dark policy enabled"))
        {
          uint64_t v987 = sub_138E8(13);
          id v988 = sub_8C7D4(1, *(void **)v987, *(void *)(v987 + 8));
          v989 = (os_log_s *)objc_claimAutoreleasedReturnValue(v988);
          v871 = v989;
          if (!v989 || !os_log_type_enabled(v989, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5801;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationScreenDarkPolicyEnabledKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"device hints"))
        {
          uint64_t v990 = sub_138E8(13);
          id v991 = sub_8C7D4(1, *(void **)v990, *(void *)(v990 + 8));
          v992 = (os_log_s *)objc_claimAutoreleasedReturnValue(v991);
          v871 = v992;
          if (!v992 || !os_log_type_enabled(v992, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5805;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationDeviceHintsKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"default to speaker"))
        {
          uint64_t v993 = sub_138E8(13);
          id v994 = sub_8C7D4(1, *(void **)v993, *(void *)(v993 + 8));
          v995 = (os_log_s *)objc_claimAutoreleasedReturnValue(v994);
          v871 = v995;
          if (!v995 || !os_log_type_enabled(v995, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5809;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationDefaultToSpeakerKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"disallow hfp"))
        {
          uint64_t v996 = sub_138E8(13);
          id v997 = sub_8C7D4(1, *(void **)v996, *(void *)(v996 + 8));
          v998 = (os_log_s *)objc_claimAutoreleasedReturnValue(v997);
          v871 = v998;
          if (!v998 || !os_log_type_enabled(v998, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5813;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationDisallowHFPKey.";
        }

        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"create speaker vad"))
        {
          uint64_t v999 = sub_138E8(13);
          id v1000 = sub_8C7D4(1, *(void **)v999, *(void *)(v999 + 8));
          v1001 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1000);
          v871 = v1001;
          if (!v1001 || !os_log_type_enabled(v1001, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5817;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationCreateSpeakerAlertVADKey.";
        }

        else
        {
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"disallowed ports"))
          {
            if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"disable speaker vad"))
            {
              sub_49A70(buf, a1, (const __CFDictionary **)__p, 0, 1);
              sub_52CCC((uint64_t)v1076, (uint64_t)buf);
              sub_52EF0((uint64_t)buf);
              int v71 = sub_79670( **(void **)(a1 + 112),  *(unint64_t *)v1076,  *(uint64_t *)&v1076[8],  v70,  (uint64_t)v1084,  (uint64_t)v1085,  v1086);
              sub_53068((uint64_t)v1076);
              uint64_t v72 = __p;
LABEL_378:
              sub_13850((uint64_t)v72);
LABEL_379:
              *(_DWORD *)a6 = v71;
              goto LABEL_693;
            }

            uint64_t v1005 = sub_138E8(13);
            id v1006 = sub_8C7D4(1, *(void **)v1005, *(void *)(v1005 + 8));
            v1007 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1006);
            v871 = v1007;
            if (v1007 && os_log_type_enabled(v1007, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5825;
              v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfig"
                     "urationSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationDisableSpeakerAlertVADKey.";
              goto LABEL_1280;
            }

        uint64_t v47 = *a5;
        if (v47 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          uint64_t v48 = (os_log_t *)sub_138E8(13);
          uint64_t v49 = *v48;
          if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v352) = a2[2];
            sub_613AC((uint64_t)cf, (unsigned int *)&__p);
            uint64_t v50 = cf[23];
            unsigned int v51 = *(_BYTE **)cf;
            uint64_t v52 = *a5;
            int v53 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            v54 = cf;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v50 < 0) {
              v54 = v51;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2550;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v54;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)v362 = v52;
            *(_WORD *)&v362[4] = 1024;
            *(_DWORD *)&v362[6] = v53;
            uint64_t v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_486;
          }

          goto LABEL_596;
        }

        goto LABEL_213;
      }

      if (v14 <= 1684104050)
      {
        if (v14 != 1668443504 && v14 != 1668705648)
        {
          if (v14 != 1684104048) {
            goto LABEL_300;
          }
LABEL_290:
          char v127 = *a5;
          if (v127 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            id v226 = (os_log_t *)sub_138E8(13);
            uint64_t v49 = *v226;
            if (*v226 && os_log_type_enabled(*v226, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              LODWORD(v352) = a2[2];
              sub_613AC((uint64_t)cf, (unsigned int *)&__p);
              v227 = cf[23];
              v228 = *(_BYTE **)cf;
              v229 = *a5;
              v230 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              id v231 = cf;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v227 < 0) {
                id v231 = v228;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2431;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v231;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)v362 = v229;
              *(_WORD *)&v362[4] = 1024;
              *(_DWORD *)&v362[6] = v230;
              uint64_t v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_486;
            }

            goto LABEL_596;
          }

          if ((a3 | 4) == 4)
          {
            *(void *)&buf[8] = 0LL;
            *(void *)&buf[16] = 0LL;
            *(void *)buf = &buf[8];
            uint64_t v128 = a2[1];
            if (v128 == 1768845428 || v128 == 1735159650)
            {
              sub_865A0((uint64_t *)buf, *((void **)a1 + 127), (void *)a1 + 128);
              uint64_t v128 = a2[1];
            }

            if (v128 == 1869968496 || v128 == 1735159650) {
              sub_865A0((uint64_t *)buf, *((void **)a1 + 130), (void *)a1 + 131);
            }
            sub_136E0((uint64_t)cf, *(void **)buf, &buf[8]);
            if (*(void *)cf)
            {
              CFRetain(*(CFTypeRef *)cf);
              uint64_t v129 = *(void *)cf;
            }

            else
            {
              uint64_t v129 = 0LL;
            }

            *(void *)a6 = v129;
            sub_13818((uint64_t)cf);
            sub_32C8C(*(void **)&buf[8]);
            goto LABEL_215;
          }

          uint64_t v334 = (os_log_t *)sub_138E8(13);
          uint64_t v335 = *v334;
          if (*v334 && os_log_type_enabled(*v334, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2432;
            _os_log_impl( &dword_0,  v335,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

      unsigned int v102 = (unint64_t *)&v95->__shared_owners_;
      do
        unint64_t v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (v103) {
        goto LABEL_156;
      }
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      if (v89) {
        goto LABEL_157;
      }
LABEL_158:
      if (v83) {
        std::__shared_weak_count::__release_weak(v83);
      }
      if (v99)
      {
        if (m != v81)
        {
          int v428 = sub_138E8(8);
          uint64_t v26 = (uint64_t **)(a4 + 8);
          if ((*(_BYTE *)(v428 + 8) & 1) != 0)
          {
            v429 = *(os_log_s **)v428;
            if (*(void *)v428)
            {
              if (os_log_type_enabled(*(os_log_t *)v428, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v430 = *(os_unfair_lock_s **)(v80 + 16);
                sub_23FE8((uint64_t)v529, v430 + 2);
                id v431 = v530 >= 0 ? v529 : (void **)v529[0];
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5143;
                *(_WORD *)&_BYTE buf[18] = 2048;
                *(void *)&buf[20] = v430;
                *(_WORD *)&_BYTE buf[28] = 2080;
                *(void *)&buf[30] = v431;
                _os_log_impl( &dword_0,  v429,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning port %p (%s) as default output port.",  buf,  0x26u);
                if (SHIBYTE(v530) < 0) {
                  operator delete(v529[0]);
                }
              }
            }
          }

          v479 = *(void *)(v80 + 16);
          int v483 = *(std::__shared_weak_count **)(v80 + 24);
          if (v483)
          {
            v432 = (unint64_t *)&v483->__shared_weak_owners_;
            do
              int v433 = __ldxr(v432);
            while (__stxr(v433 + 1, v432));
          }

          sub_1BB88((uint64_t *)v569);
          sub_73454((uint64_t *)&v503);
          (*(void (**)(void *))(*v492 + 8LL))(v492);
          sub_85B80((uint64_t *)&__dst);
          goto LABEL_173;
        }

        break;
      }
    }

    uint64_t v80 = *(void *)(v80 + 8);
    break;
  }

LABEL_1281:
            v1008 = __cxa_allocate_exception(0x10uLL);
            *(void *)v1008 = &off_4865A0;
            v1008[2] = 1852797029;
          }

          uint64_t v1002 = sub_138E8(13);
          id v1003 = sub_8C7D4(1, *(void **)v1002, *(void *)(v1002 + 8));
          v1004 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1003);
          v871 = v1004;
          if (!v1004 || !os_log_type_enabled(v1004, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1281;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5821;
          v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support  kVirtualAudioPlugInRouteConfigurationDisallowedPortsKey.";
        }
      }

      else
      {
        uint64_t v888 = sub_138E8(13);
        id v889 = sub_8C7D4(1, *(void **)v888, *(void *)(v888 + 8));
        v890 = (os_log_s *)objc_claimAutoreleasedReturnValue(v889);
        v871 = v890;
        if (!v890 || !os_log_type_enabled(v890, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1281;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5763;
        v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfiguratio"
               "nSupportsPortType requires that RouteConfiguration dictionary has  kVirtualAudioPlugInRouteConfigurationModeKey.";
      }
    }

    else
    {
      uint64_t v868 = sub_138E8(13);
      id v869 = sub_8C7D4(1, *(void **)v868, *(void *)(v868 + 8));
      v870 = (os_log_s *)objc_claimAutoreleasedReturnValue(v869);
      v871 = v870;
      if (!v870 || !os_log_type_enabled(v870, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1281;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5759;
      v872 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationS"
             "upportsPortType requires that RouteConfiguration dictionary has  kVirtualAudioPlugInRouteConfigurationCategoryKey.";
    }

LABEL_1280:
    _os_log_impl(&dword_0, v871, OS_LOG_TYPE_ERROR, v872, buf, 0x12u);
    goto LABEL_1281;
  }

  if (v18 <= 1651077730)
  {
    if (v18 <= 1634629489)
    {
      if (v18 > 1634624370)
      {
        if (v18 != 1634624371)
        {
          if (v18 != 1634627952)
          {
            if (v18 != 1634627954) {
              goto LABEL_409;
            }
            unsigned int v30 = *a5;
            if (v30 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
            {
              uint64_t v496 = sub_138E8(13);
              int v371 = 561211770;
              id v497 = sub_8C7D4(1, *(void **)v496, *(void *)(v496 + 8));
              v498 = (void *)objc_claimAutoreleasedReturnValue(v497);
              if (v498)
              {
                v372 = v498;
                if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
                {
                  *(void *)std::string __p = *(void *)a2;
                  *(_DWORD *)&__p[8] = a2[2];
                  sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                  int v499 = v1076[23];
                  v500 = *(_BYTE **)v1076;
                  unsigned int v501 = *a5;
                  int v502 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                  v503 = v1076;
                  *(_DWORD *)buf = 136316162;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  if (v499 < 0) {
                    v503 = v500;
                  }
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 5526;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v503;
                  *(_WORD *)&_BYTE buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v501;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v502;
                  v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required s"
                         "ize (passed: %u; required: %u).";
                  goto LABEL_972;
                }

                goto LABEL_975;
              }

              goto LABEL_741;
            }

            if ((_DWORD)a3 != 8 || !Mutable)
            {
              uint64_t v743 = sub_138E8(13);
              int v371 = 561211770;
              id v744 = sub_8C7D4(1, *(void **)v743, *(void *)(v743 + 8));
              v745 = (void *)objc_claimAutoreleasedReturnValue(v744);
              if (!v745) {
                goto LABEL_741;
              }
              v372 = v745;
              if (!os_log_type_enabled(v372, OS_LOG_TYPE_ERROR)) {
                goto LABEL_975;
              }
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              if (v1076[23] >= 0) {
                v746 = v1076;
              }
              else {
                v746 = *(_BYTE **)v1076;
              }
              *(_DWORD *)buf = 136316674;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5528;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v746;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = 8;
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = "non-";
              *(_WORD *)&buf[44] = 1024;
              *(_DWORD *)&buf[46] = a3;
              *(_WORD *)&buf[50] = 2048;
              *(void *)&buf[52] = Mutable;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifi"
                     "er data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).";
LABEL_1029:
              v379 = v372;
              uint32_t v380 = 60;
              goto LABEL_973;
            }

            theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
            LOWORD(theDict.__r_.__value_.__r.__words[1]) = 0;
            if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
            {
              uint64_t v754 = sub_138E8(13);
              id v755 = sub_8C7D4(1, *(void **)v754, *(void *)(v754 + 8));
              v756 = (os_log_s *)objc_claimAutoreleasedReturnValue(v755);
              v757 = v756;
              if (!v756 || !os_log_type_enabled(v756, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1123;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5535;
              v758 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationOverr"
                     "iddenPortsKey.";
            }

            else if (CFDictionaryContainsKey( (CFDictionaryRef)theDict.__r_.__value_.__l.__data_,  @"routable ports"))
            {
              uint64_t v769 = sub_138E8(13);
              id v770 = sub_8C7D4(1, *(void **)v769, *(void *)(v769 + 8));
              v771 = (os_log_s *)objc_claimAutoreleasedReturnValue(v770);
              v757 = v771;
              if (!v771 || !os_log_type_enabled(v771, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1123;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5539;
              v758 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.";
            }

            else if (CFDictionaryContainsKey( (CFDictionaryRef)theDict.__r_.__value_.__l.__data_,  @"unroutable ports"))
            {
              uint64_t v804 = sub_138E8(13);
              id v805 = sub_8C7D4(1, *(void **)v804, *(void *)(v804 + 8));
              v806 = (os_log_s *)objc_claimAutoreleasedReturnValue(v805);
              v757 = v806;
              if (!v806 || !os_log_type_enabled(v806, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1123;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5543;
              v758 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationUnrou"
                     "tablePortsKey.";
            }

            else if (CFDictionaryContainsKey( (CFDictionaryRef)theDict.__r_.__value_.__l.__data_,  @"preferred sub-ports"))
            {
              uint64_t v810 = sub_138E8(13);
              id v811 = sub_8C7D4(1, *(void **)v810, *(void *)(v810 + 8));
              v812 = (os_log_s *)objc_claimAutoreleasedReturnValue(v811);
              v757 = v812;
              if (!v812 || !os_log_type_enabled(v812, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1123;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5547;
              v758 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationPrefe"
                     "rredSubPortsKey.";
            }

            else if (CFDictionaryContainsKey( (CFDictionaryRef)theDict.__r_.__value_.__l.__data_,  @"active data sources"))
            {
              uint64_t v816 = sub_138E8(13);
              id v817 = sub_8C7D4(1, *(void **)v816, *(void *)(v816 + 8));
              v818 = (os_log_s *)objc_claimAutoreleasedReturnValue(v817);
              v757 = v818;
              if (!v818 || !os_log_type_enabled(v818, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1123;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5551;
              v758 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationActiv"
                     "eDataSourcesKey.";
            }

            else
            {
              if (!CFDictionaryContainsKey( (CFDictionaryRef)theDict.__r_.__value_.__l.__data_,  @"voice processing configuration"))
              {
                if (!CFDictionaryContainsKey( (CFDictionaryRef)theDict.__r_.__value_.__l.__data_,  @"sub-port preferences"))
                {
                  sub_49A70(buf, a1, (const __CFDictionary **)&theDict, 0, 1);
                  if (v1123) {
                    v31 = (uint64_t *)v1122;
                  }
                  else {
                    v31 = &qword_492FB0;
                  }
                  sub_E1FDC((uint64_t)&v1074, v31);
                  sub_6E1CC((uint64_t)v1076, *(uint64_t **)(a1 + 112), (uint64_t)buf, &v1074, 2);
                  switch(*(_DWORD *)v1076)
                  {
                    case 0:
                      sub_273930((uint64_t)&cf, a1, (uint64_t *)&v1076[8], &v1074);
                      v32 = (uint64_t *)sub_138E8(2);
                      if (sub_273D9C(*v32, v32[1]))
                      {
                        sub_2DB6FC(&v1060, (unsigned int *)buf);
                        sub_148B3C(&v1063, "Returning active non-quiesceable ports for category/mode ", &v1060);
                        __n128 v33 = sub_148AE0((std::string *)__p, &v1063, ":");
                        sub_273DAC((uint64_t *)v1073, (CFArrayRef *)&cf, (uint64_t)__p, v33);
                        if ((__p[23] & 0x80000000) != 0) {
                          operator delete(*(void **)__p);
                        }
                        for (uint64_t i = *(void *)&v1073[8]; (_BYTE *)i != v1073; uint64_t i = *(void *)(i + 8))
                        {
                          uint64_t v35 = sub_138E8(2);
                          uint64_t v36 = sub_138E8(34);
                          char v37 = 0;
                          uint64_t v38 = 0LL;
                          *(void *)std::string __p = 0x100000002LL;
                          uint64_t v39 = *(void *)(v35 + 8);
                          do
                          {
                            uint64_t v40 = *(int *)&__p[4 * v38];
                            char v41 = v37;
                            if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0))
                            {
                              if ((v39 & v40) == 0) {
                                uint64_t v35 = v36;
                              }
                              if ((*(void *)(v35 + 8) & 1) != 0) {
                                goto LABEL_66;
                              }
                              goto LABEL_72;
                            }

                            char v37 = 1;
                            uint64_t v38 = 1LL;
                          }

                          while ((v41 & 1) == 0);
                          if ((v39 & 1) == 0) {
                            continue;
                          }
LABEL_66:
                          uint64_t v42 = (os_log_s *)*(id *)v35;
                          if (v42)
                          {
                            __int16 v43 = v42;
                            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
                            {
                              int v44 = (void *)(i + 16);
                              *(_DWORD *)std::string __p = 136315650;
                              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                              *(_WORD *)&__p[12] = 1024;
                              *(_DWORD *)&__p[14] = 5571;
                              *(_WORD *)&__p[18] = 2080;
                              *(void *)&__p[20] = v44;
                              _os_log_impl(&dword_0, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", __p, 0x1Cu);
                            }
                          }

LABEL_72:
                          ;
                        }

                        sub_1532B4(v1073);
                      }

                      if (cf)
                      {
                        CFRetain(cf);
                        CFTypeRef v45 = cf;
                      }

                      else
                      {
                        CFTypeRef v45 = 0LL;
                      }

                      *(void *)a6 = v45;
                      sub_13818((uint64_t)&cf);
                      *(void *)std::string __p = &v1076[8];
                      sub_135F74((void ***)__p);
                      sub_734C4((void *)v1074.__r_.__value_.__l.__size_);
                      sub_52EF0((uint64_t)buf);
                      p_std::string theDict = &theDict;
LABEL_622:
                      sub_13850((uint64_t)p_theDict);
                      goto LABEL_693;
                    case 2:
                      uint64_t v852 = sub_138E8(13);
                      int v416 = 1852793716;
                      id v853 = sub_8C7D4(1, *(void **)v852, *(void *)(v852 + 8));
                      v854 = (os_log_s *)objc_claimAutoreleasedReturnValue(v853);
                      v415 = v854;
                      if (!v854 || !os_log_type_enabled(v854, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_1136;
                      }
                      *(_DWORD *)std::string __p = 136315394;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 5566;
                      v855 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVi"
                             "rtualAudioPlugInPropertyActiveNonQuiesceablePortsForRouteConfiguration.)";
                      break;
                    case 1:
                      uint64_t v412 = sub_138E8(13);
                      id v413 = sub_8C7D4(1, *(void **)v412, *(void *)(v412 + 8));
                      v414 = (os_log_s *)objc_claimAutoreleasedReturnValue(v413);
                      v415 = v414;
                      int v416 = 1852797556;
                      if (v414 && os_log_type_enabled(v414, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)std::string __p = 136315394;
                        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                        *(_WORD *)&__p[12] = 1024;
                        *(_DWORD *)&__p[14] = 5566;
                        _os_log_impl( &dword_0,  v415,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtua lAudioPlugInPropertyActiveNonQuiesceablePortsForRouteConfiguration.)",  __p,  0x12u);
                        int v416 = 1852797556;
                      }

    if (v10 != v12) {
      goto LABEL_97;
    }
    goto LABEL_73;
  }

  if (v10 <= 1634629489)
  {
    if (v10 > 1634624370)
    {
      if (v10 != 1634624371)
      {
        if (v10 != 1634627952)
        {
          if (v10 == 1634627954)
          {
            if ((_DWORD)a3 == 8 && a4) {
              goto LABEL_85;
            }
            id v13 = sub_138E8(13);
            int v14 = sub_8C7D4(1, *(void **)v13, *(void *)(v13 + 8));
            int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
            if (v15)
            {
              __int16 v16 = v15;
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
              {
                uint64_t v49 = *(void *)a2;
                uint64_t v50 = a2[2];
                sub_613AC((uint64_t)__p, (unsigned int *)&v49);
                if (v52 >= 0) {
                  uint64_t v17 = __p;
                }
                else {
                  uint64_t v17 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136316674;
                v54 = "VirtualAudio_PlugIn.mm";
                uint64_t v55 = 1024;
                *(_DWORD *)int v56 = 5324;
                *(_WORD *)&v56[4] = 2080;
                uint64_t v57 = v17;
                uint64_t v58 = 1024;
                char v59 = 8;
                uint64_t v60 = 2080;
                uint64_t v61 = "non-";
                uint64_t v62 = 1024;
                char v63 = a3;
                uint64_t v64 = 2048;
                id v65 = a4;
                goto LABEL_127;
              }

              goto LABEL_129;
            }

            goto LABEL_96;
          }

  uint64_t v35 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      char v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

    operator delete(v30);
    if (v41) {
      goto LABEL_75;
    }
LABEL_73:
    unsigned int v22 = 0;
  }

  while (v24);
  v40.__r_.__value_.__s.__data_[0] = 0;
  char v41 = 0;
LABEL_75:
  sub_2D9044((uint64_t)a1, (__n128 *)&v40);
  if (v41 && v40.__r_.__value_.__r.__words[0])
  {
    v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
    operator delete(v40.__r_.__value_.__l.__data_);
  }

  if (!a1[24])
  {
LABEL_79:
    if (a3[1] != 1768776806)
    {
      v32 = sub_138E8(20);
      if ((*(_BYTE *)(v32 + 8) & 1) != 0)
      {
        __n128 v33 = *(os_log_s **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(&v40, a3[1]);
            int size = (char)v40.__r_.__value_.__s.__size_;
            uint64_t v35 = v40.__r_.__value_.__r.__words[0];
            sub_2CA1C(v38, 1768776806LL);
            uint64_t v36 = &v40;
            if (size < 0) {
              uint64_t v36 = (std::string *)v35;
            }
            if (v39 >= 0) {
              char v37 = v38;
            }
            else {
              char v37 = (void **)v38[0];
            }
            *(_DWORD *)std::string __p = 136315906;
            *(void *)&__p[4] = "RoutingTypes.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 2826;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&__p[20] = v36;
            __int16 v43 = 2080;
            v44[0] = v37;
            _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  __p,  0x26u);
            if (v39 < 0) {
              operator delete(v38[0]);
            }
          }
        }
      }

      sub_1FEC04((uint64_t)__p, *a3, 1768776806, a3 + 2, a3[6], (uint64_t)(a3 + 8));
      sub_2D89F8(&v40, a2, __p);
      sub_2D9044((uint64_t)a1, (__n128 *)&v40);
      if (v41 && v40.__r_.__value_.__r.__words[0]) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (*(void *)((char *)v44 + 2))
      {
        *(void *)((char *)&v44[1] + 2) = *(void *)((char *)v44 + 2);
        operator delete(*(void **)((char *)v44 + 2));
      }
    }
  }

                  char v37 = 1;
                  if (!v36) {
                    goto LABEL_84;
                  }
LABEL_83:
                  operator delete(v36);
                  goto LABEL_84;
                }

                v43.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                int v44 = sub_138E8(13);
                if ((*(_BYTE *)(v44 + 8) & 1) != 0)
                {
                  CFTypeRef v45 = *(os_log_s **)v44;
                  if (*(void *)v44)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v44, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136315906;
                      *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 257;
                      *(_WORD *)&_BYTE buf[18] = 2080;
                      *(void *)&buf[20] = "with timeout";
                      *(_WORD *)&_BYTE buf[28] = 1024;
                      *(_DWORD *)&buf[30] = v12;
                      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  buf,  0x22u);
                    }
                  }
                }

                sub_6DD4();
                *(void *)buf = &qword_48F828;
                buf[8] = 0;
                buf[8] = sub_1A30E4();
                __lk.__m_ = &v121;
                __lk.__owns_ = 1;
                std::mutex::lock(&v121);
                v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                if (v96)
                {
LABEL_92:
                  if (__lk.__owns_) {
                    std::mutex::unlock(__lk.__m_);
                  }
                  sub_7D790((uint64_t)buf);
                  char v37 = 0;
                  v35 += (std::chrono::system_clock::now().__d_.__rep_ - v43.__d_.__rep_) / -1000;
                  if (!v36) {
                    goto LABEL_84;
                  }
                  goto LABEL_83;
                }

                int v53 = v46.__d_.__rep_ + 1000000 * v35;
                while (2)
                {
                  if (v53 <= std::chrono::steady_clock::now().__d_.__rep_) {
                    goto LABEL_92;
                  }
                  v54.__d_.__rep_ = v53 - std::chrono::steady_clock::now().__d_.__rep_;
                  if (v54.__d_.__rep_ >= 1)
                  {
                    std::chrono::steady_clock::now();
                    v55.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                    if (!v55.__d_.__rep_)
                    {
                      int v56 = 0LL;
                      goto LABEL_114;
                    }

                    if (v55.__d_.__rep_ < 1)
                    {
                      int v56 = 0x8000000000000000LL;
                    }

                    else
                    {
                      if ((unint64_t)v55.__d_.__rep_ > 0x20C49BA5E353F7LL)
                      {
                        int v56 = 0x7FFFFFFFFFFFFFFFLL;
                        goto LABEL_114;
                      }

LABEL_1136:
                      v859 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v859 = &off_4865A0;
                      v859[2] = v416;
                    default:
                      uint64_t v856 = sub_138E8(13);
                      int v416 = 2003329396;
                      id v857 = sub_8C7D4(1, *(void **)v856, *(void *)(v856 + 8));
                      v858 = (os_log_s *)objc_claimAutoreleasedReturnValue(v857);
                      v415 = v858;
                      if (!v858 || !os_log_type_enabled(v858, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_1136;
                      }
                      *(_DWORD *)std::string __p = 136315394;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 5566;
                      v855 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlug"
                             "InPropertyActiveNonQuiesceablePortsForRouteConfiguration.)";
                      break;
                  }

                  _os_log_impl(&dword_0, v415, OS_LOG_TYPE_ERROR, v855, __p, 0x12u);
                  goto LABEL_1136;
                }

                uint64_t v844 = sub_138E8(13);
                id v845 = sub_8C7D4(1, *(void **)v844, *(void *)(v844 + 8));
                v846 = (os_log_s *)objc_claimAutoreleasedReturnValue(v845);
                v757 = v846;
                if (v846 && os_log_type_enabled(v846, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 5559;
                  v758 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveN"
                         "onQuiesceablePortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurat"
                         "ionSubPortPreferencesKey.";
                  goto LABEL_1122;
                }

          v655 = __cxa_allocate_exception(0x10uLL);
          *(void *)v655 = &off_4865A0;
          v655[2] = v551;
        }

        v602 = sub_138E8(13);
        v551 = 561211770;
        int v603 = sub_8C7D4(1, *(void **)v602, *(void *)(v602 + 8));
        v604 = (void *)objc_claimAutoreleasedReturnValue(v603);
        if (v604)
        {
          uint64_t v552 = v604;
          if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
          {
            *(void *)v871 = *(void *)a2;
            *(_DWORD *)&v871[8] = a2[2];
            sub_613AC((uint64_t)__p, (unsigned int *)v871);
            unsigned int v605 = __p[23];
            int v606 = *(_BYTE **)__p;
            v607 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            uint64_t v608 = __p;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v605 < 0) {
              uint64_t v608 = v606;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6420;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v608;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = a5;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v607;
            int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_1132;
          }

          goto LABEL_1135;
        }

        goto LABEL_1061;
      }

      goto LABEL_203;
    }

    LOBYTE(v818[0]) = 0;
    uint64_t v819 = 0;
    sub_6DD4();
    (*(void (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    *(void *)&__dst = &off_479538;
    v870 = &__dst;
    sub_35678(v871, 0, (uint64_t)&__dst);
    uint64_t v125 = v870;
    if (v870 == &__dst)
    {
      uint64_t v126 = 4LL;
      uint64_t v125 = &__dst;
    }

    else
    {
      if (!v870) {
        goto LABEL_391;
      }
      uint64_t v126 = 5LL;
    }

    (*(void (**)(void))(*(void *)v125 + 8 * v126))();
LABEL_391:
    if (!*(_DWORD *)(a1 + 400))
    {
      v663 = sub_138E8(13);
      uint64_t v664 = sub_8C7D4(1, *(void **)v663, *(void *)(v663 + 8));
      id v665 = (os_log_s *)objc_claimAutoreleasedReturnValue(v664);
      v666 = v665;
      if (v665 && os_log_type_enabled(v665, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7040;
        _os_log_impl( &dword_0,  v666,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - Not in colistening route",  buf,  0x12u);
      }

      int v667 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v667, "Error routing to partner port - Not in colistening route");
    }

    uint64_t v219 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
    if (!v219)
    {
      unsigned int v677 = sub_138E8(13);
      int v678 = sub_8C7D4(1, *(void **)v677, *(void *)(v677 + 8));
      v679 = (os_log_s *)objc_claimAutoreleasedReturnValue(v678);
      uint64_t v680 = v679;
      if (v679 && os_log_type_enabled(v679, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7043;
        _os_log_impl( &dword_0,  v680,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No default VAD found",  buf,  0x12u);
      }

      id v681 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v681, "No default VAD found");
    }

    uint64_t v220 = v219;
    char v221 = (void *)sub_135A0(v219, 1);
    if (!v221[2] || (id v222 = sub_6A92C(*(void *)(a1 + 128), *(_DWORD *)(*v221 + 28LL))) == 0)
    {
      int v571 = sub_138E8(13);
      v572 = sub_8C7D4(1, *(void **)v571, *(void *)(v571 + 8));
      unsigned int v573 = (os_log_s *)objc_claimAutoreleasedReturnValue(v572);
      int v574 = v573;
      if (v573 && os_log_type_enabled(v573, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7048;
        _os_log_impl( &dword_0,  v574,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - No output port found for default vad",  buf,  0x12u);
      }

      v575 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v575, "Error routing to partner port - No output port found for default vad");
    }

    v223 = *(void *)(v222 + 96);
    *(void *)std::string __p = *(void *)(v222 + 88);
    *(void *)&__p[8] = v223;
    if (v223)
    {
      v224 = (unint64_t *)(v223 + 16);
      do
        int v225 = __ldxr(v224);
      while (__stxr(v225 + 1, v224));
    }

    sub_B8CBC((uint64_t *)buf, (uint64_t *)__p, "", 7050);
    id v226 = *(std::__shared_weak_count **)&buf[8];
    v227 = *(unsigned int *)(*(void *)buf + 144LL);
    if (*(void *)&buf[8])
    {
      v228 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }

    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
    if ((_DWORD)v227 != 1885892674 && (_DWORD)v227 != 1885892706 && (_DWORD)v227 != 1886152047)
    {
      v790 = sub_138E8(13);
      uint64_t v791 = sub_8C7D4(1, *(void **)v790, *(void *)(v790 + 8));
      id v792 = (void *)objc_claimAutoreleasedReturnValue(v791);
      v793 = v792;
      if (v792)
      {
        uint64_t v794 = v792;
        if (os_log_type_enabled(v794, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v227);
          id v795 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7055;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v795;
          _os_log_impl( &dword_0,  v794,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - Default VAD not routed to blueto oth (routed to %s)",  buf,  0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }

      v796 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v796,  "Error routing to partner port - Default VAD not routed to bluetooth (routed to %s)");
    }

    v230 = *(void *)(a1 + 128);
    if ((_DWORD)v227 == 1886152047)
    {
      id v231 = operator new(0x20uLL);
      *id v231 = &off_481920;
      v231[1] = v220;
    }

    else
    {
      id v231 = operator new(0x28uLL);
      *id v231 = &off_481950;
      v231[1] = v220;
      v231[4] = 0LL;
    }

    v231[2] = v230;
    v231[3] = 0LL;
    v812 = v231;
    v232 = (int *)(a1 + 400);
    *(void *)std::string __p = a1;
    *(_DWORD *)&__p[8] = *(_DWORD *)(a1 + 400);
    __p[12] = *(_BYTE *)(a1 + 404);
    v233 = *(void *)(a1 + 408);
    v234 = *(void *)(a1 + 416);
    *(void *)&__p[16] = v233;
    *(void *)&__p[24] = v234;
    if (v234)
    {
      v235 = (unint64_t *)(v234 + 16);
      do
        id v236 = __ldxr(v235);
      while (__stxr(v236 + 1, v235));
    }

    v237 = *(void *)(a1 + 424);
    v238 = *(void *)(a1 + 432);
    id v861 = v237;
    v862 = v238;
    if (v238)
    {
      v239 = (unint64_t *)(v238 + 16);
      do
        v240 = __ldxr(v239);
      while (__stxr(v240 + 1, v239));
    }

    id v865 = 0LL;
    id v241 = operator new(0x38uLL);
    *id v241 = &off_479580;
    v241[1] = a1;
    *((_DWORD *)v241 + 4) = *(_DWORD *)&__p[8];
    *((_BYTE *)v241 + 20) = __p[12];
    v241[3] = v233;
    v241[4] = v234;
    *(void *)&__p[16] = 0LL;
    *(void *)&__p[24] = 0LL;
    v241[5] = v237;
    v241[6] = v238;
    id v861 = 0LL;
    v862 = 0LL;
    id v865 = (CFMutableArrayRef *)v241;
    sub_35678(&v866, 0, (uint64_t)theArray);
    v242 = v865;
    if (v865 == theArray)
    {
      v243 = 4LL;
      v242 = theArray;
    }

    else
    {
      if (!v865) {
        goto LABEL_434;
      }
      v243 = 5LL;
    }

    (*((void (**)(void))*v242 + v243))();
LABEL_434:
    (*(void (**)(CFMutableArrayRef *__return_ptr))(*v812 + 16LL))(&Mutable);
    if (v859)
    {
      sub_B8F68((uint64_t *)buf, (uint64_t *)&v858, "", 7065);
      v248 = *(void *)buf;
      sub_7D084(&v852, "kBluetoothAudioDeviceFeatureHighQualityBiDirectionalAudio");
      CFTypeRef v249 = sub_204348(v248, (const UInt8 *)&v852);
      if (v854 < 0) {
        operator delete(v852);
      }
      id v250 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        v251 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
        }
      }

      if (v249)
      {
        v746 = sub_138E8(13);
        uint64_t v747 = sub_8C7D4(1, *(void **)v746, *(void *)(v746 + 8));
        id v748 = (os_log_s *)objc_claimAutoreleasedReturnValue(v747);
        v749 = v748;
        if (v748 && os_log_type_enabled(v748, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7066;
          _os_log_impl( &dword_0,  v749,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Device supports high quality HFP, not allowing switch to partner port",  buf,  0x12u);
        }

        v750 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v750, "Device supports high quality HFP, not allowing switch to partner port");
      }
    }

    if (!*v232)
    {
      v275 = (os_log_t *)sub_138E8(13);
      v276 = *v275;
      if (*v275)
      {
        if (os_log_type_enabled(*v275, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugInColisteningInfo.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 26;
          _os_log_impl( &dword_0,  v276,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: must transition from INITIAL_ROUTE|PARTNER_ROUTE -> PARTNER_ROUTE",  buf,  0x12u);
        }
      }
    }

    *(_BYTE *)(a1 + 404) = 0;
    *(_DWORD *)(a1 + 400) = 2;
    v253 = Mutable;
    v254 = v857;
    if (v857)
    {
      p_shared_weak_owners = &v857->__shared_weak_owners_;
      do
        std::string::size_type v256 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v256 + 1, (unint64_t *)p_shared_weak_owners));
    }

    v257 = *(std::__shared_weak_count **)(a1 + 416);
    *(void *)(a1 + 408) = v253;
    *(void *)(a1 + 416) = v254;
    if (v257) {
      std::__shared_weak_count::__release_weak(v257);
    }
    v258 = v858;
    CFTypeRef v259 = v859;
    if (v859)
    {
      id v260 = &v859->__shared_weak_owners_;
      do
        v261 = __ldxr((unint64_t *)v260);
      while (__stxr(v261 + 1, (unint64_t *)v260));
    }

    v262 = *(std::__shared_weak_count **)(a1 + 432);
    *(void *)(a1 + 424) = v258;
    *(void *)(a1 + 432) = v259;
    if (v262) {
      std::__shared_weak_count::__release_weak(v262);
    }
    v263 = *(id *)sub_138E8(2);
    v264 = v263;
    if (v263)
    {
      std::string::size_type v265 = (os_log_s *)v263;
      if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT))
      {
        v266 = &v852;
        sub_1263EC(&v852, (os_unfair_lock_s **)&Mutable);
        if (v854 < 0) {
          v266 = v852;
        }
        p_std::string theDict = &theDict;
        sub_1263EC(&theDict, &v858);
        if (v837 < 0) {
          p_std::string theDict = theDict;
        }
        sub_22C764(&v832, v232);
        std::string::size_type v268 = (char)v832.__r_.__value_.__s.__size_;
        id v269 = v832.__r_.__value_.__r.__words[0];
        sub_2DB6FC(&v831, (unsigned int *)(a1 + 224));
        v270 = &v832;
        if (v268 < 0) {
          v270 = (std::string *)v269;
        }
        if ((v831.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v271 = &v831;
        }
        else {
          v271 = (std::string *)v831.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7073;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v266;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&buf[30] = p_theDict;
        *(_WORD *)&buf[38] = 2080;
        *(void *)&buf[40] = v270;
        v839 = 2080;
        *(void *)v840 = v271;
        _os_log_impl( &dword_0,  v265,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Routing to partner: Disallowing port: %s, Allowing port: %s. Colistening Info: %s, current category-mode: %s",  buf,  0x3Au);
        if (v837 < 0) {
          operator delete(theDict);
        }
        if (v854 < 0) {
          operator delete(v852);
        }
      }
    }

    v855 = 0LL;
    v272 = (CFDictionaryRef *)operator new(0x20uLL);
    os_log_s *v272 = (CFDictionaryRef)&off_4795C8;
    v272[1] = (CFDictionaryRef)a1;
    v272[2] = (CFDictionaryRef)&Mutable;
    v272[3] = (CFDictionaryRef)&v858;
    v855 = v272;
    sub_26B218((uint64_t)&theDict, a1, (uint64_t)&v852);
    int v273 = v855;
    if (v855 == &v852)
    {
      v274 = 4LL;
      int v273 = &v852;
    }

    else
    {
      if (!v855) {
        goto LABEL_482;
      }
      v274 = 5LL;
    }

    (*((void (**)(void))*v273 + v274))();
LABEL_482:
    sub_6DD4();
    if ((*(unsigned int (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828))
    {
      std::string::size_type v277 = *(id *)sub_138E8(13);
      v278 = v277;
      if (v277)
      {
        v279 = (os_log_s *)v277;
        if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7082;
          _os_log_impl( &dword_0,  v279,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is held by the current thread.",  buf,  0x12u);
        }
      }
    }

    sub_6DD4();
    (*(void (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    __n128 v280 = *(id *)sub_138E8(2);
    v281 = v280;
    if (v280)
    {
      uint64_t v282 = (os_log_s *)v280;
      if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&v832, theDict);
        uint64_t v283 = (v832.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v832 : (std::string *)v832.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7086;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v283;
        _os_log_impl(&dword_0, v282, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Routing to partner port: uint64_t result = %s", buf, 0x1Cu);
      }
    }

    if (cf) {
      goto LABEL_502;
    }
    char v284 = *(id *)sub_138E8(2);
    uint64_t v285 = v284;
    if (v284)
    {
      uint64_t v286 = (os_log_s *)v284;
      if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7088;
        _os_log_impl( &dword_0,  v286,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Invalid route description routing to partner port",  buf,  0x12u);
      }
    }

    if (cf)
    {
LABEL_502:
      if (*(_DWORD *)(a1 + 224) == 1668509810) {
        uint64_t v287 = 1668309362;
      }
      else {
        uint64_t v287 = *(_DWORD *)(a1 + 224);
      }
      sub_13408((uint64_t)&cf, @"category", v287);
      sub_13408((uint64_t)&cf, @"mode", *(_DWORD *)(a1 + 228));
    }

    if (sub_72348(theDict))
    {
      char v288 = *(id *)sub_138E8(2);
      v289 = v288;
      if (v288)
      {
        v290 = (os_log_s *)v288;
        if (os_log_type_enabled(v290, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7106;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "client request";
          _os_log_impl( &dword_0,  v290,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description: Redundant.",  buf,  0x1Cu);
        }
      }
    }

    else
    {
      v291 = (const __CFDictionary *)cf;
      sub_7D084(&v831, "  ");
      sub_1533B4((uint64_t *)&v832, v291, 2, (const void **)&v831.__r_.__value_.__l.__data_);
      std::string::size_type v292 = *(id *)sub_138E8(2);
      v293 = v292;
      if (v292)
      {
        v294 = (os_log_s *)v292;
        if (os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7101;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "client request";
          _os_log_impl( &dword_0,  v294,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description:",  buf,  0x1Cu);
        }
      }

      for (k = (std::string *)v832.__r_.__value_.__l.__size_; k != &v832; k = (std::string *)k->__r_.__value_.__l.__size_)
      {
        v296 = *(id *)sub_138E8(2);
        uint64_t v297 = v296;
        if (v296)
        {
          uint64_t v298 = (os_log_s *)v296;
          if (os_log_type_enabled(v298, OS_LOG_TYPE_DEFAULT))
          {
            p_uint64_t cap = &k->__r_.__value_.__l.__cap_;
            if (k[1].__r_.__value_.__s.__data_[15] < 0) {
              p_uint64_t cap = (std::string::size_type *)*p_cap;
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7101;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = p_cap;
            _os_log_impl(&dword_0, v298, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
          }
        }
      }

      sub_1532B4(&v832);
      sub_2590B8(a1);
    }

    if (!cf || ((*(uint64_t (**)(void *))(*v812 + 24LL))(v812) & 1) == 0)
    {
      uint64_t v300 = *(id *)sub_138E8(2);
      uint64_t v301 = v300;
      if (v300)
      {
        uint64_t v302 = (os_log_s *)v300;
        if (os_log_type_enabled(v302, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7111;
          _os_log_impl( &dword_0,  v302,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Something went wrong ! Not routed to partner port",  buf,  0x12u);
        }
      }

      if (v867)
      {
        (*(void (**)(std::string *))(v867->__r_.__value_.__r.__words[0] + 48))(v867);
        char v303 = v867;
        v867 = 0LL;
        if (v303 == (std::string *)&v866.__r_.__value_.__r.__words[1])
        {
          v304 = 4LL;
          char v303 = (std::string *)&v866.__r_.__value_.__r.__words[1];
        }

        else
        {
          if (!v303) {
            goto LABEL_770;
          }
          v304 = 5LL;
        }

        (*(void (**)(void))(v303->__r_.__value_.__r.__words[0] + 8 * v304))();
      }
    }

LABEL_1123:
                v847 = __cxa_allocate_exception(0x10uLL);
                *(void *)v847 = &off_4865A0;
                v847[2] = 1852797029;
              }

              uint64_t v822 = sub_138E8(13);
              id v823 = sub_8C7D4(1, *(void **)v822, *(void *)(v822 + 8));
              v824 = (os_log_s *)objc_claimAutoreleasedReturnValue(v823);
              v757 = v824;
              if (!v824 || !os_log_type_enabled(v824, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1123;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5555;
              v758 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlo"
                     "ckConfigurationKey.";
            }

LABEL_1122:
            _os_log_impl(&dword_0, v757, OS_LOG_TYPE_ERROR, v758, buf, 0x12u);
            goto LABEL_1123;
          }

          unsigned int v119 = *a5;
          if (v119 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            uint64_t v600 = sub_138E8(13);
            int v371 = 561211770;
            id v601 = sub_8C7D4(1, *(void **)v600, *(void *)(v600 + 8));
            v602 = (void *)objc_claimAutoreleasedReturnValue(v601);
            if (v602)
            {
              v372 = v602;
              if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = a2[2];
                sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                int v603 = v1076[23];
                v604 = *(_BYTE **)v1076;
                unsigned int v605 = *a5;
                int v606 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                v607 = v1076;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v603 < 0) {
                  v607 = v604;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5501;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v607;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)&buf[30] = v605;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v606;
                v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_972;
              }

              goto LABEL_975;
            }

            goto LABEL_741;
          }

          if ((a3 | 4) != 4)
          {
            uint64_t v1021 = sub_138E8(13);
            id v1022 = sub_8C7D4(1, *(void **)v1021, *(void *)(v1021 + 8));
            v1023 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1022);
            v711 = v1023;
            if (v1023 && os_log_type_enabled(v1023, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5502;
              _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            goto LABEL_1313;
          }

          *(void *)buf = sub_273328(a1, a3, (unsigned int *)Mutable);
          *(void *)&buf[8] = v120;
          sub_E5784(v1064, *(void *)(a1 + 216) + 8LL);
          sub_E570C((uint64_t)v1076, (uint64_t)buf, (uint64_t)v1064);
          if (v1064[16]) {
            sub_13850((uint64_t)v1064);
          }
          int v121 = 1852793716;
          *(_DWORD *)std::string __p = 1852796517;
          memset(&__p[8], 0, 24);
          *(void *)&__p[32] = 0x756E64656175746FLL;
          *(_OWORD *)&v1074.__r_.__value_.__r.__words[1] = 0uLL;
          v1074.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1074.__r_.__value_.__l.__size_;
          *(void *)&v1073[8] = 0LL;
          *(void *)&v1073[16] = 0LL;
          *(void *)v1073 = &v1073[8];
          *(_OWORD *)&v1063.__r_.__value_.__r.__words[1] = 0uLL;
          v1063.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1063.__r_.__value_.__l.__size_;
          sub_27353C( (uint64_t)buf,  v1076,  &v1074,  (uint64_t)&v1076[16],  (uint64_t ***)v1073,  (uint64_t)&v1063,  (uint64_t)__p,  0);
          sub_32C8C((void *)v1063.__r_.__value_.__l.__size_);
          sub_FF3B8(*(void **)&v1073[8]);
          sub_FF3B8((void *)v1074.__r_.__value_.__l.__size_);
          sub_6E1CC((uint64_t)&v1074, *(uint64_t **)(a1 + 112), (uint64_t)buf, &qword_492FB0, 2);
          switch(LODWORD(v1074.__r_.__value_.__l.__data_))
          {
            case 0:
              sub_273930((uint64_t)&cf, a1, (uint64_t *)&v1074.__r_.__value_.__l.__size_, &qword_492FB0);
              int v122 = (uint64_t *)sub_138E8(2);
              if (sub_273D9C(*v122, v122[1]))
              {
                sub_2CA1C(&theDict, *(unsigned int *)v1076);
                sub_148B3C(&v1060, "Returning active non-quiesceable ports for category [", &theDict);
                __n128 v123 = sub_148AE0((std::string *)v1073, &v1060, "]:");
                sub_273DAC((uint64_t *)&v1063, (CFArrayRef *)&cf, (uint64_t)v1073, v123);
                if ((v1073[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v1073);
                }
                for (uint64_t j = (std::string *)v1063.__r_.__value_.__l.__size_;
                      j != &v1063;
                      uint64_t j = (std::string *)j->__r_.__value_.__l.__size_)
                {
                  uint64_t v125 = sub_138E8(2);
                  uint64_t v126 = sub_138E8(34);
                  char v127 = 0;
                  uint64_t v128 = 0LL;
                  *(void *)v1073 = 0x100000002LL;
                  uint64_t v129 = *(void *)(v125 + 8);
                  do
                  {
                    uint64_t v130 = *(int *)&v1073[4 * v128];
                    char v131 = v127;
                    if (((v129 & v130) != 0) != ((*(void *)(v126 + 8) & v130) != 0))
                    {
                      if ((v129 & v130) == 0) {
                        uint64_t v125 = v126;
                      }
                      if ((*(void *)(v125 + 8) & 1) != 0) {
                        goto LABEL_292;
                      }
                      goto LABEL_298;
                    }

                    char v127 = 1;
                    uint64_t v128 = 1LL;
                  }

                  while ((v131 & 1) == 0);
                  if ((v129 & 1) == 0) {
                    continue;
                  }
LABEL_292:
                  signed int v132 = (os_log_s *)*(id *)v125;
                  if (v132)
                  {
                    int v133 = v132;
                    if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                    {
                      p_uint64_t cap = &j->__r_.__value_.__l.__cap_;
                      if (j[1].__r_.__value_.__s.__data_[15] < 0) {
                        p_uint64_t cap = (std::string::size_type *)*p_cap;
                      }
                      *(_DWORD *)v1073 = 136315650;
                      *(void *)&v1073[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&v1073[12] = 1024;
                      *(_DWORD *)&v1073[14] = 5518;
                      *(_WORD *)&v1073[18] = 2080;
                      *(void *)&v1073[20] = p_cap;
                      _os_log_impl(&dword_0, v133, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v1073, 0x1Cu);
                    }
                  }

LABEL_298:
                  ;
                }

                sub_1532B4(&v1063);
              }

              if (cf)
              {
                CFRetain(cf);
                CFTypeRef v135 = cf;
              }

              else
              {
                CFTypeRef v135 = 0LL;
              }

              *(void *)a6 = v135;
              sub_13818((uint64_t)&cf);
              *(void *)v1073 = &v1074.__r_.__value_.__l.__size_;
              sub_135F74((void ***)v1073);
              sub_53068((uint64_t)buf);
              v309 = *(void **)&v1076[24];
LABEL_630:
              sub_32C8C(v309);
              goto LABEL_693;
            case 2:
              uint64_t v797 = sub_138E8(13);
              id v798 = sub_8C7D4(1, *(void **)v797, *(void *)(v797 + 8));
              v799 = (os_log_s *)objc_claimAutoreleasedReturnValue(v798);
              v401 = v799;
              if (!v799 || !os_log_type_enabled(v799, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1331;
              }
              *(_DWORD *)v1073 = 136315394;
              *(void *)&v1073[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v1073[12] = 1024;
              *(_DWORD *)&v1073[14] = 5513;
              v800 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAud"
                     "ioPlugInPropertyActiveNonQuiesceablePortsForCategory.)";
              break;
            case 1:
              uint64_t v398 = sub_138E8(13);
              id v399 = sub_8C7D4(1, *(void **)v398, *(void *)(v398 + 8));
              v400 = (os_log_s *)objc_claimAutoreleasedReturnValue(v399);
              v401 = v400;
              if (v400 && os_log_type_enabled(v400, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v1073 = 136315394;
                *(void *)&v1073[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v1073[12] = 1024;
                *(_DWORD *)&v1073[14] = 5513;
                _os_log_impl( &dword_0,  v401,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPl ugInPropertyActiveNonQuiesceablePortsForCategory.)",  v1073,  0x12u);
                int v121 = 1852797556;
              }

              else
              {
                int v121 = 1852797556;
              }

LABEL_1331:
              v1050 = __cxa_allocate_exception(0x10uLL);
              *(void *)v1050 = &off_4865A0;
              v1050[2] = v121;
            default:
              uint64_t v801 = sub_138E8(13);
              int v121 = 2003329396;
              id v802 = sub_8C7D4(1, *(void **)v801, *(void *)(v801 + 8));
              v803 = (os_log_s *)objc_claimAutoreleasedReturnValue(v802);
              v401 = v803;
              if (!v803 || !os_log_type_enabled(v803, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1331;
              }
              *(_DWORD *)v1073 = 136315394;
              *(void *)&v1073[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v1073[12] = 1024;
              *(_DWORD *)&v1073[14] = 5513;
              v800 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInProper"
                     "tyActiveNonQuiesceablePortsForCategory.)";
              break;
          }

          _os_log_impl(&dword_0, v401, OS_LOG_TYPE_ERROR, v800, v1073, 0x12u);
          goto LABEL_1331;
        }

        unsigned int v96 = *a5;
        if (v96 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
        {
          uint64_t v568 = sub_138E8(13);
          int v371 = 561211770;
          id v569 = sub_8C7D4(1, *(void **)v568, *(void *)(v568 + 8));
          v570 = (void *)objc_claimAutoreleasedReturnValue(v569);
          if (v570)
          {
            v372 = v570;
            if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              int v571 = v1076[23];
              v572 = *(_BYTE **)v1076;
              unsigned int v573 = *a5;
              int v574 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
              v575 = v1076;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v571 < 0) {
                v575 = v572;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6278;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v575;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v573;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v574;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_972;
            }

            goto LABEL_975;
          }

          goto LABEL_741;
        }

        uint64_t v97 = sub_33341C();
        BOOL v98 = *(void *)(v97 + 64) == *(void *)(v97 + 72);
LABEL_351:
        int v101 = !v98;
        goto LABEL_460;
      }

      if (v18 != 1633907299)
      {
        if (v18 == 1633969267)
        {
          int v21 = sub_7051C();
          goto LABEL_198;
        }

        goto LABEL_409;
      }

LABEL_203:
      unsigned int v93 = *a5;
      if (v93 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
      {
        uint64_t v430 = sub_138E8(13);
        int v371 = 561211770;
        id v431 = sub_8C7D4(1, *(void **)v430, *(void *)(v430 + 8));
        v432 = (void *)objc_claimAutoreleasedReturnValue(v431);
        if (v432)
        {
          v372 = v432;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v433 = v1076[23];
            v434 = *(_BYTE **)v1076;
            unsigned int v435 = *a5;
            int v436 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v437 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v433 < 0) {
              v437 = v434;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5950;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v437;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v435;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v436;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      if ((a3 | 8) != 8)
      {
        uint64_t v708 = sub_138E8(13);
        id v709 = sub_8C7D4(1, *(void **)v708, *(void *)(v708 + 8));
        v710 = (os_log_s *)objc_claimAutoreleasedReturnValue(v709);
        v711 = v710;
        if (v710 && os_log_type_enabled(v710, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5951;
          _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_1313;
      }

      *(void *)std::string __p = Mutable;
      *(_WORD *)&__p[8] = 0;
      if (!Mutable) {
        goto LABEL_216;
      }
      if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
      {
        uint64_t v453 = sub_138E8(13);
        id v454 = sub_8C7D4(1, *(void **)v453, *(void *)(v453 + 8));
        v455 = (os_log_s *)objc_claimAutoreleasedReturnValue(v454);
        v456 = v455;
        if (!v455 || !os_log_type_enabled(v455, OS_LOG_TYPE_ERROR)) {
          goto LABEL_836;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5960;
        v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.";
      }

      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"routable ports"))
      {
        uint64_t v458 = sub_138E8(13);
        id v459 = sub_8C7D4(1, *(void **)v458, *(void *)(v458 + 8));
        v460 = (os_log_s *)objc_claimAutoreleasedReturnValue(v459);
        v456 = v460;
        if (!v460 || !os_log_type_enabled(v460, OS_LOG_TYPE_ERROR)) {
          goto LABEL_836;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5964;
        v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.";
      }

      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"unroutable ports"))
      {
        uint64_t v461 = sub_138E8(13);
        id v462 = sub_8C7D4(1, *(void **)v461, *(void *)(v461 + 8));
        v463 = (os_log_s *)objc_claimAutoreleasedReturnValue(v462);
        v456 = v463;
        if (!v463 || !os_log_type_enabled(v463, OS_LOG_TYPE_ERROR)) {
          goto LABEL_836;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5968;
        v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.";
      }

      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"preferred sub-ports"))
      {
        uint64_t v464 = sub_138E8(13);
        id v465 = sub_8C7D4(1, *(void **)v464, *(void *)(v464 + 8));
        v466 = (os_log_s *)objc_claimAutoreleasedReturnValue(v465);
        v456 = v466;
        if (!v466 || !os_log_type_enabled(v466, OS_LOG_TYPE_ERROR)) {
          goto LABEL_836;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5972;
        v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.";
      }

      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"active data sources"))
      {
        uint64_t v467 = sub_138E8(13);
        id v468 = sub_8C7D4(1, *(void **)v467, *(void *)(v467 + 8));
        v469 = (os_log_s *)objc_claimAutoreleasedReturnValue(v468);
        v456 = v469;
        if (!v469 || !os_log_type_enabled(v469, OS_LOG_TYPE_ERROR)) {
          goto LABEL_836;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5976;
        v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.";
      }

      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"initiation context"))
      {
        uint64_t v470 = sub_138E8(13);
        id v471 = sub_8C7D4(1, *(void **)v470, *(void *)(v470 + 8));
        v472 = (os_log_s *)objc_claimAutoreleasedReturnValue(v471);
        v456 = v472;
        if (!v472 || !os_log_type_enabled(v472, OS_LOG_TYPE_ERROR)) {
          goto LABEL_836;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5980;
        v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationInitiationContextKey.";
      }

      else
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"voice processing configuration"))
        {
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"sub-port preferences"))
          {
            if (*(void *)__p)
            {
              sub_49A70(buf, a1, (const __CFDictionary **)__p, 0, 1);
              goto LABEL_217;
            }

      sub_61C64(a1, a2, a3, a4, a5, (uint64_t)a6, a7);
      goto LABEL_1026;
    }

    if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      int v630 = sub_138E8(13);
      v551 = 561211770;
      v631 = sub_8C7D4(1, *(void **)v630, *(void *)(v630 + 8));
      uint64_t v632 = (void *)objc_claimAutoreleasedReturnValue(v631);
      if (v632)
      {
        uint64_t v552 = v632;
        if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
        {
          *(void *)v871 = *(void *)a2;
          *(_DWORD *)&v871[8] = a2[2];
          sub_613AC((uint64_t)__p, (unsigned int *)v871);
          id v633 = __p[23];
          v634 = *(_BYTE **)__p;
          int v635 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v636 = __p;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v633 < 0) {
            v636 = v634;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6935;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v636;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = a5;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v635;
          int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_1132;
        }

        goto LABEL_1135;
      }

      goto LABEL_1061;
    }

    if (!*(void *)(a1 + 112))
    {
      uint64_t v656 = sub_138E8(13);
      id v657 = sub_8C7D4(1, *(void **)v656, *(void *)(v656 + 8));
      v658 = (os_log_s *)objc_claimAutoreleasedReturnValue(v657);
      v647 = v658;
      if (v658 && os_log_type_enabled(v658, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6936;
        _os_log_impl( &dword_0,  v647,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

LABEL_216:
            sub_75418(buf, a1);
LABEL_217:
            sub_52CCC((uint64_t)v1076, (uint64_t)buf);
            sub_52EF0((uint64_t)buf);
            *(_OWORD *)&v1074.__r_.__value_.__l.__data_ = *(_OWORD *)v1076;
            uint64_t v94 = sub_6A92C(*(void *)(a1 + 128), a2[2]);
            if (!v94)
            {
              uint64_t v438 = sub_138E8(13);
              id v439 = sub_8C7D4(1, *(void **)v438, *(void *)(v438 + 8));
              v440 = (os_log_s *)objc_claimAutoreleasedReturnValue(v439);
              v441 = v440;
              if (v440 && os_log_type_enabled(v440, OS_LOG_TYPE_ERROR))
              {
                unsigned int v442 = a2[2];
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5998;
                *(_WORD *)&_BYTE buf[18] = 1024;
                *(_DWORD *)&buf[20] = v442;
                _os_log_impl( &dword_0,  v441,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [vaPort is NULL]: VirtualAudio_Port could not be located for ID: %u",  buf,  0x18u);
              }

              v443 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v443, "VirtualAudio_Port could not be located for ID: %u");
            }

            if (*a2 == 1635152483)
            {
              sub_D4330((uint64_t)buf, v94, (uint64_t)&v1074);
              unsigned int v95 = *(const void **)buf;
              if (*(void *)buf) {
                goto LABEL_411;
              }
            }

            else
            {
              sub_D45F8((uint64_t)buf, v94, (uint64_t)&v1074);
              unsigned int v95 = *(const void **)buf;
              if (*(void *)buf)
              {
LABEL_411:
                CFRetain(v95);
                uint64_t v204 = *(void *)buf;
LABEL_413:
                sub_13818((uint64_t)buf);
                *(void *)a6 = v204;
LABEL_544:
                sub_53068((uint64_t)v1076);
                p_std::string theDict = (std::string *)__p;
                goto LABEL_622;
              }
            }

            uint64_t v204 = 0LL;
            goto LABEL_413;
          }

          uint64_t v476 = sub_138E8(13);
          id v477 = sub_8C7D4(1, *(void **)v476, *(void *)(v476 + 8));
          v478 = (os_log_s *)objc_claimAutoreleasedReturnValue(v477);
          v456 = v478;
          if (v478 && os_log_type_enabled(v478, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5988;
            v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPort"
                   "sForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.";
            goto LABEL_835;
          }

          float v116 = 0;
          uint64_t v120 = (uint64_t *)v361;
          if (v361 == v362) {
            goto LABEL_382;
          }
          int v121 = (uint64_t *)__p;
          if (__p == v359) {
            goto LABEL_382;
          }
          while (2)
          {
            v355 = 0LL;
            v356 = 0LL;
            int v122 = (std::__shared_weak_count *)v120[1];
            if (v122)
            {
              __n128 v123 = std::__shared_weak_count::lock(v122);
              v356 = v123;
              if (v123)
              {
                v124 = *v120;
                v355 = *v120;
LABEL_223:
                id v353 = 0LL;
                v354 = 0LL;
                uint64_t v125 = (std::__shared_weak_count *)v121[1];
                if (!v125
                  || (uint64_t v126 = std::__shared_weak_count::lock(v125), (v354 = v126) == 0LL)
                  || (char v127 = *v121, v353 = *v121, !v124)
                  || !v127)
                {
                  std::string::size_type v292 = (os_log_t *)sub_138E8(13);
                  v293 = *v292;
                  if (*v292 && os_log_type_enabled(*v292, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 605;
                    _os_log_impl( &dword_0,  v293,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered nullptr source or destination ports returned from PortLocator.",  buf,  0x12u);
                  }

                  v294 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error( v294,  "Encountered nullptr source or destination ports returned from PortLocator.");
                }

                uint64_t v128 = v126;
                sub_120BE4(&v351, a5, a10);
                sub_D8280(buf, (uint64_t *)(v124 + 80));
                if (v352 == sub_D72F8((uint64_t)&v351, (unint64_t *)buf))
                {
                  sub_D8280(&v374, (uint64_t *)(v127 + 80));
                  uint64_t v129 = v352 == sub_D72F8((uint64_t)&v351, (unint64_t *)&v374);
                  if (v374.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v374.__r_.__value_.__l.__size_);
                  }
                }

                else
                {
                  uint64_t v129 = 0;
                }

                if (*(void *)&buf[8]) {
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
                }
                if (!v129) {
                  goto LABEL_280;
                }
                uint64_t v130 = *v329;
                if (*v329)
                {
                  char v131 = *(_DWORD *)(v124 + 144);
                  signed int v132 = v329;
                  int v133 = *v329;
                  do
                  {
                    unsigned int v134 = *(_DWORD *)(v133 + 28);
                    CFTypeRef v135 = v134 >= v131;
                    if (v134 >= v131) {
                      unsigned int v136 = (uint64_t *)v133;
                    }
                    else {
                      unsigned int v136 = (uint64_t *)(v133 + 8);
                    }
                    if (v135) {
                      signed int v132 = (void *)v133;
                    }
                    int v133 = *v136;
                  }

                  while (*v136);
                  if (v132 != v329 && v131 >= *((_DWORD *)v132 + 7)) {
                    goto LABEL_280;
                  }
                  uint64_t v137 = *(_DWORD *)(v127 + 144);
                  int v138 = v329;
                  do
                  {
                    CFMutableDictionaryRef v139 = *(_DWORD *)(v130 + 28);
                    unsigned int v140 = v139 >= v137;
                    if (v139 >= v137) {
                      uint64_t v141 = (uint64_t *)v130;
                    }
                    else {
                      uint64_t v141 = (uint64_t *)(v130 + 8);
                    }
                    if (v140) {
                      int v138 = (void *)v130;
                    }
                    uint64_t v130 = *v141;
                  }

                  while (*v141);
                  if (v138 != v329 && v137 >= *((_DWORD *)v138 + 7)) {
                    goto LABEL_280;
                  }
                }

                if (!sub_F9AF4(v124, a4[1])
                  || !sub_F9AF4(v127, a4[1])
                  || *(_DWORD *)(a3 + 32) == 1667396196
                  && !(*(unsigned int (**)(uint64_t))(*(void *)v127 + 304LL))(v127))
                {
LABEL_280:
                  int v145 = 0;
                  goto LABEL_281;
                }

                id v142 = *(_DWORD *)(v127 + 144);
                LODWORD(v374.__r_.__value_.__l.__data_) = *(_DWORD *)(v124 + 144);
                HIDWORD(v374.__r_.__value_.__r.__words[0]) = v142;
                v143 = sub_7A22C((uint64_t)buf, (unsigned int *)&v374, 2LL);
                size_t v144 = sub_55914(v143, a3, a4[1], a7, a8);
                sub_32C8C(*(void **)&buf[8]);
                if (*(_BYTE *)(v338 + 48)) {
                  int v145 = 0;
                }
                else {
                  int v145 = v144;
                }
                if (!*(_BYTE *)(v338 + 48) || ((v144 ^ 1) & 1) != 0)
                {
LABEL_281:
                  if (!v336 && (v145 & 1) == 0)
                  {
                    uint64_t v208 = sub_138E8(8);
                    unsigned int v73 = v338;
                    if ((*(_BYTE *)(v208 + 8) & 1) != 0)
                    {
                      uint64_t v209 = *(os_log_s **)v208;
                      if (*(void *)v208)
                      {
                        if (os_log_type_enabled(*(os_log_t *)v208, OS_LOG_TYPE_DEBUG))
                        {
                          sub_2DAAA0(&v374, v328);
                          uint64_t v210 = &v374;
                          if ((v374.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                            uint64_t v210 = (std::string *)v374.__r_.__value_.__r.__words[0];
                          }
                          *(_DWORD *)buf = 136316418;
                          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                          *(_WORD *)&_BYTE buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 627;
                          *(_WORD *)&_BYTE buf[18] = 2080;
                          *(void *)&buf[20] = v210;
                          *(_WORD *)&_BYTE buf[28] = 1024;
                          *(_DWORD *)&buf[30] = 1;
                          *(_WORD *)&buf[34] = 1024;
                          *(_DWORD *)&buf[36] = 1;
                          *(_WORD *)&buf[40] = 1024;
                          *(_DWORD *)&buf[42] = 1;
                          _os_log_impl( &dword_0,  v209,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to build concrete route(s) failed: Connection %s is required and cannot be used for a concrete route: source is connected: %u; destination is connected: %u; connectio"
                            "n is permitted: %u",
                            buf,
                            0x2Eu);
                        }
                      }
                    }

                    a1->i64[0] = 0LL;
                    a1->i64[1] = 0LL;
                    a1[1].i64[0] = 0LL;
                    sub_FF3B8(v352[0]);
                    char v211 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v212 = __ldaxr(v211);
                    while (__stlxr(v212 - 1, v211));
                    if (!v212)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }

                    uint64_t v213 = v356;
                    if (v356)
                    {
                      int v214 = (unint64_t *)&v356->__shared_owners_;
                      do
                        uint64_t v215 = __ldaxr(v214);
                      while (__stlxr(v215 - 1, v214));
                      if (!v215)
                      {
                        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                        std::__shared_weak_count::__release_weak(v213);
                      }
                    }

                    float v116 = 1;
                    goto LABEL_382;
                  }

                  if (v145) {
                    goto LABEL_284;
                  }
                  unsigned int v73 = v338;
                }

                else
                {
                  int v146 = *(void *)(v338 + 40);
                  if (((**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v146)(v146, v124, v127) & 1) == 0)
                  {
                    int v147 = (os_log_t *)sub_138E8(20);
                    v148 = *v147;
                    if (!*v147) {
                      goto LABEL_280;
                    }
                    id v149 = os_log_type_enabled(*v147, OS_LOG_TYPE_DEFAULT);
                    int v145 = 0;
                    if (v149)
                    {
                      uint64_t v150 = *(std::__shared_weak_count ***)(v124 + 248);
                      char v348 = v150;
                      LOBYTE(v349) = *(_BYTE *)(v124 + 256);
                      CFTypeRef cf = v150;
                      if ((_BYTE)v349 && v150) {
                        CFRetain(v150);
                      }
                      v151 = *(_OWORD **)(v127 + 248);
                      uint64_t v343 = v151;
                      LOBYTE(v344) = *(_BYTE *)(v127 + 256);
                      uint64_t v314 = v151;
                      if ((_BYTE)v344 && v151) {
                        CFRetain(v151);
                      }
                      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v146 + 24LL))(&v374, v146);
                      char v152 = &v374;
                      if ((v374.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                        char v152 = (std::string *)v374.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)buf = 136316162;
                      *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 1448;
                      *(_WORD *)&_BYTE buf[18] = 2112;
                      *(void *)&buf[20] = cf;
                      *(_WORD *)&_BYTE buf[28] = 2112;
                      *(void *)&buf[30] = v314;
                      *(_WORD *)&buf[38] = 2080;
                      *(void *)&buf[40] = v152;
                      _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Connection between ports %@ and %@ not allowed due to property inclusion policy %s",  buf,  0x30u);
                      sub_19DFC((uint64_t)&v343);
                      sub_19DFC((uint64_t)&v348);
                      goto LABEL_280;
                    }

                    goto LABEL_281;
                  }

                      if (!v338 || (unsigned int v134 = std::__shared_weak_count::lock(v338)) == 0LL)
                      {
                        if ((v63 & 1) != 0 && v65) {
                          std::__shared_weak_count::__release_weak(v65);
                        }
                        goto LABEL_494;
                      }

                      CFTypeRef v135 = v134;
                      unsigned int v136 = v337;
                      uint64_t v137 = (unint64_t *)&v134->__shared_weak_owners_;
                      do
                        int v138 = __ldxr(v137);
                      while (__stxr(v138 + 1, v137));
                      CFMutableDictionaryRef v139 = (unint64_t *)&v134->__shared_owners_;
                      do
                        unsigned int v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v135);
                      }

                      uint64_t v141 = std::__shared_weak_count::lock(v135);
                      if (v141)
                      {
                        id v142 = v141;
                        v143 = (unint64_t *)&v141->__shared_owners_;
                        do
                          size_t v144 = __ldaxr(v143);
                        while (__stlxr(v144 - 1, v143));
                        if (!v144)
                        {
                          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                          std::__shared_weak_count::__release_weak(v142);
                        }
                      }

                      else
                      {
                        unsigned int v136 = 0LL;
                      }

                      int v133 = v136 == 0LL;
                      std::__shared_weak_count::__release_weak(v135);
                      if ((v63 & 1) == 0) {
                        goto LABEL_234;
                      }
                      goto LABEL_231;
                    }
                  }
                }

                else
                {
                  id v65 = 0LL;
                }

                v124 = 0LL;
                goto LABEL_214;
              }

              v296 = (os_log_t *)sub_138E8(13);
              uint64_t v297 = *v296;
              if (*v296 && os_log_type_enabled(*v296, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2733;
                _os_log_impl( &dword_0,  v297,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }
            }

            else
            {
              v294 = (os_log_t *)sub_138E8(13);
              __n128 v295 = *v294;
              if (*v294 && os_log_type_enabled(*v294, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2732;
                _os_log_impl( &dword_0,  v295,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }
            }

LABEL_836:
          v479 = __cxa_allocate_exception(0x10uLL);
          *(void *)v479 = &off_4865A0;
          v479[2] = 1852797029;
        }

        uint64_t v473 = sub_138E8(13);
        id v474 = sub_8C7D4(1, *(void **)v473, *(void *)(v473 + 8));
        v475 = (os_log_s *)objc_claimAutoreleasedReturnValue(v474);
        v456 = v475;
        if (!v475 || !os_log_type_enabled(v475, OS_LOG_TYPE_ERROR)) {
          goto LABEL_836;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5984;
        v457 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.";
      }

        id v449 = *(void *)(a1 + 144);
        v450 = *(void *)(a1 + 152);
        if (v449 != v450)
        {
          while (1)
          {
            if (*(void *)v449)
            {
              if ((*(void *)(*(void *)(*(void *)v449 + 1008LL) + 292LL) & 0xFF00000000LL) != 0
                && *(void *)(*(void *)(*(void *)v449 + 1008LL) + 292LL) == 1936290409LL)
              {
                break;
              }
            }

            v449 += 8LL;
            if (v449 == v450) {
              goto LABEL_899;
            }
          }
        }

        if (v449 != v450)
        {
          int v452 = *(_DWORD **)v449;
          if (*(void *)v449)
          {
            if (v430 == 1886352244)
            {
              uint64_t v453 = 0;
            }

            else if (v430 == 1752396914)
            {
              uint64_t v453 = MGGetBoolAnswer(@"DeviceSupportsSiriBargeIn");
            }

            else
            {
              uint64_t v453 = v429 == 1987208039 || v429 == 1986098036;
            }

            uint64_t v470 = (os_log_s *)*(id *)sub_138E8(2);
            id v471 = v470;
            if (v470 && os_log_type_enabled(v470, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 7322;
              *(_WORD *)&_BYTE buf[18] = 1024;
              *(_DWORD *)&buf[20] = v429;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = v430;
              _os_log_impl( &dword_0,  v471,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ConfigureSecureSpeechDetectionDSP inMode=%u inInitiationContext=%u\n",  buf,  0x1Eu);
            }

            if (v430 == 1752132965 || v430 == 1969840752) {
              uint64_t v473 = v453;
            }
            else {
              uint64_t v473 = 0;
            }
            LODWORD(theArray[0]) = v473;
            strcpy(__p, "mpgdtpni");
            __p[9] = 0;
            *(_WORD *)&__p[10] = 0;
            LODWORD(Mutable) = 1651797616;
            LODWORD(__dst) = v452[2];
            strcpy(buf, "mhgdtpni");
            buf[9] = 0;
            *(_WORD *)&buf[10] = 0;
            id v474 = sub_36EF4((AudioObjectID *)&__dst, (const AudioObjectPropertyAddress *)buf, 4u, &Mutable);
            *((void *)&v477 + 1) = v475;
            *(void *)&id v477 = v474;
            uint64_t v476 = v477 >> 32;
            if ((v476 & 0xFF00000000LL) != 0 && (_DWORD)v476) {
              (*(void (**)(_DWORD *, _BYTE *, uint64_t, CFMutableArrayRef *, uint64_t, CFMutableArrayRef *, void))(*(void *)v452 + 64LL))( v452,  __p,  4LL,  &Mutable,  4LL,  theArray,  0LL);
            }
          }
        }

LABEL_835:
      _os_log_impl(&dword_0, v456, OS_LOG_TYPE_ERROR, v457, buf, 0x12u);
      goto LABEL_836;
    }

    if (v18 > 1634759266)
    {
      if (v18 != 1634759267)
      {
        if (v18 == 1635152483) {
          goto LABEL_203;
        }
        if (v18 != 1651077236) {
          goto LABEL_409;
        }
        unsigned int v51 = *a5;
        if (v51 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
        {
          uint64_t v512 = sub_138E8(13);
          int v371 = 561211770;
          id v513 = sub_8C7D4(1, *(void **)v512, *(void *)(v512 + 8));
          v514 = (void *)objc_claimAutoreleasedReturnValue(v513);
          if (v514)
          {
            v372 = v514;
            if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              int v515 = v1076[23];
              v516 = *(_BYTE **)v1076;
              unsigned int v517 = *a5;
              int v518 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
              v519 = v1076;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v515 < 0) {
                v519 = v516;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5846;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v519;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v517;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v518;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_972;
            }

            goto LABEL_975;
          }

          goto LABEL_741;
        }

        if ((a3 | 4) != 4)
        {
          uint64_t v1009 = sub_138E8(13);
          id v1010 = sub_8C7D4(1, *(void **)v1009, *(void *)(v1009 + 8));
          v1011 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1010);
          v711 = v1011;
          if (v1011 && os_log_type_enabled(v1011, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5847;
            _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          goto LABEL_1313;
        }

        *(void *)buf = sub_273328(a1, a3, (unsigned int *)Mutable);
        *(void *)&buf[8] = v52;
        sub_E5784(v1057, *(void *)(a1 + 216) + 8LL);
        sub_E570C((uint64_t)&v1074, (uint64_t)buf, (uint64_t)v1057);
        if (v1057[16]) {
          sub_13850((uint64_t)v1057);
        }
        int v53 = 1852793716;
        *(_OWORD *)buf = *(_OWORD *)&v1074.__r_.__value_.__l.__data_;
        *(void *)&_BYTE buf[24] = 0LL;
        *(void *)&buf[16] = &buf[24];
        *(void *)&buf[56] = 0LL;
        *(void *)&buf[48] = 0LL;
        *(void *)&buf[32] = 0LL;
        *(void *)&buf[40] = &buf[48];
        uint64_t v1089 = 0LL;
        v1088 = &v1089;
        uint64_t v1093 = 0LL;
        uint64_t v1092 = 0LL;
        uint64_t v1090 = 0LL;
        v1091 = &v1092;
        uint64_t v1096 = 0LL;
        uint64_t v1095 = 0LL;
        v1094 = &v1095;
        char v1097 = 0;
        char v1098 = 0;
        int v1099 = 1668248944;
        int v1100 = 1852796517;
        uint64_t v1102 = 0LL;
        uint64_t v1101 = 0LL;
        uint64_t v1103 = 0LL;
        uint64_t v1104 = 0x756E64656175746FLL;
        __int128 v1105 = 0u;
        __int128 v1106 = 0u;
        __int128 v1107 = 0u;
        __int128 v1108 = 0u;
        __int128 v1109 = 0u;
        uint64_t v1110 = 1065353216LL;
        __int128 v1111 = 0u;
        __int128 v1112 = 0u;
        uint64_t v1113 = 1065353216LL;
        __int128 v1115 = 0u;
        __int128 v1114 = 0u;
        uint64_t v1116 = 1065353216LL;
        char v1117 = 0;
        char v1118 = 0;
        char v1120 = 0;
        char v1121 = 0;
        int v1119 = 0;
        memset(v1076, 0, 24);
        LODWORD(v1078) = 3;
        uint64_t v1081 = 0LL;
        uint64_t v1080 = 0LL;
        v1079 = &v1080;
        uint64_t v1083 = 0LL;
        int v1082 = 44698266;
        *(_DWORD *)&v1076[24] = 1986295651;
        *(_DWORD *)&v1076[28] = HIDWORD(v1074.__r_.__value_.__r.__words[0]);
        v1076[32] = 1;
        sub_135FE8((uint64_t)v1073, *(uint64_t **)(a1 + 112), (uint64_t)buf, (uint64_t)v1076);
        switch(*(_DWORD *)v1073)
        {
          case 0:
            sub_27703C((void *)0x6F757470, &v1073[8]);
            theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable( 0LL,  0LL,  &kCFTypeArrayCallBacks);
            LOWORD(theDict.__r_.__value_.__r.__words[1]) = 257;
            sub_B8E40((uint64_t *)&v1063, (uint64_t)&v1073[8], "", 5864);
            for (k = (std::string *)v1063.__r_.__value_.__l.__size_;
                  k != &v1063;
                  k = (std::string *)k->__r_.__value_.__l.__size_)
            {
              uint64_t cap = k->__r_.__value_.__l.__cap_;
              memset(__p, 0, 24);
              strcpy(&__p[24], "cwdv");
              __p[32] = 0;
              LODWORD(v1067) = 3;
              v1069 = 0LL;
              uint64_t v1070 = 0LL;
              v1068 = &v1069;
              CFTypeRef v1072 = 0LL;
              int v1071 = 44731050;
              int v56 = sub_578E8(*(void *)(a1 + 128), cap, (uint64_t)__p);
              sub_1378C((uint64_t)&theDict, v56);
              if (v1072) {
                CFRelease(v1072);
              }
              sub_32C8C(v1069);
              if (*(void *)__p)
              {
                *(void *)&__p[8] = *(void *)__p;
                operator delete(*(void **)__p);
              }
            }

            sub_1BB88((uint64_t *)&v1063);
            uint64_t v57 = sub_138E8(2);
            uint64_t v58 = sub_138E8(34);
            char v59 = 0;
            uint64_t v60 = 0LL;
            *(void *)std::string __p = 0x100000002LL;
            uint64_t v61 = *(void *)(v57 + 8);
            while (1)
            {
              uint64_t v62 = *(int *)&__p[4 * v60];
              char v63 = v59;
              if (((v61 & v62) != 0) != ((*(void *)(v58 + 8) & v62) != 0)) {
                break;
              }
              char v59 = 1;
              uint64_t v60 = 1LL;
              if ((v63 & 1) != 0) {
                goto LABEL_509;
              }
            }

            if ((v61 & v62) == 0) {
              uint64_t v57 = v58;
            }
LABEL_509:
            id v260 = sub_8C7D4(6, *(void **)v57, *(void *)(v57 + 8));
            v261 = (void *)objc_claimAutoreleasedReturnValue(v260);
            v262 = v261;
            if (v261)
            {
              v263 = v261;
              if (os_log_type_enabled(v263, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(&v1063, LODWORD(v1074.__r_.__value_.__l.__data_));
                int size = (char)v1063.__r_.__value_.__s.__size_;
                std::string::size_type v265 = v1063.__r_.__value_.__r.__words[0];
                sub_151A78(&v1060, (const __CFArray *)theDict.__r_.__value_.__l.__data_);
                v266 = &v1063;
                if (size < 0) {
                  v266 = (std::string *)v265;
                }
                if ((v1060.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v267 = &v1060;
                }
                else {
                  v267 = (std::string *)v1060.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string __p = 136315906;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 5871;
                *(_WORD *)&__p[18] = 2080;
                *(void *)&__p[20] = v266;
                *(_WORD *)&__p[28] = 2080;
                *(void *)&__p[30] = v267;
                _os_log_impl( &dword_0,  v263,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning built-in ports for category '%s': %s",  __p,  0x26u);
              }
            }

            if (theDict.__r_.__value_.__r.__words[0])
            {
              CFRetain(theDict.__r_.__value_.__l.__data_);
              std::string::size_type v268 = theDict.__r_.__value_.__r.__words[0];
            }

            else
            {
              std::string::size_type v268 = 0LL;
            }

            *(void *)a6 = v268;
            sub_13818((uint64_t)&theDict);
            goto LABEL_629;
          case 2:
            uint64_t v772 = sub_138E8(13);
            id v773 = sub_8C7D4(1, *(void **)v772, *(void *)(v772 + 8));
            v774 = (os_log_s *)objc_claimAutoreleasedReturnValue(v773);
            v388 = v774;
            if (!v774 || !os_log_type_enabled(v774, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1327;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 5859;
            v775 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAudio"
                   "PlugInPropertyBuiltInPortsForCategory.)";
            break;
          case 1:
            uint64_t v385 = sub_138E8(13);
            id v386 = sub_8C7D4(1, *(void **)v385, *(void *)(v385 + 8));
            v387 = (os_log_s *)objc_claimAutoreleasedReturnValue(v386);
            v388 = v387;
            if (v387 && os_log_type_enabled(v387, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 5859;
              _os_log_impl( &dword_0,  v388,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPlug InPropertyBuiltInPortsForCategory.)",  __p,  0x12u);
              int v53 = 1852797556;
            }

            else
            {
              int v53 = 1852797556;
            }

LABEL_1327:
            v1048 = __cxa_allocate_exception(0x10uLL);
            *(void *)v1048 = &off_4865A0;
            v1048[2] = v53;
          default:
            uint64_t v776 = sub_138E8(13);
            int v53 = 2003329396;
            id v777 = sub_8C7D4(1, *(void **)v776, *(void *)(v776 + 8));
            v778 = (os_log_s *)objc_claimAutoreleasedReturnValue(v777);
            v388 = v778;
            if (!v778 || !os_log_type_enabled(v778, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1327;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 5859;
            v775 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInProperty"
                   "BuiltInPortsForCategory.)";
            break;
        }

        _os_log_impl(&dword_0, v388, OS_LOG_TYPE_ERROR, v775, __p, 0x12u);
        goto LABEL_1327;
      }

      unsigned int v102 = *a5;
      if (v102 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
      {
        uint64_t v584 = sub_138E8(13);
        int v371 = 561211770;
        id v585 = sub_8C7D4(1, *(void **)v584, *(void *)(v584 + 8));
        v586 = (void *)objc_claimAutoreleasedReturnValue(v585);
        if (v586)
        {
          v372 = v586;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v587 = v1076[23];
            v588 = *(_BYTE **)v1076;
            unsigned int v589 = *a5;
            int v590 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v591 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v587 < 0) {
              v591 = v588;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5669;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v591;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v589;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v590;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      if ((a3 | 8) != 8)
      {
        uint64_t v1018 = sub_138E8(13);
        id v1019 = sub_8C7D4(1, *(void **)v1018, *(void *)(v1018 + 8));
        v1020 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1019);
        v711 = v1020;
        if (v1020 && os_log_type_enabled(v1020, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5670;
          _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_1313;
      }

      theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable( 0LL,  0LL,  &kCFTypeArrayCallBacks);
      LOWORD(theDict.__r_.__value_.__r.__words[1]) = 257;
      if (!Mutable)
      {
        sub_268514((uint64_t)buf, a1, *(void **)(a1 + 120));
        sub_13888((uint64_t)&theDict, (uint64_t)buf);
        sub_13818((uint64_t)buf);
        v279 = (uint64_t *)sub_138E8(2);
        if (sub_273D9C(*v279, v279[1]))
        {
          sub_7D084(buf, "Returning active ports for category/mode [null]:");
          sub_273DAC((uint64_t *)v1076, (CFArrayRef *)&theDict, (uint64_t)buf, v280);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          for (uint64_t m = *(void *)&v1076[8]; (_BYTE *)m != v1076; uint64_t m = *(void *)(m + 8))
          {
            uint64_t v282 = sub_138E8(2);
            uint64_t v283 = sub_138E8(34);
            char v284 = 0;
            uint64_t v285 = 0LL;
            *(void *)buf = 0x100000002LL;
            uint64_t v286 = *(void *)(v282 + 8);
            do
            {
              uint64_t v287 = *(int *)&buf[4 * v285];
              char v288 = v284;
              if (((v286 & v287) != 0) != ((*(void *)(v283 + 8) & v287) != 0))
              {
                if ((v286 & v287) == 0) {
                  uint64_t v282 = v283;
                }
                if ((*(void *)(v282 + 8) & 1) != 0) {
                  goto LABEL_558;
                }
                goto LABEL_564;
              }

              char v284 = 1;
              uint64_t v285 = 1LL;
            }

            while ((v288 & 1) == 0);
            if ((v286 & 1) == 0) {
              continue;
            }
LABEL_558:
            v289 = (os_log_s *)*(id *)v282;
            if (v289)
            {
              v290 = v289;
              if (os_log_type_enabled(v289, OS_LOG_TYPE_DEBUG))
              {
                v291 = (void *)(m + 16);
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5724;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v291;
                _os_log_impl(&dword_0, v290, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
              }
            }

LABEL_564:
            ;
          }

          sub_1532B4(v1076);
        }

        goto LABEL_566;
      }

      CFTypeRef cf = Mutable;
      __int16 v1062 = 0;
      if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
      {
        uint64_t v878 = sub_138E8(13);
        id v879 = sub_8C7D4(1, *(void **)v878, *(void *)(v878 + 8));
        v880 = (os_log_s *)objc_claimAutoreleasedReturnValue(v879);
        v881 = v880;
        if (!v880 || !os_log_type_enabled(v880, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1236;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5681;
        v882 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.";
      }

      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"routable ports"))
      {
        uint64_t v894 = sub_138E8(13);
        id v895 = sub_8C7D4(1, *(void **)v894, *(void *)(v894 + 8));
        v896 = (os_log_s *)objc_claimAutoreleasedReturnValue(v895);
        v881 = v896;
        if (!v896 || !os_log_type_enabled(v896, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1236;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5685;
        v882 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.";
      }

      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"unroutable ports"))
      {
        uint64_t v903 = sub_138E8(13);
        id v904 = sub_8C7D4(1, *(void **)v903, *(void *)(v903 + 8));
        v905 = (os_log_s *)objc_claimAutoreleasedReturnValue(v904);
        v881 = v905;
        if (!v905 || !os_log_type_enabled(v905, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1236;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5689;
        v882 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.";
      }

      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"preferred sub-ports"))
      {
        uint64_t v922 = sub_138E8(13);
        id v923 = sub_8C7D4(1, *(void **)v922, *(void *)(v922 + 8));
        v924 = (os_log_s *)objc_claimAutoreleasedReturnValue(v923);
        v881 = v924;
        if (!v924 || !os_log_type_enabled(v924, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1236;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5693;
        v882 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.";
      }

      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"active data sources"))
      {
        uint64_t v937 = sub_138E8(13);
        id v938 = sub_8C7D4(1, *(void **)v937, *(void *)(v937 + 8));
        v939 = (os_log_s *)objc_claimAutoreleasedReturnValue(v938);
        v881 = v939;
        if (!v939 || !os_log_type_enabled(v939, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1236;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5697;
        v882 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.";
      }

      else
      {
        if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"voice processing configuration"))
        {
          if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"sub-port preferences"))
          {
            sub_49A70(buf, a1, (const __CFDictionary **)&cf, 0, 1);
            if (v1123) {
              unint64_t v103 = (uint64_t *)v1122;
            }
            else {
              unint64_t v103 = &qword_492FB0;
            }
            sub_E1FDC((uint64_t)&v1074, v103);
            sub_6E1CC((uint64_t)v1076, *(uint64_t **)(a1 + 112), (uint64_t)buf, &v1074, 0);
            switch(*(_DWORD *)v1076)
            {
              case 0:
                sub_273930((uint64_t)__p, a1, (uint64_t *)&v1076[8], &v1074);
                sub_13888((uint64_t)&theDict, (uint64_t)__p);
                sub_13818((uint64_t)__p);
                unint64_t v104 = (uint64_t *)sub_138E8(2);
                if (sub_273D9C(*v104, v104[1]))
                {
                  sub_2DB6FC(&v1060, (unsigned int *)buf);
                  sub_148B3C(&v1063, "Returning active ports for category/mode ", &v1060);
                  __n128 v105 = sub_148AE0((std::string *)__p, &v1063, ":");
                  sub_273DAC((uint64_t *)v1073, (CFArrayRef *)&theDict, (uint64_t)__p, v105);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  for (uint64_t n = *(void *)&v1073[8]; (_BYTE *)n != v1073; uint64_t n = *(void *)(n + 8))
                  {
                    uint64_t v107 = sub_138E8(2);
                    uint64_t v108 = sub_138E8(34);
                    char v109 = 0;
                    uint64_t v110 = 0LL;
                    *(void *)std::string __p = 0x100000002LL;
                    uint64_t v111 = *(void *)(v107 + 8);
                    do
                    {
                      uint64_t v112 = *(int *)&__p[4 * v110];
                      char v113 = v109;
                      if (((v111 & v112) != 0) != ((*(void *)(v108 + 8) & v112) != 0))
                      {
                        if ((v111 & v112) == 0) {
                          uint64_t v107 = v108;
                        }
                        if ((*(void *)(v107 + 8) & 1) != 0) {
                          goto LABEL_256;
                        }
                        goto LABEL_262;
                      }

                      char v109 = 1;
                      uint64_t v110 = 1LL;
                    }

                    while ((v113 & 1) == 0);
                    if ((v111 & 1) == 0) {
                      continue;
                    }
LABEL_256:
                    uint64_t v114 = (os_log_s *)*(id *)v107;
                    if (v114)
                    {
                      float v115 = v114;
                      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
                      {
                        float v116 = (void *)(n + 16);
                        *(_DWORD *)std::string __p = 136315650;
                        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                        *(_WORD *)&__p[12] = 1024;
                        *(_DWORD *)&__p[14] = 5718;
                        *(_WORD *)&__p[18] = 2080;
                        *(void *)&__p[20] = v116;
                        _os_log_impl(&dword_0, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", __p, 0x1Cu);
                      }
                    }

LABEL_262:
                    ;
                  }

                  sub_1532B4(v1073);
                }

                *(void *)std::string __p = &v1076[8];
                sub_135F74((void ***)__p);
                sub_734C4((void *)v1074.__r_.__value_.__l.__size_);
                sub_52EF0((uint64_t)buf);
                sub_13850((uint64_t)&cf);
LABEL_566:
                if (theDict.__r_.__value_.__r.__words[0])
                {
                  CFRetain(theDict.__r_.__value_.__l.__data_);
                  std::string::size_type v292 = theDict.__r_.__value_.__r.__words[0];
                }

                else
                {
                  std::string::size_type v292 = 0LL;
                }

                *(void *)a6 = v292;
                v310 = &theDict;
                goto LABEL_689;
              case 2:
                uint64_t v976 = sub_138E8(13);
                int v452 = 1852793716;
                id v977 = sub_8C7D4(1, *(void **)v976, *(void *)(v976 + 8));
                v978 = (os_log_s *)objc_claimAutoreleasedReturnValue(v977);
                v451 = v978;
                if (!v978 || !os_log_type_enabled(v978, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_1255;
                }
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 5712;
                v979 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualA"
                       "udioPlugInPropertyActivePortsForRouteConfiguration.)";
                break;
              case 1:
                uint64_t v448 = sub_138E8(13);
                id v449 = sub_8C7D4(1, *(void **)v448, *(void *)(v448 + 8));
                v450 = (os_log_s *)objc_claimAutoreleasedReturnValue(v449);
                v451 = v450;
                int v452 = 1852797556;
                if (v450 && os_log_type_enabled(v450, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string __p = 136315394;
                  *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 5712;
                  _os_log_impl( &dword_0,  v451,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudio PlugInPropertyActivePortsForRouteConfiguration.)",  __p,  0x12u);
                  int v452 = 1852797556;
                }

  if (*a2 == 1064725619)
  {
    uint64_t v111 = sub_138E8(1);
    uint64_t v112 = sub_138E8(38);
    char v113 = 0;
    uint64_t v114 = 0LL;
    *(void *)buf = 0x100000002LL;
    float v115 = *(void *)(v111 + 8);
    while (1)
    {
      float v116 = *(int *)&buf[4 * v114];
      unsigned int v117 = v113;
      if (((v115 & v116) != 0) != ((*(void *)(v112 + 8) & v116) != 0)) {
        break;
      }
      char v113 = 1;
      uint64_t v114 = 1LL;
      if ((v117 & 1) != 0)
      {
        if ((v115 & 1) == 0) {
          goto LABEL_282;
        }
        goto LABEL_271;
      }
    }

    if ((v115 & v116) == 0) {
      uint64_t v111 = v112;
    }
    if ((*(void *)(v111 + 8) & 1) != 0)
    {
LABEL_271:
      int v118 = *(os_log_s **)v111;
      if (v118 && os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
      {
        v350.__r_.__value_.__r.__words[0] = *(void *)a2;
        LODWORD(v350.__r_.__value_.__r.__words[1]) = a2[2];
        sub_613AC((uint64_t)cf, (unsigned int *)&v350);
        unsigned int v119 = cf[23];
        uint64_t v120 = *(_BYTE **)cf;
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)a1 + 96LL))(&__p, a1);
        int v121 = cf;
        if (v119 < 0) {
          int v121 = v120;
        }
        if (v353 >= 0) {
          int v122 = &__p;
        }
        else {
          int v122 = __p;
        }
        __n128 v123 = *(_DWORD *)a6;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2796;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v121;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)v362 = v122;
        *(_WORD *)&v362[8] = 1024;
        *(_DWORD *)&v362[10] = v123;
        _os_log_impl(&dword_0, v118, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on VAD '%s': %u.", buf, 0x2Cu);
        if (SHIBYTE(v353) < 0) {
          operator delete(__p);
        }
        if ((cf[23] & 0x80000000) != 0) {
          operator delete(*(void **)cf);
        }
      }
    }
  }

LABEL_1255:
                v983 = __cxa_allocate_exception(0x10uLL);
                *(void *)v983 = &off_4865A0;
                v983[2] = v452;
              default:
                uint64_t v980 = sub_138E8(13);
                int v452 = 2003329396;
                id v981 = sub_8C7D4(1, *(void **)v980, *(void *)(v980 + 8));
                v982 = (os_log_s *)objc_claimAutoreleasedReturnValue(v981);
                v451 = v982;
                if (!v982 || !os_log_type_enabled(v982, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_1255;
                }
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 5712;
                v979 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInProp"
                       "ertyActivePortsForRouteConfiguration.)";
                break;
            }

            _os_log_impl(&dword_0, v451, OS_LOG_TYPE_ERROR, v979, __p, 0x12u);
            goto LABEL_1255;
          }

          uint64_t v962 = sub_138E8(13);
          id v963 = sub_8C7D4(1, *(void **)v962, *(void *)(v962 + 8));
          v964 = (os_log_s *)objc_claimAutoreleasedReturnValue(v963);
          v881 = v964;
          if (v964 && os_log_type_enabled(v964, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5705;
            v882 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActivePortsFo"
                   "rRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.";
            goto LABEL_1235;
          }

LABEL_1236:
          v965 = __cxa_allocate_exception(0x10uLL);
          *(void *)v965 = &off_4865A0;
          v965[2] = 1852797029;
        }

        uint64_t v949 = sub_138E8(13);
        id v950 = sub_8C7D4(1, *(void **)v949, *(void *)(v949 + 8));
        v951 = (os_log_s *)objc_claimAutoreleasedReturnValue(v950);
        v881 = v951;
        if (!v951 || !os_log_type_enabled(v951, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1236;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5701;
        v882 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.";
      }

LABEL_1235:
      _os_log_impl(&dword_0, v881, OS_LOG_TYPE_ERROR, v882, buf, 0x12u);
      goto LABEL_1236;
    }

    if (v18 != 1634629490)
    {
      if (v18 != 1634756195) {
        goto LABEL_409;
      }
      unsigned int v86 = *a5;
      if (v86 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
      {
        uint64_t v536 = sub_138E8(13);
        int v371 = 561211770;
        id v537 = sub_8C7D4(1, *(void **)v536, *(void *)(v536 + 8));
        v538 = (void *)objc_claimAutoreleasedReturnValue(v537);
        if (v538)
        {
          v372 = v538;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v539 = v1076[23];
            v540 = *(_BYTE **)v1076;
            unsigned int v541 = *a5;
            int v542 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v543 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v539 < 0) {
              v543 = v540;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5635;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v543;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v541;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v542;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_972;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

      if ((a3 | 4) != 4)
      {
        uint64_t v1015 = sub_138E8(13);
        id v1016 = sub_8C7D4(1, *(void **)v1015, *(void *)(v1015 + 8));
        v1017 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1016);
        v711 = v1017;
        if (v1017 && os_log_type_enabled(v1017, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5636;
          _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_1313;
      }

      v1060.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable( 0LL,  0LL,  &kCFTypeArrayCallBacks);
      LOWORD(v1060.__r_.__value_.__r.__words[1]) = 257;
      *(void *)buf = sub_273328(a1, a3, (unsigned int *)Mutable);
      *(void *)&buf[8] = v87;
      sub_E5784(v1058, *(void *)(a1 + 216) + 8LL);
      sub_E570C((uint64_t)v1076, (uint64_t)buf, (uint64_t)v1058);
      if (v1058[16]) {
        sub_13850((uint64_t)v1058);
      }
      if (!Mutable)
      {
        sub_268514((uint64_t)buf, a1, *(void **)(a1 + 120));
        sub_13888((uint64_t)&v1060, (uint64_t)buf);
        sub_13818((uint64_t)buf);
        goto LABEL_607;
      }

      int v88 = 1852793716;
      *(_DWORD *)std::string __p = 1852796517;
      memset(&__p[8], 0, 24);
      *(void *)&__p[32] = 0x756E64656175746FLL;
      *(_OWORD *)&v1074.__r_.__value_.__r.__words[1] = 0uLL;
      v1074.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1074.__r_.__value_.__l.__size_;
      *(void *)&v1073[8] = 0LL;
      *(void *)&v1073[16] = 0LL;
      *(void *)v1073 = &v1073[8];
      int v89 = *(_DWORD *)(a1 + 400);
      v1063.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1063.__r_.__value_.__l.__size_;
      *(_OWORD *)&v1063.__r_.__value_.__r.__words[1] = 0uLL;
      sub_27353C( (uint64_t)buf,  v1076,  &v1074,  (uint64_t)&v1076[16],  (uint64_t ***)v1073,  (uint64_t)&v1063,  (uint64_t)__p,  v89 != 0);
      sub_32C8C((void *)v1063.__r_.__value_.__l.__size_);
      sub_FF3B8(*(void **)&v1073[8]);
      sub_FF3B8((void *)v1074.__r_.__value_.__l.__size_);
      sub_6E1CC((uint64_t)&v1074, *(uint64_t **)(a1 + 112), (uint64_t)buf, &qword_492FB0, 0);
      switch(LODWORD(v1074.__r_.__value_.__l.__data_))
      {
        case 0:
          sub_273930((uint64_t)v1073, a1, (uint64_t *)&v1074.__r_.__value_.__l.__size_, &qword_492FB0);
          sub_13888((uint64_t)&v1060, (uint64_t)v1073);
          sub_13818((uint64_t)v1073);
          *(void *)v1073 = &v1074.__r_.__value_.__l.__size_;
          sub_135F74((void ***)v1073);
          sub_53068((uint64_t)buf);
LABEL_607:
          v308 = (uint64_t *)sub_138E8(2);
          if (sub_273D9C(*v308, v308[1]))
          {
            if (Mutable) {
              sub_2CA1C(v1073, *(unsigned int *)v1076);
            }
            else {
              sub_7D084(v1073, "null");
            }
            sub_148B3C(&v1074, "Returning active ports for category [", (std::string *)v1073);
            __n128 v328 = sub_148AE0((std::string *)buf, &v1074, "]:");
            sub_273DAC((uint64_t *)__p, (CFArrayRef *)&v1060, (uint64_t)buf, v328);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if ((v1073[23] & 0x80000000) != 0) {
              operator delete(*(void **)v1073);
            }
            for (iuint64_t i = *(void *)&__p[8]; (_BYTE *)ii != __p; iuint64_t i = *(void *)(ii + 8))
            {
              uint64_t v330 = sub_138E8(2);
              uint64_t v331 = sub_138E8(34);
              char v332 = 0;
              uint64_t v333 = 0LL;
              *(void *)buf = 0x100000002LL;
              uint64_t v334 = *(void *)(v330 + 8);
              do
              {
                uint64_t v335 = *(int *)&buf[4 * v333];
                char v336 = v332;
                if (((v334 & v335) != 0) != ((*(void *)(v331 + 8) & v335) != 0))
                {
                  if ((v334 & v335) == 0) {
                    uint64_t v330 = v331;
                  }
                  if ((*(void *)(v330 + 8) & 1) != 0) {
                    goto LABEL_677;
                  }
                  goto LABEL_683;
                }

                char v332 = 1;
                uint64_t v333 = 1LL;
              }

              while ((v336 & 1) == 0);
              if ((v334 & 1) == 0) {
                continue;
              }
LABEL_677:
              v337 = (os_log_s *)*(id *)v330;
              if (v337)
              {
                v338 = v337;
                if (os_log_type_enabled(v337, OS_LOG_TYPE_DEBUG))
                {
                  v339 = (void *)(ii + 16);
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 5661;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v339;
                  _os_log_impl(&dword_0, v338, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
                }
              }

LABEL_683:
              ;
            }

            sub_1532B4(__p);
          }

          if (v1060.__r_.__value_.__r.__words[0])
          {
            CFRetain(v1060.__r_.__value_.__l.__data_);
            std::string::size_type v340 = v1060.__r_.__value_.__r.__words[0];
          }

          else
          {
            std::string::size_type v340 = 0LL;
          }

          *(void *)a6 = v340;
          sub_32C8C(*(void **)&v1076[24]);
          v310 = &v1060;
LABEL_689:
          sub_13818((uint64_t)v310);
          goto LABEL_693;
        case 2:
          uint64_t v912 = sub_138E8(13);
          id v913 = sub_8C7D4(1, *(void **)v912, *(void *)(v912 + 8));
          v914 = (os_log_s *)objc_claimAutoreleasedReturnValue(v913);
          v447 = v914;
          if (!v914 || !os_log_type_enabled(v914, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1333;
          }
          *(_DWORD *)v1073 = 136315394;
          *(void *)&v1073[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v1073[12] = 1024;
          *(_DWORD *)&v1073[14] = 5650;
          v915 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAudioPl"
                 "ugInPropertyActivePortsForCategory.)";
          break;
        case 1:
          uint64_t v444 = sub_138E8(13);
          id v445 = sub_8C7D4(1, *(void **)v444, *(void *)(v444 + 8));
          v446 = (os_log_s *)objc_claimAutoreleasedReturnValue(v445);
          v447 = v446;
          if (v446 && os_log_type_enabled(v446, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v1073 = 136315394;
            *(void *)&v1073[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v1073[12] = 1024;
            *(_DWORD *)&v1073[14] = 5650;
            _os_log_impl( &dword_0,  v447,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPlugIn PropertyActivePortsForCategory.)",  v1073,  0x12u);
            int v88 = 1852797556;
          }

          else
          {
            int v88 = 1852797556;
          }

LABEL_1333:
          v1051 = __cxa_allocate_exception(0x10uLL);
          *(void *)v1051 = &off_4865A0;
          v1051[2] = v88;
        default:
          uint64_t v916 = sub_138E8(13);
          int v88 = 2003329396;
          id v917 = sub_8C7D4(1, *(void **)v916, *(void *)(v916 + 8));
          v918 = (os_log_s *)objc_claimAutoreleasedReturnValue(v917);
          v447 = v918;
          if (!v918 || !os_log_type_enabled(v918, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1333;
          }
          *(_DWORD *)v1073 = 136315394;
          *(void *)&v1073[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v1073[12] = 1024;
          *(_DWORD *)&v1073[14] = 5650;
          v915 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInPropertyAc"
                 "tivePortsForCategory.)";
          break;
      }

      _os_log_impl(&dword_0, v447, OS_LOG_TYPE_ERROR, v915, v1073, 0x12u);
      goto LABEL_1333;
    }

    sub_275024((os_signpost_id_t *)v1053);
    unsigned int v161 = *a5;
    if (v161 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
    {
      uint64_t v718 = sub_138E8(13);
      id v719 = sub_8C7D4(1, *(void **)v718, *(void *)(v718 + 8));
      v720 = (void *)objc_claimAutoreleasedReturnValue(v719);
      v721 = v720;
      if (v720)
      {
        v722 = v720;
        if (os_log_type_enabled(v722, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = a2[2];
          sub_613AC((uint64_t)v1076, (unsigned int *)__p);
          int v723 = v1076[23];
          v724 = *(_BYTE **)v1076;
          unsigned int v725 = *a5;
          int v726 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
          v727 = v1076;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v723 < 0) {
            v727 = v724;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5582;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v727;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v725;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v726;
          _os_log_impl( &dword_0,  v722,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if ((v1076[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1076);
          }
        }
      }

      v728 = __cxa_allocate_exception(0x10uLL);
      *(void *)v728 = &off_4865A0;
      v728[2] = 561211770;
    }

    if ((a3 | 8) != 8)
    {
      uint64_t v1038 = sub_138E8(13);
      id v1039 = sub_8C7D4(1, *(void **)v1038, *(void *)(v1038 + 8));
      v1040 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1039);
      v1041 = v1040;
      if (v1040 && os_log_type_enabled(v1040, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5583;
        _os_log_impl( &dword_0,  v1041,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      v1042 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v1042, "Precondition failure.");
    }

    if (Mutable)
    {
      std::string::value_type v162 = 0;
    }

    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      std::string::value_type v162 = 1;
    }

    theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    theDict.__r_.__value_.__s.__data_[8] = v162;
    theDict.__r_.__value_.__s.__data_[9] = v162;
    if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
    {
      uint64_t v759 = sub_138E8(13);
      id v760 = sub_8C7D4(1, *(void **)v759, *(void *)(v759 + 8));
      v761 = (os_log_s *)objc_claimAutoreleasedReturnValue(v760);
      v762 = v761;
      if (!v761 || !os_log_type_enabled(v761, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1128;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5591;
      v763 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"routable ports"))
    {
      uint64_t v794 = sub_138E8(13);
      id v795 = sub_8C7D4(1, *(void **)v794, *(void *)(v794 + 8));
      v796 = (os_log_s *)objc_claimAutoreleasedReturnValue(v795);
      v762 = v796;
      if (!v796 || !os_log_type_enabled(v796, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1128;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5595;
      v763 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"unroutable ports"))
    {
      uint64_t v807 = sub_138E8(13);
      id v808 = sub_8C7D4(1, *(void **)v807, *(void *)(v807 + 8));
      v809 = (os_log_s *)objc_claimAutoreleasedReturnValue(v808);
      v762 = v809;
      if (!v809 || !os_log_type_enabled(v809, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1128;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5599;
      v763 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"preferred sub-ports"))
    {
      uint64_t v813 = sub_138E8(13);
      id v814 = sub_8C7D4(1, *(void **)v813, *(void *)(v813 + 8));
      v815 = (os_log_s *)objc_claimAutoreleasedReturnValue(v814);
      v762 = v815;
      if (!v815 || !os_log_type_enabled(v815, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1128;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5603;
      v763 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.";
    }

    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"active data sources"))
    {
      uint64_t v819 = sub_138E8(13);
      id v820 = sub_8C7D4(1, *(void **)v819, *(void *)(v819 + 8));
      v821 = (os_log_s *)objc_claimAutoreleasedReturnValue(v820);
      v762 = v821;
      if (!v821 || !os_log_type_enabled(v821, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1128;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5607;
      v763 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.";
    }

    else
    {
      if (!CFDictionaryContainsKey( (CFDictionaryRef)theDict.__r_.__value_.__l.__data_,  @"voice processing configuration"))
      {
        if (!CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"sub-port preferences"))
        {
          sub_49A70(buf, a1, (const __CFDictionary **)&theDict, 0, 1);
          if (v1123) {
            v293 = (uint64_t *)v1122;
          }
          else {
            v293 = &qword_492FB0;
          }
          sub_E1FDC((uint64_t)&v1074, v293);
          sub_6E1CC((uint64_t)v1076, *(uint64_t **)(a1 + 112), (uint64_t)buf, &v1074, 1);
          switch(*(_DWORD *)v1076)
          {
            case 0:
              sub_273930((uint64_t)&cf, a1, (uint64_t *)&v1076[8], &v1074);
              v294 = (uint64_t *)sub_138E8(2);
              if (sub_273D9C(*v294, v294[1]))
              {
                sub_2DB6FC(&v1060, (unsigned int *)buf);
                sub_148B3C(&v1063, "Returning active non-wireless ports for category/mode ", &v1060);
                __n128 v295 = sub_148AE0((std::string *)__p, &v1063, ":");
                sub_273DAC((uint64_t *)v1073, (CFArrayRef *)&cf, (uint64_t)__p, v295);
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                for (juint64_t j = *(void *)&v1073[8]; (_BYTE *)jj != v1073; juint64_t j = *(void *)(jj + 8))
                {
                  uint64_t v297 = sub_138E8(2);
                  uint64_t v298 = sub_138E8(34);
                  char v299 = 0;
                  uint64_t v300 = 0LL;
                  *(void *)std::string __p = 0x100000002LL;
                  uint64_t v301 = *(void *)(v297 + 8);
                  do
                  {
                    uint64_t v302 = *(int *)&__p[4 * v300];
                    char v303 = v299;
                    if (((v301 & v302) != 0) != ((*(void *)(v298 + 8) & v302) != 0))
                    {
                      if ((v301 & v302) == 0) {
                        uint64_t v297 = v298;
                      }
                      if ((*(void *)(v297 + 8) & 1) != 0) {
                        goto LABEL_596;
                      }
                      goto LABEL_602;
                    }

                    char v299 = 1;
                    uint64_t v300 = 1LL;
                  }

                  while ((v303 & 1) == 0);
                  if ((v301 & 1) == 0) {
                    continue;
                  }
LABEL_596:
                  v304 = (os_log_s *)*(id *)v297;
                  if (v304)
                  {
                    v305 = v304;
                    if (os_log_type_enabled(v304, OS_LOG_TYPE_DEBUG))
                    {
                      v306 = (void *)(jj + 16);
                      *(_DWORD *)std::string __p = 136315650;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 5627;
                      *(_WORD *)&__p[18] = 2080;
                      *(void *)&__p[20] = v306;
                      _os_log_impl(&dword_0, v305, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", __p, 0x1Cu);
                    }
                  }

LABEL_602:
                  ;
                }

                sub_1532B4(v1073);
              }

              if (cf)
              {
                CFRetain(cf);
                CFTypeRef v307 = cf;
              }

              else
              {
                CFTypeRef v307 = 0LL;
              }

              *(void *)a6 = v307;
              sub_13818((uint64_t)&cf);
              *(void *)std::string __p = &v1076[8];
              sub_135F74((void ***)__p);
              sub_734C4((void *)v1074.__r_.__value_.__l.__size_);
              sub_52EF0((uint64_t)buf);
              sub_13850((uint64_t)&theDict);
              sub_275238((os_signpost_id_t *)v1053);
              goto LABEL_693;
            case 2:
              uint64_t v860 = sub_138E8(13);
              int v421 = 1852793716;
              id v861 = sub_8C7D4(1, *(void **)v860, *(void *)(v860 + 8));
              v862 = (os_log_s *)objc_claimAutoreleasedReturnValue(v861);
              v420 = v862;
              if (!v862 || !os_log_type_enabled(v862, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1144;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 5622;
              v863 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAud"
                     "ioPlugInPropertyActiveNonWirelessPortsForRouteConfiguration.)";
              break;
            case 1:
              uint64_t v417 = sub_138E8(13);
              id v418 = sub_8C7D4(1, *(void **)v417, *(void *)(v417 + 8));
              v419 = (os_log_s *)objc_claimAutoreleasedReturnValue(v418);
              v420 = v419;
              int v421 = 1852797556;
              if (v419 && os_log_type_enabled(v419, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 5622;
                _os_log_impl( &dword_0,  v420,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPl ugInPropertyActiveNonWirelessPortsForRouteConfiguration.)",  __p,  0x12u);
                int v421 = 1852797556;
              }

LABEL_1144:
              v867 = __cxa_allocate_exception(0x10uLL);
              *(void *)v867 = &off_4865A0;
              v867[2] = v421;
            default:
              uint64_t v864 = sub_138E8(13);
              int v421 = 2003329396;
              id v865 = sub_8C7D4(1, *(void **)v864, *(void *)(v864 + 8));
              v866 = (os_log_s *)objc_claimAutoreleasedReturnValue(v865);
              v420 = v866;
              if (!v866 || !os_log_type_enabled(v866, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1144;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 5622;
              v863 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInProper"
                     "tyActiveNonWirelessPortsForRouteConfiguration.)";
              break;
          }

          _os_log_impl(&dword_0, v420, OS_LOG_TYPE_ERROR, v863, __p, 0x12u);
          goto LABEL_1144;
        }

        uint64_t v848 = sub_138E8(13);
        id v849 = sub_8C7D4(1, *(void **)v848, *(void *)(v848 + 8));
        v850 = (os_log_s *)objc_claimAutoreleasedReturnValue(v849);
        v762 = v850;
        if (v850 && os_log_type_enabled(v850, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5615;
          v763 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonWirele"
                 "ssPortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.";
          goto LABEL_1127;
        }

LABEL_1128:
        v851 = __cxa_allocate_exception(0x10uLL);
        *(void *)v851 = &off_4865A0;
        v851[2] = 1852797029;
      }

      uint64_t v841 = sub_138E8(13);
      id v842 = sub_8C7D4(1, *(void **)v841, *(void *)(v841 + 8));
      v843 = (os_log_s *)objc_claimAutoreleasedReturnValue(v842);
      v762 = v843;
      if (!v843 || !os_log_type_enabled(v843, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1128;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5611;
      v763 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.";
    }

LABEL_1127:
    _os_log_impl(&dword_0, v762, OS_LOG_TYPE_ERROR, v763, buf, 0x12u);
    goto LABEL_1128;
  }

  if (v18 <= 1668575345)
  {
    if (v18 > 1667329391)
    {
      if (v18 != 1667329392)
      {
        if (v18 != 1668310627)
        {
          if (v18 != 1668313699) {
            goto LABEL_409;
          }
          sub_277674(&v1054);
          unsigned int v68 = *a5;
          if (v68 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
          {
            uint64_t v697 = sub_138E8(13);
            id v698 = sub_8C7D4(1, *(void **)v697, *(void *)(v697 + 8));
            v699 = (void *)objc_claimAutoreleasedReturnValue(v698);
            v700 = v699;
            if (v699)
            {
              v701 = v699;
              if (os_log_type_enabled(v701, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = a2[2];
                sub_613AC((uint64_t)v1076, (unsigned int *)__p);
                int v702 = v1076[23];
                v703 = *(_BYTE **)v1076;
                unsigned int v704 = *a5;
                int v705 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
                v706 = v1076;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v702 < 0) {
                  v706 = v703;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6132;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v706;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)&buf[30] = v704;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v705;
                _os_log_impl( &dword_0,  v701,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa ssed: %u; required: %u).",
                  buf,
                  0x28u);
                if ((v1076[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v1076);
                }
              }
            }

            v707 = __cxa_allocate_exception(0x10uLL);
            *(void *)v707 = &off_4865A0;
            v707[2] = 561211770;
          }

          if ((a3 | 8) != 8)
          {
            uint64_t v1033 = sub_138E8(13);
            id v1034 = sub_8C7D4(1, *(void **)v1033, *(void *)(v1033 + 8));
            v1035 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1034);
            v1036 = v1035;
            if (v1035 && os_log_type_enabled(v1035, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6133;
              _os_log_impl( &dword_0,  v1036,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            v1037 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v1037, "Precondition failure.");
          }

          CFTypeRef cf = Mutable;
          __int16 v1062 = 0;
          if (!Mutable) {
            goto LABEL_414;
          }
          if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
          {
            uint64_t v873 = sub_138E8(13);
            id v874 = sub_8C7D4(1, *(void **)v873, *(void *)(v873 + 8));
            v875 = (os_log_s *)objc_claimAutoreleasedReturnValue(v874);
            v876 = v875;
            if (!v875 || !os_log_type_enabled(v875, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1231;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6142;
            v877 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.";
          }

          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"routable ports"))
          {
            uint64_t v891 = sub_138E8(13);
            id v892 = sub_8C7D4(1, *(void **)v891, *(void *)(v891 + 8));
            v893 = (os_log_s *)objc_claimAutoreleasedReturnValue(v892);
            v876 = v893;
            if (!v893 || !os_log_type_enabled(v893, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1231;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6146;
            v877 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.";
          }

          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"unroutable ports"))
          {
            uint64_t v906 = sub_138E8(13);
            id v907 = sub_8C7D4(1, *(void **)v906, *(void *)(v906 + 8));
            v908 = (os_log_s *)objc_claimAutoreleasedReturnValue(v907);
            v876 = v908;
            if (!v908 || !os_log_type_enabled(v908, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1231;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6150;
            v877 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.";
          }

          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"preferred sub-ports"))
          {
            uint64_t v925 = sub_138E8(13);
            id v926 = sub_8C7D4(1, *(void **)v925, *(void *)(v925 + 8));
            v927 = (os_log_s *)objc_claimAutoreleasedReturnValue(v926);
            v876 = v927;
            if (!v927 || !os_log_type_enabled(v927, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1231;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6154;
            v877 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.";
          }

          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"active data sources"))
          {
            uint64_t v934 = sub_138E8(13);
            id v935 = sub_8C7D4(1, *(void **)v934, *(void *)(v934 + 8));
            v936 = (os_log_s *)objc_claimAutoreleasedReturnValue(v935);
            v876 = v936;
            if (!v936 || !os_log_type_enabled(v936, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1231;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6158;
            v877 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.";
          }

          else
          {
            if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"voice processing configuration"))
            {
              if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"sub-port preferences"))
              {
                if (cf)
                {
                  sub_49A70(buf, a1, (const __CFDictionary **)&cf, 0, 1);
                  goto LABEL_415;
                }

LABEL_414:
                sub_75418(buf, a1);
LABEL_415:
                sub_52CCC((uint64_t)v1076, (uint64_t)buf);
                sub_52EF0((uint64_t)buf);
                memset(buf, 0, 24);
                *(_DWORD *)&buf[40] = 3;
                v1088 = 0LL;
                *(void *)&buf[56] = 0LL;
                *(void *)&buf[48] = &buf[56];
                uint64_t v1090 = 0LL;
                LODWORD(v1089) = 44731048;
                *(_DWORD *)&_BYTE buf[24] = 1986295651;
                *(_DWORD *)&_BYTE buf[28] = *(_DWORD *)&v1076[4];
                buf[32] = 1;
                sub_135FE8((uint64_t)&v1074, *(uint64_t **)(a1 + 112), (uint64_t)v1076, (uint64_t)buf);
                switch(LODWORD(v1074.__r_.__value_.__l.__data_))
                {
                  case 0:
                    sub_27703C((void *)a2[1], &v1074.__r_.__value_.__l.__size_);
                    memset(__p, 0, 24);
                    strcpy(&__p[24], "cwdv");
                    __p[32] = 0;
                    LODWORD(v1067) = 3;
                    v1069 = 0LL;
                    uint64_t v1070 = 0LL;
                    v1068 = &v1069;
                    CFTypeRef v1072 = 0LL;
                    int v1071 = 44731050;
                    sub_252EDC((uint64_t *)v1073, a1, (uint64_t)&v1074.__r_.__value_.__l.__size_, (uint64_t)__p);
                    sub_A0DB0((uint64_t)__p);
                    sub_136E0((uint64_t)v1053, *(void **)v1073, &v1073[8]);
                    uint64_t v205 = sub_138E8(2);
                    uint64_t v206 = sub_138E8(34);
                    char v207 = 0;
                    uint64_t v208 = 0LL;
                    *(void *)std::string __p = 0x100000002LL;
                    uint64_t v209 = *(void *)(v205 + 8);
                    while (1)
                    {
                      uint64_t v210 = *(int *)&__p[4 * v208];
                      char v211 = v207;
                      if (((v209 & v210) != 0) != ((*(void *)(v206 + 8) & v210) != 0)) {
                        break;
                      }
                      char v207 = 1;
                      uint64_t v208 = 1LL;
                      if ((v211 & 1) != 0) {
                        goto LABEL_489;
                      }
                    }

                    if ((v209 & v210) == 0) {
                      uint64_t v205 = v206;
                    }
LABEL_489:
                    id v250 = sub_8C7D4(6, *(void **)v205, *(void *)(v205 + 8));
                    v251 = (void *)objc_claimAutoreleasedReturnValue(v250);
                    v252 = v251;
                    if (v251)
                    {
                      v253 = v251;
                      if (os_log_type_enabled(v253, OS_LOG_TYPE_DEBUG))
                      {
                        v254 = &v1063;
                        sub_2DB6FC(&v1063, (unsigned int *)v1076);
                        if ((v1063.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                          v254 = (std::string *)v1063.__r_.__value_.__r.__words[0];
                        }
                        sub_2CA1C(&v1060, a2[1]);
                        int v255 = (char)v1060.__r_.__value_.__s.__size_;
                        std::string::size_type v256 = v1060.__r_.__value_.__r.__words[0];
                        sub_151A78(&theDict, (const __CFArray *)v1053[0]);
                        v257 = &v1060;
                        if (v255 < 0) {
                          v257 = (std::string *)v256;
                        }
                        if ((theDict.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                          v258 = &theDict;
                        }
                        else {
                          v258 = (std::string *)theDict.__r_.__value_.__r.__words[0];
                        }
                        *(_DWORD *)std::string __p = 136316162;
                        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                        *(_WORD *)&__p[12] = 1024;
                        *(_DWORD *)&__p[14] = 6187;
                        *(_WORD *)&__p[18] = 2080;
                        *(void *)&__p[20] = v254;
                        *(_WORD *)&__p[28] = 2080;
                        *(void *)&__p[30] = v257;
                        *(_WORD *)&__p[38] = 2080;
                        v1067 = v258;
                        _os_log_impl( &dword_0,  v253,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning for category/mode: %s; scope: %s; connected ports: %s",
                          __p,
                          0x30u);
                      }
                    }

                    if (v1053[0])
                    {
                      CFRetain(v1053[0]);
                      CFTypeRef v259 = v1053[0];
                    }

                    else
                    {
                      CFTypeRef v259 = 0LL;
                    }

                    *(void *)a6 = v259;
                    sub_13818((uint64_t)v1053);
                    sub_32C8C(*(void **)&v1073[8]);
                    sub_85B80((uint64_t *)&v1074.__r_.__value_.__l.__size_);
                    sub_A0DB0((uint64_t)buf);
                    sub_53068((uint64_t)v1076);
                    sub_13850((uint64_t)&cf);
                    sub_277888(&v1054);
                    goto LABEL_693;
                  case 2:
                    uint64_t v825 = sub_138E8(13);
                    int v406 = 1852793716;
                    id v826 = sub_8C7D4(1, *(void **)v825, *(void *)(v825 + 8));
                    v827 = (os_log_s *)objc_claimAutoreleasedReturnValue(v826);
                    v405 = v827;
                    if (!v827 || !os_log_type_enabled(v827, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_1107;
                    }
                    *(_DWORD *)std::string __p = 136315394;
                    *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 6178;
                    v828 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirt"
                           "ualAudioPlugInPropertyConnectedPortsForCategory.)";
                    break;
                  case 1:
                    uint64_t v402 = sub_138E8(13);
                    id v403 = sub_8C7D4(1, *(void **)v402, *(void *)(v402 + 8));
                    v404 = (os_log_s *)objc_claimAutoreleasedReturnValue(v403);
                    v405 = v404;
                    int v406 = 1852797556;
                    if (v404 && os_log_type_enabled(v404, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)std::string __p = 136315394;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 6178;
                      _os_log_impl( &dword_0,  v405,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualA udioPlugInPropertyConnectedPortsForCategory.)",  __p,  0x12u);
                      int v406 = 1852797556;
                    }

LABEL_1107:
                    v832 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v832 = &off_4865A0;
                    v832[2] = v406;
                  default:
                    uint64_t v829 = sub_138E8(13);
                    int v406 = 2003329396;
                    id v830 = sub_8C7D4(1, *(void **)v829, *(void *)(v829 + 8));
                    v831 = (os_log_s *)objc_claimAutoreleasedReturnValue(v830);
                    v405 = v831;
                    if (!v831 || !os_log_type_enabled(v831, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_1107;
                    }
                    *(_DWORD *)std::string __p = 136315394;
                    *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 6178;
                    v828 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugIn"
                           "PropertyConnectedPortsForCategory.)";
                    break;
                }

                _os_log_impl(&dword_0, v405, OS_LOG_TYPE_ERROR, v828, __p, 0x12u);
                goto LABEL_1107;
              }

              uint64_t v958 = sub_138E8(13);
              id v959 = sub_8C7D4(1, *(void **)v958, *(void *)(v958 + 8));
              v960 = (os_log_s *)objc_claimAutoreleasedReturnValue(v959);
              v876 = v960;
              if (v960 && os_log_type_enabled(v960, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6166;
                v877 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyConnected"
                       "PortsForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.";
                goto LABEL_1230;
              }

LABEL_1231:
              v961 = __cxa_allocate_exception(0x10uLL);
              *(void *)v961 = &off_4865A0;
              v961[2] = 1852797029;
            }

            uint64_t v946 = sub_138E8(13);
            id v947 = sub_8C7D4(1, *(void **)v946, *(void *)(v946 + 8));
            v948 = (os_log_s *)objc_claimAutoreleasedReturnValue(v947);
            v876 = v948;
            if (!v948 || !os_log_type_enabled(v948, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1231;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6162;
            v877 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.";
          }

LABEL_1230:
          _os_log_impl(&dword_0, v876, OS_LOG_TYPE_ERROR, v877, buf, 0x12u);
          goto LABEL_1231;
        }

        unsigned int v164 = *a5;
        if (v164 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
        {
          uint64_t v648 = sub_138E8(13);
          int v371 = 561211770;
          id v649 = sub_8C7D4(1, *(void **)v648, *(void *)(v648 + 8));
          v650 = (void *)objc_claimAutoreleasedReturnValue(v649);
          if (v650)
          {
            v372 = v650;
            if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = a2[2];
              sub_613AC((uint64_t)v1076, (unsigned int *)__p);
              int v651 = v1076[23];
              v652 = *(_BYTE **)v1076;
              unsigned int v653 = *a5;
              int v654 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
              v655 = v1076;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v651 < 0) {
                v655 = v652;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6101;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v655;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v653;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v654;
              v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_972;
            }

            goto LABEL_975;
          }

          goto LABEL_741;
        }

        if ((a3 | 4) != 4)
        {
          uint64_t v1030 = sub_138E8(13);
          id v1031 = sub_8C7D4(1, *(void **)v1030, *(void *)(v1030 + 8));
          v1032 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1031);
          v711 = v1032;
          if (v1032 && os_log_type_enabled(v1032, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6102;
            _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          goto LABEL_1313;
        }

        *(void *)buf = sub_273328(a1, a3, (unsigned int *)Mutable);
        *(void *)&buf[8] = v165;
        sub_E5784(v1055, *(void *)(a1 + 216) + 8LL);
        sub_E570C((uint64_t)&v1074, (uint64_t)buf, (uint64_t)v1055);
        if (v1055[16]) {
          sub_13850((uint64_t)v1055);
        }
        int v166 = 1852793716;
        *(_OWORD *)buf = *(_OWORD *)&v1074.__r_.__value_.__l.__data_;
        *(void *)&_BYTE buf[24] = 0LL;
        *(void *)&buf[16] = &buf[24];
        *(void *)&buf[56] = 0LL;
        *(void *)&buf[48] = 0LL;
        *(void *)&buf[32] = 0LL;
        *(void *)&buf[40] = &buf[48];
        uint64_t v1089 = 0LL;
        v1088 = &v1089;
        uint64_t v1093 = 0LL;
        uint64_t v1092 = 0LL;
        uint64_t v1090 = 0LL;
        v1091 = &v1092;
        uint64_t v1096 = 0LL;
        uint64_t v1095 = 0LL;
        v1094 = &v1095;
        char v1097 = 0;
        char v1098 = 0;
        int v1099 = 1668248944;
        int v1100 = 1852796517;
        uint64_t v1102 = 0LL;
        uint64_t v1101 = 0LL;
        uint64_t v1103 = 0LL;
        uint64_t v1104 = 0x756E64656175746FLL;
        __int128 v1105 = 0u;
        __int128 v1106 = 0u;
        __int128 v1107 = 0u;
        __int128 v1108 = 0u;
        __int128 v1109 = 0u;
        uint64_t v1110 = 1065353216LL;
        __int128 v1111 = 0u;
        __int128 v1112 = 0u;
        uint64_t v1113 = 1065353216LL;
        __int128 v1115 = 0u;
        __int128 v1114 = 0u;
        uint64_t v1116 = 1065353216LL;
        char v1117 = 0;
        char v1118 = 0;
        char v1120 = 0;
        char v1121 = 0;
        int v1119 = 0;
        memset(v1076, 0, 24);
        LODWORD(v1078) = 3;
        uint64_t v1081 = 0LL;
        uint64_t v1080 = 0LL;
        v1079 = &v1080;
        uint64_t v1083 = 0LL;
        int v1082 = 44731048;
        *(_DWORD *)&v1076[24] = 1986295651;
        *(_DWORD *)&v1076[28] = HIDWORD(v1074.__r_.__value_.__r.__words[0]);
        v1076[32] = 1;
        sub_135FE8((uint64_t)v1073, *(uint64_t **)(a1 + 112), (uint64_t)buf, (uint64_t)v1076);
        switch(*(_DWORD *)v1073)
        {
          case 0:
            sub_27703C((void *)a2[1], &v1073[8]);
            memset(__p, 0, 24);
            strcpy(&__p[24], "cwdv");
            __p[32] = 0;
            LODWORD(v1067) = 3;
            v1069 = 0LL;
            uint64_t v1070 = 0LL;
            v1068 = &v1069;
            CFTypeRef v1072 = 0LL;
            int v1071 = 44731050;
            sub_252EDC((uint64_t *)&v1063, a1, (uint64_t)&v1073[8], (uint64_t)__p);
            sub_A0DB0((uint64_t)__p);
            sub_136E0((uint64_t)&cf, v1063.__r_.__value_.__l.__data_, &v1063.__r_.__value_.__l.__size_);
            uint64_t v167 = sub_138E8(2);
            uint64_t v168 = sub_138E8(34);
            char v169 = 0;
            uint64_t v170 = 0LL;
            *(void *)std::string __p = 0x100000002LL;
            uint64_t v171 = *(void *)(v167 + 8);
            while (1)
            {
              uint64_t v172 = *(int *)&__p[4 * v170];
              char v173 = v169;
              if (((v171 & v172) != 0) != ((*(void *)(v168 + 8) & v172) != 0)) {
                break;
              }
              char v169 = 1;
              uint64_t v170 = 1LL;
              if ((v173 & 1) != 0) {
                goto LABEL_473;
              }
            }

            if ((v171 & v172) == 0) {
              uint64_t v167 = v168;
            }
LABEL_473:
            id v241 = sub_8C7D4(6, *(void **)v167, *(void *)(v167 + 8));
            v242 = (void *)objc_claimAutoreleasedReturnValue(v241);
            v243 = v242;
            if (v242)
            {
              v244 = v242;
              if (os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(&v1060, LODWORD(v1074.__r_.__value_.__l.__data_));
                int v245 = (char)v1060.__r_.__value_.__s.__size_;
                std::string::size_type v246 = v1060.__r_.__value_.__r.__words[0];
                sub_151A78(&theDict, (const __CFArray *)cf);
                v247 = &v1060;
                if (v245 < 0) {
                  v247 = (std::string *)v246;
                }
                if ((theDict.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v248 = &theDict;
                }
                else {
                  v248 = (std::string *)theDict.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string __p = 136315906;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 6122;
                *(_WORD *)&__p[18] = 2080;
                *(void *)&__p[20] = v247;
                *(_WORD *)&__p[28] = 2080;
                *(void *)&__p[30] = v248;
                _os_log_impl( &dword_0,  v244,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning connected ports for category '%s': %s",  __p,  0x26u);
              }
            }

            if (cf)
            {
              CFRetain(cf);
              CFTypeRef v249 = cf;
            }

            else
            {
              CFTypeRef v249 = 0LL;
            }

            *(void *)a6 = v249;
            sub_13818((uint64_t)&cf);
            sub_32C8C((void *)v1063.__r_.__value_.__l.__size_);
LABEL_629:
            sub_85B80((uint64_t *)&v1073[8]);
            sub_A0DB0((uint64_t)v1076);
            sub_53068((uint64_t)buf);
            v309 = v1075;
            goto LABEL_630;
          case 2:
            uint64_t v787 = sub_138E8(13);
            id v788 = sub_8C7D4(1, *(void **)v787, *(void *)(v787 + 8));
            v789 = (os_log_s *)objc_claimAutoreleasedReturnValue(v788);
            v397 = v789;
            if (!v789 || !os_log_type_enabled(v789, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1329;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 6113;
            v790 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAudio"
                   "PlugInPropertyConnectedPortsForCategory.)";
            break;
          case 1:
            uint64_t v394 = sub_138E8(13);
            id v395 = sub_8C7D4(1, *(void **)v394, *(void *)(v394 + 8));
            v396 = (os_log_s *)objc_claimAutoreleasedReturnValue(v395);
            v397 = v396;
            if (v396 && os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 6113;
              _os_log_impl( &dword_0,  v397,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPlug InPropertyConnectedPortsForCategory.)",  __p,  0x12u);
              int v166 = 1852797556;
            }

            else
            {
              int v166 = 1852797556;
            }

LABEL_1329:
            v1049 = __cxa_allocate_exception(0x10uLL);
            *(void *)v1049 = &off_4865A0;
            v1049[2] = v166;
          default:
            uint64_t v791 = sub_138E8(13);
            int v166 = 2003329396;
            id v792 = sub_8C7D4(1, *(void **)v791, *(void *)(v791 + 8));
            v793 = (os_log_s *)objc_claimAutoreleasedReturnValue(v792);
            v397 = v793;
            if (!v793 || !os_log_type_enabled(v793, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1329;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 6113;
            v790 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInProperty"
                   "ConnectedPortsForCategory.)";
            break;
        }

        _os_log_impl(&dword_0, v397, OS_LOG_TYPE_ERROR, v790, __p, 0x12u);
        goto LABEL_1329;
      }

LABEL_420:
          sub_75418(buf, a1);
LABEL_421:
          sub_52CCC((uint64_t)v1076, (uint64_t)buf);
          sub_52EF0((uint64_t)buf);
          memset(buf, 0, 24);
          *(_DWORD *)&buf[40] = 3;
          v1088 = 0LL;
          *(void *)&buf[56] = 0LL;
          *(void *)&buf[48] = &buf[56];
          uint64_t v1090 = 0LL;
          LODWORD(v1089) = 44698266;
          *(_DWORD *)&_BYTE buf[24] = 1986295651;
          *(_DWORD *)&_BYTE buf[28] = *(_DWORD *)&v1076[4];
          buf[32] = 1;
          sub_135FE8((uint64_t)&v1074, *(uint64_t **)(a1 + 112), (uint64_t)v1076, (uint64_t)buf);
          switch(LODWORD(v1074.__r_.__value_.__l.__data_))
          {
            case 0:
              sub_27703C((void *)0x6F757470, &v1074.__r_.__value_.__l.__size_);
              theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable( 0LL,  0LL,  &kCFTypeArrayCallBacks);
              LOWORD(theDict.__r_.__value_.__r.__words[1]) = 257;
              sub_B8E40((uint64_t *)v1073, (uint64_t)&v1074.__r_.__value_.__l.__size_, "", 5934);
              for (uint64_t kk = *(void *)&v1073[8]; (_BYTE *)kk != v1073; uint64_t kk = *(void *)(kk + 8))
              {
                uint64_t v213 = *(void *)(kk + 16);
                memset(__p, 0, 24);
                strcpy(&__p[24], "cwdv");
                __p[32] = 0;
                LODWORD(v1067) = 3;
                v1069 = 0LL;
                uint64_t v1070 = 0LL;
                v1068 = &v1069;
                CFTypeRef v1072 = 0LL;
                int v1071 = 44731050;
                int v214 = sub_578E8(*(void *)(a1 + 128), v213, (uint64_t)__p);
                sub_1378C((uint64_t)&theDict, v214);
                if (v1072) {
                  CFRelease(v1072);
                }
                sub_32C8C(v1069);
                if (*(void *)__p)
                {
                  *(void *)&__p[8] = *(void *)__p;
                  operator delete(*(void **)__p);
                }
              }

              sub_1BB88((uint64_t *)v1073);
              uint64_t v215 = sub_138E8(2);
              uint64_t v216 = sub_138E8(34);
              char v217 = 0;
              uint64_t v218 = 0LL;
              *(void *)std::string __p = 0x100000002LL;
              uint64_t v219 = *(void *)(v215 + 8);
              while (1)
              {
                uint64_t v220 = *(int *)&__p[4 * v218];
                char v221 = v217;
                if (((v219 & v220) != 0) != ((*(void *)(v216 + 8) & v220) != 0)) {
                  break;
                }
                char v217 = 1;
                uint64_t v218 = 1LL;
                if ((v221 & 1) != 0) {
                  goto LABEL_525;
                }
              }

              if ((v219 & v220) == 0) {
                uint64_t v215 = v216;
              }
LABEL_525:
              id v269 = sub_8C7D4(6, *(void **)v215, *(void *)(v215 + 8));
              v270 = (void *)objc_claimAutoreleasedReturnValue(v269);
              v271 = v270;
              if (v270)
              {
                v272 = v270;
                if (os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG))
                {
                  sub_2CA1C(v1073, *(unsigned int *)v1076);
                  int v273 = v1073[23];
                  v274 = *(_BYTE **)v1073;
                  sub_151A78(&v1063, (const __CFArray *)theDict.__r_.__value_.__l.__data_);
                  v275 = v1073;
                  if (v273 < 0) {
                    v275 = v274;
                  }
                  if ((v1063.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v276 = &v1063;
                  }
                  else {
                    v276 = (std::string *)v1063.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)std::string __p = 136315906;
                  *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 5941;
                  *(_WORD *)&__p[18] = 2080;
                  *(void *)&__p[20] = v275;
                  *(_WORD *)&__p[28] = 2080;
                  *(void *)&__p[30] = v276;
                  _os_log_impl( &dword_0,  v272,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning built-in ports for category '%s': %s",  __p,  0x26u);
                  if ((v1073[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v1073);
                  }
                }
              }

              if (theDict.__r_.__value_.__r.__words[0])
              {
                CFRetain(theDict.__r_.__value_.__l.__data_);
                std::string::size_type v277 = theDict.__r_.__value_.__r.__words[0];
              }

              else
              {
                std::string::size_type v277 = 0LL;
              }

              *(void *)a6 = v277;
              sub_13818((uint64_t)&theDict);
              sub_85B80((uint64_t *)&v1074.__r_.__value_.__l.__size_);
              sub_A0DB0((uint64_t)buf);
              sub_53068((uint64_t)v1076);
              sub_13850((uint64_t)&v1060);
              sub_277444((os_signpost_id_t *)&cf);
              goto LABEL_693;
            case 2:
              uint64_t v833 = sub_138E8(13);
              int v411 = 1852793716;
              id v834 = sub_8C7D4(1, *(void **)v833, *(void *)(v833 + 8));
              v835 = (os_log_s *)objc_claimAutoreleasedReturnValue(v834);
              v410 = v835;
              if (!v835 || !os_log_type_enabled(v835, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1115;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 5929;
              v836 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAud"
                     "ioPlugInPropertyBuiltInPortsForCategory.)";
              break;
            case 1:
              uint64_t v407 = sub_138E8(13);
              id v408 = sub_8C7D4(1, *(void **)v407, *(void *)(v407 + 8));
              v409 = (os_log_s *)objc_claimAutoreleasedReturnValue(v408);
              v410 = v409;
              int v411 = 1852797556;
              if (v409 && os_log_type_enabled(v409, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 5929;
                _os_log_impl( &dword_0,  v410,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPl ugInPropertyBuiltInPortsForCategory.)",  __p,  0x12u);
                int v411 = 1852797556;
              }

LABEL_1115:
              v840 = __cxa_allocate_exception(0x10uLL);
              *(void *)v840 = &off_4865A0;
              v840[2] = v411;
            default:
              uint64_t v837 = sub_138E8(13);
              int v411 = 2003329396;
              id v838 = sub_8C7D4(1, *(void **)v837, *(void *)(v837 + 8));
              v839 = (os_log_s *)objc_claimAutoreleasedReturnValue(v838);
              v410 = v839;
              if (!v839 || !os_log_type_enabled(v839, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1115;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 5929;
              v836 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInProper"
                     "tyBuiltInPortsForCategory.)";
              break;
          }

          _os_log_impl(&dword_0, v410, OS_LOG_TYPE_ERROR, v836, __p, 0x12u);
          goto LABEL_1115;
        }

        uint64_t v966 = sub_138E8(13);
        id v967 = sub_8C7D4(1, *(void **)v966, *(void *)(v966 + 8));
        v968 = (os_log_s *)objc_claimAutoreleasedReturnValue(v967);
        v886 = v968;
        if (v968 && os_log_type_enabled(v968, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5916;
          v887 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyBuiltInPortsFor"
                 "RouteConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.";
          goto LABEL_1240;
        }

LABEL_1241:
        v969 = __cxa_allocate_exception(0x10uLL);
        *(void *)v969 = &off_4865A0;
        v969[2] = 1852797029;
      }

      uint64_t v952 = sub_138E8(13);
      id v953 = sub_8C7D4(1, *(void **)v952, *(void *)(v952 + 8));
      v954 = (os_log_s *)objc_claimAutoreleasedReturnValue(v953);
      v886 = v954;
      if (!v954 || !os_log_type_enabled(v954, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1241;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5912;
      v887 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.";
    }

LABEL_1240:
    _os_log_impl(&dword_0, v886, OS_LOG_TYPE_ERROR, v887, buf, 0x12u);
    goto LABEL_1241;
  }

  if (v18 > 1701013874)
  {
    if (v18 != 1701013875)
    {
      if (v18 != 1701737068)
      {
        if (v18 != 1751480691) {
          goto LABEL_409;
        }
        goto LABEL_153;
      }

      int v101 = *(unsigned __int8 *)(a1 + 488);
      goto LABEL_460;
    }

    unsigned int v159 = *a5;
    if (v159 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
    {
      uint64_t v624 = sub_138E8(13);
      int v371 = 561211770;
      id v625 = sub_8C7D4(1, *(void **)v624, *(void *)(v624 + 8));
      v626 = (void *)objc_claimAutoreleasedReturnValue(v625);
      if (v626)
      {
        v372 = v626;
        if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = a2[2];
          sub_613AC((uint64_t)v1076, (unsigned int *)__p);
          int v627 = v1076[23];
          v628 = *(_BYTE **)v1076;
          unsigned int v629 = *a5;
          int v630 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
          v631 = v1076;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v627 < 0) {
            v631 = v628;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6353;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v631;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v629;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v630;
          v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_972;
        }

        goto LABEL_975;
      }

      goto LABEL_741;
    }

    if ((a3 | 8) != 8)
    {
      uint64_t v1027 = sub_138E8(13);
      id v1028 = sub_8C7D4(1, *(void **)v1027, *(void *)(v1027 + 8));
      v1029 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1028);
      v711 = v1029;
      if (v1029 && os_log_type_enabled(v1029, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6354;
        _os_log_impl( &dword_0,  v711,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      goto LABEL_1313;
    }

    *(_DWORD *)a6 = 0;
    *(void *)std::string __p = Mutable;
    *(_WORD *)&__p[8] = 0;
    if (Mutable) {
      sub_49A70(buf, a1, (const __CFDictionary **)__p, 0, 1);
    }
    else {
      sub_75418(buf, a1);
    }
    sub_52CCC((uint64_t)v1076, (uint64_t)buf);
    sub_52EF0((uint64_t)buf);
    if (*(_DWORD *)v1076 == 1668309362 && *(_DWORD *)&v1076[4] == 1768776806 && !v1076[12]) {
      *(_DWORD *)a6 = 1;
    }
    goto LABEL_544;
  }

  if (v18 != 1668575346)
  {
    if (v18 != 1684632434)
    {
      if (v18 == 1685283955)
      {
        unsigned int v19 = *a5;
        if (v19 == (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
        {
          int v20 = (unsigned __int8 *)sub_EAD14();
          int v21 = sub_EAF24(v20);
LABEL_198:
          *(_DWORD *)a6 = v21;
          goto LABEL_693;
        }

        uint64_t v480 = sub_138E8(13);
        int v371 = 561211770;
        id v481 = sub_8C7D4(1, *(void **)v480, *(void *)(v480 + 8));
        v482 = (void *)objc_claimAutoreleasedReturnValue(v481);
        if (v482)
        {
          v372 = v482;
          if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = a2[2];
            sub_613AC((uint64_t)v1076, (unsigned int *)__p);
            int v483 = v1076[23];
            v484 = *(_BYTE **)v1076;
            unsigned int v485 = *a5;
            int v486 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
            v487 = v1076;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v483 < 0) {
              v487 = v484;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6247;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v487;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = v485;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v486;
            v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
LABEL_972:
            v379 = v372;
            uint32_t v380 = 40;
            goto LABEL_973;
          }

          goto LABEL_975;
        }

        goto LABEL_741;
      }

LABEL_409:
      sub_6A140(a1, a2, a3, (uint64_t)Mutable, a5, a6);
      goto LABEL_693;
    }

    unsigned int v182 = *a5;
    if (v182 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
    {
      uint64_t v664 = sub_138E8(13);
      int v371 = 561211770;
      id v665 = sub_8C7D4(1, *(void **)v664, *(void *)(v664 + 8));
      v666 = (void *)objc_claimAutoreleasedReturnValue(v665);
      if (v666)
      {
        v372 = v666;
        if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = a2[2];
          sub_613AC((uint64_t)v1076, (unsigned int *)__p);
          int v667 = v1076[23];
          v668 = *(_BYTE **)v1076;
          unsigned int v669 = *a5;
          int v670 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
          v671 = v1076;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v667 < 0) {
            v671 = v668;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5733;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v671;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v669;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v670;
          v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_972;
        }

      sub_85D64(v487);
      sub_85D64(v486);
      *(void *)buf = v485;
      sub_85DA4((void ***)buf);
      *(void *)buf = &__p[1];
      sub_85DA4((void ***)buf);
      sub_85D64(v493[0]);
      sub_85D64(v491[0]);
      *(void *)buf = &__dst[32];
      sub_85DA4((void ***)buf);
      *(void *)buf = &__dst[8];
      sub_85DA4((void ***)buf);
LABEL_410:
      if (v467.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v467.__r_.__value_.__l.__size_);
      }
      goto LABEL_578;
    }

    if (v467.__r_.__value_.__l.__size_)
    {
LABEL_405:
      sub_1D2BD4((uint64_t *)__dst, a4, v456);
      sub_2170E4((uint64_t)__dst, a10);
      sub_1D3A30((uint64_t *)__p, a3, v458);
      sub_85EA4(buf, __p);
      sub_85EA4(v482, __dst);
      theString[0] = 0LL;
      theString[1] = 0LL;
      *(void *)&id v431 = 0LL;
      v469[0] = theString;
      LOBYTE(v469[1]) = 0;
      theString[0] = (CFStringRef)operator new(0xD0uLL);
      theString[1] = theString[0];
      *(void *)&id v431 = (char *)theString[0] + 208;
      theString[1] = (CFStringRef)sub_10A49C((uint64_t)buf, (uint64_t)__p, (uint64_t)theString[0]);
      uint64_t v298 = *(void *)a8;
      sub_105E0C((char **)&v427, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
      sub_85EA4(v469, __dst);
      sub_210660((uint64_t *)&v468, v469, 1LL);
      v465.__r_.__value_.__r.__words[0] = sub_1BAFD8( (uint64_t)&v468,  *(_DWORD *)(a8 + 12),  *(unsigned __int8 *)(a8 + 156));
      char v299 = sub_2B7D7C( (uint64_t **)theString,  v298,  (__int128 *)(a8 + 24),  a8 + 40,  (void **)&v427,  v418,  &v465,  v433,  (__int128 *)v447);
      uint64_t v300 = *a1;
      *a1 = v299;
      if (v300) {
        (*(void (**)(uint64_t *))(*v300 + 8))(v300);
      }
      sub_85CA0((uint64_t *)&v468);
      sub_85D64(v473);
      sub_85D64(v472);
      v466.__r_.__value_.__r.__words[0] = (std::string::size_type)v471;
      sub_85DA4((void ***)&v466);
      v466.__r_.__value_.__r.__words[0] = (std::string::size_type)&v469[1];
      sub_85DA4((void ***)&v466);
      v469[0] = &v427;
      sub_7A668((void ***)v469);
      v469[0] = theString;
      sub_10A52C((void ***)v469);
      for (iuint64_t i = 0LL; ii != -26; ii -= 13LL)
      {
        sub_85D64((void *)v482[ii + 11]);
        sub_85D64((void *)v482[ii + 8]);
        v469[0] = &v482[ii + 4];
        sub_85DA4((void ***)v469);
        v469[0] = &v482[ii + 1];
        sub_85DA4((void ***)v469);
      }

      goto LABEL_409;
    }

LABEL_975:
LABEL_976:
        v696 = __cxa_allocate_exception(0x10uLL);
        *(void *)v696 = &off_4865A0;
        v696[2] = v371;
      }

LABEL_741:
      v372 = 0LL;
      goto LABEL_976;
    }

    if ((_DWORD)a3 == 8 && Mutable)
    {
      *(void *)buf = Mutable;
      *(_WORD *)&buf[8] = 0;
      int v71 = sub_2753E8(a1, (CFDictionaryRef *)buf);
      uint64_t v72 = buf;
      goto LABEL_378;
    }

    uint64_t v747 = sub_138E8(13);
    int v371 = 561211770;
    id v748 = sub_8C7D4(1, *(void **)v747, *(void *)(v747 + 8));
    v749 = (void *)objc_claimAutoreleasedReturnValue(v748);
    if (!v749) {
      goto LABEL_741;
    }
    v372 = v749;
    if (!os_log_type_enabled(v372, OS_LOG_TYPE_ERROR)) {
      goto LABEL_975;
    }
    *(void *)std::string __p = *(void *)a2;
    *(_DWORD *)&__p[8] = a2[2];
    sub_613AC((uint64_t)v1076, (unsigned int *)__p);
    if (v1076[23] >= 0) {
      v750 = v1076;
    }
    else {
      v750 = *(_BYTE **)v1076;
    }
    *(_DWORD *)buf = 136316674;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5735;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v750;
    *(_WORD *)&_BYTE buf[28] = 1024;
    *(_DWORD *)&buf[30] = 8;
    *(_WORD *)&buf[34] = 2080;
    *(void *)&buf[36] = "non-";
    *(_WORD *)&buf[44] = 1024;
    *(_DWORD *)&buf[46] = a3;
    *(_WORD *)&buf[50] = 2048;
    *(void *)&buf[52] = Mutable;
    v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is"
           " %sNULL (inQualifierDataSize: %u; inQualifierData: %p).";
    goto LABEL_1029;
  }

  unsigned int v136 = *a5;
  if (v136 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable))
  {
    uint64_t v608 = sub_138E8(13);
    int v371 = 561211770;
    id v609 = sub_8C7D4(1, *(void **)v608, *(void *)(v608 + 8));
    v610 = (void *)objc_claimAutoreleasedReturnValue(v609);
    if (v610)
    {
      v372 = v610;
      if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
      {
        *(void *)std::string __p = *(void *)a2;
        *(_DWORD *)&__p[8] = a2[2];
        sub_613AC((uint64_t)v1076, (unsigned int *)__p);
        int v611 = v1076[23];
        v612 = *(_BYTE **)v1076;
        unsigned int v613 = *a5;
        int v614 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48LL))( a1,  a2,  a3,  Mutable);
        v615 = v1076;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        if (v611 < 0) {
          v615 = v612;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6024;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v615;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)&buf[30] = v613;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v614;
        v378 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passe"
               "d: %u; required: %u).";
        goto LABEL_972;
      }

      goto LABEL_975;
    }

    goto LABEL_741;
  }

  if ((a3 | 4) != 4)
  {
    uint64_t v1024 = sub_138E8(13);
    id v1025 = sub_8C7D4(1, *(void **)v1024, *(void *)(v1024 + 8));
    v1026 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1025);
    v711 = v1026;
    if (v1026 && os_log_type_enabled(v1026, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6025;
      _os_log_impl(&dword_0, v711, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

LABEL_1313:
    v367 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v367, "Precondition failure.");
    goto LABEL_725;
  }

  *(void *)&__p[8] = 0LL;
  *(void *)&__p[16] = 0LL;
  *(void *)std::string __p = &__p[8];
  *(void *)v1076 = sub_273328(a1, a3, (unsigned int *)Mutable);
  *(void *)&v1076[8] = v137;
  sub_E5784(v1056, *(void *)(a1 + 216) + 8LL);
  sub_E570C((uint64_t)buf, (uint64_t)v1076, (uint64_t)v1056);
  if (v1056[16]) {
    sub_13850((uint64_t)v1056);
  }
  int v138 = sub_135A44(*(void **)(a1 + 112), *(unsigned int *)buf, (uint64_t *)__p);
  if (v138)
  {
    if (v138 == 2)
    {
      uint64_t v779 = sub_138E8(13);
      int v393 = 1852793716;
      id v780 = sub_8C7D4(1, *(void **)v779, *(void *)(v779 + 8));
      v781 = (os_log_s *)objc_claimAutoreleasedReturnValue(v780);
      v392 = v781;
      if (!v781 || !os_log_type_enabled(v781, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1061;
      }
      *(_DWORD *)v1076 = 136315394;
      *(void *)&v1076[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v1076[12] = 1024;
      *(_DWORD *)&v1076[14] = 6032;
      v782 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAudioPlugIn"
             "PropertyCategoryInfo.)";
    }

    else
    {
      if (v138 == 1)
      {
        uint64_t v389 = sub_138E8(13);
        id v390 = sub_8C7D4(1, *(void **)v389, *(void *)(v389 + 8));
        v391 = (os_log_s *)objc_claimAutoreleasedReturnValue(v390);
        v392 = v391;
        int v393 = 1852797556;
        if (v391 && os_log_type_enabled(v391, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v1076 = 136315394;
          *(void *)&v1076[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v1076[12] = 1024;
          *(_DWORD *)&v1076[14] = 6032;
          _os_log_impl( &dword_0,  v392,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPlugInPr opertyCategoryInfo.)",  v1076,  0x12u);
          int v393 = 1852797556;
        }

LABEL_1061:
        v786 = __cxa_allocate_exception(0x10uLL);
        *(void *)v786 = &off_4865A0;
        v786[2] = v393;
      }

      uint64_t v783 = sub_138E8(13);
      int v393 = 2003329396;
      id v784 = sub_8C7D4(1, *(void **)v783, *(void *)(v783 + 8));
      v785 = (os_log_s *)objc_claimAutoreleasedReturnValue(v784);
      v392 = v785;
      if (!v785 || !os_log_type_enabled(v785, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1061;
      }
      *(_DWORD *)v1076 = 136315394;
      *(void *)&v1076[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v1076[12] = 1024;
      *(_DWORD *)&v1076[14] = 6032;
      v782 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInPropertyCategoryInfo.)";
    }

    _os_log_impl(&dword_0, v392, OS_LOG_TYPE_ERROR, v782, v1076, 0x12u);
    goto LABEL_1061;
  }

  CFMutableDictionaryRef v139 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)v1073 = v139;
  *(_WORD *)&v1073[8] = 257;
  if (!*(void *)&__p[16]) {
    goto LABEL_337;
  }
  unsigned int v140 = *(_BYTE **)__p;
  if (*(_BYTE **)__p == &__p[8]) {
    goto LABEL_337;
  }
  do
  {
    uint64_t v141 = sub_138E8(2);
    if ((*(_BYTE *)(v141 + 8) & 1) != 0)
    {
      id v142 = *(id *)v141;
      if (v142)
      {
        v143 = (os_log_s *)v142;
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(&v1074, *((unsigned int *)v140 + 7));
          size_t v144 = &v1074;
          if ((v1074.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            size_t v144 = (std::string *)v1074.__r_.__value_.__r.__words[0];
          }
          int v145 = v140[32];
          *(_DWORD *)v1076 = 136315906;
          *(void *)&v1076[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v1076[12] = 1024;
          *(_DWORD *)&v1076[14] = 6040;
          *(_WORD *)&v1076[18] = 2080;
          *(void *)&v1076[20] = v144;
          *(_WORD *)&v1076[28] = 1024;
          *(_DWORD *)&v1076[30] = v145;
          _os_log_impl( &dword_0,  v143,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found category info key / value pair. key: '%s'; value: %u",
            v1076,
            0x22u);
        }
      }
    }

    int v146 = v140[32];
    int v147 = *((_DWORD *)v140 + 7);
    if (v147 == 1667850851)
    {
      v148 = @"broadcast";
      goto LABEL_321;
    }

    if (v147 == 1667854445)
    {
      v148 = @"policyMute";
LABEL_321:
      sub_134C4((uint64_t)v1073, v148, v146 != 0);
      goto LABEL_330;
    }

    id v149 = *(id *)sub_138E8(2);
    uint64_t v150 = v149;
    if (v149)
    {
      v151 = (os_log_s *)v149;
      if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v1074, *((unsigned int *)v140 + 7));
        char v152 = &v1074;
        if ((v1074.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          char v152 = (std::string *)v1074.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v1076 = 136315906;
        *(void *)&v1076[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v1076[12] = 1024;
        *(_DWORD *)&v1076[14] = 6053;
        *(_WORD *)&v1076[18] = 2080;
        *(void *)&v1076[20] = v152;
        *(_WORD *)&v1076[28] = 1024;
        *(_DWORD *)&v1076[30] = v146;
        _os_log_impl( &dword_0,  v151,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown key / value pair stored in a CategoryInfoMap. key: '%s'; value: %u",
          v1076,
          0x22u);
      }
    }

LABEL_330:
    unint64_t v153 = (void *)*((void *)v140 + 1);
    if (v153)
    {
      do
      {
        uint64_t v154 = v153;
        unint64_t v153 = (void *)*v153;
      }

      while (v153);
    }

    else
    {
      do
      {
        uint64_t v154 = (_BYTE *)*((void *)v140 + 2);
        BOOL v98 = *(void *)v154 == (void)v140;
        unsigned int v140 = v154;
      }

      while (!v98);
    }

    unsigned int v140 = v154;
  }

  while (v154 != &__p[8]);
  CFMutableDictionaryRef v139 = *(CFMutableDictionaryRef *)v1073;
LABEL_337:
  if (v139)
  {
    CFRetain(v139);
    uint64_t v155 = *(void *)v1073;
  }

  else
  {
    uint64_t v155 = 0LL;
  }

  *(void *)a6 = v155;
  sub_13850((uint64_t)v1073);
  sub_32C8C(*(void **)&buf[24]);
  sub_32C8C(*(void **)&__p[8]);
LABEL_693:
  if (*a2 == 1668575346)
  {
    uint64_t v342 = sub_138E8(2);
    uint64_t v343 = sub_138E8(34);
    char v344 = 0;
    uint64_t v345 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v346 = *(void *)(v342 + 8);
    while (1)
    {
      uint64_t v347 = *(int *)&buf[4 * v345];
      char v348 = v344;
      if (((v346 & v347) != 0) != ((*(void *)(v343 + 8) & v347) != 0)) {
        break;
      }
      char v344 = 1;
      uint64_t v345 = 1LL;
      if ((v348 & 1) != 0)
      {
        if ((v346 & 1) == 0) {
          goto LABEL_710;
        }
        goto LABEL_702;
      }
    }

    if ((v346 & v347) == 0) {
      uint64_t v342 = v343;
    }
    if ((*(void *)(v342 + 8) & 1) != 0)
    {
LABEL_702:
      id v349 = *(id *)v342;
      if (v349)
      {
        v350 = (os_log_s *)v349;
        if (os_log_type_enabled(v350, OS_LOG_TYPE_DEBUG))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = a2[2];
          sub_613AC((uint64_t)v1076, (unsigned int *)__p);
          v351 = v1076[23] >= 0 ? v1076 : *(_BYTE **)v1076;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6376;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v351;
          _os_log_impl(&dword_0, v350, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
          if ((v1076[23] & 0x80000000) != 0) {
            operator delete(*(void **)v1076);
          }
        }
      }
    }
  }

          uint64_t v552 = 0LL;
          goto LABEL_1136;
        }

        if (*(void *)(a1 + 112))
        {
          int v56 = sub_5954C();
          (*(void (**)(uint64_t, void, void, void))(*(void *)v56 + 320LL))( v56,  *(void *)(a1 + 112),  *(void *)a6,  *((void *)a6 + 1));
          uint64_t v57 = (os_log_s *)*(id *)sub_138E8(2);
          uint64_t v58 = v57;
          if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6920;
            _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d SerializationContext is ready. Allowing all devices",  buf,  0x12u);
          }

          char v59 = sub_EAD14();
          (*(void (**)(void, int *))(**(void **)(v59 + 88) + 24LL))(*(void *)(v59 + 88), &dword_48D7D8);
          goto LABEL_1026;
        }

        v644 = sub_138E8(13);
        unsigned int v645 = sub_8C7D4(1, *(void **)v644, *(void *)(v644 + 8));
        int v646 = (os_log_s *)objc_claimAutoreleasedReturnValue(v645);
        v647 = v646;
        if (v646 && os_log_type_enabled(v646, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6915;
          _os_log_impl( &dword_0,  v647,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_1126;
      }

LABEL_710:
  if (v1052) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
}

void sub_115A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, os_signpost_id_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, void *a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }

  sub_277444(&a35);
  if (a13) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_127C8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 1986095470) {
    return 4LL;
  }
  sub_6DD4();
  int v9 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  if (*(_DWORD *)(a1 + 108) != 2)
  {
    uint64_t v31 = sub_138E8(13);
    id v32 = sub_8C7D4(1, *(void **)v31, *(void *)(v31 + 8));
    __n128 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    v34 = v33;
    if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v54 = "VirtualAudio_PlugIn.mm";
      __int16 v55 = 1024;
      *(_DWORD *)int v56 = 5304;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): VirtualAudio PlugIn is not initialized yet",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
  }

  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 32LL))(a1, a2) & 1) == 0)
  {
    uint64_t v36 = sub_138E8(13);
    id v37 = sub_8C7D4(1, *(void **)v36, *(void *)(v36 + 8));
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    if (!v38)
    {
      uint64_t v39 = 0LL;
      int v40 = 2003332927;
      goto LABEL_121;
    }

    uint64_t v39 = v38;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = *(void *)a2;
      int v50 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v49);
      int v44 = v52 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v54 = "VirtualAudio_PlugIn.mm";
      __int16 v55 = 1024;
      *(_DWORD *)int v56 = 5306;
      *(_WORD *)&v56[4] = 2080;
      uint64_t v57 = v44;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v52 < 0) {
        operator delete(__p[0]);
      }
    }

    int v40 = 2003332927;
    goto LABEL_120;
  }

  if (((_DWORD)a3 == 0) != (a4 == 0))
  {
    uint64_t v41 = sub_138E8(13);
    id v42 = sub_8C7D4(1, *(void **)v41, *(void *)(v41 + 8));
    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    if (!v43)
    {
      uint64_t v39 = 0LL;
      int v40 = 561211770;
      goto LABEL_121;
    }

    uint64_t v39 = v43;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = *(void *)a2;
      int v50 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v49);
      CFTypeRef v45 = v52 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      v54 = "VirtualAudio_PlugIn.mm";
      __int16 v55 = 1024;
      *(_DWORD *)int v56 = 5307;
      *(_WORD *)&v56[4] = 2080;
      uint64_t v57 = v45;
      __int16 v58 = 1024;
      int v59 = a3;
      __int16 v60 = 2048;
      uint64_t v61 = (const char *)a4;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v52 < 0) {
        operator delete(__p[0]);
      }
    }

    int v40 = 561211770;
LABEL_120:

LABEL_121:
    unsigned int v46 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v46 = &off_4865A0;
    v46[2] = v40;
  }

  int v10 = *a2;
  uint64_t v4 = 8LL;
  if (*a2 > 1769304163)
  {
    if (v10 <= 1936028520)
    {
      if (v10 <= 1886549106)
      {
        if (v10 > 1868853874)
        {
          if (v10 == 1868853875 || v10 == 1886350709) {
            goto LABEL_73;
          }
          int v12 = 1886548848;
          goto LABEL_72;
        }

        if (v10 != 1769304164)
        {
          int v11 = 1819173229;
          goto LABEL_84;
        }
      }

      else
      {
        if (v10 <= 1920230245)
        {
          if (v10 == 1886549107 || v10 == 1903653475) {
            goto LABEL_85;
          }
          int v12 = 1919120504;
          goto LABEL_72;
        }

        if (v10 != 1920230246)
        {
          if (v10 == 1920297328) {
            goto LABEL_73;
          }
          int v22 = 1920426613;
          goto LABEL_80;
        }
      }

      uint64_t v4 = 32LL;
      goto LABEL_85;
    }

    if (v10 > 1986094178)
    {
      if (v10 <= 1987077485)
      {
        if ((v10 - 1986094179) < 2)
        {
          uint64_t v4 = 0LL;
          goto LABEL_85;
        }

        int v11 = 1987016304;
        goto LABEL_84;
      }

      if (v10 == 1987077486) {
        goto LABEL_73;
      }
      int v22 = 2019714413;
    }

    else
    {
      if (v10 <= 1936745572)
      {
        if (v10 == 1936028521) {
          goto LABEL_85;
        }
        if (v10 != 1936225648)
        {
          if (v10 == 1936745332)
          {
            sub_12A734((uint64_t *)buf, *(void ***)(a1 + 112));
            uint64_t v4 = (4 * *(_DWORD *)&v56[2]);
            sub_68314(buf);
            goto LABEL_85;
          }

          goto LABEL_97;
        }

        goto LABEL_73;
      }

      if (v10 == 1936745573 || v10 == 1936746862) {
        goto LABEL_73;
      }
      int v22 = 1936882284;
    }

LABEL_80:
    if (v10 == v22)
    {
      uint64_t v4 = 16LL;
      goto LABEL_85;
    }

    goto LABEL_97;
  }

  if (v10 > 1651664754)
  {
    if (v10 <= 1684632433)
    {
      if (v10 > 1668310626)
      {
        if (v10 == 1668310627 || v10 == 1668313699) {
          goto LABEL_85;
        }
        if (v10 != 1668575346) {
          goto LABEL_97;
        }
        uint64_t v18 = sub_138E8(13);
        id v19 = sub_8C7D4(1, *(void **)v18, *(void *)(v18 + 8));
        int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        int v21 = v20;
        if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v54 = "VirtualAudio_PlugIn.mm";
          __int16 v55 = 1024;
          *(_DWORD *)int v56 = 5349;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_92;
      }

      if (v10 != 1651664755)
      {
        int v11 = 1667329392;
        goto LABEL_84;
      }

    ++v17;
  }

  while (v17 != v18);
  int v40 = pthread_self();
  uint64_t v41 = (_opaque_pthread_t *)atomic_load(v10 + 83);
  if (pthread_equal(v40, v41))
  {
    uint64_t v65 = 1;
    goto LABEL_85;
  }

  id v42 = pthread_self();
  __int16 v43 = (_opaque_pthread_t *)atomic_load(v10 + 94);
  int v44 = pthread_equal(v42, v43);
  uint64_t v65 = v44 != 0;
  if (v44) {
LABEL_85:
  }
    sub_79C14(v10 + 81);
  *(void *)&int v71 = &off_46E8C8;
  *((void *)&v71 + 1) = &v65;
  *(void *)&uint64_t v72 = v10;
  *((void *)&v72 + 1) = &v71;
  sub_35678(buf, 1, (uint64_t)&v71);
  CFTypeRef v45 = (__int128 *)*((void *)&v72 + 1);
  if (*((__int128 **)&v72 + 1) == &v71)
  {
    unsigned int v46 = 4LL;
    CFTypeRef v45 = &v71;
LABEL_90:
    (*(void (**)(void))(*(void *)v45 + 8 * v46))();
  }

  else if (*((void *)&v72 + 1))
  {
    unsigned int v46 = 5LL;
    goto LABEL_90;
  }

  if (v15 == v16)
  {
    (*(void (**)(unint64_t *, void, int *, uint64_t))(*v10 + 72))(v10, v62, a3, 1LL);
  }

  else
  {
    uint64_t v47 = 0LL;
    uint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    int v50 = &a3[3 * v18];
    do
    {
      unsigned int v51 = v15;
      while (a3[1] != *((_DWORD *)v51 + 1) || *a3 != *(_DWORD *)v51 || a3[2] != *((_DWORD *)v51 + 2))
      {
        v51 += 12;
        if (v51 == v16) {
          goto LABEL_98;
        }
      }

      if (v51 != v16) {
        goto LABEL_117;
      }
LABEL_98:
      v66 = *(void *)a3;
      LODWORD(v67) = a3[2];
      if ((unint64_t)v48 >= v49)
      {
        int v53 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v47) >> 2) + 1;
        if (v53 > 0x1555555555555555LL) {
          sub_7A87C();
        }
        else {
          v54 = v53;
        }
        if (v54) {
          v54 = (unint64_t)sub_87E70(v54);
        }
        else {
          __int16 v55 = 0LL;
        }
        int v56 = v54 + 4 * ((v48 - v47) >> 2);
        *(void *)int v56 = v66;
        *(_DWORD *)(v56 + 8) = v67;
        uint64_t v57 = (char *)v56;
        while (v48 != v47)
        {
          __int16 v58 = *(void *)(v48 - 12);
          v48 -= 12;
          int v59 = *((_DWORD *)v48 + 2);
          *(void *)(v57 - 12) = v58;
          v57 -= 12;
          *((_DWORD *)v57 + 2) = v59;
        }

        uint64_t v49 = v54 + 12 * v55;
        uint64_t v48 = (char *)(v56 + 12);
        if (v47) {
          operator delete(v47);
        }
        uint64_t v47 = v57;
      }

      else
      {
        char v52 = *(void *)a3;
        *((_DWORD *)v48 + 2) = a3[2];
        *(void *)uint64_t v48 = v52;
        v48 += 12;
      }

    id v14 = sub_5CC60((uint64_t)a1, a2) == 0;
    return !v14;
  }

  if (v2 <= 1870030193)
  {
    if (v2 <= 1819173228)
    {
      if (v2 <= 1818850925)
      {
        if (v2 == 1818850145) {
          return v3;
        }
        uint64_t v4 = 1818850162;
        goto LABEL_53;
      }

      if (v2 == 1818850926) {
        return v3;
      }
      if (v2 != 1819107691) {
        goto LABEL_80;
      }
      int v10 = *(uint64_t (**)(void))(*a1 + 128LL);
      goto LABEL_75;
    }

    if (v2 > 1836411235)
    {
      if (v2 != 1836411236)
      {
        uint64_t v4 = 1869180523;
LABEL_53:
        if (v2 == v4) {
          return v3;
        }
        goto LABEL_80;
      }

      int v10 = *(uint64_t (**)(void))(*a1 + 184LL);
LABEL_75:
      int v15 = (const void *)v10();
      if (v15)
      {
LABEL_76:
        CFRelease(v15);
        return 1LL;
      }

      return 0LL;
    }

    if (v2 == 1819173229)
    {
      int v10 = *(uint64_t (**)(void))(*a1 + 120LL);
      goto LABEL_75;
    }

    int v5 = 1819569763;
    goto LABEL_33;
  }

  if (v2 <= 1937009954)
  {
    if (v2 > 1936092275)
    {
      if (v2 == 1936092276) {
        return a2[1] == 1869968496;
      }
      if (v2 == 1936482681)
      {
LABEL_46:
        int v11 = a2[1];
        return v11 == 1768845428 || v11 == 1869968496;
      }

      goto LABEL_80;
    }

    if (v2 == 1870030194) {
      return v3;
    }
    int v5 = 1935763060;
LABEL_33:
    if (v2 == v5)
    {
      int v7 = a2[1];
      if (v7 == 1869968496)
      {
        int v8 = a1[66];
        int v9 = a1[65];
      }

      else
      {
        if (v7 != 1768845428) {
          return 0LL;
        }
        int v9 = a1[62];
        int v8 = a1[63];
      }

      id v14 = ((v8 - v9) & 0x7FFFFFFF8LL) == 0;
      return !v14;
    }

    goto LABEL_80;
  }

  if (v2 > 1953653101)
  {
    if (v2 == 1953653102) {
      return v3;
    }
    if (v2 == 1969841184)
    {
      int v10 = *(uint64_t (**)(void))(*a1 + 176LL);
      goto LABEL_75;
    }

    goto LABEL_80;
  }

  if (v2 != 1937009955)
  {
    int v5 = 1937077093;
    goto LABEL_33;
  }

  uint64_t v13 = a2[1];
  uint64_t v3 = 1LL;
  if (v13 != 1735159650 && v13 != 1768845428 && v13 != 1869968496) {
    return 0LL;
  }
  return v3;
}

      v54 = *v14;
    }

    if (v54 <= 1919774834)
    {
      char v77 = v54 == 1064725619;
      uint64_t v78 = 1684633187;
    }

    else
    {
      char v77 = v54 == 1919774835 || v54 == 1986817377;
      uint64_t v78 = 1986229104;
    }

    if (v77 || v54 == v78)
    {
      uint64_t v80 = &v11[12 * v13];
      uint64_t v13 = (v13 + 1);
      *(void *)uint64_t v80 = *(void *)v14;
      *((_DWORD *)v80 + 2) = v14[2];
    }

    ++v12;
  }

  while (v12 != v8);
  char v81 = sub_138E8(0);
  id v82 = v87;
  if ((*(_BYTE *)(v81 + 8) & 1) != 0)
  {
    int v83 = *(os_log_s **)v81;
    if (*(void *)v81)
    {
      if (os_log_type_enabled(*(os_log_t *)v81, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
        __n128 v105 = 1024;
        unsigned int v106 = 412;
        uint64_t v107 = 1024;
        *(_DWORD *)uint64_t v108 = v82;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v13;
        _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d inNumberAddresses: %u; outNumberAddresses: %u",
          buf,
          0x1Eu);
      }
    }
  }

  if (v13 <= v82)
  {
    if (!(_DWORD)v13) {
      goto LABEL_104;
    }
  }

  else
  {
    int v84 = (os_log_t *)sub_138E8(13);
    int v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
      __n128 v105 = 1024;
      unsigned int v106 = 414;
      _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: inNumberAddresses < outNumberAddresses.",  buf,  0x12u);
    }
  }

  (*(void (**)(unsigned int *, uint64_t, char *, uint64_t))(*(void *)v5 + 72LL))(v5, v13, v11, 1LL);
LABEL_104:
  if ((_DWORD)v13 != v82) {
    (*(void (**)(unsigned int *))(*(void *)v5 + 168LL))(v5);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
}

            LOBYTE(v37) = 0;
LABEL_81:
            if (v148.__m_.__sig) {
              operator delete((void *)v148.__m_.__sig);
            }
            sub_CFB64((uint64_t)v126, (uint64_t)&v134);
            if (v127) {
              goto LABEL_85;
            }
            __n128 v123 = 0LL;
            v124 = 0LL;
            uint64_t v125 = 0LL;
            uint64_t v72 = v126[0];
            sub_7A5B8(&v123, v126[0], (uint64_t)v126[1], ((char *)v126[1] - (char *)v126[0]) >> 2);
            uint64_t v120 = 0LL;
            int v121 = 0LL;
            int v122 = 0LL;
            sub_7A5B8(&v120, v32, v33, (v33 - (uint64_t)v32) >> 2);
            int v83 = v123;
            int v84 = v120;
            int v85 = v124 - v123 == v121 - v120 && memcmp(v123, v120, v124 - v123) == 0;
            if (v84)
            {
              int v121 = v84;
              operator delete(v84);
            }

            if (v83)
            {
              v124 = v83;
              operator delete(v83);
              if (v85) {
                goto LABEL_181;
              }
            }

            else if (v85)
            {
LABEL_181:
              unsigned int v86 = sub_138E8(13);
              if ((*(_BYTE *)(v86 + 8) & 1) != 0)
              {
                uint64_t v87 = *(os_log_s **)v86;
                if (*(void *)v86)
                {
                  if (os_log_type_enabled(*(os_log_t *)v86, OS_LOG_TYPE_DEBUG))
                  {
                    buf.mSelector = 136315650;
                    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                    int v138 = 1024;
                    CFMutableDictionaryRef v139 = 219;
                    unsigned int v140 = 1024;
                    *(_DWORD *)uint64_t v141 = os_unfair_lock_opaque;
                    _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync pr imitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
                  }
                }
              }

              goto LABEL_153;
            }

      if (!v47) {
        goto LABEL_84;
      }
      v54 = (unint64_t *)&v47->__shared_owners_;
      do
        __int16 v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (v55)
      {
LABEL_84:
        if (!v41) {
          goto LABEL_86;
        }
LABEL_85:
        std::__shared_weak_count::__release_weak(v41);
        goto LABEL_86;
      }

      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if (v41) {
        goto LABEL_85;
      }
LABEL_86:
      if (!v33) {
        break;
      }
      std::__shared_weak_count::__release_weak(v33);
      if (!v51) {
        goto LABEL_96;
      }
LABEL_90:
      unsigned int v30 = (uint64_t *)v30[1];
    }

    if (v51) {
      goto LABEL_90;
    }
LABEL_96:
    int v56 = 0;
LABEL_97:
    if (v2 != v30)
    {
      uint64_t v57 = *v30;
      if (v63 != a1)
      {
        if ((uint64_t *)v57 == v2)
        {
          __int16 v60 = 1LL;
        }

        else
        {
          __int16 v58 = -1LL;
          int v59 = v2;
          do
          {
            int v59 = (uint64_t *)v59[1];
            ++v58;
          }

          while (v59 != (uint64_t *)v57);
          __int16 v60 = v58 + 2;
        }

        a1[2] -= v60;
        v64 += v60;
      }

      uint64_t v61 = *v2;
      *(void *)(v61 + 8) = *(void *)(v57 + 8);
      **(void **)(v57 + 8) = v61;
      __int16 v62 = v63[0];
      *(void *)(v63[0] + 8) = v2;
      *int v2 = v62;
      v63[0] = v57;
      *(void *)(v57 + 8) = v63;
    }

    if ((v56 & 1) == 0) {
      unsigned int v30 = (uint64_t *)v30[1];
    }
LABEL_108:
    int v2 = v30;
  }

  while (v30 != a1);
LABEL_109:
  sub_85B80(v63);
}

  sub_1B4BD8((uint64_t)buf, a7, *(_DWORD *)(a3 + 264), a5);
  __int16 v58 = sub_2D82CC(a6, (uint64_t)buf);
  if (*(void *)&v147[2])
  {
    v148 = *(void *)&v147[2];
    operator delete(*(void **)&v147[2]);
  }

  LODWORD(v59) = v58;
  if (HIDWORD(v58))
  {
LABEL_113:
    unsigned int v74 = sub_138E8(20);
    uint64_t v75 = sub_138E8(38);
    uint64_t v76 = 0;
    char v77 = 0LL;
    uint64_t v78 = *(float *)&v59;
    *(void *)buf = 0x100000002LL;
    uint64_t v79 = *(void *)(v74 + 8);
    while (1)
    {
      uint64_t v80 = *(int *)&buf[4 * v77];
      char v81 = v76;
      if (((v79 & v80) != 0) != ((*(void *)(v75 + 8) & v80) != 0)) {
        break;
      }
      uint64_t v76 = 1;
      char v77 = 1LL;
      if ((v81 & 1) != 0)
      {
        if ((v79 & 1) == 0) {
          goto LABEL_124;
        }
        goto LABEL_121;
      }
    }

    if ((v79 & v80) == 0) {
      unsigned int v74 = v75;
    }
    if ((*(void *)(v74 + 8) & 1) != 0)
    {
LABEL_121:
      id v82 = *(os_log_s **)v74;
      if (v82 && os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        id v142 = 1024;
        v143 = 183;
        size_t v144 = 2048;
        int v145 = *(float *)&v59;
        _os_log_impl(&dword_0, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning default volume %f.", buf, 0x1Cu);
      }
    }

        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_4865A0;
        exception[2] = v44;
      }

      uint64_t v49 = sub_138E8(13);
      int v44 = 2003329396;
      int v50 = sub_8C7D4(1, *(void **)v49, *(void *)(v49 + 8));
      unsigned int v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      __int16 v43 = v51;
      if (!v51 || !os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        goto LABEL_80;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2397;
      uint64_t v48 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Routing category info lookup failed.)";
    }

    _os_log_impl(&dword_0, v43, OS_LOG_TYPE_ERROR, v48, (uint8_t *)buf, 0x12u);
    goto LABEL_80;
  }

  int v5 = (os_log_s *)*(id *)sub_138E8(2);
  int v6 = v5;
  if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2386;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = a2;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Ignoring PolicyMute for J/K VP routes (incoming mute value = %d)",  (uint8_t *)buf,  0x18u);
  }

  a2 = *(_BYTE *)(a1 + 168) != 0;
LABEL_65:
  if (v53) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  return a2;
}

  v37[0] = 0LL;
  ++qword_499E00;
  sub_2A4958(v37);
  return i;
}

  *(void *)buf = 0LL;
  ++*(void *)(a1 + 432);
  sub_36E3B8((uint64_t)buf);
LABEL_81:
  id v32 = 0;
  if (!v15) {
    goto LABEL_85;
  }
LABEL_82:
  uint64_t v49 = (unint64_t *)&v15->__shared_owners_;
  do
    int v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v32 & 1) != 0) {
      goto LABEL_86;
    }
    goto LABEL_88;
  }

LABEL_73:
      uint64_t v4 = 4LL;
      goto LABEL_85;
    }

    if (v10 > 1701737067)
    {
      if (v10 == 1701737068 || v10 == 1751480691) {
        goto LABEL_73;
      }
      int v12 = 1768845421;
    }

    else
    {
      if (v10 == 1684632434)
      {
        if ((_DWORD)a3 != 8 || !a4)
        {
          uint64_t v28 = sub_138E8(13);
          id v29 = sub_8C7D4(1, *(void **)v28, *(void *)(v28 + 8));
          unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          if (v30)
          {
            __int16 v16 = v30;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              uint64_t v49 = *(void *)a2;
              int v50 = a2[2];
              sub_613AC((uint64_t)__p, (unsigned int *)&v49);
              if (v52 >= 0) {
                uint64_t v47 = __p;
              }
              else {
                uint64_t v47 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136316674;
              v54 = "VirtualAudio_PlugIn.mm";
              __int16 v55 = 1024;
              *(_DWORD *)int v56 = 5413;
              *(_WORD *)&v56[4] = 2080;
              uint64_t v57 = v47;
              __int16 v58 = 1024;
              int v59 = 8;
              __int16 v60 = 2080;
              uint64_t v61 = "non-";
              __int16 v62 = 1024;
              int v63 = a3;
              __int16 v64 = 2048;
              uint64_t v65 = a4;
LABEL_127:
              _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier da ta is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                buf,
                0x3Cu);
              if (v52 < 0) {
                operator delete(__p[0]);
              }
            }

            std::__shared_weak_count::__release_weak(v31);
            goto LABEL_74;
          }
        }
      }
    }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    uint64_t v27 = v76;
LABEL_111:
    sub_7D898((uint64_t)inClientData);
    std::condition_variable::~condition_variable(&v105);
    std::mutex::~mutex(&v106);
    return v27;
  }

  uint64_t v28 = (os_log_t *)sub_138E8(13);
  id v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v83, v27);
    unsigned int v30 = SBYTE7(v84);
    uint64_t v31 = (__int128 *)v83;
    *(AudioObjectPropertyAddress *)&v73.__m_ = inAddress;
    sub_613AC((uint64_t)&v105, (unsigned int *)&v73);
    id v32 = &v83;
    if (v30 < 0) {
      id v32 = v31;
    }
    if (v105.__cv_.__opaque[15] >= 0) {
      sig = (uint64_t)&v105;
    }
    else {
      sig = v105.__cv_.__sig;
    }
    buf.mSelector = 136316418;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    unsigned int v96 = 1024;
    uint64_t v97 = 207;
    BOOL v98 = 1024;
    *(_DWORD *)unsigned int v99 = v27;
    *(_WORD *)&v99[4] = 2080;
    *(void *)&v99[6] = v32;
    *(_WORD *)&v99[14] = 2080;
    *(void *)&v99[16] = sig;
    *(_WORD *)&v99[24] = 1024;
    *(_DWORD *)&v99[26] = v17;
    _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (v105.__cv_.__opaque[15] < 0) {
      operator delete((void *)v105.__cv_.__sig);
    }
    if (SBYTE7(v84) < 0) {
      operator delete((void *)v83);
    }
  }

  return v27;
}

    if (v484) {
      CFRelease(v484);
    }
    if (cf) {
      CFRelease(cf);
    }
    ++*(void *)&buf[8];
  }

  if (v491)
  {
    v492 = v491;
    operator delete(v491);
  }

  if (__dst.__r_.__value_.__l.__cap_)
  {
    uint64_t cap = __dst.__r_.__value_.__l.__cap_;
    operator delete((void *)__dst.__r_.__value_.__l.__cap_);
  }

  if (*(void *)&buf[40])
  {
    *(void *)&buf[48] = *(void *)&buf[40];
    operator delete(*(void **)&buf[40]);
  }

  if (*(void *)&buf[16])
  {
    *(void *)&_BYTE buf[24] = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }

  uint64_t v27 = *(id *)sub_138E8(24);
  uint64_t v28 = v27;
  if (v27)
  {
    id v29 = (os_log_s *)v27;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      log = v29;
      unsigned int v30 = v477;
      memset(&v473, 0, sizeof(v473));
      std::string::append(&v473, "{ ", 2uLL);
      if (v30 != (uint64_t *)&v478)
      {
        while (1)
        {
          else {
            uint64_t v31 = (char *)v30[4];
          }
          sub_195860(v486, v31);
          sub_48E98(&v487, v486[1]);
          id v32 = std::string::insert(&v487, 0LL, "[", 1uLL);
          __n128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
          v32->__r_.__value_.__l.__size_ = 0LL;
          v32->__r_.__value_.__l.__cap_ = 0LL;
          v32->__r_.__value_.__r.__words[0] = 0LL;
          v34 = std::string::append(&__p, ", ", 2uLL);
          uint64_t v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          *(void *)&v496[16] = v34->__r_.__value_.__l.__cap_;
          *(_OWORD *)uint64_t v496 = v35;
          v34->__r_.__value_.__l.__size_ = 0LL;
          v34->__r_.__value_.__l.__cap_ = 0LL;
          v34->__r_.__value_.__r.__words[0] = 0LL;
          else {
            uint64_t v36 = (char *)v30[7];
          }
          sub_195860(v482, v36);
          sub_48E98(&cf, v482[1]);
          if ((v485 & 0x80u) == 0) {
            p_CFTypeRef cf = (const std::string::value_type *)&cf;
          }
          else {
            p_CFTypeRef cf = (const std::string::value_type *)cf;
          }
          if ((v485 & 0x80u) == 0) {
            uint64_t v38 = v485;
          }
          else {
            uint64_t v38 = (std::string::size_type)v484;
          }
          uint64_t v39 = std::string::append((std::string *)v496, p_cf, v38);
          int v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0LL;
          v39->__r_.__value_.__l.__cap_ = 0LL;
          v39->__r_.__value_.__r.__words[0] = 0LL;
          uint64_t v41 = std::string::append(&__dst, "]", 1uLL);
          id v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          id v481 = v41->__r_.__value_.__l.__cap_;
          *(_OWORD *)uint64_t v480 = v42;
          v41->__r_.__value_.__l.__size_ = 0LL;
          v41->__r_.__value_.__l.__cap_ = 0LL;
          v41->__r_.__value_.__r.__words[0] = 0LL;
          sub_39FD8(v482);
          if ((v496[23] & 0x80000000) != 0) {
            operator delete(*(void **)v496);
          }
          sub_39FD8(v486);
          if (v481 >= 0) {
            __int16 v43 = v480;
          }
          else {
            __int16 v43 = (CFTypeRef *)v480[0];
          }
          if (v481 >= 0) {
            int v44 = HIBYTE(v481);
          }
          else {
            int v44 = (std::string::size_type)v480[1];
          }
          std::string::append(&v473, (const std::string::value_type *)v43, v44);
          if (SHIBYTE(v481) < 0) {
            operator delete((void *)v480[0]);
          }
          CFTypeRef v45 = (uint64_t *)v30[1];
          if (v45)
          {
            do
            {
              unsigned int v46 = v45;
              CFTypeRef v45 = (uint64_t *)*v45;
            }

            while (v45);
          }

          else
          {
            do
            {
              unsigned int v46 = (uint64_t *)v30[2];
              uint64_t v300 = *v46 == (void)v30;
              unsigned int v30 = v46;
            }

            while (!v300);
          }

          std::string::append(&v473, ", ", 2uLL);
          unsigned int v30 = v46;
        }
      }

      std::string::append(&v473, " }", 2uLL);
      if ((v473.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v47 = &v473;
      }
      else {
        uint64_t v47 = (std::string *)v473.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3224;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v47;
      id v29 = log;
      _os_log_impl(&dword_0, log, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Macros = %s", buf, 0x1Cu);
    }
  }

  memset(buf, 0, 24);
  sub_7DCF4(buf, v479);
  uint64_t v48 = v477;
  if (v477 != (uint64_t *)&v478)
  {
    do
    {
      sub_7DD74(buf, (const UInt8 *)v48 + 32, (uint64_t)(v48 + 7));
      uint64_t v49 = (uint64_t *)v48[1];
      if (v49)
      {
        do
        {
          int v50 = v49;
          uint64_t v49 = (uint64_t *)*v49;
        }

        while (v49);
      }

      else
      {
        do
        {
          int v50 = (uint64_t *)v48[2];
          uint64_t v300 = *v50 == (void)v48;
          uint64_t v48 = v50;
        }

        while (!v300);
      }

      uint64_t v48 = v50;
    }

    while (v50 != (uint64_t *)&v478);
  }

  unsigned int v51 = sub_7C1F4((void ***)buf);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_7CFCC((void ***)&__dst);
  *(void *)uint64_t v496 = v51;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  char v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t, void))(*(void *)a1 + 112LL))( a1,  1685287015LL,  1835758191LL,  &__p,  8LL,  0LL);
  if ((_DWORD)v52)
  {
    int v53 = *(id *)sub_138E8(24);
    v54 = v53;
    if (v53)
    {
      __int16 v55 = (os_log_s *)v53;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&__dst, v52);
        int v56 = (__dst.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? &__dst
            : (std::string *)__dst.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3228;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v56;
        _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting custom macros on DSP returns error: %s",  buf,  0x1Cu);
      }
    }
  }

  if (v51) {
    CFRelease(v51);
  }
  sub_81390((uint64_t)v497);
  sub_832CC(v478);
LABEL_152:
  *(void *)buf = a1 + 48;
  buf[8] = 1;
  sub_190270(a1 + 48);
  uint64_t v57 = *(void *)(a1 + 24);
  __int16 v58 = *(void *)(a1 + 32);
  while (v57 != v58)
  {
    int v59 = (*(uint64_t (**)(void))(**(void **)(v57 + 8) + 16LL))(*(void *)(v57 + 8));
    if ((_DWORD)v59)
    {
      sub_19032C(buf);
      uint64_t v438 = sub_138E8(13);
      id v439 = sub_8C7D4(1, *(void **)v438, *(void *)(v438 + 8));
      v440 = (void *)objc_claimAutoreleasedReturnValue(v439);
      v441 = v440;
      if (v440)
      {
        unsigned int v442 = v440;
        if (os_log_type_enabled(v442, OS_LOG_TYPE_ERROR))
        {
          v443 = (void *)(a1 + 712);
          sub_2CA1C(&__dst, v59);
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 613;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v443;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = p_dst;
          _os_log_impl( &dword_0,  v442,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Failed to initialize DSP chain %s. Error: %s",  buf,  0x26u);
        }
      }

      id v445 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v445, "Failed to initialize DSP chain %s. Error: %s");
      goto LABEL_803;
    }

    v57 += 24LL;
  }

  sub_19032C(buf);
  (*(void (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
  __int16 v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, 1936747629LL);
  *(_BYTE *)(a1 + 796) = v60;
  if (a2)
  {
    if (v60)
    {
      uint64_t v61 = *(void *)(a1 + 776);
      __int16 v62 = *(std::__shared_weak_count **)(v61 + 24);
      int v63 = 0.0;
      if (v62 && (__int16 v64 = std::__shared_weak_count::lock(v62), (*(void *)&buf[8] = v64) != 0LL))
      {
        v66 = v64;
        uint64_t v67 = *(void *)(v61 + 16);
        *(void *)buf = v67;
        if (v67)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          v65.n128_f64[0] = sub_200938(*(unsigned int *)(v67 + 144), *(void *)(v67 + 192), &__dst);
          int v2 = v68;
          id v465 = __dst.__r_.__value_.__s.__data_[0] != 0;
          if (__dst.__r_.__value_.__s.__data_[0]) {
            int v63 = v65.n128_f64[0];
          }
          else {
            int v63 = 0.0;
          }
        }

        else
        {
          id v465 = 0;
        }

        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v350 = __ldaxr(p_shared_owners);
        while (__stlxr(v350 - 1, p_shared_owners));
        if (!v350)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v65);
          std::__shared_weak_count::__release_weak(v66);
        }
      }

      else
      {
        id v465 = 0;
      }
    }

    else
    {
      id v465 = 0;
      int v63 = 0.0;
    }

    unsigned int v69 = (int *)a2[21];
    uint64_t v70 = (int *)a2[22];
    if (v69 != v70)
    {
      while (1)
      {
        if (!*(void *)v69)
        {
          v446 = sub_138E8(13);
          v447 = sub_8C7D4(1, *(void **)v446, *(void *)(v446 + 8));
          uint64_t v448 = (os_log_s *)objc_claimAutoreleasedReturnValue(v447);
          id v449 = v448;
          if (v448 && os_log_type_enabled(v448, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 793;
            _os_log_impl( &dword_0,  v449,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Given a null SW volume property!",  buf,  0x12u);
          }

          id v445 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v445, "Given a null SW volume property!");
LABEL_803:
        }

        int v71 = (*(uint64_t (**)(void))(**(void **)v69 + 16LL))(*(void *)v69);
        uint64_t v72 = sub_19556C(a1, v71, v69[4]);
        if (v72) {
          break;
        }
        uint64_t v79 = *(id *)sub_138E8(24);
        uint64_t v80 = v79;
        if (v79)
        {
          char v81 = (os_log_s *)v79;
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            id v82 = (*(uint64_t (**)(void))(**(void **)v69 + 16LL))(*(void *)v69);
            sub_2CA1C(&__dst, v82);
            int v83 = &__dst;
            if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v83 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 824;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v83;
            *(_WORD *)&_BYTE buf[28] = 2048;
            *(void *)&buf[30] = a1;
            _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ***** VolumeCommand: volume processor type not found '%s' in dspchain: %p",  buf,  0x26u);
          }
        }

LABEL_281:
        v69 += 6;
        if (v69 == v70) {
          goto LABEL_310;
        }
      }

      unsigned int v73 = *(void *)v69;
      if (v465)
      {
        sub_195658(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
        *(_OWORD *)id v497 = *(_OWORD *)buf;
        if (*(void *)&buf[8])
        {
          unsigned int v74 = (unint64_t *)(*(void *)&buf[8] + 16LL);
          do
            uint64_t v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }

        (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *, double, double))(*(void *)v73 + 8LL))( &__p,  v73,  v497,  v63,  v2);
        if (*(void *)&v497[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v497[8]);
        }
        uint64_t v76 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          char v77 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            uint64_t v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
LABEL_195:
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }

      else
      {
        sub_195658(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
        *(_OWORD *)uint64_t v496 = *(_OWORD *)buf;
        if (*(void *)&buf[8])
        {
          int v84 = (unint64_t *)(*(void *)&buf[8] + 16LL);
          do
            int v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }

        (**(void (***)(std::string *__return_ptr, uint64_t, _BYTE *))v73)(&__p, v73, v496);
        if (*(void *)&v496[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v496[8]);
        }
        uint64_t v76 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          unsigned int v86 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            uint64_t v78 = __ldaxr(v86);
          while (__stlxr(v78 - 1, v86));
          goto LABEL_195;
        }
      }

      if ((*(unsigned int (**)(void))(**(void **)v69 + 16LL))(*(void *)v69) == 1685287015)
      {
        uint64_t v87 = (*(uint64_t (**)(void))(**(void **)v69 + 24LL))(*(void *)v69);
        int v88 = v87;
        int v89 = qword_48F5A8;
        if (!qword_48F5A8) {
          goto LABEL_209;
        }
        unsigned int v90 = &qword_48F5A8;
        do
        {
          unsigned int v91 = *(_DWORD *)(v89 + 32);
          unsigned int v92 = v91 >= v87;
          if (v91 >= v87) {
            unsigned int v93 = (uint64_t *)v89;
          }
          else {
            unsigned int v93 = (uint64_t *)(v89 + 8);
          }
          if (v92) {
            unsigned int v90 = (uint64_t *)v89;
          }
          int v89 = *v93;
        }

        while (*v93);
        if (v90 != &qword_48F5A8 && v87 >= *((_DWORD *)v90 + 8))
        {
          unsigned int v95 = (const char *)v90[5];
          uint64_t v94 = v90[6];
        }

        else
        {
LABEL_209:
          uint64_t v94 = 0LL;
          unsigned int v95 = 0LL;
        }

        unsigned int v96 = *(id *)sub_138E8(24);
        uint64_t v97 = v96;
        if (v96)
        {
          BOOL v98 = (os_log_s *)v96;
          if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v99 = __p.__r_.__value_.__r.__words[0];
            if (v88 == -1)
            {
              int v101 = (std::string *)"unused";
            }

            else
            {
              uint64_t v100 = (*(uint64_t (**)(void))(**(void **)v69 + 24LL))(*(void *)v69);
              sub_2CA1C(&v487, v100);
              int v101 = &v487;
              if ((v487.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                int v101 = (std::string *)v487.__r_.__value_.__r.__words[0];
              }
            }

            *(_DWORD *)buf = 136316162;
            __n128 v105 = "Not found";
            if (v94) {
              __n128 v105 = v95;
            }
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 805;
            *(_WORD *)&_BYTE buf[18] = 2048;
            *(void *)&buf[20] = v99;
            *(_WORD *)&_BYTE buf[28] = 2080;
            *(void *)&buf[30] = v101;
            *(_WORD *)&buf[38] = 2080;
            *(void *)&buf[40] = v105;
            _os_log_impl( &dword_0,  v98,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ***** VolumeCommand: software volume command %p is graph based, corresponding graph property is '%s' with box name '%s'",  buf,  0x30u);
          }
        }

        unsigned int v106 = __p.__r_.__value_.__r.__words[0];
        uint64_t v107 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 152LL))(v72);
        uint64_t v108 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 144LL))(v72);
        (*(void (**)(std::string::size_type, uint64_t, uint64_t, const char *, uint64_t))(*(void *)v106 + 176LL))( v106,  v107,  v108,  v95,  v94);
      }

      else
      {
        unsigned int v102 = __p.__r_.__value_.__r.__words[0];
        unint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 152LL))(v72);
        unint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 144LL))(v72);
        (*(void (**)(std::string::size_type, uint64_t, uint64_t, void, void))(*(void *)v102 + 176LL))( v102,  v103,  v104,  0LL,  0LL);
      }

      char v109 = *(id *)sub_138E8(24);
      uint64_t v110 = v109;
      if (v109)
      {
        uint64_t v111 = (os_log_s *)v109;
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v112 = __p.__r_.__value_.__r.__words[0];
          char v113 = (*(uint64_t (**)(void))(**(void **)v69 + 16LL))(*(void *)v69);
          sub_2CA1C(&__dst, v113);
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v114 = &__dst;
          }
          else {
            uint64_t v114 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          float v115 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 144LL))(v72);
          float v116 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 136LL))(__p.__r_.__value_.__r.__words[0]);
          *(_DWORD *)buf = 136316674;
          unsigned int v117 = "Decibel";
          if (v116 == 1935895666) {
            unsigned int v117 = "Scalar";
          }
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 813;
          *(_WORD *)&_BYTE buf[18] = 2048;
          *(void *)&buf[20] = v112;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = v114;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = a1;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v115;
          *(_WORD *)&buf[54] = 2080;
          int v494 = v117;
          _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ***** VolumeCommand: created software volume command %p for processor type '%s' in dspchain: %p in stance id: %u volume unit type: %s",  buf,  0x40u);
        }
      }

      int v118 = *(int64x2_t **)(a1 + 1040);
      if (!v118)
      {
        unsigned int v119 = operator new(0xA8uLL);
        sub_195658(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
        uint64_t v120 = *(_OWORD *)buf;
        if (*(void *)&buf[8])
        {
          int v121 = (unint64_t *)(*(void *)&buf[8] + 16LL);
          do
            int v122 = __ldxr(v121);
          while (__stxr(v122 + 1, v121));
          do
            __n128 v123 = __ldxr(v121);
          while (__stxr(v123 + 1, v121));
        }

        sub_2BCE7C((uint64_t)v119, 1684234860, v120, *((std::__shared_weak_count **)&v120 + 1));
        if (*((void *)&v120 + 1)) {
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
        }
        *(void *)unsigned int v119 = off_47B570;
        *((_OWORD *)v119 + 8) = 0u;
        *((_OWORD *)v119 + 9) = 0u;
        *((_BYTE *)v119 + 160) = 0;
        v124 = (std::__shared_weak_count *)operator new(0x20uLL);
        v124->__shared_owners_ = 0LL;
        uint64_t v125 = (unint64_t *)&v124->__shared_owners_;
        v124->__vftable = (std::__shared_weak_count_vtbl *)&off_473D90;
        v124->__shared_weak_owners_ = 0LL;
        v124[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
        uint64_t v126 = (std::__shared_weak_count *)*((void *)v119 + 2);
        if (!v126)
        {
          do
            uint64_t v130 = __ldxr(v125);
          while (__stxr(v130 + 1, v125));
          p_shared_weak_owners = (unint64_t *)&v124->__shared_weak_owners_;
          do
            signed int v132 = __ldxr(p_shared_weak_owners);
          while (__stxr(v132 + 1, p_shared_weak_owners));
          *((void *)v119 + 1) = v119;
          *((void *)v119 + 2) = v124;
          goto LABEL_253;
        }

        if (v126->__shared_owners_ == -1)
        {
          do
            char v127 = __ldxr(v125);
          while (__stxr(v127 + 1, v125));
          uint64_t v128 = (unint64_t *)&v124->__shared_weak_owners_;
          do
            uint64_t v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
          *((void *)v119 + 1) = v119;
          *((void *)v119 + 2) = v124;
          std::__shared_weak_count::__release_weak(v126);
          do
LABEL_253:
            int v133 = __ldaxr(v125);
          while (__stlxr(v133 - 1, v125));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }

        *(void *)&unsigned int v134 = v119;
        *((void *)&v134 + 1) = v124;
        CFTypeRef v135 = *(std::__shared_weak_count **)(a1 + 1048);
        *(_OWORD *)(a1 + 1040) = v134;
        if (!v135) {
          goto LABEL_260;
        }
        unsigned int v136 = (unint64_t *)&v135->__shared_owners_;
        do
          uint64_t v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
          if (*((void *)&v120 + 1)) {
LABEL_261:
          }
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
        }

        else
        {
LABEL_260:
          if (*((void *)&v120 + 1)) {
            goto LABEL_261;
          }
        }

        int v138 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          CFMutableDictionaryRef v139 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unsigned int v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }

        int v118 = *(int64x2_t **)(a1 + 1040);
      }

      if (v118[8].i64[0] != v118[8].i64[1] && !v118[10].i8[0])
      {
        uint64_t v141 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 136LL))(__p.__r_.__value_.__r.__words[0]);
      }

      id v142 = (std::string::size_type *)v118[8].i64[0];
      v143 = (std::string::size_type *)v118[8].i64[1];
      if (v142 == v143)
      {
        size_t v144 = (std::string::size_type *)v118[8].i64[0];
      }

      else
      {
        size_t v144 = (std::string::size_type *)v118[8].i64[0];
        while (*v144 != __p.__r_.__value_.__r.__words[0])
        {
          if (++v144 == v143)
          {
            size_t v144 = (std::string::size_type *)v118[8].i64[1];
            break;
          }
        }
      }

      if (v144 == v143)
      {
        int v146 = v118[9].u64[0];
        if ((unint64_t)v143 >= v146)
        {
          id v149 = v143 - v142;
          uint64_t v150 = v146 - (void)v142;
          v151 = v150 >> 2;
          else {
            char v152 = v151;
          }
          if (v152)
          {
            if (v152 >> 61) {
              sub_7A8C4();
            }
            unint64_t v153 = (char *)operator new(8 * v152);
          }

          else
          {
            unint64_t v153 = 0LL;
          }

          uint64_t v154 = (std::string::size_type *)&v153[8 * v149];
          uint64_t v155 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0LL;
          *uint64_t v154 = v155;
          v148 = v154 + 1;
          unsigned int v157 = (void *)v118[8].i64[0];
          unsigned int v156 = (void *)v118[8].i64[1];
          if (v156 == v157)
          {
            unsigned int v159 = vdupq_n_s64((unint64_t)v156);
          }

          else
          {
            do
            {
              int v158 = *--v156;
              *unsigned int v156 = 0LL;
              *--uint64_t v154 = v158;
            }

            while (v156 != v157);
            unsigned int v159 = v118[8];
          }

          v118[8].i64[0] = (uint64_t)v154;
          v118[8].i64[1] = (uint64_t)v148;
          v118[9].i64[0] = (uint64_t)&v153[8 * v152];
          unsigned int v161 = (void *)v159.i64[1];
          unsigned int v160 = (void *)v159.i64[0];
          while (v161 != v160)
          {
            unsigned int v163 = *--v161;
            std::string::value_type v162 = v163;
            *unsigned int v161 = 0LL;
            if (v163) {
              (*(void (**)(uint64_t))(*(void *)v162 + 8LL))(v162);
            }
          }

          if (v160) {
            operator delete(v160);
          }
        }

        else
        {
          int v147 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0LL;
          os_log_s *v143 = v147;
          v148 = v143 + 1;
        }

        v118[8].i64[1] = (uint64_t)v148;
        unsigned int v164 = (os_log_t *)sub_138E8(18);
        uint64_t v165 = *v164;
        if (*v164 && os_log_type_enabled(*v164, OS_LOG_TYPE_DEFAULT))
        {
          int v166 = *(void *)(v118[8].i64[1] - 8);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 659;
          *(_WORD *)&_BYTE buf[18] = 2048;
          *(void *)&buf[20] = v166;
          *(_WORD *)&_BYTE buf[28] = 2048;
          *(void *)&buf[30] = v118;
          _os_log_impl( &dword_0,  v165,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VolumeCommand: added volume command: %p into aggregate command: %p",  buf,  0x26u);
        }
      }

      int v145 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0LL;
      if (v145) {
        (*(void (**)(std::string::size_type))(*(void *)v145 + 8LL))(v145);
      }
      goto LABEL_281;
    }

      ++v6;
    }

    while (v6 != v7);
  }

  return 0LL;
}

      if (*(_BYTE *)(v53 + 4)) {
        int v63 = (_DWORD *)v53;
      }
      else {
        int v63 = &buf[16];
      }
      *(_DWORD *)&buf[16] = *v63;
      if (*(_DWORD *)&buf[16] == 1) {
        goto LABEL_81;
      }
      __int16 v64 = (os_log_t *)sub_138E8(13);
      uint64_t v65 = *v64;
      if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int v93 = 136315394;
        *(void *)&v93[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&v93[12] = 1024;
        *(_DWORD *)&v93[14] = 789;
        _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Logic error: a proper software volume mode was not specified in the routing database",  v93,  0x12u);
      }

      if (*(_DWORD *)&buf[16])
      {
LABEL_81:
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 304LL))(v93, a2, a3);
        uint64_t v67 = *(void *)v93;
        v66 = *(void *)&v93[8];
        *(void *)unsigned int v93 = 0LL;
        *(void *)&v93[8] = 0LL;
        unsigned int v68 = *(std::__shared_weak_count **)&v97[12];
        *(void *)&v97[4] = v67;
        *(void *)&v97[12] = v66;
        if (v68)
        {
          std::__shared_weak_count::__release_weak(v68);
          if (*(void *)&v93[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v93[8]);
          }
          v66 = *(void *)&v97[12];
        }

        if (!v66 || *(void *)(v66 + 8) == -1LL)
        {
          unsigned int v69 = (os_log_t *)sub_138E8(19);
          uint64_t v70 = *v69;
          if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int v93 = 136315394;
            *(void *)&v93[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&v93[12] = 1024;
            *(_DWORD *)&v93[14] = 798;
            _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing database specified SW volume but no SW volume is associated with the aggregate device... falling back to HW-only volume",  v93,  0x12u);
          }

          *(_DWORD *)&buf[16] = 0;
        }

        else if (*(_DWORD *)&buf[16] == 1)
        {
          if (*(_BYTE *)(v53 + 12)) {
            *(double *)buf = *(float *)(v53 + 8);
          }
          if (*(_BYTE *)(v53 + 20)) {
            *(double *)&buf[8] = *(float *)(v53 + 16);
          }
          if (*(_BYTE *)(v53 + 40)) {
            unsigned int v92 = *(_OWORD *)(v53 + 24);
          }
        }
      }
    }
  }

  (*(void (**)(uint64_t, __int128 *, uint64_t, _BYTE *, void))(*(void *)a1 + 80LL))( a1,  &v92,  0x100000000LL,  buf,  0LL);
  if (v102 && (int v71 = *(float *)&v101[2], (sub_1B4AFC(*(_DWORD *)(a3 + 144), *(_DWORD *)(a3 + 264)) & 1) == 0))
  {
    *(float *)&__p.__r_.__value_.__l.__data_ = v71;
    if ((*(unsigned int (**)(uint64_t, float))(*(void *)a1 + 112LL))(a1, v71))
    {
      strcpy(v93, "dlovbolg");
      v93[9] = 0;
      *(_WORD *)&v93[10] = 0;
      (*(void (**)(uint64_t, _BYTE *, void, void, uint64_t, std::string *))(*(void *)a1 + 48LL))( a1,  v93,  0LL,  0LL,  4LL,  &__p);
    }
  }

  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    uint64_t v72 = sub_138E8(19);
    unsigned int v73 = sub_138E8(38);
    unsigned int v74 = 0;
    uint64_t v75 = 0LL;
    *(void *)unsigned int v93 = 0x100000002LL;
    uint64_t v76 = *(void *)(v72 + 8);
    while (1)
    {
      char v77 = *(int *)&v93[4 * v75];
      uint64_t v78 = v74;
      if (((v76 & v77) != 0) != ((*(void *)(v73 + 8) & v77) != 0)) {
        break;
      }
      unsigned int v74 = 1;
      uint64_t v75 = 1LL;
      if ((v78 & 1) != 0) {
        goto LABEL_106;
      }
    }

    if ((v76 & v77) == 0) {
      uint64_t v72 = v73;
    }
LABEL_106:
    uint64_t v79 = *(os_log_s **)v72;
    if (v79 && os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unsigned int v93 = 136315394;
      *(void *)&v93[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&v93[12] = 1024;
      *(_DWORD *)&v93[14] = 844;
      _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Skipped setting device input volume in decibels: the routing database did not request it and there was no default to define the value.",  v93,  0x12u);
    }
  }

  if (*(void *)&v97[12]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v97[12]);
  }
}

    int v2 = ++*((void *)&v38 + 1);
LABEL_74:
    ++v3;
  }

  while (v3 != 47);
  unsigned int v30 = sub_56120();
  if (__p[1])
  {
    uint64_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      id v32 = v30;
    }

    else
    {
      id v32 = (LODWORD(__p[1]) - 1) & v30;
    }

    k = (uint64_t *)*((void *)__p[0] + v32);
    if (k)
    {
      for (k = (uint64_t *)*k; k; k = (uint64_t *)*k)
      {
        v34 = k[1];
        if (v34 == v30)
        {
          if (*((_DWORD *)k + 4) == v30) {
            break;
          }
        }

        else
        {
          if (v31.u32[0] > 1uLL)
          {
          }

          else
          {
            v34 &= (unint64_t)__p[1] - 1;
          }

          if (v34 != v32) {
            goto LABEL_102;
          }
        }
      }
    }
  }

  else
  {
LABEL_102:
    k = 0LL;
  }

  uint64_t v35 = k == 0LL;
  sub_83284((uint64_t)__p);
  return v35;
}

  sub_263084(a2, a3);
  v54 = sub_264118(*(unsigned int *)(a3 + 8));
  __int16 v55 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)buf = v55;
  *(_WORD *)&buf[8] = 257;
  uint64_t v80 = v55;
  char v81 = 257;
  if (v55) {
    CFRetain(v55);
  }
  sub_13850((uint64_t)buf);
  *a1 = v54;
  sub_13888(v77, (uint64_t)&v80);
  sub_13850((uint64_t)&v80);
  int v56 = *(id *)sub_138E8(2);
  if (v56)
  {
    unsigned int v46 = (os_log_s *)v56;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      sub_1548D4(&__p, *a1);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v57 = &__p;
      }
      else {
        uint64_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      __int16 v58 = *a1;
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3902;
      unsigned int v90 = 2080;
      *(void *)unsigned int v91 = v57;
      *(_WORD *)&v91[8] = 1024;
      *(_DWORD *)&v91[10] = v58;
      uint64_t v48 = "%25s:%-5d Route change failed. Returning result: %s (%u).";
      int v59 = v46;
      __int16 v60 = 34;
LABEL_125:
      _os_log_impl(&dword_0, v59, OS_LOG_TYPE_DEBUG, v48, buf, v60);
    }

        *(double *)buf = *(v27 - 6);
        *(_DWORD *)&buf[8] = v32;
        *(_DWORD *)&_BYTE buf[12] = v33;
        *(double *)__int16 v16 = *(v27 - 4);
        *((_DWORD *)v16 + 2) = *((_DWORD *)v27 - 6);
        *(_DWORD *)&_BYTE buf[28] = v34;
        *(void *)uint64_t v80 = v35;
        *(double *)&v80[8] = v36;
        *(double *)&v80[16] = v37;
        uint64_t v26 = v35;
        if (v31 != 0.0 && v19 != 0.0 && v31 != v19
          || v32 && v6 != 0 && v32 != v6
          || *(_DWORD *)&buf[16] && v20 && *(_DWORD *)&buf[16] != v20
          || *(_DWORD *)&buf[20] && v21 && *(_DWORD *)&buf[20] != v21
          || *(_DWORD *)&buf[24] && v22 && *(_DWORD *)&buf[24] != v22
          || v34 && v9 && v34 != v9
          || (_DWORD)v35 && v8 && (_DWORD)v35 != v8)
        {
          id v29 = v37;
          unsigned int v30 = v36;
          id v25 = v34;
          uint64_t v23 = v33;
          uint64_t v24 = v32;
        }

        else
        {
          uint64_t v72 = v22;
          unsigned int v73 = v21;
          unsigned int v74 = v20;
          uint64_t v75 = v16;
          uint64_t v76 = v15;
          char v77 = a4;
          uint64_t v78 = result;
          else {
            __int16 v64 = 0;
          }
          id v29 = v37;
          unsigned int v30 = v36;
          id v25 = v34;
          uint64_t v23 = v33;
          uint64_t v24 = v32;
          a4 = v77;
          uint64_t result = v78;
          __int16 v16 = v75;
          int v15 = v76;
          int v21 = v73;
          int v20 = v74;
          int v22 = v72;
          if (v64) {
            break;
          }
        }

  ++qword_49D378;
LABEL_74:
  sub_28AD44((void **)i + 3, v5);
  return sub_19032C(&v33);
}

        CFTypeRef v45 = i;
        int v44 = a1[92];
        if (v45 >= (a1[93] - v44) >> 3) {
          return;
        }
      }

      char v52 = (os_log_t *)sub_138E8(16);
      int v53 = *v52;
      if (!*v52 || !os_log_type_enabled(*v52, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v62 = 1024;
      int v63 = 1560;
      __int16 v64 = 1024;
      LODWORD(v65[0]) = i - 1;
      int v50 = v53;
      unsigned int v51 = "%25s:%-5d Underlying output stream [%u] is not used in this AggregateDevice.";
      goto LABEL_72;
    }
  }

    *a1 = v60;
    a1[1] = v30;
    a1[2] = (char **)(v21 + 8 * v22);
    if (v8)
    {
      __int16 v64 = v8;
LABEL_75:
      operator delete(v64);
      goto LABEL_76;
    }

    goto LABEL_76;
  }

  v40[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_7EC6C((uint64_t)v40);
  return i;
}

                    memset(v162.__m_.__opaque, 0, sizeof(v162.__m_.__opaque));
                    v162.__m_.__sig = 850045863LL;
                    memset(v163.__cv_.__opaque, 0, sizeof(v163.__cv_.__opaque));
                    v163.__cv_.__sig = 1018212795LL;
                    LOBYTE(v106) = 0;
                    sub_7D684(&__p, v18, &inAddress, (uint64_t)&v163, (uint64_t)&v162, (uint64_t)&v106);
                    id v37 = 2000LL;
                    while (1)
                    {
                      sub_2E1C14((uint64_t)&v138, (uint64_t)&v130);
                      uint64_t v38 = v138;
                      if (v141)
                      {
                        uint64_t v39 = 1;
                        LODWORD(v25) = v141;
                        if (!v138) {
                          goto LABEL_97;
                        }
                        goto LABEL_96;
                      }

                      memset(v115, 0, 24);
                      int v40 = v139;
                      uint64_t v41 = (v139 - (uint64_t)v138) >> 2;
                      sub_7A5B8(v115, v138, v139, v41);
                      __s2 = 0uLL;
                      v148 = 0LL;
                      sub_7A5B8(&__s2, *a2, (uint64_t)a2[1], a2[1] - *a2);
                      id v42 = *(void **)v115;
                      __int16 v43 = (void *)__s2;
                      if (*(void *)&v115[8] - *(void *)v115 != *((void *)&__s2 + 1) - (void)__s2) {
                        break;
                      }
                      int v44 = memcmp(*(const void **)v115, (const void *)__s2, *(void *)&v115[8] - *(void *)v115) == 0;
                      if (v43) {
                        goto LABEL_81;
                      }
LABEL_82:
                      if (v42)
                      {
                        *(void *)&v115[8] = v42;
                        operator delete(v42);
                      }

                      if (v44)
                      {
                        uint64_t v39 = 12;
                        if (!v38) {
                          goto LABEL_97;
                        }
                        goto LABEL_96;
                      }

                      if (v37 > 0)
                      {
                        v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                        unsigned int v46 = sub_138E8(13);
                        if ((*(_BYTE *)(v46 + 8) & 1) != 0)
                        {
                          uint64_t v47 = *(os_log_s **)v46;
                          if (*(void *)v46)
                          {
                            if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
                            {
                              buf.mSelector = 136315906;
                              *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                              char v152 = 1024;
                              unint64_t v153 = 257;
                              uint64_t v154 = 2080;
                              *(void *)uint64_t v155 = "with timeout";
                              *(_WORD *)&v155[8] = 1024;
                              *(_DWORD *)&v155[10] = v18;
                              _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
                            }
                          }
                        }

                        sub_6DD4();
                        *(void *)&buf.mSelector = &qword_48F828;
                        LOBYTE(buf.mElement) = 0;
                        LOBYTE(buf.mElement) = sub_1A30E4();
                        __lk[0].__m_ = &v162;
                        __lk[0].__owns_ = 1;
                        std::mutex::lock(&v162);
                        v48.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                        if ((_BYTE)v106)
                        {
LABEL_93:
                          if (__lk[0].__owns_) {
                            std::mutex::unlock(__lk[0].__m_);
                          }
                          sub_7D790((uint64_t)&buf);
                          uint64_t v39 = 0;
                          v37 += (std::chrono::system_clock::now().__d_.__rep_ - v45.__d_.__rep_) / -1000;
                          if (!v38) {
                            goto LABEL_97;
                          }
                          goto LABEL_96;
                        }

                        __int16 v55 = v48.__d_.__rep_ + 1000000 * v37;
                        while (2)
                        {
                          if (v55 <= std::chrono::steady_clock::now().__d_.__rep_) {
                            goto LABEL_93;
                          }
                          v56.__d_.__rep_ = v55 - std::chrono::steady_clock::now().__d_.__rep_;
                          if (v56.__d_.__rep_ >= 1)
                          {
                            std::chrono::steady_clock::now();
                            v57.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                            if (!v57.__d_.__rep_)
                            {
                              __int16 v58 = 0LL;
                              goto LABEL_117;
                            }

                            if (v57.__d_.__rep_ < 1)
                            {
                              __int16 v58 = 0x8000000000000000LL;
                            }

                            else
                            {
                              if ((unint64_t)v57.__d_.__rep_ > 0x20C49BA5E353F7LL)
                              {
                                __int16 v58 = 0x7FFFFFFFFFFFFFFFLL;
                                goto LABEL_117;
                              }

LABEL_129:
LABEL_130:
            uint64_t v48 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v48 = &off_4865A0;
            v48[2] = 561211770;
          }

    if (v12 == v13) {
      goto LABEL_130;
    }
    goto LABEL_182;
  }

  if (v12 > 1952998001)
  {
    if (v12 <= 1969844081)
    {
      if (v12 <= 1953002353)
      {
        if (v12 == 1952998002)
        {
          sub_A3870((uint64_t)a1, 1952998002, *(_DWORD *)(a2 + 4), a3, (int *)a4, a5, (CFDictionaryRef *)a6);
          goto LABEL_137;
        }

        uint64_t v13 = 1953002093;
        goto LABEL_129;
      }

      if (v12 == 1953002354) {
        goto LABEL_130;
      }
      if (v12 == 1953719148)
      {
        sub_A29D0((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (uint64_t)a5, (float *)a6);
        goto LABEL_137;
      }

      goto LABEL_182;
    }

    if (v12 <= 1986225267)
    {
      if (v12 == 1969844082)
      {
        sub_A5EDC(a1, 1969844082, *(_DWORD *)(a2 + 4), a5, a6);
        goto LABEL_137;
      }

      uint64_t v13 = 1986225266;
      goto LABEL_129;
    }

    if (v12 == 1986225268) {
      goto LABEL_130;
    }
    if (v12 != 1986361444)
    {
      uint64_t v13 = 2004053366;
      goto LABEL_129;
    }

    id v19 = (*(float (**)(AudioObjectID *, uint64_t, uint64_t, void))(*(void *)a1 + 360LL))( a1,  1818521197LL,  40LL,  0LL);
    goto LABEL_154;
  }

  if (v12 > 1936879203)
  {
    if (v12 <= 1937204589)
    {
      if (v12 == 1936879204)
      {
        sub_A251C((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (unsigned int *)a5, a6);
        goto LABEL_137;
      }

      uint64_t v13 = 1937138532;
      goto LABEL_129;
    }

    if (v12 == 1937204590) {
      goto LABEL_130;
    }
    if (v12 == 1952997988)
    {
      sub_A3254((uint64_t)a1, (unsigned int *)a2, a3, (int *)a4, a5, (CFDictionaryRef *)a6);
      goto LABEL_137;
    }

    goto LABEL_182;
  }

  if (v12 > 1936876402)
  {
    if (v12 == 1936876403) {
      goto LABEL_130;
    }
    if (v12 == 1936876644)
    {
      sub_A21C4((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (unsigned int *)a5, (uint64_t)a6);
      goto LABEL_137;
    }

    goto LABEL_182;
  }

  if (v12 == 1935962992)
  {
    sub_A6E14((uint64_t)a1, a5, (CFDictionaryRef *)a6);
    goto LABEL_137;
  }

  if (v12 != 1936744803) {
    goto LABEL_182;
  }
  *a6 = 0;
  LODWORD(__p) = 0;
  LODWORD(v74) = 0;
  uint64_t v70 = 4;
  int v71 = 4;
  if (!sub_A81F4(*((void *)a1 + 68), *((void *)a1 + 69), 21LL, (uint64_t)&v74, (uint64_t)&v70))
  {
    *a6 = (_DWORD)v74 == 0;
    int v15 = sub_A81F4(*((void *)a1 + 68), *((void *)a1 + 69), 64004LL, (uint64_t)&__p, (uint64_t)&v71);
    if (!(v15 | __p))
    {
      __int16 v16 = (os_log_t *)sub_138E8(16);
      uint64_t v17 = *v16;
      if (*v16)
      {
        if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1609;
          uint64_t v18 = "%25s:%-5d Closed loop speaker protection not present. Defaulting to open loop protection.";
LABEL_124:
          _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)buf, 0x12u);
        }
      }
    }
  }

  if (v68 > 1937007471)
  {
    if (v68 != 1937007472 && v68 != 2003133037)
    {
      uint64_t v111 = 2003133027;
LABEL_136:
      if (v68 != v111) {
        goto LABEL_138;
      }
    }
  }

  else if (v68 != 1835229549 && v68 != 1936745328)
  {
    uint64_t v111 = 1936749157;
    goto LABEL_136;
  }

  sub_265144((uint64_t)v898);
LABEL_138:
  uint64_t v112 = *v903;
  if (*v903) {
    CFRetain(*v903);
  }
  sub_3617C(&v962, v112);
  if (!v962.__r_.__value_.__r.__words[0])
  {
    uint64_t v852 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v852, "Could not construct");
  }

  char v113 = (const __CFArray *)sub_475EC((const __CFDictionary *)v962.__r_.__value_.__l.__data_, "sub-port preferences");
  if (v113 && (float v115 = v113, TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v115)))
  {
    unsigned int v117 = CFArrayGetCount(v115);
    memset(v963, 0, 24);
    sub_2680A8(v963, v117);
    if (v117 < 1)
    {
LABEL_163:
      uint64_t v943 = *(_OWORD *)v963;
      id v944 = *(void *)&v963[16];
      memset(v963, 0, 24);
      v945 = 1;
    }

    else
    {
      int v118 = 0LL;
      unsigned int v119 = v117;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v115, v118);
        int v121 = ValueAtIndex;
        if (!ValueAtIndex) {
          break;
        }
        CFRetain(ValueAtIndex);
        int v122 = CFGetTypeID(v121);
        if (v122 != CFDictionaryGetTypeID())
        {
          CFRelease(v121);
          break;
        }

        *(void *)v964 = v121;
        v964[8] = 1;
        __n128 v123 = *(void **)&v963[8];
        if (*(void *)&v963[8] >= *(void *)&v963[16])
        {
          v124 = *(void **)v963;
          uint64_t v125 = (uint64_t)(*(void *)&v963[8] - *(void *)v963) >> 3;
          uint64_t v126 = v125 + 1;
          char v127 = *(void *)&v963[16] - *(void *)v963;
          else {
            uint64_t v128 = v126;
          }
          *(void *)&v965[32] = &v963[16];
          if (v128)
          {
            uint64_t v128 = (unint64_t)sub_7DC90(v128);
            __n128 v123 = *(void **)&v963[8];
            v124 = *(void **)v963;
            int v121 = *(const void **)v964;
          }

          else
          {
            uint64_t v129 = 0LL;
          }

          uint64_t v130 = (void *)(v128 + 8 * v125);
          char v131 = v128 + 8 * v129;
          *(void *)&v965[24] = v131;
          *uint64_t v130 = v121;
          signed int v132 = v130 + 1;
          *(void *)v964 = 0LL;
          *(void *)&v965[16] = v130 + 1;
          if (v123 != v124)
          {
            do
            {
              int v133 = *--v123;
              *--uint64_t v130 = v133;
              os_log_t *v123 = 0LL;
            }

            while (v123 != v124);
            signed int v132 = *(void **)&v965[16];
            char v131 = *(void *)&v965[24];
          }

          unsigned int v134 = *(_OWORD *)v963;
          *(void *)id v963 = v130;
          *(void *)&v963[8] = v132;
          *(_OWORD *)&v965[8] = v134;
          CFTypeRef v135 = *(void *)&v963[16];
          *(void *)&v963[16] = v131;
          *(void *)&v965[24] = v135;
          *(void *)v965 = v134;
          sub_AD86C((uint64_t)v965);
          *(void *)&v963[8] = v132;
        }

        else
        {
          **(void **)&v963[8] = v121;
          *(void *)v964 = 0LL;
          *(void *)&v963[8] = v123 + 1;
        }

        sub_8D530((uint64_t)v964);
        if (++v118 == v119) {
          goto LABEL_163;
        }
      }

      v964[0] = 0;
      v964[8] = 0;
      LOBYTE(v943) = 0;
      v945 = 0;
      sub_8D530((uint64_t)v964);
    }

    *(void *)v965 = v963;
    sub_AD8B8((void ***)v965);
  }

  else
  {
    LOBYTE(v943) = 0;
    v945 = 0;
  }

  if (v962.__r_.__value_.__r.__words[0]) {
    CFRelease(v962.__r_.__value_.__l.__data_);
  }
  if (v945)
  {
    *(void *)&v890 = *((void *)&v943 + 1);
    unsigned int v136 = (const __CFDictionary **)v943;
    if ((void)v943 == *((void *)&v943 + 1))
    {
      if (v899)
      {
        int v138 = sub_138E8(2);
        CFMutableDictionaryRef v139 = sub_138E8(34);
        unsigned int v140 = 0;
        uint64_t v141 = 0LL;
        *(void *)v965 = 0x100000002LL;
        id v142 = *(void *)(v138 + 8);
        while (1)
        {
          v143 = *(int *)&v965[4 * v141];
          size_t v144 = v140;
          if (((v142 & v143) != 0) != ((*(void *)(v139 + 8) & v143) != 0)) {
            break;
          }
          unsigned int v140 = 1;
          uint64_t v141 = 1LL;
          if ((v144 & 1) != 0) {
            goto LABEL_225;
          }
        }

        if ((v142 & v143) == 0) {
          int v138 = v139;
        }
LABEL_225:
        unsigned int v174 = *(id *)v138;
        uint64_t v175 = v174;
        if (v174)
        {
          uint64_t v176 = (os_log_s *)v174;
          if (os_log_type_enabled(v176, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2683;
            _os_log_impl( &dword_0,  v176,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Clearing all sub-port preferences:",  v965,  0x12u);
          }
        }
      }

      sub_265144((uint64_t)v898);
      goto LABEL_231;
    }

    if (v946 > 1937007471)
    {
      if (v946 == 1937007472 || v946 == 2003133027) {
        goto LABEL_231;
      }
      uint64_t v137 = 2003133037;
    }

    else
    {
      if (v946 == 1835229549 || v946 == 1936745328) {
        goto LABEL_231;
      }
      uint64_t v137 = 1936749157;
    }

    if (v946 == v137) {
      goto LABEL_231;
    }
    *(void *)&v963[16] = 0LL;
    *(void *)&v963[8] = 0LL;
    *(void *)id v963 = &v963[8];
    *(void *)&uint64_t v114 = 136315650LL;
    v881 = v114;
    while (1)
    {
      int v145 = (os_log_t *)sub_138E8(2);
      int v146 = *v145;
      if (*v145 && os_log_type_enabled(*v145, OS_LOG_TYPE_DEBUG))
      {
        int v147 = *v136;
        *(_DWORD *)v965 = v881;
        *(void *)&v965[4] = "PortTypes.cpp";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 44;
        *(_WORD *)&v965[18] = 2112;
        *(void *)&v965[20] = v147;
        _os_log_impl(&dword_0, v146, OS_LOG_TYPE_DEBUG, "%25s:%-5d Parsing sub port preference entry: %@", v965, 0x1Cu);
      }

      v148 = *v136;
      if (!*v136)
      {
        v835 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v835, "Could not construct");
      }

      id v149 = CFStringCreateWithBytes(0LL, (const UInt8 *)"port id", 7LL, 0x8000100u, 0);
      *(void *)v965 = v149;
      if (!v149)
      {
        v836 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v836, "Could not construct");
      }

      uint64_t v150 = (const __CFNumber *)CFDictionaryGetValue(v148, v149);
      CFRelease(v149);
      if (!v150)
      {
        v880 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v880, "Could not find item");
      }

      v151 = sub_8D7E0(v150);
      *(_DWORD *)v964 = v151;
      if (!*v136)
      {
        uint64_t v837 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v837, "Could not construct");
      }

      char v152 = (const __CFNumber *)sub_C7A84(*v136, "sub-port id");
      if (!v152)
      {
        id v838 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v838, "Could not find item");
      }

      LODWORD(v962.__r_.__value_.__l.__data_) = sub_8D7E0(v152);
      unint64_t v153 = *v136;
      if (!*v136)
      {
        v839 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v839, "Could not construct");
      }

      uint64_t v154 = CFStringCreateWithBytes(0LL, (const UInt8 *)"polar pattern", 13LL, 0x8000100u, 0);
      if (!v154)
      {
        char v173 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v173, "Could not construct");
      }

      uint64_t v155 = (const __CFNumber *)CFDictionaryGetValue(v153, v154);
      CFRelease(v154);
      if (v155) {
        unsigned int v156 = sub_36328(v155);
      }
      else {
        unsigned int v156 = 0LL;
      }
      unsigned int v157 = *(void *)&v963[8];
      if (!*(void *)&v963[8]) {
        goto LABEL_209;
      }
      int v158 = (uint64_t *)&v963[8];
      do
      {
        unsigned int v159 = (uint64_t *)v157;
        unsigned int v160 = v158;
        unsigned int v161 = *(_DWORD *)(v157 + 32);
        std::string::value_type v162 = (uint64_t *)(v157 + 8);
        if (v161 >= v151)
        {
          std::string::value_type v162 = v159;
          int v158 = v159;
        }

        unsigned int v157 = *v162;
      }

      while (v157);
      if (v158 != (uint64_t *)&v963[8] && (v161 >= v151 ? (unsigned int v163 = v159) : (unsigned int v163 = v160), v151 >= *((_DWORD *)v163 + 8)))
      {
        if (!BYTE4(v156))
        {
          if (v161 < v151) {
            unsigned int v159 = v160;
          }
          *((_DWORD *)v159 + 10) = v962.__r_.__value_.__l.__data_;
          goto LABEL_215;
        }

        uint64_t v172 = sub_238998((uint64_t **)v963, v151, v964);
        uint64_t v171 = sub_238A74((uint64_t **)v172 + 6, v962.__r_.__value_.__l.__data_, &v962);
      }

      else
      {
LABEL_209:
        data = v962.__r_.__value_.__l.__data_;
        *(_DWORD *)v965 = v962.__r_.__value_.__l.__data_;
        *(void *)&v965[16] = 0LL;
        *(void *)&v965[24] = 0LL;
        *(void *)&v965[8] = &v965[16];
        uint64_t v165 = sub_238998((uint64_t **)v963, v151, v964);
        uint64_t v167 = v165 + 56;
        int v166 = (void *)*((void *)v165 + 7);
        *((_DWORD *)v165 + 10) = *(_DWORD *)v965;
        sub_32C8C(v166);
        uint64_t v168 = *(void **)&v965[16];
        *((void *)v165 + 6) = *(void *)&v965[8];
        *((void *)v165 + 7) = v168;
        char v169 = *(void *)&v965[24];
        *((void *)v165 + 8) = *(void *)&v965[24];
        if (v169)
        {
          v168[2] = v167;
          *(void *)&v965[8] = &v965[16];
          *(void *)&v965[16] = 0LL;
          *(void *)&v965[24] = 0LL;
          uint64_t v168 = 0LL;
        }

        else
        {
          *((void *)v165 + 6) = v167;
        }

        sub_32C8C(v168);
        if (!BYTE4(v156)) {
          goto LABEL_215;
        }
        uint64_t v170 = sub_238998((uint64_t **)v963, v151, v964);
        uint64_t v171 = sub_238A74((uint64_t **)v170 + 6, data, &v962);
      }

      *((_DWORD *)v171 + 8) = (_DWORD)v156;
LABEL_215:
      if (++v136 == (const __CFDictionary **)v890)
      {
        int v421 = *(_BYTE **)v963;
        if (*(_BYTE **)v963 != &v963[8])
        {
          do
          {
            uint64_t v422 = *((void *)v421 + 7);
            id v423 = *((_DWORD *)v421 + 10);
            if (v422)
            {
              v424 = v421 + 56;
              do
              {
                int v425 = *(_DWORD *)(v422 + 28);
                v426 = v425 >= v423;
                if (v425 >= v423) {
                  unsigned int v427 = (uint64_t *)v422;
                }
                else {
                  unsigned int v427 = (uint64_t *)(v422 + 8);
                }
                if (v426) {
                  v424 = (_BYTE *)v422;
                }
                uint64_t v422 = *v427;
              }

              while (*v427);
              if (v424 == v421 + 56 || v423 < *((_DWORD *)v424 + 7))
              {
                int v428 = 0LL;
                v429 = 0;
                LODWORD(v422) = 0;
              }

              else
              {
                LODWORD(v422) = *((_DWORD *)v424 + 8) & 0xFFFFFF00;
                v429 = *((_DWORD *)v424 + 8);
                int v428 = 0x100000000LL;
              }
            }

            else
            {
              int v428 = 0LL;
              v429 = 0;
            }

            *(_DWORD *)v965 = *((_DWORD *)v421 + 10);
            *(void *)&v965[4] = v428 | v422 | v429;
            uint64_t v430 = v423;
            *(void *)v964 = *(void *)v965;
            *(_DWORD *)&v964[8] = HIDWORD(v428);
            id v431 = sub_6A92C((uint64_t)v898[16], *((_DWORD *)v421 + 8));
            v962.__r_.__value_.__r.__words[0] = v431;
            if (!v431)
            {
              v840 = sub_138E8(13);
              uint64_t v841 = sub_8C7D4(1, *(void **)v840, *(void *)(v840 + 8));
              id v842 = (void *)objc_claimAutoreleasedReturnValue(v841);
              v843 = v842;
              if (v842)
              {
                uint64_t v844 = v842;
                if (os_log_type_enabled(v844, OS_LOG_TYPE_ERROR))
                {
                  id v845 = *((_DWORD *)v421 + 8);
                  *(_DWORD *)v965 = v881;
                  *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&v965[12] = 1024;
                  *(_DWORD *)&v965[14] = 2696;
                  *(_WORD *)&v965[18] = 1024;
                  *(_DWORD *)&v965[20] = v845;
                  _os_log_impl( &dword_0,  v844,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Requested port ID (%u) to enable does not exist.",  v965,  0x18u);
                }
              }

              v846 = __cxa_allocate_exception(0x10uLL);
              *(void *)v846 = &off_4865A0;
              v846[2] = 1852797029;
            }

            *(_DWORD *)v965 = v430;
            v432 = v964[8];
            *(void *)&v965[4] = *(void *)&v964[4];
            int v433 = *(uint64_t **)v965;
            v434 = sub_52FB8(v895, v431, &v962);
            v434[5] = v433;
            *((_BYTE *)v434 + 48) = v432;
            unsigned int v435 = (void *)*((void *)v421 + 1);
            if (v435)
            {
              do
              {
                int v436 = v435;
                unsigned int v435 = (void *)*v435;
              }

              while (v435);
            }

            else
            {
              do
              {
                int v436 = (_BYTE *)*((void *)v421 + 2);
                int v627 = *(void *)v436 == (void)v421;
                int v421 = v436;
              }

              while (!v627);
            }

            int v421 = v436;
          }

          while (v436 != &v963[8]);
        }

        sub_238B3C(*(void **)&v963[8]);
        break;
      }
    }
  }

  sub_F9584((uint64_t)v202, 1886614633LL, *(_DWORD *)(a1 + 268));
  if (!v7)
  {
    int v89 = 0LL;
    uint64_t v200 = 0uLL;
LABEL_158:
    unint64_t v103 = 0LL;
    char v199 = 0uLL;
    goto LABEL_178;
  }

  char v81 = sub_138E8(17);
  id v82 = sub_138E8(29);
  int v83 = 0;
  int v84 = 0LL;
  int v85 = v17[411];
  *(void *)buf = v85;
  unsigned int v86 = *(void *)(v81 + 8);
  while (1)
  {
    uint64_t v87 = *(int *)&buf[4 * v84];
    int v88 = v83;
    if (((v86 & v87) != 0) != ((*(void *)(v82 + 8) & v87) != 0)) {
      break;
    }
    int v83 = 1;
    int v84 = 1LL;
    if ((v88 & 1) != 0) {
      goto LABEL_137;
    }
  }

  if ((v86 & v87) == 0) {
    char v81 = v82;
  }
LABEL_137:
  unsigned int v90 = *(os_log_s **)v81;
  if (v90 && os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v91 = (const __CFString *)v203[0];
    if (!v203[0]) {
      unsigned int v91 = (const __CFString *)v202[0];
    }
    if (v204[0]) {
      unsigned int v92 = (const __CFString *)v204[0];
    }
    else {
      unsigned int v92 = v91;
    }
    unsigned int v93 = v211;
    sub_48E98(v211, v92);
    if (v211[5] < 0) {
      unsigned int v93 = *(_DWORD **)v211;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(__p, a1);
    sub_48E98(&v208, (CFStringRef)__p[0]);
    if (v210 >= 0) {
      uint64_t v94 = &v208;
    }
    else {
      uint64_t v94 = v208;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 251;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v93;
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&buf[30] = v94;
    _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a CarPlay input port with name %s and UID %s",  buf,  0x26u);
    if (SHIBYTE(v210) < 0) {
      operator delete(v208);
    }
    sub_19DFC((uint64_t)__p);
    uint64_t v17 = (void *)&unk_3FF000;
    if (SHIBYTE(v211[5]) < 0) {
      operator delete(*(void **)v211);
    }
  }

  (*(void (**)(_DWORD *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v211, a1);
  unsigned int v95 = operator new(0x298uLL);
  v95[1] = 0LL;
  v95[2] = 0LL;
  *unsigned int v95 = off_476288;
  sub_1707E8(v95 + 3, a1, (uint64_t)v202, (uint64_t)v211, 1886614633, v16);
  *(void *)buf = v95 + 3;
  *(void *)&buf[8] = v95;
  sub_AFDAC((uint64_t)buf, v95 + 13, (uint64_t)(v95 + 3));
  uint64_t v192 = *(void *)buf;
  uint64_t v200 = *(_OWORD *)buf;
  sub_19DFC((uint64_t)v211);
  int v89 = v192;
  sub_F9584((uint64_t)buf, 1885565044LL, *(_DWORD *)(a1 + 268));
  unsigned int v96 = sub_138E8(17);
  uint64_t v97 = sub_138E8(29);
  BOOL v98 = 0;
  unsigned int v99 = 0LL;
  *(void *)char v211 = v85;
  uint64_t v100 = *(void *)(v96 + 8);
  while (1)
  {
    int v101 = (int)v211[v99];
    unsigned int v102 = v98;
    if (((v100 & v101) != 0) != ((*(void *)(v97 + 8) & v101) != 0)) {
      break;
    }
    BOOL v98 = 1;
    unsigned int v99 = 1LL;
    if ((v102 & 1) != 0) {
      goto LABEL_161;
    }
  }

  if ((v100 & v101) == 0) {
    unsigned int v96 = v97;
  }
LABEL_161:
  unint64_t v104 = *(os_log_s **)v96;
  if (v104 && os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
  {
    __n128 v105 = *(const __CFString **)&buf[16];
    if (!*(void *)&buf[16]) {
      __n128 v105 = *(const __CFString **)buf;
    }
    if (*(void *)&buf[32]) {
      unsigned int v106 = *(const __CFString **)&buf[32];
    }
    else {
      unsigned int v106 = v105;
    }
    uint64_t v107 = &v208;
    sub_48E98(&v208, v106);
    if (v210 < 0) {
      uint64_t v107 = v208;
    }
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
    sub_48E98(__p, theString[0]);
    if (v207 >= 0) {
      uint64_t v108 = __p;
    }
    else {
      uint64_t v108 = (void **)__p[0];
    }
    v211[0] = 136315906;
    *(void *)&v211[1] = "Device_CarPlay_Aspen.cpp";
    LOWORD(v211[3]) = 1024;
    *(_DWORD *)((char *)&v211[3] + 2) = 263;
    HIWORD(v211[4]) = 2080;
    *(void *)&v211[5] = v107;
    v212 = 2080;
    uint64_t v213 = v108;
    _os_log_impl( &dword_0,  v104,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a CarPlay tapstream input port with name %s and UID %s",  (uint8_t *)v211,  0x26u);
    if (v207 < 0) {
      operator delete(__p[0]);
    }
    sub_19DFC((uint64_t)theString);
    if (SHIBYTE(v210) < 0) {
      operator delete(v208);
    }
  }

  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(&v208, a1);
  char v109 = operator new(0x298uLL);
  v109[1] = 0LL;
  v109[2] = 0LL;
  *char v109 = off_476288;
  sub_1707E8(v109 + 3, a1, (uint64_t)v202, (uint64_t)&v208, 1885565044, v16);
  *(void *)char v211 = v109 + 3;
  *(void *)&v211[2] = v109;
  sub_AFDAC((uint64_t)v211, v109 + 13, (uint64_t)(v109 + 3));
  char v193 = *(void *)v211;
  char v199 = *(_OWORD *)v211;
  sub_19DFC((uint64_t)&v208);
  sub_19DFC((uint64_t)&buf[32]);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  unint64_t v103 = v193;
  uint64_t v17 = &unk_3FF000;
LABEL_178:
  if ((v7 != 0) == (v89 == 0))
  {
    uint64_t v110 = (os_log_t *)sub_138E8(13);
    uint64_t v111 = *v110;
    if (*v110)
    {
      if (os_log_type_enabled(*v110, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 269;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v7 != 0;
        *(_WORD *)&_BYTE buf[24] = 2048;
        *(void *)&buf[26] = v89;
        _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: If hasInput (%u) is true, inputPort (%p) must be non-NULL, and conversely.",  buf,  0x22u);
      }
    }
  }

  if ((v7 != 0) == (v103 == 0))
  {
    uint64_t v112 = (os_log_t *)sub_138E8(13);
    char v113 = *v112;
    if (*v112)
    {
      if (os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 271;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v7 != 0;
        *(_WORD *)&_BYTE buf[24] = 2048;
        *(void *)&buf[26] = v103;
        _os_log_impl( &dword_0,  v113,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: If hasInput (%u) is true, tapInputPort (%p) must be non-NULL, and conversely.",  buf,  0x22u);
      }
    }
  }

  if (*(_DWORD *)(a1 + 492) == 1937010030)
  {
    sub_204854((uint64_t)v41, v89);
    if ((void)v199) {
      sub_204854(v199, v201);
    }
  }

  if (!v2) {
    goto LABEL_197;
  }
  uint64_t v198 = v201;
  if (*((void *)&v201 + 1))
  {
    uint64_t v114 = (unint64_t *)(*((void *)&v201 + 1) + 8LL);
    do
      float v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
  }

  sub_3711D4(a1, (void ***)&v198);
  float v116 = (std::__shared_weak_count *)*((void *)&v198 + 1);
  if (!*((void *)&v198 + 1)) {
    goto LABEL_197;
  }
  unsigned int v117 = (unint64_t *)(*((void *)&v198 + 1) + 8LL);
  do
    int v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
    if (v7) {
      goto LABEL_198;
    }
  }

  else
  {
LABEL_197:
    if (v7)
    {
LABEL_198:
      uint64_t v197 = v200;
      if (*((void *)&v200 + 1))
      {
        unsigned int v119 = (unint64_t *)(*((void *)&v200 + 1) + 8LL);
        do
          uint64_t v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }

      sub_3711D4(a1, (void ***)&v197);
      int v121 = (std::__shared_weak_count *)*((void *)&v197 + 1);
      if (*((void *)&v197 + 1))
      {
        int v122 = (unint64_t *)(*((void *)&v197 + 1) + 8LL);
        do
          __n128 v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }

      if ((void)v199)
      {
        unsigned int v196 = v199;
        if (*((void *)&v199 + 1))
        {
          v124 = (unint64_t *)(*((void *)&v199 + 1) + 8LL);
          do
            uint64_t v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
        }

        sub_3711D4(a1, (void ***)&v196);
        uint64_t v126 = (std::__shared_weak_count *)*((void *)&v196 + 1);
        if (*((void *)&v196 + 1))
        {
          char v127 = (unint64_t *)(*((void *)&v196 + 1) + 8LL);
          do
            uint64_t v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
      }
    }
  }

  strcpy((char *)v211, "dcvsbolg");
  BYTE1(v211[2]) = 0;
  HIWORD(v211[2]) = 0;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, v211))
  {
    *(void *)buf = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    *(_WORD *)&buf[8] = 257;
    sub_1A31BC((uint64_t)buf, @"vocoder sample rate", 0.0);
    sub_13408((uint64_t)buf, @"vocoder type", 0);
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _BYTE *))(*(void *)a1 + 48LL))( a1,  v211,  0LL,  0LL,  8LL,  buf);
    sub_13850((uint64_t)buf);
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &qword_491188))
  {
    uint64_t v129 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    *(_BYTE *)(a1 + 504) = sub_208850(v129);
    uint64_t v130 = operator new(0xCuLL);
    *(void *)&buf[8] = v130 + 3;
    *(void *)&buf[16] = v130 + 3;
    *(void *)uint64_t v130 = qword_491188;
    v130[2] = dword_491190;
    *(void *)buf = v130;
    (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 408LL))(a1, buf);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    unsigned int v194 = qword_491188;
    unsigned int v195 = dword_491190;
    (*(void (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t, unsigned int, _DWORD *, _BYTE *), uint64_t))(*(void *)a1 + 336LL))( a1,  &v194,  sub_2089E4,  a1);
  }

  char v131 = (std::__shared_weak_count *)*((void *)&v199 + 1);
  if (*((void *)&v199 + 1))
  {
    signed int v132 = (unint64_t *)(*((void *)&v199 + 1) + 8LL);
    do
      int v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }

  unsigned int v134 = (std::__shared_weak_count *)*((void *)&v200 + 1);
  if (*((void *)&v200 + 1))
  {
    CFTypeRef v135 = (unint64_t *)(*((void *)&v200 + 1) + 8LL);
    do
      unsigned int v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }

  sub_19DFC((uint64_t)v204);
  sub_19DFC((uint64_t)v203);
  sub_19DFC((uint64_t)v202);
  uint64_t v137 = (std::__shared_weak_count *)*((void *)&v201 + 1);
  if (*((void *)&v201 + 1))
  {
    int v138 = (unint64_t *)(*((void *)&v201 + 1) + 8LL);
    do
      CFMutableDictionaryRef v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }

  unsigned int v140 = sub_138E8(17);
  uint64_t v141 = sub_138E8(29);
  id v142 = 0;
  v143 = 0LL;
  size_t v144 = v17[411];
  *(void *)buf = v144;
  int v145 = *(void *)(v140 + 8);
  while (1)
  {
    int v146 = *(int *)&buf[4 * v143];
    int v147 = v142;
    if (((v145 & v146) != 0) != ((*(void *)(v141 + 8) & v146) != 0)) {
      break;
    }
    id v142 = 1;
    v143 = 1LL;
    if ((v147 & 1) != 0) {
      goto LABEL_243;
    }
  }

  if ((v145 & v146) == 0) {
    unsigned int v140 = v141;
  }
LABEL_243:
  v148 = *(os_log_s **)v140;
  if (v148 && os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
  {
    sub_23FE8((uint64_t)v202, (os_unfair_lock_t)(a1 + 8));
    id v149 = v203[0] >= 0 ? v202 : (void **)v202[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 319;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v149;
    _os_log_impl(&dword_0, v148, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created CarPlay device: %s.", buf, 0x1Cu);
    if (SHIBYTE(v203[0]) < 0) {
      operator delete(v202[0]);
    }
  }

  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, 0LL))
  {
    uint64_t v150 = sub_138E8(17);
    v151 = sub_138E8(29);
    char v152 = 0;
    unint64_t v153 = 0LL;
    *(void *)buf = v144;
    uint64_t v154 = *(void *)(v150 + 8);
    while (1)
    {
      uint64_t v155 = *(int *)&buf[4 * v153];
      unsigned int v156 = v152;
      if (((v154 & v155) != 0) != ((*(void *)(v151 + 8) & v155) != 0)) {
        break;
      }
      char v152 = 1;
      unint64_t v153 = 1LL;
      if ((v156 & 1) != 0) {
        goto LABEL_257;
      }
    }

    if ((v154 & v155) == 0) {
      uint64_t v150 = v151;
    }
LABEL_257:
    unsigned int v157 = *(os_log_s **)v150;
    if (v157 && os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
    {
      int v158 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 96LL))( a1,  0LL,  0LL);
      sub_23FE8((uint64_t)v202, v158 + 2);
      unsigned int v159 = v203[0] >= 0 ? v202 : (void **)v202[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 320;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v159;
      _os_log_impl(&dword_0, v157, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created CarPlay input stream: %s.", buf, 0x1Cu);
      if (SHIBYTE(v203[0]) < 0) {
        operator delete(v202[0]);
      }
    }
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL))
  {
    unsigned int v160 = sub_138E8(17);
    unsigned int v161 = sub_138E8(29);
    std::string::value_type v162 = 0;
    unsigned int v163 = 0LL;
    *(void *)buf = v144;
    unsigned int v164 = *(void *)(v160 + 8);
    while (1)
    {
      uint64_t v165 = *(int *)&buf[4 * v163];
      int v166 = v162;
      if (((v164 & v165) != 0) != ((*(void *)(v161 + 8) & v165) != 0)) {
        break;
      }
      std::string::value_type v162 = 1;
      unsigned int v163 = 1LL;
      if ((v166 & 1) != 0) {
        goto LABEL_271;
      }
    }

    if ((v164 & v165) == 0) {
      unsigned int v160 = v161;
    }
LABEL_271:
    uint64_t v167 = *(os_log_s **)v160;
    if (v167 && os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v168 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 96LL))( a1,  1LL,  0LL);
      sub_23FE8((uint64_t)v202, v168 + 2);
      if (v203[0] >= 0) {
        char v169 = v202;
      }
      else {
        char v169 = (void **)v202[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 321;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v169;
      _os_log_impl(&dword_0, v167, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created CarPlay output stream: %s.", buf, 0x1Cu);
      if (SHIBYTE(v203[0]) < 0) {
        operator delete(v202[0]);
      }
    }
  }

  return 1LL;
}

  BOOL v98 = operator new(0x68uLL);
  sub_CB144((uint64_t *)v136);
  unsigned int v119 = *(std::__shared_weak_count **)&v136[8];
  uint64_t v120 = *(_OWORD *)v136;
  *(void *)unsigned int v136 = 0LL;
  *(void *)&v136[8] = 0LL;
  sub_CAF18((uint64_t)v98, &v120);
  v63[7] = v98;
  if (v119)
  {
    unsigned int v99 = (unint64_t *)&v119->__shared_owners_;
    do
      uint64_t v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }

  int v101 = *(std::__shared_weak_count **)&v136[8];
  if (*(void *)&v136[8])
  {
    unsigned int v102 = (unint64_t *)(*(void *)&v136[8] + 8LL);
    do
      unint64_t v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }

  if (v127) {
    (*(void (**)(uint64_t *))(*v127 + 8))(v127);
  }
  if (v129) {
    std::__shared_weak_count::__release_weak(v129);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  unint64_t v104 = v134;
  if (v134)
  {
    __n128 v105 = (unint64_t *)&v134->__shared_owners_;
    do
      unsigned int v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }

  return 0LL;
}

LABEL_96:
          __int16 v16 = 0LL;
          goto LABEL_130;
        }

        goto LABEL_73;
      }

      if (v10 == 1685283955) {
        goto LABEL_73;
      }
      int v12 = 1701013875;
    }

  v70[0] = 0LL;
  v70[1] = 0LL;
  int v71 = 0LL;
  sub_7DCF4(v70, v68);
  unsigned int v46 = v66;
  if (v66 != (uint64_t *)&v67)
  {
    uint64_t v47 = (char *)v70[1];
    do
    {
      if ((unint64_t)v47 >= v71)
      {
        uint64_t v48 = (v47 - (char *)v70[0]) >> 4;
        uint64_t v49 = (uint64_t)(v71 - (unint64_t)v70[0]) >> 3;
        if (v49 <= v48 + 1) {
          uint64_t v49 = v48 + 1;
        }
        else {
          int v50 = v49;
        }
        *(void *)&buf[32] = &v71;
        if (v50) {
          int v50 = (unint64_t)sub_7BE90(v50);
        }
        else {
          unsigned int v51 = 0LL;
        }
        char v52 = (void *)(v50 + 16 * v48);
        *(void *)buf = v50;
        *(void *)&buf[8] = v52;
        *(void *)&_BYTE buf[24] = v50 + 16 * v51;
        sub_15D828(v52, (CFTypeRef)v46[4], (_BYTE *)v46 + 40);
        uint64_t v47 = (char *)(v52 + 2);
        *(void *)&buf[16] = v52 + 2;
        v54 = v70[0];
        int v53 = v70[1];
        __int16 v55 = *(void **)&buf[8];
        if (v70[1] == v70[0])
        {
          uint64_t v57 = vdupq_n_s64((unint64_t)v70[1]);
        }

        else
        {
          do
          {
            int v56 = *(v53 - 2);
            v53 -= 2;
            *(v55 - 2) = v56;
            v55 -= 2;
            *int v53 = 0LL;
            v55[1] = v53[1];
            v53[1] = 0LL;
          }

          while (v53 != v54);
          uint64_t v57 = *(int64x2_t *)v70;
          uint64_t v47 = *(char **)&buf[16];
        }

        v70[0] = v55;
        v70[1] = v47;
        *(int64x2_t *)&buf[8] = v57;
        __int16 v58 = v71;
        int v71 = *(void *)&buf[24];
        *(void *)&_BYTE buf[24] = v58;
        *(void *)buf = v57.i64[0];
        sub_7BEC4((uint64_t)buf);
      }

      else
      {
        sub_15D828(v47, (CFTypeRef)v46[4], (_BYTE *)v46 + 40);
        v47 += 16;
      }

      v70[1] = v47;
      int v59 = (uint64_t *)v46[1];
      if (v59)
      {
        do
        {
          __int16 v60 = (uint64_t **)v59;
          int v59 = (uint64_t *)*v59;
        }

        while (v59);
      }

      else
      {
        do
        {
          __int16 v60 = (uint64_t **)v46[2];
          id v29 = *v60 == v46;
          unsigned int v46 = (uint64_t *)v60;
        }

        while (!v29);
      }

      unsigned int v46 = (uint64_t *)v60;
    }

    while (v60 != &v67);
  }

  uint64_t v61 = sub_7C1F4((void ***)v70);
  *(void *)buf = v70;
  sub_7CFCC((void ***)buf);
  *a1 = v61;
  sub_15D6F0(v67);
}

      v47.__d_.__rep_ = v46 + v44.__d_.__rep_;
      goto LABEL_97;
    }

    id v37 = (os_log_t *)sub_138E8(13);
    uint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      v66 = *(void *)a2;
      uint64_t v67 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__lk, (unsigned int *)&v66);
      if (v69 >= 0) {
        p_lk = &__lk;
      }
      else {
        p_lk = __lk.__m_;
      }
      __int16 v64 = 0LL;
      uint64_t v65 = 0LL;
      int v63 = 0LL;
      sub_7A5B8(&v63, v26, v28, v29);
      __int16 v60 = 0LL;
      uint64_t v61 = 0LL;
      __int16 v62 = 0LL;
      sub_7A5B8(&v60, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      int v40 = v63;
      uint64_t v41 = v60;
      id v42 = v64 - v63 == v61 - v60 && memcmp(v63, v60, v64 - v63) == 0;
      buf.mSelector = 136316930;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __n128 v105 = 1024;
      unsigned int v106 = 248;
      uint64_t v107 = 2080;
      *(void *)uint64_t v108 = "set";
      *(_WORD *)&v108[8] = 2080;
      *(void *)&v108[10] = p_lk;
      *(_WORD *)&v108[18] = 2080;
      *(void *)&v108[20] = "set";
      *(_WORD *)&v108[28] = 1024;
      char v109 = v42;
      uint64_t v110 = 1024;
      uint64_t v111 = 0;
      uint64_t v112 = 1024;
      char v113 = v59;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
      if (v41)
      {
        uint64_t v61 = v41;
        operator delete(v41);
      }

      if (v40)
      {
        __int16 v64 = v40;
        operator delete(v40);
      }

      if (v69 < 0) {
        operator delete(__lk.__m_);
      }
    }

    uint64_t v27 = 1;
    uint64_t v13 = 2003329396LL;
    if (v26) {
LABEL_73:
    }
      operator delete(v26);
  }

  while (!v27);
  if (v27 == 12)
  {
    uint64_t v48 = sub_138E8(13);
    if ((*(_BYTE *)(v48 + 8) & 1) != 0)
    {
      uint64_t v49 = *(os_log_s **)v48;
      if (*(void *)v48)
      {
        if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
        {
          __lk = *(std::unique_lock<std::mutex> *)a2;
          sub_613AC((uint64_t)&v76, (unsigned int *)&__lk);
          if (v78 >= 0) {
            int v50 = &v76;
          }
          else {
            int v50 = v76;
          }
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __n128 v105 = 1024;
          unsigned int v106 = 288;
          uint64_t v107 = 2080;
          *(void *)uint64_t v108 = v50;
          *(_WORD *)&v108[8] = 1024;
          *(_DWORD *)&v108[10] = v59;
          _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v78 < 0) {
            operator delete(v76);
          }
        }
      }
    }

    uint64_t v13 = 0LL;
  }

  sub_7D898((uint64_t)&__p);
  std::condition_variable::~condition_variable(&v114);
  std::mutex::~mutex(&v115);
  unsigned int v51 = v90;
  if (v90) {
LABEL_121:
  }
    operator delete(v51);
  return v13;
}

  sub_1BB88(&v43);
  return std::string::append(*(std::string **)a1, " ]", 2uLL);
}

LABEL_97:
          uint64_t v4 = sub_689F8(a1, a2, a3, a4);
          goto LABEL_85;
        }

        uint64_t v24 = sub_138E8(13);
        id v25 = sub_8C7D4(1, *(void **)v24, *(void *)(v24 + 8));
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        int v21 = v26;
        if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v54 = "VirtualAudio_PlugIn.mm";
          __int16 v55 = 1024;
          *(_DWORD *)int v56 = 5318;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

      if (mSelector != v8) {
        goto LABEL_121;
      }
      goto LABEL_98;
    }

    if (mSelector > 1685087595)
    {
      if (mSelector <= 1685287522)
      {
        if (mSelector != 1685087596)
        {
          int v6 = 1685287011;
          goto LABEL_77;
        }

        goto LABEL_98;
      }

      if (mSelector == 1685287523) {
        goto LABEL_98;
      }
      int v8 = 1685483630;
      goto LABEL_97;
    }

    if (mSelector <= 1684500588)
    {
      if (mSelector == 1684498541) {
        return v4;
      }
      int v7 = 1684498544;
      goto LABEL_87;
    }

    if (mSelector == 1684500589) {
      return 1LL;
    }
    int v6 = 1684500594;
LABEL_77:
    if (mSelector == v6) {
      return 1LL;
    }
LABEL_121:
    outIsSettable = 0;
    IsPropertySettable = AudioObjectIsPropertySettable(*(_DWORD *)(a1 + 128), a2, &outIsSettable);
    if ((_DWORD)IsPropertySettable)
    {
      uint64_t v23 = (os_log_t *)sub_138E8(16);
      uint64_t v24 = *v23;
      if (*v23)
      {
        if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&v32, a2->mSelector);
          id v25 = v34;
          uint64_t v26 = (void **)v32;
          sub_2CA1C(__p, IsPropertySettable);
          uint64_t v27 = &v32;
          if (v25 < 0) {
            uint64_t v27 = v26;
          }
          if (v31 >= 0) {
            uint64_t v28 = __p;
          }
          else {
            uint64_t v28 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)id v37 = "AggregateDevice_CommonBase.cpp";
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&v37[10] = 1147;
          uint64_t v38 = 2080;
          uint64_t v39 = v27;
          int v40 = 2080;
          uint64_t v41 = v28;
          _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectIsPropertySettable() for selector '%s' returned status '%s'.",  buf,  0x26u);
          if (v31 < 0) {
            operator delete(__p[0]);
          }
          if (v34 < 0) {
            operator delete(v32);
          }
        }
      }
    }

    return outIsSettable != 0;
  }

  if (mSelector > 1634692198)
  {
    if (mSelector > 1635152992)
    {
      if ((mSelector - 1635152993) > 0xE || ((1 << (mSelector - 97)) & 0x4015) == 0)
      {
        int v7 = 1650881394;
        goto LABEL_87;
      }

      goto LABEL_98;
    }

    if (mSelector == 1634692199) {
      goto LABEL_98;
    }
    if (mSelector == 1634890859) {
      return 1LL;
    }
    int v7 = 1635020147;
LABEL_87:
    if (mSelector == v7) {
      return v4;
    }
    goto LABEL_121;
  }

  if (mSelector > 1633907569)
  {
    if (mSelector <= 1633973867)
    {
      if (mSelector != 1633907570)
      {
        int v6 = 1633970532;
        goto LABEL_77;
      }

      return 1LL;
    }

    if (mSelector != 1633973868)
    {
      int v7 = 1634169456;
      goto LABEL_87;
    }

              uint64_t v61 = v166;
              if (v166)
              {
                __int16 v62 = (unint64_t *)&v166->__shared_weak_owners_;
                do
                  int v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }

              unsigned int v156 = 0LL;
              unsigned int v157 = 0LL;
              int v158 = 0LL;
              signed int v132 = v61;
              sub_7A5B8(&v156, v159, (uint64_t)v160, (v160 - (_BYTE *)v159) >> 2);
              sub_1B19F4((unint64_t *)v155, v165, v47, v133, 0LL);
              *(_DWORD *)buf = 1;
              *(_DWORD *)&uint8_t buf[4] = v51;
              *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
              char v181 = 0;
              unsigned int v183 = 0LL;
              int v184 = 0LL;
              unsigned int v182 = 0LL;
              __int16 v64 = sub_2D90F0(v47, (uint64_t)buf);
              v66 = v65;
              sub_1F71EC((uint64_t)&v152, v134, v127, (uint64_t)v163, v164, v47, v130);
              sub_DB44C((uint64_t)v143, 1, 1768776806, *(_DWORD *)(v165 + 264));
              sub_2D9354(&v146, v47, (uint64_t)v143);
              uint64_t v67 = (char *)operator new(0x98uLL);
              unsigned int v68 = v67;
              LOBYTE(v171[0]) = 0;
              uint64_t v172 = 0;
              unsigned int v69 = v154;
              if (v154)
              {
                *(_OWORD *)uint64_t v171 = v152;
                v171[2] = v153;
                unint64_t v153 = 0LL;
                char v152 = 0uLL;
                uint64_t v172 = 1;
              }

              LOBYTE(v167[0]) = 0;
              uint64_t v170 = 0;
              if (v151)
              {
                uint64_t v70 = v146;
                int v71 = v147;
                int v146 = 0LL;
                int v147 = 0LL;
                v167[0] = v70;
                v167[1] = (void *)v71;
                v168[0] = v148;
                v168[1] = v149;
                char v169 = v150;
                if (v149)
                {
                  uint64_t v72 = v148[1];
                  if ((v71 & (v71 - 1)) != 0)
                  {
                    if (v72 >= v71) {
                      v72 %= v71;
                    }
                  }

                  else
                  {
                    v72 &= v71 - 1;
                  }

                  *((void *)v70 + v72) = v168;
                  v148 = 0LL;
                  id v149 = 0LL;
                }

                uint64_t v170 = 1;
              }

              unsigned int v73 = v155[1];
              *(_OWORD *)(v67 + 8) = v155[0];
              *(_OWORD *)(v67 + 24) = v73;
              *(_OWORD *)(v67 + 40) = v155[2];
              *((void *)v67 + 7) = v64;
              *((void *)v67 + 8) = v66;
              *(void *)uint64_t v67 = &off_46F1C8;
              sub_DA6C8((uint64_t)(v67 + 72), (uint64_t)v171);
              sub_DA7BC(v68 + 104, (uint64_t)v167);
              if (v170)
              {
                sub_D0C4C(v168[0]);
                unsigned int v74 = v167[0];
                v167[0] = 0LL;
                if (v74) {
                  operator delete(v74);
                }
              }

              if (v69 && v171[0]) {
                operator delete(v171[0]);
              }
              v167[0] = v68;
              sub_DA818((uint64_t)&v136, v50, (uint64_t)v132, 1, (uint64_t)&v156, (uint64_t *)v167, v60, 0);
              uint64_t v75 = v167[0];
              v167[0] = 0LL;
              uint64_t v4 = v128;
              int v6 = v126;
              int v12 = (uint64_t **)(v8 + 24);
              int v2 = (_DWORD *)v133;
              if (v75) {
                (*(void (**)(void *))(*(void *)v75 + 8LL))(v75);
              }
              if (v151)
              {
                sub_D0C4C(v148);
                uint64_t v76 = v146;
                int v146 = 0LL;
                if (v76) {
                  operator delete(v76);
                }
              }

              if (v144)
              {
                int v145 = v144;
                operator delete(v144);
              }

              if (v154 && (void)v152)
              {
                *((void *)&v152 + 1) = v152;
                operator delete((void *)v152);
              }

              if (v156)
              {
                unsigned int v157 = v156;
                operator delete(v156);
              }

              if (v132) {
                std::__shared_weak_count::__release_weak(v132);
              }
              if (v159)
              {
                unsigned int v160 = v159;
                operator delete(v159);
              }

              sub_85B80((uint64_t *)&v162);
              char v77 = v166;
              if (v166)
              {
                uint64_t v78 = (unint64_t *)&v166->__shared_owners_;
                do
                  uint64_t v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }

              sub_DB1D0((uint64_t)v173, 1, (uint64_t)&v136);
              sub_DB258((uint64_t **)v8 + 3, *(int *)v173, (uint64_t)v173);
              int v9 = (uint64_t *)(v7 + 16);
              uint64_t v80 = v179;
              uint64_t v179 = 0LL;
              if (v80) {
                (*(void (**)(uint64_t))(*(void *)v80 + 8LL))(v80);
              }
              if (v177)
              {
                uint64_t v178 = v177;
                operator delete(v177);
              }

              if (*(void *)&v176[2]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v176[2]);
              }
              char v81 = v140;
              unsigned int v140 = 0LL;
              if (v81) {
                (*(void (**)(uint64_t))(*(void *)v81 + 8LL))(v81);
              }
              if (__p)
              {
                CFMutableDictionaryRef v139 = __p;
                operator delete(__p);
              }

              if (v137) {
                std::__shared_weak_count::__release_weak(v137);
              }
              goto LABEL_152;
            }

  memset(buf, 0, 24);
  strcpy((char *)&buf[24], "cwdv");
  buf[32] = 0;
  int v84 = 3;
  v86[0] = 0LL;
  v86[1] = 0LL;
  int v85 = v86;
  uint64_t v87 = 44739242;
  int v88 = 0LL;
  __p[0] = &off_470708;
  id v82 = __p;
  sub_FFB0C(&v73, v71, buf, (uint64_t)__p);
  v76[0] = 0LL;
  v76[1] = 0LL;
  uint64_t v75 = (os_unfair_lock_s *)v76;
  __int16 v60 = v74;
  v77[0] = (uint64_t **)&v75;
  for (v77[1] = v76; v60 != &v73; __int16 v60 = (uint64_t *)v60[1])
  {
    sub_B8F68(&v78, v60 + 2, "", 730);
    uint64_t v61 = v79;
    __int16 v62 = *(_DWORD *)(v78 + 144);
    if (v79)
    {
      int v63 = (unint64_t *)&v79->__shared_owners_;
      do
        __int16 v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }

    LODWORD(v78) = v62;
    sub_FFE48(v77, (unsigned int *)&v78);
  }

  uint64_t v65 = sub_32918();
  LODWORD(v78) = 2;
  sub_395F90(v65, (uint64_t)"fedv", (uint64_t)&v75, (unsigned int *)&v78);
  sub_32C8C(v76[0]);
  sub_85B80(&v73);
  v66 = v82;
  if (v82 == __p)
  {
    uint64_t v67 = 4LL;
    v66 = __p;
  }

  else
  {
    if (!v82) {
      goto LABEL_109;
    }
    uint64_t v67 = 5LL;
  }

  (*((void (**)(void))*v66 + v67))();
LABEL_109:
  if (v88) {
    CFRelease(v88);
  }
  sub_32C8C(v86[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v71 + 24LL))(v71);
  }
}

              int v11 = *v9;
LABEL_98:
              if (v11 == 1936747877)
              {
                sub_1C43A8((void *)a4);
                goto LABEL_106;
              }

              goto LABEL_100;
            }

            int v40 = (unint64_t *)&v28->__shared_owners_;
            do
              uint64_t v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }

        *(_DWORD *)buf = 0;
        LODWORD(__p[0]) = sub_757A4(v115, v120);
        float v116 = 1065353216;
        *(float *)(a4 + 296) = *sub_63A98((float *)buf, (float *)__p, (float *)&v116);
        goto LABEL_45;
      }
    }

          sub_226108(buf, a1, (uint64_t)a2, a3);
          goto LABEL_98;
        }

        if (v6 == 1935763060) {
          goto LABEL_97;
        }
        if (v6 != 1936092532)
        {
          unsigned int v30 = 1936482676;
          goto LABEL_79;
        }

    unsigned int v86 = 0;
    goto LABEL_98;
  }

  unsigned int v86 = 1;
LABEL_98:
  unsigned int v90 = v174;
  if (v78)
  {
    unsigned int v91 = *v78;
    if ((_DWORD)v91)
    {
      unsigned int v92 = (int *)(v78 + 3);
      unsigned int v93 = mBuffers;
      do
      {
        if (v86)
        {
          uint64_t v94 = *v92;
          *unsigned int v93 = *v92 == 0;
          if (!v94) {
            goto LABEL_106;
          }
        }

        else
        {
          *unsigned int v93 = 0;
        }

        *(_DWORD *)(v90 + 800) = 0;
LABEL_106:
        ++v93;
        v92 += 4;
        --v91;
      }

      while (v91);
    }
  }

  unsigned int v95 = v172;
  unsigned int v96 = v174;
  if (!v86) {
    goto LABEL_183;
  }
  uint64_t v97 = *(void *)(v174 + 744);
  BOOL v98 = *(void *)(v174 + 736);
  unsigned int v99 = v97 - v98;
  if (v97 == v98)
  {
LABEL_112:
    int v101 = 0;
  }

  else
  {
    uint64_t v100 = 0LL;
    int v101 = 0;
    unsigned int v102 = v99 >> 3;
    while (!*(void *)(v98 + 8 * v100))
    {
      uint64_t v100 = ++v101;
      if (v102 <= v101) {
        goto LABEL_112;
      }
    }
  }

  unint64_t v103 = (*(uint64_t (**)(void, void))(**(void **)(v98 + 8LL * v101) + 96LL))( *(void *)(v98 + 8LL * v101),  v172[3]);
  if (!v103)
  {
    unsigned int v156 = (os_log_t *)sub_138E8(13);
    unsigned int v157 = *v156;
    if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR))
    {
      buf.uint64_t mNumberBuffers = 136315394;
      *(void *)(&buf.mNumberBuffers + 1) = "PolicyMute.cpp";
      LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 132;
      _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    int v158 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v158, "Precondition failure.");
  }

  unsigned int v96 = v174;
  unint64_t v104 = *(_DWORD *)(v174 + 800);
  unsigned int v95 = v172;
  if (v104 >> 6 < 0x177)
  {
    __n128 v105 = 0;
  }

  else
  {
    if (v104 > v103 + 24000)
    {
      __n128 v105 = 0;
      unsigned int v163 = 1;
      goto LABEL_120;
    }

    v103 *= 2;
    __n128 v105 = 1;
  }

  *(_DWORD *)(v174 + 800) = v104 + v103;
  unsigned int v163 = v105;
LABEL_120:
  unsigned int v106 = *(_DWORD *)(v96 + 792);
  uint64_t v107 = *(_DWORD *)(v96 + 796);
  uint64_t v108 = v107 == 728788340;
  if (v107 == 728788340) {
    char v109 = 3;
  }
  else {
    char v109 = 2;
  }
  if (v106 == 728788340) {
    uint64_t v108 = v109;
  }
  LODWORD(v167) = v108;
  uint64_t v110 = *v95;
  if ((_DWORD)v110)
  {
    uint64_t v111 = 0LL;
    int v166 = v96 + 792;
    unsigned int v161 = v163 == 0;
    char v113 = v106 == 728788340 && v107 == 728788340;
    unsigned int v160 = v113;
    uint64_t v165 = v96 + 144;
    unsigned int v164 = buf.mBuffers;
    unsigned int v159 = (AudioBuffer *)&a3[4 * v171 + 2];
    std::string::value_type v162 = v105;
    while (1)
    {
      uint64_t v114 = &v95[4 * v111];
      float v116 = *((void *)v114 + 2);
      float v115 = (void **)(v114 + 4);
      unsigned int v117 = *(void *)(v96 + 736);
      int v118 = *(void *)(v117 + 8 * v111);
      if (v116 && v118 != 0) {
        break;
      }
LABEL_182:
      if (++v111 >= v110) {
        goto LABEL_183;
      }
    }

    uint64_t v171 = (*(uint64_t (**)(void))(*(void *)v118 + 160LL))(*(void *)(v117 + 8 * v111));
    uint64_t v120 = *(unsigned int **)(*(void *)(v174 + 688) + 8LL * (int)v171);
    uint64_t v176 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v120 + 64LL))(v120);
    uint64_t v175 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v120 + 72LL))(v120);
    int v121 = v120[72];
    int v122 = &v172[4 * v111];
    v124 = v122[3];
    __n128 v123 = v122 + 3;
    LODWORD(v173) = (*(uint64_t (**)(uint64_t, void))(*(void *)v118 + 96LL))(v118, v124);
    uint64_t v125 = (*(uint64_t (**)(unsigned int *))(*(void *)v120 + 40LL))(v120);
    uint64_t v126 = *(void *)v120;
    if (v125)
    {
      char v127 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(v126 + 160))(v120);
LABEL_144:
      if (*((_BYTE *)&mBuffers->mNumberChannels + v121))
      {
        if (v105)
        {
          if ((*(uint64_t (**)(unsigned int *))(*(void *)v120 + 32LL))(v120))
          {
            int v133 = (*(uint64_t (**)(unsigned int *))(*(void *)v120 + 32LL))(v120);
            if (((*(uint64_t (**)(uint64_t))(*(void *)v133 + 80LL))(v133) & 1) == 0)
            {
              unsigned int v134 = (*(uint64_t (**)(unsigned int *))(*(void *)v120 + 32LL))(v120);
              sub_3057C(v134);
            }
          }
        }

        CFTypeRef v135 = v125 & v161;
        if ((v125 & v161 & 1) != 0 || (*(_BYTE *)(v174 + 80) & 4) != 0)
        {
          unsigned int v136 = v127->mNumberBuffers;
          if ((_DWORD)v136)
          {
            uint64_t v137 = 0LL;
            p_mData = &v127->mBuffers[0].mData;
            do
            {
              if (*p_mData)
              {
                bzero(*p_mData, *((unsigned int *)p_mData - 1));
                unsigned int v136 = v127->mNumberBuffers;
              }

              ++v137;
              p_mData += 2;
            }

            while (v137 < v136);
          }
        }

        CFMutableDictionaryRef v139 = v125 & v163;
        if (((v135 | v160) & 1) == 0) {
          bzero(*v115, *v123);
        }
        __n128 v105 = v162;
      }

      else
      {
        CFMutableDictionaryRef v139 = 0;
      }

      unsigned int v140 = 48LL;
      if (v125) {
        unsigned int v140 = 88LL;
      }
      uint64_t v141 = (*(uint64_t (**)(unsigned int *))(*(void *)v120 + v140))(v120);
      if (*(_DWORD *)(v141 + 8) == 1819304813)
      {
        id v142 = *(void *)(v174 + 88);
        *(void *)&buf.uint64_t mNumberBuffers = 1LL;
        buf.mBuffers[0].mNumberChannels = 1;
        buf.mBuffers[0].UInt32 mDataByteSize = v171;
        if (v142) {
          sub_75260(v142, &buf, (uint64_t)v127, v173, (uint64_t)*v170);
        }
        sub_4974(v165, v120[73], (uint64_t)v127, v173, (uint64_t)v170);
      }

      v143 = (AudioBuffer *)(v115 - 1);
      if (((v139 | v125 ^ 1) & 1) != 0)
      {
        if (v125) {
          size_t v144 = v175;
        }
        else {
          size_t v144 = v127;
        }
        sub_2B9834(v166, &v144->mNumberBuffers, v173, (double *)v141, v167);
      }

      else
      {
        int v145 = (_BYTE)v169 == 0;
        int v146 = (OpaqueAudioConverter **)(*(uint64_t (**)(unsigned int *))(*(void *)v120 + 32LL))(v120);
        sub_3014C(v146[73], (UInt32)v173, v127, v176);
        if (v145)
        {
          (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v146
           + 18))( v146,  v170,  v173,  1LL,  &v176,  1LL,  &v175);
        }

        else
        {
          buf.uint64_t mNumberBuffers = 1;
          *unsigned int v164 = *v159;
          char v177 = v176;
          p_buf = &buf;
          (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v146
           + 18))( v146,  v170,  v173,  2LL,  &v177,  1LL,  &v175);
        }

        if (v125) {
          int v147 = v175;
        }
        else {
          int v147 = v127;
        }
        sub_2B9834(v166, &v147->mNumberBuffers, v173, (double *)v141, v167);
        v148 = (*(uint64_t (**)(unsigned int *))(*(void *)v120 + 32LL))(v120);
        buf.uint64_t mNumberBuffers = 1;
        *unsigned int v164 = *v143;
        sub_3014C(*(OpaqueAudioConverter **)(v148 + 672), (UInt32)v173, v175, &buf);
        sub_4974(v165, v120[74], (uint64_t)&buf, v173, (uint64_t)v170);
      }

      if (*(_DWORD *)(v141 + 8) == 1819304813)
      {
        id v149 = *(void *)(v174 + 88);
        *(void *)&buf.uint64_t mNumberBuffers = 1LL;
        buf.mBuffers[0].mNumberChannels = 2;
        buf.mBuffers[0].UInt32 mDataByteSize = v171;
        if (v149) {
          sub_4784(v149, &buf, (uint64_t)v143);
        }
      }

      unsigned int v95 = v172;
      uint64_t v110 = *v172;
      unsigned int v96 = v174;
      goto LABEL_182;
    }

    uint64_t v128 = (*(uint64_t (**)(unsigned int *))(v126 + 48))(v120);
    if ((*(_BYTE *)(v128 + 12) & 0x20) != 0)
    {
      __chkstk_darwin(v128);
      char v127 = (AudioBufferList *)((char *)&v159 - v130);
      *(_DWORD *)((char *)&v159 - v130) = v129;
      if (!(_DWORD)v129) {
        goto LABEL_144;
      }
    }

    else
    {
      __chkstk_darwin(v128);
      char v127 = (AudioBufferList *)(&v159 - 4);
      LODWORD(v129) = 1;
      *((_DWORD *)&v159 - 8) = 1;
    }

    uint64_t v129 = v129;
    char v131 = 8LL;
    signed int v132 = v121;
    do
    {
      *(_OWORD *)((char *)&v127->mNumberBuffers + v131) = *(_OWORD *)&v51[4 * v132++ + 2];
      v131 += 16LL;
      --v129;
    }

    while (v129);
    goto LABEL_144;
  }

        __int16 v58 = i;
        uint64_t v57 = a1[92];
        if (v58 >= (a1[93] - v57) >> 3) {
          return;
        }
      }

      uint64_t v67 = (os_log_t *)sub_138E8(16);
      unsigned int v68 = *v67;
      if (!*v67 || !os_log_type_enabled(*v67, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      char v81 = 1024;
      id v82 = 1485;
      int v83 = 1024;
      LODWORD(v84[0]) = i - 1;
      __int16 v64 = v68;
      uint64_t v65 = "%25s:%-5d     stream %u > disabled";
LABEL_95:
      v66 = 24;
LABEL_96:
      _os_log_impl(&dword_0, v64, OS_LOG_TYPE_DEBUG, v65, buf, v66);
      goto LABEL_97;
    }
  }

        sub_7D898((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&v78);
        std::mutex::~mutex(&v79);
        return v25;
      }

      v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      id v29 = sub_138E8(13);
      if ((*(_BYTE *)(v29 + 8) & 1) != 0)
      {
        unsigned int v30 = *(os_log_s **)v29;
        if (*(void *)v29)
        {
          if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            unsigned int v69 = 1024;
            uint64_t v70 = 257;
            int v71 = 2080;
            *(void *)uint64_t v72 = "with timeout";
            *(_WORD *)&v72[8] = 1024;
            *(_DWORD *)&v72[10] = v55;
            _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v79;
      __lk.__owns_ = 1;
      std::mutex::lock(&v79);
      v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v62)
      {
        id v32 = v31.__d_.__rep_ + 1000000 * a7;
        while (1)
        {
          if (v32 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_38;
          }
          v33.__d_.__rep_ = v32 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v33.__d_.__rep_ >= 1) {
            break;
          }
LABEL_56:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v32 || v62) {
            goto LABEL_38;
          }
        }

        std::chrono::steady_clock::now();
        v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v34.__d_.__rep_)
        {
          uint64_t v35 = 0LL;
          goto LABEL_52;
        }

        if (v34.__d_.__rep_ < 1)
        {
          uint64_t v35 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v34.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_52;
          }

  if (v135)
  {
    sub_2DC204((uint64_t)&__dst, (uint64_t)&v133);
    *(_DWORD *)buf = 1684303986;
    sub_2DC450((uint64_t)&buf[8], (uint64_t)&__dst);
    sub_148DB8((uint64_t)&v139, *(int *)buf, buf);
    sub_2DBF5C((uint64_t)&buf[8]);
    sub_2DBF5C((uint64_t)&__dst);
  }

  if (v43)
  {
    sub_7D084(v131, "");
    sub_7D084(cf, "Generic");
    sub_7D084(&v128, off_48C220);
    sub_7D084(&bytes, "AU");
    sub_7D084(&v126, "VAD");
    sub_836D4(buf, (__int128 *)v131, (uint64_t)cf, &v128, &bytes, &v126);
    else {
      __dst = v144;
    }
    sub_7D084(v124, "ldnm_k_envnoise");
    sub_7D084(v122, ".aupreset");
    sub_307CA0(&__dst, (const void **)v124, 1633972835, (uint64_t)&v139, (uint64_t)v122);
    if (v123 < 0) {
      operator delete(v122[0]);
    }
    if (v125 < 0) {
      operator delete(v124[0]);
    }
    if ((v143[11] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v130 < 0) {
      operator delete((void *)cf[0]);
    }
    if (SHIBYTE(v132) < 0) {
      operator delete(v131[0]);
    }
  }

  sub_7D084(&__dst, a4);
  sub_7D084(v131, a4);
  int v63 = a1;
  *(_OWORD *)buf = *(_OWORD *)v131;
  *(void *)&buf[16] = v132;
  v131[1] = 0LL;
  signed int v132 = 0LL;
  v131[0] = 0LL;
  _BYTE buf[24] = 1;
  sub_302438( a1,  (char *)&__dst,  &v136,  (std::string *)buf,  &__p,  a5,  0x100000002LL,  0x100000002LL,  0.0,  (uint64_t)&v139,  1,  (uint64_t)a10);
  if (buf[24] && (buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v132) < 0) {
    operator delete(v131[0]);
  }
  if ((char)__dst.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!a7) {
      goto LABEL_172;
    }
  }

  else if (!a7)
  {
    goto LABEL_172;
  }

  if (!sub_AADB0(a10, 1))
  {
    if (sub_307BF0((char *)&v136))
    {
      int v71 = atomic_load((unsigned __int8 *)&qword_49D6D8);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_49D6D8))
      {
        sub_308340();
        __cxa_guard_release(&qword_49D6D8);
        int v63 = a1;
      }

      uint64_t v72 = qword_49D6C8;
      v66 = (std::__shared_weak_count *)qword_49D6D0;
      *(void *)buf = qword_49D6C8;
      *(void *)&buf[8] = qword_49D6D0;
      if (qword_49D6D0)
      {
        unsigned int v73 = (unint64_t *)(qword_49D6D0 + 8);
        do
          unsigned int v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }

      sub_143208(v63, v72, (uint64_t)v66);
      if (!v66) {
        goto LABEL_172;
      }
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        uint64_t v70 = __ldaxr(p_shared_owners);
      while (__stlxr(v70 - 1, p_shared_owners));
    }

    else
    {
      if (a8)
      {
        LODWORD(bytes.__r_.__value_.__l.__data_) = 1652127340;
        v126.__r_.__value_.__s.__data_[0] = 1;
        sub_307810((uint64_t)&__dst, (int *)&bytes);
        uint64_t v76 = CFDataCreate(0LL, (const UInt8 *)&v126, 1LL);
        if (!v76)
        {
          unsigned int v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v119, "Could not construct");
        }

        sub_14591C(&v128, v76);
        sub_1459C8((uint64_t)&__dst.__r_.__value_.__l.__cap_, "data", (const void **)&v128.__r_.__value_.__l.__data_);
        v131[0] = &__dst;
        v131[1] = &dword_0 + 2;
        char v77 = sub_5A950((uint64_t)v131);
        uint64_t v78 = 0LL;
        cf[0] = v77;
        do
        {
          uint64_t v79 = *(const void **)((char *)&__dst + v78 + 24);
          if (v79) {
            CFRelease(v79);
          }
          uint64_t v80 = *(const void **)((char *)&__dst.__r_.__value_.__l.__cap_ + v78);
          if (v80) {
            CFRelease(v80);
          }
          v78 -= 16LL;
        }

        while (v78 != -32);
        if (v128.__r_.__value_.__r.__words[0]) {
          CFRelease(v128.__r_.__value_.__l.__data_);
        }
        sub_2DC034((uint64_t)v131, v77);
        LODWORD(__dst.__r_.__value_.__l.__data_) = 1735553138;
        sub_2DC450((uint64_t)&__dst.__r_.__value_.__l.__size_, (uint64_t)v131);
        sub_149710((uint64_t)buf, (int *)&__dst, 1LL);
        sub_2DBF5C((uint64_t)&__dst.__r_.__value_.__l.__size_);
        sub_2DBF5C((uint64_t)v131);
        CFRelease(v77);
        sub_3078E0((uint64_t)&v139, (uint64_t)buf);
        sub_D0C4C(*(void **)&buf[16]);
        char v81 = *(void **)buf;
        *(void *)buf = 0LL;
        if (v81) {
          operator delete(v81);
        }
      }

      id v82 = qword_49D520;
      v66 = *(std::__shared_weak_count **)algn_49D528;
      *(void *)buf = qword_49D520;
      *(void *)&buf[8] = *(void *)algn_49D528;
      if (*(void *)algn_49D528)
      {
        int v83 = (unint64_t *)(*(void *)algn_49D528 + 8LL);
        do
          int v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }

      sub_143208(a1, v82, (uint64_t)v66);
      if (!v66) {
        goto LABEL_172;
      }
      int v85 = (unint64_t *)&v66->__shared_owners_;
      do
        uint64_t v70 = __ldaxr(v85);
      while (__stlxr(v70 - 1, v85));
    }

  int v59 = v104;
  *(_OWORD *)(a1 + 40) = v103;
  *(_OWORD *)(a1 + 56) = v59;
  *(void *)(a1 + 72) = v105;
  *(_OWORD *)(a1 + 104) = v102;
  sub_85B80((uint64_t *)&v107);
}

LABEL_92:
        uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v27, "Precondition failure.");
      }

      goto LABEL_73;
    }

    if (v10 == 1633907299) {
      goto LABEL_85;
    }
    int v12 = 1633969267;
    goto LABEL_72;
  }

  if (v10 > 1635152482)
  {
    if (v10 == 1635152483 || v10 == 1651077236) {
      goto LABEL_85;
    }
    int v11 = 1651077731;
LABEL_84:
    if (v10 == v11) {
      goto LABEL_85;
    }
    goto LABEL_97;
  }

  if (v10 != 1634629490 && v10 != 1634756195)
  {
    int v11 = 1634759267;
    goto LABEL_84;
  }

  if (inAddress) {
    operator delete((void *)inAddress);
  }
  sub_19DFC((uint64_t)v71);
  sub_19DFC((uint64_t)&v70[2]);
  sub_19DFC((uint64_t)buf);
  return 1LL;
}

                unsigned int v46 = 1000 * v45.__d_.__rep_;
LABEL_93:
                if (v46 > (v44.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                {
                  v47.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_96;
                }
              }

              v47.__d_.__rep_ = v46 + v44.__d_.__rep_;
LABEL_96:
              std::condition_variable::__do_timed_wait(&v111, &__lk, v47);
              std::chrono::steady_clock::now();
            }

            if (std::chrono::steady_clock::now().__d_.__rep_ >= v43 || v80) {
              goto LABEL_71;
            }
            continue;
          }
        }

        uint64_t v27 = 12;
        if (v26) {
          goto LABEL_62;
        }
LABEL_63:
        if (v27)
        {
          if (v27 == 12)
          {
            uint64_t v48 = sub_138E8(13);
            if ((*(_BYTE *)(v48 + 8) & 1) != 0)
            {
              uint64_t v49 = *(os_log_s **)v48;
              if (*(void *)v48)
              {
                if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
                {
                  __lk = *(std::unique_lock<std::mutex> *)a2;
                  sub_613AC((uint64_t)&v73, (unsigned int *)&__lk);
                  if (v75 >= 0) {
                    int v50 = &v73;
                  }
                  else {
                    int v50 = v73;
                  }
                  buf.mSelector = 136315906;
                  *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                  unsigned int v102 = 1024;
                  unint64_t v103 = 288;
                  unint64_t v104 = 2080;
                  *(void *)__n128 v105 = v50;
                  *(_WORD *)&v105[8] = 1024;
                  *(_DWORD *)&v105[10] = a1;
                  _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                  if (v75 < 0) {
                    operator delete(v73);
                  }
                }
              }
            }
          }

          sub_7D898((uint64_t)&__p);
          std::condition_variable::~condition_variable(&v111);
          std::mutex::~mutex(&v112);
          unsigned int v51 = v87;
LABEL_117:
          if (v51) {
            operator delete(v51);
          }
          return;
        }
      }

      id v32 = 0;
      if (!v67) {
        goto LABEL_58;
      }
LABEL_57:
      unsigned int v68 = v31;
      operator delete(v31);
      goto LABEL_58;
    }

    int v84 = 0LL;
    int v85 = 0LL;
    unsigned int v86 = 0LL;
    unsigned int v51 = v87;
    sub_7A5B8(&v84, v87, v88, (v88 - (uint64_t)v87) >> 2);
    char v81 = 0LL;
    id v82 = 0LL;
    int v83 = 0LL;
    sub_7A5B8(&v81, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    char v52 = v84;
    int v53 = v81;
    if (v85 - v84 == v82 - v81)
    {
      v54 = memcmp(v84, v81, v85 - v84) == 0;
      if (!v53)
      {
LABEL_125:
        if (v52)
        {
          int v85 = v52;
          operator delete(v52);
          if (!v54) {
            goto LABEL_49;
          }
        }

        else if (!v54)
        {
          goto LABEL_49;
        }

        __int16 v55 = sub_138E8(13);
        if ((*(_BYTE *)(v55 + 8) & 1) != 0)
        {
          int v56 = *(os_log_s **)v55;
          if (*(void *)v55)
          {
            if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
            {
              buf.mSelector = 136315650;
              *(void *)&buf.mScope = "HALPropertySynchronizer.h";
              unsigned int v102 = 1024;
              unint64_t v103 = 219;
              unint64_t v104 = 1024;
              *(_DWORD *)__n128 v105 = a1;
              _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitiv e for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
            }
          }
        }

        goto LABEL_117;
      }
    }

    else
    {
      v54 = 0;
      if (!v81) {
        goto LABEL_125;
      }
    }

    id v82 = v53;
    operator delete(v53);
    goto LABEL_125;
  }

    int v20 = 1;
    int v21 = 1LL;
  }

  while ((v63 & 1) == 0);
  sub_CC160(a1);
}

LABEL_85:
  if (v9) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return v4;
}

  sub_93128((uint64_t)&v57);
  return v6;
}

        sub_7D898((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&v74);
        std::mutex::~mutex(&v75);
        return v16;
      }

      v18.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      id v19 = sub_138E8(13);
      if ((*(_BYTE *)(v19 + 8) & 1) != 0)
      {
        int v20 = *(os_log_s **)v19;
        if (*(void *)v19)
        {
          if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            uint64_t v65 = 1024;
            v66 = 257;
            uint64_t v67 = 2080;
            *(void *)unsigned int v68 = "with timeout";
            *(_WORD *)&v68[8] = 1024;
            *(_DWORD *)&v68[10] = v51;
            _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v75;
      __lk.__owns_ = 1;
      std::mutex::lock(&v75);
      v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v58)
      {
        int v22 = v21.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v22 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_20;
          }
          v23.__d_.__rep_ = v22 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v23.__d_.__rep_ >= 1) {
            break;
          }
LABEL_38:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v22 || v58) {
            goto LABEL_20;
          }
        }

        std::chrono::steady_clock::now();
        v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v24.__d_.__rep_)
        {
          id v25 = 0LL;
          goto LABEL_34;
        }

        if (v24.__d_.__rep_ < 1)
        {
          id v25 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v24.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            id v25 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_34;
          }

  sub_1BB88(&v162);
}

            memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
            v148.__m_.__sig = 850045863LL;
            memset(v147.__cv_.__opaque, 0, sizeof(v147.__cv_.__opaque));
            v147.__cv_.__sig = 1018212795LL;
            unsigned int v119 = 0;
            sub_7D684(&__p, os_unfair_lock_opaque, &inAddress, (uint64_t)&v147, (uint64_t)&v148, (uint64_t)&v119);
            unsigned int v46 = 2000LL;
            while (1)
            {
              sub_CFB64((uint64_t)&v113, (uint64_t)&v134);
              uint64_t v47 = v113;
              if (v116) {
                goto LABEL_87;
              }
              uint64_t v110 = 0LL;
              uint64_t v111 = 0LL;
              uint64_t v112 = 0LL;
              uint64_t v49 = v114;
              int v50 = (v114 - (uint64_t)v113) >> 2;
              sub_7A5B8(&v110, v113, v114, v50);
              uint64_t v107 = 0LL;
              uint64_t v108 = 0LL;
              char v109 = 0LL;
              sub_7A5B8(&v107, v32, v90, (v90 - (uint64_t)v32) >> 2);
              unsigned int v51 = v110;
              char v52 = v107;
              if (v111 - v110 == v108 - v107) {
                break;
              }
              int v53 = 0;
              if (v107) {
                goto LABEL_95;
              }
LABEL_96:
              if (v51)
              {
                uint64_t v111 = v51;
                operator delete(v51);
              }

              if (v53)
              {
                uint64_t v48 = 12;
                if (!v47) {
                  goto LABEL_89;
                }
                goto LABEL_88;
              }

              if (v46 > 0)
              {
                v54.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                __int16 v55 = sub_138E8(13);
                if ((*(_BYTE *)(v55 + 8) & 1) != 0)
                {
                  int v56 = *(os_log_s **)v55;
                  if (*(void *)v55)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
                    {
                      buf.mSelector = 136315906;
                      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                      int v138 = 1024;
                      CFMutableDictionaryRef v139 = 257;
                      unsigned int v140 = 2080;
                      *(void *)uint64_t v141 = "with timeout";
                      *(_WORD *)&v141[8] = 1024;
                      *(_DWORD *)&v141[10] = os_unfair_lock_opaque;
                      _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
                    }
                  }
                }

                sub_6DD4();
                *(void *)&buf.mSelector = &qword_48F828;
                LOBYTE(buf.mElement) = 0;
                LOBYTE(buf.mElement) = sub_1A30E4();
                __lk.__m_ = &v148;
                __lk.__owns_ = 1;
                std::mutex::lock(&v148);
                v57.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                if (v119)
                {
LABEL_107:
                  if (__lk.__owns_) {
                    std::mutex::unlock(__lk.__m_);
                  }
                  sub_7D790((uint64_t)&buf);
                  uint64_t v48 = 0;
                  v46 += (std::chrono::system_clock::now().__d_.__rep_ - v54.__d_.__rep_) / -1000;
                  if (!v47) {
                    goto LABEL_89;
                  }
LABEL_88:
                  operator delete(v47);
                  goto LABEL_89;
                }

                __int16 v64 = v57.__d_.__rep_ + 1000000 * v46;
                while (2)
                {
                  if (v64 <= std::chrono::steady_clock::now().__d_.__rep_) {
                    goto LABEL_107;
                  }
                  v65.__d_.__rep_ = v64 - std::chrono::steady_clock::now().__d_.__rep_;
                  if (v65.__d_.__rep_ >= 1)
                  {
                    std::chrono::steady_clock::now();
                    v66.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                    if (!v66.__d_.__rep_)
                    {
                      uint64_t v67 = 0LL;
                      goto LABEL_129;
                    }

                    if (v66.__d_.__rep_ < 1)
                    {
                      uint64_t v67 = 0x8000000000000000LL;
                    }

                    else
                    {
                      if ((unint64_t)v66.__d_.__rep_ > 0x20C49BA5E353F7LL)
                      {
                        uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
                        goto LABEL_129;
                      }

      id v37 = _os_feature_enabled_impl("VirtualAudio", "podcast_production");
      if (v21 == 1) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t v18 = v38 & v18 & HIDWORD(v44);
    }
  }

        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_7D790((uint64_t)__p);
      }

      uint64_t v70 = sub_138E8(13);
      if ((*(_BYTE *)(v70 + 8) & 1) != 0)
      {
        int v53 = *(os_log_s **)v70;
        if (!*(void *)v70) {
          goto LABEL_127;
        }
        if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
        {
          int v101 = inAddress;
          sub_613AC((uint64_t)&__lk, &v101.mSelector);
          int v71 = v103 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 288;
          *(_WORD *)&__p[18] = 2080;
          *(void *)uint64_t v111 = v71;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)&v111[10] = v54;
          _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  __p,  0x22u);
          if (v103 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }

      int v53 = 0LL;
LABEL_127:
      sub_7D898((uint64_t)inClientData);
      std::condition_variable::~condition_variable(&v120);
      std::mutex::~mutex(&v121);
      LODWORD(v44) = v98;
      id v14 = v99;
LABEL_128:
      char v52 = (_DWORD)v53 == 0;
LABEL_129:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 552LL))(a1);
      uint64_t v75 = *(void **)(a1 + 240);
      uint64_t v76 = *(void **)(a1 + 248);
      while (v75 != v76)
      {
        uint64_t result = (*(uint64_t (**)(void, BOOL))(*(void *)*v75 + 40LL))(*v75, v52);
        v75 += 2;
      }

      char v77 = *(void *)(a1 + 112);
      uint64_t v78 = *(void *)(a1 + 88);
      if (v77)
      {
        if (v78)
        {
          *(void *)(a1 + 88) = 0LL;
          *(void *)&__p[8] = 0LL;
          *(_DWORD *)&__p[16] = 0;
          uint64_t v79 = *(void *)(v77 + 24);
          *(void *)(v77 + 24) = v78;
          if (v79) {
            (*(void (**)(uint64_t))(*(void *)v79 + 8LL))(v79);
          }
          *(void *)std::string __p = off_47AFC0;
          *(void *)&v111[4] = 0LL;
          caulk::concurrent::message::~message((caulk::concurrent::message *)__p);
          uint64_t v80 = *(caulk::concurrent::message **)(a1 + 112);
          sub_92104();
          uint64_t result = caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_4A9D88, v80);
          *(void *)(a1 + 112) = 0LL;
        }
      }

      else if (v78)
      {
        char v81 = sub_138E8(16);
        uint64_t result = sub_1D71E4( 1,  v81,  (uint64_t)"",  2216,  (uint64_t)"",  "AudioIOMonitor is valid, but IOMonitorCloseMsg is null. Not closing capture");
      }

      *(_BYTE *)(a1 + 104) = 0;
      if (v14)
      {
        int v85 = (os_log_t *)sub_138E8(13);
        unsigned int v86 = *v85;
        if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 2224;
          _os_log_impl( &dword_0,  v86,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (willStopResult): Error calling WillStopIO on physical devices.",  __p,  0x12u);
        }

        uint64_t v87 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v87 = &off_4865A0;
        v87[2] = v14;
      }

      if ((_DWORD)v44)
      {
        int v88 = (os_log_t *)sub_138E8(13);
        int v89 = *v88;
        if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 2228;
          _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stopResult): Unable to stop IO.",  __p,  0x12u);
        }

        unsigned int v90 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned int v90 = &off_4865A0;
        v90[2] = v44;
      }

      if ((_DWORD)v53)
      {
        unsigned int v91 = (os_log_t *)sub_138E8(13);
        unsigned int v92 = *v91;
        if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&v121, (uint64_t)v53);
          unsigned int v93 = v121.__m_.__opaque[15] >= 0 ? &v121 : (std::mutex *)v121.__m_.__sig;
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 2232;
          *(_WORD *)&__p[18] = 2080;
          *(void *)uint64_t v111 = v93;
          _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (isRunningResult): Error waiting to receive kAudioDevicePropertyDeviceIsRunning proper ty notification while stopping I/O proc: %s",  __p,  0x1Cu);
          if (v121.__m_.__opaque[15] < 0) {
            operator delete((void *)v121.__m_.__sig);
          }
        }

        uint64_t v94 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v94 = &off_4865A0;
        v94[2] = (_DWORD)v53;
      }

      if (v51)
      {
        unsigned int v95 = (os_log_t *)sub_138E8(13);
        unsigned int v96 = *v95;
        if (*v95)
        {
          if (os_log_type_enabled(*v95, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 2236;
            _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (didStopResult): Error calling DidStopIO on physical devices.",  __p,  0x12u);
          }
        }

        uint64_t v97 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v97 = &off_4865A0;
        v97[2] = v51;
      }

      return result;
    }

    unsigned int v69 = sub_138E8(13);
    if ((*(_BYTE *)(v69 + 8) & 1) != 0)
    {
      int v53 = *(os_log_s **)v69;
      if (!*(void *)v69) {
        goto LABEL_128;
      }
      if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 219;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)uint64_t v111 = v54;
        _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  __p,  0x18u);
      }
    }

    int v53 = 0LL;
    goto LABEL_128;
  }

  int v7 = sub_138E8(16);
  int v8 = sub_138E8(31);
  int v9 = 0;
  int v10 = 0LL;
  *(void *)std::string __p = 0x100000002LL;
  int v11 = *(void *)(v7 + 8);
  while (1)
  {
    int v12 = *(int *)&__p[4 * v10];
    uint64_t v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    int v9 = 1;
    int v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_23;
    }
  }

  if ((v11 & v12) == 0) {
    int v7 = v8;
  }
LABEL_23:
  sub_2CA1C(__p, a2);
  id v25 = v111[3];
  uint64_t v26 = *(const char **)__p;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  uint64_t v28 = __p;
  if (v25 < 0) {
    uint64_t v28 = v26;
  }
  sub_1D71E4(3, v7, (uint64_t)"", 2156, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v28, v27);
  if ((v111[3] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  kdebug_trace(553912349LL, (int)a2, 0LL, 0LL, 0LL);
  if ((_DWORD)a2 == 1) {
    id v29 = 0LL;
  }
  else {
    id v29 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
  }
  unsigned int v30 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v29);
  uint64_t result = kdebug_trace(553912350LL, (int)a2, 0LL, 0LL, 0LL);
  if ((_DWORD)v30)
  {
    uint64_t v31 = sub_138E8(16);
    sub_2CA1C(__p, v30);
    id v32 = v111[3];
    __n128 v33 = *(const char **)__p;
    sub_23FE8((uint64_t)&v121, (os_unfair_lock_t)(a1 + 8));
    v34 = __p;
    if (v32 < 0) {
      v34 = v33;
    }
    if (v121.__m_.__opaque[15] >= 0) {
      uint64_t v35 = (const char *)&v121;
    }
    else {
      uint64_t v35 = (const char *)v121.__m_.__sig;
    }
    sub_1D71E4(1, v31, (uint64_t)"", 2161, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v34, v35);
    if (v121.__m_.__opaque[15] < 0) {
      operator delete((void *)v121.__m_.__sig);
    }
    if ((v111[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v36 = (os_log_t *)sub_138E8(13);
    id v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 2164;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stopResult): Unable to stop IO.",  __p,  0x12u);
    }

    uint64_t v38 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v38 = &off_4865A0;
    v38[2] = v30;
  }

  return result;
}

  if ((v32 & 1) != 0)
  {
LABEL_86:
    std::mutex::unlock(v11);
    return;
  }

void sub_13308(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_133C4(uint64_t a1)
{
  int v2 = pthread_self();
  uint64_t v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  return pthread_equal(v2, v3) != 0;
}

BOOL sub_133F8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 584) != 1;
}

uint64_t sub_13408(uint64_t a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v7 = v5;
  char v8 = 1;
  if (*(_BYTE *)(a1 + 9) && v5 && *(void *)a1) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, v5);
  }
  return sub_1348C((uint64_t)&v7);
}

void sub_13478(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1348C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    int v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

uint64_t sub_134C4(uint64_t a1, void *key, int a3)
{
  CFNumberRef v5 = &kCFBooleanTrue;
  if (!a3) {
    CFNumberRef v5 = &kCFBooleanFalse;
  }
  CFBooleanRef v6 = *v5;
  CFBooleanRef v10 = v6;
  char v11 = 1;
  if (v6) {
    CFRetain(v6);
  }
  if (*(_BYTE *)(a1 + 9))
  {
    CFNumberRef v7 = *(__CFDictionary **)a1;
    if (v6) {
      BOOL v8 = v7 == 0LL;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      CFDictionarySetValue(v7, key, v6);
    }
  }

  return sub_13568((uint64_t)&v10);
}

void sub_13554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_13568(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    int v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

uint64_t sub_135A0(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    CFBooleanRef v6 = (os_log_t *)sub_138E8(13);
    CFNumberRef v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      CFBooleanRef v10 = "VirtualAudio_Device.cpp";
      __int16 v11 = 1024;
      int v12 = 625;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = 1016LL;
  if (a2) {
    uint64_t v4 = 1040LL;
  }
  return a1 + v4;
}

void sub_136C4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_136E0(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  while (a2 != a3)
  {
    CFNumberRef v7 = (void *)a2[1];
    BOOL v8 = a2;
    if (v7)
    {
      do
      {
        int v9 = v7;
        CFNumberRef v7 = (void *)*v7;
      }

      while (v7);
    }

    else
    {
      do
      {
        int v9 = (void *)v8[2];
        BOOL v10 = *v9 == (void)v8;
        BOOL v8 = v9;
      }

      while (!v10);
    }

    uint64_t result = sub_1378C(a1, *((_DWORD *)a2 + 7));
    a2 = v9;
  }

  return result;
}

void sub_13778(_Unwind_Exception *a1)
{
}

uint64_t sub_1378C(uint64_t result, int a2)
{
  if (*(void *)result)
  {
    uint64_t v2 = result;
    if (*(_BYTE *)(result + 9))
    {
      int valuePtr = a2;
      CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v4 = v3;
      char v5 = 1;
      if (v3 && *(void *)v2)
      {
        if (*(_BYTE *)(v2 + 9)) {
          CFArrayAppendValue(*(CFMutableArrayRef *)v2, v3);
        }
      }

      return sub_1348C((uint64_t)&v4);
    }
  }

  return result;
}

void sub_13804(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_13818(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

uint64_t sub_13850(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

uint64_t sub_13888(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    CFNumberRef v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
  }

  char v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  if (v6) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v5);
  }
  return a1;
}

uint64_t sub_138E8(int a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_48E6A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_48E6A0))
  {
    sub_14ABB8();
    __cxa_guard_release(&qword_48E6A0);
  }

  return qword_48E548[a1];
}

void sub_13944(_Unwind_Exception *a1)
{
}

void sub_1395C(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, void *a6)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v6 & 1) == 0)
  {
    float v116 = (os_log_t *)sub_138E8(13);
    unsigned int v117 = *v116;
    if (*v116 && os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFTypeRef cf = 136315394;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 665;
      _os_log_impl( &dword_0,  v117,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Underlying Port is not valid",  cf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1) & 1) == 0)
  {
    unsigned int v119 = (os_log_t *)sub_138E8(13);
    uint64_t v120 = *v119;
    if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef Mutable = *(CFTypeRef *)a2;
      unsigned int v481 = a2[2];
      sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
      int v121 = v486 >= 0 ? &v484 : (CFTypeRef *)v484;
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 667;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = v121;
      _os_log_impl( &dword_0,  v120,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  cf,  0x1Cu);
      if (v486 < 0) {
        operator delete((void *)v484);
      }
    }

    int v122 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v122 = &off_4865A0;
    v122[2] = 2003332927;
  }

  if (((_DWORD)a3 == 0) != (a4 == 0LL))
  {
    __n128 v123 = (os_log_t *)sub_138E8(13);
    v124 = *v123;
    if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef Mutable = *(CFTypeRef *)a2;
      unsigned int v481 = a2[2];
      sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
      uint64_t v125 = v486 >= 0 ? &v484 : (CFTypeRef *)v484;
      *(_DWORD *)CFTypeRef cf = 136316162;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 668;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = v125;
      *(_WORD *)&cf[28] = 1024;
      *(_DWORD *)uint64_t v488 = a3;
      *(_WORD *)&v488[4] = 2048;
      *(void *)&v488[6] = a4;
      _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        cf,
        0x2Cu);
      if (v486 < 0) {
        operator delete((void *)v484);
      }
    }

    uint64_t v126 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v126 = &off_4865A0;
    v126[2] = 561211770;
  }

  if (!a6)
  {
    char v127 = (os_log_t *)sub_138E8(13);
    uint64_t v128 = *v127;
    if (*v127 && os_log_type_enabled(*v127, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef Mutable = *(CFTypeRef *)a2;
      unsigned int v481 = a2[2];
      sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
      uint64_t v129 = v486 >= 0 ? &v484 : (CFTypeRef *)v484;
      *(_DWORD *)CFTypeRef cf = 136315906;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 669;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = "outData";
      *(_WORD *)&cf[28] = 2080;
      *(void *)uint64_t v488 = v129;
      _os_log_impl( &dword_0,  v128,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  cf,  0x26u);
      if (v486 < 0) {
        operator delete((void *)v484);
      }
    }

    uint64_t v130 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v130 = &off_4865A0;
    v130[2] = 561211770;
  }

  int v13 = *a2;
  if ((int)*a2 <= 1886417761)
  {
    if (v13 > 1819046767)
    {
      if (v13 > 1885890928)
      {
        if (v13 > 1886282092)
        {
          if (v13 <= 1886353261)
          {
            if (v13 != 1886282093)
            {
              if (v13 != 1886282099)
              {
                if (v13 == 1886283375)
                {
                  unsigned int v14 = *a5;
                  if (v14 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
                  {
                    CFMutableDictionaryRef v139 = (os_log_t *)sub_138E8(13);
                    unsigned int v140 = *v139;
                    if (*v139 && os_log_type_enabled(*v139, OS_LOG_TYPE_ERROR))
                    {
                      CFTypeRef Mutable = *(CFTypeRef *)a2;
                      unsigned int v481 = a2[2];
                      sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                      int v141 = v486;
                      id v142 = (CFTypeRef *)v484;
                      unsigned int v143 = *a5;
                      int v144 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                      int v145 = &v484;
                      *(_DWORD *)CFTypeRef cf = 136316162;
                      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                      if (v141 < 0) {
                        int v145 = v142;
                      }
                      *(_WORD *)&cf[12] = 1024;
                      *(_DWORD *)&cf[14] = 797;
                      *(_WORD *)&cf[18] = 2080;
                      *(void *)&cf[20] = v145;
                      *(_WORD *)&cf[28] = 1024;
                      *(_DWORD *)uint64_t v488 = v143;
                      *(_WORD *)&v488[4] = 1024;
                      *(_DWORD *)&v488[6] = v144;
                      _os_log_impl( &dword_0,  v140,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required si ze (passed: %u; required: %u).",
                        cf,
                        0x28u);
                      if (v486 < 0) {
                        operator delete((void *)v484);
                      }
                    }

                    int v146 = __cxa_allocate_exception(0x10uLL);
                    *(void *)int v146 = &off_4865A0;
                    v146[2] = 561211770;
                  }

                  sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 798);
                  (*(void (**)(_BYTE *__return_ptr))(*(void *)v484 + 352LL))(cf);
                  int v15 = *(const void **)cf;
                  if (*(void *)cf)
                  {
LABEL_228:
                    CFRetain(v15);
                    uint64_t v85 = *(void *)cf;
LABEL_230:
                    *a6 = v85;
                    sub_13850((uint64_t)cf);
LABEL_290:
                    BOOL v98 = &v484;
                    goto LABEL_291;
                  }

LABEL_229:
                  uint64_t v85 = 0LL;
                  goto LABEL_230;
                }

LABEL_277:
                sub_6A140(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
                return;
              }

              unsigned int v99 = *a5;
              if (v99 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
              {
                v443 = (os_log_t *)sub_138E8(13);
                uint64_t v444 = *v443;
                if (*v443 && os_log_type_enabled(*v443, OS_LOG_TYPE_ERROR))
                {
                  CFTypeRef Mutable = *(CFTypeRef *)a2;
                  unsigned int v481 = a2[2];
                  sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                  int v445 = v486;
                  v446 = (CFTypeRef *)v484;
                  unsigned int v447 = *a5;
                  int v448 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                  id v449 = &v484;
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  if (v445 < 0) {
                    id v449 = v446;
                  }
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 807;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v449;
                  *(_WORD *)&cf[28] = 1024;
                  *(_DWORD *)uint64_t v488 = v447;
                  *(_WORD *)&v488[4] = 1024;
                  *(_DWORD *)&v488[6] = v448;
                  _os_log_impl( &dword_0,  v444,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size(passed: %u; required: %u).",
                    cf,
                    0x28u);
                  if (v486 < 0) {
                    operator delete((void *)v484);
                  }
                }

                v450 = __cxa_allocate_exception(0x10uLL);
                *(void *)v450 = &off_4865A0;
                v450[2] = 561211770;
              }

              uint64_t v100 = sub_26E7BC(*(void *)(a1 + 80));
              sub_D4450((uint64_t)cf, a1, SHIDWORD(v100));
              uint64_t v65 = *(const void **)cf;
              if (*(void *)cf) {
                goto LABEL_269;
              }
              goto LABEL_271;
            }

            unsigned int v96 = *a5;
            if (v96 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              unsigned int v427 = (os_log_t *)sub_138E8(13);
              int v428 = *v427;
              if (*v427 && os_log_type_enabled(*v427, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                unsigned int v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                int v429 = v486;
                uint64_t v430 = (CFTypeRef *)v484;
                unsigned int v431 = *a5;
                int v432 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                int v433 = &v484;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v429 < 0) {
                  int v433 = v430;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 720;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v433;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)uint64_t v488 = v431;
                *(_WORD *)&v488[4] = 1024;
                *(_DWORD *)&v488[6] = v432;
                _os_log_impl( &dword_0,  v428,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa ssed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              v434 = __cxa_allocate_exception(0x10uLL);
              *(void *)v434 = &off_4865A0;
              v434[2] = 561211770;
            }

            sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 721);
            (*(void (**)(_BYTE *__return_ptr))(*(void *)v484 + 136LL))(cf);
            uint64_t v67 = *(const void **)cf;
            if (*(void *)cf) {
              goto LABEL_261;
            }
LABEL_288:
            uint64_t v109 = 0LL;
            goto LABEL_289;
          }

          if (v13 != 1886353262)
          {
            if (v13 != 1886415204)
            {
              if (v13 != 1886417524) {
                goto LABEL_277;
              }
              unsigned int v37 = *a5;
              if (v37 < (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
              {
                char v203 = (os_log_t *)sub_138E8(13);
                uint64_t v204 = *v203;
                if (*v203 && os_log_type_enabled(*v203, OS_LOG_TYPE_ERROR))
                {
                  CFTypeRef Mutable = *(CFTypeRef *)a2;
                  unsigned int v481 = a2[2];
                  sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                  int v205 = v486;
                  uint64_t v206 = (CFTypeRef *)v484;
                  unsigned int v207 = *a5;
                  int v208 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                  uint64_t v209 = &v484;
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  if (v205 < 0) {
                    uint64_t v209 = v206;
                  }
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 773;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v209;
                  *(_WORD *)&cf[28] = 1024;
                  *(_DWORD *)uint64_t v488 = v207;
                  *(_WORD *)&v488[4] = 1024;
                  *(_DWORD *)&v488[6] = v208;
                  _os_log_impl( &dword_0,  v204,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
                    cf,
                    0x28u);
                  if (v486 < 0) {
                    operator delete((void *)v484);
                  }
                }

                uint64_t v210 = __cxa_allocate_exception(0x10uLL);
                *(void *)uint64_t v210 = &off_4865A0;
                v210[2] = 561211770;
              }

              sub_D4170(cf, a1, a2[1]);
LABEL_182:
              __int16 v58 = *(const void **)cf;
              size_t v59 = *(void *)&cf[8] - *(void *)cf;
              BOOL v40 = *(void *)&cf[8] == *(void *)cf;
              *a5 = (*(_DWORD *)&cf[8] - *(_DWORD *)cf) & 0xFFFFFFFC;
              if (!v40) {
                memmove(a6, v58, v59);
              }
              if (v58)
              {
                __int16 v60 = (void *)v58;
LABEL_186:
                operator delete(v60);
                return;
              }

              return;
            }

            unsigned int v103 = *a5;
            if (v103 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              v451 = (os_log_t *)sub_138E8(13);
              int v452 = *v451;
              if (*v451 && os_log_type_enabled(*v451, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                unsigned int v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                int v453 = v486;
                id v454 = (CFTypeRef *)v484;
                unsigned int v455 = *a5;
                int v456 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                v457 = &v484;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v453 < 0) {
                  v457 = v454;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 701;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v457;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)uint64_t v488 = v455;
                *(_WORD *)&v488[4] = 1024;
                *(_DWORD *)&v488[6] = v456;
                _os_log_impl( &dword_0,  v452,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa ssed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              uint64_t v458 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v458 = &off_4865A0;
              v458[2] = 561211770;
            }

            unint64_t v104 = (uint64_t *)(a1 + 88);
            sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 702);
            (*(void (**)(const void **__return_ptr))(**(void **)(*(void *)cf + 192LL) + 448LL))(&v483);
            sub_7A768((uint64_t)cf);
            if (!v483)
            {
              char v113 = (os_log_t *)sub_138E8(23);
              id v32 = *v113;
              if (*v113)
              {
                if (os_log_type_enabled(*v113, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v114 = &v484;
                  sub_2CA1C(&v484, 1886415204LL);
                  if (v486 < 0) {
                    uint64_t v114 = (void *)v484;
                  }
                  sub_B8CBC((uint64_t *)&v478, v104, "", 704);
                  *(_OWORD *)int valuePtr = v478;
                  __int128 v478 = 0uLL;
                  sub_23FE8((uint64_t)&Mutable, (os_unfair_lock_t)&valuePtr[0]->info);
                  if (v482 >= 0) {
                    float v115 = &Mutable;
                  }
                  else {
                    float v115 = (void *)Mutable;
                  }
                  *(_DWORD *)CFTypeRef cf = 136315906;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 704;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v114;
                  *(_WORD *)&cf[28] = 2080;
                  *(void *)uint64_t v488 = v115;
LABEL_308:
                  _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, v35, cf, 0x26u);
                  if (v482 < 0) {
                    operator delete((void *)Mutable);
                  }
                  sub_7A768((uint64_t)valuePtr);
                  sub_7A768((uint64_t)&v478);
                  if (v486 < 0) {
                    operator delete((void *)v484);
                  }
                  goto LABEL_276;
                }
              }
            }

            goto LABEL_276;
          }

          unsigned int v97 = *a5;
          if (v97 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            unsigned int v435 = (os_log_t *)sub_138E8(13);
            int v436 = *v435;
            if (*v435 && os_log_type_enabled(*v435, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v437 = v486;
              uint64_t v438 = (CFTypeRef *)v484;
              unsigned int v439 = *a5;
              int v440 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v441 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v437 < 0) {
                v441 = v438;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 871;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v441;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v439;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v440;
              _os_log_impl( &dword_0,  v436,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            unsigned int v442 = __cxa_allocate_exception(0x10uLL);
            *(void *)unsigned int v442 = &off_4865A0;
            v442[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 872);
          uint64_t v17 = *(void *)(*(void *)cf + 192LL);
          if (v17) {
            LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 120LL))(v17);
          }
          goto LABEL_265;
        }

        if (v13 > 1885956207)
        {
          if (v13 != 1885956208)
          {
            if (v13 != 1885959026)
            {
              if (v13 != 1886218596) {
                goto LABEL_277;
              }
              unsigned int v29 = *a5;
              if (v29 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
              {
                unsigned int v195 = (os_log_t *)sub_138E8(13);
                unsigned int v196 = *v195;
                if (*v195 && os_log_type_enabled(*v195, OS_LOG_TYPE_ERROR))
                {
                  CFTypeRef Mutable = *(CFTypeRef *)a2;
                  unsigned int v481 = a2[2];
                  sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                  int v197 = v486;
                  uint64_t v198 = (CFTypeRef *)v484;
                  unsigned int v199 = *a5;
                  int v200 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                  uint64_t v201 = &v484;
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  if (v197 < 0) {
                    uint64_t v201 = v198;
                  }
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 711;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v201;
                  *(_WORD *)&cf[28] = 1024;
                  *(_DWORD *)uint64_t v488 = v199;
                  *(_WORD *)&v488[4] = 1024;
                  *(_DWORD *)&v488[6] = v200;
                  _os_log_impl( &dword_0,  v196,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size(passed: %u; required: %u).",
                    cf,
                    0x28u);
                  if (v486 < 0) {
                    operator delete((void *)v484);
                  }
                }

                uint64_t v202 = __cxa_allocate_exception(0x10uLL);
                *(void *)uint64_t v202 = &off_4865A0;
                v202[2] = 561211770;
              }

              unsigned int v30 = (uint64_t *)(a1 + 88);
              sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 712);
              (*(void (**)(const void **__return_ptr))(**(void **)(*(void *)cf + 192LL) + 456LL))(&v483);
              sub_7A768((uint64_t)cf);
              if (!v483)
              {
                uint64_t v31 = (os_log_t *)sub_138E8(23);
                id v32 = *v31;
                if (*v31)
                {
                  if (os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
                  {
                    __n128 v33 = &v484;
                    sub_2CA1C(&v484, 1886218596LL);
                    if (v486 < 0) {
                      __n128 v33 = (void *)v484;
                    }
                    sub_B8CBC((uint64_t *)&v478, v30, "", 714);
                    *(_OWORD *)int valuePtr = v478;
                    __int128 v478 = 0uLL;
                    sub_23FE8((uint64_t)&Mutable, (os_unfair_lock_t)&valuePtr[0]->info);
                    if (v482 >= 0) {
                      v34 = &Mutable;
                    }
                    else {
                      v34 = (void *)Mutable;
                    }
                    *(_DWORD *)CFTypeRef cf = 136315906;
                    *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                    *(_WORD *)&cf[12] = 1024;
                    *(_DWORD *)&cf[14] = 714;
                    *(_WORD *)&cf[18] = 2080;
                    *(void *)&cf[20] = v33;
                    *(_WORD *)&cf[28] = 2080;
                    *(void *)uint64_t v488 = v34;
                    goto LABEL_308;
                  }
                }
              }

LABEL_276:
              __n128 v105 = v483;
              int v483 = 0LL;
              *a6 = v105;
              sub_7A738(&v483);
              return;
            }

            unsigned int v94 = *a5;
            if (v94 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              int v411 = (os_log_t *)sub_138E8(13);
              uint64_t v412 = *v411;
              if (*v411 && os_log_type_enabled(*v411, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                unsigned int v481 = a2[2];
                sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
                int v413 = v486;
                v414 = (CFTypeRef *)v484;
                unsigned int v415 = *a5;
                int v416 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                uint64_t v417 = &v484;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v413 < 0) {
                  uint64_t v417 = v414;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 730;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v417;
                *(_WORD *)&cf[28] = 1024;
                *(_DWORD *)uint64_t v488 = v415;
                *(_WORD *)&v488[4] = 1024;
                *(_DWORD *)&v488[6] = v416;
                _os_log_impl( &dword_0,  v412,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa ssed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v486 < 0) {
                  operator delete((void *)v484);
                }
              }

              id v418 = __cxa_allocate_exception(0x10uLL);
              *(void *)id v418 = &off_4865A0;
              v418[2] = 561211770;
            }

            sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 731);
            LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 160LL))(*(void *)cf);
            goto LABEL_265;
          }

          unsigned int v86 = *a5;
          if (v86 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            int v371 = (os_log_t *)sub_138E8(13);
            v372 = *v371;
            if (*v371 && os_log_type_enabled(*v371, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v373 = v486;
              uint64_t v374 = (CFTypeRef *)v484;
              unsigned int v375 = *a5;
              int v376 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v377 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v373 < 0) {
                v377 = v374;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 905;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v377;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v375;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v376;
              _os_log_impl( &dword_0,  v372,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            v378 = __cxa_allocate_exception(0x10uLL);
            *(void *)v378 = &off_4865A0;
            v378[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 906);
          if (((*(uint64_t (**)(void))(**(void **)cf + 112LL))(*(void *)cf) & 0xFF00000000LL) != 0)
          {
            sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 907);
            BOOL v41 = (*(uint64_t (**)(CFTypeRef))(*(void *)v484 + 112LL))(v484) == 1701865584;
            sub_7A768((uint64_t)&v484);
          }

          else
          {
            BOOL v41 = 0;
          }

LABEL_299:
          sub_7A768((uint64_t)cf);
          *(_DWORD *)a6 = v41;
          return;
        }

        if (v13 != 1885890929)
        {
          int v20 = 1885955428;
LABEL_166:
          if (v13 != v20) {
            goto LABEL_277;
          }
          goto LABEL_167;
        }

        unsigned int v92 = *a5;
        if (v92 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          id v395 = (os_log_t *)sub_138E8(13);
          v396 = *v395;
          if (*v395 && os_log_type_enabled(*v395, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            unsigned int v481 = a2[2];
            sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
            int v397 = v486;
            uint64_t v398 = (CFTypeRef *)v484;
            unsigned int v399 = *a5;
            int v400 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            v401 = &v484;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v397 < 0) {
              v401 = v398;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 792;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v401;
            *(_WORD *)&cf[28] = 1024;
            *(_DWORD *)uint64_t v488 = v399;
            *(_WORD *)&v488[4] = 1024;
            *(_DWORD *)&v488[6] = v400;
            _os_log_impl( &dword_0,  v396,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              cf,
              0x28u);
            if (v486 < 0) {
              operator delete((void *)v484);
            }
          }

          uint64_t v402 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v402 = &off_4865A0;
          v402[2] = 561211770;
        }

        sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 793);
        int v51 = (*(unsigned __int16 *)(*(void *)cf + 184LL) >> 9) & 1;
        goto LABEL_252;
      }

      if (v13 <= 1885434721)
      {
        if (v13 <= 1819505772)
        {
          if (v13 != 1819046768)
          {
            int v20 = 1819503987;
            goto LABEL_166;
          }
        }

        else if (v13 != 1819505773 && v13 != 1869832547)
        {
          if (v13 != 1885430643) {
            goto LABEL_277;
          }
          unsigned int v21 = *a5;
          if (v21 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            uint64_t v155 = (os_log_t *)sub_138E8(13);
            unsigned int v156 = *v155;
            if (*v155 && os_log_type_enabled(*v155, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v157 = v486;
              int v158 = (CFTypeRef *)v484;
              unsigned int v159 = *a5;
              int v160 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              unsigned int v161 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v157 < 0) {
                unsigned int v161 = v158;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 812;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v161;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v159;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v160;
              _os_log_impl( &dword_0,  v156,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            std::string::value_type v162 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::string::value_type v162 = &off_4865A0;
            v162[2] = 561211770;
          }

          CFTypeRef v484 = (CFTypeRef)sub_26E7BC(*(void *)(a1 + 80));
          uint64_t v485 = v22;
          sub_D45F8((uint64_t)cf, a1, (uint64_t)&v484);
          uint64_t v23 = *(const void **)cf;
          if (!*(void *)cf) {
            goto LABEL_271;
          }
          goto LABEL_53;
        }

        goto LABEL_167;
      }

      if (v13 <= 1885561195)
      {
        if (v13 == 1885434722)
        {
          unsigned int v90 = *a5;
          if (v90 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            v387 = (os_log_t *)sub_138E8(13);
            v388 = *v387;
            if (*v387 && os_log_type_enabled(*v387, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v389 = v486;
              id v390 = (CFTypeRef *)v484;
              unsigned int v391 = *a5;
              int v392 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              int v393 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v389 < 0) {
                int v393 = v390;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 802;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v393;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v391;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v392;
              _os_log_impl( &dword_0,  v388,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            uint64_t v394 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v394 = &off_4865A0;
            v394[2] = 561211770;
          }

          CFTypeRef v484 = (CFTypeRef)sub_26E7BC(*(void *)(a1 + 80));
          uint64_t v485 = v91;
          sub_D4330((uint64_t)cf, a1, (uint64_t)&v484);
          uint64_t v23 = *(const void **)cf;
          if (!*(void *)cf) {
            goto LABEL_271;
          }
LABEL_53:
          CFRetain(v23);
LABEL_270:
          uint64_t v101 = *(void *)cf;
LABEL_272:
          *a6 = v101;
          p_CFTypeRef Mutable = (CFTypeRef *)cf;
LABEL_273:
          sub_13818((uint64_t)p_Mutable);
          return;
        }

        if (v13 != 1885497710) {
          goto LABEL_277;
        }
        unsigned int v50 = *a5;
        if (v50 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          v243 = (os_log_t *)sub_138E8(13);
          v244 = *v243;
          if (*v243 && os_log_type_enabled(*v243, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            unsigned int v481 = a2[2];
            sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
            int v245 = v486;
            std::string::size_type v246 = (CFTypeRef *)v484;
            unsigned int v247 = *a5;
            int v248 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            CFTypeRef v249 = &v484;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v245 < 0) {
              CFTypeRef v249 = v246;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 752;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v249;
            *(_WORD *)&cf[28] = 1024;
            *(_DWORD *)uint64_t v488 = v247;
            *(_WORD *)&v488[4] = 1024;
            *(_DWORD *)&v488[6] = v248;
            _os_log_impl( &dword_0,  v244,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              cf,
              0x28u);
            if (v486 < 0) {
              operator delete((void *)v484);
            }
          }

          id v250 = __cxa_allocate_exception(0x10uLL);
          *(void *)id v250 = &off_4865A0;
          v250[2] = 561211770;
        }

        sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 753);
        int v51 = (*(unsigned __int16 *)(*(void *)cf + 184LL) >> 5) & 1;
      }

      else
      {
        if (v13 == 1885561196)
        {
          unsigned int v84 = *a5;
          if (v84 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            uint64_t v363 = (os_log_t *)sub_138E8(13);
            id v364 = *v363;
            if (*v363 && os_log_type_enabled(*v363, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v365 = v486;
              v366 = (CFTypeRef *)v484;
              unsigned int v367 = *a5;
              int v368 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              id v369 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v365 < 0) {
                id v369 = v366;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 918;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v369;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v367;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v368;
              _os_log_impl( &dword_0,  v364,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            v370 = __cxa_allocate_exception(0x10uLL);
            *(void *)v370 = &off_4865A0;
            v370[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 919);
          (*(void (**)(_BYTE *__return_ptr))(*(void *)v484 + 384LL))(cf);
          int v15 = *(const void **)cf;
          if (*(void *)cf) {
            goto LABEL_228;
          }
          goto LABEL_229;
        }

        if (v13 != 1885566064)
        {
          if (v13 != 1885696116) {
            goto LABEL_277;
          }
          unsigned int v28 = *a5;
          if (v28 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            uint64_t v187 = (os_log_t *)sub_138E8(13);
            uint64_t v188 = *v187;
            if (*v187 && os_log_type_enabled(*v187, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v189 = v486;
              uint64_t v190 = (CFTypeRef *)v484;
              unsigned int v191 = *a5;
              int v192 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              char v193 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v189 < 0) {
                char v193 = v190;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 689;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v193;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v191;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v192;
              _os_log_impl( &dword_0,  v188,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            unsigned int v194 = __cxa_allocate_exception(0x10uLL);
            *(void *)unsigned int v194 = &off_4865A0;
            v194[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 691);
          *(_DWORD *)a6 = (*(uint64_t (**)(void))(**(void **)cf + 112LL))(*(void *)cf);
          goto LABEL_266;
        }

        unsigned int v93 = *a5;
        if (v93 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          id v403 = (os_log_t *)sub_138E8(13);
          v404 = *v403;
          if (*v403 && os_log_type_enabled(*v403, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            unsigned int v481 = a2[2];
            sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
            int v405 = v486;
            int v406 = (CFTypeRef *)v484;
            unsigned int v407 = *a5;
            int v408 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            v409 = &v484;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v405 < 0) {
              v409 = v406;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 684;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v409;
            *(_WORD *)&cf[28] = 1024;
            *(_DWORD *)uint64_t v488 = v407;
            *(_WORD *)&v488[4] = 1024;
            *(_DWORD *)&v488[6] = v408;
            _os_log_impl( &dword_0,  v404,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              cf,
              0x28u);
            if (v486 < 0) {
              operator delete((void *)v484);
            }
          }

          v410 = __cxa_allocate_exception(0x10uLL);
          *(void *)v410 = &off_4865A0;
          v410[2] = 561211770;
        }

        sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 685);
        int v51 = *(_DWORD *)(*(void *)cf + 148LL);
      }

LABEL_266:
    BOOL v98 = (CFTypeRef *)cf;
LABEL_291:
    sub_7A768((uint64_t)v98);
    return;
  }

  if (v13 > 1886808434)
  {
    if (v13 <= 1936225135)
    {
      if (v13 > 1935762277)
      {
        if (v13 == 1935762278) {
          goto LABEL_167;
        }
        if (v13 != 1935895923)
        {
          int v20 = 1936221550;
          goto LABEL_166;
        }

        unsigned int v73 = *a5;
        if (v73 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          uint64_t v331 = (os_log_t *)sub_138E8(13);
          char v332 = *v331;
          if (*v331 && os_log_type_enabled(*v331, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            unsigned int v481 = a2[2];
            sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
            int v333 = v486;
            uint64_t v334 = (CFTypeRef *)v484;
            unsigned int v335 = *a5;
            int v336 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            v337 = &v484;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v333 < 0) {
              v337 = v334;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 995;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v337;
            *(_WORD *)&cf[28] = 1024;
            *(_DWORD *)uint64_t v488 = v335;
            *(_WORD *)&v488[4] = 1024;
            *(_DWORD *)&v488[6] = v336;
            _os_log_impl( &dword_0,  v332,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              cf,
              0x28u);
            if (v486 < 0) {
              operator delete((void *)v484);
            }
          }

          v338 = __cxa_allocate_exception(0x10uLL);
          *(void *)v338 = &off_4865A0;
          v338[2] = 561211770;
        }

        sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 996);
        uint64_t v74 = *(void *)cf;
        int v75 = sub_1CBFE0();
        if (*(_DWORD *)(v74 + 144) == 1886216809) {
          int v51 = v75;
        }
        else {
          int v51 = 0;
        }
        goto LABEL_252;
      }

      if (v13 == 1886808435)
      {
        unsigned int v68 = *a5;
        if (v68 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          char v299 = (os_log_t *)sub_138E8(13);
          uint64_t v300 = *v299;
          if (*v299 && os_log_type_enabled(*v299, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            unsigned int v481 = a2[2];
            sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
            int v301 = v486;
            uint64_t v302 = (CFTypeRef *)v484;
            unsigned int v303 = *a5;
            int v304 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            v305 = &v484;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v301 < 0) {
              v305 = v302;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 899;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v305;
            *(_WORD *)&cf[28] = 1024;
            *(_DWORD *)uint64_t v488 = v303;
            *(_WORD *)&v488[4] = 1024;
            *(_DWORD *)&v488[6] = v304;
            _os_log_impl( &dword_0,  v300,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              cf,
              0x28u);
            if (v486 < 0) {
              operator delete((void *)v484);
            }
          }

          v306 = __cxa_allocate_exception(0x10uLL);
          *(void *)v306 = &off_4865A0;
          v306[2] = 561211770;
        }

        sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 900);
        int v51 = (*(unsigned __int16 *)(*(void *)cf + 184LL) >> 4) & 1;
        goto LABEL_252;
      }

      if (v13 != 1886810226) {
        goto LABEL_277;
      }
      unsigned int v47 = *a5;
      if (v47 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        uint64_t v219 = (os_log_t *)sub_138E8(13);
        uint64_t v220 = *v219;
        if (*v219 && os_log_type_enabled(*v219, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          unsigned int v481 = a2[2];
          sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
          int v221 = v486;
          id v222 = (CFTypeRef *)v484;
          unsigned int v223 = *a5;
          int v224 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          int v225 = &v484;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v221 < 0) {
            int v225 = v222;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 782;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v225;
          *(_WORD *)&cf[28] = 1024;
          *(_DWORD *)uint64_t v488 = v223;
          *(_WORD *)&v488[4] = 1024;
          *(_DWORD *)&v488[6] = v224;
          _os_log_impl( &dword_0,  v220,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v486 < 0) {
            operator delete((void *)v484);
          }
        }

        id v226 = __cxa_allocate_exception(0x10uLL);
        *(void *)id v226 = &off_4865A0;
        v226[2] = 561211770;
      }

      sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 783);
      LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 320LL))(*(void *)cf);
LABEL_265:
      *(_DWORD *)a6 = v17;
      goto LABEL_266;
    }

    if (v13 > 1936745317)
    {
      if (v13 == 1936745318) {
        goto LABEL_167;
      }
      if (v13 != 1936745586)
      {
        unsigned __int16 v18 = 25966;
        goto LABEL_155;
      }

      unsigned int v78 = *a5;
      if (v78 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        v355 = (os_log_t *)sub_138E8(13);
        v356 = *v355;
        if (*v355 && os_log_type_enabled(*v355, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          unsigned int v481 = a2[2];
          sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
          int v357 = v486;
          v358 = (CFTypeRef *)v484;
          unsigned int v359 = *a5;
          int v360 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v361 = &v484;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v357 < 0) {
            v361 = v358;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 833;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v361;
          *(_WORD *)&cf[28] = 1024;
          *(_DWORD *)uint64_t v488 = v359;
          *(_WORD *)&v488[4] = 1024;
          *(_DWORD *)&v488[6] = v360;
          _os_log_impl( &dword_0,  v356,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v486 < 0) {
            operator delete((void *)v484);
          }
        }

        v362 = __cxa_allocate_exception(0x10uLL);
        *(void *)v362 = &off_4865A0;
        v362[2] = 561211770;
      }

      if ((a3 | 8) != 8)
      {
        v475 = (os_log_t *)sub_138E8(13);
        uint64_t v476 = *v475;
        if (*v475 && os_log_type_enabled(*v475, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 834;
          _os_log_impl( &dword_0,  v476,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  cf,  0x12u);
        }

        id v477 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v477, "Precondition failure.");
      }

      if (a4)
      {
        *(void *)CFTypeRef cf = a4;
        *(_WORD *)&cf[8] = 0;
      }

      else
      {
        *(void *)CFTypeRef cf = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        *(_WORD *)&cf[8] = 257;
        if (!*(void *)cf)
        {
          uint64_t v110 = sub_26E7BC(*(void *)(a1 + 80));
          goto LABEL_296;
        }
      }

      uint64_t v110 = sub_278FB0(*(void *)(a1 + 80), (const __CFDictionary **)cf);
LABEL_296:
      int v111 = HIDWORD(v110);
      sub_B8CBC((uint64_t *)&Mutable, (uint64_t *)(a1 + 88), "", 840);
      sub_F9B60((uint64_t)&v484, (uint64_t)Mutable, v111, a2[2]);
      if (v484)
      {
        CFRetain(v484);
        CFTypeRef v112 = v484;
      }

      else
      {
        CFTypeRef v112 = 0LL;
      }

      *a6 = v112;
      sub_13850((uint64_t)&v484);
      sub_7A768((uint64_t)&Mutable);
      sub_13850((uint64_t)cf);
      return;
    }

    if (v13 == 1936225136) {
      goto LABEL_167;
    }
    unsigned __int16 v18 = 24944;
LABEL_155:
    int v20 = v18 | 0x73700000;
    goto LABEL_166;
  }

  if (v13 > 1886614380)
  {
    if (v13 > 1886614881)
    {
      switch(v13)
      {
        case 1886614882:
          unsigned int v63 = *a5;
          if (v63 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            v275 = (os_log_t *)sub_138E8(13);
            v276 = *v275;
            if (*v275 && os_log_type_enabled(*v275, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v277 = v486;
              v278 = (CFTypeRef *)v484;
              unsigned int v279 = *a5;
              int v280 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v281 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v277 < 0) {
                v281 = v278;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 679;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v281;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v279;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v280;
              _os_log_impl( &dword_0,  v276,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            uint64_t v282 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v282 = &off_4865A0;
            v282[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 680);
          int v51 = *(_DWORD *)(*(void *)cf + 264LL);
          break;
        case 1886681456:
          unsigned int v76 = *a5;
          if (v76 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            v339 = (os_log_t *)sub_138E8(13);
            std::string::size_type v340 = *v339;
            if (*v339 && os_log_type_enabled(*v339, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v341 = v486;
              uint64_t v342 = (CFTypeRef *)v484;
              unsigned int v343 = *a5;
              int v344 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              uint64_t v345 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v341 < 0) {
                uint64_t v345 = v342;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 674;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v345;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v343;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v344;
              _os_log_impl( &dword_0,  v340,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            uint64_t v346 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v346 = &off_4865A0;
            v346[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 675);
          int v51 = *(_DWORD *)(*(void *)cf + 144LL);
          break;
        case 1886742884:
          unsigned int v25 = *a5;
          if (v25 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            uint64_t v171 = (os_log_t *)sub_138E8(13);
            uint64_t v172 = *v171;
            if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              unsigned int v481 = a2[2];
              sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
              int v173 = v486;
              unsigned int v174 = (CFTypeRef *)v484;
              unsigned int v175 = *a5;
              int v176 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              char v177 = &v484;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v173 < 0) {
                char v177 = v174;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 695;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v177;
              *(_WORD *)&cf[28] = 1024;
              *(_DWORD *)uint64_t v488 = v175;
              *(_WORD *)&v488[4] = 1024;
              *(_DWORD *)&v488[6] = v176;
              _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                cf,
                0x28u);
              if (v486 < 0) {
                operator delete((void *)v484);
              }
            }

            uint64_t v178 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v178 = &off_4865A0;
            v178[2] = 561211770;
          }

          sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 696);
          uint64_t v26 = (const void *)*((void *)v484 + 31);
          *(void *)CFTypeRef cf = v26;
          cf[8] = *((_BYTE *)v484 + 256);
          if (cf[8] && v26)
          {
            CFRetain(v26);
          }

          else if (!v26)
          {
            goto LABEL_288;
          }

          CFRetain(v26);
          goto LABEL_287;
        default:
          goto LABEL_277;
      }

      goto LABEL_252;
    }

    if (v13 == 1886614381) {
      goto LABEL_167;
    }
    if (v13 != 1886614625) {
      goto LABEL_277;
    }
    unsigned int v49 = *a5;
    if (v49 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      v235 = (os_log_t *)sub_138E8(13);
      id v236 = *v235;
      if (*v235 && os_log_type_enabled(*v235, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef Mutable = *(CFTypeRef *)a2;
        unsigned int v481 = a2[2];
        sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
        int v237 = v486;
        v238 = (CFTypeRef *)v484;
        unsigned int v239 = *a5;
        int v240 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        id v241 = &v484;
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        if (v237 < 0) {
          id v241 = v238;
        }
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 787;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v241;
        *(_WORD *)&cf[28] = 1024;
        *(_DWORD *)uint64_t v488 = v239;
        *(_WORD *)&v488[4] = 1024;
        *(_DWORD *)&v488[6] = v240;
        _os_log_impl( &dword_0,  v236,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          cf,
          0x28u);
        if (v486 < 0) {
          operator delete((void *)v484);
        }
      }

      v242 = __cxa_allocate_exception(0x10uLL);
      *(void *)v242 = &off_4865A0;
      v242[2] = 561211770;
    }

    sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 788);
    LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 96LL))(*(void *)cf);
    goto LABEL_265;
  }

  if (v13 > 1886611809)
  {
    if (v13 == 1886611810)
    {
      unsigned int v57 = *a5;
      if (v57 < (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        CFTypeRef v259 = (os_log_t *)sub_138E8(13);
        id v260 = *v259;
        if (*v259 && os_log_type_enabled(*v259, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          unsigned int v481 = a2[2];
          sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
          int v261 = v486;
          v262 = (CFTypeRef *)v484;
          unsigned int v263 = *a5;
          int v264 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          std::string::size_type v265 = &v484;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v261 < 0) {
            std::string::size_type v265 = v262;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 763;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v265;
          *(_WORD *)&cf[28] = 1024;
          *(_DWORD *)uint64_t v488 = v263;
          *(_WORD *)&v488[4] = 1024;
          *(_DWORD *)&v488[6] = v264;
          _os_log_impl( &dword_0,  v260,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
            cf,
            0x28u);
          if (v486 < 0) {
            operator delete((void *)v484);
          }
        }

        v266 = __cxa_allocate_exception(0x10uLL);
        *(void *)v266 = &off_4865A0;
        v266[2] = 561211770;
      }

      sub_D3FB0(cf, a1, a2[1]);
      goto LABEL_182;
    }

    if (v13 != 1886613101)
    {
      if (v13 != 1886613619) {
        goto LABEL_277;
      }
      unsigned int v16 = *a5;
      if (v16 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        int v147 = (os_log_t *)sub_138E8(13);
        v148 = *v147;
        if (*v147 && os_log_type_enabled(*v147, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          unsigned int v481 = a2[2];
          sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
          int v149 = v486;
          uint64_t v150 = (CFTypeRef *)v484;
          unsigned int v151 = *a5;
          int v152 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          unint64_t v153 = &v484;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v149 < 0) {
            unint64_t v153 = v150;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 757;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v153;
          *(_WORD *)&cf[28] = 1024;
          *(_DWORD *)uint64_t v488 = v151;
          *(_WORD *)&v488[4] = 1024;
          *(_DWORD *)&v488[6] = v152;
          _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v486 < 0) {
            operator delete((void *)v484);
          }
        }

        uint64_t v154 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v154 = &off_4865A0;
        v154[2] = 561211770;
      }

      sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 758);
      LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 488LL))(*(void *)cf);
      goto LABEL_265;
    }

    unsigned int v72 = *a5;
    if (v72 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      int v323 = (os_log_t *)sub_138E8(13);
      v324 = *v323;
      if (*v323 && os_log_type_enabled(*v323, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef Mutable = *(CFTypeRef *)a2;
        unsigned int v481 = a2[2];
        sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
        int v325 = v486;
        v326 = (CFTypeRef *)v484;
        unsigned int v327 = *a5;
        int v328 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        v329 = &v484;
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        if (v325 < 0) {
          v329 = v326;
        }
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 725;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v329;
        *(_WORD *)&cf[28] = 1024;
        *(_DWORD *)uint64_t v488 = v327;
        *(_WORD *)&v488[4] = 1024;
        *(_DWORD *)&v488[6] = v328;
        _os_log_impl( &dword_0,  v324,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          cf,
          0x28u);
        if (v486 < 0) {
          operator delete((void *)v484);
        }
      }

      uint64_t v330 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v330 = &off_4865A0;
      v330[2] = 561211770;
    }

    sub_B8CBC((uint64_t *)&v484, (uint64_t *)(a1 + 88), "", 726);
    (*(void (**)(_BYTE *__return_ptr))(*(void *)v484 + 144LL))(cf);
    uint64_t v67 = *(const void **)cf;
    if (!*(void *)cf) {
      goto LABEL_288;
    }
LABEL_261:
    CFRetain(v67);
LABEL_287:
    uint64_t v109 = *(void *)cf;
LABEL_289:
    *a6 = v109;
    sub_19DFC((uint64_t)cf);
    goto LABEL_290;
  }

  if (v13 == 1886417762)
  {
    unsigned int v64 = *a5;
    if (v64 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      uint64_t v283 = (os_log_t *)sub_138E8(13);
      char v284 = *v283;
      if (*v283 && os_log_type_enabled(*v283, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef Mutable = *(CFTypeRef *)a2;
        unsigned int v481 = a2[2];
        sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
        int v285 = v486;
        uint64_t v286 = (CFTypeRef *)v484;
        unsigned int v287 = *a5;
        int v288 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        v289 = &v484;
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        if (v285 < 0) {
          v289 = v286;
        }
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 817;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v289;
        *(_WORD *)&cf[28] = 1024;
        *(_DWORD *)uint64_t v488 = v287;
        *(_WORD *)&v488[4] = 1024;
        *(_DWORD *)&v488[6] = v288;
        _os_log_impl( &dword_0,  v284,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          cf,
          0x28u);
        if (v486 < 0) {
          operator delete((void *)v484);
        }
      }

      v290 = __cxa_allocate_exception(0x10uLL);
      *(void *)v290 = &off_4865A0;
      v290[2] = 561211770;
    }

    sub_D49F0((uint64_t)cf, a1);
    uint64_t v65 = *(const void **)cf;
    if (*(void *)cf)
    {
LABEL_269:
      CFRetain(v65);
      goto LABEL_270;
    }

LABEL_271:
    uint64_t v101 = 0LL;
    goto LABEL_272;
  }

  if (v13 != 1886484338) {
    goto LABEL_277;
  }
  if (sub_1CCD00())
  {
    unsigned int v38 = *a5;
    if (v38 != (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      uint64_t v467 = (os_log_t *)sub_138E8(13);
      id v468 = *v467;
      if (*v467 && os_log_type_enabled(*v467, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef Mutable = *(CFTypeRef *)a2;
        unsigned int v481 = a2[2];
        sub_613AC((uint64_t)&v484, (unsigned int *)&Mutable);
        int v469 = v486;
        uint64_t v470 = (CFTypeRef *)v484;
        unsigned int v471 = *a5;
        int v472 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        uint64_t v473 = &v484;
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        if (v469 < 0) {
          uint64_t v473 = v470;
        }
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 738;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v473;
        *(_WORD *)&cf[28] = 1024;
        *(_DWORD *)uint64_t v488 = v471;
        *(_WORD *)&v488[4] = 1024;
        *(_DWORD *)&v488[6] = v472;
        _os_log_impl( &dword_0,  v468,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          cf,
          0x28u);
        if (v486 < 0) {
          operator delete((void *)v484);
        }
      }

      id v474 = __cxa_allocate_exception(0x10uLL);
      *(void *)id v474 = &off_4865A0;
      v474[2] = 561211770;
    }

    sub_B8CBC((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 740);
    uint64_t v39 = (*(uint64_t (**)(void))(**(void **)cf + 112LL))(*(void *)cf);
    BOOL v40 = (v39 & 0xFF00000000LL) != 0 && v39 == 1701867895LL;
    BOOL v41 = v40;
    goto LABEL_299;
  }

  unsigned int v106 = (os_log_t *)sub_138E8(23);
  uint64_t v107 = *v106;
  if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v484, *a2);
    uint64_t v108 = v486 >= 0 ? &v484 : (CFTypeRef *)v484;
    *(_DWORD *)CFTypeRef cf = 136315650;
    *(void *)&cf[4] = "VirtualAudio_Port.cpp";
    *(_WORD *)&cf[12] = 1024;
    *(_DWORD *)&cf[14] = 746;
    *(_WORD *)&cf[18] = 2080;
    *(void *)&cf[20] = v108;
    _os_log_impl(&dword_0, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d Property not supported: %s", cf, 0x1Cu);
    if (v486 < 0)
    {
      __int16 v60 = (void *)v484;
      goto LABEL_186;
    }
  }

          ++v189;
          uint64_t v186 = j[1];
          int v208 = 504LL;
          if (v184) {
            int v208 = 528LL;
          }
          uint64_t v209 = *(void *)(v186 + v208);
          if (v184) {
            uint64_t v210 = 520LL;
          }
          else {
            uint64_t v210 = 496LL;
          }
        }

        while (v189 < ((unint64_t)(v209 - *(void *)(v186 + v210)) >> 3));
      }

      for (k = v185; ; sub_2296FC(k[2]))
      {
        k = (uint64_t *)k[1];
        if (k == v185) {
          break;
        }
        sub_C9534(v183, k[2], k[2]);
      }

      sub_68314(buf);
      int v181 = 1;
      unsigned int v182 = 1LL;
    }

    while ((v368 & 1) == 0);
    v212 = v369;
    if (v365) {
      (*(void (**)(uint64_t *))(*v371 + 24))(v371);
    }
  }

  else
  {
    int v213 = operator new(0x108uLL);
    *int v213 = off_46EA30;
    v213[1] = v369;
    int v214 = (uint64_t)(v213 + 2);
    sub_B1F7C((uint64_t)(v213 + 2), (uint64_t)"PropertyCacheMutex");
    unsigned int v215 = v213[1];
    int v216 = (char *)operator new(0x70uLL);
    *(void *)int v216 = v215;
    *((void *)v216 + 1) = v213 + 2;
    *((void *)v216 + 2) = 0LL;
    *((void *)v216 + 3) = v216 + 24;
    *((void *)v216 + 4) = v216 + 24;
    *((void *)v216 + 5) = 0LL;
    v216[48] = 1;
    *(_OWORD *)(v216 + 56) = 0u;
    *(_OWORD *)(v216 + 72) = 0u;
    *((void *)v216 + 11) = v216 + 88;
    *((void *)v216 + 12) = v216 + 88;
    *((void *)v216 + 13) = 0LL;
    v213[13] = v216;
    strcpy(buf, "revobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "niogbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "cntltpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "cntlptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "tlwhtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "tlwhptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "tfastpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "tfasptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "zisfbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 2);
    strcpy(buf, "#zsfbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "trsnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "3cadbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 9);
    strcpy(buf, "scrstpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "stsdptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 0);
    strcpy(buf, "tdcvbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "rdcvbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "rshtbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "dbhtptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "atvabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "ctvabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "etvabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "otvabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "meoabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "maoabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "rsoabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "gloabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "icasbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "lvdabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "rdvpbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "SdAvtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "aOsdtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "bOsdtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "rOsdtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    strcpy(buf, "SSxEbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v216, (int *)buf, 1);
    memset(buf, 0, 24);
    sub_229AFC((uint64_t)v216, *(void *)(a2 + 16), (uint64_t *)buf);
    v388.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_E2D18((void ***)&v388);
    char v217 = v213[1];
    strcpy(buf, "dlovtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v218 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v217 + 680LL))(v217, buf);
    if (!v218)
    {
      unsigned int v359 = (os_log_t *)sub_138E8(13);
      int v360 = *v359;
      if (*v359 && os_log_type_enabled(*v359, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 537;
        _os_log_impl( &dword_0,  v360,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: couldn't get an input volume control from device.",  buf,  0x12u);
      }

      v361 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v361, "couldn't get an input volume control from device.");
    }

    uint64_t v219 = (char *)operator new(0x70uLL);
    *(void *)uint64_t v219 = v218;
    *((void *)v219 + 1) = v214;
    *((void *)v219 + 2) = 0LL;
    *((void *)v219 + 3) = v219 + 24;
    *((void *)v219 + 4) = v219 + 24;
    *((void *)v219 + 5) = 0LL;
    v219[48] = 1;
    *(_OWORD *)(v219 + 56) = 0u;
    *(_OWORD *)(v219 + 72) = 0u;
    *((void *)v219 + 11) = v219 + 88;
    *((void *)v219 + 12) = v219 + 88;
    *((void *)v219 + 13) = 0LL;
    v213[14] = v219;
    strcpy(buf, "dlovbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v219, (int *)buf, 4);
    strcpy(buf, "#bdvbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v219, (int *)buf, 0);
    strcpy(buf, "pscvbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v219, (int *)buf, 0);
    strcpy(buf, "slv?bolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v219, (int *)buf, 0);
    memset(buf, 0, 24);
    sub_229AFC((uint64_t)v219, *(void *)(a2 + 48), (uint64_t *)buf);
    v388.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_E2D18((void ***)&v388);
    uint64_t v220 = v213[1];
    strcpy(buf, "mlovptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    int v221 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v220 + 680LL))(v220, buf);
    if (!v221)
    {
      v362 = (os_log_t *)sub_138E8(13);
      uint64_t v363 = *v362;
      if (*v362 && os_log_type_enabled(*v362, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 562;
        _os_log_impl( &dword_0,  v363,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: couldn't get a volume control from device.",  buf,  0x12u);
      }

      id v364 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v364, "couldn't get a volume control from device.");
    }

    id v222 = (char *)operator new(0x70uLL);
    *(void *)id v222 = v221;
    *((void *)v222 + 1) = v214;
    *((void *)v222 + 2) = 0LL;
    *((void *)v222 + 3) = v222 + 24;
    *((void *)v222 + 4) = v222 + 24;
    *((void *)v222 + 5) = 0LL;
    v222[48] = 1;
    *(_OWORD *)(v222 + 56) = 0u;
    *(_OWORD *)(v222 + 72) = 0u;
    *((void *)v222 + 11) = v222 + 88;
    *((void *)v222 + 12) = v222 + 88;
    *((void *)v222 + 13) = 0LL;
    v213[15] = v222;
    strcpy(buf, "mlovbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v222, (int *)buf, 4);
    strcpy(buf, "amlvbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v222, (int *)buf, 4);
    strcpy(buf, "cvidbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v222, (int *)buf, 1);
    strcpy(buf, "pscvbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v222, (int *)buf, 0);
    strcpy(buf, "slv?bolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v222, (int *)buf, 0);
    strcpy(buf, "spmrbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_225790((std::__shared_weak_count_vtbl *)v222, (int *)buf, 1);
    memset(buf, 0, 24);
    sub_229AFC((uint64_t)v222, *(void *)(a2 + 32), (uint64_t *)buf);
    v388.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_E2D18((void ***)&v388);
    sub_C8B9C(v213 + 16, v213[1], a2, v214, 0);
    unsigned int v223 = a2;
    sub_C8B9C(v213 + 17, v213[1], a2, v214, 1);
    int v224 = v213[1];
    v213[18] = v213 + 18;
    v213[19] = v213 + 18;
    v213[20] = 0LL;
    int v225 = sub_135A0(v224, 1);
    sub_86550((uint64_t *)buf, v225);
    id v226 = *(_BYTE **)buf;
    v372 = v213 + 2;
    if (*(_BYTE **)buf != &buf[8])
    {
      v227 = (uint64_t *)(a2 + 72);
      do
      {
        sub_92EF8();
        v228 = sub_28AFEC(*((_DWORD *)v226 + 7));
        int v229 = *(void *)(v228 + 96);
        *(void *)&inAddress[0].mSelector = *(void *)(v228 + 88);
        *(void *)&inAddress[0].mElement = v229;
        if (v229)
        {
          v230 = (unint64_t *)(v229 + 16);
          do
            unsigned int v231 = __ldxr(v230);
          while (__stxr(v231 + 1, v230));
        }

        sub_B8CBC((uint64_t *)&v388, (uint64_t *)inAddress, "", 644);
        int v232 = (*(uint64_t (**)(void))(**(void **)(v388.__r_.__value_.__r.__words[0] + 192) + 120LL))(*(void *)(v388.__r_.__value_.__r.__words[0] + 192));
        v233 = *v227;
        if (!*v227) {
          goto LABEL_303;
        }
        v234 = a2 + 72;
        do
        {
          v235 = *(_DWORD *)(v233 + 32);
          id v236 = v235 >= v232;
          if (v235 >= v232) {
            int v237 = (uint64_t *)v233;
          }
          else {
            int v237 = (uint64_t *)(v233 + 8);
          }
          if (v236) {
            v234 = v233;
          }
          v233 = *v237;
        }

        while (*v237);
        if ((uint64_t *)v234 == v227 || v232 < *(_DWORD *)(v234 + 32)) {
LABEL_303:
        }
          v234 = a2 + 72;
        int size = (std::__shared_weak_count *)v388.__r_.__value_.__l.__size_;
        if (v388.__r_.__value_.__l.__size_)
        {
          unsigned int v239 = (unint64_t *)(v388.__r_.__value_.__l.__size_ + 8);
          do
            int v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }

        if (*(void *)&inAddress[0].mElement) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&inAddress[0].mElement);
        }
        if ((uint64_t *)v234 != v227)
        {
          id v241 = *(void **)(v224 + 936);
          v242 = *(void **)(v224 + 944);
          if (v241 == v242) {
            goto LABEL_424;
          }
          v243 = *((_DWORD *)v226 + 7);
          while ((*(unsigned int (**)(void))(*(void *)*v241 + 136LL))(*v241) != v243)
          {
            if (++v241 == v242)
            {
              id v241 = v242;
              break;
            }
          }

          if (v241 == *(void **)(v224 + 944) || (v244 = *v241) == 0)
          {
LABEL_424:
            int v320 = (os_log_t *)sub_138E8(13);
            v321 = *v320;
            if (*v320 && os_log_type_enabled(*v320, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v388.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v388.__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_DevicePropertyManager.cpp";
              WORD2(v388.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v388.__r_.__value_.__r.__words[1] + 6) = 648;
              _os_log_impl( &dword_0,  v321,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: couldn't get a volume control from device.",  (uint8_t *)&v388,  0x12u);
            }

            v322 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v322, "couldn't get a volume control from device.");
          }

          int v245 = (char *)operator new(0x70uLL);
          int v214 = (uint64_t)(v213 + 2);
          *(void *)int v245 = v244;
          *((void *)v245 + 1) = v372;
          *((void *)v245 + 2) = 0LL;
          *((void *)v245 + 3) = v245 + 24;
          *((void *)v245 + 4) = v245 + 24;
          *((void *)v245 + 5) = 0LL;
          v245[48] = 1;
          *(_OWORD *)(v245 + 56) = 0u;
          *(_OWORD *)(v245 + 72) = 0u;
          *((void *)v245 + 11) = v245 + 88;
          *((void *)v245 + 12) = v245 + 88;
          *((void *)v245 + 13) = 0LL;
          strcpy((char *)&v388, "mlovbolg");
          v388.__r_.__value_.__s.__data_[9] = 0;
          WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v245, (int *)&v388, 4);
          strcpy((char *)&v388, "amlvbolg");
          v388.__r_.__value_.__s.__data_[9] = 0;
          WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v245, (int *)&v388, 4);
          unsigned int v223 = a2;
          strcpy((char *)&v388, "cvidbolg");
          v388.__r_.__value_.__s.__data_[9] = 0;
          WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v245, (int *)&v388, 1);
          strcpy((char *)&v388, "pscvbolg");
          v388.__r_.__value_.__s.__data_[9] = 0;
          WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v245, (int *)&v388, 0);
          strcpy((char *)&v388, "slv?bolg");
          v388.__r_.__value_.__s.__data_[9] = 0;
          WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v245, (int *)&v388, 0);
          strcpy((char *)&v388, "spmrbolg");
          v388.__r_.__value_.__s.__data_[9] = 0;
          WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v245, (int *)&v388, 1);
          memset(&v388, 0, sizeof(v388));
          sub_229AFC((uint64_t)v245, *(void *)(v234 + 40), (uint64_t *)&v388);
          std::string::size_type v246 = operator new(0x18uLL);
          unsigned int v247 = v213[18];
          v246[1] = v213 + 18;
          v246[2] = v245;
          *std::string::size_type v246 = v247;
          *(void *)(v247 + 8) = v246;
          v213[18] = v246;
          ++v213[20];
          *(void *)&inAddress[0].mSelector = &v388;
          sub_E2D18((void ***)inAddress);
        }

        int v248 = (void *)*((void *)v226 + 1);
        if (v248)
        {
          do
          {
            CFTypeRef v249 = v248;
            int v248 = (void *)*v248;
          }

          while (v248);
        }

        else
        {
          do
          {
            CFTypeRef v249 = (_BYTE *)*((void *)v226 + 2);
            std::string::size_type v265 = *(void *)v249 == (void)v226;
            id v226 = v249;
          }

          while (!v265);
        }

        id v226 = v249;
      }

      while (v249 != &buf[8]);
    }

    sub_32C8C(*(void **)&buf[8]);
    id v250 = v213[1];
    v213[21] = v213 + 21;
    v213[22] = v213 + 21;
    v213[23] = 0LL;
    v251 = *(int **)(v223 + 88);
    v252 = *(int **)(v223 + 96);
    if (v251 != v252)
    {
      do
      {
        int v253 = *(void **)(v250 + 984);
        v254 = *(void **)(v250 + 992);
        if (v253 == v254) {
          goto LABEL_420;
        }
        unsigned int v255 = *v251;
        while ((*(unsigned int (**)(void))(*(void *)*v253 + 136LL))(*v253) != v255)
        {
          if (++v253 == v254)
          {
            int v253 = v254;
            break;
          }
        }

        if (v253 == *(void **)(v250 + 992) || (int v256 = *v253) == 0)
        {
LABEL_420:
          int v317 = (os_log_t *)sub_138E8(13);
          id v318 = *v317;
          if (*v317 && os_log_type_enabled(*v317, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 678;
            _os_log_impl( &dword_0,  v318,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: couldn't get a volume control from device.",  buf,  0x12u);
          }

          unsigned int v319 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v319, "couldn't get a volume control from device.");
        }

        v257 = (char *)operator new(0x70uLL);
        *(void *)v257 = v256;
        *((void *)v257 + 1) = v372;
        *((void *)v257 + 2) = 0LL;
        *((void *)v257 + 3) = v257 + 24;
        *((void *)v257 + 4) = v257 + 24;
        *((void *)v257 + 5) = 0LL;
        v257[48] = 1;
        *(_OWORD *)(v257 + 56) = 0u;
        *(_OWORD *)(v257 + 72) = 0u;
        *((void *)v257 + 11) = v257 + 88;
        *((void *)v257 + 12) = v257 + 88;
        *((void *)v257 + 13) = 0LL;
        strcpy(buf, "dlovbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        sub_225790((std::__shared_weak_count_vtbl *)v257, (int *)buf, 4);
        strcpy(buf, "#bdvbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        sub_225790((std::__shared_weak_count_vtbl *)v257, (int *)buf, 0);
        memset(buf, 0, 24);
        sub_229AFC((uint64_t)v257, *((void *)v251 + 1), (uint64_t *)buf);
        v258 = operator new(0x18uLL);
        v258[1] = v213 + 21;
        v258[2] = v257;
        CFTypeRef v259 = v213[21];
        _DWORD *v258 = v259;
        *(void *)(v259 + 8) = v258;
        v213[21] = v258;
        ++v213[23];
        v388.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        sub_E2D18((void ***)&v388);
        v251 += 4;
      }

      while (v251 != v252);
      id v250 = v213[1];
      int v214 = (uint64_t)(v213 + 2);
    }

    sub_C8DCC(v213 + 24, v250, *(void *)(a2 + 16), v214, 0LL);
    v212 = v369;
    sub_C8DCC(v213 + 27, v213[1], *(void *)(a2 + 16), v214, 1LL);
    v213[32] = 0LL;
    v213[31] = 0LL;
    v213[30] = v213 + 31;
    *(void *)(v369 + 632) = v213;
  }

  (*(void (**)(void, void **))(**(void **)(v212 + 1008) + 496LL))(*(void *)(v212 + 1008), __p);
  sub_B7320(v212);
  sub_C1654(v212);
  id v260 = v212;
  int v261 = 0;
  v262 = v212 + 520;
  unsigned int v263 = v260 + 496;
  int v264 = 1;
  while (1)
  {
    std::string::size_type v265 = (v264 & 1) == 0;
    v266 = (v264 & 1) != 0 ? 504LL : 528LL;
    v267 = v265 ? 520LL : 496LL;
    std::string::size_type v268 = v265 ? v262 : v263;
    int v269 = *(void *)(v369 + v266) - *(void *)(v369 + v267);
    if ((v269 & 0x7FFFFFFF8LL) != 0) {
      break;
    }
    v275 = 0;
LABEL_359:
    int v264 = 0;
    int v277 = v275 | v261;
    int v261 = 1;
    if ((v277 & 1) != 0) {
      goto LABEL_362;
    }
  }

  v270 = 0LL;
  unsigned int v271 = (v269 >> 3);
  while (1)
  {
    int v272 = *(void *)(v369 + v267);
    int v273 = v270 >= (*(void *)(v268 + 8) - v272) >> 3 ? 0LL : *(void *)(v272 + 8 * v270);
    if ((sub_E0604(*(void *)(v273 + 120), 1885629550) & 1) != 0) {
      break;
    }
    v274 = sub_E0604(*(void *)(v273 + 120), 1886743662);
    v275 = v274;
    if (++v270 >= v271) {
      v276 = 1;
    }
    else {
      v276 = v274;
    }
    if ((v276 & 1) != 0) {
      goto LABEL_359;
    }
  }

  v275 = 1;
LABEL_362:
  v278 = v369;
  sub_C1D5C((void *)v369, v275, 1);
  sub_C250C(v369);
  sub_C3328(v369);
  sub_BA7E4(v369);
  sub_CA170(*(void *)(v369 + 632), v370);
  sub_BA95C(v369);
  BYTE1(inAddress[0].mElement) = 0;
  HIWORD(inAddress[0].mElement) = 0;
  strcpy((char *)inAddress, "tptbbolg");
  unsigned int v279 = *(void *)(v369 + 1008);
  int v280 = (void *)(v279 + 184);
  v281 = *(void **)(v279 + 192);
  if (v281 == (void *)(v279 + 184))
  {
    int v288 = 0LL;
    v289 = 0LL;
    goto LABEL_375;
  }

  while (1)
  {
    uint64_t v282 = (std::__shared_weak_count *)v281[3];
    if (v282)
    {
      uint64_t v283 = std::__shared_weak_count::lock(v282);
      *(void *)&buf[8] = v283;
      if (v283) {
        break;
      }
    }

void sub_18C30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F10(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v4 & 1) == 0)
  {
    unsigned int v29 = (os_log_t *)sub_138E8(13);
    unsigned int v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 473;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Underlying Port is not valid",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1) & 1) == 0)
  {
    id v32 = (os_log_t *)sub_138E8(13);
    __n128 v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *(void *)a2;
      int v45 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v44);
      v34 = v47 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 475;
      __int16 v49 = 2080;
      unsigned int v50 = v34;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v35 = &off_4865A0;
    v35[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    unsigned int v36 = (os_log_t *)sub_138E8(13);
    unsigned int v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *(void *)a2;
      int v45 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v44);
      unsigned int v38 = v47 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 476;
      __int16 v49 = 2080;
      unsigned int v50 = v38;
      __int16 v51 = 1024;
      int v52 = a3;
      __int16 v53 = 2048;
      v54 = (const char *)a4;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v39 = &off_4865A0;
    v39[2] = 561211770;
  }

  int v9 = *a2;
  uint64_t v10 = 4LL;
  if (*a2 > 1886417761)
  {
    if (v9 > 1936745837)
    {
      if (v9 > 1952740207)
      {
        if (v9 > 1970496629)
        {
          if (v9 > 1986947427)
          {
            if (v9 != 1986947428 && v9 != 2004050279)
            {
              int v12 = 2004054901;
              goto LABEL_142;
            }
          }

          else if (v9 != 1970496630 && v9 != 1986164323)
          {
            int v12 = 1986814563;
            goto LABEL_142;
          }

          goto LABEL_133;
        }

        if (v9 > 1953655148)
        {
          if (v9 == 1953655149)
          {
            sub_B8CBC((uint64_t *)__p, (uint64_t *)(a1 + 88), "", 564);
            (*(void (**)(_BYTE *__return_ptr))(**((void **)__p[0] + 24) + 288LL))(buf);
            uint64_t v10 = (*(_DWORD *)&buf[8] - *(_DWORD *)buf) & 0xFFFFFFFC;
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }

            unsigned int v28 = __p;
            goto LABEL_154;
          }

          if (v9 == 1953719142) {
            return 8LL;
          }
          int v20 = 1970040164;
          goto LABEL_132;
        }

        if (v9 != 1952740208)
        {
          int v14 = 1953653606;
          goto LABEL_121;
        }

        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 576);
        int v11 = (*(uint64_t (**)(void))(**(void **)buf + 360LL))(*(void *)buf);
        goto LABEL_150;
      }

      if (v9 > 1936748655)
      {
        if (v9 > 1936945762)
        {
          if (v9 != 1936945763 && v9 != 1937204590)
          {
            if (v9 == 1952609377)
            {
              sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 590);
              uint64_t v10 = (*(uint64_t (**)(void, int *, uint64_t, uint64_t))(**(void **)buf + 32LL))( *(void *)buf,  a2,  a3,  a4);
LABEL_153:
              unsigned int v28 = (void **)buf;
LABEL_154:
              sub_7A768((uint64_t)v28);
              return v10;
            }

            return sub_689F8(a1, a2, a3, a4);
          }

          goto LABEL_133;
        }

        if (v9 == 1936748656) {
          return 8LL;
        }
        unsigned __int16 v23 = 29808;
      }

      else
      {
        if (v9 > 1936747875)
        {
          if (v9 == 1936747876) {
            return v10;
          }
          if (v9 == 1936747877) {
            goto LABEL_133;
          }
          unsigned __int16 v15 = 28269;
          goto LABEL_91;
        }

        if (v9 == 1936745838) {
          return v10;
        }
        unsigned __int16 v23 = 26739;
      }

      int v12 = v23 | 0x73700000;
      goto LABEL_142;
    }

    if (v9 <= 1886742883)
    {
      if (v9 > 1886613618)
      {
        if (v9 > 1886614624)
        {
          if (v9 == 1886614625 || v9 == 1886614882) {
            return v10;
          }
          int v12 = 1886681456;
          goto LABEL_142;
        }

        if (v9 == 1886613619) {
          return v10;
        }
        int v20 = 1886614381;
        goto LABEL_132;
      }

      if (v9 > 1886484337)
      {
        if (v9 == 1886484338) {
          return v10;
        }
        if (v9 == 1886611810)
        {
          int v22 = sub_D5228(a1, a2[1]);
          return (4 * v22);
        }

        int v14 = 1886613101;
LABEL_121:
        if (v9 != v14) {
          return sub_689F8(a1, a2, a3, a4);
        }
        return 8LL;
      }

      if (v9 == 1886417762) {
        return 8LL;
      }
      if (v9 != 1886417783) {
        return sub_689F8(a1, a2, a3, a4);
      }
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 529);
      int v11 = (*(uint64_t (**)(void))(**(void **)buf + 328LL))(*(void *)buf);
      goto LABEL_150;
    }

    if (v9 <= 1936221549)
    {
      if (v9 <= 1886810225)
      {
        if (v9 == 1886742884) {
          return 8LL;
        }
        int v12 = 1886808435;
      }

      else
      {
        if (v9 == 1886810226 || v9 == 1935762278) {
          return v10;
        }
        int v12 = 1935895923;
      }

      goto LABEL_142;
    }

    if (v9 <= 1936744815)
    {
      if (v9 == 1936221550) {
        return v10;
      }
      int v12 = 1936225136;
      goto LABEL_142;
    }

    if (v9 == 1936744816) {
      return v10;
    }
    if (v9 == 1936745318) {
      goto LABEL_133;
    }
    unsigned __int16 v15 = 25714;
LABEL_91:
    int v14 = v15 | 0x73700000;
    goto LABEL_121;
  }

  if (v9 <= 1819046767)
  {
    if (v9 <= 1684826731)
    {
      if (v9 > 1651797099)
      {
        if (v9 > 1651798885)
        {
          if (v9 == 1651798886) {
            goto LABEL_133;
          }
          int v20 = 1668051827;
          goto LABEL_132;
        }

        if (v9 == 1651797100) {
          return v10;
        }
        unsigned __int16 v13 = 28787;
      }

      else
      {
        if (v9 > 1651796324)
        {
          unsigned int v21 = v9 - 1651796325;
          if (v21 <= 0xE && ((1 << v21) & 0x4801) != 0) {
            return v10;
          }
          return sub_689F8(a1, a2, a3, a4);
        }

        if (v9 == 1650551140) {
          goto LABEL_133;
        }
        if (v9 == 1651271025) {
          return v10;
        }
        unsigned __int16 v13 = 24946;
      }

      int v12 = v13 | 0x62740000;
      goto LABEL_142;
    }

    if (v9 > 1685484389)
    {
      if (v9 <= 1752462194)
      {
        if (v9 == 1685484390) {
          return 8LL;
        }
        int v12 = 1752327777;
        goto LABEL_142;
      }

      if (v9 == 1752462195 || v9 == 1767989616) {
        goto LABEL_133;
      }
      int v20 = 1768382832;
      goto LABEL_132;
    }

    if (v9 <= 1685088611)
    {
      if (v9 != 1684826732)
      {
        int v12 = 1685021040;
        goto LABEL_142;
      }

      goto LABEL_133;
    }

    if (v9 != 1685088612)
    {
      if (v9 == 1685287026)
      {
        if ((_DWORD)a3 != 8 || !a4)
        {
          BOOL v40 = (os_log_t *)sub_138E8(13);
          BOOL v41 = *v40;
          if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v44 = *(void *)a2;
            int v45 = a2[2];
            sub_613AC((uint64_t)__p, (unsigned int *)&v44);
            unsigned int v42 = v47 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136316674;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 585;
            __int16 v49 = 2080;
            unsigned int v50 = v42;
            __int16 v51 = 1024;
            int v52 = 8;
            __int16 v53 = 2080;
            v54 = "non-";
            __int16 v55 = 1024;
            int v56 = a3;
            __int16 v57 = 2048;
            uint64_t v58 = a4;
            _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
              buf,
              0x3Cu);
            if (v47 < 0) {
              operator delete(__p[0]);
            }
          }

          CFTypeRef v43 = __cxa_allocate_exception(0x10uLL);
          *(void *)CFTypeRef v43 = &off_4865A0;
          v43[2] = 561211770;
        }

        return v10;
      }

      if (v9 == 1685287027)
      {
        if ((_DWORD)a3 != 8 || !a4)
        {
          unsigned int v16 = (os_log_t *)sub_138E8(13);
          uint64_t v17 = *v16;
          if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            uint64_t v44 = *(void *)a2;
            int v45 = a2[2];
            sub_613AC((uint64_t)__p, (unsigned int *)&v44);
            unsigned __int16 v18 = v47 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136316674;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 580;
            __int16 v49 = 2080;
            unsigned int v50 = v18;
            __int16 v51 = 1024;
            int v52 = 8;
            __int16 v53 = 2080;
            v54 = "non-";
            __int16 v55 = 1024;
            int v56 = a3;
            __int16 v57 = 2048;
            uint64_t v58 = a4;
            _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
              buf,
              0x3Cu);
            if (v47 < 0) {
              operator delete(__p[0]);
            }
          }

          unsigned __int16 v19 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned __int16 v19 = &off_4865A0;
          v19[2] = 561211770;
        }

        return v10;
      }

      return sub_689F8(a1, a2, a3, a4);
    }

    sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 628);
    int v11 = (*(uint64_t (**)(void))(**(void **)buf + 424LL))(*(void *)buf);
LABEL_150:
    if (v11) {
      uint64_t v10 = 8LL;
    }
    else {
      uint64_t v10 = 0LL;
    }
    goto LABEL_153;
  }

  if (v9 <= 1885890928)
  {
    if (v9 <= 1885434721)
    {
      if (v9 > 1819505772)
      {
        if (v9 != 1819505773)
        {
          if (v9 == 1869832547) {
            return v10;
          }
          int v14 = 1885430643;
          goto LABEL_121;
        }

LABEL_133:
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 652);
        uint64_t v10 = (*(uint64_t (**)(void, int *, uint64_t, uint64_t))(**(void **)buf + 32LL))( *(void *)buf,  a2,  a3,  a4);
        unsigned int v24 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          unsigned int v25 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }

        return v10;
      }

      if (v9 == 1819046768) {
        return v10;
      }
      int v20 = 1819503987;
LABEL_132:
      if (v9 != v20) {
        return sub_689F8(a1, a2, a3, a4);
      }
      goto LABEL_133;
    }

    if (v9 <= 1885561195)
    {
      if (v9 == 1885434722) {
        return 8LL;
      }
      int v12 = 1885497710;
      goto LABEL_142;
    }

    if (v9 != 1885561196)
    {
      if (v9 == 1885566064) {
        return v10;
      }
      int v12 = 1885696116;
      goto LABEL_142;
    }

    sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 594);
    int v11 = (*(uint64_t (**)(void))(**(void **)buf + 376LL))(*(void *)buf);
    goto LABEL_150;
  }

  if (v9 <= 1886282092)
  {
    if (v9 > 1885956207)
    {
      if (v9 == 1885956208 || v9 == 1885959026) {
        return v10;
      }
      int v14 = 1886218596;
      goto LABEL_121;
    }

    if (v9 == 1885890929) {
      return v10;
    }
    int v12 = 1885955428;
LABEL_142:
    if (v9 != v12) {
      return sub_689F8(a1, a2, a3, a4);
    }
    return v10;
  }

  if (v9 <= 1886353261)
  {
    if (v9 != 1886282093 && v9 != 1886282099)
    {
      if (v9 == 1886283375)
      {
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 537);
        int v11 = (*(uint64_t (**)(void))(**(void **)buf + 344LL))(*(void *)buf);
        goto LABEL_150;
      }

      return sub_689F8(a1, a2, a3, a4);
    }

    return 8LL;
  }

  if (v9 != 1886353262)
  {
    if (v9 != 1886415204)
    {
      if (v9 != 1886417524) {
        return sub_689F8(a1, a2, a3, a4);
      }
      int v22 = sub_D53C8(a1, a2[1]);
      return (4 * v22);
    }

    return 8LL;
  }

  return v10;
}

  if (v70 != v71)
  {
    CFIndex v89 = (uint64_t **)(a1 + 232);
    do
    {
      unsigned int v90 = (uint64_t *)operator new(0x30uLL);
      uint64_t v91 = *(void *)((char *)v70 + 28);
      *(uint64_t *)((char *)v90 + 28) = v91;
      *(uint64_t *)((char *)v90 + 36) = *(void *)((char *)v70 + 36);
      unsigned int v92 = *v89;
      unsigned int v93 = (uint64_t **)(a1 + 232);
      unsigned int v94 = (uint64_t **)(a1 + 232);
      if (*v89)
      {
        do
        {
          while (1)
          {
            unsigned int v93 = (uint64_t **)v92;
            unsigned int v92 = (uint64_t *)*v92;
            unsigned int v94 = v93;
            if (!*v93) {
              goto LABEL_141;
            }
          }

          unsigned int v92 = (uint64_t *)v92[1];
        }

        while (v92);
        unsigned int v94 = v93 + 1;
      }

void sub_19DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_19DFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    unsigned __int8 v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

BOOL sub_19E34(uint64_t a1, int *a2)
{
  if (*a2 == 1651798132)
  {
    unsigned int v3 = atomic_load((unsigned int *)(a1 + 1088));
    return v3 != 0;
  }

  sub_6DD4();
  int v6 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v7 = *a2;
  BOOL v4 = 1LL;
  if (*a2 <= 1701733223)
  {
    if (v7 <= 1668443503)
    {
      if (v7 <= 1635020146)
      {
        if (v7 > 1633970531)
        {
          if (v7 > 1634300530)
          {
            if (v7 <= 1634755427)
            {
              if (v7 == 1634300531) {
                goto LABEL_168;
              }
              int v8 = 1634692199;
              goto LABEL_164;
            }

            if (v7 != 1634755428)
            {
              int v8 = 1634890859;
              goto LABEL_164;
            }

LABEL_165:
            unsigned int v24 = *(void **)(a1 + 1008);
            uint64_t v25 = 2LL;
LABEL_166:
            uint64_t v21 = (*(uint64_t (**)(void))(*v24 + 8 * v25))();
            goto LABEL_167;
          }

          if (v7 == 1633970532) {
            goto LABEL_168;
          }
          if (v7 == 1633973868) {
            goto LABEL_165;
          }
          int v12 = 1634035054;
          goto LABEL_122;
        }

        if (v7 > 1633904998)
        {
          if (v7 == 1633904999 || v7 == 1633906541) {
            goto LABEL_165;
          }
          unsigned __int16 v14 = 29554;
        }

        else
        {
          if (v7 == 1165513555 || v7 == 1633776747) {
            goto LABEL_165;
          }
          unsigned __int16 v14 = 25449;
        }

        int v8 = v14 | 0x61630000;
LABEL_164:
        if (v7 == v8) {
          goto LABEL_165;
        }
LABEL_183:
        uint64_t v21 = sub_36FD4((void *)a1, a2);
        goto LABEL_167;
      }

      if (v7 <= 1651664738)
      {
        if (v7 > 1635152992)
        {
          int v12 = 1650881394;
LABEL_122:
          if (v7 != v12) {
            goto LABEL_183;
          }
          int v22 = a2[1];
          BOOL v23 = v22 == 1869968496 || v22 == 1768845428;
          goto LABEL_175;
        }

        if (v7 == 1635020147) {
          goto LABEL_165;
        }
        if (v7 != 1635148648) {
          goto LABEL_183;
        }
        goto LABEL_151;
      }

      if (v7 <= 1667658617)
      {
        if (v7 == 1651664739 || v7 == 1651798898) {
          goto LABEL_165;
        }
        int v9 = 1651861092;
        goto LABEL_141;
      }

      if (v7 == 1667658618) {
        goto LABEL_168;
      }
      if (v7 == 1668047203) {
        goto LABEL_165;
      }
      if (v7 != 1668247661) {
        goto LABEL_183;
      }
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 1008) + 472LL))(buf);
      uint64_t v15 = *(void *)&v37[4];
      if (!*(void *)&v37[4]) {
        goto LABEL_107;
      }
      unsigned int v16 = (uint64_t *)&v37[4];
      do
      {
        uint64_t v17 = (uint64_t *)v15;
        unsigned __int16 v18 = v16;
        unsigned int v19 = *(_DWORD *)(v15 + 28);
        int v20 = (uint64_t *)(v15 + 8);
        if (v19 >= 0x70636F70)
        {
          int v20 = v17;
          unsigned int v16 = v17;
        }

        uint64_t v15 = *v20;
      }

      while (v15);
      if (v19 < 0x70636F70) {
        uint64_t v17 = v18;
      }
      if (*((_DWORD *)v17 + 7) > 0x70636F70u) {
LABEL_107:
      }
        unsigned int v16 = (uint64_t *)&v37[4];
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 1008) + 472LL))(&v34);
      sub_32C8C(v35);
      sub_32C8C(*(void **)&v37[4]);
      if (v16 != (uint64_t *)&v35)
      {
        uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 352LL))( *(void *)(a1 + 1008),  1685287015LL,  2019976293LL,  0LL);
LABEL_167:
        BOOL v4 = v21;
        goto LABEL_168;
      }

  int v7 = 0LL;
  if (v4) {
LABEL_166:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  return v7;
}

LABEL_181:
      BOOL v4 = 0LL;
      goto LABEL_168;
    }

    if (v7 <= 1684500593)
    {
      if (v7 > 1684238450)
      {
        if (v7 > 1684370275)
        {
          if (v7 > 1684498543)
          {
            if (v7 == 1684498544) {
              goto LABEL_165;
            }
            unsigned __int16 v10 = 28781;
          }

          else
          {
            if (v7 == 1684370276) {
              goto LABEL_165;
            }
            unsigned __int16 v10 = 26733;
          }

          int v8 = v10 | 0x64670000;
          goto LABEL_164;
        }

        if (v7 == 1684238451) {
          goto LABEL_168;
        }
        if (v7 != 1684304756)
        {
          int v8 = 1684365924;
          goto LABEL_164;
        }

        goto LABEL_179;
      }

      if (v7 > 1684104050)
      {
        if (v7 == 1684104051) {
          goto LABEL_168;
        }
        if (v7 == 1684107364) {
          goto LABEL_165;
        }
        int v9 = 1684236338;
        goto LABEL_141;
      }

      if (v7 != 1668443504 && v7 != 1668705648)
      {
        int v9 = 1684104048;
        goto LABEL_141;
      }

  sub_19032C(&v269);
  unint64_t v104 = v100 | v68;
  if (!(_DWORD)v104)
  {
    if (!HIDWORD(v104)) {
      goto LABEL_292;
    }
    uint64_t v107 = (double *)(v8 + 504);
    uint64_t v109 = *(_DWORD *)(a2 + 8);
    if (v109)
    {
      uint64_t v110 = *(_DWORD *)(v8 + 512);
      if (v110)
      {
        if (v109 != v110) {
          goto LABEL_292;
        }
      }
    }

    int v111 = *(_DWORD *)(a2 + 16);
    if (v111)
    {
      CFTypeRef v112 = *(_DWORD *)(v8 + 520);
      if (v112)
      {
        if (v111 != v112) {
          goto LABEL_292;
        }
      }
    }

    char v113 = *(_DWORD *)(a2 + 20);
    if (v113)
    {
      uint64_t v114 = *(_DWORD *)(v8 + 524);
      if (v114)
      {
        if (v113 != v114) {
          goto LABEL_292;
        }
      }
    }

    float v115 = *(_DWORD *)(a2 + 24);
    if (v115)
    {
      float v116 = *(_DWORD *)(v8 + 528);
      if (v116)
      {
        if (v115 != v116) {
          goto LABEL_292;
        }
      }
    }

    unsigned int v117 = *(_DWORD *)(a2 + 28);
    if (v117)
    {
      int v118 = *(_DWORD *)(v8 + 532);
      if (v118)
      {
        if (v117 != v118) {
          goto LABEL_292;
        }
      }
    }

    unsigned int v119 = *(_DWORD *)(a2 + 32);
    if (v119)
    {
      uint64_t v120 = *(_DWORD *)(v8 + 536);
      if (v120)
      {
        if (v119 != v120) {
          goto LABEL_292;
        }
      }
    }

    int v121 = sub_2B8B8(v8);
    int v122 = *(double *)(v8 + 544);
    __n128 v123 = *(_DWORD *)(v8 + 552);
    if (v123)
    {
      v124 = *(_DWORD *)(v121 + 8);
      if (v124)
      {
        if (v123 != v124) {
          goto LABEL_292;
        }
      }
    }

    uint64_t v125 = *(_DWORD *)(v8 + 560);
    if (v125)
    {
      uint64_t v126 = *(_DWORD *)(v121 + 16);
      if (v126)
      {
        if (v125 != v126) {
          goto LABEL_292;
        }
      }
    }

    char v127 = *(_DWORD *)(v8 + 564);
    if (v127)
    {
      uint64_t v128 = *(_DWORD *)(v121 + 20);
      if (v128)
      {
        if (v127 != v128) {
          goto LABEL_292;
        }
      }
    }

    uint64_t v129 = *(_DWORD *)(v8 + 568);
    if (v129)
    {
      uint64_t v130 = *(_DWORD *)(v121 + 24);
      if (v130)
      {
        if (v129 != v130) {
          goto LABEL_292;
        }
      }
    }

    char v131 = *(_DWORD *)(v8 + 572);
    if (v131)
    {
      signed int v132 = *(_DWORD *)(v121 + 28);
      if (v132)
      {
        if (v131 != v132) {
          goto LABEL_292;
        }
      }
    }

    int v133 = *(_DWORD *)(v8 + 576);
    if (v133)
    {
      unsigned int v134 = *(_DWORD *)(v121 + 32);
      if (v134)
      {
        if (v133 != v134) {
          goto LABEL_292;
        }
      }
    }

    unsigned int v135 = sub_2B940(v8);
    int v136 = (double *)(v8 + 592);
    uint64_t v137 = *(_DWORD *)(v135 + 8);
    if (v137)
    {
      int v138 = *(_DWORD *)(v8 + 600);
      if (v138)
      {
        if (v137 != v138) {
          goto LABEL_292;
        }
      }
    }

    CFMutableDictionaryRef v139 = *(_DWORD *)(v135 + 16);
    if (v139)
    {
      unsigned int v140 = *(_DWORD *)(v8 + 608);
      if (v140)
      {
        if (v139 != v140) {
          goto LABEL_292;
        }
      }
    }

    int v141 = *(_DWORD *)(v135 + 20);
    if (v141)
    {
      id v142 = *(_DWORD *)(v8 + 612);
      if (v142)
      {
        if (v141 != v142) {
          goto LABEL_292;
        }
      }
    }

    unsigned int v143 = *(_DWORD *)(v135 + 24);
    if (v143)
    {
      int v144 = *(_DWORD *)(v8 + 616);
      if (v144)
      {
        if (v143 != v144) {
          goto LABEL_292;
        }
      }
    }

    int v145 = *(_DWORD *)(v135 + 28);
    if (v145)
    {
      int v146 = *(_DWORD *)(v8 + 620);
      if (v146)
      {
        if (v145 != v146) {
          goto LABEL_292;
        }
      }
    }

    int v147 = *(_DWORD *)(v135 + 32);
    if (v147)
    {
      v148 = *(_DWORD *)(v8 + 624);
      if (v148)
      {
        if (v147 != v148) {
          goto LABEL_292;
        }
      }
    }

    int v149 = *(double *)(v8 + 632);
    uint64_t v150 = *(_DWORD *)(v8 + 640);
    if (v150)
    {
      unsigned int v151 = *(_DWORD *)(a4 + 8);
      if (v151)
      {
        if (v150 != v151) {
          goto LABEL_292;
        }
      }
    }

    int v152 = *(_DWORD *)(v8 + 648);
    if (v152)
    {
      unint64_t v153 = *(_DWORD *)(a4 + 16);
      if (v153)
      {
        if (v152 != v153) {
          goto LABEL_292;
        }
      }
    }

    uint64_t v154 = *(_DWORD *)(v8 + 652);
    if (v154)
    {
      uint64_t v155 = *(_DWORD *)(a4 + 20);
      if (v155)
      {
        if (v154 != v155) {
          goto LABEL_292;
        }
      }
    }

    unsigned int v156 = *(_DWORD *)(v8 + 656);
    if (v156)
    {
      int v157 = *(_DWORD *)(a4 + 24);
      if (v157)
      {
        if (v156 != v157) {
          goto LABEL_292;
        }
      }
    }

    if ((int v158 = *(_DWORD *)(v8 + 660)) != 0 && (v159 = *(_DWORD *)(a4 + 28)) != 0 && v158 != v159
      || (int v160 = *(_DWORD *)(v8 + 664)) != 0 && (v161 = *(_DWORD *)(a4 + 32)) != 0 && v160 != v161
      || !sub_2854C(v8 + 632, a4)
      || *(_BYTE *)(v8 + 448)
      && ((std::string::value_type v162 = *(int **)(v8 + 944)) == 0LL
       || !*v162
       || (unsigned int v163 = *v162, v163 != sub_2B9C8(v8))
       || *(void *)(v8 + 976) == *(void *)(v8 + 984)))
    {
LABEL_292:
      uint64_t v172 = sub_2B8B8(v8);
      int v173 = sub_238668(v8 + 504, a2, v172);
      if ((_DWORD)v173)
      {
        unint64_t v104 = v173;
        unsigned int v174 = (os_log_s *)*(id *)sub_138E8(13);
        unsigned int v106 = v174;
        if (v174 && os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1119;
          _os_log_impl(&dword_0, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
        }

        goto LABEL_301;
      }

      unsigned int v175 = sub_2B940(v8);
      int v176 = sub_238668(v8 + 592, v175, a4);
      if ((_DWORD)v176)
      {
        unint64_t v104 = v176;
        char v177 = (os_log_s *)*(id *)sub_138E8(13);
        unsigned int v106 = v177;
        if (v177 && os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1123;
          _os_log_impl(&dword_0, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
        }

        goto LABEL_301;
      }

      uint64_t v178 = (std::mutex *)(v8 + 880);
      std::mutex::lock((std::mutex *)(v8 + 880));
      for (uint64_t i = (uint64_t *)qword_48F5F0; i != &qword_48F5E8; uint64_t i = (uint64_t *)i[1])
      {
        if (i[4] == v8) {
          i[4] = 0LL;
        }
      }

      uint64_t v180 = *(_DWORD *)(v8 + 480);
      *(void *)buf = v250;
      buf[8] = 1;
      sub_92F80(v250);
      int v181 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
      if (v181)
      {
        unsigned int v182 = 0LL;
        unsigned int v183 = v181 / 24;
        if (v183 <= 1) {
          int v184 = 1LL;
        }
        else {
          int v184 = v183;
        }
        do
        {
          CFArrayRef v185 = 0;
          uint64_t v186 = (void *)(*(void *)(v8 + 24) + 24 * v182 + 8);
          uint64_t v187 = 1LL;
          do
          {
            uint64_t v188 = v185;
            int v189 = *(_DWORD *)((*(uint64_t (**)(void, uint64_t, void))(*(void *)*v186 + 128LL))( *v186,  v187,  0LL)
                             + 24);
            if (v189 > v180) {
              uint64_t v180 = v189;
            }
            uint64_t v187 = 2LL;
            CFArrayRef v185 = 1;
          }

          while ((v188 & 1) == 0);
          ++v182;
          int v8 = v258;
        }

        while (v182 != v184);
      }

      sub_93128((uint64_t)buf);
      if (*(_BYTE *)(v8 + 448) || *(void *)(v8 + 584) || *(void *)(v8 + 672))
      {
        uint64_t v190 = sub_2B9C8(v8);
        unsigned int v191 = v190;
        if (v190)
        {
          int v192 = calloc(1uLL, (16 * v190) | 8u);
          if (v192) {
            *int v192 = v191;
          }
        }

        else
        {
          int v192 = 0LL;
        }

        *(void *)buf = v192;
        *(_DWORD *)&buf[8] = 2 * (v192 != 0LL);
        sub_2DB30(v8 + 944, (unsigned int **)buf);
        sub_2DBF4((unsigned int **)buf);
        char v193 = v180 << 12;
        if (**(_DWORD **)(v8 + 944))
        {
          unsigned int v194 = 0LL;
          unsigned int v195 = 0LL;
          do
          {
            unsigned int v196 = sub_18FFF8(v8, v193);
            int v197 = *(_DWORD **)(v8 + 944);
            uint64_t v198 = &v197[v194];
            *((void *)v198 + 2) = v196;
            v198[3] = v193;
            if ((*(_BYTE *)(v8 + 468) & 0x20) != 0) {
              unsigned int v199 = 1;
            }
            else {
              unsigned int v199 = *(_DWORD *)(v8 + 484);
            }
            v198[2] = v199;
            ++v195;
            int v200 = *v197;
            v194 += 4LL;
          }

          while (v195 < v200);
          if (*v197)
          {
            uint64_t v201 = 0LL;
            uint64_t v202 = (void **)(v197 + 4);
            do
            {
              if (*v202)
              {
                bzero(*v202, *((unsigned int *)v202 - 1));
                int v200 = *v197;
              }

              ++v201;
              v202 += 2;
            }

            while (v201 < v200);
          }
        }

        if (*(_BYTE *)(v8 + 448))
        {
          *(void *)buf = v250;
          buf[8] = 1;
          sub_92F80(v250);
          char v203 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
          if (v203)
          {
            uint64_t v204 = 0xAAAAAAAAAAAAAAABLL * (v203 >> 3);
            int v205 = 1LL;
            uint64_t v206 = 8LL;
            do
            {
              unsigned int v207 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v258 + 24) + v206) + 216LL))(*(void *)(*(void *)(v258 + 24) + v206));
              int v208 = v207;
              if (v205 >= v204) {
                uint64_t v209 = 1;
              }
              else {
                uint64_t v209 = v207;
              }
              ++v205;
              v206 += 24LL;
            }

            while ((v209 & 1) == 0);
            sub_93128((uint64_t)buf);
            int v8 = v258;
            if (v208)
            {
              uint64_t v210 = sub_2B9C8(v258);
              char v211 = v210;
              if (v210)
              {
                v212 = calloc(1uLL, (16 * v210) | 8u);
                if (v212) {
                  os_log_s *v212 = v211;
                }
              }

              else
              {
                v212 = 0LL;
              }

              *(void *)buf = v212;
              *(_DWORD *)&buf[8] = 2 * (v212 != 0LL);
              sub_2DB30(v258 + 960, (unsigned int **)buf);
              sub_2DBF4((unsigned int **)buf);
              if (**(_DWORD **)(v258 + 960))
              {
                int v213 = 0LL;
                int v214 = 0LL;
                do
                {
                  unsigned int v215 = sub_18FFF8(v258, v193);
                  int v216 = *(_DWORD **)(v258 + 960);
                  char v217 = &v216[v213];
                  *((void *)v217 + 2) = v215;
                  v217[3] = v193;
                  if ((*(_BYTE *)(v258 + 468) & 0x20) != 0) {
                    uint64_t v218 = 1;
                  }
                  else {
                    uint64_t v218 = *(_DWORD *)(v258 + 484);
                  }
                  v217[2] = v218;
                  ++v214;
                  uint64_t v219 = *v216;
                  v213 += 4LL;
                }

                while (v214 < v219);
                if (*v216)
                {
                  uint64_t v220 = 0LL;
                  int v221 = (void **)(v216 + 4);
                  do
                  {
                    if (*v221)
                    {
                      bzero(*v221, *((unsigned int *)v221 - 1));
                      uint64_t v219 = *v216;
                    }

                    ++v220;
                    v221 += 2;
                  }

                  while (v220 < v219);
                }
              }
            }
          }

          else
          {
            sub_93128((uint64_t)buf);
          }
        }
      }

      id v222 = (uint64_t *)qword_48F5F0;
      if ((uint64_t *)qword_48F5F0 != &qword_48F5E8)
      {
        do
        {
          if (v222[4])
          {
            unsigned int v223 = (uint64_t *)v222[1];
          }

          else
          {
            unsigned int v223 = (uint64_t *)v222[1];
            int v224 = (void *)v222[2];
            int v225 = *v222;
            *(void *)(v225 + 8) = v223;
            *(void *)v222[1] = v225;
            --qword_48F5F8;
            operator delete(v222);
            if (v224) {
              free(v224);
            }
          }

          id v222 = v223;
        }

        while (v223 != &qword_48F5E8);
      }

      std::mutex::unlock(v178);
      id v226 = (uint64_t *)(v8 + 976);
      sub_18FE8C(v8 + 976, *(unsigned int ***)(v8 + 976));
      std::string::size_type v265 = v250;
      v266 = 1;
      sub_92F80(v250);
      v227 = *(void *)(v8 + 24);
      if (v227 != *(void *)(v8 + 32))
      {
        v228 = 0LL;
        int v229 = (uint64_t *)(v8 + 984);
        v230 = (uint64_t *)(v8 + 992);
        do
        {
          if (!v228) {
            v228 = *(_DWORD **)(v8 + 944);
          }
          unsigned int v231 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v227 + 8) + 128LL))( *(void *)(v227 + 8),  1LL,  0LL);
          if ((*(_DWORD *)(v231 + 12) & 0x20) != 0) {
            int v232 = *(_DWORD *)(v231 + 28);
          }
          else {
            int v232 = 1;
          }
          sub_2D9D4((uint64_t)v264, v228, v232);
          v233 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v227 + 8) + 128LL))( *(void *)(v227 + 8),  2LL,  0LL);
          if ((*(_DWORD *)(v233 + 12) & 0x20) != 0) {
            v234 = *(_DWORD *)(v233 + 28);
          }
          else {
            v234 = 1;
          }
          sub_2D9D4((uint64_t)v263, v228, v234);
          std::string __p = 0LL;
          id v260 = 0;
          sub_2DB30((uint64_t)&__p, v264);
          int v261 = 0LL;
          v262 = 0;
          sub_2DB30((uint64_t)&v261, v263);
          v235 = *v229;
          if (*v229 >= (unint64_t)*v230)
          {
            int v237 = (v235 - *v226) >> 5;
            v238 = *v230 - *v226;
            unsigned int v239 = v238 >> 4;
            else {
              int v240 = v239;
            }
            *(void *)&buf[32] = v230;
            if (v240)
            {
              if (v240 >> 59) {
                sub_7A8C4();
              }
              id v241 = (char *)operator new(32 * v240);
            }

            else
            {
              id v241 = 0LL;
            }

            *(void *)buf = v241;
            *(void *)&buf[8] = &v241[32 * v237];
            *(void *)&buf[16] = *(void *)&buf[8];
            *(void *)&_BYTE buf[24] = &v241[32 * v240];
            sub_18FEE4(*(uint64_t *)&buf[8], (unsigned int **)&__p);
            v242 = *(void *)&buf[8];
            *(void *)&buf[16] += 32LL;
            v243 = *v229;
            v244 = *v226;
            *(void *)&int v269 = *(void *)&buf[8];
            *((void *)&v269 + 1) = *(void *)&buf[8];
            int v273 = v269;
            v267.__r_.__value_.__r.__words[0] = (std::string::size_type)v230;
            v267.__r_.__value_.__l.__size_ = (std::string::size_type)&v273;
            v267.__r_.__value_.__l.__cap_ = (std::string::size_type)&v269;
            for (uint64_t j = 0; v243 != v244; v243 -= 32LL)
            {
              *(void *)(v242 - 32) = 0LL;
              *(_DWORD *)(v242 - 24) = 0;
              sub_2DB30(v242 - 32, (unsigned int **)(v243 - 32));
              *(void *)(v242 - 16) = 0LL;
              int v245 = v242 - 16;
              *(_DWORD *)(v245 + 8) = 0;
              sub_2DB30(v245, (unsigned int **)(v243 - 16));
              v242 = *((void *)&v269 + 1) - 32LL;
              *((void *)&v269 + 1) -= 32LL;
            }

            uint64_t j = 1;
            sub_18FF9C((uint64_t)&v267);
            std::string::size_type v246 = *v230;
            v257 = *(void *)&buf[16];
            unsigned int v247 = *(_OWORD *)&buf[16];
            int v248 = *(_OWORD *)v226;
            *id v226 = v242;
            *(_OWORD *)&buf[8] = v248;
            *(_OWORD *)int v229 = v247;
            *(void *)&_BYTE buf[24] = v246;
            *(void *)buf = v248;
            sub_18FF3C((uint64_t)buf);
            id v236 = v257;
            int v8 = v258;
          }

          else
          {
            sub_18FEE4(*v229, (unsigned int **)&__p);
            id v236 = v235 + 32;
            os_log_s *v229 = v235 + 32;
          }

          *(void *)(v8 + 984) = v236;
          sub_2DBF4(&v261);
          sub_2DBF4((unsigned int **)&__p);
          sub_2DBF4(v263);
          sub_2DBF4(v264);
          v227 += 24LL;
        }

        while (v227 != *(void *)(v8 + 32));
      }

      sub_93128((uint64_t)&v265);
      sub_2BAE4(v8, a5);
    }

    else
    {
      std::mutex::lock((std::mutex *)(v8 + 880));
      unsigned int v164 = *(unsigned int **)(v8 + 944);
      if (v164)
      {
        int v165 = *v164;
        if ((_DWORD)v165)
        {
          int v166 = 0LL;
          unsigned int v167 = (void **)(v164 + 4);
          do
          {
            if (*v167)
            {
              bzero(*v167, *((unsigned int *)v167 - 1));
              int v165 = *v164;
            }

            ++v166;
            v167 += 2;
          }

          while (v166 < v165);
        }
      }

      int v168 = *(unsigned int **)(v258 + 960);
      if (v168)
      {
        char v169 = *v168;
        if ((_DWORD)v169)
        {
          uint64_t v170 = 0LL;
          uint64_t v171 = (void **)(v168 + 4);
          do
          {
            if (*v171)
            {
              bzero(*v171, *((unsigned int *)v171 - 1));
              char v169 = *v168;
            }

            ++v170;
            v171 += 2;
          }

          while (v170 < v169);
        }
      }

      sub_2BAE4(v258, a5);
      std::mutex::unlock((std::mutex *)(v8 + 880));
    }

    return 0LL;
  }

  __n128 v105 = (os_log_s *)*(id *)sub_138E8(13);
  unsigned int v106 = v105;
  if (v105 && os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1094;
    _os_log_impl(&dword_0, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
  }

            if (v82 < v83)
            {
              uint64_t v100 = (std::__shared_weak_count *)v78[1];
              if (v100)
              {
                uint64_t v101 = std::__shared_weak_count::lock(v100);
                if (v101)
                {
                  unsigned int v102 = v101;
                  unsigned int v103 = *v78;
                  unint64_t v104 = (unint64_t *)&v101->__shared_weak_owners_;
                  do
                    __n128 v105 = __ldxr(v104);
                  while (__stxr(v105 + 1, v104));
                  unsigned int v106 = (unint64_t *)&v101->__shared_owners_;
                  do
                    uint64_t v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                    std::__shared_weak_count::__release_weak(v102);
                  }

                  uint64_t v108 = std::__shared_weak_count::lock(v102);
                  if (!v108) {
                    goto LABEL_555;
                  }
                  uint64_t v109 = v108;
                  uint64_t v110 = (unint64_t *)&v108->__shared_owners_;
                  do
                    int v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v109);
                  }

                  if (v103)
                  {
                    sub_B8CBC((uint64_t *)buf, (uint64_t *)__p, "", 476);
                    CFTypeRef v112 = *(std::__shared_weak_count **)&buf[8];
                    char v113 = *(_DWORD *)(*(void *)buf + 144LL);
                    if (*(void *)&buf[8])
                    {
                      uint64_t v114 = (unint64_t *)(*(void *)&buf[8] + 8LL);
                      do
                        float v115 = __ldaxr(v114);
                      while (__stlxr(v115 - 1, v114));
                      if (!v115)
                      {
                        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                        std::__shared_weak_count::__release_weak(v112);
                      }
                    }

                    std::__shared_weak_count::__release_weak(v102);
                    if (v113 == 1885433888)
                    {
                      sub_124A68((uint64_t *)&__p, v83, __p);
                      goto LABEL_216;
                    }
                  }

                  else
                  {
LABEL_555:
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
              }

              int v301 = (os_log_t *)sub_138E8(13);
              uint64_t v302 = *v301;
              if (*v301 && os_log_type_enabled(*v301, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 476;
                _os_log_impl( &dword_0,  v302,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              goto LABEL_559;
            }
          }

          else
          {
            if (v79 != 16)
            {
              char v299 = (os_log_t *)sub_138E8(13);
              uint64_t v300 = *v299;
              if (*v299 && os_log_type_enabled(*v299, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 482;
                _os_log_impl( &dword_0,  v300,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              goto LABEL_559;
            }

            if ((char *)v359 - (_BYTE *)__p != 16)
            {
              unsigned int v295 = (os_log_t *)sub_138E8(13);
              int v296 = *v295;
              if (*v295 && os_log_type_enabled(*v295, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 483;
                _os_log_impl( &dword_0,  v296,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              goto LABEL_559;
            }

            sub_124BD4((uint64_t *)&v361);
            sub_124BD4((uint64_t *)&__p);
          }

LABEL_147:
      unsigned int v24 = *(void **)(a1 + 928);
      if (!v24)
      {
        uint64_t v31 = (os_log_t *)sub_138E8(13);
        id v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)unsigned int v37 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&v37[10] = 1869;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      uint64_t v25 = 4LL;
      goto LABEL_166;
    }

    if (v7 <= 1685287010)
    {
      if (v7 > 1685087595)
      {
        int v8 = 1685087596;
        goto LABEL_164;
      }

      if (v7 == 1684500594 || v7 == 1684893796) {
        goto LABEL_165;
      }
      int v9 = 1685025633;
      goto LABEL_141;
    }

    if (v7 <= 1685288050)
    {
      if (v7 != 1685287523) {
        goto LABEL_183;
      }
LABEL_178:
      int v29 = a2[1];
      int v30 = 1768845428;
      goto LABEL_180;
    }

    if (v7 == 1685288051)
    {
LABEL_179:
      int v29 = a2[1];
      int v30 = 1869968496;
LABEL_180:
      if (v29 == v30) {
        goto LABEL_165;
      }
      goto LABEL_181;
    }

    if (v7 == 1685483630) {
      goto LABEL_165;
    }
    int v13 = 1685484390;
LABEL_146:
    if (v7 != v13) {
      goto LABEL_183;
    }
    goto LABEL_147;
  }

  if (v7 <= 1935762280)
  {
    if (v7 <= 1869838182)
    {
      if (v7 <= 1769302371)
      {
        if (v7 > 1719165554)
        {
          if (v7 == 1719165555)
          {
            BOOL v4 = ((*(uint64_t (**)(void, void))(**(void **)(a1 + 1008) + 528LL))( *(void *)(a1 + 1008),  a2[1]) & 0xFF00000000LL) != 0;
            goto LABEL_168;
          }

          if (v7 == 1735682404) {
            goto LABEL_168;
          }
          int v12 = 1752657012;
          goto LABEL_122;
        }

        if (v7 == 1701733224)
        {
LABEL_151:
          int v26 = a2[1];
          int v27 = 1768845428;
          goto LABEL_174;
        }

        if (v7 == 1718383987) {
          goto LABEL_168;
        }
        int v9 = 1718641517;
      }

      else if (v7 <= 1853059618)
      {
        if (v7 == 1769302372 || v7 == 1818326127) {
          goto LABEL_165;
        }
        int v9 = 1852012899;
      }

      else
      {
        if (v7 > 1869574755)
        {
          if (v7 != 1869574756)
          {
            int v8 = 1869575794;
            goto LABEL_164;
          }

          goto LABEL_165;
        }

        if (v7 == 1853059619) {
          goto LABEL_168;
        }
        int v9 = 1853059700;
      }

                  uint64_t v81 = *(void *)(v81 + 8);
                }

                while (v81 != v77 + 104);
              }

              *(_BYTE *)(v77 + 128) = v79;
              unsigned int v92 = sub_138E8(7);
              unsigned int v93 = sub_138E8(27);
              unsigned int v94 = 0;
              unsigned int v95 = 0LL;
              *(void *)buf = 0x100000002LL;
              unsigned int v96 = *(void *)(v92 + 8);
              while (1)
              {
                unsigned int v97 = *(int *)&buf[4 * v95];
                BOOL v98 = v94;
                if (((v96 & v97) != 0) != ((*(void *)(v93 + 8) & v97) != 0)) {
                  break;
                }
                unsigned int v94 = 1;
                unsigned int v95 = 1LL;
                if ((v98 & 1) != 0) {
                  goto LABEL_587;
                }
              }

              if ((v96 & v97) == 0) {
                unsigned int v92 = v93;
              }
LABEL_587:
              v329 = *(os_log_s **)v92;
              if (v329 && os_log_type_enabled(v329, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v330 = "Dis";
                *(void *)&uint8_t buf[4] = "DeviceManager.cpp";
                *(_DWORD *)buf = 136315650;
                if (v78) {
                  uint64_t v330 = "En";
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 236;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v330;
                _os_log_impl( &dword_0,  v329,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %sabled port discovery for the VAD.",  buf,  0x1Cu);
              }
            }

            if (v80) {
              (*(void (**)(uint64_t))(*(void *)v77 + 24LL))(v77);
            }
            goto LABEL_1026;
          }

          uint64_t v616 = sub_138E8(13);
          v551 = 561211770;
          id v617 = sub_8C7D4(1, *(void **)v616, *(void *)(v616 + 8));
          v618 = (void *)objc_claimAutoreleasedReturnValue(v617);
          if (v618)
          {
            uint64_t v552 = v618;
            if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
            {
              *(void *)v871 = *(void *)a2;
              *(_DWORD *)&v871[8] = a2[2];
              sub_613AC((uint64_t)__p, (unsigned int *)v871);
              int v619 = __p[23];
              v620 = *(_BYTE **)__p;
              unsigned int v621 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              int v622 = __p;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v619 < 0) {
                int v622 = v620;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6693;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v622;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = a5;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v621;
              int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_1132;
            }

            goto LABEL_1135;
          }

          goto LABEL_1061;
        case 1701737068:
          *(_BYTE *)(a1 + 488) = *(_DWORD *)a6 != 0;
          v54 = *(void *)(a1 + 144);
          __int16 v55 = *(void *)(a1 + 152);
          while (v54 != v55)
          {
            if (*(void *)v54) {
              sub_C69DC(*(void *)(*(void *)v54 + 1008LL), *(_BYTE *)(a1 + 488));
            }
            v54 += 8LL;
          }

          goto LABEL_1026;
      }

      goto LABEL_203;
    }

    if (v16 <= 1920230245)
    {
      if (v16 != 1769304164)
      {
        if (v16 != 1886350709) {
          goto LABEL_203;
        }
        if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          uint64_t v576 = sub_138E8(13);
          v551 = 561211770;
          id v577 = sub_8C7D4(1, *(void **)v576, *(void *)(v576 + 8));
          v578 = (void *)objc_claimAutoreleasedReturnValue(v577);
          if (v578)
          {
            uint64_t v552 = v578;
            if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
            {
              *(void *)v871 = *(void *)a2;
              *(_DWORD *)&v871[8] = a2[2];
              sub_613AC((uint64_t)__p, (unsigned int *)v871);
              int v579 = __p[23];
              v580 = *(_BYTE **)__p;
              unsigned int v581 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              int v582 = __p;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v579 < 0) {
                int v582 = v580;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6645;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v582;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = a5;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v581;
              int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_1132;
            }

            goto LABEL_1135;
          }

          goto LABEL_1061;
        }

        id v32 = sub_1CBD44();
        __n128 v33 = *(_DWORD *)a6;
        if (!v32)
        {
          *(_BYTE *)(a1 + 168) = sub_261ED4(a1, v33 != 0);
          goto LABEL_1026;
        }

        if (v33)
        {
          uint64_t v34 = sub_261ED4(a1, 1LL);
          *(_BYTE *)(a1 + 168) = v34;
          if (!v34) {
            goto LABEL_1026;
          }
          uint64_t v35 = sub_138E8(2);
          unsigned int v36 = sub_8C7D4(3, *(void **)v35, *(void *)(v35 + 8));
          unsigned int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
          unsigned int v38 = v37;
          if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6663;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = v33;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Queuing up PolicyMute route change command for mute (%u)",  buf,  0x18u);
          }

          uint64_t v39 = sub_5954C();
          BOOL v40 = operator new(0x40uLL);
          BOOL v41 = *(void *)(a1 + 112);
          v848[0] = &off_479418;
          v848[1] = a1;
          id v849 = v848;
          v40[2] = 0;
          *(void *)BOOL v40 = &off_479138;
          *((_BYTE *)v40 + 12) = 1;
          *((void *)v40 + 2) = 0x16D706D75LL;
          *((void *)v40 + 3) = v41;
          *((void *)v40 + 4) = &off_479418;
          *((void *)v40 + 7) = v40 + 8;
          *((void *)v40 + 5) = a1;
          (*(void (**)(uint64_t))(*(void *)v39 + 328LL))(v39);
          unsigned int v42 = v849;
          if (v849 == v848)
          {
            CFTypeRef v43 = 4LL;
            unsigned int v42 = v848;
LABEL_1024:
            v535 = *(void (**)(void))(*v42 + 8 * v43);
            goto LABEL_1025;
          }
        }

        else
        {
          *(void *)buf = sub_26E7BC(a1);
          *(void *)&buf[8] = v331;
          if ((sub_264FD8(buf) & 1) != 0) {
            goto LABEL_1026;
          }
          *(_BYTE *)(a1 + 168) = 0;
          char v332 = sub_138E8(2);
          int v333 = sub_8C7D4(3, *(void **)v332, *(void *)(v332 + 8));
          uint64_t v334 = (os_log_s *)objc_claimAutoreleasedReturnValue(v333);
          unsigned int v335 = v334;
          if (v334 && os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6676;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = 0;
            _os_log_impl( &dword_0,  v335,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d queuing up PolicyMute route change command for mute (%u)",  buf,  0x18u);
          }

          int v336 = sub_5954C();
          v337 = operator new(0x40uLL);
          sub_26E7BC(a1);
          v338 = *(void *)(a1 + 112);
          v846[0] = &off_479460;
          v846[1] = a1;
          v847 = v846;
          v337[2] = 0;
          *(void *)v337 = &off_479138;
          *((_BYTE *)v337 + 12) = 0;
          *((void *)v337 + 2) = v339;
          *((void *)v337 + 3) = v338;
          *((void *)v337 + 4) = &off_479460;
          *((void *)v337 + 7) = v337 + 8;
          *((void *)v337 + 5) = a1;
          (*(void (**)(uint64_t, _DWORD *))(*(void *)v336 + 328LL))(v336, v337);
          unsigned int v42 = v847;
          if (v847 == v846)
          {
            CFTypeRef v43 = 4LL;
            unsigned int v42 = v846;
            goto LABEL_1024;
          }
        }

        if (!v42) {
          goto LABEL_1026;
        }
        CFTypeRef v43 = 5LL;
        goto LABEL_1024;
      }

      kdebug_trace(721684512LL, 0LL, 0LL, 0LL, 0LL);
      if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
      {
        uint64_t v648 = sub_138E8(13);
        v551 = 561211770;
        id v649 = sub_8C7D4(1, *(void **)v648, *(void *)(v648 + 8));
        v650 = (void *)objc_claimAutoreleasedReturnValue(v649);
        if (v650)
        {
          uint64_t v552 = v650;
          if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
          {
            *(void *)v871 = *(void *)a2;
            *(_DWORD *)&v871[8] = a2[2];
            sub_613AC((uint64_t)__p, (unsigned int *)v871);
            int v651 = __p[23];
            v652 = *(_BYTE **)__p;
            unsigned int v653 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            int v654 = __p;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v651 < 0) {
              int v654 = v652;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6430;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v654;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = a5;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v653;
            int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_1132;
          }

          goto LABEL_1135;
        }

        goto LABEL_1061;
      }

      if (*((_DWORD *)a6 + 2) == 8)
      {
        if (*(void *)a6)
        {
          theArray[0] = *(CFMutableArrayRef *)a6;
          *(void *)&v871[8] = 0LL;
          *(void *)&v871[16] = 0LL;
          *(void *)v871 = &v871[8];
          id v808 = (uint64_t **)(a1 + 144);
          unsigned int v64 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
          if (sub_E6F10())
          {
            v866.__r_.__value_.__r.__words[0] = a1;
            uint64_t v65 = atomic_load(&qword_492FF0);
            if (v65 != -1LL)
            {
              *(void *)buf = &v866;
              *(void *)std::string __p = buf;
              std::__call_once(&qword_492FF0, __p, (void (__cdecl *)(void *))sub_26B088);
            }
          }

          unsigned int v66 = (void *)sub_EAD14();
          *(void *)buf = CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
          buf[8] = 1;
          if (sub_EAE28(v66, (CFStringRef *)buf))
          {
            sub_19DFC((uint64_t)buf);
          }

          else
          {
            sub_31821C();
            v244 = qword_49DAB8;
            sub_19DFC((uint64_t)buf);
            if (v244 != 1)
            {
              unsigned int v247 = 0;
              goto LABEL_602;
            }
          }

          if (!v64)
          {
            v738 = sub_138E8(13);
            unsigned int v739 = sub_8C7D4(1, *(void **)v738, *(void *)(v738 + 8));
            int v740 = (os_log_s *)objc_claimAutoreleasedReturnValue(v739);
            v741 = v740;
            if (v740 && os_log_type_enabled(v740, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6453;
              _os_log_impl( &dword_0,  v741,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [defaultDevice is NULL]: No default VAD could be found!",  buf,  0x12u);
            }

            v742 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v742, "No default VAD could be found!");
          }

          sub_6DD4();
          int v245 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
          std::string::size_type v246 = (_BYTE *)sub_135A0(v64, 1);
          if (v871 != v246) {
            sub_52A24((uint64_t)v871, *(void **)v246, (void *)v246 + 1);
          }
          unsigned int v247 = sub_26B0D4(a1, v871, 1886545251);
          if (v245) {
            (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
          }
LABEL_602:
          v850[0] = &off_4793D0;
          v850[1] = a1;
          v850[2] = theArray;
          v851 = v850;
          sub_26B218((uint64_t)&v866, a1, (uint64_t)v850);
          std::string::size_type v340 = v851;
          if (v851 == v850)
          {
            int v341 = 4LL;
            std::string::size_type v340 = v850;
          }

          else
          {
            if (!v851) {
              goto LABEL_607;
            }
            int v341 = 5LL;
          }

          (*(void (**)(void *))(*v340 + 8 * v341))(v340);
LABEL_607:
          if (!v866.__r_.__value_.__l.__size_)
          {
            int v691 = sub_138E8(13);
            v692 = sub_8C7D4(1, *(void **)v691, *(void *)(v691 + 8));
            unsigned int v693 = (os_log_s *)objc_claimAutoreleasedReturnValue(v692);
            int v694 = v693;
            if (v693 && os_log_type_enabled(v693, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6463;
              _os_log_impl( &dword_0,  v694,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            v695 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v695, "Postcondition failure.");
          }

          uint64_t v342 = sub_26B810(a1);
          if (LODWORD(v866.__r_.__value_.__l.__data_) == 1919118966)
          {
            *(_DWORD *)buf = 0;
            *(_DWORD *)std::string __p = 0;
          }

          if (v866.__r_.__value_.__l.__size_)
          {
            if (*(_DWORD *)(a1 + 224) == 1668509810) {
              unsigned int v343 = 1668309362;
            }
            else {
              unsigned int v343 = *(_DWORD *)(a1 + 224);
            }
            sub_13408((uint64_t)&v866.__r_.__value_.__l.__size_, @"category", v343);
            sub_13408((uint64_t)&v866.__r_.__value_.__l.__size_, @"mode", *(_DWORD *)(a1 + 228));
            int size = (const __CFDictionary *)v866.__r_.__value_.__l.__size_;
          }

          else
          {
            int size = 0LL;
          }

          LODWORD(Mutable) = 0;
          sub_51A88(size, @"route change reason", &Mutable);
          id v811 = sub_72348(Mutable);
          if ((v811 & v342) == 1)
          {
            uint64_t v345 = *(id *)sub_138E8(2);
            uint64_t v346 = v345;
            if (v345)
            {
              uint64_t v347 = (os_log_s *)v345;
              if (os_log_type_enabled(v347, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6498;
                _os_log_impl( &dword_0,  v347,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Route change was redundant, but the beam direction changed. Updating the route change description.",  buf,  0x12u);
              }
            }

            sub_13408((uint64_t)&v866.__r_.__value_.__l.__size_, @"route change reason", 1919050851);
            sub_6DD4();
            char v348 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
            sub_268514((uint64_t)buf, a1, *(void **)(a1 + 120));
            if (v866.__r_.__value_.__s.__data_[17] && *(void *)buf && v866.__r_.__value_.__l.__size_) {
              CFDictionarySetValue( (CFMutableDictionaryRef)v866.__r_.__value_.__l.__size_,  @"active devices",  *(const void **)buf);
            }
            sub_13818((uint64_t)buf);
            if (v348) {
              (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
            }
          }

          sub_26C00C(v808);
          int v349 = *(unint64_t **)(a1 + 144);
          v350 = *(unint64_t **)(a1 + 152);
          while (v349 != v350)
          {
            if (*v349) {
              sub_C3328(*v349);
            }
            ++v349;
          }

          sub_E5784(buf, *(void *)(a1 + 216) + 8LL);
          if (buf[16])
          {
            sub_13850((uint64_t)buf);
            sub_E5784(buf, *(void *)(a1 + 216) + 8LL);
            if (!buf[16]) {
              sub_8DEEC();
            }
            *(void *)std::string __p = *(void *)buf;
            *(_WORD *)&__p[8] = *(_WORD *)&buf[8];
            if (!buf[8] || !*(void *)buf || (CFRetain(*(CFTypeRef *)buf), buf[16])) {
              sub_13850((uint64_t)buf);
            }
            if (*(void *)__p
              && CFDictionaryGetCount(*(CFDictionaryRef *)__p)
              && **(_BYTE **)(a1 + 216)
              && v866.__r_.__value_.__s.__data_[17]
              && *(void *)__p
              && v866.__r_.__value_.__l.__size_)
            {
              CFDictionarySetValue( (CFMutableDictionaryRef)v866.__r_.__value_.__l.__size_,  @"voice processing configuration",  *(const void **)__p);
            }

            sub_13850((uint64_t)__p);
          }

          unsigned int v351 = a1;
          int v352 = *(int **)(a1 + 280);
          if (v352 && !sub_72A04(*v352, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152)))
          {
            id v353 = sub_138E8(2);
            v354 = sub_8C7D4(3, *(void **)v353, *(void *)(v353 + 8));
            v355 = (void *)objc_claimAutoreleasedReturnValue(v354);
            v356 = v355;
            if (v355)
            {
              int v357 = v355;
              if (os_log_type_enabled(v357, OS_LOG_TYPE_DEFAULT))
              {
                sub_2CA1C(__p, **(unsigned int **)(a1 + 280));
                v358 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6526;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v358;
                _os_log_impl( &dword_0,  v357,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d WHA VAD %s removed after route change, clearing state",  buf,  0x1Cu);
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
            }

            unsigned int v359 = **(_DWORD **)(a1 + 280);
            if (v359 != 1986095474 && v359 != 1986884979)
            {
              v803 = sub_138E8(13);
              uint64_t v804 = sub_8C7D4(1, *(void **)v803, *(void *)(v803 + 8));
              id v805 = (os_log_s *)objc_claimAutoreleasedReturnValue(v804);
              v806 = v805;
              if (v805 && os_log_type_enabled(v805, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6529;
                _os_log_impl( &dword_0,  v806,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              uint64_t v807 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v807, "Precondition failure.");
            }

            if (v359 == 1986884979) {
              int v360 = 19;
            }
            else {
              int v360 = 20;
            }
            unsigned int v351 = a1;
            sub_13A998(*(void *)(a1 + 112), v360);
            v361 = *(void **)(a1 + 280);
            *(void *)(a1 + 280) = 0LL;
            if (v361) {
              sub_26C0F4(v361);
            }
          }

          if (*(_DWORD *)(v351 + 400))
          {
            v362 = sub_72A04(1986291046, 0, *(uint64_t **)(v351 + 144), *(uint64_t **)(v351 + 152));
            if (!v64)
            {
              uint64_t v751 = sub_138E8(13);
              id v752 = sub_8C7D4(1, *(void **)v751, *(void *)(v751 + 8));
              v753 = (os_log_s *)objc_claimAutoreleasedReturnValue(v752);
              uint64_t v754 = v753;
              if (v753 && os_log_type_enabled(v753, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6544;
                _os_log_impl( &dword_0,  v754,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              id v755 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v755, "Precondition failure.");
            }

            uint64_t v363 = v362;
            sub_6DD4();
            id v364 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
            int v365 = sub_135A0(v363, 1);
            sub_86550((uint64_t *)buf, v365);
            v366 = 0LL;
            do
            {
              unsigned int v367 = sub_26B0D4(a1, buf, *(_DWORD *)&aBphpbphpoelpcp[v366]);
              if (v366 == 8) {
                int v368 = 1;
              }
              else {
                int v368 = v367;
              }
              v366 += 4LL;
            }

            while (v368 != 1);
            if ((v367 & 1) == 0) {
              sub_22C714(a1 + 400);
            }
            sub_32C8C(*(void **)&buf[8]);
            unsigned int v351 = a1;
            if (v364) {
              (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
            }
          }

          id v369 = sub_72A04(1986291046, 0, *(uint64_t **)(v351 + 144), *(uint64_t **)(v351 + 152));
          sub_31821C();
          if ((_DWORD)qword_49DAB8 == 1)
          {
            sub_6DD4();
            v370 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
            int v371 = sub_135A0(v369, 1);
            sub_86550((uint64_t *)buf, v371);
            sub_32C8C(*(void **)&buf[8]);
            if (v370) {
              (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
            }
          }

          if (v811)
          {
            if (!*(void *)sub_138E8(2))
            {
              if (*((_DWORD *)theArray[0] + 2))
              {
                v372 = sub_138E8(2);
                int v373 = sub_8C7D4(5, *(void **)v372, *(void *)(v372 + 8));
                uint64_t v374 = (void *)objc_claimAutoreleasedReturnValue(v373);
                unsigned int v375 = v374;
                if (v374)
                {
                  int v376 = v374;
                  if (os_log_type_enabled(v376, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 6589;
                    *(_WORD *)&_BYTE buf[18] = 2080;
                    *(void *)&buf[20] = "internal update";
                    _os_log_impl( &dword_0,  v376,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Route configuration change completed [ %s ]. Route description: Redundant.",  buf,  0x1Cu);
                  }
                }
              }

              else
              {
                v524 = sub_138E8(2);
                unsigned int v525 = sub_8C7D4(3, *(void **)v524, *(void *)(v524 + 8));
                int v526 = (void *)objc_claimAutoreleasedReturnValue(v525);
                unsigned int v375 = v526;
                if (v526)
                {
                  v527 = v526;
                  if (os_log_type_enabled(v527, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 6585;
                    *(_WORD *)&_BYTE buf[18] = 2080;
                    *(void *)&buf[20] = "internal update";
                    _os_log_impl( &dword_0,  v527,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description: Redundant.",  buf,  0x1Cu);
                  }
                }
              }

LABEL_1007:
              if (*((_DWORD *)theArray[0] + 2) != 1)
              {
                sub_6DD4();
                uint64_t v528 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
                sub_26E06C(a1);
                if (v528) {
                  (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
                }
              }

              *((_DWORD *)a6 + 6) = 8;
              if (v866.__r_.__value_.__l.__size_)
              {
                CFRetain((CFTypeRef)v866.__r_.__value_.__l.__size_);
                id v529 = v866.__r_.__value_.__l.__size_;
              }

              else
              {
                id v529 = 0LL;
              }

              **((void **)a6 + 2) = v529;
              v530 = *(id *)sub_138E8(2);
              int v531 = v530;
              if (v530)
              {
                v532 = (os_log_s *)v530;
                if (os_log_type_enabled(v532, OS_LOG_TYPE_DEBUG))
                {
                  sub_151D60((std::string *)__p, (const __CFDictionary *)v866.__r_.__value_.__l.__size_);
                  unsigned int v533 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6638;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v533;
                  _os_log_impl(&dword_0, v532, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change dictionary: %s", buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
              }

              kdebug_trace(721684516LL, 0LL, 0LL, 0LL, 0LL);
              sub_13850((uint64_t)&v866.__r_.__value_.__l.__size_);
              sub_32C8C(*(void **)&v871[8]);
              int v534 = theArray[0];
              theArray[0] = 0LL;
              if (!v534) {
                goto LABEL_1026;
              }
              v535 = *(void (**)(void))(*(void *)v534 + 8LL);
LABEL_1025:
              v535();
              goto LABEL_1026;
            }
          }

          else if (*((_DWORD *)theArray[0] + 2) == 1)
          {
            v377 = sub_138E8(2);
            v378 = sub_8C7D4(1, *(void **)v377, *(void *)(v377 + 8));
            v379 = (void *)objc_claimAutoreleasedReturnValue(v378);
            uint32_t v380 = v379;
            if (v379)
            {
              int v381 = v379;
              if (os_log_type_enabled(v381, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6574;
                _os_log_impl( &dword_0,  v381,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Logic Error: An internal update labeled kWillNotReconfigureRoutes effected a non-redundant route change.",  buf,  0x12u);
              }
            }
          }

          id v382 = (const __CFDictionary *)v866.__r_.__value_.__l.__size_;
          sub_7D084(v825, "  ");
          sub_1533B4((uint64_t *)__p, v382, 2, (const void **)v825);
          if (v826 < 0) {
            operator delete(v825[0]);
          }
          unsigned int v383 = *(id *)sub_138E8(2);
          int v384 = v383;
          if (v383)
          {
            uint64_t v385 = (os_log_s *)v383;
            if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6578;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = "internal update";
              _os_log_impl( &dword_0,  v385,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description:",  buf,  0x1Cu);
            }
          }

          for (uint64_t i = *(void *)&__p[8]; (_BYTE *)i != __p; uint64_t i = *(void *)(i + 8))
          {
            v387 = *(id *)sub_138E8(2);
            v388 = v387;
            if (v387)
            {
              int v389 = (os_log_s *)v387;
              if (os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT))
              {
                id v390 = (void *)(i + 16);
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6578;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v390;
                _os_log_impl(&dword_0, v389, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
              }
            }
          }

          sub_1532B4(__p);
          sub_2590B8(a1);
          if (!v811)
          {
            sub_26C278((uint64_t)__p, a1);
            unsigned int v391 = *(unsigned int *)__p;
            sub_13408((uint64_t)&v866.__r_.__value_.__l.__size_, @"siri input source", *(int *)__p);
            int v392 = *(id *)sub_138E8(2);
            int v393 = v392;
            if (v392)
            {
              uint64_t v394 = (os_log_s *)v392;
              if (os_log_type_enabled(v394, OS_LOG_TYPE_DEFAULT))
              {
                sub_2CA1C(&__dst, v391);
                id v395 = v869 >= 0 ? &__dst : (__int128 *)__dst;
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6600;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v395;
                _os_log_impl(&dword_0, v394, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source: %s.", buf, 0x1Cu);
                if (SHIBYTE(v869) < 0) {
                  operator delete((void *)__dst);
                }
              }
            }

            if ((_DWORD)v391 == 1936679529 || (_DWORD)v391 == 1936024681)
            {
              if ((__p[31] & 0x80000000) != 0)
              {
                sub_24054(&__dst, *(void **)&__p[8], *(unint64_t *)&__p[16]);
              }

              else
              {
                __dst = *(_OWORD *)&__p[8];
                id v869 = *(void *)&__p[24];
              }

              id v454 = HIBYTE(v869);
              unsigned int v455 = HIBYTE(v869);
              if (v869 < 0) {
                id v454 = *((void *)&__dst + 1);
              }
              if (!v454)
              {
                int v456 = sub_138E8(13);
                v457 = sub_8C7D4(1, *(void **)v456, *(void *)(v456 + 8));
                uint64_t v458 = (void *)objc_claimAutoreleasedReturnValue(v457);
                id v459 = v458;
                if (v458)
                {
                  v460 = v458;
                  if (os_log_type_enabled(v460, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 6606;
                    _os_log_impl( &dword_0,  v460,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid UUID for out of band speech input device",  buf,  0x12u);
                  }
                }

                unsigned int v455 = HIBYTE(v869);
              }

              if (v455 >= 0) {
                p_dst = (char *)&__dst;
              }
              else {
                p_dst = (char *)__dst;
              }
              sub_1A3240((uint64_t)&v866.__r_.__value_.__l.__size_, @"siri input source UUID", p_dst);
              id v462 = *(id *)sub_138E8(2);
              v463 = v462;
              if (v462)
              {
                uint64_t v464 = (os_log_s *)v462;
                if (os_log_type_enabled(v464, OS_LOG_TYPE_DEFAULT))
                {
                  id v465 = &__dst;
                  if (v869 < 0) {
                    id v465 = (__int128 *)__dst;
                  }
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6609;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v465;
                  _os_log_impl(&dword_0, v464, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source UUID: %s.", buf, 0x1Cu);
                }
              }

              if (SHIBYTE(v869) < 0) {
                operator delete((void *)__dst);
              }
            }

            sub_6DD4();
            v466 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
            sub_E5784(v824, *(void *)(a1 + 216) + 8LL);
            sub_E57D8((uint64_t)buf, a1 + 224, (uint64_t)v824, *(unsigned int *)(a1 + 492), a1 + 440);
            sub_26D1F4(a1, v808, *(unint64_t *)buf, *(uint64_t *)&buf[8], *(_DWORD *)(a1 + 400) != 0);
            sub_32C8C(*(void **)&buf[24]);
            if (v824[16]) {
              sub_13850((uint64_t)v824);
            }
            uint64_t v467 = *(void *)(a1 + 144);
            id v468 = *(void *)(a1 + 152);
            while (v467 != v468)
            {
              if (*(void *)v467) {
                sub_C69DC(*(void *)(*(void *)v467 + 1008LL), *(_BYTE *)(a1 + 488));
              }
              v467 += 8LL;
            }

            if (v466) {
              (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
            }
            if ((__p[31] & 0x80000000) != 0) {
              operator delete(*(void **)&__p[8]);
            }
          }

          goto LABEL_1007;
        }

        id v673 = sub_138E8(13);
        v674 = sub_8C7D4(1, *(void **)v673, *(void *)(v673 + 8));
        int v675 = (os_log_s *)objc_claimAutoreleasedReturnValue(v674);
        int v662 = v675;
        if (v675 && os_log_type_enabled(v675, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6436;
          _os_log_impl( &dword_0,  v662,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      else
      {
        int v659 = sub_138E8(13);
        v660 = sub_8C7D4(1, *(void **)v659, *(void *)(v659 + 8));
        unsigned int v661 = (os_log_s *)objc_claimAutoreleasedReturnValue(v660);
        int v662 = v661;
        if (v661 && os_log_type_enabled(v661, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6435;
          _os_log_impl( &dword_0,  v662,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      v676 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v676, "Precondition failure.");
    }

    if (v16 != 1920230246)
    {
      if (v16 == 1920426613)
      {
        if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) == (_DWORD)a5)
        {
          *(_OWORD *)(a1 + 200) = *(_OWORD *)a6;
          goto LABEL_1026;
        }

        v583 = sub_138E8(13);
        v551 = 561211770;
        uint64_t v584 = sub_8C7D4(1, *(void **)v583, *(void *)(v583 + 8));
        id v585 = (void *)objc_claimAutoreleasedReturnValue(v584);
        if (v585)
        {
          uint64_t v552 = v585;
          if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
          {
            *(void *)v871 = *(void *)a2;
            *(_DWORD *)&v871[8] = a2[2];
            sub_613AC((uint64_t)__p, (unsigned int *)v871);
            v586 = __p[23];
            int v587 = *(_BYTE **)__p;
            v588 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            unsigned int v589 = __p;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v586 < 0) {
              unsigned int v589 = v587;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6700;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v589;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&buf[30] = a5;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v588;
            int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_1132;
          }

          goto LABEL_1135;
        }

        goto LABEL_1061;
      }

      goto LABEL_203;
    }

    if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      id v609 = sub_138E8(13);
      v551 = 561211770;
      v610 = sub_8C7D4(1, *(void **)v609, *(void *)(v609 + 8));
      int v611 = (void *)objc_claimAutoreleasedReturnValue(v610);
      if (v611)
      {
        uint64_t v552 = v611;
        if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
        {
          *(void *)v871 = *(void *)a2;
          *(_DWORD *)&v871[8] = a2[2];
          sub_613AC((uint64_t)__p, (unsigned int *)v871);
          v612 = __p[23];
          unsigned int v613 = *(_BYTE **)__p;
          int v614 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v615 = __p;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v612 < 0) {
            v615 = v613;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6707;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v615;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = a5;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v614;
          int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_1132;
        }

        goto LABEL_1135;
      }

      goto LABEL_1061;
    }

    *(_OWORD *)&v866.__r_.__value_.__r.__words[1] = 0uLL;
    v866.__r_.__value_.__r.__words[0] = (std::string::size_type)&v866.__r_.__value_.__l.__size_;
    uint64_t v67 = (uint64_t **)(a1 + 144);
    v809 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
    sub_31821C();
    if ((_DWORD)qword_49DAB8 == 1)
    {
      if (!v809)
      {
        v756 = sub_138E8(13);
        v757 = sub_8C7D4(1, *(void **)v756, *(void *)(v756 + 8));
        v758 = (os_log_s *)objc_claimAutoreleasedReturnValue(v757);
        uint64_t v759 = v758;
        if (v758 && os_log_type_enabled(v758, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6714;
          _os_log_impl( &dword_0,  v759,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [defaultDevice is NULL]: No default VAD could be found!",  buf,  0x12u);
        }

        id v760 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v760, "No default VAD could be found!");
      }

      sub_6DD4();
      unsigned int v68 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
      unsigned int v69 = (std::string *)sub_135A0(v809, 1);
      if (&v866 != v69) {
        sub_52A24((uint64_t)&v866, v69->__r_.__value_.__l.__data_, &v69->__r_.__value_.__l.__size_);
      }
      if (v68) {
        (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
      }
    }

    uint64_t v852 = *(CFDictionaryRef *)a6;
    LOWORD(v853) = 0;
    std::string theDict = v852;
    LOWORD(cf) = 256;
    CFTypeRef v70 = atomic_load((unsigned __int8 *)&qword_48E970);
    if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_48E970))
    {
      sub_14F228();
      __cxa_guard_release(&qword_48E970);
    }

    memset(__p, 0, 24);
    sub_8DC78( __p,  (__int128 *)qword_48E958,  qword_48E960,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)qword_48E960 - qword_48E958) >> 3));
    unsigned int v71 = atomic_load((unsigned __int8 *)&qword_48E950);
    if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_48E950))
    {
      sub_14F0A4();
      __cxa_guard_release(&qword_48E950);
    }

    memset(v871, 0, 24);
    sub_8DC78( v871,  (__int128 *)qword_48E938,  qword_48E940,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)qword_48E940 - qword_48E938) >> 3));
    if (*(void *)__p != *(void *)&__p[8] || *(void *)v871 != *(void *)&v871[8])
    {
      *(void *)&__dst = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      WORD4(__dst) = 257;
      theArray[0] = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      LOWORD(theArray[1]) = 257;
      CFTypeRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      LOWORD(v857) = 257;
      unsigned int v72 = *(void *)__p;
      unsigned int v73 = *(void *)&__p[8];
      while (1)
      {
        if (v72 == v73)
        {
          if (theArray[0])
          {
            int v149 = (os_log_t *)sub_138E8(2);
            uint64_t v150 = *v149;
            if (*v149)
            {
              if (os_log_type_enabled(*v149, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1064;
                *(_WORD *)&_BYTE buf[18] = 2112;
                *(CFMutableArrayRef *)&buf[20] = theArray[0];
                _os_log_impl( &dword_0,  v150,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Persistent fake input ports = %@",  buf,  0x1Cu);
              }
            }
          }

          unsigned int v151 = *(void *)v871;
          int v152 = *(void *)&v871[8];
LABEL_250:
          if (v151 == v152)
          {
            if (Mutable)
            {
              unsigned int v156 = (os_log_t *)sub_138E8(2);
              int v157 = *v156;
              if (*v156)
              {
                if (os_log_type_enabled(*v156, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1070;
                  *(_WORD *)&_BYTE buf[18] = 2112;
                  *(void *)&buf[20] = Mutable;
                  _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Persistent fake output ports = %@",  buf,  0x1Cu);
                }
              }
            }

            int v158 = (__CFDictionary *)__dst;
            if (BYTE9(__dst))
            {
              if (!theArray[0]
                || !(void)__dst
                || (CFDictionarySetValue((CFMutableDictionaryRef)__dst, @"input port UIDs", theArray[0]),
                    int v158 = (__CFDictionary *)__dst,
                    BYTE9(__dst)))
              {
                if (Mutable && v158)
                {
                  CFDictionarySetValue(v158, @"output port UIDs", Mutable);
                  int v158 = (__CFDictionary *)__dst;
                }
              }
            }

            if (v158 && theDict) {
              CFDictionarySetValue(theDict, @"persistent route", v158);
            }
            sub_13818((uint64_t)&Mutable);
            sub_13818((uint64_t)theArray);
            sub_13850((uint64_t)&__dst);
            break;
          }

          if (*(char *)(v151 + 23) < 0)
          {
            uint64_t v154 = *(const UInt8 **)v151;
            if (*(void *)v151)
            {
              unint64_t v153 = *(void *)(v151 + 8);
              goto LABEL_255;
            }

            uint64_t v155 = 0LL;
            *(void *)buf = 0LL;
          }

          else
          {
            unint64_t v153 = *(unsigned __int8 *)(v151 + 23);
            uint64_t v154 = (const UInt8 *)v151;
LABEL_255:
            uint64_t v155 = CFStringCreateWithBytes(0LL, v154, v153, 0x8000100u, 0);
            *(void *)buf = v155;
            if (!v155)
            {
              id v569 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v569, "Could not construct");
            }
          }

          if (Mutable && BYTE1(v857)) {
            CFArrayAppendValue(Mutable, v155);
          }
          if (v155) {
            CFRelease(v155);
          }
          v151 += 24LL;
          goto LABEL_250;
        }

        if (*(char *)(v72 + 23) < 0)
        {
          int v75 = *(const UInt8 **)v72;
          if (!*(void *)v72)
          {
            unsigned int v76 = 0LL;
            *(void *)buf = 0LL;
            goto LABEL_122;
          }

          uint64_t v74 = *(void *)(v72 + 8);
        }

        else
        {
          uint64_t v74 = *(unsigned __int8 *)(v72 + 23);
          int v75 = (const UInt8 *)v72;
        }

        unsigned int v76 = CFStringCreateWithBytes(0LL, v75, v74, 0x8000100u, 0);
        *(void *)buf = v76;
        if (!v76)
        {
          uint64_t v568 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v568, "Could not construct");
        }

LABEL_141:
      if (v7 == v9) {
        goto LABEL_168;
      }
      goto LABEL_183;
    }

    if (v7 <= 1886807153)
    {
      if (v7 > 1886216546)
      {
        if (v7 == 1886216547) {
          goto LABEL_168;
        }
        if (v7 == 1886413412) {
          goto LABEL_165;
        }
        int v8 = 1886413426;
      }

      else
      {
        if (v7 == 1869838183) {
          goto LABEL_168;
        }
        if (v7 == 1885434482) {
          goto LABEL_165;
        }
        int v8 = 1885631346;
      }

      goto LABEL_164;
    }

    if (v7 <= 1919773027)
    {
      if (v7 == 1886807154) {
        goto LABEL_165;
      }
      if (v7 == 1902539642) {
        goto LABEL_168;
      }
      int v13 = 1918987632;
    }

    else
    {
      if (v7 > 1920165218)
      {
        if (v7 == 1920165219) {
          goto LABEL_168;
        }
        int v8 = 1934456180;
        goto LABEL_164;
      }

      if (v7 == 1919773028) {
        goto LABEL_168;
      }
      int v13 = 1919774835;
    }

    goto LABEL_146;
  }

  if (v7 <= 1953719147)
  {
    if (v7 > 1936879203)
    {
      if (v7 > 1952997987)
      {
        if (v7 > 1953002092)
        {
          if (v7 == 1953002093) {
            goto LABEL_165;
          }
          unsigned __int16 v11 = 29554;
        }

        else
        {
          if (v7 == 1952997988) {
            goto LABEL_165;
          }
          unsigned __int16 v11 = 25202;
        }

        int v8 = v11 | 0x74680000;
        goto LABEL_164;
      }

      if (v7 == 1936879204) {
        goto LABEL_165;
      }
      if (v7 == 1936946787) {
        goto LABEL_168;
      }
      int v8 = 1937138532;
      goto LABEL_164;
    }

    if (v7 <= 1936876402)
    {
      if (v7 == 1935762281 || v7 == 1935962992) {
        goto LABEL_165;
      }
      int v8 = 1936744803;
      goto LABEL_164;
    }

    if (v7 == 1936876403) {
      goto LABEL_178;
    }
    if (v7 == 1936876644) {
      goto LABEL_165;
    }
    int v13 = 1936878960;
    goto LABEL_146;
  }

  if (v7 <= 1986225265)
  {
    if (v7 > 1970303086)
    {
      if (v7 == 1970303087) {
        goto LABEL_168;
      }
      if (v7 == 1983996971) {
        goto LABEL_165;
      }
      int v8 = 1983997011;
    }

    else
    {
      if (v7 == 1953719148) {
        goto LABEL_165;
      }
      if (v7 == 1969318244) {
        goto LABEL_168;
      }
      int v8 = 1969844082;
    }

    goto LABEL_164;
  }

  if (v7 <= 1986294895)
  {
    if (v7 == 1986225266 || v7 == 1986225268) {
      goto LABEL_165;
    }
    int v13 = 1986225518;
    goto LABEL_146;
  }

  if (v7 <= 2020111982)
  {
    if (v7 == 1986294896) {
      goto LABEL_168;
    }
    int v8 = 1986361444;
    goto LABEL_164;
  }

  if (v7 != 2020111983 && v7 != 2021027692) {
    goto LABEL_183;
  }
  int v26 = a2[1];
  int v27 = 1869968496;
LABEL_174:
  BOOL v23 = v26 == v27;
LABEL_175:
  BOOL v4 = v23;
LABEL_168:
  if (v6) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return v4;
}

    uint64_t v25 = a2->mScope;
    return v25 == 1869968496 || v25 == 1768845428;
  }

  if (mSelector <= 1633970531)
  {
    if (mSelector <= 1633904998)
    {
      if (mSelector != 1165513555)
      {
        if (mSelector != 1633776747)
        {
          int v6 = 25449;
LABEL_108:
          uint64_t v17 = v6 | 0x61630000;
          goto LABEL_118;
        }

              sub_CC160((uint64_t)__p);
            }

            else
            {
              v124 = (os_log_t *)sub_138E8(7);
              uint64_t v125 = *v124;
              if (*v124 && os_log_type_enabled(*v124, OS_LOG_TYPE_INFO))
              {
                uint64_t v126 = *(_DWORD *)v93;
                char v127 = *(void *)(v93 + 8);
                buf[0] = 136315906;
                *(void *)&buf[1] = "DeviceManager.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 304;
                HIWORD(buf[4]) = 1024;
                buf[5] = v126;
                LOWORD(buf[6]) = 2112;
                *(void *)((char *)&buf[6] + 2) = v127;
                _os_log_impl( &dword_0,  v125,  OS_LOG_TYPE_INFO,  "%25s:%-5d PhysicalDevice to add could not be created. Skipping. ID: %u; UID: %@.",
                  (uint8_t *)buf,
                  0x22u);
              }
            }

            char v131 = v168;
            if (v168)
            {
              signed int v132 = (unint64_t *)&v168->__shared_owners_;
              do
                int v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
          }

          else
          {
            char v113 = (os_log_t *)sub_138E8(7);
            uint64_t v114 = *v113;
            if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "DeviceManager.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 274;
              _os_log_impl( &dword_0,  v114,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PhysicalDevice to add already exists in the DeviceManager database",  (uint8_t *)buf,  0x12u);
            }
          }

          sub_EAB10(&v157);
          v93 += 16LL;
          if (v93 - *v92 == 4096)
          {
            unsigned int v134 = v92[1];
            ++v92;
            unsigned int v93 = v134;
          }
        }
      }

      if (*(void *)&v171[10])
      {
        unsigned int v151 = __cxa_allocate_exception(0x58uLL);
        sub_E9720((uint64_t)buf, v171);
        sub_E99F0((uint64_t)v151, buf);
      }

      sub_E9064((unsigned __int8 *)&v164);
      unsigned int v135 = v171;
    }

    sub_E8E38(v135);
    sub_E8E38(v153);
    sub_E8ECC((uint64_t)&v154);
    if (v152) {
      (*(void (**)(uint64_t *))(*a3 + 24))(a3);
    }
  }

  else
  {
    unsigned int v84 = (os_log_t *)sub_138E8(7);
    uint64_t v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "DeviceManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 255;
      _os_log_impl(&dword_0, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d clientData is NULL", (uint8_t *)buf, 0x12u);
    }
  }

      sub_32C38((uint64_t **)(a1 + 224), (uint64_t)v93, v94, v90);
      unsigned int v95 = (void *)v70[1];
      if (v95)
      {
        do
        {
          unsigned int v96 = v95;
          unsigned int v95 = (void *)*v95;
        }

        while (v95);
      }

      else
      {
        do
        {
          unsigned int v96 = (void *)v70[2];
          unsigned int v84 = *v96 == (void)v70;
          CFTypeRef v70 = v96;
        }

        while (!v84);
      }

      CFTypeRef v70 = v96;
    }

    while (v96 != v71);
  }

  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 200);
}

void sub_1A96C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A9D4(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  uint64_t v4 = 0LL;
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1718843938)
  {
    if (mSelector > 1934456179)
    {
      if (mSelector <= 1952997987)
      {
        if (mSelector > 1936744802)
        {
          if (mSelector > 1936879203)
          {
            if (mSelector != 1936879204)
            {
              if (mSelector == 1937138532) {
                goto LABEL_150;
              }
              int v7 = 1937204590;
              goto LABEL_149;
            }
          }

          else
          {
            if (mSelector == 1936744803) {
              return 1LL;
            }
            if (mSelector == 1936876403) {
              goto LABEL_150;
            }
            if (mSelector != 1936876644) {
              return v4;
            }
          }

          return sub_AAADC(a1, a2);
        }

        if (mSelector > 1935763059)
        {
          if (mSelector != 1935763060 && mSelector != 1935959154)
          {
            if (mSelector == 1935962992) {
              return sub_AAC7C(a1);
            }
            return v4;
          }

          goto LABEL_133;
        }

        if (mSelector == 1934456180) {
          goto LABEL_150;
        }
        int v7 = 1935762281;
        goto LABEL_149;
      }

      if (mSelector > 1983996970)
      {
        if (mSelector <= 1986225267)
        {
          if (mSelector == 1983996971 || mSelector == 1983997011) {
            goto LABEL_133;
          }
          int v7 = 1986225266;
          goto LABEL_149;
        }

        if (mSelector == 1986225268) {
          goto LABEL_150;
        }
        if (mSelector != 1986361444)
        {
          int v7 = 2004053366;
          goto LABEL_149;
        }

        uint64_t v4 = sub_AAD28(a1);
        if ((sub_7531C() & 1) == 0 && !(_DWORD)v4) {
          return v4;
        }
        unsigned __int16 v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352LL);
        uint64_t v19 = a1;
        uint64_t v20 = 1818521197LL;
        uint64_t v21 = 40LL;
      }

      else
      {
        if (mSelector <= 1953002353)
        {
          if (mSelector == 1952997988)
          {
            AudioObjectPropertyScope mScope = a2->mScope;
            p_AudioObjectPropertyScope mScope = (int *)&a2->mScope;
            if (mScope == 1869968496)
            {
              if ((sub_1CB4A0() & 1) != 0) {
                return 1LL;
              }
              *(_DWORD *)inAddress = 1416118903;
              return sub_38C448((int *)inAddress, p_mScope, (void *)(a1 + 184));
            }
          }

          else
          {
            if (mSelector != 1952998002)
            {
              int v7 = 1953002093;
              goto LABEL_149;
            }

            AudioObjectPropertyScope v30 = a2->mScope;
            int v29 = (int *)&a2->mScope;
            if (v30 == 1869968496)
            {
              if ((sub_1CB4A0() & 1) != 0) {
                return 1LL;
              }
              *(_DWORD *)inAddress = 1416118898;
              return sub_38C448((int *)inAddress, v29, (void *)(a1 + 184));
            }
          }

          return 0LL;
        }

        if (mSelector == 1953002354) {
          goto LABEL_150;
        }
        if (mSelector == 1953719148)
        {
          if (a2->mScope == 1869968496)
          {
            sub_9D988((uint64_t *)inAddress, (void *)(a1 + 184), "", 810);
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 376LL))( a1,  1987013737LL,  64001LL,  0LL,  1LL) & 1) != 0)
            {
              uint64_t v4 = 1LL;
LABEL_178:
              sub_1BB88((uint64_t *)inAddress);
              return v4;
            }

            uint64_t v33 = *(void *)&inAddress[8];
            if (*(_BYTE **)&inAddress[8] != inAddress)
            {
              do
              {
                uint64_t v34 = *(void *)(v33 + 16);
                uint64_t v38 = 0x6F75747054547323LL;
                int v39 = 0;
                uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v34 + 16LL))(v34, &v38);
                if ((v4 & 1) != 0) {
                  break;
                }
                uint64_t v33 = *(void *)(v33 + 8);
              }

              while ((_BYTE *)v33 != inAddress);
              goto LABEL_178;
            }

LABEL_177:
            uint64_t v4 = 0LL;
            goto LABEL_178;
          }

          return 0LL;
        }

        if (mSelector != 1969844082) {
          return v4;
        }
        if (a2->mScope != 1768845428) {
          return 0LL;
        }
        uint64_t v4 = 0LL;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 376LL))( a1,  1685287015LL,  1818980210LL,  0LL,  0LL)) {
          return v4;
        }
        unsigned __int16 v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352LL);
        uint64_t v19 = a1;
        uint64_t v20 = 1685287015LL;
        uint64_t v21 = 1969844082LL;
      }

      return v18(v19, v20, v21, 0LL);
    }

    if (mSelector <= 1869574755)
    {
      if (mSelector <= 1769302371)
      {
        if (mSelector > 1735682403)
        {
          if (mSelector == 1735682404) {
            return 1LL;
          }
          if (mSelector != 1752135523)
          {
            if (mSelector != 1752657012) {
              return v4;
            }
            *(_DWORD *)inAddress = 1819569763;
            *(void *)&inAddress[4] = *(void *)&a2->mScope;
            int HasProperty = AudioObjectHasProperty(*(_DWORD *)(a1 + 128), (const AudioObjectPropertyAddress *)inAddress);
            return HasProperty != 0;
          }

          goto LABEL_133;
        }

        if (mSelector == 1718843939) {
          goto LABEL_133;
        }
        int v16 = 1735354734;
      }

      else
      {
        if (mSelector <= 1852012898)
        {
          if (mSelector == 1769302372) {
            goto LABEL_133;
          }
          if (mSelector == 1818326127) {
            goto LABEL_150;
          }
          int v8 = 1819569763;
LABEL_28:
          if (mSelector != v8) {
            return v4;
          }
          goto LABEL_141;
        }

        if (mSelector == 1852012899 || mSelector == 1853059619) {
          goto LABEL_133;
        }
        int v16 = 1853059700;
      }

      sub_2FF6BC((uint64_t)a1, a3, v13, v14, v10, a6, 0LL);
      return;
    case 9:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_7D084(buf, a3);
      if (buf[23] >= 0) {
        unsigned int v72 = buf;
      }
      else {
        unsigned int v72 = *(const char **)buf;
      }
      sub_2FE0C4(a1, v72, 0, 0, (uint64_t)v13, 0x6D6F7A73u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      buf[0] = 0;
      buf[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v13, a9, 1, (uint64_t)buf);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0x100000002LL, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_308E2C(a1, buf, 0, (uint64_t)v13, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_187;
    case 10:
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 1u, 0x100000002LL, 0x100000004LL);
      goto LABEL_202;
    case 11:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_7D084(buf, a3);
      if (buf[23] >= 0) {
        unsigned int v73 = buf;
      }
      else {
        unsigned int v73 = *(const char **)buf;
      }
      sub_2FE0C4(a1, v73, 0, 0, (uint64_t)v13, 0x6D6F7A73u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      buf[0] = 0;
      buf[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v13, a9, 1, (uint64_t)buf);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_201;
    case 12:
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 2u, 0x100000002LL, 0x100000004LL);
      goto LABEL_202;
    case 13:
      sub_2FF19C(a1, a3, (uint64_t)v13);
      uint64_t v58 = atomic_load((unsigned __int8 *)&qword_49D758);
      if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_49D758))
      {
        sub_30B530(&qword_49D748);
        __cxa_guard_release(&qword_49D758);
      }

      size_t v59 = qword_49D748;
      __int16 v60 = (std::__shared_weak_count *)unk_49D750;
      *(void *)buf = qword_49D748;
      *(void *)&buf[8] = unk_49D750;
      if (unk_49D750)
      {
        unsigned int v61 = (unint64_t *)(unk_49D750 + 8LL);
        do
          uint64_t v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }

      sub_143208(a1, v59, (uint64_t)v60);
      if (v60)
      {
        unsigned int v63 = (unint64_t *)&v60->__shared_owners_;
        do
          unsigned int v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }

      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7662656Eu);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x746D7374u);
      if (v11 == 2)
      {
        sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x76727132u);
        unsigned int v76 = qword_49D570;
        unsigned int v66 = *(std::__shared_weak_count **)algn_49D578;
        *(void *)buf = qword_49D570;
        *(void *)&buf[8] = *(void *)algn_49D578;
        if (*(void *)algn_49D578)
        {
          unsigned int v77 = (unint64_t *)(*(void *)algn_49D578 + 8LL);
          do
            unsigned int v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }

        sub_143208(a1, v76, (uint64_t)v66);
        if (!v66) {
          goto LABEL_199;
        }
        uint64_t v79 = (unint64_t *)&v66->__shared_owners_;
        do
          CFTypeRef v70 = __ldaxr(v79);
        while (__stlxr(v70 - 1, v79));
      }

      else
      {
        if (v11 != 1)
        {
          unsigned int v86 = (os_log_t *)sub_138E8(13);
          unsigned int v87 = *v86;
          if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 397;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = v11;
            _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): invalid volume strategy: %d",  buf,  0x18u);
          }

          uint64_t v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v85, "invalid volume strategy: %d");
LABEL_215:
        }

        sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x766F6C69u);
        uint64_t v65 = qword_49D510;
        unsigned int v66 = *(std::__shared_weak_count **)algn_49D518;
        *(void *)buf = qword_49D510;
        *(void *)&buf[8] = *(void *)algn_49D518;
        if (*(void *)algn_49D518)
        {
          uint64_t v67 = (unint64_t *)(*(void *)algn_49D518 + 8LL);
          do
            unsigned int v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }

        sub_143208(a1, v65, (uint64_t)v66);
        if (!v66)
        {
LABEL_199:
          buf[0] = 0;
          buf[8] = 0;
          sub_2FEDA8(a1, a3, 0, (uint64_t)v13, a9, 1, (uint64_t)buf);
          sub_2FE0C4(a1, a3, 1, 0, (uint64_t)v13, 0x746D7374u);
          sub_7D084(buf, a3);
          sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
LABEL_201:
          sub_2FF6BC((uint64_t)a1, a3, v13, v14, v10, a6, 0LL);
          sub_7D084(buf, a3);
          sub_308980(a1, buf, (uint64_t)v13, 2u, 0x100000002LL, 0x100000004LL);
LABEL_202:
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          return;
        }

        unsigned int v69 = (unint64_t *)&v66->__shared_owners_;
        do
          CFTypeRef v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
      }

      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }

      goto LABEL_199;
    case 22:
    case 23:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7366636Cu);
      if (v16 == 23) {
        goto LABEL_94;
      }
      goto LABEL_95;
    case 25:
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0LL, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_308E2C(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x63646C79u);
      __int16 v57 = 1;
      goto LABEL_176;
    case 26:
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0LL, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x746D7374u);
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_177;
    case 27:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0x100000002LL, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_187;
    case 28:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0x100000002LL, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_308E2C(a1, buf, 0, (uint64_t)v13, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_187;
    case 29:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7366636Cu);
      sub_2FF6BC((uint64_t)a1, a3, v13, v14, v10, a6, 0LL);
      sub_2FE0C4(a1, a3, 1, 0, (uint64_t)v13, 0x7366636Cu);
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 2u, 0x100000002LL, 0x100000004LL);
      goto LABEL_202;
    case 30:
    case 31:
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7366636Cu);
      if (v16 != 31) {
        goto LABEL_95;
      }
LABEL_94:
      sub_3090EC(a1, a3, v11 == 1, (uint64_t)v13);
LABEL_95:
      sub_2FF6BC((uint64_t)a1, a3, v13, v14, v10, a6, 0LL);
      sub_2FE0C4(a1, a3, 1, 0, (uint64_t)v13, 0x7366636Cu);
      return;
    case 32:
    case 33:
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0LL, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x63646C79u);
      if (v16 == 33) {
        goto LABEL_177;
      }
LABEL_101:
      __int16 v57 = v11 == 1;
      goto LABEL_176;
    case 34:
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0x100000002LL, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0x100000004LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_187:
      sub_2FF6BC((uint64_t)a1, a3, v13, v14, v10, a6, 0x100000004LL);
      return;
    case 35:
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7366636Cu);
      sub_2FF6BC((uint64_t)a1, a3, v13, v14, v10, a6, 0LL);
      sub_2FE0C4(a1, a3, 1, 0, (uint64_t)v13, 0x7366636Cu);
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 2u, 0x100000002LL, 0x100000004LL);
      goto LABEL_202;
    default:
      uint64_t v74 = (os_log_t *)sub_138E8(20);
      int v75 = *v74;
      if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2324;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v16;
        _os_log_impl(&dword_0, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring invalid SpeakerDSPChainType: %d", buf, 0x18u);
      }

      return;
  }

LABEL_132:
      if (mSelector != v16) {
        return v4;
      }
      goto LABEL_133;
    }

    if (mSelector <= 1885631345)
    {
      if (mSelector > 1869838182)
      {
        if (mSelector == 1869838183 || mSelector == 1870030194) {
          goto LABEL_133;
        }
        int v7 = 1885434482;
        goto LABEL_149;
      }

      if (mSelector != 1869574756 && mSelector != 1869575794) {
        return v4;
      }
      if (a2->mScope == 1768845428) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 376LL))( a1,  1685287015LL,  1818980210LL,  0LL,  0LL);
      }
    }

    else
    {
      if (mSelector > 1886807153)
      {
        if (mSelector == 1886807154) {
          goto LABEL_150;
        }
        if (mSelector == 1902539642) {
          goto LABEL_133;
        }
        int v13 = 1919773028;
        goto LABEL_100;
      }

      switch(mSelector)
      {
        case 1885631346:
          goto LABEL_150;
        case 1886413412:
          AudioObjectPropertyScope v28 = a2->mScope;
          int v27 = (int *)&a2->mScope;
          if (v28 == 1869968496)
          {
            *(_DWORD *)inAddress = 1347437175;
            return sub_38C448((int *)inAddress, v27, (void *)(a1 + 184));
          }

          break;
        case 1886413426:
          AudioObjectPropertyScope v10 = a2->mScope;
          int v9 = (int *)&a2->mScope;
          if (v10 == 1869968496)
          {
            *(_DWORD *)inAddress = 1347437170;
            return sub_38C448((int *)inAddress, v9, (void *)(a1 + 184));
          }

          break;
        default:
          return v4;
      }
    }

    return 0LL;
  }

  if (mSelector > 1668576113)
  {
    if (mSelector > 1685087595)
    {
      if (mSelector <= 1685287011)
      {
        if (mSelector == 1685087596) {
          goto LABEL_150;
        }
        int v13 = 1685287011;
        goto LABEL_100;
      }

      if (mSelector > 1685483629)
      {
        if (mSelector == 1685483630 || mSelector == 1718383987) {
          goto LABEL_150;
        }
        int v16 = 1718839674;
        goto LABEL_132;
      }

      if (mSelector == 1685287012) {
        goto LABEL_133;
      }
      if (mSelector == 1685287523) {
        goto LABEL_150;
      }
      int v7 = 1685288051;
    }

    else
    {
      if (mSelector > 1684370275)
      {
        if (mSelector <= 1684500588)
        {
          if (mSelector == 1684370276) {
            goto LABEL_150;
          }
          if (mSelector == 1684498541) {
            goto LABEL_141;
          }
          int v8 = 1684498544;
          goto LABEL_28;
        }

        if (mSelector == 1684500589 || mSelector == 1684500594) {
          goto LABEL_141;
        }
        int v16 = 1684893796;
        goto LABEL_132;
      }

      if (mSelector <= 1684107363)
      {
        if (mSelector == 1668576114) {
          goto LABEL_150;
        }
        int v7 = 1684103987;
      }

      else
      {
        if (mSelector == 1684107364) {
          goto LABEL_133;
        }
        if (mSelector == 1684304756) {
          goto LABEL_150;
        }
        int v7 = 1684365924;
      }
    }

      int v16 = (void *)a1[116];
      if (!v16)
      {
        AudioObjectPropertyScope v30 = (os_log_t *)sub_138E8(13);
        uint64_t v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 2172;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
        }

        id v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v32, "Precondition failure.");
      }

      int v17 = 6LL;
      goto LABEL_151;
    }

    if (v10 <= 1685287010)
    {
      if (v10 <= 1685087595)
      {
        if (v10 == 1684500594 || v10 == 1684893796) {
          goto LABEL_150;
        }
        int v13 = 1685025633;
        goto LABEL_126;
      }

      unsigned __int16 v11 = 1685087596;
      goto LABEL_149;
    }

    if (v10 <= 1685288050)
    {
      int v12 = 1685287523;
      goto LABEL_145;
    }

    if (v10 == 1685288051) {
      goto LABEL_146;
    }
    if (v10 == 1685483630) {
      goto LABEL_153;
    }
    uint64_t v14 = 1685484390;
LABEL_131:
    if (v10 != v14) {
      goto LABEL_165;
    }
    goto LABEL_132;
  }

  if (v10 <= 1935762280)
  {
    if (v10 <= 1869838182)
    {
      if (v10 <= 1769302371)
      {
        if (v10 > 1719165554)
        {
          if (v10 == 1719165555) {
            goto LABEL_153;
          }
          if (v10 == 1735682404) {
            goto LABEL_159;
          }
          int v13 = 1752657012;
          goto LABEL_126;
        }

        if (v10 != 1701733224)
        {
          if (v10 != 1718383987)
          {
            int v13 = 1718641517;
            goto LABEL_126;
          }

          goto LABEL_146;
        }

        *(void *)&v35.int mSelector = 0x676C6F6270616373LL;
        v35.mElement = 0;
        sub_B7D88((CFArrayRef)__p, (uint64_t)a1, &v35);
LABEL_163:
        uint64_t v21 = *(void **)__p;
        int v8 = (*(_DWORD *)&__p[8] - *(_DWORD *)__p) & 0xFFFFFFFC;
        if (!*(void *)__p) {
          goto LABEL_153;
        }
        goto LABEL_164;
      }

      if (v10 <= 1853059618)
      {
        if (v10 == 1769302372) {
          goto LABEL_153;
        }
        if (v10 == 1818326127) {
          goto LABEL_150;
        }
        int v13 = 1852012899;
        goto LABEL_126;
      }

      if (v10 > 1869574755)
      {
        if (v10 == 1869574756) {
          goto LABEL_150;
        }
        unsigned __int16 v11 = 1869575794;
        goto LABEL_149;
      }

      if (v10 == 1853059619)
      {
        sub_759B8((uint64_t **)__p, a1, a2[1]);
        int v8 = (16 * *(_DWORD *)&__p[16]);
        sub_32C8C(*(void **)&__p[8]);
        goto LABEL_153;
      }

      int v12 = 1853059700;
LABEL_145:
      if (v10 != v12) {
        goto LABEL_165;
      }
      goto LABEL_146;
    }

    if (v10 <= 1886807153)
    {
      if (v10 > 1886216546)
      {
        if (v10 == 1886216547) {
          goto LABEL_153;
        }
        if (v10 == 1886413412) {
          goto LABEL_150;
        }
        unsigned __int16 v11 = 1886413426;
      }

      else
      {
        if (v10 == 1869838183) {
          goto LABEL_146;
        }
        if (v10 == 1885434482) {
          goto LABEL_153;
        }
        unsigned __int16 v11 = 1885631346;
      }

      goto LABEL_149;
    }

    if (v10 <= 1919773027)
    {
      if (v10 == 1886807154) {
        goto LABEL_150;
      }
      if (v10 == 1902539642) {
        goto LABEL_153;
      }
      uint64_t v14 = 1918987632;
    }

    else
    {
      if (v10 > 1920165218)
      {
        if (v10 == 1920165219) {
          goto LABEL_153;
        }
        unsigned __int16 v11 = 1934456180;
        goto LABEL_149;
      }

      if (v10 == 1919773028) {
        goto LABEL_146;
      }
      uint64_t v14 = 1919774835;
    }

    goto LABEL_131;
  }

  if (v10 <= 1953719147)
  {
    if (v10 > 1936879203)
    {
      if (v10 <= 1952997987)
      {
        if (v10 == 1936879204) {
          goto LABEL_150;
        }
        if (v10 == 1936946787) {
          goto LABEL_153;
        }
        unsigned __int16 v11 = 1937138532;
        goto LABEL_149;
      }

      if (v10 <= 1953002092)
      {
        if (v10 != 1952997988)
        {
          unsigned __int16 v11 = 1952998002;
          goto LABEL_149;
        }

        goto LABEL_150;
      }

      if (v10 == 1953002093) {
        goto LABEL_150;
      }
      int v12 = 1953002354;
      goto LABEL_145;
    }

    if (v10 <= 1936876402)
    {
      if (v10 == 1935762281 || v10 == 1935962992) {
        goto LABEL_150;
      }
      unsigned __int16 v11 = 1936744803;
      goto LABEL_149;
    }

    if (v10 == 1936876403) {
      goto LABEL_146;
    }
    if (v10 == 1936876644) {
      goto LABEL_150;
    }
    uint64_t v14 = 1936878960;
    goto LABEL_131;
  }

  if (v10 <= 1986225265)
  {
    if (v10 > 1970303086)
    {
      if (v10 != 1970303087)
      {
        if (v10 != 1983996971)
        {
          unsigned __int16 v11 = 1983997011;
          goto LABEL_149;
        }

        goto LABEL_150;
      }

      goto LABEL_146;
    }

    if (v10 == 1953719148) {
      goto LABEL_150;
    }
    if (v10 == 1969318244) {
      goto LABEL_153;
    }
    unsigned __int16 v11 = 1969844082;
    goto LABEL_149;
  }

  if (v10 <= 1986294895)
  {
    if (v10 == 1986225266) {
      goto LABEL_146;
    }
    if (v10 == 1986225268) {
      goto LABEL_153;
    }
    uint64_t v14 = 1986225518;
    goto LABEL_131;
  }

  if (v10 <= 2020111982)
  {
    if (v10 == 1986294896) {
      goto LABEL_153;
    }
    unsigned __int16 v11 = 1986361444;
    goto LABEL_149;
  }

  if (v10 != 2020111983 && v10 != 2021027692) {
    goto LABEL_165;
  }
  int v8 = 16LL;
LABEL_153:
  if (v9) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return v8;
}

    (*(void (**)(uint64_t))(*(void *)a1 + 552LL))(a1);
    int v75 = *(void **)(a1 + 240);
    for (uint64_t j = *(void **)(a1 + 248); v75 != j; v75 += 2)
      (*(void (**)(void, BOOL))(*(void *)*v75 + 40LL))(*v75, (_DWORD)v59 == 0);
LABEL_134:
    unsigned int v77 = *(void *)(a1 + 112);
    unsigned int v78 = *(void *)(a1 + 88);
    if (v77)
    {
      if (v78)
      {
        *(void *)(a1 + 88) = 0LL;
        *(_DWORD *)&__p[16] = 0;
        *(void *)std::string __p = off_47AFC0;
        *(void *)&__p[8] = 0LL;
        *(void *)&v114[4] = 0LL;
        uint64_t v79 = *(void *)(v77 + 24);
        *(void *)(v77 + 24) = v78;
        if (v79) {
          (*(void (**)(uint64_t))(*(void *)v79 + 8LL))(v79);
        }
        uint64_t v80 = *(void *)&v114[4];
        *(void *)std::string __p = off_47AFC0;
        *(void *)&v114[4] = 0LL;
        if (v80) {
          (*(void (**)(uint64_t))(*(void *)v80 + 8LL))(v80);
        }
        caulk::concurrent::message::~message((caulk::concurrent::message *)__p);
        uint64_t v81 = *(caulk::concurrent::message **)(a1 + 112);
        sub_92104();
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_4A9D88, v81);
        *(void *)(a1 + 112) = 0LL;
      }
    }

    else if (v78)
    {
      int v82 = sub_138E8(16);
      sub_1D71E4( 1,  v82,  (uint64_t)"",  637,  (uint64_t)"",  "AudioIOMonitor is valid, but IOMonitorCloseMsg is null. Not closing capture");
    }

    *(_BYTE *)(a1 + 104) = 0;
    if (v14)
    {
      unsigned int v90 = (os_log_t *)sub_138E8(13);
      uint64_t v91 = *v90;
      if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 646;
        _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (willStopResult): Error calling WillStopIO on physical devices.",  __p,  0x12u);
      }

      LODWORD(v59) = v14;
    }

    else if ((_DWORD)v43)
    {
      unsigned int v92 = (os_log_t *)sub_138E8(13);
      unsigned int v93 = *v92;
      if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 650;
        _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stopResult): Unable to stop IO.",  __p,  0x12u);
      }

      LODWORD(v59) = v43;
    }

    else if ((_DWORD)v59)
    {
      unsigned int v94 = (os_log_t *)sub_138E8(13);
      unsigned int v95 = *v94;
      if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v124, (uint64_t)v59);
        unsigned int v96 = v124.__m_.__opaque[15] >= 0 ? &v124 : (std::mutex *)v124.__m_.__sig;
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 654;
        *(_WORD *)&__p[18] = 2080;
        *(void *)uint64_t v114 = v96;
        _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (isRunningResult): Error waiting to receive kAudioDevicePropertyDeviceIsRunning property notification while stopping I/O proc: %s",  __p,  0x1Cu);
        if (v124.__m_.__opaque[15] < 0) {
          operator delete((void *)v124.__m_.__sig);
        }
      }
    }

    else
    {
      if (!v50) {
        return sub_230740(v102);
      }
      unsigned int v97 = (os_log_t *)sub_138E8(13);
      BOOL v98 = *v97;
      if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 658;
        _os_log_impl( &dword_0,  v98,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (didStopResult): Error calling DidStopIO on physical devices.",  __p,  0x12u);
      }

      LODWORD(v59) = v50;
    }

    unsigned int v99 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v99 = &off_4865A0;
    v99[2] = (_DWORD)v59;
  }

  int v7 = sub_138E8(16);
  int v8 = sub_138E8(31);
  int v9 = 0;
  AudioObjectPropertyScope v10 = 0LL;
  *(void *)std::string __p = 0x100000002LL;
  unsigned __int16 v11 = *(void *)(v7 + 8);
  while (1)
  {
    int v12 = *(int *)&__p[4 * v10];
    int v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    int v9 = 1;
    AudioObjectPropertyScope v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_24;
    }
  }

  if ((v11 & v12) == 0) {
    int v7 = v8;
  }
LABEL_24:
  sub_2CA1C(__p, v103);
  unint64_t v24 = v114[3];
  AudioObjectPropertyScope v25 = *(const char **)__p;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  int v27 = __p;
  if (v24 < 0) {
    int v27 = v25;
  }
  sub_1D71E4(3, v7, (uint64_t)"", 580, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v27, v26);
  if ((v114[3] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  kdebug_trace(553912349LL, v103, 0LL, 0LL, 0LL);
  if (v103 == 1) {
    AudioObjectPropertyScope v28 = 0LL;
  }
  else {
    AudioObjectPropertyScope v28 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
  }
  int v29 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v28);
  kdebug_trace(553912350LL, v103, 0LL, 0LL, 0LL);
  if ((_DWORD)v29)
  {
    AudioObjectPropertyScope v30 = sub_138E8(16);
    sub_2CA1C(__p, v29);
    uint64_t v31 = v114[3];
    id v32 = *(const char **)__p;
    sub_23FE8((uint64_t)&v124, (os_unfair_lock_t)(a1 + 8));
    uint64_t v33 = __p;
    if (v31 < 0) {
      uint64_t v33 = v32;
    }
    if (v124.__m_.__opaque[15] >= 0) {
      uint64_t v34 = (const char *)&v124;
    }
    else {
      uint64_t v34 = (const char *)v124.__m_.__sig;
    }
    sub_1D71E4(1, v30, (uint64_t)"", 585, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v33, v34);
    if (v124.__m_.__opaque[15] < 0) {
      operator delete((void *)v124.__m_.__sig);
    }
    if ((v114[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v35 = (os_log_t *)sub_138E8(13);
    unsigned int v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 588;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stopResult): Unable to stop IO.",  __p,  0x12u);
    }

    unsigned int v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v37 = &off_4865A0;
    v37[2] = v29;
  }

  return sub_230740(v102);
}

              sub_1C71C0(a1);
LABEL_133:
              std::recursive_mutex::unlock(v17);
              return;
            }

            CFTypeRef v70 = 5LL;
          }

          (*(void (**)(void))(*v69 + 8 * v70))();
          goto LABEL_128;
        }
      }
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    uint64_t v58 = (os_log_t *)sub_138E8(41);
    size_t v59 = *v58;
    if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1753;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - unable to lock software volume command.",  buf,  0x12u);
    }

    if (!v21) {
      goto LABEL_132;
    }
    goto LABEL_128;
  }

  if (v12 <= 1987013740)
  {
    if (v12 != 1986098020)
    {
      int v13 = 1986817377;
      goto LABEL_42;
    }

    std::string __p = 0LL;
    uint64_t v109 = 0LL;
    uint64_t v44 = *(std::__shared_weak_count **)(a1 + 288);
    if (v44)
    {
      int v45 = std::__shared_weak_count::lock(v44);
      uint64_t v109 = v45;
      if (v45)
      {
        uint64_t v46 = *(void **)(a1 + 280);
        std::string __p = v46;
      }

      else
      {
        uint64_t v46 = 0LL;
      }
    }

    else
    {
      uint64_t v46 = 0LL;
      int v45 = 0LL;
    }

    __int16 v60 = (os_log_t *)sub_138E8(13);
    unsigned int v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 682;
      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Ducking is not supported!",  buf,  0x12u);
    }

  sub_19DFC((uint64_t)&v127);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 312LL))(*(void *)(a1 + 8)) & 0xFF00000000LL) != 0)
  {
    if (cap >= 0) {
      unsigned int v102 = HIBYTE(cap);
    }
    else {
      unsigned int v102 = (size_t)v131[1];
    }
    unsigned int v103 = buf;
    sub_D0924((uint64_t)buf, v102 + 10);
    if (v147[3] < 0) {
      unsigned int v103 = *(_BYTE **)buf;
    }
    if (v102)
    {
      if (cap >= 0) {
        unint64_t v104 = v131;
      }
      else {
        unint64_t v104 = (void **)v131[0];
      }
      memmove(v103, v104, v102);
    }

    strcpy(&v103[v102], "-reference");
    if (v147[3] >= 0) {
      __n128 v105 = buf;
    }
    else {
      __n128 v105 = *(const char **)buf;
    }
    std::string __p = (void *)CFStringCreateWithCString(0LL, v105, 0x600u);
    int v138 = 1;
    unsigned int v106 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492LL));
    sub_243658(&inAddress, *(void *)(a1 + 8), 1885418100LL, (uint64_t)v134, (uint64_t *)&__p, theString, 1, v106);
    sub_19DFC((uint64_t)&__p);
    uint64_t v107 = inAddress;
    sub_204854((uint64_t)v129, inAddress);
    uint64_t v108 = inAddress_8;
    v126[0] = v107;
    v126[1] = inAddress_8;
    inAddress = 0LL;
    inAddress_8 = 0LL;
    sub_243720(a1, v126);
    if (v108)
    {
      uint64_t v109 = (unint64_t *)&v108->__shared_owners_;
      do
        uint64_t v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }

    int v111 = inAddress_8;
    if (inAddress_8)
    {
      CFTypeRef v112 = (unint64_t *)&inAddress_8->__shared_owners_;
      do
        char v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }

    if ((v147[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  uint64_t v114 = v130;
  v125[0] = v129;
  v125[1] = v130;
  if (v130)
  {
    float v115 = (unint64_t *)&v130->__shared_owners_;
    do
      float v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }

  sub_243720(a1, v125);
  if (v114)
  {
    unsigned int v117 = (unint64_t *)&v114->__shared_owners_;
    do
      int v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }

  unsigned int v119 = v130;
  if (v130)
  {
    uint64_t v120 = (unint64_t *)&v130->__shared_owners_;
    do
      int v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(v131[0]);
  }
  sub_19DFC((uint64_t)theString);
  sub_19DFC((uint64_t)&v136);
  sub_19DFC((uint64_t)&v135);
  sub_19DFC((uint64_t)v134);
  return 1LL;
}

        v27 += 7;
      }

      while (v28++ < v15);
    }
  }

  unsigned int v68 = *(_OWORD *)&buf[16];
  *(_OWORD *)uint64_t result = *(_OWORD *)buf;
  *(_OWORD *)(result + 16) = v68;
  *(_OWORD *)(result + 32) = *(_OWORD *)v80;
  *(void *)(result + 48) = *(void *)&v80[16];
  return result;
}

LABEL_149:
    if (mSelector != v7) {
      return v4;
    }
    goto LABEL_150;
  }

  if (mSelector > 1634955891)
  {
    if (mSelector <= 1650881393)
    {
      if (mSelector == 1634955892) {
        goto LABEL_133;
      }
      if (mSelector != 1635020147) {
        return v4;
      }
      return a2->mScope == 1869968496;
    }

    if (mSelector > 1651798897)
    {
      if (mSelector != 1651798898)
      {
        if (mSelector == 1667658618) {
          goto LABEL_133;
        }
        int v13 = 1668047203;
LABEL_100:
        if (mSelector != v13) {
          return v4;
        }
        return 1LL;
      }

      *(_DWORD *)inAddress = 1651798132;
      *(void *)&inAddress[4] = *(void *)&a2->mScope;
      return (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 16LL))(a1, inAddress);
    }

    if (mSelector != 1650881394)
    {
      int v7 = 1651664739;
      goto LABEL_149;
    }

  if (cf) {
    CFRelease(cf);
  }
  uint64_t v107 = *a1;
  if (*a1)
  {
    uint64_t v108 = a1[1];
    *(void *)&inData = *a1;
    *((void *)&inData + 1) = v108;
    if (v108)
    {
      uint64_t v109 = (unint64_t *)(v108 + 8);
      do
        uint64_t v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }

    goto LABEL_155;
  }

  int v118 = (const __CFString *)*a3;
  if (*a3) {
    CFRetain(*a3);
  }
  int v200 = v118;
  inData = 0uLL;
  *(void *)&v207.int mSelector = 0x676C6F627472616ELL;
  v207.mElement = 0;
  ioDataSize = 4;
  outData = 0;
  PropertyData = AudioObjectGetPropertyData(a2, &v207, 0, 0LL, &ioDataSize, &outData);
  if ((_DWORD)PropertyData)
  {
    uint64_t v120 = (os_log_t *)sub_138E8(7);
    int v121 = *v120;
    if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__p, PropertyData);
      int v122 = v204 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)inAddress = 136316418;
      *(void *)&inAddress[4] = "DeviceFactory_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 216;
      *(_WORD *)&_BYTE inAddress[18] = 1024;
      *(_DWORD *)&inAddress[20] = PropertyData;
      *(_WORD *)&inAddress[24] = 2080;
      *(void *)&inAddress[26] = v122;
      *(_WORD *)&inAddress[34] = 1024;
      *(_DWORD *)&inAddress[36] = a2;
      LOWORD(v209[0]) = 2112;
      *(void *)((char *)v209 + 2) = v118;
      _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') getting transport type for PhysicalDevice with AudioObjectID %u and UID %@",  inAddress,  0x32u);
      if (v204 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    goto LABEL_155;
  }

  uint64_t v126 = outData;
  if (outData > 1835169138)
  {
    if (outData <= 1937011306)
    {
      if (outData == 1835169139)
      {
        unsigned int v159 = operator new(0x288uLL);
        int v200 = 0LL;
        sub_39C4E0((uint64_t)v159, a2, v118);
        sub_16A3E0(inAddress, (uint64_t)v159);
        sub_127660((uint64_t)&inData, (__int128 *)inAddress);
        uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
        if (!*(void *)&inAddress[8]) {
          goto LABEL_155;
        }
        int v160 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
        do
          uint64_t v130 = __ldaxr(v160);
        while (__stlxr(v130 - 1, v160));
        goto LABEL_263;
      }

      if (outData == 1853189228)
      {
        unsigned int v163 = operator new(0x1F0uLL);
        int v200 = 0LL;
        sub_36E3FC((uint64_t)v163, a2, v118, v118, 0LL);
        *unsigned int v163 = &off_481E88;
        sub_16A178(inAddress, (uint64_t)v163);
        sub_127660((uint64_t)&inData, (__int128 *)inAddress);
        uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
        if (!*(void *)&inAddress[8]) {
          goto LABEL_155;
        }
        unsigned int v164 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
        do
          uint64_t v130 = __ldaxr(v164);
        while (__stlxr(v130 - 1, v164));
        goto LABEL_263;
      }

      char v131 = 1885563168;
    }

    else
    {
      if (outData > 1970496031)
      {
        if (outData == 1970496032)
        {
          uint64_t v155 = operator new(0x1F0uLL);
          int v200 = 0LL;
          sub_1EFC74((uint64_t)v155, a2, v118);
          sub_169DDC(inAddress, (uint64_t)v155);
          sub_127660((uint64_t)&inData, (__int128 *)inAddress);
          uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
          if (!*(void *)&inAddress[8]) {
            goto LABEL_155;
          }
          unsigned int v156 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
          do
            uint64_t v130 = __ldaxr(v156);
          while (__stlxr(v130 - 1, v156));
        }

        else
        {
          if (outData != 1986818665) {
            goto LABEL_155;
          }
          uint64_t v150 = operator new(0x1F0uLL);
          int v200 = 0LL;
          sub_36E3FC((uint64_t)v150, a2, v118, v118, 0LL);
          *uint64_t v150 = &off_4777C0;
          sub_16A044(inAddress, (uint64_t)v150);
          sub_127660((uint64_t)&inData, (__int128 *)inAddress);
          uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
          if (!*(void *)&inAddress[8]) {
            goto LABEL_155;
          }
          unsigned int v151 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
          do
            uint64_t v130 = __ldaxr(v151);
          while (__stlxr(v130 - 1, v151));
        }

        goto LABEL_263;
      }

      if (outData == 1937011307)
      {
        unint64_t v153 = operator new(0x2A8uLL);
        int v200 = 0LL;
        sub_2090A8((uint64_t)v153, a2, v118);
        sub_16A2AC(inAddress, (uint64_t)v153);
        sub_127660((uint64_t)&inData, (__int128 *)inAddress);
        uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
        if (!*(void *)&inAddress[8]) {
          goto LABEL_155;
        }
        uint64_t v154 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
        do
          uint64_t v130 = __ldaxr(v154);
        while (__stlxr(v130 - 1, v154));
        goto LABEL_263;
      }

      char v131 = 1953002862;
    }

    if (outData != v131) {
      goto LABEL_155;
    }
    int v138 = operator new(0x1F0uLL);
    int v200 = 0LL;
    sub_CE478((uint64_t)v138, a2, v118);
    sub_16A514(inAddress, (uint64_t)v138);
    CFMutableDictionaryRef v139 = *(_OWORD *)inAddress;
    *(void *)inAddress = 0LL;
    *(void *)&inAddress[8] = 0LL;
    unsigned int v140 = (std::__shared_weak_count *)*((void *)&inData + 1);
    inData = v139;
    if (v140)
    {
      int v141 = (unint64_t *)&v140->__shared_owners_;
      do
        id v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }

    uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
    if (!*(void *)&inAddress[8]) {
      goto LABEL_155;
    }
    unsigned int v143 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
    do
      uint64_t v130 = __ldaxr(v143);
    while (__stlxr(v130 - 1, v143));
    goto LABEL_263;
  }

  if (outData > 1667463019)
  {
    if (outData <= 1685090931)
    {
      if (outData != 1667463020)
      {
        if (outData != 1668506482) {
          goto LABEL_155;
        }
        char v127 = operator new(0x1F0uLL);
        int v200 = 0LL;
        sub_36E3FC((uint64_t)v127, a2, v118, v118, 0LL);
        *char v127 = &off_480F00;
        sub_16A77C(inAddress, (uint64_t)v127);
        sub_127660((uint64_t)&inData, (__int128 *)inAddress);
        uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
        if (!*(void *)&inAddress[8]) {
          goto LABEL_155;
        }
        uint64_t v129 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
        do
          uint64_t v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        goto LABEL_263;
      }

      goto LABEL_200;
    }

    if (outData != 1685090932 && outData != 1751412073) {
      goto LABEL_155;
    }
    int v144 = operator new(0x298uLL);
    int v200 = 0LL;
    sub_31F768((uint64_t)v144, a2, v118, v126);
    sub_169F10(inAddress, (uint64_t)v144);
    int v145 = *(_OWORD *)inAddress;
    *(void *)inAddress = 0LL;
    *(void *)&inAddress[8] = 0LL;
    int v146 = (std::__shared_weak_count *)*((void *)&inData + 1);
    inData = v145;
    if (v146)
    {
      int v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }

    uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
    if (!*(void *)&inAddress[8]) {
      goto LABEL_155;
    }
    int v149 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
    do
      uint64_t v130 = __ldaxr(v149);
    while (__stlxr(v130 - 1, v149));
LABEL_263:
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }

    goto LABEL_155;
  }

  if (outData == 1634300528)
  {
    int v157 = operator new(0x1F0uLL);
    int v200 = 0LL;
    sub_37D2F0((uint64_t)v157, a2, v118);
    sub_169B74(inAddress, (uint64_t)v157);
    sub_127660((uint64_t)&inData, (__int128 *)inAddress);
    uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
    if (!*(void *)&inAddress[8]) {
      goto LABEL_155;
    }
    int v158 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
    do
      uint64_t v130 = __ldaxr(v158);
    while (__stlxr(v130 - 1, v158));
    goto LABEL_263;
  }

  if (outData == 1651275109)
  {
    int v200 = 0LL;
    unsigned int v161 = sub_1ABA50(a2, v118);
    sub_169CA8(inAddress, (uint64_t)v161);
    sub_127660((uint64_t)&inData, (__int128 *)inAddress);
    uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
    if (!*(void *)&inAddress[8]) {
      goto LABEL_155;
    }
    std::string::value_type v162 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
    do
      uint64_t v130 = __ldaxr(v162);
    while (__stlxr(v130 - 1, v162));
    goto LABEL_263;
  }

  if (outData != 1667463012) {
    goto LABEL_155;
  }
LABEL_200:
  signed int v132 = operator new(0x1F0uLL);
  int v200 = 0LL;
  sub_36E3FC((uint64_t)v132, a2, v118, v118, 0LL);
  *signed int v132 = &off_476958;
  sub_16A648(inAddress, (uint64_t)v132);
  int v133 = *(_OWORD *)inAddress;
  *(void *)inAddress = 0LL;
  *(void *)&inAddress[8] = 0LL;
  unsigned int v134 = (std::__shared_weak_count *)*((void *)&inData + 1);
  inData = v133;
  if (v134)
  {
    unsigned int v135 = (unint64_t *)&v134->__shared_owners_;
    do
      int v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }

  uint64_t v128 = *(std::__shared_weak_count **)&inAddress[8];
  if (*(void *)&inAddress[8])
  {
    uint64_t v137 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
    do
      uint64_t v130 = __ldaxr(v137);
    while (__stlxr(v130 - 1, v137));
    goto LABEL_263;
  }

    sub_7D898((uint64_t)&inClientData);
    std::condition_variable::~condition_variable(&v155);
    std::mutex::~mutex(&v156);
    return;
  }

  size_t v59 = sub_138E8(13);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    unsigned int v48 = *(os_log_t *)v59;
    if (*(void *)v59)
    {
      if (os_log_type_enabled(*(os_log_t *)v59, OS_LOG_TYPE_DEBUG))
      {
        buf.int mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        int v146 = 1024;
        int v147 = 219;
        v148 = 1024;
        *(_DWORD *)int v149 = v39;
        int v29 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive "
              "for a notification on id %u.";
        goto LABEL_77;
      }
    }
  }

    sub_7D898((uint64_t)&inClientData);
    std::condition_variable::~condition_variable(&v155);
    std::mutex::~mutex(&v156);
    return;
  }

  size_t v59 = sub_138E8(13);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    unsigned int v48 = *(os_log_t *)v59;
    if (*(void *)v59)
    {
      if (os_log_type_enabled(*(os_log_t *)v59, OS_LOG_TYPE_DEBUG))
      {
        buf.int mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        int v146 = 1024;
        int v147 = 219;
        v148 = 1024;
        *(_DWORD *)int v149 = v39;
        int v29 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive "
              "for a notification on id %u.";
        goto LABEL_77;
      }
    }
  }

LABEL_119:
        if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
        {
          uint64_t v35 = (os_log_t *)sub_138E8(13);
          unsigned int v36 = *v35;
          if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)inAddress = 136315394;
            *(void *)&inAddress[4] = "AggregateDevice_CommonBase.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 942;
            _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
          }

          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }

        sub_9D478(inAddress, a1);
        int v22 = *(std::__shared_weak_count **)&inAddress[8];
        uint64_t v4 = *(void *)inAddress != 0LL;
        if (*(void *)&inAddress[8])
        {
          BOOL v23 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
          do
            unint64_t v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }

        return v4;
      }

LABEL_150:
      sub_9D988((uint64_t *)inAddress, (void *)(a1 + 184), "", 769);
      uint64_t v26 = *(void *)&inAddress[8];
      if (*(_BYTE **)&inAddress[8] != inAddress)
      {
        do
        {
          uint64_t v4 = (*(uint64_t (**)(void, AudioObjectPropertyAddress *))(**(void **)(v26 + 16) + 16LL))( *(void *)(v26 + 16),  a2);
          if ((v4 & 1) != 0) {
            break;
          }
          uint64_t v26 = *(void *)(v26 + 8);
        }

        while ((_BYTE *)v26 != inAddress);
        goto LABEL_178;
      }

      goto LABEL_177;
    }

    if (mSelector == 1633904999) {
      goto LABEL_119;
    }
    if (mSelector != 1633906541)
    {
      unsigned __int16 v6 = 29554;
      goto LABEL_108;
    }

    goto LABEL_133;
  }

  if (mSelector <= 1634692198)
  {
    if (mSelector == 1633970532) {
      return 1LL;
    }
    if (mSelector == 1633973868) {
      goto LABEL_150;
    }
    int v13 = 1634169456;
    goto LABEL_100;
  }

  if (mSelector == 1634692199) {
    goto LABEL_150;
  }
  if (mSelector == 1634755428)
  {
LABEL_133:
    int HasProperty = AudioObjectHasProperty(*(_DWORD *)(a1 + 128), a2);
    return HasProperty != 0;
  }

  int v17 = 1634890859;
LABEL_118:
  if (mSelector == v17) {
    goto LABEL_119;
  }
  return v4;
}

            int v16 = (void *)a1[126];
            int v17 = 4LL;
LABEL_151:
            unsigned __int16 v18 = (*(uint64_t (**)(void))(*v16 + 8 * v17))();
LABEL_152:
            int v8 = v18;
            goto LABEL_153;
          }

          if (v10 != 1633970532)
          {
            if (v10 == 1633973868) {
              goto LABEL_150;
            }
            int v13 = 1634035054;
            goto LABEL_126;
          }

        if (v56 == v182) {
          goto LABEL_171;
        }
        goto LABEL_81;
      }
    }
  }

      ++v34;
      if (++v30 == v31)
      {
        AudioObjectPropertyScope v28 = v211;
        int v29 = v212;
        if (v211 != v212)
        {
          a1 = v193;
          goto LABEL_155;
        }

        a1 = v193;
        if (!v33) {
          goto LABEL_166;
        }
LABEL_288:
        uint64_t v190 = (os_log_t *)sub_138E8(13);
        unsigned int v191 = *v190;
        if (*v190 && os_log_type_enabled(*v190, OS_LOG_TYPE_ERROR))
        {
          sub_23FE8((uint64_t)&__p, v195 + 2);
          int v192 = v210 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
          unsigned int v215 = 1024;
          int v216 = 645;
          char v217 = 2080;
          *(void *)uint64_t v218 = v192;
          _os_log_impl( &dword_0,  v191,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered an unexpected number of client stream channel descript ions in multi-route aggregate %s",  buf,  0x1Cu);
          if (v210 < 0) {
            operator delete(__p);
          }
        }

        uint64_t v150 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error( v150,  "Encountered an unexpected number of client stream channel descriptions in multi-route aggregate %s");
LABEL_217:
      }
    }
  }

  if (v28 == v29) {
    goto LABEL_166;
  }
  uint64_t v33 = 0;
LABEL_155:
  uint64_t v108 = 0;
  uint64_t v109 = v28;
  do
  {
    uint64_t v108 = *((_DWORD *)v109 + 3) + v108 - *((_DWORD *)v109 + 2);
    v109 += 2;
  }

  while (v109 != v29);
  if (v108 != v33) {
    goto LABEL_288;
  }
  uint64_t v110 = v28;
  do
  {
    if (!*v110)
    {
      int v147 = (os_log_t *)sub_138E8(13);
      v148 = *v147;
      if (*v147 && os_log_type_enabled(*v147, OS_LOG_TYPE_ERROR))
      {
        sub_23FE8((uint64_t)&__p, v195 + 2);
        int v149 = v210 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        unsigned int v215 = 1024;
        int v216 = 647;
        char v217 = 2080;
        *(void *)uint64_t v218 = v149;
        _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered a NULL underlying stream description in multi-route aggregate %s",  buf,  0x1Cu);
        if (v210 < 0) {
          operator delete(__p);
        }
      }

      uint64_t v150 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error( v150,  "Encountered a NULL underlying stream description in multi-route aggregate %s");
      goto LABEL_217;
    }

    v110 += 2;
  }

  while (v110 != v29);
  if (v28 != v29)
  {
    int v111 = 0;
    do
    {
      int v111 = *((_DWORD *)v28 + 3) + v111 - *((_DWORD *)v28 + 2);
      v28 += 2;
    }

    while (v28 != v29);
    goto LABEL_167;
  }

void sub_1B6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1B6F8(uint64_t result)
{
  if (!*(_DWORD *)(result + 128))
  {
    int v9 = (os_log_t *)sub_138E8(13);
    AudioObjectPropertyScope v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "AggregateDevice_CommonBase.cpp";
      __int16 v20 = 1024;
      int v21 = 2195;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  if (!*(void *)(result + 416))
  {
    int v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "AggregateDevice_CommonBase.cpp";
      __int16 v20 = 1024;
      int v21 = 2196;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
    }

    uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Invariant failure.");
  }

  for (uint64_t i = *(void **)(result + 520); i != *(void **)(result + 528); i += 2)
  {
    if (!*i)
    {
      unsigned int v3 = (os_log_t *)sub_138E8(13);
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          int v18 = 136315394;
          uint64_t v19 = "AggregateDevice_CommonBase.cpp";
          __int16 v20 = 1024;
          int v21 = 2197;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
        }
      }

      char v5 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v5, "Invariant failure.");
    }
  }

  for (uint64_t j = *(void **)(result + 544); j != *(void **)(result + 552); j += 2)
  {
    if (!*j)
    {
      unsigned __int16 v6 = (os_log_t *)sub_138E8(13);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315394;
        uint64_t v19 = "AggregateDevice_CommonBase.cpp";
        __int16 v20 = 1024;
        int v21 = 2198;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
      }

      int v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v8, "Invariant failure.");
    }
  }

  if ((*(void *)(result + 456) != 0LL) == (*(void *)(result + 464) == 0LL))
  {
    int v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "AggregateDevice_CommonBase.cpp";
      __int16 v20 = 1024;
      int v21 = 2199;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
    }

    int v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Invariant failure.");
  }

  return result;
}

void sub_1BAD0(_Unwind_Exception *a1)
{
}

BOOL sub_1BAFC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1064725619) {
    return a2->mScope == 1869968496;
  }
  sub_1BB60((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

void sub_1BB60(std::mutex *a1)
{
  uint64_t v1 = a1 + 5;
  std::mutex::lock(a1 + 5);
  std::mutex::unlock(v1);
}

void sub_1BB88(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unsigned int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        char v5 = (uint64_t *)v3[1];
        sub_7A768((uint64_t)(v3 + 2));
        operator delete(v3);
        unsigned int v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_1BBF8(unsigned int *a1, int *a2, uint64_t a3, const void *a4, UInt32 *a5, double *a6)
{
  if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 32LL))(a1) & 1) == 0)
  {
    int v205 = (os_log_t *)sub_138E8(13);
    uint64_t v206 = *v205;
    if (*v205 && os_log_type_enabled(*v205, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v352) = a2[2];
      sub_613AC((uint64_t)cf, (unsigned int *)&__p);
      unsigned int v207 = cf[23] >= 0 ? cf : *(_BYTE **)cf;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2343;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v207;
      _os_log_impl( &dword_0,  v206,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if ((cf[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 == 0) == (a4 != 0LL))
  {
    uint64_t v209 = (os_log_t *)sub_138E8(13);
    uint64_t v210 = *v209;
    if (*v209 && os_log_type_enabled(*v209, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v352) = a2[2];
      sub_613AC((uint64_t)cf, (unsigned int *)&__p);
      char v211 = cf[23] >= 0 ? cf : *(_BYTE **)cf;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2344;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v211;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)v362 = a3;
      *(_WORD *)&v362[4] = 2048;
      *(void *)&v362[6] = a4;
      _os_log_impl( &dword_0,  v210,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if ((cf[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf);
      }
    }

    v212 = __cxa_allocate_exception(0x10uLL);
    *(void *)v212 = &off_4865A0;
    v212[2] = 561211770;
  }

  if (!a6)
  {
    int v213 = (os_log_t *)sub_138E8(13);
    int v214 = *v213;
    if (*v213 && os_log_type_enabled(*v213, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v352) = a2[2];
      sub_613AC((uint64_t)cf, (unsigned int *)&__p);
      unsigned int v215 = cf[23] >= 0 ? cf : *(_BYTE **)cf;
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2345;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "outData";
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)v362 = v215;
      _os_log_impl( &dword_0,  v214,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if ((cf[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf);
      }
    }

    int v216 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v216 = &off_4865A0;
    v216[2] = 561211770;
  }

  if (*a2 == 1651798132)
  {
    AudioObjectID v12 = atomic_load(a1 + 272);
    AudioObjectGetPropertyData(v12, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
    return;
  }

  sub_6DD4();
  int v13 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v14 = *a2;
  if (*a2 > 1701733223)
  {
    if (v14 <= 1935762280)
    {
      if (v14 <= 1869838182)
      {
        if (v14 > 1769302371)
        {
          if (v14 <= 1853059618)
          {
            if (v14 == 1769302372 || v14 == 1818326127) {
              goto LABEL_212;
            }
            if (v14 == 1852012899)
            {
              UInt32 v46 = *a5;
              if (v46 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4)) {
                goto LABEL_213;
              }
              v262 = (os_log_t *)sub_138E8(13);
              __int16 v49 = *v262;
              if (!*v262 || !os_log_type_enabled(*v262, OS_LOG_TYPE_ERROR)) {
                goto LABEL_596;
              }
              std::string __p = *(void **)a2;
              LODWORD(v352) = a2[2];
              sub_613AC((uint64_t)cf, (unsigned int *)&__p);
              int v263 = cf[23];
              int v264 = *(_BYTE **)cf;
              UInt32 v265 = *a5;
              int v266 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v267 = cf;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v263 < 0) {
                v267 = v264;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2371;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v267;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)v362 = v265;
              *(_WORD *)&v362[4] = 1024;
              *(_DWORD *)&v362[6] = v266;
              __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_486;
            }

            goto LABEL_300;
          }

          if (v14 <= 1869574755)
          {
            if (v14 == 1853059619)
            {
              UInt32 v142 = *a5;
              if (v142 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
              {
                sub_759B8((uint64_t **)buf, a1, a2[1]);
                sub_B7870(buf, a5, a6);
                sub_32C8C(*(void **)&buf[8]);
                goto LABEL_215;
              }

              v274 = (os_log_t *)sub_138E8(13);
              __int16 v49 = *v274;
              if (!*v274 || !os_log_type_enabled(*v274, OS_LOG_TYPE_ERROR)) {
                goto LABEL_596;
              }
              std::string __p = *(void **)a2;
              LODWORD(v352) = a2[2];
              sub_613AC((uint64_t)cf, (unsigned int *)&__p);
              int v275 = cf[23];
              v276 = *(_BYTE **)cf;
              UInt32 v277 = *a5;
              int v278 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              unsigned int v279 = cf;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v275 < 0) {
                unsigned int v279 = v276;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2394;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v279;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)v362 = v277;
              *(_WORD *)&v362[4] = 1024;
              *(_DWORD *)&v362[6] = v278;
              __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_486;
            }

            if (v14 == 1853059700)
            {
              UInt32 v16 = *a5;
              if (v16 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
              {
                sub_37E94((uint64_t)a1, a2, a3, (uint64_t)a4, a5, (pid_t *)a6);
                if (sub_6C440(*((void *)a1 + 65), *((void *)a1 + 66))
                  && sub_B4F08(*((void *)a1 + 126)))
                {
                  *a6 = *a6 * 0.0625;
                }

                uint64_t v17 = sub_138E8(1);
                uint64_t v18 = sub_138E8(36);
                char v19 = 0;
                uint64_t v20 = 0LL;
                *(void *)buf = 0x100000002LL;
                uint64_t v21 = *(void *)(v17 + 8);
                while (1)
                {
                  uint64_t v22 = *(int *)&buf[4 * v20];
                  char v23 = v19;
                  if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
                    break;
                  }
                  char v19 = 1;
                  uint64_t v20 = 1LL;
                  if ((v23 & 1) != 0) {
                    goto LABEL_390;
                  }
                }

                if ((v21 & v22) == 0) {
                  uint64_t v17 = v18;
                }
                uint64_t v21 = *(void *)(v17 + 8);
LABEL_390:
                if ((v21 & 1) != 0)
                {
                  uint64_t v186 = *(os_log_s **)v17;
                  if (v186)
                  {
                    if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
                    {
                      double v187 = *a6;
                      std::string __p = (void *)*((void *)a1 + 72);
                      sub_33464((std::string *)cf, (unsigned int *)&__p);
                      uint64_t v188 = cf[23] >= 0 ? cf : *(_BYTE **)cf;
                      *(_DWORD *)buf = 136315906;
                      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 2389;
                      *(_WORD *)&_BYTE buf[18] = 2048;
                      *(double *)&buf[20] = v187;
                      *(_WORD *)&_BYTE buf[28] = 2080;
                      *(void *)v362 = v188;
                      _os_log_impl( &dword_0,  v186,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client request to get nominal sample rate (%f) on VAD: '%s'.",  buf,  0x26u);
                      if ((cf[23] & 0x80000000) != 0) {
                        operator delete(*(void **)cf);
                      }
                    }
                  }
                }

                goto LABEL_215;
              }

              int v232 = (os_log_t *)sub_138E8(13);
              __int16 v49 = *v232;
              if (!*v232 || !os_log_type_enabled(*v232, OS_LOG_TYPE_ERROR)) {
                goto LABEL_596;
              }
              std::string __p = *(void **)a2;
              LODWORD(v352) = a2[2];
              sub_613AC((uint64_t)cf, (unsigned int *)&__p);
              int v233 = cf[23];
              v234 = *(_BYTE **)cf;
              UInt32 v235 = *a5;
              int v236 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              int v237 = cf;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v233 < 0) {
                int v237 = v234;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2380;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v237;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)v362 = v235;
              *(_WORD *)&v362[4] = 1024;
              *(_DWORD *)&v362[6] = v236;
              __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_486;
            }

            goto LABEL_300;
          }

          if (v14 == 1869574756) {
            goto LABEL_212;
          }
          int v15 = 1869575794;
          goto LABEL_211;
        }

        if (v14 > 1719165554)
        {
          if (v14 == 1719165555)
          {
            UInt32 v158 = *a5;
            if (v158 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              int v304 = (os_log_t *)sub_138E8(13);
              __int16 v49 = *v304;
              if (*v304 && os_log_type_enabled(*v304, OS_LOG_TYPE_ERROR))
              {
                std::string __p = *(void **)a2;
                LODWORD(v352) = a2[2];
                sub_613AC((uint64_t)cf, (unsigned int *)&__p);
                int v305 = cf[23];
                v306 = *(_BYTE **)cf;
                UInt32 v307 = *a5;
                int v308 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                int v309 = cf;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                if (v305 < 0) {
                  int v309 = v306;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2617;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v309;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)v362 = v307;
                *(_WORD *)&v362[4] = 1024;
                *(_DWORD *)&v362[6] = v308;
                __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size"
                      " (passed: %u; required: %u).";
                goto LABEL_486;
              }

              goto LABEL_596;
            }

            uint64_t v159 = (*(uint64_t (**)(void, void))(**((void **)a1 + 126) + 528LL))( *((void *)a1 + 126),  a2[1]);
            if ((v159 & 0xFF00000000LL) != 0) {
              unsigned int v41 = v159;
            }
            else {
              unsigned int v41 = 0;
            }
            goto LABEL_356;
          }

          if (v14 == 1735682404) {
            goto LABEL_212;
          }
          if (v14 != 1752657012) {
            goto LABEL_300;
          }
          UInt32 v37 = *a5;
          if (v37 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            id v250 = (os_log_t *)sub_138E8(13);
            __int16 v49 = *v250;
            if (*v250 && os_log_type_enabled(*v250, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              LODWORD(v352) = a2[2];
              sub_613AC((uint64_t)cf, (unsigned int *)&__p);
              int v251 = cf[23];
              v252 = *(_BYTE **)cf;
              UInt32 v253 = *a5;
              int v254 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              unsigned int v255 = cf;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v251 < 0) {
                unsigned int v255 = v252;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2555;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v255;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)v362 = v253;
              *(_WORD *)&v362[4] = 1024;
              *(_DWORD *)&v362[6] = v254;
              __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_486;
            }

            goto LABEL_596;
          }

          int v38 = sub_79E08(*((void *)a1 + 126), a2[1] == 1768845428);
LABEL_372:
          *(_DWORD *)a6 = v38;
          goto LABEL_215;
        }

        if (v14 == 1701733224)
        {
          unsigned int v148 = *a5;
          if (v148 < (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            std::string::size_type v292 = (os_log_t *)sub_138E8(13);
            __int16 v49 = *v292;
            if (*v292 && os_log_type_enabled(*v292, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              LODWORD(v352) = a2[2];
              sub_613AC((uint64_t)cf, (unsigned int *)&__p);
              int v293 = cf[23];
              v294 = *(_BYTE **)cf;
              UInt32 v295 = *a5;
              int v296 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              uint64_t v297 = cf;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v293 < 0) {
                uint64_t v297 = v294;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2538;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v297;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)v362 = v295;
              *(_WORD *)&v362[4] = 1024;
              *(_DWORD *)&v362[6] = v296;
              __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
              goto LABEL_486;
            }

            goto LABEL_596;
          }

          strcpy(buf, "scapbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          sub_B7D88((CFArrayRef)cf, (uint64_t)a1, (const AudioObjectPropertyAddress *)buf);
          uint64_t v149 = sub_138E8(1);
          if ((*(_BYTE *)(v149 + 8) & 1) != 0)
          {
            __int16 v60 = *(os_log_s **)v149;
            if (*(void *)v149)
            {
              if (os_log_type_enabled(*(os_log_t *)v149, OS_LOG_TYPE_DEBUG))
              {
                v349.__r_.__value_.__r.__words[0] = *(void *)a2;
                LODWORD(v349.__r_.__value_.__r.__words[1]) = a2[2];
                sub_613AC((uint64_t)&__p, (unsigned int *)&v349);
                int v150 = SHIBYTE(v353);
                unsigned int v151 = (void **)__p;
                sub_8F640(&v350, *(unsigned int **)cf, *(unsigned int **)&cf[8]);
                p_p = &__p;
                if (v150 < 0) {
                  p_p = v151;
                }
                unint64_t v153 = &v350;
                if ((v350.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  unint64_t v153 = (std::string *)v350.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2540;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = p_p;
                *(_WORD *)&_BYTE buf[28] = 2080;
                *(void *)v362 = v153;
                goto LABEL_340;
              }
            }
          }

LABEL_344:
          int v141 = *(void **)cf;
          int v154 = *(_DWORD *)&cf[8] - *(_DWORD *)cf;
          if (*(void *)&cf[8] != *(void *)cf) {
            memmove(a6, *(const void **)cf, *(void *)&cf[8] - *(void *)cf);
          }
          *a5 = v154 & 0xFFFFFFFC;
LABEL_347:
          if (!v141) {
            goto LABEL_215;
          }
          uint64_t v155 = v141;
LABEL_454:
          operator delete(v155);
          goto LABEL_215;
        }

        if (v14 != 1718383987)
        {
          if (v14 != 1718641517) {
            goto LABEL_300;
          }
          id v32 = (void *)*((void *)a1 + 65);
          if (((*((void *)a1 + 66) - (void)v32) & 0x7FFFFFFF8LL) != 0) {
            goto LABEL_76;
          }
          goto LABEL_384;
        }

        uint64_t v130 = (os_log_t *)sub_138E8(1);
        uint64_t v125 = *v130;
        if (!*v130 || !os_log_type_enabled(*v130, OS_LOG_TYPE_ERROR)) {
          goto LABEL_326;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2583;
        uint64_t v126 = "%25s:%-5d kVirtualAudioDeviceSilenceOutputImmediately is a write-only property";
LABEL_325:
        _os_log_impl(&dword_0, v125, OS_LOG_TYPE_ERROR, v126, buf, 0x12u);
        goto LABEL_326;
      }

      if (v14 > 1886807153)
      {
        if (v14 <= 1919773027)
        {
          if (v14 == 1886807154) {
            goto LABEL_212;
          }
          if (v14 == 1902539642)
          {
            UInt32 v147 = *a5;
            if (v147 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
            {
              uint64_t v286 = (os_log_t *)sub_138E8(13);
              __int16 v49 = *v286;
              if (*v286 && os_log_type_enabled(*v286, OS_LOG_TYPE_ERROR))
              {
                std::string __p = *(void **)a2;
                LODWORD(v352) = a2[2];
                sub_613AC((uint64_t)cf, (unsigned int *)&__p);
                int v287 = cf[23];
                int v288 = *(_BYTE **)cf;
                UInt32 v289 = *a5;
                int v290 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                v291 = cf;
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                if (v287 < 0) {
                  v291 = v288;
                }
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2418;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v291;
                *(_WORD *)&_BYTE buf[28] = 1024;
                *(_DWORD *)v362 = v289;
                *(_WORD *)&v362[4] = 1024;
                *(_DWORD *)&v362[6] = v290;
                __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size"
                      " (passed: %u; required: %u).";
                goto LABEL_486;
              }

              goto LABEL_596;
            }

            unsigned int v41 = a1[122];
            goto LABEL_356;
          }

          int v30 = 1918987632;
        }

        else
        {
          if (v14 > 1920165218)
          {
            if (v14 == 1920165219)
            {
              unsigned int v143 = (os_log_t *)sub_138E8(1);
              int v144 = *v143;
              if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2776;
                *(_WORD *)&_BYTE buf[18] = 1024;
                *(_DWORD *)&buf[20] = 0;
                _os_log_impl( &dword_0,  v144,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route has Echo cancelled input : %u",  buf,  0x18u);
              }

              sub_5CABC(0, a5, a6);
              goto LABEL_215;
            }

            int v15 = 1934456180;
            goto LABEL_211;
          }

          if (v14 == 1919773028) {
            goto LABEL_212;
          }
          int v30 = 1919774835;
        }

        goto LABEL_173;
      }

      if (v14 <= 1886216546)
      {
        if (v14 != 1869838183)
        {
          if (v14 == 1885434482) {
            goto LABEL_212;
          }
          int v15 = 1885631346;
          goto LABEL_211;
        }

        UInt32 v156 = *a5;
        if (v156 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          uint64_t v298 = (os_log_t *)sub_138E8(13);
          __int16 v49 = *v298;
          if (*v298 && os_log_type_enabled(*v298, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v352) = a2[2];
            sub_613AC((uint64_t)cf, (unsigned int *)&__p);
            int v299 = cf[23];
            uint64_t v300 = *(_BYTE **)cf;
            UInt32 v301 = *a5;
            int v302 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            unsigned int v303 = cf;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v299 < 0) {
              unsigned int v303 = v300;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2605;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v303;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)v362 = v301;
            *(_WORD *)&v362[4] = 1024;
            *(_DWORD *)&v362[6] = v302;
            __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_486;
          }

          goto LABEL_596;
        }

        uint64_t v40 = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(*((void *)a1 + 135) + 8LL), v157);
        goto LABEL_351;
      }

      if (v14 == 1886216547)
      {
        UInt32 v170 = *a5;
        if (v170 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          v322 = (os_log_t *)sub_138E8(13);
          __int16 v49 = *v322;
          if (*v322 && os_log_type_enabled(*v322, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v352) = a2[2];
            sub_613AC((uint64_t)cf, (unsigned int *)&__p);
            int v323 = cf[23];
            v324 = *(_BYTE **)cf;
            UInt32 v325 = *a5;
            int v326 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            unsigned int v327 = cf;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v323 < 0) {
              unsigned int v327 = v324;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2613;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v327;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)v362 = v325;
            *(_WORD *)&v362[4] = 1024;
            *(_DWORD *)&v362[6] = v326;
            __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_486;
          }

          goto LABEL_596;
        }

        int v38 = (*(uint64_t (**)(void))(**((void **)a1 + 126) + 224LL))(*((void *)a1 + 126));
        goto LABEL_372;
      }

      if (v14 == 1886413412) {
        goto LABEL_212;
      }
      int v15 = 1886413426;
      goto LABEL_211;
    }

    if (v14 > 1953719147)
    {
      if (v14 <= 1986225265)
      {
        if (v14 <= 1970303086)
        {
          if (v14 == 1953719148) {
            goto LABEL_212;
          }
          if (v14 == 1969318244)
          {
            int v131 = (*(uint64_t (**)(void))(**((void **)a1 + 126) + 120LL))(*((void *)a1 + 126));
            sub_5CABC(v131, a5, a6);
            goto LABEL_215;
          }

          int v15 = 1969844082;
          goto LABEL_211;
        }

        if (v14 != 1970303087)
        {
          if (v14 == 1983996971) {
            goto LABEL_212;
          }
          int v15 = 1983997011;
          goto LABEL_211;
        }

        goto LABEL_290;
      }

      if (v14 > 1986294895)
      {
        if (v14 > 2020111982)
        {
          if (v14 == 2020111983)
          {
            int v145 = (os_log_t *)sub_138E8(1);
            uint64_t v125 = *v145;
            if (!*v145 || !os_log_type_enabled(*v145, OS_LOG_TYPE_ERROR)) {
              goto LABEL_326;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2577;
            uint64_t v126 = "%25s:%-5d kVolumeControlSetExternalHWVolumeNotificationHandler is a write-only property";
            goto LABEL_325;
          }

          if (v14 != 2021027692) {
            goto LABEL_300;
          }
          v124 = (os_log_t *)sub_138E8(1);
          uint64_t v125 = *v124;
          if (!*v124 || !os_log_type_enabled(*v124, OS_LOG_TYPE_ERROR)) {
            goto LABEL_326;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2571;
          uint64_t v126 = "%25s:%-5d kVirtualAudioDeviceSetExternalVolumeHandler is a write-only property";
          goto LABEL_325;
        }

        if (v14 == 1986294896)
        {
          unsigned int v41 = a1[144];
          goto LABEL_356;
        }

        int v15 = 1986361444;
LABEL_211:
        if (v14 == v15) {
          goto LABEL_212;
        }
LABEL_300:
        sub_37E94((uint64_t)a1, a2, a3, (uint64_t)a4, a5, (pid_t *)a6);
        goto LABEL_215;
      }

      if (v14 != 1986225266 && v14 != 1986225268)
      {
        int v30 = 1986225518;
LABEL_173:
        if (v14 != v30) {
          goto LABEL_300;
        }
        goto LABEL_174;
      }
    }

    else
    {
      if (v14 <= 1936879203)
      {
        if (v14 <= 1936876402)
        {
          if (v14 == 1935762281 || v14 == 1935962992) {
            goto LABEL_212;
          }
          int v15 = 1936744803;
          goto LABEL_211;
        }

        if (v14 == 1936876403) {
          goto LABEL_153;
        }
        if (v14 == 1936876644)
        {
          unsigned int v132 = *a5;
          if (v132 >= (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4)) {
            goto LABEL_213;
          }
          int v133 = (os_log_t *)sub_138E8(13);
          __int16 v49 = *v133;
          if (!*v133 || !os_log_type_enabled(*v133, OS_LOG_TYPE_ERROR)) {
            goto LABEL_596;
          }
          std::string __p = *(void **)a2;
          LODWORD(v352) = a2[2];
          sub_613AC((uint64_t)cf, (unsigned int *)&__p);
          int v134 = cf[23];
          unsigned int v135 = *(_BYTE **)cf;
          UInt32 v136 = *a5;
          int v137 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          int v138 = cf;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v134 < 0) {
            int v138 = v135;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2366;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v138;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)v362 = v136;
          *(_WORD *)&v362[4] = 1024;
          *(_DWORD *)&v362[6] = v137;
          __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_486;
        }

        int v30 = 1936878960;
        goto LABEL_173;
      }

      if (v14 <= 1952997987)
      {
        if (v14 == 1936879204)
        {
          unsigned int v179 = *a5;
          if (v179 >= (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4)) {
            goto LABEL_213;
          }
          uint64_t v180 = (os_log_t *)sub_138E8(13);
          __int16 v49 = *v180;
          if (!*v180 || !os_log_type_enabled(*v180, OS_LOG_TYPE_ERROR)) {
            goto LABEL_596;
          }
          std::string __p = *(void **)a2;
          LODWORD(v352) = a2[2];
          sub_613AC((uint64_t)cf, (unsigned int *)&__p);
          int v181 = cf[23];
          unsigned int v182 = *(_BYTE **)cf;
          UInt32 v183 = *a5;
          int v184 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          CFArrayRef v185 = cf;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v181 < 0) {
            CFArrayRef v185 = v182;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2413;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v185;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)v362 = v183;
          *(_WORD *)&v362[4] = 1024;
          *(_DWORD *)&v362[6] = v184;
          __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_486;
        }

        if (v14 == 1936946787)
        {
          UInt32 v146 = *a5;
          if (v146 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            *(float *)a6 = sub_B8578((void **)a1);
            goto LABEL_215;
          }

          int v280 = (os_log_t *)sub_138E8(13);
          __int16 v49 = *v280;
          if (!*v280 || !os_log_type_enabled(*v280, OS_LOG_TYPE_ERROR)) {
            goto LABEL_596;
          }
          std::string __p = *(void **)a2;
          LODWORD(v352) = a2[2];
          sub_613AC((uint64_t)cf, (unsigned int *)&__p);
          int v281 = cf[23];
          uint64_t v282 = *(_BYTE **)cf;
          UInt32 v283 = *a5;
          int v284 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          int v285 = cf;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v281 < 0) {
            int v285 = v282;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2601;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v285;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)v362 = v283;
          *(_WORD *)&v362[4] = 1024;
          *(_DWORD *)&v362[6] = v284;
          __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_486;
        }

        int v15 = 1937138532;
        goto LABEL_211;
      }

      if (v14 <= 1953002092)
      {
        if (v14 == 1952997988) {
          goto LABEL_212;
        }
        int v15 = 1952998002;
        goto LABEL_211;
      }

      if (v14 == 1953002093) {
        goto LABEL_212;
      }
      if (v14 != 1953002354) {
        goto LABEL_300;
      }
    }

    UInt32 v72 = *a5;
    if (v72 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      unsigned int v73 = (os_log_t *)sub_138E8(13);
      __int16 v49 = *v73;
      if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v352) = a2[2];
        sub_613AC((uint64_t)cf, (unsigned int *)&__p);
        int v74 = cf[23];
        int v75 = *(_BYTE **)cf;
        UInt32 v76 = *a5;
        int v77 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        unsigned int v78 = cf;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v74 < 0) {
          unsigned int v78 = v75;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2562;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v78;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)v362 = v76;
        *(_WORD *)&v362[4] = 1024;
        *(_DWORD *)&v362[6] = v77;
        __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed"
              ": %u; required: %u).";
        goto LABEL_486;
      }

      goto LABEL_596;
    }

    goto LABEL_213;
  }

  if (v14 > 1668443503)
  {
    if (v14 <= 1684500593)
    {
      if (v14 > 1684238450)
      {
        if (v14 > 1684370275)
        {
          if (v14 > 1684498543)
          {
            if (v14 == 1684498544) {
              goto LABEL_212;
            }
            unsigned __int16 v24 = 28781;
          }

          else
          {
            if (v14 == 1684370276) {
              goto LABEL_212;
            }
            unsigned __int16 v24 = 26733;
          }

          int v15 = v24 | 0x64670000;
          goto LABEL_211;
        }

        if (v14 == 1684238451)
        {
          UInt32 v171 = *a5;
          if (v171 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
          {
            memset(cf, 0, 24);
            sub_B7A8C(cf, a4, (uint64_t)a4 + 4 * (a3 >> 2), a3 >> 2);
            *(_OWORD *)buf = *(_OWORD *)cf;
            *(void *)&buf[16] = *(void *)&cf[16];
            strcpy(&buf[24], "cwdv");
            v362[2] = 0;
            *(_DWORD *)&v362[10] = 3;
            *((void *)&v363 + 1) = 0LL;
            uint64_t v364 = 0LL;
            *(void *)&__int128 v363 = (char *)&v363 + 8;
            int v365 = 44739242;
            uint64_t v366 = 0LL;
            (*(void (**)(_BYTE *__return_ptr, void, _BYTE *))(**((void **)a1 + 126) + 480LL))( cf,  *((void *)a1 + 126),  buf);
            sub_B7B04((uint64_t *)&__p, (uint64_t)a1, (uint64_t)cf, a2[1]);
            sub_85B80((uint64_t *)cf);
            sub_136E0((uint64_t)&v345, __p, &v352);
            uint64_t v172 = sub_138E8(2);
            uint64_t v173 = sub_138E8(34);
            char v174 = 0;
            uint64_t v175 = 0LL;
            *(void *)CFTypeRef cf = 0x100000002LL;
            uint64_t v176 = *(void *)(v172 + 8);
            while (1)
            {
              uint64_t v177 = *(int *)&cf[4 * v175];
              char v178 = v174;
              if (((v176 & v177) != 0) != ((*(void *)(v173 + 8) & v177) != 0)) {
                break;
              }
              char v174 = 1;
              uint64_t v175 = 1LL;
              if ((v178 & 1) != 0) {
                goto LABEL_428;
              }
            }

            if ((v176 & v177) == 0) {
              uint64_t v172 = v173;
            }
            uint64_t v176 = *(void *)(v172 + 8);
LABEL_428:
            if ((v176 & 1) != 0)
            {
              int v197 = *(os_log_s **)v172;
              if (v197)
              {
                if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
                {
                  std::to_string(&v350, a1[2]);
                  if ((v350.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    uint64_t v198 = &v350;
                  }
                  else {
                    uint64_t v198 = (std::string *)v350.__r_.__value_.__r.__words[0];
                  }
                  sub_2CA1C(&v349, a2[1]);
                  if ((v349.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    unsigned int v199 = &v349;
                  }
                  else {
                    unsigned int v199 = (std::string *)v349.__r_.__value_.__r.__words[0];
                  }
                  sub_8F640(&v348, *(unsigned int **)buf, *(unsigned int **)&buf[8]);
                  int size = (char)v348.__r_.__value_.__s.__size_;
                  std::string::size_type v201 = v348.__r_.__value_.__r.__words[0];
                  sub_151A78(&v347, (const __CFArray *)v345.__r_.__value_.__l.__data_);
                  uint64_t v202 = &v348;
                  if (size < 0) {
                    uint64_t v202 = (std::string *)v201;
                  }
                  char v203 = &v347;
                  if ((v347.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    char v203 = (std::string *)v347.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)CFTypeRef cf = 136316418;
                  *(void *)&cf[4] = "VirtualAudio_Device.cpp";
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 2463;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v198;
                  __int16 v355 = 2080;
                  v356 = v199;
                  __int16 v357 = 2080;
                  v358 = v202;
                  __int16 v359 = 2080;
                  int v360 = v203;
                  _os_log_impl( &dword_0,  v197,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning connected ports for device id %s, scope '%s' and VirtualAudioPortTypes %s: %s",  cf,  0x3Au);
                }
              }
            }

            if (v345.__r_.__value_.__r.__words[0])
            {
              CFRetain(v345.__r_.__value_.__l.__data_);
              std::string::size_type v204 = v345.__r_.__value_.__r.__words[0];
            }

            else
            {
              std::string::size_type v204 = 0LL;
            }

            *(void *)a6 = v204;
            sub_13818((uint64_t)&v345);
            sub_32C8C(v352);
            sub_A0DB0((uint64_t)buf);
            goto LABEL_215;
          }

          int v328 = (os_log_t *)sub_138E8(13);
          __int16 v49 = *v328;
          if (!*v328 || !os_log_type_enabled(*v328, OS_LOG_TYPE_ERROR)) {
            goto LABEL_596;
          }
          std::string __p = *(void **)a2;
          LODWORD(v352) = a2[2];
          sub_613AC((uint64_t)cf, (unsigned int *)&__p);
          int v329 = cf[23];
          uint64_t v330 = *(_BYTE **)cf;
          UInt32 v331 = *a5;
          int v332 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          int v333 = cf;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v329 < 0) {
            int v333 = v330;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2451;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v333;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)v362 = v331;
          *(_WORD *)&v362[4] = 1024;
          *(_DWORD *)&v362[6] = v332;
          __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_486;
        }

        if (v14 != 1684304756)
        {
          int v15 = 1684365924;
          goto LABEL_211;
        }

LABEL_491:
          int v225 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v225, "Precondition failure.");
        }

LABEL_384:
      sub_5CABC(0, a5, a6);
      goto LABEL_215;
    }

    if (v14 <= 1685288050)
    {
      if (v14 != 1685287523) {
        goto LABEL_300;
      }
      goto LABEL_153;
    }

    if (v14 == 1685288051) {
      goto LABEL_153;
    }
    if (v14 != 1685483630)
    {
      int v30 = 1685484390;
      goto LABEL_173;
    }

    CFMutableDictionaryRef v139 = (os_log_t *)sub_138E8(1);
    uint64_t v125 = *v139;
    if (*v139 && os_log_type_enabled(*v139, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2423;
      uint64_t v126 = "%25s:%-5d kAudioDevicePropertyVoiceProcessingIsEnabled is a write-only property";
      goto LABEL_325;
    }

  if (v41 != 1)
  {
    if (v41 == 3)
    {
      sub_1EE290((uint64_t)a1);
      sub_1ED070((std::mutex *)a1);
    }

    return;
  }

  if ((byte_48E73F & 1) == 0)
  {
    if (sub_14B98C(@"DisallowUSBHostAudioInput", @"com.apple.audio.virtualaudio", v248))
    {
      byte_48E73E = v248[0] != 0;
      uint64_t v186 = (os_log_t *)sub_138E8(13);
      double v187 = *v186;
      if (*v186)
      {
        if (os_log_type_enabled(*v186, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 354;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = byte_48E73E;
          _os_log_impl(&dword_0, v187, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallow USB Host Audio Input: %u", buf, 0x18u);
        }
      }
    }

    byte_48E73F = 1;
  }

  if (!byte_48E73E)
  {
    sub_F9584((uint64_t)buf, qword_490EC8, *((_DWORD *)a1 + 67));
    uint64_t v188 = (os_log_t *)sub_138E8(17);
    int v189 = *v188;
    if (*v188 && os_log_type_enabled(*v188, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v190 = *(void *)&v241[2];
      unsigned int v191 = *(void *)&buf[16];
      int v192 = *(void *)buf;
      (*(void (**)(__int128 *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(&__p, a1);
      if (v191) {
        std::string::size_type v193 = v191;
      }
      else {
        std::string::size_type v193 = v192;
      }
      if (v190) {
        std::string::size_type v193 = v190;
      }
      v248[0] = 136315906;
      *(void *)&v248[1] = "Device_USB_Aspen.cpp";
      LOWORD(v248[3]) = 1024;
      *(_DWORD *)((char *)&v248[3] + 2) = 703;
      HIWORD(v248[4]) = 2112;
      *(void *)&v248[5] = v193;
      LOWORD(v248[7]) = 2112;
      *(void *)((char *)&v248[7] + 2) = __p;
      _os_log_impl( &dword_0,  v189,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a USB input port with name %@ and UID %@",  (uint8_t *)v248,  0x26u);
      sub_19DFC((uint64_t)&__p);
    }

    unsigned int v194 = (char *)operator new(0xCuLL);
    int v230 = (std::__shared_weak_count *)(v194 + 12);
    unsigned int v231 = v194 + 12;
    qmemcpy(v194, "gcrvmorvtshv", 12);
    CFTypeRef cf = v194;
    if ((sub_14BFC8() & 1) != 0 || sub_1CC860())
    {
      std::string __p = 0uLL;
      int v237 = 0LL;
      (*(void (**)(void *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(v235, a1);
      sub_373464((char **)&v232, (std::mutex *)a1, 1768845428LL);
      unsigned int v195 = (std::__shared_weak_count *)operator new(0x228uLL);
      v195->__shared_owners_ = 0LL;
      v195->__shared_weak_owners_ = 0LL;
      v195->__vftable = (std::__shared_weak_count_vtbl *)off_485B80;
      sub_7D084(v248, "");
      sub_F9638( (uint64_t)&v195[1],  &qword_490EC8,  (uint64_t)a1,  (uint64_t)&__p,  (uint64_t)buf,  (uint64_t)v235,  (char **)&v232,  (__int128 *)v248);
      v195[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
      LOWORD(v195[22].__shared_weak_owners_) = 0;
      if (SHIBYTE(v248[5]) < 0) {
        operator delete(*(void **)v248);
      }
      v238 = (void **)&v195[1].__vftable;
      int v239 = v195;
      sub_AFDAC((uint64_t)&v238, &v195[4].__shared_owners_, (uint64_t)&v195[1]);
      *(void *)&v228 = v195 + 1;
      *((void *)&v228 + 1) = v195;
      *(void *)int v248 = &v232;
      sub_7A668((void ***)v248);
      sub_19DFC((uint64_t)v235);
      *(void *)int v248 = v195 + 1;
      *(void *)&v248[2] = v195;
    }

    else
    {
      (*(void (**)(CFTypeRef *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(&v232, a1);
      sub_373464((char **)v248, (std::mutex *)a1, 1768845428LL);
      sub_1EE4A0(&__p, &qword_490EC8, (uint64_t)a1, (uint64_t)&cf, (uint64_t)buf, (uint64_t)&v232, (char **)v248);
      unsigned int v195 = (std::__shared_weak_count *)*((void *)&__p + 1);
      std::string::size_type v204 = __p;
      v228 = __p;
      v238 = (void **)v248;
      sub_7A668(&v238);
      sub_19DFC((uint64_t)&v232);
      *(_OWORD *)int v248 = __PAIR128__((unint64_t)v195, v204);
      if (!v195)
      {
LABEL_409:
        sub_3711D4((uint64_t)a1, (void ***)v248);
        uint64_t v198 = *(std::__shared_weak_count **)&v248[2];
        if (*(void *)&v248[2])
        {
          unsigned int v199 = (unint64_t *)(*(void *)&v248[2] + 8LL);
          do
            int v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
          }
        }

        sub_1EE5B0(1768845428LL, v228, (uint64_t)a1);
        std::string::size_type v201 = (std::__shared_weak_count *)*((void *)&v228 + 1);
        if (*((void *)&v228 + 1))
        {
          uint64_t v202 = (unint64_t *)(*((void *)&v228 + 1) + 8LL);
          do
            char v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }

        if (cf) {
          operator delete((void *)cf);
        }
        sub_19DFC((uint64_t)&v241[2]);
        sub_19DFC((uint64_t)&buf[16]);
        sub_19DFC((uint64_t)buf);
        return;
      }
    }

    CFTypeRef v196 = (unint64_t *)&v195->__shared_owners_;
    do
      int v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
    goto LABEL_409;
  }

LABEL_326:
    *a5 = 0;
    goto LABEL_215;
  }

  if (v14 <= 1635020146)
  {
    if (v14 <= 1633970531)
    {
      if (v14 > 1633904998)
      {
        if (v14 == 1633904999) {
          goto LABEL_190;
        }
        if (v14 == 1633906541) {
          goto LABEL_212;
        }
        unsigned __int16 v31 = 29554;
      }

      else
      {
        if (v14 == 1165513555) {
          goto LABEL_212;
        }
        if (v14 == 1633776747) {
          goto LABEL_190;
        }
        unsigned __int16 v31 = 25449;
      }

      int v36 = v31 | 0x61630000;
      goto LABEL_189;
    }

    if (v14 > 1634300530)
    {
      if (v14 <= 1634755427)
      {
        if (v14 != 1634300531)
        {
          int v15 = 1634692199;
          goto LABEL_211;
        }

        uint64_t v140 = *((void *)a1 + 126);
        memset(buf, 0, 24);
        sub_8D668( buf,  *(const void **)(v140 + 144),  *(void *)(v140 + 152),  (uint64_t)(*(void *)(v140 + 152) - *(void *)(v140 + 144)) >> 3);
        int v141 = *(void **)buf;
        sub_A7FE8(*(_BYTE **)buf, *(_BYTE **)&buf[8], a5, a6);
        goto LABEL_347;
      }

      if (v14 != 1634755428)
      {
        int v36 = 1634890859;
LABEL_189:
        if (v14 != v36) {
          goto LABEL_300;
        }
LABEL_190:
        UInt32 v65 = *a5;
        if (v65 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
        {
          unsigned int v66 = (os_log_t *)sub_138E8(13);
          __int16 v49 = *v66;
          if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v352) = a2[2];
            sub_613AC((uint64_t)cf, (unsigned int *)&__p);
            int v67 = cf[23];
            unsigned int v68 = *(_BYTE **)cf;
            UInt32 v69 = *a5;
            int v70 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
            unsigned int v71 = cf;
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v67 < 0) {
              unsigned int v71 = v68;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2736;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v71;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)v362 = v69;
            *(_WORD *)&v362[4] = 1024;
            *(_DWORD *)&v362[6] = v70;
            __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
LABEL_486:
            _os_log_impl(&dword_0, v49, OS_LOG_TYPE_ERROR, v55, buf, 0x28u);
            if ((cf[23] & 0x80000000) != 0) {
              operator delete(*(void **)cf);
            }
            goto LABEL_596;
          }

          goto LABEL_596;
        }

  sub_11E670(v228, (uint64_t)(a2 + 63));
  *(void *)buf = v228;
  sub_A0CF0((void ***)buf);
}

LABEL_213:
        int v56 = (void *)*((void *)a1 + 126);
        uint64_t v57 = 5LL;
        goto LABEL_214;
      }

  sub_85B80((uint64_t *)buf);
  sub_85B80(&v163);
  sub_85B80(&v166);
LABEL_214:
  unsigned __int16 v24 = v52;
LABEL_215:
  operator delete(v24);
}

  if (v307[0])
  {
    v307[1] = v307[0];
    operator delete(v307[0]);
  }

  *(_OWORD *)UInt32 v307 = v306;
  int v308 = v80;
LABEL_216:
  if (!*(_BYTE *)(a1 + 408))
  {
    if ((sub_14D60C() & 1) != 0)
    {
      int v119 = (os_log_t *)sub_138E8(22);
      uint64_t v120 = *v119;
      if (*v119)
      {
        uint64_t v114 = 0;
        if (!os_log_type_enabled(*v119, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_254;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 123;
        _os_log_impl( &dword_0,  v120,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Forcing use of 24-bit stream formats when available",  buf,  0x12u);
      }

LABEL_212:
      UInt32 v79 = *a5;
      if (v79 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4)) {
        goto LABEL_213;
      }
      char v217 = (os_log_t *)sub_138E8(13);
      __int16 v49 = *v217;
      if (!*v217 || !os_log_type_enabled(*v217, OS_LOG_TYPE_ERROR)) {
        goto LABEL_596;
      }
      std::string __p = *(void **)a2;
      LODWORD(v352) = a2[2];
      sub_613AC((uint64_t)cf, (unsigned int *)&__p);
      int v218 = cf[23];
      uint64_t v219 = *(_BYTE **)cf;
      UInt32 v220 = *a5;
      int v221 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
      id v222 = cf;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      if (v218 < 0) {
        id v222 = v219;
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2727;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v222;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)v362 = v220;
      *(_WORD *)&v362[4] = 1024;
      *(_DWORD *)&v362[6] = v221;
      __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: "
            "%u; required: %u).";
      goto LABEL_486;
    }

    if (v14 == 1633970532 || v14 == 1633973868) {
      goto LABEL_212;
    }
    if (v14 != 1634035054) {
      goto LABEL_300;
    }
    UInt32 v42 = *a5;
    if (v42 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      int v256 = (os_log_t *)sub_138E8(13);
      __int16 v49 = *v256;
      if (*v256 && os_log_type_enabled(*v256, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v352) = a2[2];
        sub_613AC((uint64_t)cf, (unsigned int *)&__p);
        int v257 = cf[23];
        v258 = *(_BYTE **)cf;
        UInt32 v259 = *a5;
        int v260 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        int v261 = cf;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v257 < 0) {
          int v261 = v258;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2515;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v261;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)v362 = v259;
        *(_WORD *)&v362[4] = 1024;
        *(_DWORD *)&v362[6] = v260;
        __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed"
              ": %u; required: %u).";
        goto LABEL_486;
      }

    uint64_t result = 121LL;
    goto LABEL_481;
  }

  if (v1 > 1119807501)
  {
    if (v1 != 1119807502)
    {
      if (v1 == 1169082144)
      {
        uint64_t result = 33LL;
        goto LABEL_481;
      }

      goto LABEL_480;
    }

LABEL_596:
      int v337 = 561211770;
LABEL_597:
      int v344 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v344 = &off_4865A0;
      v344[2] = v337;
    }

    int v43 = a2[1];
    if (v43 == 1768845428 || v43 == 1869968496)
    {
      BOOL v44 = v43 == 1768845428;
      uint64_t v45 = 600LL;
      if (!v44) {
        uint64_t v45 = 601LL;
      }
      unsigned int v41 = *((unsigned __int8 *)a1 + v45);
      goto LABEL_356;
    }

    int v336 = (os_log_t *)sub_138E8(13);
    AudioObjectPropertyScope v28 = *v336;
    if (*v336 && os_log_type_enabled(*v336, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2516;
      int v29 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): invalid property scope for kVirtualAudioDevicePr"
            "opertyAudioEnhancementProcessingIsEnabled";
      goto LABEL_589;
    }

    goto LABEL_590;
  }

  if (v14 <= 1651664738)
  {
    if (v14 > 1635152992)
    {
      if (v14 != 1650881394) {
        goto LABEL_300;
      }
      UInt32 v25 = *a5;
      if (v25 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        v238 = (os_log_t *)sub_138E8(13);
        __int16 v49 = *v238;
        if (*v238 && os_log_type_enabled(*v238, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          LODWORD(v352) = a2[2];
          sub_613AC((uint64_t)cf, (unsigned int *)&__p);
          int v239 = cf[23];
          int v240 = *(_BYTE **)cf;
          UInt32 v241 = *a5;
          int v242 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          v243 = cf;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v239 < 0) {
            v243 = v240;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2521;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v243;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)v362 = v241;
          *(_WORD *)&v362[4] = 1024;
          *(_DWORD *)&v362[6] = v242;
          __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_486;
        }

        goto LABEL_596;
      }

      int v26 = a2[1];
      if (v26 == 1768845428 || v26 == 1869968496) {
        goto LABEL_213;
      }
      int v27 = (os_log_t *)sub_138E8(13);
      AudioObjectPropertyScope v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2522;
        int v29 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): invalid property scope for kVirtualAudioDevice"
              "PropertyBufferFrameSizeIsRestricted";
LABEL_589:
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
      }

LABEL_590:
      int v337 = 2003332927;
      goto LABEL_597;
    }

    if (v14 == 1635020147) {
      goto LABEL_212;
    }
    if (v14 != 1635148648) {
      goto LABEL_300;
    }
    unsigned int v58 = *a5;
    if (v58 < (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      std::string::size_type v268 = (os_log_t *)sub_138E8(13);
      __int16 v49 = *v268;
      if (*v268 && os_log_type_enabled(*v268, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v352) = a2[2];
        sub_613AC((uint64_t)cf, (unsigned int *)&__p);
        int v269 = cf[23];
        v270 = *(_BYTE **)cf;
        UInt32 v271 = *a5;
        int v272 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        int v273 = cf;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v269 < 0) {
          int v273 = v270;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2528;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v273;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)v362 = v271;
        *(_WORD *)&v362[4] = 1024;
        *(_DWORD *)&v362[6] = v272;
        __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
        goto LABEL_486;
      }

      goto LABEL_596;
    }

    strcpy(buf, "bsapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_B7D88((CFArrayRef)cf, (uint64_t)a1, (const AudioObjectPropertyAddress *)buf);
    uint64_t v59 = sub_138E8(1);
    if ((*(_BYTE *)(v59 + 8) & 1) != 0)
    {
      __int16 v60 = *(os_log_s **)v59;
      if (*(void *)v59)
      {
        if (os_log_type_enabled(*(os_log_t *)v59, OS_LOG_TYPE_DEBUG))
        {
          v349.__r_.__value_.__r.__words[0] = *(void *)a2;
          LODWORD(v349.__r_.__value_.__r.__words[1]) = a2[2];
          sub_613AC((uint64_t)&__p, (unsigned int *)&v349);
          int v61 = SHIBYTE(v353);
          uint64_t v62 = (void **)__p;
          sub_8F640(&v350, *(unsigned int **)cf, *(unsigned int **)&cf[8]);
          unsigned int v63 = &__p;
          if (v61 < 0) {
            unsigned int v63 = v62;
          }
          unsigned int v64 = &v350;
          if ((v350.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unsigned int v64 = (std::string *)v350.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2530;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v63;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)v362 = v64;
LABEL_340:
          _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AudioObjectGetPropertyData(%s) will return %s.",  buf,  0x26u);
          if (SHIBYTE(v353) < 0) {
            operator delete(__p);
          }
          goto LABEL_344;
        }
      }
    }

    goto LABEL_344;
  }

  if (v14 > 1667658617)
  {
    if (v14 != 1667658618)
    {
      if (v14 == 1668047203) {
        goto LABEL_212;
      }
      if (v14 != 1668247661) {
        goto LABEL_300;
      }
      unsigned int v41 = (*(float (**)(void, uint64_t, uint64_t, void))(**((void **)a1 + 126) + 360LL))( *((void *)a1 + 126),  1685287015LL,  2019976293LL,  0LL);
LABEL_356:
      *(_DWORD *)a6 = v41;
      goto LABEL_215;
    }

    UInt32 v169 = *a5;
    if (v169 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      uint64_t v316 = (os_log_t *)sub_138E8(13);
      __int16 v49 = *v316;
      if (*v316 && os_log_type_enabled(*v316, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v352) = a2[2];
        sub_613AC((uint64_t)cf, (unsigned int *)&__p);
        int v317 = cf[23];
        id v318 = *(_BYTE **)cf;
        UInt32 v319 = *a5;
        int v320 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
        v321 = cf;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v317 < 0) {
          v321 = v318;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2361;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v321;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)v362 = v319;
        *(_WORD *)&v362[4] = 1024;
        *(_DWORD *)&v362[6] = v320;
        __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed"
              ": %u; required: %u).";
        goto LABEL_486;
      }

      goto LABEL_596;
    }

    int v38 = sub_B7670((uint64_t)a1, *(unsigned int *)a6);
    goto LABEL_372;
  }

  if (v14 == 1651664739 || v14 == 1651798898) {
    goto LABEL_212;
  }
  if (v14 != 1651861092) {
    goto LABEL_300;
  }
  UInt32 v33 = *a5;
  if (v33 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
  {
    v244 = (os_log_t *)sub_138E8(13);
    __int16 v49 = *v244;
    if (*v244 && os_log_type_enabled(*v244, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v352) = a2[2];
      sub_613AC((uint64_t)cf, (unsigned int *)&__p);
      int v245 = cf[23];
      std::string::size_type v246 = *(_BYTE **)cf;
      UInt32 v247 = *a5;
      int v248 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
      CFTypeRef v249 = cf;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      if (v245 < 0) {
        CFTypeRef v249 = v246;
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2622;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v249;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)v362 = v247;
      *(_WORD *)&v362[4] = 1024;
      *(_DWORD *)&v362[6] = v248;
      __int16 v55 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: "
            "%u; required: %u).";
      goto LABEL_486;
    }

    goto LABEL_596;
  }

  *(_DWORD *)CFTypeRef cf = 0;
  LODWORD(__p) = 4;
  *(_DWORD *)buf = 1718839674;
  *(void *)&uint8_t buf[4] = *(void *)(a2 + 1);
  (*(void (**)(unsigned int *, _BYTE *, void, void, void **, _BYTE *))(*(void *)a1 + 56LL))( a1,  buf,  0LL,  0LL,  &__p,  cf);
  double v34 = (*(double (**)(unsigned int *))(*(void *)a1 + 632LL))(a1);
  LODWORD(v35) = *(_DWORD *)cf;
  sub_B8B14(a5, a6, (double)v35 / v34);
LABEL_215:
  int v80 = *a2;
  if (*a2 == 1987013741)
  {
    uint64_t v81 = sub_138E8(1);
    uint64_t v82 = sub_138E8(38);
    char v83 = 0;
    uint64_t v84 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v85 = *(void *)(v81 + 8);
    while (1)
    {
      uint64_t v86 = *(int *)&buf[4 * v84];
      char v87 = v83;
      if (((v85 & v86) != 0) != ((*(void *)(v82 + 8) & v86) != 0)) {
        break;
      }
      char v83 = 1;
      uint64_t v84 = 1LL;
      if ((v87 & 1) != 0)
      {
        if ((v85 & 1) == 0) {
          goto LABEL_235;
        }
        goto LABEL_224;
      }
    }

    if ((v85 & v86) == 0) {
      uint64_t v81 = v82;
    }
    if ((*(void *)(v81 + 8) & 1) != 0)
    {
LABEL_224:
      int v88 = *(os_log_s **)v81;
      if (v88 && os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
      {
        v350.__r_.__value_.__r.__words[0] = *(void *)a2;
        LODWORD(v350.__r_.__value_.__r.__words[1]) = a2[2];
        sub_613AC((uint64_t)cf, (unsigned int *)&v350);
        int v89 = cf[23];
        unsigned int v90 = *(_BYTE **)cf;
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)a1 + 96LL))(&__p, a1);
        uint64_t v91 = cf;
        if (v89 < 0) {
          uint64_t v91 = v90;
        }
        if (v353 >= 0) {
          unsigned int v92 = &__p;
        }
        else {
          unsigned int v92 = __p;
        }
        double v93 = *(float *)a6;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2788;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v91;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)v362 = v92;
        *(_WORD *)&v362[8] = 2048;
        *(double *)&v362[10] = v93;
        _os_log_impl(&dword_0, v88, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on VAD '%s': %f.", buf, 0x30u);
        if (SHIBYTE(v353) < 0) {
          operator delete(__p);
        }
        if ((cf[23] & 0x80000000) != 0) {
          operator delete(*(void **)cf);
        }
      }
    }

LABEL_235:
    int v80 = *a2;
    if (*a2 == 1987013741)
    {
      if (a2[2])
      {
        uint64_t v94 = sub_138E8(1);
        if ((*(_BYTE *)(v94 + 8) & 1) != 0)
        {
          unsigned int v95 = *(os_log_s **)v94;
          if (*(void *)v94)
          {
            if (os_log_type_enabled(*(os_log_t *)v94, OS_LOG_TYPE_DEBUG))
            {
              double v96 = *(float *)a6;
              int v97 = a2[2];
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2790;
              *(_WORD *)&_BYTE buf[18] = 2048;
              *(double *)&buf[20] = v96;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)v362 = v97;
              _os_log_impl(&dword_0, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d Individual volume %f for %u", buf, 0x22u);
            }
          }
        }
      }

      int v80 = *a2;
    }
  }

  if (v80 == 1836414053)
  {
    uint64_t v98 = sub_138E8(1);
    uint64_t v99 = sub_138E8(38);
    char v100 = 0;
    uint64_t v101 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v102 = *(void *)(v98 + 8);
    while (1)
    {
      uint64_t v103 = *(int *)&buf[4 * v101];
      char v104 = v100;
      if (((v102 & v103) != 0) != ((*(void *)(v99 + 8) & v103) != 0)) {
        break;
      }
      char v100 = 1;
      uint64_t v101 = 1LL;
      if ((v104 & 1) != 0)
      {
        if ((v102 & 1) == 0) {
          goto LABEL_262;
        }
        goto LABEL_251;
      }
    }

    if ((v102 & v103) == 0) {
      uint64_t v98 = v99;
    }
    if ((*(void *)(v98 + 8) & 1) != 0)
    {
LABEL_251:
      __n128 v105 = *(os_log_s **)v98;
      if (v105 && os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
      {
        v350.__r_.__value_.__r.__words[0] = *(void *)a2;
        LODWORD(v350.__r_.__value_.__r.__words[1]) = a2[2];
        sub_613AC((uint64_t)cf, (unsigned int *)&v350);
        int v106 = cf[23];
        uint64_t v107 = *(_BYTE **)cf;
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)a1 + 96LL))(&__p, a1);
        uint64_t v108 = cf;
        if (v106 < 0) {
          uint64_t v108 = v107;
        }
        if (v353 >= 0) {
          uint64_t v109 = &__p;
        }
        else {
          uint64_t v109 = __p;
        }
        int v110 = *(_DWORD *)a6;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2793;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v108;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)v362 = v109;
        *(_WORD *)&v362[8] = 1024;
        *(_DWORD *)&v362[10] = v110;
        _os_log_impl(&dword_0, v105, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on VAD '%s': %u.", buf, 0x2Cu);
        if (SHIBYTE(v353) < 0) {
          operator delete(__p);
        }
        if ((cf[23] & 0x80000000) != 0) {
          operator delete(*(void **)cf);
        }
      }
    }
  }

                        if (v98 == 1668246894)
                        {
                          if (v338)
                          {
                            int v145 = std::__shared_weak_count::lock(v338);
                            if (v145)
                            {
                              UInt32 v146 = v145;
                              UInt32 v147 = v337;
                              unsigned int v148 = (unint64_t *)&v145->__shared_weak_owners_;
                              do
                                uint64_t v149 = __ldxr(v148);
                              while (__stxr(v149 + 1, v148));
                              int v150 = (unint64_t *)&v145->__shared_owners_;
                              do
                                unsigned int v151 = __ldaxr(v150);
                              while (__stlxr(v151 - 1, v150));
                              if (!v151)
                              {
                                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                                std::__shared_weak_count::__release_weak(v146);
                              }

                              int v152 = std::__shared_weak_count::lock(v146);
                              if (v152)
                              {
                                unint64_t v153 = v152;
                                int v154 = (unint64_t *)&v152->__shared_owners_;
                                do
                                  uint64_t v155 = __ldaxr(v154);
                                while (__stlxr(v155 - 1, v154));
                                if (!v155)
                                {
                                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                                  std::__shared_weak_count::__release_weak(v153);
                                }

                                std::__shared_weak_count::__release_weak(v146);
                                if (v147)
                                {
                                  UInt32 v156 = (os_log_t *)sub_138E8(13);
                                  int v157 = *v156;
                                  if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)buf = 136315394;
                                    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                                    *(_WORD *)&_BYTE buf[12] = 1024;
                                    *(_DWORD *)&buf[14] = 2739;
                                    _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
                                  }

                                  goto LABEL_505;
                                }
                              }

                              else
                              {
                                std::__shared_weak_count::__release_weak(v146);
                              }
                            }
                          }

                          *(void *)buf = 0LL;
                          *(void *)&buf[8] = 0LL;
                          if (v324.i64[1])
                          {
                            unsigned int v191 = std::__shared_weak_count::lock((std::__shared_weak_count *)v324.i64[1]);
                            if (v191)
                            {
                              int v192 = v191;
                              std::string::size_type v193 = v324.i64[0];
                              unsigned int v194 = (unint64_t *)&v191->__shared_weak_owners_;
                              do
                                unsigned int v195 = __ldxr(v194);
                              while (__stxr(v195 + 1, v194));
                              *(void *)buf = v193;
                              *(void *)&buf[8] = v191;
                              CFTypeRef v196 = (unint64_t *)&v191->__shared_owners_;
                              do
                                int v197 = __ldaxr(v196);
                              while (__stlxr(v197 - 1, v196));
                              if (!v197)
                              {
                                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                                std::__shared_weak_count::__release_weak(v192);
                              }
                            }

                            else
                            {
                              *(void *)buf = 0LL;
                              *(void *)&buf[8] = 0LL;
                            }
                          }

                          sub_11C6C8((uint64_t)&__p, (uint64_t *)v316, v310, (uint64_t)v8, (uint64_t)buf);
                          if (*(void *)&buf[8]) {
                            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
                          }
LABEL_160:
                          if (v338) {
                            std::__shared_weak_count::__release_weak(v338);
                          }
                          if (v324.i64[1]) {
                            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v324.i64[1]);
                          }
                          sub_725DC(v4, (uint64_t)&__p);
                          std::string __p = off_4709D0;
                          uint64_t v101 = v333;
                          if (v333)
                          {
                            sub_10AF78(v333 + 2);
                            operator delete(v101);
                          }

                          if (*(_DWORD *)(v4 + 8))
                          {
                            uint64_t v102 = sub_138E8(8);
                            uint64_t v103 = sub_138E8(34);
                            char v104 = 0;
                            __n128 v105 = 0LL;
                            *(void *)buf = 0x100000002LL;
                            int v106 = *(void *)(v102 + 8);
                            while (1)
                            {
                              uint64_t v107 = *(int *)&buf[4 * v105];
                              uint64_t v108 = v104;
                              if (((v106 & v107) != 0) != ((*(void *)(v103 + 8) & v107) != 0)) {
                                break;
                              }
                              char v104 = 1;
                              __n128 v105 = 1LL;
                              if ((v108 & 1) != 0) {
                                goto LABEL_174;
                              }
                            }

                            if ((v106 & v107) == 0) {
                              uint64_t v102 = v103;
                            }
                            int v106 = *(void *)(v102 + 8);
LABEL_174:
                            if ((v106 & 1) != 0)
                            {
                              uint64_t v109 = *(os_log_s **)v102;
                              if (v109)
                              {
                                if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
                                {
                                  int v110 = *(_DWORD *)(v4 + 8);
                                  *(_DWORD *)buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                                  *(_WORD *)&_BYTE buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 2213;
                                  *(_WORD *)&_BYTE buf[18] = 1024;
                                  *(_DWORD *)&buf[20] = v110;
                                  _os_log_impl( &dword_0,  v109,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ActivateForOverride failed with result %d.",  buf,  0x18u);
                                }
                              }
                            }
                          }

                          goto LABEL_178;
                        }

                        if ((~v63 & 3) != 0) {
                          goto LABEL_351;
                        }
                        if (v324.i64[1])
                        {
                          UInt32 v158 = std::__shared_weak_count::lock((std::__shared_weak_count *)v324.i64[1]);
                          if (v158)
                          {
                            uint64_t v159 = v158;
                            UInt32 v160 = v324.i64[0];
                            int v161 = (unint64_t *)&v158->__shared_weak_owners_;
                            do
                              uint64_t v162 = __ldxr(v161);
                            while (__stxr(v162 + 1, v161));
                            uint64_t v163 = (unint64_t *)&v158->__shared_owners_;
                            do
                              char v164 = __ldaxr(v163);
                            while (__stlxr(v164 - 1, v163));
                            if (!v164)
                            {
                              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                              std::__shared_weak_count::__release_weak(v159);
                            }

                            uint64_t v165 = std::__shared_weak_count::lock(v159);
                            if (!v165) {
                              goto LABEL_283;
                            }
                            uint64_t v166 = v165;
                            uint64_t v167 = (unint64_t *)&v165->__shared_owners_;
                            do
                              char v168 = __ldaxr(v167);
                            while (__stlxr(v168 - 1, v167));
                            if (!v168)
                            {
                              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                              std::__shared_weak_count::__release_weak(v166);
                            }

                            if (v160 && v338 && (UInt32 v169 = std::__shared_weak_count::lock(v338)) != 0LL)
                            {
                              UInt32 v170 = v169;
                              UInt32 v171 = v337;
                              uint64_t v172 = (unint64_t *)&v169->__shared_weak_owners_;
                              do
                                uint64_t v173 = __ldxr(v172);
                              while (__stxr(v173 + 1, v172));
                              char v174 = (unint64_t *)&v169->__shared_owners_;
                              do
                                uint64_t v175 = __ldaxr(v174);
                              while (__stlxr(v175 - 1, v174));
                              if (!v175)
                              {
                                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                                std::__shared_weak_count::__release_weak(v170);
                              }

                              uint64_t v176 = std::__shared_weak_count::lock(v170);
                              if (v176)
                              {
                                uint64_t v177 = v176;
                                char v178 = (unint64_t *)&v176->__shared_owners_;
                                do
                                  unsigned int v179 = __ldaxr(v178);
                                while (__stlxr(v179 - 1, v178));
                                if (!v179)
                                {
                                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                                  std::__shared_weak_count::__release_weak(v177);
                                }

                                int v8 = (std::__shared_weak_count *)v315;
                                int v9 = v316;
                              }

                              else
                              {
                                UInt32 v171 = 0LL;
                              }

                              std::__shared_weak_count::__release_weak(v170);
                              std::__shared_weak_count::__release_weak(v159);
                              if (v171)
                              {
LABEL_351:
                                *(_OWORD *)&v325[3] = *v302;
                                buf[16] = v98 == 1668510820;
                                *(_OWORD *)&buf[17] = *(_OWORD *)v325;
                                *(_DWORD *)&buf[32] = *(_DWORD *)&v325[15];
                                *(void *)buf = v310;
                                *(void *)&buf[8] = v8 + 1;
                                int v342 = 0LL;
                                unsigned int v343 = 0LL;
                                id v222 = sub_11DDE4((uint64_t *)buf);
                                UInt32 v301 = v223;
                                int v224 = v222;
                                uint64_t v300 = *(void *)buf;
                                if (*(void *)buf == v222)
                                {
LABEL_477:
                                  std::string __p = off_4709D0;
                                  int v332 = (void *)(&dword_0 + 1);
                                  int v333 = 0LL;
                                  LOBYTE(v334) = 0;
                                  LOBYTE(v335) = 0;
                                  goto LABEL_160;
                                }

                                int v305 = v4;
                                int v299 = (uint64_t)(v223 + 1);
                                while (1)
                                {
                                  sub_70C60((int64x2_t *)v325, v9, v224 + 16, v310, (uint64_t)v8);
                                  unsigned int v303 = *(void **)&v325[8];
                                  if (*(void *)v325 != *(void *)&v325[8]) {
                                    break;
                                  }
LABEL_470:
                                  *(void *)std::string::size_type v340 = v325;
                                  sub_11E38C((void ***)v340);
                                  int v224 = *(void *)(v224 + 8);
                                  int v284 = *v301;
                                  if (v224 == *v301)
                                  {
                                    int v8 = (std::__shared_weak_count *)v315;
                                    int v9 = v316;
                                  }

                                  else
                                  {
                                    int v8 = (std::__shared_weak_count *)v315;
                                    int v9 = v316;
                                    while (!sub_11E3FC(v299, v224 + 16))
                                    {
                                      int v224 = *(void *)(v224 + 8);
                                      if (v224 == v284)
                                      {
                                        int v224 = v284;
                                        break;
                                      }
                                    }
                                  }

                                  if (v224 == v300) {
                                    goto LABEL_477;
                                  }
                                }

                                int v225 = *(void **)v325;
                                while (1)
                                {
                                  int v308 = v225;
                                  id v226 = *v225;
                                  int v227 = *(void **)(v226 + 24);
                                  int v314 = (void *)(v226 + 16);
                                  if (v227 != (void *)(v226 + 16)) {
                                    break;
                                  }
LABEL_468:
                                  int v225 = v308 + 1;
                                  if (v308 + 1 == v303)
                                  {
                                    int v285 = sub_138E8(8);
                                    int v8 = (std::__shared_weak_count *)v315;
                                    int v9 = v316;
                                    if ((*(_BYTE *)(v285 + 8) & 1) != 0)
                                    {
                                      uint64_t v286 = *(os_log_s **)v285;
                                      if (*(void *)v285)
                                      {
                                        if (os_log_type_enabled(*(os_log_t *)v285, OS_LOG_TYPE_DEBUG))
                                        {
                                          *(_DWORD *)std::string::size_type v340 = 136315394;
                                          *(void *)&v340[4] = "RoutingManager.cpp";
                                          *(_WORD *)&v340[12] = 1024;
                                          *(_DWORD *)&v340[14] = 2793;
                                          _os_log_impl( &dword_0,  v286,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found an override match for primary route in the database...",  v340,  0x12u);
                                        }
                                      }
                                    }

                                    memset(v340, 0, 24);
                                    sub_11DE5C( (uint64_t)&__p,  (uint64_t *)v316,  (std::string::size_type)v325,  *(uint64_t **)(v224 + 104),  v315,  (uint64_t *)v340);
                                    sub_11E670((uint64_t **)v340, (uint64_t)&v316[21]);
                                    int v339 = v340;
                                    sub_A0CF0((void ***)&v339);
                                    *(void *)std::string::size_type v340 = v325;
                                    sub_11E38C((void ***)v340);
                                    goto LABEL_160;
                                  }
                                }

                                while (1)
                                {
                                  if (!v317)
                                  {
LABEL_396:
                                    id v250 = 0;
                                    LOBYTE(v251) = 0;
                                    if (!v309) {
                                      goto LABEL_452;
                                    }
                                    goto LABEL_402;
                                  }

                                  v228 = (std::__shared_weak_count *)v227[3];
                                  if (v228)
                                  {
                                    UInt32 v229 = std::__shared_weak_count::lock(v228);
                                    int v8 = v229;
                                    if (v229)
                                    {
                                      int v230 = v227[2];
                                      unsigned int v231 = (unint64_t *)&v229->__shared_weak_owners_;
                                      do
                                        int v232 = __ldxr(v231);
                                      while (__stxr(v232 + 1, v231));
                                      int v233 = (unint64_t *)&v229->__shared_owners_;
                                      do
                                        v234 = __ldaxr(v233);
                                      while (__stlxr(v234 - 1, v233));
                                      if (!v234)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                                        std::__shared_weak_count::__release_weak(v8);
                                      }
                                    }

                                    else
                                    {
                                      int v230 = 0LL;
                                    }
                                  }

                                  else
                                  {
                                    int v230 = 0LL;
                                    int v8 = 0LL;
                                  }

                                  if (!v324.i64[1]) {
                                    break;
                                  }
                                  UInt32 v235 = std::__shared_weak_count::lock((std::__shared_weak_count *)v324.i64[1]);
                                  int v9 = v235;
                                  if (v235)
                                  {
                                    int v236 = v324.i64[0];
                                    int v237 = (unint64_t *)&v235->__shared_weak_owners_;
                                    do
                                      v238 = __ldxr(v237);
                                    while (__stxr(v238 + 1, v237));
                                    int v239 = (unint64_t *)&v235->__shared_owners_;
                                    do
                                      int v240 = __ldaxr(v239);
                                    while (__stlxr(v240 - 1, v239));
                                    if (!v240)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                                      std::__shared_weak_count::__release_weak(v9);
                                      if (!v8) {
                                        goto LABEL_384;
                                      }
                                      goto LABEL_378;
                                    }

                                    goto LABEL_377;
                                  }

                                  int v236 = 0LL;
                                  if (!v8)
                                  {
LABEL_384:
                                    int v242 = 0LL;
                                    UInt32 v241 = 0LL;
                                    if (!v9) {
                                      goto LABEL_390;
                                    }
                                    goto LABEL_385;
                                  }

      uint64_t v114 = 0;
      goto LABEL_254;
    }

    int v121 = sub_5954C();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v121 + 24LL))(v121) != 1752260981
      || (int v122 = *(void **)(a1 + 120), v122 == (void *)(a1 + 112)))
    {
LABEL_253:
      uint64_t v114 = 1;
      goto LABEL_254;
    }

    while (1)
    {
      int v123 = (std::__shared_weak_count *)v122[3];
      if (!v123) {
        goto LABEL_252;
      }
      v124 = std::__shared_weak_count::lock(v123);
      *(void *)&v319[8] = v124;
      if (!v124) {
        goto LABEL_252;
      }
      uint64_t v125 = v124;
      uint64_t v126 = v122[2];
      *(void *)UInt32 v319 = v126;
      if (v126 && (*(_WORD *)(v126 + 184) & 0x200) != 0)
      {
        int v128 = (os_log_t *)sub_138E8(22);
        uint64_t v129 = *v128;
        if (!*v128) {
          goto LABEL_246;
        }
        UInt32 v127 = 0;
        if (os_log_type_enabled(*v128, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 114;
          _os_log_impl( &dword_0,  v129,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Format culling policy is using kCullLessThan24Bit based on GetHighQualityPCMPreferenceState()",  buf,  0x12u);
LABEL_246:
          UInt32 v127 = 0;
        }
      }

      else
      {
        UInt32 v127 = 1;
      }

      p_shared_owners = (unint64_t *)&v125->__shared_owners_;
      do
        int v131 = __ldaxr(p_shared_owners);
      while (__stlxr(v131 - 1, p_shared_owners));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }

      if ((v127 & 1) == 0) {
        goto LABEL_235;
      }
LABEL_252:
      int v122 = (void *)v122[1];
      if (v122 == (void *)(a1 + 112)) {
        goto LABEL_253;
      }
    }
  }

  int v110 = (os_log_t *)sub_138E8(22);
  uint64_t v111 = *v110;
  if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_DEFAULT))
  {
    if (!*(_BYTE *)(a1 + 408)) {
      goto LABEL_514;
    }
    uint64_t v112 = "kCullLessThan24Bit";
    char v113 = *(_DWORD *)(a1 + 404);
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_DWORD *)buf = 136315650;
    if (v113 == 1) {
      uint64_t v112 = "kCullGreaterThan16Bit";
    }
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 97;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v112;
    _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Format culling policy is using %s based on mCullingPolicyOption",  buf,  0x1Cu);
  }

  if (!*(_BYTE *)(a1 + 408)) {
LABEL_514:
  }
    sub_8DEEC();
  uint64_t v114 = *(_DWORD *)(a1 + 404);
  uint64_t v115 = sub_14D60C();
  if (v114 == 1) {
    uint64_t v116 = v115;
  }
  else {
    uint64_t v116 = 0;
  }
  if (v116 == 1)
  {
    char v117 = (os_log_t *)sub_138E8(22);
    int v118 = *v117;
    if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 99;
      _os_log_impl( &dword_0,  v118,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Ignoring preference to force 24-bit stream formats because 16-bit stream formats were specified in the routing database.",  buf,  0x12u);
    }

    goto LABEL_253;
  }

LABEL_282:
  if (v13) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

void sub_1F6E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, void *__p, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (v49) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1FA90(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32LL))(a1) & 1) == 0)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    char v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = a2[2];
      sub_613AC((uint64_t)&v35, (unsigned int *)&v33);
      unsigned __int16 v24 = v36 >= 0 ? &v35 : *(AudioObjectPropertyAddress **)&v35.mSelector;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 2125;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v24;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  __p,  0x1Cu);
      if (v36 < 0) {
        operator delete(*(void **)&v35.mSelector);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    int v26 = (os_log_t *)sub_138E8(13);
    int v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = a2[2];
      sub_613AC((uint64_t)&v35, (unsigned int *)&v33);
      AudioObjectPropertyScope v28 = v36 >= 0 ? &v35 : *(AudioObjectPropertyAddress **)&v35.mSelector;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 2126;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v28;
      __int16 v38 = 1024;
      int v39 = a3;
      __int16 v40 = 2048;
      uint64_t v41 = a4;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (v36 < 0) {
        operator delete(*(void **)&v35.mSelector);
      }
    }

    int v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v29 = &off_4865A0;
    v29[2] = 561211770;
  }

  if (*a2 == 1651798132) {
    return *((unsigned int *)a1 + 273);
  }
  sub_6DD4();
  int v9 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v10 = *a2;
  uint64_t v8 = 4LL;
  if (*a2 <= 1701733223)
  {
    if (v10 <= 1668443503)
    {
      if (v10 <= 1635020146)
      {
        if (v10 > 1633970531)
        {
          if (v10 > 1634300530)
          {
            if (v10 <= 1634755427)
            {
              if (v10 != 1634300531)
              {
                int v11 = 1634692199;
                goto LABEL_149;
              }

LABEL_159:
              uint64_t v20 = a1[126];
              memset(__p, 0, 24);
              sub_8D668( __p,  *(const void **)(v20 + 144),  *(void *)(v20 + 152),  (uint64_t)(*(void *)(v20 + 152) - *(void *)(v20 + 144)) >> 3);
              uint64_t v21 = *(void **)__p;
              uint64_t v8 = (*(_DWORD *)&__p[8] - *(_DWORD *)__p) & 0xFFFFFFF8;
              if (!*(void *)__p) {
                goto LABEL_153;
              }
LABEL_164:
              operator delete(v21);
              goto LABEL_153;
            }

            if (v10 != 1634755428)
            {
              int v11 = 1634890859;
              goto LABEL_149;
            }

      unsigned int v63 = (std::string *)buf;
LABEL_160:
      sub_1BB88((uint64_t *)v63);
      return;
    }

    uint64_t v57 = (std::mutex *)(a1 + 568);
    std::mutex::lock((std::mutex *)(a1 + 568));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      int v272 = (os_log_t *)sub_138E8(13);
      int v273 = *v272;
      if (*v272 && os_log_type_enabled(*v272, OS_LOG_TYPE_ERROR))
      {
        int v339 = *(CFTypeRef *)a2;
        LODWORD(cf) = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
        v274 = (char)__p.__r_.__value_.__s.__size_;
        int v275 = __p.__r_.__value_.__r.__words[0];
        v276 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        UInt32 v277 = &__p;
        buf[0] = 136316162;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        if (v274 < 0) {
          UInt32 v277 = (std::string *)v275;
        }
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1788;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v277;
        LOWORD(buf[7]) = 1024;
        *(_DWORD *)((char *)&buf[7] + 2) = a5;
        HIWORD(buf[8]) = 1024;
        buf[9] = v276;
        _os_log_impl( &dword_0,  v273,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          (uint8_t *)buf,
          0x28u);
      }

      int v278 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v278 = &off_4865A0;
      v278[2] = 561211770;
    }

    memset(buf, 0, 24);
    sub_8D668( buf,  *(const void **)(a1 + 144),  *(void *)(a1 + 152),  (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
    uint64_t v107 = *(void **)buf;
    if (*(void *)buf != *(void *)&buf[2])
    {
      while (*v107 != *(void *)a6)
      {
        if (++v107 == *(void **)&buf[2])
        {
          uint64_t v107 = *(void **)&buf[2];
          break;
        }
      }
    }

    if (v107 == *(void **)&buf[2]) {
      sub_9FD04((uint64_t)buf, a6);
    }
LABEL_285:
    (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 496LL))(a1, buf);
    if (*(void *)buf)
    {
      *(void *)&buf[2] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    std::mutex::unlock(v57);
    return;
  }

  if (v13 == 1633776747)
  {
    if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
    {
      int v261 = (os_log_t *)sub_138E8(13);
      v262 = *v261;
      if (*v261 && os_log_type_enabled(*v261, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1827;
        _os_log_impl( &dword_0,  v262,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      int v263 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v263, "Precondition failure.");
    }

    sub_9D478(&__p, a1);
    __n128 v105 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
    if (!__p.__r_.__value_.__r.__words[0]) {
      goto LABEL_257;
    }
    if (sub_9D704((unsigned __int8 *)__p.__r_.__value_.__l.__data_))
    {
      uint64_t v298 = (os_log_t *)sub_138E8(13);
      int v299 = *v298;
      if (*v298 && os_log_type_enabled(*v298, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1831;
        uint64_t v300 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Device is already controlled.";
LABEL_560:
        _os_log_impl(&dword_0, v299, OS_LOG_TYPE_ERROR, v300, (uint8_t *)buf, 0x12u);
      }
    }

    else
    {
      sub_9FDDC((uint64_t)v105, *a6);
      if ((sub_9D704(v105) & 1) != 0)
      {
        sub_9FF14();
LABEL_257:
        unsigned __int16 v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_) {
          return;
        }
        int v106 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          uint64_t v17 = __ldaxr(v106);
        while (__stlxr(v17 - 1, v106));
        goto LABEL_260;
      }

      UInt32 v301 = (os_log_t *)sub_138E8(13);
      int v299 = *v301;
      if (*v301 && os_log_type_enabled(*v301, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1835;
        uint64_t v300 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Failed to take control of device.";
        goto LABEL_560;
      }
    }

    int v302 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v302 = &off_4865A0;
    v302[2] = 1852797029;
  }

  if (v13 != 1633904999)
  {
    if (v13 == 1633907570)
    {
      if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
      {
        int v245 = (os_log_t *)sub_138E8(13);
        std::string::size_type v246 = *v245;
        if (*v245 && os_log_type_enabled(*v245, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1861;
          _os_log_impl( &dword_0,  v246,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

        UInt32 v247 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v247, "Precondition failure.");
      }

      sub_9D478(&__p, a1);
      int v14 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        if ((sub_A00A8((uint64_t)__p.__r_.__value_.__l.__data_, (int)a4->isa) & 1) == 0)
        {
          UInt32 v289 = (os_log_t *)sub_138E8(13);
          int v290 = *v289;
          if (*v289 && os_log_type_enabled(*v289, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1867;
            _os_log_impl( &dword_0,  v290,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Do not have control of device.",  (uint8_t *)buf,  0x12u);
          }

          v291 = __cxa_allocate_exception(0x10uLL);
          *(void *)v291 = &off_4865A0;
          v291[2] = 1852797029;
        }

        (*(void (**)(std::string::size_type, double))(*(void *)v14 + 112LL))(v14, *(double *)a6);
        sub_9FF14();
      }

      unsigned __int16 v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        UInt32 v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          uint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
LABEL_260:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }

        return;
      }

      return;
    }

  uint64_t v107 = *(_DWORD *)(a3 + 264);
  uint64_t v108 = 0.0;
  if ((sub_1B4AFC(v12, v107) & 1) != 0)
  {
LABEL_160:
    LOBYTE(v109) = 0;
    goto LABEL_189;
  }

  sub_1B4BD8((uint64_t)buf, a7, v107, a5);
  int v110 = sub_2D8794(a6, (uint64_t)buf);
  if (*(void *)&v147[2])
  {
    unsigned int v148 = *(void *)&v147[2];
    operator delete(*(void **)&v147[2]);
  }

  if (BYTE4(v110))
  {
    uint64_t v108 = *(float *)&v110;
    uint64_t v109 = HIDWORD(v110);
  }

  else
  {
    int v118 = sub_2CFE58(a8, a7);
    if (!v119) {
      goto LABEL_160;
    }
    int v122 = *(void *)(v118 + 8);
    uint64_t v120 = v118 + 8;
    int v121 = v122;
    if (!v122) {
      goto LABEL_160;
    }
    int v123 = v120;
    do
    {
      v124 = *(_DWORD *)(v121 + 28);
      uint64_t v125 = v124 >= v12;
      else {
        uint64_t v126 = (unint64_t *)(v121 + 8);
      }
      if (v125) {
        int v123 = v121;
      }
      int v121 = *v126;
    }

    while (*v126);
    uint64_t v108 = *(float *)(v123 + 32);
    LOBYTE(v109) = 1;
  }

  uint64_t v111 = sub_138E8(20);
  uint64_t v112 = sub_138E8(38);
  char v113 = 0;
  uint64_t v114 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v115 = *(void *)(v111 + 8);
  while (1)
  {
    uint64_t v116 = *(int *)&buf[4 * v114];
    char v117 = v113;
    if (((v115 & v116) != 0) != ((*(void *)(v112 + 8) & v116) != 0)) {
      break;
    }
    char v113 = 1;
    uint64_t v114 = 1LL;
    if ((v117 & 1) != 0)
    {
      if ((v115 & 1) == 0) {
        goto LABEL_189;
      }
      goto LABEL_186;
    }
  }

  if ((v115 & v116) == 0) {
    uint64_t v111 = v112;
  }
  if ((*(void *)(v111 + 8) & 1) != 0)
  {
LABEL_186:
    UInt32 v127 = *(os_log_s **)v111;
    if (v127 && os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      UInt32 v142 = 1024;
      unsigned int v143 = 137;
      int v144 = 2048;
      int v145 = v108;
      _os_log_impl(&dword_0, v127, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning maximum volume %f.", buf, 0x1Cu);
    }
  }

LABEL_146:
          uint64_t v8 = 8LL;
          goto LABEL_153;
        }

        if (v10 > 1633904998)
        {
          if (v10 == 1633904999 || v10 == 1633906541) {
            goto LABEL_150;
          }
          unsigned __int16 v15 = 29554;
        }

        else
        {
          if (v10 == 1165513555 || v10 == 1633776747) {
            goto LABEL_150;
          }
          unsigned __int16 v15 = 25449;
        }

        int v11 = v15 | 0x61630000;
LABEL_149:
        if (v10 == v11) {
          goto LABEL_150;
        }
LABEL_165:
        uint64_t v18 = sub_37AEC(a1, a2, a3, a4);
        goto LABEL_152;
      }

      if (v10 <= 1651664738)
      {
        if (v10 > 1635152992)
        {
          int v13 = 1650881394;
          goto LABEL_126;
        }

        if (v10 == 1635020147) {
          goto LABEL_150;
        }
        if (v10 != 1635148648) {
          goto LABEL_165;
        }
        *(void *)&v35.int mSelector = 0x676C6F6270617362LL;
        v35.mElement = 0;
        sub_B7D88((CFArrayRef)__p, (uint64_t)a1, &v35);
        goto LABEL_163;
      }

      if (v10 > 1667658617)
      {
        if (v10 == 1667658618) {
          goto LABEL_153;
        }
        if (v10 == 1668047203) {
          goto LABEL_150;
        }
        int v13 = 1668247661;
        goto LABEL_126;
      }

      if (v10 == 1651664739 || v10 == 1651798898) {
        goto LABEL_150;
      }
      int v12 = 1651861092;
      goto LABEL_145;
    }

    if (v10 <= 1684500593)
    {
      if (v10 > 1684238450)
      {
        if (v10 <= 1684370275)
        {
          if (v10 != 1684238451 && v10 != 1684304756)
          {
            int v11 = 1684365924;
            goto LABEL_149;
          }

          goto LABEL_146;
        }

        if (v10 <= 1684498543)
        {
          if (v10 == 1684370276) {
            goto LABEL_150;
          }
          int v13 = 1684498541;
LABEL_126:
          if (v10 == v13) {
            goto LABEL_153;
          }
          goto LABEL_165;
        }

        if (v10 == 1684498544) {
          goto LABEL_153;
        }
        int v11 = 1684500589;
        goto LABEL_149;
      }

      if (v10 > 1684104050)
      {
        if (v10 == 1684104051) {
          goto LABEL_146;
        }
        if (v10 == 1684107364) {
          goto LABEL_150;
        }
        int v12 = 1684236338;
        goto LABEL_145;
      }

      if (v10 != 1668443504 && v10 != 1668705648)
      {
        int v12 = 1684104048;
        goto LABEL_145;
      }

void sub_2075C(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207BC(uint64_t a1, AudioObjectPropertyAddress *a2, uint64_t a3, void *a4)
{
  if (((*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16LL))(a1, a2) & 1) == 0)
  {
    unsigned __int16 v15 = (os_log_t *)sub_138E8(13);
    UInt32 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v23);
      uint64_t v17 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(void *)AudioObjectPropertyScope v28 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v28[8] = 1024;
      *(_DWORD *)&v28[10] = 1161;
      __int16 v29 = 2080;
      int v30 = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    char v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v23);
      if (v26 >= 0) {
        uint64_t v21 = __p;
      }
      else {
        uint64_t v21 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316162;
      *(void *)AudioObjectPropertyScope v28 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v28[8] = 1024;
      *(_DWORD *)&v28[10] = 1162;
      __int16 v29 = 2080;
      int v30 = v21;
      __int16 v31 = 1024;
      int v32 = a3;
      __int16 v33 = 2048;
      int v34 = a4;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v22 = &off_4865A0;
    v22[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  uint64_t v9 = 4LL;
  if ((int)a2->mSelector > 1752657011)
  {
    if (mSelector > 1936744802)
    {
      if (mSelector <= 1953002092)
      {
        if (mSelector <= 1937138531)
        {
          switch(mSelector)
          {
            case 1936744803:
              return v9;
            case 1936876644:
              return sub_A9C70(a1, a2, a3, (uint64_t)a4);
            case 1936879204:
              return sub_A9E5C(a1, a2, a3, (uint64_t)a4);
          }

          return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
        }

        if (mSelector > 1952997987)
        {
          if (mSelector == 1952997988) {
            return 8LL;
          }
          int v11 = 1952998002;
          goto LABEL_102;
        }

        if (mSelector == 1937138532) {
          goto LABEL_90;
        }
        int v12 = 1937204590;
      }

      else if (mSelector > 1986225265)
      {
        if (mSelector > 1986361443)
        {
          if (mSelector == 1986361444) {
            return v9;
          }
          int v12 = 2004053366;
        }

        else
        {
          if (mSelector == 1986225266) {
            goto LABEL_90;
          }
          int v12 = 1986225268;
        }
      }

      else
      {
        if (mSelector > 1953719147)
        {
          if (mSelector == 1953719148) {
            return v9;
          }
          int v10 = 1969844082;
          goto LABEL_98;
        }

        if (mSelector == 1953002093) {
          goto LABEL_90;
        }
        int v12 = 1953002354;
      }
    }

    else if (mSelector <= 1885631345)
    {
      if (mSelector > 1819569762)
      {
        if (mSelector > 1869575793)
        {
          if (mSelector == 1869575794)
          {
            if (a2->mScope != 1768845428) {
              return 0LL;
            }
            *(_DWORD *)buf = 0;
            LOBYTE(__p[0]) = 0;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint8_t *, void **, void, void))(*(void *)a1 + 392LL))( a1,  1685287015LL,  1818980210LL,  buf,  __p,  0LL,  0LL))
            {
              return *(unsigned int *)buf;
            }

            else
            {
              return 4LL;
            }
          }

          int v10 = 1885434482;
          goto LABEL_98;
        }

        if (mSelector == 1819569763) {
          return v9;
        }
        if (mSelector == 1869574756) {
          return 16 * (a2->mScope == 1768845428);
        }
        return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
      }

      if (mSelector == 1752657012 || mSelector == 1769302372) {
        return v9;
      }
      int v12 = 1818326127;
    }

    else if (mSelector > 1919773027)
    {
      if (mSelector > 1935762280)
      {
        if (mSelector == 1935762281) {
          goto LABEL_90;
        }
        int v11 = 1935962992;
        goto LABEL_102;
      }

      if (mSelector == 1919773028) {
        return 8LL;
      }
      int v12 = 1934456180;
    }

    else
    {
      if (mSelector <= 1886413425)
      {
        if (mSelector == 1885631346) {
          goto LABEL_90;
        }
        int v11 = 1886413412;
        goto LABEL_102;
      }

      if (mSelector == 1886413426) {
        return 8LL;
      }
      int v12 = 1886807154;
    }

    goto LABEL_89;
  }

  if (mSelector > 1651664738)
  {
    if (mSelector <= 1684498540)
    {
      if (mSelector <= 1668576113)
      {
        if (mSelector == 1651664739) {
          goto LABEL_90;
        }
        if (mSelector != 1651798898)
        {
          int v10 = 1668047203;
          goto LABEL_98;
        }

        return 8LL;
      }

      if (mSelector > 1684365923)
      {
        if (mSelector == 1684365924) {
          goto LABEL_90;
        }
        int v12 = 1684370276;
      }

      else
      {
        if (mSelector == 1668576114) {
          goto LABEL_90;
        }
        int v12 = 1684103987;
      }
    }

    else
    {
      if (mSelector <= 1685087595)
      {
        if (mSelector > 1684500588)
        {
          if (mSelector == 1684500589) {
            return sub_AA244(a1, a2, a3, (unsigned int *)a4);
          }
          if (mSelector == 1684500594) {
            return sub_AA5B4(a1, a2, a3, (unsigned int *)a4);
          }
          return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
        }

        if (mSelector == 1684498541) {
          return v9;
        }
        int v10 = 1684498544;
        goto LABEL_98;
      }

      if (mSelector <= 1685483629)
      {
        if (mSelector != 1685087596)
        {
          if (mSelector == 1685287011) {
            return sub_AA0D0(a4);
          }
          return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
        }

        goto LABEL_90;
      }

      if (mSelector == 1685483630) {
        return v9;
      }
      int v12 = 1718383987;
    }

LABEL_89:
    if (mSelector == v12) {
      goto LABEL_90;
    }
    return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
  }

  if (mSelector > 1634692198)
  {
    if (mSelector <= 1635152992)
    {
      if (mSelector != 1634692199)
      {
        if (mSelector == 1634890859) {
          return v9;
        }
        int v10 = 1635020147;
        goto LABEL_98;
      }

      goto LABEL_90;
    }

    int v10 = 1650881394;
LABEL_98:
    if (mSelector != v10) {
      return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
    }
    return v9;
  }

  if (mSelector <= 1633907569)
  {
    if (mSelector <= 1633903464)
    {
      if (mSelector != 1165513555)
      {
        int v10 = 1633776747;
        goto LABEL_98;
      }

  unsigned int v73 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  int v74 = (std::__shared_weak_count *)*((void *)v22 + 143);
  *((_OWORD *)v22 + 71) = v73;
  if (v74)
  {
    int v75 = (unint64_t *)&v74->__shared_owners_;
    do
      UInt32 v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }

  int v77 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unsigned int v78 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      UInt32 v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }

  if (!*((void *)v22 + 142))
  {
    unsigned int v95 = (os_log_t *)sub_138E8(13);
    double v96 = *v95;
    if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 102;
      _os_log_impl(&dword_0, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Postcondition failure.");
    goto LABEL_127;
  }

  int v80 = (std::__shared_weak_count *)operator new(0x20uLL);
  v80->__shared_owners_ = 0LL;
  uint64_t v81 = (unint64_t *)&v80->__shared_owners_;
  v80->__vftable = (std::__shared_weak_count_vtbl *)&off_473CB0;
  v80->__shared_weak_owners_ = 0LL;
  v80[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  *(void *)&uint64_t v82 = v22;
  *((void *)&v82 + 1) = v80;
  char v83 = (std::__shared_weak_count *)*((void *)v22 + 2);
  if (!v83)
  {
    do
      char v87 = __ldxr(v81);
    while (__stxr(v87 + 1, v81));
    int v88 = (unint64_t *)&v80->__shared_weak_owners_;
    do
      int v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    *((void *)v22 + 1) = v22;
    *((void *)v22 + 2) = v80;
    do
LABEL_110:
      unsigned int v90 = __ldaxr(v81);
    while (__stlxr(v90 - 1, v81));
    if (!v90)
    {
      uint64_t v102 = v82;
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      uint64_t v82 = v102;
    }

    goto LABEL_113;
  }

  if (v83->__shared_owners_ == -1)
  {
    do
      uint64_t v84 = __ldxr(v81);
    while (__stxr(v84 + 1, v81));
    uint64_t v101 = v82;
    uint64_t v85 = (unint64_t *)&v80->__shared_weak_owners_;
    do
      uint64_t v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    *((void *)v22 + 1) = v22;
    *((void *)v22 + 2) = v80;
    std::__shared_weak_count::__release_weak(v83);
    uint64_t v82 = v101;
    goto LABEL_110;
  }

        sub_7D898((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v70);
        return v14;
      }

      v29.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      int v30 = sub_138E8(13);
      if ((*(_BYTE *)(v30 + 8) & 1) != 0)
      {
        __int16 v31 = *(os_log_s **)v30;
        if (*(void *)v30)
        {
          if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
          {
            buf.int mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v60 = 1024;
            int v61 = 257;
            uint64_t v62 = 2080;
            *(void *)unsigned int v63 = "with timeout";
            *(_WORD *)&v63[8] = 1024;
            *(_DWORD *)&v63[10] = a1;
            _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.int mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v70;
      __lk.__owns_ = 1;
      std::mutex::lock(&v70);
      v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v53)
      {
        __int16 v33 = v32.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v33 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_45;
          }
          v34.__d_.__rep_ = v33 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v34.__d_.__rep_ >= 1) {
            break;
          }
LABEL_63:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v33 || v53) {
            goto LABEL_45;
          }
        }

        std::chrono::steady_clock::now();
        v35.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v35.__d_.__rep_)
        {
          char v36 = 0LL;
          goto LABEL_59;
        }

        if (v35.__d_.__rep_ < 1)
        {
          char v36 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v35.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            char v36 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_59;
          }

        sub_7D898((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v67);
        return v15;
      }

      v27.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      AudioObjectPropertyScope v28 = sub_138E8(13);
      if ((*(_BYTE *)(v28 + 8) & 1) != 0)
      {
        __int16 v29 = *(os_log_s **)v28;
        if (*(void *)v28)
        {
          if (os_log_type_enabled(*(os_log_t *)v28, OS_LOG_TYPE_DEBUG))
          {
            buf.int mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            uint64_t v57 = 1024;
            unsigned int v58 = 257;
            uint64_t v59 = 2080;
            *(void *)__int16 v60 = "with timeout";
            *(_WORD *)&v60[8] = 1024;
            *(_DWORD *)&v60[10] = a1;
            _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.int mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v67;
      __lk.__owns_ = 1;
      std::mutex::lock(&v67);
      v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v50)
      {
        __int16 v31 = v30.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v31 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_52;
          }
          v32.__d_.__rep_ = v31 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v32.__d_.__rep_ >= 1) {
            break;
          }
LABEL_70:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v31 || v50) {
            goto LABEL_52;
          }
        }

        std::chrono::steady_clock::now();
        v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v33.__d_.__rep_)
        {
          int v34 = 0LL;
          goto LABEL_66;
        }

        if (v33.__d_.__rep_ < 1)
        {
          int v34 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v33.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            int v34 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_66;
          }

  if (!v19) {
    goto LABEL_96;
  }
  char v83 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 120LL))(a1[1]);
  sub_F9584((uint64_t)buf, 1886152052LL, v83);
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128LL))(&theString);
  sub_48E98(v147, theString);
  uint64_t v84 = std::string::append((std::string *)v147, "-reference", 0xAuLL);
  uint64_t v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  uint64_t cap = v84->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v85;
  v84->__r_.__value_.__l.__size_ = 0LL;
  v84->__r_.__value_.__l.__cap_ = 0LL;
  v84->__r_.__value_.__r.__words[0] = 0LL;
  if ((v147[23] & 0x80000000) != 0) {
    operator delete(*(void **)v147);
  }
  sub_19DFC((uint64_t)&theString);
  uint64_t v86 = sub_138E8(17);
  char v87 = sub_138E8(28);
  int v88 = 0;
  int v89 = 0LL;
  *(void *)UInt32 v147 = 0x100000002LL;
  unsigned int v90 = *(void *)(v86 + 8);
  while (1)
  {
    uint64_t v91 = *(int *)&v147[4 * v89];
    unsigned int v92 = v88;
    if (((v90 & v91) != 0) != ((*(void *)(v87 + 8) & v91) != 0)) {
      break;
    }
    int v88 = 1;
    int v89 = 1LL;
    if ((v92 & 1) != 0) {
      goto LABEL_100;
    }
  }

  if ((v90 & v91) == 0) {
    uint64_t v86 = v87;
  }
LABEL_100:
  unsigned int v95 = *(os_log_s **)v86;
  if (v95 && os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    double v96 = *(void *)&v152[18];
    int v97 = *(void *)&v152[2];
    uint64_t v98 = *(void *)buf;
    (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128LL))(&theString);
    if (v97) {
      uint64_t v99 = v97;
    }
    else {
      uint64_t v99 = v98;
    }
    if (v96) {
      uint64_t v99 = v96;
    }
    *(_DWORD *)UInt32 v147 = 136315906;
    *(void *)&v147[4] = "BluetoothProfiles_Aspen.cpp";
    *(_WORD *)&v147[12] = 1024;
    *(_DWORD *)&v147[14] = 852;
    *(_WORD *)&v147[18] = 2112;
    *(void *)&v147[20] = v99;
    unsigned int v148 = 2112;
    *(void *)uint64_t v149 = theString;
    _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating a bluetooth LE Tap input port with name %@ and UID %@",  v147,  0x26u);
    sub_19DFC((uint64_t)&theString);
  }

  if (cap >= 0) {
    char v100 = __p;
  }
  else {
    char v100 = (void **)__p[0];
  }
  theString = CFStringCreateWithCString(0LL, (const char *)v100, 0x600u);
  int v144 = 1;
  int v141 = 0LL;
  UInt32 v142 = 1;
  uint64_t v101 = atomic_load((unsigned int *)(a1[1] + 492));
  double v93 = (std::__shared_weak_count *)operator new(0x2B8uLL);
  v93->__shared_owners_ = 0LL;
  v93->__shared_weak_owners_ = 0LL;
  v93->__vftable = (std::__shared_weak_count_vtbl *)off_478A08;
  uint64_t v94 = (uint64_t)&v93[1];
  sub_2251F8(&v93[1].__vftable, a1[1], 1886152052LL, (uint64_t)buf, (uint64_t *)&theString, &v141, 1, v101);
  *(void *)UInt32 v147 = v93 + 1;
  *(void *)&v147[8] = v93;
  sub_AFDAC((uint64_t)v147, &v93[4].__shared_owners_, (uint64_t)&v93[1]);
  int v137 = v93 + 1;
  int v138 = v93;
  sub_19DFC((uint64_t)&v141);
  sub_19DFC((uint64_t)&theString);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  sub_19DFC((uint64_t)&v152[18]);
  sub_19DFC((uint64_t)&v152[2]);
  sub_19DFC((uint64_t)buf);
  if (v2)
  {
LABEL_114:
    if (v3 && (void)v139) {
      sub_204854(v140, v139);
    }
  }

        uint64_t v59 = 1LL;
        goto LABEL_92;
      }

      uint64_t v59 = sub_1CBD44() ^ 1;
LABEL_92:
      unsigned int v63 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        unsigned int v64 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          UInt32 v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }

      if (v72[1]) {
        std::__shared_weak_count::__release_weak(v72[1]);
      }
      v53 += 2;
      if (v53 == *((std::__shared_weak_count ***)&v69 + 1)) {
        unsigned int v66 = 0;
      }
      else {
        unsigned int v66 = v59;
      }
      if ((v66 & 1) == 0) {
        goto LABEL_105;
      }
    }

    __int16 v60 = (*(uint64_t (**)(void))(**(void **)buf + 112LL))(*(void *)buf);
    int v61 = (v60 & 0xFF00000000LL) != 0 && v60 == 1701868400LL;
    if (!v61 || sub_1CBD44())
    {
      unsigned int v58 = *a3 == 1667657057;
LABEL_86:
      uint64_t v59 = v58;
      goto LABEL_92;
    }

    goto LABEL_89;
  }

  uint64_t v59 = 1LL;
LABEL_105:
  *(void *)buf = &v69;
  sub_1F68CC((void ***)buf);
  return v59;
}

LABEL_90:
      sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 1227);
      uint64_t v14 = *(void *)&v28[4];
      if (*(uint8_t **)&v28[4] == buf)
      {
LABEL_93:
        uint64_t v9 = 0LL;
      }

      else
      {
        while (!(*(unsigned int (**)(void, AudioObjectPropertyAddress *))(**(void **)(v14 + 16) + 16LL))( *(void *)(v14 + 16),  a2))
        {
          uint64_t v14 = *(void *)(v14 + 8);
        }

        uint64_t v9 = (*(uint64_t (**)(void, AudioObjectPropertyAddress *, uint64_t, void *))(**(void **)(v14 + 16)
                                                                                              + 32LL))( *(void *)(v14 + 16),  a2,  a3,  a4);
      }

      sub_1BB88((uint64_t *)buf);
      return v9;
    }

    if (mSelector != 1633903465)
    {
      int v10 = 1633904999;
      goto LABEL_98;
    }

    return 8LL;
  }

  if (mSelector > 1633973867)
  {
    if (mSelector == 1633973868) {
      goto LABEL_90;
    }
    if (mSelector == 1634169456) {
      return (4 * *(_DWORD *)(a1 + 200));
    }
    return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
  }

  if (mSelector == 1633907570) {
    return 8LL;
  }
  int v11 = 1633970532;
LABEL_102:
  if (mSelector == v11) {
    return 8LL;
  }
  return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
}

          v54 = v139;
        }

        if (v54) {
          CFRelease(v54);
        }
        sub_32C8C((void *)v137[1]);
        if (v131)
        {
          unsigned int v132 = v131;
          operator delete(v131);
        }

        unsigned int v64 = *(void **)(a5 + 8);
        if (v64 != v55)
        {
          UInt32 v65 = *(void **)(a5 + 8);
          do
          {
            sub_103590((uint64_t **)&v148, &v148.__r_.__value_.__l.__size_, v65 + 2);
            UInt32 v65 = (void *)v65[1];
          }

          while (v65 != v55);
        }

        unsigned int v66 = v64 != v55;
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C((void *)v158[1]);
        AudioObjectPropertyScope v28 = a11;
        if (v152)
        {
          unint64_t v153 = v152;
          operator delete(v152);
        }

        v48 |= v66;
        UInt32 v47 = *(void *)(v47 + 8);
      }

      while (v47 != v44);
    }

    int v67 = *(void *)(a5 + 16);
    if (v67 == v148.__r_.__value_.__l.__cap_) {
      break;
    }
    a1 = v106;
    if ((v48 & a10) == 1)
    {
      unsigned int v68 = v109;
      UInt32 v69 = (uint64_t *)v109[13];
      if (!v69) {
        goto LABEL_150;
      }
      int v70 = *v69;
      unsigned int v71 = v69[1];
      if (*v69 != v71)
      {
        do
        {
          *(_OWORD *)buf = v146;
          UInt32 v72 = *(void *)(v70 + 192);
          if (!v72) {
            sub_82CEC();
          }
          if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v72 + 48LL))(v72, buf))
          {
            if (!*(void *)(a5 + 16)) {
              goto LABEL_167;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            __p.__r_.__value_.__l.__cap_ = 0LL;
            unsigned int v73 = *(void **)(a5 + 8);
            if (v73 != (void *)a5)
            {
              do
              {
                int v74 = *(const __int32 **)(v70 + 8);
                int v75 = *(__int32 **)(v70 + 16);
                sub_B8CBC((uint64_t *)buf, v73 + 2, "", 4509);
                UInt32 v76 = wmemchr(v74, *(_DWORD *)(*(void *)buf + 144LL), v75 - v74);
                int v77 = *(std::__shared_weak_count **)&buf[8];
                if (*(void *)&buf[8])
                {
                  unsigned int v78 = (unint64_t *)(*(void *)&buf[8] + 8LL);
                  do
                    UInt32 v79 = __ldaxr(v78);
                  while (__stlxr(v79 - 1, v78));
                  if (!v79)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }

                if (v76) {
                  int v80 = v76;
                }
                else {
                  int v80 = v75;
                }
                if (v80 != *(__int32 **)(v70 + 16))
                {
                  uint64_t v81 = operator new(0x20uLL);
                  v81[2] = v73[2];
                  uint64_t v82 = v73[3];
                  v81[3] = v82;
                  if (v82)
                  {
                    char v83 = (unint64_t *)(v82 + 16);
                    do
                      uint64_t v84 = __ldxr(v83);
                    while (__stxr(v84 + 1, v83));
                  }

                  uint64_t v85 = __p.__r_.__value_.__r.__words[0];
                  *(void *)(__p.__r_.__value_.__r.__words[0] + 8) = v81;
                  *uint64_t v81 = v85;
                  v81[1] = &__p;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
                  ++__p.__r_.__value_.__l.__cap_;
                }

                unsigned int v73 = (void *)v73[1];
              }

              while (v73 != (void *)a5);
              if (__p.__r_.__value_.__l.__cap_)
              {
                UInt32 v127 = 0LL;
                int v128 = 0LL;
                uint64_t v126 = &v127;
                uint64_t v86 = *(unsigned int *)(v70 + 64);
                char v87 = sub_55FD4(v103, v70);
                sub_EE1E8(v125, &__p);
                uint64_t v116 = 0LL;
                char v117 = 0LL;
                int v118 = 0LL;
                sub_7A5B8( &v116,  *(const void **)a11,  *(void *)(a11 + 8),  (uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 2);
                int v119 = *v112;
                uint64_t v120 = *(_BYTE *)(a11 + 32);
                int v121 = *(_DWORD *)(a11 + 40);
                sub_86550(v122, v111);
                int v123 = *(_DWORD *)(a11 + 72);
                int v88 = *(const void **)(a11 + 80);
                if (v88) {
                  CFRetain(v88);
                }
                v124 = v88;
                LOWORD(v102) = 0;
                sub_1379FC(buf, v103, v86 | (v87 << 32), 0LL, v125, a6, a7, a8, v102, &v116, a12);
                uint64_t v108 = *(_DWORD *)buf;
                sub_FF3B8(v127);
                int v89 = *(void **)&buf[16];
                uint64_t v126 = *(void **)&buf[8];
                UInt32 v127 = *(void **)&buf[16];
                int v128 = *(void *)&buf[24];
                if (*(void *)&buf[24])
                {
                  *(void *)(*(void *)&buf[16] + 16LL) = &v127;
                  *(void *)&buf[8] = &buf[16];
                  *(void *)&buf[16] = 0LL;
                  *(void *)&_BYTE buf[24] = 0LL;
                  int v89 = 0LL;
                }

                else
                {
                  uint64_t v126 = &v127;
                }

                sub_FF3B8(v89);
                if (v124) {
                  CFRelease(v124);
                }
                sub_32C8C((void *)v122[1]);
                if (v116)
                {
                  char v117 = v116;
                  operator delete(v116);
                }

                sub_85B80(v125);
                sub_120C78((uint64_t *)&v148, v126, &v127);
                sub_FF3B8(v127);
              }
            }

            sub_85B80((uint64_t *)&__p);
          }

          else
          {
            unsigned int v90 = sub_138E8(8);
            if ((*(_BYTE *)(v90 + 8) & 1) != 0)
            {
              uint64_t v91 = *(os_log_s **)v90;
              if (*(void *)v90)
              {
                if (os_log_type_enabled(*(os_log_t *)v90, OS_LOG_TYPE_DEBUG))
                {
                  sub_2CA1C(&__p, *(unsigned int *)(v70 + 60));
                  unsigned int v92 = &__p;
                  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    unsigned int v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 4491;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v92;
                  _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Skipping alternate VAD specification for Device Type %s because it is marked as hidden.",  buf,  0x1Cu);
                }
              }
            }
          }

          v70 += 440LL;
        }

        while (v70 != v71);
        int v67 = *(void *)(a5 + 16);
      }

      AudioObjectPropertyScope v28 = a11;
    }

    unsigned int v68 = v109;
LABEL_150:
    if (v67)
    {
      UInt32 v42 = (void *)v68[1];
      double v93 = (void *)*v107;
      if (v42 != (void *)*v107)
      {
        while (!sub_11E3FC(v104, (uint64_t)(v42 + 2)))
        {
          UInt32 v42 = (void *)v42[1];
          if (v42 == v93)
          {
            UInt32 v42 = v93;
            break;
          }
        }
      }

      if (v42 != v105) {
        continue;
      }
    }

    goto LABEL_167;
  }

  a1 = v106;
LABEL_167:
  if ((a10 & 1) != 0)
  {
    double v96 = sub_138E8(8);
    if ((*(_BYTE *)(v96 + 8) & 1) != 0)
    {
      int v97 = *(os_log_s **)v96;
      if (*(void *)v96)
      {
        if (os_log_type_enabled(*(os_log_t *)v96, OS_LOG_TYPE_DEBUG))
        {
          sub_2D9DD8((std::string *)v140, (os_unfair_lock_s ***)&v148);
          uint64_t v98 = v142[6] >= 0 ? v140 : (void **)v140[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4536;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v98;
          _os_log_impl(&dword_0, v97, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ports: %s", buf, 0x1Cu);
          if ((v142[6] & 0x80000000) != 0) {
            operator delete(v140[0]);
          }
        }
      }
    }
  }

  *(_DWORD *)a1 = v108;
  sub_121604((uint64_t *)(a1 + 8), (uint64_t)&v148);
LABEL_165:
  sub_FF3B8((void *)v148.__r_.__value_.__l.__size_);
  return sub_139350(&v145);
}

              operator delete(v64);
              goto LABEL_93;
            }

            __int16 v33 = v3 - 1;
            int v34 = &v72;
            do
            {
              char v36 = *(unsigned __int8 *)v34;
              int v34 = (void **)((char *)v34 + 1);
              AudioObjectPropertyAddress v35 = v36;
              __int16 v38 = *v32++;
              UInt32 v37 = v38;
              AudioObjectPropertyScope v28 = v33-- != 0;
              int v39 = v28;
              __int16 v40 = v35 == v37;
            }

            while (v35 == v37 && (v39 & 1) != 0);
          }

          if ((v31 & 0x80000000) == 0) {
            goto LABEL_93;
          }
          goto LABEL_90;
        }

        int v12 = v62;
LABEL_64:
        if ((v12 & 0x80) != 0) {
          operator delete(v61[0]);
        }
        if (v60) {
          CFRelease(v60);
        }
        goto LABEL_68;
      }
    }

void sub_211F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_21218(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (a2->mSelector == 1064725619)
  {
    if (a2->mScope != 1869968496)
    {
LABEL_3:
      uint64_t v8 = (os_log_t *)sub_138E8(13);
      uint64_t v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v17);
        if (v20 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        uint64_t v22 = "Device_Puffin.cpp";
        __int16 v23 = 1024;
        int v24 = 178;
        __int16 v25 = 2080;
        char v26 = v10;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = 2003332927;
    }
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    if (!AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2)) {
      goto LABEL_3;
    }
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    int v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      unsigned __int16 v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      uint64_t v22 = "Device_Puffin.cpp";
      __int16 v23 = 1024;
      int v24 = 179;
      __int16 v25 = 2080;
      char v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      int v30 = a4;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    UInt32 v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)UInt32 v16 = &off_4865A0;
    v16[2] = 561211770;
  }

  if (a2->mSelector == 1064725619) {
    return 4LL;
  }
  else {
    return sub_21524(a1, a2, a3, a4);
  }
}

uint64_t sub_21524(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  UInt32 outDataSize = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(*(_DWORD *)(a1 + 268), a2, a3, a4, &outDataSize);
  if ((_DWORD)PropertyDataSize)
  {
    uint64_t v10 = a1;
    int v11 = a2;
    id v12 = *(id *)sub_138E8(17);
    int v13 = v12;
    if (v12)
    {
      uint64_t v14 = (os_log_s *)v12;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        unsigned __int16 v15 = v30;
        sub_2CA1C(v30, PropertyDataSize);
        if (v31 < 0) {
          unsigned __int16 v15 = (void **)v30[0];
        }
        uint64_t v16 = v10;
        int v17 = *(_DWORD *)(v10 + 268);
        (*(void (**)(void *__return_ptr))(*(void *)v16 + 128LL))(v29);
        uint64_t v18 = v29[0];
        sub_2CA1C(__p, v11->mSelector);
        if (v28 >= 0) {
          char v19 = __p;
        }
        else {
          char v19 = (void **)__p[0];
        }
        unsigned int mScope = v11->mScope;
        unsigned int mElement = v11->mElement;
        *(_DWORD *)buf = 136317186;
        int v34 = "Device_HAL_Common.mm";
        __int16 v35 = 1024;
        int v36 = 229;
        __int16 v37 = 1024;
        int v38 = PropertyDataSize;
        __int16 v39 = 2080;
        __int16 v40 = v15;
        __int16 v41 = 1024;
        int v42 = v17;
        __int16 v43 = 2112;
        uint64_t v44 = v18;
        __int16 v45 = 2080;
        UInt32 v46 = v19;
        __int16 v47 = 1024;
        unsigned int v48 = mScope;
        __int16 v49 = 1024;
        unsigned int v50 = mElement;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %d (%s): mDeviceID %u (uid %@); selector %s; scope %u; element %u",
          buf,
          0x48u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)v29);
        if (v31 < 0) {
          operator delete(v30[0]);
        }
      }
    }

    uint64_t v22 = sub_138E8(13);
    id v23 = sub_8C7D4(1, *(void **)v22, *(void *)(v22 + 8));
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    __int16 v25 = v24;
    if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v34 = "Device_HAL_Common.mm";
      __int16 v35 = 1024;
      int v36 = 230;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to determine the property's data size.",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = PropertyDataSize;
  }

  return outDataSize;
}

void sub_217C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_21808(AudioObjectID *a1, uint64_t a2, uint64_t a3, __CFString *a4, int *a5, int *a6)
{
  if (((*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 16LL))(a1, a2) & 1) == 0)
  {
    UInt32 v52 = (os_log_t *)sub_138E8(13);
    int v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      int v74 = *(void **)a2;
      int v75 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v74);
      v54 = v78 >= 0 ? &__p : (__int128 *)__p;
      buf[0] = 136315650;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1350;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v54;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)buf,  0x1Cu);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v56 = (os_log_t *)sub_138E8(13);
    uint64_t v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      int v74 = *(void **)a2;
      int v75 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v74);
      unsigned int v58 = v78 >= 0 ? &__p : (__int128 *)__p;
      buf[0] = 136316162;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1351;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v58;
      __int16 v80 = 1024;
      *(_DWORD *)uint64_t v81 = a3;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = a4;
      _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }

    uint64_t v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v59 = &off_4865A0;
    v59[2] = 561211770;
  }

  if (!a6)
  {
    __int16 v60 = (os_log_t *)sub_138E8(13);
    int v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      int v74 = *(void **)a2;
      int v75 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v74);
      uint64_t v62 = v78 >= 0 ? &__p : (__int128 *)__p;
      buf[0] = 136315906;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1352;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "outData";
      __int16 v80 = 2080;
      *(void *)uint64_t v81 = v62;
      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)buf,  0x26u);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }

    unsigned int v63 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v63 = &off_4865A0;
    v63[2] = 561211770;
  }

  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1718843938)
  {
    if (v12 <= 1651798897)
    {
      if (v12 > 1634890858)
      {
        if (v12 > 1635152992)
        {
          if ((v12 - 1635152993) <= 0xE && ((1 << (v12 - 97)) & 0x4015) != 0)
          {
LABEL_130:
            sub_9D988((uint64_t *)buf, (void *)a1 + 23, "", 1404);
            uint64_t v25 = *(void *)&buf[2];
            if (*(_DWORD **)&buf[2] != buf)
            {
              while (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v25 + 16) + 16LL))( *(void *)(v25 + 16),  a2))
              {
                uint64_t v25 = *(void *)(v25 + 8);
                if ((_DWORD *)v25 == buf) {
                  goto LABEL_135;
                }
              }

              (*(void (**)(void, uint64_t, uint64_t, __CFString *, int *, int *))(**(void **)(v25 + 16)
                                                                                           + 40LL))( *(void *)(v25 + 16),  a2,  a3,  a4,  a5,  a6);
            }

            goto LABEL_135;
          }

          if (v12 == 1650881394)
          {
            sub_778C0((uint64_t)a1, 1650881394, *(_DWORD *)(a2 + 4), a6);
            goto LABEL_137;
          }

          int v13 = 1651664739;
          goto LABEL_129;
        }

        if (v12 != 1634890859)
        {
          if (v12 == 1635020147)
          {
            sub_9D988((uint64_t *)buf, (void *)a1 + 23, "", 1527);
            int v23 = sub_2898E0((uint64_t)buf);
            sub_5CABC(v23, a5, a6);
LABEL_135:
            p_p = (uint64_t *)buf;
LABEL_136:
            sub_1BB88(p_p);
            goto LABEL_137;
          }

          goto LABEL_182;
        }
      }

      else if (v12 <= 1633907569)
      {
        if (v12 > 1633903464)
        {
          if (v12 == 1633903465)
          {
            if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
            {
              int v67 = (os_log_t *)sub_138E8(13);
              unsigned int v68 = *v67;
              if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
              {
                buf[0] = 136315394;
                *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 1621;
                _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
              }

              UInt32 v69 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v69, "Precondition failure.");
            }

            sub_A851C((CFDictionaryRef *)buf, (uint64_t)a1);
            uint64_t v41 = *(void *)buf;
            *(void *)buf = 0LL;
            *(void *)a6 = v41;
            sub_7A708((const void **)buf);
            goto LABEL_137;
          }

          int v21 = 1633904999;
        }

        else
        {
          if (v12 == 1165513555) {
            goto LABEL_130;
          }
          int v21 = 1633776747;
        }

        if (v12 != v21) {
          goto LABEL_182;
        }
      }

      else
      {
        if (v12 > 1633973867)
        {
          if (v12 == 1633973868) {
            goto LABEL_130;
          }
          if (v12 == 1634169456)
          {
            sub_A1CB4(a1, (_DWORD *)a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
            goto LABEL_137;
          }

          int v13 = 1634692199;
          goto LABEL_129;
        }

        if (v12 != 1633907570)
        {
          int v22 = 1633970532;
LABEL_120:
          if (v12 == v22)
          {
            int v24 = (os_log_t *)sub_138E8(16);
            int v17 = *v24;
            if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1588;
              uint64_t v18 = "%25s:%-5d GetPropertyData() is not applicable to AddReporterID or RemoveReporterID";
              goto LABEL_124;
            }

            goto LABEL_137;
          }

LABEL_182:
          sub_289E4(a1[32], (const AudioObjectPropertyAddress *)a2, a3, a4, (UInt32 *)a5, a6);
          goto LABEL_137;
        }
      }

      if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
      {
        unsigned int v64 = (os_log_t *)sub_138E8(13);
        UInt32 v65 = *v64;
        if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1632;
          _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

        unsigned int v66 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v66, "Precondition failure.");
      }

LABEL_126:
      *a5 = 0;
      goto LABEL_137;
    }

    if (v12 > 1684500588)
    {
      if (v12 <= 1685287522)
      {
        if (v12 > 1685087595)
        {
          if (v12 == 1685087596) {
            goto LABEL_130;
          }
          if (v12 == 1685287011)
          {
            sub_A65BC((uint64_t)a1, 1685287011, *(_DWORD *)(a2 + 4), a4, a6);
            goto LABEL_137;
          }
        }

        else
        {
          if (v12 == 1684500589)
          {
            sub_A7098( (uint64_t)a1,  (const AudioObjectPropertyAddress *)a2,  a3,  (unsigned int *)a4,  (UInt32 *)a5,  (float *)a6);
            goto LABEL_137;
          }

          if (v12 == 1684500594)
          {
            sub_A74F4((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, (unsigned int *)a4, (UInt32 *)a5, a6);
            goto LABEL_137;
          }
        }

        goto LABEL_182;
      }

      if (v12 > 1685483629)
      {
        if (v12 == 1685483630)
        {
          __int16 v39 = (os_log_t *)sub_138E8(16);
          __int16 v40 = *v39;
          if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1457;
            _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d kAudioDevicePropertyVoiceProcessingIsEnabled is a write-only property",  (uint8_t *)buf,  0x12u);
          }

          goto LABEL_126;
        }

        if (v12 == 1718383987) {
          goto LABEL_130;
        }
        if (v12 != 1718839674) {
          goto LABEL_182;
        }
LABEL_152:
        sub_A6254((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4, (UInt32 *)a5, a6);
        goto LABEL_137;
      }

      if (v12 == 1685287523) {
        goto LABEL_130;
      }
      int v13 = 1685288051;
      goto LABEL_129;
    }

    if (v12 > 1684365923)
    {
      if (v12 > 1684498540)
      {
        if (v12 == 1684498541)
        {
          sub_A77B8(a1, (uint64_t *)a2, a3, (unsigned int *)a4, a5, a6);
          goto LABEL_137;
        }

        if (v12 == 1684498544)
        {
          sub_A7BD0(a1, (uint64_t *)a2, a3, (unsigned int *)a4, a5, a6);
          goto LABEL_137;
        }

        goto LABEL_182;
      }

      if (v12 == 1684365924) {
        goto LABEL_130;
      }
      int v13 = 1684370276;
      goto LABEL_129;
    }

    if (v12 > 1684103986)
    {
      if (v12 == 1684103987)
      {
        sub_A1FD0((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
        goto LABEL_137;
      }

      int v13 = 1684304756;
      goto LABEL_129;
    }

    if (v12 == 1651798898)
    {
      sub_9D988((uint64_t *)&__p, (void *)a1 + 23, "", 1421);
      uint64_t v42 = *((void *)&__p + 1);
      if (*((__int128 **)&__p + 1) != &__p)
      {
        while (1)
        {
          uint64_t v43 = *(void *)(v42 + 16);
          buf[0] = 1651798132;
          *(void *)&buf[1] = *(void *)(a2 + 4);
          uint64_t v42 = *(void *)(v42 + 8);
        }

        unsigned int v48 = (os_log_t *)sub_138E8(16);
        __int16 v49 = *v48;
        if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT))
        {
          sub_23FE8((uint64_t)&v74, (os_unfair_lock_t)(*(void *)(v42 + 16) + 8LL));
          unsigned int v50 = v76 >= 0 ? &v74 : (void **)v74;
          buf[0] = 136315650;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1426;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v50;
          _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Getting property kAudioDeviceProperty[Accessory]NominalSampleRate from device %s",  (uint8_t *)buf,  0x1Cu);
          if (v76 < 0) {
            operator delete(v74);
          }
        }

        uint64_t v51 = *(void *)(v42 + 16);
        buf[0] = 1853059700;
        *(void *)&buf[1] = *(void *)(a2 + 4);
        (*(void (**)(uint64_t, _DWORD *, uint64_t, __CFString *, int *, int *))(*(void *)v51 + 40LL))( v51,  buf,  a3,  a4,  a5,  a6);
      }

          int v70 = 1000 * v69.__d_.__rep_;
LABEL_127:
          if (v70 > (v68.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v71.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_130:
            std::condition_variable::__do_timed_wait(&v155, &__lk, v71);
            std::chrono::steady_clock::now();
            goto LABEL_131;
          }
        }

        v71.__d_.__rep_ = v70 + v68.__d_.__rep_;
        goto LABEL_130;
      }

          int v70 = 1000 * v69.__d_.__rep_;
LABEL_127:
          if (v70 > (v68.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v71.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_130:
            std::condition_variable::__do_timed_wait(&v155, &__lk, v71);
            std::chrono::steady_clock::now();
            goto LABEL_131;
          }
        }

        v71.__d_.__rep_ = v70 + v68.__d_.__rep_;
        goto LABEL_130;
      }

LABEL_191:
      p_p = (uint64_t *)&__p;
      goto LABEL_136;
    }

    if (v12 != 1668047203) {
      goto LABEL_182;
    }
    unsigned int v19 = *((unsigned __int8 *)a1 + 448);
LABEL_154:
    *a6 = v19;
    goto LABEL_137;
  }

  if (v12 <= 1935962991)
  {
    if (v12 > 1885631345)
    {
      if (v12 <= 1902539641)
      {
        if (v12 > 1886413425)
        {
          if (v12 == 1886413426)
          {
            sub_A2E1C((uint64_t)a1, (unsigned int *)a2, a3, (uint64_t)a4, (CFDictionaryRef *)a6);
            goto LABEL_137;
          }

          int v13 = 1886807154;
          goto LABEL_129;
        }

        if (v12 == 1885631346) {
          goto LABEL_130;
        }
        if (v12 == 1886413412)
        {
          if (*(_DWORD *)(a2 + 4) != 1869968496) {
            return;
          }
          sub_9D988((uint64_t *)buf, (void *)a1 + 23, "", 1477);
          *(void *)&__int128 __p = 0x6F75747050504277LL;
          DWORD2(__p) = 0;
          uint64_t v20 = *(void *)&buf[2];
          int v73 = 0;
          uint64_t v72 = 0x6F75747050504277LL;
          if (*(_DWORD **)&buf[2] != buf)
          {
            while (((*(uint64_t (**)(void, uint64_t *))(**(void **)(v20 + 16) + 16LL))( *(void *)(v20 + 16),  &v72) & 1) == 0)
            {
              uint64_t v20 = *(void *)(v20 + 8);
              if ((_DWORD *)v20 == buf) {
                goto LABEL_135;
              }
            }

            if ((_DWORD *)v20 != buf) {
              (*(void (**)(void, __int128 *, uint64_t, __CFString *, int *, int *))(**(void **)(v20 + 16)
            }
                                                                                              + 40LL))( *(void *)(v20 + 16),  &__p,  a3,  a4,  a5,  a6);
          }

          goto LABEL_135;
        }

        goto LABEL_182;
      }

      if (v12 <= 1934456179)
      {
        if (v12 != 1902539642)
        {
          int v22 = 1919773028;
          goto LABEL_120;
        }

        goto LABEL_152;
      }

      if (v12 == 1934456180) {
        goto LABEL_130;
      }
      int v13 = 1935762281;
    }

    else
    {
      if (v12 > 1819569762)
      {
        if (v12 <= 1869575793)
        {
          if (v12 == 1819569763)
          {
            sub_A1850(a1, (const AudioObjectPropertyAddress *)a2, a3, (uint64_t)a4, a5, a6);
            goto LABEL_137;
          }

          if (v12 == 1869574756)
          {
            sub_A5810((uint64_t)a1, 1869574756, *(_DWORD *)(a2 + 4), a5, (uint64_t)a6);
            goto LABEL_137;
          }

          goto LABEL_182;
        }

        if (v12 == 1869575794)
        {
          sub_A5C5C((uint64_t)a1, 1869575794, *(_DWORD *)(a2 + 4), a5, a6);
          goto LABEL_137;
        }

        int v13 = 1885434482;
        goto LABEL_129;
      }

      if (v12 <= 1752657011)
      {
        if (v12 == 1718843939)
        {
          sub_6C614((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4, (UInt32 *)a5, (double *)a6);
          goto LABEL_137;
        }

        if (v12 != 1735682404) {
          goto LABEL_182;
        }
        memset(buf, 0, 24);
        sub_8D668( buf,  *((const void **)a1 + 18),  *((void *)a1 + 19),  (uint64_t)(*((void *)a1 + 19) - *((void *)a1 + 18)) >> 3);
        uint64_t v14 = *(void **)buf;
        sub_A7FE8(*(_BYTE **)buf, *(_BYTE **)&buf[2], a5, a6);
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_137;
      }

      if (v12 == 1752657012)
      {
        LODWORD(__p) = 1819569763;
        *(void *)((char *)&__p + 4) = *(void *)(a2 + 4);
        OSStatus PropertyData = AudioObjectGetPropertyData( a1[32],  (const AudioObjectPropertyAddress *)&__p,  a3,  a4,  (UInt32 *)a5,  a6);
        if (PropertyData)
        {
          __int16 v45 = (os_log_t *)sub_138E8(13);
          UInt32 v46 = *v45;
          if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1438;
            _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error reading device latency from the HAL.",  (uint8_t *)buf,  0x12u);
          }

          __int16 v47 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v47 = &off_4865A0;
          v47[2] = PropertyData;
        }

        goto LABEL_137;
      }

      int v13 = 1818326127;
    }

    unsigned int v90 = v79 != v77 || v75 == 0;
    if (v90 && v79 - (unsigned __int8 *)v74 != -1)
    {
      if ((v118 & 0x80u) == 0) {
        uint64_t v91 = v118;
      }
      else {
        uint64_t v91 = (std::string::size_type)v117;
      }
      if ((v118 & 0x80u) == 0) {
        unsigned int v92 = (const std::string::value_type *)&v116;
      }
      else {
        unsigned int v92 = (const std::string::value_type *)v116;
      }
      std::string::replace(a1, v79 - (unsigned __int8 *)v74, v91, v92, v91);
    }

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    double v93 = sub_138E8(2);
    uint64_t v94 = sub_138E8(34);
    unsigned int v95 = 0;
    double v96 = 0LL;
    *(void *)buf = 0x100000002LL;
    int v97 = *(void *)(v93 + 8);
    while (1)
    {
      uint64_t v98 = *(int *)&buf[4 * v96];
      uint64_t v99 = v95;
      if (((v97 & v98) != 0) != ((*(void *)(v94 + 8) & v98) != 0)) {
        break;
      }
      unsigned int v95 = 1;
      double v96 = 1LL;
      if ((v99 & 1) != 0) {
        goto LABEL_214;
      }
    }

    if ((v97 & v98) == 0) {
      double v93 = v94;
    }
LABEL_214:
    char v100 = *(os_log_s **)v93;
    if (v100 && os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v101 = *v8;
      }
      if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v102 = a1;
      }
      else {
        uint64_t v102 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 74;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v101;
      *(_WORD *)&_BYTE buf[28] = 2080;
      int v121 = v102;
      _os_log_impl(&dword_0, v100, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Translated %s to %s", buf, 0x26u);
    }
  }

  uint64_t v103 = (unint64_t *)&v68->__shared_owners_;
  do
    char v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }

  if (!v64) {
    goto LABEL_149;
  }
LABEL_181:
  if (v107 < 0) {
    operator delete(v105);
  }
}

  if (values)
  {
    char v174 = values;
    operator delete(values);
  }

  if (v175)
  {
    v176[0] = (void *)v175;
    operator delete((void *)v175);
  }

  int v133 = v154 + 104;
  sub_157508(*(void **)(v154 + 104));
  int v134 = v169;
  *(void *)(v154 + 96) = v168;
  *(void *)(v154 + 104) = v134;
  unsigned int v135 = v170;
  *(void *)(v154 + 112) = v170;
  if (v135)
  {
    v134[2] = v133;
    char v168 = &v169;
    UInt32 v169 = 0LL;
    UInt32 v170 = 0LL;
    int v134 = 0LL;
  }

  else
  {
    *(void *)(v154 + 96) = v133;
  }

  sub_157508(v134);
  UInt32 v136 = (os_log_t *)sub_138E8(13);
  int v137 = *v136;
  if (*v136)
  {
    int v138 = os_log_type_enabled(*v136, OS_LOG_TYPE_DEFAULT);
    CFMutableDictionaryRef v139 = (const __CFDictionary *)v164;
    if (v138)
    {
      uint64_t v140 = CFCopyDescription(v164);
      sub_48188((uint64_t)&v180, v140);
      if (v140) {
        CFRelease(v140);
      }
      int v141 = &v180;
      if (v183 < 0) {
        int v141 = (uint64_t *)v180;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1385;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v141;
      _os_log_impl( &dword_0,  v137,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS-Actuator: Get ThermalBudgetRange Array description: %s",  buf,  0x1Cu);
      if (v183 < 0) {
        operator delete((void *)v180);
      }
    }
  }

  else
  {
    CFMutableDictionaryRef v139 = (const __CFDictionary *)v164;
  }

  sub_157508(v167[0]);
  void *v157 = v139;
  uint64_t v180 = 0x6F75747054684272LL;
  LODWORD(v181) = 0;
  uint64_t v175 = 0x6F75747050504272LL;
  LODWORD(v176[0]) = 0;
  for (uint64_t j = v163; j != &v162; uint64_t j = (uint64_t *)j[1])
  {
    if (sub_CFDD4(j[2]))
    {
      if (j != &v162)
      {
        int v144 = j[2];
        unsigned int v143 = (std::__shared_weak_count *)j[3];
        *(void *)buf = v144;
        *(void *)&buf[8] = v143;
        if (v143)
        {
          p_shared_owners = (unint64_t *)&v143->__shared_owners_;
          do
            UInt32 v146 = __ldxr(p_shared_owners);
          while (__stxr(v146 + 1, p_shared_owners));
        }

        if (sub_1CBB74() && sub_38A970(v144))
        {
          LODWORD(v168) = 8;
          (*(void (**)(uint64_t, uint64_t *, void, int *, uint64_t ***, void ***))(*(void *)j[2] + 40LL))( j[2],  &v180,  v155,  v156,  &v168,  &values);
          (*(void (**)(uint64_t, uint64_t *, void, int *, uint64_t ***, CFTypeRef *))(*(void *)j[2] + 40LL))( j[2],  &v175,  v155,  v156,  &v168,  cf);
          UInt32 v147 = sub_9EB48();
          sub_1A04FC(v147, (uint64_t)values, (uint64_t)cf[0]);
        }

        else if (sub_1CBB74() {
               && (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)j[2] + 16LL))(j[2], &v180))
        }
        {
          LODWORD(cf[0]) = 8;
          (*(void (**)(uint64_t, uint64_t *, void, int *, CFTypeRef *, void ***))(*(void *)j[2] + 40LL))( j[2],  &v180,  v155,  v156,  cf,  &values);
          unsigned int v148 = (void *)sub_9EB48();
          sub_19FBE0(v148, (int)values, SHIDWORD(values));
        }

        else if (sub_1CBBF8() {
               && (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)j[2] + 16LL))(j[2], &v175))
        }
        {
          LODWORD(cf[0]) = 8;
          (*(void (**)(uint64_t, uint64_t *, void, int *, CFTypeRef *, void ***))(*(void *)j[2] + 40LL))( j[2],  &v175,  v155,  v156,  cf,  &values);
          uint64_t v149 = (void *)sub_9EB48();
          sub_19FBE0(v149, (int)values, SHIDWORD(values));
        }

        if (v143)
        {
          int v150 = (unint64_t *)&v143->__shared_owners_;
          do
            unsigned int v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
      }

      break;
    }
  }

  qword_490F28 = (uint64_t)v120;
  UInt32 v142 = sub_138E8(17);
  unsigned int v143 = sub_138E8(6);
  int v144 = 0;
  int v145 = 0LL;
  *(void *)buf = 0x100000002LL;
  UInt32 v146 = *(void *)(v142 + 8);
  while (1)
  {
    UInt32 v147 = (int)buf[v145];
    unsigned int v148 = v144;
    if (((v146 & v147) != 0) != ((*(void *)(v143 + 8) & v147) != 0)) {
      break;
    }
    int v144 = 1;
    int v145 = 1LL;
    if ((v148 & 1) != 0) {
      goto LABEL_197;
    }
  }

  if ((v146 & v147) == 0) {
    UInt32 v142 = v143;
  }
LABEL_197:
  uint64_t v149 = *(os_log_s **)v142;
  if (v149 && os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "DeviceInfoListener.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 25;
    _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to create DeviceInfoListener.",  (uint8_t *)buf,  0x12u);
  }

  if (qword_4A9AC0)
  {
    UInt32 v220 = (os_log_t *)sub_138E8(13);
    int v221 = *v220;
    if (*v220 && os_log_type_enabled(*v220, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "DeviceInfoListener.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 27;
      _os_log_impl( &dword_0,  v221,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): sDeviceInfoListener is not NULL!",  (uint8_t *)buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sDeviceInfoListener is not NULL!");
    goto LABEL_314;
  }

  int v150 = operator new(0x60uLL);
  *int v150 = off_4857F8;
  v150[1] = 850045863LL;
  *((_OWORD *)v150 + 1) = 0u;
  *((_OWORD *)v150 + 2) = 0u;
  *((_OWORD *)v150 + 3) = 0u;
  v150[11] = 0LL;
  v150[10] = 0LL;
  v150[8] = 0LL;
  v150[9] = v150 + 10;
  qword_4A9AC0 = (uint64_t)v150;
  unsigned int v151 = sub_138E8(9);
  int v152 = sub_138E8(6);
  unint64_t v153 = 0;
  int v154 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v155 = *(void *)(v151 + 8);
  while (1)
  {
    UInt32 v156 = (int)buf[v154];
    int v157 = v153;
    if (((v155 & v156) != 0) != ((*(void *)(v152 + 8) & v156) != 0)) {
      break;
    }
    unint64_t v153 = 1;
    int v154 = 1LL;
    if ((v157 & 1) != 0) {
      goto LABEL_207;
    }
  }

  if ((v155 & v156) == 0) {
    unsigned int v151 = v152;
  }
LABEL_207:
  UInt32 v158 = *(os_log_s **)v151;
  if (v158 && os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "PortManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 248;
    _os_log_impl( &dword_0,  v158,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to create PortManager.",  (uint8_t *)buf,  0x12u);
  }

  if (qword_48E228)
  {
    id v222 = (os_log_t *)sub_138E8(13);
    unsigned int v223 = *v222;
    if (*v222 && os_log_type_enabled(*v222, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "PortManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 250;
      _os_log_impl( &dword_0,  v223,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): sPortManager is not NULL!",  (uint8_t *)buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sPortManager is not NULL!");
    goto LABEL_314;
  }

  uint64_t v159 = operator new(0x1E8uLL);
  sub_B1F7C((uint64_t)v159, (uint64_t)"PortManager mutex");
  *((_OWORD *)v159 + 9) = 0u;
  *((_OWORD *)v159 + 10) = 0u;
  *((void *)v159 + 11) = v159 + 22;
  *((void *)v159 + 12) = v159 + 22;
  *(_OWORD *)(v159 + 26) = 0u;
  *(_OWORD *)(v159 + 30) = 0u;
  *((void *)v159 + 17) = 0LL;
  v159[36] = 1065353216;
  *(_OWORD *)(v159 + 38) = 0u;
  *((_OWORD *)v159 + 11) = 0u;
  *((_OWORD *)v159 + 12) = 0u;
  *(_OWORD *)(v159 + 42) = 0u;
  v159[46] = 1065353216;
  *((_OWORD *)v159 + 13) = 0u;
  *((void *)v159 + 28) = v159 + 56;
  *((void *)v159 + 29) = v159 + 56;
  *((void *)v159 + 30) = 0LL;
  sub_3781F0((uint64_t)(v159 + 62), (uint64_t)"PortManager batch update guard");
  *((void *)v159 + 48) = v159 + 98;
  *((void *)v159 + 49) = 0LL;
  *((void *)v159 + 50) = 0LL;
  *((void *)v159 + 51) = v159 + 102;
  *((void *)v159 + 52) = v159 + 102;
  *((void *)v159 + 53) = 0LL;
  *((void *)v159 + 54) = v159 + 108;
  *((void *)v159 + 55) = v159 + 108;
  *((void *)v159 + 56) = 0LL;
  v159[114] = 0;
  *((void *)v159 + 59) = 0LL;
  *((void *)v159 + 60) = 0LL;
  *((void *)v159 + 58) = v159 + 118;
  sub_1008E4(v159);
  qword_48E228 = (uint64_t)v159;
  UInt32 v160 = CFStringCreateWithCString(0LL, "Application Processor", 0x600u);
  p_isa = &v160->isa;
  LOBYTE(v245) = 1;
  *(void *)buf = v160;
  LOBYTE(buf[2]) = 1;
  if (v160) {
    CFRetain(v160);
  }
  *(void *)&uint8_t buf[4] = 0LL;
  LOBYTE(buf[6]) = 1;
  v274 = 0LL;
  int v275 = 1;
  int v161 = (std::__shared_weak_count *)operator new(0x228uLL);
  *(_OWORD *)&v161->__shared_owners_ = 0u;
  uint64_t v162 = (unint64_t *)&v161->__shared_owners_;
  v161->__vftable = (std::__shared_weak_count_vtbl *)off_4704A0;
  uint64_t v163 = v161 + 1;
  memset(v272, 0, 24);
  v258 = 0LL;
  int v257 = 0u;
  sub_7D084(&__p, "");
  sub_F9638((uint64_t)&v161[1], &qword_48E230, 0LL, (uint64_t)v272, (uint64_t)buf, (uint64_t)buf, (char **)&v257, &__p);
  if (SHIBYTE(v254) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&__int128 __p = &v257;
  sub_7A668((void ***)&__p);
  shared_weak_owners = (std::__shared_weak_count *)v161[4].__shared_weak_owners_;
  v161[1].__vftable = (std::__shared_weak_count_vtbl *)&off_4704D8;
  LOBYTE(v161[22].__shared_weak_owners_) = 0;
  *(void *)&CFTypeRef v249 = v161 + 1;
  *((void *)&v249 + 1) = v161;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_228;
    }
    do
      uint64_t v165 = __ldxr(v162);
    while (__stxr(v165 + 1, v162));
    p_shared_weak_owners = (unint64_t *)&v161->__shared_weak_owners_;
    do
      uint64_t v167 = __ldxr(p_shared_weak_owners);
    while (__stxr(v167 + 1, p_shared_weak_owners));
    v161[4].__shared_owners_ = (uint64_t)v163;
    v161[4].__shared_weak_owners_ = (uint64_t)v161;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  else
  {
    do
      char v168 = __ldxr(v162);
    while (__stxr(v168 + 1, v162));
    UInt32 v169 = (unint64_t *)&v161->__shared_weak_owners_;
    do
      UInt32 v170 = __ldxr(v169);
    while (__stxr(v170 + 1, v169));
    v161[4].__shared_owners_ = (uint64_t)v163;
    v161[4].__shared_weak_owners_ = (uint64_t)v161;
  }

  do
    UInt32 v171 = __ldaxr(v162);
  while (__stlxr(v171 - 1, v162));
  if (!v171)
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }

  uint64_t v81 = sub_138E8(2);
  __int16 v82 = sub_138E8(34);
  int v83 = 0;
  uint64_t v84 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v85 = *(void *)(v81 + 8);
  while (1)
  {
    uint64_t v86 = *(int *)&buf[4 * v84];
    char v87 = v83;
    if (((v85 & v86) != 0) != ((*(void *)(v82 + 8) & v86) != 0)) {
      break;
    }
    int v83 = 1;
    uint64_t v84 = 1LL;
    if ((v87 & 1) != 0)
    {
      if ((v85 & 1) == 0) {
        goto LABEL_207;
      }
      goto LABEL_199;
    }
  }

  if ((v85 & v86) == 0) {
    uint64_t v81 = v82;
  }
  if ((*(void *)(v81 + 8) & 1) != 0)
  {
LABEL_199:
    int v88 = *(id *)v81;
    if (v88)
    {
      int v89 = (os_log_s *)v88;
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      {
        sub_12476C(&v199, v190, &v191);
        unsigned int v90 = (v199.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v199 : (std::string *)v199.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4925;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v90;
        _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d The proposed route configuration's default device has the following ouputs: %s",  buf,  0x1Cu);
      }
    }
  }

LABEL_137:
  if (*(_DWORD *)a2 == 1853059700)
  {
    uint64_t v27 = sub_138E8(16);
    uint64_t v28 = sub_138E8(36);
    char v29 = 0;
    uint64_t v30 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = (int)buf[v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1LL;
      if ((v33 & 1) != 0) {
        goto LABEL_144;
      }
    }

    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_144:
    int v34 = *(os_log_s **)v27;
    if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *(void *)a6;
      sub_2CA1C(&__p, *(unsigned int *)(a2 + 4));
      if (v78 >= 0) {
        int v36 = &__p;
      }
      else {
        int v36 = (__int128 *)__p;
      }
      int v37 = *(_DWORD *)(a2 + 4);
      int v38 = *(_DWORD *)(a2 + 8);
      buf[0] = 136316418;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1646;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v35;
      __int16 v80 = 2080;
      *(void *)uint64_t v81 = v36;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v37;
      __int16 v82 = 1024;
      int v83 = v38;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Get sample rate value of %f from AggregateDevice_Common2 (selector: kAudioDevicePropertyNominalSampleR ate; scope: '%s' (%u); element: %u).",
        (uint8_t *)buf,
        0x32u);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }
  }

void sub_22CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_22D1C( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (a2->mSelector == 1064725619)
  {
    if (a2->mScope != 1869968496)
    {
LABEL_3:
      int v12 = (os_log_t *)sub_138E8(13);
      int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v33);
        if (v36 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        int v38 = "Device_Puffin.cpp";
        __int16 v39 = 1024;
        int v40 = 200;
        __int16 v41 = 2080;
        uint64_t v42 = (const char *)v14;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = 2003332927;
    }
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    if (!AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2)) {
      goto LABEL_3;
    }
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    int v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v33);
      unsigned int v19 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      int v38 = "Device_Puffin.cpp";
      __int16 v39 = 1024;
      int v40 = 201;
      __int16 v41 = 2080;
      uint64_t v42 = (const char *)v19;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = &off_4865A0;
    v20[2] = 561211770;
  }

  if (!a6)
  {
    int v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v33);
      int v23 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      int v38 = "Device_Puffin.cpp";
      __int16 v39 = 1024;
      int v40 = 202;
      __int16 v41 = 2080;
      uint64_t v42 = "outData";
      __int16 v43 = 2080;
      v44[0] = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }

    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_4865A0;
    v24[2] = 561211770;
  }

  if (a2->mSelector == 1064725619)
  {
    UInt32 v16 = *a5;
    if (v16 != sub_21218(a1, a2, a3, a4))
    {
      uint64_t v25 = (os_log_t *)sub_138E8(13);
      char v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v33);
        int v27 = v36;
        uint64_t v28 = (void **)__p[0];
        UInt32 v29 = *a5;
        int v30 = sub_21218(a1, a2, a3, a4);
        uint64_t v31 = __p;
        *(_DWORD *)buf = 136316162;
        int v38 = "Device_Puffin.cpp";
        if (v27 < 0) {
          uint64_t v31 = v28;
        }
        __int16 v39 = 1024;
        int v40 = 207;
        __int16 v41 = 2080;
        uint64_t v42 = (const char *)v31;
        __int16 v43 = 1024;
        LODWORD(v44[0]) = v29;
        WORD2(v44[0]) = 1024;
        *(_DWORD *)((char *)v44 + 6) = v30;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v32 = &off_4865A0;
      void v32[2] = 561211770;
    }

    *(_DWORD *)a6 = 1;
  }

  else
  {
    sub_232A4(a1, a2, a3, a4, a5, a6);
  }

void sub_23280( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_232A4( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  uint64_t PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 268), a2, a3, a4, a5, a6);
  if ((_DWORD)PropertyData)
  {
    uint64_t v56 = PropertyData;
    id v57 = *(id *)sub_138E8(17);
    unsigned int v58 = v57;
    if (v57)
    {
      uint64_t v59 = (os_log_s *)v57;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v56);
        if (v75 >= 0) {
          __int16 v60 = __p;
        }
        else {
          __int16 v60 = (void **)__p[0];
        }
        int v61 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v73, a1);
        uint64_t v62 = v73[0];
        sub_2CA1C(v71, a2->mSelector);
        if (v72 >= 0) {
          unsigned int v63 = v71;
        }
        else {
          unsigned int v63 = (void **)v71[0];
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        AudioObjectPropertyElement mElement = a2->mElement;
        *(_DWORD *)buf = 136317186;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v77 = 1024;
        int v78 = 247;
        __int16 v79 = 1024;
        *(_DWORD *)__int16 v80 = v56;
        *(_WORD *)&v80[4] = 2080;
        *(void *)&v80[6] = v60;
        *(_WORD *)&v80[14] = 1024;
        *(_DWORD *)&v80[16] = v61;
        *(_WORD *)&v80[20] = 2112;
        *(void *)&v80[22] = v62;
        *(_WORD *)&v80[30] = 2080;
        uint64_t v81 = v63;
        __int16 v82 = 1024;
        AudioObjectPropertyScope v83 = mScope;
        __int16 v84 = 1024;
        AudioObjectPropertyElement v85 = mElement;
        _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %d (%s): mDeviceID %u (uid %@); selector %s; scope %u; element %u",
          buf,
          0x48u);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
        sub_19DFC((uint64_t)v73);
        if (v75 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    uint64_t v66 = sub_138E8(13);
    id v67 = sub_8C7D4(1, *(void **)v66, *(void *)(v66 + 8));
    unsigned int v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
    UInt32 v69 = v68;
    if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      __int16 v77 = 1024;
      int v78 = 248;
      _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to obtain property data.",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v56;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  if (a2->mSelector == 1836414053)
  {
    uint64_t v14 = sub_138E8(17);
    uint64_t v15 = sub_138E8(38);
    char v16 = 0;
    uint64_t v17 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1LL;
      if ((v20 & 1) != 0)
      {
        if ((v18 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_11;
      }
    }

    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
    if ((*(void *)(v14 + 8) & 1) != 0)
    {
LABEL_11:
      id v21 = *(id *)v14;
      if (v21)
      {
        int v22 = (os_log_s *)v21;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          float v23 = *a6;
          int v24 = *(_DWORD *)(a1 + 268);
          sub_2CA1C(__p, a2->mScope);
          uint64_t v25 = v75 >= 0 ? __p : (void **)__p[0];
          AudioObjectPropertyScope v26 = a2->mScope;
          AudioObjectPropertyElement v27 = a2->mElement;
          *(_DWORD *)buf = 136316674;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v77 = 1024;
          int v78 = 253;
          __int16 v79 = 1024;
          *(float *)__int16 v80 = v23;
          *(_WORD *)&v80[4] = 1024;
          *(_DWORD *)&v80[6] = v24;
          *(_WORD *)&v80[10] = 2080;
          *(void *)&v80[12] = v25;
          *(_WORD *)&v80[20] = 1024;
          *(_DWORD *)&v80[22] = v26;
          *(_WORD *)&v80[26] = 1024;
          *(_DWORD *)&v80[28] = v27;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Get mute value of %u from HAL device %u (selector: kAudioDevicePropertyMute; scope: '%s' (%u); element: %u).",
            buf,
            0x34u);
          if (v75 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

LABEL_19:
    AudioObjectPropertySelector mSelector = a2->mSelector;
  }

  if (mSelector == 1987013732)
  {
    uint64_t v28 = sub_138E8(17);
    uint64_t v29 = sub_138E8(38);
    char v30 = 0;
    uint64_t v31 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1LL;
      if ((v34 & 1) != 0)
      {
        if ((v32 & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_29;
      }
    }

    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
    if ((*(void *)(v28 + 8) & 1) != 0)
    {
LABEL_29:
      id v35 = *(id *)v28;
      if (v35)
      {
        char v36 = (os_log_s *)v35;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          float v37 = *a6;
          int v38 = *(_DWORD *)(a1 + 268);
          sub_2CA1C(__p, a2->mScope);
          __int16 v39 = v75 >= 0 ? __p : (void **)__p[0];
          AudioObjectPropertyScope v40 = a2->mScope;
          AudioObjectPropertyElement v41 = a2->mElement;
          *(_DWORD *)buf = 136316674;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v77 = 1024;
          int v78 = 258;
          __int16 v79 = 2048;
          *(double *)__int16 v80 = v37;
          *(_WORD *)&v80[8] = 1024;
          *(_DWORD *)&v80[10] = v38;
          *(_WORD *)&v80[14] = 2080;
          *(void *)&v80[16] = v39;
          *(_WORD *)&v80[24] = 1024;
          *(_DWORD *)&v80[26] = v40;
          *(_WORD *)&v80[30] = 1024;
          LODWORD(v81) = v41;
          _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Get decibel volume value of %f from HAL device %u (selector: kAudioDevicePropertyVolumeDecibels; s"
            "cope: '%s' (%u); element: %u).",
            buf,
            0x38u);
          if (v75 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

  ++result[3];
  return result;
}

    int v13 = 14LL;
    goto LABEL_39;
  }

  if (v2 <= 1668576376)
  {
    if (v2 == 1668313715) {
      goto LABEL_23;
    }
    if (v2 != 1668505974) {
      return result;
    }
    goto LABEL_19;
  }

  int v13 = 13LL;
  if (v2 == 1668576377 || v2 == 1668703084) {
    goto LABEL_39;
  }
  return result;
}

  int v12 = HIDWORD(v7);
  if ((HIDWORD(v7) == 1987208039 || HIDWORD(v7) == 1986098036) && (sub_6D2AC(v32) & 1) != 0) {
    return v6;
  }
  if ((int)v7 > 1668313665)
  {
    if ((_DWORD)v7 != 1668313715)
    {
      int v13 = 29250;
LABEL_27:
      if ((_DWORD)v7 == (v13 | 0x63700000)) {
        goto LABEL_28;
      }
LABEL_33:
      uint64_t v14 = (_DWORD)v7 == 1668576377 || (_DWORD)v7 == 1668703084;
      if (v14 && (_DWORD)v12 == 1768776806) {
        goto LABEL_51;
      }
      if ((int)v7 > 1668313665)
      {
        if ((_DWORD)v7 != 1668313715)
        {
          uint64_t v15 = 29250;
LABEL_44:
          if ((_DWORD)v7 != (v15 | 0x63700000)) {
            goto LABEL_52;
          }
        }
      }

      else if ((_DWORD)v7 != 1668301427)
      {
        uint64_t v15 = 24946;
        goto LABEL_44;
      }

      if ((int)v12 > 1768781410)
      {
        if ((_DWORD)v12 == 1919776355) {
          goto LABEL_51;
        }
        char v16 = 30307;
      }

      else
      {
        if ((_DWORD)v12 == 1735222132) {
          goto LABEL_51;
        }
        char v16 = 28515;
      }

      if ((_DWORD)v12 == (v16 | 0x696D0000))
      {
LABEL_51:
        if ((sub_6E138(v6) & 1) != 0) {
          return v6;
        }
      }

  *int v12 = &v9[v17];
  return result;
}

      if (!*v12)
      {
LABEL_20:
        sub_861FC((uint64_t)v17, a1, (uint64_t)(v5 + 4));
        sub_32C38((uint64_t **)a1, (uint64_t)v11, v12, v17[0]);
        v17[0] = 0LL;
        sub_862A0((uint64_t)v17);
      }

      uint64_t v14 = (void *)v5[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (void *)v5[2];
          uint64_t v9 = *v15 == (void)v5;
          char v5 = v15;
        }

        while (!v9);
      }

      char v5 = v15;
      if (v15 == v4) {
        return a1;
      }
    }

    uint64_t v8 = v3;
LABEL_17:
    int v11 = (uint64_t **)v3;
    int v12 = (uint64_t **)v3;
    if (!v6) {
      goto LABEL_20;
    }
    int v12 = (uint64_t **)(v8 + 1);
    int v11 = (uint64_t **)v8;
    goto LABEL_19;
  }

  return a1;
}

      uint64_t result = (uint64_t)sub_845D8((uint64_t)v7, &v21, a3);
      uint64_t v9 = (void **)result;
      goto LABEL_22;
    }
  }

  uint64_t v10 = *(void **)a2;
  if (*v7 == (uint64_t *)a2)
  {
    int v12 = (void *)a2;
  }

  else
  {
    if (v10)
    {
      int v11 = *(void **)a2;
      do
      {
        int v12 = v11;
        int v11 = (void *)v11[1];
      }

      while (v11);
    }

    else
    {
      uint64_t v15 = (void *)a2;
      do
      {
        int v12 = (void *)v15[2];
        char v16 = *v12 == (void)v15;
        uint64_t v15 = v12;
      }

      while (v16);
    }

    uint64_t result = sub_845A0(v12 + 4, a3);
    if ((result & 0x80) == 0) {
      goto LABEL_19;
    }
  }

  if (v10)
  {
    id v21 = v12;
    uint64_t v9 = (void **)(v12 + 1);
    goto LABEL_22;
  }

  id v21 = (void *)a2;
  uint64_t v9 = (void **)a2;
LABEL_25:
  uint64_t v17 = (char *)operator new(0x40uLL);
  uint64_t v18 = v17 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_24054(v18, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)a4;
    *((void *)v17 + 6) = *(void *)(a4 + 16);
  }

  *((_DWORD *)v17 + 14) = *(_DWORD *)(a4 + 24);
  return (uint64_t)sub_32C38(v7, (uint64_t)v21, (uint64_t **)v9, (uint64_t *)v17);
}

  *int v12 = &v9[v17];
  return result;
}

    *a1 = 0LL;
    return;
  }

  uint64_t v10 = (const void *)sub_2DCE6C(a2);
  if (!v10)
  {
    CFTypeRef cf = 0LL;
    goto LABEL_32;
  }

  int v11 = v10;
  CFRetain(v10);
  sub_3617C(&cf, v11);
  if (!cf)
  {
LABEL_32:
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    char v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 __p = 136315394;
      *(void *)&__p[4] = "DSPChainUtilities.cpp";
      uint64_t v25 = 1024;
      *(_DWORD *)AudioObjectPropertyScope v26 = 160;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    id v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Precondition failure.");
  }

  if (!sub_D12E8((const __CFDictionary *)cf, (const UInt8 *)"ID"))
  {
LABEL_20:
    int v13 = 0LL;
    *a1 = 0LL;
    goto LABEL_21;
  }

  if (!cf)
  {
    int v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    goto LABEL_38;
  }

  int v12 = (const __CFNumber *)sub_D13C4((const __CFDictionary *)cf, (const UInt8 *)"ID");
  if (!v12)
  {
    int v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not find item");
LABEL_38:
  }

  int v13 = cf;
  if (!cf) {
    goto LABEL_19;
  }
  CFRetain(cf);
LABEL_21:
  uint64_t v14 = cf;
  *a1 = v13;
  if (v14) {
    CFRelease(v14);
  }
}

    (*(void (**)(os_unfair_lock_s **))&(*v9)[26]._os_unfair_lock_opaque)(v9);
    sub_6DD4();
    sub_34AA0(buf, (uint64_t)&qword_48F828);
    char v16 = AudioObjectsPublishedAndDied( *(void *)(a1 + 32) + 80LL,  *(unsigned int *)(*(void *)(a1 + 32) + 8LL),  0LL,  0LL,  1LL,  &v56);
    if (buf[8]) {
      (*(void (**)(void))(**(void **)buf + 16LL))(*(void *)buf);
    }
    if (v16)
    {
      uint64_t v17 = (os_log_t *)sub_138E8(13);
      uint64_t v18 = *v17;
      if (*v17)
      {
        if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
          __int16 v60 = 1024;
          int v61 = 379;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theResult): got an error telling the HAL that a port went away",  buf,  0x12u);
        }
      }
    }

    (*(void (**)(void **__return_ptr, os_unfair_lock_s **))&(*v9)[24]._os_unfair_lock_opaque)(v54, v9);
    uint64_t v19 = sub_138E8(3);
    char v20 = sub_138E8(15);
    id v21 = 0;
    int v22 = 0LL;
    *(void *)buf = 0x100000002LL;
    float v23 = *(void *)(v19 + 8);
    while (1)
    {
      int v24 = *(int *)&buf[4 * v22];
      uint64_t v25 = v21;
      if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
        break;
      }
      id v21 = 1;
      int v22 = 1LL;
      if ((v25 & 1) != 0)
      {
        if ((v23 & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_33;
      }
    }

    if ((v23 & v24) == 0) {
      uint64_t v19 = v20;
    }
    if ((*(void *)(v19 + 8) & 1) != 0)
    {
LABEL_33:
      AudioObjectPropertyScope v26 = *(os_log_s **)v19;
      if (*(void *)v19 && os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyElement v27 = v9[12];
        v51[0] = v9[11];
        v51[1] = v27;
        if (v27)
        {
          p_os_unfair_lock_opaque = (unint64_t *)&v27[4]._os_unfair_lock_opaque;
          do
            uint64_t v29 = __ldxr(p_os_unfair_lock_opaque);
          while (__stxr(v29 + 1, p_os_unfair_lock_opaque));
        }

        sub_D3ECC(__p, v51);
        if (v53 >= 0) {
          char v30 = __p;
        }
        else {
          char v30 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        __int16 v60 = 1024;
        int v61 = 385;
        uint64_t v62 = 2048;
        unsigned int v63 = (void **)v9;
        unsigned int v64 = 2080;
        UInt32 v65 = v30;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Queueing VirtualAudio_Port %p (%s) for deletion.",  buf,  0x26u);
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v27) {
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v27);
        }
      }
    }

    uint64_t result = (uint64_t)sub_845D8((uint64_t)v7, &v20, a3);
    uint64_t v9 = (void **)result;
    goto LABEL_22;
  }

  uint64_t v19 = v6;
  char v20 = v6;
  uint64_t v9 = (void **)&v19;
  if (v6) {
    return result;
  }
LABEL_23:
  unsigned __int16 v6 = v20;
LABEL_25:
  sub_E72E8((uint64_t)&v18, (uint64_t)v7, a4);
  return (uint64_t)sub_32C38(v7, (uint64_t)v6, (uint64_t **)v9, v18);
}

      a2 = (void *)a2[1];
      if (a2 == a3) {
        return std::string::append(a1, " }", 2uLL);
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

      char v16 = std::__shared_weak_count::lock(v4);
      uint64_t v17 = v16;
      if (v16)
      {
        uint64_t v18 = (unint64_t *)&v16->__shared_weak_owners_;
        do
          uint64_t v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        char v20 = (unint64_t *)&v16->__shared_owners_;
        do
          id v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v17);
        }

        int v22 = v38;
        if (!v10)
        {
LABEL_36:
          int v24 = 0LL;
          float v23 = 0LL;
          if (!v17) {
            goto LABEL_42;
          }
          goto LABEL_37;
        }
      }

      else
      {
        int v22 = 0LL;
        if (!v10) {
          goto LABEL_36;
        }
      }

  uint64_t v18 = (char *)operator new(0x40uLL);
  *((_DWORD *)v18 + 8) = a2;
  *(_OWORD *)(v18 + 40) = v34;
  *((void *)v18 + 7) = v13;
  *(void *)uint64_t v18 = 0LL;
  *((void *)v18 + 1) = 0LL;
  *((void *)v18 + 2) = v15;
  *unsigned __int16 v6 = (uint64_t *)v18;
  uint64_t v19 = (uint64_t *)**a1;
  if (v19)
  {
    *a1 = v19;
    uint64_t v18 = (char *)*v6;
  }

  sub_7A420(a1[1], (uint64_t *)v18);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  *(void *)&uint64_t v14 = 0LL;
LABEL_22:
  if ((void)v14) {
    operator delete((void *)v14);
  }
}

  unsigned __int16 v6 = *v10;
  if (!*v10)
  {
    uint64_t v17 = (uint64_t)v21;
LABEL_22:
    sub_135538((uint64_t)v20, (uint64_t)a1, *(const void **)a4, *(_BYTE *)(a4 + 8));
    unsigned __int16 v6 = v20[0];
    sub_32C38(a1, v17, v10, v20[0]);
    v20[0] = 0LL;
    sub_1184AC((uint64_t)v20);
  }

  return v6;
}

      unsigned __int16 v6 = (os_log_t *)sub_138E8(13);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port_HeadphonesWired_Aspen.cpp";
        id v21 = 1024;
        int v22 = 123;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unknown HALJackStateHandler::JackDescriptor.",  buf,  0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unknown HALJackStateHandler::JackDescriptor.");
    }

    char v5 = 1214329654LL;
  }

  char v20 = *(void **)(v11 + 120);
  *(void *)(v11 + 120) = 0LL;
  if (v20 == (void *)(v11 + 96))
  {
    id v21 = 4LL;
    char v20 = (void *)(v11 + 96);
    goto LABEL_23;
  }

  if (v20)
  {
    id v21 = 5LL;
LABEL_23:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }

  return 1LL;
}

    uint64_t v8 = (os_log_t *)sub_138E8(20);
    uint64_t v9 = *v8;
    if (!*v8 || !os_log_type_enabled(*v8, OS_LOG_TYPE_INFO)) {
      return 0LL;
    }
    sub_2CA1C(__p, a1);
    if (v18 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    char v20 = "RoutingSettings_Aspen.cpp";
    id v21 = 1024;
    int v22 = 454;
    float v23 = 2080;
    int v24 = v10;
    int v11 = "%25s:%-5d Skip loading tunings for headset sub-type: '%s'";
    int v12 = v9;
    int v13 = OS_LOG_TYPE_INFO;
LABEL_31:
    _os_log_impl(&dword_0, v12, v13, v11, buf, 0x1Cu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  unsigned int v3 = qword_4A99B8;
  while (1)
  {
    uint64_t v4 = *(_DWORD *)(v3 + 32);
LABEL_6:
    unsigned int v3 = *(void *)v3;
    if (!v3) {
      goto LABEL_7;
    }
  }

  if (v4 < a1)
  {
    v3 += 8LL;
    goto LABEL_6;
  }

  while (1)
  {
    while (1)
    {
      unsigned __int16 v6 = *(_DWORD *)(v2 + 32);
      int v2 = *(void *)v2;
      if (!v2) {
LABEL_34:
      }
        sub_8F9A4("map::at:  key not found");
    }

    int v2 = *(void *)(v2 + 8);
    if (!v2) {
      goto LABEL_34;
    }
  }

      uint64_t v4 = (void *)v4[1];
      if (v4 == (void *)(a1 + 16)) {
        break;
      }
      std::string::append(&v14, ", ", 2uLL);
    }
  }

  std::string::append(&v14, " }", 2uLL);
  int v13 = std::string::insert(&v14, 0LL, "Destroying core object(s): ", 0x1BuLL);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
}

LABEL_37:
    AudioObjectPropertySelector mSelector = a2->mSelector;
  }

  if (mSelector == 1853059700)
  {
    uint64_t v42 = sub_138E8(17);
    uint64_t v43 = sub_138E8(36);
    char v44 = 0;
    uint64_t v45 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v46 = *(void *)(v42 + 8);
    while (1)
    {
      uint64_t v47 = *(int *)&buf[4 * v45];
      char v48 = v44;
      if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
        break;
      }
      char v44 = 1;
      uint64_t v45 = 1LL;
      if ((v48 & 1) != 0)
      {
        if ((v46 & 1) == 0) {
          return;
        }
        goto LABEL_47;
      }
    }

    if ((v46 & v47) == 0) {
      uint64_t v42 = v43;
    }
    if ((*(void *)(v42 + 8) & 1) != 0)
    {
LABEL_47:
      id v49 = *(id *)v42;
      if (v49)
      {
        unsigned int v50 = (os_log_s *)v49;
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v51 = *(void *)a6;
          int v52 = *(_DWORD *)(a1 + 268);
          sub_2CA1C(__p, a2->mScope);
          if (v75 >= 0) {
            int v53 = __p;
          }
          else {
            int v53 = (void **)__p[0];
          }
          AudioObjectPropertyScope v54 = a2->mScope;
          AudioObjectPropertyElement v55 = a2->mElement;
          *(_DWORD *)buf = 136316674;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v77 = 1024;
          int v78 = 263;
          __int16 v79 = 2048;
          *(void *)__int16 v80 = v51;
          *(_WORD *)&v80[8] = 1024;
          *(_DWORD *)&v80[10] = v52;
          *(_WORD *)&v80[14] = 2080;
          *(void *)&v80[16] = v53;
          *(_WORD *)&v80[24] = 1024;
          *(_DWORD *)&v80[26] = v54;
          *(_WORD *)&v80[30] = 1024;
          LODWORD(v81) = v55;
          _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Get sample rate value of %f from HAL device %u (selector: kAudioDevicePropertyNominalSampleRate; s"
            "cope: '%s' (%u); element: %u).",
            buf,
            0x38u);
          if (v75 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

      *(_DWORD *)buf = 8;
      return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56LL))(v13, &v48, 4LL);
    }

    if (v14 != 1668506475)
    {
      if (v14 == 1818455660)
      {
        uint64_t v19 = *a5;
        if (v19 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])(a1, a2, a3, a4))
        {
          uint64_t v29 = (os_log_t *)sub_138E8(13);
          uint64_t v17 = *v29;
          if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v51 = "HP_Control.cpp";
            int v52 = 1024;
            int v53 = 1138;
            uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyCh"
                  "annelNominalLineLevelNameForIDCFString";
            goto LABEL_112;
          }

          goto LABEL_113;
        }

        if (*(_DWORD *)(a6 + 8) != 4)
        {
          char v30 = (os_log_t *)sub_138E8(13);
          uint64_t v17 = *v30;
          if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v51 = "HP_Control.cpp";
            int v52 = 1024;
            int v53 = 1142;
            uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong input data size for kAudioDeviceProp"
                  "ertyChannelNominalLineLevelNameForIDCFString";
            goto LABEL_112;
          }

          goto LABEL_113;
        }

        if (!*(void *)a6)
        {
          uint64_t v31 = (os_log_t *)sub_138E8(13);
          uint64_t v17 = *v31;
          if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v51 = "HP_Control.cpp";
            int v52 = 1024;
            int v53 = 1143;
            uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: w"
                  "rong input data buffer for kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString";
            goto LABEL_112;
          }

          goto LABEL_113;
        }

        if (*(_DWORD *)(a6 + 24) != 8)
        {
          uint64_t v32 = (os_log_t *)sub_138E8(13);
          uint64_t v17 = *v32;
          if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v51 = "HP_Control.cpp";
            int v52 = 1024;
            int v53 = 1144;
            uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong output data size for kAudioDevicePro"
                  "pertyChannelNominalLineLevelNameForIDCFString";
            goto LABEL_112;
          }

          goto LABEL_113;
        }

        if (!*(void *)(a6 + 16))
        {
          char v20 = (os_log_t *)sub_138E8(13);
          uint64_t v17 = *v20;
          if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v51 = "HP_Control.cpp";
            int v52 = 1024;
            int v53 = 1145;
            uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                  "wrong output data buffer for kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString";
            goto LABEL_112;
          }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 561211770;
  }

  if (v8 == 1818456932)
  {
    uint64_t v14 = *a5;
    if (v14 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
    {
      v15.n128_u32[0] = *(_DWORD *)a6;
      uint64_t v10 = (*(float (**)(uint64_t, __n128))(*(void *)a1 + 256LL))(a1, v15);
      goto LABEL_16;
    }

    id v21 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = 136315394;
      AudioObjectPropertyScope v26 = "HP_Control.cpp";
      AudioObjectPropertyElement v27 = 1024;
      uint64_t v28 = 520;
      uint64_t v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioLevelControlPropertyCo"
            "nvertScalarToDecibels";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (v8 != 1818456950)
  {
LABEL_20:
    sub_875F0(a1, a2, a3, a4, a5, (uint64_t *)a6);
    return;
  }

  uint64_t v9 = *a5;
  if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = 136315394;
      AudioObjectPropertyScope v26 = "HP_Control.cpp";
      AudioObjectPropertyElement v27 = 1024;
      uint64_t v28 = 504;
      uint64_t v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioLevelControlPropertyScalarValue";
LABEL_36:
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v25, 0x12u);
      goto LABEL_37;
    }

    goto LABEL_37;
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 240LL))(a1);
LABEL_16:
  *(float *)a6 = v10;
}

      uint64_t v25 = std::__shared_weak_count::lock(v17);
      if (!v25) {
        goto LABEL_42;
      }
      AudioObjectPropertyScope v26 = v25;
      AudioObjectPropertyElement v27 = v24 == v22;
      uint64_t v28 = (unint64_t *)&v25->__shared_owners_;
      do
        uint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }

      AudioObjectPropertyElement v27 = (void *)v13[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          AudioObjectPropertyElement v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          uint64_t v28 = (void *)v13[2];
          uint64_t v29 = *v28 == (void)v13;
          int v13 = v28;
        }

        while (!v29);
      }

      int v13 = v28;
    }

    while (v28 != (void *)(a1 + 16));
  }

  char v30 = sub_138E8(8);
  uint64_t v31 = sub_138E8(34);
  uint64_t v32 = 0;
  uint64_t v33 = 0LL;
  *(void *)buf = 0x100000002LL;
  char v34 = *(void *)(v30 + 8);
  while (1)
  {
    id v35 = *(int *)&buf[4 * v33];
    char v36 = v32;
    if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
      break;
    }
    uint64_t v32 = 1;
    uint64_t v33 = 1LL;
    if ((v36 & 1) != 0)
    {
      if ((v34 & 1) == 0) {
        return;
      }
      goto LABEL_53;
    }
  }

  if ((v34 & v35) == 0) {
    char v30 = v31;
  }
  if ((*(void *)(v30 + 8) & 1) != 0)
  {
LABEL_53:
    float v37 = *(os_log_s **)v30;
    if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      sub_DE128(&__p, (uint64_t)(v2 + 57));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v38 = &__p;
      }
      else {
        int v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RouteCache.cpp";
      uint64_t v42 = 1024;
      uint64_t v43 = 530;
      char v44 = 2080;
      uint64_t v45 = v38;
      _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updated Route Cache: %s", buf, 0x1Cu);
    }
  }

  uint64_t v19 = operator new(0x18uLL);
  v19[2] = 0LL;
  v19[1] = 0LL;
  os_log_t *v19 = v19 + 1;
  sub_254978((void ***)(v252 + 120), (void **)v19);
  char v20 = *(id *)sub_138E8(2);
  id v21 = v20;
  if (v20)
  {
    int v22 = (os_log_s *)v20;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1737;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VirtualAudio_SessionManager creation complete.",  (uint8_t *)buf,  0x12u);
    }
  }

  float v23 = operator new(0x40uLL);
  os_log_s *v23 = off_46EF18;
  v23[1] = v23 + 1;
  v23[2] = v23 + 1;
  v23[3] = 0LL;
  v23[7] = 0LL;
  v23[6] = 0LL;
  v23[4] = v252;
  v23[5] = v23 + 6;
  int v24 = *(void *)(v252 + 128);
  *(void *)(v252 + 128) = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    float v23 = *(void **)(v252 + 128);
  }

  sub_6DD4();
  uint64_t v25 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  if (v23[7])
  {
    AudioObjectPropertyScope v26 = (os_log_t *)sub_138E8(13);
    AudioObjectPropertyElement v27 = *v26;
    if (*v26)
    {
      if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_PortManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 105;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: port vector not empty",  (uint8_t *)buf,  0x12u);
      }
    }
  }

  uint64_t v28 = (void *)sub_546E0();
  uint64_t v29 = (*(uint64_t (**)(void *))(*v28 + 16LL))(v28);
  if (v28[24] || v28[25])
  {
    UInt32 v220 = (os_log_t *)sub_138E8(13);
    int v221 = *v220;
    if (*v220 && os_log_type_enabled(*v220, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "PortManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 406;
      _os_log_impl( &dword_0,  v221,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): The ClientPortUpdateListenerProc has already been set",  (uint8_t *)buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "The ClientPortUpdateListenerProc has already been set");
  }

  v28[24] = sub_D63A4;
  v28[25] = v23;
  if (v29) {
    (*(void (**)(void *))(*v28 + 24LL))(v28);
  }
  memset(buf, 0, 24);
  strcpy((char *)&buf[6], "cwdv");
  LOBYTE(v264) = 0;
  LODWORD(v265) = 3;
  v267 = 0LL;
  std::string::size_type v268 = 0LL;
  int v266 = &v267;
  CFTypeRef cf = 0LL;
  int v269 = 44739240;
  char v30 = sub_546E0();
  __int128 __p = &off_46EF68;
  int v275 = &__p;
  sub_FF3FC((uint64_t *)outData, v30, (unsigned int **)buf, (uint64_t)&__p);
  uint64_t v31 = v275;
  if (v275 == &__p)
  {
    uint64_t v32 = 4LL;
    uint64_t v31 = &__p;
    goto LABEL_55;
  }

  if (v275)
  {
    uint64_t v32 = 5LL;
LABEL_55:
    (*((void (**)(void))*v31 + v32))();
  }

  sub_D4DA0((uint64_t *)&__p, (uint64_t)outData, "", 116);
  sub_1BB88((uint64_t *)&__p);
  if (v23[7])
  {
    sub_6DD4();
    sub_34AA0(&__p, (uint64_t)&qword_48F828);
    strcpy(v282, "strpbolg");
    v282[9] = 0;
    *(_WORD *)&v282[10] = 0;
    (*(void (**)(void, uint64_t, _BYTE *, uint64_t))(*(void *)v23[4] + 72LL))(v23[4], 1LL, v282, 1LL);
    if ((_BYTE)v273) {
      (*(void (**)(void *))(*(void *)__p + 16LL))(__p);
    }
  }

  sub_85B80((uint64_t *)outData);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v267);
  if (*(void *)buf)
  {
    *(void *)&buf[2] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v25) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  char v34 = *(id *)sub_138E8(2);
  id v35 = v34;
  if (v34)
  {
    char v36 = (os_log_s *)v34;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1743;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VirtualAudio_PortManager creation complete.",  (uint8_t *)buf,  0x12u);
    }
  }

  float v37 = (char *)operator new(0x40uLL);
  int v38 = operator new(0x10uLL);
  sub_23679C((uint64_t)v38, "com.apple.coreaudio.IORunning");
  *(void *)float v37 = v38;
  __int16 v39 = operator new(0x10uLL);
  sub_23679C((uint64_t)v39, "com.apple.coreaudio.ActivePorts");
  *((void *)v37 + 1) = v39;
  AudioObjectPropertyScope v40 = operator new(0x10uLL);
  sub_23679C((uint64_t)v40, "com.apple.coreaudio.RoutingConfiguration");
  *(_OWORD *)(v37 + 24) = 0u;
  *((void *)v37 + 2) = v40;
  *(_OWORD *)(v37 + 40) = 0u;
  *((void *)v37 + 7) = 0LL;
  AudioObjectPropertyElement v41 = sub_138E8(1);
  uint64_t v42 = sub_138E8(31);
  uint64_t v43 = 0;
  char v44 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v45 = *(void *)(v41 + 8);
  while (1)
  {
    uint64_t v46 = (int)buf[v44];
    uint64_t v47 = v43;
    if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
      break;
    }
    uint64_t v43 = 1;
    char v44 = 1LL;
    if ((v47 & 1) != 0) {
      goto LABEL_77;
    }
  }

  if ((v45 & v46) == 0) {
    AudioObjectPropertyElement v41 = v42;
  }
LABEL_77:
  char v48 = *(os_log_s **)v41;
  if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "VirtualAudio_IONotificationManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 43;
    _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Instantiated VirtualAudio_IONotificationManager.",  (uint8_t *)buf,  0x12u);
  }

  sub_3A064((uint64_t)v37, *((void *)v37 + 6), *((void *)v37 + 7), 1u);
  sub_2549B4((uint64_t **)(v252 + 136), (uint64_t *)v37);
  id v49 = *(id *)sub_138E8(2);
  unsigned int v50 = v49;
  if (v49)
  {
    uint64_t v51 = (os_log_s *)v49;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1747;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VirtualAudio_IONotificationManager creation complete.",  (uint8_t *)buf,  0x12u);
    }
  }

  int v52 = (char *)operator new(0x248uLL);
  int v53 = operator new(0x10uLL);
  *int v53 = &off_4791B0;
  v53[1] = v252;
  AudioObjectPropertyScope v54 = operator new(0x10uLL);
  __int128 *v54 = &off_4791D8;
  v54[1] = v252;
  sub_33200();
  *(void *)int v52 = &qword_48F0A8;
  AudioObjectPropertyElement v55 = sub_753A8();
  uint64_t v56 = v55;
  __int128 __p = &__p;
  int v273 = (char *)&__p;
  v274 = 0LL;
  if (v55 > 186)
  {
    if (v55 > 196)
    {
      if (v55 != 197) {
        goto LABEL_151;
      }
    }

    else if (v55 != 187)
    {
      if (v55 == 194)
      {
        *(void *)buf = buf;
        *(void *)&buf[2] = buf;
        *(void *)&uint8_t buf[4] = 0LL;
        int v134 = operator new(0x10uLL);
        v134[2] = 1952608868;
        *((_BYTE *)v134 + 12) = 1;
        *(void *)int v134 = &off_4820A8;
        unsigned int v135 = operator new(0x18uLL);
        v135[1] = buf;
        v135[2] = v134;
        *unsigned int v135 = buf;
        *(void *)buf = v135;
        *(void *)&buf[2] = v135;
        *(void *)&uint8_t buf[4] = 1LL;
        UInt32 v136 = operator new(0x10uLL);
        v136[2] = 1952608868;
        *(void *)UInt32 v136 = &off_476350;
        *((_BYTE *)v136 + 12) = 1;
        int v137 = operator new(0x18uLL);
        v137[1] = buf;
        v137[2] = v136;
        CFTypeRef *v137 = v135;
        v135[1] = v137;
        *(void *)buf = v137;
        *(void *)&uint8_t buf[4] = 2LL;
        int v138 = operator new(0x10uLL);
        *int v138 = &off_47D660;
        v138[1] = 0LL;
        *((_DWORD *)v138 + 2) = 1953330540;
        CFMutableDictionaryRef v139 = operator new(0x18uLL);
        v139[1] = buf;
        v139[2] = v138;
        *CFMutableDictionaryRef v139 = v137;
        v137[1] = v139;
        *(void *)buf = v139;
        *(void *)&uint8_t buf[4] = 3LL;
        uint64_t v140 = operator new(0x10uLL);
        *uint64_t v140 = &off_471AC0;
        v140[1] = 0LL;
        *((_DWORD *)v140 + 2) = 1952608868;
        *((_BYTE *)v140 + 12) = 1;
        int v141 = operator new(0x18uLL);
        v141[1] = buf;
        v141[2] = v140;
        void *v141 = v139;
        v139[1] = v141;
        *(void *)buf = v141;
        *(void *)&uint8_t buf[4] = 4LL;
        UInt32 v142 = operator new(0x10uLL);
        CFTypeRef *v142 = &off_476398;
        v142[1] = 0LL;
        *((_DWORD *)v142 + 2) = 1953524833;
        unsigned int v143 = operator new(0x18uLL);
        v143[1] = buf;
        v143[2] = v142;
        os_log_t *v143 = v141;
        v141[1] = v143;
        *(void *)buf = v143;
        *(void *)&uint8_t buf[4] = 5LL;
        int v144 = operator new(0x10uLL);
        *int v144 = &off_476430;
        v144[1] = 0LL;
        *((_DWORD *)v144 + 2) = 1953654115;
        int v145 = operator new(0x18uLL);
        v145[1] = buf;
        v145[2] = v144;
        os_log_t *v145 = v143;
        v143[1] = v145;
        *(void *)buf = v145;
        *(void *)&uint8_t buf[4] = 6LL;
        UInt32 v146 = operator new(0x10uLL);
        _DWORD *v146 = &off_4763D0;
        v146[1] = 0LL;
        *((_DWORD *)v146 + 2) = 1953524850;
        uint64_t v62 = operator new(0x18uLL);
        v62[1] = buf;
        v62[2] = v146;
        __int128 *v62 = v145;
        v145[1] = v62;
        unsigned int v63 = 7LL;
        goto LABEL_96;
      }

      if (v55 != 195) {
        goto LABEL_151;
      }
LABEL_95:
      *(void *)buf = buf;
      *(void *)&buf[2] = buf;
      *(void *)&uint8_t buf[4] = 0LL;
      id v57 = operator new(0x10uLL);
      *id v57 = &off_476398;
      v57[1] = 0LL;
      *((_DWORD *)v57 + 2) = 1953524833;
      unsigned int v58 = operator new(0x18uLL);
      v58[1] = buf;
      v58[2] = v57;
      *unsigned int v58 = buf;
      *(void *)buf = v58;
      *(void *)&buf[2] = v58;
      *(void *)&uint8_t buf[4] = 1LL;
      uint64_t v59 = operator new(0x10uLL);
      os_log_s *v59 = &off_476430;
      v59[1] = 0LL;
      *((_DWORD *)v59 + 2) = 1953654115;
      __int16 v60 = operator new(0x18uLL);
      v60[1] = buf;
      v60[2] = v59;
      *__int16 v60 = v58;
      v58[1] = v60;
      *(void *)buf = v60;
      *(void *)&uint8_t buf[4] = 2LL;
      int v61 = operator new(0x10uLL);
      os_log_s *v61 = &off_4763D0;
      v61[1] = 0LL;
      *((_DWORD *)v61 + 2) = 1953524850;
      uint64_t v62 = operator new(0x18uLL);
      v62[1] = buf;
      v62[2] = v61;
      __int128 *v62 = v60;
      v60[1] = v62;
      unsigned int v63 = 3LL;
LABEL_96:
      *(void *)buf = v62;
      *(void *)&uint8_t buf[4] = v63;
      goto LABEL_97;
    }

  int v38 = *a2;
  float v37 = a2[1];
  if (*a2 != v37)
  {
    while (*(_DWORD *)(*v38 + 4) || *(_DWORD *)*v38 != 1986291046)
    {
      v38 += 27;
      if (v38 == v37) {
        goto LABEL_41;
      }
    }
  }

  if (v37 == v38)
  {
LABEL_41:
    __int16 v39 = (os_log_s *)*(id *)sub_138E8(13);
    AudioObjectPropertyScope v40 = v39;
    if (v39)
    {
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3962;
        _os_log_impl(&dword_0, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_E5784(theDict, v3[27] + 8LL);
  if (v110 && theDict[0] && CFDictionaryGetCount(theDict[0]))
  {
    uint64_t v42 = *((_DWORD *)v38 + 3);
    if (v42 <= 1987077986)
    {
      if (v42 == 1768057203) {
        goto LABEL_68;
      }
      uint64_t v43 = 1919776355;
    }

    else
    {
      if (v42 == 1987077987 || v42 == 1987081833) {
        goto LABEL_68;
      }
      uint64_t v43 = 1987081839;
    }

    if (v42 == v43) {
      goto LABEL_68;
    }
    char v44 = *((_DWORD *)v38 + 2);
    if (v44 > 1668313714)
    {
      if (v44 != 1668313715 && v44 != 1668703084)
      {
        uint64_t v45 = 1668576377;
LABEL_63:
        if (v44 != v45) {
          goto LABEL_68;
        }
      }
    }

    else if (v44 != 1668301427 && v44 != 1668309362)
    {
      uint64_t v45 = 1668313666;
      goto LABEL_63;
    }

    uint64_t v46 = (os_log_s *)*(id *)sub_138E8(2);
    uint64_t v47 = v46;
    if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3971;
      _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VP block was provided in a play and record category, but not in a chat mode! Please file a bug against Audio (New Bugs). Will need to figure out what app has a malformed session.",  buf,  0x12u);
    }
  }

  if (v15 == v14) {
    goto LABEL_50;
  }
  uint64_t v19 = v15 + 56;
  if (v15 + 56 == v14) {
    goto LABEL_50;
  }
  while (2)
  {
    if (*(double *)v19 != 0.0)
    {
LABEL_45:
      id v21 = *(_OWORD *)v19;
      int v22 = *(_OWORD *)(v19 + 16);
      float v23 = *(_OWORD *)(v19 + 32);
      *(void *)(v15 + 48) = *(void *)(v19 + 48);
      *(_OWORD *)(v15 + 16) = v22;
      *(_OWORD *)(v15 + 32) = v23;
      *(_OWORD *)uint64_t v15 = v21;
      v15 += 56LL;
      goto LABEL_46;
    }

    unsigned __int16 v6 = *(unsigned __int8 *)(a1 + 5);
    if (!*(_BYTE *)(a1 + 5)) {
      return v6;
    }
    goto LABEL_38;
  }

  if (v3 > 1836343923)
  {
    if (v3 == 1836343924) {
      goto LABEL_38;
    }
    if (v3 != 1836344107)
    {
      if (v3 == 1836344180) {
        goto LABEL_38;
      }
      goto LABEL_47;
    }

    goto LABEL_37;
  }

  if (v3 == 1836343668) {
    goto LABEL_38;
  }
  if (v3 == 1836343851) {
    goto LABEL_37;
  }
LABEL_47:
  unsigned __int16 v6 = 0LL;
  if (v3 != 1819304813 || (*(_DWORD *)(a2 + 12) & 1) != 0 || v4 < 3) {
    return v6;
  }
  if (v4 == 8)
  {
    unsigned __int16 v6 = *(unsigned __int8 *)(a1 + 4);
    if (!*(_BYTE *)(a1 + 4)) {
      return v6;
    }
  }

  else if (v4 == 6)
  {
    unsigned __int16 v6 = *(unsigned __int8 *)(a1 + 3);
    if (!*(_BYTE *)(a1 + 3)) {
      return v6;
    }
  }

  else
  {
    unsigned __int16 v6 = *(unsigned __int8 *)(a1 + 1);
    if (!*(_BYTE *)(a1 + 1)) {
      return v6;
    }
  }

      sub_232A4(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
      return;
    }

    uint64_t v17 = *a5;
    if (v17 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      AudioObjectPropertyElement v41 = (os_log_t *)sub_138E8(13);
      uint64_t v42 = *v41;
      if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
      {
        UInt32 v65 = *a2;
        uint64_t v66 = *((_DWORD *)a2 + 2);
        sub_613AC((uint64_t)&v67, (unsigned int *)&v65);
        uint64_t v43 = SHIBYTE(v68);
        char v44 = (__int128 *)v67;
        uint64_t v45 = *a5;
        uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
        uint64_t v47 = &v67;
        *(_DWORD *)__int128 __p = 136316162;
        *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
        if (v43 < 0) {
          uint64_t v47 = v44;
        }
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 386;
        *(_WORD *)&__p[18] = 2080;
        *(void *)&__p[20] = v47;
        *(_WORD *)&_BYTE __p[28] = 1024;
        *(_DWORD *)int v70 = v45;
        *(_WORD *)&v70[4] = 1024;
        *(_DWORD *)&v70[6] = v46;
        _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          __p,
          0x28u);
        if (SHIBYTE(v68) < 0) {
          operator delete((void *)v67);
        }
      }

      char v48 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v48 = &off_4865A0;
      v48[2] = 561211770;
    }

    *(_DWORD *)a6 = 1;
  }

  if (*(_BYTE *)(a1 + 480))
  {
    uint64_t v25 = *(id *)sub_138E8(17);
    AudioObjectPropertyScope v26 = v25;
    if (v25)
    {
      AudioObjectPropertyElement v27 = (os_log_s *)v25;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v28 = *(_DWORD *)(a1 + 268);
        sub_48E98(&__p, a3);
        uint64_t v29 = v82 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315906;
        __int16 v84 = "Device_HAL_Common.mm";
        AudioObjectPropertyElement v85 = 1024;
        *(_DWORD *)uint64_t v86 = 153;
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)&v86[6] = v28;
        *(_WORD *)&v86[10] = 2080;
        *(void *)&v86[12] = v29;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Detected that device %u with UID %s is simulated by ADS",  buf,  0x22u);
        if (v82 < 0) {
          operator delete(__p);
        }
      }
    }
  }

  char v30 = *(id *)sub_138E8(17);
  uint64_t v31 = v30;
  if (v30)
  {
    uint64_t v32 = (os_log_s *)v30;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      sub_23FE8((uint64_t)&__p, v10);
      if (v82 >= 0) {
        uint64_t v33 = &__p;
      }
      else {
        uint64_t v33 = __p;
      }
      *(_DWORD *)buf = 136315650;
      __int16 v84 = "Device_HAL_Common.mm";
      AudioObjectPropertyElement v85 = 1024;
      *(_DWORD *)uint64_t v86 = 156;
      *(_WORD *)&v86[4] = 2080;
      *(void *)&v86[6] = v33;
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created physical device %s.", buf, 0x1Cu);
      if (v82 < 0) {
        operator delete(__p);
      }
    }
  }

  return a1;
}

void sub_2398C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_239DC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    int v22 = (os_log_t *)sub_138E8(13);
    float v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v28 = 1024;
      int v29 = 679;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceStart: no plug-in",  buf,  0x12u);
    }

    int v21 = 1852797029;
LABEL_30:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v21;
  }

  sub_92EF8();
  uint64_t v5 = sub_28AFEC(a2);
  if (!v5 || ((uint64_t v6 = v5, v7 = *(_DWORD *)(v5 + 12), v7 != 1633773415) ? (v8 = v7 == 1633969526) : (v8 = 1), !v8))
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    char v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
        __int16 v28 = 1024;
        int v29 = 683;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceStart: no de vice with given ID",  buf,  0x12u);
      }
    }

    int v21 = 560227702;
    goto LABEL_30;
  }

  uint64_t v9 = sub_138E8(5);
  uint64_t v10 = sub_138E8(31);
  char v11 = 0;
  uint64_t v12 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1LL;
    if ((v15 & 1) != 0) {
      goto LABEL_14;
    }
  }

  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_14:
  char v16 = *(os_log_s **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 96LL))(__p, v6);
    uint64_t v17 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v28 = 1024;
    int v29 = 686;
    __int16 v30 = 2048;
    uint64_t v31 = a3;
    __int16 v32 = 2080;
    uint64_t v33 = v17;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client request to start IO proc ID %p on VAD: '%s'.",  buf,  0x26u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 344LL))(v6, a3);
  return 0LL;
}

void sub_23CD8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, __int16 a17, __int16 a18, __int128 a19)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v21 = (os_log_t *)sub_138E8(5);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 694;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
        goto LABEL_20;
      }

      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96LL))(&__p, v19);
      float v23 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 694;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
      if (a15 < 0) {
        goto LABEL_18;
      }
    }
  }

  else
  {
    int v24 = (os_log_t *)sub_138E8(5);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 701;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
        goto LABEL_20;
      }

      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96LL))(&__p, v19);
      char v26 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 701;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
      if (a15 < 0) {
LABEL_18:
      }
        operator delete(__p);
    }
  }

LABEL_20:
  __cxa_end_catch();
  JUMPOUT(0x23B84LL);
}

          uint64_t v18 = sub_45C8((uint64_t)(a1 + 86), 0, 0);
          uint64_t v19 = *(_OWORD *)(v18 + 56);
          *(_OWORD *)buf = *(_OWORD *)(v18 + 40);
          *(_OWORD *)&buf[16] = v19;
          uint64_t v62 = *(void *)(v18 + 72);
          unsigned int v58 = xmmword_403210;
          if (v6) {
            (*(void (**)(uint64_t, __int128 *, _BYTE *, uint64_t *))(*(void *)v6 + 16LL))(v6, &v58, buf, v59);
          }
          uint64_t v9 = *a2;
        }

        if ((v9 & 4) != 0)
        {
          char v20 = sub_138E8(16);
          int v21 = sub_138E8(40);
          int v22 = 0;
          float v23 = 0LL;
          *(void *)buf = 0x100000002LL;
          int v24 = *(void *)(v20 + 8);
          while (1)
          {
            uint64_t v25 = *(int *)&buf[4 * v23];
            char v26 = v22;
            if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
              break;
            }
            int v22 = 1;
            float v23 = 1LL;
            if ((v26 & 1) != 0)
            {
              if ((v24 & 1) == 0) {
                goto LABEL_35;
              }
              goto LABEL_32;
            }
          }

          if ((v24 & v25) == 0) {
            char v20 = v21;
          }
          if ((*(void *)(v20 + 8) & 1) != 0)
          {
LABEL_32:
            AudioObjectPropertyElement v27 = *(os_log_s **)v20;
            if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1487;
              _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitor for secondary input streams",  buf,  0x12u);
            }
          }

  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6261697273LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v14 = *(char **)a2;
  char v15 = (*(_DWORD *)(a2 + 8) - *(void *)a2) & 0xFFFFFFF8;
  if (v14) {
    char v16 = v14;
  }
  else {
    char v16 = &v25;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  uint64_t v18 = AudioObjectSetPropertyData(v17, &inAddress, 0, 0LL, v15, v16);
  if ((_DWORD)v18)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(16);
    char v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v18);
        if (v23 >= 0) {
          int v21 = __p;
        }
        else {
          int v21 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        AudioObjectPropertyElement v27 = "AggregateDevice.cpp";
        __int16 v28 = 1024;
        int v29 = 695;
        __int16 v30 = 2080;
        uint64_t v31 = v21;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL returned an error for kAudioDevicePropertyIssueReporterIDs: '%s'",  buf,  0x1Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v14 = *a5;
  if (v14 != (*(unsigned int (**)(void *, int *, uint64_t, uint64_t))(*a1 + 48LL))(a1, a2, a3, a4))
  {
    __int16 v28 = (os_log_t *)sub_138E8(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      char v36 = *(void *)a2;
      float v37 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v36);
      __int16 v30 = v39;
      uint64_t v31 = (void **)__p[0];
      __int16 v32 = *a5;
      uint64_t v33 = (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1 + 48LL))(a1, a2, a3, a4);
      char v34 = __p;
      *(_DWORD *)buf = 136316162;
      AudioObjectPropertyElement v41 = (uint64_t)"VirtualAudio_Control.cpp";
      if (v30 < 0) {
        char v34 = v31;
      }
      uint64_t v42 = 1024;
      uint64_t v43 = 249;
      char v44 = 2080;
      uint64_t v45 = (const char *)v34;
      uint64_t v46 = 1024;
      LODWORD(v47[0]) = v32;
      WORD2(v47[0]) = 1024;
      *(_DWORD *)((char *)v47 + 6) = v33;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }

    id v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)id v35 = &off_4865A0;
    v35[2] = 561211770;
  }

  char v15 = a1[12];
  *(_DWORD *)buf = *a2;
  AudioObjectPropertyElement v41 = 1735159650LL;
  (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, int *, uint64_t))(*(void *)v15 + 40LL))( v15,  buf,  a3,  a4,  a5,  a6);
}

  BOOL v8 = (void *)a1[11];
  uint64_t v9 = a1 + 12;
  if (v78)
  {
    uint64_t v10 = v76;
    v77[2] = 0LL;
    char v76 = &v77;
    __int16 v77 = 0LL;
    int v78 = 0LL;
    if (v10[1]) {
      char v11 = (uint64_t)v10[1];
    }
    else {
      char v11 = (uint64_t)v10;
    }
    *(void *)buf = &v76;
    *(void *)&buf[8] = v11;
    *(void *)&buf[16] = v11;
    if (!v11 || (*(void *)&buf[8] = sub_68080(v11), v8 == v9))
    {
      uint64_t v33 = v8;
    }

    else
    {
      do
      {
        uint64_t v12 = v8[4];
        *(_DWORD *)(v11 + 40) = *((_DWORD *)v8 + 10);
        *(void *)(v11 + 32) = v12;
        if ((void *)v11 != v8)
        {
          uint64_t v13 = v8 + 6;
          uint64_t v14 = (void *)(v11 + 48);
          char v15 = v8[7];
          for (uint64_t i = *(void **)(v11 + 56); ; uint64_t i = (void *)i[1])
          {
            uint64_t v17 = (void *)v15 == v13 || i == v14;
            if (v17) {
              break;
            }
            uint64_t v18 = *(void *)(v15 + 16);
            *((_DWORD *)i + 6) = *(_DWORD *)(v15 + 24);
            i[2] = v18;
            *((_OWORD *)i + 2) = *(_OWORD *)(v15 + 32);
            char v15 = *(void *)(v15 + 8);
          }

          if (i == v14)
          {
            if ((void *)v15 != v13)
            {
              int v22 = operator new(0x30uLL);
              float v23 = v22;
              os_log_s *v22 = 0LL;
              v22[1] = 0LL;
              int v24 = *(void *)(v15 + 16);
              *((_DWORD *)v22 + 6) = *(_DWORD *)(v15 + 24);
              v22[2] = v24;
              *((_OWORD *)v22 + 2) = *(_OWORD *)(v15 + 32);
              uint64_t v25 = *(void *)(v15 + 8);
              if ((void *)v25 == v13)
              {
                char v26 = 1LL;
              }

              else
              {
                char v26 = 1LL;
                AudioObjectPropertyElement v27 = v22;
                do
                {
                  int v22 = operator new(0x30uLL);
                  os_log_s *v22 = v27;
                  v22[1] = 0LL;
                  __int16 v28 = *(void *)(v25 + 16);
                  *((_DWORD *)v22 + 6) = *(_DWORD *)(v25 + 24);
                  v22[2] = v28;
                  *((_OWORD *)v22 + 2) = *(_OWORD *)(v25 + 32);
                  v27[1] = v22;
                  ++v26;
                  uint64_t v25 = *(void *)(v25 + 8);
                  AudioObjectPropertyElement v27 = v22;
                }

                while ((void *)v25 != v13);
              }

              int v29 = *(void *)(v11 + 48);
              *(void *)(v29 + 8) = v23;
              os_log_s *v23 = v29;
              *(void *)(v11 + 48) = v22;
              v22[1] = v14;
              *(void *)(v11 + 64) += v26;
              a2 = v68;
            }
          }

          else
          {
            uint64_t v19 = *(void *)(v11 + 48);
            char v20 = *i;
            *(void *)(v20 + 8) = *(void *)(v19 + 8);
            **(void **)(v19 + 8) = v20;
            do
            {
              int v21 = (void *)i[1];
              --*(void *)(v11 + 64);
              operator delete(i);
              uint64_t i = v21;
            }

            while (v21 != v14);
          }

          char v11 = *(void *)&buf[16];
        }

        __int16 v30 = sub_680D4((uint64_t)&v76, v81, v11 + 32);
        uint64_t v31 = v81[0];
        *(void *)char v11 = 0LL;
        *(void *)(v11 + 8) = 0LL;
        *(void *)(v11 + 16) = v31;
        const void *v30 = v11;
        if (*v76)
        {
          char v76 = (uint64_t **)*v76;
          char v11 = *v30;
        }

        sub_7A420(v77, (uint64_t *)v11);
        ++v78;
        *(void *)&buf[16] = *(void *)&buf[8];
        if (*(void *)&buf[8]) {
          *(void *)&buf[8] = sub_68080(*(uint64_t *)&buf[8]);
        }
        __int16 v32 = (void *)v8[1];
        if (v32)
        {
          do
          {
            uint64_t v33 = v32;
            __int16 v32 = (void *)*v32;
          }

          while (v32);
        }

        else
        {
          do
          {
            uint64_t v33 = (void *)v8[2];
            uint64_t v17 = *v33 == (void)v8;
            BOOL v8 = v33;
          }

          while (!v17);
        }

        char v11 = *(void *)&buf[16];
        if (*(void *)&buf[16]) {
          char v34 = v33 == v9;
        }
        else {
          char v34 = 1;
        }
        BOOL v8 = v33;
      }

      while (!v34);
    }

    sub_187320((uint64_t)buf);
    BOOL v8 = v33;
  }

  if (v8 != v9)
  {
    do
    {
      id v35 = (uint64_t *)operator new(0x48uLL);
      char v36 = v35;
      *(void *)buf = v35;
      *(void *)&buf[8] = &v77;
      buf[16] = 0;
      float v37 = *((_DWORD *)v8 + 10);
      v35[4] = v8[4];
      int v38 = (uint64_t)(v35 + 4);
      *((_DWORD *)v35 + 10) = v37;
      __int16 v39 = (char *)(v35 + 6);
      v35[6] = (uint64_t)(v35 + 6);
      v35[7] = (uint64_t)(v35 + 6);
      v35[8] = 0LL;
      AudioObjectPropertyScope v40 = v8[7];
      if ((void *)v40 != v8 + 6)
      {
        AudioObjectPropertyElement v41 = 1LL;
        uint64_t v42 = (char *)(v35 + 6);
        do
        {
          uint64_t v43 = operator new(0x30uLL);
          char v44 = *(void *)(v40 + 16);
          v43[6] = *(_DWORD *)(v40 + 24);
          *((void *)v43 + 2) = v44;
          *((_OWORD *)v43 + 2) = *(_OWORD *)(v40 + 32);
          *(void *)uint64_t v43 = v42;
          *((void *)v43 + 1) = v39;
          *((void *)v42 + 1) = v43;
          v36[6] = (uint64_t)v43;
          v36[8] = v41;
          AudioObjectPropertyScope v40 = *(void *)(v40 + 8);
          ++v41;
          uint64_t v42 = (char *)v43;
        }

        while ((void *)v40 != v8 + 6);
      }

      buf[16] = 1;
      uint64_t v45 = (uint64_t **)sub_680D4((uint64_t)&v76, v81, v38);
      uint64_t v46 = v81[0];
      *char v36 = 0LL;
      v36[1] = 0LL;
      v36[2] = (uint64_t)v46;
      os_log_t *v45 = v36;
      a2 = v68;
      if (*v76)
      {
        char v76 = (uint64_t **)*v76;
        char v36 = *v45;
      }

      sub_7A420(v77, v36);
      ++v78;
      *(void *)buf = 0LL;
      sub_18736C((uint64_t)buf);
      uint64_t v47 = (void *)v8[1];
      if (v47)
      {
        do
        {
          char v48 = v47;
          uint64_t v47 = (void *)*v47;
        }

        while (v47);
      }

      else
      {
        do
        {
          char v48 = (void *)v8[2];
          uint64_t v17 = *v48 == (void)v8;
          BOOL v8 = v48;
        }

        while (!v17);
      }

      BOOL v8 = v48;
    }

    while (v48 != v9);
  }

  memset(v69.__m_.__opaque, 0, sizeof(v69.__m_.__opaque));
  v69.__m_.__sig = 850045863LL;
  memset(v68.__cv_.__opaque, 0, sizeof(v68.__cv_.__opaque));
  v68.__cv_.__sig = 1018212795LL;
  int v53 = 0;
  sub_7D684(inClientData, inObjectID, &inAddress, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v53);
  for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v18.__d_.__rep_) / -1000)
  {
    char v15 = sub_7D434((uint64_t)&v54);
    if (v16) {
      goto LABEL_107;
    }
    uint64_t v17 = (unint64_t)v15;
    if (!v15 || !inData) {
      break;
    }
    if (CFEqual(v15, (CFTypeRef)inData)) {
      goto LABEL_55;
    }
LABEL_28:
    if (i <= 0)
    {
      uint64_t v33 = (os_log_t *)sub_138E8(13);
      char v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        id v49 = inAddress;
        p_lk = &__lk;
        sub_613AC((uint64_t)&__lk, &v49.mSelector);
        if (v51 < 0) {
          p_lk = __lk.__m_;
        }
        if (v17 && inData) {
          char v36 = CFEqual((CFTypeRef)v17, (CFTypeRef)inData) != 0;
        }
        else {
          char v36 = (v17 | inData) == 0;
        }
        buf.AudioObjectPropertySelector mSelector = 136316930;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        uint64_t v59 = 1024;
        __int16 v60 = 248;
        int v61 = 2080;
        *(void *)uint64_t v62 = "set";
        *(_WORD *)&v62[8] = 2080;
        *(void *)&v62[10] = p_lk;
        *(_WORD *)&v62[18] = 2080;
        *(void *)&v62[20] = "set";
        *(_WORD *)&v62[28] = 1024;
        unsigned int v63 = v36;
        unsigned int v64 = 1024;
        UInt32 v65 = 0;
        uint64_t v66 = 1024;
        id v67 = inObjectID;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
        if (v51 < 0) {
          operator delete(__lk.__m_);
        }
      }

  sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 1985);
  char v11 = *(void *)&buf[8];
  if (*(_BYTE **)&buf[8] == buf)
  {
    LOBYTE(v12) = 1;
  }

  else
  {
    uint64_t v12 = 1;
    do
    {
      if ((*(unsigned int (**)(void, const AudioObjectPropertyAddress *))(**(void **)(v11 + 16) + 16LL))( *(void *)(v11 + 16),  a2))
      {
        v12 &= (*(uint64_t (**)(void, const AudioObjectPropertyAddress *, OSStatus (__cdecl *)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *))(**(void **)(v11 + 16) + 72LL))( *(void *)(v11 + 16),  a2,  a3,  a4);
      }

      char v11 = *(void *)(v11 + 8);
    }

    while ((_BYTE *)v11 != buf);
  }

  sub_1BB88((uint64_t *)buf);
  return v12 & 1;
}

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    AudioObjectPropertyElement v41 = sub_138E8(13);
    if ((*(_BYTE *)(v41 + 8) & 1) != 0)
    {
      uint64_t v42 = *(os_log_s **)v41;
      if (*(void *)v41)
      {
        if (os_log_type_enabled(*(os_log_t *)v41, OS_LOG_TYPE_DEBUG))
        {
          int v52 = *a3;
          int v53 = *((_DWORD *)a3 + 2);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v52);
          uint64_t v43 = v55 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          UInt32 v65 = 1024;
          uint64_t v66 = 288;
          id v67 = 2080;
          *(void *)unsigned int v68 = v43;
          *(_WORD *)&v68[8] = 1024;
          *(_DWORD *)&v68[10] = v51;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v55 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }

    char v16 = 0LL;
    goto LABEL_85;
  }

  __int16 v32 = (os_log_t *)sub_138E8(13);
  uint64_t v33 = *v32;
  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v75, v16);
    char v34 = a3;
    id v35 = v75.__m_.__opaque[15];
    sig = v75.__m_.__sig;
    inClientData = *v34;
    id v57 = *((_DWORD *)v34 + 2);
    sub_613AC((uint64_t)&v74, (unsigned int *)&inClientData);
    float v37 = &v75;
    if (v35 < 0) {
      float v37 = (std::mutex *)sig;
    }
    if (v74.__cv_.__opaque[15] >= 0) {
      int v38 = (uint64_t)&v74;
    }
    else {
      int v38 = v74.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    UInt32 v65 = 1024;
    uint64_t v66 = 207;
    id v67 = 1024;
    *(_DWORD *)unsigned int v68 = v16;
    *(_WORD *)&v68[4] = 2080;
    *(void *)&v68[6] = v37;
    *(_WORD *)&v68[14] = 2080;
    *(void *)&v68[16] = v38;
    *(_WORD *)&v68[24] = 1024;
    *(_DWORD *)&v68[26] = a2;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (v74.__cv_.__opaque[15] < 0) {
      operator delete((void *)v74.__cv_.__sig);
    }
    if (v75.__m_.__opaque[15] < 0) {
      operator delete((void *)v75.__m_.__sig);
    }
  }

  return v16;
}

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
    goto LABEL_23;
  }

      uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 1008) + 464LL))(*(void *)(a1 + 1008));
      char v20 = &v53;
      if (v19) {
        char v20 = &v51;
      }
      int v21 = *v20;
      sub_772C4(&v49, a1, *v20);
      if (v49)
      {
        int v22 = sub_138E8(1);
        float v23 = sub_138E8(39);
        int v24 = 0;
        uint64_t v25 = 0LL;
        *(void *)buf = 0x100000002LL;
        char v26 = *(void *)(v22 + 8);
        while (1)
        {
          AudioObjectPropertyElement v27 = (int)buf[v25];
          __int16 v28 = v24;
          if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
            break;
          }
          int v24 = 1;
          uint64_t v25 = 1LL;
          if ((v28 & 1) != 0) {
            goto LABEL_29;
          }
        }

        if ((v26 & v27) == 0) {
          int v22 = v23;
        }
LABEL_29:
        int v29 = *(os_log_s **)v22;
        if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          CFTypeRef Mutable = *(CFMutableDictionaryRef *)(a1 + 576);
          sub_33464(&__p, (unsigned int *)&Mutable);
          __int16 v30 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          uint64_t v66 = 1024;
          id v67 = 1065;
          unsigned int v68 = 2048;
          UInt32 v69 = v21;
          int v70 = 2080;
          int v71 = v30;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d In response to telephony hardware sample rate change, updating sample rate to %f on VAD: '%s'.",  (uint8_t *)buf,  0x26u);
        }

        sub_B6C4C(a1, (uint64_t)v50);
      }

      uint64_t v31 = v51;
      unsigned int v63 = 0x676C6F6273766364LL;
      unsigned int v64 = 0;
      if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 1008) + 16LL))( *(void *)(a1 + 1008),  &v63))
      {
        CFTypeRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        uint64_t v62 = 257;
        sub_1A31BC((uint64_t)&Mutable, @"vocoder sample rate", v31);
        sub_13408((uint64_t)&Mutable, @"vocoder type", v8);
        __int16 v32 = sub_138E8(1);
        uint64_t v33 = sub_138E8(39);
        char v34 = 0;
        id v35 = 0LL;
        *(void *)buf = 0x100000002LL;
        char v36 = *(void *)(v32 + 8);
        while (1)
        {
          float v37 = (int)buf[v35];
          int v38 = v34;
          if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
            break;
          }
          char v34 = 1;
          id v35 = 1LL;
          if ((v38 & 1) != 0) {
            goto LABEL_53;
          }
        }

        if ((v36 & v37) == 0) {
          __int16 v32 = v33;
        }
LABEL_53:
        uint64_t v47 = *(os_log_s **)v32;
        if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(&__p, v8);
          char v48 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          uint64_t v66 = 1024;
          id v67 = 1085;
          unsigned int v68 = 2048;
          UInt32 v69 = v31;
          int v70 = 2080;
          int v71 = v48;
          _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting vocoder sample rate to %f, vocoder type %s",  (uint8_t *)buf,  0x26u);
        }

        (*(void (**)(void, uint64_t *, void, void, uint64_t, CFMutableDictionaryRef *))(**(void **)(a1 + 1008) + 48LL))( *(void *)(a1 + 1008),  &v63,  0LL,  0LL,  8LL,  &Mutable);
        sub_13850((uint64_t)&Mutable);
      }

      else
      {
        __int16 v39 = sub_138E8(1);
        AudioObjectPropertyScope v40 = sub_138E8(39);
        AudioObjectPropertyElement v41 = 0;
        uint64_t v42 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v43 = *(void *)(v39 + 8);
        while (1)
        {
          char v44 = (int)buf[v42];
          uint64_t v45 = v41;
          if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
            break;
          }
          AudioObjectPropertyElement v41 = 1;
          uint64_t v42 = 1LL;
          if ((v45 & 1) != 0) {
            goto LABEL_48;
          }
        }

        if ((v43 & v44) == 0) {
          __int16 v39 = v40;
        }
LABEL_48:
        uint64_t v46 = *(os_log_s **)v39;
        if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          uint64_t v66 = 1024;
          id v67 = 1090;
          _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_INFO,  "%25s:%-5d device does not support telephony vocoder data",  (uint8_t *)buf,  0x12u);
        }
      }

      sub_32C8C(v50[1]);
    }
  }

  if (v2) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

      uint64_t v6 = *(void **)(a1 + 120);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  char v15 = v6[11];
  if (v15 && *(void *)(v15 + 8) != -1LL)
  {
    sub_2802C8(v6);
    char v16 = (std::__shared_weak_count *)v6[11];
    v6[10] = 0LL;
    v6[11] = 0LL;
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
  }

      if (!v12) {
        goto LABEL_24;
      }
      uint64_t v19 = (unint64_t *)&v12->__shared_owners_;
      do
        char v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
      {
LABEL_24:
        if (!v8) {
          goto LABEL_26;
        }
LABEL_25:
        std::__shared_weak_count::__release_weak(v8);
        goto LABEL_26;
      }

      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v8) {
        goto LABEL_25;
      }
LABEL_26:
      if (!v16)
      {
        int v7 = (void *)v7[1];
        if (v7 != v6) {
          continue;
        }
      }

      int v21 = !v16;
      if (v2) {
        goto LABEL_32;
      }
      return v21;
    }
  }

  int v21 = 1LL;
  if (v2) {
LABEL_32:
  }
    std::__shared_weak_count::__release_weak(v2);
  return v21;
}

  return v0;
}

    __cxa_end_catch();
    JUMPOUT(0x24D2B0LL);
  }

  int v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    __int16 v30 = v29;
    uint64_t v31 = sub_138E8(2);
    __int16 v32 = sub_8C7D4(1, *(void **)v31, *(void *)(v31 + 8));
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    AudioObjectPropertyElement v27 = v33;
    if (!v33 || !os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    char v34 = (*(uint64_t (**)(void *))(*(void *)v30 + 16LL))(v30);
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 1677;
    WORD1(a21) = 2080;
    *(void *)((char *)&a21 + 4) = v34;
    id v35 = "%25s:%-5d std::exception thrown: %s";
    char v36 = v27;
    float v37 = 28;
  }

  else
  {
    int v38 = sub_138E8(2);
    __int16 v39 = sub_8C7D4(1, *(void **)v38, *(void *)(v38 + 8));
    AudioObjectPropertyScope v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    AudioObjectPropertyElement v27 = v40;
    if (!v40 || !os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 1681;
    id v35 = "%25s:%-5d exception thrown";
    char v36 = v27;
    float v37 = 18;
  }

  _os_log_impl(&dword_0, v36, OS_LOG_TYPE_ERROR, v35, (uint8_t *)&buf, v37);
  goto LABEL_20;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a3)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    char v15 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf2 = 136315394;
      *(void *)&cf2[4] = "HP_HardwarePlugInInterface.cpp";
      char v20 = 1024;
      int v21 = 96;
      char v16 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outInterface is NULL]: HP_HardwarePlugIn_QueryI"
            "nterface: no place to store the return value";
      goto LABEL_19;
    }

    goto LABEL_20;
  }

  *a3 = 0LL;
  *(void *)cf2 = CFUUIDCreateFromUUIDBytes(0LL, a2);
  cf2[8] = 1;
  uint64_t v5 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0x40u,  0x67u,  0x8Cu,  0x4Bu,  0x3Fu,  0,  0x41u,  0xF7u,  0xB1u,  0xD4u,  0xCAu,  0xF9u,  0xCEu,  0xBu,  0xB4u,  0xCFu);
  if (CFEqual(v5, *(CFTypeRef *)cf2)
    || (uint64_t v6 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0x47u,  2u,  0x31u,  0x57u,  0xCu,  0x55u,  0x44u,  0xAAu,  0x89u,  0x96u,  0xB8u,  0x1Fu,  0x69u,  0xAEu,  0x87u,  0x6Eu),  CFEqual(v6, *(CFTypeRef *)cf2))
    || (int v7 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0xE9u,  0x6Cu,  0x3Eu,  0x92u,  0xE7u,  0x45u,  0x4Cu,  0xB7u,  0xBAu,  0x91u,  0xB3u,  0x3Cu,  0x68u,  0xF2u,  0xF0u,  0x26u),  CFEqual(v7, *(CFTypeRef *)cf2))
    || (BOOL v8 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0x38u,  0xD7u,  0x8Au,  0x18u,  0x77u,  0xA5u,  0x11u,  0xD8u,  0xB8u,  0xB8u,  0,  0xAu,  0x95u,  0x88u,  0x78u,  0x7Eu),  CFEqual(v8, *(CFTypeRef *)cf2))
    || (uint64_t v9 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0x5Du,  0x80u,  0xCBu,  0x6Cu,  0x48u,  0x4Fu,  0x11u,  0xD7u,  0x85u,  0x71u,  0,  0xAu,  0x95u,  0x77u,  0x12u,  0x82u),  CFEqual(v9, *(CFTypeRef *)cf2))
    || (uint64_t v10 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0xFAu,  0xFCu,  0xAFu,  0xC3u,  0xBAu,  0xE8u,  0x11u,  0xD6u,  0xB4u,  0xA8u,  0,  3u,  0x93u,  0x15u,  0xCDu,  0x46u),  CFEqual(v10, *(CFTypeRef *)cf2))
    || (char v11 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0,  0,  0,  0,  0,  0,  0,  0,  0xC0u,  0,  0,  0,  0,  0,  0,  0x46u),  CFEqual(v11, *(CFTypeRef *)cf2)))
  {
    (*(void (**)(uint64_t))(*(void *)(a1 - 80) + 120LL))(a1 - 80);
    uint64_t v12 = 0LL;
    *a3 = a1;
  }

  else
  {
    uint64_t v12 = 2147483652LL;
  }

  sub_287158((uint64_t)cf2);
  return v12;
}

  __cxa_end_catch();
  JUMPOUT(0x285A8CLL);
}

  int v22 = v13 + 96;
  float v23 = *(void **)(v13 + 120);
  *(void *)(v13 + 120) = 0LL;
  if (v23 == (void *)(v13 + 96))
  {
    int v24 = 4LL;
    float v23 = (void *)(v13 + 96);
  }

  else
  {
    if (!v23) {
      goto LABEL_25;
    }
    int v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_25:
  if (v30)
  {
    if (v30 == &v27)
    {
      *(void *)(v13 + 120) = v22;
      ((void (*)(uint64_t (***)(), uint64_t))v27[3])(&v27, v22);
      uint64_t v25 = v30;
      if (v30 == &v27)
      {
        char v26 = 4LL;
        uint64_t v25 = &v27;
      }

      else
      {
        if (!v30) {
          return 1LL;
        }
        char v26 = 5LL;
      }

      (*v25)[v26]();
      return 1LL;
    }

    *(void *)(v13 + 120) = v30;
  }

  else
  {
    *(void *)(v13 + 120) = 0LL;
  }

  return 1LL;
}

  uint64_t v17 = (char *)operator new(0x40uLL);
  *((_DWORD *)v17 + 8) = a2;
  *(_OWORD *)(v17 + 40) = v31;
  *((void *)v17 + 7) = v12;
  sub_32C38(v5 - 1, (uint64_t)v14, v27, (uint64_t *)v17);
  *(void *)&uint64_t v13 = 0LL;
LABEL_21:
  if ((void)v13) {
    operator delete((void *)v13);
  }
}

    CFRetain(@"Record");
    sub_7F234(&v60, @"Record");
    if (!v60)
    {
      AudioObjectPropertyScope v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v54, "Could not construct");
    }

    sub_48100((uint64_t)v61, (const __CFString *)v60);
    char v11 = v62;
    uint64_t v12 = v62;
    if ((v62 & 0x80u) != 0) {
      char v11 = (unint64_t)v61[1];
    }
    if (v6 != v11)
    {
LABEL_33:
      uint64_t v17 = 0;
      goto LABEL_64;
    }

    if ((v62 & 0x80u) == 0) {
      uint64_t v13 = v61;
    }
    else {
      uint64_t v13 = (void **)v61[0];
    }
    if ((v3 & 0x80) != 0)
    {
      char v16 = 0;
      uint64_t v17 = 0;
      if (memcmp(v72, v13, v5)) {
        goto LABEL_64;
      }
    }

    else
    {
      if ((_DWORD)v3)
      {
        uint64_t v14 = &v72;
        char v15 = v3;
        while (*(unsigned __int8 *)v14 == *(unsigned __int8 *)v13)
        {
          uint64_t v14 = (void **)((char *)v14 + 1);
          uint64_t v13 = (void **)((char *)v13 + 1);
          if (!--v15) {
            goto LABEL_32;
          }
        }

        goto LABEL_33;
      }

void sub_23FDC(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_23FE8(uint64_t a1, os_unfair_lock_t lock)
{
  if (SHIBYTE(lock[7]._os_unfair_lock_opaque) < 0)
  {
    sub_24054((_BYTE *)a1, *(void **)&lock[2]._os_unfair_lock_opaque, *(void *)&lock[4]._os_unfair_lock_opaque);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)&lock[2]._os_unfair_lock_opaque;
    *(void *)(a1 + 16) = *(void *)&lock[6]._os_unfair_lock_opaque;
  }

  os_unfair_lock_unlock(lock);
}

void sub_24040(_Unwind_Exception *a1)
{
}

void *sub_24054(_BYTE *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_7D1D4();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    BOOL v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000LL;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_240DC(uint64_t a1, uint64_t a2)
{
  return kdebug_trace(553912338LL, *(unsigned int *)(a1 + 576), 0LL, 0LL, 0LL);
}

void sub_24140(void *a1)
{
}

void sub_2414C(_Unwind_Exception *a1)
{
}

uint64_t sub_24160(uint64_t a1, uint64_t a2)
{
  if (a2 && (sub_746F0(a1, a2) & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v11 = "HP_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 1298;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): IOProc wasn't previously added",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  uint64_t v4 = (char *)operator new(0x60uLL);
  *((_DWORD *)v4 + 2) = 1047097200;
  *(void *)uint64_t v4 = &off_46E448;
  *((void *)v4 + 2) = a2;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(void *)(v4 + 85) = 0LL;
  uint64_t v9 = (uint64_t)v4;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 232LL))(a1, &v9);
  uint64_t result = v9;
  uint64_t v9 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_242D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

BOOL sub_24304(uint64_t a1)
{
  return !sub_24320(*(void *)(a1 + 640));
}

BOOL sub_24320(BOOL result)
{
  if (result)
  {
    uint64_t v1 = (_opaque_pthread_t *)result;
    int v2 = pthread_self();
    return pthread_equal(v1, v2) != 0;
  }

  return result;
}

uint64_t sub_24358(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && ((int v5 = *(_DWORD *)(a2 + 8), v5 != 1047097200) ? (v6 = v5 == 1013868911) : (v6 = 1), v6))
  {
    if (!sub_5518(a1 + 648))
    {
      uint64_t v7 = (os_log_t *)sub_138E8(13);
      BOOL v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 86;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Could not take io monitor core lock in the start thread.",  (uint8_t *)&v13,  0x12u);
        }
      }
    }

    if (sub_5518(a1 + 824))
    {
      uint64_t v9 = 2LL;
    }

    else
    {
      uint64_t v10 = (os_log_t *)sub_138E8(13);
      char v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "IOMonitor.h";
        __int16 v15 = 1024;
        int v16 = 89;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Could not take mIOThreadCallingNormalMutex in the start thread.",  (uint8_t *)&v13,  0x12u);
      }

      uint64_t v9 = 0LL;
    }
  }

  else
  {
    uint64_t v9 = sub_79A04(a1 + 648);
  }

  *a3 = v9;
  return 1LL;
}

uint64_t sub_244EC(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 16);
    if (*(_BYTE *)(result + 92)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 368LL))( a2,  v2,  result + 24,  *(unsigned int *)(result + 88));
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352LL))(a2, v2);
    }
  }

  return result;
}

uint64_t sub_24530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 472);
  for (uint64_t i = *(void *)(v4 + 8); i != *(void *)(v4 + 16); i += 8LL)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B4E58(v4, a2);
        sub_24944(a1);
        uint64_t v6 = **(void **)(a1 + 1008);
        if (a2)
        {
          uint64_t result = (*(uint64_t (**)(void))(v6 + 448))();
          int v8 = *(_DWORD *)(*(void *)(a1 + 464) + 112LL);
        }

        else
        {
          uint64_t result = (*(uint64_t (**)(void))(v6 + 440))();
          int v8 = *(_DWORD *)(*(void *)(a1 + 464) + 116LL);
        }

        if (v8 == 1 && (result & 1) == 0) {
          return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 560LL))(a1, a2 == 0);
        }
        return result;
      }

      break;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      goto LABEL_7;
    }
  }

  uint64_t result = *(void *)(a1 + 464);
  for (uint64_t j = *(void *)(result + 8); ; j += 8LL)
  {
    if (j == *(void *)(result + 16))
    {
      uint64_t v10 = 0LL;
      goto LABEL_16;
    }

    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8LL) == a2)
    {
      BOOL v11 = a2 == 0;
      goto LABEL_20;
    }
  }

  uint64_t v10 = a2;
LABEL_16:
  BOOL v11 = a2 == 0;
  if (a2 && !v10) {
    return result;
  }
LABEL_20:
  sub_24894(result, a2);
  sub_24944(a1);
  uint64_t v12 = **(void **)(a1 + 1008);
  if (v11)
  {
    uint64_t result = (*(uint64_t (**)(void))(v12 + 440))();
    int v13 = *(_DWORD *)(*(void *)(a1 + 464) + 116LL);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v12 + 448))();
    int v13 = *(_DWORD *)(*(void *)(a1 + 464) + 112LL);
  }

  if (v13 == 1 && (result & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 560LL))(a1, v11);
  }
  return result;
}

void sub_246E0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0x246B0LL);
      }
    }

    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }

    sub_B45F4(*(void *)(v10 + 472), v9);
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    __int16 v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3289;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error starting the io engine",  (uint8_t *)&a9,  0x12u);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v13;
  }

  _Unwind_Resume(a1);
}

void sub_24894(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v4 = *i;
      if (*i == a2)
      {
        uint64_t v4 = a2;
LABEL_9:
        if (!*(_BYTE *)(v4 + 54))
        {
          *(_BYTE *)(v4 + 54) = 1;
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 72) = 0u;
          *(_OWORD *)(v4 + 88) = 0u;
          *(_OWORD *)(v4 + 104) = 0u;
          *(_DWORD *)(v4 + 120) = 0;
          ++*(_DWORD *)(a1 + 112);
          sub_74774(a1, v4);
          sub_7480C((_DWORD **)a1);
        }

        return;
      }

      if (*(void *)(v4 + 8) == a2) {
        goto LABEL_9;
      }
    }
  }

  else
  {
    ++*(_DWORD *)(a1 + 116);
  }

void sub_24944(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1073))
  {
    int v2 = 100;
    while ((*(unsigned int (**)(void))(**(void **)(a1 + 1008) + 272LL))(*(void *)(a1 + 1008)))
    {
      usleep(0x1388u);
      unsigned int v3 = (os_log_t *)sub_138E8(1);
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v6 = "VirtualAudio_Device.cpp";
          __int16 v7 = 1024;
          int v8 = 3494;
          _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Timeout waiting for Stop to finish.", buf, 0x12u);
        }
      }

      *(_BYTE *)(a1 + 1073) = 0;
      if (!--v2) {
        return;
      }
    }

    *(_BYTE *)(a1 + 1073) = 0;
  }

uint64_t sub_24A64(uint64_t a1)
{
  char v1 = atomic_load((unsigned int *)(a1 + 360));
  return v1 & 1;
}

uint64_t sub_24A74(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 1008))
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3832;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 664));
  if (!pthread_equal(v4, v5))
  {
    uint64_t v6 = pthread_self();
    __int16 v7 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 752));
    if (!pthread_equal(v6, v7))
    {
      uint64_t v9 = (os_log_t *)sub_138E8(1);
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v15 = *(void *)(a1 + 576);
          sub_33464(&__p, (unsigned int *)&v15);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3834;
          __int16 v18 = 2080;
          uint64_t v19 = p_p;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The IO monitor should be held prior to calling StartIOEngine on VAD: '%s'.",  buf,  0x1Cu);
        }
      }
    }
  }

  sub_6DD4();
  *(void *)buf = &qword_48F828;
  *(void *)&buf[8] = a1;
  buf[16] = sub_24DC0(a1);
  *(_DWORD *)(a1 + 1076) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 1008) + 240LL))(*(void *)(a1 + 1008), a2);
  uint64_t result = sub_366B0((uint64_t)buf);
  *(_DWORD *)(a1 + 912) = 0;
  return result;
}

void sub_24C94(_Unwind_Exception *a1)
{
}

void sub_24CA4(_Unwind_Exception *a1)
{
}

void sub_24CAC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  if (a2)
  {
    sub_366B0((uint64_t)&buf);
    __cxa_begin_catch(a1);
    if (a2 == 2) {
      __cxa_rethrow();
    }
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 3854;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): error starting IO on the active device",  (uint8_t *)&buf,  0x12u);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003329396;
  }

  _Unwind_Resume(a1);
}

void sub_24D8C(_Unwind_Exception *a1)
{
}

void sub_24D9C(_Unwind_Exception *a1)
{
}

void sub_24DA8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x24DB0LL);
  }
  sub_7A0E8(a1);
}

BOOL sub_24DC0(uint64_t a1)
{
  int v2 = pthread_self();
  unsigned int v3 = (_opaque_pthread_t *)atomic_load(qword_48F838);
  int v4 = pthread_equal(v2, v3);
  if (v4)
  {
    ++dword_48F8B4;
    int v5 = operator new(0x18uLL);
    uint64_t v6 = qword_48F8B8;
    v5[1] = &qword_48F8B8;
    v5[2] = a1;
    *int v5 = v6;
    *(void *)(v6 + 8) = v5;
    qword_48F8B8 = (uint64_t)v5;
    ++qword_48F8C8;
    sub_563C((uint64_t)&qword_48F828);
  }

  return v4 != 0;
}

void sub_24E50(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 416))
  {
    unsigned int v50 = (os_log_t *)sub_138E8(13);
    uint64_t v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      __int16 v89 = 1024;
      int v90 = 379;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: No HAL IO Proc has been set.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No HAL IO Proc has been set.");
  }

  if (!*(void *)(a1 + 456))
  {
    int v53 = (os_log_t *)sub_138E8(13);
    AudioObjectPropertyScope v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      __int16 v89 = 1024;
      int v90 = 380;
      _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mClientIOProc is NULL]: No client IO Proc has been set.",  buf,  0x12u);
    }

    AudioObjectPropertyElement v55 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v55, "No client IO Proc has been set.");
  }

  char v4 = sub_25D14((unsigned int *)a1, a2, 1);
  if ((v4 & 3) != 0)
  {
    char v5 = v4;
    uint64_t v6 = sub_138E8(16);
    uint64_t v7 = sub_138E8(31);
    if ((_DWORD)a2 == 1 && (v5 & 1) != 0)
    {
      char v8 = 0;
      uint64_t v9 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v10 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v11 = *(int *)&buf[4 * v9];
        char v12 = v8;
        if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
          break;
        }
        char v8 = 1;
        uint64_t v9 = 1LL;
        if ((v12 & 1) != 0) {
          goto LABEL_56;
        }
      }

      if ((v10 & v11) == 0) {
        uint64_t v6 = v7;
      }
LABEL_56:
      uint64_t v47 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEFAULT))
        {
          int v48 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          __int16 v89 = 1024;
          int v90 = 447;
          __int16 v91 = 1024;
          LODWORD(v92) = v48;
          _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.",  buf,  0x18u);
        }
      }
    }

    else
    {
      char v25 = 0;
      uint64_t v26 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v27 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v28 = *(int *)&buf[4 * v26];
        char v29 = v25;
        if (((v27 & v28) != 0) != ((*(void *)(v7 + 8) & v28) != 0)) {
          break;
        }
        char v25 = 1;
        uint64_t v26 = 1LL;
        if ((v29 & 1) != 0) {
          goto LABEL_45;
        }
      }

      if ((v27 & v28) == 0) {
        uint64_t v6 = v7;
      }
LABEL_45:
      AudioObjectPropertyElement v41 = *(os_log_s **)v6;
      if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, a2);
        int v42 = v87;
        uint64_t v43 = (void **)__p[0];
        int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        uint64_t v45 = v42 >= 0 ? __p : v43;
        __int16 v89 = 1024;
        int v90 = 452;
        __int16 v91 = 2080;
        unsigned int v92 = v45;
        __int16 v93 = 1024;
        LODWORD(v94) = v44;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  buf,  0x22u);
        if (v87 < 0) {
          operator delete(__p[0]);
        }
      }

      kdebug_trace(553912341LL, (int)a2, 0LL, 0LL, 0LL);
      if ((_DWORD)a2 == 1) {
        uint64_t v46 = 0LL;
      }
      else {
        uint64_t v46 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
      }
      uint64_t v49 = AudioDeviceStart(*(_DWORD *)(a1 + 128), v46);
      kdebug_trace(553912342LL, (int)a2, 0LL, 0LL, 0LL);
      if ((_DWORD)v49)
      {
        sub_25D14((unsigned int *)a1, a2, 0);
        char v72 = (os_log_t *)sub_138E8(16);
        int v73 = *v72;
        if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v49);
          int v74 = v87;
          char v75 = (void **)__p[0];
          sub_23FE8((uint64_t)v84, (os_unfair_lock_t)(a1 + 8));
          char v76 = __p;
          if (v74 < 0) {
            char v76 = v75;
          }
          if (v85 >= 0) {
            __int16 v77 = v84;
          }
          else {
            __int16 v77 = (void **)v84[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          __int16 v89 = 1024;
          int v90 = 460;
          __int16 v91 = 2080;
          unsigned int v92 = v76;
          __int16 v93 = 2080;
          uint64_t v94 = v77;
          _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  buf,  0x26u);
          if (v85 < 0) {
            operator delete(v84[0]);
          }
          if (v87 < 0) {
            operator delete(__p[0]);
          }
        }

        int v78 = (os_log_t *)sub_138E8(13);
        __int16 v79 = *v78;
        if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          __int16 v89 = 1024;
          int v90 = 461;
          _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  buf,  0x12u);
        }

        __int16 v80 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v80 = &off_4865A0;
        v80[2] = v49;
      }
    }
  }

  else
  {
    int v13 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v13) {
      caulk::concurrent::messenger::drain(v13);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 616LL))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232LL))(a1);
    sub_3067C(a1);
    uint64_t v14 = *(void *)(a1 + 96);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
    }
    int v15 = sub_326DC(a1);
    if (v15)
    {
      int v56 = v15;
      id v57 = (os_log_t *)sub_138E8(13);
      unsigned int v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        __int16 v89 = 1024;
        int v90 = 401;
        _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (willStartResult): Error calling WillStartIO on physical devices.",  buf,  0x12u);
      }

      uint64_t v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v59 = &off_4865A0;
      v59[2] = v56;
    }

    sub_3280C(a1);
    int v16 = *(double **)(a1 + 136);
    if (v16)
    {
      double v17 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
      sub_1C8B9C(v16, v17);
    }

    uint64_t v18 = sub_138E8(16);
    uint64_t v19 = sub_138E8(31);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&buf[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_27;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_27:
    __int16 v30 = *(os_log_s **)v18;
    if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, a2);
      int v31 = v87;
      __int16 v32 = (void **)__p[0];
      int v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      char v34 = v31 >= 0 ? __p : v32;
      __int16 v89 = 1024;
      int v90 = 409;
      __int16 v91 = 2080;
      unsigned int v92 = v34;
      __int16 v93 = 1024;
      LODWORD(v94) = v33;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  buf,  0x22u);
      if (v87 < 0) {
        operator delete(__p[0]);
      }
    }

    kdebug_trace(553912341LL, (int)a2, 0LL, 0LL, 0LL);
    if ((_DWORD)a2 == 1) {
      id v35 = 0LL;
    }
    else {
      id v35 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    uint64_t v36 = AudioDeviceStart(*(_DWORD *)(a1 + 128), v35);
    kdebug_trace(553912342LL, (int)a2, 0LL, 0LL, 0LL);
    if ((_DWORD)v36)
    {
      sub_25D14((unsigned int *)a1, a2, 0);
      __int16 v60 = (os_log_t *)sub_138E8(16);
      int v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v36);
        int v62 = v87;
        unsigned int v63 = (void **)__p[0];
        sub_23FE8((uint64_t)v84, (os_unfair_lock_t)(a1 + 8));
        unsigned int v64 = __p;
        if (v62 < 0) {
          unsigned int v64 = v63;
        }
        if (v85 >= 0) {
          UInt32 v65 = v84;
        }
        else {
          UInt32 v65 = (void **)v84[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        __int16 v89 = 1024;
        int v90 = 420;
        __int16 v91 = 2080;
        unsigned int v92 = v64;
        __int16 v93 = 2080;
        uint64_t v94 = v65;
        _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  buf,  0x26u);
        if (v85 < 0) {
          operator delete(v84[0]);
        }
        if (v87 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v66 = *(uint64_t ***)(a1 + 136);
      if (v66) {
        sub_1C9B20(v66);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 552LL))(a1);
      id v67 = *(void **)(a1 + 240);
      unsigned int v68 = *(void **)(a1 + 248);
      while (v67 != v68)
      {
        (*(void (**)(void, uint64_t))(*(void *)*v67 + 40LL))(*v67, 1LL);
        v67 += 2;
      }

      sub_3C684(a1);
      uint64_t v81 = (os_log_t *)sub_138E8(13);
      __int16 v82 = *v81;
      if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        __int16 v89 = 1024;
        int v90 = 427;
        _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  buf,  0x12u);
      }

      AudioObjectPropertyScope v83 = __cxa_allocate_exception(0x10uLL);
      *(void *)AudioObjectPropertyScope v83 = &off_4865A0;
      v83[2] = v36;
    }

    int v37 = sub_3359C(a1);
    uint64_t v38 = *(void *)a1;
    if (v37)
    {
      (*(void (**)(uint64_t, uint64_t))(v38 + 256))(a1, a2);
      UInt32 v69 = (os_log_t *)sub_138E8(13);
      int v70 = *v69;
      if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        __int16 v89 = 1024;
        int v90 = 434;
        _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (didStartResult): Error calling DidStartIO on physical devices.",  buf,  0x12u);
      }

      int v71 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v71 = &off_4865A0;
      v71[2] = v37;
    }

    (*(void (**)(uint64_t))(v38 + 544))(a1);
    __int16 v39 = *(void **)(a1 + 240);
    AudioObjectPropertyScope v40 = *(void **)(a1 + 248);
    while (v39 != v40)
    {
      (*(void (**)(void))(*(void *)*v39 + 24LL))(*v39);
      v39 += 2;
    }

    *(_BYTE *)(a1 + 637) = *(_BYTE *)(a1 + 636);
  }

void sub_2599C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_259EC(uint64_t result)
{
  if (!*(_DWORD *)(result + 128))
  {
    char v1 = (os_log_t *)sub_138E8(13);
    int v2 = *v1;
    if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "AggregateDevice_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 1406;
      _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  if (!*(void *)(result + 416))
  {
    char v4 = (os_log_t *)sub_138E8(13);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "AggregateDevice_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 1407;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    uint64_t v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v6, "Invariant failure.");
  }

  if (!*(void *)(result + 440))
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    char v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "AggregateDevice_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 1408;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    uint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "Invariant failure.");
  }

  if ((*(void *)(result + 456) != 0LL) == (*(void *)(result + 464) == 0LL))
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "AggregateDevice_Common.cpp";
        __int16 v15 = 1024;
        int v16 = 1409;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
      }
    }

    char v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Invariant failure.");
  }

  return result;
}

void sub_25CEC(_Unwind_Exception *a1)
{
}

uint64_t sub_25D14(unsigned int *a1, int a2, int a3)
{
  __int128 __p = 0uLL;
  uint64_t v25 = 0LL;
  if (a2)
  {
    if (a2 != 1)
    {
      uint64_t v21 = (os_log_t *)sub_138E8(13);
      uint64_t v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v27 = 1024;
        int v28 = 490;
        __int16 v29 = 1024;
        int v30 = a2;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unexpected IOProc type %d",  buf,  0x18u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected IOProc type %d");
    }

    HIBYTE(v25) = 10;
    WORD4(__p) = 25455;
    *(void *)&__int128 __p = *(void *)"NullIOProc";
    uint64_t v6 = a1 + 90;
    if ((a3 & 1) != 0)
    {
      do
        uint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 | 1, v6));
    }

    else
    {
      do
        uint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 & 0xFFFFFFFE, v6));
    }
  }

  else
  {
    HIBYTE(v25) = 13;
    qmemcpy(&__p, "NonNullIOProc", 13);
    char v8 = a1 + 90;
    if ((a3 & 1) != 0)
    {
      do
        uint64_t v7 = __ldaxr(v8);
      while (__stlxr(v7 | 2, v8));
    }

    else
    {
      do
        uint64_t v7 = __ldaxr(v8);
      while (__stlxr(v7 & 0xFFFFFFFD, v8));
    }
  }

  uint64_t v9 = sub_138E8(16);
  uint64_t v10 = sub_138E8(31);
  char v11 = 0;
  uint64_t v12 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1LL;
    if ((v15 & 1) != 0) {
      goto LABEL_18;
    }
  }

  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_18:
  int v16 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 120LL))(a1);
  p_p = (const char *)&__p;
  if (v25 < 0) {
    p_p = (const char *)__p;
  }
  int v18 = "not running";
  if (a3) {
    int v18 = "running";
  }
  unsigned int v19 = atomic_load(a1 + 90);
  sub_1D71E4( 3,  v9,  (uint64_t)"",  492,  (uint64_t)"",  "IOProc (AggregateDevice %u, IO type %s) running state is now %s (%u).",  v16,  p_p,  v18,  v19);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__p);
  }
  return v7;
}

void sub_25FBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t sub_25FE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

void sub_2600C(uint64_t a1)
{
  uint64_t v1 = a1;
  char v2 = 0;
  uint64_t v3 = 0LL;
  int v4 = 0;
  int v5 = 0;
  uint64_t v164 = 0LL;
  uint64_t v165 = 0LL;
  uint64_t v166 = 0LL;
  uint64_t v135 = a1 + 520;
  uint64_t v161 = 0LL;
  uint64_t v162 = 0LL;
  uint64_t v134 = a1 + 544;
  uint64_t v144 = a1 + 144;
  uint64_t v163 = 0LL;
  __int16 v160 = 256;
  unsigned int v145 = 1;
  do
  {
    char v136 = v2;
    int v6 = *((unsigned __int8 *)&v160 + v3);
    if (*((_BYTE *)&v160 + v3)) {
      uint64_t v7 = &v161;
    }
    else {
      uint64_t v7 = &v164;
    }
    UInt32 v146 = v7;
    if (*((_BYTE *)&v160 + v3)) {
      uint64_t v8 = 544LL;
    }
    else {
      uint64_t v8 = 520LL;
    }
    uint64_t v9 = v135;
    if (*((_BYTE *)&v160 + v3)) {
      uint64_t v9 = v134;
    }
    uint64_t v142 = v8;
    uint64_t v10 = *(void *)(v9 + 8) - *(void *)(v1 + v8);
    if (v10)
    {
      uint64_t v11 = 0LL;
      unint64_t v12 = v10 >> 4;
      if (v12 <= 1) {
        uint64_t v13 = 1LL;
      }
      else {
        uint64_t v13 = v12;
      }
      uint64_t v14 = v157;
      if (*((_BYTE *)&v160 + v3)) {
        char v15 = v157;
      }
      else {
        char v15 = (void **)&v154;
      }
      if (*((_BYTE *)&v160 + v3)) {
        uint64_t v14 = (void **)&v154;
      }
      int v138 = v14;
      CFMutableDictionaryRef v139 = v15;
      if (*((_BYTE *)&v160 + v3)) {
        int v16 = &v161;
      }
      else {
        int v16 = &v164;
      }
      double v17 = &v166;
      if (*((_BYTE *)&v160 + v3)) {
        double v17 = &v163;
      }
      uint64_t v140 = v13;
      std::string::size_type v141 = (std::string::size_type)v17;
      int v18 = "output";
      if (!*((_BYTE *)&v160 + v3)) {
        int v18 = "input";
      }
      __s = (char *)v18;
      do
      {
        unsigned int v19 = (uint64_t *)(*(void *)(v1 + v142) + 16 * v11);
        uint64_t v159 = 0LL;
        *(_OWORD *)int v157 = 0u;
        __int128 v158 = 0u;
        int v20 = sub_273BC(*v19, (uint64_t)v157);
        if (v20)
        {
          int v122 = (os_log_t *)sub_138E8(13);
          int v123 = *v122;
          if (*v122 && os_log_type_enabled(*v122, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1067;
            _os_log_impl( &dword_0,  v123,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Stream::GetCurrentFormat() returned an error.",  buf,  0x12u);
          }

          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_4865A0;
          exception[2] = v20;
        }

        if (!DWORD2(v158))
        {
          int v128 = (os_log_t *)sub_138E8(13);
          uint64_t v129 = *v128;
          if (*v128 && os_log_type_enabled(*v128, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1068;
            _os_log_impl( &dword_0,  v129,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Stream::GetCurrentFormat() returned mBytesPerFrame of 0.",  buf,  0x12u);
          }

          uint64_t v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v130, "Stream::GetCurrentFormat() returned mBytesPerFrame of 0.");
        }

        uint64_t v156 = 0LL;
        __int128 v154 = 0u;
        __int128 v155 = 0u;
        int v21 = sub_28BEC(*v19, (uint64_t)&v154);
        if (v21)
        {
          uint64_t v125 = (os_log_t *)sub_138E8(13);
          uint64_t v126 = *v125;
          if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1072;
            _os_log_impl( &dword_0,  v126,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: VirtualStream::GetCurrentHALIOProcFormat() retu rned an error.",  buf,  0x12u);
          }

          UInt32 v127 = __cxa_allocate_exception(0x10uLL);
          *(void *)UInt32 v127 = &off_4865A0;
          v127[2] = v21;
        }

        if (!DWORD2(v155))
        {
          int v131 = (os_log_t *)sub_138E8(13);
          unsigned int v132 = *v131;
          if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1073;
            _os_log_impl( &dword_0,  v132,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.",  buf,  0x12u);
          }

          int v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error( v133,  "VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.");
        }

        uint64_t v22 = (os_log_t *)sub_138E8(16);
        uint64_t v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CC00((std::string *)__p, (uint64_t)&v154);
          char v24 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1075;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v24;
          _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Current HAL IOProc format is %s", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        int v25 = 0;
        uint64_t v26 = *(void *)(*v19 + 136);
        if (LODWORD(v157[1]) == 1819304813 && DWORD2(v154) == 1819304813)
        {
          int v27 = (*(uint64_t (**)(uint64_t, BOOL, void, __int128 *, void **))(*(void *)v1 + 592LL))( v1,  v6 != 0,  *(void *)(*v19 + 136),  &v154,  v157);
          if (v27)
          {
            int v28 = (os_log_t *)sub_138E8(16);
            __int16 v29 = *v28;
            if (*v28)
            {
              if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1089;
                *(_WORD *)&_BYTE buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d setting the DSP chain format",  buf,  0x18u);
              }
            }
          }

          if (*(_BYTE *)(v26 + 448) || *(void *)(v26 + 584) || *(void *)(v26 + 672))
          {
            int v25 = 1;
          }

          else
          {
            uint64_t v67 = sub_138E8(16);
            uint64_t v68 = sub_138E8(24);
            char v69 = 0;
            uint64_t v70 = 0LL;
            *(void *)buf = 0x100000002LL;
            uint64_t v71 = *(void *)(v67 + 8);
            while (1)
            {
              uint64_t v72 = *(int *)&buf[4 * v70];
              char v73 = v69;
              if (((v71 & v72) != 0) != ((*(void *)(v68 + 8) & v72) != 0)) {
                break;
              }
              char v69 = 1;
              uint64_t v70 = 1LL;
              if ((v73 & 1) != 0) {
                goto LABEL_130;
              }
            }

            if ((v71 & v72) == 0) {
              uint64_t v67 = v68;
            }
LABEL_130:
            int v74 = *(os_log_s **)v67;
            if (v74 && os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
            {
              sub_2BE2C(__p, v26);
              char v75 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1091;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v75;
              _os_log_impl(&dword_0, v74, OS_LOG_TYPE_INFO, "%25s:%-5d DSP is disabled:\n%s", buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }

            int v25 = 0;
          }
        }

        int v30 = (os_log_t *)sub_138E8(16);
        int v31 = *v30;
        unsigned int v32 = v145;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_INFO))
        {
          sub_2BE2C(__p, v26);
          int v33 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1094;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v33;
          _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "%25s:%-5d Chain Description: %s", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        sub_85A90(v153, (void *)(*v19 + 112));
        if (sub_22F49C(v153))
        {
          sub_2D9BB0(&v167, (uint64_t)v153, 0);
          std::operator+<char>("PreDSP - ", &v167);
          __int128 v34 = *((_OWORD *)v139 + 1);
          *(_OWORD *)buf = *(_OWORD *)v139;
          *(_OWORD *)&buf[16] = v34;
          uint64_t v173 = (char *)v139[4];
          sub_2D5D4(v144, v145, (uint64_t *)&v152, (uint64_t)buf, v6 == 0);
          unsigned int v35 = v145 + 1;
          if (v25)
          {
            std::operator+<char>("PostDSP - ", &v167);
            __int128 v36 = *((_OWORD *)v138 + 1);
            *(_OWORD *)__int128 __p = *(_OWORD *)v138;
            *(_OWORD *)&__p[16] = v36;
            *(void *)&__p[32] = v138[4];
            sub_2D5D4(v144, v145 + 1, (uint64_t *)&v151, (uint64_t)__p, v6 == 0);
            unsigned int v37 = v145 + 1;
            unsigned int v35 = v145 + 2;
          }

          else
          {
            unsigned int v37 = 0;
          }

          sub_2D840(v144);
          unsigned int v145 = v35;
        }

        else
        {
          unsigned int v37 = 0;
          unsigned int v32 = 0;
        }

        if ((BYTE4(v157[1]) & 0x20) != 0) {
          int v38 = HIDWORD(v158);
        }
        else {
          int v38 = 1;
        }
        if (v6) {
          int v39 = v5;
        }
        else {
          int v39 = v4;
        }
        int v40 = v38 + v39;
        if (v6) {
          int v5 = v40;
        }
        else {
          int v4 = v40;
        }
        if (v25)
        {
          if (*(void *)(v26 + 984) == *(void *)(v26 + 976)) {
            AudioObjectPropertyElement v41 = (_DWORD **)(v26 + 944);
          }
          else {
            AudioObjectPropertyElement v41 = *(_DWORD ***)(v26 + 976);
          }
          sub_2D9D4((uint64_t)&v149, *v41, 0);
          uint64_t v42 = *(void *)(v26 + 984);
          if (v42 == *(void *)(v26 + 976)) {
            uint64_t v43 = (_DWORD **)(v26 + 944);
          }
          else {
            uint64_t v43 = (_DWORD **)(v42 - 16);
          }
          sub_2D9D4((uint64_t)&v147, *v43, 0);
          if (!v149 || !*v149 || !v147 || !*v147)
          {
            int v119 = (os_log_t *)sub_138E8(13);
            uint64_t v120 = *v119;
            if (*v119)
            {
              if (os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1130;
                _os_log_impl( &dword_0,  v120,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): DSP chain ABL should not be invalid if DSP processing is enabled",  buf,  0x12u);
              }
            }

            int v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v121, "DSP chain ABL should not be invalid if DSP processing is enabled");
          }
        }

        else
        {
          uint64_t v149 = 0LL;
          int v150 = 0;
          UInt32 v147 = 0LL;
          int v148 = 0;
        }

        int v44 = (__int128 *)sub_2B8B8(v26);
        uint64_t v45 = (__int128 *)sub_2B940(v26);
        sub_2DA74((uint64_t)buf, (__int128 *)v157, &v154, &v149, &v147, v44, v45, v26);
        unsigned int v178 = v32;
        unsigned int v179 = v37;
        unint64_t v46 = v16[1];
        uint64_t v47 = (unint64_t *)&v166;
        if (v6) {
          uint64_t v47 = (unint64_t *)&v163;
        }
        if (v46 >= *v47)
        {
          uint64_t v49 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v46 - *v146) >> 4);
          unint64_t v50 = v49 + 1;
          if (0x9D89D89D89D89D8ALL * ((v16[2] - *v146) >> 4) > v50) {
            unint64_t v50 = 0x9D89D89D89D89D8ALL * ((v16[2] - *v146) >> 4);
          }
          else {
            unint64_t v51 = v50;
          }
          *(void *)&__p[32] = v141;
          if (v51) {
            unint64_t v51 = (unint64_t)sub_22FA20(v51);
          }
          else {
            uint64_t v52 = 0LL;
          }
          *(void *)__int128 __p = v51;
          *(void *)&__p[8] = v51 + 208 * v49;
          *(void *)&__p[16] = *(void *)&__p[8];
          *(void *)&__p[24] = v51 + 208 * v52;
          sub_22F5C4(*(uint64_t *)&__p[8], (uint64_t)buf);
          std::string::size_type v53 = *(void *)&__p[8];
          *(void *)&__p[16] += 208LL;
          uint64_t v54 = v16[1];
          uint64_t v55 = *v146;
          v152.__r_.__value_.__r.__words[0] = *(void *)&__p[8];
          v152.__r_.__value_.__l.__size_ = *(void *)&__p[8];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
          v167.__r_.__value_.__r.__words[0] = v141;
          v167.__r_.__value_.__l.__size_ = (std::string::size_type)&v151;
          v167.__r_.__value_.__l.__cap_ = (std::string::size_type)&v152;
          char v168 = 0;
          while (v54 != v55)
          {
            v54 -= 208LL;
            sub_22F5C4(v53 - 208, v54);
            std::string::size_type v53 = v152.__r_.__value_.__l.__size_ - 208;
            v152.__r_.__value_.__l.__size_ -= 208LL;
          }

          char v168 = 1;
          sub_22FB50((uint64_t)&v167);
          uint64_t v56 = *v146;
          uint64_t *v146 = v53;
          uint64_t v57 = v16[1];
          uint64_t v58 = v16[2];
          uint64_t v48 = *(void *)&__p[16];
          uint64_t v59 = *(void *)&__p[24];
          v16[1] = *(void *)&__p[16];
          v16[2] = v59;
          *(void *)&__p[16] = v57;
          *(void *)&__p[24] = v58;
          *(void *)__int128 __p = v56;
          *(void *)&__p[8] = v56;
          sub_2DC70((uint64_t)__p);
          uint64_t v1 = a1;
        }

        else
        {
          sub_22F5C4(v16[1], (uint64_t)buf);
          uint64_t v1 = a1;
          uint64_t v48 = v46 + 208;
          v16[1] = v48;
        }

        v16[1] = v48;
        uint64_t v60 = sub_138E8(16);
        if ((*(_BYTE *)(v60 + 8) & 1) != 0)
        {
          int v61 = *(os_log_s **)v60;
          if (*(void *)v60)
          {
            if (os_log_type_enabled(*(os_log_t *)v60, OS_LOG_TYPE_DEBUG))
            {
              sub_7D084(&v167, __s);
              if ((v167.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int v62 = &v167;
              }
              else {
                int v62 = (std::string *)v167.__r_.__value_.__r.__words[0];
              }
              sub_2CC00(&v152, v16[1] - 208);
              int size = (char)v152.__r_.__value_.__s.__size_;
              std::string::size_type v64 = v152.__r_.__value_.__r.__words[0];
              sub_2CC00(&v151, v16[1] - 168);
              UInt32 v65 = &v152;
              if (size < 0) {
                UInt32 v65 = (std::string *)v64;
              }
              uint64_t v66 = &v151;
              if ((v151.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v66 = (std::string *)v151.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)__int128 __p = 136316418;
              *(void *)&__p[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1139;
              *(_WORD *)&__p[18] = 2080;
              *(void *)&__p[20] = v62;
              *(_WORD *)&_BYTE __p[28] = 2048;
              *(void *)&__p[30] = v11;
              *(_WORD *)&__p[38] = 2080;
              *(void *)&_BYTE __p[40] = v65;
              __int16 v170 = 2080;
              UInt32 v171 = v66;
              _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Cached %s stream %lu data. mVirtualizedStreamFormat: %s; mNonVirtualizedStreamFormat: %s",
                __p,
                0x3Au);
              uint64_t v1 = a1;
            }
          }
        }

        sub_2DBF4(&v177);
        sub_2DBF4(&v176);
        sub_2DBF4(&v147);
        sub_2DBF4(&v149);
        sub_85B80(v153);
        ++v11;
      }

      while (v11 != v140);
    }

    char v2 = 1;
    uint64_t v3 = 1LL;
  }

  while ((v136 & 1) == 0);
  if (v4)
  {
    char v76 = calloc(1uLL, (16 * v4) | 8u);
    if (v76) {
      _DWORD *v76 = v4;
    }
  }

  else
  {
    char v76 = 0LL;
  }

  *(void *)&__int128 v154 = v76;
  DWORD2(v154) = 2 * (v76 != 0LL);
  if (v5)
  {
    __int16 v77 = calloc(1uLL, (16 * v5) | 8u);
    if (v77) {
      *__int16 v77 = v5;
    }
  }

  else
  {
    __int16 v77 = 0LL;
  }

  char v78 = 0;
  uint64_t v79 = 0LL;
  v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
  LODWORD(v167.__r_.__value_.__r.__words[1]) = 2 * (v77 != 0LL);
  *(_WORD *)buf = 256;
  __int16 v80 = (_DWORD *)v154;
  do
  {
    char v81 = v78;
    int v82 = buf[v79];
    if (buf[v79]) {
      AudioObjectPropertyScope v83 = &v161;
    }
    else {
      AudioObjectPropertyScope v83 = &v164;
    }
    __int16 v84 = &v165;
    if (v82) {
      __int16 v84 = &v162;
    }
    uint64_t v85 = *v84;
    uint64_t v86 = v85 - *v83;
    if (v85 != *v83)
    {
      uint64_t v87 = 0LL;
      int v88 = 0;
      unint64_t v89 = v86 / 208;
      if (v89 <= 1) {
        unint64_t v89 = 1LL;
      }
      if (v82) {
        int v90 = v77;
      }
      else {
        int v90 = v80;
      }
      do
      {
        uint64_t v91 = *v83;
        uint64_t v92 = *v83 + 208 * v87;
        if ((*(_BYTE *)(v92 + 12) & 0x20) != 0)
        {
          uint64_t v96 = *(unsigned int *)(v92 + 28);
          uint64_t v97 = v91 + 208 * v87;
          uint64_t v98 = (unsigned int **)(v97 + 176);
          uint64_t v94 = (unsigned int **)(v97 + 160);
          if (!v82) {
            uint64_t v94 = v98;
          }
          if (!(_DWORD)v96) {
            goto LABEL_179;
          }
        }

        else
        {
          uint64_t v93 = v91 + 208 * v87;
          uint64_t v94 = (unsigned int **)(v93 + 176);
          unsigned int v95 = (unsigned int **)(v93 + 160);
          if (v82) {
            uint64_t v94 = v95;
          }
          uint64_t v96 = 1LL;
        }

        unint64_t v99 = 0LL;
        uint64_t v100 = 2LL;
        do
        {
          int v101 = v88 + v99;
          uint64_t v102 = *v94;
          if (!*v94 || ((unint64_t v103 = *v102, (_DWORD)v103) ? (v104 = v99 >= v103) : (v104 = 1), v104))
          {
            if ((*(_BYTE *)(v92 + 12) & 0x20) != 0) {
              int v105 = 1;
            }
            else {
              int v105 = *(_DWORD *)(v92 + 28);
            }
            v90[4 * v101 + 2] = v105;
          }

          else
          {
            *(_OWORD *)&v90[4 * v101 + 2] = *(_OWORD *)&v102[v100];
          }

          ++v99;
          v100 += 4LL;
        }

        while (v96 != v99);
        v88 += v99;
LABEL_179:
        ++v87;
      }

      while (v87 != v89);
    }

    char v78 = 1;
    uint64_t v79 = 1LL;
  }

  while ((v81 & 1) == 0);
  sub_2DCD0((uint64_t)buf, &v164, &v161, (unsigned int **)&v154, (unsigned int **)&v167);
  uint64_t v106 = *(void *)&buf[8];
  uint64_t v107 = *(void *)buf;
  uint64_t v108 = *(unint64_t **)(v1 + 688);
  if (*(void *)&buf[8] - *(void *)buf != *(void *)(v1 + 696) - (void)v108) {
    goto LABEL_192;
  }
  while (v107 != v106)
  {
    v107 += 208LL;
    v108 += 26;
  }

  uint64_t v109 = (uint64_t)v173;
  uint64_t v110 = *(void *)&buf[24];
  uint64_t v111 = *(unint64_t **)(v1 + 712);
  if (*(char **)&buf[24] != v173)
  {
    do
    {
      int v112 = sub_2DEA8(v110, v111);
      if (!v112) {
        break;
      }
      v110 += 208LL;
      v111 += 26;
    }

    while (v110 != v109);
    if ((v112 & 1) == 0)
    {
LABEL_192:
      if ((_BYTE *)(v1 + 688) != buf)
      {
        sub_22F660( (uint64_t *)(v1 + 688),  *(uint64_t *)buf,  *(uint64_t *)&buf[8],  0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4));
        sub_22F660( (uint64_t *)(v1 + 712),  *(uint64_t *)&buf[24],  (uint64_t)v173,  0x4EC4EC4EC4EC4EC5LL * ((uint64_t)&v173[-*(void *)&buf[24]] >> 4));
      }

      sub_2DB30(v1 + 736, v174);
      sub_2DB30(v1 + 752, v175);
      char v113 = (os_log_t *)sub_138E8(16);
      uint64_t v114 = *v113;
      if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(v157, *(unsigned int *)(v1 + 268));
        uint64_t v115 = (SBYTE7(v158) & 0x80u) == 0 ? v157 : (void **)v157[0];
        uint64_t v116 = *(void *)(v1 + 712);
        int v117 = -991146299 * ((unint64_t)(*(void *)(v1 + 720) - v116) >> 4);
        if (*(void *)(v1 + 720) == v116 && (uint64_t v116 = *(void *)(v1 + 688), *(void *)(v1 + 696) == v116)) {
          uint64_t v118 = 0LL;
        }
        else {
          uint64_t v118 = *(void *)(v116 + 40);
        }
        *(_DWORD *)__int128 __p = 136316162;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1191;
        *(_WORD *)&__p[18] = 2080;
        *(void *)&__p[20] = v115;
        *(_WORD *)&_BYTE __p[28] = 1024;
        *(_DWORD *)&__p[30] = v117;
        *(_WORD *)&__p[34] = 2048;
        *(void *)&__p[36] = v118;
        _os_log_impl( &dword_0,  v114,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Updated IOProcCache for VAD '%s'. NumStreams: %u SampleRate: %f",  __p,  0x2Cu);
        if (SBYTE7(v158) < 0) {
          operator delete(v157[0]);
        }
      }
    }
  }

  sub_2DBF4(v175);
  sub_2DBF4(v174);
  *(void *)__int128 __p = &buf[24];
  sub_867A4((void ***)__p);
  *(void *)__int128 __p = buf;
  sub_867A4((void ***)__p);
  sub_2DBF4((unsigned int **)&v167);
  sub_2DBF4((unsigned int **)&v154);
  *(void *)buf = &v161;
  sub_867A4((void ***)buf);
  *(void *)buf = &v164;
  sub_867A4((void ***)buf);
}

void sub_271E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *__p, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, unsigned int *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  STACK[0x220] = (unint64_t)&a59;
  sub_867A4((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a62;
  sub_867A4((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_273BC(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1 + 440;
  char v28 = 1;
  sub_92F80(a1 + 440);
  if (!*(_BYTE *)(a1 + 400))
  {
    uint64_t v4 = sub_138E8(22);
    if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    {
      int v5 = *(os_log_s **)v4;
      if (*(void *)v4)
      {
        if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          unsigned int v35 = "VirtualStream.cpp";
          __int16 v36 = 1024;
          int v37 = 718;
          __int16 v38 = 2048;
          uint64_t v39 = a1;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VirtualStream at %p is being queried for its current formats after it has already been flagged as untrustworthy -- any resulting errors will throw quietly",  buf,  0x1Cu);
        }
      }
    }
  }

  sub_27D9BC((uint64_t *)v29, (uint64_t *)(a1 + 80), "", 722);
  uint64_t v6 = *(void *)v29;
  uint64_t v7 = *(void *)(a1 + 136);
  else {
    uint64_t v8 = 1885762592LL;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v6 + 120LL))(v6, buf, v8);
  uint64_t v10 = v9;
  uint64_t v11 = *(std::__shared_weak_count **)&v29[8];
  if (!*(void *)&v29[8]) {
    goto LABEL_14;
  }
  unint64_t v12 = (unint64_t *)(*(void *)&v29[8] + 8LL);
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((_DWORD)v10)
    {
LABEL_15:
      uint64_t v14 = (os_log_t *)sub_138E8(22);
      char v15 = *v14;
      if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      sub_2CA1C(__p, v10);
      if (v26 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      *(_DWORD *)__int16 v29 = 136315650;
      *(void *)&v29[4] = "VirtualStream.cpp";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 725;
      __int16 v30 = 2080;
      int v31 = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting physical stream format", v29, 0x1Cu);
      goto LABEL_21;
    }
  }

  else
  {
LABEL_14:
    if ((_DWORD)v9) {
      goto LABEL_15;
    }
  }

  uint64_t v10 = sub_27988(a1, (uint64_t)buf, a2);
  if (!(_DWORD)v10)
  {
    sub_286F4(*(void *)(a1 + 96), a2);
    uint64_t v10 = 0LL;
    goto LABEL_35;
  }

  double v17 = (os_log_t *)sub_138E8(22);
  int v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(__p, v10);
    int v19 = v26;
    int v20 = (void **)__p[0];
    sub_2CC00(&v24, (uint64_t)buf);
    int v21 = __p;
    if (v19 < 0) {
      int v21 = v20;
    }
    if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v22 = &v24;
    }
    else {
      uint64_t v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int16 v29 = 136315906;
    *(void *)&v29[4] = "VirtualStream.cpp";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 732;
    __int16 v30 = 2080;
    int v31 = v21;
    __int16 v32 = 2080;
    int v33 = v22;
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' getting client format for physical format %s",  v29,  0x26u);
LABEL_21:
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }

LABEL_35:
  sub_93128((uint64_t)&v27);
  return v10;
}

          char v28 = sub_45C8((uint64_t)(a1 + 86), 0, 0);
          __int16 v29 = *(_OWORD *)(v28 + 16);
          *(_OWORD *)buf = *(_OWORD *)v28;
          *(_OWORD *)&buf[16] = v29;
          int v62 = *(void *)(v28 + 32);
          uint64_t v58 = xmmword_403240;
          if (v6) {
            (*(void (**)(uint64_t, __int128 *, _BYTE *, uint64_t *))(*(void *)v6 + 16LL))(v6, &v58, buf, v59);
          }
        }
      }

      sub_85B80(v59);
    }

    if (a1[90] != a1[89])
    {
      __int16 v30 = a1[68];
      if (a1[69] == v30)
      {
        uint64_t v55 = (os_log_t *)sub_138E8(13);
        uint64_t v56 = *v55;
        if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1498;
          _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Expected at least one output stream.  Found 0.",  buf,  0x12u);
        }

        uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Expected at least one output stream.  Found 0.");
      }

      sub_85A90(v59, (void *)(*(void *)v30 + 112LL));
      if (v60)
      {
        int v31 = *a2;
        if ((*a2 & 4) != 0)
        {
          __int16 v32 = sub_138E8(16);
          int v33 = sub_138E8(40);
          __int128 v34 = 0;
          unsigned int v35 = 0LL;
          *(void *)buf = 0x100000002LL;
          __int16 v36 = *(void *)(v32 + 8);
          while (1)
          {
            int v37 = *(int *)&buf[4 * v35];
            __int16 v38 = v34;
            if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
              break;
            }
            __int128 v34 = 1;
            unsigned int v35 = 1LL;
            if ((v38 & 1) != 0)
            {
              if ((v36 & 1) == 0) {
                goto LABEL_53;
              }
              goto LABEL_50;
            }
          }

          if ((v36 & v37) == 0) {
            __int16 v32 = v33;
          }
          if ((*(void *)(v32 + 8) & 1) != 0)
          {
LABEL_50:
            uint64_t v39 = *(os_log_s **)v32;
            if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1507;
              _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitor for secondary ouput streams",  buf,  0x12u);
            }
          }

  if (!v20) {
    goto LABEL_39;
  }
  char v26 = (unint64_t *)&v20->__shared_owners_;
  do
    uint64_t v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_39:
    if (!v14) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }

  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (v14) {
LABEL_40:
  }
    std::__shared_weak_count::__release_weak(v14);
LABEL_41:
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return v21 < v15;
}

  int v31 = sub_138E8(1);
  __int16 v32 = sub_138E8(4);
  int v33 = 0;
  __int128 v34 = 0LL;
  *(void *)buf = 0x100000002LL;
  unsigned int v35 = *(void *)(v31 + 8);
  while (1)
  {
    __int16 v36 = *(int *)&buf[4 * v34];
    int v37 = v33;
    if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
      break;
    }
    int v33 = 1;
    __int128 v34 = 1LL;
    if ((v37 & 1) != 0)
    {
      if ((v35 & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_43;
    }
  }

  if ((v35 & v36) == 0) {
    int v31 = v32;
  }
  if ((*(void *)(v31 + 8) & 1) != 0)
  {
LABEL_43:
    __int16 v38 = *(os_log_s **)v31;
    if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v144 + 88LL))(v144, 1LL);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      UInt32 v147 = 1024;
      int v148 = 4363;
      uint64_t v149 = 1024;
      LODWORD(v150) = v39;
      _os_log_impl(&dword_0, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d New core device output stream count: %u", buf, 0x18u);
    }
  }

    unint64_t v12 = v10;
    goto LABEL_71;
  }

  if (v10 == 1668313715)
  {
    sub_57ADC((uint64_t *)v77, 0x70726563u, 1886545251);
    uint64_t v27 = sub_138E8(2);
    char v28 = sub_138E8(34);
    __int16 v29 = 0;
    __int16 v30 = 0LL;
    *(void *)buf = 0x100000002LL;
    int v31 = *(void *)(v27 + 8);
    while (1)
    {
      __int16 v32 = *(int *)&buf[4 * v30];
      int v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      __int16 v29 = 1;
      __int16 v30 = 1LL;
      if ((v33 & 1) != 0)
      {
        if ((v31 & 1) == 0) {
          goto LABEL_66;
        }
        goto LABEL_43;
      }
    }

    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
    if ((*(void *)(v27 + 8) & 1) == 0) {
      goto LABEL_66;
    }
LABEL_43:
    AudioObjectPropertyElement v41 = *(os_log_s **)v27;
    if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      char v75 = 1024;
      char v76 = 941;
      uint64_t v42 = "%25s:%-5d kVirtualAudioPlugInRoutingCategoryPlayAndRecordDefaultToSpeaker is now obsolete.";
LABEL_65:
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEBUG, v42, buf, 0x12u);
    }

    goto LABEL_66;
  }

  if (v10 != 1668440898)
  {
    if (v10 == 1668703092)
    {
      uint64_t v11 = 1768781411;
      goto LABEL_71;
    }

    goto LABEL_35;
  }

  sub_57ADC((uint64_t *)v77, 0x706D6274u, 1886216820);
  __int128 v34 = sub_138E8(2);
  unsigned int v35 = sub_138E8(34);
  __int16 v36 = 0;
  int v37 = 0LL;
  *(void *)buf = 0x100000002LL;
  __int16 v38 = *(void *)(v34 + 8);
  while (1)
  {
    uint64_t v39 = *(int *)&buf[4 * v37];
    int v40 = v36;
    if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
      break;
    }
    __int16 v36 = 1;
    int v37 = 1LL;
    if ((v40 & 1) != 0) {
      goto LABEL_55;
    }
  }

  if ((v38 & v39) == 0) {
    __int128 v34 = v35;
  }
  __int16 v38 = *(void *)(v34 + 8);
LABEL_55:
  unint64_t v12 = 1668441443;
  if ((v38 & 1) != 0)
  {
    uint64_t v43 = *(os_log_s **)v34;
    if (v43)
    {
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        char v75 = 1024;
        char v76 = 959;
        _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d kVirtualAudioPlugInRoutingCategoryRecordNoBT is now obsolete.",  buf,  0x12u);
      }
    }
  }

  if (!v20) {
    goto LABEL_39;
  }
  uint64_t v27 = (unint64_t *)&v20->__shared_owners_;
  do
    char v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (v28)
  {
LABEL_39:
    if (v24) {
      goto LABEL_40;
    }
LABEL_43:
    __int16 v29 = 0LL;
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }

  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v24) {
    goto LABEL_43;
  }
LABEL_40:
  __int16 v29 = sub_DA92C((void *)a1[2], a1[3], (void *)a2[2], a2[3]);
  if (v14) {
LABEL_44:
  }
    std::__shared_weak_count::__release_weak(v14);
LABEL_45:
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return v29;
}

  sub_7D130(&__b, a3, 32);
  uint64_t v22 = std::string::insert(&__b, 0LL, "\n", 1uLL);
  uint64_t v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  uint64_t cap = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::string v24 = __p;
  }
  else {
    std::string v24 = (void **)__p[0];
  }
  if (cap >= 0) {
    int v25 = HIBYTE(cap);
  }
  else {
    int v25 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v24, v25);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return std::string::append(a1, "]", 1uLL);
}

    if (!v3) {
      return;
    }
    goto LABEL_36;
  }

  if (!*(void *)(a1 + 320))
  {
    int v5 = sub_138E8(18);
    uint64_t v6 = sub_138E8(38);
    uint64_t v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      uint64_t v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      uint64_t v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_27;
      }
    }

    if ((v9 & v10) == 0) {
      int v5 = v6;
    }
LABEL_27:
    int v21 = *(os_log_s **)v5;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
      if (v26 >= 0) {
        uint64_t v22 = __p;
      }
      else {
        uint64_t v22 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 789;
      __int16 v32 = 2080;
      int v33 = v22;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling software mute on VAD '%s'", buf, 0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    (*(void (**)(uint64_t, void))(*(void *)v4 + 104LL))(v4, 0LL);
    goto LABEL_35;
  }

    if (!v3) {
      return;
    }
    goto LABEL_36;
  }

  if (!*(void *)(a1 + 320))
  {
    int v5 = sub_138E8(18);
    uint64_t v6 = sub_138E8(38);
    uint64_t v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      uint64_t v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      uint64_t v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_27;
      }
    }

    if ((v9 & v10) == 0) {
      int v5 = v6;
    }
LABEL_27:
    int v21 = *(os_log_s **)v5;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
      if (v26 >= 0) {
        uint64_t v22 = __p;
      }
      else {
        uint64_t v22 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 813;
      __int16 v32 = 2080;
      int v33 = v22;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disabling software mute on VAD '%s'.", buf, 0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 104LL))(v4, 1LL);
    goto LABEL_35;
  }

    std::mutex::lock((std::mutex *)(a1 + 512));
    *(_BYTE *)(a1 + 624) = 0;
    std::mutex::unlock((std::mutex *)(a1 + 512));
    int v33 = *(_DWORD *)(a1 + 268);
    strcpy((char *)&buf, "tatsbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    __int128 v34 = AudioObjectSetPropertyData(v33, &buf, 0, 0LL, 4u, &v78);
    if (v34)
    {
      char v69 = (os_log_t *)sub_138E8(13);
      uint64_t v70 = *v69;
      if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
        uint64_t v86 = 1024;
        uint64_t v87 = 463;
        _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error attempting to set kAudioDevicePropertyStarkSt reamAudioType.",  (uint8_t *)&buf,  0x12u);
      }

      uint64_t v71 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v71 = &off_4865A0;
      v71[2] = v34;
    }

    unsigned int v35 = (os_log_t *)sub_138E8(17);
    __int16 v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      uint64_t v86 = 1024;
      uint64_t v87 = 465;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CarPlay Device is waiting on the Config Change to end.",  (uint8_t *)&buf,  0x12u);
    }

    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 512);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 512));
    v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (1)
    {
      if (*(_BYTE *)(a1 + 624))
      {
LABEL_57:
        uint64_t v42 = (os_log_t *)sub_138E8(17);
        uint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
        {
          buf.AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
          uint64_t v86 = 1024;
          uint64_t v87 = 473;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CarPlay Device is done waiting for the Config Change to complete.",  (uint8_t *)&buf,  0x12u);
        }

        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)0x676C6F6273766364LL;
        *(_DWORD *)&__lk.__owns_ = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, std::unique_lock<std::mutex> *))(*(void *)a1 + 16LL))(a1, &__lk);
        if ((result & 1) != 0)
        {
          *(void *)&buf.AudioObjectPropertySelector mSelector = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          LOWORD(buf.mElement) = 257;
          sub_1A31BC((uint64_t)&buf, @"vocoder sample rate", 0.0);
          sub_13408((uint64_t)&buf, @"vocoder type", 0);
          (*(void (**)(uint64_t, std::unique_lock<std::mutex> *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 48LL))( a1,  &__lk,  0LL,  0LL,  8LL,  &buf);
          p_buf = (const __CFDictionary **)&buf;
          return sub_13850((uint64_t)p_buf);
        }

        return result;
      }

      if (v37.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_) {
        goto LABEL_56;
      }
      v38.__d_.__rep_ = v37.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v38.__d_.__rep_ >= 1) {
        break;
      }
LABEL_55:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v37.__d_.__rep_)
      {
LABEL_56:
        if (!*(_BYTE *)(a1 + 624))
        {
          uint64_t v72 = (os_log_t *)sub_138E8(13);
          char v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            buf.AudioObjectPropertySelector mSelector = 136315394;
            *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
            uint64_t v86 = 1024;
            uint64_t v87 = 477;
            _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): CarPlay Device failed to receive the Config Change completion event.",  (uint8_t *)&buf,  0x12u);
          }

          int v74 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v74 = &off_4865A0;
          v74[2] = 2003329396;
        }

        goto LABEL_57;
      }
    }

    std::chrono::steady_clock::now();
    v39.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v39.__d_.__rep_)
    {
      if (v39.__d_.__rep_ < 1)
      {
        if ((unint64_t)v39.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
        {
          int v40 = 0x8000000000000000LL;
          goto LABEL_53;
        }
      }

      else if ((unint64_t)v39.__d_.__rep_ > 0x20C49BA5E353F7LL)
      {
        int v40 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_51;
      }

      int v40 = 1000 * v39.__d_.__rep_;
    }

    else
    {
      int v40 = 0LL;
    }

  sub_1B6C7C(v13, 0, v15, v10[9], a3);
  if (*(_DWORD *)(v133 + 264) == 2004367664) {
    sub_1BAC98(v15, (uint64_t)v13);
  }
  sub_9005C();
  if (byte_48CC70)
  {
    __int128 v34 = (unsigned __int16)sub_2D032C(*(void *)(a2 + 104), v15, v11) > 0x100u;
    sub_1BADEC(v34, v14);
  }

  sub_1B6AD4((uint64_t)buf, (uint64_t)v13, v133, a2, v10[9], v15);
  sub_1BB524((unsigned int **)buf, v113, v13);
  *(void *)char v136 = 0LL;
  *(void *)&v136[8] = 0LL;
  unsigned int v35 = (std::__shared_weak_count *)v10[3];
  if (v35)
  {
    __int16 v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      int v37 = v36;
      __int16 v38 = *v113;
      p_shared_weak_owners = (unint64_t *)&v36->__shared_weak_owners_;
      do
        int v40 = __ldxr(p_shared_weak_owners);
      while (__stxr(v40 + 1, p_shared_weak_owners));
      *(void *)char v136 = v38;
      *(void *)&v136[8] = v36;
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        uint64_t v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    else
    {
      *(void *)char v136 = 0LL;
      *(void *)&v136[8] = 0LL;
    }
  }

  sub_1BC5DC((uint64_t)&__p, (char **)buf, (uint64_t *)v136);
  if (*(void *)&v136[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v136[8]);
  }
  int v112 = a1;
  uint64_t v43 = a4;
  int v44 = sub_1BAB2C(*(_DWORD *)(a2 + 12));
  if (*(_BYTE *)(a2 + 164)) {
    uint64_t v45 = *(_DWORD *)(a2 + 160);
  }
  else {
    uint64_t v45 = v44;
  }
  unint64_t v46 = operator new(0x30uLL);
  uint64_t v47 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v13->_os_unfair_lock_opaque + 120LL))(v13);
  *(void *)char v136 = 0LL;
  *(void *)&v136[8] = 0LL;
  uint64_t v48 = (std::__shared_weak_count *)v10[3];
  if (v48)
  {
    uint64_t v49 = std::__shared_weak_count::lock(v48);
    if (!v49)
    {
      unint64_t v50 = *(std::__shared_weak_count **)&v136[8];
      *(void *)char v136 = 0LL;
      *(void *)&v136[8] = 0LL;
      if (!v50) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }

    unint64_t v50 = v49;
    unint64_t v51 = *v113;
    uint64_t v52 = (unint64_t *)&v49->__shared_weak_owners_;
    do
      std::string::size_type v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    uint64_t v54 = *(std::__shared_weak_count **)&v136[8];
    *(void *)char v136 = v51;
    *(void *)&v136[8] = v50;
    if (v54) {
      std::__shared_weak_count::__release_weak(v54);
    }
    uint64_t v55 = (unint64_t *)&v50->__shared_owners_;
    do
      uint64_t v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
LABEL_64:
      std::__shared_weak_count::__release_weak(v50);
    }
  }

LABEL_36:
      v7 += 8LL;
      if (v7 == v6) {
        goto LABEL_37;
      }
    }

    if (!v25)
    {
      int v33 = pthread_self();
      __int128 v34 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v22 + 104));
      if (!pthread_equal(v33, v34)) {
        goto LABEL_36;
      }
    }

    unsigned int v35 = (os_log_s *)*(id *)sub_138E8(13);
    __int16 v29 = v35;
    if (!v35 || !os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      goto LABEL_35;
    }
    __int16 v36 = v10[2];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3956;
    int v112 = 1024;
    char v113 = v36;
    uint64_t v114 = 2048;
    uint64_t v115 = v10;
    int v31 = v29;
    __int16 v32 = "%25s:%-5d ASSERTION FAILURE: deviceRouteChangeInProgess is false, but the IO monitor for device ID %u (%p) i"
          "s held by this thread.";
    goto LABEL_34;
  }

  std::string v24 = (os_log_t *)sub_138E8(2);
  int v25 = *v24;
  if (*v24)
  {
    uint64_t result = os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    char v26 = 136315394;
    uint64_t v27 = "RouteToPartnerHandler.cpp";
    char v28 = 1024;
    __int16 v29 = 126;
    _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Something went wrong ! Not routed to partner port",  (uint8_t *)&v26,  0x12u);
  }

  return 0LL;
}

    CFRetain(@"SoundRecognition");
    sub_7F234(&cf, @"SoundRecognition");
    if (!cf)
    {
      uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v56, "Could not construct");
    }

    sub_48100((uint64_t)__p, (const __CFString *)cf);
    if ((v71 & 0x80u) == 0) {
      int v18 = v71;
    }
    else {
      int v18 = __n;
    }
    int v19 = v59;
    int v20 = (char)v59;
    if ((v59 & 0x80u) != 0) {
      int v19 = (unint64_t)__p[1];
    }
    if (v18 == v19)
    {
      if ((v59 & 0x80u) == 0) {
        int v21 = __p;
      }
      else {
        int v21 = (void **)__p[0];
      }
      if ((v71 & 0x80) != 0)
      {
        double v17 = memcmp(__s1, v21, __n) == 0;
        goto LABEL_59;
      }

      if (v71)
      {
        uint64_t v22 = v71 - 1LL;
        p_s1 = &__s1;
        do
        {
          int v25 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          std::string v24 = v25;
          uint64_t v27 = *(unsigned __int8 *)v21;
          int v21 = (void **)((char *)v21 + 1);
          char v26 = v27;
          char v28 = v22-- != 0;
          __int16 v29 = v28;
          double v17 = v24 == v26;
        }

        while (v24 == v26 && (v29 & 1) != 0);
LABEL_59:
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_60;
        }
        goto LABEL_55;
      }

      double v17 = 1;
    }

    else
    {
      double v17 = 0;
      if (((char)v59 & 0x80000000) == 0)
      {
LABEL_60:
        if (cf) {
          CFRelease(cf);
        }
        if ((v16 & 1) != 0)
        {
LABEL_68:
          if (v63) {
            CFRelease(v63);
          }
          if (v17) {
            goto LABEL_105;
          }
          CFRetain(@"InputInjection");
          sub_7F234(__p, @"InputInjection");
          if (!__p[0])
          {
            uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v55, "Could not construct");
          }

          sub_48100((uint64_t)&v64, (const __CFString *)__p[0]);
          __int16 v30 = v66;
          int v31 = (char)v66;
          if ((v66 & 0x80u) != 0) {
            __int16 v30 = v65;
          }
          if (v6 != v30)
          {
            int v40 = 0;
            goto LABEL_90;
          }

          if ((v66 & 0x80u) == 0) {
            __int16 v32 = (unsigned __int8 *)&v64;
          }
          else {
            __int16 v32 = (unsigned __int8 *)v64;
          }
          if ((v3 & 0x80) != 0)
          {
            int v40 = memcmp(v72, v32, v5) == 0;
          }

          else
          {
            if (!(_DWORD)v3)
            {
              int v40 = 1;
              if (((char)v66 & 0x80000000) == 0)
              {
LABEL_93:
                if (__p[0]) {
                  CFRelease(__p[0]);
                }
                if (!v40)
                {
                  if (v6 == 9)
                  {
                    AudioObjectPropertyElement v41 = (void **)v72;
                    if (v4 >= 0) {
                      AudioObjectPropertyElement v41 = &v72;
                    }
                    uint64_t v42 = *v41;
                    uint64_t v43 = *((unsigned __int8 *)v41 + 8);
                    if (v42 == (void *)0x65764F6563696F56LL && v43 == 114)
                    {
                      uint64_t v1 = _os_feature_enabled_impl("VirtualAudio", "additive_routing_voice_over");
LABEL_106:
                      if ((char)v71 < 0)
                      {
                        operator delete(__s1);
                        if ((v3 & 0x80) == 0) {
                          return v1;
                        }
                      }

                      else if ((v3 & 0x80) == 0)
                      {
                        return v1;
                      }

                      operator delete(v72);
                      return v1;
                    }
                  }

                  if ((*(void *)(a1 + 232) & 0xFF00000000LL) == 0 || !*(void *)(a1 + 232))
                  {
                    unint64_t v46 = v68;
                    if ((v68 & 0x80u) != 0) {
                      unint64_t v46 = (unint64_t)v67[1];
                    }
                    if (v46 != 21) {
                      goto LABEL_127;
                    }
                    uint64_t v47 = v67;
                    if ((v68 & 0x80u) != 0) {
                      uint64_t v47 = (void **)v67[0];
                    }
                    uint64_t v48 = *v47;
                    uint64_t v49 = v47[1];
                    unint64_t v50 = *(uint64_t *)((char *)v47 + 13);
                    unint64_t v51 = v48 == (void *)0x6C7070612E6D6F63LL && v49 == (void *)0x656C69626F6D2E65LL;
                    uint64_t v52 = v51 && v50 == 0x6369676F6C656C69LL;
                    if (!v52 || (_os_feature_enabled_impl("VirtualAudio", "additive_routing_logicpro") & 1) == 0)
                    {
LABEL_127:
                      uint64_t v1 = 0LL;
                      goto LABEL_106;
                    }
                  }
                }

void sub_27710( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  sub_93128((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_27760(uint64_t a1, void *outData, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    unint64_t v12 = (os_log_t *)sub_138E8(13);
    unint64_t v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v20 = "Stream_HAL_Common.cpp";
        __int16 v21 = 1024;
        int v22 = 342;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  buf,  0x12u);
      }
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  AudioObjectID v5 = *(_DWORD *)(a1 + 80);
  *(void *)&inAddress.AudioObjectPropertyScope mScope = 1735159650LL;
  UInt32 ioDataSize = 40;
  inAddress.AudioObjectPropertySelector mSelector = a3;
  uint64_t PropertyData = AudioObjectGetPropertyData(v5, &inAddress, 0, 0LL, &ioDataSize, outData);
  if ((_DWORD)PropertyData)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(22);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, PropertyData);
        uint64_t v9 = v16 >= 0 ? __p : (void **)__p[0];
        int v10 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)buf = 136316162;
        int v20 = "Stream_HAL_Common.cpp";
        __int16 v21 = 1024;
        int v22 = 347;
        __int16 v23 = 1024;
        int v24 = PropertyData;
        __int16 v25 = 2080;
        char v26 = v9;
        __int16 v27 = 1024;
        int v28 = v10;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') getting the current stream format for stream %u",  buf,  0x28u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return PropertyData;
}

void sub_2796C(_Unwind_Exception *a1)
{
}

uint64_t sub_27988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = a1 + 440;
  char v58 = 1;
  sub_92F80(a1 + 440);
  if ((sub_28298(*(void *)(a1 + 208), *(void *)(a1 + 216), a2, *(void *)(a1 + 232), *(void *)(a1 + 240), a3) & 1) != 0)
  {
    uint64_t v6 = 0LL;
    goto LABEL_85;
  }

  uint64_t v6 = 2003329396LL;
  if (!*(_BYTE *)(a1 + 400)) {
    goto LABEL_85;
  }
  uint64_t v7 = (os_log_t *)sub_138E8(22);
  uint64_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1 + 96);
    *(_DWORD *)buf = 136315906;
    UInt32 v65 = "VirtualStream.cpp";
    __int16 v66 = 1024;
    int v67 = 1378;
    __int16 v68 = 2048;
    *(void *)char v69 = a1;
    *(_WORD *)&v69[8] = 2048;
    *(void *)&v69[10] = v9;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to translate physical format to client format for virtual stream %p of aggregate device %p.",  buf,  0x26u);
  }

  int v10 = (os_log_t *)sub_138E8(22);
  uint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
  {
    sub_2CC00((std::string *)__p, a2);
    unint64_t v12 = SBYTE3(v61) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    UInt32 v65 = "VirtualStream.cpp";
    __int16 v66 = 1024;
    int v67 = 1379;
    __int16 v68 = 2080;
    *(void *)char v69 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d - Given physical format: %s", buf, 0x1Cu);
    if (SBYTE3(v61) < 0) {
      operator delete(*(void **)__p);
    }
  }

  unint64_t v13 = (os_log_t *)sub_138E8(22);
  uint64_t v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    UInt32 v65 = "VirtualStream.cpp";
    __int16 v66 = 1024;
    int v67 = 1380;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d - Cached formats:", buf, 0x12u);
  }

  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    uint64_t v15 = 0LL;
    unsigned int v16 = 1;
    do
    {
      double v17 = (os_log_t *)sub_138E8(22);
      int v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        sub_1548E8((std::string *)__p, *(void *)(a1 + 232) + 56 * v15);
        int v19 = __p;
        if (SBYTE3(v61) < 0) {
          int v19 = *(_BYTE **)__p;
        }
        *(_DWORD *)buf = 136315906;
        UInt32 v65 = "VirtualStream.cpp";
        __int16 v66 = 1024;
        int v67 = 1384;
        __int16 v68 = 1024;
        *(_DWORD *)char v69 = v16 - 1;
        *(_WORD *)&v69[4] = 2080;
        *(void *)&v69[6] = v19;
        _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d   %uv: %s", buf, 0x22u);
        if (SBYTE3(v61) < 0) {
          operator delete(*(void **)__p);
        }
      }

      int v20 = (os_log_t *)sub_138E8(22);
      __int16 v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        sub_1548E8((std::string *)__p, *(void *)(a1 + 208) + 56 * v15);
        int v22 = __p;
        if (SBYTE3(v61) < 0) {
          int v22 = *(_BYTE **)__p;
        }
        *(_DWORD *)buf = 136315906;
        UInt32 v65 = "VirtualStream.cpp";
        __int16 v66 = 1024;
        int v67 = 1385;
        __int16 v68 = 1024;
        *(_DWORD *)char v69 = v16 - 1;
        *(_WORD *)&v69[4] = 2080;
        *(void *)&v69[6] = v22;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d   %ua: %s", buf, 0x22u);
        if (SBYTE3(v61) < 0) {
          operator delete(*(void **)__p);
        }
      }

      uint64_t v15 = v16;
    }

    while (0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) > (unint64_t)v16++);
  }

  uint64_t v24 = 1936092513LL;
  uint64_t v25 = *(void *)(a1 + 136);
  else {
    uint64_t v26 = 1885762592LL;
  }
  sub_27D9BC((uint64_t *)__p, (uint64_t *)(a1 + 80), "", 1390);
  uint64_t v27 = (*(uint64_t (**)(void, uint8_t *, uint64_t))(**(void **)__p + 120LL))(*(void *)__p, buf, v26);
  uint64_t v28 = v27;
  __int16 v29 = *(std::__shared_weak_count **)&__p[8];
  if (!*(void *)&__p[8]) {
    goto LABEL_40;
  }
  __int16 v30 = (unint64_t *)(*(void *)&__p[8] + 8LL);
  do
    unint64_t v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!(_DWORD)v28) {
      goto LABEL_53;
    }
  }

  else
  {
LABEL_40:
    if (!(_DWORD)v27) {
      goto LABEL_53;
    }
  }

  __int16 v32 = (os_log_t *)sub_138E8(22);
  int v33 = *v32;
  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v56, v28);
    int size = (char)v56.__r_.__value_.__s.__size_;
    std::string::size_type v35 = v56.__r_.__value_.__r.__words[0];
    sub_23FE8((uint64_t)&v55, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
    __int16 v36 = &v56;
    if (size < 0) {
      __int16 v36 = (std::string *)v35;
    }
    if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v37 = &v55;
    }
    else {
      int v37 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 __p = 136315906;
    *(void *)&__p[4] = "VirtualStream.cpp";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 1393;
    __int16 v60 = 2080;
    int v61 = v36;
    __int16 v62 = 2080;
    unsigned int v63 = v37;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error (%s) getting physical stream format for owning aggregate %s.",  __p,  0x26u);
  }

LABEL_53:
  __int16 v38 = (os_log_t *)sub_138E8(22);
  uint64_t v39 = *v38;
  if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
  {
    sub_2CC00(&v56, (uint64_t)buf);
    int v40 = (v56.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v56 : (std::string *)v56.__r_.__value_.__r.__words[0];
    *(_DWORD *)__int128 __p = 136315650;
    *(void *)&__p[4] = "VirtualStream.cpp";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 1395;
    __int16 v60 = 2080;
    int v61 = v40;
    _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d - Current physical format: %s", __p, 0x1Cu);
  }

  memset(&v56, 0, sizeof(v56));
  sub_27D9BC((uint64_t *)__p, (uint64_t *)(a1 + 80), "", 1398);
  uint64_t v41 = *(void *)__p;
  uint64_t v42 = *(void *)(a1 + 136);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v41 + 104LL))(v41, &v56, v24);
  uint64_t v44 = v43;
  uint64_t v45 = *(std::__shared_weak_count **)&__p[8];
  uint64_t v6 = 2003329396LL;
  if (!*(void *)&__p[8]) {
    goto LABEL_67;
  }
  unint64_t v46 = (unint64_t *)(*(void *)&__p[8] + 8LL);
  do
    unint64_t v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if ((_DWORD)v44)
    {
LABEL_68:
      uint64_t v48 = (os_log_t *)sub_138E8(22);
      uint64_t v49 = *v48;
      if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v55, v44);
        unint64_t v50 = (v55.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v55 : (std::string *)v55.__r_.__value_.__r.__words[0];
        *(_DWORD *)__int128 __p = 136315650;
        *(void *)&__p[4] = "VirtualStream.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1401;
        __int16 v60 = 2080;
        int v61 = v50;
        _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' getting physical stream formats from actual stream.",  __p,  0x1Cu);
      }
    }
  }

  else
  {
LABEL_67:
    if ((_DWORD)v43) {
      goto LABEL_68;
    }
  }

  unint64_t v51 = (os_log_t *)sub_138E8(22);
  uint64_t v52 = *v51;
  if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
  {
    sub_27E6F8(&v55, (uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
    std::string::size_type v53 = (v55.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v55 : (std::string *)v55.__r_.__value_.__r.__words[0];
    *(_DWORD *)__int128 __p = 136315650;
    *(void *)&__p[4] = "VirtualStream.cpp";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 1403;
    __int16 v60 = 2080;
    int v61 = v53;
    _os_log_impl(&dword_0, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d - Current physical formats: %s", __p, 0x1Cu);
  }

  if (v56.__r_.__value_.__r.__words[0])
  {
    v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
    operator delete(v56.__r_.__value_.__l.__data_);
  }

          int v40 = sub_45C8(v7, 1, 0);
          uint64_t v41 = *(_OWORD *)(v40 + 16);
          *(_OWORD *)buf = *(_OWORD *)v40;
          *(_OWORD *)&buf[16] = v41;
          __int16 v62 = *(void *)(v40 + 32);
          char v58 = xmmword_403250;
          if (v6) {
            (*(void (**)(uint64_t, __int128 *, _BYTE *, uint64_t *))(*(void *)v6 + 16LL))(v6, &v58, buf, v59);
          }
          unint64_t v31 = *a2;
        }

        if ((v31 & 2) != 0)
        {
          uint64_t v42 = sub_138E8(16);
          uint64_t v43 = sub_138E8(40);
          uint64_t v44 = 0;
          uint64_t v45 = 0LL;
          *(void *)buf = 0x100000002LL;
          unint64_t v46 = *(void *)(v42 + 8);
          while (1)
          {
            unint64_t v47 = *(int *)&buf[4 * v45];
            uint64_t v48 = v44;
            if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
              break;
            }
            uint64_t v44 = 1;
            uint64_t v45 = 1LL;
            if ((v48 & 1) != 0)
            {
              if ((v46 & 1) == 0) {
                goto LABEL_68;
              }
              goto LABEL_65;
            }
          }

          if ((v46 & v47) == 0) {
            uint64_t v42 = v43;
          }
          if ((*(void *)(v42 + 8) & 1) != 0)
          {
LABEL_65:
            uint64_t v49 = *(os_log_s **)v42;
            if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1514;
              _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitor for primary ouput streams",  buf,  0x12u);
            }
          }

        int v40 = v76[0] + 2;
        do
          uint64_t v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        if (v34)
        {
          uint64_t v42 = std::__shared_weak_count::lock(v34);
          if (v42) {
            uint64_t v43 = (os_unfair_lock_s *)v35;
          }
          else {
            uint64_t v43 = 0LL;
          }
        }

        else
        {
          uint64_t v43 = 0LL;
          uint64_t v42 = 0LL;
        }

        uint64_t v44 = std::__shared_weak_count::lock((std::__shared_weak_count *)v76[0]);
        if (!v44)
        {
          unint64_t v46 = v43 == 0LL;
          if (!v42) {
            goto LABEL_72;
          }
LABEL_68:
          uint64_t v49 = (unint64_t *)&v42->__shared_owners_;
          do
            unint64_t v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }

          goto LABEL_72;
        }

        uint64_t v45 = v44;
        unint64_t v46 = v43 == v75;
        unint64_t v47 = (unint64_t *)&v44->__shared_owners_;
        do
          uint64_t v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v45);
        }

        if (v42) {
          goto LABEL_68;
        }
LABEL_72:
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v76[0]);
        if (v34) {
          std::__shared_weak_count::__release_weak(v34);
        }
        if (v46)
        {
          if (v30 != i)
          {
            unint64_t v51 = (os_log_t *)sub_138E8(9);
            uint64_t v52 = *v51;
            if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "PortManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 711;
              *(_WORD *)&_BYTE buf[18] = 2048;
              *(void *)&buf[20] = v75;
              _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Disconnected port %p not in connected ports list. Removing from the update map",  buf,  0x1Cu);
            }

            sub_FFABC((uint64_t)(v29 + 5), i);
            goto LABEL_84;
          }

          goto LABEL_81;
        }
      }

      __int128 v34 = 0LL;
LABEL_52:
      std::string::size_type v35 = 0LL;
      goto LABEL_53;
    }
  }

      uint64_t v43 = v40 == 0;
      if (!v39) {
        goto LABEL_57;
      }
LABEL_54:
      unint64_t v46 = (unint64_t *)&v39->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        if (!v33) {
          goto LABEL_59;
        }
LABEL_58:
        std::__shared_weak_count::__release_weak(v33);
        goto LABEL_59;
      }

      *a5 = 0;
      return;
    }

    uint64_t v52 = *(unsigned __int8 *)(a1 + 309);
LABEL_94:
    sub_5CABC(v52, a5, a6);
    return;
  }

  if (v13 == 1684633187)
  {
    uint64_t v52 = 0;
    goto LABEL_94;
  }

  if (v13 != 1685484390) {
    goto LABEL_95;
  }
  int v33 = *(_DWORD *)(a1 + 264) - 1;
  __int128 v34 = (os_log_t *)sub_138E8(18);
  std::string::size_type v35 = (uint64_t)v34;
  if (v33 > 1)
  {
    std::string v55 = sub_138E8(38);
    std::string v56 = 0;
    uint64_t v57 = 0LL;
    *(void *)buf = 0x100000002LL;
    char v58 = *(void *)(v35 + 8);
    while (1)
    {
      uint64_t v59 = *(int *)&buf[4 * v57];
      __int16 v60 = v56;
      if (((v58 & v59) != 0) != ((*(void *)(v55 + 8) & v59) != 0)) {
        break;
      }
      std::string v56 = 1;
      uint64_t v57 = 1LL;
      if ((v60 & 1) != 0) {
        goto LABEL_116;
      }
    }

    if ((v58 & v59) == 0) {
      std::string::size_type v35 = v55;
    }
LABEL_116:
    char v69 = *(os_log_s **)v35;
    if (v69 && os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(&__p, *a2);
      uint64_t v70 = v116;
      uint64_t v71 = (_OWORD *)__p;
      sub_23FE8((uint64_t)&v112, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
      uint64_t v72 = COERCE_DOUBLE(&__p);
      if (v70 < 0) {
        uint64_t v72 = *(double *)&v71;
      }
      if (v114 >= 0) {
        char v73 = &v112;
      }
      else {
        char v73 = v112;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      uint64_t v118 = 1024;
      int v119 = 564;
      uint64_t v120 = 2080;
      int v121 = v72;
      int v122 = 2080;
      *(void *)int v123 = v73;
      _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_INFO,  "%25s:%-5d Hardware volume mode: Forwarding property (%s) request to device on VAD '%s'.",  buf,  0x26u);
      if (v114 < 0) {
        operator delete(v112);
      }
      if (v116 < 0) {
        operator delete((void *)__p);
      }
    }

    (*(void (**)(void, unsigned int *, uint64_t, double *, int *, float *))(**(void **)(a1 + 96) + 40LL))( *(void *)(a1 + 96),  a2,  a3,  a4,  a5,  a6);
  }

  else
  {
    __int16 v36 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(&__p, *a2);
      int v37 = v116 >= 0 ? COERCE_DOUBLE(&__p) : *(double *)&__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      uint64_t v118 = 1024;
      int v119 = 537;
      uint64_t v120 = 2080;
      int v121 = v37;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Software volume mode: calculating %s in-house",  buf,  0x1Cu);
      if (v116 < 0) {
        operator delete((void *)__p);
      }
    }

    if ((_DWORD)a3 != 8)
    {
      uint64_t v109 = (os_log_t *)sub_138E8(13);
      uint64_t v110 = *v109;
      if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        uint64_t v118 = 1024;
        int v119 = 538;
        _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      uint64_t v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v111, "Precondition failure.");
    }

    __int16 v38 = *a4;
    uint64_t v39 = *a4;
    int v40 = sub_757A4(a1 + 168, v39);
    uint64_t v41 = *(float *)(a1 + 296);
    if (v41 <= 0.0)
    {
      uint64_t v42 = 0.0;
    }

    else
    {
      *(double *)buf = v40 / v41;
      *(void *)&__int128 __p = 0LL;
      int v112 = (void *)0x3FF0000000000000LL;
      *(double *)a6 = *sub_1C7EB4((double *)&__p, (double *)buf, (double *)&v112);
      *a5 = 8;
      uint64_t v42 = *(double *)buf;
    }

    int v74 = sub_138E8(18);
    char v75 = sub_138E8(38);
    char v76 = 0;
    __int16 v77 = 0LL;
    *(void *)buf = 0x100000002LL;
    char v78 = *(void *)(v74 + 8);
    while (1)
    {
      uint64_t v79 = *(int *)&buf[4 * v77];
      __int16 v80 = v76;
      if (((v78 & v79) != 0) != ((*(void *)(v75 + 8) & v79) != 0)) {
        break;
      }
      char v76 = 1;
      __int16 v77 = 1LL;
      if ((v80 & 1) != 0) {
        goto LABEL_135;
      }
    }

    if ((v78 & v79) == 0) {
      int v74 = v75;
    }
LABEL_135:
    char v81 = *(os_log_s **)v74;
    if (v81 && os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      int v82 = *(float *)(a1 + 296);
      sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
      AudioObjectPropertyScope v83 = v116 >= 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)buf = 136316674;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      uint64_t v118 = 1024;
      int v119 = 558;
      uint64_t v120 = 2048;
      int v121 = v42;
      int v122 = 2048;
      *(double *)int v123 = v38;
      *(_WORD *)&v123[8] = 2048;
      v124 = v82;
      uint64_t v125 = 2048;
      uint64_t v126 = v40;
      UInt32 v127 = 2080;
      int v128 = v83;
      _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Calculated scalar factor of %f for requested DB %f and current scalar volume %f requested scalar volum e %f on VAD '%s'.",  buf,  0x44u);
      if (v116 < 0) {
        operator delete((void *)__p);
      }
    }
  }

            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not convert");
          }

          else
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
        }

        uint64_t v1 = 0LL;
LABEL_51:
        sub_14AB14((uint64_t)&v14);
        return v1;
      }
    }
  }

  return 0LL;
}

    v41.__d_.__rep_ = v40 + v38.__d_.__rep_;
    goto LABEL_54;
  }

  if (*(_DWORD *)(a1 + 492) != 1937010030)
  {
    __int16 v66 = (os_log_t *)sub_138E8(13);
    int v67 = *v66;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      uint64_t v86 = 1024;
      uint64_t v87 = 500;
      _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    __int16 v68 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v68, "Precondition failure.");
  }

  __int16 v80 = (const __CFDictionary *)a6;
  LOWORD(mElement) = 0;
  int v20 = sub_138E8(17);
  __int16 v21 = sub_138E8(29);
  int v22 = 0;
  __int16 v23 = 0LL;
  *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
  uint64_t v24 = *(void *)(v20 + 8);
  while (1)
  {
    uint64_t v25 = *((int *)&buf.mSelector + v23);
    uint64_t v26 = v22;
    if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
      break;
    }
    int v22 = 1;
    __int16 v23 = 1LL;
    if ((v26 & 1) != 0)
    {
      if ((v24 & 1) == 0) {
        goto LABEL_78;
      }
      goto LABEL_67;
    }
  }

  if ((v24 & v25) == 0) {
    int v20 = v21;
  }
  if ((*(void *)(v20 + 8) & 1) != 0)
  {
LABEL_67:
    uint64_t v45 = *(os_log_s **)v20;
    if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      char v78 = *(void *)&a2->mSelector;
      uint64_t v79 = a2->mElement;
      sub_613AC((uint64_t)&__lk, (unsigned int *)&v78);
      unint64_t v46 = v84;
      unint64_t v47 = __lk.__m_;
      sub_151D60(&__p, v80);
      uint64_t v48 = &__lk;
      if (v46 < 0) {
        uint64_t v48 = (std::unique_lock<std::mutex> *)v47;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v49 = &__p;
      }
      else {
        uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      uint64_t v86 = 1024;
      uint64_t v87 = 502;
      int v88 = 2080;
      unint64_t v89 = (const char *)v48;
      int v90 = 2080;
      v91[0] = v49;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting property %s with vocoder dictionary %s",  (uint8_t *)&buf,  0x26u);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }
  }

    if (!v34 || v34 == 255)
    {
LABEL_137:
      sub_2DBF5C((uint64_t)v90);
      sub_D0C4C((void *)v92);
      __int16 v84 = v91[0];
      v91[0] = 0LL;
      if (v84) {
        operator delete(v84);
      }
      sub_D0C4C((void *)v95);
      uint64_t v85 = v94[0];
      v94[0] = 0LL;
      if (v85) {
        operator delete(v85);
      }
      return;
    }

void sub_281F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, char a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_93128((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_28298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7LL * ((a2 - a1) >> 3);
  if (v6 != 0x6DB6DB6DB6DB6DB7LL * ((a5 - a4) >> 3))
  {
    int v37 = (os_log_t *)sub_138E8(13);
    __int16 v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v43 = "VirtualStream.cpp";
      __int16 v44 = 1024;
      int v45 = 226;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): format lists differ in size",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "format lists differ in size");
  }

  uint64_t v7 = a1;
  if (a2 == a1) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  double v10 = *(double *)a3;
  int v11 = *(_DWORD *)(a3 + 8);
  int v12 = *(_DWORD *)(a3 + 16);
  int v13 = *(_DWORD *)(a3 + 20);
  int v15 = *(_DWORD *)(a3 + 24);
  int v14 = *(_DWORD *)(a3 + 28);
  if (v6 <= 1) {
    uint64_t v16 = 1LL;
  }
  else {
    uint64_t v16 = 0x6DB6DB6DB6DB6DB7LL * ((a2 - a1) >> 3);
  }
  int v17 = *(_DWORD *)(a3 + 32);
  while (1)
  {
    if (*(double *)v7 == 0.0 || (v10 != 0.0 ? (BOOL v18 = *(double *)v7 == v10) : (BOOL v18 = 1), v18))
    {
      int v19 = *(_DWORD *)(v7 + 8);
      BOOL v20 = !v19 || v11 == 0;
      if (v20 || v19 == v11)
      {
        int v22 = *(_DWORD *)(v7 + 16);
        BOOL v23 = !v22 || v12 == 0;
        if (v23 || v22 == v12)
        {
          int v25 = *(_DWORD *)(v7 + 20);
          if (!v25 || !v13 || v25 == v13)
          {
            int v26 = *(_DWORD *)(v7 + 24);
            if (!v26 || !v15 || v26 == v15)
            {
              int v27 = *(_DWORD *)(v7 + 28);
              if (!v27 || !v14 || v27 == v14)
              {
                int v28 = *(_DWORD *)(v7 + 32);
                if (!v28 || !v17 || v28 == v17)
                {
                  uint64_t v40 = a6;
                  uint64_t v41 = a4;
                  int v29 = sub_2854C(v7, a3);
                  a6 = v40;
                  a4 = v41;
                  if (v29)
                  {
                  }
                }
              }
            }
          }
        }
      }
    }

    ++v9;
    v7 += 56LL;
    if (v16 == v9) {
      return 0LL;
    }
  }

  unint64_t v31 = (__int128 *)(v41 + 56 * v9);
  __int128 v33 = *v31;
  __int128 v32 = v31[1];
  *(void *)(v40 + 32) = *((void *)v31 + 4);
  *(_OWORD *)uint64_t v40 = v33;
  *(_OWORD *)(v40 + 16) = v32;
  if (*(double *)v40 == 0.0)
  {
    uint64_t v34 = v41 + 56 * v9;
    double v35 = *(double *)(v34 + 48);
    else {
      double v36 = v35;
    }
    *(double *)uint64_t v40 = v36;
  }

  return 1LL;
}

void sub_28530(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2854C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a2 + 8);
  v4.i64[0] = *(void *)(a2 + 8);
  v4.i64[1] = v2;
  unsigned int v6 = HIDWORD(*(void *)(a2 + 8));
  if ((_DWORD)v2 != 1819304813) {
    return HIDWORD(v2) == DWORD1(v3);
  }
  int v7 = HIDWORD(v2) & 0x7FFFFFFF;
  if ((v2 & 0x7FFFFFFF00000000LL) == 0) {
    int v7 = HIDWORD(v2);
  }
  unsigned int v8 = v7 & 0xFFFFFFBF;
  unsigned int v9 = *(_DWORD *)(a1 + 24);
  if (v9)
  {
    int v10 = *(_DWORD *)(a1 + 28);
    if ((v2 & 0x2000000000LL) != 0) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a1 + 28);
    }
    if (v11)
    {
      unsigned int v9 = 8 * (v9 / v11);
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      unsigned int v13 = v8 | 8;
      BOOL v14 = v9 == v12;
      goto LABEL_16;
    }

    unsigned int v9 = 0;
    unsigned int v12 = *(_DWORD *)(a1 + 32);
    unsigned int v13 = v8 | 8;
  }

  else
  {
    unsigned int v13 = v7 & 0xFFFFFFB7 | 8;
    int v10 = *(_DWORD *)(a1 + 28);
    unsigned int v12 = *(_DWORD *)(a1 + 32);
  }

  BOOL v14 = v12 == 0;
LABEL_16:
  if (v14) {
    unsigned int v8 = v13;
  }
  BOOL v16 = (v12 & 7) == 0 && v9 == v12;
  unsigned int v17 = v8 & 0xFFFFFFEF;
  if (!v16) {
    unsigned int v17 = v8;
  }
  if ((v17 & 1) != 0) {
    v17 &= ~4u;
  }
  BOOL v18 = (v17 & 8) == 0 || v12 > 8;
  int v19 = v17 & 2;
  if (v18) {
    int v19 = v17;
  }
  if (v10 == 1) {
    unsigned int v20 = v19 & 0xFFFFFFDF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (!v20) {
    unsigned int v20 = 0x80000000;
  }
  if ((_DWORD)v3 != 1819304813) {
    return v20 == v6;
  }
  int v21 = DWORD1(v3) & 0x7FFFFFFF;
  if ((DWORD1(v3) & 0x7FFFFFFF) == 0) {
    int v21 = HIDWORD(*(void *)(a2 + 8));
  }
  unsigned int v22 = v21 & 0xFFFFFFBF;
  unsigned int v23 = *(_DWORD *)(a2 + 24);
  if (!v23)
  {
    unsigned int v27 = v21 & 0xFFFFFFB7 | 8;
    int v24 = *(_DWORD *)(a2 + 28);
    unsigned int v26 = *(_DWORD *)(a2 + 32);
LABEL_46:
    BOOL v28 = v26 == 0;
    goto LABEL_47;
  }

  int v24 = *(_DWORD *)(a2 + 28);
  if ((BYTE4(v3) & 0x20) != 0) {
    unsigned int v25 = 1;
  }
  else {
    unsigned int v25 = *(_DWORD *)(a2 + 28);
  }
  if (!v25)
  {
    unsigned int v23 = 0;
    unsigned int v26 = *(_DWORD *)(a2 + 32);
    unsigned int v27 = v22 | 8;
    goto LABEL_46;
  }

  unsigned int v23 = 8 * (v23 / v25);
  unsigned int v26 = *(_DWORD *)(a2 + 32);
  unsigned int v27 = v22 | 8;
  BOOL v28 = v23 == v26;
LABEL_47:
  if (v28) {
    unsigned int v22 = v27;
  }
  BOOL v29 = (v26 & 7) == 0 && v23 == v26;
  unsigned int v30 = v22 & 0xFFFFFFEF;
  if (!v29) {
    unsigned int v30 = v22;
  }
  if ((v30 & 1) != 0) {
    v30 &= ~4u;
  }
  BOOL v31 = (v30 & 8) == 0 || v26 > 8;
  unsigned int v6 = v30 & 2;
  if (v31) {
    unsigned int v6 = v30;
  }
  if (v24 == 1) {
    v6 &= ~0x20u;
  }
  if (!v6) {
    unsigned int v6 = 0x80000000;
  }
  return v20 == v6;
}

void sub_286F4(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(a1) & 1) == 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    if (v4 > 1836343850)
    {
      BOOL v5 = v4 == 1836343851;
      int v6 = 1836344107;
    }

    else
    {
      BOOL v5 = v4 == 1667443507;
      int v6 = 1667509043;
    }

    if (!v5 && v4 != v6)
    {
      double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
      if (v8 != *(double *)a2)
      {
        uint64_t v9 = sub_138E8(22);
        uint64_t v10 = sub_138E8(36);
        char v11 = 0;
        uint64_t v12 = 0LL;
        *(void *)BOOL v18 = 0x100000002LL;
        uint64_t v13 = *(void *)(v9 + 8);
        while (1)
        {
          uint64_t v14 = *(int *)&v18[4 * v12];
          char v15 = v11;
          if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
            break;
          }
          char v11 = 1;
          uint64_t v12 = 1LL;
          if ((v15 & 1) != 0) {
            goto LABEL_18;
          }
        }

        if ((v13 & v14) == 0) {
          uint64_t v9 = v10;
        }
LABEL_18:
        BOOL v16 = *(os_log_s **)v9;
        if (v16)
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            double v17 = *(double *)a2;
            *(_DWORD *)BOOL v18 = 136315906;
            *(void *)&v18[4] = "VirtualStream.cpp";
            __int16 v19 = 1024;
            int v20 = 80;
            __int16 v21 = 2048;
            double v22 = v8;
            __int16 v23 = 2048;
            double v24 = v17;
            _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Reporting virtual format sample rate as %f (rate from physical device is %f)",  v18,  0x26u);
          }
        }
      }

      *(double *)a2 = v8;
    }
  }

uint64_t sub_288B8()
{
  return 0LL;
}

double sub_288C0(uint64_t a1)
{
  uint64_t v3 = v11;
  if (v11 && sub_9D704((unsigned __int8 *)v11))
  {
    double v1 = (*(double (**)(uint64_t))(*(void *)v3 + 104LL))(v3);
    int v4 = 0;
  }

  else
  {
    int v4 = 1;
  }

  BOOL v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v4)
  {
LABEL_12:
    double v10 = 0.0;
    int v9 = 8;
    uint64_t v11 = 0x676C6F626E737274LL;
    LODWORD(v12) = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a1 + 40LL))( a1,  &v11,  0LL,  0LL,  &v9,  &v10);
    return v10;
  }

  return v1;
}

void sub_289D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_289E4( AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, void *a6)
{
  uint64_t result = AudioObjectGetPropertyData(a1, a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    double v8 = a2;
    unsigned int v18 = result;
    int v9 = (os_log_t *)sub_138E8(16);
    double v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v21, v8->mSelector);
      int v11 = v22;
      uint64_t v12 = (void **)v21[0];
      sub_2CA1C(__p, v18);
      uint64_t v13 = v21;
      if (v11 < 0) {
        uint64_t v13 = v12;
      }
      if (v20 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      double v24 = "AggregateDevice_CommonBase.cpp";
      __int16 v25 = 1024;
      int v26 = 3408;
      __int16 v27 = 2080;
      BOOL v28 = v13;
      __int16 v29 = 2080;
      unsigned int v30 = v14;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectGetPropertyData() for selector '%s' returned status '%s'.",  buf,  0x26u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }

    char v15 = (os_log_t *)sub_138E8(13);
    BOOL v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        double v24 = "AggregateDevice_CommonBase.cpp";
        __int16 v25 = 1024;
        int v26 = 3409;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to obtain property data.",  buf,  0x12u);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v18;
  }

  return result;
}

void sub_28BCC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_28BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 120LL))(v9, a2, 1936092532LL);
  BOOL v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  sub_286F4(*(void *)(a1 + 96), a2);
  return v4;
}

void sub_28C9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_28CB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(*(_DWORD *)(a1 + 768))
  {
    case 0:
      goto LABEL_10;
    case 1:
      if (a2) {
        goto LABEL_12;
      }
      a2 = 0;
      goto LABEL_10;
    case 2:
      if ((a2 & 1) == 0) {
        goto LABEL_13;
      }
      a2 = 1;
LABEL_10:
      uint64_t result = sub_28E6C(a1, a2, a3, a4, a5);
      break;
    case 3:
      if ((a2 & 1) != 0) {
LABEL_12:
      }
        uint64_t result = sub_21A548(a1, a3, a4, a5);
      else {
LABEL_13:
      }
        uint64_t result = sub_21A840(a1, a3, a4, a5);
      break;
    default:
      BOOL v5 = (os_log_t *)sub_138E8(13);
      int v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315394;
          uint64_t v9 = "AggregateDevice_Simple.cpp";
          __int16 v10 = 1024;
          int v11 = 758;
          _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unsupported speaker input",  (uint8_t *)&v8,  0x12u);
        }
      }

      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t sub_28E6C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8 = a2;
  double v9 = sub_28F84(a1, a2);
  __int16 v10 = operator new(0x28uLL);
  BOOL v16 = (char *)v10 + 40;
  double v17 = (char *)v10 + 40;
  __int128 v11 = *(_OWORD *)(a5 + 16);
  *__int16 v10 = *(_OWORD *)a5;
  v10[1] = v11;
  *((void *)v10 + 4) = *(void *)(a5 + 32);
  __int128 __p = v10;
  if ((v8 & 1) != 0) {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a3 + 136LL))( a3,  a5,  &__p,  a4,  v9);
  }
  else {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a3 + 136LL))( a3,  a4,  &__p,  a5,  v9);
  }
  uint64_t v13 = v12;
  if (__p)
  {
    BOOL v16 = __p;
    operator delete(__p);
  }

  return v13;
}

void sub_28F5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_28F84(uint64_t a1, int a2)
{
  int v7 = 4;
  unsigned __int32 v8 = 0;
  if (a2) {
    int v3 = 1869968496;
  }
  else {
    int v3 = 1768845428;
  }
  v6[0] = 1752657012;
  v6[1] = v3;
  v6[2] = 0;
  __n128 v4 = ((__n128 (*)(uint64_t, _DWORD *, void, void, int *, unsigned __int32 *))*(void *)(*(void *)a1 + 40LL))( a1,  v6,  0LL,  0LL,  &v7,  &v8);
  v4.n128_u32[0] = v8;
  return (double)v4.n128_u64[0] / (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
}

unint64_t sub_2901C(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, double a5)
{
  uint64_t v8 = a1;
  *(void *)&__int128 v269 = a1 + 48;
  BYTE8(v269) = 1;
  uint64_t v250 = a1 + 48;
  sub_190270(a1 + 48);
  uint64_t v9 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
  uint64_t v258 = v8;
  if (v9)
  {
    uint64_t v252 = a2;
    uint64_t v10 = 0LL;
    unint64_t v253 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    LOBYTE(v11) = 1;
    while (1)
    {
      char v12 = 0;
      uint64_t v13 = 0LL;
      uint64_t v254 = v10;
      uint64_t v14 = (void *)(*(void *)(v8 + 24) + 24 * v10 + 8);
      *(void *)&__int128 v273 = 0x200000001LL;
      while (1)
      {
        char v15 = v12;
        uint64_t v16 = *((unsigned int *)&v273 + v13);
        LODWORD(v267.__r_.__value_.__l.__data_) = 0;
        (*(void (**)(void, uint64_t, std::string *))(*(void *)*v14 + 224LL))(*v14, v16, &v267);
        unsigned int data = v267.__r_.__value_.__l.__data_;
        if (!LODWORD(v267.__r_.__value_.__l.__data_))
        {
          int v11 = v11 != 0;
          goto LABEL_118;
        }

        unsigned int v18 = *a3;
        uint64_t v19 = (char *)a3[1] - (char *)*a3;
        if (!v19)
        {
          unint64_t v21 = 0LL;
          int v63 = 1;
          goto LABEL_108;
        }

        char v255 = v11;
        uint64_t v20 = 0LL;
        unint64_t v21 = 0LL;
        unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v19 >> 3);
        do
        {
          unint64_t v23 = v21;
          if ((_DWORD)v16 != 2) {
            goto LABEL_54;
          }
          BOOL v24 = sub_2AB20(v8);
          unsigned int v18 = *a3;
          uint64_t v25 = ((char *)a3[1] - (char *)*a3) >> 3;
          if (!v24)
          {
            unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * v25;
LABEL_54:
            if (v22 <= v21) {
              sub_120BD0();
            }
            uint64_t v28 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128LL))( *v14,  v16,  v21);
            uint64_t v42 = (char *)v18 + v20;
            double v43 = *(double *)((char *)v18 + v20);
            if (v43 == 0.0 || (*(double *)v28 != 0.0 ? (BOOL v44 = v43 == *(double *)v28) : (BOOL v44 = 1), v44))
            {
              int v45 = *(_DWORD *)((char *)v18 + v20 + 8);
              if (!v45 || ((int v46 = *(_DWORD *)(v28 + 8)) != 0 ? (v47 = v45 == v46) : (v47 = 1), v47))
              {
                int v48 = *(_DWORD *)((char *)v18 + v20 + 16);
                if (!v48 || ((int v49 = *(_DWORD *)(v28 + 16)) != 0 ? (v50 = v48 == v49) : (v50 = 1), v50))
                {
                  int v51 = *(_DWORD *)((char *)v18 + v20 + 20);
                  if (!v51 || ((int v52 = *(_DWORD *)(v28 + 20)) != 0 ? (v53 = v51 == v52) : (v53 = 1), v53))
                  {
                    int v54 = *(_DWORD *)((char *)v18 + v20 + 24);
                    if (!v54 || ((int v55 = *(_DWORD *)(v28 + 24)) != 0 ? (v56 = v54 == v55) : (v56 = 1), v56))
                    {
                      int v57 = *(_DWORD *)((char *)v18 + v20 + 28);
                      if (!v57 || ((int v58 = *(_DWORD *)(v28 + 28)) != 0 ? (v59 = v57 == v58) : (v59 = 1), v59))
                      {
                        int v60 = *(_DWORD *)((char *)v18 + v20 + 32);
                        if (!v60) {
                          goto LABEL_97;
                        }
                        int v61 = *(_DWORD *)(v28 + 32);
                        if (!v61 || v60 == v61) {
                          goto LABEL_97;
                        }
                      }
                    }
                  }
                }
              }
            }

            goto LABEL_98;
          }

          if (0xCCCCCCCCCCCCCCCDLL * v25 <= v21) {
            sub_120BD0();
          }
          *(_OWORD *)buf = *(__int128 *)((char *)v18 + v20);
          *(_OWORD *)&buf[16] = *(__int128 *)((char *)v18 + v20 + 16);
          *(void *)&_BYTE buf[32] = *(void *)((char *)v18 + v20 + 32);
          int v26 = sub_2B09C(v8);
          sub_2B77C((uint64_t)buf, v26, (buf[12] & 0x20) == 0);
          uint64_t v27 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128LL))(*v14, 2LL, v21);
          uint64_t v28 = v27;
          if (*(double *)buf == 0.0
            || (*(double *)v27 != 0.0 ? (BOOL v29 = *(double *)buf == *(double *)v27) : (BOOL v29 = 1), v29))
          {
            if (!*(_DWORD *)&buf[8]
              || ((int v30 = *(_DWORD *)(v27 + 8)) != 0 ? (v31 = *(_DWORD *)&buf[8] == v30) : (v31 = 1), v31))
            {
              if (!*(_DWORD *)&buf[16]
                || ((v32 = *(_DWORD *)(v27 + 16)) != 0 ? (BOOL v33 = *(_DWORD *)&buf[16] == v32) : (BOOL v33 = 1), v33))
              {
                if (!*(_DWORD *)&buf[20]
                  || ((v34 = *(_DWORD *)(v27 + 20)) != 0 ? (BOOL v35 = *(_DWORD *)&buf[20] == v34) : (BOOL v35 = 1), v35))
                {
                  if (!*(_DWORD *)&buf[24]
                    || ((int v36 = *(_DWORD *)(v27 + 24)) != 0 ? (v37 = *(_DWORD *)&buf[24] == v36) : (v37 = 1), v37))
                  {
                    if (!*(_DWORD *)&buf[28]
                      || ((int v38 = *(_DWORD *)(v27 + 28)) != 0 ? (v39 = *(_DWORD *)&buf[28] == v38) : (v39 = 1), v39))
                    {
                      if (!*(_DWORD *)&buf[32]
                        || ((int v40 = *(_DWORD *)(v27 + 32)) != 0 ? (v41 = *(_DWORD *)&buf[32] == v40) : (v41 = 1), v41))
                      {
                        uint64_t v42 = buf;
LABEL_97:
                        int v63 = sub_2854C((uint64_t)v42, v28);
                        goto LABEL_99;
                      }
                    }
                  }
                }
              }
            }
          }

LABEL_98:
          int v63 = 0;
LABEL_99:
          ++v21;
          unsigned int data = v267.__r_.__value_.__l.__data_;
          if (v23 + 1 >= LODWORD(v267.__r_.__value_.__l.__data_)) {
            goto LABEL_105;
          }
          unsigned int v18 = *a3;
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 3);
          if (v22 > v21) {
            int v64 = v63;
          }
          else {
            int v64 = 0;
          }
          v20 += 40LL;
        }

        while (v64 == 1);
        unint64_t v21 = v23 + 1;
LABEL_105:
        LOBYTE(v11) = v255;
LABEL_108:
        if (v21 < data && v63 != 0)
        {
          do
          {
            double v66 = *((double *)a3[1] - 5);
            double v67 = *(double *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128LL))( *v14,  v16,  v21);
            int v63 = v66 == v67;
            unint64_t v21 = (v21 + 1);
          }

          while (v21 < LODWORD(v267.__r_.__value_.__l.__data_) && v66 == v67);
        }

        int v11 = (_BYTE)v11 ? v63 : 0;
        if ((v63 & 1) == 0) {
          break;
        }
LABEL_118:
        char v12 = 1;
        uint64_t v13 = 1LL;
        if ((v15 & 1) != 0)
        {
          unsigned int v68 = 0;
          goto LABEL_171;
        }
      }

      (*(void (**)(void))(*(void *)*v14 + 24LL))(*v14);
      int v256 = v11;
      char v69 = 0;
      uint64_t v70 = 0LL;
      do
      {
        while (1)
        {
          char v71 = v69;
          uint64_t v72 = *((unsigned int *)&v273 + v70);
          LODWORD(v265) = 0;
          (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*v14 + 224LL))(*v14, v72, &v265);
          unint64_t v73 = v265;
          if (!(_DWORD)v265)
          {
            unsigned int v68 = 0;
            goto LABEL_166;
          }

          int v74 = a3[1];
          if (v74 == *a3)
          {
            unsigned int v68 = 0;
            unint64_t v76 = 0LL;
            uint64_t v85 = a3[1];
          }

          else
          {
            uint64_t v75 = 0LL;
            unint64_t v76 = 0LL;
            while (1)
            {
              unint64_t v77 = v76;
              id v78 = *(id *)sub_138E8(24);
              uint64_t v79 = v78;
              if (v78)
              {
                __int16 v80 = (os_log_s *)v78;
                if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
                {
                  sub_2CC00(&v267, (uint64_t)*a3 + v75);
                  if ((v267.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    char v81 = &v267;
                  }
                  else {
                    char v81 = (std::string *)v267.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v82 = (*(uint64_t (**)(void))(*(void *)*v14 + 152LL))(*v14);
                  sub_2CA1C(&__p, v82);
                  p_p = &__p;
                  if (SHIBYTE(v261) < 0) {
                    p_p = __p;
                  }
                  *(_DWORD *)buf = 136316418;
                  *(void *)&uint8_t buf[4] = "DSPChain.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1369;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v81;
                  *(_WORD *)&_BYTE buf[28] = 1024;
                  *(_DWORD *)&_BYTE buf[30] = v77;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v72;
                  __int16 v271 = 2080;
                  int v272 = p_p;
                  _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting instance format to %s for bus %d scope %d on processor type %s",  buf,  0x32u);
                  if (SHIBYTE(v261) < 0) {
                    operator delete(__p);
                  }
                  uint64_t v8 = v258;
                }
              }

              unsigned int v84 = (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(*(void *)*v14 + 120LL))( *v14,  v72,  v77,  (uint64_t)*a3 + v75);
              unsigned int v68 = v84;
              unint64_t v76 = v77 + 1;
              unint64_t v73 = v265;
              int v74 = *a3;
              uint64_t v85 = a3[1];
              v75 += 40LL;
              if (0xCCCCCCCCCCCCCCCDLL * (((char *)v85 - (char *)v74) >> 3) <= v76 || v84 != 0)
              {
                unint64_t v76 = v77 + 1;
                break;
              }
            }
          }

    sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 1006);
    uint64_t v10 = *(void *)&v37[4];
    if (*(uint8_t **)&v37[4] == buf)
    {
      __n128 v4 = 0LL;
    }

    else
    {
      do
      {
        __n128 v4 = (*(uint64_t (**)(void, AudioObjectPropertyAddress *))(**(void **)(v10 + 16) + 24LL))( *(void *)(v10 + 16),  a2);
        if ((v4 & 1) != 0) {
          break;
        }
        uint64_t v10 = *(void *)(v10 + 8);
      }

      while ((uint8_t *)v10 != buf);
    }

            double v67 = 1000 * v66.__d_.__rep_;
LABEL_99:
            if (v67 > (v65.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
            {
              v68.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_102:
              std::condition_variable::__do_timed_wait(&v120, &__lk, v68);
              std::chrono::steady_clock::now();
              goto LABEL_103;
            }
          }

          v68.__d_.__rep_ = v67 + v65.__d_.__rep_;
          goto LABEL_102;
        }

  sub_85B80(v91);
  sub_FF3B8(v94);
  sub_85B80((uint64_t *)&__p);
  sub_FF3B8(v102);
  if (!(_DWORD)v28) {
    goto LABEL_180;
  }
  int v45 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v45 + 8) == 1668703084)
  {
    if (!*(_BYTE *)(v45 + 164))
    {
      int v46 = 1919115628LL;
      strcpy((char *)buf, "pshsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_5C2F8(v2);
      goto LABEL_122;
    }

    goto LABEL_103;
  }

  BOOL v47 = sub_1BAB2C(*(_DWORD *)(v45 + 12));
  if (*(_BYTE *)(v45 + 164))
  {
LABEL_103:
    int v46 = *(unsigned int *)(v45 + 160);
    goto LABEL_105;
  }

  int v46 = v47;
LABEL_105:
  strcpy((char *)buf, "pshsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v48 = sub_5C2F8(v2);
  if ((int)v46 <= 1919708274)
  {
    if ((_DWORD)v46 != 1919115628 && (_DWORD)v46 != 1919183219) {
      goto LABEL_121;
    }
  }

  else if ((_DWORD)v46 != 1919708275 && (_DWORD)v46 != 1920364387)
  {
    if ((_DWORD)v46 == 1936090482)
    {
      *((void *)&v52 + 1) = v49;
      *(void *)&int v52 = v48;
      int v51 = v52 >> 32;
      if (HIDWORD(v48) != 1 || (v51 & 0xFF00000000LL) == 0) {
        int v46 = 1919115628LL;
      }
      else {
        int v46 = 1936090482LL;
      }
      goto LABEL_122;
    }

        int v52 = "Unknown";
        goto LABEL_99;
      }

      if ((_DWORD)a5 == 1214539380)
      {
        int v52 = "Wired";
        goto LABEL_99;
      }

      if ((_DWORD)a5 != 1633759844) {
        goto LABEL_98;
      }
    }

    unint64_t v73 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v73 = &off_4865A0;
    void v73[2] = PropertyData;
  }

  if (ioDataSize != 4)
  {
    BOOL v56 = sub_138E8(13);
    int v57 = sub_8C7D4(1, *(void **)v56, *(void *)(v56 + 8));
    int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    BOOL v59 = v58;
    if (v58 && os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v84 = "Device_HAL_Common.mm";
      uint64_t v85 = 1024;
      *(_DWORD *)uint64_t v86 = 127;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned an oddly sized value",  buf,  0x12u);
    }

    int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "The HAL returned an oddly sized value");
    int v61 = (void (*)(void *))&std::runtime_error::~runtime_error;
    goto LABEL_93;
  }

  if (outData != -1)
  {
    if (getpid() != outData)
    {
      uint64_t v14 = *(id *)sub_138E8(17);
      char v15 = v14;
      if (v14)
      {
        uint64_t v16 = (os_log_s *)v14;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          double v17 = outData;
          unsigned int v18 = *(_DWORD *)(a1 + 268);
          sub_48E98(&__p, a3);
          uint64_t v19 = v82 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136316162;
          unsigned int v84 = "Device_HAL_Common.mm";
          uint64_t v85 = 1024;
          *(_DWORD *)uint64_t v86 = 140;
          *(_WORD *)&v86[4] = 1024;
          *(_DWORD *)&v86[6] = v17;
          *(_WORD *)&v86[10] = 1024;
          *(_DWORD *)&v86[12] = v18;
          *(_WORD *)&v86[16] = 2080;
          *(void *)&v86[18] = v19;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d process %u has hog mode on device %u with UID %s",  buf,  0x28u);
          if (v82 < 0) {
            operator delete(__p);
          }
        }
      }

      uint64_t v20 = (os_log_s *)*(id *)sub_138E8(13);
      unint64_t v21 = v20;
      if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unsigned int v84 = "Device_HAL_Common.mm";
        uint64_t v85 = 1024;
        *(_DWORD *)uint64_t v86 = 141;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Another process has hog mode on a HAL device",  buf,  0x12u);
      }

      goto LABEL_37;
    }

    int v63 = sub_138E8(13);
    int v64 = sub_8C7D4(1, *(void **)v63, *(void *)(v63 + 8));
    UInt32 v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
    double v66 = v65;
    if (v65)
    {
      double v67 = v65;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        unsigned int v68 = *(_DWORD *)(a1 + 268);
        sub_48E98(&__p, a3);
        char v69 = v82 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315906;
        unsigned int v84 = "Device_HAL_Common.mm";
        uint64_t v85 = 1024;
        *(_DWORD *)uint64_t v86 = 146;
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)&v86[6] = v68;
        *(_WORD *)&v86[10] = 2080;
        *(void *)&v86[12] = v69;
        _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Mediaserverd already has hog mode on AudioObjectID %u with UID \\%s\\",  buf,  0x22u);
        if (v82 < 0) {
          operator delete(__p);
        }
      }
    }

    int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( (std::logic_error *)v60,  "Mediaserverd already has hog mode on AudioObjectID %u with UID %s");
    int v61 = (void (*)(void *))&std::logic_error::~logic_error;
LABEL_93:
    __cxa_throw(v60, v62, v61);
  }

  LODWORD(PropertyData) = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 268), &inAddress, 0, 0LL, 4u, &outData);
  if ((_DWORD)PropertyData)
  {
    uint64_t v70 = sub_138E8(13);
    char v71 = sub_8C7D4(1, *(void **)v70, *(void *)(v70 + 8));
    uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
    int v54 = v72;
    if (v72 && os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v84 = "Device_HAL_Common.mm";
      uint64_t v85 = 1024;
      *(_DWORD *)uint64_t v86 = 133;
      int v55 = "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to take hog mode.";
      goto LABEL_97;
    }

    goto LABEL_98;
  }

  unint64_t v22 = *(id *)sub_138E8(17);
  if (v22)
  {
    unint64_t v21 = (os_log_s *)v22;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v23 = *(_DWORD *)(a1 + 268);
      sub_48E98(&__p, a3);
      BOOL v24 = v82 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136316162;
      unsigned int v84 = "Device_HAL_Common.mm";
      uint64_t v85 = 1024;
      *(_DWORD *)uint64_t v86 = 135;
      *(_WORD *)&v86[4] = 1024;
      *(_DWORD *)&v86[6] = v23;
      *(_WORD *)&v86[10] = 2080;
      *(void *)&v86[12] = v24;
      *(_WORD *)&v86[20] = 1024;
      *(_DWORD *)&v86[22] = outData;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d took hog mode on device %u with UID %s (our pid = %u)",  buf,  0x28u);
      if (v82 < 0) {
        operator delete(__p);
      }
    }
  }

  else
  {
    unint64_t v21 = 0LL;
  }

  id v78 = *(_DWORD *)v72;
  *(_DWORD *)(a1 + 120) = v78;
  *(_BYTE *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 552) = v78;
  uint64_t v79 = *(void *)(a6 + 56);
  __int16 v80 = *(char **)(v79 + 32);
  char v81 = *(char **)(v79 + 40);
  if ((unint64_t)(v81 - v80) >= 0x41 && v80 != v81)
  {
    AudioObjectPropertyScope v83 = v80;
    while (*((_DWORD *)v83 + 8) != 1869442665)
    {
      v83 += 64;
      if (v83 == v81) {
        goto LABEL_107;
      }
    }

    __int16 v80 = v83;
  }

LABEL_301:
  return v104;
}

    uint64_t v135 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v135, "Precondition failure.");
  }

  if (*(void *)(a3 + 32))
  {
    int v131 = (os_log_t *)sub_138E8(13);
    int v132 = *v131;
    if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v156 = 136315394;
      *(void *)&v156[4] = "RoutingManager.cpp";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 4553;
      _os_log_impl(&dword_0, v132, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v156, 0x12u);
    }

    goto LABEL_301;
  }

  if (*(_DWORD *)(a3 + 152) != 1852796517)
  {
    int v133 = (os_log_t *)sub_138E8(13);
    int v134 = *v133;
    if (*v133 && os_log_type_enabled(*v133, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v156 = 136315394;
      *(void *)&v156[4] = "RoutingManager.cpp";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 4554;
      _os_log_impl(&dword_0, v134, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v156, 0x12u);
    }

    goto LABEL_301;
  }

  sub_53118((uint64_t)v156, a2, a3);
  uint64_t v9 = sub_138E8(8);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0) {
    goto LABEL_214;
  }
  uint64_t v10 = *(os_log_s **)v9;
  if (!*(void *)v9 || !os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_214;
  }
  sub_2DBA00(&v147, (uint64_t)v156);
  int size = (char)v147.__r_.__value_.__s.__size_;
  int v11 = v147.__r_.__value_.__r.__words[0];
  memset(&v146, 0, sizeof(v146));
  std::string::append(&v146, "[ ", 2uLL);
  char v12 = *(unsigned int **)(a4 + 8);
  if (*(unsigned int **)a4 == v12)
  {
    double v17 = *(unsigned int *)(a4 + 24);
    if ((_DWORD)v17 == 1986295651)
    {
      if (!*(_BYTE *)(a4 + 32))
      {
        if (!*(void *)(a4 + 64))
        {
          unsigned int v18 = *(const __CFString **)(a4 + 80);
          if (!v18)
          {
            uint64_t v20 = (int *)(a4 + 72);
            uint64_t v19 = *(_DWORD *)(a4 + 72);
            unint64_t v21 = v19 & 3;
            if (v21 == 2)
            {
              unint64_t v22 = v19 & 0xC;
              if (v22 == 8)
              {
                unint64_t v23 = v19 & 0x30;
                if (v23 == 32)
                {
                  BOOL v24 = v19 & 0xC0;
                  if (v24 == 128)
                  {
                    uint64_t v25 = v19 & 0x300;
                    if (v25 == 512)
                    {
                      int v26 = v19 & 0xC00;
                      if (v26 == 2048)
                      {
                        uint64_t v27 = v19 & 0x3000;
                        if (v27 == 0x2000)
                        {
                          uint64_t v28 = v19 & 0xC000;
                          if (v28 == 0x8000)
                          {
                            BOOL v29 = v19 & 0x30000;
                            if ((v19 & 0x30000) == 0x20000)
                            {
                              int v30 = v19 & 0xC0000;
                              if ((v19 & 0xC0000) == 0x80000)
                              {
                                BOOL v31 = v19 & 0x300000;
                                if ((v19 & 0x300000) == 0x200000)
                                {
                                  int v32 = v19 & 0xC00000;
                                  if (v32 == 0x800000)
                                  {
                                    BOOL v33 = "empty";
                                    int v34 = 5LL;
LABEL_204:
                                    std::string::append(&v146, v33, v34);
                                    goto LABEL_205;
                                  }

void sub_2A5A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, char a31, uint64_t a32, char a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, char a42)
{
}

uint64_t sub_2A714(uint64_t a1, AudioUnitScope inScope, void *outData)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      UInt32 v12 = 136315394;
      uint64_t v13 = "DSPProcessorManager.cpp";
      __int16 v14 = 1024;
      int v15 = 769;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input",  (uint8_t *)&v12,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }

  UInt32 v12 = 4;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    __n128 v4 = *(OpaqueAudioComponentInstance **)(v3 + 16);
  }
  else {
    __n128 v4 = 0LL;
  }
  uint64_t Property = AudioUnitGetProperty(v4, 0xBu, inScope, 0, outData, &v12);
  if ((_DWORD)Property)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        UInt32 v12 = 136315394;
        uint64_t v13 = "DSPProcessorManager.cpp";
        __int16 v14 = 1024;
        int v15 = 771;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&v12, 0x12u);
      }
    }
  }

  return Property;
}

void sub_2A8B8(_Unwind_Exception *a1)
{
}

uint64_t sub_2A8D4(uint64_t a1, int a2, unsigned int a3)
{
  if ((a2 - 3) <= 0xFFFFFFFD)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v19 = "DSPProcessorManager.cpp";
      __int16 v20 = 1024;
      int v21 = 525;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }

  uint64_t v3 = 112LL;
  if (a2 == 1)
  {
    uint64_t v3 = 88LL;
    uint64_t v4 = a1 + 88;
  }

  else
  {
    uint64_t v4 = a1 + 112;
  }

  uint64_t v5 = *(void *)(a1 + v3);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4 + 8) - v5) >> 4) <= a3)
  {
    uint64_t v15 = v3;
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (*(void *)(v4 + 8) - *(void *)(a1 + v15)) >> 4;
      *(_DWORD *)buf = 136316162;
      uint64_t v19 = "DSPProcessorManager.cpp";
      __int16 v20 = 1024;
      int v21 = 529;
      __int16 v22 = 1024;
      unsigned int v23 = a3;
      __int16 v24 = 1024;
      int v25 = -1431655765 * v12;
      __int16 v26 = 1024;
      int v27 = a2;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): inElement (%u) cannot exceed bus count (%u) for scope: %u",  buf,  0x24u);
    }

    uint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(v13, "inElement (%u) cannot exceed bus count (%u) for scope: %u");
  }

  return v5 + 48LL * a3;
}

void sub_2AB00(_Unwind_Exception *a1)
{
}

BOOL sub_2AB20(uint64_t a1)
{
  uint64_t v13 = a1 + 48;
  char v14 = 1;
  sub_92F80(a1 + 48);
  unsigned __int8 v12 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == *(void *)(a1 + 32))
  {
    BOOL v5 = 0LL;
  }

  else
  {
    while (1)
    {
      int v3 = (*(uint64_t (**)(void, uint64_t, void, unsigned __int8 *))(**(void **)(v2 + 8) + 248LL))( *(void *)(v2 + 8),  2LL,  0LL,  &v12);
      if (v3)
      {
        uint64_t v7 = sub_138E8(13);
        id v8 = sub_8C7D4(1, *(void **)v7, *(void *)(v7 + 8));
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        uint64_t v10 = v9;
        if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v16 = "DSPChain.mm";
          __int16 v17 = 1024;
          int v18 = 1499;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stat) [error stat is an error]: Unexpected error from HasStaticChannelCountForBus",  buf,  0x12u);
        }

        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_4865A0;
        exception[2] = v3;
      }

      int v4 = v12;
      if (v12) {
        break;
      }
      v2 += 24LL;
      if (v2 == *(void *)(a1 + 32))
      {
        int v4 = 0;
        break;
      }
    }

    BOOL v5 = v4 != 0;
  }

  sub_93128((uint64_t)&v13);
  return v5;
}

void sub_2ACA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_2ACCC(void *a1, AudioUnitScope inScope, unsigned int a3, _BYTE *a4)
{
  *a4 = 0;
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    __int16 v22 = (os_log_t *)sub_138E8(13);
    unsigned int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      int v34 = "DSPProcessorManager.cpp";
      __int16 v35 = 1024;
      int v36 = 682;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input",  (uint8_t *)&ioDataSize,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }

  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  uint64_t v8 = a1[9];
  if (v8) {
    uint64_t v9 = *(OpaqueAudioComponentInstance **)(v8 + 16);
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t Property = AudioUnitGetProperty(v9, 0xBu, inScope, 0, &outData, &ioDataSize);
  if ((_DWORD)Property)
  {
    int v11 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      int v34 = "DSPProcessorManager.cpp";
      __int16 v35 = 1024;
      int v36 = 685;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FailIf failed, goto Exit",  (uint8_t *)&ioDataSize,  0x12u);
    }

    uint64_t v13 = (os_log_t *)sub_138E8(24);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 152LL))(a1);
      sub_2CA1C(v30, v15);
      int v16 = v31;
      __int16 v17 = (void **)v30[0];
      sub_2CA1C(__p, Property);
      int v18 = v30;
      if (v16 < 0) {
        int v18 = v17;
      }
      if (v29 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      UInt32 ioDataSize = 136316162;
      int v34 = "DSPProcessorManager.cpp";
      __int16 v35 = 1024;
      int v36 = 695;
      __int16 v37 = 2080;
      int v38 = v18;
      __int16 v39 = 1024;
      int v40 = Property;
      __int16 v41 = 2080;
      uint64_t v42 = v19;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP (%s) static channel query failed with error: (%d) %s",  (uint8_t *)&ioDataSize,  0x2Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
  }

  else
  {
    if (outData <= a3)
    {
      int v25 = (os_log_t *)sub_138E8(13);
      __int16 v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        UInt32 ioDataSize = 136315650;
        int v34 = "DSPProcessorManager.cpp";
        __int16 v35 = 1024;
        int v36 = 686;
        __int16 v37 = 1024;
        LODWORD(v38) = inScope;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): inElement cannot exceed bus count for scope: %u",  (uint8_t *)&ioDataSize,  0x18u);
      }

      int v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_8F9F4(v27, "inElement cannot exceed bus count for scope: %u");
    }

    uint64_t v20 = 14LL;
    if (inScope == 1) {
      uint64_t v20 = 11LL;
    }
    *a4 = *(_BYTE *)(a1[v20] + 48LL * a3 + 40);
  }

  return Property;
}

void sub_2B068(_Unwind_Exception *a1)
{
}

uint64_t sub_2B09C(uint64_t a1)
{
  if (!sub_2AB20(a1))
  {
    uint64_t v12 = sub_138E8(13);
    id v13 = sub_8C7D4(1, *(void **)v12, *(void *)(v12 + 8));
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    uint64_t v15 = v14;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v25 = "DSPChain.mm";
      __int16 v26 = 1024;
      int v27 = 1512;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v22 = a1 + 48;
  char v23 = 1;
  sub_92F80(a1 + 48);
  unsigned int v21 = 0;
  for (uint64_t i = *(void *)(a1 + 32); i != *(void *)(a1 + 24); i -= 24LL)
  {
    char v20 = 0;
    int v3 = (*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(i - 16) + 248LL))( *(void *)(i - 16),  2LL,  0LL,  &v20);
    if (v3)
    {
      uint64_t v6 = sub_138E8(13);
      id v7 = sub_8C7D4(1, *(void **)v6, *(void *)(v6 + 8));
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      uint64_t v9 = v8;
      if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v25 = "DSPChain.mm";
        __int16 v26 = 1024;
        int v27 = 1525;
        uint64_t v10 = "%25s:%-5d EXCEPTION (stat) [error stat is an error]: Unexpected error from HasStaticChannelCountForBus";
        goto LABEL_14;
      }

LABEL_15:
      int v11 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v11 = &off_4865A0;
      v11[2] = v3;
    }

    if (v20)
    {
      int v3 = (*(uint64_t (**)(void, uint64_t, void, unsigned int *))(**(void **)(i - 16) + 256LL))( *(void *)(i - 16),  2LL,  0LL,  &v21);
      if (!v3)
      {
        uint64_t v4 = v21;
        goto LABEL_10;
      }

      uint64_t v17 = sub_138E8(13);
      id v18 = sub_8C7D4(1, *(void **)v17, *(void *)(v17 + 8));
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      uint64_t v9 = v19;
      if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v25 = "DSPChain.mm";
        __int16 v26 = 1024;
        int v27 = 1529;
        uint64_t v10 = "%25s:%-5d EXCEPTION (stat) [error stat is an error]: Unexpected error from GetChannelCountForBus";
LABEL_14:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
      }

      goto LABEL_15;
    }
  }

  uint64_t v4 = 0LL;
LABEL_10:
  sub_93128((uint64_t)&v22);
  return v4;
}

  sub_7D084(__p, "measuredWattsParameterID");
  int v60 = __p;
  *((_DWORD *)sub_ACE84((uint64_t **)(v3 + 56), (void **)__p, &v60) + 14) = v10;
  if (v64 < 0) {
    operator delete(*(void **)__p);
  }
  int v11 = *v9;
  sub_7D084(__p, "modelledWattsParameterID");
  int v60 = __p;
  uint64_t v12 = sub_ACE84((uint64_t **)(v3 + 56), (void **)__p, &v60);
  if (v11 == 1685287015) {
    id v13 = 1835298935;
  }
  else {
    id v13 = -1;
  }
  if (v11 == 1936748595) {
    id v13 = 15;
  }
  *((_DWORD *)v12 + 14) = v13;
  if (v64 < 0) {
    operator delete(*(void **)__p);
  }
  char v14 = *(std::__shared_weak_count **)(v3 + 40);
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      int v16 = v15;
      uint64_t v17 = *(void *)(v3 + 32);
      if (v17)
      {
        id v18 = *(void **)(v3 + 56);
        if (v18 != (void *)(v3 + 64))
        {
          do
          {
            uint64_t v19 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v17 + 56LL))( v17,  *(unsigned int *)(v3 + 48),  *((unsigned int *)v18 + 14),  0LL);
            char v20 = *((_DWORD *)v18 + 14);
            *(void *)__int128 __p = v18 + 4;
            unsigned int v21 = sub_AC098((uint64_t **)(v3 + 56), (void **)v18 + 4, (__int128 **)__p);
            if (v19) {
              uint64_t v22 = v20;
            }
            else {
              uint64_t v22 = -1;
            }
            *((_DWORD *)v21 + 14) = v22;
            char v23 = (void *)v18[1];
            if (v23)
            {
              do
              {
                __int16 v24 = v23;
                char v23 = (void *)*v23;
              }

              while (v23);
            }

            else
            {
              do
              {
                __int16 v24 = (void *)v18[2];
                int v25 = *v24 == (void)v18;
                id v18 = v24;
              }

              while (!v25);
            }

            id v18 = v24;
          }

          while (v24 != (void *)(v3 + 64));
        }
      }

      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        int v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  uint64_t v28 = v59;
  if (v59)
  {
    char v29 = (unint64_t *)&v59->__shared_owners_;
    do
      int v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  char v31 = *(unsigned __int8 **)(v1 + 360);
  int v32 = atomic_load(v31 + 16);
  BOOL v33 = (v32 & 1) == 0;
  int v34 = sub_138E8(13);
  if (!v33)
  {
    BOOL v56 = *(os_log_s **)v34;
    if (*(void *)v34 && os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 __p = 136315394;
      *(void *)&__p[4] = "PowerLogManager.cpp";
      __int16 v62 = 1024;
      int v63 = 253;
      _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): BeginPowerLogTracking()/EndPowerLogTracking() mismatch.",  __p,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BeginPowerLogTracking()/EndPowerLogTracking() mismatch.");
  }

  if ((*(_BYTE *)(v34 + 8) & 1) != 0)
  {
    __int16 v35 = *(os_log_s **)v34;
    if (*(void *)v34)
    {
      if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 __p = 136315394;
        *(void *)&__p[4] = "PowerLogManager.cpp";
        __int16 v62 = 1024;
        int v63 = 255;
        _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d BeginPowerLogTracking()", __p, 0x12u);
      }
    }
  }

  int v36 = (uint64_t *)*((void *)v31 + 7);
  if (v36 == (uint64_t *)(v31 + 64))
  {
LABEL_59:
    __int16 v39 = sub_138E8(13);
    if ((*(_BYTE *)(v39 + 8) & 1) != 0)
    {
      int v40 = *(os_log_s **)v39;
      if (*(void *)v39)
      {
        if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 __p = 136315394;
          *(void *)&__p[4] = "PowerLogManager.cpp";
          __int16 v62 = 1024;
          int v63 = 262;
          _os_log_impl(&dword_0, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d No power parameters to measure.", __p, 0x12u);
        }
      }
    }
  }

  else
  {
    while (*((_DWORD *)v36 + 14) == -1)
    {
      __int16 v37 = (uint64_t *)v36[1];
      if (v37)
      {
        do
        {
          int v38 = v37;
          __int16 v37 = (uint64_t *)*v37;
        }

        while (v37);
      }

      else
      {
        do
        {
          int v38 = (uint64_t *)v36[2];
          int v25 = *v38 == (void)v36;
          int v36 = v38;
        }

        while (!v25);
      }

      int v36 = v38;
    }

    __int16 v41 = (std::__shared_weak_count *)*((void *)v31 + 1);
    if (!v41 || (uint64_t v42 = *(void *)v31, (v43 = std::__shared_weak_count::lock(v41)) == 0LL)) {
      sub_9D954();
    }
    BOOL v44 = v43;
    int v45 = operator new(0x28uLL);
    v45[4] = 0;
    *(void *)int v45 = off_46E048;
    *((void *)v45 + 1) = 0LL;
    *((void *)v45 + 3) = v42;
    *((void *)v45 + 4) = v44;
    int v46 = (unint64_t *)&v44->__shared_owners_;
    do
      BOOL v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    do
      int v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }

    int v49 = *((void *)v31 + 3);
    *((void *)v31 + 3) = v45;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
    }
    int v51 = *(void *)v31;
    BOOL v50 = *((void *)v31 + 1);
    atomic_store(1u, v31 + 16);
    if (v50)
    {
      int v52 = (unint64_t *)(v50 + 16);
      do
        BOOL v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }

    int v54 = (dispatch_queue_s *)sub_869B4();
    int v55 = operator new(0x10uLL);
    *int v55 = v51;
    v55[1] = v50;
    *(void *)__int128 __p = 0LL;
    dispatch_async_f(v54, v55, (dispatch_function_t)sub_AD924);
    sub_ADC0C((void **)__p);
  }

  if (v6 == buf)
  {
    id v7 = 4LL;
    uint64_t v6 = buf;
    goto LABEL_19;
  }

  if (v6)
  {
    id v7 = 5LL;
    goto LABEL_19;
  }

    *(void *)(a1 + 8) = v12;
    return;
  }

  uint64_t v17 = sub_8D2B8(a2, a3, v8);
  for (uint64_t i = *(const void ***)(a1 + 8); i != v17; --i)
  {
    uint64_t v19 = *(i - 1);
    sub_8D328(v19);
  }

  *(void *)(a1 + 8) = v17;
}

  sub_92104();
  char v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16LL))( caulk::alloc::realtime_safe_resource,  40LL,  8LL);
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = a4;
  *(void *)char v14 = &off_46DCE8;
  *(void *)(v14 + 8) = 0LL;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_4A9D88, (caulk::concurrent::message *)v14);
  return 0LL;
}

  *(void *)buf = &v76;
  sub_14A284((void ***)buf);
  if ((v84 & 0x80000000) == 0)
  {
    if (!v3) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  operator delete(__p);
  if (v3) {
LABEL_19:
  }
    CFRelease(v3);
LABEL_20:
  unint64_t v73 = (CFTypeRef *)*((void *)&v79 + 1);
  int v16 = (CFTypeRef *)v79;
  if ((void)v79 == *((void *)&v79 + 1))
  {
    __int16 v35 = 2003329396LL;
    goto LABEL_47;
  }

  *(void *)&unint64_t v76 = &v76;
  *((void *)&v76 + 1) = &v76;
  unint64_t v77 = 0LL;
  do
  {
    uint64_t v17 = (const __CFArray *)*v16;
    if (!*v16)
    {
      char v81 = 0LL;
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      double v66 = (void (*)(void *))&std::runtime_error::~runtime_error;
      goto LABEL_96;
    }

    CFRetain(*v16);
    char v81 = v17;
    if (CFArrayGetCount(v17) != 2)
    {
      uint64_t v70 = (os_log_t *)sub_138E8(13);
      char v71 = *v70;
      if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 226;
        _os_log_impl(&dword_0, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
      double v66 = (void (*)(void *))&std::logic_error::~logic_error;
LABEL_96:
      __cxa_throw(exception, v67, v66);
    }

    sub_36030(&cf, v17, 0LL);
    sub_158474((uint64_t)&v88, &cf);
    id v18 = v88;
    uint64_t v19 = (int *)v88.i64[0];
    if (v88.i64[0] == v88.i64[1])
    {
      unsigned int v68 = (os_log_t *)sub_138E8(13);
      char v69 = *v68;
      if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 229;
        _os_log_impl(&dword_0, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

  uint64_t v8 = 1;
LABEL_16:
  if (v6) {
    int v11 = 1222;
  }
  else {
    int v11 = 1238;
  }
  *(_WORD *)(a1 + 40) = v11 | v8 | *(_WORD *)(a1 + 40) & 0xF800;
  return result;
}

  std::string::basic_string(&v59, __str, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v60);
  uint64_t v12 = v59.__r_.__value_.__s.__size_;
  id v13 = v59.__r_.__value_.__s.__size_;
  if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v12 = v59.__r_.__value_.__l.__size_;
  }
  if (v12)
  {
    std::string::basic_string(&v58, __str, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v60);
    char v14 = a1[2];
    uint64_t v15 = a1[1];
    if (v15 >= v14)
    {
      int v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *a1) >> 3);
      BOOL v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      int v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a1) >> 3);
      if (2 * v51 > v50) {
        BOOL v50 = 2 * v51;
      }
      if (v51 >= 0x555555555555555LL) {
        int v52 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        int v52 = v50;
      }
      int v64 = a1 + 2;
      if (v52) {
        int v52 = (unint64_t)sub_8D44C(v52);
      }
      else {
        BOOL v53 = 0LL;
      }
      int v54 = v52 + 24 * v49;
      int v60 = v52;
      int v61 = v54;
      int v63 = v52 + 24 * v53;
      int v55 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(void *)(v54 + 16) = v58.__r_.__value_.__l.__cap_;
      *(_OWORD *)int v54 = v55;
      memset(&v58, 0, sizeof(v58));
      __int16 v62 = v54 + 24;
      sub_4802C(a1, &v60);
      BOOL v56 = a1[1];
      sub_480A0((uint64_t)&v60);
      int v57 = (char)v58.__r_.__value_.__s.__size_;
      a1[1] = v56;
      if (v57 < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      int v16 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(void *)(v15 + 16) = v58.__r_.__value_.__l.__cap_;
      *(_OWORD *)uint64_t v15 = v16;
      a1[1] = v15 + 24;
    }

    id v13 = v59.__r_.__value_.__s.__size_;
  }

  if ((v13 & 0x80) != 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

    id v7 = 1;
    goto LABEL_16;
  }

  if (ioDataSize != 4 || outData > 1)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(22);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v17 = "Stream_HAL_Common.cpp";
      id v18 = 1024;
      uint64_t v19 = 50;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The HAL returned unexpected results upon reading the stream direction",  buf,  0x12u);
    }

    goto LABEL_15;
  }

  id v7 = outData != 1;
LABEL_16:
  *(_BYTE *)(a1 + 84) = v7;
  return a1;
}

    id v13 = *v4;
    return sub_852D0(a3, &v13, 1LL);
  }

  else
  {
    uint64_t v9 = result[83];
    if (v9)
    {
      return sub_2E22D0(a3, v9, a2);
    }

    else
    {
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
    }
  }

  return result;
}

  int v16 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v6;
  if (v16)
  {
    uint64_t v17 = (unint64_t *)&v16->__shared_owners_;
    do
      id v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v12 = atomic_load((unsigned __int8 *)(a1 + 32));
  if ((v12 & 1) != 0)
  {
    id v13 = (unsigned __int8 *)(a1 + 64);
    do
      char v14 = __ldaxr(v13);
    while (__stlxr(1u, v13));
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = sub_90950(**(_DWORD **)(a1 + 24), COERCE_DOUBLE(1735159650LL));
      int v16 = (os_log_t *)sub_138E8(16);
      uint64_t v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 99;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v15;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "%25s:%-5d Buffer Frame Size: %u", buf, 0x18u);
      }

      id v18 = operator new(0x88uLL);
      sub_3976A8((uint64_t)v18, v15);
      uint64_t v19 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = v18;
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
        id v18 = *(void **)(a1 + 72);
        if (!v18)
        {
          __int16 v35 = (os_log_t *)sub_138E8(13);
          int v36 = *v35;
          if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 101;
            _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }
      }

      (*(void (**)(void *, uint64_t))(*(void *)v18 + 16LL))(v18, a1 + 40);
      char v20 = (os_log_t *)sub_138E8(16);
      unsigned int v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 105;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "%25s:%-5d enabling VAD capture for HapticDebugDelegate",  buf,  0x12u);
      }

      uint64_t v22 = *(void *)(*(void *)(a1 + 72) + 8LL);
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 24LL))(v22);
      }
      char v23 = *(void *)(*(void *)(a1 + 48) + 16LL);
      if (!v23)
      {
        int v32 = (os_log_t *)sub_138E8(13);
        BOOL v33 = *v32;
        if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 110;
          _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        int v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v34, "Precondition failure.");
      }

      __int16 v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 120LL))(v23);
      strcpy(buf, "crsstpni");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      if (AudioObjectHasProperty(v24, (const AudioObjectPropertyAddress *)buf))
      {
        double v43 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 120LL))(v23);
        __p.__r_.__value_.__r.__words[0] = 0x696E707473737263LL;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        sub_90764((uint64_t)buf, &v43, (AudioObjectPropertyAddress *)&__p, 0, 0LL);
        int v25 = *(_DWORD *)buf;
        if (*(_DWORD *)buf || !v45)
        {
          int v38 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v38 = &off_4865A0;
          v38[2] = v25;
        }

        int v40 = 0LL;
        __int16 v41 = 0LL;
        uint64_t v42 = 0LL;
        __int16 v26 = *(void **)&buf[8];
        sub_7A5B8( &v40,  *(const void **)&buf[8],  *(uint64_t *)&buf[16],  (uint64_t)(*(void *)&buf[16] - *(void *)&buf[8]) >> 2);
        if (v26) {
          operator delete(v26);
        }
        int v27 = (os_log_t *)sub_138E8(16);
        uint64_t v28 = *v27;
        if (*v27)
        {
          char v29 = os_log_type_enabled(*v27, OS_LOG_TYPE_INFO);
          int v30 = v40;
          if (v29)
          {
            sub_8F640(&__p, (unsigned int *)v40, v41);
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 114;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = p_p;
            _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "%25s:%-5d Haptic debug input sources currently set: %s",  buf,  0x1Cu);
          }
        }

        else
        {
          int v30 = v40;
        }

        if (v30) {
          operator delete(v30);
        }
      }
    }

    sub_2214B4(a1);
  }

    id v13 = *v4;
    return sub_852D0(a3, &v13, 1LL);
  }

  else
  {
    uint64_t v9 = result[83];
    if (v9)
    {
      return sub_2E22D0(a3, v9, a2);
    }

    else
    {
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
    }
  }

  return result;
}

  sub_14B818((void *)(a1 + 96), (uint64_t)&v41);
  sub_68314(&v41);
  *(void *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 132) = a4;
  sub_2BCA9C(a2, a3, a4);
  *(double *)(a1 + 136) = v23;
  *(double *)(a1 + 144) = v24;
  int v25 = sub_157A88(a1 + 152, a5, v23, v24);
  __int16 v26 = *(void *)(a1 + 120);
  int v27 = *(_DWORD *)(a1 + 128);
  uint64_t v28 = *(_DWORD *)(a1 + 132);
  LODWORD(v41) = 1987013732;
  *(void *)((char *)&v41 + 4) = __PAIR64__(v28, v27);
  char v29 = (*(uint64_t (**)(uint64_t, __int128 *, float))(*(void *)v26 + 16LL))(v26, &v41, v25);
  int v30 = 0.0;
  if (v29)
  {
    BOOL v44 = 4;
    LODWORD(v41) = 1987013732;
    *(void *)((char *)&v41 + 4) = __PAIR64__(v28, v27);
    (*(void (**)(uint64_t, __int128 *, void, void, int *, uint8_t *, float))(*(void *)v26 + 40LL))( v26,  &v41,  0LL,  0LL,  &v44,  buf,  0.0);
    char v31 = *(double *)(a1 + 144);
    int v32 = *(double *)(a1 + 136);
    *(float *)&__int16 v41 = v32;
    BOOL v33 = v31;
    double v43 = v33;
    int v30 = *sub_63A98((float *)&v41, (float *)buf, &v43);
    double v43 = v30;
    if (v30 != *(float *)buf)
    {
      LODWORD(v41) = 1987013732;
      *(void *)((char *)&v41 + 4) = __PAIR64__(v28, v27);
      (*(void (**)(uint64_t, __int128 *, void, void, uint64_t, float *))(*(void *)v26 + 48LL))( v26,  &v41,  0LL,  0LL,  4LL,  &v43);
      int v30 = v43;
    }
  }

  *(float *)(a1 + 200) = v30;
  *(_DWORD *)(a1 + 204) = 0;
  *(_WORD *)(a1 + 208) = 0;
  int v34 = *(void *)(a1 + 120);
  LODWORD(v41) = 1987013732;
  *(void *)((char *)&v41 + 4) = *(void *)(a1 + 128);
  *(_BYTE *)(a1 + 210) = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v34 + 16LL))(v34, &v41);
  sub_2BCA9C(*(void *)(a1 + 120), *(unsigned int *)(a1 + 128), *(_DWORD *)(a1 + 132));
  *(void *)(a1 + 216) = v35;
  *(void *)(a1 + 224) = v36;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(_BYTE *)(a1 + 272) = 0;
  sub_1C8538((uint64_t *)(a1 + 280));
  return a1;
}

      return 0LL;
    }

    if (outData) {
      return 0LL;
    }
    if (!a4)
    {
      __int16 v26 = (os_log_s *)*(id *)sub_138E8(2);
      uint64_t v9 = v26;
      if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1662;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Received NULL client data", buf, 0x12u);
      }

      goto LABEL_15;
    }

    if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_Initialization", 0x11uLL) == &qword_4938E0)
    {
      char v14 = 0LL;
    }

    else
    {
      id v13 = atomic_load((unsigned __int8 *)&qword_493908);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
      {
        qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_493908);
      }

      char v14 = os_signpost_id_generate((os_log_t)qword_493900);
      uint64_t v15 = atomic_load((unsigned __int8 *)&qword_493908);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
      {
        qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_493908);
      }

      int v16 = (os_log_s *)(id)qword_493900;
      uint64_t v17 = v16;
      if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v17,  OS_SIGNPOST_INTERVAL_BEGIN,  v14,  "VA_Initialization",  "Initializing VirtualAudio plugin",  buf,  2u);
      }
    }

    int v32 = v14;
    id v18 = sub_138E8(42);
    if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    {
      uint64_t v19 = (os_log_s *)*(id *)v18;
      if (v19)
      {
        char v20 = v19;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 52;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "kVAInitialization";
          _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
        }
      }
    }

    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_24D694;
    *(void *)&_BYTE buf[24] = &unk_479048;
    *(void *)&_BYTE buf[32] = a4;
    __int16 v39 = a4;
    unsigned int v21 = buf;
    uint64_t v22 = (void *)a4[62];
    char v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v22);
    dispatch_async(v23, v21);

    if ((_os_feature_enabled_impl("VirtualAudio", "startup_sequence_change") & 1) == 0)
    {
      v27[0] = 1;
      char v31 = 4;
      strcpy(__p, "niavbolg");
      __p[9] = 0;
      *(_WORD *)&__p[10] = 0;
      (*(void (**)(void *, _BYTE *, void, void, int *, int *))(*a4 + 56LL))( a4,  __p,  0LL,  0LL,  &v31,  v27);
      __int16 v24 = (os_log_s *)*(id *)sub_138E8(2);
      int v25 = v24;
      if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 __p = 136315650;
        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
        int v34 = 1024;
        __int16 v35 = 1889;
        int v36 = 1024;
        __int16 v37 = v27[0];
        _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VA Init Status: %u", __p, 0x18u);
      }
    }

    sub_24D9A4(&v32);
    sub_6DD4();
    if ((*(unsigned int (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828))
    {
      sub_6DD4();
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
  }

  return 0LL;
}

    int v11 = *(uint64_t (**)(void))(v1 + 104);
    uint64_t v12 = (void *)(v1 + 24);
    else {
      id v13 = *(char **)(v1 + 24);
    }
    sub_195860(buf, v13);
    char v14 = v11(*(void *)&buf[8]);
    sub_39FD8(buf);
    if (v14)
    {
      uint64_t v15 = sub_138E8(16);
      int v16 = sub_138E8(24);
      uint64_t v17 = 0;
      id v18 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v19 = *(void *)(v15 + 8);
      while (1)
      {
        char v20 = *(int *)&buf[4 * v18];
        unsigned int v21 = v17;
        if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
          break;
        }
        uint64_t v17 = 1;
        id v18 = 1LL;
        if ((v21 & 1) != 0) {
          goto LABEL_25;
        }
      }

      if ((v19 & v20) == 0) {
        uint64_t v15 = v16;
      }
LABEL_25:
      uint64_t v22 = *(os_log_s **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 88;
        char v29 = 1024;
        LODWORD(v30[0]) = v14;
        WORD2(v30[0]) = 2080;
        *(void *)((char *)v30 + 6) = v12;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed [%d] to unregister %s for Device Orientation Updates",  buf,  0x22u);
      }
    }

    *(_DWORD *)(v1 + 80) = 0;
  }

  char v23 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      int v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  sub_1BB88(&v11);
  sub_85B80((uint64_t *)buf);
  return v3;
}

void sub_2B368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_2B3A0(void *a1, AudioUnitScope inScope, unsigned int a3, int *a4)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    __int16 v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      int v36 = "DSPProcessorManager.cpp";
      __int16 v37 = 1024;
      int v38 = 704;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input",  (uint8_t *)&ioDataSize,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }

  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  uint64_t v8 = a1[9];
  if (v8) {
    uint64_t v9 = *(OpaqueAudioComponentInstance **)(v8 + 16);
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t Property = AudioUnitGetProperty(v9, 0xBu, inScope, 0, &outData, &ioDataSize);
  if ((_DWORD)Property)
  {
    int v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      int v36 = "DSPProcessorManager.cpp";
      __int16 v37 = 1024;
      int v38 = 707;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FailIf failed, goto Exit",  (uint8_t *)&ioDataSize,  0x12u);
    }

    id v13 = (os_log_t *)sub_138E8(24);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 152LL))(a1);
      sub_2CA1C(v32, v15);
      int v16 = v33;
      uint64_t v17 = (void **)v32[0];
      sub_2CA1C(__p, Property);
      id v18 = v32;
      if (v16 < 0) {
        id v18 = v17;
      }
      if (v31 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      UInt32 ioDataSize = 136316162;
      int v36 = "DSPProcessorManager.cpp";
      __int16 v37 = 1024;
      int v38 = 718;
      __int16 v39 = 2080;
      int v40 = v18;
      __int16 v41 = 1024;
      int v42 = Property;
      __int16 v43 = 2080;
      BOOL v44 = v19;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP (%s) static channel setup failed with error: (%d) %s",  (uint8_t *)&ioDataSize,  0x2Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }

  else
  {
    if (outData <= a3)
    {
      int v27 = (os_log_t *)sub_138E8(13);
      uint64_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        UInt32 ioDataSize = 136315650;
        int v36 = "DSPProcessorManager.cpp";
        __int16 v37 = 1024;
        int v38 = 708;
        __int16 v39 = 1024;
        LODWORD(v40) = inScope;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): inElement cannot exceed bus count for scope: %u",  (uint8_t *)&ioDataSize,  0x18u);
      }

      char v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_8F9F4(v29, "inElement cannot exceed bus count for scope: %u");
    }

    uint64_t v20 = 14LL;
    if (inScope == 1) {
      uint64_t v20 = 11LL;
    }
    uint64_t v21 = a1[v20] + 48LL * a3;
    if ((*(_BYTE *)(v21 + 12) & 0x20) != 0) {
      int v22 = *(_DWORD *)(v21 + 28);
    }
    else {
      int v22 = 1;
    }
    *a4 = v22;
  }

  return Property;
}

void sub_2B748(_Unwind_Exception *a1)
{
}

void sub_2B77C(uint64_t a1, int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != 1718773105 && v3 != 1819304813)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "CAStreamBasicDescription.h";
      __int16 v12 = 1024;
      int v13 = 429;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  ChangeNumberChannels only works for uncompressed formats",  (uint8_t *)&v10,  0x12u);
    }

    __break(1u);
    return;
  }

  unsigned int v5 = *(_DWORD *)(a1 + 24);
  if (!v5) {
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a1 + 12) & 0x20) != 0)
  {
    unsigned int v6 = 1;
  }

  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 28);
    if (!v6) {
      goto LABEL_12;
    }
  }

  if (v6 <= v5)
  {
    unsigned int v7 = v5 / v6;
    goto LABEL_14;
  }

LABEL_12:
  unsigned int v7 = (*(_DWORD *)(a1 + 32) + 7) >> 3;
LABEL_14:
  *(_DWORD *)(a1 + 28) = a2;
  *(_DWORD *)(a1 + 20) = 1;
  if (a3)
  {
    v7 *= a2;
    *(_DWORD *)(a1 + 24) = v7;
    unsigned int v8 = *(_DWORD *)(a1 + 12) & 0xFFFFFFDF;
  }

  else
  {
    *(_DWORD *)(a1 + 24) = v7;
    unsigned int v8 = *(_DWORD *)(a1 + 12) | 0x20;
  }

  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v7;
}

  unsigned int v7 = (void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0LL;
  if (v8 == (void *)(a1 + 8))
  {
    uint64_t v9 = 4LL;
    unsigned int v8 = (void *)(a1 + 8);
  }

  else
  {
    if (!v8) {
      return a1;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
  int v10 = *(void **)(a1 + 32);
  if (v10 == v7)
  {
    int v11 = 4LL;
    goto LABEL_20;
  }

  if (v10)
  {
    int v11 = 5LL;
    unsigned int v7 = *(void **)(a1 + 32);
LABEL_20:
    (*(void (**)(void *))(*v7 + 8 * v11))(v7);
  }

  return a1;
}

    char v14 = *v7;
LABEL_13:
    unsigned int v6 = v14 != 0;
  }

  v899 = v6;
  id v892 = v905 + 90;
  uint64_t v15 = sub_138E8(2);
  int v16 = sub_138E8(34);
  uint64_t v17 = 0;
  id v18 = 0LL;
  *(void *)v965 = 0x100000002LL;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&v965[4 * v18];
    uint64_t v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    uint64_t v17 = 1;
    id v18 = 1LL;
    if ((v21 & 1) != 0)
    {
      if ((v19 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_22;
    }
  }

  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
  if ((*(void *)(v15 + 8) & 1) != 0)
  {
LABEL_22:
    int v22 = *(id *)v15;
    if (v22)
    {
      char v23 = (os_log_s *)v22;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        __int16 v24 = *v903;
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2591;
        *(_WORD *)&v965[18] = 2112;
        *(void *)&v965[20] = v24;
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d inRouteChangeDictionary: %@.", v965, 0x1Cu);
      }
    }
  }

    int v13 = (std::__shared_weak_count *)a2[1];
    if (!v13)
    {
      int v16 = 0LL;
      uint64_t v15 = 0LL;
LABEL_22:
      if (!v7) {
        goto LABEL_29;
      }
      goto LABEL_23;
    }

    char v14 = std::__shared_weak_count::lock(v13);
    uint64_t v15 = v14;
    if (v14)
    {
      int v16 = *a2;
      uint64_t v17 = (unint64_t *)&v14->__shared_weak_owners_;
      do
        id v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      uint64_t v19 = (unint64_t *)&v14->__shared_owners_;
      do
        uint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
        if (!v7) {
          goto LABEL_29;
        }
        goto LABEL_23;
      }

      goto LABEL_22;
    }

    int v16 = 0LL;
    if (!v7)
    {
LABEL_29:
      int v22 = 0LL;
      uint64_t v21 = 0LL;
      if (!v15) {
        goto LABEL_35;
      }
      goto LABEL_30;
    }

  if (!*((_BYTE *)a1 + 76))
  {
    BOOL v50 = (os_log_t *)sub_138E8(13);
    int v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      int v63 = 1024;
      int v64 = 743;
      _os_log_impl(&dword_0, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __int16 v12 = sub_138E8(12);
  int v13 = sub_138E8(39);
  char v14 = 0;
  uint64_t v15 = 0LL;
  *(void *)buf = 0x100000002LL;
  int v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    id v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1LL;
    if ((v18 & 1) != 0) {
      goto LABEL_19;
    }
  }

  if ((v16 & v17) == 0) {
    __int16 v12 = v13;
  }
LABEL_19:
  uint64_t v19 = *(os_log_s **)v12;
  if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    int v63 = 1024;
    int v64 = 746;
    UInt32 v65 = 2048;
    double v66 = a2;
    _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Confirming sample rate switch with CoreTelephony for sample rate %f Hz",  buf,  0x1Cu);
  }

  uint64_t v20 = dispatch_semaphore_create(0LL);
  uint64_t v21 = (dispatch_object_s *)a1[24];
  a1[24] = (uint64_t)v20;
  if (v21) {
    dispatch_release(v21);
  }
  int v22 = *a1;
  char v23 = (const void *)kCTAudioVocoderI2SClockRate;
  if (kCTAudioVocoderI2SClockRate) {
    CFRetain(kCTAudioVocoderI2SClockRate);
  }
  sub_7F234(&cf, v23);
  __int16 v24 = cf;
  if (cf) {
    CFRetain(cf);
  }
  char v71 = v24;
  *(_DWORD *)buf = a2;
  uint64_t v72 = CFNumberCreate(0LL, kCFNumberIntType, buf);
  if (!v72)
  {
    BOOL v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
  }

  v58[0] = &v71;
  v58[1] = 1LL;
  int v25 = sub_5A950((uint64_t)v58);
  __int16 v26 = v25;
  BOOL v59 = v25;
  int v60 = v22;
  if (v25) {
    CFRetain(v25);
  }
  int v61 = v26;
  if (!*(void *)v22)
  {
    int v54 = (os_log_t *)sub_138E8(13);
    int v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      int v63 = 1024;
      int v64 = 502;
      _os_log_impl(&dword_0, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    BOOL v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v56, "Precondition failure.");
  }

  if (*(_BYTE *)(v22 + 8))
  {
    int v27 = (dispatch_queue_s *)sub_869B4();
    char v29 = v60;
    uint64_t v28 = v61;
    if (v61) {
      CFRetain(v61);
    }
    int v30 = operator new(0x10uLL);
    char v31 = v30;
    unint64_t *v30 = v29;
    if (v28)
    {
      CFRetain(v28);
      v31[1] = v28;
      dispatch_async_f(v27, v31, (dispatch_function_t)sub_163CEC);
      CFRelease(v28);
    }

    else
    {
      v30[1] = 0LL;
      dispatch_async_f(v27, v30, (dispatch_function_t)sub_163CEC);
    }
  }

  else
  {
    int v32 = (os_log_t *)sub_138E8(12);
    char v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      int v63 = 1024;
      int v64 = 506;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
    }
  }

  if (v61) {
    CFRelease(v61);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v72) {
    CFRelease(v72);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (cf) {
    CFRelease(cf);
  }
  int v34 = mach_absolute_time();
  __int16 v35 = __udivti3(125 * v34, (v34 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
  int v36 = dispatch_walltime(0LL, 2000000000LL);
  __int16 v37 = dispatch_semaphore_wait((dispatch_semaphore_t)a1[24], v36);
  int v38 = mach_absolute_time();
  __int16 v39 = __udivti3(125 * v38, (v38 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
  int v40 = sub_138E8(12);
  __int16 v41 = sub_138E8(39);
  int v42 = 0;
  __int16 v43 = 0LL;
  BOOL v44 = (v39 - v35) / 0xF4240uLL;
  *(void *)buf = 0x100000002LL;
  int v45 = *(void *)(v40 + 8);
  while (1)
  {
    int v46 = *(int *)&buf[4 * v43];
    BOOL v47 = v42;
    if (((v45 & v46) != 0) != ((*(void *)(v41 + 8) & v46) != 0)) {
      break;
    }
    int v42 = 1;
    __int16 v43 = 1LL;
    if ((v47 & 1) != 0) {
      goto LABEL_57;
    }
  }

  if ((v45 & v46) == 0) {
    int v40 = v41;
  }
LABEL_57:
  int v48 = *(os_log_s **)v40;
  if (*(void *)v40 && os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    int v63 = 1024;
    int v64 = 765;
    UInt32 v65 = 2048;
    double v66 = *(double *)&v44;
    double v67 = 2048;
    unsigned int v68 = a2;
    char v69 = 2048;
    uint64_t v70 = v37;
    _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d waited %llu milliseconds for sample rate confirmation notification for sample rate %f Hz (timed out = %ld)",  buf,  0x30u);
  }

  int v49 = (dispatch_object_s *)a1[24];
  a1[24] = 0LL;
  if (v49) {
    dispatch_release(v49);
  }
}

  int v42 = sub_2D8530(a3, (uint64_t)v43);
LABEL_13:
  if ((byte_48E7D8 & 1) == 0)
  {
    byte_48E7D8 = 1;
    *(void *)buf = 0LL;
    uint64_t v17 = sub_14BC34(@"MaxOutputVolume", (void **)buf);
    id v18 = *(double *)buf;
    if (!v17) {
      id v18 = 0.0;
    }
    byte_48E7D0 = v17;
    dword_48E7D4 = LODWORD(v18);
    if (!v17) {
      goto LABEL_22;
    }
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
      BOOL v47 = 1024;
      int v48 = 826;
      int v49 = 2080;
      BOOL v50 = "MaxOutputVolume";
      int v51 = 2048;
      int v52 = *(float *)&dword_48E7D4;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
    }
  }

  if (!byte_48E7D0)
  {
LABEL_22:
    int v16 = sub_2D8794(a3, (uint64_t)v43);
    goto LABEL_23;
  }

  int v16 = dword_48E7D4 | 0x100000000LL;
LABEL_23:
  uint64_t v21 = sub_2D7684(a3, (uint64_t)v43, a5);
  char v23 = v22;
  if ((_BYTE)v22)
  {
    __int16 v24 = (os_log_t *)sub_138E8(20);
    int v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        BOOL v47 = 1024;
        int v48 = 374;
        int v49 = 1024;
        LODWORD(v50) = a5;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Extended volume description available for volume control scope %u",  buf,  0x18u);
      }
    }
  }

  __int16 v26 = sub_2D7370(a3, (uint64_t)v43);
  int v27 = v26;
  if ((v26 & 0xFF00000000LL) == 0)
  {
    uint64_t v28 = *(void *)(a4 + 104);
    char v29 = *(_DWORD *)(a2 + 144);
    int v30 = sub_2CFCBC(v28, v11);
    if (v31)
    {
      int v34 = *(void *)(v30 + 8);
      int v32 = v30 + 8;
      char v33 = v34;
      if (!v34)
      {
        __int16 v39 = 0LL;
        goto LABEL_42;
      }

      __int16 v35 = v32;
      do
      {
        int v36 = *(_DWORD *)(v33 + 28);
        __int16 v37 = v36 >= v29;
        if (v36 >= v29) {
          int v38 = (unint64_t *)v33;
        }
        else {
          int v38 = (unint64_t *)(v33 + 8);
        }
        if (v37) {
          __int16 v35 = v33;
        }
        char v33 = *v38;
      }

      while (*v38);
      if (v35 != v32 && *(_DWORD *)(v35 + 28) <= v29)
      {
        __int16 v41 = *(_DWORD *)(v35 + 32);
        int v40 = v41 & 0xFFFFFF00;
        LODWORD(v33) = v41;
        __int16 v39 = 0x100000000LL;
        goto LABEL_43;
      }
    }

    __int16 v39 = 0LL;
    LODWORD(v33) = 0;
LABEL_42:
    int v40 = 0;
LABEL_43:
    int v27 = v39 | v40 | v33;
  }

  *a1 = v42;
  a1[1] = v16;
  a1[2] = 0LL;
  a1[3] = v21;
  a1[4] = v23;
  a1[5] = v27 & 0xFFFFFFFFFFLL | v26 & 0xFFFFFF0000000000LL;
  if (__p)
  {
    int v45 = __p;
    operator delete(__p);
  }

  inAddress.AudioObjectPropertySelector mSelector = 1936945763;
  inAddress.AudioObjectPropertyScope mScope = v5;
  inAddress.AudioObjectPropertyElement mElement = 0;
  sub_1BB60((std::mutex *)a1);
  if (AudioObjectHasProperty(*(_DWORD *)(a1 + 268), &inAddress))
  {
    inAddress.AudioObjectPropertySelector mSelector = 1936945763;
    inAddress.AudioObjectPropertyScope mScope = v5;
    inAddress.AudioObjectPropertyElement mElement = 0;
    int v11 = 0;
    __int16 v12 = 4;
    (*(void (**)(uint64_t, AudioObjectPropertyAddress *, void, void, int *, __int32 *))(*(void *)a1 + 40LL))( a1,  &inAddress,  0LL,  0LL,  &v12,  &v11);
    int v10 = v11;
    sub_8598C((uint64_t)a3, &v10);
  }

      *(_DWORD *)a6 = 0;
      return;
    }

    int v11 = *a5;
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
      __int16 v26 = 1024;
      int v27 = 736;
      id v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kVirtualAudioDevicePropertyH"
            "asKnowableVolumeLevels";
      goto LABEL_32;
    }

    goto LABEL_33;
  }

  if (v8 == 1987013732)
  {
    __int16 v12 = *a5;
    if (v12 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
    {
      uint64_t v20 = (os_log_t *)sub_138E8(13);
      uint64_t v17 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
        __int16 v26 = 1024;
        int v27 = 722;
        id v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyVolumeDecibels";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    int v13 = *(void *)(a1 + 8);
    strcpy((char *)&buf, "dlovptuo");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    char v23 = 4;
    __int16 v24 = 0.0;
    sub_232A4(v13, &buf, 0, 0LL, &v23, &v24);
    int v10 = v24;
    goto LABEL_15;
  }

  if (v8 != 1986290211)
  {
    if (v8 != 1835103844)
    {
LABEL_16:
      sub_1A48C8(*(void *)(a1 + 8), (uint64_t)a2, a3, a4, a5, (int *)a6);
      return;
    }

    uint64_t v9 = *a5;
    if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
    {
      int v16 = (os_log_t *)sub_138E8(13);
      uint64_t v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
        __int16 v26 = 1024;
        int v27 = 717;
        id v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyMinimu"
              "mAudibleVolumeDecibels";
LABEL_32:
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, 0x12u);
      }

  uint64_t v9 = atomic_load((unsigned __int8 *)&qword_48E8A8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_48E8A8))
  {
    byte_48E8A0 = sub_14E5D4();
    __cxa_guard_release(&qword_48E8A8);
  }

  if (byte_48E8A0)
  {
    unsigned int v6 = (char *)a1[1];
    unsigned int v8 = (char *)a1[2];
    unsigned int v7 = a1 + 1;
    if (v6 < v8)
    {
      *(_DWORD *)unsigned int v6 = 16;
      int v10 = v6 + 4;
LABEL_29:
      os_log_t *v7 = v10;
      goto LABEL_30;
    }

  if ((int)(v12 >> 3) >= 1)
  {
    uint64_t v17 = 0LL;
    id v18 = (v12 >> 3);
    do
    {
      uint64_t v19 = *(void *)(a2[83] + 8 * v17);
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v19 + 136LL))(buf, v19);
      int v51 = 0LL;
      int v52 = 0LL;
      if (*(void *)&buf[8])
      {
        uint64_t v20 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
        int v52 = v20;
        if (v20)
        {
          uint64_t v21 = *(void *)buf;
          int v51 = *(void *)buf;
        }

        else
        {
          uint64_t v21 = 0LL;
        }

        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v21)
        {
          sub_85A90((uint64_t *)buf, (void *)(v21 + 112));
          if (*(void *)&buf[16])
          {
            int v22 = *a1;
            int v48 = 0LL;
            int v49 = 1;
            BOOL v50 = v17;
            char v23 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 56LL))(v19);
            if (v22) {
              (*(void (**)(char *, uint64_t *, uint64_t, _BYTE *))(*(void *)v22 + 16LL))(v22, &v48, v23, buf);
            }
            if ((*(_BYTE *)a3 & 4) != 0)
            {
              int v48 = 0LL;
              int v49 = 2;
              BOOL v50 = v17;
              __int16 v24 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48LL))(v19);
              if (v22) {
                (*(void (**)(char *, uint64_t *, uint64_t, _BYTE *))(*(void *)v22 + 16LL))( v22,  &v48,  v24,  buf);
              }
            }
          }

          goto LABEL_29;
        }
      }

      else
      {
        uint64_t v20 = 0LL;
      }

      *(void *)buf = buf;
      *(_OWORD *)&buf[8] = (unint64_t)buf;
LABEL_29:
      sub_85B80((uint64_t *)buf);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          __int16 v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }

      ++v17;
    }

    while (v17 != v18);
  }

  int v27 = a2[87];
  uint64_t v28 = a2[86];
  char v29 = sub_138E8(16);
  int v30 = sub_138E8(40);
  char v31 = 0;
  int v32 = 0LL;
  char v33 = v27 - v28;
  *(void *)buf = 0x100000002LL;
  int v34 = *(void *)(v29 + 8);
  while (1)
  {
    __int16 v35 = *(int *)&buf[4 * v32];
    int v36 = v31;
    if (((v34 & v35) != 0) != ((*(void *)(v30 + 8) & v35) != 0)) {
      break;
    }
    char v31 = 1;
    int v32 = 1LL;
    if ((v36 & 1) != 0)
    {
      if ((v34 & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_43;
    }
  }

  if ((v34 & v35) == 0) {
    char v29 = v30;
  }
  if ((*(void *)(v29 + 8) & 1) != 0)
  {
LABEL_43:
    __int16 v37 = *(os_log_s **)v29;
    if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1640;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v33 >> 3;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitors for %d output client streams",  buf,  0x18u);
    }
  }

  if ((_DWORD)result) {
    return (*(uint64_t (**)(void))(qword_49CF68 + 24))();
  }
  return result;
}

  *(void *)uint64_t result = &off_482C88;
  *(_DWORD *)(result + 8) = a2;
LABEL_15:
  *(void *)(result + 24) = result;
  return result;
}

  std::mutex::unlock(v4);
}

uint64_t sub_2B8B8(uint64_t a1)
{
  uint64_t v5 = a1 + 48;
  char v6 = 1;
  sub_92F80(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v2) {
    uint64_t v3 = a1 + 456;
  }
  else {
    uint64_t v3 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v2 + 8) + 128LL))( *(void *)(v2 + 8),  1LL,  0LL);
  }
  sub_93128((uint64_t)&v5);
  return v3;
}

void sub_2B92C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2B940(uint64_t a1)
{
  uint64_t v5 = a1 + 48;
  char v6 = 1;
  sub_92F80(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 == *(void *)(a1 + 24)) {
    uint64_t v3 = a1 + 456;
  }
  else {
    uint64_t v3 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v2 - 16) + 128LL))( *(void *)(v2 - 16),  2LL,  0LL);
  }
  sub_93128((uint64_t)&v5);
  return v3;
}

void sub_2B9B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2B9C8(uint64_t a1)
{
  uint64_t v2 = 1LL;
  if ((*(_BYTE *)(a1 + 468) & 0x20) != 0) {
    uint64_t v2 = *(unsigned int *)(a1 + 484);
  }
  uint64_t v14 = a1 + 48;
  char v15 = 1;
  sub_92F80(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = v3 / 24;
    if (v5 <= 1) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = v5;
    }
    do
    {
      char v7 = 0;
      unsigned int v8 = (void *)(*(void *)(a1 + 24) + 24 * v4 + 8);
      uint64_t v9 = 1LL;
      do
      {
        char v10 = v7;
        uint64_t v11 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*v8 + 128LL))(*v8, v9, 0LL);
        if ((*(_BYTE *)(v11 + 12) & 0x20) != 0)
        {
          uint64_t v12 = *(unsigned int *)(v11 + 28);
        }

        else
        {
          if ((_DWORD)v2) {
            goto LABEL_13;
          }
          uint64_t v12 = 1LL;
        }

        uint64_t v2 = v12;
LABEL_13:
        uint64_t v9 = 2LL;
        char v7 = 1;
      }

      while ((v10 & 1) == 0);
      ++v4;
    }

    while (v4 != v6);
  }

  sub_93128((uint64_t)&v14);
  return v2;
}

void sub_2BAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_BYTE *sub_2BAE4(uint64_t a1, double a2)
{
  uint64_t v16 = a1 + 48;
  char v17 = 1;
  sub_190270(a1 + 48);
  double v15 = a2;
  for (uint64_t i = *(void *)(a1 + 24); i != *(void *)(a1 + 32); i += 24LL)
  {
    int v14 = 8;
    char v13 = 0;
    if ((*(unsigned int (**)(void, uint64_t, int *, char *, void, void))(**(void **)(i + 8) + 40LL))( *(void *)(i + 8),  3100LL,  &v14,  &v13,  0LL,  0LL))
    {
      BOOL v5 = 1;
    }

    else
    {
      BOOL v5 = v13 == 0;
    }

    if (!v5)
    {
      if (v14 != 8)
      {
        uint64_t v8 = sub_138E8(13);
        id v9 = sub_8C7D4(1, *(void **)v8, *(void *)(v8 + 8));
        char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        uint64_t v11 = v10;
        if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v19 = "DSPChain.mm";
          __int16 v20 = 1024;
          int v21 = 1478;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Data size mismatch",  buf,  0x12u);
        }

        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Data size mismatch");
      }

      (*(void (**)(void, uint64_t, double *, uint64_t, void, void))(**(void **)(i + 8) + 56LL))( *(void *)(i + 8),  3100LL,  &v15,  8LL,  0LL,  0LL);
    }

    if ((*(unsigned int (**)(void))(**(void **)(i + 8) + 184LL))(*(void *)(i + 8)))
    {
      double v6 = (*(double (**)(void))(**(void **)(i + 8) + 200LL))(*(void *)(i + 8));
      double v15 = v6 + v15;
    }
  }

  return sub_19032C(&v16);
}

void sub_2BCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_2BD0C( uint64_t a1, AudioUnitPropertyID a2, UInt32 *outDataSize, BOOL *a4, AudioUnitScope inScope, AudioUnitElement inElement)
{
  Boolean outWritable = 0;
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    uint64_t v8 = *(OpaqueAudioComponentInstance **)(v7 + 16);
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t result = AudioUnitGetPropertyInfo(v8, a2, inScope, inElement, outDataSize, &outWritable);
  if (a4) {
    *a4 = outWritable != 0;
  }
  return result;
}

BOOL sub_2BD78(uint64_t a1)
{
  UInt32 ioDataSize = 4;
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    uint64_t v2 = *(OpaqueAudioComponentInstance **)(v1 + 16);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return AudioUnitGetProperty(v2, 0x15u, 0, 0, &outData, &ioDataSize) || outData == 0;
}

double sub_2BDD4(uint64_t a1)
{
  return sub_2BDDC(*(OpaqueAudioComponentInstance **)(a1 + 72));
}

double sub_2BDDC(OpaqueAudioComponentInstance *a1)
{
  UInt32 ioDataSize = 8;
  if (a1) {
    a1 = (OpaqueAudioComponentInstance *)*((void *)a1 + 2);
  }
  OSStatus Property = AudioUnitGetProperty(a1, 0xCu, 0, 0, &outData, &ioDataSize);
  double result = outData;
  if (Property) {
    return 0.0;
  }
  return result;
}

uint64_t sub_2BE2C(void *a1, uint64_t a2)
{
  uint64_t v3 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
  uint64_t v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10LL);
  std::locale::~locale((std::locale *)&v74);
  std::ostream::put(&v75, v4);
  std::ostream::flush(&v75);
  sub_826EC(&v75, (uint64_t)"================", 16LL);
  std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
  BOOL v5 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
  uint64_t v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10LL);
  std::locale::~locale((std::locale *)&v74);
  std::ostream::put(&v75, v6);
  std::ostream::flush(&v75);
  sub_826EC(&v75, (uint64_t)"Chain Name:", 11LL);
  uint64_t v7 = (const char *)(a2 + 712);
  size_t v8 = strlen(v7);
  sub_826EC(&v75, (uint64_t)v7, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
  id v9 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
  uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
  std::locale::~locale((std::locale *)&v74);
  std::ostream::put(&v75, v10);
  std::ostream::flush(&v75);
  sub_826EC(&v75, (uint64_t)"Before processing reformatting:", 31LL);
  uint64_t v11 = *(void *)(a2 + 584);
  if (v11) {
    uint64_t v12 = "";
  }
  else {
    uint64_t v12 = " unneeded";
  }
  if (v11) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = 9LL;
  }
  sub_826EC(&v75, (uint64_t)v12, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
  int v14 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
  uint64_t v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10LL);
  std::locale::~locale((std::locale *)&v74);
  std::ostream::put(&v75, v15);
  std::ostream::flush(&v75);
  if (*(void *)(a2 + 584))
  {
    sub_826EC(&v75, (uint64_t)"    from: ", 10LL);
    sub_2CC00(&v74, a2 + 504);
    if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v16 = &v74;
    }
    else {
      uint64_t v16 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    size_t v17 = strlen((const char *)v16);
    sub_826EC(&v75, (uint64_t)v16, v17);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    id v18 = std::locale::use_facet(&v72, &std::ctype<char>::id);
    uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
    std::locale::~locale(&v72);
    std::ostream::put(&v75, v19);
    std::ostream::flush(&v75);
    sub_826EC(&v75, (uint64_t)"    to  : ", 10LL);
    sub_2CC00(&v74, a2 + 544);
    if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v20 = &v74;
    }
    else {
      __int16 v20 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    size_t v21 = strlen((const char *)v20);
    sub_826EC(&v75, (uint64_t)v20, v21);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    int v22 = std::locale::use_facet(&v72, &std::ctype<char>::id);
    uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
    std::locale::~locale(&v72);
    std::ostream::put(&v75, v23);
    std::ostream::flush(&v75);
  }

  v72.__locale_ = (std::locale::__imp *)(a2 + 48);
  char v73 = 1;
  sub_92F80(a2 + 48);
  sub_826EC(&v75, (uint64_t)"DSPChain ", 9LL);
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(a2 + 32);
  if (v24 == v25) {
    __int16 v26 = "is empty.";
  }
  else {
    __int16 v26 = "items:";
  }
  if (v24 == v25) {
    uint64_t v27 = 9LL;
  }
  else {
    uint64_t v27 = 6LL;
  }
  sub_826EC(&v75, (uint64_t)v26, v27);
  std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
  uint64_t v28 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
  uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
  std::locale::~locale((std::locale *)&v74);
  std::ostream::put(&v75, v29);
  std::ostream::flush(&v75);
  if (*(void *)(a2 + 32) != *(void *)(a2 + 24))
  {
    uint64_t v30 = 0LL;
    unsigned int v31 = 1;
    do
    {
      sub_826EC(&v75, (uint64_t)"    ", 4LL);
      int v32 = (void *)std::ostream::operator<<(&v75, v31 - 1);
      sub_826EC(v32, (uint64_t)": DSPProcessorType ", 19LL);
      uint64_t v33 = *(void *)(*(void *)(a2 + 24) + 24 * v30 + 8);
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 152LL))(v33);
      sub_2CA1C(&v74, v34);
      if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v35 = &v74;
      }
      else {
        __int16 v35 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      size_t v36 = strlen((const char *)v35);
      sub_826EC(v32, (uint64_t)v35, v36);
      sub_826EC(v32, (uint64_t)" InstanceID ", 12LL);
      uint64_t v37 = *(void *)(*(void *)(a2 + 24) + 24 * v30 + 8);
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 144LL))(v37);
      __int16 v39 = (void *)std::ostream::operator<<(v32, v38);
      std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24LL)));
      int v40 = std::locale::use_facet(&v79, &std::ctype<char>::id);
      uint64_t v41 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10LL);
      std::locale::~locale(&v79);
      std::ostream::put(v39, v41);
      std::ostream::flush(v39);
      uint64_t v30 = v31;
    }

    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3) > v31++);
  }

  sub_93128((uint64_t)&v72);
  sub_826EC(&v75, (uint64_t)"After processing reformatting:", 30LL);
  if (*(void *)(a2 + 672)) {
    __int16 v43 = "";
  }
  else {
    __int16 v43 = " unneeded";
  }
  if (*(void *)(a2 + 672)) {
    uint64_t v44 = 0LL;
  }
  else {
    uint64_t v44 = 9LL;
  }
  sub_826EC(&v75, (uint64_t)v43, v44);
  std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
  int v45 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
  uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
  std::locale::~locale((std::locale *)&v74);
  std::ostream::put(&v75, v46);
  std::ostream::flush(&v75);
  if (*(void *)(a2 + 672))
  {
    sub_826EC(&v75, (uint64_t)"    from: ", 10LL);
    sub_2CC00(&v74, a2 + 592);
    if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v47 = &v74;
    }
    else {
      BOOL v47 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    size_t v48 = strlen((const char *)v47);
    sub_826EC(&v75, (uint64_t)v47, v48);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    int v49 = std::locale::use_facet(&v72, &std::ctype<char>::id);
    uint64_t v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10LL);
    std::locale::~locale(&v72);
    std::ostream::put(&v75, v50);
    std::ostream::flush(&v75);
    sub_826EC(&v75, (uint64_t)"    to  : ", 10LL);
    sub_2CC00(&v74, a2 + 632);
    if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v51 = &v74;
    }
    else {
      int v51 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    size_t v52 = strlen((const char *)v51);
    sub_826EC(&v75, (uint64_t)v51, v52);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    BOOL v53 = std::locale::use_facet(&v72, &std::ctype<char>::id);
    uint64_t v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10LL);
    std::locale::~locale(&v72);
    std::ostream::put(&v75, v54);
    std::ostream::flush(&v75);
  }

  uint64_t v55 = *(void *)(a2 + 1040);
  if (v55 && *(void *)(v55 + 136) != *(void *)(v55 + 128))
  {
    sub_826EC(&v75, (uint64_t)"Software Volume Commands: ", 26LL);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    BOOL v56 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
    uint64_t v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10LL);
    std::locale::~locale((std::locale *)&v74);
    std::ostream::put(&v75, v57);
    std::ostream::flush(&v75);
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 1040) + 200LL))(&v74);
    int v58 = (v74.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v74 : (std::string *)v74.__r_.__value_.__r.__words[0];
    uint64_t v59 = (v74.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v74.__r_.__value_.__s.__size_ : v74.__r_.__value_.__l.__size_;
    sub_826EC(&v75, (uint64_t)v58, v59);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    int v60 = std::locale::use_facet(&v72, &std::ctype<char>::id);
    uint64_t v61 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10LL);
    std::locale::~locale(&v72);
    std::ostream::put(&v75, v61);
    std::ostream::flush(&v75);
  }

  if (*(void *)(a2 + 1056))
  {
    sub_826EC(&v75, (uint64_t)"Thermal Volume Commands: ", 25LL);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    __int16 v62 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
    uint64_t v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10LL);
    std::locale::~locale((std::locale *)&v74);
    std::ostream::put(&v75, v63);
    std::ostream::flush(&v75);
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 1056) + 200LL))(&v74);
    int v64 = (v74.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v74 : (std::string *)v74.__r_.__value_.__r.__words[0];
    uint64_t v65 = (v74.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v74.__r_.__value_.__s.__size_ : v74.__r_.__value_.__l.__size_;
    sub_826EC(&v75, (uint64_t)v64, v65);
    std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
    double v66 = std::locale::use_facet(&v72, &std::ctype<char>::id);
    uint64_t v67 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10LL);
    std::locale::~locale(&v72);
    std::ostream::put(&v75, v67);
    std::ostream::flush(&v75);
  }

  sub_826EC(&v75, (uint64_t)"================", 16LL);
  std::ios_base::getloc((const std::ios_base *)((char *)&v76[-1] + *(void *)(v75 - 24)));
  unsigned int v68 = std::locale::use_facet((const std::locale *)&v74, &std::ctype<char>::id);
  uint64_t v69 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10LL);
  std::locale::~locale((std::locale *)&v74);
  std::ostream::put(&v75, v69);
  std::ostream::flush(&v75);
  sub_82924(a1, (uint64_t)v76);
  if (v77 < 0) {
    operator delete((void *)v76[8]);
  }
  std::streambuf::~streambuf(v76);
  return std::ios::~ios(&v78);
}

void sub_2C918( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
}

uint64_t sub_2CA14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_2CA1C(void *a1, uint64_t a2)
{
  if (a2 <= 0x7Fu)
  {
  }

  else if (!__maskrune(a2, 0x40000uLL))
  {
    goto LABEL_18;
  }

  if (BYTE1(a2) <= 0x7Fu)
  {
    if ((_DefaultRuneLocale.__runetype[BYTE1(a2)] & 0x40000) == 0) {
      goto LABEL_18;
    }
  }

  else if (!__maskrune(BYTE1(a2), 0x40000uLL))
  {
    goto LABEL_18;
  }

  if (BYTE2(a2) <= 0x7Fu)
  {
    if ((_DefaultRuneLocale.__runetype[BYTE2(a2)] & 0x40000) == 0) {
      goto LABEL_18;
    }
  }

  else if (!__maskrune(BYTE2(a2), 0x40000uLL))
  {
    goto LABEL_18;
  }

  if ((a2 & 0x80000000) != 0) {
    __uint32_t v4 = __maskrune(BYTE3(a2), 0x40000uLL);
  }
  else {
    __uint32_t v4 = _DefaultRuneLocale.__runetype[BYTE3(a2)] & 0x40000;
  }
  if (v4)
  {
    __s[0] = BYTE3(a2);
    __s[1] = BYTE2(a2);
    __s[2] = BYTE1(a2);
    __s[3] = a2;
    __s[4] = 0;
    size_t v5 = strlen(__s);
    sub_826EC(&v10, (uint64_t)__s, v5);
    goto LABEL_19;
  }

LABEL_18:
  std::ostream::operator<<(&v10, a2);
LABEL_19:
  sub_82924(a1, (uint64_t)v11);
  *(void *)((char *)v9
  uint64_t v10 = v6;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

  sub_6DD4();
  v42[0] = &qword_48F828;
  v42[1] = a1;
  __int16 v43 = sub_24DC0(a1);
  if (*(_DWORD *)(a1 + 1076) == 1)
  {
    id v18 = sub_138E8(1);
    if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    {
      uint64_t v19 = *(os_log_s **)v18;
      if (*(void *)v18)
      {
        if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
        {
          sub_33464(&__p, (unsigned int *)(a1 + 576));
          __int16 v20 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          int v45 = 1024;
          uint64_t v46 = 3910;
          BOOL v47 = 2080;
          size_t v48 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %s lost 1 buffer on last start/stop cycle (this is common and not likely a bug).",  buf,  0x1Cu);
        }
      }
    }
  }

  size_t v21 = *(_DWORD *)(a1 + 1076);
  if ((v21 & 0xFFFFFFFE) == 2)
  {
    int v22 = (os_log_t *)sub_138E8(1);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
    {
      sub_33464(&__p, (unsigned int *)(a1 + 576));
      uint64_t v24 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v25 = *(_DWORD *)(a1 + 1076);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      int v45 = 1024;
      uint64_t v46 = 3911;
      BOOL v47 = 2080;
      size_t v48 = v24;
      int v49 = 1024;
      uint64_t v50 = v25;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Device %s lost %u buffers on last start/stop cycle (this is not necessarily a bug, but if it persists, please file a radar against Audio - Routing).",  buf,  0x22u);
    }

    size_t v21 = *(_DWORD *)(a1 + 1076);
  }

  if (v21 >= 4)
  {
    __int16 v26 = (os_log_t *)sub_138E8(1);
    uint64_t v27 = *v26;
    if (*v26)
    {
      if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_33464(&__p, (unsigned int *)(a1 + 576));
        uint64_t v28 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        uint64_t v29 = *(_DWORD *)(a1 + 1076);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        int v45 = 1024;
        uint64_t v46 = 3912;
        BOOL v47 = 2080;
        size_t v48 = v28;
        int v49 = 1024;
        uint64_t v50 = v29;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d %s lost %u buffers on last start/stop cycle.",  buf,  0x22u);
      }
    }
  }

  uint64_t v30 = *(_BYTE *)(a1 + 1073);
  unsigned int v31 = std::uncaught_exceptions();
  uint64_t v33 = sub_24320(*(void *)(a1 + 640))
     && (int v32 = *(void *)(a1 + 464), !*(_DWORD *)(v32 + 112))
     && *(_DWORD *)(v32 + 116) == 0;
  *(_BYTE *)(a1 + 1073) = v33;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 1008) + 256LL))(*(void *)(a1 + 1008), a2);
  if (std::uncaught_exceptions() > v31) {
    *(_BYTE *)(a1 + 1073) = v30;
  }
  return sub_366B0((uint64_t)v42);
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a3)
  {
    int v22 = (os_log_t *)sub_138E8(13);
    __int16 v20 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = 136315394;
      uint64_t v28 = "HP_HardwarePlugInInterface.cpp";
      uint64_t v29 = 1024;
      uint64_t v30 = 444;
      size_t v21 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: HP_HardwarePlugIn_ObjectSet"
            "PropertyData: no address";
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  sub_92EF8();
  uint64_t v13 = sub_28AFEC(a2);
  int v14 = v13;
  if (!v13)
  {
    uint64_t v24 = (os_log_t *)sub_138E8(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = 136315394;
      uint64_t v28 = "HP_HardwarePlugInInterface.cpp";
      uint64_t v29 = 1024;
      uint64_t v30 = 447;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theObject is NULL]: HP_HardwarePlugIn_ObjectSetPropertyDat a: no object with given ID",  (uint8_t *)&v27,  0x12u);
    }

    __int16 v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v26 = &off_4865A0;
    v26[2] = 560947818;
  }

  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16LL))(v13);
  uint64_t v16 = v15;
  if (v15) {
    size_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16LL))(v15);
  }
  else {
    size_t v17 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 64LL))( v14,  a3,  a4,  a5,  a6,  a7,  0LL);
  if (v16 && v17) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24LL))(v16);
  }
  return 0LL;
}

    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }

  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    uint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

    if (v6 != v4) {
      goto LABEL_18;
    }
  }

  sub_93128((uint64_t)&v20);
  return v10;
}

  *char v12 = &v9[v17];
  return result;
}

    __uint32_t v4 = (void *)v4[1];
  }

  while (v4 != (void *)(a1 + 184));
  if (!(_DWORD)v6)
  {
LABEL_51:
    uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
    v68.__r_.__value_.__r.__words[0] = sub_1D7A2C(*(double **)(a2 + 8), v38);
    __int16 v39 = *(_DWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 316))
    {
      strcpy((char *)buf, "trsnbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      int v40 = sub_9DF04(0, v39, (uint64_t *)buf, (double *)&v68);
    }

    else
    {
      strcpy((char *)buf, "trsnbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      int v40 = sub_9DF04(1, v39, (uint64_t *)buf, (double *)&v68);
    }

    uint64_t v6 = v40;
    if ((_DWORD)v40)
    {
      uint64_t v41 = sub_138E8(16);
      int v42 = sub_138E8(36);
      __int16 v43 = 0;
      uint64_t v44 = 0LL;
      *(void *)buf = v5[411];
      int v45 = *(void *)(v41 + 8);
      while (1)
      {
        uint64_t v46 = *(int *)&buf[4 * v44];
        BOOL v47 = v43;
        if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
          break;
        }
        __int16 v43 = 1;
        uint64_t v44 = 1LL;
        if ((v47 & 1) != 0) {
          goto LABEL_61;
        }
      }

      if ((v45 & v46) == 0) {
        uint64_t v41 = v42;
      }
LABEL_61:
      size_t v48 = *(os_log_s **)v41;
      if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        int v49 = v68.__r_.__value_.__r.__words[0];
        sub_2CA1C(&__p, v6);
        uint64_t v50 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        std::locale v72 = 1024;
        char v73 = 205;
        std::string v74 = 2048;
        uint64_t v75 = *(double *)&v49;
        unint64_t v76 = 2080;
        char v77 = v50;
        _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Waiting for aggregate device's sample rate to update to %f Hz failed with result '%s'",  buf,  0x26u);
      }
    }
  }

  int v51 = 0;
  size_t v52 = 0LL;
  *(_WORD *)buf = 256;
  do
  {
    BOOL v53 = v51;
    if (buf[v52]) {
      uint64_t v54 = 544LL;
    }
    else {
      uint64_t v54 = 520LL;
    }
    if (buf[v52]) {
      uint64_t v55 = a1 + 544;
    }
    else {
      uint64_t v55 = a1 + 520;
    }
    BOOL v56 = *(uint64_t ***)(a1 + v54);
    uint64_t v57 = *(uint64_t ***)(v55 + 8);
    while (v56 != v57)
    {
      sub_27E044(*v56, 0LL);
      v56 += 2;
    }

    int v51 = 1;
    size_t v52 = 1LL;
  }

  while ((v53 & 1) == 0);
  return v6;
}

  uint64_t v13 = v8;
  while (1)
  {
    int v14 = *((_DWORD *)v13 + 8);
    if (v14 <= 0x6E637275) {
      break;
    }
LABEL_22:
    uint64_t v13 = (uint64_t *)*v13;
    if (!v13)
    {
      char v12 = 0LL;
      goto LABEL_25;
    }
  }

  if (v14 != 1852011125)
  {
    ++v13;
    goto LABEL_22;
  }

  char v12 = sub_10338C(v8, 0x6E637275u);
  size_t v8 = *v7;
LABEL_25:
  if (!v8) {
    goto LABEL_31;
  }
  uint64_t v15 = v8;
  while (2)
  {
    uint64_t v16 = *((_DWORD *)v15 + 8);
    if (v16 > 0x70707570)
    {
LABEL_30:
      uint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_31;
      }
      continue;
    }

    break;
  }

  if (v16 != 1886418288)
  {
    ++v15;
    goto LABEL_30;
  }

  int v128 = v209[0];
  if (!v209[0]) {
    goto LABEL_31;
  }
  while (2)
  {
    int v129 = *((_DWORD *)v128 + 8);
    if (v129 > 0x70707570)
    {
LABEL_231:
      int v128 = (uint64_t *)*v128;
      if (!v128) {
        goto LABEL_31;
      }
      continue;
    }

    break;
  }

  if (v129 != 1886418288)
  {
    ++v128;
    goto LABEL_231;
  }

  uint64_t v164 = sub_10338C(v8, 0x70707570u)[1];
  unint64_t v165 = sub_10338C(*v7, 0x70707570u);
  sub_103310((uint64_t)&v210, v164, (uint64_t)v165);
  unint64_t v166 = sub_10338C(v209[0], 0x70707570u)[1];
  std::string v167 = sub_10338C(v209[0], 0x70707570u);
  sub_103310((uint64_t)&v197, v166, (uint64_t)v167);
  *(_OWORD *)&v196.__r_.__value_.__r.__words[1] = 0uLL;
  v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196.__r_.__value_.__l.__size_;
  sub_1033D4((uint64_t)buf, v210, &v211, v197, &v198, (uint64_t)&v196, (uint64_t)&v196.__r_.__value_.__l.__size_);
  char v168 = (std::string::__raw *)v196.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v196.__r_.__value_.__l.__data_ != &v196.__r_.__value_.__r.__words[1])
  {
    do
    {
      unint64_t v169 = sub_10338C(*v7, 0x70707570u);
      sub_F7548(v169, (uint64_t *)&v168[1].__words[1]);
      unint64_t v170 = (std::string *)v168->__words[1];
      if (v170)
      {
        do
        {
          UInt32 v171 = v170;
          unint64_t v170 = (std::string *)v170->__r_.__value_.__r.__words[0];
        }

        while (v170);
      }

      else
      {
        do
        {
          UInt32 v171 = (std::string *)v168->__words[2];
          uint64_t v30 = v171->__r_.__value_.__r.__words[0] == (void)v168;
          char v168 = (std::string::__raw *)v171;
        }

        while (!v30);
      }

      char v168 = (std::string::__raw *)v171;
    }

    while (v171 != (std::string *)&v196.__r_.__value_.__r.__words[1]);
  }

  sub_FF3B8((void *)v196.__r_.__value_.__l.__size_);
  sub_FF3B8(v198);
  sub_FF3B8(v211);
LABEL_31:
  if (!(v186 | v183)) {
    goto LABEL_146;
  }
  uint64_t v198 = 0LL;
  int v199 = 0LL;
  int v197 = (os_unfair_lock_s **)&v198;
  sub_1033D4((uint64_t)buf, v206, v207, v202, v203, (uint64_t)&v197, (uint64_t)&v198);
  sub_1033D4((uint64_t)buf, v204, v205, v200, v201, (uint64_t)&v197, (uint64_t)v197);
  uint64_t v172 = v12;
  uint64_t v173 = v11;
  if (v199)
  {
    size_t v17 = (os_log_t *)sub_138E8(9);
    id v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = v197;
      memset(&v196, 0, sizeof(v196));
      std::string::append(&v196, "{ ", 2uLL);
      if (v19 != (os_unfair_lock_s **)&v198)
      {
        while (1)
        {
          sub_D3ECC(&v210, v19 + 4);
          if (v212 >= 0) {
            __int16 v20 = (const std::string::value_type *)&v210;
          }
          else {
            __int16 v20 = v210;
          }
          if (v212 >= 0) {
            size_t v21 = HIBYTE(v212);
          }
          else {
            size_t v21 = (std::string::size_type)v211;
          }
          std::string::append(&v196, v20, v21);
          if (SHIBYTE(v212) < 0) {
            operator delete(v210);
          }
          int v22 = v19[1];
          if (v22)
          {
            do
            {
              uint64_t v23 = (os_unfair_lock_s ***)v22;
              int v22 = *(os_unfair_lock_s **)&v22->_os_unfair_lock_opaque;
            }

            while (v22);
          }

          else
          {
            do
            {
              uint64_t v23 = (os_unfair_lock_s ***)v19[2];
              uint64_t v30 = *v23 == v19;
              uint64_t v19 = (os_unfair_lock_s **)v23;
            }

            while (!v30);
          }

          if (v23 == &v198) {
            break;
          }
          std::string::append(&v196, ", ", 2uLL);
          uint64_t v19 = (os_unfair_lock_s **)v23;
        }
      }

      std::string::append(&v196, " }", 2uLL);
      if ((v196.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v24 = &v196;
      }
      else {
        uint64_t v24 = (std::string *)v196.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 916;
      unint64_t v214 = 2080;
      unsigned int v215 = v24;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d The following ports are being redundantly connected or disconnected. Ignoring prior connections/disconnections. %s",  buf,  0x1Cu);
      char v12 = v172;
    }

    uint64_t v25 = 0;
    __int16 v26 = 0LL;
    *(void *)buf = v11;
    *(void *)&buf[8] = v12;
    do
    {
      uint64_t v27 = v25;
      uint64_t v28 = *(uint64_t **)&buf[8 * v26];
      uint64_t v29 = v197;
      if (v28) {
        uint64_t v30 = v197 == (os_unfair_lock_s **)&v198;
      }
      else {
        uint64_t v30 = 1;
      }
      if (!v30)
      {
        do
        {
          sub_F7548(v28, (uint64_t *)v29 + 4);
          unsigned int v31 = v29[1];
          if (v31)
          {
            do
            {
              int v32 = (os_unfair_lock_s ***)v31;
              unsigned int v31 = *(os_unfair_lock_s **)&v31->_os_unfair_lock_opaque;
            }

            while (v31);
          }

          else
          {
            do
            {
              int v32 = (os_unfair_lock_s ***)v29[2];
              uint64_t v30 = *v32 == v29;
              uint64_t v29 = (os_unfair_lock_s **)v32;
            }

            while (!v30);
          }

          uint64_t v29 = (os_unfair_lock_s **)v32;
        }

        while (v32 != &v198);
      }

      uint64_t v25 = 1;
      __int16 v26 = 1LL;
    }

    while ((v27 & 1) == 0);
    char v12 = v172;
    uint64_t v11 = v173;
  }

  sub_FF3B8(v198);
  if (v183)
  {
    int v211 = 0LL;
    v212 = 0LL;
    int v210 = (std::string::value_type *)&v211;
    sub_1033D4((uint64_t)buf, v206, v207, v200, v201, (uint64_t)&v210, (uint64_t)&v211);
    uint64_t v33 = v210;
    if (v210 != (std::string::value_type *)&v211)
    {
      do
      {
        sub_F7548(v177, (uint64_t *)v33 + 4);
        sub_F7548(&v181, (uint64_t *)v33 + 4);
        uint64_t v34 = (std::string::value_type *)*((void *)v33 + 1);
        if (v34)
        {
          do
          {
            __int16 v35 = (std::string::value_type **)v34;
            uint64_t v34 = *(std::string::value_type **)v34;
          }

          while (v34);
        }

        else
        {
          do
          {
            __int16 v35 = (std::string::value_type **)*((void *)v33 + 2);
            uint64_t v30 = *v35 == v33;
            uint64_t v33 = (std::string::value_type *)v35;
          }

          while (!v30);
        }

        uint64_t v33 = (std::string::value_type *)v35;
      }

      while (v35 != (std::string::value_type **)&v211);
    }

    size_t v36 = 0;
    uint64_t v37 = 0LL;
    *(void *)buf = v11;
    *(void *)&buf[8] = v12;
    do
    {
      uint64_t v38 = v36;
      __int16 v39 = *(uint64_t **)&buf[8 * v37];
      int v40 = v210;
      if (v39) {
        uint64_t v41 = v210 == (std::string::value_type *)&v211;
      }
      else {
        uint64_t v41 = 1;
      }
      if (!v41)
      {
        do
        {
          sub_F7548(v39, (uint64_t *)v40 + 4);
          int v42 = (std::string::value_type *)*((void *)v40 + 1);
          if (v42)
          {
            do
            {
              __int16 v43 = (std::string::value_type **)v42;
              int v42 = *(std::string::value_type **)v42;
            }

            while (v42);
          }

          else
          {
            do
            {
              __int16 v43 = (std::string::value_type **)*((void *)v40 + 2);
              uint64_t v30 = *v43 == v40;
              int v40 = (std::string::value_type *)v43;
            }

            while (!v30);
          }

          int v40 = (std::string::value_type *)v43;
        }

        while (v43 != (std::string::value_type **)&v211);
      }

      size_t v36 = 1;
      uint64_t v37 = 1LL;
    }

    while ((v38 & 1) == 0);
    uint64_t v44 = 0;
    int v45 = 0LL;
    *(void *)buf = 0x6E63727566637275LL;
    char v12 = v172;
    uint64_t v11 = v173;
    while (1)
    {
      uint64_t v46 = v44;
      if (!v209[0]) {
        goto LABEL_106;
      }
      BOOL v47 = *(_DWORD *)&buf[4 * v45];
      size_t v48 = v209[0];
      while (1)
      {
        int v49 = *((_DWORD *)v48 + 8);
        if (v47 >= v49) {
          break;
        }
LABEL_96:
        size_t v48 = (uint64_t *)*v48;
        if (!v48) {
          goto LABEL_106;
        }
      }

      if (v49 < v47) {
        break;
      }
      uint64_t v50 = sub_10338C(v209[0], v47);
      int v51 = v210;
      if (v210 != (std::string::value_type *)&v211)
      {
        size_t v52 = v50;
        do
        {
          sub_F7548(v52, (uint64_t *)v51 + 4);
          BOOL v53 = (std::string::value_type *)*((void *)v51 + 1);
          if (v53)
          {
            do
            {
              uint64_t v54 = (std::string::value_type **)v53;
              BOOL v53 = *(std::string::value_type **)v53;
            }

            while (v53);
          }

          else
          {
            do
            {
              uint64_t v54 = (std::string::value_type **)*((void *)v51 + 2);
              uint64_t v30 = *v54 == v51;
              int v51 = (std::string::value_type *)v54;
            }

            while (!v30);
          }

          int v51 = (std::string::value_type *)v54;
        }

        while (v54 != (std::string::value_type **)&v211);
      }

  operator delete(a1);
}

      LODWORD(v2) = 0;
    }
  }

  uint64_t v11 = (os_log_t *)sub_138E8(17);
  char v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = "Disabling";
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
    buf.AudioObjectPropertySelector mSelector = 136315650;
    if ((_DWORD)v2) {
      uint64_t v13 = "Enabling";
    }
    uint64_t v19 = 1024;
    __int16 v20 = 1831;
    size_t v21 = 2080;
    int v22 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s wind filter.", (uint8_t *)&buf, 0x1Cu);
  }

  if (*(unsigned __int8 *)(a1 + 680) == (_DWORD)v2)
  {
    int v14 = sub_138E8(17);
    if ((*(_BYTE *)(v14 + 8) & 1) != 0)
    {
      uint64_t v15 = *(os_log_s **)v14;
      if (*(void *)v14)
      {
        if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = "Disabled";
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
          buf.AudioObjectPropertySelector mSelector = 136315650;
          if ((_DWORD)v2) {
            uint64_t v16 = "Enabled";
          }
          uint64_t v19 = 1024;
          __int16 v20 = 1842;
          size_t v21 = 2080;
          int v22 = v16;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d The wind filter was already %s.  Using cached state.",  (uint8_t *)&buf,  0x1Cu);
        }
      }
    }
  }

  else
  {
    size_t v17 = (int)v2;
    strcpy((char *)&buf, "fnw6tpni");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    sub_3686A0(a1, &buf, 0, 0LL, 4u, (float *)&v17);
    *(_BYTE *)(a1 + 680) = (_BYTE)v2;
  }

    if (a1 != v4) {
      return 1918989668LL;
    }
    return 1919117428LL;
  }

  if (a1 > 1987081838)
  {
    if (a1 > 1987211116)
    {
      if (a1 == 1987211117) {
        return result;
      }
      size_t v5 = 29545;
    }

    else
    {
      if (a1 == 1987081839) {
        return 1919117428LL;
      }
      size_t v5 = 25447;
    }

    uint64_t v3 = v5 | 0x76720000;
    goto LABEL_26;
  }

  if (a1 > 1987077986)
  {
    if (a1 == 1987077987) {
      return 1919117428LL;
    }
    __uint32_t v4 = 1987081833;
    goto LABEL_18;
  }

  if (a1 == 1986556788) {
    return result;
  }
  uint64_t v3 = 1986884455;
LABEL_26:
  if (a1 != v3) {
    return 1918989668LL;
  }
  return result;
}

          __uint32_t v4 = 1;
          goto LABEL_19;
        }

        if (*(_DWORD *)&buf[8] == 1836343851) {
          goto LABEL_18;
        }
        id v9 = 1836344107;
      }

      if (*(_DWORD *)&buf[8] == v9) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v6 = (v6 + 1);
      if (v3 == (_DWORD)v6) {
        goto LABEL_22;
      }
    }
  }

  size_t v5 = 0;
  __uint32_t v4 = 0;
LABEL_22:
  uint64_t v10 = 0;
  uint64_t v11 = 0LL;
  uint64_t v69 = 256;
  do
  {
    uint64_t v65 = v10;
    double v66 = *((unsigned __int8 *)&v69 + v11);
    char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
    if (!v12) {
      goto LABEL_57;
    }
    uint64_t v13 = 0LL;
    do
    {
      memset(buf, 0, 24);
      int v14 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 96LL))(a1, v66 != 0, v13);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 96LL))(v14, buf);
      uint64_t v16 = *(void *)buf;
      uint64_t v15 = *(void *)&buf[8];
      if (*(void *)buf == *(void *)&buf[8]) {
        goto LABEL_54;
      }
      do
      {
        size_t v17 = *(_DWORD *)(v16 + 8);
        if (v17 != 1819304813)
        {
          if ((v5 & 1) == 0
            || (v17 != 1633889587 ? (id v18 = v17 == 1667326771) : (id v18 = 1),
                !v18 ? (uint64_t v19 = v17 == 1667588915) : (uint64_t v19 = 1),
                !v19))
          {
            if ((v4 & 1) == 0) {
              goto LABEL_52;
            }
            if (v17 > 1836343850)
            {
              if (v17 != 1836344107)
              {
                __int16 v20 = 1836343851;
LABEL_41:
                if (v17 != v20) {
                  goto LABEL_52;
                }
              }
            }

            else if (v17 != 1667443507)
            {
              __int16 v20 = 1667509043;
              goto LABEL_41;
            }
          }
        }

        unsigned int v68 = *(_OWORD *)(v16 + 40);
        size_t v21 = v71;
        int v22 = &v71;
        uint64_t v23 = &v71;
        if (v71)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v23 = (uint64_t **)v21;
              uint64_t v24 = *((double *)v21 + 4);
              size_t v21 = (uint64_t *)*v21;
              int v22 = v23;
              if (!*v23) {
                goto LABEL_49;
              }
            }

            size_t v21 = (uint64_t *)v21[1];
            if (!v21)
            {
              int v22 = v23 + 1;
              goto LABEL_49;
            }
          }
        }

        else
        {
LABEL_49:
          uint64_t v25 = operator new(0x30uLL);
          v25[2] = v68;
          *(void *)uint64_t v25 = 0LL;
          *((void *)v25 + 1) = 0LL;
          *((void *)v25 + 2) = v23;
          const std::locale::facet *v22 = (uint64_t *)v25;
          if (*v70)
          {
            uint64_t v70 = (uint64_t **)*v70;
            uint64_t v25 = *v22;
          }

          sub_7A420(v71, (uint64_t *)v25);
          ++v72;
        }

      id v9 = (uint64_t *)v9[1];
    }

    while (v9 != &v18);
  }

  sub_1BB88(&v18);
  sub_1BB88(v21);
  sub_85B80(v20);
}

        if (v12 <= 1)
        {
          int v14 = (os_log_t *)sub_138E8(24);
          uint64_t v15 = *v14;
          if (*v14)
          {
            if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315650;
              *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 334;
              HIWORD(buf[1].mScope) = 1024;
              buf[1].AudioObjectPropertyElement mElement = v12;
              _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : Volume map has invalid number of steps: %u < 2, fallback to default",  (uint8_t *)buf,  0x18u);
            }
          }
        }

        for (uint64_t i = (float *)__p; i != (float *)v92; ++i)
        {
          if (*i != 0.0) {
            goto LABEL_57;
          }
        }

        __int16 v39 = (os_log_t *)sub_138E8(24);
        int v40 = *v39;
        if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 336;
          _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : Volume map contains all zeroes, fallback to default",  (uint8_t *)buf,  0x12u);
        }

  if (v320[66] == 1752709424) {
    sub_1BAC98(*((_DWORD *)a2 + 3), (uint64_t)v10);
  }
  if ((sub_105B8C(*(uint64_t **)(a5 + 8), 1) & 1) == 0)
  {
    int v263 = (os_log_t *)sub_138E8(13);
    int v264 = *v263;
    if (*v263 && os_log_type_enabled(*v263, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 144;
      _os_log_impl(&dword_0, v264, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v265 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v265, "Precondition failure.");
  }

  unsigned int v31 = sub_105C24(a5, 1);
  sub_1B5F60(v317, (uint64_t)v320, (uint64_t)a2, *(void *)(v31 + 56), *((_DWORD *)a2 + 3), 0);
  sub_1BB524((unsigned int **)v317, (uint64_t *)(v31 + 16), v10);
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  int v32 = (std::__shared_weak_count *)v9[5];
  if (v32)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v32);
    if (!v33)
    {
      uint64_t v34 = *(std::__shared_weak_count **)&buf[8];
      *(void *)buf = 0LL;
      *(void *)&buf[8] = 0LL;
      if (!v34) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }

    uint64_t v34 = v33;
    __int16 v35 = v9[4];
    p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
    do
      uint64_t v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
    uint64_t v38 = *(std::__shared_weak_count **)&buf[8];
    *(void *)buf = v35;
    *(void *)&buf[8] = v34;
    if (v38) {
      std::__shared_weak_count::__release_weak(v38);
    }
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      int v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
LABEL_32:
      std::__shared_weak_count::__release_weak(v34);
    }
  }

      __uint32_t v4 = 0LL;
      size_t v5 = 0LL;
      goto LABEL_20;
    }
  }

  __uint32_t v4 = 0LL;
LABEL_20:
  uint64_t v11 = (os_log_t *)sub_138E8(10);
  char v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(&__p, (uint64_t)v5);
    uint64_t v13 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    int v60 = 1024;
    uint64_t v61 = 160;
    __int16 v62 = 2080;
    *(void *)uint64_t v63 = "com.apple.preferences-sounds/latenightmode";
    *(_WORD *)&v63[8] = 2080;
    int v64 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
  }

  int v14 = sub_240CF0();
  if (!sub_1CCDF8() || sub_240CF0() == 4)
  {
    uint64_t v15 = 0LL;
    goto LABEL_30;
  }

  __p.__r_.__value_.__s.__data_[0] = 0;
  BOOL v47 = sub_32D3B0(@"enhancedialoguelevel", @"com.apple.preferences-sounds", &__p);
  if (!__p.__r_.__value_.__s.__data_[0])
  {
    BOOL v53 = sub_138E8(10);
    if ((*(_BYTE *)(v53 + 8) & 1) == 0) {
      goto LABEL_98;
    }
    uint64_t v54 = *(os_log_t *)v53;
    if (!*(void *)v53 || !os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_98;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    int v60 = 1024;
    uint64_t v61 = 256;
    __int16 v62 = 2080;
    *(void *)uint64_t v63 = "com.apple.preferences-sounds/enhancedialoguelevel";
    uint64_t v50 = "%25s:%-5d No preference for %s. Using default.";
    int v51 = v54;
    size_t v52 = OS_LOG_TYPE_DEBUG;
    goto LABEL_97;
  }

  uint64_t v15 = v47;
  if (v47 >= 4)
  {
    size_t v48 = (os_log_t *)sub_138E8(10);
    int v49 = *v48;
    if (!*v48 || !os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR)) {
      goto LABEL_98;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    int v60 = 1024;
    uint64_t v61 = 249;
    __int16 v62 = 2080;
    *(void *)uint64_t v63 = "com.apple.preferences-sounds/enhancedialog";
    uint64_t v50 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    int v51 = v49;
    size_t v52 = OS_LOG_TYPE_ERROR;
LABEL_97:
    _os_log_impl(&dword_0, v51, v52, v50, buf, 0x1Cu);
LABEL_98:
    uint64_t v15 = 0LL;
  }

  uint64_t v55 = (os_log_t *)sub_138E8(10);
  BOOL v56 = *v55;
  if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    int v60 = 1024;
    uint64_t v61 = 260;
    __int16 v62 = 2080;
    *(void *)uint64_t v63 = "com.apple.preferences-sounds/enhancedialoguelevel";
    *(_WORD *)&v63[8] = 1024;
    LODWORD(v64) = v15;
    _os_log_impl(&dword_0, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
  }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a3)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    int v14 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      id v18 = 136315394;
      uint64_t v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      size_t v21 = 621;
      uint64_t v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: HP_HardwarePlugIn_DeviceAddIOP"
            "roc: no IOProc to add";
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  sub_92EF8();
  uint64_t v7 = (_DWORD *)sub_28AFEC(a2);
  if (!v7 || (size_t v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      id v18 = 136315394;
      uint64_t v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      size_t v21 = 625;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceAddIOProc: no device with given ID",  (uint8_t *)&v18,  0x12u);
    }

    char v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v12 = &off_4865A0;
    v12[2] = 560227702;
  }

  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 312LL))(v7, a3, a4);
  return 0LL;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a3)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    char v12 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = 136315394;
      size_t v17 = "HP_HardwarePlugInInterface.cpp";
      id v18 = 1024;
      uint64_t v19 = 650;
      uint64_t v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: HP_HardwarePlugIn_DeviceRemove"
            "IOProc: no IOProc to remove";
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  sub_92EF8();
  size_t v5 = (_DWORD *)sub_28AFEC(a2);
  if (!v5 || (uint64_t v6 = v5[3], v6 != 1633773415) && v6 != 1633969526)
  {
    size_t v8 = (os_log_t *)sub_138E8(13);
    id v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = 136315394;
      size_t v17 = "HP_HardwarePlugInInterface.cpp";
      id v18 = 1024;
      uint64_t v19 = 654;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceRemoveIOProc: no device with given ID",  (uint8_t *)&v16,  0x12u);
    }

    uint64_t v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v10 = &off_4865A0;
    v10[2] = 560227702;
  }

  (*(void (**)(_DWORD *, uint64_t))(*(void *)v5 + 328LL))(v5, a3);
  return 0LL;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a3)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    char v12 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = 136315394;
      size_t v17 = "HP_HardwarePlugInInterface.cpp";
      id v18 = 1024;
      uint64_t v19 = 830;
      uint64_t v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outTime is NULL]: HP_HardwarePlugIn_DeviceGetCu"
            "rrentTime: no place for the return data";
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  sub_92EF8();
  size_t v5 = (_DWORD *)sub_28AFEC(a2);
  if (!v5 || (uint64_t v6 = v5[3], v6 != 1633773415) && v6 != 1633969526)
  {
    size_t v8 = (os_log_t *)sub_138E8(13);
    id v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = 136315394;
      size_t v17 = "HP_HardwarePlugInInterface.cpp";
      id v18 = 1024;
      uint64_t v19 = 834;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceGetCurrentTime : no device with given ID",  (uint8_t *)&v16,  0x12u);
    }

    uint64_t v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v10 = &off_4865A0;
    v10[2] = 560227702;
  }

  (*(void (**)(_DWORD *, uint64_t))(*(void *)v5 + 608LL))(v5, a3);
  return 0LL;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (!a3)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    int v14 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      id v18 = 136315394;
      uint64_t v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      size_t v21 = 889;
      uint64_t v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioRequestedStartTime is NULL]: HP_HardwarePlugI"
            "n_DeviceGetNearestStartTime: no time stamp";
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  sub_92EF8();
  uint64_t v7 = (_DWORD *)sub_28AFEC(a2);
  if (!v7 || (size_t v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      id v18 = 136315394;
      uint64_t v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      size_t v21 = 893;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceGetNearestStar tTime: no device with given ID",  (uint8_t *)&v18,  0x12u);
    }

    char v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v12 = &off_4865A0;
    v12[2] = 560227702;
  }

  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 624LL))(v7, a3, a4);
  return 0LL;
}

    sub_1BB88((uint64_t *)buf);
  }

  else
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 60));
    sub_B20B8(&v14, (uint64_t)&qword_49CF68);
    sub_6DD4();
    if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
    {
      size_t v8 = operator new(0x10uLL);
      sub_6DD4();
      sub_B20B8(v8, (uint64_t)&qword_48F828);
    }

    else
    {
      size_t v8 = 0LL;
    }

    v13[0] = &qword_49CF50;
    v13[1] = a1;
    id v9 = (dispatch_queue_s *)sub_869B4();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))(qword_49CF68 + 16))(&qword_49CF68);
      *(void *)buf = buf;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0LL;
      uint64_t v11 = (uint64_t *)qword_49CF58;
      if ((uint64_t *)qword_49CF58 != &qword_49CF50)
      {
        while (1)
        {
          char v12 = (uint64_t *)v11[1];
          if (v11[2] == a1) {
            break;
          }
LABEL_29:
          uint64_t v11 = v12;
          if (v12 == &qword_49CF50) {
            goto LABEL_32;
          }
        }

        while (v12 != &qword_49CF50)
        {
          if (v12[2] != a1)
          {
            sub_1176BC((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_49CF50, v11, v12);
            char v12 = (uint64_t *)v12[1];
            goto LABEL_29;
          }

          char v12 = (uint64_t *)v12[1];
        }

        sub_1176BC((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_49CF50, v11, &qword_49CF50);
      }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (qword_4A91B0 != qword_4A91B8)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2585;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_18;
  }

  unsigned __int8 v0 = qword_4A9190;
  sub_55C64((uint64_t)&qword_4A0600);
  if (v0) {
    uint64_t v1 = (uint64_t **)&qword_4A0618;
  }
  else {
    uint64_t v1 = (uint64_t **)&qword_4A0600;
  }
  *(_DWORD *)buf = HIDWORD(qword_4A9190);
  *(_OWORD *)&buf[8] = xmmword_4A9198;
  uint64_t v2 = sub_2D5594(v1, HIDWORD(qword_4A9190), xmmword_4A9198, (uint64_t)buf);
  *((_DWORD *)v2 + 22) = 1024;
  v2[92] = 1;
  sub_55C64((uint64_t)&qword_4A0600);
  *(void *)buf = 0x696D646600000001LL;
  *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
  uint64_t v15 = 0;
  size_t v17 = 0LL;
  id v18 = 0LL;
  uint64_t v16 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A0600, (uint64_t)buf, qword_4A0500);
  *(void *)buf = 0x766C737300000001LL;
  *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
  uint64_t v15 = 0;
  size_t v17 = 0LL;
  id v18 = 0LL;
  uint64_t v16 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A0600, (uint64_t)buf, qword_4A0520);
  *(void *)buf = 0x7261772000000001LL;
  *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
  uint64_t v15 = 0;
  size_t v17 = 0LL;
  id v18 = 0LL;
  uint64_t v16 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A0600, (uint64_t)buf, qword_4A0510);
  for (uint64_t i = 0LL; i != 20; i += 4LL)
  {
    __uint32_t v4 = *(_DWORD *)&aOvpvivpvcgpvcv[i];
    *(_DWORD *)buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
    uint64_t v15 = 0;
    size_t v17 = 0LL;
    id v18 = 0LL;
    uint64_t v16 = 0LL;
    sub_2D5228((uint64_t **)&qword_4A0600, (uint64_t)buf, qword_4A0540);
  }

  size_t v5 = 0LL;
  qmemcpy(v13, "comicvmitcmg", 12);
  do
  {
    uint64_t v6 = *(_DWORD *)((char *)v13 + v5);
    *(_DWORD *)buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
    uint64_t v15 = 0;
    size_t v17 = 0LL;
    id v18 = 0LL;
    uint64_t v16 = 0LL;
    sub_2D5228((uint64_t **)&qword_4A0600, (uint64_t)buf, qword_4A0540);
    v5 += 4LL;
  }

  while (v5 != 12);
  return sub_2D6400((uint64_t)&qword_4A0600, (int *)&qword_4A9190, (uint64_t)&dword_4A0408, 0);
}

  size_t v48 = 0LL;
  int v49 = 0LL;
  uint64_t v50 = 0LL;
  sub_7A5B8(&v48, v51.__r_.__value_.__l.__data_, v4, (int64_t)(v4 - v51.__r_.__value_.__r.__words[0]) >> 2);
  if (v51.__r_.__value_.__r.__words[0]) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  v46[0] = 0LL;
  v46[1] = 0LL;
  BOOL v47 = 0LL;
  uint64_t v13 = v48;
  int v14 = v49;
  int v42 = v48;
  if (v48 != v49)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      strcpy(v57, "diucbolg");
      v57[9] = 0;
      int v58 = 0;
      if ((sub_AF090(v15) & 1) == 0)
      {
        *(_DWORD *)buf = 2003332927;
        buf[8] = 0;
        _BYTE buf[24] = 0;
LABEL_67:
        __int16 v39 = __cxa_allocate_exception(0x10uLL);
        int v40 = *(_DWORD *)buf;
        *(void *)__int16 v39 = &off_4865A0;
        v39[2] = v40;
      }

      *(_DWORD *)buf = 2003329396;
      buf[8] = 0;
      _BYTE buf[24] = 0;
      if (sub_AF2A0(v15))
      {
        uint64_t v59 = 0LL;
        *(_DWORD *)buf = sub_AF2F8(v15);
        if (!*(_DWORD *)buf)
        {
          _BYTE buf[24] = 1;
          *(void *)&buf[8] = &off_483688;
          *(void *)&buf[16] = v59;
          __int128 __p = &off_483688;
          uint64_t v55 = 0LL;
          sub_39FD8(&__p);
        }
      }

      if (*(_DWORD *)buf || !buf[24]) {
        goto LABEL_67;
      }
      size_t v52 = off_485B28;
      uint64_t v16 = *(const __CFString **)&buf[16];
      if (!*(void *)&buf[16]) {
        break;
      }
      CFRetain(*(CFTypeRef *)&buf[16]);
      size_t v52 = (uint64_t (**)())&off_483688;
      theString = v16;
      if (buf[24]) {
        goto LABEL_31;
      }
LABEL_32:
      size_t v17 = (os_log_t *)sub_138E8(6);
      id v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
      {
        sub_48E98(&__p, theString);
        p_p = &__p;
        if (v56 < 0) {
          p_p = __p;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "TimeSyncClockDeviceManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 135;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = p_p;
        _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Clock device '%s' is available", buf, 0x1Cu);
        if (v56 < 0) {
          operator delete(__p);
        }
      }

      memset(&v51, 0, sizeof(v51));
      if (theString)
      {
        CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
        if (CStringPtr)
        {
          sub_90AD0(&v51, CStringPtr);
        }

        else
        {
          *(void *)buf = 0LL;
          size_t v21 = theString;
          v63.length = CFStringGetLength(theString);
          v63.locatiouint64_t n = 0LL;
          CFStringGetBytes(v21, v63, 0x8000100u, 0, 0, 0LL, 0LL, (CFIndex *)buf);
          int v22 = *(void *)buf + 1LL;
          if (*(void *)buf == -1LL)
          {
            uint64_t v23 = 0LL;
          }

          else
          {
            uint64_t v23 = operator new(*(void *)buf + 1LL);
            bzero(v23, v22);
          }

          uint64_t v24 = theString;
          v64.length = CFStringGetLength(theString);
          v64.locatiouint64_t n = 0LL;
          CFStringGetBytes(v24, v64, 0x8000100u, 0, 0, (UInt8 *)v23, *(CFIndex *)buf, (CFIndex *)buf);
          *((_BYTE *)v23 + *(void *)buf) = 0;
          sub_90AD0(&v51, (char *)v23);
          operator delete(v23);
        }
      }

      sub_39FD8(&v52);
      uint64_t v25 = (_OWORD *)v46[1];
      if (v46[1] >= v47)
      {
        uint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v46[1] - v46[0]) >> 3);
        uint64_t v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A87C();
        }
        else {
          uint64_t v29 = v28;
        }
        __int16 v62 = &v47;
        if (v29) {
          uint64_t v29 = (unint64_t)sub_8D44C(v29);
        }
        else {
          uint64_t v30 = 0LL;
        }
        unsigned int v31 = v29 + 24 * v27;
        *(void *)buf = v29;
        *(void *)&buf[8] = v31;
        *(void *)&_BYTE buf[24] = v29 + 24 * v30;
        int v32 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
        *(void *)(v31 + 16) = v51.__r_.__value_.__l.__cap_;
        *(_OWORD *)unsigned int v31 = v32;
        memset(&v51, 0, sizeof(v51));
        *(void *)&buf[16] = v31 + 24;
        sub_4802C(v46, buf);
        uint64_t v33 = v46[1];
        sub_480A0((uint64_t)buf);
        v46[1] = v33;
      }

      else
      {
        __int16 v26 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
        *(void *)(v46[1] + 16) = v51.__r_.__value_.__l.__cap_;
        os_log_s *v25 = v26;
        memset(&v51, 0, sizeof(v51));
        v46[1] = (uint64_t)v25 + 24;
      }

      v13 += 4;
      if (v13 == v14)
      {
        uint64_t v34 = (__int128 *)v46[0];
        __int16 v35 = (__int128 *)v46[1];
        goto LABEL_62;
      }
    }

    size_t v52 = (uint64_t (**)())&off_483688;
    theString = 0LL;
LABEL_31:
    sub_39FD8(&buf[8]);
    goto LABEL_32;
  }

  __int16 v35 = 0LL;
  uint64_t v34 = 0LL;
LABEL_62:
  __int16 v43 = 0LL;
  uint64_t v44 = 0LL;
  int v45 = 0LL;
  sub_8DC78((char *)&v43, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  *(void *)buf = a1;
  memset(&buf[8], 0, 24);
  sub_8DC78(&buf[8], v43, v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v43) >> 3));
  size_t v36 = *(dispatch_queue_s **)(a1 + 168);
  uint64_t v37 = operator new(0x20uLL);
  uint64_t v38 = *(__int128 **)&buf[8];
  *(void *)uint64_t v37 = *(void *)buf;
  *((void *)v37 + 1) = 0LL;
  *((void *)v37 + 2) = 0LL;
  *((void *)v37 + 3) = 0LL;
  sub_8DC78( (char *)v37 + 8,  v38,  *(__int128 **)&buf[16],  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[16] - (void)v38) >> 3));
  __int128 __p = 0LL;
  dispatch_async_f(v36, v37, (dispatch_function_t)sub_32B138);
  sub_32B998((void ***)&__p);
  __int128 __p = &buf[8];
  sub_8CD60((void ***)&__p);
  *(void *)buf = &v43;
  sub_8CD60((void ***)buf);
  *(void *)buf = v46;
  sub_8CD60((void ***)buf);
  if (v42) {
    operator delete(v42);
  }
}

  *char v12 = &v9[v17];
  return result;
}

void sub_2CBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2CBF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

std::string *sub_2CC00(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::reserve(a1, 0x40uLL);
  std::to_string(&v44, *(_DWORD *)(a2 + 32));
  __uint32_t v4 = std::string::insert(&v44, 0LL, "[ ", 2uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v45, "/", 1uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v43, *(double *)a2);
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v8 = &v43;
  }
  else {
    size_t v8 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v43.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v43.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v46, (const std::string::value_type *)v8, size);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  char v12 = std::string::append(&v50, "/", 1uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v42, *(_DWORD *)(a2 + 28));
  if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v14 = &v42;
  }
  else {
    int v14 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v15 = v42.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v15 = v42.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::append(&v47, (const std::string::value_type *)v14, v15);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t cap = v16->__r_.__value_.__l.__cap_;
  __int128 v48 = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    id v18 = (const std::string::value_type *)&v48;
  }
  else {
    id v18 = (const std::string::value_type *)v48;
  }
  if (cap >= 0) {
    std::string::size_type v19 = HIBYTE(cap);
  }
  else {
    std::string::size_type v19 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v18, v19);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v20 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v20 != 1819304813)
  {
    sub_2CA1C(&v47, v20);
    size_t v21 = std::string::insert(&v47, 0LL, "; fmt: ", 7uLL);
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t cap = v21->__r_.__value_.__l.__cap_;
    __int128 v48 = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v23 = (const std::string::value_type *)&v48;
    }
    else {
      uint64_t v23 = (const std::string::value_type *)v48;
    }
    if (cap >= 0) {
      std::string::size_type v24 = HIBYTE(cap);
    }
    else {
      std::string::size_type v24 = *((void *)&v48 + 1);
    }
    std::string::append(a1, v23, v24);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v48);
    }
  }

  snprintf((char *)&v50, 0x13uLL, "%p", (const void *)*(unsigned int *)(a2 + 12));
  sub_7D084(&v47, (char *)&v50);
  uint64_t v25 = std::string::insert(&v47, 0LL, "; flags: ", 9uLL);
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  int64_t cap = v25->__r_.__value_.__l.__cap_;
  __int128 v48 = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v27 = (const std::string::value_type *)&v48;
  }
  else {
    uint64_t v27 = (const std::string::value_type *)v48;
  }
  if (cap >= 0) {
    std::string::size_type v28 = HIBYTE(cap);
  }
  else {
    std::string::size_type v28 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v27, v28);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v48);
  }
  std::to_string(&v47, *(_DWORD *)(a2 + 16));
  uint64_t v29 = std::string::insert(&v47, 0LL, "; bpp: ", 7uLL);
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  int64_t cap = v29->__r_.__value_.__l.__cap_;
  __int128 v48 = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unsigned int v31 = (const std::string::value_type *)&v48;
  }
  else {
    unsigned int v31 = (const std::string::value_type *)v48;
  }
  if (cap >= 0) {
    std::string::size_type v32 = HIBYTE(cap);
  }
  else {
    std::string::size_type v32 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v31, v32);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v48);
  }
  std::to_string(&v47, *(_DWORD *)(a2 + 20));
  uint64_t v33 = std::string::insert(&v47, 0LL, "; fpp: ", 7uLL);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  int64_t cap = v33->__r_.__value_.__l.__cap_;
  __int128 v48 = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int16 v35 = (const std::string::value_type *)&v48;
  }
  else {
    __int16 v35 = (const std::string::value_type *)v48;
  }
  if (cap >= 0) {
    std::string::size_type v36 = HIBYTE(cap);
  }
  else {
    std::string::size_type v36 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v35, v36);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v48);
  }
  std::to_string(&v47, *(_DWORD *)(a2 + 24));
  uint64_t v37 = std::string::insert(&v47, 0LL, "; Bpf: ", 7uLL);
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t cap = v37->__r_.__value_.__l.__cap_;
  __int128 v48 = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int16 v39 = (const std::string::value_type *)&v48;
  }
  else {
    __int16 v39 = (const std::string::value_type *)v48;
  }
  if (cap >= 0) {
    std::string::size_type v40 = HIBYTE(cap);
  }
  else {
    std::string::size_type v40 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v39, v40);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v48);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_2D104( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *__p, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D244@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 128);
  for (uint64_t i = *(void *)(a1 + 136); v4 != i; v4 += 8LL)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v4 + 200LL))(v17);
    if ((v18 & 0x80u) == 0) {
      uint64_t v6 = v17;
    }
    else {
      uint64_t v6 = (void **)v17[0];
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v7 = v18;
    }
    else {
      uint64_t v7 = (uint64_t)v17[1];
    }
    sub_826EC(&v13, (uint64_t)v6, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)&v14[-1] + *(void *)(v13 - 24)));
    size_t v8 = std::locale::use_facet(&v19, &std::ctype<char>::id);
    uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
    std::locale::~locale(&v19);
    std::ostream::put(&v13, v9);
    std::ostream::flush(&v13);
  }

  sub_82924(a2, (uint64_t)v14);
  *(void *)((char *)v12
  uint64_t v13 = v10;
  if (v15 < 0) {
    operator delete((void *)v14[8]);
  }
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_2D3C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2D400@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_826EC(&v18, (uint64_t)v4, v5);
  uint64_t v7 = sub_826EC(v6, (uint64_t)" ", 1LL);
  if (a1[15]) {
    uint64_t v8 = *(unsigned int *)(a1[13] + 56LL);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  uint64_t v9 = (void *)std::ostream::operator<<(v7, v8);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  int v10 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (v10 == 1684234860) {
    __int128 v11 = "dB";
  }
  else {
    __int128 v11 = "Scalar";
  }
  if (v10 == 1684234860) {
    uint64_t v12 = 2LL;
  }
  else {
    uint64_t v12 = 6LL;
  }
  sub_826EC(v9, (uint64_t)v11, v12);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  std::ostream::operator<<(v9, a1);
  sub_82924(a2, (uint64_t)v19);
  *(void *)((char *)v17
  uint64_t v18 = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_2D59C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_2D5CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

void sub_2D5D4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10 = sub_138E8(16);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
  {
    __int128 v11 = *(os_log_s **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = a5 ? "input" : "output";
        uint64_t v13 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        sub_2CC00(&__p, a4);
        int v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316418;
        __int128 v22 = "AggregateDevice.h";
        __int16 v23 = 1024;
        int v24 = 642;
        __int16 v25 = 2080;
        *(void *)__int128 v26 = v12;
        *(_WORD *)&v26[8] = 1024;
        *(_DWORD *)&v26[10] = a2;
        __int16 v27 = 2080;
        uint64_t v28 = v13;
        __int16 v29 = 2080;
        __int128 v30 = v14;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting %s node %u format: %s %s", buf, 0x36u);
      }
    }
  }

  uint64_t v15 = *(void *)(a1 + 24);
  if (qword_49D060 != -1) {
    dispatch_once(&qword_49D060, &stru_477C38);
  }
  if (off_49D088)
  {
    int v16 = off_49D088(v15, a3, a2, a5 ^ 1u, a4, 4096LL);
    if (!v16) {
      return;
    }
  }

  else
  {
    int v16 = -1;
  }

  __int128 v17 = (os_log_t *)sub_138E8(16);
  uint64_t v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
  {
    else {
      std::locale v19 = (uint64_t *)*a3;
    }
    *(_DWORD *)buf = 136315906;
    __int128 v22 = "AggregateDevice.h";
    __int16 v23 = 1024;
    int v24 = 644;
    __int16 v25 = 1024;
    *(_DWORD *)__int128 v26 = v16;
    *(_WORD *)&v26[4] = 2080;
    *(void *)&v26[6] = v19;
    _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting node format: %s", buf, 0x22u);
  }

void sub_2D840(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (qword_49D060 != -1) {
    dispatch_once(&qword_49D060, &stru_477C38);
  }
  if (off_49D070)
  {
    int v3 = off_49D070(v2);
    if (!v3) {
      goto LABEL_10;
    }
  }

  else
  {
    int v3 = -1;
  }

  uint64_t v4 = (os_log_t *)sub_138E8(16);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315650;
    uint64_t v9 = "AggregateDevice.h";
    __int16 v10 = 1024;
    int v11 = 650;
    __int16 v12 = 1024;
    int v13 = v3;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d initializing issue detector",  (uint8_t *)&v8,  0x18u);
  }

LABEL_10:
  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v6 = (os_log_t *)sub_138E8(16);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315394;
        uint64_t v9 = "AggregateDevice.h";
        __int16 v10 = 1024;
        int v11 = 651;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "%25s:%-5d Issue detector is bypassed. Audio analysis errors will be silenced. ",  (uint8_t *)&v8,  0x12u);
      }
    }
  }

  int v8 = sub_138E8(13);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    uint64_t v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        v68.__cv_.__sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v68.__cv_.__opaque = inAddress.mElement;
        sub_613AC((uint64_t)&v69, (unsigned int *)&v68);
        __int16 v10 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        uint64_t v59 = 1024;
        int v60 = 199;
        uint64_t v61 = 2080;
        *(void *)__int16 v62 = v10;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = inObjectID;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }

  buf = inAddress;
  int v11 = AudioObjectSetPropertyData(inObjectID, &buf, 0, 0LL, 8u, &inData);
  if ((_DWORD)v11)
  {
    uint64_t v37 = (os_log_t *)sub_138E8(13);
    __int128 v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v69, v11);
      __int16 v39 = v69.__m_.__opaque[15];
      sig = v69.__m_.__sig;
      inClientData[0] = inAddress;
      sub_613AC((uint64_t)&v68, &inClientData[0].mSelector);
      uint64_t v41 = &v69;
      if (v39 < 0) {
        uint64_t v41 = (std::mutex *)sig;
      }
      if (v68.__cv_.__opaque[15] >= 0) {
        std::string v42 = (uint64_t)&v68;
      }
      else {
        std::string v42 = v68.__cv_.__sig;
      }
      buf.AudioObjectPropertySelector mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      uint64_t v59 = 1024;
      int v60 = 207;
      uint64_t v61 = 1024;
      *(_DWORD *)__int16 v62 = v11;
      *(_WORD *)&v62[4] = 2080;
      *(void *)&v62[6] = v41;
      *(_WORD *)&v62[14] = 2080;
      *(void *)&v62[16] = v42;
      *(_WORD *)&v62[24] = 1024;
      *(_DWORD *)&v62[26] = inObjectID;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (v68.__cv_.__opaque[15] < 0) {
        operator delete((void *)v68.__cv_.__sig);
      }
      if (v69.__m_.__opaque[15] < 0) {
        operator delete((void *)v69.__m_.__sig);
      }
    }

    goto LABEL_108;
  }

  __int16 v12 = sub_7D434((uint64_t)&v54);
  if (v13) {
    goto LABEL_20;
  }
  if (!v12 || !inData)
  {
    if (v12 || inData) {
      goto LABEL_20;
    }
    goto LABEL_81;
  }

  if (CFEqual(v12, (CFTypeRef)inData))
  {
LABEL_81:
    std::string::size_type v32 = sub_138E8(13);
    if ((*(_BYTE *)(v32 + 8) & 1) == 0) {
      return;
    }
    unsigned int v31 = *(os_log_s **)v32;
    if (!*(void *)v32 || !os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    uint64_t v59 = 1024;
    int v60 = 219;
    uint64_t v61 = 1024;
    *(_DWORD *)__int16 v62 = inObjectID;
    goto LABEL_85;
  }

    int v3 = v5;
    (*(void (**)(void))(qword_491578 + 24))();
    (*(void (**)(uint64_t))(*(void *)qword_491590 + 32LL))(qword_491590);
    qword_491590 = (uint64_t)v6;
    uint64_t v6 = v5;
    uint64_t v4 = 4LL;
    return (void *)(*(uint64_t (**)(void *))(*v3 + 8 * v4))(v3);
  }

  if (v1 == a1)
  {
    uint64_t v6 = v5;
    (*(void (**)(void *, void *))(*a1 + 24LL))(a1, v5);
    double result = v6;
  }

  else
  {
    double result = (void *)(*(uint64_t (**)(void))(*v1 + 16LL))(a1[3]);
    uint64_t v6 = result;
  }

  int v3 = (void *)qword_491590;
  if (result != v5)
  {
    goto LABEL_10;
  }

  if ((uint64_t *)qword_491590 == &qword_491578)
  {
    (*(void (**)(void *, void *))(v5[0] + 24LL))(v5, v7);
    (*(void (**)(void *))(*v6 + 32LL))(v6);
    uint64_t v6 = 0LL;
    (*(void (**)(uint64_t, void *))(*(void *)qword_491590 + 24LL))(qword_491590, v5);
    (*(void (**)(uint64_t))(*(void *)qword_491590 + 32LL))(qword_491590);
    qword_491590 = 0LL;
    uint64_t v6 = v5;
    (*(void (**)(void *, uint64_t *))(v7[0] + 24LL))(v7, &qword_491578);
    double result = (void *)(*(uint64_t (**)(void *))(v7[0] + 32LL))(v7);
    qword_491590 = (uint64_t)&qword_491578;
    int v3 = v6;
  }

  else
  {
    (*(void (**)(void *, uint64_t *))(v5[0] + 24LL))(v5, &qword_491578);
    double result = (void *)(*(uint64_t (**)(void *))(*v6 + 32LL))(v6);
    int v3 = (void *)qword_491590;
    uint64_t v6 = (void *)qword_491590;
    qword_491590 = (uint64_t)&qword_491578;
  }

    sub_1AB114((uint64_t)v26, a2);
    uint64_t v9 = sub_138E8(17);
    __int16 v10 = sub_138E8(28);
    int v11 = 0;
    __int16 v12 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    int v13 = *(void *)(v9 + 8);
    while (1)
    {
      int v14 = *((int *)&buf.mSelector + v12);
      uint64_t v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      int v11 = 1;
      __int16 v12 = 1LL;
      if ((v15 & 1) != 0)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_31;
        }
        goto LABEL_19;
      }
    }

    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
    if ((*(void *)(v9 + 8) & 1) != 0)
    {
LABEL_19:
      int v16 = *(os_log_s **)v9;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(CFStringRef *__return_ptr, unsigned int *))(*(void *)a1 + 128LL))(theString, a1);
        sub_48E98(v24, theString[0]);
        __int128 v17 = v25;
        uint64_t v18 = (void **)v24[0];
        sub_2CA1C(__p, v26[0]);
        std::locale v19 = v24;
        if (v17 < 0) {
          std::locale v19 = v18;
        }
        if (v22 >= 0) {
          char v20 = __p;
        }
        else {
          char v20 = (void **)__p[0];
        }
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
        uint64_t v28 = 1024;
        __int16 v29 = 511;
        __int128 v30 = 2080;
        unsigned int v31 = v19;
        std::string::size_type v32 = 2080;
        uint64_t v33 = v20;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Bluetooth audio device with UID %s: Checking if it has Bluetooth property %s.",  (uint8_t *)&buf,  0x26u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (v25 < 0) {
          operator delete(v24[0]);
        }
        sub_19DFC((uint64_t)theString);
      }
    }

  if (v4) {
    (*(void (**)(uint64_t *))(a1[1] + 24))(a1 + 1);
  }
  sub_209E18(a1, 0LL, 0LL, 0LL);
  uint64_t v9 = (std::__shared_weak_count *)a1[29];
  a1[28] = 0LL;
  a1[29] = 0LL;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  __int16 v10 = (std::__shared_weak_count *)a1[31];
  a1[30] = 0LL;
  a1[31] = 0LL;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = (std::__shared_weak_count *)a1[35];
  a1[34] = 0LL;
  a1[35] = 0LL;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  __int16 v12 = (std::__shared_weak_count *)a1[33];
  a1[32] = 0LL;
  a1[33] = 0LL;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v3) {
    (*(void (**)(void *))(*v2 + 24LL))(v2);
  }
}

  sub_71648(a1, (uint64_t)&unk_49BD18);
  uint64_t v5 = v71;
  if (v71 == v70)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v70;
  }

  else
  {
    if (!v71) {
      goto LABEL_25;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_25:
  int v11 = v73;
  if (v73 == v72)
  {
    __int16 v12 = 4LL;
    int v11 = v72;
  }

  else
  {
    if (!v73) {
      goto LABEL_30;
    }
    __int16 v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_30:
  int v13 = v75;
  if (v75 == v74)
  {
    int v14 = 4LL;
    int v13 = v74;
  }

  else
  {
    if (!v75) {
      goto LABEL_35;
    }
    int v14 = 5LL;
  }

  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_35:
  double result = v77;
  if (v77 == v76)
  {
    int v16 = 4LL;
    double result = v76;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v16))();
  }

  if ((char)v24.__pn_.__r_.__value_.__s.__size_ < 0)
  {
    sub_24054(&__dst, v24.__pn_.__r_.__value_.__l.__data_, v24.__pn_.__r_.__value_.__l.__size_);
  }

  else
  {
    __dst = v24;
  }

  std::string::size_type size = a3->__r_.__value_.__s.__size_;
  if ((size & 0x80u) == 0LL) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  int v13 = a4[23];
  if (v13 >= 0) {
    int v14 = a4;
  }
  else {
    int v14 = *(char **)a4;
  }
  if (v13 >= 0) {
    uint64_t v15 = a4[23];
  }
  else {
    uint64_t v15 = *((void *)a4 + 1);
  }
  if (v15)
  {
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    if (size >= v15)
    {
      int v16 = (char *)v12 + size;
      __int128 v17 = *v14;
      uint64_t v18 = v12;
      do
      {
        std::locale v19 = size - v15;
        if (v19 == -1) {
          break;
        }
        char v20 = (char *)memchr(v18, v17, v19 + 1);
        if (!v20) {
          break;
        }
        uint64_t v21 = v20;
        if (!memcmp(v20, v14, v15))
        {
          goto LABEL_41;
        }

        uint64_t v18 = (std::string *)(v21 + 1);
        std::string::size_type size = v16 - (v21 + 1);
      }

      while (size >= v15);
    }

    sub_14A9A0((uint64_t)&v22, (const void **)&a3->__r_.__value_.__l.__data_, (const void **)a4);
    std::string __p = v22;
    memset(&v22, 0, sizeof(v22));
    sub_83AA0(&v24, (uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
    if ((char)v24.__pn_.__r_.__value_.__s.__size_ < 0)
    {
      sub_24054(a1, v24.__pn_.__r_.__value_.__l.__data_, v24.__pn_.__r_.__value_.__l.__size_);
      goto LABEL_46;
    }

    int v14 = (os_log_t *)sub_138E8(1);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v31 = *a2;
      std::string::size_type v32 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v31);
      if (v34 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      std::string::size_type v36 = 1024;
      uint64_t v37 = 210;
      __int128 v38 = 2080;
      __int16 v39 = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", (uint8_t *)&buf, 0x1Cu);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }

    return;
  }

  __int128 v17 = *(_DWORD **)(a1 + 104);
  uint64_t v18 = *(_DWORD **)(a1 + 112);
  if (v17 == v18)
  {
LABEL_22:
    LODWORD(v21) = 0;
  }

  else
  {
    while (1)
    {
      LODWORD(__p[0]) = *v17;
      strcpy((char *)&buf, "necvbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      std::locale v19 = sub_36EF4((AudioObjectID *)__p, &buf, 0, 0LL);
      *((void *)&v22 + 1) = v20;
      *(void *)&__int128 v22 = v19;
      uint64_t v21 = v22 >> 32;
      if ((v21 & 0xFF00000000LL) == 0) {
        LODWORD(v21) = 1;
      }
      if ((_DWORD)v21) {
        break;
      }
      if (++v17 == v18) {
        goto LABEL_22;
      }
    }
  }

  *a6 = v21;
  *a5 = 4;
}

uint64_t sub_2D9D4(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if (!a2) {
    goto LABEL_10;
  }
  unsigned int v4 = a3;
  if (!a3) {
    unsigned int v4 = *a2;
  }
  uint64_t v6 = calloc(1uLL, (16 * v4) | 8);
  if (v6)
  {
    *uint64_t v6 = v4;
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 8) = 2;
    if (v4)
    {
      unsigned int v9 = *a2;
      int v8 = (uint64_t *)(a2 + 4);
      uint64_t v7 = v9;
      uint64_t v10 = v4;
      int v11 = v6 + 4;
      do
      {
        if (!v7) {
          break;
        }
        *(v11 - 1) = *(v8 - 1);
        uint64_t v12 = *v8;
        v8 += 2;
        *int v11 = v12;
        v11 += 2;
        --v7;
        --v10;
      }

      while (v10);
    }
  }

  else
  {
LABEL_10:
    *(void *)a1 = 0LL;
    *(_DWORD *)(a1 + 8) = 2;
  }

  return a1;
}

uint64_t sub_2DA74( uint64_t a1, __int128 *a2, __int128 *a3, unsigned int **a4, unsigned int **a5, __int128 *a6, __int128 *a7, uint64_t a8)
{
  __int128 v11 = *a2;
  __int128 v12 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v12;
  __int128 v13 = *a3;
  __int128 v14 = a3[1];
  *(void *)(a1 + 72) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 40) = v13;
  __int128 v15 = *a6;
  __int128 v16 = a6[1];
  *(void *)(a1 + 112) = *((void *)a6 + 4);
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 96) = v16;
  __int128 v17 = *a7;
  __int128 v18 = a7[1];
  *(void *)(a1 + 152) = *((void *)a7 + 4);
  *(_OWORD *)(a1 + 136) = v18;
  *(_OWORD *)(a1 + 120) = v17;
  *(void *)(a1 + 160) = 0LL;
  *(_DWORD *)(a1 + 168) = 0;
  sub_2DB30(a1 + 160, a4);
  *(void *)(a1 + 176) = 0LL;
  *(_DWORD *)(a1 + 184) = 0;
  sub_2DB30(a1 + 176, a5);
  *(void *)(a1 + 192) = a8;
  *(void *)(a1 + 200) = 0LL;
  return a1;
}

void sub_2DB1C(_Unwind_Exception *a1)
{
}

void sub_2DB30(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = *a2;
  if (*a2 != *(unsigned int **)a1)
  {
    sub_2DBF4((unsigned int **)a1);
    if (v2)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = calloc(1uLL, (16 * (_DWORD)v5) | 8u);
      *uint64_t v6 = v5;
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      if ((_DWORD)v5)
      {
        int v7 = *((_DWORD *)a2 + 2);
        int v8 = (const void **)(v2 + 4);
        unsigned int v9 = (const void **)(v6 + 4);
        do
        {
          *(v9 - 1) = *(v8 - 1);
          if (v7 == 1)
          {
            size_t v10 = *((unsigned int *)v8 - 1);
            __int128 v11 = malloc(v10);
            const char *v9 = v11;
            memcpy(v11, *v8, v10);
          }

          else
          {
            const char *v9 = *v8;
          }

          v8 += 2;
          v9 += 2;
          --v5;
        }

        while (v5);
      }
    }
  }

void sub_2DBF4(unsigned int **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 2) == 1)
    {
      unint64_t v3 = *v2;
      if ((_DWORD)v3)
      {
        unint64_t v4 = 0LL;
        uint64_t v5 = 4LL;
        do
        {
          if (*(void *)&v2[v5])
          {
            free(*(void **)&v2[v5]);
            uint64_t v2 = *a1;
            unint64_t v3 = **a1;
          }

          ++v4;
          v5 += 4LL;
        }

        while (v4 < v3);
      }
    }

    free(v2);
    *a1 = 0LL;
    *((_DWORD *)a1 + 2) = 0;
  }

uint64_t sub_2DC70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 208;
    sub_2DBF4((unsigned int **)(i - 32));
    sub_2DBF4((unsigned int **)(i - 48));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2DCD0(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int **a4, unsigned int **a5)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_22FACC((void *)a1, *a2, a2[1], 0x4EC4EC4EC4EC4EC5LL * ((a2[1] - *a2) >> 4));
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_22FACC((void *)(a1 + 24), *a3, a3[1], 0x4EC4EC4EC4EC4EC5LL * ((a3[1] - *a3) >> 4));
  *(void *)(a1 + 48) = 0LL;
  *(_DWORD *)(a1 + 56) = 0;
  sub_2DB30(a1 + 48, a4);
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 0;
  sub_2DB30(a1 + 64, a5);
  return a1;
}

void sub_2DD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2DDD0(unsigned int *a1, unint64_t a2)
{
  uint64_t v4 = 0LL;
  if (a1 && a2)
  {
    uint64_t v7 = v2;
    uint64_t v8 = v3;
    BOOL v6 = 0;
    sub_2DE20(a1, (_DWORD *)a2, &v6);
    return v6;
  }

  return v4;
}

BOOL sub_2DE20(unsigned int *a1, _DWORD *a2, BOOL *a3)
{
  unint64_t v3 = *a1;
  BOOL v4 = (_DWORD)v3 == *a2;
  if ((_DWORD)v3 != *a2 || (_DWORD)v3 == 0)
  {
    BOOL result = (_DWORD)v3 == *a2;
  }

  else
  {
    uint64_t v7 = a2 + 4;
    uint64_t v8 = a1 + 4;
    unint64_t v9 = 1LL;
    BOOL v4 = 1;
    do
    {
      BOOL v10 = v4;
      int v11 = *((_DWORD *)v8 - 2);
      int v12 = *((_DWORD *)v7 - 2);
      BOOL result = v11 == v12;
      BOOL v4 = 0;
      if (v10 && v11 == v12) {
        BOOL v4 = *v8 == *v7;
      }
      BOOL v13 = v11 != v12 || v9++ >= v3;
      v7 += 2;
      v8 += 2;
    }

    while (!v13);
  }

  if (a3) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_2DEA8(uint64_t a1, unint64_t *a2)
{
  if (!memcmp((const void *)a1, a2, 0x24uLL)
    && !memcmp((const void *)(a1 + 40), a2 + 5, 0x24uLL)
    && !memcmp((const void *)(a1 + 80), a2 + 10, 0x24uLL)
    && !memcmp((const void *)(a1 + 120), a2 + 15, 0x24uLL)
    && *(void *)(a1 + 192) == a2[24]
    && sub_2DDD0(*(unsigned int **)(a1 + 160), a2[20]))
  {
    return sub_2DDD0(*(unsigned int **)(a1 + 176), a2[22]);
  }

  else
  {
    return 0LL;
  }

void sub_2DF48(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 86);
  BOOL v5 = a1[87] != a1[86]
    && ((uint64_t v3 = sub_45C8((uint64_t)(a1 + 86), 0, 0), v4 = *(void *)(v3 + 192), *(_BYTE *)(v4 + 448))
     || *(void *)(v4 + 584)
     || *(void *)(v4 + 672))
    && *(_DWORD *)(v3 + 8) == 1819304813;
  if (a1[90] != a1[89])
  {
    uint64_t v6 = sub_45C8(v2, 1, 0);
    uint64_t v7 = *(void *)(v6 + 192);
    if (*(_BYTE *)(v7 + 448) || *(void *)(v7 + 584) || *(void *)(v7 + 672))
    {
      BOOL v8 = *(_DWORD *)(v6 + 8) == 1819304813;
      if (!v5) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }

  BOOL v8 = 0;
  if (v5)
  {
LABEL_12:
    uint64_t v9 = sub_45C8(v2, 0, 0);
    sub_2E060(*(_BYTE **)(v9 + 192));
  }

LABEL_13:
  if (v8)
  {
    uint64_t v10 = sub_45C8(v2, 1, 0);
    sub_2E060(*(_BYTE **)(v10 + 192));
  }

  if (a2 == 1869968496)
  {
    uint64_t v10 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 560LL))(a1, 1LL);
LABEL_43:
    int v11 = v10;
    goto LABEL_44;
  }

  if (a2 == 1768845428)
  {
    uint64_t v10 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 560LL))(a1, 0LL);
    int v11 = v10;
LABEL_44:
    int v12 = v10;
    return v10 & 0xFF00000000LL | v11 | v12 & 0xFFFFFF0000000000LL;
  }

  uint64_t v10 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 560LL))(a1, 1LL);
  int v12 = v10;
  if ((v10 & 0xFF00000000LL) == 0) {
    uint64_t v10 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 560LL))(a1, 0LL);
  }
  int v11 = v10;
  return v10 & 0xFF00000000LL | v11 | v12 & 0xFFFFFF0000000000LL;
}

        BOOL v13 = *(_OWORD *)(a1 + 16);
        __int128 v14 = *(_OWORD *)(a1 + 32);
        *(void *)(a6 + 32) = *(void *)(a1 + 48);
        *(_OWORD *)a6 = v13;
        *(_OWORD *)(a6 + 16) = v14;
        return;
      }

      return;
    }

    __int128 v15 = *a5;
    __int128 v16 = *a5 >> 4;
    __int128 v17 = sub_765E4(a1);
    if (v17 >= v15 >> 4) {
      std::locale v19 = v16;
    }
    else {
      std::locale v19 = v17;
    }
    if ((_DWORD)v19)
    {
      char v20 = 0LL;
      uint64_t v21 = (_OWORD *)v6;
      do
        sub_76BF4(a1, v20++, v21++);
      while (v19 != v20);
      __int128 v22 = v19;
    }

    else
    {
      __int128 v22 = 0LL;
    }

    unsigned int v31 = (double *)(v6 + 16 * v22);
    std::string::size_type v32 = 126 - 2 * __clz(v22);
    if ((_DWORD)v19) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0LL;
    }
    sub_1AE8F0(v6, v31, v33, 1, v18);
    __int128 v34 = 16 * v19;
LABEL_52:
    *a5 = v34;
    return;
  }

  switch(v9)
  {
    case 1885762657:
      __int16 v23 = *a5 / 0x38;
      int v24 = *(void *)(a1 + 56);
      __int16 v25 = *(void *)(a1 + 64);
      if (v24 == v25)
      {
        __int128 v26 = 0;
      }

      else
      {
        __int128 v26 = 0;
        do
        {
          v26 += (*(void *)(v24 + 48) - *(void *)(v24 + 40)) >> 4;
          v24 += 64LL;
        }

        while (v24 != v25);
      }

      if (v26 >= v23) {
        __int16 v35 = v23;
      }
      else {
        __int16 v35 = v26;
      }
      if ((_DWORD)v35)
      {
        for (uint64_t i = 0LL; i != v35; ++i)
        {
          sub_6A7CC(*(__int128 **)(a1 + 56), *(__int128 **)(a1 + 64), i, v6);
          v6 += 56LL;
        }
      }

      goto LABEL_51;
    case 1936092513:
      __int16 v27 = *a5 / 0x38;
      uint64_t v28 = *(void *)(a1 + 80);
      __int16 v29 = *(void *)(a1 + 88);
      if (v28 == v29)
      {
        __int128 v30 = 0;
      }

      else
      {
        __int128 v30 = 0;
        do
        {
          v30 += (*(void *)(v28 + 48) - *(void *)(v28 + 40)) >> 4;
          v28 += 64LL;
        }

        while (v28 != v29);
      }

      if (v30 >= v27) {
        __int16 v35 = v27;
      }
      else {
        __int16 v35 = v30;
      }
      if ((_DWORD)v35)
      {
        for (char j = 0LL; j != v35; ++j)
        {
          sub_6A7CC(*(__int128 **)(a1 + 80), *(__int128 **)(a1 + 88), j, v6);
          v6 += 56LL;
        }
      }

    __int16 v80 = 0LL;
    char v81 = 0LL;
    uint64_t v82 = 0LL;
    std::locale v19 = (*(uint64_t (**)(os_unfair_lock_s *, void **))(*(void *)&a1->_os_unfair_lock_opaque + 96LL))( a1,  &v80);
    if (v19)
    {
      unsigned int v68 = (os_log_t *)sub_138E8(13);
      uint64_t v69 = *v68;
      if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        unsigned int v84 = 1024;
        uint64_t v85 = 166;
        _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: error obtaining stream formats.",  buf,  0x12u);
      }

      uint64_t v70 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v70 = &off_4865A0;
      v70[2] = v19;
    }

    char v20 = v80;
    if (0x6DB6DB6DB6DB6DB7LL * ((v81 - (_BYTE *)v80) >> 3) >= *ioDataSize / 0x38uLL) {
      uint64_t v21 = *ioDataSize / 0x38uLL;
    }
    else {
      uint64_t v21 = 0x6DB6DB6DB6DB6DB7LL * ((v81 - (_BYTE *)v80) >> 3);
    }
    if (v21)
    {
      __int128 v22 = a6;
      __int16 v23 = v21;
      do
      {
        int v24 = *v20;
        __int16 v25 = v20[1];
        __int128 v26 = v20[2];
        v22[6] = *((void *)v20 + 6);
        *((_OWORD *)v22 + 1) = v25;
        *((_OWORD *)v22 + 2) = v26;
        *(_OWORD *)__int128 v22 = v24;
        v22 += 7;
        char v20 = (_OWORD *)((char *)v20 + 56);
        --v23;
      }

      while (v23);
    }

    *UInt32 ioDataSize = 56 * v21;
    __int16 v27 = sub_138E8(22);
    uint64_t v28 = sub_138E8(35);
    __int16 v29 = 0;
    __int128 v30 = 0LL;
    *(void *)buf = 0x100000002LL;
    unsigned int v31 = *(void *)(v27 + 8);
    while (1)
    {
      std::string::size_type v32 = *(int *)&buf[4 * v30];
      uint64_t v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      __int16 v29 = 1;
      __int128 v30 = 1LL;
      if ((v33 & 1) != 0) {
        goto LABEL_43;
      }
    }

    if ((v31 & v32) == 0) {
      __int16 v27 = v28;
    }
LABEL_43:
    uint64_t v41 = *(os_log_s **)v27;
    if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      else {
        std::string v42 = "input";
      }
      sub_7D084(&v77, v42);
      std::string::size_type size = (char)v77.__r_.__value_.__s.__size_;
      std::string v44 = v77.__r_.__value_.__r.__words[0];
      os_unfair_lock_opaque = a1[20]._os_unfair_lock_opaque;
      sub_2CA1C(&__p, inAddress->mScope);
      std::string v46 = &v77;
      if (size < 0) {
        std::string v46 = (std::string *)v44;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      AudioObjectPropertyScope mScope = inAddress->mScope;
      AudioObjectPropertyElement mElement = inAddress->mElement;
      *(_DWORD *)buf = 136316674;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      unsigned int v84 = 1024;
      uint64_t v85 = 179;
      uint64_t v86 = 2080;
      *(void *)uint64_t v87 = v46;
      *(_WORD *)&v87[8] = 1024;
      *(_DWORD *)&v87[10] = os_unfair_lock_opaque;
      *(_WORD *)&v87[14] = 2080;
      *(void *)&v87[16] = p_p;
      *(_WORD *)&v87[24] = 1024;
      *(_DWORD *)&v87[26] = mScope;
      uint64_t v88 = 1024;
      id v89 = mElement;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Get %s stream's available formats from HAL stream %u (scope: '%s' (%u); element: %u):",
        buf,
        0x38u);
    }

    if (v21)
    {
      for (uint64_t i = 0LL; i != v21; ++i)
      {
        int v51 = sub_138E8(22);
        size_t v52 = sub_138E8(35);
        BOOL v53 = 0;
        uint64_t v54 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v55 = *(void *)(v51 + 8);
        while (1)
        {
          BOOL v56 = *(int *)&buf[4 * v54];
          uint64_t v57 = v53;
          if (((v55 & v56) != 0) != ((*(void *)(v52 + 8) & v56) != 0)) {
            break;
          }
          BOOL v53 = 1;
          uint64_t v54 = 1LL;
          if ((v57 & 1) != 0) {
            goto LABEL_65;
          }
        }

        if ((v55 & v56) == 0) {
          int v51 = v52;
        }
LABEL_65:
        int v58 = *(os_log_s **)v51;
        if (v58 && os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          sub_1548E8(&v77, (uint64_t)a6 + 56 * i);
          uint64_t v59 = &v77;
          if ((v77.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v59 = (std::string *)v77.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
          unsigned int v84 = 1024;
          uint64_t v85 = 182;
          uint64_t v86 = 1024;
          *(_DWORD *)uint64_t v87 = i + 1;
          *(_WORD *)&v87[4] = 2080;
          *(void *)&v87[6] = v59;
          _os_log_impl(&dword_0, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format %u: %s", buf, 0x22u);
        }
      }
    }

    std::string::size_type v40 = v80;
    if (v80)
    {
      char v81 = v80;
      goto LABEL_74;
    }

    return;
  }

  uint64_t v10 = *ioDataSize;
  if (v10 != (*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                               + 32LL))( a1,  inAddress))
  {
    uint64_t v61 = (os_log_t *)sub_138E8(13);
    __int16 v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      unsigned int v84 = 1024;
      uint64_t v85 = 153;
      _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Bad data size for property kAudioStreamPropertyPhysi cal/VirtualFormat",  buf,  0x12u);
    }

    uint64_t v63 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v63 = &off_4865A0;
    v63[2] = 561211770;
  }

  int v11 = (*(uint64_t (**)(os_unfair_lock_s *, void *))(*(void *)&a1->_os_unfair_lock_opaque + 112LL))(a1, a6);
  if (v11)
  {
    int v64 = v11;
    uint64_t v65 = (os_log_t *)sub_138E8(13);
    double v66 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      unsigned int v84 = 1024;
      uint64_t v85 = 155;
      _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: error obtaining format",  buf,  0x12u);
    }

    uint64_t v67 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v67 = &off_4865A0;
    v67[2] = v64;
  }

  int v12 = sub_138E8(22);
  BOOL v13 = sub_138E8(35);
  __int128 v14 = 0;
  __int128 v15 = 0LL;
  *(void *)buf = 0x100000002LL;
  __int128 v16 = *(void *)(v12 + 8);
  while (1)
  {
    __int128 v17 = *(int *)&buf[4 * v15];
    __int128 v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    __int128 v14 = 1;
    __int128 v15 = 1LL;
    if ((v18 & 1) != 0) {
      goto LABEL_26;
    }
  }

  if ((v16 & v17) == 0) {
    int v12 = v13;
  }
LABEL_26:
  __int128 v34 = *(os_log_s **)v12;
  if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v78 = *(void *)&inAddress->mSelector;
    std::locale v79 = inAddress->mElement;
    __int16 v35 = &v80;
    sub_613AC((uint64_t)&v80, (unsigned int *)&v78);
    if (v82 < 0) {
      __int16 v35 = v80;
    }
    sub_23FE8((uint64_t)&v77, a1 + 2);
    std::string::size_type v36 = (char)v77.__r_.__value_.__s.__size_;
    uint64_t v37 = v77.__r_.__value_.__r.__words[0];
    sub_2CC00(&__p, (uint64_t)a6);
    __int128 v38 = &v77;
    if (v36 < 0) {
      __int128 v38 = (std::string *)v37;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v39 = &__p;
    }
    else {
      __int16 v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
    unsigned int v84 = 1024;
    uint64_t v85 = 157;
    uint64_t v86 = 2080;
    *(void *)uint64_t v87 = v35;
    *(_WORD *)&v87[8] = 2080;
    *(void *)&v87[10] = v38;
    *(_WORD *)&v87[18] = 2080;
    *(void *)&v87[20] = v39;
    _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on stream %s: %s.", buf, 0x30u);
    if (SHIBYTE(v82) < 0)
    {
      std::string::size_type v40 = v80;
LABEL_74:
      operator delete(v40);
    }
  }

  *a2 = v7;
  return result;
}

  BOOL v13 = sub_138E8(1);
  __int128 v14 = sub_138E8(4);
  __int128 v15 = 0;
  __int128 v16 = 0LL;
  *(void *)buf = 0x100000002LL;
  __int128 v17 = *(void *)(v13 + 8);
  while (1)
  {
    __int128 v18 = *(int *)&buf[4 * v16];
    std::locale v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    __int128 v15 = 1;
    __int128 v16 = 1LL;
    if ((v19 & 1) != 0)
    {
      if ((v17 & 1) == 0) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
  }

  if ((v17 & v18) == 0) {
    BOOL v13 = v14;
  }
  if ((*(void *)(v13 + 8) & 1) != 0)
  {
LABEL_21:
    char v20 = *(os_log_s **)v13;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = (*(void *)(a1 + 528) - *(void *)(a1 + 520)) >> 3;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      int v147 = 1024;
      int v148 = 4361;
      double v149 = 1024;
      LODWORD(v150) = v21;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Previous output stream count: %u", buf, 0x18u);
    }
  }

  int v12 = *v4;
  return sub_852D0(a3, &v12, 1LL);
}

  *a2 = v7;
  return result;
}

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    goto LABEL_23;
  }

  BOOL v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v8, (const AudioObjectPropertyAddress *)&qword_490BC8))
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    inData = 0;
    strcpy(inAddress, "dneitpni");
    inAddress[9] = 0;
    *(_WORD *)&inAddress[10] = 0;
    uint64_t v10 = AudioObjectSetPropertyData(v9, (const AudioObjectPropertyAddress *)inAddress, 0, 0LL, 4u, &inData);
    if (v10)
    {
      __int128 v18 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int128 v18 = &off_4865A0;
      v18[2] = v10;
    }

    if (atomic_load((unsigned int *)(a1 + 692)))
    {
      std::locale v19 = (os_log_t *)sub_138E8(13);
      char v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 247;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Postcondition failure.");
LABEL_23:
    }
  }

  return a1;
}

  *a2 = v7;
  return result;
}

  uint64_t v21 = operator new(0x20uLL);
  v21[2] = 0x676C6F6276646223LL;
  *((_DWORD *)v21 + 6) = 0;
  *uint64_t v21 = v13;
  v21[1] = &v41;
  *((void *)v13 + 1) = v21;
  ++v17;
  *(void *)&uint64_t v41 = v21;
  std::string v42 = v17;
  BOOL v13 = (__int128 *)v21;
  if ((a6 & 0x20) != 0)
  {
LABEL_14:
    __int128 v22 = operator new(0x20uLL);
    v22[2] = 0x676C6F626D766F64LL;
    *((_DWORD *)v22 + 6) = 0;
    const char *v22 = v13;
    v22[1] = &v41;
    *((void *)v13 + 1) = v22;
    *(void *)&uint64_t v41 = v22;
    std::string v42 = v17 + 1;
  }

    __int128 v15 = (void *)v4[1];
    if (v15)
    {
      do
      {
        __int128 v16 = v15;
        __int128 v15 = (void *)*v15;
      }

      while (v15);
    }

    else
    {
      do
      {
        __int128 v16 = (void *)v4[2];
        __int128 v17 = *v16 == (void)v4;
        uint64_t v4 = v16;
      }

      while (!v17);
    }

    uint64_t v4 = v16;
    if (v16 == v3) {
      return 0LL;
    }
  }

  if (!v9 || *(_DWORD *)(v9 + 144) != a3)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      __int128 v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }

    goto LABEL_13;
  }

  std::locale v19 = (unint64_t *)&v12->__shared_owners_;
  do
    char v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  return 1LL;
}

    sub_195658(&v26, *(void *)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
    BOOL v13 = v26;
    int v12 = v27;
    if (v27)
    {
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        __int128 v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        __int128 v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }

      do
        __int128 v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }

    std::locale v19 = (dispatch_queue_s *)sub_869B4();
    char v20 = operator new(0x18uLL);
    std::string *v20 = v13;
    v20[1] = v12;
    *((_DWORD *)v20 + 4) = a2;
    *(void *)buf = 0LL;
    dispatch_async_f(v19, v20, (dispatch_function_t)sub_2A6AC4);
    sub_ADC0C((void **)buf);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v21 = v25;
  if (v25)
  {
    __int128 v22 = (unint64_t *)&v25->__shared_owners_;
    do
      __int16 v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  if (a2)
  {
    BOOL v13 = sub_2D2F44(a1, 0LL, a3);
    int v12 = v13 >> 8;
    __int128 v14 = v13 & 0xFFFFFFFF00000000LL;
    int v11 = v13 >> 40;
  }

  else
  {
    LOBYTE(v13) = 0;
    __int128 v14 = 0LL;
  }

  return ((_DWORD)v12 << 8) | v14 & 0xFF00000000LL | (v11 << 40) | v13;
}

  if (a2)
  {
    BOOL v13 = sub_2D30CC(a1, 0LL, a3);
    int v12 = v13 >> 8;
    __int128 v14 = v13 & 0xFFFFFFFF00000000LL;
    int v11 = v13 >> 40;
  }

  else
  {
    LOBYTE(v13) = 0;
    __int128 v14 = 0LL;
  }

  return ((_DWORD)v12 << 8) | v14 & 0xFF00000000LL | (v11 << 40) | v13;
}

  if (a2)
  {
    BOOL v13 = sub_2D3254(a1, 0LL, a3);
    int v12 = v13 >> 8;
    __int128 v14 = v13 & 0xFFFFFFFF00000000LL;
    int v11 = v13 >> 40;
  }

  else
  {
    LOBYTE(v13) = 0;
    __int128 v14 = 0LL;
  }

  return ((_DWORD)v12 << 8) | v14 & 0xFF00000000LL | (v11 << 40) | v13;
}

  if (a2)
  {
    int v12 = sub_2D33DC(a1, 0LL, a3);
    int v11 = v12 >> 8;
  }

  else
  {
    LOBYTE(v12) = 0;
  }

  return v12 | (v11 << 8);
}

    uint64_t v3 = &off_482D18;
    goto LABEL_14;
  }

  if (a2 > 1936290408)
  {
    if (a2 != 1936614497)
    {
      uint64_t v2 = 1936290409;
LABEL_11:
      if (a2 == v2) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
  }

  else if (a2 != 1885696611)
  {
    uint64_t v2 = 1935962992;
    goto LABEL_11;
  }

  *BOOL result = v2;
  result[3] = (uint64_t (**)())result;
  return result;
}

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    goto LABEL_23;
  }

  BOOL v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v8, (const AudioObjectPropertyAddress *)&qword_4A93B8))
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    inData = 0;
    strcpy(inAddress, "dneitpni");
    inAddress[9] = 0;
    *(_WORD *)&inAddress[10] = 0;
    uint64_t v10 = AudioObjectSetPropertyData(v9, (const AudioObjectPropertyAddress *)inAddress, 0, 0LL, 4u, &inData);
    if (v10)
    {
      __int128 v18 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int128 v18 = &off_4865A0;
      v18[2] = v10;
    }

    if (atomic_load((unsigned int *)(a1 + 688)))
    {
      std::locale v19 = (os_log_t *)sub_138E8(13);
      char v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 261;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Postcondition failure.");
LABEL_23:
    }
  }

  sub_371820(a1, 0, 0x6F757470u, 0);
  return a1;
}

void sub_2E060(_BYTE *a1)
{
  if (!a1[448]) {
    return;
  }
  unint64_t v2 = sub_2EDB8((uint64_t)a1);
  if (HIDWORD(v2)) {
    int v3 = v2;
  }
  else {
    int v3 = 24;
  }
  v88.mSampleRate = *(Float64 *)sub_2B8B8((uint64_t)a1);
  *(_OWORD *)&v88.mFormatID = xmmword_4031B0;
  *(_OWORD *)&v88.mBytesPerFrame = xmmword_4031C0;
  memset(v87, 0, sizeof(v87));
  uint64_t v84 = 0LL;
  uint64_t v85 = 0LL;
  unint64_t v86 = 0LL;
  sub_2EF6C(&v84, 4uLL);
  char v81 = 0LL;
  uint64_t v82 = 0LL;
  unint64_t v83 = 0LL;
  sub_2EF6C((uint64_t *)&v81, 2uLL);
  sub_2F114((unsigned int **)inInputData, (uint64_t)&v88, v3);
  (*(void (**)(uint64_t *__return_ptr, _BYTE *))(*(void *)a1 + 184LL))(&v75, a1);
  unsigned int v74 = v3;
  uint64_t v73 = (uint64_t)a1;
  if (v77 == v76
    || (unint64_t v4 = *(void *)(v76 + 8 * (v78 / 0x66)) + 40 * (v78 % 0x66),
        unint64_t v5 = *(void *)(v76 + 8 * ((v79 + v78) / 0x66)) + 40 * ((v79 + v78) % 0x66),
        v4 == v5))
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    uint64_t v9 = (void *)(v76 + 8 * (v78 / 0x66));
    do
    {
      __int128 v10 = *(_OWORD *)v4;
      __int128 v11 = *(_OWORD *)(v4 + 16);
      uint64_t v94 = *(void *)(v4 + 32);
      v93[0] = v10;
      v93[1] = v11;
      int v12 = v85;
      if ((unint64_t)v85 >= v86)
      {
        uint64_t v14 = ((uint64_t)v85 - v84) >> 4;
        unint64_t v15 = (uint64_t)(v86 - v84) >> 3;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if (v86 - v84 >= 0x7FFFFFFFFFFFFFF0LL) {
          Float64 v16 = 1.28822975e-231;
        }
        else {
          Float64 v16 = *(double *)&v15;
        }
        *(void *)&buf.mBitsPerChannel = &v86;
        if (v16 == 0.0) {
          uint64_t v17 = 0LL;
        }
        else {
          Float64 v16 = COERCE_DOUBLE(sub_7BE90(*(unint64_t *)&v16));
        }
        buf.mSampleRate = v16;
        *(void *)&buf.mFormatID = *(void *)&v16 + 16 * v14;
        *(void *)&buf.mBytesPerPacket = *(void *)&buf.mFormatID;
        *(void *)&buf.mBytesPerFrame = *(void *)&v16 + 16 * v17;
        sub_2F114(*(unsigned int ***)&buf.mFormatID, (uint64_t)v93, v3);
        *(void *)&buf.mBytesPerPacket += 16LL;
        sub_2EFF4(&v84, &buf);
        BOOL v13 = v85;
        sub_2F0C8((uint64_t)&buf);
      }

      else
      {
        sub_2F114(v85, (uint64_t)v93, v3);
        BOOL v13 = v12 + 2;
      }

      uint64_t v85 = v13;
      __int128 v18 = (AudioBufferList *)*(v13 - 2);
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v19 = (v7 - (char *)v6) >> 3;
        unint64_t v20 = v19 + 1;
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_7DC90(v21);
        }
        else {
          uint64_t v22 = 0LL;
        }
        __int16 v23 = (AudioBufferList **)(v21 + 8 * v19);
        const std::string::value_type *v23 = v18;
        int v24 = (char *)(v23 + 1);
        while (v7 != (char *)v6)
        {
          __int16 v25 = (AudioBufferList *)*((void *)v7 - 1);
          v7 -= 8;
          *--__int16 v23 = v25;
        }

        unint64_t v8 = v21 + 8 * v22;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v23;
        uint64_t v7 = v24;
        int v3 = v74;
      }

      else
      {
        *(void *)uint64_t v7 = v18;
        v7 += 8;
      }

      v4 += 40LL;
      if (v4 - *v9 == 4080)
      {
        unint64_t v26 = v9[1];
        ++v9;
        unint64_t v4 = v26;
      }
    }

    while (v4 != v5);
  }

  unsigned int v89 = 0;
  *(void *)&buf.mSampleRate = v73 + 48;
  LOBYTE(buf.mFormatID) = 1;
  sub_92F80(v73 + 48);
  uint64_t v28 = *(void *)(v73 + 24);
  uint64_t v27 = *(void *)(v73 + 32);
  sub_93128((uint64_t)&buf);
  uint64_t v29 = v27 - v28;
  if (!v29)
  {
    uint64_t v50 = sub_138E8(13);
    id v51 = sub_8C7D4(1, *(void **)v50, *(void *)(v50 + 8));
    size_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    BOOL v53 = v52;
    if (v52 && os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1288;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(void *)&v93[0] = v73 + 48;
  BYTE8(v93[0]) = 1;
  sub_92F80(v73 + 48);
  uint64_t v30 = *(void *)(v29 + *(void *)(v73 + 24) - 16);
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v30 + 224LL))(v30, 2LL, &v89);
  if (v31)
  {
    uint64_t v55 = sub_138E8(13);
    id v56 = sub_8C7D4(1, *(void **)v55, *(void *)(v55 + 8));
    uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    int v58 = v57;
    if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1295;
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unexpected error from GetBusCount",  (uint8_t *)&buf,  0x12u);
    }

    uint64_t v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v59 = &off_4865A0;
    v59[2] = v31;
  }

  unsigned int v32 = v89;
  sub_93128((uint64_t)v93);
  if (v32 > 1)
  {
    uint64_t v60 = sub_138E8(13);
    id v61 = sub_8C7D4(1, *(void **)v60, *(void *)(v60 + 8));
    __int16 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
    uint64_t v63 = v62;
    if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1248;
      _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

LABEL_84:
    uint64_t v67 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v67, "Invariant failure.");
  }

  if (v32 == 1)
  {
    uint64_t v33 = sub_2B940(v73);
    __int128 v34 = v82;
    if ((unint64_t)v82 >= v83)
    {
      uint64_t v38 = ((char *)v82 - v81) >> 4;
      unint64_t v39 = (uint64_t)(v83 - (void)v81) >> 3;
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        Float64 v40 = *(double *)&v39;
      }
      *(void *)&buf.mBitsPerChannel = &v83;
      if (v40 == 0.0) {
        uint64_t v41 = 0LL;
      }
      else {
        Float64 v40 = COERCE_DOUBLE(sub_7BE90(*(unint64_t *)&v40));
      }
      buf.mSampleRate = v40;
      *(void *)&buf.mFormatID = *(void *)&v40 + 16 * v38;
      *(void *)&buf.mBytesPerPacket = *(void *)&buf.mFormatID;
      *(void *)&buf.mBytesPerFrame = *(void *)&v40 + 16 * v41;
      sub_2F114(*(unsigned int ***)&buf.mFormatID, v33, v74);
      *(void *)&buf.mBytesPerPacket += 16LL;
      sub_2EFF4((uint64_t *)&v81, &buf);
      __int16 v35 = v82;
      sub_2F0C8((uint64_t)&buf);
    }

    else
    {
      sub_2F114(v82, v33, v74);
      __int16 v35 = v34 + 2;
    }

    uint64_t v82 = v35;
    uint64_t v42 = *(void *)v81;
    std::string::size_type v36 = (char *)sub_7DC90(1uLL);
    *(void *)std::string::size_type v36 = v42;
    uint64_t v37 = v36 + 8;
  }

  else
  {
    std::string::size_type v36 = 0LL;
    uint64_t v37 = 0LL;
  }

  if (!v79)
  {
    uint64_t v64 = sub_138E8(13);
    id v65 = sub_8C7D4(1, *(void **)v64, *(void *)(v64 + 8));
    double v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    uint64_t v63 = v66;
    if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1255;
      _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    goto LABEL_84;
  }

  std::mutex::lock((std::mutex *)(v73 + 880));
  std::string v43 = inInputData[0];
  size_t mDataByteSize = inInputData[0]->mBuffers[0].mDataByteSize;
  if (mDataByteSize <= 0x5F)
  {
    uint64_t v68 = sub_138E8(13);
    id v69 = sub_8C7D4(1, *(void **)v68, *(void *)(v68 + 8));
    uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    char v71 = v70;
    if (v70 && os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1262;
      _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    std::locale v72 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v72, "Invariant failure.");
  }

  bzero(inInputData[0]->mBuffers[0].mData, mDataByteSize);
  mData = v43->mBuffers[0].mData;
  _OWORD *mData = xmmword_401CB8;
  mData[1] = unk_401CC8;
  mData[2] = xmmword_401CD8;
  mData[3] = unk_401CE8;
  mData[4] = xmmword_401CF8;
  mData[5] = unk_401D08;
  unint64_t v46 = *(void *)(v76 + 8 * (v78 / 0x66)) + 40 * (v78 % 0x66);
  AudioStreamBasicDescription buf = v88;
  __int128 v47 = *(_OWORD *)v46;
  __int128 v48 = *(_OWORD *)(v46 + 16);
  uint64_t v49 = *(void *)(v46 + 32);
  *(_OWORD *)&v91.mBytesPerPacket = v48;
  *(_OWORD *)&v91.mSampleRate = v47;
  *(void *)&v91.mBitsPerChannel = v49;
  *(void *)uint64_t v92 = 0LL;
  sub_2FC98((uint64_t)&buf, &buf, &v91);
  sub_3014C(*(OpaqueAudioConverter **)v92, v74, inInputData[0], *v6);
  (*(void (**)(uint64_t, _OWORD *, void, unint64_t, AudioBufferList **, unint64_t, char *))(*(void *)v73 + 144LL))( v73,  v87,  v74,  (unint64_t)(v7 - (char *)v6) >> 3,  v6,  (unint64_t)(v37 - v36) >> 3,  v36);
  sub_3057C(v73);
  sub_30648((uint64_t)&buf);
  std::mutex::unlock((std::mutex *)(v73 + 880));
  sub_81390((uint64_t)&v75);
  sub_2DBF4((unsigned int **)inInputData);
  if (v36) {
    operator delete(v36);
  }
  *(void *)&buf.mSampleRate = &v81;
  sub_197B10((void ***)&buf);
  operator delete(v6);
  *(void *)&buf.mSampleRate = &v84;
  sub_197B10((void ***)&buf);
}

  uint64_t v96 = *(void *)&v5[8 * (v9 / 0x66)] + 40 * (v9 % 0x66);
  BOOL result = *(__n128 *)a2;
  __int128 v98 = *(_OWORD *)(a2 + 16);
  *(void *)(v96 + 32) = *(void *)(a2 + 32);
  *(__n128 *)uint64_t v96 = result;
  *(_OWORD *)(v96 + 16) = v98;
  ++a1[5];
  return result;
}

          uint64_t v55 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v55 = &off_4865A0;
          v55[2] = 1852797029;
        }

        BOOL v53 = (os_log_t *)sub_138E8(13);
        uint64_t v50 = *v53;
        if (!*v53 || !os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR)) {
          goto LABEL_84;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 346;
        id v51 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingGainKey is required";
      }

      else
      {
        size_t v52 = (os_log_t *)sub_138E8(13);
        uint64_t v50 = *v52;
        if (!*v52 || !os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR)) {
          goto LABEL_84;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 345;
        id v51 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingEnableKey is required";
      }
    }

    else
    {
      uint64_t v49 = (os_log_t *)sub_138E8(13);
      uint64_t v50 = *v49;
      if (!*v49 || !os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR)) {
        goto LABEL_84;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 344;
      id v51 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVirtualAu"
            "dioPlugInDuckingTypeKey is required";
    }

          uint64_t v55 = (void *)v29[1];
          if (v55)
          {
            do
            {
              id v56 = v55;
              uint64_t v55 = (void *)*v55;
            }

            while (v55);
          }

          else
          {
            do
            {
              id v56 = (void *)v29[2];
              uint64_t v57 = *v56 == (void)v29;
              uint64_t v29 = v56;
            }

            while (!v57);
          }

          uint64_t v29 = v56;
          if (v56 == v72)
          {
LABEL_90:
            uint64_t v17 = a4;
            uint64_t v19 = (void *)(v71 + 88);
            goto LABEL_91;
          }

          goto LABEL_41;
        }

        unsigned int v32 = (std::__shared_weak_count *)i[3];
        if (!v32) {
          break;
        }
        uint64_t v33 = std::__shared_weak_count::lock(v32);
        __int128 v34 = v33;
        if (!v33) {
          goto LABEL_52;
        }
        __int16 v35 = i[2];
        p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
        do
          uint64_t v37 = __ldxr(p_shared_weak_owners);
        while (__stxr(v37 + 1, p_shared_weak_owners));
        uint64_t v38 = (unint64_t *)&v33->__shared_owners_;
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v34);
        }

void sub_2EA0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
  if (v40) {
    operator delete(v40);
  }
  a11 = &a19;
  sub_197B10((void ***)&a11);
  if (v39) {
    operator delete(v39);
  }
  a11 = &a22;
  sub_197B10((void ***)&a11);
  _Unwind_Resume(a1);
}

unint64_t sub_2EDB8(uint64_t a1)
{
  uint64_t v1 = sub_2EEBC(a1, 0);
  if (!v1
    || (uint64_t v2 = v1,
        (*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, char *, void, void))(*(void *)v1 + 40LL))( v1,  3700LL,  v12,  &v11,  0LL,  0LL))
    || (!(*(unsigned int (**)(uint64_t, uint64_t, int *, _BYTE *, void, void))(*(void *)v2 + 48LL))( v2,  3700LL,  &v10,  v12,  0LL,  0LL)
      ? (BOOL v3 = v10 == 0)
      : (BOOL v3 = 1),
        v3
     || (*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, char *, void, void))(*(void *)v2 + 40LL))( v2,  14LL,  v12,  &v11,  0LL,  0LL)))
  {
    unsigned __int8 v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
  }

  else
  {
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, int *, _BYTE *, void, void))(*(void *)v2 + 48LL))( v2,  14LL,  &v9,  v12,  0LL,  0LL);
    uint64_t v6 = v8 == 0;
    unsigned __int8 v4 = v9;
    unsigned int v5 = v9 & 0xFFFFFF00;
    if (v8)
    {
      unsigned __int8 v4 = 0;
      unsigned int v5 = 0;
    }
  }

  return v5 & 0xFFFFFF00 | v4 | (unint64_t)(v6 << 32);
}

uint64_t sub_2EEBC(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = a1 + 48;
  char v8 = 1;
  sub_92F80(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v4) >> 3) <= a2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 24LL * a2 + 8);
  }
  sub_93128((uint64_t)&v7);
  return v5;
}

uint64_t sub_2EF3C( uint64_t a1, AudioUnitPropertyID a2, void *outData, UInt32 *ioDataSize, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    uint64_t v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    uint64_t v7 = 0LL;
  }
  return AudioUnitGetProperty(v7, a2, inScope, inElement, outData, ioDataSize);
}

uint64_t *sub_2EF6C(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_7BE90(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    sub_2EFF4(v2, v5);
    return (uint64_t *)sub_2F0C8((uint64_t)v5);
  }

  return result;
}

void sub_2EFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2EFF4(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 16LL; ; i -= 16LL)
  {
    uint64_t result = v6 + i;
    uint64_t v9 = v4 + i;
    if (v4 + i - 16 == v5) {
      break;
    }
    *(void *)(result - 32) = 0LL;
    uint64_t v10 = result - 32;
    *(_DWORD *)(v10 + 8) = 0;
    sub_2DB30(v10, (unsigned int **)(v9 - 32));
  }

  a2[1] = result - 16;
  uint64_t v11 = *a1;
  *a1 = result - 16;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2F0C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_2DBF4((unsigned int **)(i - 16));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned int **sub_2F114(unsigned int **a1, uint64_t a2, int a3)
{
  if ((*(_BYTE *)(a2 + 12) & 0x20) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 28);
    if (!v6)
    {
LABEL_12:
      *a1 = 0LL;
      *((_DWORD *)a1 + 2) = 0;
      return a1;
    }
  }

  else
  {
    int v6 = 1;
  }

  uint64_t v7 = (unsigned int *)calloc(1uLL, (16 * v6) | 8u);
  if (!v7) {
    goto LABEL_12;
  }
  unsigned int *v7 = v6;
  *a1 = v7;
  *((_DWORD *)a1 + 2) = 1;
  if (!a3)
  {
    unint64_t v15 = (os_log_t *)sub_138E8(13);
    Float64 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "VAAudioBufferList.cpp";
      __int16 v20 = 1024;
      int v21 = 57;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): data buffer frame size must be non-zero",  (uint8_t *)&v18,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "data buffer frame size must be non-zero");
  }

  uint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  int v10 = *(_DWORD *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 12) & 0x20) != 0) {
    int v11 = 1;
  }
  else {
    int v11 = *(_DWORD *)(a2 + 28);
  }
  size_t v12 = (v10 * a3);
  do
  {
    uint64_t v13 = &v7[v8];
    v13[2] = v11;
    v13[3] = v12;
    *((void *)v13 + 2) = calloc(1uLL, v12);
    ++v9;
    uint64_t v7 = *a1;
    v8 += 4LL;
  }

  while (v9 < **a1);
  return a1;
}

void sub_2F2B8(_Unwind_Exception *exception_object)
{
}

void sub_2F2D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v25 = *(void *)(a1 + 32);
  if (v25 == v3)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      __int16 v35 = "DSPGraphChain.cpp";
      __int16 v36 = 1024;
      int v37 = 262;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    v31[1] = *(_DWORD *)v3;
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    uint64_t v32 = v5;
    uint64_t v33 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    v31[0] = 0;
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v5 + 224LL))(v5, 1LL, v31);
    if (v8)
    {
      uint64_t v19 = (os_log_t *)sub_138E8(13);
      __int16 v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        __int16 v35 = "DSPGraphChain.cpp";
        __int16 v36 = 1024;
        int v37 = 270;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unexpected error from GetBusCount",  buf,  0x12u);
      }

      int v21 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v21 = &off_4865A0;
      v21[2] = v8;
    }

    for (unint64_t i = *(void *)(a2 + 40); i < v31[0]; ++i)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 128LL))(v5, 1LL, i);
      __int128 v11 = *(_OWORD *)(v10 + 16);
      v29[0] = *(_OWORD *)v10;
      v29[1] = v11;
      uint64_t v30 = *(void *)(v10 + 32);
      sub_2F6E8((void *)a2, (uint64_t)v29);
      size_t v12 = (os_log_t *)sub_138E8(24);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CC00(&v28, (uint64_t)v29);
        if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v14 = &v28;
        }
        else {
          uint64_t v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152LL))(v5);
        sub_2CA1C(__p, v15);
        Float64 v16 = __p;
        if (v27 < 0) {
          Float64 v16 = (void **)__p[0];
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
        __int16 v35 = "DSPGraphChain.cpp";
        __int16 v36 = 1024;
        int v37 = 276;
        __int16 v38 = 1024;
        int v39 = i;
        __int16 v40 = 2080;
        uint64_t v41 = v14;
        __int16 v42 = 2080;
        std::string v43 = v16;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bus: %d Format: %s AU: %s", buf, 0x2Cu);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    if (v4)
    {
      uint64_t v17 = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    v3 += 24LL;
  }

  while (v3 != v25);
}

void sub_2F688( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

__n128 sub_2F6E8(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = 102 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x66)
    {
      a1[4] = v8 - 102;
      uint64_t v12 = *(void *)v5;
      uint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          __int16 v42 = (char *)sub_7DC90(v41);
          std::string v44 = &v42[8 * (v41 >> 2)];
          std::string v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v47 = 8 * (v46 >> 3);
            __int128 v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)__int128 v48 = v49;
              v48 += 8;
              v47 -= 8LL;
            }

            while (v47);
          }

          uint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          __int16 v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            uint64_t v22 = v4;
          }

          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            uint64_t v22 = (char *)a1[1];
          }

          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }

      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8LL;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }

    uint64_t v23 = v6 >> 3;
    int v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      char v27 = operator new(0xFF0uLL);
      std::string v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1LL;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          BOOL v53 = (char *)sub_7DC90(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8LL];
          uint64_t v55 = (uint64_t *)a1[1];
          id v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            id v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8LL;
            }

            while (v58);
          }

          id v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }

        *((void *)v5 - 1) = v28;
        __int16 v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            else {
              unint64_t v99 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v100 = (char *)sub_7DC90(v99);
            __int128 v102 = &v100[8 * (v99 >> 2)];
            __int128 v103 = (uint64_t *)a1[1];
            uint64_t v63 = v102;
            uint64_t v104 = a1[2] - (void)v103;
            if (v104)
            {
              uint64_t v63 = &v102[v104 & 0xFFFFFFFFFFFFFFF8LL];
              uint64_t v105 = 8 * (v104 >> 3);
              uint64_t v106 = &v100[8 * (v99 >> 2)];
              do
              {
                uint64_t v107 = *v103++;
                *(void *)uint64_t v106 = v107;
                v106 += 8;
                v105 -= 8LL;
              }

              while (v105);
            }

            uint64_t v108 = (char *)*a1;
            *a1 = v100;
            a1[1] = v102;
            a1[2] = v63;
            a1[3] = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              uint64_t v63 = (char *)a1[2];
            }
          }

          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            char v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              __int16 v62 = (char *)a1[1];
            }

            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }

        *(void *)uint64_t v63 = v64;
      }

      else
      {
        *(void *)uint64_t v4 = v27;
      }

      goto LABEL_82;
    }

    if (v24 == v25) {
      unint64_t v29 = 1LL;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    uint64_t v30 = (char *)sub_7DC90(v29);
    uint64_t v32 = v31;
    uint64_t v33 = &v30[8 * v23];
    *(void *)&__int128 v34 = v30;
    *((void *)&v34 + 1) = v33;
    __int128 v112 = v34;
    __int16 v35 = operator new(0xFF0uLL);
    *(void *)&__int128 v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&__int128 v38 = v112;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&__int128 v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }

      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1LL;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)sub_7DC90(v74);
      uint64_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&__int128 v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&__int128 v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      __int128 v109 = v36;
      __int128 v112 = v38;
      operator delete(v30);
      __int128 v36 = v109;
    }

    __int128 v38 = v112;
LABEL_56:
    *(void *)uint64_t v33 = v35;
    *(void *)&__int128 v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8LL)
    {
      unint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        __int16 v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1LL;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          unint64_t v86 = (char *)sub_7DC90(v85);
          uint64_t v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8LL];
          AudioStreamBasicDescription v88 = v79;
          uint64_t v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            AudioStreamBasicDescription v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v90 = 8 * (v89 >> 3);
            AudioStreamBasicDescription v91 = v79;
            uint64_t v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)AudioStreamBasicDescription v91 = v93;
              v91 += 8;
              v90 -= 8LL;
            }

            while (v90);
          }

          *(void *)&__int128 v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&__int128 v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            __int128 v110 = v36;
            __int128 v114 = v38;
            operator delete(v78);
            __int128 v36 = v110;
            __int128 v38 = v114;
          }
        }

        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          uint64_t v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            __int16 v80 = (_BYTE *)*((void *)&v38 + 1);
          }

          else
          {
            uint64_t v111 = *((void *)&v36 + 1);
            uint64_t v113 = v38;
            memmove( (void *)(v84 - (v36 - *((void *)&v38 + 1))),  *((const void **)&v38 + 1),  v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v111;
            *(void *)&__int128 v38 = v113;
          }

          *((void *)&v38 + 1) = v79;
          *(void *)&__int128 v36 = &v80[8 * v83];
        }
      }

      else
      {
        uint64_t v79 = (char *)*((void *)&v38 + 1);
      }

      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8LL;
    }

    unsigned int v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }

void sub_2FC68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2FC98( uint64_t a1, AudioStreamBasicDescription *inSourceFormat, AudioStreamBasicDescription *inDestinationFormat)
{
  uint64_t v6 = *(OpaqueAudioConverter **)(a1 + 80);
  if (v6)
  {
    AudioConverterDispose(v6);
    *(void *)(a1 + 80) = 0LL;
  }

  if (inSourceFormat->mSampleRate != 0.0
    && inDestinationFormat->mSampleRate != 0.0
    && inSourceFormat->mSampleRate != inDestinationFormat->mSampleRate)
  {
    goto LABEL_27;
  }

  AudioFormatID mFormatID = inSourceFormat->mFormatID;
  if (mFormatID)
  {
    AudioFormatID v9 = inDestinationFormat->mFormatID;
    if (v9)
    {
      if (mFormatID != v9) {
        goto LABEL_27;
      }
    }
  }

  UInt32 mBytesPerPacket = inSourceFormat->mBytesPerPacket;
  if (mBytesPerPacket)
  {
    UInt32 v11 = inDestinationFormat->mBytesPerPacket;
    if (v11)
    {
      if (mBytesPerPacket != v11) {
        goto LABEL_27;
      }
    }
  }

  UInt32 mFramesPerPacket = inSourceFormat->mFramesPerPacket;
  if (mFramesPerPacket)
  {
    UInt32 v13 = inDestinationFormat->mFramesPerPacket;
    if (v13)
    {
      if (mFramesPerPacket != v13) {
        goto LABEL_27;
      }
    }
  }

  if ((UInt32 mBytesPerFrame = inSourceFormat->mBytesPerFrame) != 0
    && (UInt32 v15 = inDestinationFormat->mBytesPerFrame) != 0
    && mBytesPerFrame != v15
    || (UInt32 mChannelsPerFrame = inSourceFormat->mChannelsPerFrame) != 0
    && (UInt32 v17 = inDestinationFormat->mChannelsPerFrame) != 0
    && mChannelsPerFrame != v17
    || (UInt32 mBitsPerChannel = inSourceFormat->mBitsPerChannel) != 0
    && (UInt32 v19 = inDestinationFormat->mBitsPerChannel) != 0
    && mBitsPerChannel != v19)
  {
LABEL_27:
    AudioConverterRef outAudioConverter = 0LL;
  }

  else
  {
    AudioConverterRef outAudioConverter = 0LL;
  }

  uint64_t v20 = AudioConverterNew(inSourceFormat, inDestinationFormat, &outAudioConverter);
  uint64_t v21 = v20;
  if ((_DWORD)v20)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unint64_t v51 = "DSPReformatter.cpp";
      __int16 v52 = 1024;
      int v53 = 82;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
    }

    return v21;
  }

  UInt32 v24 = inSourceFormat->mChannelsPerFrame;
  if (v24 == 1)
  {
    uint64_t v25 = inDestinationFormat->mChannelsPerFrame;
    if (v25 >= 2)
    {
      uint64_t v26 = 4 * v25;
      __chkstk_darwin(v20);
      bzero((char *)&v46 - ((v26 + 15) & 0x7FFFFFFF0LL), v26);
      OSStatus v27 = AudioConverterSetProperty(outAudioConverter, 0x63686D70u, v26, (char *)&v46 - ((v26 + 15) & 0x7FFFFFFF0LL));
      if (v27)
      {
        std::string v28 = (os_log_t *)sub_138E8(24);
        unint64_t v29 = *v28;
        if (*v28)
        {
          if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
            unint64_t v51 = "DSPReformatter.cpp";
            __int16 v52 = 1024;
            int v53 = 92;
            __int16 v54 = 1024;
            LODWORD(v55) = v27;
            _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d setting mono channel map property on converter",  buf,  0x18u);
          }
        }
      }
    }
  }

  else if (v24 == 2 && inDestinationFormat->mChannelsPerFrame == 1)
  {
    LODWORD(inPropertyData.__r_.__value_.__l.__data_) = 1;
    OSStatus v30 = AudioConverterSetProperty(outAudioConverter, 0x646D6978u, 4u, &inPropertyData);
    if (v30)
    {
      uint64_t v31 = (os_log_t *)sub_138E8(24);
      uint64_t v32 = *v31;
      if (*v31)
      {
        if (os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          unint64_t v51 = "DSPReformatter.cpp";
          __int16 v52 = 1024;
          int v53 = 100;
          __int16 v54 = 1024;
          LODWORD(v55) = v30;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d setting perform downmix property on converter",  buf,  0x18u);
        }
      }
    }
  }

LABEL_46:
  __int128 v33 = *(_OWORD *)&inSourceFormat->mSampleRate;
  __int128 v34 = *(_OWORD *)&inSourceFormat->mBytesPerPacket;
  *(void *)(a1 + 32) = *(void *)&inSourceFormat->mBitsPerChannel;
  *(_OWORD *)a1 = v33;
  *(_OWORD *)(a1 + 16) = v34;
  __int128 v35 = *(_OWORD *)&inDestinationFormat->mSampleRate;
  uint64_t v36 = *(void *)&inDestinationFormat->mBitsPerChannel;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&inDestinationFormat->mBytesPerPacket;
  *(_OWORD *)(a1 + 40) = v35;
  AudioConverterRef v37 = outAudioConverter;
  *(void *)(a1 + 72) = v36;
  *(void *)(a1 + 80) = v37;
  uint64_t v38 = sub_138E8(24);
  if ((*(_BYTE *)(v38 + 8) & 1) != 0)
  {
    uint64_t v39 = *(os_log_s **)v38;
    if (*(void *)v38)
    {
      if (os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG))
      {
        sub_2CC00(&inPropertyData, a1);
        int size = (char)inPropertyData.__r_.__value_.__s.__size_;
        std::string::size_type v41 = inPropertyData.__r_.__value_.__r.__words[0];
        sub_2CC00(&v47, a1 + 40);
        p_inuint64_t PropertyData = &inPropertyData;
        if (size < 0) {
          p_inuint64_t PropertyData = (std::string *)v41;
        }
        if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v43 = &v47;
        }
        else {
          uint64_t v43 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        uint64_t v44 = *(void *)(a1 + 80);
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        unint64_t v51 = "DSPReformatter.cpp";
        __int16 v52 = 1024;
        int v53 = 110;
        __int16 v54 = 2048;
        uint64_t v55 = a1;
        __int16 v56 = 2080;
        uint64_t v57 = p_inPropertyData;
        __int16 v58 = 2080;
        uint64_t v59 = v43;
        __int16 v60 = 2048;
        uint64_t v61 = v44;
        _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Reformatter config (this %p): mInputFormat = %s, mOutputFormat = %s, mConverterRef = %p",  buf,  0x3Au);
      }
    }
  }

  return 0LL;
}

      uint64_t v12 = (void **)v7;
      goto LABEL_22;
    }

    goto LABEL_43;
  }

  if (v8 >= a4) {
    return v5;
  }
  uint64_t v12 = (void **)(a2 + 1);
  UInt32 v13 = (void **)a2[1];
  if (v13)
  {
    do
    {
      uint64_t v12 = v13;
      UInt32 v13 = (void **)*v13;
      uint64_t v14 = (uint64_t **)v12;
      UInt32 v15 = v12;
    }

    while (v13);
  }

  else
  {
    UInt32 v15 = (void **)a2;
    do
    {
      uint64_t v20 = v15;
      UInt32 v15 = (void **)v15[2];
    }

    while (*v15 != v20);
    uint64_t v14 = (uint64_t **)a2;
  }

  if (v15 != (void **)v7 && *((double *)v15 + 4) <= a4)
  {
    uint64_t v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v21;
          uint64_t v22 = *((double *)v21 + 4);
          if (v22 <= a4) {
            break;
          }
          uint64_t v21 = (uint64_t *)*v21;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }

        if (v22 >= a4) {
          goto LABEL_46;
        }
        uint64_t v7 = (uint64_t **)(v21 + 1);
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_44;
        }
      }
    }

  std::string::size_type v41 = *(void *)(a1 + 496);
  unint64_t v40 = *(void *)(a1 + 504);
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v144 + 88LL))(v144, 0LL) == ((unint64_t)(v40 - v41) >> 3))
  {
    uint64_t v43 = *(void *)(a1 + 528);
    uint64_t v44 = *(void *)(a1 + 520);
    std::string v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v144 + 88LL))(v144, 1LL) != (unint64_t)(v43 - v44) >> 3;
  }

  else
  {
    std::string v45 = 1;
  }

  int v131 = v45;
  int v141 = (void *)(a1 + 496);
  int v133 = (void *)(a1 + 504);
  int v140 = (void *)(a1 + 520);
  int v132 = (void *)(a1 + 528);
  int v143 = (void *)(v142 + 32);
  int v138 = (uint64_t *)(v142 + 8);
  uint64_t v46 = 1;
  *(void *)&__int16 v42 = 136315906LL;
  int v139 = v42;
  do
  {
    uint64_t v135 = v46;
    std::string v47 = (v46 & 1) == 0;
    __int128 v48 = v133;
    if (v47) {
      __int128 v48 = v132;
    }
    if (v47) {
      uint64_t v49 = v140;
    }
    else {
      uint64_t v49 = v141;
    }
    uint64_t v50 = *v48 - *v49;
    if ((v50 & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v51 = v50 >> 3;
      if ((v135 & 1) != 0) {
        __int16 v52 = "input";
      }
      else {
        __int16 v52 = "output";
      }
      int v53 = (v51 - 1);
      for (uint64_t i = (uint64_t *)(*v49 + 8LL * v53); ; uint64_t i = (uint64_t *)(*v49 + 8 * v53))
      {
        uint64_t v55 = *i;
        __int16 v56 = *(_DWORD *)(*i + 8);
        sub_2C2370((char *)a1, *i);
        sub_E10A0(v55);
        uint64_t v57 = *(char ***)v142;
        __int16 v58 = operator new(0x10uLL);
        *__int16 v58 = off_4790E0;
        v58[1] = v55;
        sub_E4104(v57, (uint64_t)v58);
        sub_E37D4(v143, *(_DWORD *)(a1 + 8), v56);
        uint64_t v59 = sub_138E8(1);
        __int16 v60 = sub_138E8(4);
        uint64_t v61 = 0;
        __int16 v62 = 0LL;
        *(void *)AudioStreamBasicDescription buf = 0x100000002LL;
        uint64_t v63 = *(void *)(v59 + 8);
        while (1)
        {
          uint64_t v64 = *(int *)&buf[4 * v62];
          uint64_t v65 = v61;
          if (((v63 & v64) != 0) != ((*(void *)(v60 + 8) & v64) != 0)) {
            break;
          }
          uint64_t v61 = 1;
          __int16 v62 = 1LL;
          if ((v65 & 1) != 0) {
            goto LABEL_67;
          }
        }

        if ((v63 & v64) == 0) {
          uint64_t v59 = v60;
        }
LABEL_67:
        uint64_t v66 = *(os_log_s **)v59;
        if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = v139;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          int v147 = 1024;
          int v148 = 4384;
          double v149 = 2080;
          int v150 = v52;
          int v151 = 1024;
          int v152 = v56;
          _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Deleted %s VirtualAudio_Stream ID %u and inserted in the unpublish list.",  buf,  0x22u);
        }

        if (!v53) {
          break;
        }
        --v53;
      }
    }

    uint64_t v67 = v135 ^ 1;
    uint64_t v68 = (*(uint64_t (**)(uint64_t, void))(*(void *)v144 + 88LL))(v144, (v135 ^ 1) & 1);
    if ((_DWORD)v68)
    {
      uint64_t v69 = 0LL;
      uint64_t v70 = v135 & 1;
      char v71 = "output";
      if ((v135 & 1) != 0) {
        char v71 = "input";
      }
      int v134 = v71;
      int64_t v72 = 1;
      char v136 = v135 & 1;
      int v137 = v135 ^ 1;
      do
      {
        int v145 = 0;
        if (!AudioObjectCreate( *(void *)(a1 + 568) + 80LL,  *(unsigned int *)(a1 + 8),  1634956402LL,  &v145))
        {
          uint64_t v73 = operator new(0x88uLL);
          sub_2F4FC8((uint64_t)v73, v145, 1634956402, *(void *)(a1 + 568));
          *uint64_t v73 = off_4711C0;
          v73[10] = a1;
          *((_BYTE *)v73 + 88) = v70;
          *((_DWORD *)v73 + 23) = v72;
          *((_DWORD *)v73 + 24) = 0;
          v73[13] = 0LL;
          unint64_t v74 = operator new(0x68uLL);
          __int128 *v74 = off_4744F8;
          v74[1] = v73;
          *((_OWORD *)v74 + 1) = 0u;
          *((_OWORD *)v74 + 2) = 0u;
          *((_OWORD *)v74 + 3) = 0u;
          *((_OWORD *)v74 + 4) = 0u;
          *((_OWORD *)v74 + 5) = 0u;
          v74[12] = 0LL;
          v73[13] = v74;
          sub_2F505C(v73, (uint64_t)v74);
          *uint64_t v73 = off_46F210;
          v73[14] = a1;
          v73[15] = 0LL;
          *((_WORD *)v73 + 64) = 0;
          sub_E1394((uint64_t)v73, v144, v69, v138);
          *(void *)AudioStreamBasicDescription buf = v73;
          if (*((_BYTE *)v73 + 88)) {
            uint64_t v75 = (char **)v141;
          }
          else {
            uint64_t v75 = (char **)v140;
          }
          uint64_t v77 = *v75;
          uint64_t v76 = v75[1];
          if (*v75 == v76)
          {
            unint64_t v78 = *v75;
          }

          else
          {
            unint64_t v78 = *v75;
            while (*(_DWORD *)(*(void *)v78 + 96LL) + *(_DWORD *)(*(void *)v78 + 92LL) < (*((_DWORD *)v73 + 24) + *((_DWORD *)v73 + 23)))
            {
              v78 += 8;
              if (v78 == v76)
              {
                unint64_t v78 = v75[1];
                break;
              }
            }
          }

          uint64_t v79 = (unint64_t)v75[2];
          if ((unint64_t)v76 >= v79)
          {
            uint64_t v83 = ((v76 - v77) >> 3) + 1;
            if (v83 >> 61) {
              sub_7A87C();
            }
            uint64_t v84 = v79 - (void)v77;
            if (v84 >> 2 > v83) {
              uint64_t v83 = v84 >> 2;
            }
            else {
              unint64_t v85 = v83;
            }
            if (v85)
            {
              uint64_t v87 = (char *)sub_7DC90(v85);
            }

            else
            {
              uint64_t v87 = 0LL;
              unint64_t v86 = 0LL;
            }

            uint64_t v89 = v78 - v77;
            uint64_t v90 = (v78 - v77) >> 3;
            AudioStreamBasicDescription v91 = &v87[8 * v90];
            uint64_t v92 = &v87[8 * v86];
            if (v90 == v86)
            {
              if (v89 < 1)
              {
                if (v77 == v78) {
                  uint64_t v94 = 1LL;
                }
                else {
                  uint64_t v94 = v89 >> 2;
                }
                unsigned int v95 = (char *)sub_7DC90(v94);
                AudioStreamBasicDescription v91 = &v95[8 * (v94 >> 2)];
                uint64_t v92 = &v95[8 * v96];
                if (v87) {
                  operator delete(v87);
                }
              }

              else
              {
                if (v90 >= -1) {
                  uint64_t v93 = v90 + 1;
                }
                else {
                  uint64_t v93 = v90 + 2;
                }
                v91 -= 8 * (v93 >> 1);
              }
            }

            *(void *)AudioStreamBasicDescription v91 = *(void *)buf;
            uint64_t v97 = v91 + 8;
            __int128 v98 = *v75;
            if (*v75 != v78)
            {
              unint64_t v99 = v78;
              do
              {
                uint64_t v100 = *((void *)v99 - 1);
                v99 -= 8;
                *((void *)v91 - 1) = v100;
                v91 -= 8;
              }

              while (v99 != v98);
            }

            uint64_t v101 = v75[1];
            __int128 v102 = v101 - v78;
            if (v101 != v78) {
              memmove(v97, v78, v101 - v78);
            }
            __int128 v103 = *v75;
            *uint64_t v75 = v91;
            v75[1] = &v97[v102];
            v75[2] = v92;
            uint64_t v70 = v136;
            uint64_t v67 = v137;
            if (v103) {
              operator delete(v103);
            }
          }

          else if (v78 == v76)
          {
            *(void *)uint64_t v76 = v73;
            v75[1] = v76 + 8;
          }

          else
          {
            __int16 v80 = v76 - 8;
            uint64_t v81 = v75[1];
            while (v80 < v76)
            {
              uint64_t v82 = *(void *)v80;
              v80 += 8;
              *(void *)uint64_t v81 = v82;
              v81 += 8;
            }

            v75[1] = v81;
            if (v76 != v78 + 8) {
              memmove(&v76[-8 * ((v76 - (v78 + 8)) >> 3)], v78, v76 - (v78 + 8));
            }
            AudioStreamBasicDescription v88 = buf;
            if (v78 <= buf) {
              AudioStreamBasicDescription v88 = &buf[8 * (v75[1] > buf)];
            }
            *(void *)unint64_t v78 = *(void *)v88;
          }

          sub_E326C(v143, *(_DWORD *)(a1 + 8), v145);
          uint64_t v104 = sub_138E8(1);
          uint64_t v105 = sub_138E8(4);
          uint64_t v106 = 0;
          uint64_t v107 = 0LL;
          ++v72;
          *(void *)AudioStreamBasicDescription buf = 0x100000002LL;
          uint64_t v108 = *(void *)(v104 + 8);
          while (1)
          {
            __int128 v109 = *(int *)&buf[4 * v107];
            __int128 v110 = v106;
            if (((v108 & v109) != 0) != ((*(void *)(v105 + 8) & v109) != 0)) {
              break;
            }
            uint64_t v106 = 1;
            uint64_t v107 = 1LL;
            if ((v110 & 1) != 0) {
              goto LABEL_132;
            }
          }

          if ((v108 & v109) == 0) {
            uint64_t v104 = v105;
          }
LABEL_132:
          uint64_t v111 = *(os_log_s **)v104;
          if (v111 && os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = v139;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            int v147 = 1024;
            int v148 = 4405;
            double v149 = 2080;
            int v150 = v134;
            int v151 = 1024;
            int v152 = v145;
            _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created  %s VirtualAudio_Stream ID %u and inserted in the publish list.",  buf,  0x22u);
          }
        }

        uint64_t v68 = (*(uint64_t (**)(uint64_t, void))(*(void *)v144 + 88LL))(v144, v67 & 1);
        uint64_t v69 = (v69 + 1);
      }

      while (v69 < v68);
    }

    uint64_t v46 = 0;
  }

  while ((v135 & 1) != 0);
  if (v131)
  {
    if (((*(void *)(*(void *)(a1 + 464) + 16LL) - *(void *)(*(void *)(a1 + 464) + 8LL)) & 0x7FFFFFFF0LL) != 0)
    {
      uint64_t v68 = sub_138E8(1);
      __int128 v112 = *(os_log_s **)v68;
      if (*(void *)v68)
      {
        uint64_t v68 = os_log_type_enabled(*(os_log_t *)v68, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v68)
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          int v147 = 1024;
          int v148 = 4413;
          _os_log_impl(&dword_0, v112, OS_LOG_TYPE_ERROR, "%25s:%-5d there is more than 1 IOProc", buf, 0x12u);
        }
      }
    }

    uint64_t v113 = *(uint64_t **)(*(void *)(a1 + 464) + 8LL);
    else {
      __int128 v114 = *v113;
    }
    int v115 = 1;
    do
    {
      int v116 = v115;
      int v117 = (v115 & 1) == 0;
      int v118 = v133;
      if (v117) {
        int v118 = v132;
      }
      int v119 = v141;
      if (v117) {
        int v119 = v140;
      }
      int v120 = (*v118 - *v119) >> 3;
      __chkstk_darwin(v68);
      int v123 = &v130[-v122];
      if ((_DWORD)v120) {
        memset(&v130[-v122], 1, v121);
      }
      sub_C5C00(*(void *)(a1 + 464), v114, v116 & 1, v120, v123);
      int v124 = *(_DWORD *)(a1 + 8);
      if ((v116 & 1) != 0) {
        int v125 = 1768845428;
      }
      else {
        int v125 = 1869968496;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 1937077093;
      *(_DWORD *)&uint8_t buf[4] = v125;
      *(_DWORD *)&buf[8] = 0;
      int v126 = (unint64_t *)sub_E2D90(v138, v124);
      sub_87EB4(v126, (int *)buf);
      int v115 = 0;
    }

    while ((v116 & 1) != 0);
  }

                if (a2)
                {
                  uint64_t v23 = (os_log_t *)sub_138E8(17);
                  UInt32 v24 = *v23;
                  if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4250;
                    *(_WORD *)&_BYTE buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v3;
                    _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Network Uplink Clock UID %d Timing information is derived from cellular baseband",  buf,  0x18u);
                  }

                  *(_DWORD *)AudioStreamBasicDescription buf = 1128614988;
                  sub_C81CC(v3, buf, COERCE_DOUBLE(1735159650LL));
                }

                else
                {
                  uint64_t v25 = (os_log_t *)sub_138E8(17);
                  uint64_t v26 = *v25;
                  if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4257;
                    *(_WORD *)&_BYTE buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v3;
                    _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Network Uplink Clock UID %d Timing information is synthesized from local device clock",  buf,  0x18u);
                  }

                  *(_DWORD *)AudioStreamBasicDescription buf = 1280262988;
                  sub_C81CC(v3, buf, COERCE_DOUBLE(1735159650LL));
                }

                goto LABEL_55;
              }

        unint64_t v29 = sub_138E8(13);
        if ((*(_BYTE *)(v29 + 8) & 1) != 0)
        {
          OSStatus v30 = *(os_log_s **)v29;
          if (*(void *)v29)
          {
            if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
            {
              *(AudioObjectPropertyAddress *)&std::string __p = inAddress;
              sub_613AC((uint64_t)&v147, (unsigned int *)&__p);
              uint64_t v31 = v147.__cv_.__opaque[15] >= 0 ? &v147 : (std::condition_variable *)v147.__cv_.__sig;
              buf.AudioObjectPropertySelector mSelector = 136315906;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              int v138 = 1024;
              int v139 = 199;
              int v140 = 2080;
              *(void *)int v141 = v31;
              *(_WORD *)&v141[8] = 1024;
              *(_DWORD *)&v141[10] = os_unfair_lock_opaque;
              _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
              if (v147.__cv_.__opaque[15] < 0) {
                operator delete((void *)v147.__cv_.__sig);
              }
            }
          }
        }

        AudioStreamBasicDescription buf = inAddress;
        uint64_t v32 = v89;
        __int128 v33 = v90;
        __int128 v34 = sub_90738(os_unfair_lock_opaque, &buf, v89, v90);
        if (!(_DWORD)v34)
        {
          LOBYTE(v37) = 1;
          goto LABEL_81;
        }

        __int128 v35 = v34;
        uint64_t v36 = (os_log_t *)sub_138E8(13);
        AudioConverterRef v37 = *v36;
        if (!*v36) {
          goto LABEL_81;
        }
        if (os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&v147, v35);
          uint64_t v38 = v147.__cv_.__opaque[15];
          sig = v147.__cv_.__sig;
          *(AudioObjectPropertyAddress *)int v126 = inAddress;
          sub_613AC((uint64_t)&__p, (unsigned int *)v126);
          unint64_t v40 = &v147;
          if (v38 < 0) {
            unint64_t v40 = (std::condition_variable *)sig;
          }
          if (v118 >= 0) {
            p_p = (uint64_t)&__p;
          }
          else {
            p_p = __p;
          }
          buf.AudioObjectPropertySelector mSelector = 136316418;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          int v138 = 1024;
          int v139 = 207;
          int v140 = 1024;
          *(_DWORD *)int v141 = v35;
          *(_WORD *)&v141[4] = 2080;
          *(void *)&v141[6] = v40;
          *(_WORD *)&v141[14] = 2080;
          *(void *)&v141[16] = p_p;
          *(_WORD *)&v141[24] = 1024;
          *(_DWORD *)&v141[26] = os_unfair_lock_opaque;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
          if (SHIBYTE(v118) < 0) {
            operator delete((void *)__p);
          }
          if (v147.__cv_.__opaque[15] < 0) {
            operator delete((void *)v147.__cv_.__sig);
          }
        }

        goto LABEL_80;
      }
    }

    else
    {
      uint64_t v44 = 0;
      if (!v128) {
        goto LABEL_72;
      }
    }

    int v129 = v43;
    operator delete(v43);
    goto LABEL_72;
  }

  return 1LL;
}

      uint64_t v12 = v7;
      goto LABEL_22;
    }

    goto LABEL_43;
  }

  if (v8 >= a3) {
    return v5;
  }
  uint64_t v12 = (uint64_t **)(a2 + 1);
  UInt32 v13 = (uint64_t *)a2[1];
  if (v13)
  {
    do
    {
      uint64_t v12 = (uint64_t **)v13;
      UInt32 v13 = (uint64_t *)*v13;
      uint64_t v14 = v12;
      UInt32 v15 = v12;
    }

    while (v13);
  }

  else
  {
    UInt32 v15 = (uint64_t **)a2;
    do
    {
      uint64_t v20 = v15;
      UInt32 v15 = (uint64_t **)v15[2];
    }

    while (*v15 != (uint64_t *)v20);
    uint64_t v14 = (uint64_t **)a2;
  }

  if (v15 != v7 && (unint64_t)v15[4] <= a3)
  {
    uint64_t v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v21;
          uint64_t v22 = v21[4];
          if (v22 <= a3) {
            break;
          }
          uint64_t v21 = *v14;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }

        if (v22 >= a3) {
          goto LABEL_46;
        }
        uint64_t v7 = v14 + 1;
        uint64_t v21 = v14[1];
        if (!v21) {
          goto LABEL_44;
        }
      }
    }

      uint64_t v10 = v5;
      goto LABEL_22;
    }
  }

  else
  {
    if (v6 >= a3) {
      return;
    }
    uint64_t v10 = (uint64_t **)(a2 + 1);
    UInt32 v11 = (uint64_t *)a2[1];
    if (v11)
    {
      do
      {
        uint64_t v10 = (uint64_t **)v11;
        UInt32 v11 = (uint64_t *)*v11;
        uint64_t v12 = v10;
        UInt32 v13 = v10;
      }

      while (v11);
    }

    else
    {
      UInt32 v13 = (uint64_t **)a2;
      do
      {
        uint64_t v18 = (uint64_t *)v13;
        UInt32 v13 = (uint64_t **)v13[2];
      }

      while (*v13 != v18);
      uint64_t v12 = (uint64_t **)a2;
    }

    if (v13 == v5 || *((_DWORD *)v13 + 8) > a3)
    {
LABEL_22:
      uint64_t v5 = v10;
      if (*v10) {
        return;
      }
      goto LABEL_44;
    }

    UInt32 v19 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = (uint64_t **)v19;
          uint64_t v20 = *((_DWORD *)v19 + 8);
          if (v20 <= a3) {
            break;
          }
          UInt32 v19 = *v12;
          uint64_t v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }

        if (v20 >= a3) {
          goto LABEL_46;
        }
        uint64_t v5 = v12 + 1;
        UInt32 v19 = v12[1];
        if (!v19) {
          goto LABEL_44;
        }
      }
    }
  }

  uint64_t v12 = a1 + 1;
LABEL_44:
  sub_EE138((uint64_t)v21, (uint64_t)a1, a4);
  sub_32C38(a1, (uint64_t)v12, v5, v21[0]);
  v21[0] = 0LL;
  sub_EE1A4((uint64_t)v21);
}

      uint64_t v12 = (void **)v7;
      goto LABEL_22;
    }

    goto LABEL_43;
  }

  if (v8 >= a3) {
    return v5;
  }
  uint64_t v12 = (void **)(a2 + 1);
  UInt32 v13 = (void **)a2[1];
  if (v13)
  {
    do
    {
      uint64_t v12 = v13;
      UInt32 v13 = (void **)*v13;
      uint64_t v14 = (uint64_t **)v12;
      UInt32 v15 = v12;
    }

    while (v13);
  }

  else
  {
    UInt32 v15 = (void **)a2;
    do
    {
      uint64_t v20 = v15;
      UInt32 v15 = (void **)v15[2];
    }

    while (*v15 != v20);
    uint64_t v14 = (uint64_t **)a2;
  }

  if (v15 != (void **)v7 && *((_DWORD *)v15 + 7) <= a3)
  {
    uint64_t v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v21;
          uint64_t v22 = *((_DWORD *)v21 + 7);
          if (v22 <= a3) {
            break;
          }
          uint64_t v21 = *v14;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }

        if (v22 >= a3) {
          goto LABEL_46;
        }
        uint64_t v7 = v14 + 1;
        uint64_t v21 = v14[1];
        if (!v21) {
          goto LABEL_44;
        }
      }
    }

      uint64_t v10 = v5;
      goto LABEL_22;
    }
  }

  else
  {
    if (v6 >= a3) {
      return result;
    }
    uint64_t v10 = (uint64_t **)(a2 + 1);
    UInt32 v11 = (uint64_t *)a2[1];
    if (v11)
    {
      do
      {
        uint64_t v10 = (uint64_t **)v11;
        UInt32 v11 = (uint64_t *)*v11;
        uint64_t v12 = v10;
        UInt32 v13 = v10;
      }

      while (v11);
    }

    else
    {
      UInt32 v13 = (uint64_t **)a2;
      do
      {
        uint64_t v18 = (uint64_t *)v13;
        UInt32 v13 = (uint64_t **)v13[2];
      }

      while (*v13 != v18);
      uint64_t v12 = (uint64_t **)a2;
    }

    if (v13 == v5 || *((_DWORD *)v13 + 8) > a3)
    {
LABEL_22:
      uint64_t v5 = v10;
      if (*v10) {
        return result;
      }
      goto LABEL_44;
    }

    UInt32 v19 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = (uint64_t **)v19;
          uint64_t v20 = *((_DWORD *)v19 + 8);
          if (v20 <= a3) {
            break;
          }
          UInt32 v19 = *v12;
          uint64_t v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }

        if (v20 >= a3) {
          goto LABEL_46;
        }
        uint64_t v5 = v12 + 1;
        UInt32 v19 = v12[1];
        if (!v19) {
          goto LABEL_44;
        }
      }
    }
  }

  uint64_t v12 = (uint64_t **)(result + 1);
LABEL_44:
  sub_24A2AC((uint64_t)&v21, (uint64_t)result, a4);
  return sub_32C38(v4, (uint64_t)v12, v5, v21);
}

  *(_DWORD *)a1 = v18;
  sub_C590C((_BYTE *)(a1 + 8), (__int128 *)__p);
  if (v31)
  {
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
  }

    v19 += 56LL;
    if (v19 != v14) {
      continue;
    }
    break;
  }

  uint64_t v14 = a1[1];
LABEL_50:
  if (v15 != v14) {
    a1[1] = v15;
  }
LABEL_15:
  uint64_t v10 = (os_log_t *)sub_138E8(22);
  UInt32 v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    sub_27E6F8(&__p, *a1, a1[1]);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    unint64_t v29 = "VirtualStream.cpp";
    OSStatus v30 = 1024;
    uint64_t v31 = 297;
    uint64_t v32 = 2080;
    __int128 v33 = p_p;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format list after culling: %s", buf, 0x1Cu);
  }

  if ((int)(v33 >> 3) >= 1)
  {
    uint64_t v38 = 0LL;
    uint64_t v39 = (v33 >> 3);
    do
    {
      unint64_t v40 = *(void *)(a2[86] + 8 * v38);
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v40 + 136LL))(buf, v40);
      unint64_t v51 = 0LL;
      __int16 v52 = 0LL;
      if (*(void *)&buf[8])
      {
        std::string::size_type v41 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
        __int16 v52 = v41;
        if (v41)
        {
          __int16 v42 = *(void *)buf;
          unint64_t v51 = *(void *)buf;
        }

        else
        {
          __int16 v42 = 0LL;
        }

        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v42)
        {
          sub_85A90((uint64_t *)buf, (void *)(v42 + 112));
          if (*(void *)&buf[16])
          {
            if ((*(_BYTE *)a3 & 4) != 0)
            {
              uint64_t v43 = *a1;
              __int128 v48 = 1LL;
              uint64_t v49 = 1;
              uint64_t v50 = v38;
              uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 48LL))(v40);
              if (v43) {
                (*(void (**)(char *, uint64_t *, uint64_t, _BYTE *))(*(void *)v43 + 16LL))( v43,  &v48,  v44,  buf);
              }
            }

            else
            {
              uint64_t v43 = *a1;
            }

            __int128 v48 = 1LL;
            uint64_t v49 = 2;
            uint64_t v50 = v38;
            std::string v45 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 56LL))(v40);
            if (v43) {
              (*(void (**)(char *, uint64_t *, uint64_t, _BYTE *))(*(void *)v43 + 16LL))(v43, &v48, v45, buf);
            }
          }

          goto LABEL_64;
        }
      }

      else
      {
        std::string::size_type v41 = 0LL;
      }

      *(void *)AudioStreamBasicDescription buf = buf;
      *(_OWORD *)&buf[8] = (unint64_t)buf;
LABEL_64:
      sub_85B80((uint64_t *)buf);
      if (v41)
      {
        uint64_t v46 = (unint64_t *)&v41->__shared_owners_;
        do
          std::string v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }

      ++v38;
    }

    while (v38 != v39);
  }

  if (v38 && *a6 >= 2)
  {
    uint64_t v46 = (uint64_t *)(a1 + 880);
    for (uint64_t m = 1LL; m < *a6; ++m)
    {
      __int128 v48 = *v46;
      memset(&buf, 0, sizeof(buf));
      sub_22FACC( &buf,  *(void *)(v48 + 16),  *(void *)(v48 + 24),  0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(*(void *)(v48 + 24) - *(void *)(v48 + 16)) >> 4));
      memset(v93, 0, sizeof(v93));
      sub_22FACC( v93,  *(void *)(v48 + 40),  *(void *)(v48 + 48),  0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(*(void *)(v48 + 48) - *(void *)(v48 + 40)) >> 4));
      uint64_t v94 = 0LL;
      unsigned int v95 = 0;
      sub_2DB30((uint64_t)&v94, (unsigned int **)(v48 + 64));
      unint64_t v96 = 0LL;
      uint64_t v97 = 0;
      sub_2DB30((uint64_t)&v96, (unsigned int **)(v48 + 80));
      uint64_t v49 = sub_45C8((uint64_t)&buf, 1, 0);
      uint64_t v50 = v49;
      unint64_t v51 = *(void *)(v49 + 192);
      if (*(_BYTE *)(v51 + 448) || *(void *)(v51 + 584))
      {
        if (*(_DWORD *)(v49 + 8) == 1819304813) {
          goto LABEL_52;
        }
      }

      else
      {
        if (*(void *)(v51 + 672)) {
          uint64_t v61 = *(_DWORD *)(v49 + 8) == 1819304813;
        }
        else {
          uint64_t v61 = 0;
        }
        if (v61)
        {
LABEL_52:
          __int16 v52 = *(AudioBufferList **)(v93[0] + 160LL);
          int v53 = *(AudioBufferList **)(v93[0] + 176LL);
          uint64_t v87 = v53;
          AudioStreamBasicDescription v88 = v52;
          __int16 v54 = v52->mNumberBuffers;
          if ((_DWORD)v54)
          {
            uint64_t v55 = *(_DWORD *)(v49 + 104) * v23;
            __int16 v56 = &v52->mBuffers[0].mDataByteSize;
            do
            {
              *__int16 v56 = v55;
              v56 += 4;
              --v54;
            }

            while (v54);
          }

          uint64_t v57 = v53->mNumberBuffers;
          if ((_DWORD)v57)
          {
            __int16 v58 = *(_DWORD *)(v49 + 144) * v23;
            uint64_t v59 = &v53->mBuffers[0].mDataByteSize;
            do
            {
              std::string *v59 = v58;
              v59 += 4;
              --v57;
            }

            while (v57);
          }

          __int16 v60 = *(void *)(a1 + 88);
          *(void *)&v91.uint64_t mNumberBuffers = 1LL;
          v91.mBuffers[0].mNumberChannels = 1;
          v91.mBuffers[0].size_t mDataByteSize = v44;
          if (v60)
          {
            sub_75260(v60, &v91, (uint64_t)v52, v23, (uint64_t)*a7);
            unint64_t v51 = *(void *)(v50 + 192);
            __int16 v52 = v88;
          }

          sub_3014C(*(OpaqueAudioConverter **)(v51 + 584), v23, inInputData, v52);
          (*(void (**)(void, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))(**(void **)(v50 + 192) + 144LL))( *(void *)(v50 + 192),  a7,  v23,  1LL,  &v88,  1LL,  &v87);
          v91.uint64_t mNumberBuffers = 1;
          v91.mBuffers[0] = *(AudioBuffer *)&a6[4 * m + 2];
          sub_3014C(*(OpaqueAudioConverter **)(*(void *)(v50 + 192) + 672LL), v23, v87, &v91);
          sub_4974(a1 + 144, *(unsigned int *)(v50 + 204), (uint64_t)&v91, v23, (uint64_t)a7);
          ++v44;
          goto LABEL_66;
        }
      }

      memcpy(*(void **)&a6[4 * m + 4], inInputData->mBuffers[0].mData, inInputData->mBuffers[0].mDataByteSize);
LABEL_66:
      sub_2DBF4(&v96);
      sub_2DBF4(&v94);
      *(void *)&v91.uint64_t mNumberBuffers = v93;
      sub_867A4((void ***)&v91);
      *(void *)&v91.uint64_t mNumberBuffers = &buf;
      sub_867A4((void ***)&v91);
      uint64_t v46 = (uint64_t *)(v48 + 8);
    }
  }

  if (*(_DWORD *)(v84 + 8) == 1819304813)
  {
    __int16 v62 = *a6;
    if ((_DWORD)v62)
    {
      uint64_t v63 = 0LL;
      uint64_t v64 = (uint64_t)(a6 + 2);
      do
      {
        uint64_t v65 = *(void *)(a1 + 88);
        *(void *)&buf.uint64_t mNumberBuffers = 1LL;
        buf.mBuffers[0].mNumberChannels = 2;
        buf.mBuffers[0].size_t mDataByteSize = v63;
        if (v65)
        {
          sub_4784(v65, &buf, v64);
          __int16 v62 = *a6;
        }

        ++v63;
        v64 += 16LL;
      }

      while (v63 < v62);
    }
  }

  if (*(_BYTE *)(a1 + 364) && *a6)
  {
    uint64_t v66 = 0LL;
    uint64_t v67 = (void **)(a6 + 4);
    do
    {
      bzero(*v67, *((unsigned int *)v67 - 1));
      ++v66;
      v67 += 2;
    }

    while (v66 < *a6);
  }

  return 0LL;
}

    if (a2[2])
    {
      uint64_t v25 = (os_log_t *)sub_138E8(23);
      uint64_t v26 = *v25;
      if (*v25)
      {
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
        {
          sub_2D9F18(&theString1, (uint64_t)a2);
          OSStatus v27 = (theString1.__r_.__value_.__s.__size_ & 0x80u) == 0
              ? &theString1
              : (std::string *)theString1.__r_.__value_.__r.__words[0];
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "Port_BluetoothA2DP_Aspen.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 337;
          WORD1(__p[2]) = 2080;
          *(void **)((char *)&__p[2] + 4) = v27;
          _os_log_impl(&dword_0, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Partner ports: %s", (uint8_t *)__p, 0x1Cu);
        }
      }
    }

    if (theArray) {
      CFRelease(theArray);
    }
  }

  sub_85B80(v32);
}

void sub_30128(_Unwind_Exception *exception_object)
{
}

void sub_3014C( OpaqueAudioConverter *a1, UInt32 a2, AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  if (a1)
  {
    AudioConverterConvertComplexBuffer(a1, a2, inInputData, outOutputData);
  }

  else
  {
    BOOL v14 = 0;
    if (sub_2DE20(&inInputData->mNumberBuffers, outOutputData, &v14))
    {
      if (!v14)
      {
        uint64_t v6 = outOutputData->mNumberBuffers >= inInputData->mNumberBuffers
           ? inInputData->mNumberBuffers
           : outOutputData->mNumberBuffers;
        if ((_DWORD)v6)
        {
          p_mData = &outOutputData->mBuffers[0].mData;
          unint64_t v8 = &inInputData->mBuffers[0].mData;
          do
          {
            if (*p_mData != *v8)
            {
              unsigned int v9 = *((_DWORD *)p_mData - 1);
              unsigned int v10 = *((_DWORD *)v8 - 1);
              if (v9 >= v10) {
                size_t v11 = v10;
              }
              else {
                size_t v11 = v9;
              }
              if ((_DWORD)v11) {
                memcpy(*p_mData, *v8, v11);
              }
            }

            p_mData += 2;
            v8 += 2;
            --v6;
          }

          while (v6);
        }
      }
    }

    else
    {
      uint64_t v12 = (os_log_t *)sub_138E8(13);
      UInt32 v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        uint64_t v16 = "DSPReformatter.cpp";
        __int16 v17 = 1024;
        int v18 = 148;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: No converter in place even though buffer lists differ in structure",  buf,  0x12u);
      }
    }
  }

uint64_t sub_302C4( uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int **a5, unsigned int a6, unsigned int **a7)
{
  if (*(_BYTE *)(result + 448))
  {
    uint64_t v9 = result;
    unsigned int v10 = (unsigned int *)(result + 680);
    WORD1(v40) = *(_WORD *)(result + 682);
    LOWORD(v40) = *(_WORD *)(result + 682);
    WORD1(v39) = *(_WORD *)(result + 682) == 0;
    LOWORD(v39) = *(_WORD *)(result + 682);
    while (1)
    {
      unsigned int v11 = __ldaxr(v10);
      if (v11 != (_DWORD)v40) {
        break;
      }
    }

    __clrex();
LABEL_7:
    if (*(_WORD *)(result + 682)) {
      uint64_t v12 = 400LL;
    }
    else {
      uint64_t v12 = 424LL;
    }
    if (*(_WORD *)(result + 682)) {
      uint64_t v13 = result + 400;
    }
    else {
      uint64_t v13 = result + 424;
    }
    uint64_t v14 = *(void *)(v13 + 8) - *(void *)(result + v12);
    if (v14)
    {
      uint64_t v15 = 0LL;
      unint64_t v16 = v14 / 24;
      unint64_t v17 = v16 - 1;
      if (v16 <= 1) {
        uint64_t v18 = 1LL;
      }
      else {
        uint64_t v18 = v16;
      }
      do
      {
        uint64_t v19 = *(void *)(v9 + v12) + 24 * v15;
        uint64_t v21 = *(void *)(v19 + 8);
        uint64_t v20 = (void *)(v19 + 8);
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 128LL))(v21, 1LL, 0LL);
        uint64_t v23 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*v20 + 128LL))(*v20, 2LL, 0LL);
        if (v15)
        {
          UInt32 v24 = *(unsigned int **)(*(void *)(v9 + 976) + 32 * v15);
          unint64_t v40 = v24;
          if (v24)
          {
            uint64_t v25 = *v24;
            if ((_DWORD)v25)
            {
              unint64_t v26 = 0LL;
              unsigned int v27 = *(_DWORD *)(v22 + 24) * a3;
              uint64_t v28 = 16 * v25;
              do
              {
                v24[v26 / 4 + 3] = v27;
                v26 += 16LL;
              }

              while (v28 != v26);
            }
          }
        }

        else
        {
          UInt32 v24 = 0LL;
          unint64_t v40 = 0LL;
        }

        if (v17 == v15)
        {
          uint64_t v39 = 0LL;
          unint64_t v29 = a7;
        }

        else
        {
          OSStatus v30 = *(unsigned int **)(*(void *)(v9 + 976) + 32 * v15 + 16);
          uint64_t v39 = v30;
          unint64_t v29 = a7;
          if (v30)
          {
            uint64_t v31 = *v30;
            if ((_DWORD)v31)
            {
              int v32 = *(_DWORD *)(v23 + 24) * a3;
              __int128 v33 = v30 + 3;
              do
              {
                *__int128 v33 = v32;
                v33 += 4;
                --v31;
              }

              while (v31);
            }

            unint64_t v29 = &v39;
          }
        }

        if ((*(unsigned int (**)(void))(*(void *)*v20 + 216LL))(*v20))
        {
          if (v24) {
            __int128 v34 = &v40;
          }
          else {
            __int128 v34 = a5;
          }
          __n128 result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, unsigned int **, void, unsigned int **))(*(void *)*v20 + 112LL))( *v20,  a2,  a3,  a4,  v34,  a6,  v29);
        }

        else
        {
          __n128 result = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned int *))(*(void *)*v20 + 104LL))( *v20,  a2,  a3,  *v29);
        }

        ++v15;
      }

      while (v15 != v18);
    }
  }

  return result;
}

uint64_t sub_30520(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 141);
}

uint64_t sub_30528( uint64_t a1, AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, UInt32 inNumberInputBufferLists, const AudioBufferList **inInputBufferLists, UInt32 inNumberOutputBufferLists, AudioBufferList **ioOutputBufferLists)
{
  AudioUnitRenderActionFlags ioActionFlags = 512;
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    unint64_t v8 = *(OpaqueAudioComponentInstance **)(v7 + 16);
  }
  else {
    unint64_t v8 = 0LL;
  }
  return AudioUnitProcessMultiple( v8,  &ioActionFlags,  inTimeStamp,  inNumberFrames,  inNumberInputBufferLists,  inInputBufferLists,  inNumberOutputBufferLists,  ioOutputBufferLists);
}

_BYTE *sub_3057C(uint64_t a1)
{
  uint64_t v7 = a1 + 48;
  char v8 = 1;
  sub_190270(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v2)
  {
    unint64_t v3 = v2 / 24;
    if (v3 <= 1) {
      uint64_t v4 = 1LL;
    }
    else {
      uint64_t v4 = v3;
    }
    uint64_t v5 = 8LL;
    do
    {
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 24) + v5) + 32LL))(*(void *)(*(void *)(a1 + 24) + v5));
      v5 += 24LL;
      --v4;
    }

    while (v4);
  }

  return sub_19032C(&v7);
}

void sub_30614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_30628(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    uint64_t v2 = *(OpaqueAudioComponentInstance **)(v1 + 16);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return AudioUnitReset(v2, 0, 0);
}

uint64_t sub_30648(uint64_t a1)
{
  uint64_t v2 = *(OpaqueAudioConverter **)(a1 + 80);
  if (v2)
  {
    AudioConverterDispose(v2);
    *(void *)(a1 + 80) = 0LL;
  }

  return a1;
}

void sub_3067C(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(16);
  unint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = 0LL;
    char v14 = 8;
    strcpy((char *)__p, "00000000");
    uint64_t v5 = 7LL;
    do
    {
      if (((*(void *)(a1 + 80) >> v4) & 1) != 0)
      {
        if (v14 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *((_BYTE *)v6 + v5) = 49;
      }

      ++v4;
      --v5;
    }

    while (v4 != 8);
    uint64_t v7 = __p;
    if (v14 < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
    __int16 v16 = 1024;
    int v17 = 1446;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2080;
    uint64_t v21 = "anc|tel|sec|pri|hal";
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags : %s (%s)", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  char v8 = operator new(0x20uLL);
  v8[4] = 0;
  *(void *)char v8 = off_47AFC0;
  *((void *)v8 + 1) = 0LL;
  *((void *)v8 + 3) = 0LL;
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 608LL))(buf, a1, a1 + 80);
  uint64_t v10 = *(void *)buf;
  *(void *)AudioStreamBasicDescription buf = 0LL;
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    uint64_t v12 = *(void *)buf;
    *(void *)AudioStreamBasicDescription buf = 0LL;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

  *(_BYTE *)(a1 + 104) = *(void *)(a1 + 96) != 0LL;
  sub_3228C(a1, *(void *)(a1 + 80));
}

void sub_30874(caulk::concurrent::message *this)
{
  *(void *)this = off_47AFC0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

void sub_308BC(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if ((*(_DWORD *)(a1 + 768) & 0xFFFFFFFE) == 2)
  {
    uint64_t v6 = *a3;
    if (*a3)
    {
      if (*(void *)(a1 + 800))
      {
        if ((*(_BYTE *)a2 & 2) != 0)
        {
          int v7 = *(_DWORD *)(*(void *)(a1 + 808) + 4LL);
          uint64_t v8 = 0x100000000LL;
          int v9 = 0;
          int v10 = v7;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v6 + 16LL))( v6,  &v8,  *(void *)(a1 + 832) + 40LL,  a1 + 784);
        }
      }
    }
  }

void sub_30954(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  _Unwind_Resume(a1);
}

void sub_30974(void *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0LL;
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8 || byte_48CDA9)
  {
    sub_31158((char **)buf, (uint64_t)a1, a2);
    uint64_t v6 = *(void *)buf;
    *a3 = *(void *)buf;
    uint64_t v7 = (uint64_t)(a1 + 86);
    if (a1[87] != a1[86])
    {
      uint64_t v8 = a1[65];
      if (a1[66] == v8)
      {
        __int16 v52 = (os_log_t *)sub_138E8(13);
        int v53 = *v52;
        if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1471;
          _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Expected at least one input stream.  Found 0.",  buf,  0x12u);
        }

        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Expected at least one input stream.  Found 0.");
      }

      sub_85A90(v59, (void *)(*(void *)v8 + 112LL));
      if (v60)
      {
        unint64_t v9 = *a2;
        if ((*a2 & 2) != 0)
        {
          uint64_t v10 = sub_138E8(16);
          uint64_t v11 = sub_138E8(40);
          char v12 = 0;
          uint64_t v13 = 0LL;
          *(void *)AudioStreamBasicDescription buf = 0x100000002LL;
          uint64_t v14 = *(void *)(v10 + 8);
          while (1)
          {
            uint64_t v15 = *(int *)&buf[4 * v13];
            char v16 = v12;
            if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
              break;
            }
            char v12 = 1;
            uint64_t v13 = 1LL;
            if ((v16 & 1) != 0)
            {
              if ((v14 & 1) == 0) {
                goto LABEL_20;
              }
              goto LABEL_17;
            }
          }

          if ((v14 & v15) == 0) {
            uint64_t v10 = v11;
          }
          if ((*(void *)(v10 + 8) & 1) != 0)
          {
LABEL_17:
            int v17 = *(os_log_s **)v10;
            if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1480;
              _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitor for primary input streams",  buf,  0x12u);
            }
          }

LABEL_68:
          uint64_t v50 = sub_45C8(v7, 1, 0);
          __int128 v51 = *(_OWORD *)(v50 + 56);
          *(_OWORD *)AudioStreamBasicDescription buf = *(_OWORD *)(v50 + 40);
          *(_OWORD *)&buf[16] = v51;
          uint64_t v62 = *(void *)(v50 + 72);
          __int128 v58 = xmmword_403260;
          if (v6) {
            (*(void (**)(uint64_t, __int128 *, _BYTE *, uint64_t *))(*(void *)v6 + 16LL))(v6, &v58, buf, v59);
          }
        }
      }

      sub_85B80(v59);
    }
  }

      uint64_t v5 = 1668047723;
      goto LABEL_73;
    }

    if (v5 == 1784767339) {
      goto LABEL_73;
    }
    unint64_t v9 = 1818455660;
    goto LABEL_52;
  }

  if (v5 > 1668510306)
  {
    if (v5 == 1668510307) {
      goto LABEL_68;
    }
    uint64_t v8 = 1684157046;
    goto LABEL_66;
  }

  if (v5 == 1668506403 || v5 == 1668506475) {
    goto LABEL_68;
  }
}

  uint64_t v101 = (uint64_t **)v3;
  if (v3[18] != v3[19])
  {
    char v48 = *a2;
    uint64_t v49 = a2[1];
    if (*a2 != v49)
    {
      uint64_t v50 = v3 + 47;
      while (1)
      {
        __int128 v51 = *v48;
        v118[0] = &off_479268;
        int v119 = v118;
        sub_1F6154((uint64_t)buf, (void *)(v51 + 16), (uint64_t)v118);
        __int16 v52 = v119;
        if (v119 == v118) {
          break;
        }
        if (v119)
        {
          int v53 = 5LL;
LABEL_75:
          (*(void (**)(void))(*v52 + 8 * v53))();
        }

        uint64_t v107 = 0LL;
        uint64_t v108 = 0LL;
        uint64_t v106 = &v107;
        __int16 v54 = *(std::__shared_weak_count ***)buf;
        if (*(_BYTE **)buf != &buf[8])
        {
          do
          {
            uint64_t v55 = std::__shared_weak_count::lock(v54[5]);
            __int16 v56 = (unint64_t)v54[4][8].__vftable;
            uint64_t v57 = v107;
            __int128 v58 = &v107;
            uint64_t v59 = &v107;
            if (v107)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v59 = (uint64_t **)v57;
                  uint64_t v60 = v57[4];
                  if (v56 >= v60) {
                    break;
                  }
                  uint64_t v57 = *v59;
                  __int128 v58 = v59;
                  if (!*v59) {
                    goto LABEL_84;
                  }
                }

                if (v60 >= v56) {
                  break;
                }
                uint64_t v57 = v59[1];
                if (!v57)
                {
                  __int128 v58 = v59 + 1;
                  goto LABEL_84;
                }
              }
            }

            else
            {
LABEL_84:
              uint64_t v61 = (uint64_t *)operator new(0x28uLL);
              v61[4] = v56;
              char *v61 = 0LL;
              v61[1] = 0LL;
              v61[2] = (uint64_t)v59;
              *__int128 v58 = v61;
              if (*v106)
              {
                uint64_t v106 = (uint64_t **)*v106;
                uint64_t v61 = *v58;
              }

              sub_7A420(v107, v61);
              ++v108;
            }

            p_shared_owners = (unint64_t *)&v55->__shared_owners_;
            do
              uint64_t v63 = __ldaxr(p_shared_owners);
            while (__stlxr(v63 - 1, p_shared_owners));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }

            uint64_t v64 = v54[1];
            if (v64)
            {
              do
              {
                uint64_t v65 = (std::__shared_weak_count **)v64;
                uint64_t v64 = (std::__shared_weak_count *)v64->__vftable;
              }

              while (v64);
            }

            else
            {
              do
              {
                uint64_t v65 = (std::__shared_weak_count **)v54[2];
                char v16 = *v65 == (std::__shared_weak_count *)v54;
                __int16 v54 = v65;
              }

              while (!v16);
            }

            __int16 v54 = v65;
          }

          while (v65 != (std::__shared_weak_count **)&buf[8]);
          uint64_t v66 = v106;
          if (v106 != &v107)
          {
            do
            {
              (*(void (**)(uint64_t *, void *, uint64_t *))(*v66[4] + 232))(v66[4], v50, v48);
              uint64_t v67 = v66[1];
              if (v67)
              {
                do
                {
                  uint64_t v68 = (uint64_t **)v67;
                  uint64_t v67 = (uint64_t *)*v67;
                }

                while (v67);
              }

              else
              {
                do
                {
                  uint64_t v68 = (uint64_t **)v66[2];
                  char v16 = *v68 == (uint64_t *)v66;
                  uint64_t v66 = v68;
                }

                while (!v16);
              }

              uint64_t v66 = v68;
            }

            while (v68 != &v107);
          }
        }

        sub_32C8C(v107);
        sub_FF3B8(*(void **)&buf[8]);
        v48 += 27;
        if (v48 == v49) {
          goto LABEL_105;
        }
      }

      __int16 v52 = v118;
      int v53 = 4LL;
      goto LABEL_75;
    }
  }

  char v38 = (os_log_t *)sub_138E8(16);
  uint64_t v39 = *v38;
  if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v40 = *(void *)(a1 + 16);
    *(_DWORD *)cStr = 136315650;
    *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
    *(_WORD *)&cStr[12] = 1024;
    *(_DWORD *)&cStr[14] = 340;
    int v144 = 2048;
    *(void *)int v145 = v40;
    _os_log_impl(&dword_0, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d Topology contains %lu items...", cStr, 0x1Cu);
  }

  __int128 v41 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  int v129 = v41;
  int v130 = 257;
  uint64_t v42 = *(void *)(a1 + 8);
  if (v42 != a1)
  {
    do
    {
      uint64_t v43 = (os_log_t *)sub_138E8(16);
      char v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v45 = *(void *)(v42 + 32);
        *(_DWORD *)cStr = 136315650;
        *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
        *(_WORD *)&cStr[12] = 1024;
        *(_DWORD *)&cStr[14] = 345;
        int v144 = 2048;
        *(void *)int v145 = v45;
        _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Vertical topo item contains %lu elements...",  cStr,  0x1Cu);
      }

      uint64_t v46 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      uint64_t v47 = v42 + 16;
      theArray = v46;
      int v128 = 257;
      int v119 = v42;
      char v48 = *(void *)(v42 + 24);
      if (v48 != v47)
      {
        while (1)
        {
          uint64_t v49 = (os_log_t *)sub_138E8(16);
          uint64_t v50 = *v49;
          if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_DEBUG))
          {
            __int128 v51 = (*(uint64_t (**)(void))(**(void **)(v48 + 16) + 120LL))(*(void *)(v48 + 16));
            (*(void (**)(CFStringRef **__return_ptr))(**(void **)(v48 + 16) + 128LL))(&__str);
            *(_DWORD *)cStr = 136315906;
            *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
            *(_WORD *)&cStr[12] = 1024;
            *(_DWORD *)&cStr[14] = 351;
            int v144 = 1024;
            *(_DWORD *)int v145 = v51;
            *(_WORD *)&v145[4] = 2112;
            *(void *)&v145[6] = __str;
            _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Scanning PhysicalDevice ID %u (uid %@).",  cStr,  0x22u);
            sub_19DFC((uint64_t)&__str);
          }

          double outData = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          int v126 = 257;
          (*(void (**)(_BYTE *__return_ptr))(**(void **)(v48 + 16) + 128LL))(cStr);
          if (HIBYTE(v126) && *(void *)cStr && outData) {
            CFDictionarySetValue(outData, @"uid", *(const void **)cStr);
          }
          sub_19DFC((uint64_t)cStr);
          __int16 v52 = *(os_unfair_lock_s **)(v48 + 16);
          strcpy(cStr, "dklcbolg");
          cStr[9] = 0;
          *(_WORD *)&cStr[10] = 0;
          if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&v52->_os_unfair_lock_opaque
                                                                           + 16LL))( v52,  cStr))
          {
            int v53 = sub_2891DC((uint64_t)v52);
          }

          else
          {
            int v53 = 0LL;
          }

          if ((_DWORD)v53 == (_DWORD)v26)
          {
            if ((_DWORD)v26)
            {
              if (!v123)
              {
                unint64_t v78 = (os_log_t *)sub_138E8(16);
                uint64_t v79 = *v78;
                if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_DEFAULT))
                {
                  sub_23FE8((uint64_t)&__str, (os_unfair_lock_t)(*(void *)(v48 + 16) + 8LL));
                  __int16 v80 = &__str;
                  if (v142 < 0) {
                    __int16 v80 = (CFStringRef **)__str;
                  }
                  *(_DWORD *)cStr = 136315650;
                  *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
                  *(_WORD *)&cStr[12] = 1024;
                  *(_DWORD *)&cStr[14] = 379;
                  int v144 = 2080;
                  *(void *)int v145 = v80;
                  _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Drift compensation is NOT being applied to subdevice %s",  cStr,  0x1Cu);
                  if (v142 < 0) {
                    operator delete(__str);
                  }
                }

                goto LABEL_140;
              }

              __int16 v54 = (os_log_t *)sub_138E8(16);
              uint64_t v55 = *v54;
              if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_DEBUG))
              {
                sub_23FE8((uint64_t)&__str, v52 + 2);
                __int16 v56 = &__str;
                if (v142 < 0) {
                  __int16 v56 = (CFStringRef **)__str;
                }
                *(_DWORD *)cStr = 136315650;
                *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
                *(_WORD *)&cStr[12] = 1024;
                *(_DWORD *)&cStr[14] = 246;
                int v144 = 2080;
                *(void *)int v145 = v56;
                _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Enabling drift correction because: Aggregate device uses a TimeSync clock. Device: %s.",  cStr,  0x1Cu);
                if (v142 < 0) {
                  operator delete(__str);
                }
              }

void sub_310C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  _Unwind_Resume(a1);
}

void sub_31158(char **a1, uint64_t a2, unint64_t *a3)
{
  *a1 = 0LL;
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8 || byte_48CDA9)
  {
    unint64_t v6 = *a3;
    if (((v6 >> 1) & 1) != 0)
    {
      sub_2CA1C(&v11, *(unsigned int *)(a2 + 268));
      std::to_string(&v10, *(_DWORD *)(a2 + 272));
      if ((v10.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v7 = &v10;
      }
      else {
        uint64_t v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
      }
      if ((v10.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v10.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v10.__r_.__value_.__l.__size_;
      }
      unint64_t v9 = std::string::append(&v11, (const std::string::value_type *)v7, size);
      std::string __p = *v9;
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      *a1 = sub_312D0((v6 >> 1) & 1, (uint64_t)&__p);
    }
  }

void sub_31278( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  void *v26 = 0LL;
  _Unwind_Resume(exception_object);
}

char *sub_312D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x78uLL);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_24054(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }

  *((void *)v4 + 5) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 2) = a1;
  *((void *)v4 + 3) = v4 + 32;
  *(void *)uint64_t v4 = off_481120;
  *((void *)v4 + 1) = 0LL;
  *((_OWORD *)v4 + 3) = 0u;
  uint64_t v5 = v4 + 96;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  if (SHIBYTE(v8) < 0)
  {
    sub_24054(v5, __p[0], (unint64_t)__p[1]);
    operator delete(__p[0]);
  }

  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
    *((void *)v4 + 14) = v8;
  }

  return v4;
}

void sub_31398(_Unwind_Exception *a1)
{
  void *v1 = &off_482620;
  sub_32194(v1[4]);
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_313F0(void *a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 temporaryDirectory]);
  id v3 = objc_claimAutoreleasedReturnValue([v2 path]);
  sub_7D084(a1, (char *)[v3 UTF8String]);
}

void sub_31468( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_31494(std::string *a1, uint64_t a2, int *a3, const void **a4)
{
  if ((int)a2 > 1886154612)
  {
    if ((int)a2 > 1886614624)
    {
      if ((int)a2 > 1886675571)
      {
        if ((int)a2 <= 1886740851)
        {
          if ((_DWORD)a2 == 1886675572)
          {
            char v16 = "VAD_ThunderboltTapStreamInput";
            size_t v17 = 29LL;
            goto LABEL_118;
          }

          if ((_DWORD)a2 != 1886680169)
          {
            if ((_DWORD)a2 != 1886680175) {
              goto LABEL_169;
            }
            std::string v11 = "VAD_TTYOutput";
            goto LABEL_104;
          }

          __dst.__r_.__value_.__s.__size_ = 12;
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1953853550;
          unint64_t v9 = "VAD_TTYInput";
        }

        else if ((int)a2 > 1886745448)
        {
          if ((_DWORD)a2 != 1886745449)
          {
            if ((_DWORD)a2 != 1886745455) {
              goto LABEL_169;
            }
            std::string v11 = "VAD_USBOutput";
            goto LABEL_104;
          }

          __dst.__r_.__value_.__s.__size_ = 12;
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1953853550;
          unint64_t v9 = "VAD_USBInput";
        }

        else
        {
          if ((_DWORD)a2 == 1886740852)
          {
            __dst.__r_.__value_.__s.__size_ = 20;
            LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
            uint64_t v8 = "VAD_USBAudioTapInput";
            goto LABEL_120;
          }

          if ((_DWORD)a2 != 1886743662) {
            goto LABEL_169;
          }
          __dst.__r_.__value_.__s.__size_ = 12;
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1802398060;
          unint64_t v9 = "VAD_BBUplink";
        }

        goto LABEL_130;
      }

      if ((int)a2 <= 1886614639)
      {
        if ((_DWORD)a2 == 1886614625)
        {
          __dst.__r_.__value_.__s.__size_ = 20;
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853556;
          uint64_t v8 = "VAD_CarPlayAltOutput";
          goto LABEL_120;
        }

        if ((_DWORD)a2 == 1886614633)
        {
          __dst.__r_.__value_.__s.__size_ = 20;
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
          uint64_t v8 = "VAD_CarPlayMainInput";
          goto LABEL_120;
        }

        if ((_DWORD)a2 != 1886614639) {
          goto LABEL_169;
        }
        char v12 = "VAD_CarPlayMainOutput";
        goto LABEL_128;
      }

      if ((_DWORD)a2 != 1886614640)
      {
        if ((_DWORD)a2 == 1886675561)
        {
          __dst.__r_.__value_.__s.__size_ = 20;
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
          uint64_t v8 = "VAD_ThunderboltInput";
          goto LABEL_120;
        }

        if ((_DWORD)a2 != 1886675567) {
          goto LABEL_169;
        }
        char v12 = "VAD_ThunderboltOutput";
        goto LABEL_128;
      }

      char v16 = "VAD_SpeakerTapStreamInput";
      goto LABEL_117;
    }

    if ((int)a2 <= 1886545250)
    {
      if ((int)a2 > 1886222184)
      {
        if ((_DWORD)a2 != 1886222185)
        {
          if ((_DWORD)a2 != 1886284905)
          {
            if ((_DWORD)a2 != 1886287212) {
              goto LABEL_169;
            }
            uint64_t v15 = "VAD_NULL_Output";
            goto LABEL_94;
          }

          uint64_t v14 = "VAD_NULL_Input";
LABEL_111:
          __dst.__r_.__value_.__s.__size_ = 14;
          __dst.__r_.__value_.__r.__words[0] = *(void *)v14;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 6) = *(void *)(v14 + 6);
          __dst.__r_.__value_.__s.__data_[14] = 0;
          goto LABEL_131;
        }

        __dst.__r_.__value_.__s.__size_ = 12;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1667845476;
        unint64_t v9 = "VAD_WiredMic";
      }

      else
      {
        if ((_DWORD)a2 == 1886154613)
        {
          __dst.__r_.__value_.__s.__size_ = 11;
          strcpy((char *)&__dst, "VAD_LineOut");
          goto LABEL_131;
        }

        if ((_DWORD)a2 == 1886216809)
        {
          uint64_t v14 = "VAD_BuiltInMic";
          goto LABEL_111;
        }

        if ((_DWORD)a2 != 1886216820) {
          goto LABEL_169;
        }
        __dst.__r_.__value_.__s.__size_ = 12;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1953853550;
        unint64_t v9 = "VAD_HFPInput";
      }

LABEL_130:
      __dst.__r_.__value_.__r.__words[0] = *(void *)v9;
      __dst.__r_.__value_.__s.__data_[12] = 0;
      goto LABEL_131;
    }

    if ((int)a2 > 1886610287)
    {
      if ((_DWORD)a2 == 1886610288)
      {
        __dst.__r_.__value_.__s.__size_ = 17;
        LOWORD(__dst.__r_.__value_.__r.__words[2]) = 101;
        std::string v10 = "VAD_SystemCapture";
        goto LABEL_125;
      }

      if ((_DWORD)a2 == 1886613611)
      {
        __dst.__r_.__value_.__s.__size_ = 18;
        strcpy((char *)&__dst, "VAD_BuiltInSpeaker");
        goto LABEL_131;
      }

      if ((_DWORD)a2 != 1886613618) {
        goto LABEL_169;
      }
      char v16 = "VAD_SpeakerTelemetryInput";
      goto LABEL_117;
    }

    if ((_DWORD)a2 == 1886545251)
    {
      __dst.__r_.__value_.__s.__size_ = 12;
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1919252073;
      unint64_t v9 = "VAD_Receiver";
      goto LABEL_130;
    }

    if ((_DWORD)a2 != 1886549104)
    {
      if ((_DWORD)a2 == 1886609775)
      {
        __dst.__r_.__value_.__s.__size_ = 20;
        LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853556;
        uint64_t v8 = "VAD_CarPlayAuxOutput";
        goto LABEL_120;
      }

      goto LABEL_169;
    }

    char v16 = "VAD_ReceiverTapStreamInput";
LABEL_101:
    size_t v17 = 26LL;
    goto LABEL_118;
  }

  if ((int)a2 <= 1885629549)
  {
    if ((int)a2 <= 1885433442)
    {
      if ((int)a2 <= 1885418099)
      {
        if ((_DWORD)a2 == 1651663971)
        {
          std::string v11 = "VAD_Broadcast";
          goto LABEL_104;
        }

        if ((_DWORD)a2 == 1751409257)
        {
          uint64_t v15 = "VAD_HapticDebug";
          goto LABEL_94;
        }

        if ((_DWORD)a2 != 1819306350) {
          goto LABEL_169;
        }
        __dst.__r_.__value_.__s.__size_ = 17;
        LOWORD(__dst.__r_.__value_.__r.__words[2]) = 114;
        std::string v10 = "VAD_LPMicInjector";
        goto LABEL_125;
      }

      if ((_DWORD)a2 != 1885418100)
      {
        if ((_DWORD)a2 != 1885430644)
        {
          if ((_DWORD)a2 != 1885432182) {
            goto LABEL_169;
          }
          uint64_t v14 = "VAD_ActuatorIV";
          goto LABEL_111;
        }

        __dst.__r_.__value_.__s.__size_ = 12;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1919906913;
        unint64_t v9 = "VAD_Actuator";
        goto LABEL_130;
      }

      char v16 = "VAD_BluetoothA2DPTapInput";
LABEL_117:
      size_t v17 = 25LL;
      goto LABEL_118;
    }

    if ((int)a2 <= 1885564780)
    {
      if ((_DWORD)a2 == 1885433443)
      {
        __dst.__r_.__value_.__s.__size_ = 4;
        strcpy((char *)&__dst, "EANC");
        goto LABEL_131;
      }

      if ((_DWORD)a2 == 1885433953)
      {
        __dst.__r_.__value_.__s.__size_ = 16;
        uint64_t v18 = "VAD_AirPlayAudio";
LABEL_115:
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v18;
        __dst.__r_.__value_.__s.__data_[16] = 0;
        goto LABEL_131;
      }

      if ((_DWORD)a2 != 1885433971) {
        goto LABEL_169;
      }
      __dst.__r_.__value_.__s.__size_ = 17;
      LOWORD(__dst.__r_.__value_.__r.__words[2]) = 110;
      std::string v10 = "VAD_AirPlayScreen";
LABEL_125:
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
      goto LABEL_131;
    }

    if ((_DWORD)a2 == 1885564781)
    {
      __dst.__r_.__value_.__s.__size_ = 17;
      LOWORD(__dst.__r_.__value_.__r.__words[2]) = 99;
      std::string v10 = "VAD_ContinuityMic";
      goto LABEL_125;
    }

    if ((_DWORD)a2 == 1885565044)
    {
      __dst.__r_.__value_.__s.__size_ = 19;
      *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = 1953853550;
      uint64_t v13 = "VAD_CarPlayTapInput";
      goto LABEL_123;
    }

    if ((_DWORD)a2 != 1885565807) {
      goto LABEL_169;
    }
    char v16 = "VAD_ContinuityScreenOutput";
    goto LABEL_101;
  }

  if ((int)a2 > 1885892673)
  {
    if ((int)a2 > 1885894515)
    {
      if ((int)a2 <= 1886152046)
      {
        if ((_DWORD)a2 != 1885894516)
        {
          if ((_DWORD)a2 == 1886152041)
          {
            __dst.__r_.__value_.__s.__size_ = 20;
            LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
            uint64_t v8 = "VAD_BluetoothLEInput";
LABEL_120:
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
            __dst.__r_.__value_.__s.__data_[20] = 0;
            goto LABEL_131;
          }

          goto LABEL_169;
        }

        char v16 = "VAD_HeadphonesWiredTapStreamInput";
        size_t v17 = 33LL;
LABEL_118:
        sub_90B04(&__dst, v16, v17);
        goto LABEL_131;
      }

      if ((_DWORD)a2 != 1886152047)
      {
        if ((_DWORD)a2 == 1886152052)
        {
          char v16 = "VAD_BluetoothLETapInput";
          size_t v17 = 23LL;
          goto LABEL_118;
        }

        goto LABEL_169;
      }

      char v12 = "VAD_BluetoothLEOutput";
LABEL_128:
      __dst.__r_.__value_.__s.__size_ = 21;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v12;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 5) = *(void *)(v12 + 13);
      __dst.__r_.__value_.__s.__data_[21] = 0;
      goto LABEL_131;
    }

    if ((_DWORD)a2 != 1885892674)
    {
      if ((_DWORD)a2 != 1885892706)
      {
        if ((_DWORD)a2 != 1885892727) {
          goto LABEL_169;
        }
        __dst.__r_.__value_.__s.__size_ = 19;
        *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = 1936027247;
        uint64_t v13 = "VAD_WiredHeadphones";
LABEL_123:
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
        __dst.__r_.__value_.__s.__data_[19] = 0;
        goto LABEL_131;
      }

      std::string v11 = "VAD_HFPOutput";
LABEL_104:
      __dst.__r_.__value_.__s.__size_ = 13;
      __dst.__r_.__value_.__r.__words[0] = *(void *)v11;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(void *)(v11 + 5);
      __dst.__r_.__value_.__s.__data_[13] = 0;
      goto LABEL_131;
    }

    __dst.__r_.__value_.__s.__size_ = 8;
    std::string::size_type v19 = 0x504432415F444156LL;
LABEL_113:
    __dst.__r_.__value_.__r.__words[0] = v19;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    goto LABEL_131;
  }

  if ((int)a2 <= 1885889644)
  {
    if ((_DWORD)a2 != 1885629550)
    {
      if ((_DWORD)a2 != 1885631344)
      {
        if ((_DWORD)a2 != 1885888867) {
          goto LABEL_169;
        }
        std::string v11 = "VAD_HACOutput";
        goto LABEL_104;
      }

      uint64_t v15 = "VAD_DisplayPort";
LABEL_94:
      __dst.__r_.__value_.__s.__size_ = 15;
      __dst.__r_.__value_.__r.__words[0] = *(void *)v15;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(void *)(v15 + 7);
      __dst.__r_.__value_.__s.__data_[15] = 0;
      goto LABEL_131;
    }

    uint64_t v14 = "VAD_BBDownlink";
    goto LABEL_111;
  }

  switch((_DWORD)a2)
  {
    case 0x7068646D:
      __dst.__r_.__value_.__s.__size_ = 8;
      std::string::size_type v19 = 0x494D44485F444156LL;
      goto LABEL_113;
    case 0x70686474:
      __dst.__r_.__value_.__s.__size_ = 16;
      uint64_t v18 = "VAD_HDMITapInput";
      goto LABEL_115;
    case 0x70686674:
      char v16 = "VAD_BluetoothHFPTapInput";
      size_t v17 = 24LL;
      goto LABEL_118;
  }

      if (v4) {
        goto LABEL_166;
      }
      return v7;
    }

    if (v6 > 1886413425)
    {
      if (v6 <= 1918987631)
      {
        if (v6 == 1886413426) {
          goto LABEL_165;
        }
        if (v6 == 1886807154) {
          goto LABEL_158;
        }
        std::string v11 = 1902539642;
      }

      else
      {
        if (v6 > 1919774834)
        {
          if (v6 != 1919774835)
          {
            uint64_t v8 = 1920165219;
            goto LABEL_164;
          }

          goto LABEL_168;
        }

        if (v6 == 1918987632) {
          goto LABEL_168;
        }
        std::string v11 = 1919773028;
      }

      goto LABEL_129;
    }

    if (v6 <= 1885631345)
    {
      if (v6 == 1869575794) {
        goto LABEL_158;
      }
      if (v6 == 1869838183) {
        goto LABEL_165;
      }
      uint64_t v8 = 1885434482;
      goto LABEL_164;
    }

    if (v6 == 1885631346) {
      goto LABEL_158;
    }
    if (v6 == 1886216547) {
      goto LABEL_165;
    }
    unint64_t v9 = 1886413412;
LABEL_157:
    if (v6 == v9) {
      goto LABEL_158;
    }
LABEL_170:
    int v20 = sub_5DDDC((uint64_t)a1, a2);
LABEL_160:
    uint64_t v7 = v20;
    if (!v5) {
      return v7;
    }
    goto LABEL_166;
  }

  if (v6 <= 1668247660)
  {
    if (v6 > 1635020146)
    {
      if (v6 <= 1651664738)
      {
        if (v6 <= 1635152992)
        {
          if (v6 == 1635020147) {
            goto LABEL_158;
          }
          uint64_t v8 = 1635148648;
        }

        else
        {
          uint64_t v8 = 1650881394;
        }

        goto LABEL_164;
      }

      if (v6 <= 1651861091)
      {
        if (v6 == 1651664739 || v6 == 1651798132) {
          goto LABEL_158;
        }
        unint64_t v9 = 1651798898;
        goto LABEL_157;
      }

      if (v6 != 1651861092)
      {
        if (v6 == 1667658618) {
          goto LABEL_165;
        }
        unint64_t v9 = 1668047203;
        goto LABEL_157;
      }
    }

    else
    {
      if (v6 <= 1633970531)
      {
        if (v6 > 1633904998)
        {
          if (v6 == 1633904999 || v6 == 1633906541) {
            goto LABEL_158;
          }
          char v12 = 29554;
        }

        else
        {
          if (v6 == 1165513555 || v6 == 1633776747) {
            goto LABEL_158;
          }
          char v12 = 25449;
        }

        unint64_t v9 = v12 | 0x61630000;
        goto LABEL_157;
      }

      if (v6 > 1634300530)
      {
        if (v6 > 1634755427)
        {
          if (v6 == 1634755428) {
            goto LABEL_158;
          }
          unint64_t v9 = 1634890859;
        }

        else
        {
          if (v6 == 1634300531) {
            goto LABEL_165;
          }
          unint64_t v9 = 1634692199;
        }

        goto LABEL_157;
      }

      if (v6 != 1633970532)
      {
        if (v6 == 1633973868) {
          goto LABEL_158;
        }
        if (v6 != 1634035054) {
          goto LABEL_170;
        }
        char v16 = a2[1];
        size_t v17 = v16 == 1869968496 || v16 == 1768845428;
        goto LABEL_143;
      }
    }

    goto LABEL_130;
  }

  if (v6 > 1684500588)
  {
    if (v6 > 1685287010)
    {
      if (v6 <= 1685288050)
      {
        if (v6 != 1685287523) {
          goto LABEL_170;
        }
        uint64_t v14 = a2[1];
        uint64_t v15 = 1768845428;
        goto LABEL_142;
      }

      if (v6 == 1685288051) {
        goto LABEL_165;
      }
      unint64_t v9 = 1685483630;
    }

    else if (v6 > 1685025632)
    {
      if (v6 == 1685025633) {
        goto LABEL_165;
      }
      unint64_t v9 = 1685087596;
    }

    else
    {
      if (v6 == 1684500589 || v6 == 1684500594) {
        goto LABEL_158;
      }
      unint64_t v9 = 1684893796;
    }

    goto LABEL_157;
  }

  if (v6 <= 1684236337)
  {
    if (v6 <= 1684104047)
    {
      if (v6 == 1668247661)
      {
        std::string::size_type v19 = 4LL;
        goto LABEL_159;
      }

      if (v6 == 1668443504) {
        goto LABEL_168;
      }
      uint64_t v13 = 1668705648;
      goto LABEL_109;
    }

    if (v6 != 1684104048 && v6 != 1684104051)
    {
      unint64_t v9 = 1684107364;
      goto LABEL_157;
    }
  }

  else
  {
    if (v6 > 1684365923)
    {
      if (v6 <= 1684498540)
      {
        if (v6 != 1684365924)
        {
          unint64_t v9 = 1684370276;
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (v6 == 1684498541) {
        goto LABEL_165;
      }
      uint64_t v8 = 1684498544;
LABEL_164:
      if (v6 == v8) {
        goto LABEL_165;
      }
      goto LABEL_170;
    }

    if (v6 != 1684236338 && v6 != 1684238451)
    {
      uint64_t v18 = 1684304756;
      goto LABEL_140;
    }
  }

LABEL_169:
  uint64_t v35 = (os_log_t *)sub_138E8(13);
  uint64_t v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(__p, a2);
    uint64_t v37 = v40 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    *(void *)&uint8_t buf[4] = "AudioIOMonitor.cpp";
    __int16 v43 = 1024;
    int v44 = 230;
    __int16 v45 = 2080;
    uint64_t v46 = v37;
    _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected port type:%s in switch statement",  buf,  0x1Cu);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }

  if ((char)__dst.__r_.__value_.__s.__size_ < 0)
  {
    __dst.__r_.__value_.__l.__size_ = 17LL;
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }

  else
  {
    __dst.__r_.__value_.__s.__size_ = 17;
    p_dst = &__dst;
  }

  strcpy((char *)p_dst, "VAD_UnknownStream");
LABEL_131:
  int v20 = a3[2];
  int v21 = *a3;
  if (v20 == 1 && v21 == 1)
  {
    char v22 = "_PreDSP";
    std::string::size_type v23 = 7LL;
LABEL_137:
    std::string::append(&__dst, v22, v23);
    goto LABEL_138;
  }

  if (v20 == 2 && !v21)
  {
    char v22 = "_PostDSP";
    std::string::size_type v23 = 8LL;
    goto LABEL_137;
  }

        if (*(_DWORD *)(v100 + 48) == *((_DWORD *)v582 + 12))
        {
LABEL_205:
          if (!*(void *)v583)
          {
            uint64_t v544 = (os_log_t *)sub_138E8(13);
            id v545 = *v544;
            if (*v544 && os_log_type_enabled(*v544, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int v637 = 136315394;
              *(void *)&v637[4] = "DSPGraphChain_HAL_SpeakerProtection.cpp";
              *(_WORD *)&v637[12] = 1024;
              *(_DWORD *)&v637[14] = 55;
              _os_log_impl( &dword_0,  v545,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  v637,  0x12u);
            }

            v546 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v546, "Postcondition failure.");
          }

          uint64_t v28 = (std::__shared_weak_count *)operator new(0x20uLL);
          v28->__shared_owners_ = 0LL;
          int v133 = (unint64_t *)&v28->__shared_owners_;
          v28->__vftable = (std::__shared_weak_count_vtbl *)&off_46D460;
          v28->__shared_weak_owners_ = 0LL;
          v28[1].__vftable = (std::__shared_weak_count_vtbl *)v51;
          *(void *)&uint64_t v30 = v51;
          *((void *)&v30 + 1) = v28;
          int v134 = (std::__shared_weak_count *)*((void *)v51 + 2);
          if (v134)
          {
            if (v134->__shared_owners_ != -1) {
              goto LABEL_219;
            }
            do
              uint64_t v135 = __ldxr(v133);
            while (__stxr(v135 + 1, v133));
            id v585 = v30;
            char v136 = (unint64_t *)&v28->__shared_weak_owners_;
            do
              int v137 = __ldxr(v136);
            while (__stxr(v137 + 1, v136));
            *((void *)v51 + 1) = v51;
            *((void *)v51 + 2) = v28;
            std::__shared_weak_count::__release_weak(v134);
            uint64_t v30 = v585;
          }

          else
          {
            do
              int v138 = __ldxr(v133);
            while (__stxr(v138 + 1, v133));
            int v139 = (unint64_t *)&v28->__shared_weak_owners_;
            do
              int v140 = __ldxr(v139);
            while (__stxr(v140 + 1, v139));
            *((void *)v51 + 1) = v51;
            *((void *)v51 + 2) = v28;
          }

          do
            char v38 = __ldaxr(v133);
          while (__stlxr(v38 - 1, v133));
          goto LABEL_217;
        }
      }

LABEL_138:
  if ((_DWORD)a2 == 1885433443)
  {
    uint64_t v24 = a3[3];
    if (v24 > 5)
    {
      uint64_t v25 = (os_log_t *)sub_138E8(13);
      char v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        int v27 = a3[3];
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioIOMonitor.cpp";
        __int16 v43 = 1024;
        int v44 = 267;
        __int16 v45 = 1024;
        LODWORD(v46) = v27;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected stream index:%u in switch statement",  buf,  0x18u);
      }

      if ((char)__dst.__r_.__value_.__s.__size_ < 0)
      {
        __dst.__r_.__value_.__l.__size_ = 18LL;
        uint64_t v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }

      else
      {
        __dst.__r_.__value_.__s.__size_ = 18;
        uint64_t v28 = &__dst;
      }

      strcpy((char *)v28, "UnknownStreamIndex");
    }

    else
    {
      std::string::append(&__dst, off_4811C0[v24], *(void *)&a0vps0ips1vps1i[8 * v24 + 260]);
    }
  }

  else {
    size_t v29 = (size_t)a4[1];
  }
  uint64_t v30 = buf;
  sub_D0924((uint64_t)buf, v29 + 1);
  if (SBYTE3(v46) < 0) {
    uint64_t v30 = *(_BYTE **)buf;
  }
  if (v29)
  {
    else {
      unint64_t v31 = *a4;
    }
    memmove(v30, v31, v29);
  }

  *(_WORD *)&v30[v29] = 95;
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v32 = &__dst;
  }
  else {
    uint64_t v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __dst.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  char v34 = std::string::append((std::string *)buf, (const std::string::value_type *)v32, size);
  *a1 = *v34;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  if (SBYTE3(v46) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_32150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_32194(void *a1)
{
  if (a1)
  {
    sub_32194(*a1);
    sub_32194(a1[1]);
    sub_7A768((uint64_t)(a1 + 6));
    operator delete(a1);
  }

void sub_321D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_321E8(a1);
  operator delete(v1);
}

uint64_t sub_321E8(uint64_t a1)
{
  *(void *)a1 = off_481120;
  *(void *)a1 = &off_482620;
  sub_32194(*(void **)(a1 + 32));
  return a1;
}

void sub_3225C(std::__shared_weak_count *a1)
{
}

uint64_t sub_32270(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_3228C(uint64_t a1, unsigned __int8 a2)
{
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6264617463LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  int HasProperty = AudioObjectHasProperty(v4, &inAddress);
  if (!HasProperty)
  {
    char v12 = (os_log_t *)sub_138E8(16);
    uint64_t v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)__p, &inAddress.mSelector);
        uint64_t v14 = v22 >= 0 ? __p : (void **)__p[0];
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "AggregateDevice.cpp";
        __int16 v24 = 1024;
        int v25 = 410;
        __int16 v26 = 2080;
        int v27 = v14;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HasProperty returned false for %s",  (uint8_t *)&buf,  0x1Cu);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (sub_325E4(v6, &inAddress))
  {
    if (!HasProperty) {
      return;
    }
    if ((a2 & 1) != 0)
    {
      LODWORD(v8) = 1;
    }

    else
    {
      if ((a2 & 0x20) == 0)
      {
        uint64_t v7 = "Enabling";
        if ((a2 & 0x40) != 0)
        {
          LODWORD(v8) = 3;
        }

        else
        {
          if ((a2 & 0x80) == 0) {
            uint64_t v7 = "Disabling";
          }
          unint64_t v8 = (unint64_t)(a2 & 0x80) >> 5;
        }

        goto LABEL_27;
      }

      LODWORD(v8) = 2;
    }

    uint64_t v7 = "Enabling";
LABEL_27:
    uint64_t v15 = (os_log_t *)sub_138E8(16);
    char v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "AggregateDevice.cpp";
      __int16 v24 = 1024;
      int v25 = 434;
      __int16 v26 = 2080;
      int v27 = (void *)v7;
      __int16 v28 = 1024;
      int v29 = v8;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d %s HAL data taps, Setting kAudioDevicePropertyEnableCaptureFile to %d",  (uint8_t *)&buf,  0x22u);
    }

    AudioObjectID v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    LODWORD(__p[0]) = v8;
    strcpy((char *)&buf, "ctadbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    OSStatus v18 = AudioObjectSetPropertyData(v17, &buf, 0, 0LL, 4u, __p);
    if (v18)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = v18;
    }

    return;
  }

  unint64_t v9 = (os_log_t *)sub_138E8(16);
  std::string v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
  {
    sub_613AC((uint64_t)__p, &inAddress.mSelector);
    std::string v11 = v22 >= 0 ? __p : (void **)__p[0];
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "AggregateDevice.cpp";
    __int16 v24 = 1024;
    int v25 = 413;
    __int16 v26 = 2080;
    int v27 = v11;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d IsPropertySettable is false for %s",  (uint8_t *)&buf,  0x1Cu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_325D0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_325E4(AudioObjectID a1, const AudioObjectPropertyAddress *a2)
{
  Boolean outIsSettable = 0;
  if (AudioObjectIsPropertySettable(a1, a2, &outIsSettable)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = outIsSettable == 0;
  }
  return !v2;
}

void sub_3261C()
{
  uint64_t v0 = sub_138E8(40);
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    uint64_t v1 = *(os_log_s **)v0;
    if (*(void *)v0)
    {
      if (os_log_type_enabled(*(os_log_t *)v0, OS_LOG_TYPE_DEBUG))
      {
        int v2 = 136315394;
        id v3 = "AudioIOMonitor.cpp";
        __int16 v4 = 1024;
        int v5 = 337;
        _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting I/O", (uint8_t *)&v2, 0x12u);
      }
    }
  }

uint64_t sub_326DC(uint64_t a1)
{
  for (uint64_t i = v11; &v10 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    id v3 = (std::__shared_weak_count *)i[3];
    unint64_t v9 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t))(*(void *)v2 + 144LL))(v2);
    if (v9)
    {
      AudioObjectID v6 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

  sub_1BB88(&v10);
  return 0LL;
}

void sub_327E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_7A768((uint64_t)va);
  sub_1BB88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_3280C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 240);
  uint64_t v3 = *(void **)(a1 + 248);
  while (v2 != v3)
  {
    std::string __p = 0LL;
    unint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    sub_8D668( &__p,  *(const void **)(a1 + 144),  *(void *)(a1 + 152),  (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
    (*(void (**)(void, void **))(*(void *)*v2 + 48LL))(*v2, &__p);
    (*(void (**)(void))(*(void *)*v2 + 16LL))(*v2);
    if (__p)
    {
      unint64_t v9 = __p;
      operator delete(__p);
    }

    v2 += 2;
  }

  sub_32CC4(a1);
  __int16 v4 = (unsigned __int8 *)(a1 + 365);
  do
    unsigned __int8 v5 = __ldaxr(v4);
  while (__stlxr(0, v4));
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = sub_138E8(16);
    sub_1D71E4(3, v6, (uint64_t)"", 358, (uint64_t)"", "IO Proc about to start. Applying deferred timesync update!");
    v7[0] = 0;
    v7[40] = 0;
    sub_1D6C38(a1, (uint64_t)v7);
  }

void sub_328F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_32918()
{
  uint64_t result = qword_4A9AC0;
  if (!qword_4A9AC0)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        unsigned __int8 v5 = "DeviceInfoListener.cpp";
        __int16 v6 = 1024;
        int v7 = 46;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sDeviceInfoListener is NULL]: sDeviceInfoListener is NULL!",  (uint8_t *)&v4,  0x12u);
      }
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sDeviceInfoListener is NULL!");
  }

  return result;
}

void sub_32A10(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_32A2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_86550(a2, a1 + 216);
}

uint64_t *sub_32A38(uint64_t **a1, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  __int16 v6 = sub_32AB0(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_32C38(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_32AB0(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  unsigned __int8 v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 7), v6 > a5))
  {
    int v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v7)
    {
      unint64_t v8 = (uint64_t *)*a2;
      do
      {
        unint64_t v9 = v8;
        unint64_t v8 = (uint64_t *)v8[1];
      }

      while (v8);
    }

    else
    {
      char v12 = a2;
      do
      {
        unint64_t v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        char v12 = v9;
      }

      while (v13);
    }

    if (*((_DWORD *)v9 + 7) < a5) {
      goto LABEL_17;
    }
    uint64_t v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v15 = (uint64_t *)v14;
          unsigned int v16 = *(_DWORD *)(v14 + 28);
          if (v16 <= a5) {
            break;
          }
          uint64_t v14 = *v15;
          unsigned __int8 v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }

        if (v16 >= a5) {
          break;
        }
        unsigned __int8 v5 = v15 + 1;
        uint64_t v14 = v15[1];
      }

      while (v14);
      goto LABEL_43;
    }

LABEL_42:
    uint64_t v15 = a1 + 1;
LABEL_43:
    *a3 = v15;
    return v5;
  }

  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v10 = a2[1];
  if (v10)
  {
    std::string v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      std::string v11 = (uint64_t *)*v11;
    }

    while (v11);
  }

  else
  {
    AudioObjectID v17 = a2;
    do
    {
      a4 = (uint64_t *)v17[2];
      BOOL v13 = *a4 == (void)v17;
      AudioObjectID v17 = a4;
    }

    while (!v13);
  }

  if (a4 != v5 && *((_DWORD *)a4 + 7) <= a5)
  {
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v15 = (uint64_t *)v18;
          unsigned int v19 = *(_DWORD *)(v18 + 28);
          if (v19 <= a5) {
            break;
          }
          uint64_t v18 = *v15;
          unsigned __int8 v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }

        if (v19 >= a5) {
          break;
        }
        unsigned __int8 v5 = v15 + 1;
        uint64_t v18 = v15[1];
      }

      while (v18);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v10)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

    if (!v25) {
      return;
    }
  }

  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    int v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }

    if (!v23) {
      return;
    }
    goto LABEL_43;
  }

  sub_654FC();
  __int16 v24 = (*(uint64_t (**)(void))(qword_4913D0 + 72))();
  if ((_DWORD)v24)
  {
    int v25 = sub_138E8(18);
    __int16 v26 = sub_138E8(38);
    int v27 = 0;
    __int16 v28 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    int v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *(int *)&buf[4 * v28];
      unint64_t v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      int v27 = 1;
      __int16 v28 = 1LL;
      if ((v31 & 1) != 0) {
        goto LABEL_50;
      }
    }

    if ((v29 & v30) == 0) {
      int v25 = v26;
    }
LABEL_50:
    uint64_t v42 = *(os_log_s **)v25;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      __int16 v43 = v63;
      sub_2CA1C(v63, a3);
      if (v64 < 0) {
        __int16 v43 = (void **)v63[0];
      }
      int v44 = v61;
      sub_2CA1C(v61, a2);
      if (v62 < 0) {
        int v44 = (void **)v61[0];
      }
      __int16 v45 = *((_DWORD *)v7 + 14);
      sub_2CA1C(__p, v24);
      uint64_t v46 = v60;
      uint64_t v47 = (void **)__p[0];
      sub_665BC((uint64_t)v55, a1);
      char v48 = __p;
      if (v46 < 0) {
        char v48 = v47;
      }
      if (v56 >= 0) {
        uint64_t v49 = v55;
      }
      else {
        uint64_t v49 = (void **)v55[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      uint64_t v66 = 1024;
      uint64_t v67 = 362;
      uint64_t v68 = 2080;
      uint64_t v69 = v43;
      uint64_t v70 = 2080;
      char v71 = v44;
      int64_t v72 = 1024;
      uint64_t v73 = v45;
      unint64_t v74 = 2080;
      uint64_t v75 = v48;
      uint64_t v76 = 2080;
      uint64_t v77 = v49;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d VolumeCommand: Failed to set property '%s' on processor type '%s' index %u, err: %s on chain '%s'.",  buf,  0x40u);
      if (v56 < 0) {
        operator delete(v55[0]);
      }
      if (v60 < 0) {
        operator delete(__p[0]);
      }
      if (v62 < 0) {
        operator delete(v61[0]);
      }
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }

    goto LABEL_42;
  }

    uint64_t v15 = a1 + 1;
LABEL_43:
    *a3 = v15;
    return v5;
  }

  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v10 = a2[1];
  if (v10)
  {
    std::string v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      std::string v11 = (uint64_t *)*v11;
    }

    while (v11);
  }

  else
  {
    AudioObjectID v17 = a2;
    do
    {
      a4 = (uint64_t *)v17[2];
      BOOL v13 = *a4 == (void)v17;
      AudioObjectID v17 = a4;
    }

    while (!v13);
  }

  if (a4 != v5 && *((_DWORD *)a4 + 8) <= a5)
  {
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v15 = (uint64_t *)v18;
          unsigned int v19 = *(_DWORD *)(v18 + 32);
          if (v19 <= a5) {
            break;
          }
          uint64_t v18 = *v15;
          unsigned __int8 v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }

        if (v19 >= a5) {
          break;
        }
        unsigned __int8 v5 = v15 + 1;
        uint64_t v18 = v15[1];
      }

      while (v18);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v10)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

      unsigned __int8 v5 = 1LL;
      goto LABEL_43;
    }

    goto LABEL_29;
  }

  unsigned int v6 = 1885892706;
LABEL_6:
  if (v4 != v6) {
    goto LABEL_43;
  }
  uint64_t v36 = 0x676C6F6273687370LL;
  LODWORD(v37) = 0;
  int v7 = sub_5C2F8(v34);
  *((void *)&v9 + 1) = v8;
  *(void *)&unint64_t v9 = v7;
  if (((v9 >> 32) & 0xFF00000000LL) != 0 && HIDWORD(v7) != 0LL) {
    goto LABEL_43;
  }
  sub_B8F68(&v36, a1, "", 210);
  std::string v11 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 112LL))(v36);
  char v12 = v37;
  if (v37)
  {
    BOOL v13 = &v37->__shared_owners_;
    do
      uint64_t v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sub_1338A0(&v36, a1, 1885892674);
  if (!v37) {
    goto LABEL_42;
  }
  uint64_t v15 = *(void *)(a2 + 24);
  if (!v15) {
    sub_82CEC();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v15 + 48LL))(v15, &v36);
LABEL_40:
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_43:
  __int16 v28 = v35;
  if (v35)
  {
    int v29 = (unint64_t *)&v35->__shared_owners_;
    do
      uint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  return v5;
}

        sub_133E30((uint64_t *)v3, v21);
        goto LABEL_43;
      }

      if (v24 == 1768779619) {
        goto LABEL_42;
      }
      int v25 = 1768781411;
    }

  if (*(_DWORD *)(v15 + 8) == 1819304813)
  {
    __int16 v43 = *(void *)(a1 + 88);
    *(_OWORD *)&buf.uint64_t mNumberBuffers = xmmword_403250;
    if (v43) {
      sub_75260(v43, &buf, (uint64_t)v22, v64, (uint64_t)*a7);
    }
    sub_4974(a1 + 144, *(unsigned int *)(v15 + 200), (uint64_t)v22, v64, (uint64_t)a7);
  }

  if (v39)
  {
    if (*(void *)(a1 + 776))
    {
      int v44 = sub_231EDC(*(_BYTE **)(a1 + 640), *(_BYTE **)(a1 + 648), 0);
      buf.uint64_t mNumberBuffers = 1;
      buf.mBuffers[0] = *(AudioBuffer *)&a4[4 * v44 + 2];
      sub_3014C(v42[73], v64, (AudioBufferList *)v22, outOutputData);
      v67[0] = outOutputData;
      v67[1] = &buf;
      (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, void *, uint64_t, AudioBufferList **))*v42
       + 18))( v42,  a7,  v64,  2LL,  v67,  1LL,  &inInputData);
    }

    else
    {
      sub_3014C(v42[73], v64, (AudioBufferList *)v22, outOutputData);
      (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v42
       + 18))( v42,  a7,  v64,  1LL,  &v66,  1LL,  &inInputData);
    }

    buf.uint64_t mNumberBuffers = 1;
    buf.mBuffers[0] = *(AudioBuffer *)(v21 - 1);
    sub_3014C(v42[84], v64, inInputData, &buf);
    sub_4974(a1 + 144, *(unsigned int *)(v15 + 204), (uint64_t)&buf, v64, (uint64_t)a7);
  }

  if (*(_DWORD *)(v15 + 8) == 1819304813)
  {
    uint64_t v46 = *(void *)(a1 + 88);
    *(_OWORD *)&buf.uint64_t mNumberBuffers = xmmword_403260;
    if (v46) {
      sub_4784(v46, &buf, (uint64_t)(v21 - 1));
    }
  }

  if (a6 && *(_BYTE *)(a1 + 364) && *a6)
  {
    uint64_t v47 = 0LL;
    char v48 = (void **)(a6 + 4);
    do
    {
      bzero(*v48, *((unsigned int *)v48 - 1));
      ++v47;
      v48 += 2;
    }

    while (v47 < *a6);
  }

  return 0LL;
}

  std::string::size_type v23 = operator new(0x18uLL);
  os_log_s *v23 = 0LL;
  v23[1] = 0LL;
  v23[2] = 0LL;
  *(void *)AudioObjectPropertyAddress buf = v23;
  *(void *)&buf[8] = 0LL;
  id v545 = 0LL;
  *(void *)&buf[16] = 0LL;
  v546 = &off_46F2D8;
  int v547 = 0LL;
  unsigned int v549 = 0LL;
  v548 = 0LL;
  v551[1] = 0LL;
  v551[0] = 0LL;
  int v550 = v551;
  __int16 v24 = *(_BYTE **)(a2 + 144);
  int v494 = (char **)(a2 + 144);
  int v25 = *(_BYTE **)(a2 + 152);
  __int16 v26 = v25 - v24;
  if (v25 == v24)
  {
    id v497 = 0LL;
    v490 = 0LL;
    std::string __p = 0LL;
    goto LABEL_93;
  }

  if (v26 < 0) {
    sub_7A87C();
  }
  int v27 = (uint64_t *)sub_7DC90(v26 >> 3);
  memmove(v27, v24, v26);
  if (!(8 * (v26 >> 3))) {
    goto LABEL_327;
  }
  __int16 v28 = &v27[v26 >> 3];
  int v29 = v27;
LABEL_46:
  while (v518 == &v517)
  {
LABEL_53:
    if (++v29 == v28) {
      goto LABEL_66;
    }
  }

  uint64_t v30 = *v29;
  unint64_t v31 = v518;
  while (1)
  {
    uint64_t v32 = *((_DWORD *)v31 + 5) == *(_DWORD *)(*v29 + 580) && *((_DWORD *)v31 + 4) == *(_DWORD *)(*v29 + 576);
    if (v32) {
      break;
    }
    unint64_t v31 = (uint64_t *)v31[1];
    if (v31 == &v517) {
      goto LABEL_53;
    }
  }

  while (v29 != --v28)
  {
    uint64_t v33 = v518;
    while (*((_DWORD *)v33 + 5) != *(_DWORD *)(*v28 + 580) || *((_DWORD *)v33 + 4) != *(_DWORD *)(*v28 + 576))
    {
      uint64_t v33 = (uint64_t *)v33[1];
      if (v33 == &v517)
      {
        *v29++ = *v28;
        *__int16 v28 = v30;
        if (v29 != v28) {
          goto LABEL_46;
        }
        goto LABEL_66;
      }
    }
  }

  __int16 v28 = v29;
LABEL_66:
  if (v27 == v28)
  {
LABEL_327:
    std::string __p = 0LL;
    v490 = 0LL;
    id v497 = 0LL;
    if (v27) {
LABEL_92:
    }
      operator delete(v27);
  }

  else
  {
    std::string __p = 0LL;
    v490 = 0LL;
    id v497 = 0LL;
    uint64_t v35 = v27;
    do
    {
      uint64_t v36 = *v35;
      sub_BB590(*v35);
      uint64_t v37 = *(char ***)buf;
      char v38 = operator new(0x10uLL);
      os_log_s *v38 = off_4790E0;
      v38[1] = v36;
      sub_E4104(v37, (uint64_t)v38);
      sub_E37D4(&v546, 1, *(_DWORD *)(v36 + 8));
      sub_25FBC0((void *)*(unsigned int *)(v36 + 576), *(_DWORD *)(v36 + 580), v494);
      if ((unint64_t)v490 >= v497)
      {
        uint64_t v39 = v490 - __p;
        char v40 = v39 + 1;
        else {
          __int128 v41 = v40;
        }
        if (v41) {
          __int128 v41 = (unint64_t)sub_7DC90(v41);
        }
        else {
          uint64_t v42 = 0LL;
        }
        __int16 v43 = (uint64_t *)(v41 + 8 * v39);
        *__int16 v43 = v36;
        int v44 = v43 + 1;
        if (v490 == __p)
        {
          __int16 v45 = __p;
        }

        else
        {
          __int16 v45 = __p;
          uint64_t v46 = v490;
          do
          {
            uint64_t v47 = *--v46;
            *--__int16 v43 = v47;
          }

          while (v46 != __p);
        }

        id v497 = v41 + 8 * v42;
        if (v45) {
          operator delete(v45);
        }
        std::string __p = v43;
        v490 = v44;
      }

      else
      {
        *v490++ = v36;
      }

      char v48 = (os_log_s *)*(id *)sub_138E8(2);
      uint64_t v49 = v48;
      if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v539 = 136315650;
        *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v539[12] = 1024;
        *(_DWORD *)&v539[14] = 1275;
        *(_WORD *)&v539[18] = 2048;
        *(void *)&v539[20] = v36;
        _os_log_impl(&dword_0, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Queuing an extra VAD %p for removal", v539, 0x1Cu);
      }

      ++v35;
    }

    while (v35 != v28);
    if (v27) {
      goto LABEL_92;
    }
  }

    if (!v24) {
      return;
    }
    goto LABEL_43;
  }

  sub_654FC();
  int v25 = (*(uint64_t (**)(void))(qword_4913D0 + 80))();
  if ((_DWORD)v25)
  {
    __int16 v26 = sub_138E8(18);
    int v27 = sub_138E8(38);
    __int16 v28 = 0;
    int v29 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v30 = *(void *)(v26 + 8);
    while (1)
    {
      unint64_t v31 = *(int *)&buf[4 * v29];
      uint64_t v32 = v28;
      if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
        break;
      }
      __int16 v28 = 1;
      int v29 = 1LL;
      if ((v32 & 1) != 0) {
        goto LABEL_50;
      }
    }

    if ((v30 & v31) == 0) {
      __int16 v26 = v27;
    }
LABEL_50:
    __int16 v43 = *(os_log_s **)v26;
    if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      int v44 = v63;
      sub_2CA1C(v63, a2);
      if (v64 < 0) {
        int v44 = (void **)v63[0];
      }
      sub_2CA1C(v61, 1685287015LL);
      if (v62 >= 0) {
        __int16 v45 = v61;
      }
      else {
        __int16 v45 = (void **)v61[0];
      }
      uint64_t v46 = *((_DWORD *)v7 + 14);
      sub_2CA1C(__p, v25);
      uint64_t v47 = v60;
      char v48 = (void **)__p[0];
      sub_665BC((uint64_t)v55, a1);
      uint64_t v49 = __p;
      if (v47 < 0) {
        uint64_t v49 = v48;
      }
      if (v56 >= 0) {
        uint64_t v50 = v55;
      }
      else {
        uint64_t v50 = (void **)v55[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      uint64_t v67 = 1024;
      uint64_t v68 = 409;
      uint64_t v69 = 2080;
      uint64_t v70 = v44;
      char v71 = 2080;
      int64_t v72 = v45;
      uint64_t v73 = 1024;
      unint64_t v74 = v46;
      uint64_t v75 = 2080;
      uint64_t v76 = v49;
      uint64_t v77 = 2080;
      unint64_t v78 = v50;
      _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d VolumeCommand: Failed to get property '%s' on processor type '%s' index %u, err: %s on chain '%s'.",  buf,  0x40u);
      if (v56 < 0) {
        operator delete(v55[0]);
      }
      if (v60 < 0) {
        operator delete(__p[0]);
      }
      if (v62 < 0) {
        operator delete(v61[0]);
      }
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }

    goto LABEL_42;
  }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)buf);
    }

    __int16 v43 = sub_138E8(13);
    if ((*(_BYTE *)(v43 + 8) & 1) != 0)
    {
      int v44 = *(os_log_t *)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v59 = inAddress;
          sub_613AC((uint64_t)&__lk, &v59.mSelector);
          if (v61 >= 0) {
            uint64_t m = (const char *)&__lk;
          }
          else {
            uint64_t m = (const char *)__lk.__m_;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          uint64_t v69 = 1024;
          uint64_t v70 = 288;
          char v71 = 2080;
          int64_t v72 = m;
          uint64_t v73 = 1024;
          LODWORD(v74) = v18;
          uint64_t v46 = "%25s:%-5d Successfully synchronized the property %s on id %u.";
          uint64_t v47 = v44;
          char v48 = OS_LOG_TYPE_DEBUG;
          uint64_t v49 = 34;
          goto LABEL_91;
        }
      }
    }

uint64_t *sub_32C38(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  unsigned __int8 v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  uint64_t result = sub_7A420(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_32C8C(void *a1)
{
  if (a1)
  {
    sub_32C8C(*a1);
    sub_32C8C(a1[1]);
    operator delete(a1);
  }

void sub_32CC4(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 528LL))(a1, 1735159650LL);
  int v3 = v2;
  uint64_t v11 = v2;
  uint64_t v4 = v2 & 0xFF00000000LL;
  unsigned __int8 v5 = (os_log_t *)sub_138E8(16);
  unsigned int v6 = *v5;
  if (v4)
  {
    if (v6 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 268);
      sub_33464(&__p, (unsigned int *)&v9);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
      __int16 v13 = 1024;
      int v14 = 123;
      __int16 v15 = 1024;
      LODWORD(v16[0]) = v3;
      WORD2(v16[0]) = 2080;
      *(void *)((char *)v16 + 6) = p_p;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting fixed buffer size of %u on VAD %s", buf, 0x22u);
    }

    strcpy(buf, "zisfbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, _BYTE *, void, void, uint64_t, uint64_t *))(*(void *)a1 + 48LL))( a1,  buf,  0LL,  0LL,  4LL,  &v11);
  }

  else if (v6 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a1 + 268);
    sub_33464(&__p, (unsigned int *)&v9);
    unint64_t v8 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
    __int16 v13 = 1024;
    int v14 = 129;
    __int16 v15 = 2080;
    v16[0] = v8;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Could not find fixed buffer size for VAD %s", buf, 0x1Cu);
  }

unint64_t sub_32EE0(_DWORD *a1, int a2)
{
  uint64_t v4 = *(void *)&byte_48F140[8];
  if (!*(void *)&byte_48F140[8]) {
    goto LABEL_12;
  }
  unsigned int v5 = a1[67];
  unsigned int v6 = &byte_48F140[8];
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      unsigned int v6 = (char *)v4;
    }
    uint64_t v4 = *v9;
  }

  while (*v9);
  if (v6 == &byte_48F140[8] || *((_DWORD *)v6 + 8) > v5)
  {
LABEL_12:
    sub_33200();
    goto LABEL_13;
  }

  sub_33200();
  uint64_t v13 = (*(double (**)(_DWORD *))(*(void *)a1 + 104LL))(a1);
  uint64_t v15 = *((void *)v6 + 6);
  uint64_t v14 = *((void *)v6 + 7);
  if (v15 != v14)
  {
    while (*(_DWORD *)v15 != -1 && *(_DWORD *)v15 != (_DWORD)v13)
    {
      v15 += 8LL;
      if (v15 == v14) {
        goto LABEL_33;
      }
    }
  }

  if (v15 != v14)
  {
    AudioObjectID v17 = (os_log_t *)sub_138E8(16);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_INFO))
    {
      int v19 = *(_DWORD *)(v15 + 4);
      int v27 = 136315906;
      __int16 v28 = "RoutingTypes.cpp";
      __int16 v29 = 1024;
      int v30 = 3546;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 1024;
      LODWORD(v34) = v19;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "%25s:%-5d FindBufferSizeForSR sampleRate = %u bufferSizeSamples = %u\n",  (uint8_t *)&v27,  0x1Eu);
    }

    LODWORD(v15) = *(_DWORD *)(v15 + 4);
    goto LABEL_32;
  }

LABEL_33:
  if (v6[80])
  {
    uint64_t v21 = *((void *)v6 + 9);
    if (v21)
    {
      uint64_t v22 = 1000 / v21;
      std::string::size_type v23 = (os_log_t *)sub_138E8(16);
      __int16 v24 = *v23;
      uint64_t v15 = v13 / v22;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_INFO))
      {
        if (!v6[80]) {
          sub_8DEEC();
        }
        uint64_t v25 = *((void *)v6 + 9);
        int v27 = 136316162;
        __int16 v28 = "RoutingTypes.cpp";
        __int16 v29 = 1024;
        int v30 = 3554;
        __int16 v31 = 1024;
        int v32 = v13;
        __int16 v33 = 2048;
        uint64_t v34 = v15;
        __int16 v35 = 2048;
        uint64_t v36 = v25;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_INFO,  "%25s:%-5d FindBufferSizeForSR sampleRate = %u bufferSizeSamples = %lu bufferSizeInMS = %lu\n",  (uint8_t *)&v27,  0x2Cu);
      }

        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_4865A0;
        exception[2] = 561211770;
      }

      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
    }

    *a6 = result;
    return result;
  }

  if (v8 != 1667591277)
  {
    if (v8 == 1668506480)
    {
      uint64_t v9 = *a5;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
      if (v9 == (_DWORD)result)
      {
        if (a6)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
LABEL_15:
          *(_DWORD *)a6 = result;
          return result;
        }

        return result;
      }

      uint64_t v14 = (os_log_t *)sub_138E8(13);
      uint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = 136315394;
        uint64_t v22 = "HP_Control.cpp";
        std::string::size_type v23 = 1024;
        __int16 v24 = 241;
        unsigned int v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioControlPropertyScope";
LABEL_32:
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v21, 0x12u);
        goto LABEL_33;
      }

      goto LABEL_33;
    }

    return sub_6A140(a1, a2, a3, a4, a5, (uint64_t)a6);
  }

  uint64_t v12 = *a5;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
  if (v12 != (_DWORD)result)
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = 136315394;
      uint64_t v22 = "HP_Control.cpp";
      std::string::size_type v23 = 1024;
      __int16 v24 = 246;
      unsigned int v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioControlPropertyElement";
      goto LABEL_32;
    }

    goto LABEL_33;
  }

  if (a6)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
    goto LABEL_15;
  }

  return result;
}

    operator delete(*(void **)__p);
    goto LABEL_36;
  }

  if (v6 != 1819309171 && v6 != 1885696611) {
LABEL_11:
  }
    unsigned int v5 = 1768776806LL;
  return v4 | (v5 << 32);
}

          uint64_t v25 = 1000 * v24.__d_.__rep_;
LABEL_34:
          if (v25 > (v23.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v26.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_37:
            std::condition_variable::__do_timed_wait(&v74, &__lk, v26);
            std::chrono::steady_clock::now();
            goto LABEL_38;
          }
        }

        v26.__d_.__rep_ = v25 + v23.__d_.__rep_;
        goto LABEL_37;
      }
      }
    }

    else if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88LL))( v13,  1751216240LL,  88000LL,  0LL))
    {
      uint64_t v47 = 4;
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, int *, void, void))(*(void *)v13 + 104LL))( v13,  1751216240LL,  88000LL,  __p,  &v47,  0LL,  0LL);
      if (v22)
      {
        int v32 = sub_138E8(13);
        __int16 v33 = sub_8C7D4(1, *(void **)v32, *(void *)(v32 + 8));
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        __int16 v35 = v34;
        if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2921;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v22;
          _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) obtaining DSP Property for Haptics Protection Mode",  buf,  0x18u);
        }

        uint64_t v36 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v36 = &off_4865A0;
        v36[2] = v22;
      }

      *(_DWORD *)a5 = __p[0];
      std::string::size_type v23 = (os_log_s *)*(id *)sub_138E8(26);
      __int16 v24 = v23;
      if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2924;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = __p[0];
        _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Haptics Protection Mode: %u", buf, 0x18u);
      }

      goto LABEL_33;
    }
  }

    if (!v12 && v10 != v13) {
      goto LABEL_55;
    }
LABEL_38:
    if ((unint64_t)v6 >= v7)
    {
      AudioObjectID v17 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5) + 1;
      if (v17 > 0x1555555555555555LL) {
        sub_7A87C();
      }
      else {
        uint64_t v18 = v17;
      }
      if (v18) {
        uint64_t v18 = (unint64_t)sub_87E70(v18);
      }
      else {
        int v19 = 0LL;
      }
      int v20 = v18 + 4 * (v6 - v5);
      *(_DWORD *)int v20 = v10;
      *(void *)(v20 + 4) = 1735159650LL;
      uint64_t v21 = (int *)v20;
      while (v6 != v5)
      {
        uint64_t v22 = *(void *)(v6 - 3);
        v6 -= 3;
        std::string::size_type v23 = v6[2];
        *(void *)(v21 - 3) = v22;
        v21 -= 3;
        v21[2] = v23;
      }

      unsigned int v7 = v18 + 12 * v19;
      unsigned int v6 = (int *)(v20 + 12);
      if (v5) {
        operator delete(v5);
      }
      unsigned int v5 = v21;
    }

    else
    {
      *unsigned int v6 = v10;
      *(void *)(v6 + 1) = 1735159650LL;
      v6 += 3;
    }

  v362 = v11;
  if ((void)v11)
  {
    __int16 v31 = v7;
    int v32 = *((void *)&v11 + 1);
    __int16 v33 = (unint64_t)v31[2];
    uint64_t v34 = v31[1];
    if ((unint64_t)v34 >= v33)
    {
      __int16 v357 = v11;
      uint64_t v39 = (v34 - *v31) >> 4;
      char v40 = v39 + 1;
      __int128 v41 = v33 - (void)*v31;
      if (v41 >> 3 > v40) {
        char v40 = v41 >> 3;
      }
      else {
        uint64_t v42 = v40;
      }
      int v368 = v31 + 2;
      __int16 v43 = (char *)sub_7BE90(v42);
      __int16 v45 = &v43[16 * v39];
      *(_OWORD *)__int16 v45 = v357;
      if (v32)
      {
        uint64_t v46 = (unint64_t *)(v32 + 8);
        do
          uint64_t v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }

      uint64_t v49 = *a1;
      char v48 = a1[1];
      if (v48 == *a1)
      {
        __int16 v52 = vdupq_n_s64((unint64_t)v48);
        uint64_t v50 = &v43[16 * v39];
      }

      else
      {
        uint64_t v50 = &v43[16 * v39];
        do
        {
          __int128 v51 = *((_OWORD *)v48 - 1);
          v48 -= 16;
          *((_OWORD *)v50 - 1) = v51;
          v50 -= 16;
          *(void *)char v48 = 0LL;
          *((void *)v48 + 1) = 0LL;
        }

        while (v48 != v49);
        __int16 v52 = *(int64x2_t *)a1;
      }

      char v38 = a1;
      uint64_t v37 = v45 + 16;
      *a1 = v50;
      a1[1] = v45 + 16;
      *(int64x2_t *)&buf[8] = v52;
      int v53 = a1[2];
      a1[2] = &v43[16 * v44];
      *(void *)&_BYTE buf[24] = v53;
      *(void *)AudioObjectPropertyAddress buf = v52.i64[0];
      sub_A0D64((uint64_t)buf);
    }

    else
    {
      *(_OWORD *)uint64_t v34 = v11;
      if (*((void *)&v11 + 1))
      {
        __int16 v35 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
        do
          uint64_t v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }

      uint64_t v37 = v34 + 16;
      char v38 = a1;
    }

    v38[1] = v37;
  }

  __int16 v54 = *(_DWORD **)v5;
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (!byte_48CDA8 && !byte_48CDA9)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    goto LABEL_219;
  }

  uint64_t v55 = (void *)qword_4A09A8;
  if (qword_4A09A8)
  {
    v364[0] = (void *)qword_4A09A8;
    v364[1] = (void *)qword_4A09B0;
    if (qword_4A09B0)
    {
      __int16 v56 = (unint64_t *)(qword_4A09B0 + 8);
      do
        uint64_t v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
  }

  else
  {
    sub_32E270((__n128 *)v364);
    uint64_t v55 = v364[0];
  }

  __int128 v58 = atomic_load((unsigned __int8 *)&qword_48FC90);
  if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_48FC90))
  {
    sub_1C9E30();
    __cxa_guard_release(&qword_48FC90);
  }

  v356 = v54;
  v358 = (uint64_t)v55;
  uint64_t v59 = (uint64_t)(v54 + 4);
  uint64_t v60 = (void *)*((void *)v54 + 3);
  if (v60 != (void *)(v54 + 4))
  {
    uint64_t v61 = 0LL;
    uint64_t v62 = 0LL;
    uint64_t v63 = 0LL;
    while (1)
    {
      uint64_t v64 = (std::__shared_weak_count *)v60[3];
      if (!v64 || (uint64_t v65 = std::__shared_weak_count::lock(v64), (*(void *)&buf[8] = v65) == 0LL))
      {
        uint64_t v69 = v62;
        goto LABEL_94;
      }

      uint64_t v66 = v65;
      uint64_t v67 = v60[2];
      *(void *)AudioObjectPropertyAddress buf = v67;
      if (v67)
      {
        uint64_t v68 = *(_DWORD *)(v67 + 144);
        if ((unint64_t)v62 >= v61)
        {
          uint64_t v70 = v62 - v63;
          char v71 = v70 + 1;
          else {
            int64_t v72 = v71;
          }
          if (v72) {
            int64_t v72 = (unint64_t)sub_7A890(v72);
          }
          else {
            uint64_t v73 = 0LL;
          }
          unint64_t v74 = (unsigned int *)(v72 + 4 * v70);
          __int128 *v74 = v68;
          uint64_t v69 = v74 + 1;
          while (v62 != v63)
          {
            uint64_t v75 = *--v62;
            *--unint64_t v74 = v75;
          }

          uint64_t v61 = v72 + 4 * v73;
          if (v63) {
            operator delete(v63);
          }
          uint64_t v63 = v74;
          goto LABEL_90;
        }

        *v62++ = v68;
      }

      uint64_t v69 = v62;
LABEL_90:
      uint64_t v76 = (unint64_t *)&v66->__shared_owners_;
      do
        uint64_t v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }

        __int16 v31 = CFGetTypeID(v28);
        if (v31 == CFNullGetTypeID() || (int v32 = *a2) == 0LL)
        {
          a1->__r_.__value_.__s.__size_ = 4;
          unsigned int v11 = 1819047278;
LABEL_45:
          LODWORD(a1->__r_.__value_.__l.__data_) = v11;
          a1->__r_.__value_.__s.__data_[4] = 0;
          return;
        }

        if (!*(void *)(a4 + 24))
        {
          uint64_t v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v92, "Error, not a json style CFDictionary");
          goto LABEL_183;
        }

        uint64_t v97 = 0LL;
        CFRetain(v32);
        __int16 v33 = *(void *)(a4 + 24);
        CFTypeRef cf = v32;
        if (!v33) {
          sub_82CEC();
        }
        (*(void (**)(std::string *__return_ptr, uint64_t, CFTypeRef *, CFTypeRef *))(*(void *)v33 + 48LL))( &valuePtr,  v33,  &v97,  &cf);
        if (cf) {
          CFRelease(cf);
        }
        if (v97) {
          CFRelease(v97);
        }
        if ((char)valuePtr.__r_.__value_.__s.__size_ < 0)
        {
          uint64_t v34 = valuePtr.__r_.__value_.__l.__size_;
          if (valuePtr.__r_.__value_.__l.__size_)
          {
            p_int valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_49:
            memset(&v95, 0, sizeof(v95));
            do
            {
              uint64_t v36 = p_valuePtr->__r_.__value_.__s.__data_[0];
              if (v36 == 92 || v36 == 34)
              {
                std::string::push_back(&v95, 92);
                LOBYTE(v36) = p_valuePtr->__r_.__value_.__s.__data_[0];
              }

              std::string::push_back(&v95, v36);
              p_int valuePtr = (std::string *)((char *)p_valuePtr + 1);
              --v34;
            }

            while (v34);
            uint64_t v37 = std::string::insert(&v95, 0LL, "{ ", 3uLL);
            char v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
            v102.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v38;
            v37->__r_.__value_.__l.__size_ = 0LL;
            v37->__r_.__value_.__l.__cap_ = 0LL;
            v37->__r_.__value_.__r.__words[0] = 0LL;
            uint64_t v39 = std::string::append(&v102, " : ", 5uLL);
            char v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v103.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v40;
            v39->__r_.__value_.__l.__size_ = 0LL;
            v39->__r_.__value_.__l.__cap_ = 0LL;
            v39->__r_.__value_.__r.__words[0] = 0LL;
            if ((v101 & 0x80u) == 0) {
              __int128 v41 = &v99;
            }
            else {
              __int128 v41 = v99;
            }
            if ((v101 & 0x80u) == 0) {
              uint64_t v42 = v101;
            }
            else {
              uint64_t v42 = v100;
            }
            memset(&__p, 0, sizeof(__p));
            if (v42)
            {
              do
              {
                __int16 v43 = *v41;
                if (v43 == 92 || v43 == 34)
                {
                  std::string::push_back(&__p, 92);
                  LOBYTE(v43) = *v41;
                }

                std::string::push_back(&__p, v43);
                ++v41;
                --v42;
              }

              while (v42);
              int v44 = __p.__r_.__value_.__s.__size_;
              __int16 v45 = __p.__r_.__value_.__l.__size_;
              uint64_t v46 = __p.__r_.__value_.__r.__words[0];
            }

            else
            {
              __int16 v45 = 0LL;
              uint64_t v46 = 0LL;
              int v44 = 0;
            }

            if ((v44 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)v46;
            }
            if ((v44 & 0x80u) == 0) {
              __int16 v54 = v44;
            }
            else {
              __int16 v54 = v45;
            }
            uint64_t v55 = std::string::append(&v103, (const std::string::value_type *)p_p, v54);
            __int16 v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v104.__r_.__value_.__l.__cap_ = v55->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0LL;
            v55->__r_.__value_.__l.__cap_ = 0LL;
            v55->__r_.__value_.__r.__words[0] = 0LL;
            uint64_t v57 = std::string::append(&v104, " }", 3uLL);
            __int128 v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
            a1->__r_.__value_.__l.__cap_ = v57->__r_.__value_.__l.__cap_;
            *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v58;
            v57->__r_.__value_.__l.__size_ = 0LL;
            v57->__r_.__value_.__l.__cap_ = 0LL;
            v57->__r_.__value_.__r.__words[0] = 0LL;
            uint64_t v59 = (void *)v95.__r_.__value_.__r.__words[0];
LABEL_110:
            operator delete(v59);
LABEL_111:
            uint64_t v68 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_115:
            operator delete(v68);
            return;
          }
        }

        else
        {
          uint64_t v34 = valuePtr.__r_.__value_.__s.__size_;
          if (valuePtr.__r_.__value_.__s.__size_)
          {
            p_int valuePtr = &valuePtr;
            goto LABEL_49;
          }
        }

        v103.__r_.__value_.__s.__size_ = 1;
        LOWORD(v103.__r_.__value_.__l.__data_) = 34;
        if ((v101 & 0x80u) == 0) {
          uint64_t v47 = &v99;
        }
        else {
          uint64_t v47 = v99;
        }
        if ((v101 & 0x80u) == 0) {
          char v48 = v101;
        }
        else {
          char v48 = v100;
        }
        memset(&v102, 0, sizeof(v102));
        if (v48)
        {
          do
          {
            uint64_t v49 = *v47;
            if (v49 == 92 || v49 == 34)
            {
              std::string::push_back(&v102, 92);
              LOBYTE(v49) = *v47;
            }

            std::string::push_back(&v102, v49);
            ++v47;
            --v48;
          }

          while (v48);
          uint64_t v50 = v102.__r_.__value_.__s.__size_;
          __int128 v51 = v102.__r_.__value_.__l.__size_;
          __int16 v52 = v102.__r_.__value_.__r.__words[0];
        }

        else
        {
          __int128 v51 = 0LL;
          __int16 v52 = 0LL;
          uint64_t v50 = 0;
        }

        if ((v50 & 0x80u) == 0) {
          uint64_t v62 = &v102;
        }
        else {
          uint64_t v62 = (std::string *)v52;
        }
        if ((v50 & 0x80u) == 0) {
          uint64_t v63 = v50;
        }
        else {
          uint64_t v63 = v51;
        }
        uint64_t v64 = std::string::append(&v103, (const std::string::value_type *)v62, v63);
        uint64_t v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0LL;
        v64->__r_.__value_.__l.__cap_ = 0LL;
        v64->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v66 = std::string::append(&v104, "", 1uLL);
        uint64_t v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        a1->__r_.__value_.__l.__cap_ = v66->__r_.__value_.__l.__cap_;
        *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v67;
        v66->__r_.__value_.__l.__size_ = 0LL;
        v66->__r_.__value_.__l.__cap_ = 0LL;
        v66->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v59 = (void *)v103.__r_.__value_.__r.__words[0];
        goto LABEL_110;
      }
    }

    if (v3 == v5) {
      return result;
    }
    goto LABEL_34;
  }

  if (v3 <= 1684633186)
  {
    if (v3 <= 1668705647)
    {
      if (v3 == 1064725619) {
        return result;
      }
      if (v3 == 1668443504) {
        return 2LL;
      }
      goto LABEL_34;
    }

    if (v3 == 1668705648) {
      return result;
    }
    unsigned int v5 = 1684157046;
    goto LABEL_33;
  }

  if (v3 > 1836414052)
  {
    if (v3 == 1836414053) {
      return result;
    }
    if (v3 == 1918987632) {
      return 24LL;
    }
    unsigned int v5 = 1919774835;
    goto LABEL_33;
  }

  if (v3 == 1684633187) {
    return result;
  }
  if (v3 == 1685484390)
  {
    unsigned int v7 = (os_log_t *)sub_138E8(18);
    BOOL v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = 136315394;
        uint64_t v15 = "OutputVolumeControl_HAL_Common.cpp";
        unsigned int v16 = 1024;
        AudioObjectID v17 = 398;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Getting scalar factor property size",  (uint8_t *)&v14,  0x12u);
      }
    }

    return 8LL;
  }

  int v19 = *(std::__shared_weak_count **)(a1 + 288);
  if (v19)
  {
    int v20 = std::__shared_weak_count::lock(v19);
    UInt32 v259 = v20;
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(double *)(a1 + 280);
      uint64_t v258 = v22;
      if (v22 != 0.0)
      {
        std::string::size_type v23 = (*(float (**)(double, float))(**(void **)&v22 + 48LL))( COERCE_DOUBLE(*(void *)&v22),  *(float *)(a1 + 296));
        if ((*(unsigned int (**)(double))(**(void **)&v22 + 80LL))(COERCE_DOUBLE(*(void *)&v22)))
        {
          __int16 v24 = sub_138E8(18);
          uint64_t v25 = sub_138E8(38);
          __int16 v26 = 0;
          int v27 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          __int16 v28 = *(void *)(v24 + 8);
          while (1)
          {
            __int16 v29 = (int)buf[v27];
            int v30 = v26;
            if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
              break;
            }
            __int16 v26 = 1;
            int v27 = 1LL;
            if ((v30 & 1) != 0) {
              goto LABEL_47;
            }
          }

          if ((v28 & v29) == 0) {
            __int16 v24 = v25;
          }
LABEL_47:
          char v38 = *(os_log_s **)v24;
          if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v39 = *(double *)(a1 + 152);
            char v40 = sub_6461C(a1 + 168);
            sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
            __int128 v41 = v39;
            uint64_t v42 = v41;
            __int16 v43 = v257 >= 0 ? __p : (void **)__p[0];
            buf[0] = 136316418;
            *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1155;
            HIWORD(buf[4]) = 2048;
            *(double *)&buf[5] = v10;
            LOWORD(buf[7]) = 2048;
            *(double *)((char *)&buf[7] + 2) = v42;
            HIWORD(buf[9]) = 2048;
            int v261 = v40;
            *(_WORD *)int v262 = 2080;
            *(void *)&v262[2] = v43;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ApplyHeadroom is Active CommitedHardwareVolume %f dB MaxHardwareVolume[Device] %f dB MaxHardware Volume[VolumeCurve] %f dB on VAD '%s'.",  (uint8_t *)buf,  0x3Au);
            if (v257 < 0) {
              operator delete(__p[0]);
            }
          }

          int v44 = sub_6461C(a1 + 168);
          (*(void (**)(double, float))(**(void **)&v22 + 88LL))( COERCE_DOUBLE(*(void *)&v22),  v23 + (float)(v10 - v44));
          uint64_t v10 = sub_6461C(a1 + 168);
        }

        else
        {
          __int16 v31 = sub_138E8(18);
          int v32 = sub_138E8(38);
          __int16 v33 = 0;
          uint64_t v34 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          __int16 v35 = *(void *)(v31 + 8);
          while (1)
          {
            uint64_t v36 = (int)buf[v34];
            uint64_t v37 = v33;
            if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
              break;
            }
            __int16 v33 = 1;
            uint64_t v34 = 1LL;
            if ((v37 & 1) != 0) {
              goto LABEL_57;
            }
          }

          if ((v35 & v36) == 0) {
            __int16 v31 = v32;
          }
LABEL_57:
          __int16 v45 = *(os_log_s **)v31;
          if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
            uint64_t v46 = v257 >= 0 ? __p : (void **)__p[0];
            buf[0] = 136315906;
            *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1163;
            HIWORD(buf[4]) = 2048;
            *(double *)&buf[5] = v23;
            LOWORD(buf[7]) = 2080;
            *(void *)((char *)&buf[7] + 2) = v46;
            _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applying %f dB to remapGain on VAD '%s'.",  (uint8_t *)buf,  0x26u);
            if (v257 < 0) {
              operator delete(__p[0]);
            }
          }

          (*(void (**)(double, float))(**(void **)&v22 + 96LL))(COERCE_DOUBLE(*(void *)&v22), v23);
        }

        (*(void (**)(double, float, float))(**(void **)&v22 + 24LL))( COERCE_DOUBLE(*(void *)&v22),  v10,  *(float *)(a1 + 296));
      }

      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        char v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

    if (!v4) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }

  unsigned int v6 = sub_1ECDD0((uint64_t)a1);
  unsigned int v7 = v5[36];
  BOOL v8 = sub_1CC860();
  if (v7 == 1885892727) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 1;
  }
  if ((v9 & 1) != 0)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(17);
    unsigned int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 858;
      uint64_t v49 = 1024;
      uint64_t v50 = v7 == 1885892727;
      __int128 v51 = 1024;
      __int16 v52 = v6;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "%25s:%-5d USB Device Currently headphones? %u. Should be headphones? %u",  buf,  0x1Eu);
    }

    if (v6 != (v7 == 1885892727))
    {
      v32[0] = 0;
      __int16 v33 = 0LL;
      uint64_t v12 = (_DWORD *)sub_546E0();
      sub_1008E4(v12);
      uint64_t v13 = (os_log_t *)sub_138E8(17);
      uint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 865;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "%25s:%-5d USB Device- tearing down current output port",  buf,  0x12u);
      }

      if (v7 == 1885892727)
      {
        (*(void (**)(_DWORD *, void, void, void))(*(void *)v5 + 544LL))(v5, 0LL, 0LL, 0LL);
        uint64_t v15 = sub_546E0();
        *(void *)AudioObjectPropertyAddress buf = v5;
        *(void *)&buf[8] = v4;
        p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
        do
          AudioObjectID v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
        sub_1013F4(v15, (uint64_t *)buf);
        std::__shared_weak_count::__release_weak(v4);
      }

      if (v6) {
        (*(void (**)(_BYTE *))(*(void *)a1 + 368LL))(a1);
      }
      v31[0] = (unint64_t)v5;
      v31[1] = (unint64_t)v4;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        int v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      sub_36D53C((uint64_t)a1, v31);
      do
        int v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }

      a1[492] = 0;
      sub_1E9BB8(a1);
      sub_E9064(v32);
      uint64_t v4 = v35;
      goto LABEL_33;
    }
  }

  else
  {
    uint64_t v25 = v5[66];
    __int16 v26 = (os_log_t *)sub_138E8(17);
    int v27 = v25 & 0xDFFFFFFF;
    __int16 v28 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 847;
      uint64_t v49 = 1024;
      uint64_t v50 = v27 == 1214539380;
      __int128 v51 = 1024;
      __int16 v52 = v6;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "%25s:%-5d USB Device- Currently headphones? %u. Should be headphones? %u",  buf,  0x1Eu);
    }

    if (v6 != (v27 == 1214539380))
    {
      __int16 v29 = (os_log_t *)sub_138E8(17);
      int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 851;
        _os_log_impl(&dword_0, v30, OS_LOG_TYPE_INFO, "%25s:%-5d Updating subport type on headphones port", buf, 0x12u);
      }

      sub_1EE86C((uint64_t)a1);
    }
  }

  sub_CAE54(v315, (uint64_t *)buf, 1LL);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (sub_105B8C(*(uint64_t **)(a5 + 8), 3))
  {
    __int128 v41 = sub_105C24(a5, 3);
    uint64_t v42 = *(std::__shared_weak_count **)(v41 + 24);
    if (v42)
    {
      __int16 v43 = std::__shared_weak_count::lock(v42);
      int v44 = v43;
      if (v43)
      {
        __int16 v45 = *(void *)(v41 + 16);
        uint64_t v46 = (unint64_t *)&v43->__shared_weak_owners_;
        do
          uint64_t v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        char v48 = (unint64_t *)&v43->__shared_owners_;
        do
          uint64_t v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v44);
        }

        goto LABEL_46;
      }
    }

    else
    {
      int v44 = 0LL;
    }

    __int16 v45 = 0LL;
LABEL_46:
    uint64_t v50 = operator new(0x20uLL);
    v50[2] = v45;
    v50[3] = v44;
    __int128 v51 = v315[0];
    *uint64_t v50 = v315[0];
    v50[1] = v315;
    *(void *)(v51 + 8) = v50;
    v315[0] = (uint64_t)v50;
    ++v316;
  }

  __int16 v52 = sub_1BAB2C(*((_DWORD *)a2 + 3));
  if (*((_BYTE *)a2 + 164)) {
    int v53 = *((_DWORD *)a2 + 40);
  }
  else {
    int v53 = v52;
  }
  __int16 v54 = operator new(0x30uLL);
  uint64_t v55 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v10->_os_unfair_lock_opaque + 120LL))(v10);
  sub_85A90(&v312, v315);
  *(void *)__int16 v54 = off_484140;
  v54[2] = v55;
  *((void *)v54 + 2) = v54 + 4;
  *((void *)v54 + 3) = v54 + 4;
  *((void *)v54 + 4) = 0LL;
  __int16 v56 = v314;
  if (v314)
  {
    __int128 v58 = v312;
    uint64_t v57 = v313;
    uint64_t v59 = *v313;
    *(void *)(v59 + 8) = *(void *)(v312 + 8);
    **(void **)(v58 + 8) = v59;
    uint64_t v60 = *((void *)v54 + 2);
    *(void *)(v60 + 8) = v57;
    *uint64_t v57 = v60;
    *((void *)v54 + 2) = v58;
    *(void *)(v58 + 8) = v54 + 4;
    *((void *)v54 + 4) = v56;
    int v314 = 0LL;
  }

  v54[10] = v53;
  *((_BYTE *)v54 + 44) = 0;
  uint64_t v61 = operator new(0x18uLL);
  uint64_t v62 = *(void **)(a3 + 8);
  char *v61 = a3;
  v61[1] = v62;
  v61[2] = v54;
  char *v62 = v61;
  uint64_t v63 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v61;
  *(void *)(a3 + 16) = v63;
  sub_CCAB4((uint64_t)v54);
  sub_85B80(&v312);
  *(_DWORD *)AudioObjectPropertyAddress buf = v320[36];
  sub_7A22C((uint64_t)v311, (unsigned int *)buf, 1LL);
  v310 = 0LL;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v10->_os_unfair_lock_opaque + 88LL))( v10,  1LL) < 2)
  {
    sub_1D2530(buf, (uint64_t)v10, (uint64_t)v320);
    if (sub_105B8C(*(uint64_t **)(a5 + 8), 3))
    {
      uint64_t v66 = sub_105C24(a5, 3);
      sub_B8CBC((uint64_t *)&v324, (uint64_t *)(v66 + 16), "", 189);
      uint64_t v67 = *(uint64_t **)&buf[32];
      uint64_t v68 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
      if (v324.__r_.__value_.__l.__size_)
      {
        uint64_t v69 = (unint64_t *)(v324.__r_.__value_.__l.__size_ + 16);
        do
          uint64_t v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }

      char v71 = operator new(0x20uLL);
      v71[1] = v68;
      *((void *)v71 + 1) = v67;
      int64_t v72 = *v67;
      *(void *)char v71 = *v67;
      *(void *)(v72 + 8) = v71;
      *uint64_t v67 = (uint64_t)v71;
      ++v67[2];
      sub_57ADC((uint64_t *)v311, *(_DWORD *)(v68 + 144), *(_DWORD *)(v68 + 144));
      uint64_t v73 = (std::__shared_weak_count *)v324.__r_.__value_.__l.__size_;
      if (v324.__r_.__value_.__l.__size_)
      {
        unint64_t v74 = (unint64_t *)(v324.__r_.__value_.__l.__size_ + 8);
        do
          uint64_t v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
    }

    uint64_t v76 = (unsigned int *)*a2;
    v306 = 0uLL;
    UInt32 v307 = 0LL;
    sub_105E0C((char **)&v308, *(_DWORD *)(a1 + 8), a2, (unsigned int **)&v306);
    sub_85EA4(&v324, buf);
    sub_210660((uint64_t *)&v304, &v324, 1LL);
    uint64_t v77 = sub_1BAF50((uint64_t)&v304);
    v322.i8[0] = 0;
    LOBYTE(v323[0]) = 0;
    uint64_t v65 = sub_10A5F4( (uint64_t *)buf,  0,  1,  v76,  (uint64_t)(a2 + 15),  (__int128 *)(a2 + 3),  (uint64_t)&v322,  (void **)&v308,  v77,  (uint64_t)v311,  (__int128 *)a2 + 11);
    unint64_t v78 = (uint64_t)v310;
    v310 = v65;
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 8LL))(v78);
    }
    sub_85CA0((uint64_t *)&v304);
    sub_85D64(v327);
    sub_85D64(v326);
    v322.i64[0] = (uint64_t)v325;
    sub_85DA4((void ***)&v322);
    v322.i64[0] = (uint64_t)&v324.__r_.__value_.__l.__size_;
    sub_85DA4((void ***)&v322);
    v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&v308;
    sub_7A668((void ***)&v324);
  }

  else
  {
    sub_1D2BD4((uint64_t *)buf, (uint64_t)v10, (uint64_t)v320);
    sub_85EA4(&v324, buf);
    int v308 = 0uLL;
    int v309 = 0LL;
    v322.i64[0] = (uint64_t)&v308;
    v322.i8[8] = 0;
    *(void *)&int v308 = operator new(0x68uLL);
    *((void *)&v308 + 1) = v308;
    int v309 = (char *)(v308 + 104);
    *((void *)&v308 + 1) = sub_10A49C((uint64_t)&v324, (uint64_t)&v328, v308);
    uint64_t v64 = (uint64_t)*a2;
    int v304 = 0uLL;
    int v305 = 0LL;
    sub_105E0C((char **)&v306, *(_DWORD *)(a1 + 8), a2, (unsigned int **)&v304);
    *(void *)&UInt32 v301 = 0LL;
    v322.i8[0] = 0;
    LOBYTE(v323[0]) = 0;
    uint64_t v65 = sub_2B7D7C( (uint64_t **)&v308,  v64,  (__int128 *)(a2 + 3),  (uint64_t)&v322,  (void **)&v306,  (uint64_t)(a2 + 15),  &v301,  v311,  (__int128 *)a2 + 11);
    v310 = v65;
    v322.i64[0] = (uint64_t)&v306;
    sub_7A668((void ***)&v322);
    v322.i64[0] = (uint64_t)&v308;
    sub_10A52C((void ***)&v322);
    sub_85D64(v327);
    sub_85D64(v326);
    v322.i64[0] = (uint64_t)v325;
    sub_85DA4((void ***)&v322);
    v322.i64[0] = (uint64_t)&v324.__r_.__value_.__l.__size_;
    sub_85DA4((void ***)&v322);
  }

  sub_85D64(v331);
  sub_85D64(v330);
  v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[32];
  sub_85DA4((void ***)&v324);
  v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[8];
  sub_85DA4((void ***)&v324);
  if (v289 == 1918990112) {
    uint64_t v79 = sub_14D9C8();
  }
  else {
    uint64_t v79 = 0;
  }
  if ((sub_1CBD44() & 1) != 0)
  {
    __int16 v80 = sub_1BDE08((os_unfair_lock_s *)v320, (uint64_t *)&v310);
    if (v79)
    {
LABEL_71:
      if (v80)
      {
        uint64_t v81 = (os_log_t *)sub_138E8(2);
        uint64_t v82 = *v81;
        if (*v81)
        {
          if (os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 216;
            _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_ERROR,  "%25s:%-5d RawModeDisablesSpeakerProcessing is active, but Speaker Protection is also active in HAL",  buf,  0x12u);
          }
        }
      }

  *(void *)AudioObjectPropertyAddress buf = v11 + 24;
  *(void *)&buf[8] = v11;
  __int16 v33 = sub_65F40((uint64_t **)(a1 + 32), *(_DWORD *)(a1 + 56), (_DWORD *)(a1 + 56));
  do
    uint64_t v34 = __ldxr(v12);
  while (__stxr(v34 + 1, v12));
  __int16 v35 = (std::__shared_weak_count *)v33[6];
  v33[5] = (uint64_t *)v14;
  v33[6] = (uint64_t *)v11;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      uint64_t v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  else {
    char v38 = 1;
  }
  os_log_s *v13 = v38;
  *a4 = *(_OWORD *)buf;
  return sub_329330(v61);
}

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = 561211770;
    }

    uint64_t v10 = sub_243354(*(void *)(a1 + 8));
LABEL_15:
    *(float *)a6 = v10;
    return;
  }

  uint64_t v14 = *a5;
  if (v14 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    AudioObjectID v17 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
      __int16 v26 = 1024;
      int v27 = 727;
      uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyVolumeRangeDecibels";
      goto LABEL_32;
    }

    goto LABEL_33;
  }

  *(double *)a6 = sub_243354(*(void *)(a1 + 8));
  *(void *)(a6 + 8) = v15;
}

  uint64_t v25 = sub_271894(a1, v24);
  if (HIDWORD(v25))
  {
    __int16 v26 = *(float *)&v25;
    sub_271D48(*(void *)(a1 + 216), *(float *)&v25);
    if ((*(unsigned int (**)(void, uint64_t, void, void))(**(void **)(v24 + 1008) + 352LL))( *(void *)(v24 + 1008),  1650814258LL,  0LL,  0LL)
      && (*(float (**)(void, uint64_t, void, void))(**(void **)(v24 + 1008) + 360LL))( *(void *)(v24 + 1008),  1650814258LL,  0LL,  0LL) != v26)
    {
      int v27 = 1650814258LL;
      __int16 v28 = *(id *)sub_138E8(2);
      if (v28)
      {
        __int16 v29 = (os_log_s *)v28;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          int v44 = *(void *)(v24 + 576);
          sub_33464(&__p, (unsigned int *)&v44);
          int v30 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v47 = "VirtualAudio_PlugIn.mm";
          char v48 = 1024;
          uint64_t v49 = 2016;
          uint64_t v50 = 2048;
          *(double *)__int128 v51 = v26;
          *(_WORD *)&v51[8] = 2080;
          *(void *)&v51[10] = v30;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "%25s:%-5d Applying beam direction preference (%f) on VAD: '%s'.",  buf,  0x26u);
        }
      }

      else
      {
        __int16 v29 = 0LL;
      }

      __int16 v35 = 0LL;
LABEL_67:

      (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(v24 + 1008) + 368LL))( *(void *)(v24 + 1008),  v27,  v35,  0LL,  v26);
      goto LABEL_68;
    }

    if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v24 + 1008) + 384LL))( *(void *)(v24 + 1008),  1685287015LL,  1818980210LL,  0LL)
      && (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v24 + 1008) + 352LL))( *(void *)(v24 + 1008),  1685287015LL,  1667524978LL,  0LL)
      && (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v24 + 1008) + 352LL))( *(void *)(v24 + 1008),  1685287015LL,  1667657590LL,  0LL)
      && (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(v24 + 1008) + 360LL))( *(void *)(v24 + 1008),  1685287015LL,  1667524978LL,  0LL) != v26)
    {
      __int16 v33 = (os_log_s *)*(id *)sub_138E8(2);
      uint64_t v34 = v33;
      if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v47 = "VirtualAudio_PlugIn.mm";
        char v48 = 1024;
        uint64_t v49 = 2034;
        uint64_t v50 = 1024;
        *(_DWORD *)__int128 v51 = (int)v26;
        _os_log_impl(&dword_0, v34, OS_LOG_TYPE_INFO, "%25s:%-5d Setting camera direction %d on DSP", buf, 0x18u);
      }

      (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(v24 + 1008) + 368LL))( *(void *)(v24 + 1008),  1685287015LL,  1667524978LL,  0LL,  v26);
      int v27 = 1685287015LL;
      __int16 v35 = 1667657590LL;
      uint64_t v36 = (os_log_s *)*(id *)sub_138E8(2);
      __int16 v29 = v36;
      if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v47 = "VirtualAudio_PlugIn.mm";
        char v48 = 1024;
        uint64_t v49 = 2037;
        uint64_t v50 = 2048;
        *(void *)__int128 v51 = 0x404B000000000000LL;
        _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "%25s:%-5d Setting camera fov %f on DSP", buf, 0x1Cu);
      }

      __int16 v26 = 54.0;
      goto LABEL_67;
    }
  }

    if (!v3) {
      return;
    }
    goto LABEL_34;
  }

  unsigned int v5 = a1[45];
  if (v5)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      if (a1[45] <= i)
      {
        int v20 = (os_log_t *)sub_138E8(13);
        uint64_t v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          __int16 v28 = "StandardUtilities.h";
          __int16 v29 = 1024;
          int v30 = 933;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): Index out of range",  buf,  0x12u);
        }

        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Index out of range");
      }

      unsigned int v7 = (void *)a1[43];
      if ((i & 0x8000000000000000LL) != 0)
      {
        uint64_t v13 = i;
        do
        {
          uint64_t v14 = (void *)*v7;
          if (*v7)
          {
            do
            {
              uint64_t v10 = v14;
              uint64_t v14 = (void *)v14[1];
            }

            while (v14);
          }

          else
          {
            do
            {
              uint64_t v10 = (void *)v7[2];
              unsigned int v11 = *v10 == (void)v7;
              unsigned int v7 = v10;
            }

            while (v11);
          }

          unsigned int v7 = v10;
        }

        while (!__CFADD__(v13++, 1LL));
      }

      else if (i)
      {
        BOOL v8 = i;
        do
        {
          uint64_t v9 = (void *)v7[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              uint64_t v9 = (void *)*v9;
            }

            while (v9);
          }

          else
          {
            do
            {
              uint64_t v10 = (void *)v7[2];
              unsigned int v11 = *v10 == (void)v7;
              unsigned int v7 = v10;
            }

            while (!v11);
          }

          unsigned int v7 = v10;
        }

        while (v8-- > 1);
      }

      else
      {
        uint64_t v10 = (void *)a1[43];
      }

      std::string::size_type v23 = v10[4];
      __int16 v24 = *((_DWORD *)v10 + 10);
      sub_F35C8(v4, &v23, (uint64_t)sub_27FE10, (uint64_t)a1);
    }

    goto LABEL_33;
  }

        uint64_t v22 = sub_138E8(13);
        if ((*(_BYTE *)(v22 + 8) & 1) != 0)
        {
          std::string::size_type v23 = *(os_log_s **)v22;
          if (*(void *)v22)
          {
            if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
            {
              __p.__cv_.__sig = *(void *)&inAddress.mSelector;
              *(_DWORD *)__p.__cv_.__opaque = inAddress.mElement;
              sub_613AC((uint64_t)&v163, (unsigned int *)&__p);
              __int16 v24 = v163.__cv_.__opaque[15] >= 0 ? &v163 : (std::condition_variable *)v163.__cv_.__sig;
              buf.AudioObjectPropertySelector mSelector = 136315906;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              int v152 = 1024;
              int v153 = 199;
              int v154 = 2080;
              *(void *)int v155 = v24;
              *(_WORD *)&v155[8] = 1024;
              *(_DWORD *)&v155[10] = v18;
              _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
              if (v163.__cv_.__opaque[15] < 0) {
                operator delete((void *)v163.__cv_.__sig);
              }
            }
          }
        }

        AudioObjectPropertyAddress buf = inAddress;
        uint64_t v25 = (os_log_s *)sub_90738(v18, &buf, *a2, (int)a2[1]);
        if (!(_DWORD)v25)
        {
          __int16 v35 = 1;
          goto LABEL_69;
        }

        __int16 v26 = (os_log_t *)sub_138E8(13);
        int v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&v163, (uint64_t)v25);
          __int16 v28 = v163.__cv_.__opaque[15];
          sig = v163.__cv_.__sig;
          *(AudioObjectPropertyAddress *)&int v144 = inAddress;
          sub_613AC((uint64_t)&__p, (unsigned int *)&v144);
          int v30 = &v163;
          if (v28 < 0) {
            int v30 = (std::condition_variable *)sig;
          }
          if (__p.__cv_.__opaque[15] >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::condition_variable *)__p.__cv_.__sig;
          }
          buf.AudioObjectPropertySelector mSelector = 136316418;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          int v152 = 1024;
          int v153 = 207;
          int v154 = 1024;
          *(_DWORD *)int v155 = (_DWORD)v25;
          *(_WORD *)&v155[4] = 2080;
          *(void *)&v155[6] = v30;
          *(_WORD *)&v155[14] = 2080;
          *(void *)&v155[16] = p_p;
          *(_WORD *)&v155[24] = 1024;
          *(_DWORD *)&v155[26] = v18;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
          if (__p.__cv_.__opaque[15] < 0) {
            operator delete((void *)__p.__cv_.__sig);
          }
          if (v163.__cv_.__opaque[15] < 0) {
            operator delete((void *)v163.__cv_.__sig);
          }
        }

        goto LABEL_68;
      }
    }

    else
    {
      uint64_t v34 = 0;
      if (!v127.__m_) {
        goto LABEL_59;
      }
    }

    *(void *)&v127.__owns_ = m;
    operator delete(m);
    goto LABEL_59;
  }

            int v3 = *v18;
            AudioObjectID v17 = v18;
            if (!*v18) {
              goto LABEL_48;
            }
          }

          int v20 = *((_DWORD *)v18 + 9);
          if (v16 < v20) {
            goto LABEL_33;
          }
          uint64_t v21 = v20 == v16;
          if (v20 >= v16) {
            uint64_t v22 = 1;
          }
          else {
            uint64_t v22 = -1;
          }
          if (v21) {
            uint64_t v22 = 0;
          }
          if ((v22 & 0x80) == 0) {
            goto LABEL_47;
          }
LABEL_39:
          AudioObjectID v17 = v18 + 1;
          int v3 = v18[1];
          if (!v3) {
            goto LABEL_48;
          }
        }
      }

      uint64_t v18 = &qword_4A1988;
      AudioObjectID v17 = &qword_4A1988;
LABEL_47:
      if (!*v17)
      {
LABEL_48:
        __int16 v24 = (uint64_t *)operator new(0x48uLL);
        v24[4] = *v2;
        sub_82AF0((uint64_t)(v24 + 5), (uint64_t)(v2 + 1));
        *__int16 v24 = 0LL;
        v24[1] = 0LL;
        v24[2] = (uint64_t)v18;
        os_log_t *v17 = (uint64_t)v24;
        if (*(void *)qword_4A1980)
        {
          qword_4A1980 = *(void *)qword_4A1980;
          __int16 v24 = (uint64_t *)*v17;
        }

        uint64_t result = sub_7A420((uint64_t *)qword_4A1988, v24);
        ++qword_4A1990;
      }

      v2 += 5;
      if (v2 == v4) {
        return result;
      }
      unsigned int v5 = (uint64_t *)qword_4A1980;
      int v3 = qword_4A1988;
    }

    unsigned int v7 = &qword_4A1988;
LABEL_41:
    if (v3) {
      uint64_t v18 = v7;
    }
    else {
      uint64_t v18 = &qword_4A1988;
    }
    if (v3) {
      AudioObjectID v17 = v7 + 1;
    }
    else {
      AudioObjectID v17 = &qword_4A1988;
    }
    goto LABEL_47;
  }

  return result;
}

LABEL_32:
      int v20 = v15 & 0xFFFFFF00;
      uint64_t v21 = 0x100000000LL;
      goto LABEL_41;
    }
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  LOBYTE(v15) = 0;
  int v20 = 0;
LABEL_41:
  if (HIDWORD(v21))
  {
    uint64_t v10 = v21 | v20 | v15;
    goto LABEL_43;
  }

    sub_1BB88(&v31);
  }

      __int16 v26 = std::__shared_weak_count::lock(v18);
      if (!v26) {
        goto LABEL_37;
      }
      int v27 = v26;
      __int16 v28 = v25 == v19;
      __int16 v29 = (unint64_t *)&v26->__shared_owners_;
      do
        int v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v27);
      }

    __int16 v28 = 0LL;
    goto LABEL_33;
  }

  if (!v14) {
    goto LABEL_182;
  }
  uint64_t v15 = sub_AD7D0((uint64_t)v14);
  if (vabds_f32(floorf(v15), v15) >= 0.00000011921)
  {
    std::to_string(a1, v15);
    return;
  }

  unsigned int v16 = (const __CFNumber *)*a2;
  if (!*a2)
  {
LABEL_182:
    uint64_t v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(v92);
LABEL_183:
  }

  AudioObjectID v17 = CFNumberGetTypeID();
  if (v17 == CFGetTypeID(v16))
  {
    switch(CFNumberGetType(v16))
    {
      case kCFNumberSInt8Type:
        valuePtr.__r_.__value_.__s.__data_[0] = 0;
        Value = CFNumberGetValue(v16, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_153;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        uint64_t v83 = CFNumberGetValue(v16, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_148;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        uint64_t v82 = CFNumberGetValue(v16, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_172;
      case kCFNumberSInt64Type:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v77 = CFNumberGetValue(v16, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_165;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        unint64_t v78 = CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_140;
      case kCFNumberFloat64Type:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v81 = CFNumberGetValue(v16, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_150;
      case kCFNumberCharType:
        valuePtr.__r_.__value_.__s.__data_[0] = 0;
        Value = CFNumberGetValue(v16, kCFNumberCharType, &valuePtr);
LABEL_153:
        uint64_t v87 = Value;
        if (Value) {
          AudioStreamBasicDescription v88 = valuePtr.__r_.__value_.__s.__data_[0];
        }
        else {
          AudioStreamBasicDescription v88 = 0;
        }
        if (valuePtr.__r_.__value_.__s.__data_[0] >= 0 || Value == 0) {
          uint64_t v90 = 0LL;
        }
        else {
          uint64_t v90 = -256LL;
        }
        if (!v87) {
          goto LABEL_177;
        }
        uint64_t v61 = v90 & 0xFFFFFFFFFFFFFF00LL | v88;
        goto LABEL_170;
      case kCFNumberShortType:
        LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        uint64_t v83 = CFNumberGetValue(v16, kCFNumberShortType, &valuePtr);
LABEL_148:
        uint64_t v84 = v83;
        unint64_t v85 = valuePtr.__r_.__value_.__s.__data_[0];
        data_low = SLOWORD(valuePtr.__r_.__value_.__l.__data_);
        goto LABEL_173;
      case kCFNumberIntType:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        uint64_t v82 = CFNumberGetValue(v16, kCFNumberIntType, &valuePtr);
LABEL_172:
        uint64_t v84 = v82;
        unint64_t v85 = valuePtr.__r_.__value_.__s.__data_[0];
        data_low = SLODWORD(valuePtr.__r_.__value_.__l.__data_);
LABEL_173:
        AudioStreamBasicDescription v91 = data_low & 0xFFFFFFFFFFFFFF00LL | v85;
        if (v84) {
          uint64_t v61 = v91;
        }
        else {
          uint64_t v61 = 0LL;
        }
        if (!v84) {
          goto LABEL_177;
        }
        goto LABEL_170;
      case kCFNumberLongType:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v77 = CFNumberGetValue(v16, kCFNumberLongType, &valuePtr);
        goto LABEL_165;
      case kCFNumberLongLongType:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v77 = CFNumberGetValue(v16, kCFNumberLongLongType, &valuePtr);
        goto LABEL_165;
      case kCFNumberFloatType:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        unint64_t v78 = CFNumberGetValue(v16, kCFNumberFloatType, &valuePtr);
LABEL_140:
        uint64_t v79 = v78;
        __int16 v80 = (uint64_t)*(float *)&valuePtr.__r_.__value_.__l.__data_;
        goto LABEL_166;
      case kCFNumberDoubleType:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v81 = CFNumberGetValue(v16, kCFNumberDoubleType, &valuePtr);
        goto LABEL_150;
      case kCFNumberCFIndexType:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v77 = CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_165;
      case kCFNumberNSIntegerType:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v77 = CFNumberGetValue(v16, kCFNumberNSIntegerType, &valuePtr);
LABEL_165:
        uint64_t v79 = v77;
        __int16 v80 = valuePtr.__r_.__value_.__r.__words[0];
        goto LABEL_166;
      case kCFNumberCGFloatType:
        valuePtr.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v81 = CFNumberGetValue(v16, kCFNumberCGFloatType, &valuePtr);
LABEL_150:
        uint64_t v79 = v81;
        __int16 v80 = (uint64_t)*(double *)&valuePtr.__r_.__value_.__l.__data_;
LABEL_166:
        if (v79) {
          uint64_t v61 = v80;
        }
        else {
          uint64_t v61 = 0LL;
        }
        if (v79) {
          goto LABEL_170;
        }
        goto LABEL_177;
      default:
        goto LABEL_177;
    }
  }

  uint64_t v60 = CFBooleanGetTypeID();
  if (v60 != CFGetTypeID(v16))
  {
LABEL_177:
    uint64_t v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(v92);
    goto LABEL_183;
  }

  uint64_t v61 = CFBooleanGetValue(v16);
LABEL_170:
  std::to_string(a1, v61);
}

  if (!v4)
  {
    char v40 = (os_log_t *)sub_138E8(13);
    __int128 v41 = *v40;
    if (*v40)
    {
      if (os_log_type_enabled(*v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __int16 v52 = "RunTimeDefaults.cpp";
        int v53 = 1024;
        __int16 v54 = 1098;
        uint64_t v55 = 2080;
        v56[0] = "BuiltInMicSelection";
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d No bits selected. Ignoring default %s (default VAD behavior will obtain).",  buf,  0x1Cu);
      }
    }
  }

  if (!v7) {
    goto LABEL_127;
  }
  AudioObjectID v17 = 0;
  uint64_t v18 = v6 - 72;
  char v48 = v6 - 2025;
  while (((v5 >> v17) & 1) == 0)
  {
LABEL_87:
    if (v7 == ++v17) {
      goto LABEL_127;
    }
  }

  switch(v17)
  {
    case 0:
      if (v18 <= 0x23 && ((1LL << (v6 - 72)) & 0xF3F3DFB6FLL) != 0 || v48 < 5 || v6 == 177)
      {
        int v19 = (os_log_t *)sub_138E8(13);
        int v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(__p, 1768778033LL);
          uint64_t v21 = __p;
          if (v50 < 0) {
            uint64_t v21 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          __int16 v52 = "RunTimeDefaults.cpp";
          int v53 = 1024;
          __int16 v54 = 1129;
          uint64_t v55 = 1024;
          LODWORD(v56[0]) = 0;
          WORD2(v56[0]) = 2080;
          *(void *)((char *)v56 + 6) = v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bit %u: primary mic selected... Selecting sub-port %s.",  buf,  0x22u);
          if (v50 < 0) {
            operator delete(__p[0]);
          }
        }

        *(_DWORD *)AudioObjectPropertyAddress buf = 1768778033;
        sub_8598C((uint64_t)&qword_48E7F0, (__int32 *)buf);
      }

      else
      {
        uint64_t v34 = (os_log_t *)sub_138E8(13);
        __int16 v35 = *v34;
        if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(__p, 1768778083LL);
          uint64_t v36 = __p;
          if (v50 < 0) {
            uint64_t v36 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          __int16 v52 = "RunTimeDefaults.cpp";
          int v53 = 1024;
          __int16 v54 = 1134;
          uint64_t v55 = 1024;
          LODWORD(v56[0]) = 0;
          WORD2(v56[0]) = 2080;
          *(void *)((char *)v56 + 6) = v36;
          _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bit %u: primary mic selected... Selecting sub-port %s.",  buf,  0x22u);
          if (v50 < 0) {
            operator delete(__p[0]);
          }
        }

        *(_DWORD *)AudioObjectPropertyAddress buf = 1768778083;
        sub_8598C((uint64_t)&qword_48E7F0, (__int32 *)buf);
      }

      goto LABEL_87;
    case 1:
      if (v18 <= 0x23 && ((1LL << v18) & 0xF333DFB6FLL) != 0 || (v6 - 2028) < 2 || v6 == 177)
      {
        if (v18 <= 0x23 && ((1LL << v18) & 0xF3F3DFB6FLL) != 0 || v48 < 5 || v6 == 177)
        {
          uint64_t v22 = (os_log_t *)sub_138E8(13);
          std::string::size_type v23 = *v22;
          if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(__p, 1768778034LL);
            __int16 v24 = __p;
            if (v50 < 0) {
              __int16 v24 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            __int16 v52 = "RunTimeDefaults.cpp";
            int v53 = 1024;
            __int16 v54 = 1177;
            uint64_t v55 = 1024;
            LODWORD(v56[0]) = 1;
            WORD2(v56[0]) = 2080;
            *(void *)((char *)v56 + 6) = v24;
            _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bit %u: back mic selected... Selecting sub-port %s.",  buf,  0x22u);
            if (v50 < 0) {
              operator delete(__p[0]);
            }
          }

          *(_DWORD *)AudioObjectPropertyAddress buf = 1768778034;
          sub_8598C((uint64_t)&qword_48E7F0, (__int32 *)buf);
        }

        else
        {
          uint64_t v37 = (os_log_t *)sub_138E8(13);
          char v38 = *v37;
          if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(__p, 1936550243LL);
            uint64_t v39 = __p;
            if (v50 < 0) {
              uint64_t v39 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            __int16 v52 = "RunTimeDefaults.cpp";
            int v53 = 1024;
            __int16 v54 = 1182;
            uint64_t v55 = 1024;
            LODWORD(v56[0]) = 1;
            WORD2(v56[0]) = 2080;
            *(void *)((char *)v56 + 6) = v39;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bit %u: back mic selected... Selecting sub-port %s.",  buf,  0x22u);
            if (v50 < 0) {
              operator delete(__p[0]);
            }
          }

          *(_DWORD *)AudioObjectPropertyAddress buf = 1936550243;
          sub_8598C((uint64_t)&qword_48E7F0, (__int32 *)buf);
        }

        goto LABEL_87;
      }

      AudioObjectID v17 = 1;
LABEL_123:
      __int16 v45 = (os_log_t *)sub_138E8(13);
      uint64_t v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v52 = "RunTimeDefaults.cpp";
        int v53 = 1024;
        __int16 v54 = 1264;
        uint64_t v55 = 1024;
        LODWORD(v56[0]) = v17;
        WORD2(v56[0]) = 1024;
        *(_DWORD *)((char *)v56 + 6) = v6;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Encountered an unexpected bit (%u) / product (%d) combination.",  buf,  0x1Eu);
      }

      qword_48E7F8 = qword_48E7F0;
LABEL_127:
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
      return sub_7A5B8(a1, (const void *)qword_48E7F0, qword_48E7F8, (qword_48E7F8 - qword_48E7F0) >> 2);
    case 2:
      if (((v6 - 87) > 0x14 || ((1 << (v6 - 87)) & 0x1E7E03) == 0) && v48 >= 5)
      {
        AudioObjectID v17 = 2;
        goto LABEL_123;
      }

      uint64_t v25 = (os_log_t *)sub_138E8(13);
      __int16 v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, 1768778035LL);
        int v27 = __p;
        if (v50 < 0) {
          int v27 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v52 = "RunTimeDefaults.cpp";
        int v53 = 1024;
        __int16 v54 = 1208;
        uint64_t v55 = 1024;
        LODWORD(v56[0]) = 2;
        WORD2(v56[0]) = 2080;
        *(void *)((char *)v56 + 6) = v27;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bit %u: front mic selected... Selecting sub-port %s.",  buf,  0x22u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
      }

      *(_DWORD *)AudioObjectPropertyAddress buf = 1768778035;
      sub_8598C((uint64_t)&qword_48E7F0, (__int32 *)buf);
      goto LABEL_87;
    case 3:
      if (((v6 - 87) > 0x14 || ((1 << (v6 - 87)) & 0x1E7E03) == 0) && v48 >= 5)
      {
        AudioObjectID v17 = 3;
        goto LABEL_123;
      }

      __int16 v28 = (os_log_t *)sub_138E8(13);
      __int16 v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, 1768778036LL);
        int v30 = __p;
        if (v50 < 0) {
          int v30 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v52 = "RunTimeDefaults.cpp";
        int v53 = 1024;
        __int16 v54 = 1239;
        uint64_t v55 = 1024;
        LODWORD(v56[0]) = 3;
        WORD2(v56[0]) = 2080;
        *(void *)((char *)v56 + 6) = v30;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bit %u: back mic selected... Selecting sub-port %s.",  buf,  0x22u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
      }

      *(_DWORD *)AudioObjectPropertyAddress buf = 1768778036;
      sub_8598C((uint64_t)&qword_48E7F0, (__int32 *)buf);
      goto LABEL_87;
    case 4:
      if (((v6 - 87) > 0x12 || ((1 << (v6 - 87)) & 0x67E03) == 0) && v48 >= 3)
      {
        AudioObjectID v17 = 4;
        goto LABEL_123;
      }

      __int16 v31 = (os_log_t *)sub_138E8(13);
      int v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, 1768778037LL);
        __int16 v33 = __p;
        if (v50 < 0) {
          __int16 v33 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v52 = "RunTimeDefaults.cpp";
        int v53 = 1024;
        __int16 v54 = 1258;
        uint64_t v55 = 1024;
        LODWORD(v56[0]) = 4;
        WORD2(v56[0]) = 2080;
        *(void *)((char *)v56 + 6) = v33;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bit %u: side mic selected... Selecting sub-port %s.",  buf,  0x22u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
      }

      *(_DWORD *)AudioObjectPropertyAddress buf = 1768778037;
      sub_8598C((uint64_t)&qword_48E7F0, (__int32 *)buf);
      goto LABEL_87;
    default:
      goto LABEL_123;
  }

    sub_EE938();
    return;
  }

  if (a1 > 47)
  {
    if (((a1 - 68) > 0xE || ((1 << (a1 - 68)) & 0x4801) == 0) && a1 != 48)
    {
LABEL_20:
      uint64_t v4 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
      unsigned int v5 = (os_log_t *)sub_138E8(20);
      unsigned int v6 = *v5;
      if (v4 == 4)
      {
        if (v6)
        {
          if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingSettingsFactory_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 303;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = a1;
            _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unknown product ID (%d): unable to return a valid tvOS RoutingDatabase",  buf,  0x18u);
          }
        }

        *a2 = 0;
        sub_EE938();
      }

      else
      {
        if (v6 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingSettingsFactory_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 308;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = a1;
          _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown product ID (%d): unable to return a valid tvOS RoutingDatabase",  buf,  0x18u);
        }

        unsigned int v7 = (os_log_t *)sub_138E8(20);
        BOOL v8 = *v7;
        if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = sub_753A8();
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingSettingsFactory_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 428;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v9;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown product ID (%d): unable to return a valid RoutingDatabase",  buf,  0x18u);
        }

        *a2 = 0;
        *(void *)AudioObjectPropertyAddress buf = buf;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0LL;
        LODWORD(v151) = 3;
        int v152 = 0uLL;
        *((void *)&v151 + 1) = &v152;
        LODWORD(v153) = 3;
        int v155 = 0LL;
        *((void *)&v153 + 1) = &v154;
        int v154 = 0uLL;
        int v157 = 0LL;
        int v158 = 0LL;
        int v156 = &v157;
        v142[0] = (uint64_t)v142;
        v142[1] = (uint64_t)v142;
        int v143 = 0LL;
        uint64_t v10 = (char *)operator new(0x38uLL);
        strcpy(v10 + 16, " papspap");
        *((void *)v10 + 4) = &qword_4A9200;
        v10[40] = 0;
        v10[48] = 0;
        *(void *)uint64_t v10 = buf;
        *((void *)v10 + 1) = buf;
        *(void *)AudioObjectPropertyAddress buf = v10;
        *(void *)&buf[8] = v10;
        *(void *)&buf[16] = 1LL;
        unsigned int v11 = sub_F1214((uint64_t)buf);
        uint64_t v12 = v142[0];
        *unsigned int v11 = v142[0];
        v11[1] = v142;
        *(void *)(v12 + 8) = v11;
        v142[0] = (uint64_t)v11;
        ++v143;
        sub_F12DC((uint64_t)buf);
        uint64_t v13 = (char *)operator new(0x38uLL);
        strcpy(v13 + 16, " papapap");
        *((void *)v13 + 4) = &qword_4A9200;
        v13[40] = 0;
        v13[48] = 0;
        uint64_t v14 = *(void *)buf;
        *(void *)uint64_t v13 = *(void *)buf;
        *((void *)v13 + 1) = buf;
        *(void *)(v14 + 8) = v13;
        *(void *)AudioObjectPropertyAddress buf = v13;
        ++*(void *)&buf[16];
        uint64_t v15 = sub_F1214((uint64_t)buf);
        unsigned int v16 = v142[0];
        uint64_t *v15 = v142[0];
        v15[1] = v142;
        *(void *)(v16 + 8) = v15;
        v142[0] = (uint64_t)v15;
        ++v143;
        sub_F12DC((uint64_t)buf);
        AudioObjectID v17 = (char *)operator new(0x38uLL);
        strcpy(v17 + 16, " papmdhp");
        *((void *)v17 + 4) = &qword_4A9200;
        v17[40] = 0;
        v17[48] = 0;
        uint64_t v18 = *(void *)buf;
        *(void *)AudioObjectID v17 = *(void *)buf;
        *((void *)v17 + 1) = buf;
        *(void *)(v18 + 8) = v17;
        *(void *)AudioObjectPropertyAddress buf = v17;
        ++*(void *)&buf[16];
        int v19 = sub_F1214((uint64_t)buf);
        int v20 = v142[0];
        os_log_t *v19 = v142[0];
        v19[1] = v142;
        *(void *)(v20 + 8) = v19;
        v142[0] = (uint64_t)v19;
        ++v143;
        sub_F12DC((uint64_t)buf);
        uint64_t v21 = (char *)operator new(0x38uLL);
        strcpy(v21 + 16, " papBphp");
        *((void *)v21 + 4) = &qword_4A9200;
        v21[40] = 0;
        v21[48] = 0;
        uint64_t v22 = *(void *)buf;
        *(void *)uint64_t v21 = *(void *)buf;
        *((void *)v21 + 1) = buf;
        *(void *)(v22 + 8) = v21;
        *(void *)AudioObjectPropertyAddress buf = v21;
        ++*(void *)&buf[16];
        std::string::size_type v23 = sub_F1214((uint64_t)buf);
        __int16 v24 = v142[0];
        os_log_t *v23 = v142[0];
        v23[1] = v142;
        *(void *)(v24 + 8) = v23;
        v142[0] = (uint64_t)v23;
        ++v143;
        sub_F12DC((uint64_t)buf);
        uint64_t v25 = (char *)operator new(0x38uLL);
        strcpy(v25 + 16, " papwphp");
        *((void *)v25 + 4) = &qword_4A9200;
        v25[40] = 0;
        v25[48] = 0;
        __int16 v26 = *(void *)buf;
        *(void *)uint64_t v25 = *(void *)buf;
        *((void *)v25 + 1) = buf;
        *(void *)(v26 + 8) = v25;
        *(void *)AudioObjectPropertyAddress buf = v25;
        ++*(void *)&buf[16];
        int v27 = sub_F1214((uint64_t)buf);
        __int16 v28 = v142[0];
        *int v27 = v142[0];
        v27[1] = v142;
        *(void *)(v28 + 8) = v27;
        v142[0] = (uint64_t)v27;
        ++v143;
        sub_F12DC((uint64_t)buf);
        __int16 v29 = (char *)operator new(0x38uLL);
        strcpy(v29 + 16, " papkpsp");
        *((void *)v29 + 4) = &qword_4A9200;
        v29[40] = 0;
        v29[48] = 0;
        int v30 = *(void *)buf;
        *(void *)__int16 v29 = *(void *)buf;
        *((void *)v29 + 1) = buf;
        *(void *)(v30 + 8) = v29;
        *(void *)AudioObjectPropertyAddress buf = v29;
        ++*(void *)&buf[16];
        __int16 v31 = sub_F1214((uint64_t)buf);
        int v32 = v142[0];
        const void *v31 = v142[0];
        v31[1] = v142;
        *(void *)(v32 + 8) = v31;
        v142[0] = (uint64_t)v31;
        ++v143;
        sub_F12DC((uint64_t)buf);
        __int16 v33 = (char *)operator new(0x38uLL);
        strcpy(v33 + 16, " paplunp");
        *((void *)v33 + 4) = &qword_4A9200;
        v33[40] = 0;
        v33[48] = 0;
        uint64_t v34 = *(void *)buf;
        *(void *)__int16 v33 = *(void *)buf;
        *((void *)v33 + 1) = buf;
        *(void *)(v34 + 8) = v33;
        *(void *)AudioObjectPropertyAddress buf = v33;
        ++*(void *)&buf[16];
        __int16 v35 = sub_F1214((uint64_t)buf);
        uint64_t v36 = v142[0];
        os_log_t *v35 = v142[0];
        v35[1] = v142;
        *(void *)(v36 + 8) = v35;
        v142[0] = (uint64_t)v35;
        ++v143;
        sub_F12DC((uint64_t)buf);
        v140[0] = (uint64_t)v140;
        v140[1] = (uint64_t)v140;
        int v141 = 0LL;
        uint64_t v37 = (char *)operator new(0x38uLL);
        strcpy(v37 + 16, "iwmp pap");
        *((void *)v37 + 4) = &qword_4A9200;
        v37[40] = 0;
        v37[48] = 0;
        char v38 = *(void *)buf;
        *(void *)uint64_t v37 = *(void *)buf;
        *((void *)v37 + 1) = buf;
        *(void *)(v38 + 8) = v37;
        *(void *)AudioObjectPropertyAddress buf = v37;
        ++*(void *)&buf[16];
        uint64_t v39 = sub_F1214((uint64_t)buf);
        char v40 = v140[0];
        os_log_s *v39 = v140[0];
        v39[1] = v140;
        *(void *)(v40 + 8) = v39;
        v140[0] = (uint64_t)v39;
        ++v141;
        sub_F12DC((uint64_t)buf);
        __int128 v41 = (char *)operator new(0x38uLL);
        strcpy(v41 + 16, "ibmp pap");
        *((void *)v41 + 4) = &qword_4A9200;
        v41[40] = 0;
        v41[48] = 0;
        uint64_t v42 = *(void *)buf;
        *(void *)__int128 v41 = *(void *)buf;
        *((void *)v41 + 1) = buf;
        *(void *)(v42 + 8) = v41;
        *(void *)AudioObjectPropertyAddress buf = v41;
        ++*(void *)&buf[16];
        __int16 v43 = sub_F1214((uint64_t)buf);
        int v44 = v140[0];
        *__int16 v43 = v140[0];
        v43[1] = v140;
        *(void *)(v44 + 8) = v43;
        v140[0] = (uint64_t)v43;
        ++v141;
        sub_F12DC((uint64_t)buf);
        __int16 v45 = (char *)operator new(0x38uLL);
        qmemcpy(v134, "ilnp pap paplunp", sizeof(v134));
        strcpy(v45 + 16, "ilnp pap");
        *((void *)v45 + 4) = &qword_4A9200;
        v45[40] = 0;
        v45[48] = 0;
        uint64_t v46 = *(void *)buf;
        *(void *)__int16 v45 = *(void *)buf;
        *((void *)v45 + 1) = buf;
        *(void *)(v46 + 8) = v45;
        *(void *)AudioObjectPropertyAddress buf = v45;
        ++*(void *)&buf[16];
        uint64_t v47 = sub_F1214((uint64_t)buf);
        char v48 = v140[0];
        std::string *v47 = v140[0];
        v47[1] = v140;
        *(void *)(v48 + 8) = v47;
        v140[0] = (uint64_t)v47;
        ++v141;
        sub_F12DC((uint64_t)buf);
        v138[0] = (uint64_t)v138;
        v138[1] = (uint64_t)v138;
        int v139 = 0LL;
        uint64_t v49 = (char *)operator new(0x38uLL);
        strcpy(v49 + 16, " papwphp");
        *((void *)v49 + 4) = &qword_4A9200;
        v49[40] = 0;
        v49[48] = 0;
        uint64_t v50 = *(void *)buf;
        *(void *)uint64_t v49 = *(void *)buf;
        *((void *)v49 + 1) = buf;
        *(void *)(v50 + 8) = v49;
        __int128 v51 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v49;
        ++*(void *)&buf[16];
        __int16 v52 = (char *)operator new(0x38uLL);
        strcpy(v52 + 16, "iwmp pap");
        *((void *)v52 + 4) = &qword_4A9200;
        v52[40] = 0;
        v52[48] = 0;
        *(void *)__int16 v52 = v49;
        *((void *)v52 + 1) = buf;
        *((void *)v49 + 1) = v52;
        *(void *)AudioObjectPropertyAddress buf = v52;
        *(void *)&buf[16] = v51 + 2;
        int v53 = sub_F1214((uint64_t)buf);
        __int16 v54 = v138[0];
        *int v53 = v138[0];
        v53[1] = v138;
        *(void *)(v54 + 8) = v53;
        v138[0] = (uint64_t)v53;
        ++v139;
        sub_F12DC((uint64_t)buf);
        uint64_t v55 = (char *)operator new(0x38uLL);
        strcpy(v55 + 16, " papwphp");
        *((void *)v55 + 4) = &qword_4A9200;
        v55[40] = 0;
        v55[48] = 0;
        __int16 v56 = *(void *)buf;
        *(void *)uint64_t v55 = *(void *)buf;
        *((void *)v55 + 1) = buf;
        *(void *)(v56 + 8) = v55;
        uint64_t v57 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v55;
        ++*(void *)&buf[16];
        __int128 v58 = (char *)operator new(0x38uLL);
        strcpy(v58 + 16, "ibmp pap");
        *((void *)v58 + 4) = &qword_4A9200;
        v58[40] = 0;
        v58[48] = 0;
        *(void *)__int128 v58 = v55;
        *((void *)v58 + 1) = buf;
        *((void *)v55 + 1) = v58;
        *(void *)AudioObjectPropertyAddress buf = v58;
        *(void *)&buf[16] = v57 + 2;
        uint64_t v59 = sub_F1214((uint64_t)buf);
        uint64_t v60 = v138[0];
        std::string *v59 = v138[0];
        v59[1] = v138;
        *(void *)(v60 + 8) = v59;
        v138[0] = (uint64_t)v59;
        ++v139;
        sub_F12DC((uint64_t)buf);
        uint64_t v61 = (char *)operator new(0x38uLL);
        strcpy(v61 + 16, " papcerp");
        *((void *)v61 + 4) = &qword_4A9200;
        v61[40] = 0;
        v61[48] = 0;
        uint64_t v62 = *(void *)buf;
        *(void *)uint64_t v61 = *(void *)buf;
        *((void *)v61 + 1) = buf;
        *(void *)(v62 + 8) = v61;
        uint64_t v63 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v61;
        ++*(void *)&buf[16];
        uint64_t v64 = (char *)operator new(0x38uLL);
        strcpy(v64 + 16, "ibmp pap");
        *((void *)v64 + 4) = &qword_4A9200;
        v64[40] = 0;
        v64[48] = 0;
        *(void *)uint64_t v64 = v61;
        *((void *)v64 + 1) = buf;
        *((void *)v61 + 1) = v64;
        *(void *)AudioObjectPropertyAddress buf = v64;
        *(void *)&buf[16] = v63 + 2;
        uint64_t v65 = sub_F1214((uint64_t)buf);
        uint64_t v66 = v138[0];
        *uint64_t v65 = v138[0];
        v65[1] = v138;
        *(void *)(v66 + 8) = v65;
        v138[0] = (uint64_t)v65;
        ++v139;
        sub_F12DC((uint64_t)buf);
        uint64_t v67 = (char *)operator new(0x38uLL);
        strcpy(v67 + 16, " papkpsp");
        *((void *)v67 + 4) = &qword_4A9200;
        v67[40] = 0;
        v67[48] = 0;
        uint64_t v68 = *(void *)buf;
        *(void *)uint64_t v67 = *(void *)buf;
        *((void *)v67 + 1) = buf;
        *(void *)(v68 + 8) = v67;
        uint64_t v69 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v67;
        ++*(void *)&buf[16];
        uint64_t v70 = (char *)operator new(0x38uLL);
        strcpy(v70 + 16, "ibmp pap");
        *((void *)v70 + 4) = &qword_4A9200;
        v70[40] = 0;
        v70[48] = 0;
        *(void *)uint64_t v70 = v67;
        *((void *)v70 + 1) = buf;
        *((void *)v67 + 1) = v70;
        *(void *)AudioObjectPropertyAddress buf = v70;
        *(void *)&buf[16] = v69 + 2;
        char v71 = sub_F1214((uint64_t)buf);
        int64_t v72 = v138[0];
        *char v71 = v138[0];
        v71[1] = v138;
        *(void *)(v72 + 8) = v71;
        v138[0] = (uint64_t)v71;
        ++v139;
        sub_F12DC((uint64_t)buf);
        uint64_t v73 = (char *)operator new(0x38uLL);
        strcpy(v73 + 16, " papkpsp");
        *((void *)v73 + 4) = &qword_4A9200;
        v73[40] = 0;
        v73[48] = 0;
        unint64_t v74 = *(void *)buf;
        *(void *)uint64_t v73 = *(void *)buf;
        *((void *)v73 + 1) = buf;
        *(void *)(v74 + 8) = v73;
        uint64_t v75 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v73;
        ++*(void *)&buf[16];
        uint64_t v76 = (char *)operator new(0x38uLL);
        strcpy(v76 + 16, "iwmp pap");
        *((void *)v76 + 4) = &qword_4A9200;
        v76[40] = 0;
        v76[48] = 0;
        *(void *)uint64_t v76 = v73;
        *((void *)v76 + 1) = buf;
        *((void *)v73 + 1) = v76;
        *(void *)AudioObjectPropertyAddress buf = v76;
        *(void *)&buf[16] = v75 + 2;
        uint64_t v77 = sub_F1214((uint64_t)buf);
        unint64_t v78 = v138[0];
        *uint64_t v77 = v138[0];
        v77[1] = v138;
        *(void *)(v78 + 8) = v77;
        v138[0] = (uint64_t)v77;
        ++v139;
        sub_F12DC((uint64_t)buf);
        uint64_t v79 = (char *)operator new(0x38uLL);
        strcpy(v79 + 16, " papBphp");
        *((void *)v79 + 4) = &qword_4A9200;
        v79[40] = 0;
        v79[48] = 0;
        __int16 v80 = *(void *)buf;
        *(void *)uint64_t v79 = *(void *)buf;
        *((void *)v79 + 1) = buf;
        *(void *)(v80 + 8) = v79;
        uint64_t v81 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v79;
        ++*(void *)&buf[16];
        uint64_t v82 = (char *)operator new(0x38uLL);
        strcpy(v82 + 16, "ibmp pap");
        *((void *)v82 + 4) = &qword_4A9200;
        v82[40] = 0;
        v82[48] = 0;
        *(void *)uint64_t v82 = v79;
        *((void *)v82 + 1) = buf;
        *((void *)v79 + 1) = v82;
        *(void *)AudioObjectPropertyAddress buf = v82;
        *(void *)&buf[16] = v81 + 2;
        uint64_t v83 = sub_F1214((uint64_t)buf);
        uint64_t v84 = v138[0];
        *uint64_t v83 = v138[0];
        v83[1] = v138;
        *(void *)(v84 + 8) = v83;
        v138[0] = (uint64_t)v83;
        ++v139;
        sub_F12DC((uint64_t)buf);
        unint64_t v85 = (char *)operator new(0x38uLL);
        strcpy(v85 + 16, " papBphp");
        *((void *)v85 + 4) = &qword_4A9200;
        v85[40] = 0;
        v85[48] = 0;
        unint64_t v86 = *(void *)buf;
        *(void *)unint64_t v85 = *(void *)buf;
        *((void *)v85 + 1) = buf;
        *(void *)(v86 + 8) = v85;
        uint64_t v87 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v85;
        ++*(void *)&buf[16];
        AudioStreamBasicDescription v88 = (char *)operator new(0x38uLL);
        strcpy(v88 + 16, "iwmp pap");
        *((void *)v88 + 4) = &qword_4A9200;
        v88[40] = 0;
        v88[48] = 0;
        *(void *)AudioStreamBasicDescription v88 = v85;
        *((void *)v88 + 1) = buf;
        *((void *)v85 + 1) = v88;
        *(void *)AudioObjectPropertyAddress buf = v88;
        *(void *)&buf[16] = v87 + 2;
        uint64_t v89 = sub_F1214((uint64_t)buf);
        uint64_t v90 = v138[0];
        *uint64_t v89 = v138[0];
        v89[1] = v138;
        *(void *)(v90 + 8) = v89;
        v138[0] = (uint64_t)v89;
        ++v139;
        sub_F12DC((uint64_t)buf);
        AudioStreamBasicDescription v91 = (char *)operator new(0x38uLL);
        strcpy(v91 + 16, " papspap");
        *((void *)v91 + 4) = &qword_4A9200;
        v91[40] = 0;
        v91[48] = 0;
        uint64_t v92 = *(void *)buf;
        *(void *)AudioStreamBasicDescription v91 = *(void *)buf;
        *((void *)v91 + 1) = buf;
        *(void *)(v92 + 8) = v91;
        uint64_t v93 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v91;
        ++*(void *)&buf[16];
        uint64_t v94 = (char *)operator new(0x38uLL);
        strcpy(v94 + 16, "ibmp pap");
        *((void *)v94 + 4) = &qword_4A9200;
        v94[40] = 0;
        v94[48] = 0;
        *(void *)uint64_t v94 = v91;
        *((void *)v94 + 1) = buf;
        *((void *)v91 + 1) = v94;
        *(void *)AudioObjectPropertyAddress buf = v94;
        *(void *)&buf[16] = v93 + 2;
        unsigned int v95 = sub_F1214((uint64_t)buf);
        unint64_t v96 = v138[0];
        *unsigned int v95 = v138[0];
        v95[1] = v138;
        *(void *)(v96 + 8) = v95;
        v138[0] = (uint64_t)v95;
        ++v139;
        sub_F12DC((uint64_t)buf);
        uint64_t v97 = (char *)operator new(0x38uLL);
        strcpy(v97 + 16, " papspap");
        *((void *)v97 + 4) = &qword_4A9200;
        v97[40] = 0;
        v97[48] = 0;
        __int128 v98 = *(void *)buf;
        *(void *)uint64_t v97 = *(void *)buf;
        *((void *)v97 + 1) = buf;
        *(void *)(v98 + 8) = v97;
        unint64_t v99 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v97;
        ++*(void *)&buf[16];
        uint64_t v100 = (char *)operator new(0x38uLL);
        strcpy(v100 + 16, "iwmp pap");
        *((void *)v100 + 4) = &qword_4A9200;
        v100[40] = 0;
        v100[48] = 0;
        *(void *)uint64_t v100 = v97;
        *((void *)v100 + 1) = buf;
        *((void *)v97 + 1) = v100;
        *(void *)AudioObjectPropertyAddress buf = v100;
        *(void *)&buf[16] = v99 + 2;
        uint64_t v101 = sub_F1214((uint64_t)buf);
        __int128 v102 = v138[0];
        *uint64_t v101 = v138[0];
        v101[1] = v138;
        *(void *)(v102 + 8) = v101;
        v138[0] = (uint64_t)v101;
        ++v139;
        sub_F12DC((uint64_t)buf);
        __int128 v103 = (char *)operator new(0x38uLL);
        strcpy(v103 + 16, " papapap");
        *((void *)v103 + 4) = &qword_4A9200;
        v103[40] = 0;
        v103[48] = 0;
        uint64_t v104 = *(void *)buf;
        *(void *)__int128 v103 = *(void *)buf;
        *((void *)v103 + 1) = buf;
        *(void *)(v104 + 8) = v103;
        uint64_t v105 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v103;
        ++*(void *)&buf[16];
        uint64_t v106 = (char *)operator new(0x38uLL);
        strcpy(v106 + 16, "ibmp pap");
        *((void *)v106 + 4) = &qword_4A9200;
        v106[40] = 0;
        v106[48] = 0;
        *(void *)uint64_t v106 = v103;
        *((void *)v106 + 1) = buf;
        *((void *)v103 + 1) = v106;
        *(void *)AudioObjectPropertyAddress buf = v106;
        *(void *)&buf[16] = v105 + 2;
        uint64_t v107 = sub_F1214((uint64_t)buf);
        uint64_t v108 = v138[0];
        double *v107 = v138[0];
        v107[1] = v138;
        *(void *)(v108 + 8) = v107;
        v138[0] = (uint64_t)v107;
        ++v139;
        sub_F12DC((uint64_t)buf);
        __int128 v109 = (char *)operator new(0x38uLL);
        strcpy(v109 + 16, " papapap");
        *((void *)v109 + 4) = &qword_4A9200;
        v109[40] = 0;
        v109[48] = 0;
        __int128 v110 = *(void *)buf;
        *(void *)__int128 v109 = *(void *)buf;
        *((void *)v109 + 1) = buf;
        *(void *)(v110 + 8) = v109;
        uint64_t v111 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v109;
        ++*(void *)&buf[16];
        __int128 v112 = (char *)operator new(0x38uLL);
        strcpy(v112 + 16, "iwmp pap");
        *((void *)v112 + 4) = &qword_4A9200;
        v112[40] = 0;
        v112[48] = 0;
        *(void *)__int128 v112 = v109;
        *((void *)v112 + 1) = buf;
        *((void *)v109 + 1) = v112;
        *(void *)AudioObjectPropertyAddress buf = v112;
        *(void *)&buf[16] = v111 + 2;
        uint64_t v113 = sub_F1214((uint64_t)buf);
        __int128 v114 = v138[0];
        *uint64_t v113 = v138[0];
        v113[1] = v138;
        *(void *)(v114 + 8) = v113;
        v138[0] = (uint64_t)v113;
        ++v139;
        sub_F12DC((uint64_t)buf);
        int v115 = (char *)operator new(0x38uLL);
        strcpy(v115 + 16, " papmdhp");
        *((void *)v115 + 4) = &qword_4A9200;
        v115[40] = 0;
        v115[48] = 0;
        int v116 = *(void *)buf;
        *(void *)int v115 = *(void *)buf;
        *((void *)v115 + 1) = buf;
        *(void *)(v116 + 8) = v115;
        int v117 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v115;
        ++*(void *)&buf[16];
        int v118 = (char *)operator new(0x38uLL);
        strcpy(v118 + 16, "ibmp pap");
        *((void *)v118 + 4) = &qword_4A9200;
        v118[40] = 0;
        v118[48] = 0;
        *(void *)int v118 = v115;
        *((void *)v118 + 1) = buf;
        *((void *)v115 + 1) = v118;
        *(void *)AudioObjectPropertyAddress buf = v118;
        *(void *)&buf[16] = v117 + 2;
        int v119 = sub_F1214((uint64_t)buf);
        int v120 = v138[0];
        os_log_t *v119 = v138[0];
        v119[1] = v138;
        *(void *)(v120 + 8) = v119;
        v138[0] = (uint64_t)v119;
        ++v139;
        sub_F12DC((uint64_t)buf);
        uint64_t v121 = (char *)operator new(0x38uLL);
        strcpy(v121 + 16, " papmdhp");
        *((void *)v121 + 4) = &qword_4A9200;
        v121[40] = 0;
        v121[48] = 0;
        double v122 = *(void *)buf;
        *(void *)uint64_t v121 = *(void *)buf;
        *((void *)v121 + 1) = buf;
        *(void *)(v122 + 8) = v121;
        int v123 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v121;
        ++*(void *)&buf[16];
        int v124 = (char *)operator new(0x38uLL);
        strcpy(v124 + 16, "iwmp pap");
        *((void *)v124 + 4) = &qword_4A9200;
        v124[40] = 0;
        v124[48] = 0;
        *(void *)int v124 = v121;
        *((void *)v124 + 1) = buf;
        *((void *)v121 + 1) = v124;
        *(void *)AudioObjectPropertyAddress buf = v124;
        *(void *)&buf[16] = v123 + 2;
        int v125 = sub_F1214((uint64_t)buf);
        int v126 = v138[0];
        os_log_t *v125 = v138[0];
        v125[1] = v138;
        *(void *)(v126 + 8) = v125;
        v138[0] = (uint64_t)v125;
        ++v139;
        sub_F12DC((uint64_t)buf);
        int v127 = operator new(0x38uLL);
        v127[2] = v134[1];
        *((_BYTE *)v127 + 24) = 0;
        v127[4] = &qword_4A9200;
        *((_BYTE *)v127 + 40) = 0;
        *((_BYTE *)v127 + 48) = 0;
        int v128 = *(void *)buf;
        *int v127 = *(void *)buf;
        v127[1] = buf;
        *(void *)(v128 + 8) = v127;
        int v129 = *(void *)&buf[16];
        *(void *)AudioObjectPropertyAddress buf = v127;
        ++*(void *)&buf[16];
        int v130 = operator new(0x38uLL);
        v130[2] = v134[0];
        *((_BYTE *)v130 + 24) = 0;
        v130[4] = &qword_4A9200;
        *((_BYTE *)v130 + 40) = 0;
        *((_BYTE *)v130 + 48) = 0;
        *int v130 = v127;
        v130[1] = buf;
        v127[1] = v130;
        *(void *)AudioObjectPropertyAddress buf = v130;
        *(void *)&buf[16] = v129 + 2;
        int v131 = sub_F1214((uint64_t)buf);
        int v132 = v138[0];
        *int v131 = v138[0];
        v131[1] = v138;
        *(void *)(v132 + 8) = v131;
        v138[0] = (uint64_t)v131;
        ++v139;
        sub_F12DC((uint64_t)buf);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        v137[0] = 0LL;
        v137[1] = 0LL;
        char v136 = v137;
        v333[0].__pn_.__r_.__value_.__r.__words[0] = 0x7068704270617061LL;
        sub_7A22C((uint64_t)__src, (unsigned int *)v333, 2LL);
        sub_2D44EC((uint64_t **)&__p, 0x696D6466u, (uint64_t)__src);
        sub_32C8C((void *)__src[1]);
        LODWORD(v333[0].__pn_.__r_.__value_.__l.__data_) = 1886222185;
        sub_7A22C((uint64_t)__src, (unsigned int *)v333, 1LL);
        sub_2D44EC((uint64_t **)&__p, 0x696D6C70u, (uint64_t)__src);
        sub_32C8C((void *)__src[1]);
        qword_48F0B8 = 0LL;
        qword_48F0C0 = 0LL;
        qword_48F0B0 = 0LL;
        qword_48F0A8 = (uint64_t)&qword_48F0B0;
        qword_48F0C8 = 0LL;
        qword_48F0D0 = 0LL;
        qword_48F0E0 = 0LL;
        qword_48F0D8 = (uint64_t)&qword_48F0E0;
        qword_48F0F8 = 0LL;
        qword_48F0E8 = 0LL;
        qword_48F0F0 = &qword_48F0F8;
        qword_48F118 = 0LL;
        qword_48F110 = 0LL;
        qword_48F100 = 0LL;
        unk_48F108 = &qword_48F110;
        qword_48F130 = 0LL;
        qword_48F128 = 0LL;
        *(void *)&byte_48F140[8] = 0LL;
        qword_48F120 = &qword_48F128;
        LOBYTE(qword_48F138) = 0;
        BYTE4(qword_48F138) = 0;
        *(void *)&byte_48F140[16] = 0LL;
        *(void *)byte_48F140 = &byte_48F140[8];
        sub_2D202C((uint64_t)v333, (uint64_t)v142, 1668510820, 0, 0, 1, 1, 0, 0);
        sub_F17B0((uint64_t)__src, 1668505974, (uint64_t)v333);
        sub_F1878(__src[0], (int *)__src);
        sub_F16A4((void *)v148.__r_.__value_.__l.__cap_);
        sub_F16E4((void *)v147.__r_.__value_.__l.__cap_);
        sub_F1724((uint64_t *)&__src[1]);
        sub_F16A4(v335);
        sub_F16E4(v334);
        sub_F1724((uint64_t *)v333);
        sub_2D202C((uint64_t)v333, (uint64_t)v140, 1668510820, 0, 1, 0, 1, 1, 0);
        sub_F17B0((uint64_t)__src, 1668441443, (uint64_t)v333);
        sub_F1878(__src[0], (int *)__src);
        sub_F16A4((void *)v148.__r_.__value_.__l.__cap_);
        sub_F16E4((void *)v147.__r_.__value_.__l.__cap_);
        sub_F1724((uint64_t *)&__src[1]);
        sub_F16A4(v335);
        sub_F16E4(v334);
        sub_F1724((uint64_t *)v333);
        sub_2D1F40((uint64_t)v333, (uint64_t)v138, &__p, 1668510820, 0, 1, 1, 1, 0, 0);
        sub_F17B0((uint64_t)__src, 1668309362, (uint64_t)v333);
        sub_F1878(__src[0], (int *)__src);
        sub_F16A4((void *)v148.__r_.__value_.__l.__cap_);
        sub_F16E4((void *)v147.__r_.__value_.__l.__cap_);
        sub_F1724((uint64_t *)&__src[1]);
        sub_F16A4(v335);
        sub_F16E4(v334);
        sub_F1724((uint64_t *)v333);
        sub_2FCDC8((uint64_t *)__src);
        sub_52A24((uint64_t)&qword_48F0F0, (void *)__src[0], &__src[1]);
        sub_32C8C((void *)__src[1]);
        sub_F19DC();
        sub_F16A4(v137[0]);
        sub_F16E4((void *)__p.__r_.__value_.__l.__size_);
        sub_F1724(v138);
        sub_F1724(v140);
        sub_F1724(v142);
        sub_F20B8(v157);
        sub_32C8C((void *)v154);
        sub_32C8C((void *)v152);
        sub_68314(buf);
      }

      return;
    }

    goto LABEL_32;
  }

  if ((a1 - 2) < 2)
  {
    buf[0] = 0;
    uint8_t buf[4] = 0;
    buf[8] = 0;
    _BYTE buf[12] = 0;
    *(_DWORD *)&buf[16] = sub_1CC154();
    buf[20] = 1;
    int v151 = 0u;
    int v152 = 0u;
    int v153 = 0u;
    LODWORD(v154) = 0;
    BYTE4(v154) = (unsigned __int16)sub_8339C((uint64_t)@"XxnEk9uiIk5vCdbWEGt7lA") > 0x100u;
    BYTE5(v154) = 1;
    *(void *)((char *)&v154 + 6) = 0LL;
    LODWORD(v155) = 16777473;
    int v157 = 0LL;
    int v158 = 0LL;
    int v156 = &v157;
    int v159 = 0;
    int v161 = -1044381696;
    uint64_t v162 = 1;
    int v163 = -1044381696;
    uint64_t v164 = 1;
    unint64_t v165 = 0;
    unint64_t v166 = 1;
    std::string v167 = -1056964608;
    char v168 = 1;
    unint64_t v169 = -1033371648;
    unint64_t v170 = 1;
    UInt32 v171 = 0;
    uint64_t v172 = 1;
    uint64_t v173 = -1033371648;
    char v174 = 1;
    uint64_t v175 = 0;
    uint64_t v176 = 1;
    uint64_t v177 = -1044381696;
    unsigned int v178 = 1;
    unsigned int v179 = 0;
    unsigned int v180 = 1;
    uint64_t v181 = -1033371648;
    uint64_t v182 = 1;
    unint64_t v183 = 0;
    uint64_t v184 = 1;
    char v185 = -1033371648;
    uint64_t v186 = 1;
    uint64_t v187 = -1055916032;
    char v188 = 1;
    unsigned int v189 = -1033371648;
    int v190 = 1;
    int v191 = 0;
    int v192 = 1;
    size_t v193 = -1055916032;
    uint64_t v194 = 1;
    unint64_t v195 = -1033371648;
    CFTypeRef v196 = 1;
    int v197 = -1055916032;
    uint64_t v198 = 1;
    int v199 = -1033371648;
    unint64_t v200 = 1;
    unint64_t v201 = 0;
    uint64_t v202 = 1;
    uint64_t v203 = -1055916032;
    unint64_t v204 = 1;
    unint64_t v205 = -1043333120;
    uint64_t v206 = 1;
    int v207 = 0x40000000;
    int v208 = 1;
    char v209 = 16777472;
    int v210 = 0;
    int v211 = 1;
    v212 = 0;
    uint64_t v213 = 1;
    unint64_t v214 = 1103626240;
    unsigned int v215 = 1;
    int v216 = 0;
    char v217 = 1;
    int v218 = 1094713344;
    unint64_t v219 = 1;
    unint64_t v220 = 1094713344;
    int v221 = 1;
    id v222 = 1094713344;
    unsigned int v223 = 1;
    int v224 = -1061158912;
    uint64_t v225 = 1;
    id v226 = 1107296256;
    uint64_t v227 = 1;
    v228 = 1107296256;
    UInt32 v229 = 1;
    int v230 = 1092616192;
    uint64_t v231 = 1;
    unsigned int v232 = 0;
    uint64_t v233 = 1;
    unsigned int v234 = 0;
    uint64_t v235 = 1;
    uint64_t v236 = 16777472;
    v237.__r_.__value_.__s.__data_[0] = 0;
    unint64_t v240 = 0;
    LOBYTE(v241[0]) = 0;
    uint64_t v243 = 0;
    uint64_t v244 = 0;
    uint64_t v245 = 0;
    uint64_t v246 = 0;
    __int128 v247 = 0;
    LOBYTE(v248) = 0;
    CFTypeRef v249 = 0;
    LOBYTE(v250) = 0;
    int v251 = 0;
    LOBYTE(v252) = 0;
    unint64_t v253 = 0;
    LOBYTE(v254) = 0;
    char v255 = 0;
    LOBYTE(v256) = 0;
    uint64_t v257 = 0;
    LOBYTE(v258) = 0;
    UInt32 v259 = 0;
    LOBYTE(v260) = 0;
    int v261 = 0;
    LOBYTE(v262) = 0;
    int v263 = 0;
    int v264 = 0;
    uint64_t v265 = 0;
    char v266 = 0;
    std::string v267 = 0;
    LOBYTE(v268) = 0;
    __int128 v269 = 0;
    v270 = 0;
    __int16 v271 = 0;
    int v272 = 0;
    __int128 v273 = 0;
    v274 = 0;
    int v275 = 0;
    v276 = 0;
    UInt32 v277 = 0;
    int v278 = 0;
    unsigned int v279 = 0;
    int v280 = 0;
    int v281 = 0;
    uint64_t v282 = 1;
    UInt32 v283 = 0;
    int v284 = 0;
    LOBYTE(v285) = 0;
    uint64_t v286 = 0;
    LOBYTE(v287) = 0;
    int v288 = 0;
    LOBYTE(v289) = 0;
    int v290 = 0;
    LOBYTE(v291) = 0;
    std::string::size_type v292 = 0;
    int v293 = 0;
    LOBYTE(v294) = 0;
    UInt32 v295 = 0;
    LOBYTE(v296) = 0;
    uint64_t v297 = 0;
    uint64_t v298 = 0;
    int v299 = 0;
    LOBYTE(v300) = 0;
    UInt32 v301 = 0;
    LOBYTE(v302) = 0;
    unsigned int v303 = 0;
    LOBYTE(v304) = 0;
    int v305 = 0;
    LOBYTE(v306) = 0;
    UInt32 v307 = 0;
    LOBYTE(v308) = 0;
    int v309 = 0;
    LOBYTE(v310) = 0;
    int v311 = 0;
    int v312 = 0;
    UInt32 v313 = 0;
    int v314 = 0;
    uint64_t v315 = 0;
    LOBYTE(v316) = 0;
    id v318 = 0;
    v319.__r_.__value_.__s.__data_[0] = 0;
    int v320 = 0;
    v321.__r_.__value_.__s.__data_[0] = 0;
    v322 = 0;
    v323.__r_.__value_.__s.__data_[0] = 0;
    v324 = 0;
    UInt32 v325 = 256;
    LOBYTE(v326) = 0;
    unsigned int v327 = 0;
    int v328 = 0;
    int v329 = 0;
    uint64_t v330 = 0;
    UInt32 v331 = 0;
    int v332 = 0;
    int v160 = 1;
    HIWORD(v154) = 257;
    sub_1CA59C(__src, 3);
    if (v318)
    {
      if (SHIBYTE(v317) < 0) {
        operator delete((void *)v316);
      }
      uint64_t v316 = *(_OWORD *)__src;
      int v317 = v145;
      HIBYTE(v145) = 0;
      LOBYTE(__src[0]) = 0;
    }

    else
    {
      uint64_t v316 = *(_OWORD *)__src;
      int v317 = v145;
      __src[1] = 0LL;
      int v145 = 0LL;
      __src[0] = 0LL;
      id v318 = 1;
    }

    if (!v251) {
      int v251 = 1;
    }
    uint64_t v250 = 2;
    if (!v253) {
      unint64_t v253 = 1;
    }
    uint64_t v252 = 8;
    if (!v257) {
      uint64_t v257 = 1;
    }
    int v256 = 8;
    if (!v295) {
      UInt32 v295 = 1;
    }
    v294 = 11;
    if (!v297) {
      uint64_t v297 = 1;
    }
    int v296 = 26;
    if (!v301) {
      UInt32 v301 = 1;
    }
    uint64_t v300 = 11;
    if (!v303) {
      unsigned int v303 = 1;
    }
    int v302 = 1;
    if (!v327) {
      unsigned int v327 = 1;
    }
    int v326 = 512;
    sub_320554((uint64_t)buf);
    goto LABEL_140;
  }

  if (a1 == 4)
  {
    buf[0] = 0;
    uint8_t buf[4] = 0;
    buf[8] = 0;
    _BYTE buf[12] = 0;
    *(_DWORD *)&buf[16] = sub_1CC154();
    buf[20] = 1;
    int v151 = 0u;
    int v152 = 0u;
    int v153 = 0u;
    LODWORD(v154) = 0;
    BYTE4(v154) = (unsigned __int16)sub_8339C((uint64_t)@"XxnEk9uiIk5vCdbWEGt7lA") > 0x100u;
    BYTE5(v154) = 1;
    *(void *)((char *)&v154 + 6) = 0LL;
    LODWORD(v155) = 16777473;
    int v157 = 0LL;
    int v158 = 0LL;
    int v156 = &v157;
    int v159 = 0;
    int v160 = 0;
    int v161 = -1044381696;
    uint64_t v162 = 1;
    int v163 = -1044381696;
    uint64_t v164 = 1;
    unint64_t v165 = 0;
    unint64_t v166 = 1;
    std::string v167 = -1056964608;
    char v168 = 1;
    unint64_t v169 = -1033371648;
    unint64_t v170 = 1;
    UInt32 v171 = 0;
    uint64_t v172 = 1;
    uint64_t v173 = -1033371648;
    char v174 = 1;
    uint64_t v175 = 0;
    uint64_t v176 = 1;
    uint64_t v177 = -1044381696;
    unsigned int v178 = 1;
    unsigned int v179 = 0;
    unsigned int v180 = 1;
    uint64_t v181 = -1033371648;
    uint64_t v182 = 1;
    unint64_t v183 = 0;
    uint64_t v184 = 1;
    char v185 = -1033371648;
    uint64_t v186 = 1;
    uint64_t v187 = -1055916032;
    char v188 = 1;
    unsigned int v189 = -1033371648;
    int v190 = 1;
    int v191 = 0;
    int v192 = 1;
    size_t v193 = -1055916032;
    uint64_t v194 = 1;
    unint64_t v195 = -1033371648;
    CFTypeRef v196 = 1;
    int v197 = -1055916032;
    uint64_t v198 = 1;
    int v199 = -1033371648;
    unint64_t v200 = 1;
    unint64_t v201 = 0;
    uint64_t v202 = 1;
    uint64_t v203 = -1055916032;
    unint64_t v204 = 1;
    unint64_t v205 = -1043333120;
    uint64_t v206 = 1;
    int v207 = 0x40000000;
    int v208 = 1;
    char v209 = 16777472;
    int v210 = 0;
    int v211 = 1;
    v212 = 0;
    uint64_t v213 = 1;
    unint64_t v214 = 1103626240;
    unsigned int v215 = 1;
    int v216 = 0;
    char v217 = 1;
    int v218 = 1094713344;
    unint64_t v219 = 1;
    unint64_t v220 = 1094713344;
    int v221 = 1;
    id v222 = 1094713344;
    unsigned int v223 = 1;
    int v224 = -1061158912;
    uint64_t v225 = 1;
    id v226 = 1107296256;
    uint64_t v227 = 1;
    v228 = 1107296256;
    UInt32 v229 = 1;
    int v230 = 1092616192;
    uint64_t v231 = 1;
    unsigned int v232 = 0;
    uint64_t v233 = 1;
    unsigned int v234 = 0;
    uint64_t v235 = 1;
    uint64_t v236 = 16777472;
    v237.__r_.__value_.__s.__data_[0] = 0;
    unint64_t v240 = 0;
    LOBYTE(v241[0]) = 0;
    uint64_t v243 = 0;
    uint64_t v244 = 0;
    uint64_t v245 = 0;
    uint64_t v246 = 0;
    __int128 v247 = 0;
    LOBYTE(v248) = 0;
    CFTypeRef v249 = 0;
    LOBYTE(v250) = 0;
    int v251 = 0;
    LOBYTE(v252) = 0;
    unint64_t v253 = 0;
    LOBYTE(v254) = 0;
    char v255 = 0;
    LOBYTE(v256) = 0;
    uint64_t v257 = 0;
    LOBYTE(v258) = 0;
    UInt32 v259 = 0;
    LOBYTE(v260) = 0;
    int v261 = 0;
    LOBYTE(v262) = 0;
    int v263 = 0;
    int v264 = 0;
    uint64_t v265 = 0;
    char v266 = 0;
    std::string v267 = 0;
    LOBYTE(v268) = 0;
    __int128 v269 = 0;
    v270 = 0;
    __int16 v271 = 0;
    int v272 = 0;
    __int128 v273 = 0;
    v274 = 0;
    int v275 = 0;
    v276 = 0;
    UInt32 v277 = 0;
    int v278 = 0;
    unsigned int v279 = 0;
    int v280 = 0;
    int v281 = 0;
    uint64_t v282 = 1;
    UInt32 v283 = 0;
    int v284 = 0;
    LOBYTE(v285) = 0;
    uint64_t v286 = 0;
    LOBYTE(v287) = 0;
    int v288 = 0;
    LOBYTE(v289) = 0;
    int v290 = 0;
    LOBYTE(v291) = 0;
    std::string::size_type v292 = 0;
    int v293 = 0;
    LOBYTE(v294) = 0;
    UInt32 v295 = 0;
    LOBYTE(v296) = 0;
    uint64_t v297 = 0;
    uint64_t v298 = 0;
    int v299 = 0;
    LOBYTE(v300) = 0;
    UInt32 v301 = 0;
    LOBYTE(v302) = 0;
    unsigned int v303 = 0;
    LOBYTE(v304) = 0;
    int v305 = 0;
    LOBYTE(v306) = 0;
    UInt32 v307 = 0;
    LOBYTE(v308) = 0;
    int v309 = 0;
    LOBYTE(v310) = 0;
    int v311 = 0;
    int v312 = 0;
    UInt32 v313 = 0;
    int v314 = 0;
    uint64_t v315 = 0;
    LOBYTE(v316) = 0;
    id v318 = 0;
    v319.__r_.__value_.__s.__data_[0] = 0;
    int v320 = 0;
    v321.__r_.__value_.__s.__data_[0] = 0;
    v322 = 0;
    v323.__r_.__value_.__s.__data_[0] = 0;
    v324 = 0;
    UInt32 v325 = 256;
    LOBYTE(v326) = 0;
    unsigned int v327 = 0;
    int v328 = 0;
    int v329 = 0;
    uint64_t v330 = 0;
    UInt32 v331 = 0;
    int v332 = 0;
    HIWORD(v154) = 256;
    sub_1CA59C(__src, 4);
    if (v318)
    {
      if (SHIBYTE(v317) < 0) {
        operator delete((void *)v316);
      }
      uint64_t v316 = *(_OWORD *)__src;
      int v317 = v145;
      HIBYTE(v145) = 0;
      LOBYTE(__src[0]) = 0;
    }

    else
    {
      uint64_t v316 = *(_OWORD *)__src;
      int v317 = v145;
      __src[1] = 0LL;
      int v145 = 0LL;
      __src[0] = 0LL;
      id v318 = 1;
    }

    if (!v251) {
      int v251 = 1;
    }
    uint64_t v250 = 2;
    if (!v253) {
      unint64_t v253 = 1;
    }
    uint64_t v252 = 2;
    if (!v257) {
      uint64_t v257 = 1;
    }
    int v256 = 1;
    if (!v295) {
      UInt32 v295 = 1;
    }
    v294 = 6;
    if (!v297) {
      uint64_t v297 = 1;
    }
    int v296 = 18;
    if (!v301) {
      UInt32 v301 = 1;
    }
    uint64_t v300 = 6;
    if (!v303) {
      unsigned int v303 = 1;
    }
    int v302 = 1;
    HIWORD(v325) = 257;
    if (!v327) {
      unsigned int v327 = 1;
    }
    int v326 = 256;
    sub_320554((uint64_t)buf);
    goto LABEL_140;
  }

  if (a1 != 5) {
    goto LABEL_20;
  }
LABEL_11:
  buf[0] = 0;
  uint8_t buf[4] = 0;
  buf[8] = 0;
  _BYTE buf[12] = 0;
  *(_DWORD *)&buf[16] = sub_1CC154();
  buf[20] = 1;
  int v151 = 0u;
  int v152 = 0u;
  int v153 = 0u;
  LODWORD(v154) = 0;
  BYTE4(v154) = (unsigned __int16)sub_8339C((uint64_t)@"XxnEk9uiIk5vCdbWEGt7lA") > 0x100u;
  BYTE5(v154) = 1;
  *(void *)((char *)&v154 + 6) = 0LL;
  HIWORD(v154) = 0;
  LODWORD(v155) = 16777473;
  int v157 = 0LL;
  int v158 = 0LL;
  int v156 = &v157;
  int v159 = 0;
  int v160 = 0;
  int v161 = -1044381696;
  uint64_t v162 = 1;
  int v163 = -1044381696;
  uint64_t v164 = 1;
  unint64_t v165 = 0;
  unint64_t v166 = 1;
  std::string v167 = -1056964608;
  char v168 = 1;
  unint64_t v169 = -1033371648;
  unint64_t v170 = 1;
  UInt32 v171 = 0;
  uint64_t v172 = 1;
  uint64_t v173 = -1033371648;
  char v174 = 1;
  uint64_t v175 = 0;
  uint64_t v176 = 1;
  uint64_t v177 = -1044381696;
  unsigned int v178 = 1;
  unsigned int v179 = 0;
  unsigned int v180 = 1;
  uint64_t v181 = -1033371648;
  uint64_t v182 = 1;
  unint64_t v183 = 0;
  uint64_t v184 = 1;
  char v185 = -1033371648;
  uint64_t v186 = 1;
  uint64_t v187 = -1055916032;
  char v188 = 1;
  unsigned int v189 = -1033371648;
  int v190 = 1;
  int v191 = 0;
  int v192 = 1;
  size_t v193 = -1055916032;
  uint64_t v194 = 1;
  unint64_t v195 = -1033371648;
  CFTypeRef v196 = 1;
  int v197 = -1055916032;
  uint64_t v198 = 1;
  int v199 = -1033371648;
  unint64_t v200 = 1;
  unint64_t v201 = 0;
  uint64_t v202 = 1;
  uint64_t v203 = -1055916032;
  unint64_t v204 = 1;
  unint64_t v205 = -1043333120;
  uint64_t v206 = 1;
  int v207 = 0x40000000;
  int v208 = 1;
  char v209 = 16777472;
  int v210 = 0;
  int v211 = 1;
  v212 = 0;
  uint64_t v213 = 1;
  unint64_t v214 = 1103626240;
  unsigned int v215 = 1;
  int v216 = 0;
  char v217 = 1;
  int v218 = 1094713344;
  unint64_t v219 = 1;
  unint64_t v220 = 1094713344;
  int v221 = 1;
  id v222 = 1094713344;
  unsigned int v223 = 1;
  int v224 = -1061158912;
  uint64_t v225 = 1;
  id v226 = 1107296256;
  uint64_t v227 = 1;
  v228 = 1107296256;
  UInt32 v229 = 1;
  int v230 = 1092616192;
  uint64_t v231 = 1;
  unsigned int v232 = 0;
  uint64_t v233 = 1;
  unsigned int v234 = 0;
  uint64_t v235 = 1;
  uint64_t v236 = 16777472;
  v237.__r_.__value_.__s.__data_[0] = 0;
  unint64_t v240 = 0;
  LOBYTE(v241[0]) = 0;
  uint64_t v243 = 0;
  uint64_t v244 = 0;
  uint64_t v245 = 0;
  uint64_t v246 = 0;
  __int128 v247 = 0;
  LOBYTE(v248) = 0;
  CFTypeRef v249 = 0;
  LOBYTE(v250) = 0;
  int v251 = 0;
  LOBYTE(v252) = 0;
  unint64_t v253 = 0;
  LOBYTE(v254) = 0;
  char v255 = 0;
  LOBYTE(v256) = 0;
  uint64_t v257 = 0;
  LOBYTE(v258) = 0;
  UInt32 v259 = 0;
  LOBYTE(v260) = 0;
  int v261 = 0;
  LOBYTE(v262) = 0;
  int v263 = 0;
  int v264 = 0;
  uint64_t v265 = 0;
  char v266 = 0;
  std::string v267 = 0;
  LOBYTE(v268) = 0;
  __int128 v269 = 0;
  v270 = 0;
  __int16 v271 = 0;
  int v272 = 0;
  __int128 v273 = 0;
  v274 = 0;
  int v275 = 0;
  v276 = 0;
  UInt32 v277 = 0;
  int v278 = 0;
  unsigned int v279 = 0;
  int v280 = 0;
  int v281 = 0;
  uint64_t v282 = 1;
  UInt32 v283 = 0;
  int v284 = 0;
  LOBYTE(v285) = 0;
  uint64_t v286 = 0;
  LOBYTE(v287) = 0;
  int v288 = 0;
  LOBYTE(v289) = 0;
  int v290 = 0;
  LOBYTE(v291) = 0;
  std::string::size_type v292 = 0;
  int v293 = 0;
  LOBYTE(v294) = 0;
  UInt32 v295 = 0;
  LOBYTE(v296) = 0;
  uint64_t v297 = 0;
  uint64_t v298 = 0;
  int v299 = 0;
  LOBYTE(v300) = 0;
  UInt32 v301 = 0;
  LOBYTE(v302) = 0;
  unsigned int v303 = 0;
  LOBYTE(v304) = 0;
  int v305 = 0;
  LOBYTE(v306) = 0;
  UInt32 v307 = 0;
  LOBYTE(v308) = 0;
  int v309 = 0;
  LOBYTE(v310) = 0;
  int v311 = 0;
  int v312 = 0;
  UInt32 v313 = 0;
  int v314 = 0;
  uint64_t v315 = 0;
  LOBYTE(v316) = 0;
  id v318 = 0;
  v319.__r_.__value_.__s.__data_[0] = 0;
  int v320 = 0;
  v321.__r_.__value_.__s.__data_[0] = 0;
  v322 = 0;
  v323.__r_.__value_.__s.__data_[0] = 0;
  v324 = 0;
  UInt32 v325 = 256;
  LOBYTE(v326) = 0;
  unsigned int v327 = 0;
  int v328 = 0;
  int v329 = 0;
  uint64_t v330 = 0;
  UInt32 v331 = 0;
  int v332 = 0;
  sub_7D084(&__p, "graph_configurations.plist");
  sub_392B64(v333, &__p);
  sub_38FDAC((uint64_t)__src, (uint64_t)v333);
  if (v240)
  {
    std::string::operator=(&v237, &v147);
    std::string::operator=(&v238, &v148);
    std::string::operator=(&v239, &v149);
  }

  else
  {
    else {
      uint64_t v237 = v147;
    }
    else {
      uint64_t v238 = v148;
    }
    else {
      uint64_t v239 = v149;
    }
    unint64_t v240 = 1;
  }

  if (v243)
  {
    uint64_t v242 = v146;
    sub_84700(v241, v145);
  }

  else
  {
    sub_84854((uint64_t)v241, (uint64_t)__src);
    uint64_t v243 = 1;
  }

  sub_83134(v145);
  int v133 = __src[0];
  __src[0] = 0LL;
  if (v133) {
    operator delete(v133);
  }
  sub_320554((uint64_t)buf);
LABEL_140:
  sub_82FFC((uint64_t)&v237);
  sub_32C8C(v157);
  if (*((void *)&v152 + 1))
  {
    *(void *)&int v153 = *((void *)&v152 + 1);
    operator delete(*((void **)&v152 + 1));
  }

  if ((void)v151)
  {
    *((void *)&v151 + 1) = v151;
    operator delete((void *)v151);
  }

  sub_1AB114((uint64_t)&v45, (int *)a2);
  AudioObjectID v17 = sub_138E8(17);
  uint64_t v18 = sub_138E8(28);
  int v19 = 0;
  int v20 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v21 = *(void *)(v17 + 8);
  while (1)
  {
    uint64_t v22 = *(int *)&buf[4 * v20];
    std::string::size_type v23 = v19;
    if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
      break;
    }
    int v19 = 1;
    int v20 = 1LL;
    if ((v23 & 1) != 0) {
      goto LABEL_38;
    }
  }

  if ((v21 & v22) == 0) {
    AudioObjectID v17 = v18;
  }
LABEL_38:
  __int16 v24 = *(os_log_s **)v17;
  if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
    sub_48E98(v46, theString[0]);
    uint64_t v25 = v47;
    __int16 v26 = (void **)v46[0];
    sub_2CA1C(&__p, v45.mSelector);
    int v27 = v46;
    if (v25 < 0) {
      int v27 = v26;
    }
    if (v43 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    uint64_t v49 = 1024;
    uint64_t v50 = 631;
    __int128 v51 = 2080;
    __int16 v52 = (const char *)v27;
    int v53 = 2080;
    v54[0] = p_p;
    _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Bluetooth audio device with UID %s: Getting Bluetooth property %s.",  buf,  0x26u);
    if (v43 < 0) {
      operator delete(__p);
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    sub_19DFC((uint64_t)theString);
  }

  sub_232A4(a1, &v45, a3, a4, a5, (float *)a6);
}

  __int16 v35 = operator new(0x20uLL);
  uint64_t v36 = (uint64_t *)(v24 + 24LL * a4);
  v35[2] = v26;
  v35[3] = v30;
  v35[1] = v36;
  uint64_t v37 = *v36;
  os_log_t *v35 = *v36;
  *(void *)(v37 + 8) = v35;
  *uint64_t v36 = (uint64_t)v35;
  ++v36[2];
  if ((v22 & 1) != 0)
  {
    sub_10AB90(buf, v73, (uint64_t)v74, a3);
    uint64_t v47 = sub_1D372C(v8, (uint64_t)buf);
    if (*(void *)&buf[16])
    {
      *(void *)&_BYTE buf[24] = *(void *)&buf[16];
      operator delete(*(void **)&buf[16]);
    }

    char v48 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v49 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        uint64_t v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }

    if (!v47)
    {
      uint64_t v66 = (os_log_t *)sub_138E8(13);
      uint64_t v67 = *v66;
      if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
      {
        uint64_t v68 = v73;
        sub_2CA1C(v71, *(unsigned int *)(v73 + 144));
        uint64_t v69 = v72 >= 0 ? v71 : (void **)v71[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 256;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v68;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = v69;
        _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to insert an entry for Port %p (%s) into mAssociatedInputSubPorts.",  buf,  0x26u);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
      }

      uint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v70,  "Unable to insert an entry for Port %p (%s) into mAssociatedInputSubPorts.");
    }
  }

  else
  {
    sub_10AB90(buf, v73, (uint64_t)v74, a3);
    char v38 = sub_1D372C(v13, (uint64_t)buf);
    if (*(void *)&buf[16])
    {
      *(void *)&_BYTE buf[24] = *(void *)&buf[16];
      operator delete(*(void **)&buf[16]);
    }

    uint64_t v39 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      char v40 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        __int128 v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

    if (!v38)
    {
      uint64_t v42 = (os_log_t *)sub_138E8(13);
      __int16 v43 = *v42;
      if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        int v44 = v73;
        sub_2CA1C(v71, *(unsigned int *)(v73 + 144));
        if (v72 >= 0) {
          __int16 v45 = v71;
        }
        else {
          __int16 v45 = (void **)v71[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 263;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v44;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = v45;
        _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to insert an entry for Port %p (%s) into mAssociatedOutputSubPorts.",  buf,  0x26u);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
      }

      uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v46,  "Unable to insert an entry for Port %p (%s) into mAssociatedOutputSubPorts.");
    }
  }

  __int128 v51 = v74;
  if (v74)
  {
    __int16 v52 = (unint64_t *)&v74->__shared_owners_;
    do
      int v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

      sub_1BB88((uint64_t *)buf);
      if (v10) {
        (*(void (**)(uint64_t *))(qword_49CF68 + 24))(&qword_49CF68);
      }
    }

    else
    {
      unsigned int v16 = v13;
      *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = sub_2EBD68;
      uint64_t v18 = &unk_47C670;
      int v19 = &v16;
      dispatch_sync(v9, buf);
    }

    if (v8)
    {
      if (v8[8]) {
        (*(void (**)(void))(**(void **)v8 + 16LL))(*(void *)v8);
      }
      operator delete(v8);
    }

    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v14 + 16LL))(v14);
    }
  }

      if (v17++ == v16) {
        return 0LL;
      }
    }

    __int16 v28 = 0LL;
    __int16 v29 = v49;
    while (1)
    {
      int v30 = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v28);
      if (v30)
      {
        __int16 v31 = v30;
        int v32 = CFDictionaryGetTypeID();
        if (v32 == CFGetTypeID(v31))
        {
          __int16 v33 = (const __CFDictionary *)CFDictionaryGetValue(v31, v18);
          if (v33)
          {
            uint64_t v34 = v33;
            __int16 v35 = v18;
            uint64_t v36 = CFDictionaryGetTypeID();
            if (v36 == CFGetTypeID(v34))
            {
              uint64_t v37 = (const __CFNumber *)CFDictionaryGetValue(v34, @"manufacturer");
              uint64_t v18 = v35;
              if (sub_33F640(v37, &v52))
              {
                char v38 = (const __CFNumber *)CFDictionaryGetValue(v34, @"type");
                if (sub_33F640(v38, v51))
                {
                  uint64_t v39 = (const __CFNumber *)CFDictionaryGetValue(v34, @"subtype");
                  if (sub_33F640(v39, &v54) && v52 == 1634758764 && v51[0] == 1635083896 && v54 == v48)
                  {
                    if (!v29)
                    {
                      __int128 v41 = CFDictionaryGetValue(v31, @"aupreset");
                      if (v41)
                      {
                        uint64_t v42 = CFDictionaryGetTypeID();
                        if (v42 != CFGetTypeID(v41)) {
                          __int128 v41 = 0LL;
                        }
                      }

                      __int16 v43 = (const __CFNumber *)CFDictionaryGetValue(v31, @"bypass");
                      int v44 = sub_33F640(v43, &v52);
                      __int16 v45 = v52;
                      if (!v44) {
                        __int16 v45 = 0;
                      }
                      unint64_t *v46 = v45;
                      if (v41)
                      {
                        sub_2DC034((uint64_t)v51, v41);
                        __int16 v52 = 1685086576;
                        sub_2DC450((uint64_t)v53, (uint64_t)v51);
                        sub_148DB8(v47, v52, &v52);
                        sub_2DBF5C((uint64_t)v53);
                        sub_2DBF5C((uint64_t)v51);
                        return &dword_0 + 1;
                      }

                      return 0LL;
                    }

                    --v29;
                  }
                }
              }
            }

            else
            {
              uint64_t v18 = v35;
            }
          }
        }
      }

      if (v50 == ++v28) {
        goto LABEL_32;
      }
    }
  }

  return result;
}

      unsigned int v16 = 0;
    }

void sub_33200()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48F158);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48F158))
    {
      int v1 = sub_753A8();
      sub_170B3C(v1, &v2);
      __cxa_guard_release(&qword_48F158);
    }
  }

void sub_33264(_Unwind_Exception *a1)
{
}

unint64_t sub_3327C(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 520;
  uint64_t v3 = 520LL;
  if (a2)
  {
    uint64_t v3 = 544LL;
    uint64_t v2 = a1 + 544;
  }

  uint64_t v4 = *(uint64_t **)(a1 + v3);
  unsigned int v5 = *(uint64_t **)(v2 + 8);
  if (v4 == v5)
  {
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    LOBYTE(v8) = 0;
    LOBYTE(v9) = 0;
  }

  else
  {
    while (1)
    {
      unint64_t v8 = *(void *)(*v4 + 432);
      if ((v8 & 0xFF00000000LL) != 0) {
        break;
      }
      v4 += 2;
      if (v4 == v5)
      {
        LOBYTE(v9) = 0;
        unsigned int v10 = v8 >> 8;
        unint64_t v11 = v8 >> 40;
        LOBYTE(v8) = 0;
        return (v11 << 40) | ((unint64_t)v9 << 32) | v8 | (v10 << 8);
      }
    }

    unsigned int v10 = v8 >> 8;
    unint64_t v11 = v8 >> 40;
    unint64_t v9 = HIDWORD(v8);
    uint64_t v12 = (os_log_t *)sub_138E8(19);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 268);
      sub_33464(&__p, (unsigned int *)&v18);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v15 = "Input";
      uint64_t v16 = *v4;
      if (a2) {
        uint64_t v15 = "Output";
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      uint64_t v21 = "AggregateDevice_CommonBase.cpp";
      __int16 v22 = 1024;
      int v23 = 3195;
      __int16 v24 = 1024;
      int v25 = v8;
      __int16 v26 = 2080;
      int v27 = p_p;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = v16;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "%25s:%-5d Found fixed block size %u for VAD %s and direction %s on virtual stream %p",  buf,  0x36u);
    }
  }

  return (v11 << 40) | ((unint64_t)v9 << 32) | v8 | (v10 << 8);
}

std::string *sub_33464(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[", 1uLL);
  sub_2CA1C(&__p, *a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (a2[1])
  {
    std::string::append(a1, "_", 1uLL);
    std::to_string(&__p, a2[1]);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v6 = &__p;
    }
    else {
      unsigned int v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v6, v7);
  }

  return std::string::append(a1, "]", 1uLL);
}

void sub_3355C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3359C(uint64_t a1)
{
  for (uint64_t i = v11; &v10 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    uint64_t v3 = (std::__shared_weak_count *)i[3];
    unint64_t v9 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    if (v9)
    {
      unsigned int v6 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

  sub_1BB88(&v10);
  return 0LL;
}

void sub_336A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_7A768((uint64_t)va);
  sub_1BB88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_336C8(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  unint64_t v7 = pthread_self();
  unint64_t v8 = (_opaque_pthread_t *)atomic_load(qword_49CF78);
  if (pthread_equal(v7, v8))
  {
    unint64_t v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ListenerRelayManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 129;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: relayListMutex already held be current thread.",  buf,  0x12u);
      }
    }
  }

  sub_33A2C(&v22, a4);
  if (v22)
  {
    if (*((_DWORD *)v22 + 14))
    {
      sub_33AE4((uint64_t)v22, a2, (uint64_t)a3);
    }

    else
    {
      uint64_t v11 = *v22;
      uint64_t v12 = v22[3];
      uint64_t v32 = 0LL;
      uint64_t v33 = v12;
      int v34 = *((_DWORD *)v22 + 8);
      __int16 v30 = 0LL;
      uint64_t v31 = 0LL;
      sub_7DBCC(&v30, a3, (uint64_t)a3 + 12 * a2, a2);
      uint64_t v24 = v11;
      int v25 = 0LL;
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v13 = v30;
      sub_2EAFC8(&v25, v30, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v30) >> 2));
      uint64_t v28 = v33;
      int v29 = v34;
      uint64_t v14 = (dispatch_queue_s *)sub_869B4();
      uint64_t v15 = v25;
      *(void *)AudioObjectPropertyAddress buf = v24;
      *(_OWORD *)&buf[8] = 0uLL;
      uint64_t v37 = 0LL;
      sub_2EAFC8(&buf[8], v25, v26, 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v25) >> 2));
      uint64_t v38 = v33;
      int v39 = v34;
      uint64_t v16 = operator new(0x30uLL);
      AudioObjectID v17 = *(void **)&buf[8];
      *uint64_t v16 = *(void *)buf;
      v16[1] = 0LL;
      void v16[2] = 0LL;
      v16[3] = 0LL;
      sub_2EAFC8( v16 + 1,  v17,  *(uint64_t *)&buf[16],  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[16] - (void)v17) >> 2));
      v16[4] = v33;
      *((_DWORD *)v16 + 10) = v34;
      __int16 v35 = 0LL;
      dispatch_async_f(v14, v16, (dispatch_function_t)sub_2EB040);
      sub_91C10(&v35);
      if (v17) {
        operator delete(v17);
      }
      if (v15) {
        operator delete(v15);
      }
      if (v13) {
        operator delete(v13);
      }
    }
  }

  uint64_t v18 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return 0LL;
}

void sub_3396C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (v12) {
    operator delete(v12);
  }
  sub_7A768((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_339C0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49CFC8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_49CFC8))
    {
      sub_2EB454();
      __cxa_guard_release(&qword_49CFC8);
    }
  }

void sub_33A10(_Unwind_Exception *a1)
{
}

uint64_t sub_33A2C(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(qword_49CF68 + 16))(&qword_49CF68);
  for (uint64_t i = (uint64_t *)qword_49CF58; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == &qword_49CF50)
    {
      *a1 = 0LL;
      a1[1] = 0LL;
      goto LABEL_7;
    }

    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(i[2] + 60));
    if ((v6 & 1) == 0)
    {
      unint64_t v7 = (void *)i[2];
      if (*v7 == a2) {
        break;
      }
    }
  }

  uint64_t v8 = i[3];
  *a1 = v7;
  a1[1] = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

LABEL_7:
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void))(qword_49CF68 + 24))();
  }
  return result;
}

  unsigned __int8 v6 = 1;
LABEL_9:
  unint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 224) + 32LL))(*(void *)(a1 + 224));
  uint64_t v8 = sub_138E8(18);
  unint64_t v9 = sub_138E8(38);
  unint64_t v10 = 0;
  uint64_t v11 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v12 = *(void *)(v8 + 8);
  do
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    uint64_t v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0))
    {
      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
      if ((*(void *)(v8 + 8) & 1) != 0) {
        goto LABEL_17;
      }
      goto LABEL_33;
    }

    unint64_t v10 = 1;
    uint64_t v11 = 1LL;
  }

  while ((v14 & 1) == 0);
  if ((v12 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_17:
  uint64_t v15 = *(os_log_s **)v8;
  if (!v15 || !os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_33;
  }
  if (v7) {
    uint64_t v16 = "muted";
  }
  else {
    uint64_t v16 = "unmuted";
  }
  sub_7D084(&v74, v16);
  AudioObjectID v17 = v76;
  uint64_t v18 = (void **)v74;
  if (v6) {
    int v19 = "muted";
  }
  else {
    int v19 = "unmuted";
  }
  sub_7D084(__p, v19);
  *(double *)&unint64_t v20 = COERCE_DOUBLE(&v74);
  if (v17 < 0) {
    unint64_t v20 = v18;
  }
  if (v73 >= 0) {
    uint64_t v21 = __p;
  }
  else {
    uint64_t v21 = (void **)__p[0];
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
  *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
  unint64_t v78 = 1024;
  uint64_t v79 = 576;
  __int16 v80 = 2080;
  uint64_t v81 = *(double *)&v20;
  uint64_t v82 = 2080;
  uint64_t v83 = v21;
  _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d MuteStateModel: currentState = %s, nextState =%s",  buf,  0x26u);
  if (v73 < 0) {
    operator delete(__p[0]);
  }
  if ((v76 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v6 & 1) != 0) {
      goto LABEL_44;
    }
    goto LABEL_34;
  }

  operator delete(v74);
  if ((v6 & 1) != 0) {
    goto LABEL_44;
  }
LABEL_34:
  __int16 v22 = sub_138E8(18);
  int v23 = sub_138E8(38);
  uint64_t v24 = 0;
  int v25 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v26 = *(void *)(v22 + 8);
  while (1)
  {
    uint64_t v27 = *(int *)&buf[4 * v25];
    uint64_t v28 = v24;
    if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
      break;
    }
    uint64_t v24 = 1;
    int v25 = 1LL;
    if ((v28 & 1) != 0) {
      goto LABEL_40;
    }
  }

  if ((v26 & v27) == 0) {
    __int16 v22 = v23;
  }
LABEL_40:
  int v29 = *(os_log_s **)v22;
  if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v30 = *(unsigned __int8 *)(a1 + 201);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    unint64_t v78 = 1024;
    uint64_t v79 = 582;
    __int16 v80 = 1024;
    LODWORD(v81) = v30;
    _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Unmuting (explicitly unmuted: %u)", buf, 0x18u);
  }

  (*(void (**)(void))(**(void **)(a1 + 224) + 24LL))(*(void *)(a1 + 224));
LABEL_44:
  if (!*(void *)(a1 + 208))
  {
    unint64_t v74 = 0LL;
    uint64_t v75 = 0LL;
    uint64_t v38 = *(std::__shared_weak_count **)(a1 + 184);
    if (v38)
    {
      int v39 = std::__shared_weak_count::lock(v38);
      uint64_t v75 = v39;
      if (v39)
      {
        char v40 = *(void **)(a1 + 176);
        unint64_t v74 = v40;
        if (v40)
        {
          __int128 v41 = (*(uint64_t (**)(void *))(*(void *)v40 + 136LL))(v40);
          if (v41 == 1935895666) {
            uint64_t v4 = sub_757A4(v2, v4);
          }
          uint64_t v42 = sub_138E8(18);
          __int16 v43 = sub_138E8(38);
          int v44 = 0;
          __int16 v45 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v46 = *(void *)(v42 + 8);
          while (1)
          {
            uint64_t v47 = *(int *)&buf[4 * v45];
            char v48 = v44;
            if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
              break;
            }
            int v44 = 1;
            __int16 v45 = 1LL;
            if ((v48 & 1) != 0) {
              goto LABEL_95;
            }
          }

          if ((v46 & v47) == 0) {
            uint64_t v42 = v43;
          }
LABEL_95:
          uint64_t v68 = *(os_log_s **)v42;
          if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v69 = "dB";
            *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
            unint64_t v78 = 1024;
            uint64_t v79 = 522;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            if (v41 == 1935895666) {
              uint64_t v69 = "scalar";
            }
            __int16 v80 = 2048;
            uint64_t v81 = v4;
            uint64_t v82 = 2080;
            uint64_t v83 = (void *)v69;
            _os_log_impl(&dword_0, v68, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     SW Volume: %f %s", buf, 0x26u);
          }

          if (v4 != *(float *)(a1 + 196) || !*(_BYTE *)(a1 + 200))
          {
            (*(void (**)(void *, float))(*(void *)v40 + 16LL))(v40, v4);
            *(float *)(a1 + 196) = v4;
            *(_BYTE *)(a1 + 200) = 1;
          }

          goto LABEL_103;
        }
      }
    }

    else
    {
      int v39 = 0LL;
    }

    uint64_t v66 = (os_log_t *)sub_138E8(13);
    uint64_t v67 = *v66;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      unint64_t v78 = 1024;
      uint64_t v79 = 534;
      _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: software volume is required but we have a NULL software volume command",  buf,  0x12u);
    }

  uint64_t result = (void *)a1[6];
  if (result == a1 + 3)
  {
    unsigned __int8 v6 = 4LL;
    uint64_t result = a1 + 3;
  }

  else
  {
    if (!result) {
      return result;
    }
    unsigned __int8 v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

  uint64_t v4 = 1;
LABEL_9:
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 336) + 32LL))(*(void *)(a1 + 336));
  unsigned __int8 v6 = sub_138E8(18);
  unint64_t v7 = sub_138E8(38);
  uint64_t v8 = 0;
  unint64_t v9 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  unint64_t v10 = *(void *)(v6 + 8);
  do
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    uint64_t v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0))
    {
      if ((v10 & v11) == 0) {
        unsigned __int8 v6 = v7;
      }
      if ((*(void *)(v6 + 8) & 1) != 0) {
        goto LABEL_17;
      }
      goto LABEL_37;
    }

    uint64_t v8 = 1;
    unint64_t v9 = 1LL;
  }

  while ((v12 & 1) == 0);
  if ((v10 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_17:
  uint64_t v13 = *(os_log_s **)v6;
  if (!v13 || !os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_37;
  }
  if (v5) {
    uint64_t v14 = "muted";
  }
  else {
    uint64_t v14 = "unmuted";
  }
  uint64_t v15 = v36;
  sub_7D084(v36, v14);
  if (v37 < 0) {
    uint64_t v15 = (void **)v36[0];
  }
  if (v4) {
    uint64_t v16 = "muted";
  }
  else {
    uint64_t v16 = "unmuted";
  }
  sub_7D084(v34, v16);
  AudioObjectID v17 = v35;
  uint64_t v18 = (void **)v34[0];
  sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
  int v19 = v34;
  if (v17 < 0) {
    int v19 = v18;
  }
  if (v33 >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
  *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
  int v39 = 1024;
  char v40 = 1417;
  __int128 v41 = 2080;
  uint64_t v42 = v15;
  __int16 v43 = 2080;
  int v44 = v19;
  __int16 v45 = 2080;
  uint64_t v46 = v20;
  _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d MuteStateModel: currentState = %s, nextState = %s on VAD '%s'.",  buf,  0x30u);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0)
  {
    operator delete(v36[0]);
    if ((v4 & 1) != 0) {
      goto LABEL_38;
    }
  }

  else
  {
LABEL_37:
    if ((v4 & 1) != 0)
    {
LABEL_38:
      uint64_t v21 = 256;
      return v21 | v5;
    }
  }

  __int16 v22 = sub_138E8(18);
  int v23 = sub_138E8(38);
  uint64_t v24 = 0;
  int v25 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v26 = *(void *)(v22 + 8);
  while (1)
  {
    uint64_t v27 = *(int *)&buf[4 * v25];
    uint64_t v28 = v24;
    if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
      break;
    }
    uint64_t v24 = 1;
    int v25 = 1LL;
    if ((v28 & 1) != 0) {
      goto LABEL_46;
    }
  }

  if ((v26 & v27) == 0) {
    __int16 v22 = v23;
  }
LABEL_46:
  int v29 = *(os_log_s **)v22;
  if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v30 = *(unsigned __int8 *)(a1 + 309);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    int v39 = 1024;
    char v40 = 1423;
    __int128 v41 = 1024;
    LODWORD(v42) = v30;
    _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Unmuting (explicitly unmuted: %u)", buf, 0x18u);
  }

  (*(void (**)(void))(**(void **)(a1 + 336) + 24LL))(*(void *)(a1 + 336));
  uint64_t v21 = 0;
  return v21 | v5;
}

      if (++v3 == v4) {
        return result;
      }
    }

    v8.n128_f32[0] = a3;
LABEL_6:
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v9 + 16LL))(v9, v8);
    goto LABEL_7;
  }

  return result;
}

    v7 += 8LL;
  }

  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 256))(a1))
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    AudioObjectID v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v21 = "HP_Device.cpp";
      __int16 v22 = 1024;
      int v23 = 1165;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Can't create the IOProc ID in the current thread context.",  buf,  0x12u);
    }

    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_4865A0;
    v18[2] = 1852797029;
  }

  int v19 = 0LL;
  uint64_t v11 = sub_2C1F0C(a1[58], a2, a3, 1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 272))(a1, v19);
  return v11;
}

    v7 += 8LL;
  }

  if (!(*(unsigned int (**)(void *))(*a1 + 256LL))(a1))
  {
    uint64_t v38 = (os_log_t *)sub_138E8(13);
    int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v43 = "HP_Device.cpp";
      int v44 = 1024;
      __int16 v45 = 1207;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Can't create the IOProc ID in the current thread context",  buf,  0x12u);
    }

    char v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v40 = &off_4865A0;
    v40[2] = 1852797029;
  }

  __int128 v41 = 0LL;
  uint64_t v11 = a1[59];
  uint64_t v12 = (char *)operator new(0xF0uLL);
  uint64_t v13 = v12;
  uint64_t v14 = *(_DWORD *)(v11 + 32);
  uint64_t v15 = *(_BYTE *)(v11 + 36);
  *(void *)uint64_t v12 = *(void *)v11;
  *((void *)v12 + 1) = a2;
  *((void *)v12 + 2) = a3;
  v12[24] = 1;
  *((void *)v12 + 4) = 0LL;
  *((void *)v12 + 5) = 0LL;
  *((_DWORD *)v12 + 12) = v14;
  v12[52] = 1;
  *(_WORD *)(v12 + 53) = v15;
  *((_OWORD *)v12 + 8) = 0u;
  *((_OWORD *)v12 + 9) = 0u;
  *((_OWORD *)v12 + 10) = 0u;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *((_DWORD *)v12 + 30) = 0;
  AudioObjectID v17 = *(void **)(v11 + 16);
  uint64_t v16 = *(void *)(v11 + 24);
  if ((unint64_t)v17 >= v16)
  {
    unint64_t v20 = *(void *)(v11 + 8);
    uint64_t v21 = ((uint64_t)v17 - v20) >> 3;
    __int16 v22 = v16 - v20;
    int v23 = v22 >> 2;
    else {
      uint64_t v24 = v23;
    }
    if (v24)
    {
      if (v24 >> 61) {
        sub_7A8C4();
      }
      int v25 = (char *)operator new(8 * v24);
    }

    else
    {
      int v25 = 0LL;
    }

    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = v13;
    uint64_t v18 = v26 + 8;
    int v29 = *(void **)(v11 + 8);
    uint64_t v28 = *(void **)(v11 + 16);
    if (v28 == v29)
    {
      uint64_t v31 = vdupq_n_s64((unint64_t)v28);
    }

    else
    {
      do
      {
        __int16 v30 = *--v28;
        *uint64_t v28 = 0LL;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }

      while (v28 != v29);
      uint64_t v31 = *(int64x2_t *)(v11 + 8);
    }

    *(void *)(v11 + 8) = v26;
    *(void *)(v11 + 16) = v18;
    *(void *)(v11 + 24) = v27;
    uint64_t v33 = (uint64_t *)v31.i64[1];
    uint64_t v32 = (uint64_t *)v31.i64[0];
    while (v33 != v32)
      sub_2C1BCC(--v33);
    if (v32) {
      operator delete(v32);
    }
  }

  else
  {
    void *v17 = v12;
    uint64_t v18 = v17 + 1;
  }

  *(void *)(v11 + 16) = v18;
  int v19 = *(v18 - 1);
  (*(void (**)(void *, uint64_t))(*a1 + 272LL))(a1, v41);
  return v19;
}

  sub_B4E58(v4, a2);
  unsigned __int8 v6 = a1[59];
  unint64_t v7 = *(_DWORD *)(v6 + 112);
  if (v7 == 1)
  {
    uint64_t v8 = 0;
  }

  else
  {
    if (v7) {
      return;
    }
    uint64_t v8 = 1;
  }

  if (*(_DWORD *)(v6 + 116) == v8) {
    (*(void (**)(void *, BOOL))(*a1 + 560LL))(a1, a2 == 0);
  }
}

uint64_t sub_33AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(a1 + 40))( *(void *)(a1 + 16),  a2,  a3,  *(void *)(a1 + 48));
}

void sub_33B48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v11 = __cxa_begin_catch(exception_object);
    uint64_t v12 = (os_log_t *)sub_138E8(14);
    os_log_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v14 = v11[2];
      LODWORD(a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "ListenerRelayManager.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 98;
      WORD1(a10) = 1024;
      DWORD1(a10) = v14;
      uint64_t v15 = "%25s:%-5d CAException thrown from property listener: %d.";
      uint64_t v16 = v13;
      uint32_t v17 = 24;
LABEL_13:
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&a9, v17);
    }
  }

  else
  {
    uint64_t v18 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v19 = v18;
      unint64_t v20 = (os_log_t *)sub_138E8(14);
      os_log_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v19 + 16LL))(v19);
        LODWORD(a9) = 136315650;
        *(void *)((char *)&a9 + 4) = "ListenerRelayManager.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 102;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v22;
        uint64_t v15 = "%25s:%-5d Standard Library exception thrown from property listener: %s.";
        uint64_t v16 = v21;
        uint32_t v17 = 28;
        goto LABEL_13;
      }
    }

    else
    {
      int v23 = (os_log_t *)sub_138E8(14);
      os_log_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "ListenerRelayManager.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 106;
        uint64_t v15 = "%25s:%-5d Unknown exception thrown from property listener.";
        uint64_t v16 = v24;
        uint32_t v17 = 18;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x33B18LL);
}

void sub_33D2C(uint64_t a1)
{
  int v1 = *(uint64_t **)(a1 + 544);
  uint64_t v2 = *(uint64_t **)(a1 + 552);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    v1 += 2;
    sub_33D60(v3);
  }

void sub_33D60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(v1 + 360) + 16LL));
  if ((v2 & 1) != 0) {
    sub_AE118(*(void *)(v1 + 360));
  }
  uint64_t v3 = *(void *)(v1 + 360);
  sub_195658(&v58, *(void *)(v1 + 8), *(std::__shared_weak_count **)(v1 + 16));
  uint64_t v5 = v58;
  uint64_t v4 = v59;
  if (v59)
  {
    p_shared_weak_owners = (unint64_t *)&v59->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  uint64_t v8 = *(std::__shared_weak_count **)(v3 + 40);
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v4;
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v5 = v58;
  }

  if (!v5) {
    goto LABEL_14;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 80LL))(v5)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 120LL))(v5, 1936748595LL) & 1) != 0)
  {
    *(_DWORD *)(v3 + 48) = 1685287015;
    unint64_t v9 = (int *)(v3 + 48);
    int v10 = 1836281975;
    goto LABEL_15;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 120LL))(v5, 1936748595LL) & 1) != 0)
  {
    *(_DWORD *)(v3 + 48) = 1936748595;
    unint64_t v9 = (int *)(v3 + 48);
    int v10 = 16;
  }

  else
  {
LABEL_14:
    *(_DWORD *)(v3 + 48) = 0;
    unint64_t v9 = (int *)(v3 + 48);
    int v10 = -1;
  }

void sub_34560( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    unint64_t v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }

  if (a17)
  {
    unint64_t v27 = (unint64_t *)&a17->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }

  _Unwind_Resume(v29);
}

uint64_t sub_34674()
{
  return 1LL;
}

BOOL sub_3467C(uint64_t a1, int a2)
{
  if (a2 == 1685287015) {
    return sub_18F4A4(a1, 1685287015);
  }
  uint64_t v3 = a1 + 1136;
  for (uint64_t i = *(void *)(a1 + 1144); i != v3; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 16) == a2) {
      return i != v3;
    }
  }

  uint64_t i = a1 + 1136;
  return i != v3;
}

uint64_t sub_346CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_34A20(a2, a3);
  int v13 = (os_log_t *)sub_138E8(24);
  int v14 = *v13;
  if (HIDWORD(v12))
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      os_log_t v21 = v31;
      sub_2CA1C(v31, a3);
      if (v32 < 0) {
        os_log_t v21 = (void **)v31[0];
      }
      sub_2CA1C(__p, a2);
      int v22 = v30;
      int v23 = (void **)__p[0];
      sub_2CA1C(v27, v12);
      os_log_t v24 = __p;
      if (v22 < 0) {
        os_log_t v24 = v23;
      }
      if (v28 >= 0) {
        BOOL v25 = v27;
      }
      else {
        BOOL v25 = (void **)v27[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v34 = "DSPGraphChain.cpp";
      __int16 v35 = 1024;
      int v36 = 164;
      __int16 v37 = 2080;
      uint64_t v38 = v21;
      __int16 v39 = 2080;
      char v40 = v24;
      __int16 v41 = 2080;
      uint64_t v42 = v25;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s",  buf,  0x30u);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }

    uint64_t v26 = sub_35A88(a1, 1685287015, v12, a6);
    if (v26) {
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, void))(*(void *)v26 + 48LL))( v26,  v12,  a4,  a5,  0LL,  0LL);
    }
  }

  else
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v31, a3);
      int v15 = v32;
      uint64_t v16 = (void **)v31[0];
      sub_2CA1C(__p, a2);
      uint64_t v17 = v31;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v30 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v34 = "DSPGraphChain.cpp";
      __int16 v35 = 1024;
      int v36 = 169;
      __int16 v37 = 2080;
      uint64_t v38 = v17;
      __int16 v39 = 2080;
      char v40 = v18;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting DSPProperty %s for AU subtype %s", buf, 0x26u);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }

    uint64_t v19 = sub_35A88(a1, a2, a3, a6);
    if (v19) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v19 + 48LL))( v19,  a3,  a4,  a5,  0LL,  0LL);
    }
  }

  return 1685220966LL;
}

void sub_349D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_34A20(unsigned int a1, unsigned int a2)
{
  LOBYTE(v2) = a2;
  if (a1 == 1685287015)
  {
    unsigned int v3 = a2 & 0xFFFFFF00;
    uint64_t v4 = 0x100000000LL;
  }

  else
  {
    uint64_t v5 = sub_D18A0((uint64_t)&unk_48D328, a1, a2);
    if (v5 == (uint64_t *)&unk_48D330)
    {
      uint64_t v4 = 0LL;
      LOBYTE(v2) = 0;
      unsigned int v3 = 0;
    }

    else
    {
      int v2 = *((_DWORD *)v5 + 9);
      unsigned int v3 = v2 & 0xFFFFFF00;
      uint64_t v4 = 0x100000000LL;
    }
  }

  return v4 | v3 | v2;
}

_BYTE *sub_34AA0(_BYTE *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48LL))(a2);
  a1[8] = v3;
  if (v3)
  {
    (*(void (**)(void))(**(void **)a1 + 24LL))(*(void *)a1);
  }

  else
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "Unlocker.cpp";
      __int16 v9 = 1024;
      int v10 = 32;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Major problem: Unlocker attempted to unlock a mutex not owned by the current thread!",  (uint8_t *)&v7,  0x12u);
    }
  }

  return a1;
}

void sub_34B90(unint64_t **a1, uint64_t a2, int *a3, char a4)
{
  if ((*(unsigned int (**)(unint64_t *))(*a1[1] + 48))(a1[1]))
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    __int16 v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 513;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Cache mutex is held.",  buf,  0x12u);
      }
    }
  }

  if (!(_DWORD)a2) {
    return;
  }
  int v10 = *a1;
  int v11 = *((_DWORD *)v10 + 3);
  if (v11 > 1836414052)
  {
    if (v11 == 1836414053)
    {
      (*(void (**)(unint64_t *))(*v10 + 168))(v10);
      return;
    }

    if (v11 == 1986817381)
    {
      sub_B1210((uint64_t)v10, a2, (uint64_t)a3);
      return;
    }

    goto LABEL_23;
  }

  if (v11 != 1633969526)
  {
    if (v11 == 1634956402)
    {
      uint64_t v66 = 0LL;
      uint64_t v67 = 0LL;
      a2 = a2;
      uint64_t v68 = 0LL;
      do
      {
        if (*a3 == 1936092532)
        {
          memset(buf, 0, sizeof(buf));
          __int128 v71 = 0u;
          __int128 v72 = 0u;
          int v12 = sub_E06F8((uint64_t)v10, (unint64_t *)buf, (unint64_t *)&v71);
          int v13 = (void *)v71;
          if (v12)
          {
            sub_E30AC( &v66,  *((_DWORD *)v10 + 2),  -1431655765 * ((*((void *)&v71 + 1) - (void)v71) >> 2),  (int *)v71);
            sub_E30AC( &v66,  *(_DWORD *)(v10[14] + 8),  -1431655765 * ((*(void *)&buf[8] - *(void *)buf) >> 2),  *(int **)buf);
          }

          if (v13) {
            operator delete(v13);
          }
          if (*(void *)buf) {
            operator delete(*(void **)buf);
          }
        }

        else
        {
          int v14 = (unint64_t *)sub_E2D90(&v66, *((_DWORD *)v10 + 2));
          sub_87EB4(v14, a3);
        }

        a3 += 3;
        --a2;
      }

      while (a2);
      sub_E3100(v66, v67);
      *(void *)AudioObjectPropertyAddress buf = &v66;
      sub_E2D18((void ***)buf);
      return;
    }

LABEL_117:
      a3 += 3;
    }

    while (a3 != v50);
    if (v48 != v47) {
      (*(void (**)(unint64_t *, void, char *, uint64_t))(*v10 + 72))( v10,  -1431655765 * ((unint64_t)(v48 - v47) >> 2),  v47,  1LL);
    }
    (*(void (**)(unint64_t *, void, char *, void))(*v10 + 72))( v10,  -1431655765 * ((unint64_t)(v16 - v15) >> 2),  v15,  0LL);
    if (v47) {
      operator delete(v47);
    }
  }

  if (v70)
  {
    (*(void (**)(uint8_t *))(*(void *)v70 + 48LL))(v70);
    uint64_t v60 = v70;
    uint64_t v70 = 0LL;
    if (v60 == &buf[8])
    {
      uint64_t v61 = 4LL;
      uint64_t v60 = &buf[8];
LABEL_128:
      (*(void (**)(void))(*(void *)v60 + 8 * v61))();
    }

    else if (v60)
    {
      uint64_t v61 = 5LL;
      goto LABEL_128;
    }
  }

  sub_35B78((uint64_t)buf);
  if (v63) {
    v10[80] = 0LL;
  }
  if (v15) {
    operator delete(v15);
  }
}

  if (SHIBYTE(v114) < 0) {
    operator delete(__p[0]);
  }
  if (v40 == v115 || (int v63 = (std::__shared_weak_count *)v40[3]) == 0LL)
  {
    sub_85B80(v115);
LABEL_149:
    sub_7D084(a1, "");
    goto LABEL_181;
  }

  unint64_t v64 = v40[2];
  p_shared_weak_owners = (unint64_t *)&v63->__shared_weak_owners_;
  do
    uint64_t v66 = __ldxr(p_shared_weak_owners);
  while (__stxr(v66 + 1, p_shared_weak_owners));
  sub_85B80(v115);
  uint64_t v111 = 0LL;
  uint64_t v67 = std::__shared_weak_count::lock(v63);
  __int128 v112 = v67;
  if (!v67)
  {
    std::__shared_weak_count::__release_weak(v63);
    goto LABEL_149;
  }

  uint64_t v68 = v67;
  uint64_t v111 = v64;
  std::__shared_weak_count::__release_weak(v63);
  if (v64)
  {
    uint64_t v69 = *(const __CFString **)(v64 + 248);
    *(void *)AudioObjectPropertyAddress buf = v69;
    buf[8] = *(_BYTE *)(v64 + 256);
    if (buf[8] && v69)
    {
      CFRetain(v69);
      uint64_t v69 = *(const __CFString **)buf;
    }

    sub_48E98(a1, v69);
    uint64_t v70 = (void *)sub_19DFC((uint64_t)buf);
    sub_7D084(v70, "-tacl");
    sub_7D084(&v116, "-tsco");
    __int128 v71 = (char)a1->__r_.__value_.__s.__size_;
    __int128 v72 = a1->__r_.__value_.__l.__size_;
    uint64_t v73 = v71 < 0;
    if (v71 >= 0) {
      unint64_t v74 = a1;
    }
    else {
      unint64_t v74 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    if (!v73) {
      __int128 v72 = a1->__r_.__value_.__s.__size_;
    }
    uint64_t v75 = buf[23];
    uint64_t v76 = *(unsigned __int8 **)buf;
    if (buf[23] < 0) {
      uint64_t v75 = *(void *)&buf[8];
    }
    else {
      uint64_t v76 = buf;
    }
    uint64_t v77 = (unsigned __int8 *)v74 + v72;
    if (v72 && v75)
    {
      unint64_t v78 = (unsigned __int8 *)v74;
      uint64_t v79 = (unsigned __int8 *)v74 + v72;
      do
      {
        if (*v78 == *v76)
        {
          __int16 v80 = 1LL;
          while (v75 != v80)
          {
            if (&v78[v80] == v77) {
              goto LABEL_191;
            }
            uint64_t v81 = v78[v80];
            uint64_t v82 = v76[v80++];
            if (v81 != v82) {
              goto LABEL_140;
            }
          }

          uint64_t v79 = v78;
        }

  if (v94)
  {
    if ((void)v140) {
      sub_204854(v140, v94);
    }
    v136[0] = v94;
    v136[1] = v93;
    if (v93)
    {
      __int128 v102 = (unint64_t *)&v93->__shared_owners_;
      do
        __int128 v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }

    sub_243720((uint64_t)a1, v136);
    if (v93)
    {
      uint64_t v104 = (unint64_t *)&v93->__shared_owners_;
      do
        uint64_t v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
  }

  if ((void)v139)
  {
    uint64_t v106 = (std::__shared_weak_count *)*((void *)&v139 + 1);
    uint64_t v135 = v139;
    if (*((void *)&v139 + 1))
    {
      uint64_t v107 = (unint64_t *)(*((void *)&v139 + 1) + 8LL);
      do
        uint64_t v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }

    sub_243720((uint64_t)a1, &v135);
    if (v106)
    {
      __int128 v109 = (unint64_t *)&v106->__shared_owners_;
      do
        __int128 v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
  }

  if ((void)v140)
  {
    uint64_t v111 = (std::__shared_weak_count *)*((void *)&v140 + 1);
    int v134 = v140;
    if (*((void *)&v140 + 1))
    {
      __int128 v112 = (unint64_t *)(*((void *)&v140 + 1) + 8LL);
      do
        uint64_t v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }

    sub_243720((uint64_t)a1, &v134);
    if (v111)
    {
      __int128 v114 = (unint64_t *)&v111->__shared_owners_;
      do
        int v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
  }

  *(_DWORD *)int v147 = 1;
  strcpy((char *)buf, "tcabbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  (*(void (**)(uint64_t *, _DWORD *, void, void, uint64_t, _BYTE *))(*a1 + 64))( a1,  buf,  0LL,  0LL,  4LL,  v147);
  int v116 = v138;
  if (v138)
  {
    int v117 = (unint64_t *)&v138->__shared_owners_;
    do
      int v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }

  int v119 = (std::__shared_weak_count *)*((void *)&v139 + 1);
  if (*((void *)&v139 + 1))
  {
    int v120 = (unint64_t *)(*((void *)&v139 + 1) + 8LL);
    do
      uint64_t v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }

  double v122 = (std::__shared_weak_count *)*((void *)&v140 + 1);
  if (*((void *)&v140 + 1))
  {
    int v123 = (unint64_t *)(*((void *)&v140 + 1) + 8LL);
    do
      int v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }

  return 1LL;
}

void sub_354D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, __int128 buf)
{
  if (a2)
  {
    if (a15) {
      *(void *)(v21 + 640) = 0LL;
    }
    if (v22) {
      operator delete(v22);
    }
    __cxa_begin_catch(exception_object);
    os_log_t v24 = (os_log_t *)sub_138E8(1);
    BOOL v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 549;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Exception thrown from notification.",  (uint8_t *)&buf,  0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x35488LL);
  }

  _Unwind_Resume(exception_object);
}

_BYTE *sub_35678(_BYTE *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  sub_82AF0((uint64_t)(a1 + 8), a3);
  if (!*(void *)(a3 + 24))
  {
    unsigned __int8 v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "Oath.h";
      __int16 v11 = 1024;
      int v12 = 34;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inFunction is NULL]: inFunction is a nullptr.",  (uint8_t *)&v9,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inFunction is a nullptr.");
  }

  return a1;
}

void sub_35794(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v1 + 32);
  if (v4 == v2)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v2;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_357E0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (a4)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    uint64_t v8 = v7;
    if (v7 && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 48LL))(v7))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
      char v9 = 0;
    }

    else
    {
      char v9 = 1;
    }

    if (AudioObjectPropertiesChanged(*(void *)(a1 + 16) + 80LL, *(unsigned int *)(a1 + 8), a2, a3))
    {
      uint64_t v19 = (os_log_t *)sub_138E8(13);
      int v20 = *v19;
      if (*v19)
      {
        if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v22 = 136315394;
          *(void *)&v22[4] = "HP_Object.cpp";
          __int16 v23 = 1024;
          int v24 = 291;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theError): got an error calling the listeners",  v22,  0x12u);
        }
      }
    }

    if (v8) {
      char v21 = v9;
    }
    else {
      char v21 = 1;
    }
    if ((v21 & 1) == 0) {
      (*(void (**)(uint64_t))(*(void *)v8 + 16LL))(v8);
    }
  }

  else
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    __int16 v11 = operator new(0x18uLL);
    int v12 = v11;
    v11[1] = 0LL;
    v11[2] = 0LL;
    *__int16 v11 = 0LL;
    if ((_DWORD)a2)
    {
      sub_87E24(v11, a2);
      uint64_t v13 = v12[1];
      uint64_t v14 = 12LL * a2;
      do
      {
        uint64_t v15 = *a3;
        *(_DWORD *)(v13 + 8) = *((_DWORD *)a3 + 2);
        *(void *)uint64_t v13 = v15;
        v13 += 12LL;
        a3 = (uint64_t *)((char *)a3 + 12);
        v14 -= 12LL;
      }

      while (v14);
      v12[1] = v13;
    }

    int v16 = *(_DWORD *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = operator new(0x18uLL);
    *(void *)uint64_t v18 = v12;
    v18[2] = v16;
    *((void *)v18 + 2) = v17;
    *(void *)int v22 = 0LL;
    dispatch_async_f(global_queue, v18, (dispatch_function_t)sub_2F4A58);
    sub_2F4DA0((void ***)v22);
  }

void sub_359DC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35A1C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = sub_35A88(a1, a2, a3, a6);
  if (v9) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v9 + 48LL))( v9,  a3,  a4,  a5,  0LL,  0LL);
  }
  else {
    return 1685220966LL;
  }
}

uint64_t sub_35A88(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a1 + 48;
  char v14 = 1;
  sub_92F80(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v8 == v9) {
    goto LABEL_9;
  }
  while (1)
  {
    int v16 = 0;
    uint64_t v10 = *(void *)(v8 + 8);
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 152LL))(v10) == a2
        && !(*(unsigned int (**)(void, uint64_t, int *, char *, uint64_t, void))(**(void **)(v8 + 8)
                                                                                            + 40LL))( *(void *)(v8 + 8),  a3,  &v16,  &v15,  a4,  0LL))
      {
        break;
      }
    }

    v8 += 24LL;
    if (v8 == v9)
    {
      uint64_t v8 = v9;
      break;
    }
  }

  if (v8 == *(void *)(a1 + 32)) {
LABEL_9:
  }
    uint64_t v11 = 0LL;
  else {
    uint64_t v11 = *(void *)(v8 + 8);
  }
  sub_93128((uint64_t)&v13);
  return v11;
}

void sub_35B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_35B78(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    if (*(void *)(a1 + 32))
    {
      int v2 = (os_log_t *)sub_138E8(13);
      int v3 = *v2;
      if (*v2)
      {
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 136315394;
          char v14 = "Oath.h";
          __int16 v15 = 1024;
          int v16 = 41;
          _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Contract broken: object initialized to require a call to Fulfill, but no call was made. Manually e xecuting Fulfill to avoid breaking the oath.",  (uint8_t *)&v13,  0x12u);
        }
      }
    }
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 48LL))(v4);
    uint64_t v5 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0LL;
    if (v5 == (void *)(a1 + 8))
    {
      uint64_t v6 = 4LL;
      uint64_t v5 = (void *)(a1 + 8);
    }

    else
    {
      if (!v5) {
        goto LABEL_12;
      }
      uint64_t v6 = 5LL;
    }

    (*(void (**)(void))(*v5 + 8 * v6))();
  }

void sub_35CFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 43;
      uint64_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 43;
        uint64_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 43;
        uint64_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x35C64LL);
}

_BYTE *sub_35F48(_BYTE *a1)
{
  if (a1[8]) {
    (*(void (**)(void))(**(void **)a1 + 16LL))();
  }
  return a1;
}

void *sub_35F84(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  return a1;
}

void sub_36000(_Unwind_Exception *a1)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef sub_36030(void *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (uint64_t v7 = ValueAtIndex) == 0LL))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  CFTypeRef result = CFRetain(ValueAtIndex);
  *a1 = v7;
  return result;
}

void sub_360B4(_Unwind_Exception *a1)
{
}

void *sub_360D4(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFDictionaryGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_7E414(exception);
    }

    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }

  else
  {
    CFTypeRef v5 = 0LL;
  }

  return sub_3617C(a1, v5);
}

void sub_36160(_Unwind_Exception *a1)
{
}

void *sub_3617C(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  return a1;
}

void sub_361F8(_Unwind_Exception *a1)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

const void *sub_36228(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (a1) {
    Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0LL;
  }
  return Value;
}

void sub_362E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFNumberRef sub_36328(const __CFNumber *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_22;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_35;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          uint64_t v11 = Value != 0;
          if (Value) {
            unsigned __int8 v12 = LOBYTE(valuePtr);
          }
          else {
            unsigned __int8 v12 = 0;
          }
          int v13 = -256;
          uint64_t v8 = v11 << 32;
          LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
          int v7 = v5 & 0xFFFFFF00;
          break;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_22:
          if (v9) {
            uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000LL;
          }
          else {
            uint64_t v5 = 0LL;
          }
          goto LABEL_38;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_29:
          uint64_t v14 = *(float *)&valuePtr;
          goto LABEL_36;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_35;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_33;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_33:
          uint64_t v14 = LODWORD(valuePtr);
          goto LABEL_36;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_35:
          uint64_t v14 = valuePtr;
LABEL_36:
          uint64_t v5 = v14 | 0x100000000LL;
          if (!v10) {
            uint64_t v5 = 0LL;
          }
LABEL_38:
          int v7 = v5 & 0xFFFFFF00;
          uint64_t v8 = v5 & 0x100000000LL;
          break;
        default:
          int v7 = 0;
          uint64_t v8 = 0LL;
          LOBYTE(v5) = 0;
          break;
      }

      uint64_t v6 = v8 | v7 & 0xFFFFFF00;
      uint64_t v5 = v5;
    }

    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
      {
        uint64_t v5 = CFBooleanGetValue(v1);
        uint64_t v6 = 0x100000000LL;
      }

      else
      {
        uint64_t v5 = 0LL;
        uint64_t v6 = 0LL;
      }
    }

    return (const __CFNumber *)(v6 | v5);
  }

  return result;
}

void sub_365E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    goto LABEL_6;
  }
  CFTypeID v3 = (os_log_t *)sub_138E8(16);
  CFTypeID v4 = *v3;
  if (*v3)
  {
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      uint64_t v6 = "HapticDebugIODelegate.cpp";
      __int16 v7 = 1024;
      int v8 = 197;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HapticDebugDelegate not instantiated yet",  (uint8_t *)&v5,  0x12u);
    }
  }

  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
LABEL_6:
  }
    sub_1D86E4(v2);
}

uint64_t sub_366B0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    sub_5518(*(void *)a1);
    CFTypeID v4 = (uint64_t *)(v2 + 144);
    for (uint64_t i = *(uint64_t **)(v2 + 152); i != v4; uint64_t i = (uint64_t *)i[1])
    {
      if (i[2] == v3)
      {
        if (v4 != i)
        {
          uint64_t v6 = *i;
          *(void *)(v6 + 8) = i[1];
          *(void *)i[1] = v6;
          --*(void *)(v2 + 160);
          operator delete(i);
          goto LABEL_11;
        }

        break;
      }
    }

    __int16 v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "RoutingMutex.cpp";
      __int16 v15 = 1024;
      int v16 = 181;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: VAD instance not found in list",  (uint8_t *)&v13,  0x12u);
    }

LABEL_11:
    int v9 = *(_DWORD *)(v2 + 140);
    if (v9) {
      goto LABEL_16;
    }
    int v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "RoutingMutex.cpp";
      __int16 v15 = 1024;
      int v16 = 187;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: no one was blocking on a VAD IO thread",  (uint8_t *)&v13,  0x12u);
    }

    int v9 = *(_DWORD *)(v2 + 140);
    if (v9) {
LABEL_16:
    }
      *(_DWORD *)(v2 + 140) = v9 - 1;
    sub_3780BC(v2);
  }

  return a1;
}

  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    int v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (v16)
  {
    if (!v6) {
      return v14;
    }
LABEL_17:
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }

  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v6) {
      goto LABEL_17;
    }
  }

  return v14;
}

    uint64_t v6 = buf;
    (*(void (**)(void *, _BYTE *))(v79[0] + 24LL))(v79, buf);
    (*(void (**)(void *))(*v80 + 32LL))(v80);
    __int16 v80 = *(void **)&buf[24];
    *(void *)&_BYTE buf[24] = buf;
    __int16 v7 = 4LL;
LABEL_19:
    (*(void (**)(_BYTE *))(*(void *)v6 + 8 * v7))(v6);
    goto LABEL_20;
  }

  if (v4 == a1 + 14)
  {
    *(void *)&_BYTE buf[24] = buf;
    (*(void (**)(void *, _BYTE *))(*v4 + 24LL))(v4, buf);
    int v5 = *(_BYTE **)&buf[24];
  }

  else
  {
    int v5 = (_BYTE *)(*(uint64_t (**)(void *))(*v4 + 16LL))(v4);
    *(void *)&_BYTE buf[24] = v5;
  }

  uint64_t v6 = v80;
  if (v5 != buf)
  {
    if (v80 != v79) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }

  if (v80 == v79)
  {
    (*(void (**)(_BYTE *, void **))(*(void *)buf + 24LL))(buf, v81);
    (*(void (**)(void))(**(void **)&buf[24] + 32LL))(*(void *)&buf[24]);
    *(void *)&_BYTE buf[24] = 0LL;
    (*(void (**)(void *, _BYTE *))(*v80 + 24LL))(v80, buf);
    (*(void (**)(void *))(*v80 + 32LL))(v80);
    __int16 v80 = 0LL;
    *(void *)&_BYTE buf[24] = buf;
    (*((void (**)(void **, void *))v81[0] + 3))(v81, v79);
    (*((void (**)(void **))v81[0] + 4))(v81);
    __int16 v80 = v79;
    uint64_t v6 = *(_BYTE **)&buf[24];
  }

  else
  {
    (*(void (**)(_BYTE *, void *))(*(void *)buf + 24LL))(buf, v79);
    (*(void (**)(void))(**(void **)&buf[24] + 32LL))(*(void *)&buf[24]);
    uint64_t v6 = v80;
    *(void *)&_BYTE buf[24] = v80;
    __int16 v80 = v79;
  }

    ;
  }

  uint64_t v6 = v5;
  __int16 v7 = i[2];
  if (!v7 || *(_DWORD *)(v7 + 144) != a2)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      int v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }

    goto LABEL_11;
  }

  unsigned __int8 v12 = (unint64_t *)&v5->__shared_owners_;
  do
    int v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }

  int v10 = 1LL;
LABEL_13:
  sub_85B80(v14);
  return v10;
}

  unsigned __int8 v12 = (char *)operator new(0x88uLL);
  v15[0] = v12;
  v15[1] = v6;
  int v16 = 0;
  *((void *)v12 + 4) = 0LL;
  *((void *)v12 + 5) = 0LL;
  *((void *)v12 + 6) = 0LL;
  sub_7A5B8( (void *)v12 + 4,  *(const void **)a3,  *(void *)(a3 + 8),  (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *((void *)v12 + 7) = *(void *)(a3 + 24);
  v12[64] = *(_BYTE *)(a3 + 32);
  *((_DWORD *)v12 + 18) = *(_DWORD *)(a3 + 40);
  sub_86550((uint64_t *)v12 + 10, a3 + 48);
  *((_DWORD *)v12 + 26) = *(_DWORD *)(a3 + 72);
  int v13 = *(void *)(a3 + 80);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a3 + 80));
  }
  *((void *)v12 + 14) = v13;
  *(_OWORD *)(v12 + 120) = *(_OWORD *)(a3 + 88);
  *(void *)(a3 + 88) = 0LL;
  *(void *)(a3 + 96) = 0LL;
  int v16 = 1;
  *(void *)unsigned __int8 v12 = 0LL;
  *((void *)v12 + 1) = 0LL;
  *((void *)v12 + 2) = v8;
  os_log_t *v7 = v12;
  uint64_t v14 = (uint64_t *)**a1;
  if (v14)
  {
    *a1 = v14;
    unsigned __int8 v12 = *v7;
  }

  sub_7A420(a1[1], (uint64_t *)v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v15[0] = 0LL;
  sub_10138C((uint64_t)v15);
  return 1LL;
}

  byte_48E8E0 = v2;
}

    unsigned __int8 v12 = *(void *)(a1 + 736);
    if (qword_4919C8 != -1) {
      dispatch_once(&qword_4919C8, &stru_473A98);
    }
    if (off_4919D8) {
      off_4919D8(v12);
    }
    sub_32C8C(*(void **)(a1 + 856));
    *(void *)(a1 + 848) = a1 + 856;
    *(void *)(a1 + 864) = 0LL;
    *(void *)(a1 + 856) = 0LL;
  }

  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 56LL))( a1,  1685287015LL,  1668572518LL,  0LL))
  {
    sub_868B0();
    std::recursive_mutex::lock(&stru_48C9D8);
    int v13 = *((void *)&xmmword_48CA18 + 1);
    if (*((void *)&xmmword_48CA18 + 1))
    {
      uint64_t v14 = 0x9DDFEA08EB382D69LL * (((8 * a1) + 8LL) ^ HIDWORD(a1));
      __int16 v15 = 0x9DDFEA08EB382D69LL * (HIDWORD(a1) ^ (v14 >> 47) ^ v14);
      int v16 = 0x9DDFEA08EB382D69LL * (v15 ^ (v15 >> 47));
      os_log_t v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_48CA18 + 8));
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        int v18 = v16;
        if (v16 >= *((void *)&xmmword_48CA18 + 1)) {
          int v18 = v16 % *((void *)&xmmword_48CA18 + 1);
        }
      }

      else
      {
        int v18 = v16 & (*((void *)&xmmword_48CA18 + 1) - 1LL);
      }

      uint64_t v19 = *(uint64_t ***)(xmmword_48CA18 + 8 * v18);
      if (v19)
      {
        int v20 = *v19;
        if (*v19)
        {
          uint32_t v21 = *((void *)&xmmword_48CA18 + 1) - 1LL;
          do
          {
            int v22 = v20[1];
            if (v22 == v16)
            {
              if (v20[2] == a1)
              {
                if (v17.u32[0] > 1uLL)
                {
                  if (v16 >= *((void *)&xmmword_48CA18 + 1)) {
                    v16 %= *((void *)&xmmword_48CA18 + 1);
                  }
                }

                else
                {
                  v16 &= v21;
                }

                __int16 v23 = *(uint64_t **)(xmmword_48CA18 + 8 * v16);
                do
                {
                  int v24 = v23;
                  __int16 v23 = (uint64_t *)*v23;
                }

                while (v23 != v20);
                if (v24 == &qword_48CA28) {
                  goto LABEL_52;
                }
                os_log_t v25 = v24[1];
                if (v17.u32[0] > 1uLL)
                {
                  if (v25 >= *((void *)&xmmword_48CA18 + 1)) {
                    v25 %= *((void *)&xmmword_48CA18 + 1);
                  }
                }

                else
                {
                  v25 &= v21;
                }

                if (v25 != v16)
                {
LABEL_52:
                  if (!*v20) {
                    goto LABEL_53;
                  }
                  uint64_t v26 = *(void *)(*v20 + 8);
                  if (v17.u32[0] > 1uLL)
                  {
                    if (v26 >= *((void *)&xmmword_48CA18 + 1)) {
                      v26 %= *((void *)&xmmword_48CA18 + 1);
                    }
                  }

                  else
                  {
                    v26 &= v21;
                  }

                  if (v26 != v16) {
LABEL_53:
                  }
                    *(void *)(xmmword_48CA18 + 8 * v16) = 0LL;
                }

                os_log_t v27 = *v20;
                if (*v20)
                {
                  os_log_t v28 = *(void *)(v27 + 8);
                  if (v17.u32[0] > 1uLL)
                  {
                    if (v28 >= v13) {
                      v28 %= v13;
                    }
                  }

                  else
                  {
                    v28 &= v21;
                  }

                  if (v28 != v16)
                  {
                    *(void *)(xmmword_48CA18 + 8 * v28) = v24;
                    os_log_t v27 = *v20;
                  }
                }

                *int v24 = v27;
                os_log_s *v20 = 0LL;
                --qword_48CA30;
                sub_8696C(1, v20);
                break;
              }
            }

            else
            {
              if (v17.u32[0] > 1uLL)
              {
                if (v22 >= *((void *)&xmmword_48CA18 + 1)) {
                  v22 %= *((void *)&xmmword_48CA18 + 1);
                }
              }

              else
              {
                v22 &= v21;
              }

              if (v22 != v18) {
                break;
              }
            }

            int v20 = (uint64_t *)*v20;
          }

          while (v20);
        }
      }
    }

    std::recursive_mutex::unlock(&stru_48C9D8);
  }

  *(_BYTE *)(a1 + 448) = 0;
  uint64_t v57 = (uint64_t *)(a1 + 48);
  uint64_t v58 = 1;
  sub_190270(a1 + 48);
  int v29 = (uint64_t)v2;
  uint64_t v31 = *(void *)(a1 + 24);
  os_log_t v32 = *(void *)(a1 + 32);
  uint64_t v30 = (uint64_t *)(a1 + 24);
  unint64_t v33 = (v32 - v31) / 24;
  if (v32 != v31)
  {
    if (v33 <= 1) {
      unint64_t v34 = 1LL;
    }
    else {
      unint64_t v34 = (v32 - v31) / 24;
    }
    uint64_t v35 = 8LL;
    do
    {
      unint64_t v36 = *v30;
      if (*(void *)(*v30 + v35))
      {
        sub_654FC();
        __int16 v37 = (*(uint64_t (**)(void))(**(void **)(v36 + v35) + 144LL))(*(void *)(v36 + v35));
        (*(void (**)(uint64_t *, uint64_t))(qword_4913D0 + 104))(&qword_4913D0, v37);
      }

      v35 += 24LL;
      --v34;
    }

    while (v34);
  }

  int v39 = *(void *)(a1 + 400);
  uint64_t v38 = *(void *)(a1 + 408);
  if (v38 != v39)
  {
    do
    {
      char v40 = v38 - 24;
      sub_7A768(v38 - 16);
      uint64_t v38 = v40;
    }

    while (v40 != v39);
  }

  *(void *)(a1 + 408) = v39;
  uint64_t v42 = *(void *)(a1 + 424);
  __int16 v41 = *(void *)(a1 + 432);
  if (v41 != v42)
  {
    do
    {
      __int16 v43 = v41 - 24;
      sub_7A768(v41 - 16);
      __int16 v41 = v43;
    }

    while (v43 != v42);
  }

  *(void *)(a1 + 432) = v42;
  __int16 v45 = *(void *)(a1 + 24);
  int v44 = *(void *)(a1 + 32);
  if (v44 != v45)
  {
    do
    {
      uint64_t v46 = v44 - 24;
      sub_7A768(v44 - 16);
      int v44 = v46;
    }

    while (v46 != v45);
  }

  *(void *)(a1 + 32) = v45;
  sub_19032C(&v57);
  if (*(void *)(a1 + 872)) {
    unint64_t v47 = v32 == v31;
  }
  else {
    unint64_t v47 = 1;
  }
  if (!v47)
  {
    LODWORD(v48) = 0;
    do
    {
      sub_28A7C4(*(void **)(a1 + 872), v48);
      unint64_t v48 = (v48 + 1);
    }

    while (v33 > v48);
  }

  uint64_t v57 = (uint64_t *)(a1 + 696);
  sub_19094C(a1, &v57);
  for (uint64_t i = (uint64_t *)qword_48F5F0; i != &qword_48F5E8; uint64_t i = (uint64_t *)i[1])
  {
    if (i[4] == a1) {
      i[4] = 0LL;
    }
  }

  uint64_t v50 = *(const void **)(a1 + 1128);
  if (v50) {
    CFRelease(v50);
  }
  sub_195FD4(*(void **)(a1 + 1112));
  uint64_t v57 = (uint64_t *)(a1 + 1080);
  sub_196014((void ***)&v57);
  uint64_t v51 = *(const void **)(a1 + 1072);
  if (v51) {
    CFRelease(v51);
  }
  sub_7A768(a1 + 1056);
  sub_7A768(a1 + 1040);
  sub_83284(a1 + 1000);
  uint64_t v57 = (uint64_t *)(a1 + 976);
  sub_196084((void ***)&v57);
  sub_2DBF4((unsigned int **)(a1 + 960));
  sub_2DBF4((unsigned int **)(a1 + 944));
  std::mutex::~mutex((std::mutex *)(a1 + 880));
  uint64_t v52 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = 0LL;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  sub_32C8C(*(void **)(a1 + 856));
  unint64_t v53 = *(void **)(a1 + 824);
  if (v53)
  {
    *(void *)(a1 + 832) = v53;
    operator delete(v53);
  }

  unint64_t v54 = *(std::__shared_weak_count **)(a1 + 816);
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  sub_85B80((uint64_t *)(a1 + 768));
  sub_32C8C(*(void **)(a1 + 696));
  sub_30648(a1 + 592);
  sub_30648(a1 + 504);
  uint64_t v57 = (uint64_t *)(a1 + 424);
  sub_1960C4((void ***)&v57);
  uint64_t v57 = (uint64_t *)(a1 + 400);
  sub_1960C4((void ***)&v57);
  sub_7A768(a1 + 376);
  sub_7A768(v29);
  uint64_t v57 = (uint64_t *)(a1 + 336);
  sub_7A668((void ***)&v57);
  sub_196138(a1 + 48);
  uint64_t v57 = (uint64_t *)(a1 + 24);
  sub_1960C4((void ***)&v57);
  uint64_t v55 = *(std::__shared_weak_count **)(a1 + 16);
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  return a1;
}

        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          int v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }

        return sub_ADC0C(&v11);
      }
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  uint64_t v6 = (os_log_t *)sub_138E8(18);
  __int16 v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    int v13 = 1024;
    uint64_t v14 = 225;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Skipped notifying audio object property listener relay for input volume control, since it may be destructed.",  buf,  0x12u);
  }

  if (v3) {
    goto LABEL_11;
  }
  return sub_ADC0C(&v11);
}

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(void *)(a2 + 8) - *(void *)a2 != 4LL)
  {
    int v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v12 = 136315394;
      int v13 = "RoutingTypes.cpp";
      uint64_t v14 = 1024;
      __int16 v15 = 1168;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v12,  0x12u);
    }

    goto LABEL_11;
  }

  sub_2D21B4(a1[3], a1[4]);
  return a1;
}

  sub_1BB88(v8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
}

void sub_36868(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_36874(unint64_t *a1, uint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v3 = (uint64_t)(a1 + 81);
    CFTypeID v4 = pthread_self();
    int v5 = (_opaque_pthread_t *)atomic_load(a1 + 105);
    if (!pthread_equal(v4, v5))
    {
      int v8 = (os_log_t *)sub_138E8(13);
      int v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315394;
          int v13 = "IOMonitor.h";
          __int16 v14 = 1024;
          int v15 = 115;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: It is illegal to Unlock_FromStartOrNullStopThread from a thread that does not own mIOThreadCallingNormalMutex.",  (uint8_t *)&v12,  0x12u);
        }
      }
    }

    sub_563C((uint64_t)(a1 + 103));
    uint64_t v6 = pthread_self();
    __int16 v7 = (_opaque_pthread_t *)atomic_load(a1 + 83);
    if (!pthread_equal(v6, v7))
    {
      int v10 = (os_log_t *)sub_138E8(13);
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315394;
          int v13 = "IOMonitor.h";
          __int16 v14 = 1024;
          int v15 = 118;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: It is illegal to call Unlock_FromStartOrNullStopThread from a thread that doe s not own the IO Monitor.",  (uint8_t *)&v12,  0x12u);
        }
      }
    }

    sub_563C(v3);
  }

  else if (a2 == 1)
  {
    sub_79C14(a1 + 81);
  }

uint64_t *sub_36A30(uint64_t *result, uint64_t *a2, int a3, int a4)
{
  int v5 = result;
  uint64_t v6 = result + 1;
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    uint64_t v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      int v10 = a2;
LABEL_16:
      if (v8) {
        int v13 = v10;
      }
      else {
        int v13 = a2;
      }
      if (v8) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = a2;
      }
      goto LABEL_22;
    }

    if (v8)
    {
      int v9 = (uint64_t *)*a2;
      do
      {
        int v10 = v9;
        int v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      int v15 = a2;
      do
      {
        int v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        int v15 = v10;
      }

      while (v16);
    }

    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t *)v17;
          int v18 = *(_DWORD *)(v17 + 28);
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }

LABEL_49:
      uint64_t v11 = v6;
      goto LABEL_22;
    }
  }

  else
  {
    if (v7 >= a3) {
      return result;
    }
    uint64_t v11 = a2 + 1;
    int v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        uint64_t v11 = v12;
        int v12 = (uint64_t *)*v12;
        int v13 = v11;
        __int16 v14 = v11;
      }

      while (v12);
    }

    else
    {
      __int16 v14 = a2;
      do
      {
        uint64_t v19 = v14;
        __int16 v14 = (uint64_t *)v14[2];
      }

      while ((uint64_t *)*v14 != v19);
      int v13 = a2;
    }

    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }

    uint64_t v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t *)v20;
          int v21 = *(_DWORD *)(v20 + 28);
          if (v21 <= a3) {
            break;
          }
          uint64_t v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v21 >= a3) {
          goto LABEL_49;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }

  int v13 = result + 1;
LABEL_44:
  int v22 = operator new(0x20uLL);
  v22[7] = a4;
  *(void *)int v22 = 0LL;
  *((void *)v22 + 1) = 0LL;
  *((void *)v22 + 2) = v13;
  *uint64_t v6 = (uint64_t)v22;
  uint64_t v23 = *(void *)*v5;
  if (v23)
  {
    *int v5 = v23;
    int v24 = (uint64_t *)*v6;
  }

  else
  {
    int v24 = (uint64_t *)v22;
  }

  CFTypeRef result = sub_7A420((uint64_t *)v5[1], v24);
  ++v5[2];
  return result;
}

      if (!v36) {
        goto LABEL_53;
      }
      uint64_t v42 = (unint64_t *)&v36->__shared_owners_;
      do
        __int16 v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_53:
        if (!v33) {
          goto LABEL_55;
        }
LABEL_54:
        std::__shared_weak_count::__release_weak(v33);
        goto LABEL_55;
      }

      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (v33) {
        goto LABEL_54;
      }
LABEL_55:
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      if (v39) {
        goto LABEL_63;
      }
      v23 += 2;
    }

    while (v23 != v22);
    uint64_t v23 = v22;
LABEL_63:
    int v44 = v23;
    uint64_t v23 = (void *)a2[64];
LABEL_64:
    if (v44 != v23)
    {
      __int16 v45 = sub_138E8(8);
      if ((*(_BYTE *)(v45 + 8) & 1) != 0)
      {
        uint64_t v46 = *(os_log_s **)v45;
        if (*(void *)v45)
        {
          if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
          {
            sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(v6[2] + 8));
            unint64_t v47 = &__p;
            if (v89 < 0) {
              unint64_t v47 = __p;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5186;
            uint64_t v93 = 2080;
            v94[0] = v47;
            _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found and removed port from mCachedPortStack: %s",  buf,  0x1Cu);
            if (v89 < 0) {
              operator delete(__p);
            }
          }
        }
      }

      unint64_t v48 = v44 + 2;
      unint64_t v49 = (void *)a2[64];
      if (v44 + 2 == v49)
      {
        uint64_t v23 = v44;
      }

      else
      {
        do
        {
          uint64_t v23 = v48;
          uint64_t v50 = *(_OWORD *)v48;
          char *v48 = 0LL;
          v48[1] = 0LL;
          uint64_t v51 = (std::__shared_weak_count *)*(v48 - 1);
          *((_OWORD *)v48 - 1) = v50;
          if (v51) {
            std::__shared_weak_count::__release_weak(v51);
          }
          v48 += 2;
        }

        while (v23 + 2 != v49);
        unint64_t v48 = (void *)a2[64];
      }

      while (v48 != v23)
      {
        uint64_t v52 = (std::__shared_weak_count *)*(v48 - 1);
        if (v52) {
          std::__shared_weak_count::__release_weak(v52);
        }
        v48 -= 2;
      }

      a2[64] = (uint64_t)v23;
    }

    if (v15)
    {
      unint64_t v53 = *(void *)(*a2 + 128);
      if (!v53) {
        goto LABEL_95;
      }
      unint64_t v54 = *(_DWORD *)(v6[2] + 144);
      uint64_t v55 = *a2 + 128;
      do
      {
        unint64_t v56 = *(_DWORD *)(v53 + 28);
        uint64_t v57 = v56 >= v54;
        if (v56 >= v54) {
          uint64_t v58 = (uint64_t *)v53;
        }
        else {
          uint64_t v58 = (uint64_t *)(v53 + 8);
        }
        if (v57) {
          uint64_t v55 = v53;
        }
        unint64_t v53 = *v58;
      }

      while (*v58);
      if (v55 != *a2 + 128 && *(_DWORD *)(v55 + 28) <= v54)
      {
        for (uint64_t i = *v85; (void *)i != v23; i += 16LL)
        {
          uint64_t v73 = *(std::__shared_weak_count **)(i + 8);
          std::string __p = *(void **)i;
          AudioStreamBasicDescription v88 = v73;
          if (v73)
          {
            unint64_t v74 = (unint64_t *)&v73->__shared_weak_owners_;
            do
              uint64_t v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }

          sub_B8CBC((uint64_t *)buf, (uint64_t *)&__p, "", 5197);
          uint64_t v76 = *(std::__shared_weak_count **)&buf[8];
          uint64_t v77 = *(_WORD *)(*(void *)buf + 184LL);
          if (*(void *)&buf[8])
          {
            unint64_t v78 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              uint64_t v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }

          if (v88) {
            std::__shared_weak_count::__release_weak(v88);
          }
          if ((v77 & 0x40) == 0)
          {
            uint64_t v23 = (void *)i;
            break;
          }
        }
      }

      else
      {
LABEL_95:
        uint64_t v23 = (void *)*v85;
      }

      int v59 = sub_138E8(8);
      if ((*(_BYTE *)(v59 + 8) & 1) != 0)
      {
        uint64_t v60 = *(os_log_s **)v59;
        if (*(void *)v59)
        {
          if (os_log_type_enabled(*(os_log_t *)v59, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v61 = *v85;
            sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(v6[2] + 8));
            unsigned int v62 = &__p;
            if (v89 < 0) {
              unsigned int v62 = __p;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5200;
            uint64_t v93 = 1024;
            LODWORD(v94[0]) = ((unint64_t)v23 - v61) >> 4;
            WORD2(v94[0]) = 2080;
            *(void *)((char *)v94 + 6) = v62;
            _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Inserting port into mCachedPortStack at position %d: %s",  buf,  0x22u);
            if (v89 < 0) {
              operator delete(__p);
            }
          }
        }
      }

      int v63 = v6[3];
      *(void *)AudioObjectPropertyAddress buf = v6[2];
      *(void *)&buf[8] = v63;
      if (v63)
      {
        unint64_t v64 = (unint64_t *)(v63 + 16);
        do
          BOOL v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }

      sub_129FD8(v85, (uint64_t)v23, (__int128 *)buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v66 = v6[2];
      uint64_t v67 = v6[3];
      if (v67)
      {
        uint64_t v68 = (unint64_t *)(v67 + 16);
        do
          uint64_t v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }

      uint64_t v70 = operator new(0x20uLL);
      v70[2] = v66;
      v70[3] = v67;
      __int128 v71 = *v83;
      uint8_t *v70 = *v83;
      v70[1] = v83;
      *(void *)(v71 + 8) = v70;
      *uint64_t v83 = (uint64_t)v70;
      ++v83[2];
    }

          uint64_t v17 = (os_log_t *)sub_138E8(13);
          int v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int v22 = 136315394;
            *(void *)&v22[4] = "RunTimeDefaults.cpp";
            uint64_t v23 = 1024;
            int v24 = 2208;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d va::SiriCarKitPreferredOutputRoute::BuiltInSpeaker",  v22,  0x12u);
          }

          int v7 = 2LL;
          goto LABEL_46;
        }
      }

    if (v9 == v10) {
      return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
    }
  }

  if (v9 > 1936746610)
  {
    if (v9 > 1970040163)
    {
      if (v9 > 1986947427)
      {
        if (v9 == 2004050279) {
          return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
        }
        int v10 = 1986947428;
      }

      else
      {
        if (v9 == 1970040164) {
          return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
        }
        int v10 = 1970496630;
      }
    }

    else
    {
      int v10 = 1937204590;
    }

    goto LABEL_49;
  }

  if (v9 > 1936221549)
  {
    if (v9 <= 1936744815)
    {
      if (v9 == 1936221550) {
        return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
      }
      int v10 = 1936225136;
    }

    else
    {
      if (v9 == 1936744816 || v9 == 1936745318) {
        return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
      }
      int v10 = 1936745838;
    }

    goto LABEL_49;
  }

  if (v9 <= 1885955427)
  {
    if (v9 == 1819505773) {
      return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
    }
    int v10 = 1869832547;
    goto LABEL_49;
  }

  if (v9 != 1885955428)
  {
    int v10 = 1935762278;
    goto LABEL_49;
  }

  return 4LL;
}

    if (v7 != v4)
    {
      LODWORD(v29) = *v7;
      LODWORD(v1) = *v7 >> 8;
      uint64_t v30 = 1LL;
      if (!v3) {
        return v29 | (((unint64_t)v1 & 0xFFFFFF) << 8) | (v30 << 32);
      }
      goto LABEL_61;
    }

        uint64_t v30 = v31;
        int v29 = a1[89];
        ++v31;
        if (v30 >= (a1[90] - v29) >> 3) {
          goto LABEL_61;
        }
      }

      __int16 v37 = (os_log_t *)sub_138E8(16);
      uint64_t v38 = *v37;
      if (!*v37 || !os_log_type_enabled(*v37, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_49;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      unsigned int v62 = 1024;
      int v63 = 1540;
      unint64_t v64 = 1024;
      LODWORD(v65[0]) = v31 - 1;
      uint64_t v35 = v38;
      unint64_t v36 = "%25s:%-5d Underlying input stream [%u] is not used in this AggregateDevice.";
      goto LABEL_48;
    }

  uint64_t v57 = v68;
  uint64_t v68 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v57);
  os_log_t v27 = (std::__shared_weak_count *)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1))
  {
    os_log_t v28 = (unint64_t *)(*((void *)&v57 + 1) + 8LL);
    do
      int v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  uint64_t v30 = (std::__shared_weak_count *)*((void *)&v68 + 1);
  if (*((void *)&v68 + 1))
  {
    uint64_t v31 = (unint64_t *)(*((void *)&v68 + 1) + 8LL);
    do
      os_log_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  sub_19DFC((uint64_t)&v66);
  return 1LL;
}

uint64_t sub_36C08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_36C74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(exception_object);
    int v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      if (v15)
      {
        uint64_t v20 = strrchr(v15, 47);
        if (v20) {
          int v21 = v20 + 1;
        }
        else {
          int v21 = v15;
        }
      }

      else
      {
        int v21 = 0LL;
      }

      int v33 = v17[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v33;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = v21;
      a12 = 1024;
      a13 = v14;
      unint64_t v34 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v35 = v19;
      uint32_t v36 = 40;
LABEL_28:
      _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&a9, v36);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        if (v15)
        {
          os_log_t v27 = strrchr(v15, 47);
          if (v27) {
            os_log_t v28 = v27 + 1;
          }
          else {
            os_log_t v28 = v15;
          }
        }

        else
        {
          os_log_t v28 = 0LL;
        }

        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = v28;
        HIWORD(a13) = 1024;
        a14 = v14;
        unint64_t v34 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v35 = v25;
        uint32_t v36 = 44;
        goto LABEL_28;
      }
    }

    else
    {
      int v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        if (v15)
        {
          uint64_t v31 = strrchr(v15, 47);
          if (v31) {
            os_log_t v32 = v31 + 1;
          }
          else {
            os_log_t v32 = v15;
          }
        }

        else
        {
          os_log_t v32 = 0LL;
        }

        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v32;
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = v14;
        unint64_t v34 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v35 = v30;
        uint32_t v36 = 34;
        goto LABEL_28;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x36C40LL);
}

unint64_t sub_36EF4( AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (AudioObjectHasProperty(*a1, a2))
  {
    ioDataSize[0] = 2003329396;
    *(void *)&ioDataSize[1] = 0LL;
    unsigned int PropertyData = 2003329396;
    uint64_t v9 = 0LL;
    ioDataSize[0] = sub_37408(*a1, a2, a3, a4);
    if (ioDataSize[0])
    {
      unsigned int PropertyData = AudioObjectGetPropertyData(*a1, a2, a3, a4, ioDataSize, outData);
      if (PropertyData) {
        uint64_t v9 = 0LL;
      }
      else {
        uint64_t v9 = outData[0];
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    unsigned int PropertyData = 2003332927;
  }

  return PropertyData | (unint64_t)(v9 << 32);
}

uint64_t sub_36FD4(void *a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1LL;
  if (*a2 <= 1818850144)
  {
    if (v2 <= 1735354733)
    {
      if (v2 <= 1684434035)
      {
        if (v2 <= 1667330159)
        {
          if (v2 == 1634429294) {
            return v3;
          }
          int v4 = 1634955892;
          goto LABEL_53;
        }

        if (v2 != 1667330160)
        {
          int v4 = 1668049764;
          goto LABEL_53;
        }

        int v10 = *(uint64_t (**)(void))(*a1 + 168LL);
        goto LABEL_75;
      }

      if (v2 > 1718839673)
      {
        if (v2 == 1718839674) {
          return v3;
        }
        int v4 = 1718843939;
        goto LABEL_53;
      }

      if (v2 != 1684434036)
      {
        int v4 = 1684629094;
        goto LABEL_53;
      }

      goto LABEL_46;
    }

    if (v2 <= 1768124269)
    {
      if (v2 > 1751412336)
      {
        if (v2 == 1751412337) {
          return v3;
        }
        int v4 = 1751737454;
      }

      else
      {
        if (v2 == 1735354734) {
          return v3;
        }
        int v4 = 1735356005;
      }

      goto LABEL_53;
    }

    if (v2 > 1818454125)
    {
      if (v2 == 1818454126)
      {
        uint64_t v6 = *(uint64_t (**)(void))(*a1 + 144LL);
      }

      else
      {
        if (v2 != 1818455662) {
          goto LABEL_80;
        }
        uint64_t v6 = *(uint64_t (**)(void))(*a1 + 160LL);
      }

LABEL_78:
      int v15 = (const void *)v6();
      if (v15) {
        goto LABEL_76;
      }
      return 0LL;
    }

    if (v2 == 1768124270)
    {
      int v10 = *(uint64_t (**)(void))(*a1 + 136LL);
      goto LABEL_75;
    }

    if (v2 == 1818452846)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*a1 + 152LL);
      goto LABEL_78;
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
LABEL_79:
  }

  int v22 = *(_WORD *)(v73 + 184);
  if ((v22 & 1) != 0) {
    uint64_t v23 = (uint64_t *)(a1 + 1);
  }
  else {
    uint64_t v23 = (uint64_t *)(a1 + 4);
  }
  int v24 = *v23;
  if (0xAAAAAAAAAAAAAAABLL * ((v23[1] - *v23) >> 3) <= a4)
  {
    int v63 = (os_log_t *)sub_138E8(13);
    unint64_t v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 248;
      _os_log_impl(&dword_0, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    BOOL v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v65, "Precondition failure.");
  }

  os_log_t v25 = *(std::__shared_weak_count **)(a2 + 88);
  if (!v25)
  {
    os_log_t v30 = 0LL;
    uint64_t v26 = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(a2 + 80);
  os_log_t v27 = (unint64_t *)&v25->__shared_weak_owners_;
  do
    os_log_t v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  int v29 = std::__shared_weak_count::lock(v25);
  os_log_t v30 = v29;
  if (!v29)
  {
    uint64_t v26 = 0LL;
    goto LABEL_31;
  }

  uint64_t v31 = (unint64_t *)&v29->__shared_weak_owners_;
  do
    os_log_t v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
  std::__shared_weak_count::__release_weak(v25);
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    unint64_t v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    os_log_t v25 = v30;
LABEL_31:
    std::__shared_weak_count::__release_weak(v25);
  }

  sub_3686A0(a1, a2, a3, a4, a5, a6);
  p_AudioObjectPropertyAddress buf = &v80;
  return sub_13850((uint64_t)p_buf);
}

    uint64_t v57 = (os_log_t *)sub_138E8(22);
    uint64_t v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)UInt32 v319 = 136315650;
      *(void *)&v319[4] = "VirtualStream.cpp";
      *(_WORD *)&v319[12] = 1024;
      *(_DWORD *)&v319[14] = 1586;
      *(_WORD *)&v319[18] = 1024;
      *(_DWORD *)&v319[20] = v52;
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d LPCM format with channel count %u is not available.",  v319,  0x18u);
    }
  }

  if (v45)
  {
    if (v50) {
      int v59 = _os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") ^ 1;
    }
    else {
      int v59 = 1;
    }
    buf[5] = v59;
  }

  uint64_t v60 = 0;
  switch(v49)
  {
    case 0:
      buf[0] = v30;
      buf[2] = v305;
      uint64_t v60 = v30;
      break;
    case 3:
      goto LABEL_91;
    case 4:
      uint64_t v60 = 0;
      *(_WORD *)&buf[3] = 257;
      buf[1] = 1;
      buf[5] = 1;
      goto LABEL_124;
    case 5:
      *(_WORD *)AudioObjectPropertyAddress buf = 257;
      *(_WORD *)&buf[3] = 257;
      uint64_t v60 = 1;
      buf[5] = 1;
      break;
    case 6:
      buf[5] = 1;
LABEL_91:
      if (v307[0] == v307[1])
      {
        unint64_t v64 = 0;
        uint64_t v69 = 1;
        buf[3] = 1;
      }

      else
      {
        uint64_t v61 = (char *)v307[0] + 56;
        do
        {
          int v63 = (*(v61 - 44) & 1) == 0 && *((_DWORD *)v61 - 12) == 1819304813 && *((_DWORD *)v61 - 7) == 6;
          unint64_t v64 = v63;
          if (v63) {
            break;
          }
          int v29 = v61 == v307[1];
          v61 += 56;
        }

        while (!v29);
        buf[3] = v64 ^ 1;
        BOOL v65 = (char *)v307[0] + 56;
        do
        {
          uint64_t v67 = (*(v65 - 44) & 1) == 0 && *((_DWORD *)v65 - 12) == 1819304813 && *((_DWORD *)v65 - 7) == 8;
          uint64_t v68 = v67;
          if (v67) {
            break;
          }
          int v29 = v65 == v307[1];
          v65 += 56;
        }

        while (!v29);
        uint64_t v69 = v68 ^ 1;
      }

      uint8_t buf[4] = v69;
      if (v64 | v69 ^ 1) {
        uint64_t v60 = 1;
      }
      else {
        uint64_t v60 = v30;
      }
      buf[0] = v60;
      buf[1] = 1;
LABEL_124:
      buf[2] = v305;
      break;
    default:
      break;
  }

  if (!v44) {
    buf[5] = 1;
  }
  if (!v60)
  {
    unint64_t v85 = (double *)v307[0];
    if (v307[0] != v307[1])
    {
      while (1)
      {
        unint64_t v86 = *((_DWORD *)v85 + 2);
        uint64_t v87 = v86 == 1633889587 || v86 == 1667588915;
        AudioStreamBasicDescription v88 = v87 || v86 == 1667326771;
        if (v88 && v85[6] >= 48000.0 && v85[5] <= 48000.0) {
          break;
        }
        v85 += 7;
        if (v85 == v307[1]) {
          goto LABEL_128;
        }
      }

      *(void *)&buf[8] = 0x40E7700000000000LL;
      buf[16] = 1;
    }
  }

    uint64_t v55 = (os_log_t *)sub_138E8(16);
    unint64_t v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v80 = "AggregateDevice_Common2.cpp";
      uint64_t v81 = 1024;
      uint64_t v82 = 1479;
      _os_log_impl(&dword_0, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Underlying output stream cache data:", buf, 0x12u);
    }

    uint64_t v57 = a1[92];
    if (a1[93] != v57)
    {
      uint64_t v58 = 0LL;
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v60 = *(void *)(v57 + 8 * v58);
        if (!v60) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v60 + 136LL))(v60))
        {
          uint64_t v61 = (os_log_t *)sub_138E8(16);
          unsigned int v62 = *v61;
          if (!*v61 || !os_log_type_enabled(*v61, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_97;
          }
          int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 160LL))(v60);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          __int16 v80 = "AggregateDevice_Common2.cpp";
          uint64_t v81 = 1024;
          uint64_t v82 = 1489;
          uint64_t v83 = 1024;
          LODWORD(v84[0]) = i - 1;
          WORD2(v84[0]) = 1024;
          *(_DWORD *)((char *)v84 + 6) = v63;
          unint64_t v64 = v62;
          BOOL v65 = "%25s:%-5d     stream %u > see output client stream %d";
          uint64_t v66 = 30;
          goto LABEL_96;
        }

        uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 144LL))(v60);
        uint64_t v70 = (os_log_t *)sub_138E8(16);
        __int128 v71 = *v70;
        if (!v69)
        {
          if (v71 && os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG))
          {
            __int128 v72 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 48LL))(v60);
            sub_2CC00(&__p, v72);
            uint64_t v73 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            __int16 v80 = "AggregateDevice_Common2.cpp";
            uint64_t v81 = 1024;
            uint64_t v82 = 1497;
            uint64_t v83 = 1024;
            LODWORD(v84[0]) = i - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = v73;
            _os_log_impl(&dword_0, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
          }

          unint64_t v74 = (os_log_t *)sub_138E8(16);
          uint64_t v75 = *v74;
          if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 56LL))(v60);
            sub_2CC00(&__p, v76);
            uint64_t v77 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            __int16 v80 = "AggregateDevice_Common2.cpp";
            uint64_t v81 = 1024;
            uint64_t v82 = 1498;
            uint64_t v83 = 1024;
            LODWORD(v84[0]) = i - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = v77;
            _os_log_impl(&dword_0, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
          }

          goto LABEL_97;
        }

        if (v71 && os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v80 = "AggregateDevice_Common2.cpp";
          uint64_t v81 = 1024;
          uint64_t v82 = 1493;
          uint64_t v83 = 1024;
          LODWORD(v84[0]) = i - 1;
          unint64_t v64 = v71;
          BOOL v65 = "%25s:%-5d     stream %u > hidden";
          goto LABEL_95;
        }

uint64_t sub_37408(AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  UInt32 outDataSize = 0;
  if (AudioObjectGetPropertyDataSize(a1, a2, a3, a4, &outDataSize)) {
    return 0LL;
  }
  else {
    return outDataSize;
  }
}

uint64_t sub_3743C(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (!a1)
  {
    int v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 331;
    int v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_ObjectGetPrope"
          "rtyDataSize: no plug-in";
LABEL_26:
    _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    goto LABEL_27;
  }

  if (!a3)
  {
    os_log_t v25 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 332;
    int v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: HP_HardwarePlugIn_ObjectGetPr"
          "opertyDataSize: no address";
    goto LABEL_26;
  }

  if (!a6)
  {
    uint64_t v26 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v43 = 1024;
      int v44 = 333;
      int v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outDataSize is NULL]: HP_HardwarePlugIn_ObjectG"
            "etPropertyDataSize: no place to store return value";
      goto LABEL_26;
    }

void sub_37A14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    sub_93128((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x375D4LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_37AEC(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a2;
  uint64_t v5 = 8LL;
  if (*a2 > 1818455661)
  {
    if (v4 <= 1870030193)
    {
      if (v4 <= 1819173228)
      {
        if (v4 == 1818455662) {
          return v5;
        }
        if (v4 == 1818850926) {
          return 4LL;
        }
        int v8 = 1819107691;
        goto LABEL_52;
      }

      if (v4 > 1836411235)
      {
        if (v4 != 1836411236)
        {
          int v6 = 1869180523;
          goto LABEL_56;
        }
      }

      else if (v4 != 1819173229)
      {
        int v6 = 1819569763;
        goto LABEL_56;
      }
    }

    else
    {
      int v7 = a2[1];
      if (v4 <= 1937009954)
      {
        if (v4 > 1936092275)
        {
          if (v4 != 1936092276)
          {
            if (v4 == 1936482681)
            {
              uint64_t v11 = 66LL;
              if (v7 == 1768845428) {
                uint64_t v11 = 63LL;
              }
              uint64_t v12 = 65LL;
              if (v7 == 1768845428) {
                uint64_t v12 = 62LL;
              }
              return (16 * ((LODWORD(a1[v11]) - LODWORD(a1[v12])) >> 3)) | 8;
            }

            return sub_689F8((uint64_t)a1, a2, a3, a4);
          }
        }

        else if (v4 != 1870030194)
        {
          int v6 = 1935763060;
          goto LABEL_56;
        }

        return 4LL;
      }

      if (v4 <= 1953653101)
      {
        if (v4 == 1937009955)
        {
          BOOL v14 = a1 + 62;
          if (v7 == 1735159650) {
            return 4 * (((a1[63] - *v14) >> 3) + ((a1[66] - a1[65]) >> 3));
          }
          BOOL v15 = v7 == 1768845428;
          if (v7 == 1768845428) {
            uint64_t v16 = a1 + 63;
          }
          else {
            uint64_t v16 = a1 + 66;
          }
          if (!v15) {
            BOOL v14 = a1 + 65;
          }
          return ((*v16 - *v14) >> 1) & 0xFFFFFFFCLL;
        }

        if (v4 == 1937077093)
        {
          uint64_t v9 = 66LL;
          if (v7 == 1768845428) {
            uint64_t v9 = 63LL;
          }
          uint64_t v10 = 65LL;
          if (v7 == 1768845428) {
            uint64_t v10 = 62LL;
          }
          return (((a1[v9] - a1[v10]) >> 1) & 0xFFFFFFFC) + 12;
        }

        return sub_689F8((uint64_t)a1, a2, a3, a4);
      }

      if (v4 != 1969841184)
      {
        int v6 = 1953653102;
        goto LABEL_56;
      }
    }

    return v5;
  }

  if (v4 <= 1718843938)
  {
    if (v4 > 1668049763)
    {
      if (v4 > 1684629093)
      {
        if (v4 != 1684629094)
        {
          int v6 = 1718839674;
          goto LABEL_56;
        }
      }

      else if (v4 != 1668049764)
      {
        int v6 = 1684434036;
        goto LABEL_56;
      }

      return 4LL;
    }

    if (v4 == 1634429294) {
      return 4LL;
    }
    if (v4 != 1634955892)
    {
      int v8 = 1667330160;
LABEL_52:
      if (v4 != v8) {
        return sub_689F8((uint64_t)a1, a2, a3, a4);
      }
    }

    return v5;
  }

  if (v4 > 1751737453)
  {
    if (v4 > 1818452845)
    {
      if (v4 == 1818452846) {
        return v5;
      }
      int v8 = 1818454126;
    }

    else
    {
      if (v4 == 1751737454) {
        return 4LL;
      }
      int v8 = 1768124270;
    }

    goto LABEL_52;
  }

  if (v4 > 1735356004)
  {
    if (v4 != 1735356005)
    {
      int v6 = 1751412337;
      goto LABEL_56;
    }

    return 4LL;
  }

  if (v4 == 1718843939) {
    return 16LL;
  }
  int v6 = 1735354734;
LABEL_56:
  if (v4 == v6) {
    return 4LL;
  }
  return sub_689F8((uint64_t)a1, a2, a3, a4);
}

void sub_37E94(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, pid_t *a6)
{
  int v10 = *a2;
  int v11 = a2[1];
  if (*a2 > 1818455661)
  {
    if (v10 <= 1870030193)
    {
      if (v10 <= 1819173228)
      {
        switch(v10)
        {
          case 1818455662:
            int v72 = *a5;
            if (v72 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
            {
              unint64_t v165 = (os_log_t *)sub_138E8(13);
              unint64_t v166 = *v165;
              if (*v165 && os_log_type_enabled(*v165, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                UInt32 v171 = "HP_Device.cpp";
                __int16 v172 = 1024;
                int v173 = 785;
                _os_log_impl( &dword_0,  v166,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyEl ementNumberName",  buf,  0x12u);
              }

              exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
              *(void *)exceptiouint64_t n = &off_4865A0;
              exception[2] = 561211770;
            }

            uint64_t v18 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 160LL))(a1, a2);
            break;
          case 1818850926:
            int v70 = *a5;
            if (v70 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
            {
              uint64_t v162 = (os_log_t *)sub_138E8(13);
              int v163 = *v162;
              if (*v162 && os_log_type_enabled(*v162, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                UInt32 v171 = "HP_Device.cpp";
                __int16 v172 = 1024;
                int v173 = 828;
                _os_log_impl( &dword_0,  v163,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDeviceIsAlive",  buf,  0x12u);
              }

              uint64_t v164 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v164 = &off_4865A0;
              v164[2] = 561211770;
            }

            pid_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
            goto LABEL_130;
          case 1819107691:
            int v32 = *a5;
            if (v32 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
            {
              int v117 = (os_log_t *)sub_138E8(13);
              int v118 = *v117;
              if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                UInt32 v171 = "HP_Device.cpp";
                __int16 v172 = 1024;
                int v173 = 770;
                _os_log_impl( &dword_0,  v118,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyManufacturer",  buf,  0x12u);
              }

              int v119 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v119 = &off_4865A0;
              v119[2] = 561211770;
            }

            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
            break;
          default:
            goto LABEL_137;
        }
      }

      else if (v10 > 1836411235)
      {
        if (v10 != 1836411236)
        {
          if (v10 == 1869180523)
          {
            int v38 = *a5;
            if (v38 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
            {
              int v123 = (os_log_t *)sub_138E8(13);
              int v124 = *v123;
              if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                UInt32 v171 = "HP_Device.cpp";
                __int16 v172 = 1024;
                int v173 = 863;
                _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyHogMode",  buf,  0x12u);
              }

              int v125 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v125 = &off_4865A0;
              v125[2] = 561211770;
            }

            pid_t v13 = dword_48C080;
            if (dword_48C080 == -1)
            {
              pid_t v13 = getpid();
              dword_48C080 = v13;
            }

            goto LABEL_130;
          }

          goto LABEL_137;
        }

        int v59 = *a5;
        if (v59 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          int v138 = (os_log_t *)sub_138E8(13);
          int v139 = *v138;
          if (*v138 && os_log_type_enabled(*v138, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 800;
            _os_log_impl( &dword_0,  v139,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyModelUID",  buf,  0x12u);
          }

          int v140 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v140 = &off_4865A0;
          v140[2] = 561211770;
        }

        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1);
      }

      else
      {
        if (v10 != 1819173229)
        {
          if (v10 == 1819569763)
          {
            int v16 = *a5;
            if (v16 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
            {
              uint64_t v105 = (os_log_t *)sub_138E8(13);
              uint64_t v106 = *v105;
              if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                UInt32 v171 = "HP_Device.cpp";
                __int16 v172 = 1024;
                int v173 = 868;
                _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyLatency",  buf,  0x12u);
              }

              uint64_t v107 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v107 = &off_4865A0;
              v107[2] = 561211770;
            }

            pid_t v13 = (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 440LL))(a1, v11 == 1768845428);
            goto LABEL_130;
          }

          goto LABEL_137;
        }

        int v54 = *a5;
        if (v54 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          uint64_t v135 = (os_log_t *)sub_138E8(13);
          char v136 = *v135;
          if (*v135 && os_log_type_enabled(*v135, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 765;
            _os_log_impl( &dword_0,  v136,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyName",  buf,  0x12u);
          }

          int v137 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v137 = &off_4865A0;
          v137[2] = 561211770;
        }

        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      }

      goto LABEL_135;
    }

    if (v10 <= 1937009954)
    {
      if (v10 > 1936092275)
      {
        if (v10 == 1936092276)
        {
          int v66 = *a5;
          if (v66 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
          {
            int v150 = (os_log_t *)sub_138E8(13);
            int v151 = *v150;
            if (*v150 && os_log_type_enabled(*v150, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              UInt32 v171 = "HP_Device.cpp";
              __int16 v172 = 1024;
              int v173 = 853;
              _os_log_impl( &dword_0,  v151,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDevi ceCanBeDefaultSystemDevice",  buf,  0x12u);
            }

            int v152 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v152 = &off_4865A0;
            v152[2] = 561211770;
          }

          pid_t v13 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 208LL))(a1, v11 == 1768845428, 1LL);
          goto LABEL_130;
        }

        if (v10 == 1936482681)
        {
          unsigned int v40 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2);
          if (*a5 < v40)
          {
            int v126 = (os_log_t *)sub_138E8(13);
            int v127 = *v126;
            if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              UInt32 v171 = "HP_Device.cpp";
              __int16 v172 = 1024;
              int v173 = 916;
              _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyStre amConfiguration",  buf,  0x12u);
            }

            int v128 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v128 = &off_4865A0;
            v128[2] = 561211770;
          }

          *a5 = v40;
          uint64_t v41 = 528LL;
          if (v11 == 1768845428) {
            uint64_t v41 = 504LL;
          }
          uint64_t v42 = *(void *)(a1 + v41);
          if (v11 == 1768845428) {
            uint64_t v43 = 496LL;
          }
          else {
            uint64_t v43 = 520LL;
          }
          unint64_t v44 = (unint64_t)(v42 - *(void *)(a1 + v43)) >> 3;
          *a6 = v44;
          if ((_DWORD)v44)
          {
            unint64_t v45 = 0LL;
            uint64_t v46 = a6 + 4;
            do
            {
              unint64_t v47 = *(_DWORD **)(*(void *)(*(void *)(a1 + v43) + 8 * v45) + 104LL);
              *((_DWORD *)v46 - 2) = v47[11];
              *((_DWORD *)v46 - 1) = sub_75130(v47, *(_DWORD *)(a1 + 488));
              void *v46 = 0LL;
              v46 += 2;
              ++v45;
            }

            while (v45 < *a6);
          }

          return;
        }

        goto LABEL_137;
      }

      if (v10 != 1870030194)
      {
        if (v10 == 1935763060)
        {
          int v14 = *a5;
          if (v14 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
          {
            unint64_t v99 = (os_log_t *)sub_138E8(13);
            uint64_t v100 = *v99;
            if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              UInt32 v171 = "HP_Device.cpp";
              __int16 v172 = 1024;
              int v173 = 909;
              _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertySafetyOffset",  buf,  0x12u);
            }

            uint64_t v101 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v101 = &off_4865A0;
            v101[2] = 561211770;
          }

          pid_t v13 = (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 448LL))(a1, v11 == 1768845428);
          goto LABEL_130;
        }

        goto LABEL_137;
      }

      int v61 = *a5;
      if (v61 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        int v144 = (os_log_t *)sub_138E8(13);
        int v145 = *v144;
        if (*v144 && os_log_type_enabled(*v144, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          UInt32 v171 = "HP_Device.cpp";
          __int16 v172 = 1024;
          int v173 = 858;
          _os_log_impl( &dword_0,  v145,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDeviceProcessorOverload",  buf,  0x12u);
        }

        int v146 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v146 = &off_4865A0;
        v146[2] = 561211770;
      }

      goto LABEL_115;
    }

    if (v10 > 1953653101)
    {
      if (v10 == 1953653102)
      {
        int v68 = *a5;
        if (v68 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          int v156 = (os_log_t *)sub_138E8(13);
          int v157 = *v156;
          if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 805;
            _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyTransportType",  buf,  0x12u);
          }

          int v158 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v158 = &off_4865A0;
          v158[2] = 561211770;
        }

        pid_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
        goto LABEL_130;
      }

      if (v10 != 1969841184) {
        goto LABEL_137;
      }
      int v49 = *a5;
      if (v49 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        int v132 = (os_log_t *)sub_138E8(13);
        int v133 = *v132;
        if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          UInt32 v171 = "HP_Device.cpp";
          __int16 v172 = 1024;
          int v173 = 795;
          _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDeviceUID",  buf,  0x12u);
        }

        int v134 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v134 = &off_4865A0;
        v134[2] = 561211770;
      }

      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
      goto LABEL_135;
    }

    if (v10 == 1937009955)
    {
      if (v11 == 1735159650)
      {
        *(_WORD *)AudioObjectPropertyAddress buf = 256;
        unsigned int v62 = operator new(2uLL);
        _WORD *v62 = 256;
        int v63 = v62 + 1;
        LODWORD(v64) = ((*(void *)(a1 + 528) - *(void *)(a1 + 520)) >> 3)
                     + ((*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 3);
      }

      else
      {
        LOBYTE(__p[0]) = v11 != 1768845428;
        unsigned int v62 = operator new(1uLL);
        *(_BYTE *)unsigned int v62 = v11 != 1768845428;
        int v63 = (char *)v62 + 1;
        uint64_t v73 = 528LL;
        if (v11 == 1768845428) {
          uint64_t v73 = 504LL;
        }
        uint64_t v74 = 520LL;
        if (v11 == 1768845428) {
          uint64_t v74 = 496LL;
        }
        unint64_t v64 = (*(void *)(a1 + v73) - *(void *)(a1 + v74)) >> 3;
      }

      LODWORD(v75) = 0;
      unsigned int v76 = *a5 >> 2;
      else {
        unint64_t v64 = v64;
      }
      uint64_t v77 = v62;
      do
      {
        if (*v77) {
          uint64_t v78 = 528LL;
        }
        else {
          uint64_t v78 = 504LL;
        }
        if (*v77) {
          uint64_t v79 = 520LL;
        }
        else {
          uint64_t v79 = 496LL;
        }
        uint64_t v80 = *(void *)(a1 + v78);
        uint64_t v81 = *(void *)(a1 + v79);
        unint64_t v82 = v80 - v81;
        if (((v80 - v81) & 0x7FFFFFFF8LL) != 0 && v75 < v64)
        {
          unint64_t v84 = 0LL;
          uint64_t v85 = v75;
          unint64_t v86 = (v82 >> 3);
          uint64_t v87 = &a6[v75];
          do
          {
            v87[v84] = *(_DWORD *)(*(void *)(v81 + 8 * v84) + 8LL);
            ++v84;
            unint64_t v75 = v85 + v84;
          }

          while (v84 < v86 && v75 < v64);
        }

        ++v77;
      }

      while (v77 != v63);
      *a5 = 4 * v64;
      operator delete(v62);
      return;
    }

    if (v10 != 1937077093) {
      goto LABEL_137;
    }
    int v19 = *a5;
    if (v19 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
    {
      uint64_t v111 = (os_log_t *)sub_138E8(13);
      __int128 v112 = *v111;
      if (*v111 && os_log_type_enabled(*v111, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        UInt32 v171 = "HP_Device.cpp";
        __int16 v172 = 1024;
        int v173 = 933;
        _os_log_impl( &dword_0,  v112,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyIOProcStreamUsage",  buf,  0x12u);
      }

      uint64_t v113 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v113 = &off_4865A0;
      v113[2] = 561211770;
    }

    uint64_t v20 = 528LL;
    if (v11 == 1768845428) {
      uint64_t v20 = 504LL;
    }
    uint64_t v21 = 520LL;
    uint64_t v22 = *(void *)(a1 + v20);
    if (v11 == 1768845428) {
      uint64_t v21 = 496LL;
    }
    unint64_t v23 = (unint64_t)(v22 - *(void *)(a1 + v21)) >> 3;
    uint64_t v24 = v23;
    os_log_t v25 = (unsigned __int8 *)operator new[](v23);
    bzero(v25, v23);
    uint64_t v26 = *(void *)(a1 + 464);
    if (!v26) {
      goto LABEL_165;
    }
    os_log_t v27 = *(void ***)(v26 + 8);
    os_log_t v28 = *(void ***)(v26 + 16);
    if (v27 == v28) {
      goto LABEL_165;
    }
    int v29 = *(void **)a6;
    os_log_t v30 = *(void ***)(v26 + 8);
    while (*v30 != v29)
    {
      if ((void *)(*v30)[1] == v29) {
        goto LABEL_173;
      }
      if (++v30 == v28) {
        goto LABEL_165;
      }
    }

    if (!v29)
    {
LABEL_165:
      uint64_t v88 = *(void *)(a1 + 472);
      if (!v88) {
        goto LABEL_174;
      }
      os_log_t v27 = *(void ***)(v88 + 8);
      os_log_t v28 = *(void ***)(v88 + 16);
      if (v27 == v28) {
        goto LABEL_174;
      }
      int v29 = *(void **)a6;
      uint64_t v89 = *(void ***)(v88 + 8);
      while (*v89 != v29)
      {
        if ((void *)(*v89)[1] == v29) {
          goto LABEL_173;
        }
        if (++v89 == v28) {
          goto LABEL_174;
        }
      }

      if (!v29) {
        goto LABEL_174;
      }
    }

LABEL_173:
    sub_2C2160(v27, v28, v29, v11 == 1768845428, v23, (uint64_t)v25);
LABEL_174:
    a6[2] = v23;
    if ((_DWORD)v23)
    {
      uint64_t v90 = a6 + 3;
      AudioStreamBasicDescription v91 = v25;
      do
      {
        int v92 = *v91++;
        *v90++ = v92;
        --v24;
      }

      while (v24);
    }

    operator delete[](v25);
    return;
  }

  if (v10 <= 1718843938)
  {
    if (v10 <= 1668049763)
    {
      if (v10 == 1634429294)
      {
        size_t v71 = *a5;
        if (v71 < 4)
        {
          bzero(a6, v71);
          *a5 = 0;
        }

        else
        {
          *a6 = *(_DWORD *)(a1 + 8);
          *a5 = 4;
        }

        return;
      }

      if (v10 == 1634955892)
      {
        int v69 = *a5;
        if (v69 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          int v159 = (os_log_t *)sub_138E8(13);
          int v160 = *v159;
          if (*v159 && os_log_type_enabled(*v159, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 961;
            _os_log_impl( &dword_0,  v160,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyActualSampleRate",  buf,  0x12u);
          }

          int v161 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v161 = &off_4865A0;
          v161[2] = 561211770;
        }

        *(double *)a6 = (*(double (**)(uint64_t))(*(void *)a1 + 640LL))(a1);
        return;
      }

      if (v10 != 1667330160) {
        goto LABEL_137;
      }
      int v31 = *a5;
      if (v31 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        __int128 v114 = (os_log_t *)sub_138E8(13);
        int v115 = *v114;
        if (*v114 && os_log_type_enabled(*v114, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          UInt32 v171 = "HP_Device.cpp";
          __int16 v172 = 1024;
          int v173 = 790;
          _os_log_impl( &dword_0,  v115,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyConfigur ationApplication",  buf,  0x12u);
        }

        int v116 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v116 = &off_4865A0;
        v116[2] = 561211770;
      }

      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL))(a1);
      goto LABEL_135;
    }

    if (v10 > 1684629093)
    {
      if (v10 != 1684629094)
      {
        if (v10 == 1718839674)
        {
          int v33 = *a5;
          if (v33 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
          {
            int v120 = (os_log_t *)sub_138E8(13);
            uint64_t v121 = *v120;
            if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              UInt32 v171 = "HP_Device.cpp";
              __int16 v172 = 1024;
              int v173 = 873;
              _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyBufferFrameSize",  buf,  0x12u);
            }

            double v122 = __cxa_allocate_exception(0x10uLL);
            *(void *)double v122 = &off_4865A0;
            v122[2] = 561211770;
          }

          *a6 = *(_DWORD *)(a1 + 488);
          uint64_t v34 = sub_138E8(5);
          if ((*(_BYTE *)(v34 + 8) & 1) != 0)
          {
            uint64_t v35 = *(os_log_s **)v34;
            if (*(void *)v34)
            {
              if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
              {
                pid_t v36 = *a6;
                (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(__p, a1);
                __int16 v37 = v169 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                UInt32 v171 = "HP_Device.cpp";
                __int16 v172 = 1024;
                int v173 = 875;
                __int16 v174 = 1024;
                pid_t v175 = v36;
                __int16 v176 = 2080;
                uint64_t v177 = v37;
                _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client request to get buffer frame size (%u) on VAD: '%s'.",  buf,  0x22u);
                if (v169 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }

          return;
        }

        goto LABEL_137;
      }

      int v55 = *a5;
      if (v55 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        unint64_t v56 = (os_log_t *)sub_138E8(13);
        uint64_t v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          UInt32 v171 = "HP_Device.cpp";
          __int16 v172 = 1024;
          int v173 = 833;
          _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDeviceHasChanged",  buf,  0x12u);
        }

        uint64_t v58 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v58 = &off_4865A0;
        v58[2] = 561211770;
      }
    }

    else
    {
      if (v10 != 1668049764)
      {
        if (v10 == 1684434036)
        {
          int v15 = *a5;
          if (v15 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
          {
            __int128 v102 = (os_log_t *)sub_138E8(13);
            __int128 v103 = *v102;
            if (*v102 && os_log_type_enabled(*v102, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              UInt32 v171 = "HP_Device.cpp";
              __int16 v172 = 1024;
              int v173 = 848;
              _os_log_impl( &dword_0,  v103,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDevi ceCanBeDefaultDevice",  buf,  0x12u);
            }

            uint64_t v104 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v104 = &off_4865A0;
            v104[2] = 561211770;
          }

          pid_t v13 = (*(uint64_t (**)(uint64_t, BOOL, void))(*(void *)a1 + 208LL))(a1, v11 == 1768845428, 0LL);
          goto LABEL_130;
        }

        goto LABEL_137;
      }

      int v50 = *a5;
      if (v50 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        uint64_t v51 = (os_log_t *)sub_138E8(13);
        uint64_t v52 = *v51;
        if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          UInt32 v171 = "HP_Device.cpp";
          __int16 v172 = 1024;
          int v173 = 823;
          _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyClockDomain",  buf,  0x12u);
        }

        unint64_t v53 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v53 = &off_4865A0;
        v53[2] = 561211770;
      }
    }

LABEL_115:
    *a6 = 0;
    return;
  }

  if (v10 > 1751737453)
  {
    if (v10 > 1818452845)
    {
      if (v10 == 1818452846)
      {
        int v67 = *a5;
        if (v67 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          int v153 = (os_log_t *)sub_138E8(13);
          int v154 = *v153;
          if (*v153 && os_log_type_enabled(*v153, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 780;
            _os_log_impl( &dword_0,  v154,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyElementCategoryName",  buf,  0x12u);
          }

          int v155 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v155 = &off_4865A0;
          v155[2] = 561211770;
        }

        uint64_t v18 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 152LL))(a1, a2);
      }

      else
      {
        if (v10 != 1818454126) {
          goto LABEL_137;
        }
        int v48 = *a5;
        if (v48 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          int v129 = (os_log_t *)sub_138E8(13);
          int v130 = *v129;
          if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 775;
            _os_log_impl( &dword_0,  v130,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyElementName",  buf,  0x12u);
          }

          int v131 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v131 = &off_4865A0;
          v131[2] = 561211770;
        }

        uint64_t v18 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 144LL))(a1, a2);
      }
    }

    else
    {
      if (v10 == 1751737454)
      {
LABEL_76:
        int v39 = *a5;
        if (v39 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          uint64_t v93 = (os_log_t *)sub_138E8(13);
          uint64_t v94 = *v93;
          if (*v93 && os_log_type_enabled(*v93, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 977;
            _os_log_impl( &dword_0,  v94,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyIsHidden",  buf,  0x12u);
          }

          unsigned int v95 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v95 = &off_4865A0;
          v95[2] = 561211770;
        }

        pid_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
        goto LABEL_130;
      }

      if (v10 != 1768124270)
      {
LABEL_137:
        sub_6A140(a1, a2, a3, a4, a5, (uint64_t)a6);
        return;
      }

      int v17 = *a5;
      if (v17 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        uint64_t v108 = (os_log_t *)sub_138E8(13);
        __int128 v109 = *v108;
        if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          UInt32 v171 = "HP_Device.cpp";
          __int16 v172 = 1024;
          int v173 = 967;
          _os_log_impl( &dword_0,  v109,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyIcon",  buf,  0x12u);
        }

        __int128 v110 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int128 v110 = &off_4865A0;
        v110[2] = 561211770;
      }

      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
    }

    if (!a5)
    {
      int v65 = 1;
      goto LABEL_118;
    }

    goto LABEL_116;
  }

  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    int v7 = (os_log_s *)*(id *)sub_138E8(13);
    int v8 = v7;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7359;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread",  buf,  0x12u);
    }
  }

  if ((sub_1CBD44() & 1) == 0)
  {
    uint64_t v83 = sub_138E8(13);
    unint64_t v84 = sub_8C7D4(1, *(void **)v83, *(void *)(v83 + 8));
    uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
    unint64_t v86 = v85;
    if (v85 && os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7360;
      _os_log_impl(&dword_0, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v87, "Precondition failure.");
  }

  int v10 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9) {
    return;
  }
  __int128 v102 = 0;
  uint64_t v100 = 0;
  do
  {
    int v11 = (void *)*v10;
    int v12 = (void *)sub_135A0(*v10, 1);
    if (sub_26B0D4(a1, v12, 1886613611))
    {
      *(void *)AudioObjectPropertyAddress buf = 0x273706163LL;
      *(_DWORD *)&buf[8] = 0;
      pid_t v13 = sub_B8C00((uint64_t)v11);
      int v15 = v14;
      __int128 v109 = *(void *)"cpsdptuo";
      __int128 v110 = 0;
      int v16 = CFStringCreateWithBytes(0LL, (const UInt8 *)"dsp chain name", 14LL, 0x8000100u, 0);
      v108[1] = v16;
      if (!v16)
      {
        int v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v72, "Could not construct");
      }

      v108[0] = 0LL;
      uint64_t v107 = 8;
      uint64_t v107 = (*(uint64_t (**)(void *, uint64_t *, uint64_t, CFStringRef))(*v11 + 48LL))(v11, &v109, 8LL, v16);
      if (v107 != 8)
      {
        int v17 = (os_log_s *)*(id *)sub_138E8(13);
        uint64_t v18 = v17;
        if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7372;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v107;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid chain name size of %u returned by GetPropertyDataSize",  buf,  0x18u);
        }
      }

      (*(void (**)(void *, uint64_t *, uint64_t, CFStringRef, int *, CFTypeRef *))(*v11 + 56LL))( v11,  &v109,  8LL,  v16,  &v107,  v108);
      if (v108[0])
      {
        sub_7F234(&cf, v108[0]);
        if (!cf)
        {
          uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v73, "Could not construct");
        }

        sub_7D084(&__p, "<none>");
        int v19 = (const __CFString *)cf;
        else {
          *(std::string *)AudioObjectPropertyAddress buf = __p;
        }
        if (v19 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v19)))
        {
          sub_7D354((uint64_t)&v104, v19);
        }

        else
        {
          uint64_t v104 = *(std::string *)buf;
        }

        if (cf) {
          CFRelease(cf);
        }
      }

      else
      {
        sub_7D084(&v104, "<none>");
      }

      CFRelease(v16);
      std::string::size_type size = v104.__r_.__value_.__s.__size_;
      if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0)
      {
        uint64_t v22 = &v104;
      }

      else
      {
        std::string::size_type size = v104.__r_.__value_.__l.__size_;
        uint64_t v22 = (std::string *)v104.__r_.__value_.__r.__words[0];
      }

      unint64_t v23 = (char *)v22 + size;
      if (size >= 7)
      {
        uint64_t v24 = v22;
        do
        {
          os_log_t v25 = (char *)memchr(v24, 115, size - 6);
          if (!v25) {
            break;
          }
          uint64_t v26 = *(_DWORD *)v25 == 1634037875 && *(_DWORD *)(v25 + 3) == 1919249249;
          if (v26) {
            goto LABEL_44;
          }
          uint64_t v24 = (std::string *)(v25 + 1);
          std::string::size_type size = v23 - (char *)v24;
        }

        while (v23 - (char *)v24 > 6);
      }

      os_log_t v25 = v23;
LABEL_44:
      *((void *)&v28 + 1) = v15;
      *(void *)&os_log_t v28 = v13;
      os_log_t v27 = v28 >> 32;
      os_log_t v30 = v25 != v23 && v25 - (char *)v22 != -1;
      if ((v27 & 0xFF00000000LL) != 0) {
        int v31 = v27 != 0;
      }
      else {
        int v31 = v30;
      }
      int v32 = *(id *)sub_138E8(2);
      int v33 = v32;
      if (v32)
      {
        uint64_t v34 = (os_log_s *)v32;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = (char)v104.__r_.__value_.__s.__size_;
          pid_t v36 = v104.__r_.__value_.__r.__words[0];
          __int128 v109 = v11[72];
          sub_33464(&__p, (unsigned int *)&v109);
          __int16 v37 = &v104;
          if (v35 < 0) {
            __int16 v37 = (std::string *)v36;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7396;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v31;
          *(_WORD *)&_BYTE buf[24] = 2080;
          *(void *)&buf[26] = v37;
          *(_WORD *)&buf[34] = 2080;
          *(void *)&buf[36] = p_p;
          _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d SpeakerProtectionActive: %d, chainName: %s for VAD %s",  buf,  0x2Cu);
        }
      }

      ++v102;
      v100 += v31;
    }

    ++v10;
  }

  while (v10 != v9);
  if (v102 <= 0) {
    return;
  }
  if (v102 > 2)
  {
LABEL_156:
    uint64_t v88 = sub_138E8(2);
    uint64_t v89 = sub_8C7D4(3, *(void **)v88, *(void *)(v88 + 8));
    uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
    AudioStreamBasicDescription v91 = v90;
    if (v90 && os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      int v92 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7411;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v102;
      *(_WORD *)&_BYTE buf[24] = 1024;
      *(_DWORD *)&buf[26] = v100;
      *(_WORD *)&_BYTE buf[30] = 1024;
      *(_DWORD *)&uint8_t buf[32] = v92;
      _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Speaker protection checks failed! VADs routed to speaker: %d, VADs with speaker protection: %d, Policy Mute: %d",  buf,  0x24u);
    }

    uint64_t v81 = *(void **)sub_138E8(2);
    uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioObjectPropertyAddress buf = 0;
      _os_log_fault_impl(&dword_0, (os_log_t)v81, OS_LOG_TYPE_FAULT, "Speaker Protection checks failed", buf, 2u);
    }

    goto LABEL_151;
  }

  if (v102 != 2)
  {
    if (v100 < 2) {
      return;
    }
    goto LABEL_156;
  }

  if (!*(_BYTE *)(a1 + 168) || v100 > 1) {
    goto LABEL_156;
  }
}

LABEL_135:
    *(void *)a6 = v18;
    return;
  }

  if (v10 > 1735356004)
  {
    if (v10 == 1735356005)
    {
      int v65 = *a5;
      if (v65 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        int v147 = (os_log_t *)sub_138E8(13);
        int v148 = *v147;
        if (*v147 && os_log_type_enabled(*v147, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          UInt32 v171 = "HP_Device.cpp";
          __int16 v172 = 1024;
          int v173 = 843;
          _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDeviceIs RunningSomewhere",  buf,  0x12u);
        }

        double v149 = __cxa_allocate_exception(0x10uLL);
        *(void *)double v149 = &off_4865A0;
        v149[2] = 561211770;
      }

      pid_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 520LL))(a1);
      goto LABEL_130;
    }

    if (v10 == 1751412337) {
      goto LABEL_76;
    }
    goto LABEL_137;
  }

  if (v10 != 1718843939)
  {
    if (v10 == 1735354734)
    {
      int v12 = *a5;
      if (v12 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        unint64_t v96 = (os_log_t *)sub_138E8(13);
        uint64_t v97 = *v96;
        if (*v96)
        {
          if (os_log_type_enabled(*v96, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            UInt32 v171 = "HP_Device.cpp";
            __int16 v172 = 1024;
            int v173 = 838;
            _os_log_impl( &dword_0,  v97,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDeviceIsRunning",  buf,  0x12u);
          }
        }

        __int128 v98 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int128 v98 = &off_4865A0;
        v98[2] = 561211770;
      }

      pid_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512LL))(a1);
LABEL_130:
      *a6 = v13;
      return;
    }

    goto LABEL_137;
  }

  int v60 = *a5;
  if (v60 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
  {
    int v141 = (os_log_t *)sub_138E8(13);
    int v142 = *v141;
    if (*v141 && os_log_type_enabled(*v141, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      UInt32 v171 = "HP_Device.cpp";
      __int16 v172 = 1024;
      int v173 = 879;
      _os_log_impl( &dword_0,  v142,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyBufferFrameSizeRange",  buf,  0x12u);
    }

    int v143 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v143 = &off_4865A0;
    v143[2] = 561211770;
  }

  *(double *)a6 = (double)(*(unsigned int (**)(uint64_t))(*(void *)a1 + 464LL))(a1);
  *((double *)a6 + 1) = (double)(*(unsigned int (**)(uint64_t))(*(void *)a1 + 472LL))(a1);
}

uint64_t sub_39CC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 1008);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 272LL))(result);
  }
  return result;
}

BOOL sub_39CE0(uint64_t a1)
{
  if (!*(void *)(a1 + 416)) {
    return 0LL;
  }
  UInt32 ioDataSize = 4;
  unsigned int outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if (AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), &inAddress, 0, 0LL, &ioDataSize, &outData)) {
    return 0LL;
  }
  if (outData >= 2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      pid_t v13 = "AggregateDevice_CommonBase.cpp";
      __int16 v14 = 1024;
      int v15 = 564;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a non-BOOLean value",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL returned a non-BOOLean value");
  }

  if (ioDataSize != 4)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        pid_t v13 = "AggregateDevice_CommonBase.cpp";
        __int16 v14 = 1024;
        int v15 = 565;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned an oddly sized value",  buf,  0x12u);
      }
    }

    int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "The HAL returned an oddly sized value");
  }

  return outData == 1;
}

void sub_39EDC(_Unwind_Exception *a1)
{
}

uint64_t sub_39EFC(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    uint64_t result = sub_37408(*a2, inAddress, 0, 0LL);
    UInt32 ioDataSize = result;
    if ((_DWORD)result)
    {
      uint64_t outData = 0LL;
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, 0, 0LL, &ioDataSize, &outData);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        uint64_t v7 = outData;
        *(_BYTE *)(a1 + 24) = 1;
        *(void *)(a1 + 8) = &off_47D068;
        *(void *)(a1 + 16) = v7;
        v8[0] = &off_47D068;
        v8[1] = 0LL;
        return (uint64_t)sub_39FD8(v8);
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

  return result;
}

void *sub_39FD8(void *a1)
{
  *a1 = off_485B28;
  int v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFArrayRef sub_3A014(const __CFArray *result)
{
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

CFNumberRef sub_3A030(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }

  return result;
}

void sub_3A064(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = sub_138E8(1);
  uint64_t v10 = sub_138E8(31);
  char v11 = 0;
  uint64_t v12 = 0LL;
  *(void *)__int16 v37 = 0x100000002LL;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&v37[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1LL;
    if ((v15 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_7:
  int v16 = *(os_log_s **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 48);
    *(_DWORD *)__int16 v37 = 136316162;
    *(void *)&v37[4] = "VirtualAudio_IONotificationManager.cpp";
    __int16 v38 = 1024;
    int v39 = 184;
    __int16 v40 = 2048;
    uint64_t v41 = (const char *)(v8 != a2);
    __int16 v42 = 2048;
    uint64_t v43 = a2;
    __int16 v44 = 2048;
    uint64_t v45 = v17;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d UpdateAndNotify() - need to notify I/O state = %lu new I/O running state = %lu previous I/O running state = %lu",  v37,  0x30u);
  }

  *(void *)(a1 + 48) = a2;
  if (v8 != a2 || a4)
  {
    uint64_t v18 = sub_138E8(1);
    uint64_t v19 = sub_138E8(31);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)__int16 v37 = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&v37[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_18:
    os_log_t v25 = *(os_log_s **)v18;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a1 + 48);
      *(_DWORD *)__int16 v37 = 136316162;
      *(void *)&v37[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v38 = 1024;
      int v39 = 192;
      __int16 v40 = 2080;
      uint64_t v41 = "com.apple.coreaudio.IORunning";
      __int16 v42 = 2048;
      uint64_t v43 = v26;
      __int16 v44 = 2048;
      uint64_t v45 = a4;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Sending notification %s of I/O running state %lu forced notificatiouint64_t n = %lu",  v37,  0x30u);
    }

    sub_3A400(*(void *)a1, *(void *)(a1 + 48));
  }

  uint64_t v27 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = a3;
  if (v27 != a3 || a4)
  {
    uint64_t v28 = sub_138E8(1);
    uint64_t v29 = sub_138E8(31);
    char v30 = 0;
    uint64_t v31 = 0LL;
    *(void *)__int16 v37 = 0x100000002LL;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&v37[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1LL;
      if ((v34 & 1) != 0) {
        goto LABEL_30;
      }
    }

    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
LABEL_30:
    uint64_t v35 = *(os_log_s **)v28;
    if (v35)
    {
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = *(void *)(a1 + 56);
        *(_DWORD *)__int16 v37 = 136316162;
        *(void *)&v37[4] = "VirtualAudio_IONotificationManager.cpp";
        __int16 v38 = 1024;
        int v39 = 204;
        __int16 v40 = 2080;
        uint64_t v41 = "com.apple.coreaudio.ActivePorts";
        __int16 v42 = 2048;
        uint64_t v43 = v36;
        __int16 v44 = 2048;
        uint64_t v45 = a4;
        _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Sending notification %s with active ports %lu forced notificatiouint64_t n = %lu",  v37,  0x30u);
      }
    }

    sub_3A400(*(void *)(a1 + 8), *(void *)(a1 + 56));
  }

uint64_t sub_3A400(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 12))
  {
    int v2 = (const char **)result;
    notify_set_state(*(_DWORD *)(result + 8), a2);
    return notify_post(*v2);
  }

  return result;
}

uint64_t sub_3A43C(uint64_t a1, unsigned int a2, const void *a3)
{
  if (!a1)
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v25 = 1024;
      int v26 = 762;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceStop: no plug-in",  __p,  0x12u);
    }

    int v20 = 1852797029;
LABEL_28:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v20;
  }

  sub_92EF8();
  uint64_t v5 = sub_28AFEC(a2);
  if (!v5 || ((uint64_t v6 = v5, v7 = *(_DWORD *)(v5 + 12), v7 != 1633773415) ? (v8 = v7 == 1633969526) : (v8 = 1), !v8))
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    uint64_t v19 = *v18;
    if (*v18)
    {
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "HP_HardwarePlugInInterface.cpp";
        __int16 v25 = 1024;
        int v26 = 766;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceStop: no dev ice with given ID",  __p,  0x12u);
      }
    }

    int v20 = 560227702;
    goto LABEL_28;
  }

  uint64_t v9 = sub_138E8(5);
  uint64_t v10 = sub_138E8(31);
  char v11 = 0;
  uint64_t v12 = 0LL;
  *(void *)std::string __p = 0x100000002LL;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&__p[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1LL;
    if ((v15 & 1) != 0) {
      goto LABEL_14;
    }
  }

  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_14:
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v6 + 96LL))(__p, v6);
  if (v27 >= 0) {
    int v16 = __p;
  }
  else {
    int v16 = *(const char **)__p;
  }
  sub_1D71E4(3, v9, (uint64_t)"", 769, (uint64_t)"", "Client request to stop IO proc ID %p on VAD: '%s'.", a3, v16);
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(uint64_t, const void *))(*(void *)v6 + 376LL))(v6, a3);
  return 0LL;
}

#error "3A840: call analysis failed (funcsize=76)"
uint64_t sub_3A8E0(uint64_t a1, uint64_t a2)
{
  kdebug_trace(553912345LL, *(unsigned int *)(a1 + 576), 0LL, 0LL, 0LL);
  sub_3A964(a1, a2);
  return kdebug_trace(553912346LL, *(unsigned int *)(a1 + 576), 0LL, 0LL, 0LL);
}

void sub_3A944(void *a1)
{
}

void sub_3A950(_Unwind_Exception *a1)
{
}

uint64_t sub_3A964(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ((sub_746F0(a1, a2) & 1) == 0)
    {
      int v7 = (os_log_t *)sub_138E8(13);
      BOOL v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v12 = "HP_Device.cpp";
        __int16 v13 = 1024;
        int v14 = 1444;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): IOProc wasn't previously added",  buf,  0x12u);
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = 1852797029;
    }

    int v4 = 1013542768;
  }

  else
  {
    int v4 = 1013868911;
  }

  uint64_t v5 = operator new(0x18uLL);
  v5[2] = v4;
  *(void *)uint64_t v5 = &off_46E470;
  *((void *)v5 + 2) = a2;
  uint64_t v10 = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 232LL))(a1, &v10);
  uint64_t result = v10;
  uint64_t v10 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_3AAD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_3AB04(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 384LL))(a2, *(void *)(result + 16));
  }
  return result;
}

void sub_3AB24(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[59];
  for (uint64_t i = *(void *)(v4 + 8); i != *(void *)(v4 + 16); i += 8LL)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B45F4(v4, a2);
        uint64_t v6 = a1[59];
        if (!*(_DWORD *)(v6 + 112) && !*(_DWORD *)(v6 + 116))
        {
          BOOL v7 = a2 == 0;
LABEL_30:
          (*(void (**)(void *, BOOL))(*a1 + 576LL))(a1, v7);
        }

        return;
      }

      break;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      goto LABEL_7;
    }
  }

  uint64_t v8 = a1[58];
  for (uint64_t j = *(void *)(v8 + 8); ; j += 8LL)
  {
    if (j == *(void *)(v8 + 16))
    {
      uint64_t v10 = 0LL;
      goto LABEL_17;
    }

    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8LL) == a2)
    {
      BOOL v11 = a2 == 0;
      goto LABEL_21;
    }
  }

  uint64_t v10 = a2;
LABEL_17:
  BOOL v11 = a2 == 0;
  if (a2 && !v10) {
    return;
  }
LABEL_21:
  sub_3AC50(v8, a2);
  uint64_t v12 = a1[58];
  if (v11 && !*(_DWORD *)(v12 + 116))
  {
    BOOL v7 = 1LL;
    goto LABEL_30;
  }

  if (*(_DWORD *)(v12 + 112)) {
    char v13 = 1;
  }
  else {
    char v13 = v11;
  }
  if ((v13 & 1) == 0)
  {
    BOOL v7 = 0LL;
    goto LABEL_30;
  }

void sub_3AC50(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v3 = *i;
      if (*i == a2)
      {
        uint64_t v3 = a2;
LABEL_11:
        sub_3ACA0(a1, v3);
        return;
      }

      if (*(void *)(v3 + 8) == a2) {
        goto LABEL_11;
      }
    }
  }

  else
  {
    int v4 = *(_DWORD *)(a1 + 116);
    if (v4) {
      *(_DWORD *)(a1 + 116) = v4 - 1;
    }
  }

void sub_3ACA0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 54))
  {
    *(_BYTE *)(a2 + 54) = 0;
    --*(_DWORD *)(a1 + 112);
    sub_74774(a1, a2);
    sub_7480C((_DWORD **)a1);
  }

uint64_t sub_3ACE8(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 1008))
  {
    uint64_t v35 = (os_log_t *)sub_138E8(13);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v45 = 1024;
      int v46 = 3898;
      _os_log_impl(&dword_0, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v4 = pthread_self();
  uint64_t v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 664));
  if (!pthread_equal(v4, v5))
  {
    uint64_t v6 = pthread_self();
    BOOL v7 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 752));
    if (!pthread_equal(v6, v7) && !sub_24320(*(void *)(a1 + 640)))
    {
      __int16 v38 = (os_log_t *)sub_138E8(13);
      int v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v45 = 1024;
        int v46 = 3900;
        _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      __int16 v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v40, "Precondition failure.");
    }
  }

  uint64_t v8 = sub_138E8(1);
  uint64_t v9 = sub_138E8(31);
  char v10 = 0;
  uint64_t v11 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1LL;
    if ((v14 & 1) != 0)
    {
      if ((v12 & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_13;
    }
  }

  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
  if ((*(void *)(v8 + 8) & 1) != 0)
  {
LABEL_13:
    char v15 = *(os_log_s **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512LL))(a1);
      uint64_t v17 = "false";
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (v16) {
        uint64_t v17 = "true";
      }
      __int16 v45 = 1024;
      int v46 = 3902;
      __int16 v47 = 2080;
      int v48 = (std::string *)v17;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d StopIOEngine: IsIOEngineRunning is currently %s",  buf,  0x1Cu);
    }
  }

void sub_3B2A0(_Unwind_Exception *a1)
{
}

void sub_3B2D8(_Unwind_Exception *a1)
{
}

void sub_3B2E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  if (a2)
  {
    if (std::uncaught_exceptions() > v6) {
      *(_BYTE *)(v5 + 1073) = v7;
    }
    sub_366B0((uint64_t *)va);
    JUMPOUT(0x3B314LL);
  }

  _Unwind_Resume(a1);
}

void sub_3B308(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x3B314LL);
  }
  _Unwind_Resume(a1);
}

void sub_3B3D0(_Unwind_Exception *a1)
{
}

void sub_3B3E0(_Unwind_Exception *a1)
{
}

void sub_3B3EC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x3B3F4LL);
  }
  sub_7A0E8(a1);
}

int **sub_3B404(uint64_t a1, int a2)
{
  int v103 = a2;
  sub_259EC(a1);
  if (!*(void *)(a1 + 416))
  {
    unint64_t v84 = (os_log_t *)sub_138E8(13);
    uint64_t v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 557;
      _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: No HAL IO Proc has been set.",  __p,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No HAL IO Proc has been set.");
  }

  if (!*(void *)(a1 + 456))
  {
    uint64_t v87 = (os_log_t *)sub_138E8(13);
    uint64_t v88 = *v87;
    if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 558;
      _os_log_impl( &dword_0,  v88,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mClientIOProc is NULL]: No client IO Proc has been set.",  __p,  0x12u);
    }

    uint64_t v89 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v89, "No client IO Proc has been set.");
  }

  v102[0] = &v103;
  v102[1] = (int *)a1;
  char v4 = sub_25D14((unsigned int *)a1, a2, 0);
  char v5 = v4;
  if ((v4 & 3) != 3)
  {
    if ((v4 & 3) == 0)
    {
      uint64_t v6 = sub_138E8(16);
      sub_1D71E4(2, v6, (uint64_t)"", 577, (uint64_t)"", "Stop is called on an already stopped device");
    }

    if (v103 == 1)
    {
      if ((v5 & 1) == 0) {
        return sub_230740(v102);
      }
    }

    else if (v103 || (v5 & 2) == 0)
    {
      return sub_230740(v102);
    }

    int v14 = sub_3C558(a1);
    char v15 = *(void **)(a1 + 240);
    int v16 = *(void **)(a1 + 248);
    while (v15 != v16)
    {
      (*(void (**)(void))(*(void *)*v15 + 32LL))(*v15);
      v15 += 2;
    }

    uint64_t v17 = sub_138E8(16);
    uint64_t v18 = sub_138E8(31);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)std::string __p = 0x100000002LL;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *(int *)&__p[4 * v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_47;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_47:
    sub_2CA1C(__p, v103);
    int v38 = v114[3];
    int v39 = *(const char **)__p;
    int v40 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    uint64_t v41 = __p;
    if (v38 < 0) {
      uint64_t v41 = v39;
    }
    sub_1D71E4(3, v17, (uint64_t)"", 596, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v41, v40);
    if ((v114[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    kdebug_trace(553912349LL, v103, 0LL, 0LL, 0LL);
    if (v103 == 1) {
      __int16 v42 = 0LL;
    }
    else {
      __int16 v42 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    uint64_t v43 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v42);
    kdebug_trace(553912350LL, v103, 0LL, 0LL, 0LL);
    if ((_DWORD)v43)
    {
      uint64_t v44 = sub_138E8(16);
      sub_2CA1C(__p, v43);
      int v45 = v114[3];
      int v46 = *(const char **)__p;
      sub_23FE8((uint64_t)&v124, (os_unfair_lock_t)(a1 + 8));
      __int16 v47 = __p;
      if (v45 < 0) {
        __int16 v47 = v46;
      }
      if (v124.__m_.__opaque[15] >= 0) {
        sig = (const char *)&v124;
      }
      else {
        sig = (const char *)v124.__m_.__sig;
      }
      sub_1D71E4(1, v44, (uint64_t)"", 601, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v47, sig);
      if (v124.__m_.__opaque[15] < 0) {
        operator delete((void *)v124.__m_.__sig);
      }
      if ((v114[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    __int16 v49 = *(uint64_t ***)(a1 + 136);
    if (v49) {
      sub_1C9B20(v49);
    }
    int v50 = sub_3C684(a1);
    if (sub_3C7AC(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 552LL))(a1);
      uint64_t v51 = *(void **)(a1 + 240);
      uint64_t v52 = *(void **)(a1 + 248);
      while (v51 != v52)
      {
        (*(void (**)(void, void))(*(void *)*v51 + 40LL))(*v51, 0LL);
        v51 += 2;
      }

      int v59 = 0LL;
      goto LABEL_134;
    }

    AudioObjectID v53 = *(_DWORD *)(a1 + 128);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    uint64_t v54 = sub_138E8(13);
    if ((*(_BYTE *)(v54 + 8) & 1) != 0)
    {
      int v55 = *(os_log_s **)v54;
      if (*(void *)v54)
      {
        if (os_log_type_enabled(*(os_log_t *)v54, OS_LOG_TYPE_DEBUG))
        {
          v123.__cv_.__sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v123.__cv_.__opaque = inAddress.mElement;
          sub_613AC((uint64_t)&v124, (unsigned int *)&v123);
          unint64_t v56 = v124.__m_.__opaque[15] >= 0 ? &v124 : (std::mutex *)v124.__m_.__sig;
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 166;
          *(_WORD *)&_BYTE __p[18] = 2080;
          *(void *)__int128 v114 = v56;
          *(_WORD *)&v114[8] = 1024;
          *(_DWORD *)&v114[10] = v53;
          _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  __p,  0x22u);
          if (v124.__m_.__opaque[15] < 0) {
            operator delete((void *)v124.__m_.__sig);
          }
        }
      }
    }

    AudioObjectPropertyAddress v110 = inAddress;
    AudioObjectID v109 = v53;
    int v111 = 0;
    uint64_t v112 = 0LL;
    if (sub_3C7F0((uint64_t)&v109))
    {
      int v100 = v43;
      memset(v124.__m_.__opaque, 0, sizeof(v124.__m_.__opaque));
      v124.__m_.__sig = 850045863LL;
      memset(v123.__cv_.__opaque, 0, sizeof(v123.__cv_.__opaque));
      v123.__cv_.__sig = 1018212795LL;
      char v108 = 0;
      sub_7D684(inClientData, v53, &inAddress, (uint64_t)&v123, (uint64_t)&v124, (uint64_t)&v108);
      for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v60.__d_.__rep_) / -1000)
      {
        unint64_t v58 = sub_3C7F0((uint64_t)&v109);
        int v59 = (os_log_s *)HIDWORD(v58);
        if (HIDWORD(v58)) {
          goto LABEL_131;
        }
        if (!(_DWORD)v58) {
          break;
        }
        if (i <= 0)
        {
          int v72 = (os_log_t *)sub_138E8(13);
          int v59 = (os_log_s *)2003329396;
          uint64_t v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            AudioObjectPropertyAddress v104 = inAddress;
            sub_613AC((uint64_t)&__lk, &v104.mSelector);
            uint64_t v74 = v106 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            *(_DWORD *)std::string __p = 136316930;
            *(void *)&__p[4] = "HALPropertySynchronizer.h";
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = 248;
            *(_WORD *)&_BYTE __p[18] = 2080;
            *(void *)__int128 v114 = "updated";
            *(_WORD *)&v114[8] = 2080;
            *(void *)&v114[10] = v74;
            __int16 v115 = 2080;
            int v116 = "updated";
            __int16 v117 = 1024;
            int v118 = 0;
            __int16 v119 = 1024;
            int v120 = 0;
            __int16 v121 = 1024;
            AudioObjectID v122 = v53;
            _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  __p,  0x42u);
            if (v106 < 0) {
              operator delete(__lk.__m_);
            }
          }

          goto LABEL_131;
        }

        v60.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        uint64_t v61 = sub_138E8(13);
        if ((*(_BYTE *)(v61 + 8) & 1) != 0)
        {
          unsigned int v62 = *(os_log_s **)v61;
          if (*(void *)v61)
          {
            if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string __p = 136315906;
              *(void *)&__p[4] = "HALPropertySynchronizer.h";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 257;
              *(_WORD *)&_BYTE __p[18] = 2080;
              *(void *)__int128 v114 = "with timeout";
              *(_WORD *)&v114[8] = 1024;
              *(_DWORD *)&v114[10] = v53;
              _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  __p,  0x22u);
            }
          }
        }

        sub_6DD4();
        *(void *)std::string __p = &qword_48F828;
        __p[8] = 0;
        __p[8] = sub_1A30E4();
        __lk.__m_ = &v124;
        __lk.__owns_ = 1;
        std::mutex::lock(&v124);
        v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (!v108)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v63.__d_.__rep_ + 1000000 * i;
          while (1)
          {
            if (v64 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_88;
            }
            v65.__d_.__rep_ = v64 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v65.__d_.__rep_ >= 1) {
              break;
            }
LABEL_106:
            if (std::chrono::steady_clock::now().__d_.__rep_ >= v64 || v108) {
              goto LABEL_88;
            }
          }

          std::chrono::steady_clock::now();
          v66.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          if (!v66.__d_.__rep_)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0LL;
            goto LABEL_102;
          }

          if (v66.__d_.__rep_ < 1)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x8000000000000000LL;
          }

          else
          {
            if ((unint64_t)v66.__d_.__rep_ > 0x20C49BA5E353F7LL)
            {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_102;
            }

LABEL_101:
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 1000 * v66.__d_.__rep_;
LABEL_102:
            if (v67 > (v65.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
            {
              v68.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_105:
              std::condition_variable::__do_timed_wait(&v123, &__lk, v68);
              std::chrono::steady_clock::now();
              goto LABEL_106;
            }
          }

          v68.__d_.__rep_ = v67 + v65.__d_.__rep_;
          goto LABEL_105;
        }

    sub_1BB88(&v50);
  }

    if (a5 != 8)
    {
      uint64_t v88 = (os_log_t *)sub_138E8(13);
      uint64_t v89 = *v88;
      if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 684;
        _os_log_impl(&dword_0, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      uint64_t v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v90, "Precondition failure.");
    }

    unsigned int v62 = (const __CFDictionary *)CFRetain(*(CFTypeRef *)a6);
    theDict[0] = (CFDictionaryRef)&off_486378;
    theDict[1] = v62;
    if ((sub_782DC(v62, @"ducking type") & 1) != 0)
    {
      if ((sub_782DC(theDict[1], @"ducking enable") & 1) != 0)
      {
        if ((sub_782DC(theDict[1], @"ducking gain") & 1) != 0)
        {
          if ((sub_782DC(theDict[1], @"ducking time") & 1) != 0)
          {
            sub_78300((uint64_t)buf, theDict[1], @"ducking type");
            std::chrono::steady_clock::time_point v63 = sub_3A030(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            sub_78300((uint64_t)buf, theDict[1], @"ducking enable");
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = sub_3A030(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            sub_78300((uint64_t)buf, theDict[1], @"ducking time");
            std::chrono::steady_clock::time_point v65 = sub_783E0(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            sub_78300((uint64_t)buf, theDict[1], @"ducking gain");
            std::chrono::system_clock::time_point v66 = sub_783E0(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            (*(void (**)(void *, const __CFNumber *, const __CFNumber *, float, float))(*(void *)v46 + 64LL))( v46,  v63,  v64,  v66,  v65);
            sub_39FD8(theDict);
            if (v45)
            {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = (unint64_t *)&v45->__shared_owners_;
              do
                std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }

            return;
          }

          unint64_t v99 = (os_log_t *)sub_138E8(13);
          unsigned int v95 = *v99;
          if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 691;
            unint64_t v96 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVir"
                  "tualAudioPlugInDuckingTimeKey is required";
            goto LABEL_175;
          }

  if (v64)
  {
    size_t v71 = (unint64_t *)&v64->__shared_owners_;
    do
      int v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }

  if (v26) {
    uint64_t v73 = v68;
  }
  else {
    uint64_t v73 = 1;
  }
  if (v68) {
    uint64_t v74 = 0LL;
  }
  else {
    uint64_t v74 = v27;
  }
  if ((v73 & 1) != 0)
  {
    unint64_t v75 = 0LL;
    char v27 = v74;
    if ((v65 & 1) != 0) {
      goto LABEL_119;
    }
LABEL_118:
    std::__shared_weak_count::__release_weak(v59);
    goto LABEL_119;
  }

  unsigned int v76 = (unint64_t *)&v26->__shared_weak_owners_;
  do
    uint64_t v77 = __ldxr(v76);
  while (__stxr(v77 + 1, v76));
  unint64_t v75 = v26;
  if ((v65 & 1) == 0) {
    goto LABEL_118;
  }
LABEL_119:
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  *uint64_t v87 = v50;
  v87[1] = (uint64_t)v49;
  if (v49)
  {
    uint64_t v78 = (unint64_t *)&v49->__shared_weak_owners_;
    do
      uint64_t v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }

  v87[2] = v27;
  v87[3] = (uint64_t)v75;
  if (v75)
  {
    uint64_t v80 = (unint64_t *)&v75->__shared_weak_owners_;
    do
      uint64_t v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    std::__shared_weak_count::__release_weak(v75);
  }

  if (v49) {
    std::__shared_weak_count::__release_weak(v49);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  sub_85B80(&v92);
}

LABEL_88:
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_7D790((uint64_t)__p);
      }

      uint64_t v70 = sub_138E8(13);
      if ((*(_BYTE *)(v70 + 8) & 1) != 0)
      {
        int v59 = *(os_log_s **)v70;
        if (!*(void *)v70) {
          goto LABEL_131;
        }
        if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyAddress v104 = inAddress;
          sub_613AC((uint64_t)&__lk, &v104.mSelector);
          size_t v71 = v106 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 288;
          *(_WORD *)&_BYTE __p[18] = 2080;
          *(void *)__int128 v114 = v71;
          *(_WORD *)&v114[8] = 1024;
          *(_DWORD *)&v114[10] = v53;
          _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  __p,  0x22u);
          if (v106 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }

      int v59 = 0LL;
LABEL_131:
      sub_7D898((uint64_t)inClientData);
      std::condition_variable::~condition_variable(&v123);
      std::mutex::~mutex(&v124);
      LODWORD(v43) = v100;
    }

    else
    {
      uint64_t v69 = sub_138E8(13);
      if ((*(_BYTE *)(v69 + 8) & 1) != 0)
      {
        int v59 = *(os_log_s **)v69;
        if (!*(void *)v69) {
          goto LABEL_132;
        }
        if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 219;
          *(_WORD *)&_BYTE __p[18] = 1024;
          *(_DWORD *)__int128 v114 = v53;
          _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive fo r a notification on id %u.",  __p,  0x18u);
        }
      }

      int v59 = 0LL;
    }

      unint64_t v56 = sub_138E8(8);
      uint64_t v57 = sub_138E8(34);
      unint64_t v58 = 0;
      int v59 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      std::chrono::system_clock::time_point v60 = *(void *)(v56 + 8);
      while (1)
      {
        uint64_t v61 = *(int *)&buf[4 * v59];
        unsigned int v62 = v58;
        if (((v60 & v61) != 0) != ((*(void *)(v57 + 8) & v61) != 0)) {
          break;
        }
        unint64_t v58 = 1;
        int v59 = 1LL;
        if ((v62 & 1) != 0) {
          goto LABEL_110;
        }
      }

      if ((v60 & v61) == 0) {
        unint64_t v56 = v57;
      }
LABEL_110:
      unint64_t v75 = *(os_log_s **)v56;
      if (v75 && os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2226;
        _os_log_impl(&dword_0, v75, OS_LOG_TYPE_INFO, "%25s:%-5d Attempt ActivateForNormal", buf, 0x12u);
      }

      sub_705D0((uint64_t)buf, (uint64_t *)v9, v310, (uint64_t)v8);
      sub_725DC(v4, (uint64_t)buf);
LABEL_114:
      *(void *)AudioObjectPropertyAddress buf = off_4709D0;
      unsigned int v76 = *(void **)&buf[16];
      if (*(void *)&buf[16])
      {
        sub_10AF78((uint64_t *)(*(void *)&buf[16] + 16LL));
        operator delete(v76);
      }

      goto LABEL_178;
    }

    int v302 = v5;
    std::chrono::steady_clock::time_point v63 = *(unsigned __int8 *)(v11 + 64);
    p_shared_owners = &v8[5].__shared_owners_;
    int v317 = v63 & 1;
    LOBYTE(v329) = v63 & 1;
    BYTE1(v329) = (v63 & 2) != 0;
    sub_132584((uint64_t **)&v324, (uint64_t)&p_shared_owners, 0);
    sub_132584(&v337, (uint64_t)&p_shared_owners, 1);
    if (v324.i64[1])
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = std::__shared_weak_count::lock((std::__shared_weak_count *)v324.i64[1]);
      std::chrono::steady_clock::time_point v65 = v64;
      if (v64)
      {
        std::chrono::system_clock::time_point v66 = v324.i64[0];
        p_shared_weak_owners = (unint64_t *)&v64->__shared_weak_owners_;
        do
          std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = __ldxr(p_shared_weak_owners);
        while (__stxr(v68 + 1, p_shared_weak_owners));
        uint64_t v69 = (unint64_t *)&v64->__shared_owners_;
        do
          uint64_t v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v65);
        }

        size_t v71 = std::__shared_weak_count::lock(v65);
        if (v71)
        {
          int v72 = v71;
          uint64_t v73 = (unint64_t *)&v71->__shared_owners_;
          do
            uint64_t v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v72);
          }

          if (v66)
          {
            std::__shared_weak_count::__release_weak(v65);
            goto LABEL_149;
          }
        }

        unint64_t v84 = 0;
LABEL_124:
        if (v338 && (uint64_t v85 = std::__shared_weak_count::lock(v338)) != 0LL)
        {
          unint64_t v86 = v85;
          uint64_t v87 = v337;
          uint64_t v88 = (unint64_t *)&v85->__shared_weak_owners_;
          do
            uint64_t v89 = __ldxr(v88);
          while (__stxr(v89 + 1, v88));
          uint64_t v90 = (unint64_t *)&v85->__shared_owners_;
          do
            AudioStreamBasicDescription v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v86);
          }

          int v92 = std::__shared_weak_count::lock(v86);
          if (v92)
          {
            uint64_t v93 = v92;
            uint64_t v94 = (unint64_t *)&v92->__shared_owners_;
            do
              unsigned int v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v93);
            }
          }

          else
          {
            uint64_t v87 = 0LL;
          }

          std::__shared_weak_count::__release_weak(v86);
          if ((v84 & 1) == 0) {
            std::__shared_weak_count::__release_weak(v65);
          }
          if (v87)
          {
LABEL_149:
            __int128 v98 = *(_DWORD *)(v11 + 72);
            sub_6DD4();
            if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) != 0)
            {
              char v9 = v316;
              if (v98 == 1668246894 || v98 == 1668510820)
              {
                int v309 = v63 & 2;
                if ((v63 & 1) == 0)
                {
                  if ((v63 & 2) == 0) {
                    goto LABEL_494;
                  }
                  goto LABEL_216;
                }

                if (v324.i64[1])
                {
                  std::condition_variable v123 = std::__shared_weak_count::lock((std::__shared_weak_count *)v324.i64[1]);
                  std::chrono::steady_clock::time_point v65 = v123;
                  if (v123)
                  {
                    std::mutex v124 = v324.i64[0];
                    int v125 = (unint64_t *)&v123->__shared_weak_owners_;
                    do
                      int v126 = __ldxr(v125);
                    while (__stxr(v126 + 1, v125));
                    int v127 = (unint64_t *)&v123->__shared_owners_;
                    do
                      int v128 = __ldaxr(v127);
                    while (__stlxr(v128 - 1, v127));
                    if (!v128)
                    {
                      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                      std::__shared_weak_count::__release_weak(v65);
                    }

                    int v129 = std::__shared_weak_count::lock(v65);
                    if (v129)
                    {
                      int v130 = v129;
                      int v131 = (unint64_t *)&v129->__shared_owners_;
                      do
                        int v132 = __ldaxr(v131);
                      while (__stlxr(v132 - 1, v131));
                      if (!v132)
                      {
                        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                        std::__shared_weak_count::__release_weak(v130);
                      }

  if (*(_DWORD *)(a1 + 12) == 1667329133)
  {
    __int16 v42 = sub_138E8(16);
    if ((*(_BYTE *)(v42 + 8) & 1) != 0)
    {
      uint64_t v43 = *(os_log_s **)v42;
      if (*(void *)v42)
      {
        if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unsigned int v62 = "AggregateDevice.cpp";
          std::chrono::steady_clock::time_point v63 = 1024;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = 657;
          _os_log_impl(&dword_0, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alarm VA media capture is allowed", buf, 0x12u);
        }
      }
    }

    uint64_t v44 = sub_138E8(16);
    v22 |= 7uLL;
    if ((*(_BYTE *)(v44 + 8) & 1) != 0)
    {
      int v45 = *(os_log_s **)v44;
      if (*(void *)v44)
      {
        if (os_log_type_enabled(*(os_log_t *)v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unsigned int v62 = "AggregateDevice.cpp";
          std::chrono::steady_clock::time_point v63 = 1024;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = 658;
          _os_log_impl(&dword_0, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alarm HAL media capture is allowed", buf, 0x12u);
        }
      }
    }
  }

  return v22;
}

        uint64_t v57 = (os_log_t *)sub_138E8(24);
        unint64_t v58 = *v57;
        uint64_t v30 = 0uLL;
        if (*v57)
        {
          if (os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(v627, v585);
            int v59 = (v627[0].__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0
                ? v627
                : (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
            *(_DWORD *)unsigned int v637 = 136315650;
            *(void *)&v637[4] = "DSPGraphChain.cpp";
            *(_WORD *)&v637[12] = 1024;
            *(_DWORD *)&v637[14] = 51;
            *(_WORD *)&v637[18] = 2080;
            *(void *)&v637[20] = v59;
            _os_log_impl(&dword_0, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unsupported DSP Chain Type: %s", v637, 0x1Cu);
          }

          uint64_t v30 = 0uLL;
        }

        goto LABEL_219;
      }

    sub_F2D6C(buf);
LABEL_97:
    sub_D62E0((uint64_t *)&__p);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = *(void *)&buf[4];
    if (*(void *)&buf[4])
    {
      std::chrono::system_clock::time_point v66 = *(void ***)buf;
      std::chrono::steady_clock::time_point v65 = *(void **)&buf[2];
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = **(void **)&buf[2];
      *(void *)(v67 + 8) = *(void *)(*(void *)buf + 8LL);
      *v66[1] = v67;
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = __p;
      *((void *)__p + 1) = v65;
      *std::chrono::steady_clock::time_point v65 = v68;
      v66[1] = &__p;
      std::string __p = v66;
      v274 = (_DWORD *)((char *)v274 + v64);
      *(void *)&uint8_t buf[4] = 0LL;
    }

    sub_D62E0((uint64_t *)buf);
    goto LABEL_100;
  }

    int v24 = 0LL;
    goto LABEL_109;
  }

  uint64_t v20 = sub_138E8(13);
  if ((*(_BYTE *)(v20 + 8) & 1) != 0)
  {
    uint64_t v21 = *(id *)v20;
    if (v21)
    {
      uint64_t v22 = (os_log_s *)v21;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v97.__cv_.__sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v97.__cv_.__opaque = inAddress.mElement;
        sub_613AC((uint64_t)&v98, (unsigned int *)&v97);
        char v23 = v98.__m_.__opaque[15] >= 0 ? &v98 : (std::mutex *)v98.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        uint64_t v89 = 1024;
        uint64_t v90 = 199;
        AudioStreamBasicDescription v91 = 2080;
        *(void *)int v92 = v23;
        *(_WORD *)&v92[8] = 1024;
        *(_DWORD *)&v92[10] = inObjectID;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v98.__m_.__opaque[15] < 0) {
          operator delete((void *)v98.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = inAddress;
  int v24 = AudioObjectSetPropertyData(inObjectID, &buf, 0, 0LL, 8u, &inData);
  if (!(_DWORD)v24)
  {
    char v34 = COERCE_DOUBLE(sub_36D260((uint64_t)&v84));
    if (!v35 && inData == v34)
    {
      int v50 = sub_138E8(13);
      if ((*(_BYTE *)(v50 + 8) & 1) != 0)
      {
        uint64_t v51 = (os_log_s *)*(id *)v50;
        int v24 = (uint64_t)v51;
        if (!v51) {
          goto LABEL_109;
        }
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          uint64_t v89 = 1024;
          uint64_t v90 = 219;
          AudioStreamBasicDescription v91 = 1024;
          *(_DWORD *)int v92 = inObjectID;
          _os_log_impl( &dword_0,  (os_log_t)v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive fo r a notification on id %u.",  (uint8_t *)&buf,  0x18u);
        }
      }

      goto LABEL_88;
    }

    memset(v98.__m_.__opaque, 0, sizeof(v98.__m_.__opaque));
    v98.__m_.__sig = 850045863LL;
    memset(v97.__cv_.__opaque, 0, sizeof(v97.__cv_.__opaque));
    v97.__cv_.__sig = 1018212795LL;
    uint64_t v83 = 0;
    sub_7D684(inClientData, inObjectID, &inAddress, (uint64_t)&v97, (uint64_t)&v98, (uint64_t)&v83);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v40.__d_.__rep_) / -1000)
    {
      __int16 v37 = COERCE_DOUBLE(sub_36D260((uint64_t)&v84));
      int v24 = v38;
      if ((_DWORD)v38) {
        goto LABEL_108;
      }
      int v39 = v37;
      if (inData == v37) {
        break;
      }
      if (i <= 0)
      {
        int v24 = 2003329396LL;
        uint64_t v57 = (os_log_s *)*(id *)sub_138E8(13);
        unint64_t v56 = v57;
        if (v57)
        {
          uint64_t v54 = v57;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            uint64_t v79 = inAddress;
            sub_613AC((uint64_t)&__lk, &v79.mSelector);
            unint64_t v58 = v81 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            buf.AudioObjectPropertySelector mSelector = 136316930;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            uint64_t v89 = 1024;
            uint64_t v90 = 248;
            AudioStreamBasicDescription v91 = 2080;
            *(void *)int v92 = "set";
            *(_WORD *)&v92[8] = 2080;
            *(void *)&v92[10] = v58;
            *(_WORD *)&v92[18] = 2080;
            *(void *)&v92[20] = "set";
            *(_WORD *)&v92[28] = 1024;
            *(_DWORD *)&v92[30] = inData == v39;
            uint64_t v93 = 1024;
            uint64_t v94 = 0;
            unsigned int v95 = 1024;
            unint64_t v96 = inObjectID;
            _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
            if (v81 < 0) {
              operator delete(__lk.__m_);
            }
          }

          goto LABEL_105;
        }

        goto LABEL_106;
      }

      v40.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v41 = sub_138E8(13);
      if ((*(_BYTE *)(v41 + 8) & 1) != 0)
      {
        __int16 v42 = (os_log_s *)*(id *)v41;
        if (v42)
        {
          uint64_t v43 = v42;
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            uint64_t v89 = 1024;
            uint64_t v90 = 257;
            AudioStreamBasicDescription v91 = 2080;
            *(void *)int v92 = "with timeout";
            *(_WORD *)&v92[8] = 1024;
            *(_DWORD *)&v92[10] = inObjectID;
            _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v98;
      __lk.__owns_ = 1;
      std::mutex::lock(&v98);
      v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v83)
      {
        int v45 = v44.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v45 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_61;
          }
          v46.__d_.__rep_ = v45 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v46.__d_.__rep_ >= 1) {
            break;
          }
LABEL_79:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v45 || v83) {
            goto LABEL_61;
          }
        }

        std::chrono::steady_clock::now();
        v47.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v47.__d_.__rep_)
        {
          int v48 = 0LL;
          goto LABEL_75;
        }

        if (v47.__d_.__rep_ < 1)
        {
          int v48 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v47.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            int v48 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_75;
          }

  std::mutex::unlock(v11);
  uint64_t v51 = *a2;
  uint64_t v52 = (std::__shared_weak_count *)a2[1];
  v75[0] = v51;
  v75[1] = v52;
  if (v52)
  {
    AudioObjectID v53 = (unint64_t *)&v52->__shared_owners_;
    do
      uint64_t v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }

  sub_36DEC4(v75);
  if (v52)
  {
    int v55 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }

void sub_3C44C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
}

uint64_t sub_3C558(uint64_t a1)
{
  for (uint64_t i = v11; &v10 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    uint64_t v3 = (std::__shared_weak_count *)i[3];
    char v9 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t))(*(void *)v2 + 160LL))(v2);
    if (v9)
    {
      uint64_t v6 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

  sub_1BB88(&v10);
  return 0LL;
}

void sub_3C65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_7A768((uint64_t)va);
  sub_1BB88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_3C684(uint64_t a1)
{
  for (uint64_t i = v11; &v10 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    uint64_t v3 = (std::__shared_weak_count *)i[3];
    char v9 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t))(*(void *)v2 + 168LL))(v2);
    if (v9)
    {
      uint64_t v6 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

  sub_1BB88(&v10);
  return 0LL;
}

void sub_3C788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_7A768((uint64_t)va);
  sub_1BB88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_3C7AC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 320)) {
    return 0LL;
  }
  uint64_t v1 = *(_opaque_pthread_t **)(a1 + 328);
  uint64_t v2 = pthread_self();
  return pthread_equal(v1, v2) != 0;
}

unint64_t sub_3C7F0(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_3C9B8((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    unint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        uint64_t v28 = v11;
        __int16 v29 = 2080;
        uint64_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_3C998(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_3C9B8( AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (AudioObjectHasProperty(*a1, a2))
  {
    ioDataSize[0] = 2003329396;
    *(void *)&ioDataSize[1] = 0LL;
    unsigned int PropertyData = 2003329396;
    uint64_t v9 = 0LL;
    ioDataSize[0] = sub_37408(*a1, a2, a3, a4);
    if (ioDataSize[0])
    {
      unsigned int PropertyData = AudioObjectGetPropertyData(*a1, a2, a3, a4, ioDataSize, outData);
      if (PropertyData) {
        uint64_t v9 = 0LL;
      }
      else {
        uint64_t v9 = outData[0];
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    unsigned int PropertyData = 2003332927;
  }

  return PropertyData | (unint64_t)(v9 << 32);
}

uint64_t sub_3CA98(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 544);
  uint64_t v2 = *(void *)(result + 552);
  while (v1 != v2)
  {
    uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(v3 + 360) + 16LL));
    if ((v4 & 1) != 0) {
      uint64_t result = sub_AE118(*(void *)(v3 + 360));
    }
    v1 += 16LL;
  }

  return result;
}

uint64_t sub_3CAEC(uint64_t a1, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  if (!a1)
  {
    AudioObjectID v13 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v22 = 136315394;
    __int16 v23 = "HP_HardwarePlugInInterface.cpp";
    __int16 v24 = 1024;
    int v25 = 286;
    char v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_ObjectIsProper"
          "tySettable: no plug-in";
LABEL_21:
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v22, 0x12u);
    goto LABEL_22;
  }

  if (!a3)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v22 = 136315394;
    __int16 v23 = "HP_HardwarePlugInInterface.cpp";
    __int16 v24 = 1024;
    int v25 = 287;
    char v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: HP_HardwarePlugIn_ObjectIsPro"
          "pertySettable: no address";
    goto LABEL_21;
  }

  if (!a4)
  {
    int v17 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      __int16 v23 = "HP_HardwarePlugInInterface.cpp";
      __int16 v24 = 1024;
      int v25 = 288;
      char v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIsSettable is NULL]: HP_HardwarePlugIn_Objec"
            "tIsPropertySettable: no place to store return value";
      goto LABEL_21;
    }

LABEL_22:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v7 = sub_28AFEC(a2);
  uint64_t v8 = v7;
  if (!v7)
  {
    char v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      __int16 v23 = "HP_HardwarePlugInInterface.cpp";
      __int16 v24 = 1024;
      int v25 = 291;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theObject is NULL]: HP_HardwarePlugIn_ObjectIsPropertySett able: no object with given ID",  (uint8_t *)&v22,  0x12u);
    }

    char v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v21 = &off_4865A0;
    v21[2] = 560947818;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
  uint64_t v10 = v9;
  if (v9) {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16LL))(v9);
  }
  else {
    int v11 = 0;
  }
  *a4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 40LL))(v8, a3);
  if (v10 && v11) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
  }
  return 0LL;
}

      int v11 = a1[12];
      *(_DWORD *)AudioObjectPropertyAddress buf = *a2;
      int v26 = 1735159650LL;
      return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(void *)v11 + 32LL))(v11, buf, a3, a4);
    }

    if (v8 == 1918987632 || v8 == 1919774835) {
      goto LABEL_22;
    }
    uint64_t v10 = 1936878960;
  }

      int v17 = *a5;
      if (v17 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        int v48 = (os_log_t *)sub_138E8(13);
        __int16 v49 = *v48;
        if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
        {
          uint64_t v81 = *(void **)a2;
          LODWORD(v82) = a2[2];
          sub_613AC((uint64_t)&__p, (unsigned int *)&v81);
          std::string::size_type size = (char)__p.__r_.__value_.__s.__size_;
          uint64_t v51 = __p.__r_.__value_.__r.__words[0];
          uint64_t v52 = *a5;
          AudioObjectID v53 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          p_p = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
          if (size < 0) {
            p_p = (std::string *)v51;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 208;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = p_p;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)uint64_t v85 = v52;
          *(_WORD *)&v85[4] = 1024;
          *(_DWORD *)&v85[6] = v53;
          _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
        }

        int v55 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v55 = &off_4865A0;
        v55[2] = 561211770;
      }

      (*(void (**)(void, int *, uint64_t, _DWORD *, int *, uint64_t *))(**(void **)(a1 + 120) + 40LL))( *(void *)(a1 + 120),  a2,  a3,  a4,  a5,  a6);
      goto LABEL_24;
    }

    if (v12 == 1936092515) {
      goto LABEL_22;
    }
    if (v12 != 1936222577) {
      goto LABEL_49;
    }
    unint64_t v14 = *a5;
    if (v14 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = (os_log_t *)sub_138E8(13);
      std::chrono::steady_clock::time_point v65 = *v64;
      if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
      {
        uint64_t v81 = *(void **)a2;
        LODWORD(v82) = a2[2];
        sub_613AC((uint64_t)&__p, (unsigned int *)&v81);
        std::chrono::system_clock::time_point v66 = (char)__p.__r_.__value_.__s.__size_;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = __p.__r_.__value_.__r.__words[0];
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = *a5;
        uint64_t v69 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
        uint64_t v70 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
        if (v66 < 0) {
          uint64_t v70 = (std::string *)v67;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 198;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v70;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)uint64_t v85 = v68;
        *(_WORD *)&v85[4] = 1024;
        *(_DWORD *)&v85[6] = v69;
        _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
      }

      size_t v71 = __cxa_allocate_exception(0x10uLL);
      *(void *)size_t v71 = &off_4865A0;
      v71[2] = 561211770;
    }

    *(_DWORD *)a6 = *(unsigned __int8 *)(a1 + 128);
  }

  else
  {
    if (v12 <= 1935765618)
    {
      if (v12 != 1685025633)
      {
        AudioObjectID v13 = 1718641517;
        goto LABEL_21;
      }

      goto LABEL_22;
    }

    if (v12 == 1935765619)
    {
      __int16 v29 = *a5;
      if (v29 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        unint64_t v56 = (os_log_t *)sub_138E8(13);
        uint64_t v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
        {
          uint64_t v81 = *(void **)a2;
          LODWORD(v82) = a2[2];
          sub_613AC((uint64_t)&__p, (unsigned int *)&v81);
          unint64_t v58 = (char)__p.__r_.__value_.__s.__size_;
          int v59 = __p.__r_.__value_.__r.__words[0];
          std::chrono::system_clock::time_point v60 = *a5;
          uint64_t v61 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          unsigned int v62 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
          if (v58 < 0) {
            unsigned int v62 = (std::string *)v59;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 157;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v62;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)uint64_t v85 = v60;
          *(_WORD *)&v85[4] = 1024;
          *(_DWORD *)&v85[6] = v61;
          _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
        }

        std::chrono::steady_clock::time_point v63 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::chrono::steady_clock::time_point v63 = &off_4865A0;
        v63[2] = 561211770;
      }

      (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 120) + 160LL))(&__p);
      memset(buf, 0, 24);
      strcpy(&buf[24], "cwdv");
      v85[2] = 0;
      *(_DWORD *)&v85[10] = 3;
      v87[0] = 0LL;
      v87[1] = 0LL;
      unint64_t v86 = v87;
      uint64_t v89 = 0LL;
      uint64_t v88 = 44739240;
      if (a4 && *a4 == 1935895670) {
        uint64_t v88 = 44731048;
      }
      sub_252EDC((uint64_t *)&v81, *(void *)(a1 + 16), (uint64_t)&__p, (uint64_t)buf);
      sub_136E0((uint64_t)cf, v81, &v82);
      if (cf[0])
      {
        CFRetain(cf[0]);
        uint64_t v30 = cf[0];
      }

      else
      {
        uint64_t v30 = 0LL;
      }

      *a6 = (uint64_t)v30;
      sub_13818((uint64_t)cf);
      sub_32C8C(v82);
      if (v89) {
        CFRelease(v89);
      }
      sub_32C8C(v87[0]);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      sub_85B80((uint64_t *)&__p);
    }

    else
    {
      if (v12 != 1935765620) {
        goto LABEL_49;
      }
      char v15 = *a5;
      if (v15 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4))
      {
        int v72 = (os_log_t *)sub_138E8(13);
        uint64_t v73 = *v72;
        if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
        {
          uint64_t v81 = *(void **)a2;
          LODWORD(v82) = a2[2];
          sub_613AC((uint64_t)&__p, (unsigned int *)&v81);
          uint64_t v74 = (char)__p.__r_.__value_.__s.__size_;
          unint64_t v75 = __p.__r_.__value_.__r.__words[0];
          unsigned int v76 = *a5;
          uint64_t v77 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          uint64_t v78 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
          if (v74 < 0) {
            uint64_t v78 = (std::string *)v75;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 173;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v78;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)uint64_t v85 = v76;
          *(_WORD *)&v85[4] = 1024;
          *(_DWORD *)&v85[6] = v77;
          _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
        }

        uint64_t v79 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v79 = &off_4865A0;
        v79[2] = 561211770;
      }

      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
      (*(void (**)(_BYTE *__return_ptr))(**(void **)(a1 + 120) + 160LL))(buf);
      uint64_t v16 = a4 && *a4 == 1935895670;
      for (uint64_t i = *(void *)&buf[8]; (_BYTE *)i != buf; uint64_t i = *(void *)(i + 8))
      {
        sub_B8F68((uint64_t *)&v81, (uint64_t *)(i + 16), "", 187);
        if (!v16 || (v81[23] & 0x10) != 0) {
          sub_1378C((uint64_t)&__p, *((_DWORD *)v81 + 36));
        }
        AudioObjectID v32 = v82;
        if (v82)
        {
          p_shared_owners = (unint64_t *)&v82->__shared_owners_;
          do
            char v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }

      if (__p.__r_.__value_.__r.__words[0])
      {
        CFRetain(__p.__r_.__value_.__l.__data_);
        uint64_t v35 = __p.__r_.__value_.__r.__words[0];
      }

      else
      {
        uint64_t v35 = 0LL;
      }

      *a6 = v35;
      sub_85B80((uint64_t *)buf);
      sub_13818((uint64_t)&__p);
    }
  }

  char v5 = (uint64_t *)*v12;
  uint64_t v7 = (uint64_t **)v12;
  if (!*v12) {
    goto LABEL_44;
  }
  return v5;
}

    if (v10) {
      operator delete(v10);
    }
  }

  return 0LL;
}

  char v6 = v11;
  if (!*v11)
  {
LABEL_44:
    int v22 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v22 + 7) = a4;
    return sub_32C38(v5, (uint64_t)v13, v6, v22);
  }

  return result;
}

        if (*v9) {
          return result;
        }
        goto LABEL_25;
      }

  char v5 = *v12;
  uint64_t v7 = v12;
  if (!*v12) {
    goto LABEL_44;
  }
  return v5;
}

      if (*v9) {
        return result;
      }
      goto LABEL_23;
    }

      uint64_t v7 = &qword_4938E0;
      char v15 = &qword_4938E0;
LABEL_23:
      uint64_t v16 = operator new(0x30uLL);
      void v16[2] = *(_OWORD *)v2;
      *(void *)uint64_t v16 = 0LL;
      *((void *)v16 + 1) = 0LL;
      *((void *)v16 + 2) = v7;
      const char *v15 = (uint64_t)v16;
      if (*(void *)qword_4938D8)
      {
        qword_4938D8 = *(void *)qword_4938D8;
        uint64_t v16 = (_OWORD *)*v15;
      }

      uint64_t result = (uint64_t)sub_7A420((uint64_t *)qword_4938E0, (uint64_t *)v16);
      uint64_t v3 = qword_4938E0;
      ++qword_4938E8;
LABEL_26:
      v2 += 16LL;
      if (v2 == v4) {
        return result;
      }
    }

    uint64_t v7 = &qword_4938E0;
LABEL_19:
    if (v3)
    {
      char v15 = v7 + 1;
      if (v7[1]) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }

    goto LABEL_22;
  }

  return result;
}

  if (v10) {
    (*(void (**)(void *))(*v8 + 24LL))(v8);
  }
  return v13;
}

        char v6 = (void *)v6[1];
        if (v6 == a3) {
          goto LABEL_23;
        }
      }

      uint64_t v8 = 0LL;
LABEL_14:
      AudioObjectID v13 = (os_log_t *)sub_138E8(9);
      unint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 675;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Encountered invalid port in connections list.",  buf,  0x12u);
      }

      if (!v8) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }
  }

  int v25 = &v27;
  sub_8C8F0((void ***)&v25);
  uint64_t result = v30;
  if (v30 == v29)
  {
    __int16 v23 = 4LL;
    uint64_t result = v29;
  }

  else
  {
    if (!v30) {
      return result;
    }
    __int16 v23 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 8 * v23))(result, v21);
}

  char v5 = (uint64_t *)*v12;
  uint64_t v7 = (uint64_t **)v12;
  if (!*v12) {
    goto LABEL_44;
  }
  return v5;
}

  os_log_s *v14 = &v9[v13];
  return result;
}

    sub_3686A0((uint64_t)a1, a2, a3, a4, a5, a6);
    return;
  }

  if (a5 != 8)
  {
    int v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v43 = "StandardUtilities.h";
        uint64_t v44 = 1024;
        int v45 = 149;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) == inDataSize",  buf,  0x12u);
      }
    }
  }

  sub_1E363C((uint64_t)a1, 0, *(double *)a6);
}

        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          uint64_t v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }

  char v6 = v11;
  if (!*v11)
  {
LABEL_44:
    int v22 = operator new(0x40uLL);
    *((_DWORD *)v22 + 8) = *a4;
    sub_86550((uint64_t *)v22 + 5, (uint64_t)(a4 + 2));
    return sub_32C38(v5, (uint64_t)v13, v6, (uint64_t *)v22);
  }

  return result;
}

  char v6 = v11;
  if (!*v11)
  {
LABEL_44:
    int v22 = operator new(0x38uLL);
    v22[2] = *(_OWORD *)a4;
    *((void *)v22 + 6) = *(void *)(a4 + 16);
    return sub_32C38(v5, (uint64_t)v13, v6, (uint64_t *)v22);
  }

  return result;
}

          sub_32C38((uint64_t **)(a1 + 40), (uint64_t)v29, v30, (uint64_t *)v46);
          int v22 = v45;
          int v46 = (unint64_t *)v45;
          if (v45) {
            int v45 = sub_68080((uint64_t)v45);
          }
          __int16 v31 = v19[1];
          if (v31)
          {
            do
            {
              AudioObjectID v32 = (uint64_t **)v31;
              __int16 v31 = (uint64_t *)*v31;
            }

            while (v31);
          }

          else
          {
            do
            {
              AudioObjectID v32 = (uint64_t **)v19[2];
              BOOL v33 = *v32 == (uint64_t *)v19;
              char v19 = v32;
            }

            while (!v33);
          }

          if (!v22) {
            break;
          }
          char v19 = v32;
        }

        while (v32 != v18);
      }

      sub_117484((uint64_t)&v44);
      char v19 = v32;
    }

    if (v19 != v18)
    {
      do
      {
        char v34 = operator new(0x30uLL);
        v34[4] = v19[4];
        uint64_t v35 = v19[5];
        v34[5] = v35;
        if (v35)
        {
          uint64_t v36 = (unint64_t *)(v35 + 2);
          do
            __int16 v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }

        int v38 = *v14;
        int v39 = (uint64_t **)(a1 + 48);
        int v40 = (uint64_t **)(a1 + 48);
        if (*v14)
        {
          do
          {
            while (1)
            {
              int v39 = (uint64_t **)v38;
              int v38 = *v39;
              int v40 = v39;
              if (!*v39) {
                goto LABEL_44;
              }
            }

            int v38 = v39[1];
          }

          while (v38);
          int v40 = v39 + 1;
        }

  const char *v15 = &v9[v14];
  return result;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v7 = (_DWORD *)sub_28AFEC(a2);
  if (!v7 || (uint64_t v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      char v19 = 136315394;
      uint64_t v20 = "HP_HardwarePlugInInterface.cpp";
      char v21 = 1024;
      int v22 = 805;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceRead: no devic e with given ID",  (uint8_t *)&v19,  0x12u);
    }

    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v12 = &off_4865A0;
    void v12[2] = 560227702;
  }

  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 536LL))(v7, a3, a4);
  return 0LL;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v7 = (_DWORD *)sub_28AFEC(a2);
  if (!v7 || (uint64_t v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      char v19 = 136315394;
      uint64_t v20 = "HP_HardwarePlugInInterface.cpp";
      char v21 = 1024;
      int v22 = 864;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceTranslateTime: no device with given ID",  (uint8_t *)&v19,  0x12u);
    }

    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v12 = &off_4865A0;
    void v12[2] = 560227702;
  }

  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 616LL))(v7, a3, a4);
  return 0LL;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v9 = (_DWORD *)sub_28AFEC(a2);
  if (!v9 || (uint64_t v10 = v9[3], v10 != 1633773415) && v10 != 1633969526)
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    AudioObjectID v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      char v21 = 136315394;
      int v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      __int16 v24 = 493;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceCreateIOProcID : no device with given ID",  (uint8_t *)&v21,  0x12u);
    }

    unint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v14 = &off_4865A0;
    v14[2] = 560227702;
  }

  *a5 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v9 + 280LL))(v9, a3, a4);
  return 0LL;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v9 = (_DWORD *)sub_28AFEC(a3);
  if (!v9 || (uint64_t v10 = v9[3], v10 != 1633773415) && v10 != 1633969526)
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    AudioObjectID v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      char v21 = 136315394;
      int v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      __int16 v24 = 526;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceCreateIOProcID WithBlock: no device with given ID",  (uint8_t *)&v21,  0x12u);
    }

    unint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v14 = &off_4865A0;
    v14[2] = 560227702;
  }

  *a2 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v9 + 296LL))(v9, a4, a5);
  return 0LL;
}

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v9 = (_DWORD *)sub_28AFEC(a2);
  if (!v9 || (uint64_t v10 = v9[3], v10 != 1633773415) && v10 != 1633969526)
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    AudioObjectID v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      char v21 = 136315394;
      int v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      __int16 v24 = 559;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceCreateIOProcID WithClockedProc: no device with given ID",  (uint8_t *)&v21,  0x12u);
    }

    unint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v14 = &off_4865A0;
    v14[2] = 560227702;
  }

  *a5 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v9 + 288LL))(v9, a3, a4);
  return 0LL;
}

  char v6 = v11;
  if (!*v11)
  {
LABEL_44:
    int v22 = (uint64_t *)operator new(0x28uLL);
    v22[4] = a4;
    return sub_32C38(v5, (uint64_t)v13, v6, v22);
  }

  return result;
}

      if (*v12) {
        return;
      }
      goto LABEL_44;
    }
  }

  uint64_t v8 = *a2;
  if (*a1 == a2)
  {
    uint64_t v10 = a2;
LABEL_16:
    if (v8) {
      AudioObjectID v13 = v10;
    }
    else {
      AudioObjectID v13 = a2;
    }
    if (v8) {
      uint64_t v12 = v10 + 1;
    }
    else {
      uint64_t v12 = a2;
    }
    goto LABEL_22;
  }

  if (v8)
  {
    uint64_t v9 = *a2;
    do
    {
      uint64_t v10 = (uint64_t **)v9;
      uint64_t v9 = (uint64_t *)v9[1];
    }

    while (v9);
  }

  else
  {
    char v15 = a2;
    do
    {
      uint64_t v10 = (uint64_t **)v15[2];
      uint64_t v16 = *v10 == (uint64_t *)v15;
      char v15 = v10;
    }

    while (v16);
  }

  if (*((_DWORD *)v10 + 8) < a3) {
    goto LABEL_16;
  }
  int v17 = (uint64_t *)*v6;
  uint64_t v12 = (uint64_t **)(a1 + 1);
  AudioObjectID v13 = (uint64_t **)(a1 + 1);
  if (*v6)
  {
    uint64_t v12 = (uint64_t **)(a1 + 1);
    do
    {
      while (1)
      {
        AudioObjectID v13 = (uint64_t **)v17;
        uint64_t v18 = *((_DWORD *)v17 + 8);
        if (v18 <= a3) {
          break;
        }
        int v17 = *v13;
        uint64_t v12 = v13;
        if (!*v13) {
          goto LABEL_44;
        }
      }

      if (v18 >= a3) {
        goto LABEL_22;
      }
      uint64_t v12 = v13 + 1;
      int v17 = v13[1];
    }

    while (v17);
  }

  unint64_t v201 = a3;
  uint64_t v18 = sub_77A54(a3[1]);
  char v19 = v18;
  uint64_t v20 = a2 + 166;
  char v21 = 166LL;
  if (v18)
  {
    char v21 = 172LL;
    uint64_t v20 = a2 + 172;
  }

  int v22 = *(void *)&v20[2]._os_unfair_lock_opaque;
  uint64_t v198 = v21 * 4;
  __int16 v23 = *(void *)&a2[v21]._os_unfair_lock_opaque;
  v212 = 0LL;
  uint64_t v213 = 0LL;
  if (v18) {
    __int16 v24 = 184LL;
  }
  else {
    __int16 v24 = 178LL;
  }
  int v25 = a2;
  if (v18) {
    int v26 = a2 + 184;
  }
  else {
    int v26 = a2 + 178;
  }
  int v211 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = &v211;
  buf[8] = 0;
  __int16 v27 = v22 - v23;
  if (v22 == v23)
  {
    uint64_t v30 = *(void **)&v25[v24]._os_unfair_lock_opaque;
    __int16 v31 = *(void **)&v26[2]._os_unfair_lock_opaque;
    if (v30 == v31) {
      goto LABEL_166;
    }
    AudioObjectID v32 = v25;
    size_t v193 = a1;
    goto LABEL_36;
  }

  uint64_t v28 = (void **)operator new(2 * v27);
  int v211 = v28;
  uint64_t v213 = &v28[2 * (v27 >> 3)];
  bzero(v28, 2 * v27);
  __int16 v29 = (void **)((char *)v28 + 2 * v27);
  v212 = v29;
  uint64_t v30 = *(void **)&v195[v24]._os_unfair_lock_opaque;
  __int16 v31 = *(void **)&v26[2]._os_unfair_lock_opaque;
  if (v30 != v31)
  {
    size_t v193 = a1;
    AudioObjectID v32 = v195;
LABEL_36:
    BOOL v33 = 0;
    char v34 = 0;
    uint64_t v35 = "input";
    if (v19) {
      uint64_t v35 = "output";
    }
    __s = (char *)v35;
    CFTypeRef v196 = v31;
    while (1)
    {
      uint64_t v36 = *v30;
      if (*v30)
      {
        __int16 v37 = (*(uint64_t (**)(void))(*(void *)v36 + 160LL))(*v30);
        int v38 = v37;
        if (v37 < 0xFFFFFFFE)
        {
          uint64_t v202 = v37;
          unint64_t v200 = 2LL * v37;
          if (v211[v200])
          {
            int v46 = (os_log_t *)sub_138E8(13);
            __int16 v47 = *v46;
            if (*v46)
            {
              if (os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
                unsigned int v215 = 1024;
                int v216 = 563;
                char v217 = 1024;
                *(_DWORD *)int v218 = v38;
                *(_WORD *)&v218[4] = 1024;
                *(_DWORD *)&v218[6] = v34;
                _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Duplicate channel layout information found for client stream index %d. New layout from underlying stream index %d will override the previously retrieved data for this index.",  buf,  0x1Eu);
              }
            }
          }

          if (!(*(uint64_t (**)(uint64_t))(*(void *)v36 + 184LL))(v36))
          {
            int v151 = (os_log_t *)sub_138E8(13);
            int v152 = *v151;
            if (*v151 && os_log_type_enabled(*v151, OS_LOG_TYPE_ERROR))
            {
              sub_7D084(&__p, __s);
              int v153 = v210 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              unsigned int v215 = 1024;
              int v216 = 566;
              char v217 = 2080;
              *(void *)int v218 = v153;
              *(_WORD *)&v218[8] = 1024;
              *(_DWORD *)&v218[10] = v34;
              _os_log_impl( &dword_0,  v152,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [GetPhysicalDevice(*underlyingStreamCacheItemPtr) is NULL]: The %s underlying stream cache item at index %d returned a NULL PhysicalDevice",  buf,  0x22u);
              if (v210 < 0) {
                operator delete(__p);
              }
            }

            int v154 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error( v154,  "The %s underlying stream cache item at index %d returned a NULL PhysicalDevice");
          }

          int v199 = v33;
          int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 184LL))(v36);
          __int16 v49 = *(void *)(*(void *)((char *)&v32->_os_unfair_lock_opaque + v198) + 8 * v202);
          if (!v49)
          {
            UInt32 v171 = (os_log_t *)sub_138E8(13);
            __int16 v172 = *v171;
            if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
            {
              int v173 = &__p;
              sub_7D084(&__p, __s);
              if (v210 < 0) {
                int v173 = __p;
              }
              std::to_string(&v207, v38);
              std::string::size_type size = (char)v207.__r_.__value_.__s.__size_;
              pid_t v175 = v207.__r_.__value_.__r.__words[0];
              sub_23FE8((uint64_t)&v204, v195 + 2);
              __int16 v176 = &v207;
              if (size < 0) {
                __int16 v176 = (std::string *)v175;
              }
              if (v206 >= 0) {
                uint64_t v177 = &v204;
              }
              else {
                uint64_t v177 = v204;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              unsigned int v215 = 1024;
              int v216 = 573;
              char v217 = 2080;
              *(void *)int v218 = v173;
              *(_WORD *)&v218[8] = 2080;
              *(void *)&v218[10] = v176;
              *(_WORD *)&v218[18] = 2080;
              *(void *)&v218[20] = v177;
              _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [clientStreamCache[clientStreamCacheIndex] is NULL]: Encounte red NULL %s client stream cache item at index %s in device %s",  buf,  0x30u);
              if (v206 < 0) {
                operator delete(v204);
              }
              if (v210 < 0) {
                operator delete(__p);
              }
            }

            unsigned int v178 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error( v178,  "Encountered NULL %s client stream cache item at index %s in device %s");
          }

          int v50 = (os_unfair_lock_s *)v48;
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v49 + 136LL))(&v207, v49);
          std::string __p = 0LL;
          char v209 = 0LL;
          if (!v207.__r_.__value_.__l.__size_
            || (uint64_t v51 = std::__shared_weak_count::lock((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_),
                (char v209 = v51) == 0LL)
            || (uint64_t v52 = v51, (__p = (void *)v207.__r_.__value_.__r.__words[0]) == 0LL))
          {
            int v144 = (os_log_t *)sub_138E8(13);
            int v145 = *v144;
            if (*v144 && os_log_type_enabled(*v144, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              unsigned int v215 = 1024;
              int v216 = 67;
              _os_log_impl( &dword_0,  v145,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [inStream is NULL]: Encountered a NULL stream",  buf,  0x12u);
            }

            int v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v146, "Encountered a NULL stream");
          }

          sub_28BEC((uint64_t)v207.__r_.__value_.__l.__data_, (uint64_t)buf);
          AudioObjectID v53 = *(_DWORD *)&v218[8];
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            int v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }

          if (v207.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
          }
          uint64_t v203 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v49 + 48LL))(v49) + 28);
          int v197 = v50;
          if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v36 + 56LL))(v36) + 28) != v53)
          {
            unint64_t v56 = (os_log_t *)sub_138E8(13);
            uint64_t v57 = *v56;
            if (*v56)
            {
              if (os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
              {
                (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v49 + 136LL))(&v204, v49);
                unint64_t v58 = std::__shared_weak_count::lock(v205);
                v207.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
                v207.__r_.__value_.__l.__size_ = (std::string::size_type)v58;
                sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)v204 + 2);
                int v59 = v210;
                std::chrono::system_clock::time_point v60 = (void **)__p;
                uint64_t v61 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v36 + 56LL))(v36) + 28);
                unsigned int v62 = &__p;
                if (v59 < 0) {
                  unsigned int v62 = v60;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
                unsigned int v215 = 1024;
                int v216 = 578;
                char v217 = 2080;
                *(void *)int v218 = v62;
                *(_WORD *)&v218[8] = 1024;
                *(_DWORD *)&v218[10] = v61;
                *(_WORD *)&v218[14] = 1024;
                *(_DWORD *)&v218[16] = v53;
                _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Encountered an unexpected number of channels in stream %s: expected %u, found %u",  buf,  0x28u);
                if (v210 < 0) {
                  operator delete(__p);
                }
                std::chrono::steady_clock::time_point v63 = (unint64_t *)&v58->__shared_owners_;
                AudioObjectID v32 = v195;
                int v50 = v197;
                do
                  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }

                if (v205) {
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
            }
          }

          if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned int *))(*(void *)&v50->_os_unfair_lock_opaque
                                                                                  + 16LL))( v50,  v201))
          {
            if ((_DWORD)v203 == v53)
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = (*(uint64_t (**)(os_unfair_lock_s *, unsigned int *, void, void))(*(void *)&v50->_os_unfair_lock_opaque + 32LL))( v50,  v201,  0LL,  0LL);
              std::chrono::steady_clock::time_point v65 = (char *)malloc(*(unsigned int *)buf);
              (*(void (**)(os_unfair_lock_s *, unsigned int *, void, void, _BYTE *, char *))(*(void *)&v50->_os_unfair_lock_opaque + 40LL))( v50,  v201,  0LL,  0LL,  buf,  v65);
              std::chrono::system_clock::time_point v66 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 176LL))(v36);
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v66 + v53;
              goto LABEL_126;
            }

            if (v53 == 1 && v203 >= 2)
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = (*(uint64_t (**)(os_unfair_lock_s *, unsigned int *, void, void))(*(void *)&v50->_os_unfair_lock_opaque + 32LL))( v50,  v201,  0LL,  0LL);
              std::chrono::steady_clock::time_point v65 = sub_335D30(v203);
              (*(void (**)(os_unfair_lock_s *, unsigned int *, void, void, _BYTE *, char *))(*(void *)&v50->_os_unfair_lock_opaque + 40LL))( v50,  v201,  0LL,  0LL,  buf,  v65);
              uint64_t v83 = 0LL;
              do
              {
                unint64_t v84 = &v65[v83];
                *((_OWORD *)v84 + 2) = *(_OWORD *)(v65 + 12);
                *((_DWORD *)v84 + 12) = *((_DWORD *)v65 + 7);
                v83 += 20LL;
              }

              while (20LL * v203 - 20 != v83);
              goto LABEL_125;
            }

            uint64_t v85 = sub_138E8(16);
            unint64_t v86 = sub_138E8(33);
            uint64_t v87 = 0;
            uint64_t v88 = 0LL;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
            uint64_t v89 = *(void *)(v85 + 8);
            while (1)
            {
              uint64_t v90 = *(int *)&buf[4 * v88];
              AudioStreamBasicDescription v91 = v87;
              if (((v89 & v90) != 0) != ((*(void *)(v86 + 8) & v90) != 0)) {
                break;
              }
              uint64_t v87 = 1;
              uint64_t v88 = 1LL;
              if ((v91 & 1) != 0) {
                goto LABEL_118;
              }
            }

            if ((v89 & v90) == 0) {
              uint64_t v85 = v86;
            }
LABEL_118:
            int v92 = *(os_log_s **)v85;
            if (v92 && os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
            {
              sub_7D084(&__p, __s);
              uint64_t v93 = &__p;
              if (v210 < 0) {
                uint64_t v93 = __p;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              unsigned int v215 = 1024;
              int v216 = 615;
              char v217 = 2080;
              *(void *)int v218 = v93;
              *(_WORD *)&v218[8] = 1024;
              *(_DWORD *)&v218[10] = v38;
              *(_WORD *)&v218[14] = 1024;
              *(_DWORD *)&v218[16] = v53;
              *(_WORD *)&v218[20] = 1024;
              *(_DWORD *)&v218[22] = v203;
              _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Encountered an incompatible stream format conversion in the %s client stream at index %d. Form at is converted from underlying format %u to virtualized format %u",  buf,  0x2Eu);
              if (v210 < 0) {
LABEL_123:
              }
                operator delete(__p);
            }

void sub_3CE04(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x3CBACLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_3CE6C(uint64_t a1, int *a2)
{
  if (*a2 != 1986095470)
  {
    sub_6DD4();
    int v5 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    if (*(_DWORD *)(a1 + 108) != 2)
    {
      uint64_t v11 = sub_138E8(13);
      id v12 = sub_8C7D4(1, *(void **)v11, *(void *)(v11 + 8));
      AudioObjectID v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      unint64_t v14 = v13;
      if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        int v17 = "VirtualAudio_PlugIn.mm";
        __int16 v18 = 1024;
        int v19 = 5225;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): VirtualAudio PlugIn is not initialized yet",  (uint8_t *)&v16,  0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
    }

    uint64_t v2 = 0LL;
    int v6 = *a2;
    if (*a2 <= 1769304163)
    {
      if (v6 <= 1651664754)
      {
        if (v6 <= 1634629489)
        {
          if (v6 <= 1634624370)
          {
            if (v6 == 1633907299) {
              goto LABEL_66;
            }
            int v7 = 1633969267;
          }

          else
          {
            if (v6 == 1634624371 || v6 == 1634627952) {
              goto LABEL_66;
            }
            int v7 = 1634627954;
          }
        }

        else if (v6 > 1635152482)
        {
          if (v6 == 1635152483 || v6 == 1651077236) {
            goto LABEL_66;
          }
          int v7 = 1651077731;
        }

        else
        {
          if (v6 == 1634629490 || v6 == 1634756195) {
            goto LABEL_66;
          }
          int v7 = 1634759267;
        }

        goto LABEL_58;
      }

      if (v6 > 1684632433)
      {
        if (v6 > 1701737067)
        {
          if (v6 != 1701737068)
          {
            if (v6 == 1751480691) {
              goto LABEL_66;
            }
            int v7 = 1768845421;
            goto LABEL_58;
          }
        }

        else
        {
          if (v6 == 1684632434) {
            goto LABEL_66;
          }
          if (v6 != 1685283955)
          {
            int v7 = 1701013875;
            goto LABEL_58;
          }
        }

LABEL_65:
        uint64_t v2 = 1LL;
        goto LABEL_66;
      }

      if (v6 > 1668310626)
      {
        if (v6 == 1668310627 || v6 == 1668313699) {
          goto LABEL_66;
        }
        int v7 = 1668575346;
        goto LABEL_58;
      }

      if (v6 == 1651664755) {
        goto LABEL_66;
      }
      int v8 = 1667329392;
LABEL_64:
      if (v6 != v8)
      {
LABEL_71:
        uint64_t v10 = sub_5E070(a1, a2);
LABEL_72:
        uint64_t v2 = v10;
        if (!v5) {
          return v2;
        }
        goto LABEL_67;
      }

      goto LABEL_65;
    }

    if (v6 > 1936028520)
    {
      if (v6 > 1986094178)
      {
        if (v6 > 1987077485)
        {
          if (v6 == 1987077486) {
            goto LABEL_66;
          }
          int v8 = 2019714413;
        }

        else
        {
          int v8 = 1987016304;
        }

        goto LABEL_64;
      }

      if (v6 > 1936745572)
      {
        if (v6 == 1936745573)
        {
          if ((MGGetBoolAnswer(@"assistant") & 1) == 0)
          {
            uint64_t v10 = sub_93B80();
            goto LABEL_72;
          }

          goto LABEL_65;
        }

        if (v6 == 1936746862) {
          goto LABEL_66;
        }
        int v8 = 1936882284;
        goto LABEL_64;
      }

      if (v6 == 1936028521 || v6 == 1936225648) {
        goto LABEL_65;
      }
      int v7 = 1936745332;
    }

    else if (v6 <= 1886549106)
    {
      if (v6 <= 1868853874)
      {
        if (v6 == 1769304164) {
          goto LABEL_65;
        }
        int v7 = 1819173229;
      }

      else
      {
        if (v6 == 1868853875) {
          goto LABEL_66;
        }
        if (v6 == 1886350709) {
          goto LABEL_65;
        }
        int v7 = 1886548848;
      }
    }

    else
    {
      if (v6 > 1920230245)
      {
        if (v6 == 1920230246) {
          goto LABEL_65;
        }
        if (v6 == 1920297328) {
          goto LABEL_66;
        }
        int v8 = 1920426613;
        goto LABEL_64;
      }

      if (v6 == 1886549107 || v6 == 1903653475) {
        goto LABEL_66;
      }
      int v7 = 1919120504;
    }

          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_4865A0;
          exception[2] = 561211770;
        }

        uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120LL))(a1, a2);
        goto LABEL_31;
      }
    }

    return sub_6A140(a1, a2, a3, a4, a5, (uint64_t)a6);
  }

  if (v9 <= 1935894637)
  {
    if (v9 != 1819173229)
    {
      if (v9 == 1819569763)
      {
        AudioObjectID v13 = *a5;
        if (v13 == (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
          goto LABEL_17;
        }

        int v25 = (os_log_t *)sub_138E8(13);
        int v22 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          BOOL v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          uint64_t v35 = 1024;
          uint64_t v36 = 350;
          __int16 v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyLatency";
          goto LABEL_64;
        }

        goto LABEL_65;
      }

      return sub_6A140(a1, a2, a3, a4, a5, (uint64_t)a6);
    }

    __int16 v18 = *a5;
    if (v18 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
    {
      __int16 v29 = (os_log_t *)sub_138E8(13);
      int v22 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        BOOL v33 = 136315394;
        char v34 = "HP_Stream.cpp";
        uint64_t v35 = 1024;
        uint64_t v36 = 310;
        __int16 v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyName";
        goto LABEL_64;
      }

      goto LABEL_65;
    }

    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
LABEL_31:
    *a6 = result;
    return result;
  }

  switch(v9)
  {
    case 1935894638:
      char v15 = *a5;
      uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2);
      if (v15 != (_DWORD)result)
      {
        __int16 v27 = (os_log_t *)sub_138E8(13);
        int v22 = *v27;
        if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          BOOL v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          uint64_t v35 = 1024;
          uint64_t v36 = 345;
          __int16 v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyStartingChannel";
          goto LABEL_64;
        }

        goto LABEL_65;
      }

      int v16 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 92);
      break;
    case 1935960434:
      uint64_t v20 = *a5;
      uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2);
      if (v20 != (_DWORD)result)
      {
        __int16 v31 = (os_log_t *)sub_138E8(13);
        int v22 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
        {
          BOOL v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          uint64_t v35 = 1024;
          uint64_t v36 = 335;
          __int16 v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyDirection";
          goto LABEL_64;
        }

        goto LABEL_65;
      }

      int v16 = *(unsigned __int8 *)(a1 + 88);
      break;
    case 1952805485:
      uint64_t v10 = *a5;
      if (v10 == (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
LABEL_17:
        *(_DWORD *)a6 = result;
        return result;
      }

      char v21 = (os_log_t *)sub_138E8(13);
      int v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        BOOL v33 = 136315394;
        char v34 = "HP_Stream.cpp";
        uint64_t v35 = 1024;
        uint64_t v36 = 340;
        __int16 v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyTerminalType";
LABEL_64:
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v33, 0x12u);
        goto LABEL_65;
      }

      goto LABEL_65;
    default:
      return sub_6A140(a1, a2, a3, a4, a5, (uint64_t)a6);
  }

  *(_DWORD *)a6 = v16;
  return result;
}

      sub_E9064((unsigned __int8 *)&v159);
      int v159 = (uint64_t)&v159;
      int v160 = &v159;
      int v161 = 0LL;
      std::chrono::steady_clock::time_point v65 = v166;
      if (v166)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = (uint64_t)v164;
        std::chrono::system_clock::time_point v66 = v165;
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = *v165;
        *(void *)(v68 + 8) = v164[1];
        **(void **)(v67 + 8) = v68;
        uint64_t v69 = v159;
        *(void *)(v159 + 8) = v66;
        os_log_s *v66 = v69;
        *(void *)(v67 + 8) = &v159;
        int v159 = v67;
        int v161 = v65;
        unint64_t v166 = 0LL;
        uint64_t v70 = sub_5954C();
        size_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 304LL))(v70);
        int v72 = v160;
        if ((v71 & 1) != 0)
        {
          if (v160 != &v159)
          {
            do
            {
              uint64_t v73 = sub_138E8(7);
              uint64_t v74 = sub_138E8(15);
              unint64_t v75 = 0;
              unsigned int v76 = 0LL;
              *(void *)UInt32 v171 = 0x100000002LL;
              uint64_t v77 = *(void *)(v73 + 8);
              while (1)
              {
                uint64_t v78 = (int)v171[v76];
                uint64_t v79 = v75;
                if (((v77 & v78) != 0) != ((*(void *)(v74 + 8) & v78) != 0)) {
                  break;
                }
                unint64_t v75 = 1;
                unsigned int v76 = 1LL;
                if ((v79 & 1) != 0)
                {
                  if ((v77 & 1) == 0) {
                    goto LABEL_82;
                  }
                  goto LABEL_76;
                }
              }

              if ((v77 & v78) == 0) {
                uint64_t v73 = v74;
              }
              if ((*(void *)(v73 + 8) & 1) != 0)
              {
LABEL_76:
                uint64_t v80 = *(os_log_s **)v73;
                if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v81 = (os_unfair_lock_s *)v72[2];
                  sub_23FE8((uint64_t)&__p, v81 + 2);
                  p_p = &__p;
                  if (v169 < 0) {
                    p_p = __p;
                  }
                  v171[0] = 136315906;
                  *(void *)&v171[1] = "DeviceManager.cpp";
                  LOWORD(v171[3]) = 1024;
                  *(_DWORD *)((char *)&v171[3] + 2) = 51;
                  HIWORD(v171[4]) = 2048;
                  *(void *)&v171[5] = v81;
                  LOWORD(v171[7]) = 2080;
                  *(void *)((char *)&v171[7] + 2) = p_p;
                  _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Queueing device %p (%s) for deletion.",  (uint8_t *)v171,  0x26u);
                  if (v169 < 0) {
                    operator delete(__p);
                  }
                }
              }

    __int16 v18 = 0LL;
    goto LABEL_66;
  }

  if (v5 < 3) {
    goto LABEL_65;
  }
  int v19 = *(void **)(v3 + 24);
  if (v19 == (void *)v4)
  {
    LODWORD(v18) = 0;
    HIDWORD(v44) = 0;
    char v21 = 0;
    goto LABEL_85;
  }

  uint64_t v20 = 0;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  int v45 = 0LL;
  char v21 = 0;
  uint64_t v41 = 0;
  do
  {
    sub_B8CBC((uint64_t *)buf, v19 + 2, "", 503);
    int v22 = *(std::__shared_weak_count **)&buf[8];
    __int16 v23 = *(_DWORD *)(*(void *)buf + 144LL);
    if (*(void *)&buf[8])
    {
      __int16 v24 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        int v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    sub_B8CBC((uint64_t *)buf, v19 + 4, "", 504);
    int v26 = *(std::__shared_weak_count **)&buf[8];
    __int16 v27 = *(_DWORD *)(*(void *)buf + 144LL);
    if (*(void *)&buf[8])
    {
      uint64_t v28 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        __int16 v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    if (v23 > 1886216808)
    {
      switch(v23)
      {
        case 1886216809:
LABEL_47:
          ++v21;
          HIDWORD(v45) = 1;
          break;
        case 1886613618:
          ++v21;
          LODWORD(v44) = 1;
          break;
        case 1886614640:
          HIDWORD(v43) = 1;
          goto LABEL_57;
        default:
          goto LABEL_54;
      }

    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v2 = v9 % v10;
      }
      else {
        uint64_t v2 = v9;
      }
    }

    else
    {
      uint64_t v2 = (v10 - 1) & v9;
    }

    goto LABEL_70;
  }

          char v34 = 1000 * v33.__d_.__rep_;
LABEL_66:
          if (v34 > (v32.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v35.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_69:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v35);
            std::chrono::steady_clock::now();
            goto LABEL_70;
          }
        }

        v35.__d_.__rep_ = v34 + v32.__d_.__rep_;
        goto LABEL_69;
      }

  sub_CAE54(&v130, (uint64_t *)v136, 1LL);
  *(void *)int v46 = off_484140;
  v46[2] = v47;
  *((void *)v46 + 2) = v46 + 4;
  *((void *)v46 + 3) = v46 + 4;
  *((void *)v46 + 4) = 0LL;
  uint64_t v57 = v132;
  if (v132)
  {
    int v59 = v130;
    unint64_t v58 = v131;
    std::chrono::system_clock::time_point v60 = *v131;
    *(void *)(v60 + 8) = *(void *)(v130 + 8);
    **(void **)(v59 + 8) = v60;
    uint64_t v61 = *((void *)v46 + 2);
    *(void *)(v61 + 8) = v58;
    *unint64_t v58 = v61;
    *((void *)v46 + 2) = v59;
    *(void *)(v59 + 8) = v46 + 4;
    *((void *)v46 + 4) = v57;
    int v132 = 0LL;
  }

  v46[10] = v45;
  *((_BYTE *)v46 + 44) = 0;
  unsigned int v62 = operator new(0x18uLL);
  std::chrono::steady_clock::time_point v63 = v43;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = *(void **)(a3 + 8);
  os_log_s *v62 = a3;
  v62[1] = v64;
  v62[2] = v46;
  *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v62;
  std::chrono::steady_clock::time_point v65 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v62;
  *(void *)(a3 + 16) = v65;
  sub_CCAB4((uint64_t)v46);
  sub_85B80(&v130);
  if (*(void *)&v136[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v136[8]);
  }
  (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, void, uint64_t))(*(void *)&v13->_os_unfair_lock_opaque
                                                                                     + 256LL))( &v128,  v13,  0LL,  v11);
  sub_108294(&v127, v112, a2, v13, (uint64_t)buf, (unsigned int **)&__p);
  std::chrono::system_clock::time_point v66 = sub_1B5BF0(v15);
  int v125 = 0LL;
  int v126 = 0LL;
  if (!v129 || (v126 = std::__shared_weak_count::lock(v129)) == 0LL || (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v128, (v125 = v128) == 0))
  {
    char v108 = (os_log_t *)sub_138E8(13);
    AudioObjectID v109 = *v108;
    if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v136 = 136315394;
      *(void *)&v136[4] = "RoutingHandler_Record_GenericConfig1.cpp";
      *(_WORD *)&v136[12] = 1024;
      *(_DWORD *)&v136[14] = 140;
      _os_log_impl( &dword_0,  v109,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate input volume control.",  v136,  0x12u);
    }

    AudioObjectPropertyAddress v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v110, "Unable to locate input volume control.");
  }

  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = v127;
  uint64_t v69 = v133;
  sub_B8CBC((uint64_t *)v136, v10 + 4, "", 147);
  sub_1B4C60( v67,  (uint64_t)v68,  v69,  *(unsigned int *)(*(void *)v136 + 144LL),  (uint64_t)buf,  v10[9],  *(unsigned int *)(a2 + 12),  *(void *)(a2 + 104));
  uint64_t v70 = *(std::__shared_weak_count **)&v136[8];
  if (*(void *)&v136[8])
  {
    size_t v71 = (unint64_t *)(*(void *)&v136[8] + 8LL);
    do
      int v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
      if (!v66) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
  }

  if (v66) {
LABEL_77:
  }
    sub_1B5828(v125, *(unsigned int *)(a2 + 12), *(void *)(a2 + 112), v63);
LABEL_78:
  uint64_t v73 = &v126->__shared_owners_;
  do
    uint64_t v74 = __ldaxr((unint64_t *)v73);
  while (__stlxr(v74 - 1, (unint64_t *)v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
  }

  unint64_t v75 = v127;
  sub_32CC4((uint64_t)v127);
  sub_1BDB94((uint64_t)v75);
  if (((_DWORD)v15 == 1986556788 || (_DWORD)v15 == 1987211117 || (_DWORD)v15 == 1987208039) && v111)
  {
    strcpy(v136, "cwohbolg");
    v136[9] = 0;
    *(_WORD *)&v136[10] = 0;
    sub_1BCE9C((uint64_t)v75, (uint64_t)v136, a3, 1);
  }

  int v127 = 0LL;
  v63[2] = v75;
  v63[3] = v13;
  unsigned int v76 = operator new(0x68uLL);
  sub_CAEBC((uint64_t *)v136);
  __int16 v115 = *(std::__shared_weak_count **)&v136[8];
  std::mutex v124 = *(_OWORD *)v136;
  *(void *)char v136 = 0LL;
  *(void *)&v136[8] = 0LL;
  sub_CAF18((uint64_t)v76, &v124);
  v63[4] = v76;
  if (v115)
  {
    uint64_t v77 = (unint64_t *)&v115->__shared_owners_;
    do
      uint64_t v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }

  uint64_t v79 = *(std::__shared_weak_count **)&v136[8];
  if (*(void *)&v136[8])
  {
    uint64_t v80 = (unint64_t *)(*(void *)&v136[8] + 8LL);
    do
      uint64_t v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

  uint64_t v82 = operator new(0x68uLL);
  sub_CB144((uint64_t *)v136);
  int v116 = *(std::__shared_weak_count **)&v136[8];
  std::condition_variable v123 = *(_OWORD *)v136;
  *(void *)char v136 = 0LL;
  *(void *)&v136[8] = 0LL;
  sub_CAF18((uint64_t)v82, &v123);
  v63[5] = v82;
  if (v116)
  {
    uint64_t v83 = (unint64_t *)&v116->__shared_owners_;
    do
      unint64_t v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }

  uint64_t v85 = *(std::__shared_weak_count **)&v136[8];
  if (!*(void *)&v136[8]) {
    goto LABEL_106;
  }
  unint64_t v86 = (unint64_t *)(*(void *)&v136[8] + 8LL);
  do
    uint64_t v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    if (v66) {
      goto LABEL_107;
    }
  }

  else
  {
LABEL_106:
    if (v66)
    {
LABEL_107:
      uint64_t v88 = operator new(0x68uLL);
      sub_CB19C(v136, v128, v129);
      __int16 v117 = *(std::__shared_weak_count **)&v136[8];
      AudioObjectID v122 = *(_OWORD *)v136;
      *(void *)char v136 = 0LL;
      *(void *)&v136[8] = 0LL;
      sub_CAF18((uint64_t)v88, &v122);
      v63[6] = v88;
      if (v117)
      {
        uint64_t v89 = (unint64_t *)&v117->__shared_owners_;
        do
          uint64_t v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }

      AudioStreamBasicDescription v91 = *(std::__shared_weak_count **)&v136[8];
      if (*(void *)&v136[8])
      {
        int v92 = (unint64_t *)(*(void *)&v136[8] + 8LL);
        do
          uint64_t v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        goto LABEL_127;
      }

      goto LABEL_129;
    }
  }

  uint64_t v94 = operator new(0x68uLL);
  sub_CAEBC((uint64_t *)v136);
  int v118 = *(std::__shared_weak_count **)&v136[8];
  __int16 v121 = *(_OWORD *)v136;
  *(void *)char v136 = 0LL;
  *(void *)&v136[8] = 0LL;
  sub_CAF18((uint64_t)v94, &v121);
  v63[6] = v94;
  if (v118)
  {
    unsigned int v95 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }

  AudioStreamBasicDescription v91 = *(std::__shared_weak_count **)&v136[8];
  if (*(void *)&v136[8])
  {
    uint64_t v97 = (unint64_t *)(*(void *)&v136[8] + 8LL);
    do
      uint64_t v93 = __ldaxr(v97);
    while (__stlxr(v93 - 1, v97));
LABEL_127:
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v2 = v9 % v10;
      }
      else {
        uint64_t v2 = v9;
      }
    }

    else
    {
      uint64_t v2 = (v10 - 1) & v9;
    }

    goto LABEL_70;
  }

      sub_30E5D0((uint64_t)&v83, (uint64_t)a14, *(_DWORD **)a15, *(_DWORD **)(a15 + 8));
      if (v82)
      {
        sub_2DC204((uint64_t)&v91, (uint64_t)v81);
        *(_DWORD *)AudioObjectPropertyAddress buf = 1684303986;
        sub_2DC450((uint64_t)&buf[8], (uint64_t)&v91);
        sub_148DB8((uint64_t)&v83, *(int *)buf, buf);
        sub_2DBF5C((uint64_t)&buf[8]);
        sub_2DBF5C((uint64_t)&v91);
      }

      sub_300D48(&v91, a5);
      int v45 = *(char *)(a3 + 23);
      if (v45 >= 0) {
        int v46 = (const std::string::value_type *)a3;
      }
      else {
        int v46 = *(const std::string::value_type **)a3;
      }
      if (v45 >= 0) {
        __int16 v47 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        __int16 v47 = *(void *)(a3 + 8);
      }
      int v48 = std::string::append(&v91, v46, v47);
      __int16 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = v48->__r_.__value_.__l.__cap_;
      *(_OWORD *)AudioObjectPropertyAddress buf = v49;
      v48->__r_.__value_.__l.__size_ = 0LL;
      v48->__r_.__value_.__l.__cap_ = 0LL;
      v48->__r_.__value_.__r.__words[0] = 0LL;
      int v50 = std::string::append((std::string *)buf, ".dspg", 5uLL);
      uint64_t v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0LL;
      v50->__r_.__value_.__l.__cap_ = 0LL;
      v50->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v52 = (os_log_t *)sub_138E8(20);
      AudioObjectID v53 = *v52;
      if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v54 = &v79;
        if ((v79.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v54 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2950;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v54;
        _os_log_impl(&dword_0, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configuring microphone dsp from %s", buf, 0x1Cu);
      }

      int v55 = (int *)operator new(0x10uLL);
      v78[1] = v55 + 4;
      v78[2] = v55 + 4;
      *(void *)int v55 = a13;
      *((void *)v55 + 1) = 0LL;
      v78[0] = v55;
      sub_7D084(v76, a4);
      sub_7D084(&v75, a4);
      AudioStreamBasicDescription v91 = v75;
      memset(&v75, 0, sizeof(v75));
      LOBYTE(v92) = 1;
      sub_7D084(&__p, a4);
      CFTypeRef cf = __p;
      memset(&__p, 0, sizeof(__p));
      uint64_t v74 = 1;
      uint64_t v89 = 0LL;
      memset(buf, 0, sizeof(buf));
      uint64_t v93 = *(_OWORD *)&qword_402EFC;
      uint64_t v94 = 2LL;
      sub_83660((uint64_t)buf, (int *)&v93, 3LL);
      sub_302600(a1, (char *)v76, 1684434036, &v79, &v91, &cf, a6, v78, 0.0, (uint64_t)&v83, 1, (uint64_t)buf);
      sub_83284((uint64_t)buf);
      if (v77 < 0) {
        operator delete(v76[0]);
      }
      if (!a12) {
        goto LABEL_101;
      }
      sub_30EB94(buf, v87);
      unint64_t v56 = *(std::__shared_weak_count **)&buf[8];
      sub_143208(a1, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          unint64_t v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }

      int v55 = v78[0];
      if (v78[0]) {
LABEL_101:
      }
        operator delete(v55);
      sub_149990(v81);
      sub_D0C4C((void *)v84);
      int v59 = (void *)v83;
      *(void *)&uint64_t v83 = 0LL;
      if (v59) {
        operator delete(v59);
      }
      return;
    default:
      if (a2 != 2) {
        goto LABEL_65;
      }
LABEL_3:
      if (a12)
      {
        std::chrono::steady_clock::time_point v63 = (os_log_t *)sub_138E8(13);
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = *v63;
        if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2852;
          _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_114;
      }

      sub_30DB60((uint64_t)v80);
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_47DAD0;
      v91.__r_.__value_.__l.__size_ = a6;
      v91.__r_.__value_.__l.__cap_ = (std::string::size_type)"internal_mic_dc_removal_hpf";
      int v92 = &v91;
      sub_3074D8(buf, "internal_mic_dc_removal_hpf", "AUNBandEQ", (uint64_t)&v91);
      uint64_t v20 = v92;
      if (v92 == &v91)
      {
        char v21 = 4LL;
        uint64_t v20 = &v91;
      }

      else
      {
        if (!v92) {
          goto LABEL_9;
        }
        char v21 = 5LL;
      }

      (*(void (**)(void))(v20->__r_.__value_.__r.__words[0] + 8 * v21))();
LABEL_9:
      if (v90[0])
      {
        sub_2FDDB8((uint64_t)&v83, (uint64_t)buf);
        if (v90[0])
        {
          sub_D0C4C(*(void **)&buf[16]);
          int v22 = *(float **)buf;
          *(void *)AudioObjectPropertyAddress buf = 0LL;
          if (v22) {
LABEL_34:
          }
            operator delete(v22);
        }
      }

      goto LABEL_65;
  }

            LOBYTE(v26) = 0;
LABEL_66:
            if (v121.__m_.__sig) {
              operator delete((void *)v121.__m_.__sig);
            }
            sub_37BB60((uint64_t)v103, (uint64_t)&v111);
            if (v104) {
              goto LABEL_70;
            }
            int v100 = 0LL;
            uint64_t v101 = 0LL;
            __int128 v102 = 0LL;
            uint64_t v61 = v103[0];
            sub_7A5B8(&v100, v103[0], (uint64_t)v103[1], ((char *)v103[1] - (char *)v103[0]) >> 2);
            uint64_t v97 = 0LL;
            __int128 v98 = 0LL;
            unint64_t v99 = 0LL;
            sub_7A5B8(&v97, v21, v22, (v22 - (uint64_t)v21) >> 2);
            std::chrono::steady_clock::time_point v63 = v100;
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v97;
            std::chrono::steady_clock::time_point v65 = v101 - v100 == v98 - v97 && memcmp(v100, v97, v101 - v100) == 0;
            if (v64)
            {
              __int128 v98 = v64;
              operator delete(v64);
            }

            if (v63)
            {
              uint64_t v101 = v63;
              operator delete(v63);
              if (v65) {
                goto LABEL_152;
              }
            }

            else if (v65)
            {
LABEL_152:
              std::chrono::system_clock::time_point v66 = sub_138E8(13);
              if ((*(_BYTE *)(v66 + 8) & 1) != 0)
              {
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = *(os_log_s **)v66;
                if (*(void *)v66)
                {
                  if (os_log_type_enabled(*(os_log_t *)v66, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                    *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 219;
                    *(_WORD *)&_BYTE buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v12;
                    _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync pr imitive for a notification on id %u.",  buf,  0x18u);
                  }
                }
              }

              goto LABEL_138;
            }

LABEL_58:
    if (v6 != v7) {
      goto LABEL_71;
    }
LABEL_66:
    if (!v5) {
      return v2;
    }
LABEL_67:
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    return v2;
  }

  return 0LL;
}

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    uint64_t v43 = sub_138E8(13);
    if ((*(_BYTE *)(v43 + 8) & 1) != 0)
    {
      uint64_t v44 = *(os_log_s **)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          int v50 = *(void *)a2;
          uint64_t v51 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v50);
          int v45 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          std::chrono::steady_clock::time_point v63 = 1024;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = 288;
          std::chrono::steady_clock::time_point v65 = 2080;
          *(void *)std::chrono::system_clock::time_point v66 = v45;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = a1;
          _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }

    char v21 = 0LL;
    goto LABEL_95;
  }

  int v22 = (os_log_t *)sub_138E8(13);
  __int16 v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v73, v21);
    __int16 v24 = v73.__m_.__opaque[15];
    sig = v73.__m_.__sig;
    inClientData = *(void *)a2;
    int v55 = *(_DWORD *)(a2 + 8);
    sub_613AC((uint64_t)&__p, (unsigned int *)&inClientData);
    int v26 = &v73;
    if (v24 < 0) {
      int v26 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    std::chrono::steady_clock::time_point v63 = 1024;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = 207;
    std::chrono::steady_clock::time_point v65 = 1024;
    *(_DWORD *)std::chrono::system_clock::time_point v66 = v21;
    *(_WORD *)&v66[4] = 2080;
    *(void *)&v66[6] = v26;
    *(_WORD *)&v66[14] = 2080;
    *(void *)&v66[16] = p_p;
    *(_WORD *)&v66[24] = 1024;
    *(_DWORD *)&v66[26] = a1;
    _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v73.__m_.__opaque[15] < 0) {
      operator delete((void *)v73.__m_.__sig);
    }
  }

  return v21;
}

          uint64_t v36 = 1000 * v35.__d_.__rep_;
LABEL_59:
          if (v36 > (v34.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v37.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_62:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v37);
            std::chrono::steady_clock::now();
            goto LABEL_63;
          }
        }

        v37.__d_.__rep_ = v36 + v34.__d_.__rep_;
        goto LABEL_62;
      }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    int v39 = sub_138E8(13);
    if ((*(_BYTE *)(v39 + 8) & 1) != 0)
    {
      int v40 = *(os_log_s **)v39;
      if (*(void *)v39)
      {
        if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
        {
          int v46 = *(void *)a2;
          __int16 v47 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v46);
          uint64_t v41 = v49 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          int v59 = 1024;
          std::chrono::system_clock::time_point v60 = 288;
          uint64_t v61 = 2080;
          *(void *)unsigned int v62 = v41;
          *(_WORD *)&v62[8] = 1024;
          *(_DWORD *)&v62[10] = a1;
          _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v49 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }

    int v17 = 0LL;
    goto LABEL_95;
  }

  __int16 v18 = (os_log_t *)sub_138E8(13);
  int v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v69, v17);
    uint64_t v20 = v69.__m_.__opaque[15];
    sig = v69.__m_.__sig;
    inClientData = *(void *)a2;
    uint64_t v51 = *(_DWORD *)(a2 + 8);
    sub_613AC((uint64_t)&__p, (unsigned int *)&inClientData);
    int v22 = &v69;
    if (v20 < 0) {
      int v22 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    int v59 = 1024;
    std::chrono::system_clock::time_point v60 = 207;
    uint64_t v61 = 1024;
    *(_DWORD *)unsigned int v62 = v17;
    *(_WORD *)&v62[4] = 2080;
    *(void *)&v62[6] = v22;
    *(_WORD *)&v62[14] = 2080;
    *(void *)&v62[16] = p_p;
    *(_WORD *)&v62[24] = 1024;
    *(_DWORD *)&v62[26] = a1;
    _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v69.__m_.__opaque[15] < 0) {
      operator delete((void *)v69.__m_.__sig);
    }
  }

  return v17;
}

    uint64_t v44 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4;
    goto LABEL_60;
  }

  uint64_t v44 = 0;
  if ((v34 & 0xFF00000000LL) != 0 && (_DWORD)v34) {
    goto LABEL_58;
  }
LABEL_60:
  int v45 = sub_1D72C0((_DWORD *)(*(void *)(a1 + 96) + 264LL));
  if (v30)
  {
    int v46 = sub_138E8(22);
    if ((*(_BYTE *)(v46 + 8) & 1) != 0)
    {
      __int16 v47 = *(os_log_s **)v46;
      if (*(void *)v46)
      {
        if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1097;
          _os_log_impl(&dword_0, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d AC-3 formats are simulated", buf, 0x12u);
        }
      }
    }
  }

  int v48 = sub_5954C();
  __int16 v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
  int v305 = *(_BYTE *)(a1 + 401);
  int v50 = sub_27DB40((uint64_t *)a1);
  uint64_t v51 = *(unsigned __int8 *)(a1 + 728);
  buf[8] = 0;
  buf[16] = 0;
  *(_DWORD *)AudioObjectPropertyAddress buf = 0;
  *(_WORD *)&uint8_t buf[4] = 0;
  *(_DWORD *)&_BYTE buf[24] = v49;
  *(void *)&uint8_t buf[32] = v307;
  _BYTE buf[40] = 0;
  buf[44] = 0;
  LOBYTE(v322) = v45;
  BYTE1(v322) = v50;
  *(_DWORD *)UInt32 v319 = 0;
  if (sub_14B98C(@"OverrideLPCMChannelCount", @"com.apple.audio.virtualaudio", v319))
  {
    uint64_t v52 = *(_DWORD *)v319;
    AudioObjectID v53 = (os_log_t *)sub_138E8(13);
    uint64_t v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)UInt32 v319 = 136315906;
      *(void *)&v319[4] = "RunTimeDefaults.cpp";
      *(_WORD *)&v319[12] = 1024;
      *(_DWORD *)&v319[14] = 2109;
      *(_WORD *)&v319[18] = 2080;
      *(void *)&v319[20] = "OverrideLPCMChannelCount";
      *(_WORD *)&v319[28] = 1024;
      *(_DWORD *)&v319[30] = v52;
      _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", v319, 0x22u);
    }

    int v55 = v307[0];
    if (v307[0] != v307[1])
    {
      while (1)
      {
        unint64_t v56 = v55[2] == 1819304813 && (v55[3] & 1) == 0;
        if (v56 && v55[7] == v52) {
          break;
        }
        v55 += 14;
        if (v55 == v307[1]) {
          goto LABEL_78;
        }
      }

      int v103 = (os_log_t *)sub_138E8(22);
      AudioObjectPropertyAddress v104 = *v103;
      if (*v103 && os_log_type_enabled(*v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)UInt32 v319 = 136315650;
        *(void *)&v319[4] = "VirtualStream.cpp";
        *(_WORD *)&v319[12] = 1024;
        *(_DWORD *)&v319[14] = 1577;
        *(_WORD *)&v319[18] = 1024;
        *(_DWORD *)&v319[20] = v52;
        _os_log_impl( &dword_0,  v104,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d LPCM format with channel count %u is available. Forcing this format",  v319,  0x18u);
      }

      *(_DWORD *)&_BYTE buf[40] = v52;
      buf[44] = 1;
      goto LABEL_132;
    }

    if (a5 == 1) {
      uint64_t v42 = 762342772;
    }
    else {
      uint64_t v42 = 728788340;
    }
    *(_DWORD *)(a1 + 4) = v42;
    if (a5 != 1)
    {
      uint64_t v43 = *a2;
      if (*a2)
      {
        uint64_t v44 = 0LL;
        int v45 = (void **)(a2 + 4);
        do
        {
          if (*v45)
          {
            bzero(*v45, *((unsigned int *)v45 - 1));
            uint64_t v43 = *a2;
          }

          ++v44;
          v45 += 2;
        }

        while (v44 < v43);
      }
    }

    return;
  }

  if (*a4 <= 0.0)
  {
    unint64_t v86 = (os_log_t *)sub_138E8(13);
    uint64_t v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v105 = "PolicyMute.cpp";
      char v106 = 1024;
      uint64_t v107 = 254;
      _os_log_impl(&dword_0, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v88 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v88, "Precondition failure.");
  }

  int v46 = 762342772;
  __int16 v47 = (*a4 * 0.03);
  if (v47 >= a3) {
    int v48 = a3;
  }
  else {
    int v48 = v47;
  }
  __int16 v49 = 1.0;
  int v50 = 1.0 / (float)v48;
  uint64_t v51 = *(_DWORD *)(a1 + 4);
  if (v51 == 762342772) {
    int v50 = -v50;
  }
  else {
    __int16 v49 = 0.0;
  }
  uint64_t v52 = *a2;
  if ((_DWORD)v52 == 1)
  {
    if ((_DWORD)v48)
    {
      unint64_t v56 = (float *)*((void *)a2 + 2);
      uint64_t v57 = v48;
      do
      {
        __int16 v49 = v50 + v49;
        *unint64_t v56 = v49 * *v56;
        ++v56;
        --v57;
      }

      while (v57);
    }
  }

  else if ((_DWORD)v52 == 2)
  {
    if ((_DWORD)v48)
    {
      AudioObjectID v53 = (float *)*((void *)a2 + 2);
      uint64_t v54 = (float *)*((void *)a2 + 4);
      int v55 = v48;
      do
      {
        __int16 v49 = v50 + v49;
        *AudioObjectID v53 = v49 * *v53;
        ++v53;
        dispatch_queue_s *v54 = v49 * *v54;
        ++v54;
        --v55;
      }

      while (v55);
    }
  }

  else if ((_DWORD)v48)
  {
    for (uint64_t i = 0LL; i != v48; ++i)
    {
      __int16 v49 = v50 + v49;
      int v59 = (uint64_t *)(a2 + 4);
      std::chrono::system_clock::time_point v60 = v52;
      if ((_DWORD)v52)
      {
        do
        {
          uint64_t v61 = *v59;
          v59 += 2;
          *(float *)(v61 + 4 * i) = v49 * *(float *)(v61 + 4 * i);
          --v60;
        }

        while (v60);
      }
    }
  }

  if (v51 == 762342772)
  {
    int v46 = 728788340;
    if (v47 < a3)
    {
      if ((_DWORD)v52)
      {
        unsigned int v62 = 0LL;
        std::chrono::steady_clock::time_point v63 = 4 * (a3 - v48);
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = 4LL;
        do
        {
          bzero((void *)(*(void *)&a2[v64] + 4 * v48), v63);
          ++v62;
          v64 += 4LL;
        }

        while (v62 < *a2);
      }
    }
  }

  *(_DWORD *)(a1 + 4) = v46;
}

  AudioObjectID v32 = sub_138E8(16);
  if ((*(_BYTE *)(v32 + 8) & 1) != 0)
  {
    BOOL v33 = *(os_log_s **)v32;
    if (*(void *)v32)
    {
      if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
      {
        sub_155E78(&v70, (uint64_t)__p);
        char v34 = (v70.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v70 : (std::string *)v70.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        uint64_t v74 = 1024;
        unint64_t v75 = 362;
        unsigned int v76 = 2080;
        uint64_t v77 = v34;
        _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Before modifying our stream usage data structure: %s",  buf,  0x1Cu);
      }
    }
  }

  if (*((_DWORD *)v72 + 2))
  {
    uint64_t v35 = a1[v23];
    uint64_t v36 = v24[1] - v35;
    if (v36)
    {
      __int16 v37 = 0LL;
      int v38 = v72 + 12;
      do
      {
        int v39 = *(unsigned __int8 *)(v35 + v37);
        if (v39 == 1) {
          int v40 = a4;
        }
        else {
          int v40 = 0;
        }
        if (v39 == 2) {
          uint64_t v41 = 1;
        }
        else {
          uint64_t v41 = v40;
        }
        *(_DWORD *)&v38[4 * v37++] = v41;
      }

      while (v36 > v37);
    }

    uint64_t v42 = sub_138E8(16);
    if ((*(_BYTE *)(v42 + 8) & 1) != 0)
    {
      uint64_t v43 = *(os_log_s **)v42;
      if (*(void *)v42)
      {
        if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
        {
          sub_155E78(&v70, (uint64_t)__p);
          uint64_t v44 = (v70.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v70 : (std::string *)v70.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          uint64_t v74 = 1024;
          unint64_t v75 = 380;
          unsigned int v76 = 2080;
          uint64_t v77 = v44;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Before updating stream usage on the HAL: %s",  buf,  0x1Cu);
        }
      }
    }

    sub_22FE94((uint64_t)a1, a2, a4, (_BYTE *)a1[v23], (_BYTE *)v24[1]);
    int v45 = sub_155D1C((uint64_t)__p);
    if (v45)
    {
      uint64_t v57 = (os_log_t *)sub_138E8(13);
      unint64_t v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        uint64_t v74 = 1024;
        unint64_t v75 = 385;
        _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: VAStreamUsage::Set() failed.",  buf,  0x12u);
      }

      int v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v59 = &off_4865A0;
      uint64_t v59[2] = v45;
    }

    sub_2300A4((uint64_t)a1, a2, a4, (_BYTE *)a1[v23], (_BYTE *)v24[1]);
  }

  int v46 = (os_log_t *)sub_138E8(16);
  __int16 v47 = *v46;
  if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = *(uint64_t *)((char *)a1 + 268);
    sub_33464(&v70, (unsigned int *)&v69);
    if ((v70.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v48 = &v70;
    }
    else {
      int v48 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    sub_155E78(v67, (uint64_t)__p);
    __int16 v49 = v68;
    int v50 = (void **)v67[0];
    if ((_DWORD)a2) {
      uint64_t v51 = "output";
    }
    else {
      uint64_t v51 = "input";
    }
    sub_7D084(v65, v51);
    uint64_t v52 = v67;
    if (v49 < 0) {
      uint64_t v52 = v50;
    }
    if (v66 >= 0) {
      AudioObjectID v53 = v65;
    }
    else {
      AudioObjectID v53 = (void **)v65[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
    uint64_t v74 = 1024;
    unint64_t v75 = 389;
    unsigned int v76 = 2080;
    uint64_t v77 = v48;
    uint64_t v78 = 2080;
    uint64_t v79 = v52;
    uint64_t v80 = 2080;
    uint64_t v81 = v53;
    _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VA Stream usage for %s is %s for direction %s",  buf,  0x30u);
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v68 < 0) {
      operator delete(v67[0]);
    }
  }

  free(v72);
}

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    uint64_t v43 = sub_138E8(13);
    if ((*(_BYTE *)(v43 + 8) & 1) != 0)
    {
      uint64_t v44 = *(os_log_s **)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          int v50 = *(void *)a2;
          uint64_t v51 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v50);
          int v45 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          std::chrono::steady_clock::time_point v63 = 1024;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = 288;
          std::chrono::steady_clock::time_point v65 = 2080;
          *(void *)std::chrono::system_clock::time_point v66 = v45;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = a1;
          _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }

    char v21 = 0LL;
    goto LABEL_95;
  }

  int v22 = (os_log_t *)sub_138E8(13);
  __int16 v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v73, v21);
    __int16 v24 = v73.__m_.__opaque[15];
    sig = v73.__m_.__sig;
    inClientData = *(void *)a2;
    int v55 = *(_DWORD *)(a2 + 8);
    sub_613AC((uint64_t)&__p, (unsigned int *)&inClientData);
    int v26 = &v73;
    if (v24 < 0) {
      int v26 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    std::chrono::steady_clock::time_point v63 = 1024;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = 207;
    std::chrono::steady_clock::time_point v65 = 1024;
    *(_DWORD *)std::chrono::system_clock::time_point v66 = v21;
    *(_WORD *)&v66[4] = 2080;
    *(void *)&v66[6] = v26;
    *(_WORD *)&v66[14] = 2080;
    *(void *)&v66[16] = p_p;
    *(_WORD *)&v66[24] = 1024;
    *(_DWORD *)&v66[26] = a1;
    _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v73.__m_.__opaque[15] < 0) {
      operator delete((void *)v73.__m_.__sig);
    }
  }

  return v21;
}

void sub_3D390(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D3E8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    int v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      uint64_t v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 443;
      char v21 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_ObjectSetPro"
            "pertyData: no plug-in";
LABEL_17:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v27, 0x12u);
    }

void sub_3D6C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x3D4C4LL);
  }

  _Unwind_Resume(a1);
}

void sub_3D720( std::string::size_type a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7)
{
  int v12 = *a2;
  BOOL v13 = *a2 == 1769304164 || v12 == 1920230246;
  if (v13 || v12 == 1987016304)
  {
    id v814 = 0LL;
  }

  else
  {
    uint64_t v15 = operator new(0x10uLL);
    sub_6DD4();
    *(void *)uint64_t v15 = &qword_48F828;
    v15[8] = 0;
    id v814 = v15;
    v15[8] = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  }

  if (*(_DWORD *)(a1 + 108) != 2)
  {
    uint64_t v543 = sub_138E8(13);
    id v544 = sub_8C7D4(1, *(void **)v543, *(void *)(v543 + 8));
    id v545 = (os_log_s *)objc_claimAutoreleasedReturnValue(v544);
    v546 = v545;
    if (v545 && os_log_type_enabled(v545, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6405;
      _os_log_impl( &dword_0,  v546,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): VirtualAudio PlugIn is not initialized yet",  buf,  0x12u);
    }

    exceptiounsigned int n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
LABEL_1039:
  }

  if (((*(uint64_t (**)(void))(*(void *)a1 + 32LL))() & 1) == 0)
  {
    uint64_t v548 = sub_138E8(13);
    id v549 = sub_8C7D4(1, *(void **)v548, *(void *)(v548 + 8));
    int v550 = (void *)objc_claimAutoreleasedReturnValue(v549);
    int v551 = 2003332927;
    if (v550)
    {
      uint64_t v552 = v550;
      if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
      {
        *(void *)v871 = *(void *)a2;
        *(_DWORD *)&v871[8] = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)v871);
        if (__p[23] >= 0) {
          id v553 = __p;
        }
        else {
          id v553 = *(_BYTE **)__p;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6407;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v553;
        _os_log_impl( &dword_0,  v552,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        int v551 = 2003332927;
      }

      goto LABEL_1135;
    }

    goto LABEL_1061;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v554 = sub_138E8(13);
    int v551 = 561211770;
    id v555 = sub_8C7D4(1, *(void **)v554, *(void *)(v554 + 8));
    v556 = (void *)objc_claimAutoreleasedReturnValue(v555);
    if (!v556) {
      goto LABEL_1061;
    }
    uint64_t v552 = v556;
    if (!os_log_type_enabled(v552, OS_LOG_TYPE_ERROR)) {
      goto LABEL_1135;
    }
    *(void *)v871 = *(void *)a2;
    *(_DWORD *)&v871[8] = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)v871);
    if (__p[23] >= 0) {
      unsigned int v557 = __p;
    }
    else {
      unsigned int v557 = *(_BYTE **)__p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6408;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v557;
    *(_WORD *)&_BYTE buf[28] = 1024;
    *(_DWORD *)&_BYTE buf[30] = a3;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = a4;
    int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NU"
           "LL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).";
    v559 = v552;
    uint32_t v560 = 44;
LABEL_1133:
    _os_log_impl(&dword_0, v559, OS_LOG_TYPE_ERROR, v558, buf, v560);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_1135;
  }

  if (!a6)
  {
    uint64_t v561 = sub_138E8(13);
    int v551 = 561211770;
    id v562 = sub_8C7D4(1, *(void **)v561, *(void *)(v561 + 8));
    int v563 = (void *)objc_claimAutoreleasedReturnValue(v562);
    if (!v563) {
      goto LABEL_1061;
    }
    uint64_t v552 = v563;
    if (!os_log_type_enabled(v552, OS_LOG_TYPE_ERROR)) {
      goto LABEL_1135;
    }
    *(void *)v871 = *(void *)a2;
    *(_DWORD *)&v871[8] = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)v871);
    if (__p[23] >= 0) {
      v564 = __p;
    }
    else {
      v564 = *(_BYTE **)__p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6409;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = "inData";
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&_BYTE buf[30] = v564;
    int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.";
    v559 = v552;
    uint32_t v560 = 38;
    goto LABEL_1133;
  }

  if (((*(uint64_t (**)(std::string::size_type, int *))(*(void *)a1 + 40LL))(a1, a2) & 1) == 0)
  {
    uint64_t v565 = sub_138E8(13);
    int v551 = 1852797029;
    id v566 = sub_8C7D4(1, *(void **)v565, *(void *)(v565 + 8));
    v567 = (void *)objc_claimAutoreleasedReturnValue(v566);
    if (!v567) {
      goto LABEL_1061;
    }
    uint64_t v552 = v567;
    if (!os_log_type_enabled(v552, OS_LOG_TYPE_ERROR)) {
      goto LABEL_1135;
    }
    *(void *)v871 = *(void *)a2;
    *(_DWORD *)&v871[8] = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)v871);
    if (__p[23] >= 0) {
      v570 = __p;
    }
    else {
      v570 = *(_BYTE **)__p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6410;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v570;
    int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.";
    v559 = v552;
    uint32_t v560 = 28;
    goto LABEL_1133;
  }

  int v16 = *a2;
  if (*a2 == 1886350709)
  {
    uint64_t v17 = sub_138E8(2);
    uint64_t v18 = sub_138E8(38);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *(int *)&buf[4 * v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_22;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_22:
    id v24 = *(id *)v17;
    int v25 = v24;
    if (v24)
    {
      int v26 = (os_log_s *)v24;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v871 = *(void *)a2;
        *(_DWORD *)&v871[8] = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)v871);
        int v27 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        int v28 = *(_DWORD *)a6;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6414;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v27;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)&_BYTE buf[30] = v28;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: %u.", buf, 0x22u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }

    int v16 = *a2;
  }

  if (v16 <= 1936028520)
  {
    if (v16 <= 1769304163)
    {
      switch(v16)
      {
        case 1667329392:
          if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) == (_DWORD)a5)
          {
            sub_26E804(a1, *(void *)(a1 + 224), *(void *)(a1 + 232), *(CFTypeRef *)a6);
            goto LABEL_1026;
          }

          uint64_t v637 = sub_138E8(13);
          int v551 = 561211770;
          id v638 = sub_8C7D4(1, *(void **)v637, *(void *)(v637 + 8));
          v639 = (void *)objc_claimAutoreleasedReturnValue(v638);
          if (v639)
          {
            uint64_t v552 = v639;
            if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
            {
              *(void *)v871 = *(void *)a2;
              *(_DWORD *)&v871[8] = a2[2];
              sub_613AC((uint64_t)__p, (unsigned int *)v871);
              int v640 = __p[23];
              id v641 = *(_BYTE **)__p;
              int v642 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              int v643 = __p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v640 < 0) {
                int v643 = v641;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6927;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v643;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&_BYTE buf[30] = a5;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v642;
              int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_1132;
            }

            goto LABEL_1135;
          }

          goto LABEL_1061;
        case 1685283955:
          if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) == (_DWORD)a5)
          {
            uint64_t v77 = sub_EAD14();
            int v78 = *(_DWORD *)a6;
            int v79 = *(_DWORD *)a6 != 0;
            int v80 = (*(uint64_t (**)(uint64_t))(*(void *)v77 + 16LL))(v77);
            if (*(unsigned __int8 *)(v77 + 128) != v79)
            {
              uint64_t v81 = *(void *)(v77 + 112);
              if (v81 != v77 + 104)
              {
                uint64_t v82 = "Dis";
                if (v78) {
                  uint64_t v82 = "En";
                }
                *(void *)id v817 = v82;
                do
                {
                  strcpy(v871, "sdsdbolg");
                  v871[9] = 0;
                  *(_WORD *)&v871[10] = 0;
                  if (!(*(unsigned int (**)(void, _BYTE *))(**(void **)(v81 + 16) + 16LL))( *(void *)(v81 + 16),  v871)) {
                    goto LABEL_147;
                  }
                  LODWORD(v866.__r_.__value_.__l.__data_) = v78 != 0;
                  (*(void (**)(void, _BYTE *, void, void, uint64_t, std::string *))(**(void **)(v81 + 16)
                                                                                                  + 48LL))( *(void *)(v81 + 16),  v871,  0LL,  0LL,  4LL,  &v866);
                  uint64_t v83 = sub_138E8(7);
                  uint64_t v84 = sub_138E8(27);
                  char v85 = 0;
                  uint64_t v86 = 0LL;
                  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
                  uint64_t v87 = *(void *)(v83 + 8);
                  do
                  {
                    uint64_t v88 = *(int *)&buf[4 * v86];
                    char v89 = v85;
                    if (((v87 & v88) != 0) != ((*(void *)(v84 + 8) & v88) != 0))
                    {
                      if ((v87 & v88) == 0) {
                        uint64_t v83 = v84;
                      }
                      if ((*(void *)(v83 + 8) & 1) != 0) {
                        goto LABEL_144;
                      }
                      goto LABEL_147;
                    }

                    char v85 = 1;
                    uint64_t v86 = 1LL;
                  }

                  while ((v89 & 1) == 0);
                  if ((v87 & 1) == 0) {
                    goto LABEL_147;
                  }
LABEL_144:
                  uint64_t v90 = *(os_log_s **)v83;
                  if (v90 && os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                  {
                    int v91 = (*(uint64_t (**)(void))(**(void **)(v81 + 16) + 120LL))(*(void *)(v81 + 16));
                    (*(void (**)(_BYTE *__return_ptr))(**(void **)(v81 + 16) + 128LL))(__p);
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                    *(void *)&uint8_t buf[4] = "DeviceManager.cpp";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 231;
                    *(_WORD *)&_BYTE buf[18] = 2080;
                    *(void *)&buf[20] = *(void *)v817;
                    *(_WORD *)&_BYTE buf[28] = 1024;
                    *(_DWORD *)&_BYTE buf[30] = v91;
                    *(_WORD *)&buf[34] = 2112;
                    *(void *)&buf[36] = *(void *)__p;
                    _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %sabled port discovery on device ID %u (uid '%@').",  buf,  0x2Cu);
                    sub_19DFC((uint64_t)__p);
                  }

LABEL_122:
        if (theArray[0] && BYTE1(theArray[1])) {
          CFArrayAppendValue(theArray[0], v76);
        }
        if (v76) {
          CFRelease(v76);
        }
        v72 += 24LL;
      }
    }

    *(void *)AudioObjectPropertyAddress buf = v871;
    sub_8CD60((void ***)buf);
    *(void *)AudioObjectPropertyAddress buf = __p;
    sub_8CD60((void ***)buf);
    v844[0] = &off_4794A8;
    v844[1] = a1;
    v844[2] = &v852;
    id v845 = v844;
    sub_26B218((uint64_t)v871, a1, (uint64_t)v844);
    int v159 = v845;
    if (v845 == v844)
    {
      uint64_t v160 = 4LL;
      int v159 = v844;
    }

    else
    {
      if (!v845) {
        goto LABEL_567;
      }
      uint64_t v160 = 5LL;
    }

    (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_567:
    if (!*(void *)&v871[8])
    {
      uint64_t v733 = sub_138E8(13);
      id v734 = sub_8C7D4(1, *(void **)v733, *(void *)(v733 + 8));
      v735 = (os_log_s *)objc_claimAutoreleasedReturnValue(v734);
      v736 = v735;
      if (v735 && os_log_type_enabled(v735, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6729;
        _os_log_impl( &dword_0,  v736,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      int v737 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v737, "Postcondition failure.");
    }

    unsigned int v318 = sub_26B810(a1);
    BOOL v813 = sub_72348(*(unsigned int *)v871);
    unsigned int v319 = sub_51728( &v852,  *(_DWORD *)(*(void *)(a1 + 112) + 144LL),  *(unsigned __int8 *)(*(void *)(a1 + 112) + 384LL));
    int v320 = (int *)(a1 + 224);
    sub_51A88(v852, @"category", (void *)(a1 + 224));
    sub_51A88(v852, @"mode", (void *)(a1 + 228));
    if ((sub_51A88(v852, @"optional output mode", &Mutable) & 1) != 0
      || sub_51A88(*(const __CFDictionary **)&v871[8], @"optional output mode", &Mutable))
    {
      *(_DWORD *)(a1 + 232) = (_DWORD)Mutable;
      *(_BYTE *)(a1 + 236) = 1;
    }

    theArray[0] = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    LOWORD(theArray[1]) = 257;
    sub_51AEC(&v852, @"initiation context", (uint64_t)theArray);
    if (theArray[0])
    {
      uint64_t v321 = sub_6CE34((unsigned int *)(a1 + 224), theArray);
      if ((_DWORD)v321 != 1635087471)
      {
        sub_6D424((std::string *)__p, theArray, v321);
        *(_DWORD *)AudioObjectPropertyAddress buf = v321;
        if ((__p[23] & 0x80000000) != 0)
        {
          sub_24054(&buf[8], *(void **)__p, *(unint64_t *)&__p[8]);
          unsigned int v322 = v318;
          LODWORD(v321) = *(_DWORD *)buf;
        }

        else
        {
          unsigned int v322 = v318;
          *(_OWORD *)&buf[8] = *(_OWORD *)__p;
          *(void *)&_BYTE buf[24] = *(void *)&__p[16];
        }

        *(_DWORD *)(a1 + 240) = v321;
        v419 = (void **)(a1 + 248);
        *(_OWORD *)v419 = *(_OWORD *)&buf[8];
        *(void *)(a1 + 264) = *(void *)&buf[24];
        *(void *)(a1 + 272) = 0x756E64656175746FLL;
        uint64_t v420 = sub_138E8(8);
        id v421 = sub_8C7D4(6, *(void **)v420, *(void *)(v420 + 8));
        uint64_t v422 = (void *)objc_claimAutoreleasedReturnValue(v421);
        unsigned int v423 = v422;
        unsigned int v318 = v322;
        if (v422)
        {
          int v424 = v422;
          if (os_log_type_enabled(v424, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(&__dst, *(unsigned int *)(a1 + 240));
            int v425 = v869 >= 0 ? &__dst : (__int128 *)__dst;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6771;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v425;
            _os_log_impl( &dword_0,  v424,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Updated to mClientRequestedActivationInfo %s.",  buf,  0x1Cu);
            if (SHIBYTE(v869) < 0) {
              operator delete((void *)__dst);
            }
          }
        }

        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }

    else
    {
      if (v319)
      {
        uint64_t v323 = sub_138E8(8);
        id v324 = sub_8C7D4(6, *(void **)v323, *(void *)(v323 + 8));
        UInt32 v325 = (void *)objc_claimAutoreleasedReturnValue(v324);
        int v326 = v325;
        if (v325)
        {
          unsigned int v327 = v325;
          if (os_log_type_enabled(v327, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, *(unsigned int *)(a1 + 240));
            int v328 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6777;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v328;
            _os_log_impl( &dword_0,  v327,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Keeping mClientRequestedActivationInfo %s.",  buf,  0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }

      else
      {
        *(_DWORD *)(a1 + 240) = 1852796517;
        v409 = (void **)(a1 + 248);
        CFTypeRef *v409 = 0LL;
        *(void *)(a1 + 256) = 0LL;
        *(void *)(a1 + 264) = 0LL;
        *(void *)(a1 + 272) = 0x756E64656175746FLL;
        uint64_t v410 = sub_138E8(8);
        id v411 = sub_8C7D4(6, *(void **)v410, *(void *)(v410 + 8));
        uint64_t v412 = (void *)objc_claimAutoreleasedReturnValue(v411);
        int v326 = v412;
        if (v412)
        {
          int v413 = v412;
          if (os_log_type_enabled(v413, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, *(unsigned int *)(a1 + 240));
            v414 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6784;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v414;
            _os_log_impl( &dword_0,  v413,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resetting mClientRequestedActivationInfo %s.",  buf,  0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }
    }

    sub_13850((uint64_t)theArray);
    if (v852)
    {
      int Value = CFDictionaryGetValue(v852, @"camera parameters");
      unsigned int v427 = Value;
      if (Value)
      {
        CFTypeID v428 = CFGetTypeID(Value);
        if (v428 == CFDictionaryGetTypeID()) {
          sub_26E804(a1, *(void *)(a1 + 224), *(void *)(a1 + 232), v427);
        }
      }
    }

    int v429 = *(_DWORD *)(a1 + 228);
    int v430 = *(_DWORD *)(a1 + 240);
    uint64_t v431 = sub_72A04(1987276900, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
    if (!v431) {
      goto LABEL_836;
    }
    uint64_t v432 = v431;
    int v433 = (os_log_s *)*(id *)sub_138E8(2);
    v434 = v433;
    if (v433 && os_log_type_enabled(v433, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7290;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v429;
      *(_WORD *)&_BYTE buf[24] = 1024;
      *(_DWORD *)&buf[26] = v430;
      _os_log_impl( &dword_0,  v434,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ConfigureSpeechDetectionDSP inMode=%u inInitiationContext=%u\n",  buf,  0x1Eu);
    }

    if (v430 != 1886352244)
    {
      if (v430 == 1752396914)
      {
        if ((MGGetBoolAnswer(@"DeviceSupportsSiriBargeIn") & 1) == 0) {
          goto LABEL_832;
        }
        goto LABEL_818;
      }

      if (v429 == 1987208039 || v429 == 1986098036)
      {
LABEL_818:
        strcpy(buf, "dsedtpni");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v432 + 32LL))(v432, buf))
        {
          *(_DWORD *)std::string __p = *(_DWORD *)(v432 + 8);
          strcpy(buf, "dsedtpni");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          unint64_t v435 = sub_36EF4((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
          *((void *)&v438 + 1) = v436;
          *(void *)&__int128 v438 = v435;
          uint64_t v437 = v438 >> 32;
          if ((v437 & 0xFF00000000LL) != 0 && v437 != 1LL)
          {
            AudioObjectID v439 = *(_DWORD *)(v432 + 8);
            strcpy(buf, "dsedtpni");
            buf[9] = 0;
            *(_WORD *)&buf[10] = 0;
            OSStatus v440 = AudioObjectSetPropertyData(v439, (const AudioObjectPropertyAddress *)buf, 0, 0LL, 4u, &unk_401924);
            if (v440) {
              goto LABEL_1276;
            }
          }
        }

        sub_E4714(v432, 1u);
        unsigned int v442 = v430 == 1752132965 || v430 == 1969840752;
        sub_E4784(v432, v442);
        if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v432 + 1008) + 352LL))( *(void *)(v432 + 1008),  1685287015LL,  1684628340LL,  0LL))
        {
          v443.n128_u32[0] = 0;
          if (v430 == 1684628340) {
            v443.n128_f32[0] = 1.0;
          }
          (*(void (**)(void, uint64_t, uint64_t, void, __n128))(**(void **)(v432 + 1008) + 368LL))( *(void *)(v432 + 1008),  1685287015LL,  1684628340LL,  0LL,  v443);
        }

      sub_11C618((uint64_t)&__dst, p_dst, &__dst);
    }
  }

  sub_9DCB8((uint64_t *)v569, &__dst);
  int v80 = *(void *)&v569[8];
  uint64_t v81 = (void *)(v495 + 16);
  int v16 = v569;
  while (2)
  {
    for (CFMutableArrayRef m = *(void **)(v495 + 24); m != v81; CFMutableArrayRef m = (void *)m[1])
    {
      uint64_t v84 = *(void *)(v80 + 16);
      uint64_t v83 = *(std::__shared_weak_count **)(v80 + 24);
      if (v83)
      {
        p_shared_weak_owners = (unint64_t *)&v83->__shared_weak_owners_;
        do
          uint64_t v86 = __ldxr(p_shared_weak_owners);
        while (__stxr(v86 + 1, p_shared_weak_owners));
      }

      uint64_t v87 = (std::__shared_weak_count *)m[5];
      if (v87)
      {
        uint64_t v88 = std::__shared_weak_count::lock(v87);
        char v89 = v88;
        if (v88)
        {
          uint64_t v90 = m[4];
          int v91 = (unint64_t *)&v88->__shared_weak_owners_;
          do
            uint64_t v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
          p_shared_owners = (unint64_t *)&v88->__shared_owners_;
          do
            char v94 = __ldaxr(p_shared_owners);
          while (__stlxr(v94 - 1, p_shared_owners));
          if (v94)
          {
            if (!v83) {
              goto LABEL_144;
            }
          }

          else
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v89);
            if (!v83)
            {
LABEL_144:
              uint64_t v96 = 0LL;
              uint64_t v95 = 0LL;
              if (!v89) {
                goto LABEL_152;
              }
              goto LABEL_145;
            }
          }
        }

        else
        {
          uint64_t v90 = 0LL;
          if (!v83) {
            goto LABEL_144;
          }
        }
      }

      else
      {
        uint64_t v90 = 0LL;
        char v89 = 0LL;
        if (!v83) {
          goto LABEL_144;
        }
      }

      uint64_t v95 = std::__shared_weak_count::lock(v83);
      if (v95) {
        uint64_t v96 = v84;
      }
      else {
        uint64_t v96 = 0LL;
      }
      if (!v89)
      {
LABEL_152:
        CFTypeRef v99 = v96 == 0;
        if (!v95) {
          goto LABEL_156;
        }
        goto LABEL_153;
      }

  AudioObjectID v53 = a1->~__shared_weak_count_0;
  uint64_t v54 = (*(uint64_t (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v53 + 16LL))(v53);
  uint64_t v55 = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))operator new(0x20uLL);
  *((void *)v55 + 2) = v12;
  *((void *)v55 + 3) = v10;
  get_deleter = a1->__get_deleter;
  p_get_deleter = &a1->__get_deleter;
  *(void *)uint64_t v55 = get_deleter;
  *((void *)v55 + 1) = p_get_deleter;
  *((void *)get_deleter + 1) = v55;
  *p_get_deleter = v55;
  p_get_deleter[2] = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))((char *)p_get_deleter[2] + 1);
  if (v54) {
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v53 + 24LL))(v53);
  }
}

  uint64_t v55 = (os_log_t *)sub_138E8(2);
  uint64_t v56 = *v55;
  if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(&v101, 1953719151LL);
    uint64_t v57 = SHIBYTE(v103);
    unint64_t v58 = (void **)v101;
    sub_2CA1C(&__p, v46);
    uint64_t v59 = &v101;
    if (v57 < 0) {
      uint64_t v59 = v58;
    }
    if (v98 >= 0) {
      uint64_t v60 = &__p;
    }
    else {
      uint64_t v60 = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 669;
    uint64_t v105 = 2080;
    *(void *)char v106 = v59;
    *(_WORD *)&v106[8] = 2080;
    *(void *)&v106[10] = v60;
    _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Upcoming profile: %s, upcoming activation reason: %s",  buf,  0x26u);
    if (v98 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v103) < 0) {
      operator delete(v101);
    }
  }

  if ((_DWORD)v46 != 1920364387)
  {
    uint64_t v61 = atomic_load((unsigned int *)(v2 + 536));
    if (v61 != 1953719151 || *(_DWORD *)(v2 + 844) != (_DWORD)v46)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 848));
      sub_2E5CA0(v2, 1953719151LL, v46);
      unsigned int v62 = (os_log_t *)sub_138E8(17);
      int v63 = *v62;
      if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v64 = *(_DWORD *)(v2 + 268);
        sub_2CA1C(&__p, 1953719151LL);
        unint64_t v65 = v98;
        std::chrono::system_clock::time_point v66 = (void **)__p;
        sub_2CA1C(&v101, v46);
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = &__p;
        if (v65 < 0) {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v66;
        }
        if (v103 >= 0) {
          int v68 = &v101;
        }
        else {
          int v68 = v101;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 195;
        uint64_t v105 = 1024;
        *(_DWORD *)char v106 = v64;
        *(_WORD *)&v106[4] = 2080;
        *(void *)&v106[6] = v67;
        *(_WORD *)&v106[14] = 2080;
        *(void *)&v106[16] = v68;
        _os_log_impl(&dword_0, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Pre-setting profile for %u to %s (%s)", buf, 0x2Cu);
        if (SHIBYTE(v103) < 0) {
          operator delete(v101);
        }
        if (v98 < 0) {
          operator delete(__p);
        }
      }

      sub_59370((CFStringRef *)buf, "profileType");
      LODWORD(__p) = 1953719151;
      *(void *)&buf[8] = CFNumberCreate(0LL, kCFNumberIntType, &__p);
      if (!*(void *)&buf[8])
      {
        exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }

      sub_59370((CFStringRef *)&buf[16], "Reason");
      LODWORD(__p) = v46;
      *(void *)&v106[4] = CFNumberCreate(0LL, kCFNumberIntType, &__p);
      if (!*(void *)&v106[4])
      {
        char v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v89, "Could not construct");
      }

      uint64_t v101 = buf;
      id v102 = (void *)(&dword_0 + 2);
      uint64_t v69 = sub_5A950((uint64_t)&v101);
      for (uint64_t j = 0LL; j != -32; j -= 16LL)
      {
        unsigned __int8 v71 = *(const void **)&v106[j + 4];
        if (v71) {
          CFRelease(v71);
        }
        uint64_t v72 = *(const void **)&buf[j + 16];
        if (v72) {
          CFRelease(v72);
        }
      }

      LODWORD(v91[0]) = 1;
      uint64_t v73 = *(_DWORD *)(v2 + 268);
      strcpy((char *)buf, "dbobbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CFIndex v74 = sub_2E6834(0, v73, (uint64_t *)buf, 8u, v69, (int *)v91, 2000LL);
      if ((_DWORD)v74)
      {
        unint64_t v75 = sub_138E8(17);
        CFStringRef v76 = sub_138E8(28);
        uint64_t v77 = 0;
        int v78 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        int v79 = *(void *)(v75 + 8);
        while (1)
        {
          int v80 = *(int *)&buf[4 * v78];
          uint64_t v81 = v77;
          if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
            break;
          }
          uint64_t v77 = 1;
          int v78 = 1LL;
          if ((v81 & 1) != 0) {
            goto LABEL_163;
          }
        }

        if ((v79 & v80) == 0) {
          unint64_t v75 = v76;
        }
LABEL_163:
        uint64_t v82 = *(os_log_s **)v75;
        if (v82 && os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(&v101, v74);
          if (v103 >= 0) {
            uint64_t v83 = &v101;
          }
          else {
            uint64_t v83 = v101;
          }
          sub_2CA1C(&__p, 1651466852LL);
          uint64_t v84 = v98;
          char v85 = (void **)__p;
          sub_2CA1C(&v93, 1953719151LL);
          uint64_t v86 = &__p;
          if (v84 < 0) {
            uint64_t v86 = v85;
          }
          if (v95 >= 0) {
            uint64_t v87 = &v93;
          }
          else {
            uint64_t v87 = v93;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 209;
          uint64_t v105 = 1024;
          *(_DWORD *)char v106 = v74;
          *(_WORD *)&v106[4] = 2080;
          *(void *)&v106[6] = v83;
          *(_WORD *)&v106[14] = 2080;
          *(void *)&v106[16] = v86;
          id v107 = 2080;
          char v108 = v87;
          _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Error %d ('%s'), while synchronizing on %s property setting it to %s.",  buf,  0x36u);
          if (SHIBYTE(v95) < 0) {
            operator delete(v93);
          }
          if (v98 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v103) < 0) {
            operator delete(v101);
          }
        }
      }

      CFRelease(v69);
    }
  }

LABEL_899:
        if (*v320 == 1668509810) {
          int v478 = 1668309362;
        }
        else {
          int v478 = *v320;
        }
        sub_13408((uint64_t)&v871[8], @"category", v478);
        sub_13408((uint64_t)&v871[8], @"mode", *(_DWORD *)(a1 + 228));
        if ((v813 & v318) == 1)
        {
          id v479 = *(id *)sub_138E8(2);
          uint64_t v480 = v479;
          if (v479)
          {
            unsigned int v481 = (os_log_s *)v479;
            if (os_log_type_enabled(v481, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6808;
              _os_log_impl( &dword_0,  v481,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Route change was redundant, but the beam direction changed.  Updating the route change description.",  buf,  0x12u);
            }
          }

          sub_13408((uint64_t)&v871[8], @"route change reason", 1919050851);
          sub_6DD4();
          int v482 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
          sub_268514((uint64_t)buf, a1, *(void **)(a1 + 120));
          if (v871[17] && *(void *)buf && *(void *)&v871[8]) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)&v871[8], @"active devices", *(const void **)buf);
          }
          sub_13818((uint64_t)buf);
          if (v482) {
            (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
          }
        }

        sub_26C00C(v67);
        CFTypeRef v484 = *(unint64_t **)(a1 + 144);
        int v483 = *(unint64_t **)(a1 + 152);
        if (v484 == v483)
        {
          uint64_t v485 = *(uint64_t **)(a1 + 144);
        }

        else
        {
          do
          {
            if (*v484) {
              sub_C3328(*v484);
            }
            ++v484;
          }

          while (v484 != v483);
          uint64_t v485 = *(uint64_t **)(a1 + 144);
          CFTypeRef v484 = *(unint64_t **)(a1 + 152);
        }

        uint64_t v486 = sub_72A04(1986291046, 0, v485, (uint64_t *)v484);
        if (!v813)
        {
          uint64_t v487 = v486;
          sub_31821C();
          if ((_DWORD)qword_49DAB8 == 1)
          {
            sub_6DD4();
            int v488 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
            uint64_t v489 = sub_135A0(v487, 1);
            sub_86550((uint64_t *)buf, v489);
            int v490 = sub_26B0D4(a1, &v866, 1886545251);
            sub_32C8C(*(void **)&buf[8]);
            if (v488) {
              (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
            }
          }

          sub_6DD4();
          int v491 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
          sub_26E06C(a1);
          sub_E5784(v823, *(void *)(a1 + 216) + 8LL);
          sub_E57D8((uint64_t)buf, (uint64_t)v320, (uint64_t)v823, *(unsigned int *)(a1 + 492), a1 + 440);
          sub_26D1F4(a1, v67, *(unint64_t *)buf, *(uint64_t *)&buf[8], *(_DWORD *)(a1 + 400) != 0);
          sub_32C8C(*(void **)&buf[24]);
          if (v823[16]) {
            sub_13850((uint64_t)v823);
          }
          if (v491) {
            (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
          }
        }

        sub_E5784(&__dst, *(void *)(a1 + 216) + 8LL);
        if ((_BYTE)v869
          && (void)__dst
          && CFDictionaryContainsKey((CFDictionaryRef)__dst, @"network uplink clock uses baseband"))
        {
          __p[0] = 0;
          sub_52C24((const __CFDictionary *)__dst, @"network uplink clock uses baseband", __p);
          uint64_t v492 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
          if (!v809)
          {
            uint64_t v797 = sub_138E8(13);
            id v798 = sub_8C7D4(1, *(void **)v797, *(void *)(v797 + 8));
            v799 = (os_log_s *)objc_claimAutoreleasedReturnValue(v798);
            v800 = v799;
            if (v799 && os_log_type_enabled(v799, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6860;
              _os_log_impl( &dword_0,  v800,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            uint64_t v801 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v801, "Precondition failure.");
          }

          sub_C7BEC(*(void *)(*(void *)(v492 + 1008) + 312LL), __p[0]);
        }

        sub_26C278((uint64_t)buf, a1);
        uint64_t v493 = *(unsigned int *)buf;
        sub_13408((uint64_t)&v871[8], @"siri input source", *(int *)buf);
        id v494 = *(id *)sub_138E8(2);
        v495 = v494;
        if (v494)
        {
          uint64_t v496 = (os_log_s *)v494;
          if (os_log_type_enabled(v496, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(theArray, v493);
            id v497 = v864 >= 0 ? theArray : (CFMutableArrayRef *)theArray[0];
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = 6872;
            *(_WORD *)&_BYTE __p[18] = 2080;
            *(void *)&_BYTE __p[20] = v497;
            _os_log_impl(&dword_0, v496, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source: %s.", __p, 0x1Cu);
            if (SHIBYTE(v864) < 0) {
              operator delete(theArray[0]);
            }
          }
        }

        if ((_DWORD)v493 == 1936024681 || (_DWORD)v493 == 1936679529)
        {
          char v498 = buf[31];
          if ((buf[31] & 0x80000000) != 0)
          {
            sub_24054(theArray, *(void **)&buf[8], *(unint64_t *)&buf[16]);
          }

          else
          {
            *(_OWORD *)theArray = *(_OWORD *)&buf[8];
            uint64_t v864 = *(void *)&buf[24];
          }

          CFMutableArrayRef v499 = (CFMutableArrayRef)HIBYTE(v864);
          char v500 = HIBYTE(v864);
          if (v864 < 0) {
            CFMutableArrayRef v499 = theArray[1];
          }
          if (!v499)
          {
            id v501 = *(id *)sub_138E8(13);
            int v502 = v501;
            if (v501)
            {
              v503 = (os_log_s *)v501;
              if (os_log_type_enabled(v503, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = 6878;
                _os_log_impl( &dword_0,  v503,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid UUID for out of band speech input device",  __p,  0x12u);
              }
            }

            char v500 = HIBYTE(v864);
          }

          if (v500 >= 0) {
            uint64_t v504 = (char *)theArray;
          }
          else {
            uint64_t v504 = (char *)theArray[0];
          }
          sub_1A3240((uint64_t)&v871[8], @"siri input source UUID", v504);
          id v505 = *(id *)sub_138E8(2);
          v506 = v505;
          if (v505)
          {
            int v507 = (os_log_s *)v505;
            if (os_log_type_enabled(v507, OS_LOG_TYPE_DEFAULT))
            {
              v508 = theArray;
              if (v864 < 0) {
                v508 = (CFMutableArrayRef *)theArray[0];
              }
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 6881;
              *(_WORD *)&_BYTE __p[18] = 2080;
              *(void *)&_BYTE __p[20] = v508;
              _os_log_impl(&dword_0, v507, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source UUID: %s.", __p, 0x1Cu);
            }
          }

          if (SHIBYTE(v864) < 0) {
            operator delete(theArray[0]);
          }
        }

        else
        {
          char v498 = buf[31];
        }

        if (v498 < 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (v813)
        {
          if (!*(void *)sub_138E8(2))
          {
            id v521 = *(id *)sub_138E8(2);
            v522 = v521;
            if (v521)
            {
              int v523 = (os_log_s *)v521;
              if (os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6903;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = "client request";
                _os_log_impl( &dword_0,  v523,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description: Redundant.",  buf,  0x1Cu);
              }
            }

            goto LABEL_986;
          }
        }

        else
        {
          uint64_t v519 = *(void *)(a1 + 144);
          uint64_t v520 = *(void *)(a1 + 152);
          while (v519 != v520)
          {
            if (*(void *)v519) {
              sub_C69DC(*(void *)(*(void *)v519 + 1008LL), *(_BYTE *)(a1 + 488));
            }
            v519 += 8LL;
          }
        }

        unsigned int v509 = *(const __CFDictionary **)&v871[8];
        sub_7D084(v821, "  ");
        sub_1533B4((uint64_t *)__p, v509, 2, (const void **)v821);
        if (v822 < 0) {
          operator delete(v821[0]);
        }
        id v510 = *(id *)sub_138E8(2);
        v511 = v510;
        if (v510)
        {
          uint64_t v512 = (os_log_s *)v510;
          if (os_log_type_enabled(v512, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6898;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = "client request";
            _os_log_impl( &dword_0,  v512,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description:",  buf,  0x1Cu);
          }
        }

        for (uint64_t j = *(void *)&__p[8]; (_BYTE *)j != __p; uint64_t j = *(void *)(j + 8))
        {
          id v514 = *(id *)sub_138E8(2);
          int v515 = v514;
          if (v514)
          {
            v516 = (os_log_s *)v514;
            if (os_log_type_enabled(v516, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v517 = (void *)(j + 16);
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6898;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v517;
              _os_log_impl(&dword_0, v516, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
            }
          }
        }

        sub_1532B4(__p);
        sub_2590B8(a1);
LABEL_986:
        *((_DWORD *)a6 + 6) = 8;
        if (*(void *)&v871[8])
        {
          CFRetain(*(CFTypeRef *)&v871[8]);
          uint64_t v518 = *(void *)&v871[8];
        }

        else
        {
          uint64_t v518 = 0LL;
        }

        **((void **)a6 + 2) = v518;
        if ((_BYTE)v869) {
          sub_13850((uint64_t)&__dst);
        }
        sub_13850((uint64_t)&v871[8]);
        sub_13850((uint64_t)&theDict);
        sub_13850((uint64_t)&v852);
        sub_32C8C((void *)v866.__r_.__value_.__l.__size_);
        goto LABEL_1026;
      }
    }

LABEL_832:
    sub_E4714(v432, 0);
    sub_E4784(v432, 0);
    strcpy(buf, "dbedtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    *(_DWORD *)std::string __p = *(_DWORD *)(v432 + 8);
    strcpy(buf, "dbedtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v444 = sub_36EF4((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
    *((void *)&v447 + 1) = v445;
    *(void *)&__int128 v447 = v444;
    uint64_t v446 = v447 >> 32;
    if ((v446 & 0xFF00000000LL) == 0) {
      goto LABEL_836;
    }
    AudioObjectID v448 = *(_DWORD *)(v432 + 8);
    strcpy(buf, "dbedtpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    OSStatus v440 = AudioObjectSetPropertyData(v448, (const AudioObjectPropertyAddress *)buf, 0, 0LL, 4u, &unk_401924);
    if (!v440) {
      goto LABEL_836;
    }
LABEL_1276:
    id v802 = __cxa_allocate_exception(0x10uLL);
    *(void *)id v802 = &off_4865A0;
    v802[2] = v440;
  }

  if (v16 <= 1986094178)
  {
    if (v16 <= 1936745572)
    {
      if (v16 != 1936028521)
      {
        if (v16 == 1936225648)
        {
          uint64_t v29 = sub_869B4();
          int v30 = (dispatch_queue_s *)(id)objc_claimAutoreleasedReturnValue(v29);
          __int16 v31 = operator new(8uLL);
          void *v31 = a1;
          dispatch_async_f(v30, v31, (dispatch_function_t)sub_26EA58);

          goto LABEL_1026;
        }

        goto LABEL_203;
      }

      if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) == (_DWORD)a5)
      {
        CFTypeRef v99 = *(CFTypeRef *)a6;
        if (*(void *)a6) {
          CFRetain(*(CFTypeRef *)a6);
        }
        sub_3617C(__p, v99);
        sub_46DB4((uint64_t)buf, (const __CFDictionary **)__p);
        if (*(void *)__p) {
          CFRelease(*(CFTypeRef *)__p);
        }
        sub_483AC(a1, buf);
        if (buf[1])
        {
          sub_57B74((CFDictionaryRef *)v871, a1, (__int128 **)buf);
          int v100 = *(const void **)v871;
          if (*(void *)v871) {
            CFRetain(*(CFTypeRef *)v871);
          }
          id v820 = v100;
          memset(__p, 0, 24);
          sub_8D668(__p, *(const void **)&v840[6], v841, (v841 - *(void *)&v840[6]) >> 3);
          uint64_t v101 = *(void **)__p;
          sub_5AC9C((uint64_t *)&v820, *(uint64_t **)__p, *(uint64_t **)&__p[8], 8LL);
          if (v101) {
            operator delete(v101);
          }
          if (v100)
          {
            CFRelease(v100);
            CFRelease(v100);
          }
        }

        if (*(void *)&v840[6])
        {
          uint64_t v841 = *(void *)&v840[6];
          operator delete(*(void **)&v840[6]);
        }

        *(void *)std::string __p = &buf[32];
        sub_8CD60((void ***)__p);
        *(void *)std::string __p = &buf[8];
        sub_8CD60((void ***)__p);
        goto LABEL_1026;
      }

      uint64_t v623 = sub_138E8(13);
      int v551 = 561211770;
      id v624 = sub_8C7D4(1, *(void **)v623, *(void *)(v623 + 8));
      id v625 = (void *)objc_claimAutoreleasedReturnValue(v624);
      if (v625)
      {
        uint64_t v552 = v625;
        if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
        {
          *(void *)v871 = *(void *)a2;
          *(_DWORD *)&v871[8] = a2[2];
          sub_613AC((uint64_t)__p, (unsigned int *)v871);
          int v626 = __p[23];
          int v627 = *(_BYTE **)__p;
          int v628 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          unsigned int v629 = __p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v626 < 0) {
            unsigned int v629 = v627;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6981;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v629;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&_BYTE buf[30] = a5;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v628;
          int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
LABEL_1132:
          v559 = v552;
          uint32_t v560 = 40;
          goto LABEL_1133;
        }

        goto LABEL_1135;
      }

      goto LABEL_1061;
    }

    if (v16 != 1936745573)
    {
      if (v16 == 1936882284)
      {
        if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          uint64_t v595 = sub_138E8(13);
          int v551 = 561211770;
          id v596 = sub_8C7D4(1, *(void **)v595, *(void *)(v595 + 8));
          unsigned int v597 = (void *)objc_claimAutoreleasedReturnValue(v596);
          if (v597)
          {
            uint64_t v552 = v597;
            if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
            {
              *(void *)v871 = *(void *)a2;
              *(_DWORD *)&v871[8] = a2[2];
              sub_613AC((uint64_t)__p, (unsigned int *)v871);
              int v598 = __p[23];
              v599 = *(_BYTE **)__p;
              int v600 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              id v601 = __p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v598 < 0) {
                id v601 = v599;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6914;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v601;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&_BYTE buf[30] = a5;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v600;
              int v558 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_1132;
            }

LABEL_1135:
            goto LABEL_1136;
          }

    if ((int)v681 <= 1668313714)
    {
      if ((_DWORD)v681 != 1668301427 && (_DWORD)v681 != 1668309362)
      {
        uint64_t v691 = 29250;
LABEL_1168:
        v690 = v691 | 0x63700000;
        goto LABEL_1174;
      }

      goto LABEL_1197;
    }

    if ((_DWORD)v681 == 1668313715 || (_DWORD)v681 == 1668440898) {
      goto LABEL_1197;
    }
    v690 = 1668441443;
LABEL_1174:
    if ((_DWORD)v681 == v690) {
      goto LABEL_1197;
    }
    goto LABEL_1175;
  }

  if ((int)v682 > 1835232629)
  {
    if ((int)v682 <= 1836021359)
    {
      if ((_DWORD)v682 != 1835232630)
      {
        unsigned int v685 = 1835361382;
        goto LABEL_1145;
      }
    }

    else if ((_DWORD)v682 != 1836021360)
    {
      if ((_DWORD)v682 == 1836281204) {
        goto LABEL_1197;
      }
      unsigned int v685 = 1918990112;
LABEL_1145:
      if ((_DWORD)v682 == v685) {
        goto LABEL_1197;
      }
      goto LABEL_1231;
    }

LABEL_1126:
      exceptiounsigned int n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
      goto LABEL_1039;
    }

    uint64_t v118 = *a6;
    uint64_t v119 = sub_5954C();
    int v120 = operator new(0x48uLL);
    if ((_DWORD)v118) {
      __int16 v121 = "Add";
    }
    else {
      __int16 v121 = "Remove";
    }
    sub_7D084(__p, v121);
    AudioObjectID v122 = std::string::append((std::string *)__p, " alt VAD from disable policy", 0x1CuLL);
    *(std::string *)AudioObjectPropertyAddress buf = *v122;
    v122->__r_.__value_.__l.__size_ = 0LL;
    v122->__r_.__value_.__l.__cap_ = 0LL;
    v122->__r_.__value_.__r.__words[0] = 0LL;
    v842[0] = &off_4794F0;
    v842[1] = a1;
    v842[2] = v118;
    v843 = v842;
    sub_26E970((uint64_t)v120, (__int128 *)buf, (uint64_t)v842);
    (*(void (**)(uint64_t, void *))(*(void *)v119 + 328LL))(v119, v120);
    std::condition_variable v123 = v843;
    if (v843 == v842)
    {
      uint64_t v124 = 4LL;
      std::condition_variable v123 = v842;
    }

    else
    {
      if (!v843)
      {
LABEL_422:
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_1026;
      }

      uint64_t v124 = 5LL;
    }

    (*(void (**)(void))(*v123 + 8 * v124))();
    goto LABEL_422;
  }

  if (v16 > 1987016303)
  {
    if (v16 != 1987016304)
    {
      if (v16 == 2019714413)
      {
        if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) == (_DWORD)a5)
        {
          uint64_t v60 = *(void *)(a1 + 216);
          if (!*(void *)a6 || !*(void *)(v60 + 32))
          {
            *(_OWORD *)(v60 + 32) = *(_OWORD *)a6;
            if (*(void *)(v60 + 32))
            {
              uint64_t v61 = (os_log_s *)*(id *)sub_138E8(2);
              unsigned int v62 = v61;
              if (v61 && os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
              {
                int v63 = *(_DWORD *)(v60 + 48);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 346;
                *(_WORD *)&_BYTE buf[18] = 1024;
                *(_DWORD *)&buf[20] = v63;
                _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling client with beam index %u.",  buf,  0x18u);
              }

              (*(void (**)(void, void))(v60 + 32))(*(unsigned int *)(v60 + 48), *(void *)(v60 + 40));
            }

            goto LABEL_1026;
          }

          uint64_t v743 = sub_138E8(13);
          int v551 = 2003329396;
          id v744 = sub_8C7D4(1, *(void **)v743, *(void *)(v743 + 8));
          v745 = (os_log_s *)objc_claimAutoreleasedReturnValue(v744);
          uint64_t v552 = v745;
          if (v745 && os_log_type_enabled(v745, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 342;
            _os_log_impl( &dword_0,  v552,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Attempt to register an external beamforming handle r while one is already registered.",  buf,  0x12u);
          }

LABEL_770:
    unsigned int v415 = v867;
    v867 = 0LL;
    if (v415 == (std::string *)&v866.__r_.__value_.__r.__words[1])
    {
      uint64_t v416 = 4LL;
      unsigned int v415 = (std::string *)&v866.__r_.__value_.__r.__words[1];
    }

    else
    {
      if (!v415)
      {
LABEL_775:
        CFTypeRef v827 = cf;
        char v828 = v835;
        char v829 = v836;
        if (v835 && cf) {
          CFRetain(cf);
        }
        char v830 = 1;
        sub_13850((uint64_t)&cf);
        if (v859) {
          std::__shared_weak_count::__release_weak(v859);
        }
        if (v857) {
          std::__shared_weak_count::__release_weak(v857);
        }
        sub_35B78((uint64_t)&v866);
        (*(void (**)(void *))(*v812 + 8LL))(v812);
        sub_35B78((uint64_t)v871);
        sub_269DB4(v818, (uint64_t)&v827);
        if (v830) {
          sub_13850((uint64_t)&v827);
        }
        int v417 = v819;
        *((_DWORD *)a6 + 6) = 8 * v819;
        if (!v417)
        {
          **((void **)a6 + 2) = 0LL;
          goto LABEL_1026;
        }

        if (v818[0])
        {
          CFRetain(v818[0]);
          int v418 = v819;
          **((CFTypeRef **)a6 + 2) = v818[0];
          if (!v418) {
            goto LABEL_1026;
          }
        }

        else
        {
          **((void **)a6 + 2) = 0LL;
        }

        sub_13850((uint64_t)v818);
        goto LABEL_1026;
      }

      uint64_t v416 = 5LL;
    }

    (*(void (**)(void))(v415->__r_.__value_.__r.__words[0] + 8 * v416))();
    goto LABEL_775;
  }

  if (v16 != 1986094179)
  {
    if (v16 != 1986094180) {
      goto LABEL_203;
    }
    CFDictionaryRef v853 = (CFDictionaryRef)CFRetain(*(CFTypeRef *)a6);
    CFDictionaryRef v852 = (CFDictionaryRef)&off_486378;
    if ((sub_782DC(v853, @"VAD type 4cc") & 1) == 0)
    {
      uint64_t v590 = sub_138E8(13);
      id v591 = sub_8C7D4(1, *(void **)v590, *(void *)(v590 + 8));
      uint64_t v592 = (os_log_s *)objc_claimAutoreleasedReturnValue(v591);
      id v593 = v592;
      if (v592 && os_log_type_enabled(v592, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7800;
        _os_log_impl( &dword_0,  v593,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyCreateVAD - the id key is required",  buf,  0x12u);
      }

      v594 = __cxa_allocate_exception(0x10uLL);
      *(void *)v594 = &off_4865A0;
      v594[2] = 1852797029;
    }

    sub_78300((uint64_t)buf, v853, @"VAD type 4cc");
    unsigned int v44 = sub_3A030(*(const __CFNumber **)&buf[8]);
    sub_39FD8(buf);
    int v45 = (os_log_s *)*(id *)sub_138E8(2);
    int v46 = v45;
    if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7803;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v44;
      _os_log_impl(&dword_0, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting VAD (ID: %u)", buf, 0x18u);
    }

    __int16 v47 = *(uint64_t **)(a1 + 144);
    int v48 = *(uint64_t **)(a1 + 152);
    if (v47 != v48)
    {
      while (!*v47 || *(_DWORD *)(*v47 + 8) != v44)
      {
        if (++v47 == v48) {
          goto LABEL_61;
        }
      }
    }

    if (v47 == v48 || (uint64_t v127 = *v47) == 0)
    {
LABEL_61:
      uint64_t v49 = sub_138E8(13);
      id v50 = sub_8C7D4(1, *(void **)v49, *(void *)(v49 + 8));
      uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      uint64_t v52 = v51;
      if (v51 && os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7806;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v44;
        _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [vad is NULL]: No VAD of id %u found",  buf,  0x18u);
      }

      AudioObjectID v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v53, "No VAD of id %u found");
      goto LABEL_65;
    }

    int v128 = *(_DWORD *)(v127 + 576);
    if (v128 != 1986095474 && v128 != 1986884979)
    {
      uint64_t v766 = sub_138E8(13);
      id v767 = sub_8C7D4(1, *(void **)v766, *(void *)(v766 + 8));
      v768 = (os_log_s *)objc_claimAutoreleasedReturnValue(v767);
      uint64_t v769 = v768;
      if (v768 && os_log_type_enabled(v768, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7809;
        _os_log_impl( &dword_0,  v769,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      AudioObjectID v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v53, "Precondition failure.");
LABEL_65:
    }

    if (v128 == 1986884979) {
      int v130 = 19;
    }
    else {
      int v130 = 20;
    }
    LODWORD(v832.__r_.__value_.__l.__data_) = v130;
    uint64_t v131 = sub_135A0(v127, 1);
    sub_86550((uint64_t *)v871, v131);
    if (*(void *)&v871[16] != 1LL)
    {
      uint64_t v696 = sub_138E8(13);
      id v697 = sub_8C7D4(1, *(void **)v696, *(void *)(v696 + 8));
      id v698 = (os_log_s *)objc_claimAutoreleasedReturnValue(v697);
      v699 = v698;
      if (v698 && os_log_type_enabled(v698, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7815;
        _os_log_impl( &dword_0,  v699,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      v700 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v700, "Precondition failure.");
    }

    int v132 = *(_BYTE **)v871;
    if (*(_BYTE **)v871 != &v871[8])
    {
      do
      {
        uint64_t v133 = sub_6A92C(*(void *)(a1 + 128), *((_DWORD *)v132 + 7));
        uint64_t v134 = v133;
        if (v133)
        {
          uint64_t v135 = *(void *)(v133 + 96);
          *(void *)std::string __p = *(void *)(v133 + 88);
          *(void *)&__p[8] = v135;
          if (v135)
          {
            char v136 = (unint64_t *)(v135 + 16);
            do
              unint64_t v137 = __ldxr(v136);
            while (__stxr(v137 + 1, v136));
          }

          sub_B8CBC((uint64_t *)buf, (uint64_t *)__p, "", 7819);
          int v138 = *(std::__shared_weak_count **)&buf[8];
          __int16 v139 = *(_WORD *)(*(void *)buf + 184LL);
          if (*(void *)&buf[8])
          {
            int v140 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              unint64_t v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }

          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
          }
          if ((v139 & 0x40) != 0) {
            sub_D5D90(v134, 0LL);
          }
        }

        int v142 = (void *)*((void *)v132 + 1);
        if (v142)
        {
          do
          {
            int v143 = v142;
            int v142 = (void *)*v142;
          }

          while (v142);
        }

        else
        {
          do
          {
            int v143 = (_BYTE *)*((void *)v132 + 2);
            BOOL v13 = *(void *)v143 == (void)v132;
            int v132 = v143;
          }

          while (!v13);
        }

        int v132 = v143;
      }

      while (v143 != &v871[8]);
    }

    *(_OWORD *)&v866.__r_.__value_.__r.__words[1] = 0uLL;
    v866.__r_.__value_.__r.__words[0] = (std::string::size_type)&v866.__r_.__value_.__l.__size_;
    uint64_t v144 = *(void *)(a1 + 280);
    if (*(_DWORD *)v144 == 1986095474)
    {
      int v145 = *(_DWORD *)(*(void *)v871 + 28LL);
      if (v145 != **(_DWORD **)(v144 + 8))
      {
        uint64_t v774 = sub_138E8(13);
        id v775 = sub_8C7D4(1, *(void **)v774, *(void *)(v774 + 8));
        uint64_t v776 = (os_log_s *)objc_claimAutoreleasedReturnValue(v775);
        id v777 = v776;
        if (v776 && os_log_type_enabled(v776, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7834;
          _os_log_impl( &dword_0,  v777,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        v778 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v778, "Precondition failure.");
      }

      sub_268A74(theArray, *(void *)(a1 + 128), v145);
      int v146 = (std::__shared_weak_count *)theArray[1];
      if (!theArray[1] || *((void *)theArray[1] + 1) == -1LL)
      {
        uint64_t v714 = sub_138E8(13);
        id v715 = sub_8C7D4(1, *(void **)v714, *(void *)(v714 + 8));
        id v716 = (os_log_s *)objc_claimAutoreleasedReturnValue(v715);
        v717 = v716;
        if (v716 && os_log_type_enabled(v716, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7836;
          _os_log_impl( &dword_0,  v717,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        uint64_t v718 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v718, "Precondition failure.");
      }

      CFMutableArrayRef Mutable = theArray[0];
      id v857 = (std::__shared_weak_count *)theArray[1];
      int v147 = (unint64_t *)((char *)theArray[1] + 16);
      do
        unint64_t v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
      sub_268D3C((uint64_t)&__dst, (unint64_t *)&Mutable, 1LL);
      *(_DWORD *)AudioObjectPropertyAddress buf = 1986291046;
      *(_OWORD *)&buf[8] = __dst;
      *(void *)&_BYTE buf[24] = v869;
      if (v869)
      {
        *(void *)(*((void *)&__dst + 1) + 16LL) = &buf[16];
        *(void *)&__int128 __dst = (char *)&__dst + 8;
        *((void *)&__dst + 1) = 0LL;
        uint64_t v869 = 0LL;
      }

      else
      {
        *(void *)&buf[8] = &buf[16];
      }

      sub_26FE38((uint64_t)__p, (unsigned int *)buf, 1LL);
      sub_11AD14((void *)v866.__r_.__value_.__l.__size_);
      v396 = *(void **)&__p[8];
      std::string v866 = *(std::string *)__p;
      if (*(void *)&__p[16])
      {
        *(void *)(*(void *)&__p[8] + 16LL) = &v866.__r_.__value_.__l.__size_;
        *(void *)std::string __p = &__p[8];
        *(void *)&__p[8] = 0LL;
        *(void *)&__p[16] = 0LL;
        v396 = 0LL;
      }

      else
      {
        v866.__r_.__value_.__r.__words[0] = (std::string::size_type)&v866.__r_.__value_.__l.__size_;
      }

      sub_11AD14(v396);
      sub_FF3B8(*(void **)&buf[16]);
      sub_FF3B8(*((void **)&__dst + 1));
      if (v857) {
        std::__shared_weak_count::__release_weak(v857);
      }
      std::__shared_weak_count::__release_weak(v146);
    }

    *(void *)&_BYTE buf[24] = 0LL;
    int v397 = operator new(0x20uLL);
    void *v397 = &off_479658;
    v397[1] = a1;
    v397[2] = &v832;
    v397[3] = &v866;
    *(void *)&_BYTE buf[24] = v397;
    sub_26B218((uint64_t)&__dst, a1, (uint64_t)buf);
    uint64_t v398 = *(void **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      uint64_t v399 = 4LL;
      uint64_t v398 = buf;
    }

    else
    {
      if (!*(void *)&buf[24]) {
        goto LABEL_735;
      }
      uint64_t v399 = 5LL;
    }

    (*(void (**)(void))(*v398 + 8 * v399))();
LABEL_735:
    int v400 = (const __CFDictionary *)*((void *)&__dst + 1);
    if (!*((void *)&__dst + 1))
    {
      uint64_t v723 = sub_138E8(13);
      id v724 = sub_8C7D4(1, *(void **)v723, *(void *)(v723 + 8));
      unsigned int v725 = (os_log_s *)objc_claimAutoreleasedReturnValue(v724);
      int v726 = v725;
      if (v725 && os_log_type_enabled(v725, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 7847;
        _os_log_impl( &dword_0,  v726,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  __p,  0x12u);
      }

      v727 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v727, "Postcondition failure.");
    }

    sub_7D084(&Mutable, "  ");
    sub_1533B4((uint64_t *)theArray, v400, 2, (const void **)&Mutable);
    if (SHIBYTE(v858) < 0) {
      operator delete(Mutable);
    }
    v401 = (os_log_s *)*(id *)sub_138E8(2);
    uint64_t v402 = v401;
    if (v401 && os_log_type_enabled(v401, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 7849;
      *(_WORD *)&_BYTE __p[18] = 2080;
      *(void *)&_BYTE __p[20] = "VAD Deletion";
      _os_log_impl( &dword_0,  v402,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description:",  __p,  0x1Cu);
    }

    for (CFMutableArrayRef m = theArray[1]; m != (CFMutableArrayRef)theArray; CFMutableArrayRef m = (CFMutableArrayRef)*((void *)m + 1))
    {
      v404 = (os_log_s *)*(id *)sub_138E8(2);
      int v405 = v404;
      if (v404 && os_log_type_enabled(v404, OS_LOG_TYPE_DEFAULT))
      {
        int v406 = (void *)((char *)m + 16);
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 7849;
        *(_WORD *)&_BYTE __p[18] = 2080;
        *(void *)&_BYTE __p[20] = v406;
        _os_log_impl(&dword_0, v405, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __p, 0x1Cu);
      }
    }

    sub_1532B4(theArray);
    unsigned int v407 = *(void **)(a1 + 280);
    *(void *)(a1 + 280) = 0LL;
    if (v407) {
      sub_26C0F4(v407);
    }
    int v317 = (const void *)*((void *)&__dst + 1);
    CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)*((void *)&__dst + 1);
    LOWORD(cf) = v869;
    if ((_BYTE)v869 && *((void *)&__dst + 1)) {
      CFRetain(*((CFTypeRef *)&__dst + 1));
    }
    sub_13850((uint64_t)&__dst + 8);
    sub_11AD14((void *)v866.__r_.__value_.__l.__size_);
    sub_32C8C(*(void **)&v871[8]);
    *((_DWORD *)a6 + 6) = 8;
    if (v317) {
      goto LABEL_754;
    }
    goto LABEL_755;
  }

  CFDictionaryRef v853 = (CFDictionaryRef)CFRetain(*(CFTypeRef *)a6);
  CFDictionaryRef v852 = (CFDictionaryRef)&off_486378;
  id v102 = *(id *)sub_138E8(2);
  int v103 = v102;
  if (v102)
  {
    AudioObjectPropertyAddress v104 = (os_log_s *)v102;
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
    {
      sub_151D60((std::string *)__p, v853);
      uint64_t v105 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6957;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v105;
      _os_log_impl(&dword_0, v104, OS_LOG_TYPE_DEFAULT, "%25s:%-5d input dictionary: %s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  if ((sub_782DC(v853, @"VAD type 4cc") & 1) == 0)
  {
    uint64_t v668 = sub_138E8(13);
    id v669 = sub_8C7D4(1, *(void **)v668, *(void *)(v668 + 8));
    int v670 = (os_log_s *)objc_claimAutoreleasedReturnValue(v669);
    v671 = v670;
    if (!v670 || !os_log_type_enabled(v670, OS_LOG_TYPE_ERROR)) {
      goto LABEL_1172;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7753;
    uint64_t v672 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyCreateVAD - kVirtualA"
           "udioPlugInPropertyVADKey is required";
LABEL_1167:
    unsigned int v685 = v671;
    uint32_t v686 = 18;
LABEL_1171:
    _os_log_impl(&dword_0, v685, OS_LOG_TYPE_ERROR, v672, buf, v686);
    goto LABEL_1172;
  }

  sub_78300((uint64_t)buf, v853, @"VAD type 4cc");
  char v106 = sub_3A030(*(const __CFNumber **)&buf[8]);
  sub_39FD8(buf);
  if ((_DWORD)v106 != 1986095474 && (_DWORD)v106 != 1986884979)
  {
    uint64_t v761 = sub_138E8(13);
    id v762 = sub_8C7D4(1, *(void **)v761, *(void *)(v761 + 8));
    v763 = (os_log_s *)objc_claimAutoreleasedReturnValue(v762);
    uint64_t v764 = v763;
    if (v763 && os_log_type_enabled(v763, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7755;
      _os_log_impl(&dword_0, v764, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    id v765 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v765, "Precondition failure.");
  }

  id v107 = *(id *)sub_138E8(2);
  char v108 = v107;
  if (v107)
  {
    AudioObjectID v109 = (os_log_s *)v107;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, (uint64_t)v106);
      AudioObjectPropertyAddress v110 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7757;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v110;
      _os_log_impl(&dword_0, v109, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating VAD of type %s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  if ((sub_782DC(v853, @"VAD type 4cc") & 1) == 0)
  {
    uint64_t v682 = sub_138E8(13);
    id v683 = sub_8C7D4(1, *(void **)v682, *(void *)(v682 + 8));
    v684 = (os_log_s *)objc_claimAutoreleasedReturnValue(v683);
    v671 = v684;
    if (!v684 || !os_log_type_enabled(v684, OS_LOG_TYPE_ERROR)) {
      goto LABEL_1172;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1024;
    uint64_t v672 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyCreateVAD - kVirtualA"
           "udioPlugInPropertyVADKey is required";
    goto LABEL_1167;
  }

  unsigned int v111 = sub_782DC(v853, @"mirror vad");
  unsigned int v112 = sub_782DC(v853, @"port id array");
  unsigned int v113 = v112;
  if ((v111 & 1) == 0 && (v112 & 1) == 0)
  {
    uint64_t v687 = sub_138E8(13);
    id v688 = sub_8C7D4(1, *(void **)v687, *(void *)(v687 + 8));
    id v689 = (os_log_s *)objc_claimAutoreleasedReturnValue(v688);
    v671 = v689;
    if (v689 && os_log_type_enabled(v689, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1031;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = 0;
      *(_WORD *)&_BYTE buf[24] = 1024;
      *(_DWORD *)&buf[26] = 0;
      uint64_t v672 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyCreateVAD - either "
             "kVirtualAudioPlugInMirrorVADKey or kVirtualAudioPlugInPortIDsKey is  required. has mirror vad key: %d h"
             "as portIDs key: %d";
      unsigned int v685 = v671;
      uint32_t v686 = 30;
      goto LABEL_1171;
    }

  if (v491)
  {
    uint64_t v492 = v491;
    operator delete(v491);
  }

  if (__dst.__r_.__value_.__l.__cap_)
  {
    int64_t cap = __dst.__r_.__value_.__l.__cap_;
    operator delete((void *)__dst.__r_.__value_.__l.__cap_);
  }

  if (*(void *)&buf[40])
  {
    *(void *)&_BYTE buf[48] = *(void *)&buf[40];
    operator delete(*(void **)&buf[40]);
  }

  if (*(void *)&buf[16])
  {
    *(void *)&_BYTE buf[24] = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }

LABEL_1172:
    v690 = __cxa_allocate_exception(0x10uLL);
    *(void *)v690 = &off_4865A0;
    v690[2] = 1852797029;
  }

  theArray[1] = 0LL;
  theArray[0] = (CFMutableArrayRef)&off_47D068;
  sub_78300((uint64_t)buf, v853, @"VAD type 4cc");
  uint64_t v114 = (uint64_t)sub_3A030(*(const __CFNumber **)&buf[8]);
  sub_39FD8(buf);
  if (v111)
  {
    sub_78300((uint64_t)buf, v853, @"mirror vad");
    uint64_t v115 = (uint64_t)sub_3A030(*(const __CFNumber **)&buf[8]);
    sub_39FD8(buf);
    if (!v113)
    {
LABEL_191:
      int v116 = 0LL;
      __int16 v117 = 0LL;
      goto LABEL_315;
    }
  }

  else
  {
    uint64_t v115 = 0LL;
    if (!v113) {
      goto LABEL_191;
    }
  }

  unsigned int v810 = v115;
  sub_2703D8((uint64_t)buf, v853, @"port id array");
  CFMutableArrayRef v161 = theArray[1];
  theArray[1] = *(CFMutableArrayRef *)&buf[8];
  *(void *)&buf[8] = v161;
  sub_39FD8(buf);
  unint64_t v162 = 0LL;
  int v116 = 0LL;
  __int16 v117 = 0LL;
  for (unsigned int n = 0; (unint64_t)sub_3A014(theArray[1]) > n; ++n)
  {
    *(void *)AudioObjectPropertyAddress buf = &off_47D048;
    *(void *)&buf[8] = 0LL;
    if (theArray[1] && CFArrayGetCount(theArray[1]) > n)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray[1], n);
      unint64_t v165 = ValueAtIndex;
      CFTypeID v166 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0LL;
      if (v166 == CFNumberGetTypeID())
      {
        if (v165)
        {
          CFRetain(v165);
          std::string v167 = *(const void **)&buf[8];
          *(void *)&buf[8] = v165;
          if (!v167) {
            goto LABEL_296;
          }
        }

        else
        {
          std::string v167 = *(const void **)&buf[8];
          *(void *)&buf[8] = 0LL;
          if (!v167) {
            goto LABEL_296;
          }
        }

        CFRelease(v167);
      }
    }

LABEL_296:
    unsigned int v168 = sub_3A030(*(const __CFNumber **)&buf[8]);
    unsigned int v169 = v168;
    if ((unint64_t)v116 >= v162)
    {
      uint64_t v171 = v116 - v117;
      unint64_t v172 = v171 + 1;
      else {
        unint64_t v173 = v172;
      }
      if (v173) {
        unint64_t v173 = (unint64_t)sub_7A890(v173);
      }
      else {
        uint64_t v174 = 0LL;
      }
      pid_t v175 = (unsigned int *)(v173 + 4 * v171);
      *pid_t v175 = v169;
      unint64_t v170 = v175 + 1;
      while (v116 != v117)
      {
        unsigned int v176 = *--v116;
        *--pid_t v175 = v176;
      }

      unint64_t v162 = v173 + 4 * v174;
      if (v117) {
        operator delete(v117);
      }
      __int16 v117 = v175;
    }

    else
    {
      *int v116 = v168;
      unint64_t v170 = v116 + 1;
    }

    sub_39FD8(buf);
    int v116 = v170;
  }

  uint64_t v114 = v114;
  uint64_t v115 = v810;
LABEL_315:
  id v177 = *(id *)sub_138E8(2);
  unsigned int v178 = v177;
  if (v177)
  {
    unsigned int v179 = (os_log_s *)v177;
    if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v180 = v871;
      sub_2CA1C(v871, v114);
      if (v871[23] < 0) {
        unsigned int v180 = *(_BYTE **)v871;
      }
      sub_151A78(&v866, theArray[1]);
      int v181 = (char)v866.__r_.__value_.__s.__size_;
      std::string::size_type v182 = v866.__r_.__value_.__r.__words[0];
      sub_2CA1C(&__dst, v115);
      unint64_t v183 = &v866;
      if (v181 < 0) {
        unint64_t v183 = (std::string *)v182;
      }
      if (v869 >= 0) {
        uint64_t v184 = &__dst;
      }
      else {
        uint64_t v184 = (__int128 *)__dst;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1052;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v180;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&_BYTE buf[30] = v183;
      *(_WORD *)&buf[38] = 2080;
      *(void *)&_BYTE buf[40] = v184;
      _os_log_impl( &dword_0,  v179,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d create VAD of type %s with ports %s, mirroring %s",  buf,  0x30u);
      if (SHIBYTE(v869) < 0) {
        operator delete((void *)__dst);
      }
      if ((v871[23] & 0x80000000) != 0) {
        operator delete(*(void **)v871);
      }
    }
  }

  *(_DWORD *)std::string __p = v114;
  *(_DWORD *)&__p[4] = v115;
  memset(&__p[8], 0, 24);
  sub_7A5B8(&__p[8], v117, (uint64_t)v116, v116 - v117);
  if (v117) {
    operator delete(v117);
  }
  sub_39FD8(theArray);
  id v185 = *(id *)sub_138E8(2);
  uint64_t v186 = v185;
  if (v185)
  {
    uint64_t v187 = (os_log_s *)v185;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v871, *(unsigned int *)__p);
      char v188 = v871[23] >= 0 ? v871 : *(_BYTE **)v871;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7760;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v188;
      _os_log_impl(&dword_0, v187, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating VAD of type %s", buf, 0x1Cu);
      if ((v871[23] & 0x80000000) != 0) {
        operator delete(*(void **)v871);
      }
    }
  }

  if (*(_DWORD *)__p != 1986095474 && *(_DWORD *)__p != 1986884979)
  {
    uint64_t v770 = sub_138E8(13);
    id v771 = sub_8C7D4(1, *(void **)v770, *(void *)(v770 + 8));
    uint64_t v772 = (os_log_s *)objc_claimAutoreleasedReturnValue(v771);
    id v773 = v772;
    if (v772 && os_log_type_enabled(v772, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7763;
      _os_log_impl(&dword_0, v773, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

LABEL_1262:
    v789 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v789, "Precondition failure.");
  }

  if (!*(_DWORD *)&__p[4] && *(void *)&__p[16] == *(void *)&__p[8])
  {
    uint64_t v786 = sub_138E8(13);
    id v787 = sub_8C7D4(1, *(void **)v786, *(void *)(v786 + 8));
    id v788 = (os_log_s *)objc_claimAutoreleasedReturnValue(v787);
    id v773 = v788;
    if (v788 && os_log_type_enabled(v788, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7764;
      _os_log_impl(&dword_0, v773, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_1262;
  }

  if (*(_DWORD *)__p == 1986884979) {
    int v189 = 19;
  }
  else {
    int v189 = 20;
  }
  LODWORD(v832.__r_.__value_.__l.__data_) = v189;
  if (!sub_13AFA0(*(void *)(a1 + 112), v189))
  {
    uint64_t v701 = sub_138E8(13);
    id v702 = sub_8C7D4(1, *(void **)v701, *(void *)(v701 + 8));
    v703 = (os_log_s *)objc_claimAutoreleasedReturnValue(v702);
    unsigned int v704 = v703;
    if (v703 && os_log_type_enabled(v703, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7768;
      _os_log_impl(&dword_0, v704, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v705 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v705, "Precondition failure.");
LABEL_1189:
  }

  if (*(void *)&__p[16] - *(void *)&__p[8] != 4LL)
  {
    uint64_t v706 = sub_138E8(13);
    id v707 = sub_8C7D4(1, *(void **)v706, *(void *)(v706 + 8));
    uint64_t v708 = (os_log_s *)objc_claimAutoreleasedReturnValue(v707);
    id v709 = v708;
    if (v708 && os_log_type_enabled(v708, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7771;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = (*(void *)&__p[16] - *(void *)&__p[8]) >> 2;
      _os_log_impl( &dword_0,  v709,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Only one port ID can be specified (actual specified = %u)",  buf,  0x18u);
    }

    int v705 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v705, "Only one port ID can be specified (actual specified = %u)");
    goto LABEL_1189;
  }

  uint64_t v190 = *(void *)(a1 + 128);
  int v191 = **(_DWORD **)&__p[8];
  uint64_t v192 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (!v192)
  {
    uint64_t v710 = sub_138E8(13);
    id v711 = sub_8C7D4(1, *(void **)v710, *(void *)(v710 + 8));
    uint64_t v712 = (os_log_s *)objc_claimAutoreleasedReturnValue(v711);
    id v713 = v712;
    if (v712 && os_log_type_enabled(v712, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 989;
      _os_log_impl( &dword_0,  v713,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No default VAD found !",  buf,  0x12u);
    }

    v540 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v540, "No default VAD found !");
    goto LABEL_1033;
  }

  size_t v193 = (void *)sub_135A0(v192, 1);
  CFTypeRef v196 = (void *)*v193;
  uint64_t v194 = v193 + 1;
  unint64_t v195 = v196;
  if (v196 != v194)
  {
    while (*((_DWORD *)v195 + 7) != v191)
    {
      int v197 = (void *)v195[1];
      if (v197)
      {
        do
        {
          uint64_t v198 = v197;
          int v197 = (void *)*v197;
        }

        while (v197);
      }

      else
      {
        do
        {
          uint64_t v198 = (void *)v195[2];
          BOOL v13 = *v198 == (void)v195;
          unint64_t v195 = v198;
        }

        while (!v13);
      }

      unint64_t v195 = v198;
      if (v198 == v194) {
        goto LABEL_359;
      }
    }

    uint64_t v536 = sub_138E8(13);
    id v537 = sub_8C7D4(1, *(void **)v536, *(void *)(v536 + 8));
    v538 = (os_log_s *)objc_claimAutoreleasedReturnValue(v537);
    int v539 = v538;
    if (v538 && os_log_type_enabled(v538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 995;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v191;
      _os_log_impl( &dword_0,  v539,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Default VAD is using the requested port %u",  buf,  0x18u);
    }

    v540 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v540, "Default VAD is using the requested port %u");
LABEL_1033:
    unsigned int v541 = (void (*)(void *))&std::runtime_error::~runtime_error;
LABEL_1034:
    __cxa_throw(v540, v542, v541);
  }

LABEL_359:
  uint64_t v199 = sub_6A92C(v190, v191);
  uint64_t v200 = v199;
  if (!v199)
  {
    uint64_t v719 = sub_138E8(13);
    id v720 = sub_8C7D4(1, *(void **)v719, *(void *)(v719 + 8));
    v721 = (os_log_s *)objc_claimAutoreleasedReturnValue(v720);
    v722 = v721;
    if (v721 && os_log_type_enabled(v721, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 999;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v191;
      _os_log_impl( &dword_0,  v722,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): No virtual audio port found with port id %u",  buf,  0x18u);
    }

    v540 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error((std::logic_error *)v540, "No virtual audio port found with port id %u");
    unsigned int v541 = (void (*)(void *))&std::logic_error::~logic_error;
    goto LABEL_1034;
  }

  unint64_t v201 = *(std::__shared_weak_count **)(v199 + 96);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(v199 + 88);
  *(void *)&buf[8] = v201;
  if (v201)
  {
    uint64_t v202 = (unint64_t *)&v201->__shared_weak_owners_;
    do
      unint64_t v203 = __ldxr(v202);
    while (__stxr(v203 + 1, v202));
  }

  sub_B8CBC((uint64_t *)&v866, (uint64_t *)buf, "", 1001);
  if (v201) {
    std::__shared_weak_count::__release_weak(v201);
  }
  id v204 = *(id *)sub_138E8(2);
  unint64_t v205 = v204;
  if (v204)
  {
    uint64_t v206 = (os_log_s *)v204;
    if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
    {
      int v207 = *(const void **)(v866.__r_.__value_.__r.__words[0] + 248);
      *(void *)v871 = v207;
      v871[8] = *(_BYTE *)(v866.__r_.__value_.__r.__words[0] + 256);
      if (v871[8] && v207) {
        CFRetain(v207);
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1003;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&buf[20] = v207;
      _os_log_impl(&dword_0, v206, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Requested port is %@", buf, 0x1Cu);
      sub_19DFC((uint64_t)v871);
    }
  }

  int v208 = (__CFArray *)v866.__r_.__value_.__r.__words[0];
  int v209 = *(_DWORD *)(v866.__r_.__value_.__r.__words[0] + 144);
  if (v209 != 1885433953 && v209 != 1885433975)
  {
    uint64_t v779 = sub_138E8(13);
    id v780 = sub_8C7D4(1, *(void **)v779, *(void *)(v779 + 8));
    v781 = (void *)objc_claimAutoreleasedReturnValue(v780);
    v782 = v781;
    if (v781)
    {
      uint64_t v783 = v781;
      if (os_log_type_enabled(v783, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v871, *(unsigned int *)(v866.__r_.__value_.__r.__words[0] + 144));
        id v784 = v871[23] >= 0 ? v871 : *(_BYTE **)v871;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1006;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v784;
        _os_log_impl( &dword_0,  v783,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported port type %s specified for VAD creation",  buf,  0x1Cu);
        if ((v871[23] & 0x80000000) != 0) {
          operator delete(*(void **)v871);
        }
      }
    }

    v785 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v785, "Unsupported port type %s specified for VAD creation");
  }

  if ((*(_WORD *)(v866.__r_.__value_.__r.__words[0] + 184) & 0x40) != 0)
  {
    sub_D5D90(v200, 1LL);
    int v208 = (__CFArray *)v866.__r_.__value_.__r.__words[0];
  }

  int v211 = (std::__shared_weak_count *)v866.__r_.__value_.__l.__size_;
  CFMutableArrayRef Mutable = v208;
  id v857 = (std::__shared_weak_count *)v866.__r_.__value_.__l.__size_;
  if (v866.__r_.__value_.__l.__size_)
  {
    v212 = (unint64_t *)(v866.__r_.__value_.__l.__size_ + 16);
    do
      unint64_t v213 = __ldxr(v212);
    while (__stxr(v213 + 1, v212));
    p_shared_owners = (unint64_t *)&v211->__shared_owners_;
    do
      unint64_t v215 = __ldaxr(p_shared_owners);
    while (__stlxr(v215 - 1, p_shared_owners));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }

  *(void *)&_BYTE buf[24] = 0LL;
  int v216 = operator new(0x28uLL);
  *int v216 = &off_479610;
  v216[1] = __p;
  v216[2] = &Mutable;
  v216[3] = a1;
  v216[4] = &v832;
  *(void *)&_BYTE buf[24] = v216;
  sub_26B218((uint64_t)&v866, a1, (uint64_t)buf);
  char v217 = *(void **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    uint64_t v218 = 4LL;
    char v217 = buf;
LABEL_538:
    (*(void (**)(void))(*v217 + 8 * v218))();
  }

  else if (*(void *)&buf[24])
  {
    uint64_t v218 = 5LL;
    goto LABEL_538;
  }

  int v305 = (const __CFDictionary *)v866.__r_.__value_.__l.__size_;
  if (!v866.__r_.__value_.__l.__size_)
  {
    uint64_t v728 = sub_138E8(13);
    id v729 = sub_8C7D4(1, *(void **)v728, *(void *)(v728 + 8));
    id v730 = (os_log_s *)objc_claimAutoreleasedReturnValue(v729);
    v731 = v730;
    if (v730 && os_log_type_enabled(v730, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v871 = 136315394;
      *(void *)&v871[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v871[12] = 1024;
      *(_DWORD *)&v871[14] = 7788;
      _os_log_impl( &dword_0,  v731,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  v871,  0x12u);
    }

    uint64_t v732 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v732, "Postcondition failure.");
  }

  sub_7D084(theArray, "  ");
  sub_1533B4((uint64_t *)&__dst, v305, 2, (const void **)theArray);
  if (SHIBYTE(v864) < 0) {
    operator delete(theArray[0]);
  }
  id v306 = *(id *)sub_138E8(2);
  UInt32 v307 = v306;
  if (v306)
  {
    int v308 = (os_log_s *)v306;
    if (os_log_type_enabled(v308, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v871 = 136315650;
      *(void *)&v871[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v871[12] = 1024;
      *(_DWORD *)&v871[14] = 7790;
      *(_WORD *)&v871[18] = 2080;
      *(void *)&v871[20] = "VAD Creation";
      _os_log_impl( &dword_0,  v308,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description:",  v871,  0x1Cu);
    }
  }

  for (iuint64_t i = *((void *)&__dst + 1); (__int128 *)ii != &__dst; iuint64_t i = *(void *)(ii + 8))
  {
    id v310 = *(id *)sub_138E8(2);
    int v311 = v310;
    if (v310)
    {
      int v312 = (os_log_s *)v310;
      if (os_log_type_enabled(v312, OS_LOG_TYPE_DEFAULT))
      {
        UInt32 v313 = (void *)(ii + 16);
        *(_DWORD *)v871 = 136315650;
        *(void *)&v871[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v871[12] = 1024;
        *(_DWORD *)&v871[14] = 7790;
        *(_WORD *)&v871[18] = 2080;
        *(void *)&v871[20] = v313;
        _os_log_impl(&dword_0, v312, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", v871, 0x1Cu);
      }
    }
  }

  sub_1532B4(&__dst);
  int v314 = operator new(0x20uLL);
  uint64_t v315 = *(const void **)&__p[8];
  *int v314 = *(void *)__p;
  v314[2] = 0LL;
  v314[3] = 0LL;
  v314[1] = 0LL;
  sub_7A5B8(v314 + 1, v315, *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - (void)v315) >> 2);
  uint64_t v316 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = v314;
  if (v316) {
    sub_26C0F4(v316);
  }
  int v317 = (const void *)v866.__r_.__value_.__l.__size_;
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)v866.__r_.__value_.__l.__size_;
  LOWORD(cf) = v866.__r_.__value_.__r.__words[2];
  if (v866.__r_.__value_.__s.__data_[16] && v866.__r_.__value_.__l.__size_) {
    CFRetain((CFTypeRef)v866.__r_.__value_.__l.__size_);
  }
  sub_13850((uint64_t)&v866.__r_.__value_.__l.__size_);
  if (v857) {
    std::__shared_weak_count::__release_weak(v857);
  }
  if (*(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }

  *((_DWORD *)a6 + 6) = 8;
  if (v317)
  {
LABEL_754:
    CFRetain(v317);
    CFMutableDictionaryRef v408 = theDict;
    goto LABEL_756;
  }

LABEL_755:
  CFMutableDictionaryRef v408 = 0LL;
LABEL_756:
  **((void **)a6 + 2) = v408;
  sub_13850((uint64_t)&theDict);
  sub_39FD8(&v852);
LABEL_1026:
  if (v814) {
    sub_FD804(v814);
  }
}

void sub_45654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _BYTE *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t buf)
{
  AudioObjectPropertyAddress buf = (uint64_t)&STACK[0x270];
  sub_8CD60((void ***)&buf);
  sub_13850((uint64_t)&a46);
  sub_13850((uint64_t)&STACK[0x230]);
  sub_32C8C(*(void **)(v49 - 224));
  if (a16) {
    sub_FD804(a16);
  }
  _Unwind_Resume(a1);
}

void sub_46DB4(uint64_t a1, const __CFDictionary **a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!*a2)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  unsigned __int8 v4 = (const __CFBoolean *)sub_475EC(*a2, "session going active");
  if (v4)
  {
    LOWORD(v4) = sub_476EC(v4);
    int v5 = BYTE1(v4);
  }

  else
  {
    int v5 = 0;
  }

  unsigned int v6 = v4 | (v5 << 8);
  if (v6 <= 0x100) {
    LOBYTE(v6) = 0;
  }
  *(_BYTE *)a1 = v6 != 0;
  int v7 = *a2;
  if (!*a2)
  {
    BOOL v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }

  CFStringRef v8 = CFStringCreateWithBytes(0LL, (const UInt8 *)"session active", 14LL, 0x8000100u, 0);
  if (!v8)
  {
    uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }

  int Value = (const __CFBoolean *)CFDictionaryGetValue(v7, v8);
  CFRelease(v8);
  if (Value)
  {
    __int16 v10 = sub_476EC(Value);
    int v11 = HIBYTE(v10);
  }

  else
  {
    int v11 = 0;
    LOBYTE(v10) = 0;
  }

  unsigned int v15 = v10 | (v11 << 8);
  if (v15 <= 0x100) {
    LOBYTE(v15) = 0;
  }
  *(_BYTE *)(a1 + 1) = v15 != 0;
  int v16 = *a2;
  if (!*a2)
  {
    uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
  }

  CFStringRef v17 = CFStringCreateWithBytes(0LL, (const UInt8 *)"session input running", 21LL, 0x8000100u, 0);
  if (!v17)
  {
    uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
  }

  uint64_t v18 = (const __CFBoolean *)CFDictionaryGetValue(v16, v17);
  CFRelease(v17);
  if (v18)
  {
    __int16 v19 = sub_476EC(v18);
    int v20 = HIBYTE(v19);
  }

  else
  {
    int v20 = 0;
    LOBYTE(v19) = 0;
  }

  unsigned int v23 = v19 | (v20 << 8);
  if (v23 <= 0x100) {
    LOBYTE(v23) = 0;
  }
  *(_BYTE *)(a1 + 2) = v23 != 0;
  if (!*a2)
  {
    int v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }

  id v24 = (const __CFBoolean *)sub_47774(*a2, "session output running");
  if (v24)
  {
    LOWORD(v24) = sub_476EC(v24);
    int v25 = BYTE1(v24);
  }

  else
  {
    int v25 = 0;
  }

  unsigned int v26 = v24 | (v25 << 8);
  if (v26 <= 0x100) {
    LOBYTE(v26) = 0;
  }
  *(_BYTE *)(a1 + 3) = v26 != 0;
  int v27 = *a2;
  if (!*a2)
  {
    int v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
  }

  CFStringRef v28 = CFStringCreateWithBytes(0LL, (const UInt8 *)"session app state", 17LL, 0x8000100u, 0);
  if (!v28)
  {
    int v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
  }

  uint64_t v29 = (const __CFNumber *)CFDictionaryGetValue(v27, v28);
  CFRelease(v28);
  if (v29)
  {
    int v30 = sub_36328(v29);
    int v31 = 0;
  }

  else
  {
    int v31 = 0;
  }

  *(_DWORD *)(a1 + 4) = v31;
  if (!*a2)
  {
    int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
  }

  uint64_t v35 = (const __CFArray *)sub_475EC(*a2, "session reporter IDs");
  if (v35)
  {
    sub_47860((uint64_t)&v51, v35);
    uint64_t v50 = 0LL;
    __int128 v49 = 0uLL;
    if (v53)
    {
      id v36 = (void *)v51;
      sub_8D668(&v49, (const void *)v51, *((uint64_t *)&v51 + 1), (uint64_t)(*((void *)&v51 + 1) - v51) >> 3);
      if (v53)
      {
        if (v36) {
          operator delete(v36);
        }
      }
    }
  }

  else
  {
    LOBYTE(v51) = 0;
    char v53 = 0;
    uint64_t v50 = 0LL;
    __int128 v49 = 0uLL;
  }

  __int16 v37 = *(void **)(a1 + 56);
  if (v37)
  {
    operator delete(v37);
    *(void *)(a1 + 56) = 0LL;
    *(void *)(a1 + 64) = 0LL;
    *(void *)(a1 + 72) = 0LL;
  }

  *(_OWORD *)(a1 + 56) = v49;
  *(void *)(a1 + 72) = v50;
  if (!*a2)
  {
    __int16 v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
  }

  int v38 = sub_47774(*a2, "session input VAD UIDs");
  if (v38)
  {
    uint64_t v39 = v38;
    CFRetain(v38);
    CFTypeID v40 = CFGetTypeID(v39);
    if (v40 == CFArrayGetTypeID())
    {
      *(void *)&__int128 v49 = v39;
      BYTE8(v49) = 1;
      CFRetain(v39);
      sub_8D840((uint64_t)&v49);
      sub_47D70((uint64_t *)&v51, v39);
      char v41 = 0;
      goto LABEL_57;
    }

    CFRelease(v39);
  }

  LOBYTE(v49) = 0;
  BYTE8(v49) = 0;
  sub_8D840((uint64_t)&v49);
  uint64_t v39 = 0LL;
  uint64_t v52 = 0LL;
  char v41 = 1;
  __int128 v51 = 0uLL;
LABEL_57:
  sub_48288((uint64_t *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = v51;
  *(void *)(a1 + 24) = v52;
  uint64_t v52 = 0LL;
  __int128 v51 = 0uLL;
  *(void *)&__int128 v49 = &v51;
  sub_8CD60((void ***)&v49);
  if ((v41 & 1) == 0) {
    CFRelease(v39);
  }
  if (!*a2)
  {
    int v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
  }

  uint64_t v42 = sub_482C0(*a2, "session output VAD UIDs");
  if (v42)
  {
    uint64_t v43 = v42;
    CFRetain(v42);
    CFTypeID v44 = CFGetTypeID(v43);
    if (v44 == CFArrayGetTypeID())
    {
      *(void *)&__int128 v49 = v43;
      BYTE8(v49) = 1;
      CFRetain(v43);
      sub_8D840((uint64_t)&v49);
      sub_47D70((uint64_t *)&v51, v43);
      char v45 = 0;
      goto LABEL_65;
    }

    CFRelease(v43);
  }

  LOBYTE(v49) = 0;
  BYTE8(v49) = 0;
  sub_8D840((uint64_t)&v49);
  uint64_t v43 = 0LL;
  uint64_t v52 = 0LL;
  char v45 = 1;
  __int128 v51 = 0uLL;
LABEL_65:
  sub_48288((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = v51;
  *(void *)(a1 + 48) = v52;
  uint64_t v52 = 0LL;
  __int128 v51 = 0uLL;
  *(void *)&__int128 v49 = &v51;
  sub_8CD60((void ***)&v49);
  if ((v45 & 1) == 0) {
    CFRelease(v43);
  }
}

void sub_47568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_475B0(_Unwind_Exception *a1)
{
}

const void *sub_475EC(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0LL;
  }
  return Value;
}

void sub_476AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_476EC(const __CFBoolean *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    LOBYTE(v3) = CFBooleanGetValue(a1) != 0;
    int v4 = 1;
  }

  else
  {
    CFTypeID v5 = CFNumberGetTypeID();
    if (v5 == CFGetTypeID(a1))
    {
      __int16 v3 = sub_83428(a1);
      int v4 = HIBYTE(v3);
    }

    else
    {
      LOBYTE(v3) = 0;
      int v4 = 0;
    }
  }

  return v3 | (v4 << 8);
}

const void *sub_47774(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_4781C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_47860(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    int Count = CFArrayGetCount(a2);
    uint64_t v22 = 0LL;
    unsigned int v23 = 0LL;
    unint64_t v24 = 0LL;
    sub_47A08((void **)&v22, Count);
    if (Count <= 0)
    {
      uint64_t v9 = v22;
      unsigned int v15 = v23;
      unint64_t v8 = v24;
LABEL_26:
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 24) = 1;
    }

    else
    {
      CFIndex v6 = 0LL;
      uint64_t v7 = Count;
      unint64_t v8 = v24;
      uint64_t v9 = v22;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, v6);
        int v11 = sub_47A9C(ValueAtIndex);
        if (!v12) {
          break;
        }
        BOOL v13 = v11;
        uint64_t v14 = v23;
        if ((unint64_t)v23 >= v8)
        {
          uint64_t v16 = (v23 - (char *)v9) >> 3;
          unint64_t v17 = v16 + 1;
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            unint64_t v18 = (unint64_t)sub_7DC90(v18);
          }
          else {
            uint64_t v19 = 0LL;
          }
          int v20 = (const __CFNumber **)(v18 + 8 * v16);
          os_log_s *v20 = v13;
          unsigned int v15 = (char *)(v20 + 1);
          while (v14 != (char *)v9)
          {
            uint64_t v21 = (const __CFNumber *)*((void *)v14 - 1);
            v14 -= 8;
            *--int v20 = v21;
          }

          unint64_t v8 = v18 + 8 * v19;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = v20;
        }

        else
        {
          *(void *)unsigned int v23 = v11;
          unsigned int v15 = v14 + 8;
        }

        unsigned int v23 = v15;
        if (++v6 == v7) {
          goto LABEL_26;
        }
      }

      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (v9) {
        operator delete(v9);
      }
    }
  }

  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

void sub_47A08(void **a1, unint64_t a2)
{
  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_7A87C();
    }
    int64_t v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    size_t v4 = (char *)sub_7DC90(a2);
    CFStringRef v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
    uint64_t v7 = &v4[8 * v6];
    unint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    __int16 v10 = v5;
    if (v9 != *a1)
    {
      __int16 v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }

      while (v9 != v8);
    }

    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8) {
      operator delete(v8);
    }
  }

CFNumberRef sub_47A9C(const __CFNumber *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_16;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int v7 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_24;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int v8 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_26;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int v11 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_39;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_16:
          if (Value) {
            char v12 = LOBYTE(valuePtr);
          }
          else {
            char v12 = 0;
          }
          if (Value != 0 && SLOBYTE(valuePtr) < 0) {
            unint64_t v5 = -256LL;
          }
          else {
            unint64_t v5 = 0LL;
          }
          LOBYTE(v6) = v12;
          return (const __CFNumber *)(v6 | v5);
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int v7 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_24:
          BOOL v13 = v7 == 0;
          unsigned __int8 v14 = LOBYTE(valuePtr);
          uint64_t v15 = SLOWORD(valuePtr);
          goto LABEL_27;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int v8 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_26:
          BOOL v13 = v8 == 0;
          unsigned __int8 v14 = LOBYTE(valuePtr);
          uint64_t v15 = SLODWORD(valuePtr);
LABEL_27:
          unint64_t v16 = v15 & 0xFFFFFFFFFFFFFF00LL | v14;
          if (v13) {
            uint64_t v6 = 0LL;
          }
          else {
            uint64_t v6 = v16;
          }
          goto LABEL_43;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_33:
          BOOL v17 = v10 == 0;
          uint64_t v6 = (uint64_t)*(float *)&valuePtr;
          goto LABEL_40;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int v11 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_39;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_37;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_37:
          BOOL v17 = v9 == 0;
          uint64_t v6 = *(void *)&valuePtr;
          goto LABEL_40;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int v11 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_39:
          BOOL v17 = v11 == 0;
          uint64_t v6 = (uint64_t)valuePtr;
LABEL_40:
          if (v17) {
            uint64_t v6 = 0LL;
          }
LABEL_43:
          unint64_t v5 = v6 & 0xFFFFFFFFFFFFFF00LL;
          break;
        default:
          unint64_t v5 = 0LL;
          LOBYTE(v6) = 0;
          break;
      }

      return (const __CFNumber *)(v6 | v5);
    }

    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1)) {
        return (const __CFNumber *)CFBooleanGetValue(v1);
      }
      else {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_47D70(uint64_t *a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  int Count = CFArrayGetCount((CFArrayRef)a2);
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  sub_47F8C(a1, Count);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, i);
      sub_48100((uint64_t)__p, ValueAtIndex);
      unint64_t v9 = a1[1];
      unint64_t v8 = a1[2];
      if (v9 >= v8)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A87C();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *a1) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555LL) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        v23[4] = a1 + 2;
        if (v14) {
          unint64_t v14 = (unint64_t)sub_8D44C(v14);
        }
        else {
          uint64_t v15 = 0LL;
        }
        unint64_t v16 = v14 + 24 * v11;
        v23[0] = v14;
        v23[1] = v16;
        v23[3] = v14 + 24 * v15;
        __int128 v17 = *(_OWORD *)__p;
        *(void *)(v16 + 16) = v22;
        *(_OWORD *)unint64_t v16 = v17;
        __p[1] = 0LL;
        uint64_t v22 = 0LL;
        __p[0] = 0LL;
        v23[2] = v16 + 24;
        sub_4802C(a1, v23);
        uint64_t v18 = a1[1];
        sub_480A0((uint64_t)v23);
        int v19 = SHIBYTE(v22);
        a1[1] = v18;
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        __int128 v10 = *(_OWORD *)__p;
        *(void *)(v9 + 16) = v22;
        *(_OWORD *)unint64_t v9 = v10;
        a1[1] = v9 + 24;
      }
    }
  }

void sub_47F44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t *sub_47F8C(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_7A87C();
    }
    int v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_8D44C(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    sub_4802C(v2, v5);
    return (uint64_t *)sub_480A0((uint64_t)v5);
  }

  return result;
}

uint64_t sub_4802C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_8D9BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t sub_480A0(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  int v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }

      int v2 = v4;
    }

    while (v4 != v3);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_48100(uint64_t a1, const __CFString *a2)
{
  if (!a2 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  return sub_48188(a1, a2);
}

void sub_48174(_Unwind_Exception *a1)
{
}

void *sub_48188(uint64_t a1, CFStringRef theString)
{
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr) {
    return sub_7D084((void *)a1, CStringPtr);
  }
  CFIndex Length = CFStringGetLength(theString);
  maxBufLeunsigned int n = 0LL;
  v9.locatiounsigned int n = 0LL;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0LL, 0LL, &maxBufLen);
  sub_7D130((void *)a1, maxBufLen, 0);
  else {
    uint64_t v7 = *(UInt8 **)a1;
  }
  v10.locatiounsigned int n = 0LL;
  v10.length = Length;
  return (void *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_4826C(_Unwind_Exception *exception_object)
{
}

void sub_48288(uint64_t *a1)
{
  if (*a1)
  {
    sub_8CDA0(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

const void *sub_482C0(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_48368(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_483AC(uint64_t a1, unsigned __int8 *a2)
{
  size_t v4 = (uint64_t **)(a1 + 144);
  uint64_t v5 = sub_48CDC(*(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t **)(a1 + 144));
  __p[0] = buf;
  sub_8CD60((void ***)__p);
  if (!v5)
  {
    uint64_t v44 = sub_138E8(13);
    id v45 = sub_8C7D4(1, *(void **)v44, *(void *)(v44 + 8));
    int v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    __int16 v47 = v46;
    if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7909;
      _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [inputVAD is NULL]: No input VAD",  buf,  0x12u);
    }

    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No input VAD");
  }

  memset(buf, 0, 24);
  sub_8DC78( (char *)buf,  *((__int128 **)a2 + 4),  *((__int128 **)a2 + 5),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  uint64_t v6 = sub_48CDC(*(uint64_t *)buf, *(uint64_t *)&buf[8], v4);
  __p[0] = buf;
  sub_8CD60((void ***)__p);
  if (!v6)
  {
    uint64_t v49 = sub_138E8(13);
    id v50 = sub_8C7D4(1, *(void **)v49, *(void *)(v49 + 8));
    __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    uint64_t v52 = v51;
    if (v51 && os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7912;
      _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [outputVAD is NULL]: No output VAD",  buf,  0x12u);
    }

    char v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "No output VAD");
  }

  uint64_t v7 = sub_138E8(2);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    id v8 = *(id *)v7;
    if (v8)
    {
      CFRange v9 = (os_log_s *)v8;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        sub_48E98(__p, *(CFStringRef *)(v5 + 592));
        CFRange v10 = cap >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7914;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v10;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found input VAD: %s", buf, 0x1Cu);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v11 = sub_138E8(2);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
  {
    id v12 = *(id *)v11;
    if (v12)
    {
      unint64_t v13 = (os_log_s *)v12;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        sub_48E98(__p, *(CFStringRef *)(v6 + 592));
        unint64_t v14 = cap >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7915;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v14;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found output VAD: %s", buf, 0x1Cu);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v15 = sub_138E8(2);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    id v16 = *(id *)v15;
    if (v16)
    {
      __int128 v17 = (os_log_s *)v16;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        memset(&v54, 0, sizeof(v54));
        std::string::append(&v54, "[ ", 2uLL);
        std::to_string(&v55, (*a2 | a2[1]) != 0);
        uint64_t v18 = std::string::insert(&v55, 0LL, "activating: ", 0xCuLL);
        __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0LL;
        v18->__r_.__value_.__l.__cap_ = 0LL;
        v18->__r_.__value_.__r.__words[0] = 0LL;
        int v20 = std::string::append(&v56, "; ", 2uLL);
        __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        int64_t cap = v20->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v21;
        v20->__r_.__value_.__l.__size_ = 0LL;
        v20->__r_.__value_.__l.__cap_ = 0LL;
        v20->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          uint64_t v22 = __p;
        }
        else {
          uint64_t v22 = (void **)__p[0];
        }
        if (cap >= 0) {
          std::string::size_type v23 = HIBYTE(cap);
        }
        else {
          std::string::size_type v23 = (std::string::size_type)__p[1];
        }
        std::string::append(&v54, (const std::string::value_type *)v22, v23);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        std::to_string(&v55, a2[2]);
        unint64_t v24 = std::string::insert(&v55, 0LL, "input IO: ", 0xAuLL);
        __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0LL;
        v24->__r_.__value_.__l.__cap_ = 0LL;
        v24->__r_.__value_.__r.__words[0] = 0LL;
        unsigned int v26 = std::string::append(&v56, "; ", 2uLL);
        __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        int64_t cap = v26->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v27;
        v26->__r_.__value_.__l.__size_ = 0LL;
        v26->__r_.__value_.__l.__cap_ = 0LL;
        v26->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          CFStringRef v28 = __p;
        }
        else {
          CFStringRef v28 = (void **)__p[0];
        }
        if (cap >= 0) {
          std::string::size_type v29 = HIBYTE(cap);
        }
        else {
          std::string::size_type v29 = (std::string::size_type)__p[1];
        }
        std::string::append(&v54, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        std::to_string(&v55, a2[3]);
        int v30 = std::string::insert(&v55, 0LL, "output IO: ", 0xBuLL);
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        int v32 = std::string::append(&v56, "; ", 2uLL);
        __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        int64_t cap = v32->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v33;
        v32->__r_.__value_.__l.__size_ = 0LL;
        v32->__r_.__value_.__l.__cap_ = 0LL;
        v32->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          int v34 = __p;
        }
        else {
          int v34 = (void **)__p[0];
        }
        if (cap >= 0) {
          std::string::size_type v35 = HIBYTE(cap);
        }
        else {
          std::string::size_type v35 = (std::string::size_type)__p[1];
        }
        std::string::append(&v54, (const std::string::value_type *)v34, v35);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        std::string::append(&v54, "IDs: { ", 7uLL);
        __p[0] = 0LL;
        __p[1] = 0LL;
        int64_t cap = 0LL;
        sub_8D668( __p,  *((const void **)a2 + 7),  *((void *)a2 + 8),  (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
        id v36 = __p[0];
        if (__p[1] != __p[0])
        {
          unint64_t v37 = 0LL;
          unint64_t v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v39 = v38 - 1;
          if (v38 <= 1) {
            int64_t v40 = 1LL;
          }
          else {
            int64_t v40 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          }
          do
          {
            std::to_string(&v56, v36[v37]);
            if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              char v41 = &v56;
            }
            else {
              char v41 = (std::string *)v56.__r_.__value_.__r.__words[0];
            }
            if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type size = v56.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type size = v56.__r_.__value_.__l.__size_;
            }
            std::string::append(&v54, (const std::string::value_type *)v41, size);
            if (v37 < v39) {
              std::string::append(&v54, ", ", 2uLL);
            }
            ++v37;
          }

          while (v40 != v37);
        }

        std::string::append(&v54, " } ]", 4uLL);
        if (v36) {
          operator delete(v36);
        }
        uint64_t v43 = &v54;
        if ((v54.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7916;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v43;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session info: %s", buf, 0x1Cu);
      }
    }
  }

  sub_49028(*(void *)(v5 + 1008), a2);
  if (v5 != v6) {
    sub_49028(*(void *)(v6 + 1008), a2);
  }
}

void sub_48BBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, char a35)
{
}

uint64_t sub_48CDC(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (a1 == a2)
  {
    uint64_t v5 = a3[1];
    return sub_72A04(1986291046, 0, *a3, v5);
  }

  else
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3[1];
    while (1)
    {
      uint64_t v6 = *a3;
      if (*(char *)(v4 + 23) < 0)
      {
        sub_24054(__dst, *(void **)v4, *(void *)(v4 + 8));
      }

      else
      {
        *(_OWORD *)__int128 __dst = *(_OWORD *)v4;
        uint64_t v20 = *(void *)(v4 + 16);
      }

      char v7 = HIBYTE(v20);
      if (v6 != v5)
      {
        if (v20 >= 0) {
          id v8 = (void *)HIBYTE(v20);
        }
        else {
          id v8 = __dst[1];
        }
        if (v20 >= 0) {
          CFRange v9 = __dst;
        }
        else {
          CFRange v9 = (void **)__dst[0];
        }
        do
        {
          if (*v6)
          {
            sub_48E98(&__p, *(CFStringRef *)(*v6 + 592));
            if ((v23 & 0x80u) == 0) {
              size_t v10 = v23;
            }
            else {
              size_t v10 = __n;
            }
            if ((void *)v10 == v8)
            {
              if ((v23 & 0x80) != 0)
              {
                uint64_t v15 = __p;
                int v16 = memcmp(__p, v9, __n);
                operator delete(v15);
                if (!v16) {
                  goto LABEL_33;
                }
              }

              else
              {
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v11 = 0LL;
                do
                {
                  int v12 = *((unsigned __int8 *)&__p + v11);
                  int v13 = *((unsigned __int8 *)v9 + v11);
                }

                while (v12 == v13 && v23 - 1LL != v11++);
                if (v12 == v13) {
                  goto LABEL_33;
                }
              }
            }

            else if ((v23 & 0x80) != 0)
            {
              operator delete(__p);
            }
          }

          ++v6;
        }

        while (v6 != v5);
      }

      uint64_t v6 = v5;
LABEL_33:
      if (v7 < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v5 = a3[1];
      if (v6 != v5)
      {
        uint64_t result = *v6;
        if (*v6) {
          break;
        }
      }

      v4 += 24LL;
      if (v4 == a2) {
        return sub_72A04(1986291046, 0, *a3, v5);
      }
    }
  }

  return result;
}

void sub_48E80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (v9 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_48E98(void *result, CFStringRef theString)
{
  int v2 = result;
  if (theString
    && (CFIndex v6 = 0LL,
        v7.length = CFStringGetLength(theString),
        v7.locatiounsigned int n = 0LL,
        uint64_t result = (void *)CFStringGetBytes(theString, v7, 0x8000100u, 0, 0, 0LL, 0x7FFFFFFFLL, &v6),
        (_DWORD)v6))
  {
    LODWORD(v6) = v6 + 1;
    __chkstk_darwin(result);
    uint64_t v5 = (UInt8 *)&v6 - ((v4 + 15) & 0x1FFFFFFF0LL);
    sub_48FA0(theString, v5, &v6);
    return sub_7D084(v2, (char *)v5);
  }

  else
  {
    *int v2 = 0LL;
    v2[1] = 0LL;
    v2[2] = 0LL;
  }

  return result;
}

CFStringRef sub_48FA0(const __CFString *result, UInt8 *a2, _DWORD *a3)
{
  if (*a3)
  {
    uint64_t v5 = result;
    usedBufLeunsigned int n = 0LL;
    v8.length = CFStringGetLength(result);
    v8.locatiounsigned int n = 0LL;
    uint64_t result = (const __CFString *)CFStringGetBytes(v5, v8, 0x8000100u, 0, 0, a2, (*a3 - 1), &usedBufLen);
    int v6 = usedBufLen;
    a2[usedBufLen] = 0;
    *a3 = v6 + 1;
  }

  return result;
}

void sub_49028(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v22 = 0LL;
  unsigned __int8 v23 = 0LL;
  uint64_t v24 = 0LL;
  sub_8D668( &v22,  *(const void **)(a1 + 144),  *(void *)(a1 + 152),  (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
  __int128 v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  sub_8D668( &v19,  *((const void **)a2 + 7),  *((void *)a2 + 8),  (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  uint64_t v5 = (char *)v22;
  uint64_t v4 = v23;
  std::__sort<std::__less<long long,long long> &,long long *>(v22, v23, &__p);
  CFRange v7 = (char *)v19;
  int v6 = v20;
  std::__sort<std::__less<long long,long long> &,long long *>(v19, v20, &__p);
  if (!(*a2 | a2[1]))
  {
    std::string __p = 0LL;
    __int128 v17 = 0LL;
    uint64_t v18 = 0LL;
    __int128 v27 = v5;
    __src = 0LL;
    unsigned int v26 = v7;
    if (v5 == v4) {
      goto LABEL_27;
    }
    while (1)
    {
      if (v7 == v6)
      {
        uint64_t v15 = (char *)__src;
        do
        {
          uint64_t v15 = sub_492C8((uint64_t)&__p, v15, v5) + 8;
          v5 += 8;
        }

        while (v5 != v4);
        goto LABEL_27;
      }

      if (*(void *)v5 >= *(void *)v7)
      {
        int v13 = &v26;
        if (*(void *)v7 < *(void *)v5) {
          goto LABEL_19;
        }
        p_src = (void **)&v27;
      }

      else
      {
        int v12 = sub_492C8((uint64_t)&__p, (char *)__src, v5);
        int v13 = &v27;
        p_src = &__src;
        CFRange v7 = v5;
        uint64_t v5 = v12;
      }

      *p_src = v5 + 8;
LABEL_19:
      os_log_s *v13 = v7 + 8;
      uint64_t v5 = v27;
      if (v27 == v4) {
        goto LABEL_27;
      }
      CFRange v7 = v26;
    }
  }

  std::string __p = 0LL;
  __int128 v17 = 0LL;
  uint64_t v18 = 0LL;
  if (v5 == v4)
  {
    CFRange v8 = 0LL;
LABEL_26:
    while (v7 != v6)
    {
      CFRange v8 = sub_492C8((uint64_t)&__p, v8, v7) + 8;
      v7 += 8;
    }
  }

  else
  {
    CFRange v8 = 0LL;
    while (v7 != v6)
    {
      uint64_t v9 = *(void *)v7;
      uint64_t v10 = *(void *)v5;
      if (*(void *)v7 >= *(void *)v5)
      {
        uint64_t v11 = sub_492C8((uint64_t)&__p, v8, v5);
        v7 += 8 * (v10 >= v9);
        v5 += 8;
      }

      else
      {
        uint64_t v11 = sub_492C8((uint64_t)&__p, v8, v7);
        v7 += 8;
      }

      CFRange v8 = v11 + 8;
      if (v5 == v4) {
        goto LABEL_26;
      }
    }

    do
    {
      CFRange v8 = sub_492C8((uint64_t)&__p, v8, v5) + 8;
      v5 += 8;
    }

    while (v5 != v4);
  }

void sub_49270( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char *sub_492C8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v8)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_7A87C();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v8 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v31 = v7;
    if (v18)
    {
      uint64_t v20 = (char *)sub_7DC90(v18);
    }

    else
    {
      uint64_t v20 = 0LL;
      uint64_t v19 = 0LL;
    }

    uint64_t v21 = &v20[8 * v16];
    std::string __p = v20;
    CFStringRef v28 = v21;
    int v30 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v23 = 1LL;
        }
        else {
          unint64_t v23 = v15 >> 2;
        }
        uint64_t v24 = (char *)sub_7DC90(v23);
        uint64_t v21 = &v24[8 * (v23 >> 2)];
        std::string __p = v24;
        CFStringRef v28 = v21;
        int v30 = &v24[8 * v25];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v21 -= 8 * (v22 >> 1);
        CFStringRef v28 = v21;
      }
    }

    *(void *)uint64_t v21 = *(void *)v3;
    std::string::size_type v29 = v21 + 8;
    uint64_t v4 = sub_E23C0((void **)a1, (uint64_t)&__p, v4);
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_494A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_494B8(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 720) == *(void *)(a1 + 712)) {
    return;
  }
  uint64_t v4 = a1 + 688;
  BOOL v5 = 1;
  uint64_t v6 = sub_45C8(v4, 1, 0);
  uint64_t v7 = *(void *)(v6 + 192);
  if (!*(_BYTE *)(v7 + 448) && !*(void *)(v7 + 584)) {
    BOOL v5 = *(void *)(v7 + 672) != 0LL;
  }
  if (!v5) {
    return;
  }
  if (*(_DWORD *)(v6 + 8) != 1819304813) {
    return;
  }
  uint64_t v8 = *(void *)(sub_45C8(v4, 1, 0) + 192);
  if (!*(_BYTE *)(v8 + 796)) {
    return;
  }
  uint64_t v9 = *(void *)(v8 + 736);
  if (qword_4919C8 != -1) {
    dispatch_once(&qword_4919C8, &stru_477C78);
  }
  if (off_4919E8)
  {
    int v10 = off_4919E8(v9, a2);
    if (!v10)
    {
      uint64_t v11 = (os_log_t *)sub_138E8(16);
      os_log_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = (uint64_t)(a2[1] - *a2) >> 3;
        int v20 = 136315906;
        uint64_t v21 = "AggregateDevice_Common.cpp";
        __int16 v22 = 1024;
        int v23 = 1560;
        __int16 v24 = 2048;
        uint64_t v25 = v9;
        __int16 v26 = 2048;
        uint64_t v27 = v13;
        unint64_t v14 = "%25s:%-5d PlaybackDosimetry: updated reporter IDs for session %llu, # of IDs: %lu";
        uint64_t v15 = v12;
        os_log_type_t v16 = OS_LOG_TYPE_DEBUG;
        uint32_t v17 = 38;
LABEL_19:
        _os_log_impl(&dword_0, v15, v16, v14, (uint8_t *)&v20, v17);
        return;
      }

      return;
    }
  }

  else
  {
    int v10 = 560033897;
  }

  unint64_t v18 = (os_log_t *)sub_138E8(16);
  os_log_t v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136315906;
    uint64_t v21 = "AggregateDevice_Common.cpp";
    __int16 v22 = 1024;
    int v23 = 1558;
    __int16 v24 = 2048;
    uint64_t v25 = v9;
    __int16 v26 = 1024;
    LODWORD(v27) = v10;
    unint64_t v14 = "%25s:%-5d PlaybackDosimetry: unable to update reporter IDs for session:%llu, err: %d";
    uint64_t v15 = v19;
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    uint32_t v17 = 34;
    goto LABEL_19;
  }

void sub_496F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 168);
  if (qword_49D060 != -1) {
    dispatch_once(&qword_49D060, &stru_475088);
  }
  if (off_49D0A0)
  {
    int v5 = off_49D0A0(v4, a2);
    if (!v5)
    {
      if (a1 + 144 != a2) {
        sub_8CF90( (char *)(a1 + 144),  *(char **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      }
      uint64_t v6 = (os_log_t *)sub_138E8(16);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v27 = "AggregateDevice.h";
        __int16 v28 = 1024;
        int v29 = 667;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current reporterIDs:", buf, 0x12u);
      }

      for (CFIndex i = *(void ****)(a1 + 144); i != *(void ****)(a1 + 152); ++i)
      {
        uint64_t v9 = (os_log_t *)sub_138E8(16);
        int v10 = *v9;
        if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v11 = *i;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v27 = "AggregateDevice.h";
          __int16 v28 = 1024;
          int v29 = 671;
          __int16 v30 = 2048;
          uint64_t v31 = v11;
          _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d reporterID: %ld", buf, 0x1Cu);
        }
      }

      goto LABEL_20;
    }
  }

  else
  {
    int v5 = -1;
  }

  os_log_t v12 = (os_log_t *)sub_138E8(16);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v27 = "AggregateDevice.h";
    __int16 v28 = 1024;
    int v29 = 676;
    __int16 v30 = 1024;
    LODWORD(v31) = v5;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d updating reporter IDs", buf, 0x18u);
  }

void sub_49A70(_DWORD *a1, uint64_t a2, const __CFDictionary **a3, char a4, int a5)
{
  id v898 = (void **)a2;
  v905 = a1;
  uint64_t v903 = a3;
  if (!*a3)
  {
    uint64_t v847 = sub_138E8(13);
    id v848 = sub_8C7D4(1, *(void **)v847, *(void *)(v847 + 8));
    id v849 = (os_log_s *)objc_claimAutoreleasedReturnValue(v848);
    v850 = v849;
    if (v849 && os_log_type_enabled(v849, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v965 = 136315394;
      *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v965[12] = 1024;
      *(_DWORD *)&v965[14] = 2586;
      _os_log_impl(&dword_0, v850, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v965, 0x12u);
    }

    exceptiounsigned int n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((a4 & 1) != 0)
  {
    BOOL v6 = 1;
  }

  else
  {
    uint64_t v7 = (uint64_t *)sub_138E8(2);
    uint64_t v8 = sub_138E8(34);
    char v9 = 0;
    uint64_t v10 = 0LL;
    *(void *)v965 = 0x100000002LL;
    uint64_t v11 = v7[1];
    do
    {
      uint64_t v12 = *(int *)&v965[4 * v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0))
      {
        if ((v11 & v12) == 0) {
          uint64_t v7 = (uint64_t *)v8;
        }
        if ((v7[1] & 1) == 0) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }

      char v9 = 1;
      uint64_t v10 = 1LL;
    }

    while ((v13 & 1) == 0);
    if ((v11 & 1) == 0)
    {
LABEL_8:
      uint64_t v14 = 0LL;
      goto LABEL_13;
    }

LABEL_26:
  unsigned int v893 = sub_51728(v903, *((_DWORD *)v898[14] + 36), *((unsigned __int8 *)v898[14] + 384));
  int v953 = 0;
  if ((sub_51A88(*v903, @"expanse session", &v953) & v899) == 1)
  {
    uint64_t v25 = sub_138E8(2);
    uint64_t v26 = sub_138E8(34);
    char v27 = 0;
    uint64_t v28 = 0LL;
    *(void *)v965 = 0x100000002LL;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *(int *)&v965[4 * v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1LL;
      if ((v31 & 1) != 0) {
        goto LABEL_33;
      }
    }

    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_33:
    id v32 = *(id *)v25;
    __int128 v33 = v32;
    if (v32)
    {
      int v34 = (os_log_s *)v32;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2602;
        *(_WORD *)&v965[18] = 1024;
        *(_DWORD *)&v965[20] = v953;
        _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Colistening: %u", v965, 0x18u);
      }
    }
  }

  int v949 = 0;
  char v950 = 0;
  __int128 v951 = 0u;
  __int128 v952 = 0u;
  if (a5 && (v893 & 1) == 0)
  {
    std::string::size_type v35 = 0LL;
    if (!*((_DWORD *)v898 + 100))
    {
      id v36 = 0LL;
      unint64_t v37 = 0LL;
      unint64_t v38 = 0LL;
      goto LABEL_57;
    }

    id v36 = 0LL;
    unint64_t v37 = 0LL;
    unint64_t v38 = 0LL;
    if (!v953) {
      goto LABEL_57;
    }
  }

  id v39 = *(id *)sub_138E8(2);
  int64_t v40 = v39;
  if (v39)
  {
    char v41 = (os_log_s *)v39;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      sub_22C764((std::string *)v963, (int *)v898 + 100);
      uint64_t v42 = v963[23] >= 0 ? v963 : *(_BYTE **)v963;
      *(_DWORD *)v965 = 136315650;
      *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v965[12] = 1024;
      *(_DWORD *)&v965[14] = 2610;
      *(_WORD *)&v965[18] = 2080;
      *(void *)&v965[20] = v42;
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using cached colistening state %s", v965, 0x1Cu);
      if ((v963[23] & 0x80000000) != 0) {
        operator delete(*(void **)v963);
      }
    }
  }

  int v949 = *((_DWORD *)v898 + 100);
  char v950 = *((_BYTE *)v898 + 404);
  unint64_t v38 = v898[51];
  unint64_t v37 = v898[52];
  if (v37)
  {
    uint64_t v43 = v37 + 2;
    do
      unint64_t v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }

  *(void *)&__int128 v951 = v38;
  *((void *)&v951 + 1) = v37;
  id v36 = v898[53];
  std::string::size_type v35 = v898[54];
  if (v35)
  {
    id v45 = v35 + 2;
    do
      unint64_t v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }

  *(void *)&__int128 v952 = v36;
  *((void *)&v952 + 1) = v35;
LABEL_57:
  int v48 = v898[28];
  __int16 v47 = v898[29];
  uint64_t v49 = (char *)v898[27];
  char v50 = *v49;
  sub_E5784(v965, (uint64_t)(v49 + 8));
  __int128 v51 = v905;
  *(void *)v905 = v48;
  *((void *)v51 + 1) = v47;
  *((void *)v51 + 3) = 0LL;
  uint64_t v883 = (uint64_t *)(v51 + 6);
  *((void *)v51 + 2) = v51 + 6;
  v896 = (uint64_t **)(v51 + 4);
  *((void *)v51 + 6) = 0LL;
  *((void *)v51 + 4) = 0LL;
  *((void *)v51 + 5) = v51 + 12;
  id v901 = (uint64_t **)(v51 + 10);
  v902 = (uint64_t *)(v51 + 12);
  *((void *)v51 + 10) = 0LL;
  *((void *)v51 + 9) = 0LL;
  *((void *)v51 + 12) = 0LL;
  *((void *)v51 + 7) = 0LL;
  *((void *)v51 + 8) = v51 + 18;
  uint64_t v888 = v51 + 24;
  *((void *)v51 + 11) = v51 + 24;
  uint64_t v894 = (uint64_t **)(v51 + 22);
  *((void *)v51 + 13) = 0LL;
  *((void *)v51 + 15) = 0LL;
  v887 = v51 + 30;
  *((void *)v51 + 14) = v51 + 30;
  uint64_t v900 = (uint64_t *)(v51 + 28);
  *((void *)v51 + 16) = 0LL;
  *((_BYTE *)v51 + 136) = 0;
  *((_BYTE *)v51 + 140) = 0;
  v51[36] = 1668248944;
  int v882 = 1852797029;
  int v889 = 1852796517;
  v51[38] = 1852796517;
  *((void *)v51 + 20) = 0LL;
  *((void *)v51 + 21) = 0LL;
  *((void *)v51 + 22) = 0LL;
  *((void *)v51 + 23) = 0x756E64656175746FLL;
  *((_OWORD *)v51 + 12) = 0u;
  *((_OWORD *)v51 + 17) = 0u;
  *((_OWORD *)v51 + 18) = 0u;
  *((_OWORD *)v51 + 19) = 0u;
  *((_OWORD *)v51 + 13) = 0u;
  *((_OWORD *)v51 + 14) = 0u;
  *((_OWORD *)v51 + 15) = 0u;
  *((_OWORD *)v51 + 16) = 0u;
  *((_OWORD *)v51 + 21) = 0u;
  *((void *)v51 + 44) = 0LL;
  *((_OWORD *)v51 + 20) = 0u;
  v51[68] = 1065353216;
  *(_OWORD *)(v51 + 70) = 0u;
  id v884 = v51 + 70;
  v885 = v51 + 80;
  v886 = (void **)(v51 + 48);
  *(_OWORD *)(v51 + 74) = 0u;
  v51[78] = 1065353216;
  *((_OWORD *)v51 + 21) = 0u;
  *((_OWORD *)v51 + 20) = 0u;
  v51[88] = 1065353216;
  *((_BYTE *)v51 + 360) = 0;
  *((_BYTE *)v51 + 364) = 0;
  *((_BYTE *)v51 + 376) = 0;
  *((_BYTE *)v51 + 400) = 0;
  v51[92] = 0;
  *((_BYTE *)v51 + 408) = v50;
  *((void *)v51 + 52) = v51 + 106;
  *((void *)v51 + 53) = 0LL;
  *((void *)v51 + 56) = 0LL;
  *((void *)v51 + 57) = 0LL;
  *((void *)v51 + 54) = 0LL;
  *((void *)v51 + 55) = v51 + 112;
  *((void *)v51 + 58) = v51 + 118;
  *((void *)v51 + 59) = 0LL;
  *(void *)&__int128 v904 = v51 + 118;
  *((void *)v51 + 62) = 0LL;
  *((void *)v51 + 63) = 0LL;
  *((void *)v51 + 60) = 0LL;
  *((void *)v51 + 61) = v51 + 124;
  *((void *)v51 + 64) = v51 + 130;
  *((void *)v51 + 65) = 0LL;
  uint64_t v897 = v51 + 40;
  *((void *)v51 + 66) = 0LL;
  uint64_t v891 = v51 + 134;
  sub_E5784((_BYTE *)v51 + 536, (uint64_t)v965);
  *((_BYTE *)v51 + 588) = 0;
  *((_BYTE *)v51 + 592) = 0;
  *((_BYTE *)v51 + 608) = 0;
  *((_BYTE *)v51 + 616) = 0;
  *((_BYTE *)v51 + 620) = 0;
  *((void *)v51 + 78) = 0LL;
  *((void *)v51 + 70) = 0LL;
  *((void *)v51 + 72) = 0LL;
  *((void *)v51 + 71) = 0LL;
  *((_BYTE *)v51 + 584) = 0;
  v51[158] = v949;
  *((_BYTE *)v51 + 636) = v950;
  *((void *)v51 + 80) = v38;
  *((void *)v51 + 81) = v37;
  if (v37)
  {
    uint64_t v52 = v37 + 2;
    do
      unint64_t v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }

  std::string v54 = v905;
  *((void *)v905 + 82) = v36;
  *((void *)v54 + 83) = v35;
  if (v35)
  {
    std::string v55 = v35 + 2;
    do
      unint64_t v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }

  uint64_t v57 = v905;
  *((_BYTE *)v905 + 672) = 0;
  *((_BYTE *)v57 + 696) = 0;
  *((_BYTE *)v57 + 704) = 0;
  *((_BYTE *)v57 + 728) = 0;
  *((_WORD *)v57 + 368) = 0;
  v57[185] = 0;
  if (v965[16]) {
    sub_13850((uint64_t)v965);
  }
  *((_BYTE *)v905 + 368) = v893;
  if (CFDictionaryContainsKey(*v903, @"enabled sub-ports"))
  {
    uint64_t v58 = sub_138E8(2);
    uint64_t v59 = sub_138E8(34);
    char v60 = 0;
    uint64_t v61 = 0LL;
    *(void *)v965 = 0x100000002LL;
    uint64_t v62 = *(void *)(v58 + 8);
    while (1)
    {
      uint64_t v63 = *(int *)&v965[4 * v61];
      char v64 = v60;
      if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
        break;
      }
      char v60 = 1;
      uint64_t v61 = 1LL;
      if ((v64 & 1) != 0) {
        goto LABEL_72;
      }
    }

    if ((v62 & v63) == 0) {
      uint64_t v58 = v59;
    }
LABEL_72:
    id v65 = *(id *)v58;
    std::chrono::system_clock::time_point v66 = v65;
    if (v65)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = (os_log_s *)v65;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v965 = 136315394;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2627;
        _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d kVirtualAudioPlugInRouteConfigurationEnabledSubPortsKey is no longer supported. Please use kVirtualA udioPlugInRouteConfigurationPreferredSubPortsKey",  v965,  0x12u);
      }
    }
  }

  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v948 = 257;
  sub_51AEC(v903, @"preferred sub-ports", (uint64_t)&Mutable);
  sub_51A88(*v903, @"mode", &v946);
  id v895 = (uint64_t **)(v897 + 64);
  if (!Mutable) {
    goto LABEL_128;
  }
  int v68 = v946;
  if (v946 > 1936749156)
  {
    if (v946 == 1936749157) {
      goto LABEL_129;
    }
    int v69 = 1937007472;
  }

  else
  {
    if (v946 == 1835229549) {
      goto LABEL_129;
    }
    int v69 = 1936745328;
  }

  if (v946 != v69)
  {
    CFIndex Count = CFDictionaryGetCount(Mutable);
    uint64_t v71 = Count;
    __chkstk_darwin(Count);
    uint64_t v73 = (const void **)((char *)&v881 - ((v72 + 15) & 0xFFFFFFFF0LL));
    CFDictionaryGetKeysAndValues(Mutable, v73, 0LL);
    *(void *)&__int128 v881 = &v881;
    if (v899)
    {
      uint64_t v75 = sub_138E8(2);
      uint64_t v76 = sub_138E8(34);
      char v77 = 0;
      uint64_t v78 = 0LL;
      *(void *)v965 = 0x100000002LL;
      uint64_t v79 = *(void *)(v75 + 8);
      while (1)
      {
        uint64_t v80 = *(int *)&v965[4 * v78];
        char v81 = v77;
        if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
          break;
        }
        char v77 = 1;
        uint64_t v78 = 1LL;
        if ((v81 & 1) != 0) {
          goto LABEL_92;
        }
      }

      if ((v79 & v80) == 0) {
        uint64_t v75 = v76;
      }
LABEL_92:
      id v82 = *(id *)v75;
      uint64_t v83 = v82;
      if (v82)
      {
        uint64_t v84 = (os_log_s *)v82;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v965 = 136315394;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2643;
          _os_log_impl(&dword_0, v84, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Preferred Sub-Ports:", v965, 0x12u);
        }
      }
    }

    if (v71)
    {
      uint64_t v85 = 0LL;
      *(void *)&__int128 v74 = 136315906LL;
      __int128 v890 = v74;
      while (1)
      {
        CFTypeID v86 = CFGetTypeID(v73[v85]);
        if (v86 != CFNumberGetTypeID())
        {
          uint64_t v819 = sub_138E8(13);
          id v820 = sub_8C7D4(1, *(void **)v819, *(void *)(v819 + 8));
          v821 = (void *)objc_claimAutoreleasedReturnValue(v820);
          char v822 = v821;
          if (v821)
          {
            id v823 = v821;
            if (os_log_type_enabled(v823, OS_LOG_TYPE_ERROR))
            {
              int v824 = CFGetTypeID(v73[v85]);
              *(_DWORD *)v965 = 136315650;
              *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v965[12] = 1024;
              *(_DWORD *)&v965[14] = 2648;
              *(_WORD *)&v965[18] = 1024;
              *(_DWORD *)&v965[20] = v824;
              _os_log_impl( &dword_0,  v823,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Unknown type (%u) used as key in preferred sub-ports dictionary (expected CFNumber).",  v965,  0x18u);
            }
          }

          uint64_t v825 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v825 = &off_4865A0;
          v825[2] = 1852797029;
        }

        int Value = CFDictionaryGetValue(Mutable, v73[v85]);
        uint64_t v88 = Value;
        if (!Value) {
          break;
        }
        CFTypeID v89 = CFGetTypeID(Value);
        if (v89 != CFArrayGetTypeID())
        {
          uint64_t v826 = sub_138E8(13);
          id v827 = sub_8C7D4(1, *(void **)v826, *(void *)(v826 + 8));
          char v828 = (void *)objc_claimAutoreleasedReturnValue(v827);
          if (v828)
          {
            BOOL v811 = v828;
            if (os_log_type_enabled(v811, OS_LOG_TYPE_ERROR))
            {
              int v857 = CFGetTypeID(v88);
              *(_DWORD *)v965 = 136315650;
              *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v965[12] = 1024;
              *(_DWORD *)&v965[14] = 2653;
              *(_WORD *)&v965[18] = 1024;
              *(_DWORD *)&v965[20] = v857;
              _os_log_impl( &dword_0,  v811,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Unknown type (%u) used as key in preferred sub-ports dictionary (expected CFArray).",  v965,  0x18u);
            }
          }

          else
          {
            BOOL v811 = 0LL;
          }

          goto LABEL_1357;
        }

        uint64_t v90 = (const __CFNumber *)v73[v85];
        *(void *)v964 = v90;
        v964[8] = 0;
        *(void *)&__int128 v943 = v88;
        WORD4(v943) = 0;
        uint64_t v91 = (uint64_t)v898[16];
        *(_DWORD *)v965 = 0;
        if (v90)
        {
          CFNumberGetValue(v90, kCFNumberSInt32Type, v965);
          int v92 = *(_DWORD *)v965;
        }

        else
        {
          int v92 = 0;
        }

        unint64_t v93 = sub_6A92C(v91, v92);
        v962.__r_.__value_.__r.__words[0] = v93;
        if (!v93)
        {
          uint64_t v812 = sub_138E8(13);
          id v813 = sub_8C7D4(1, *(void **)v812, *(void *)(v812 + 8));
          id v814 = (void *)objc_claimAutoreleasedReturnValue(v813);
          v815 = v814;
          if (v814)
          {
            uint64_t v816 = v814;
            if (os_log_type_enabled(v816, OS_LOG_TYPE_ERROR))
            {
              int v817 = 0;
              *(_DWORD *)id v963 = 0;
              if (*(void *)v964)
              {
                CFNumberGetValue(*(CFNumberRef *)v964, kCFNumberSInt32Type, v963);
                int v817 = *(_DWORD *)v963;
              }

              *(_DWORD *)v965 = 136315650;
              *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v965[12] = 1024;
              *(_DWORD *)&v965[14] = 2660;
              *(_WORD *)&v965[18] = 1024;
              *(_DWORD *)&v965[20] = v817;
              _os_log_impl( &dword_0,  v816,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Requested port ID (%u) to enable does not exist.",  v965,  0x18u);
            }
          }

          v818 = __cxa_allocate_exception(0x10uLL);
          *(void *)v818 = &off_4865A0;
          CFTypeRef v818[2] = 1852797029;
        }

        if (v899)
        {
          uint64_t v94 = sub_138E8(2);
          uint64_t v95 = sub_138E8(34);
          char v96 = 0;
          uint64_t v97 = 0LL;
          *(void *)v965 = 0x100000002LL;
          uint64_t v98 = *(void *)(v94 + 8);
          while (1)
          {
            uint64_t v99 = *(int *)&v965[4 * v97];
            char v100 = v96;
            if (((v98 & v99) != 0) != ((*(void *)(v95 + 8) & v99) != 0)) {
              break;
            }
            char v96 = 1;
            uint64_t v97 = 1LL;
            if ((v100 & 1) != 0) {
              goto LABEL_113;
            }
          }

          if ((v98 & v99) == 0) {
            uint64_t v94 = v95;
          }
LABEL_113:
          id v101 = *(id *)v94;
          id v102 = v101;
          if (v101)
          {
            int v103 = (os_log_s *)v101;
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v104 = v943;
              (*(void (**)(_BYTE *__return_ptr, unint64_t))(*(void *)v93 + 96LL))(v963, v93);
              uint64_t v105 = v963;
              if (v963[23] < 0) {
                uint64_t v105 = *(_BYTE **)v963;
              }
              *(_DWORD *)v965 = v890;
              *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v965[12] = 1024;
              *(_DWORD *)&v965[14] = 2662;
              *(_WORD *)&v965[18] = 2112;
              *(void *)&v965[20] = v104;
              *(_WORD *)&v965[28] = 2080;
              *(void *)&v965[30] = v105;
              _os_log_impl( &dword_0,  v103,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d     - VirtualAudioSubPortIDs %@ on Port %s.",  v965,  0x26u);
              if ((v963[23] & 0x80000000) != 0) {
                operator delete(*(void **)v963);
              }
            }
          }
        }

        memset(v965, 0, 24);
        if ((void)v943 && (int v106 = CFArrayGetCount((CFArrayRef)v943)) != 0)
        {
          for (unsigned int i = 0; i != v106; ++i)
          {
            sub_1A0E0C((CFArrayRef *)&v943, i, v963);
            sub_8598C((uint64_t)v965, (__int32 *)v963);
          }

          char v108 = *(int **)v965;
        }

        else
        {
          char v108 = 0LL;
        }

        int v109 = *v108;
        AudioObjectPropertyAddress v110 = sub_52FB8(v895, v93, &v962);
        *((_BYTE *)v110 + 48) = 0;
        *((_DWORD *)v110 + 10) = v109;
        *((_DWORD *)v110 + 11) = 0;
        operator delete(v108);
        sub_13818((uint64_t)&v943);
        sub_1348C((uint64_t)v964);
        if (++v85 == v71) {
          goto LABEL_128;
        }
      }

      uint64_t v808 = sub_138E8(13);
      int v882 = 2003329396;
      id v809 = sub_8C7D4(1, *(void **)v808, *(void *)(v808 + 8));
      unsigned int v810 = (os_log_s *)objc_claimAutoreleasedReturnValue(v809);
      BOOL v811 = v810;
      if (v810 && os_log_type_enabled(v810, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v965 = 136315394;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2650;
        _os_log_impl( &dword_0,  v811,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Dictionary claimed to have a key, but failed to retrieve it.",  v965,  0x12u);
      }

    *a5 = 0;
    return result;
  }

  if (v14 != 1986290211)
  {
    uint64_t v15 = 1986817377;
    goto LABEL_23;
  }

  char v13 = *a5;
  if (v13 != (*(unsigned int (**)(uint64_t, int *, void, void))(*(void *)a1 + 32LL))(a1, a2, 0LL, 0LL))
  {
    char v27 = (os_log_t *)sub_138E8(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v35 = *(void *)a2;
      id v36 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v35);
      uint64_t v29 = v38;
      uint64_t v30 = (void **)__p[0];
      char v31 = *a5;
      id v32 = (*(uint64_t (**)(uint64_t, int *, void, void))(*(void *)a1 + 32LL))(a1, a2, 0LL, 0LL);
      __int128 v33 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int64_t v40 = "SoftwareOnlyVolumeControl.cpp";
      if (v29 < 0) {
        __int128 v33 = v30;
      }
      char v41 = 1024;
      uint64_t v42 = 226;
      uint64_t v43 = 2080;
      unint64_t v44 = v33;
      id v45 = 1024;
      unint64_t v46 = v31;
      __int16 v47 = 1024;
      int v48 = v32;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }

    int v34 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v34 = &off_4865A0;
    v34[2] = 561211770;
  }

  if (*(void *)(a1 + 144)) {
    uint64_t v18 = *(float *)(*(void *)(a1 + 128) + 36LL);
  }
  else {
    uint64_t v18 = 0.0;
  }
  *(double *)a6 = v18;
  uint64_t result = sub_6461C(a1 + 120);
  *(double *)(a6 + 8) = result;
  return result;
}

        int v5 = 1685287523;
LABEL_73:
        *a3 = v5;
        return;
      }

  if (v21)
  {
    __int128 v33 = (os_log_t *)sub_138E8(13);
    int v34 = *v33;
    if (*v33)
    {
      if (os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        unint64_t v38 = 1024;
        id v39 = 326;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: chain->SetParameter failed.",  buf,  0x12u);
      }
    }

    std::string::size_type v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string::size_type v35 = &off_4865A0;
    v35[2] = v21;
  }

  char v23 = (os_log_t *)sub_138E8(4);
  uint64_t v20 = *v23;
  if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 467;
    char v21 = "%25s:%-5d Stream Format List Changed";
    id v22 = buf;
LABEL_29:
    _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEBUG, v21, v22, 0x12u);
  }

  *(void *)AudioObjectPropertyAddress buf = &v39;
  sub_149E5C((void ***)buf);
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if (!v3) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

  if (v3) {
LABEL_30:
  }
    CFRelease(v3);
LABEL_31:
  char v21 = (unsigned int **)*((void *)&v44 + 1);
  uint64_t v20 = (unsigned int **)v44;
  if ((void)v44 == *((void *)&v44 + 1))
  {
    char v31 = 2003329396LL;
  }

  else
  {
    *(void *)&uint64_t v49 = &v49;
    *((void *)&v49 + 1) = &v49;
    char v50 = 0LL;
    id v22 = *(unsigned int **)v44;
    if (*(void *)(v44 + 8) - *(void *)v44 != 12LL)
    {
LABEL_35:
      uint64_t v28 = (os_log_t *)sub_138E8(13);
      uint64_t v29 = *v28;
      if (*v28)
      {
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 273;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      exceptiounsigned int n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    while (1)
    {
      CFDictionaryRef v24 = *v22;
      char v23 = v22[1];
      *(_DWORD *)AudioObjectPropertyAddress buf = 7;
      *(void *)&buf[8] = v23;
      uint64_t v25 = (*v20)[2];
      LODWORD(v46) = 7;
      *((void *)&v46 + 1) = v25;
      sub_149788((uint64_t)&v52, (uint64_t)buf, (uint64_t)&v46);
      sub_2DBF5C((uint64_t)&v46);
      sub_2DBF5C((uint64_t)buf);
      uint64_t v26 = sub_149ED8((uint64_t)&v52);
      char v27 = v49;
      char *v26 = v49;
      v26[1] = &v49;
      *(void *)(v27 + 8) = v26;
      *(void *)&uint64_t v49 = v26;
      ++v50;
      sub_2DBF5C((uint64_t)&v52);
      v20 += 3;
      if (v20 == v21) {
        break;
      }
      id v22 = *v20;
    }

    LODWORD(v46) = 7;
    *((void *)&v46 + 1) = v24;
    sub_2DC204((uint64_t)&v52, (uint64_t)&v49);
    sub_149F28((uint64_t)buf, (uint64_t)&v46, (uint64_t)&v52);
    sub_2DBF5C((uint64_t)&v52);
    sub_2DBF5C((uint64_t)&v46);
    sub_2DC274((uint64_t)&v52, (uint64_t)buf);
    LODWORD(v46) = 1768907891;
    sub_2DC450((uint64_t)&v46 + 8, (uint64_t)&v52);
    sub_148DB8(a3, v46, &v46);
    sub_2DBF5C((uint64_t)&v46 + 8);
    sub_2DBF5C((uint64_t)&v52);
    sub_2DBF5C((uint64_t)&buf[16]);
    sub_2DBF5C((uint64_t)buf);
    sub_149990((uint64_t *)&v49);
    char v31 = 0LL;
  }

  *(void *)AudioObjectPropertyAddress buf = &v44;
  sub_149E5C((void ***)buf);
  return v31;
}

  (*(void (**)(_BYTE *, uint64_t))(*(void *)a1 + 104LL))(a1, v5);
  char v9 = sub_138E8(23);
  uint64_t v10 = sub_138E8(30);
  uint64_t v11 = 0;
  uint64_t v12 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  char v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    uint64_t v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    uint64_t v11 = 1;
    uint64_t v12 = 1LL;
    if ((v15 & 1) != 0) {
      goto LABEL_32;
    }
  }

  if ((v13 & v14) == 0) {
    char v9 = v10;
  }
LABEL_32:
  uint64_t v16 = *(os_log_s **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(__p, v5);
    if (v19 >= 0) {
      char v17 = __p;
    }
    else {
      char v17 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Port_HeadphonesWired_Aspen.cpp";
    char v21 = 1024;
    id v22 = 177;
    char v23 = 2080;
    CFDictionaryRef v24 = v17;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port sub-type has been updated to '%s'", buf, 0x1Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

            uint64_t v20 = (os_log_s *)*(id *)sub_138E8(24);
            char v21 = v20;
            if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              std::string::size_type v35 = "DSPChain.mm";
              id v36 = 1024;
              unint64_t v37 = 719;
              _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: VAD configured for a mode disallowing dosimetry. Will not report SPL data",  buf,  0x12u);
            }

            goto LABEL_30;
          }

          uint64_t v10 = (os_log_t *)sub_138E8(24);
          uint64_t v11 = *v10;
          if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v9 + 192) + 120LL))(*(void *)(v9 + 192));
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 144LL))(__p, v9);
            char v13 = __p[0];
            (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 136LL))(v31, v9);
            uint64_t v14 = v31[0];
            uint64_t v15 = *(const void **)(v9 + 248);
            uint64_t v29 = v15;
            uint64_t v30 = *(_BYTE *)(v9 + 256);
            if (v30 && v15) {
              CFRetain(v15);
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
            std::string::size_type v35 = "RouteUtilities.cpp";
            id v36 = 1024;
            unint64_t v37 = 793;
            unint64_t v38 = 1024;
            *(_DWORD *)id v39 = v12;
            *(_WORD *)&v39[4] = 2112;
            *(void *)&v39[6] = v13;
            int64_t v40 = 2112;
            char v41 = v14;
            uint64_t v42 = 2112;
            uint64_t v43 = v15;
            _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Skipping AUSPL since the device [%u, %@, %@, %@] is a temporary guest device",  buf,  0x36u);
            sub_19DFC((uint64_t)&v29);
            sub_19DFC((uint64_t)v31);
            sub_19DFC((uint64_t)__p);
          }
        }

        else
        {
          char v17 = (os_log_t *)sub_138E8(24);
          uint64_t v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(__p, a3);
            uint64_t v19 = v33 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            std::string::size_type v35 = "RouteUtilities.cpp";
            id v36 = 1024;
            unint64_t v37 = 784;
            unint64_t v38 = 2080;
            *(void *)id v39 = v19;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Skipping AUSPL since endpoint is not headphone: %s",  buf,  0x1Cu);
            if (v33 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        uint64_t v16 = 1;
        goto LABEL_25;
      }
    }
  }

  if (v26)
  {
    uint64_t v15 = (unint64_t *)&v26->__shared_owners_;
    do
      uint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

        uint64_t v14 = *(_DWORD *)(a1 + 136);
        char v13 = a1 + 104;
        if (v14 == 1)
        {
          uint64_t v15 = a2[1];
          LODWORD(v17) = *a2;
          HIDWORD(v17) = v15;
          LODWORD(v18) = 0;
          return sub_14B8B8(v13, (int *)&v17);
        }

        return sub_14B8B8(v13, a2);
      }

      return v5;
    }

    if (v4 != 1919774835)
    {
      BOOL v6 = 1936878960;
LABEL_8:
      if (v4 != v6) {
        goto LABEL_26;
      }
      return v5;
    }

    return *(_BYTE *)(a1 + 469) != 0;
  }

  if (v4 <= 1685484389)
  {
    if (v4 != 1668443504)
    {
      BOOL v6 = 1668705648;
      goto LABEL_8;
    }

    return *(_BYTE *)(a1 + 469) != 0;
  }

  if (v4 != 1685484390)
  {
    if (v4 != 1918987632) {
      goto LABEL_26;
    }
    return *(_BYTE *)(a1 + 469) != 0;
  }

  if ((*(_DWORD *)(a1 + 264) - 1) <= 1)
  {
    char v13 = a1 + 104;
    return sub_14B8B8(v13, a2);
  }

  return (*(uint64_t (**)(void, int *))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96), a2);
}

    sub_1BB88((uint64_t *)buf);
  }

  uint64_t v18 = (_BYTE *)sub_1E9A90(a1);
  if (!v18)
  {
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0LL;
    goto LABEL_52;
  }

  sub_3710DC((uint64_t *)buf, (uint64_t)v18, (uint64_t)&__p);
  if (!*(void *)&buf[16]) {
    goto LABEL_52;
  }
  uint64_t v19 = *(void *)&buf[8];
  uint64_t v20 = *(std::__shared_weak_count **)(*(void *)&buf[8] + 24LL);
  if (!v20) {
    goto LABEL_52;
  }
  char v21 = std::__shared_weak_count::lock(v20);
  id v36 = v21;
  if (!v21) {
    goto LABEL_52;
  }
  id v22 = v21;
  char v23 = *(_DWORD **)(v19 + 16);
  v35[2] = (unint64_t)v23;
  if (!v23) {
    goto LABEL_47;
  }
  CFDictionaryRef v24 = v23[36];
  if (v24 == 1886745449) {
    goto LABEL_37;
  }
  if (v24 != 1886222185)
  {
LABEL_47:
    __int128 v33 = (unint64_t *)&v22->__shared_owners_;
    do
      int v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }

    goto LABEL_52;
  }

  (*(void (**)(_DWORD *, void, void, void))(*(void *)v23 + 544LL))(v23, 0LL, 0LL, 0LL);
  uint64_t v25 = sub_546E0();
  *(void *)int v48 = v23;
  *(void *)&v48[8] = v22;
  uint64_t v26 = (unint64_t *)&v22->__shared_weak_owners_;
  do
    char v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  sub_1013F4(v25, (uint64_t *)v48);
  std::__shared_weak_count::__release_weak(v22);
LABEL_37:
  uint64_t v28 = (os_log_t *)sub_138E8(17);
  uint64_t v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int v48 = 136315394;
    *(void *)&v48[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&v48[12] = 1024;
    *(_DWORD *)&v48[14] = 794;
    _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "%25s:%-5d USB Device- tearing down input port", v48, 0x12u);
  }

  v35[0] = (unint64_t)v23;
  v35[1] = (unint64_t)v22;
  uint64_t v30 = (unint64_t *)&v22->__shared_owners_;
  do
    char v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  sub_36D53C((uint64_t)v18, v35);
  do
    id v32 = __ldaxr(v30);
  while (__stlxr(v32 - 1, v30));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }

  v18[493] = 0;
  sub_1E9BB8(v18);
  id v22 = v36;
  if (v36) {
    goto LABEL_47;
  }
LABEL_52:
  sub_85B80((uint64_t *)buf);
  sub_85B80(v38);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v45[0]);
  if (__p)
  {
    int64_t v40 = __p;
    operator delete(__p);
  }

        if (v23) {
          std::__shared_weak_count::__release_weak(v23);
        }
        return v5;
      }
    }

    else
    {
      uint64_t v4 = 0LL;
    }

    char v17 = (os_log_t *)sub_138E8(24);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v25 = "PortUtilities.cpp";
      uint64_t v26 = 1024;
      char v27 = 266;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Failed to fetch volume range from device.",  buf,  0x12u);
    }

    int v5 = -40.0;
    if (!v4) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }

  uint64_t v15 = (os_log_t *)sub_138E8(24);
  uint64_t v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v25 = "PortUtilities.cpp";
    uint64_t v26 = 1024;
    char v27 = 271;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : No device available.", buf, 0x12u);
  }

  return -40.0;
}

    (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, _DWORD *, float *))(*(void *)v19 + 40LL))( v19,  buf,  a3,  a4,  a5,  a6);
    return;
  }

  if (v12 <= 1987013731)
  {
    if (v12 != 1986229104)
    {
      if (v12 == 1986290211)
      {
        sub_6CB44(a5, (double *)a6, *(double *)(a1 + 136), *(double *)(a1 + 144));
        return;
      }

      goto LABEL_31;
    }

    if (*(_DWORD *)(a1 + 248))
    {
      uint64_t v16 = 1;
      goto LABEL_22;
    }

    *(_DWORD *)AudioObjectPropertyAddress buf = 1986229104;
    char v21 = *(void *)(a1 + 120);
    uint64_t v43 = *(const char **)(a1 + 128);
    id v22 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v21 + 16LL))(v21, buf);
    uint64_t v19 = *(void *)(a1 + 120);
    if (!v22)
    {
      *(_DWORD *)std::string __p = 1987013732;
      *(void *)&__p[4] = *(void *)(a1 + 128);
      uint64_t v26 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v19 + 16LL))(v19, __p);
      sub_5CABC(v26, a5, a6);
      return;
    }

    goto LABEL_26;
  }

  if (v12 == 1987013732)
  {
    char v13 = *(float *)(a1 + 200);
    goto LABEL_24;
  }

  if (v12 == 1987013741)
  {
    uint64_t v14 = a1 + 152;
    uint64_t v15 = *(float *)(a1 + 200);
LABEL_18:
    char v13 = sub_757A4(v14, v15);
    goto LABEL_24;
  }

    char v21 = *(uint64_t (**)(uint64_t, _BYTE *))(v5 + 96);
    id v22 = (void *)(v5 + 24);
    else {
      char v23 = *(char **)(v5 + 24);
    }
    sub_195860(v48, v23);
    CFDictionaryRef v24 = *(void *)&v48[8];
    *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 1174405120LL;
    *(void *)&buf[16] = sub_2A6594;
    *(void *)&_BYTE buf[24] = &unk_47A810;
    std::string v54 = v7;
    std::string v55 = v6;
    if (v6)
    {
      uint64_t v25 = (unint64_t *)&v6->__shared_weak_owners_;
      do
        uint64_t v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }

    char v27 = v21(v24, buf);
    sub_39FD8(v48);
    *(_DWORD *)(v5 + 80) = v27 == 0;
    if (v27)
    {
      uint64_t v28 = sub_138E8(16);
      uint64_t v29 = sub_138E8(24);
      uint64_t v30 = 0;
      char v31 = 0LL;
      *(void *)int v48 = 0x100000002LL;
      id v32 = *(void *)(v28 + 8);
      while (1)
      {
        __int128 v33 = *(int *)&v48[4 * v31];
        int v34 = v30;
        if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
          break;
        }
        uint64_t v30 = 1;
        char v31 = 1LL;
        if ((v34 & 1) != 0) {
          goto LABEL_39;
        }
      }

      if ((v32 & v33) == 0) {
        uint64_t v28 = v29;
      }
LABEL_39:
      std::string::size_type v35 = *(os_log_s **)v28;
      if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v48 = 136315906;
        *(void *)&v48[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&v48[12] = 1024;
        *(_DWORD *)&v48[14] = 80;
        uint64_t v49 = 1024;
        char v50 = v27;
        __int128 v51 = 2080;
        uint64_t v52 = v22;
        _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed [%d] to register %s for Device Orientation Updates",  v48,  0x22u);
      }
    }

    if (v55) {
      std::__shared_weak_count::__release_weak(v55);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  id v36 = v47;
  if (v47)
  {
    unint64_t v37 = (unint64_t *)&v47->__shared_owners_;
    do
      unint64_t v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  return sub_ADC0C(&v43);
}

  *(_DWORD *)(a1 + 136) = a3;
  *(_BYTE *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 128) = sub_389D10(v15, a1 + 568);
  *(_BYTE *)(a1 + 132) = 1;
  if (*(_BYTE *)(a1 + 572))
  {
    buf[0] = 0;
    uint8_t buf[4] = 0;
    uint64_t v19 = sub_389A74(v15, (uint64_t)buf, a1 + 568);
    goto LABEL_28;
  }

  uint64_t v19 = *(void *)(v15 + 32);
  char v31 = *(void *)(v15 + 40);
  if ((unint64_t)(v31 - v19) < 0x41 || v19 == v31)
  {
LABEL_28:
    uint64_t v20 = v19;
    if (!v19) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

  uint64_t v20 = *(void *)(v15 + 32);
  while (*(_DWORD *)(v20 + 32) != 1869442665)
  {
    v20 += 64LL;
    if (v20 == v31) {
      goto LABEL_28;
    }
  }

LABEL_1357:
      v858 = __cxa_allocate_exception(0x10uLL);
      *(void *)v858 = &off_4865A0;
      v858[2] = v882;
    }

LABEL_128:
    int v68 = v946;
  }

                      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 1000 * v66.__d_.__rep_;
LABEL_129:
                      if (v67 > (v65.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                      {
                        v68.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                        goto LABEL_132;
                      }
                    }

                    v68.__d_.__rep_ = v67 + v65.__d_.__rep_;
LABEL_132:
                    std::condition_variable::__do_timed_wait(&v147, &__lk, v68);
                    std::chrono::steady_clock::now();
                  }

                  if (std::chrono::steady_clock::now().__d_.__rep_ >= v64 || v119) {
                    goto LABEL_107;
                  }
                  continue;
                }
              }

              uint64_t v58 = (os_log_t *)sub_138E8(13);
              uint64_t v59 = *v58;
              if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
              {
                uint64_t v104 = inAddress;
                sub_613AC((uint64_t)&__lk, &v104.mSelector);
                if (v106 >= 0) {
                  p_lunsigned int k = &__lk;
                }
                else {
                  p_lunsigned int k = __lk.__m_;
                }
                id v102 = 0LL;
                int v103 = 0LL;
                id v101 = 0LL;
                sub_7A5B8(&v101, v47, v49, v50);
                uint64_t v98 = 0LL;
                uint64_t v99 = 0LL;
                char v100 = 0LL;
                sub_7A5B8(&v98, v32, v90, (v90 - (uint64_t)v32) >> 2);
                uint64_t v61 = v101;
                uint64_t v62 = v98;
                uint64_t v63 = v102 - v101 == v99 - v98 && memcmp(v101, v98, v102 - v101) == 0;
                buf.AudioObjectPropertySelector mSelector = 136316930;
                *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                uint64_t v138 = 1024;
                uint64_t v139 = 248;
                char v140 = 2080;
                *(void *)uint64_t v141 = "set";
                *(_WORD *)&v141[8] = 2080;
                *(void *)&v141[10] = p_lk;
                *(_WORD *)&v141[18] = 2080;
                *(void *)&v141[20] = "set";
                *(_WORD *)&v141[28] = 1024;
                uint64_t v142 = v63;
                uint64_t v143 = 1024;
                char v144 = 0;
                int v145 = 1024;
                int v146 = os_unfair_lock_opaque;
                _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
                if (v62)
                {
                  uint64_t v99 = v62;
                  operator delete(v62);
                }

                if (v61)
                {
                  id v102 = v61;
                  operator delete(v61);
                }

                if (v106 < 0) {
                  operator delete(__lk.__m_);
                }
              }

            uint64_t v99 = (unint64_t *)&v93->__shared_owners_;
            do
              char v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (v100) {
              goto LABEL_131;
            }
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
            if (v96)
            {
LABEL_132:
              id v101 = 1;
              goto LABEL_170;
            }

    char v96 = a1;
    char v77 = (uint64_t)v69 - *(void *)a7;
    if ((unint64_t)v77 < 5)
    {
      uint64_t v78 = 0LL;
      uint64_t v85 = 0LL;
    }

    else
    {
      uint64_t v78 = 0LL;
      uint64_t v79 = 0LL;
      uint64_t v80 = 0LL;
      char v81 = v77 >> 2;
      if (v81 <= 2) {
        id v82 = 2LL;
      }
      else {
        id v82 = v81;
      }
      for (unsigned int j = 1LL; j != v82; ++j)
      {
        uint64_t v84 = vcvtq_f64_f32(*(float32x2_t *)(*(void *)a7 + 4 * j - 4));
        if ((unint64_t)v79 >= v80)
        {
          uint64_t v97 = v84;
          CFTypeID v86 = (v79 - v78) >> 4;
          uint64_t v87 = v86 + 1;
          else {
            uint64_t v88 = v87;
          }
          if (v88) {
            uint64_t v88 = (unint64_t)sub_7BE90(v88);
          }
          else {
            CFTypeID v89 = 0LL;
          }
          uint64_t v90 = (float64x2_t *)(v88 + 16 * v86);
          *uint64_t v90 = v97;
          uint64_t v85 = (uint64_t)&v90[1];
          if (v79 == v78)
          {
            uint64_t v91 = (char *)v90;
          }

          else
          {
            do
            {
              uint64_t v91 = (char *)&v90[-1];
              v90[-1] = *((float64x2_t *)v79 - 1);
              v79 -= 16;
              --v90;
            }

            while (v79 != v78);
          }

          uint64_t v80 = v88 + 16 * v89;
          if (v78) {
            operator delete(v78);
          }
          uint64_t v78 = v91;
        }

        else
        {
          *(float64x2_t *)uint64_t v79 = v84;
          uint64_t v85 = (uint64_t)(v79 + 16);
        }

        uint64_t v79 = (char *)v85;
      }
    }

    uint64_t v98 = 0LL;
    uint64_t v99 = 0LL;
    char v100 = 0LL;
    sub_A9784(&v98, v78, v85, (v85 - (uint64_t)v78) >> 4);
    (*(void (**)(uint64_t, void **, _BYTE *, void))(*(void *)v96 + 88LL))(v96, &v98, buf, v95);
    if (v98)
    {
      uint64_t v99 = v98;
      operator delete(v98);
    }

    if (v78) {
      operator delete(v78);
    }
  }

  else
  {
    if ((_DWORD)v34) {
      uint64_t v73 = v35;
    }
    else {
      uint64_t v73 = 0LL;
    }
    (*(void (**)(uint64_t, __int128 *, uint64_t, _BYTE *, uint64_t))(*(void *)a1 + 80LL))( a1,  &v101,  v73 | (v34 << 32),  buf,  v67);
  }

  if (*(void *)&v107[12]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v107[12]);
  }
}

  unint64_t v46 = 0LL;
LABEL_129:

  sub_6DD4();
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
  {
    uint64_t v73 = (os_log_s *)*(id *)sub_138E8(13);
    __int128 v74 = v73;
    if (v73)
    {
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3920;
        _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is held by this thread.",  buf,  0x12u);
      }
    }
  }

  if (v51)
  {
    buf[5] = 1;
    buf[0] = 1;
  }

  if (v45) {
    buf[0] = 1;
  }
LABEL_132:
  if ((sub_27DB40((uint64_t *)a1) & v45) == 1)
  {
    unsigned __int8 v70 = (os_log_t *)sub_138E8(22);
    uint64_t v71 = *v70;
    if (*v70)
    {
      if (os_log_type_enabled(*v70, OS_LOG_TYPE_DEFAULT))
      {
        sub_27E908((std::string *)__p, (uint64_t)buf);
        uint64_t v72 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)uint64_t v319 = 136315650;
        *(void *)&v319[4] = "VirtualStream.cpp";
        *(_WORD *)&v319[12] = 1024;
        *(_DWORD *)&v319[14] = 1108;
        *(_WORD *)&v319[18] = 2080;
        *(void *)&v319[20] = v72;
        _os_log_impl(&dword_0, v71, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parrot and call: {%s}", v319, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }

  uint64_t v73 = sub_138E8(22);
  if ((*(_BYTE *)(v73 + 8) & 1) != 0)
  {
    __int128 v74 = *(os_log_s **)v73;
    if (*(void *)v73)
    {
      if (os_log_type_enabled(*(os_log_t *)v73, OS_LOG_TYPE_DEBUG))
      {
        sub_27E908((std::string *)__p, (uint64_t)buf);
        uint64_t v75 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)uint64_t v319 = 136315650;
        *(void *)&v319[4] = "VirtualStream.cpp";
        *(_WORD *)&v319[12] = 1024;
        *(_DWORD *)&v319[14] = 1109;
        *(_WORD *)&v319[18] = 2080;
        *(void *)&v319[20] = v75;
        _os_log_impl(&dword_0, v74, OS_LOG_TYPE_DEBUG, "%25s:%-5d {%s}", v319, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }

  uint64_t v76 = v307[0];
  char v77 = (char *)v307[1] - (char *)v307[0];
  if (v307[1] == v307[0])
  {
    uint64_t v80 = 0LL;
    char v81 = 0uLL;
  }

  else
  {
    uint64_t v78 = (char *)sub_177AE0(0x6DB6DB6DB6DB6DB7LL * (v77 >> 3));
    uint64_t v80 = &v78[56 * v79];
    memmove(v78, v76, v77);
    *(void *)&char v81 = v78;
    *((void *)&v81 + 1) = &v78[8 * (v77 >> 3)];
  }

  id v82 = v81;
  uint64_t v306 = v81;
  uint64_t v83 = *((void *)&v81 + 1);
  uint64_t v84 = v81;
  if ((void)v81 != *((void *)&v81 + 1))
  {
    uint64_t v84 = v81;
    while ((sub_27ECF0((uint64_t)buf, v84) & 1) == 0)
    {
      v84 += 56LL;
      if (v84 == v83) {
        goto LABEL_178;
      }
    }

    if (v84 != v83)
    {
      for (unsigned int i = v84 + 56; i != v83; i += 56LL)
      {
        if ((sub_27ECF0((uint64_t)buf, i) & 1) == 0)
        {
          uint64_t v90 = *(_OWORD *)i;
          uint64_t v91 = *(_OWORD *)(i + 16);
          int v92 = *(_OWORD *)(i + 32);
          *(void *)(v84 + 48) = *(void *)(i + 48);
          *(_OWORD *)(v84 + 16) = v91;
          *(_OWORD *)(v84 + 32) = v92;
          *(_OWORD *)uint64_t v84 = v90;
          v84 += 56LL;
        }
      }
    }
  }

  if (v84 != v83)
  {
    uint64_t v83 = v84;
    *(void *)&unint64_t v93 = v306;
    *((void *)&v93 + 1) = v84;
    uint64_t v306 = v93;
  }

  if (v54)
  {
    uint64_t v88 = v54;
    operator delete(v54);
    a1 = v53;
    if (v56) {
      goto LABEL_132;
    }
  }

  else
  {
    a1 = v53;
    if (v56)
    {
LABEL_132:
      uint64_t v57 = sub_138E8(13);
      if ((*(_BYTE *)(v57 + 8) & 1) != 0)
      {
        uint64_t v58 = *(os_log_s **)v57;
        if (*(void *)v57)
        {
          if (os_log_type_enabled(*(os_log_t *)v57, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315650;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            uint64_t v105 = 1024;
            int v106 = 219;
            id v107 = 1024;
            *(_DWORD *)char v108 = a1;
            _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
          }
        }
      }

      char v13 = 0LL;
      if (v51) {
        goto LABEL_121;
      }
      return v13;
    }
  }