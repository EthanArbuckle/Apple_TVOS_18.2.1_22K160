void sub_9F28C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void **a12, void **a13, void **a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, CFTypeRef cf)
{
  uint64_t v23;
  char **v24;
  char **v25;
  void **v26;
  void **v27;
  void *v29;
  sub_67FE8(v23 + 496);
  *(void *)(v23 + 408) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v23 + 432));
  std::mutex::~mutex((std::mutex *)(v23 + 344));
  sub_8C8F0((void ***)&cf);
  sub_88C08(*v25);
  sub_88C08(*v24);
  v29 = *a10;
  if (*a10)
  {
    *(void *)(v23 + 128) = v29;
    operator delete(v29);
  }

  sub_157508(*(void **)(v23 + 104));
  sub_88C08(*(char **)(v23 + 72));
  sub_88C08(*(char **)(v23 + 40));
  sub_88C08(*(char **)(v23 + 8));
  operator delete((void *)v23);
  _Unwind_Resume(a1);
}

void sub_9F424()
{
}

uint64_t sub_9F434(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*a2 != 1936876644 && *a2 != 1936879204)
  {
    v24 = (os_log_t *)sub_138E8(13);
    v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v32 = "AggregateDevice_CommonBase.cpp";
        __int16 v33 = 1024;
        int v34 = 2893;
        _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32LL))(a1) > a5)
  {
    v17 = (os_log_t *)sub_138E8(13);
    v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)a2;
      int v28 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v27);
      int v19 = v30;
      v20 = (void **)__p[0];
      int v21 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
      v22 = __p;
      *(_DWORD *)buf = 136316162;
      v32 = "AggregateDevice_CommonBase.cpp";
      if (v19 < 0) {
        v22 = v20;
      }
      __int16 v33 = 1024;
      int v34 = 2895;
      __int16 v35 = 2080;
      v36 = v22;
      __int16 v37 = 1024;
      int v38 = a5;
      __int16 v39 = 1024;
      int v40 = v21;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }

    v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)v23 = &off_4865A0;
    v23[2] = 561211770;
  }

  if (a2[1] == 1768845428) {
    uint64_t v13 = a1 + 472;
  }
  else {
    uint64_t v13 = a1 + 496;
  }
  if (*(void *)(v13 + 16) != 1LL)
  {
    v14 = (os_log_t *)sub_138E8(13);
    v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v32 = "AggregateDevice_CommonBase.cpp";
        __int16 v33 = 1024;
        int v34 = 2897;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty should have blocked this code path because the appropriate device l ist's size is not 1.",  buf,  0x12u);
      }
    }
  }

  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(v13 + 8) + 16LL)
                                                                                         + 48LL))( *(void *)(*(void *)(v13 + 8) + 16LL),  a2,  a3,  a4,  a5,  a6);
}

void sub_9F75C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9F790( AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (a2->mSelector != 1718839674 && a2->mSelector != 1902539642)
  {
    v45 = (os_log_t *)sub_138E8(13);
    v46 = *v45;
    if (*v45)
    {
      if (os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v59 = 1024;
        int v60 = 3111;
        _os_log_impl(&dword_0, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned int v13 = *a6;
  if (sub_6C978((uint64_t)a1))
  {
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v14 = sub_5C2F8((uint64_t)a1);
    *((void *)&v16 + 1) = v15;
    *(void *)&__int128 v16 = v14;
    BOOL v17 = ((v16 >> 32) & 0xFF00000000LL) == 0 || HIDWORD(v14) == 0LL;
    if (v17 || (_os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") & 1) == 0) {
      v13 *= 16;
    }
  }

  strcpy(buf, "rsfbptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v18 = sub_5C2F8((uint64_t)a1);
  *((void *)&v21 + 1) = v19;
  *(void *)&__int128 v21 = v18;
  uint64_t v20 = v21 >> 32;
  uint64_t v22 = (*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 528LL))(a1, 1735159650LL);
  if ((v22 & 0xFF00000000LL) != 0) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v13;
  }
  unsigned int inData = v23;
  if ((_DWORD)v20) {
    BOOL v24 = (v20 & 0xFF00000000LL) == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (v23 & 0x1F) != 0)
  {
    unsigned int v25 = v23 & 0xFFFFFFE0;
    unsigned int v23 = (v23 & 0xFFFFFFE0) + 32;
    unsigned int inData = v25 + 32;
    v26 = (os_log_t *)sub_138E8(16);
    uint64_t v27 = *v26;
    if (*v26)
    {
      if (os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = (*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 120LL))(a1);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v59 = 1024;
        int v60 = 3129;
        __int16 v61 = 1024;
        *(_DWORD *)v62 = v23;
        *(_WORD *)&v62[4] = 1024;
        *(_DWORD *)&v62[6] = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Buffer size is restricted, rounding up to nearest multiple of 32: %u for aggregate device %u.",  buf,  0x1Eu);
      }
    }
  }

  v29 = (os_log_t *)sub_138E8(16);
  char v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v31 = *a6;
    int v32 = (*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 120LL))(a1);
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
    __int16 v59 = 1024;
    int v60 = 3132;
    __int16 v61 = 1024;
    *(_DWORD *)v62 = v31;
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)&v62[6] = v23;
    LOWORD(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 2) = v32;
    _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Requested to set %u, setting buffer frame size of %u on aggregate device %u.",  buf,  0x24u);
  }

  uint64_t result = AudioObjectSetPropertyData(a1[32], a2, a3, a4, a5, &inData);
  uint64_t v34 = result;
  if ((_DWORD)result)
  {
    uint64_t mSelector = a2->mSelector;
    v36 = (os_log_t *)sub_138E8(16);
    os_log_t v37 = *v36;
    if ((_DWORD)mSelector == 1902539642)
    {
      if (!v37 || !os_log_type_enabled(*v36, OS_LOG_TYPE_INFO)) {
        goto LABEL_53;
      }
      sub_2CA1C(v56, 1902539642LL);
      int v38 = v57;
      __int16 v39 = (void **)v56[0];
      sub_2CA1C(__p, v34);
      int v40 = v56;
      if (v38 < 0) {
        int v40 = v39;
      }
      if (v55 >= 0) {
        v41 = __p;
      }
      else {
        v41 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
      __int16 v59 = 1024;
      int v60 = 534;
      __int16 v61 = 2080;
      *(void *)v62 = v40;
      *(_WORD *)&v62[8] = 2080;
      v63 = v41;
      v42 = "%25s:%-5d This is not necessarily a problem, but the HAL returned an error here: AudioObjectSetPropertyData("
            ") for selector '%s' returned status '%s'.";
      v43 = v37;
      os_log_type_t v44 = OS_LOG_TYPE_INFO;
    }

    else
    {
      if (!v37 || !os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
      sub_2CA1C(v56, mSelector);
      int v48 = v57;
      v49 = (void **)v56[0];
      sub_2CA1C(__p, v34);
      v50 = v56;
      if (v48 < 0) {
        v50 = v49;
      }
      if (v55 >= 0) {
        v51 = __p;
      }
      else {
        v51 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
      __int16 v59 = 1024;
      int v60 = 538;
      __int16 v61 = 2080;
      *(void *)v62 = v50;
      *(_WORD *)&v62[8] = 2080;
      v63 = v51;
      v42 = "%25s:%-5d AudioObjectSetPropertyData() for selector '%s' returned status '%s'.";
      v43 = v37;
      os_log_type_t v44 = OS_LOG_TYPE_ERROR;
    }

    _os_log_impl(&dword_0, v43, v44, v42, buf, 0x26u);
    if (v55 < 0) {
      operator delete(__p[0]);
    }
    if (v57 < 0) {
      operator delete(v56[0]);
    }
LABEL_53:
    v52 = __cxa_allocate_exception(0x10uLL);
    *(void *)v52 = &off_4865A0;
    v52[2] = v34;
  }

  return result;
}

void sub_9FCD0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_9FD04(uint64_t a1, void *a2)
{
  v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(void **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 3;
    unint64_t v9 = v8 + 1;
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8LL;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)sub_7DC90(v12);
      v7 = *(void **)a1;
      v5 = *(void **)(a1 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    unint64_t v14 = (void *)(v12 + 8 * v8);
    unint64_t v15 = v12 + 8 * v13;
    void *v14 = *a2;
    v6 = v14 + 1;
    while (v5 != v7)
    {
      uint64_t v16 = *--v5;
      *--unint64_t v14 = v16;
    }

    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v15;
    if (v7) {
      operator delete(v7);
    }
  }

  else
  {
    void *v5 = *a2;
    v6 = v5 + 1;
  }

  *(void *)(a1 + 8) = v6;
}

uint64_t sub_9FDDC(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 392LL))(a1);
  if ((result & 1) == 0)
  {
    v5 = (os_log_t *)sub_138E8(13);
    v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "PhysicalDevice.h";
      __int16 v10 = 1024;
      int v11 = 393;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v8,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_DWORD *)(a1 + 256) == a2)
  {
    *(_DWORD *)(a1 + 260) = a2;
    *(_BYTE *)(a1 + 264) = 1;
  }

  return result;
}

void sub_9FEF8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_9FF14()
{
  uint64_t v0 = sub_5954C();
  v1 = operator new(0x10uLL);
  v1[2] = 0;
  *(void *)v1 = &off_46DFE8;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v0 + 328LL))(v0, v1);
}

uint64_t sub_9FF5C(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 392LL))(a1) & 1) == 0)
  {
    v5 = (os_log_t *)sub_138E8(13);
    v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "PhysicalDevice.h";
      __int16 v10 = 1024;
      int v11 = 403;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v8,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a2 == -1 || (uint64_t result = sub_A00A8(a1, a2), (_DWORD)result))
  {
    if (*(_BYTE *)(a1 + 264)) {
      *(_BYTE *)(a1 + 264) = 0;
    }
    uint64_t result = sub_1D2264();
    *(_DWORD *)(a1 + 256) = result;
  }

  return result;
}

void sub_A008C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_A00A8(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 392LL))(a1) & 1) == 0)
  {
    v5 = (os_log_t *)sub_138E8(13);
    v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "PhysicalDevice.h";
      __int16 v10 = 1024;
      int v11 = 386;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v8,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t result = sub_9D704((unsigned __int8 *)a1);
  if ((_DWORD)result) {
    return *(_DWORD *)(a1 + 260) == a2;
  }
  return result;
}

void sub_A01C4(_Unwind_Exception *exception_object)
{
}

void sub_A01E0(uint64_t a1, int a2, float a3)
{
  float v68 = a3;
  sub_9D478(&v66, a1);
  unint64_t v4 = v66;
  if (v66)
  {
    uint64_t v5 = sub_A09AC(v66);
    (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, void, uint64_t))(*(void *)&v4->_os_unfair_lock_opaque
                                                                                       + 256LL))( &v76,  v4,  0LL,  v5);
    uint64_t v64 = 0LL;
    if (v77.i64[0])
    {
      v6 = std::__shared_weak_count::lock((std::__shared_weak_count *)v77.i64[0]);
      v65 = v6;
      if (v6)
      {
        uint64_t v7 = v76;
        uint64_t v64 = v76;
      }

      else
      {
        uint64_t v7 = 0LL;
      }

      if (v77.i64[0]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v77.i64[0]);
      }
      if (v7)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 144LL))(&v60, v7);
        v71[0] = 0LL;
        __int128 v8 = 0uLL;
        __int128 v70 = 0u;
        unint64_t v9 = v60;
        __int16 v10 = v61;
        if (v60 != v61)
        {
          while (1)
          {
            *(void *)&__int128 v69 = 0LL;
            int v11 = (std::__shared_weak_count *)v9[1];
            if (v11) {
              break;
            }
LABEL_62:
            v9 += 2;
            if (v9 == v10)
            {
              __int128 v8 = v70;
              uint64_t v51 = v71[0];
              goto LABEL_65;
            }
          }

          unint64_t v12 = std::__shared_weak_count::lock(v11);
          *((void *)&v69 + 1) = v12;
          if (v12)
          {
            *(void *)&__int128 v69 = *v9;
            if (!(void)v69) {
              goto LABEL_57;
            }
          }

          else if (!(void)v69)
          {
LABEL_57:
            if (v12)
            {
              p_shared_owners = (unint64_t *)&v12->__shared_owners_;
              do
                unint64_t v50 = __ldaxr(p_shared_owners);
              while (__stlxr(v50 - 1, p_shared_owners));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }

            goto LABEL_62;
          }

          uint64_t v13 = (void *)*((void *)&v70 + 1);
          unint64_t v14 = (void *)v70;
          uint64_t v15 = *((void *)&v70 + 1) - v70;
          uint64_t v16 = (uint64_t)(*((void *)&v70 + 1) - v70) >> 4;
          if (*((void *)&v70 + 1) < v71[0])
          {
            uint64_t v21 = *((void *)&v69 + 1);
            **((_OWORD **)&v70 + 1) = v69;
            if (v21)
            {
              uint64_t v22 = (unint64_t *)(v21 + 8);
              do
                unint64_t v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }

            *((void *)&v70 + 1) = v13 + 2;
          }

          else
          {
            uint64_t v17 = v16 + 1;
            unint64_t v18 = (uint64_t)(v71[0] - v70) >> 3;
            if (v18 <= v17) {
              unint64_t v18 = v16 + 1;
            }
            if (v71[0] - (void)v70 >= 0x7FFFFFFFFFFFFFF0uLL) {
              unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            v75 = v71;
            if (v19) {
              unint64_t v19 = (unint64_t)sub_7BE90(v19);
            }
            else {
              uint64_t v20 = 0LL;
            }
            BOOL v24 = (void *)(v19 + 16 * v16);
            v72 = (void **)v19;
            *(void *)&__int128 v73 = v24;
            *((void *)&v73 + 1) = v24;
            v74 = (char *)(v19 + 16 * v20);
            if (v16 == v20)
            {
              if (v15 < 1)
              {
                if (v14 == v13) {
                  unint64_t v26 = 1LL;
                }
                else {
                  unint64_t v26 = v15 >> 3;
                }
                v79 = v71;
                uint64_t v27 = (void **)sub_7BE90(v26);
                uint64_t v29 = v73;
                uint64_t v30 = *((void *)&v73 + 1) - v73;
                if (*((void *)&v73 + 1) == (void)v73)
                {
                  int64x2_t v35 = vdupq_n_s64(v73);
                  unint64_t v32 = (unint64_t)&v27[2 * (v26 >> 2)];
                }

                else
                {
                  uint64_t v31 = v30 >> 4;
                  unint64_t v32 = (unint64_t)&v27[2 * (v26 >> 2)] + (v30 & 0xFFFFFFFFFFFFFFF0LL);
                  uint64_t v33 = 16 * v31;
                  uint64_t v34 = (char *)&v27[2 * (v26 >> 2)];
                  do
                  {
                    *(_OWORD *)uint64_t v34 = *(_OWORD *)v29;
                    v34 += 16;
                    *(void *)uint64_t v29 = 0LL;
                    *(void *)(v29 + 8) = 0LL;
                    v29 += 16LL;
                    v33 -= 16LL;
                  }

                  while (v33);
                  int64x2_t v35 = (int64x2_t)v73;
                }

                v36 = v72;
                os_log_t v37 = v74;
                v72 = v27;
                *(void *)&__int128 v73 = &v27[2 * (v26 >> 2)];
                int64x2_t v77 = v35;
                *((void *)&v73 + 1) = v32;
                v74 = (char *)&v27[2 * v28];
                uint64_t v76 = (uint64_t)v36;
                v78 = v37;
                sub_A0D64((uint64_t)&v76);
                BOOL v24 = (void *)*((void *)&v73 + 1);
              }

              else
              {
                if (v17 >= 0) {
                  unint64_t v25 = v16 + 1;
                }
                else {
                  unint64_t v25 = v16 + 2;
                }
                v24 -= 2 * (v25 >> 1);
                *(void *)&__int128 v73 = v24;
                *((void *)&v73 + 1) = v24;
              }
            }

            void *v24 = v69;
            uint64_t v38 = *((void *)&v69 + 1);
            v24[1] = *((void *)&v69 + 1);
            if (v38)
            {
              __int16 v39 = (unint64_t *)(v38 + 8);
              do
                unint64_t v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
              BOOL v24 = (void *)*((void *)&v73 + 1);
            }

            v41 = v24 + 2;
            *((void *)&v73 + 1) = v41;
            uint64_t v42 = v73;
            v43 = (void *)v70;
            if ((void *)v70 != v13)
            {
              os_log_type_t v44 = v13;
              do
              {
                __int128 v45 = *((_OWORD *)v44 - 1);
                v44 -= 2;
                *(_OWORD *)(v42 - 16) = v45;
                v42 -= 16LL;
                *os_log_type_t v44 = 0LL;
                v44[1] = 0LL;
              }

              while (v44 != v43);
              v41 = (_OWORD *)*((void *)&v73 + 1);
            }

            *(void *)&__int128 v73 = v42;
            v46 = (void *)*((void *)&v70 + 1);
            if (*((void **)&v70 + 1) != v13)
            {
              do
              {
                *v41++ = *(_OWORD *)v13;
                *uint64_t v13 = 0LL;
                v13[1] = 0LL;
                v13 += 2;
              }

              while (v13 != v46);
              uint64_t v42 = v73;
              uint64_t v13 = (void *)*((void *)&v70 + 1);
            }

            v47 = (void **)v70;
            int v48 = (char *)v71[0];
            *(void *)&__int128 v70 = v42;
            *((void *)&v70 + 1) = v41;
            v71[0] = v74;
            *((void *)&v73 + 1) = v13;
            v74 = v48;
            v72 = v47;
            *(void *)&__int128 v73 = v47;
            sub_A0D64((uint64_t)&v72);
          }

          unint64_t v12 = (std::__shared_weak_count *)*((void *)&v69 + 1);
          goto LABEL_57;
        }

        uint64_t v51 = 0LL;
LABEL_65:
        __int128 v59 = v8;
        __int128 v62 = v8;
        uint64_t v63 = v51;
        v71[0] = 0LL;
        __int128 v70 = 0uLL;
        uint64_t v76 = (uint64_t)&v70;
        sub_7A668((void ***)&v76);
        uint64_t v76 = (uint64_t)&v60;
        sub_A0CF0((void ***)&v76);
        v52 = (void *)v59;
        if ((void)v59 != *((void *)&v59 + 1))
        {
          while ((*(unsigned int (**)(void))(*(void *)*v52 + 152LL))(*v52) != a2)
          {
            v52 += 2;
            if (v52 == *((void **)&v59 + 1))
            {
              v52 = (void *)*((void *)&v59 + 1);
              break;
            }
          }

          if (v52 != *((void **)&v62 + 1))
          {
            uint64_t v53 = *v52;
            uint64_t v76 = 0x676C6F62766F6C6DLL;
            v77.i32[0] = 0;
            (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, float *))(*(void *)v53 + 48LL))( v53,  &v76,  0LL,  0LL,  4LL,  &v68);
          }
        }

        uint64_t v76 = (uint64_t)&v62;
        sub_7A668((void ***)&v76);
        v6 = v65;
      }

      if (v6)
      {
        v54 = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }

  v56 = v67;
  if (v67)
  {
    char v57 = (unint64_t *)&v67->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

void sub_A078C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  *(void *)(v7 - 136) = va;
  sub_7A668((void ***)(v7 - 136));
  sub_7A768((uint64_t)va1);
  sub_7A768((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_A0810( AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, const void *a6)
{
  uint64_t result = AudioObjectSetPropertyData(a1, a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    __int128 v8 = a2;
    unsigned int v16 = result;
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v19, v8->mSelector);
      int v11 = v20;
      uint64_t v12 = (void **)v19[0];
      sub_2CA1C(__p, v16);
      uint64_t v13 = v19;
      if (v11 < 0) {
        uint64_t v13 = v12;
      }
      if (v18 >= 0) {
        unint64_t v14 = __p;
      }
      else {
        unint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      uint64_t v22 = "AggregateDevice_CommonBase.cpp";
      __int16 v23 = 1024;
      int v24 = 3420;
      __int16 v25 = 2080;
      unint64_t v26 = v13;
      __int16 v27 = 2080;
      uint64_t v28 = v14;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: AudioObjectSetPropertyData() for selector '%s' return ed status '%s'.",  buf,  0x26u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v16;
  }

  return result;
}

void sub_A098C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A09AC(os_unfair_lock_s *a1)
{
  __p = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  strcpy(v24, "cwdv");
  v24[8] = 0;
  int v25 = 3;
  v27[0] = 0LL;
  v27[1] = 0LL;
  unint64_t v26 = v27;
  CFTypeRef cf = 0LL;
  int v28 = 44731016;
  uint64_t v2 = sub_546E0();
  *(void *)buf = &off_46DFA0;
  *(void *)&v34[4] = buf;
  sub_FFB0C((uint64_t *)v18, v2, &__p, (uint64_t)buf);
  sub_9DCB8(v20, v18);
  sub_85B80((uint64_t *)v18);
  v3 = *(void **)&v34[4];
  if (*(_BYTE **)&v34[4] == buf)
  {
    uint64_t v4 = 4LL;
    v3 = buf;
    goto LABEL_5;
  }

  if (*(void *)&v34[4])
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  for (i = (uint64_t *)v20[1]; ; i = (uint64_t *)i[1])
  {
    if (i == v20) {
      goto LABEL_25;
    }
    uint64_t v6 = i[2];
    uint64_t v7 = (std::__shared_weak_count *)i[3];
    if (v7) {
      break;
    }
    if (*(os_unfair_lock_s **)(v6 + 192) == a1) {
      goto LABEL_19;
    }
LABEL_18:
    ;
  }

  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  __int16 v10 = *(os_unfair_lock_s **)(v6 + 192);
  do
    unint64_t v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }

  if (v10 != a1) {
    goto LABEL_18;
  }
LABEL_19:
  if (i == v20)
  {
LABEL_25:
    unint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)v18, a1 + 2);
      unsigned int v16 = v19 >= 0 ? v18 : (void **)v18[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v31 = 1024;
      int v32 = 3497;
      __int16 v33 = 2080;
      *(void *)uint64_t v34 = v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): No input port type found for connected accessory physical device %s.",  buf,  0x1Cu);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No input port type found for connected accessory physical device %s.");
  }

  uint64_t v12 = *(unsigned int *)(i[2] + 144);
  sub_1BB88(v20);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v27[0]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  return v12;
}

void sub_A0C5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_A0CF0(void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_A0D64(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_7A768(i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_A0DB0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 80);
  if (v2) {
    CFRelease(v2);
  }
  sub_32C8C(*(void **)(a1 + 56));
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }

  return a1;
}

void *sub_A0E00()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46DFA0;
  return result;
}

void sub_A0E24(uint64_t a1, void *a2)
{
  *a2 = &off_46DFA0;
}

uint64_t sub_A0E3C()
{
  return 1LL;
}

void sub_A0E4C(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v2 + 312LL))(v29);
  uint64_t v3 = *(void *)v29;
  if (*(void *)v29)
  {
    sub_6DD4();
    int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)uint64_t v29 = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&v29[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_12;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_12:
    char v19 = *(os_log_s **)v5;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v29 = 136315394;
      *(void *)&v29[4] = "RoutingManager.cpp";
      __int16 v30 = 1024;
      int v31 = 2176;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "%25s:%-5d Connected accessory device update.", v29, 0x12u);
    }

    sub_139BE4(a1, v3, 1667327075);
    if (v4) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
    if (*(_DWORD *)(a1 + 8))
    {
      uint64_t v20 = sub_138E8(16);
      uint64_t v21 = sub_138E8(15);
      char v22 = 0;
      uint64_t v23 = 0LL;
      *(void *)uint64_t v29 = 0x100000002LL;
      uint64_t v24 = *(void *)(v20 + 8);
      while (1)
      {
        uint64_t v25 = *(int *)&v29[4 * v23];
        char v26 = v22;
        if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
          break;
        }
        char v22 = 1;
        uint64_t v23 = 1LL;
        if ((v26 & 1) != 0) {
          goto LABEL_24;
        }
      }

      if ((v24 & v25) == 0) {
        uint64_t v20 = v21;
      }
LABEL_24:
      __int16 v27 = *(os_log_s **)v20;
      if (*(void *)v20)
      {
        if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v29 = 136315394;
          *(void *)&v29[4] = "AggregateDevice_CommonBase.cpp";
          __int16 v30 = 1024;
          int v31 = 3601;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager ConnectedAccessoryUpdateCommand() failed.",  v29,  0x12u);
        }
      }
    }
  }

  else
  {
    uint64_t v12 = sub_138E8(16);
    uint64_t v13 = sub_138E8(15);
    char v14 = 0;
    uint64_t v15 = 0LL;
    *(void *)uint64_t v29 = 0x100000002LL;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&v29[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1LL;
      if ((v18 & 1) != 0) {
        goto LABEL_29;
      }
    }

    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
LABEL_29:
    int v28 = *(os_log_s **)v12;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v29 = 136315394;
      *(void *)&v29[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v30 = 1024;
      int v31 = 3607;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  v29,  0x12u);
    }

    *(void *)a1 = off_4709D0;
    *(void *)(a1 + 8) = 1LL;
    *(void *)(a1 + 16) = 0LL;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }

void sub_A11B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_A1200@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Connected accessory device update");
}

const void **sub_A1210(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_A1240(const __CFDictionary *a1, const void *a2)
{
  if (!a1 || !a2 || (Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2)) == 0LL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  return sub_A12A8(Value);
}

void sub_A1290(_Unwind_Exception *a1)
{
}

uint64_t sub_A12A8(const __CFNumber *a1)
{
  if (!a1) {
    goto LABEL_41;
  }
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_15;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_22;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_33;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_33;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_29;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_15:
        uint64_t v11 = Value != 0;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        int v13 = -256;
        uint64_t v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        int v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_22:
        if (v9) {
          uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000LL;
        }
        else {
          uint64_t v5 = 0LL;
        }
        goto LABEL_38;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_33;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_33;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_33;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_29:
        uint64_t v14 = (int)*(float *)&valuePtr;
        goto LABEL_36;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_35;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_33;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_33:
        uint64_t v14 = LODWORD(valuePtr);
        goto LABEL_36;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_35:
        uint64_t v14 = (int)valuePtr;
LABEL_36:
        uint64_t v5 = v14 | 0x100000000LL;
        if (!v10) {
          uint64_t v5 = 0LL;
        }
LABEL_38:
        int v7 = v5 & 0xFFFFFF00;
        uint64_t v8 = v5 & 0x100000000LL;
        break;
      default:
        int v7 = 0;
        uint64_t v8 = 0LL;
        LOBYTE(v5) = 0;
        break;
    }

    uint64_t v6 = v8 | v7 & 0xFFFFFF00;
    uint64_t v5 = v5;
  }

  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      uint64_t v5 = CFBooleanGetValue(a1);
      uint64_t v6 = 0x100000000LL;
    }

    else
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = 0LL;
    }
  }

  uint64_t result = v6 | v5;
  if (!((v6 | (unint64_t)v5) >> 32))
  {
LABEL_41:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  return result;
}

void sub_A1588(_Unwind_Exception *a1)
{
}

const void *sub_A15A4(const __CFDictionary *a1, const void *a2)
{
  if (a2) {
    return CFDictionaryGetValue(a1, a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_A15C8(uint64_t result)
{
  if (result)
  {
    v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_17;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_20;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_24;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_30;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          int v8 = SLOBYTE(valuePtr);
          goto LABEL_18;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_17:
          int v8 = SLOWORD(valuePtr);
LABEL_18:
          float v9 = (float)v8;
          goto LABEL_31;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_20:
          float v9 = (float)SLODWORD(valuePtr);
          goto LABEL_31;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_24:
          uint64_t v10 = LODWORD(valuePtr);
          goto LABEL_32;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_30;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_28;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_28:
          float v9 = (float)*(uint64_t *)&valuePtr;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_30:
          float v9 = valuePtr;
LABEL_31:
          uint64_t v10 = LODWORD(v9);
LABEL_32:
          uint64_t v7 = v10 | 0x100000000LL;
          if (!Value) {
            uint64_t v7 = 0LL;
          }
          int v5 = v7 & 0xFFFFFF00;
          uint64_t v6 = v7 & 0x100000000LL;
          break;
        default:
          int v5 = 0;
          uint64_t v6 = 0LL;
          LOBYTE(v7) = 0;
          break;
      }

      return v6 | v5 & 0xFFFFFF00 | v7;
    }

    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1)) {
        return COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v1)) | 0x100000000LL;
      }
      else {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_A1850( AudioObjectID *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  if (a2->mSelector != 1819569763)
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v40 = "AggregateDevice_CommonBase.cpp";
      __int16 v41 = 1024;
      int v42 = 2824;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v12 = *a5;
  if (v12 != (*(unsigned int (**)(AudioObjectID *))(*(void *)a1 + 32LL))(a1))
  {
    char v26 = (os_log_t *)sub_138E8(13);
    __int16 v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t outData = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&outData);
      int v28 = v38;
      uint64_t v29 = (void **)__p[0];
      int v30 = *a5;
      int v31 = (*(uint64_t (**)(AudioObjectID *, const AudioObjectPropertyAddress *, uint64_t, uint64_t))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
      int v32 = __p;
      *(_DWORD *)buf = 136316162;
      unint64_t v40 = "AggregateDevice_CommonBase.cpp";
      if (v28 < 0) {
        int v32 = v29;
      }
      __int16 v41 = 1024;
      int v42 = 2825;
      __int16 v43 = 2080;
      os_log_type_t v44 = v32;
      __int16 v45 = 1024;
      int v46 = v30;
      __int16 v47 = 1024;
      int v48 = v31;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v33 = &off_4865A0;
    v33[2] = 561211770;
  }

  UInt32 ioDataSize = 4;
  LODWORD(outData) = 0;
  uint64_t PropertyData = AudioObjectGetPropertyData(a1[32], a2, 0, 0LL, &ioDataSize, &outData);
  if ((_DWORD)PropertyData)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(16);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(__p, PropertyData);
      uint64_t v16 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      unint64_t v40 = "AggregateDevice_CommonBase.cpp";
      __int16 v41 = 1024;
      int v42 = 2835;
      __int16 v43 = 2080;
      os_log_type_t v44 = v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "%25s:%-5d Error '%s' reading device latency from the HAL. Treating as 0.",  buf,  0x1Cu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }

    LODWORD(outData) = 0;
  }

  uint64_t v17 = sub_77A54(a2->mScope);
  int v18 = (*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 568LL))(a1, v17);
  uint64_t v19 = sub_138E8(16);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
  {
    uint64_t v20 = *(os_log_s **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        BOOL v21 = a2->mScope == 1768845428;
        *(_DWORD *)buf = 136316418;
        unint64_t v40 = "AggregateDevice_CommonBase.cpp";
        if (v21) {
          char v22 = "input";
        }
        else {
          char v22 = "output";
        }
        __int16 v41 = 1024;
        int v42 = 2843;
        __int16 v43 = 2080;
        os_log_type_t v44 = (void *)v22;
        __int16 v45 = 1024;
        int v46 = outData;
        __int16 v47 = 1024;
        int v48 = v18;
        __int16 v49 = 1024;
        int v50 = outData + v18;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Request for aggregate device %s latency. HAL device latency = %u frames, DSP latency = %u frames, total = %u frames",  buf,  0x2Eu);
      }
    }
  }

  *a6 = outData + v18;
}

void sub_A1C80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A1CB4(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  if (*a2 != 1634169456)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v34 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 3073;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(void *))(*a1 + 32LL))(a1))
  {
    BOOL v21 = (os_log_t *)sub_138E8(13);
    char v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)a2;
      int v30 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v29);
      int v23 = v32;
      uint64_t v24 = (void **)__p[0];
      unsigned int v25 = *a5;
      int v26 = (*(uint64_t (**)(void *, _DWORD *, uint64_t, uint64_t))(*a1 + 32LL))(a1, a2, a3, a4);
      __int16 v27 = __p;
      *(_DWORD *)buf = 136316162;
      *(void *)uint64_t v34 = "AggregateDevice_CommonBase.cpp";
      if (v23 < 0) {
        __int16 v27 = v24;
      }
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 3074;
      __int16 v35 = 2080;
      v36 = v27;
      __int16 v37 = 1024;
      unsigned int v38 = v25;
      __int16 v39 = 1024;
      int v40 = v26;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }

    int v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v28 = &off_4865A0;
    v28[2] = 561211770;
  }

  sub_9D988((uint64_t *)buf, a1 + 23, "", 3077);
  uint64_t v13 = *(void *)&v34[4];
  if (*(uint8_t **)&v34[4] == buf)
  {
    int v17 = 0;
  }

  else
  {
    unsigned int v14 = 0;
    do
    {
      int v15 = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 120LL))(*(void *)(v13 + 16));
      unsigned int v16 = v14 + 1;
      *(_DWORD *)(a6 + 4LL * v14) = v15;
      uint64_t v13 = *(void *)(v13 + 8);
      ++v14;
    }

    while ((uint8_t *)v13 != buf);
    int v17 = 4 * v16;
  }

  *a5 = v17;
  sub_1BB88((uint64_t *)buf);
}

void sub_A1F8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A1FD0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a2 != 1684103987)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    unsigned int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)int v18 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 3055;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 3058);
  uint64_t v11 = *(void *)&v18[4];
  if (*(uint8_t **)&v18[4] == buf)
  {
    int v12 = 1;
  }

  else
  {
    int v12 = 1;
    do
    {
      if ((*(unsigned int (**)(void, _DWORD *))(**(void **)(v11 + 16) + 16LL))( *(void *)(v11 + 16),  a2))
      {
        int v16 = 0;
        (*(void (**)(void, _DWORD *, uint64_t, uint64_t, uint64_t, int *))(**(void **)(v11 + 16) + 40LL))( *(void *)(v11 + 16),  a2,  a3,  a4,  a5,  &v16);
        v12 &= v16;
      }

      uint64_t v11 = *(void *)(v11 + 8);
    }

    while ((uint8_t *)v11 != buf);
  }

  sub_1BB88((uint64_t *)buf);
  *a6 = v12;
}

void sub_A2194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_A21C4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (*a2 != 1936876644)
  {
    int v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v33 = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 2878;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32LL))(a1))
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    BOOL v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      int v22 = v31;
      int v23 = (void **)__p[0];
      unsigned int v24 = *a5;
      int v25 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
      int v26 = __p;
      *(_DWORD *)buf = 136316162;
      __int16 v33 = "AggregateDevice_CommonBase.cpp";
      if (v22 < 0) {
        int v26 = v23;
      }
      __int16 v34 = 1024;
      int v35 = 2879;
      __int16 v36 = 2080;
      __int16 v37 = v26;
      __int16 v38 = 1024;
      unsigned int v39 = v24;
      __int16 v40 = 1024;
      int v41 = v25;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v27 = &off_4865A0;
    v27[2] = 561211770;
  }

  if (a2[1] == 1768845428) {
    uint64_t v13 = a1 + 472;
  }
  else {
    uint64_t v13 = a1 + 496;
  }
  if (*(void *)(v13 + 16) != 1LL)
  {
    unsigned int v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v33 = "AggregateDevice_CommonBase.cpp";
        __int16 v34 = 1024;
        int v35 = 2882;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty should have blocked this code path because the appropriate device l ist's size is not 1.",  buf,  0x12u);
      }
    }
  }

  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t, unsigned int *, uint64_t))(**(void **)(*(void *)(v13 + 8) + 16LL)
                                                                                                + 40LL))( *(void *)(*(void *)(v13 + 8) + 16LL),  a2,  a3,  a4,  a5,  a6);
}

void sub_A24E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_A251C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  if (*a2 != 1936879204)
  {
    int v26 = (os_log_t *)sub_138E8(13);
    __int16 v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v47 = "AggregateDevice_CommonBase.cpp";
      __int16 v48 = 1024;
      int v49 = 2849;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32LL))(a1))
  {
    int v29 = (os_log_t *)sub_138E8(13);
    int v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = *(void *)a2;
      int v43 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v42);
      int v31 = v45;
      char v32 = (void **)__p[0];
      unsigned int v33 = *a5;
      int v34 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
      int v35 = __p;
      *(_DWORD *)buf = 136316162;
      __int16 v47 = "AggregateDevice_CommonBase.cpp";
      if (v31 < 0) {
        int v35 = v32;
      }
      __int16 v48 = 1024;
      int v49 = 2850;
      __int16 v50 = 2080;
      *(void *)uint64_t v51 = v35;
      *(_WORD *)&v51[8] = 1024;
      unsigned int v52 = v33;
      __int16 v53 = 1024;
      int v54 = v34;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v36 = &off_4865A0;
    v36[2] = 561211770;
  }

  int v13 = sub_77A54(a2[1]);
  uint64_t v14 = a1 + 544;
  uint64_t v15 = 520LL;
  if (v13) {
    uint64_t v15 = 544LL;
  }
  else {
    uint64_t v14 = a1 + 520;
  }
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(v14 + 8);
  while (v16 != v17)
  {
    if (*(_BYTE *)(*(void *)v16 + 200LL))
    {
      int v22 = *(unsigned int **)(*(void *)v16 + 192LL);
      int v23 = sub_A9B7C(v22[2]);
      unsigned int v24 = sub_A9BE8(v23);
      size_t v25 = *a5;
      if (v24 > v25)
      {
        unsigned int v37 = v24;
        __int16 v38 = (os_log_t *)sub_138E8(13);
        unsigned int v39 = *v38;
        if (*v38)
        {
          if (os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
          {
            unsigned int v40 = *a5;
            *(_DWORD *)buf = 136315906;
            __int16 v47 = "AggregateDevice_CommonBase.cpp";
            __int16 v48 = 1024;
            int v49 = 2861;
            __int16 v50 = 1024;
            *(_DWORD *)uint64_t v51 = v40;
            *(_WORD *)&v51[4] = 1024;
            *(_DWORD *)&v51[6] = v37;
            _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): invalid AudioChannelLayout size for property k AudioDevicePropertyPreferredChannelLayout, given %u expected atleast %u bytes",  buf,  0x1Eu);
          }
        }

        int v41 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v41 = &off_4865A0;
        v41[2] = 2003332927;
      }

      return memcpy(a6, v22, v25);
    }

    v16 += 16LL;
  }

  if (a2[1] == 1768845428) {
    uint64_t v18 = a1 + 472;
  }
  else {
    uint64_t v18 = a1 + 496;
  }
  if (*(void *)(v18 + 16) != 1LL)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v47 = "AggregateDevice_CommonBase.cpp";
        __int16 v48 = 1024;
        int v49 = 2871;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty should have blocked this code path because the appropriate device l ist's size is not 1.",  buf,  0x12u);
      }
    }
  }

  return (void *)(*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t, unsigned int *, void *))(**(void **)(*(void *)(v18 + 8) + 16LL) + 40LL))( *(void *)(*(void *)(v18 + 8) + 16LL),  a2,  a3,  a4,  a5,  a6);
}

void sub_A299C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A29D0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  if (*a2 != 1953719148)
  {
    char v32 = (os_log_t *)sub_138E8(13);
    unsigned int v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)__int16 v47 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)&v47[10] = 2207;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 2210);
  uint64_t v12 = *(void *)&v47[4];
  while (1)
  {
    uint64_t v13 = *(void *)(v12 + 16);
    strcpy((char *)v41, "#sTTptuo");
    BYTE1(v41[2]) = 0;
    HIWORD(v41[2]) = 0;
    uint64_t v12 = *(void *)(v12 + 8);
  }

  if ((uint8_t *)v12 == buf)
  {
LABEL_8:
    int v15 = sub_77A54(a2[1]);
    uint64_t v16 = a1 + 520;
    uint64_t v17 = 520LL;
    if (v15)
    {
      uint64_t v17 = 544LL;
      uint64_t v16 = a1 + 544;
    }

    uint64_t v18 = *(uint64_t **)(a1 + v17);
    for (uint64_t i = *(uint64_t **)(v16 + 8); v18 != i; v18 += 2)
    {
      if (v15 == sub_6ADEC(*v18))
      {
        uint64_t v20 = *(void *)(*v18 + 136);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v20 + 88LL))( v20,  1987013737LL,  64001LL,  0LL))
        {
          BOOL v21 = *(std::__shared_weak_count **)(*v18 + 176);
          if (v21)
          {
            uint64_t v22 = *(void *)(*v18 + 168);
            p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
            do
              unint64_t v24 = __ldxr(p_shared_weak_owners);
            while (__stxr(v24 + 1, p_shared_weak_owners));
            size_t v25 = std::__shared_weak_count::lock(v21);
            unsigned int v40 = v25;
            if (v25)
            {
              int v26 = v25;
              uint64_t v39 = v22;
              if (v22)
              {
                int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)v20 + 64LL))( v20,  1987013737LL,  1601402742LL,  &v38,  0LL);
                if (v27)
                {
                  int v35 = (os_log_t *)sub_138E8(13);
                  __int16 v36 = *v35;
                  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
                  {
                    v41[0] = 136315650;
                    *(void *)&v41[1] = "AggregateDevice_CommonBase.cpp";
                    __int16 v42 = 1024;
                    int v43 = 2235;
                    __int16 v44 = 1024;
                    int v45 = v27;
                    _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) obtaining DSP Parameter rela ted to ThermalScalarGain property",  (uint8_t *)v41,  0x18u);
                  }

                  unsigned int v37 = __cxa_allocate_exception(0x10uLL);
                  *(void *)unsigned int v37 = &off_4865A0;
                  v37[2] = v27;
                }

                int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 136LL))(v22);
                float v29 = v38;
                if (v28 != 1935895666) {
                  float v29 = sub_757A4((uint64_t)&unk_48CE10, v38);
                }
                *a6 = v29;
              }

              p_shared_owners = (unint64_t *)&v26->__shared_owners_;
              do
                unint64_t v31 = __ldaxr(p_shared_owners);
              while (__stlxr(v31 - 1, p_shared_owners));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }

            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
  }

  else
  {
    uint64_t v14 = *(void *)(v12 + 16);
    strcpy((char *)v41, "#sTTptuo");
    BYTE1(v41[2]) = 0;
    HIWORD(v41[2]) = 0;
    (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, float *))(*(void *)v14 + 40LL))( v14,  v41,  a3,  a4,  a5,  a6);
  }

  sub_1BB88((uint64_t *)buf);
}

void sub_A2DBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_A2E1C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, CFDictionaryRef *a5)
{
  if (*a2 != 1886413426)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2775;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a2[1] == 1869968496)
  {
    sub_9D988(&v31, (void *)(a1 + 184), "", 2778);
    uint64_t v29 = 0x6F75747050504272LL;
    int v30 = 0;
    float v9 = v32;
    int v28 = 0;
    uint64_t v27 = 0x6F75747050504272LL;
    if (v32 != &v31)
    {
      while (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9[2] + 16LL))(v9[2], &v27) & 1) == 0)
      {
        float v9 = (uint64_t *)v9[1];
        if (v9 == &v31) {
          goto LABEL_32;
        }
      }

      if (v9 != &v31)
      {
        int v25 = 8;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, int *, uint64_t *))(*(void *)v9[2] + 40LL))( v9[2],  &v29,  a3,  a4,  &v25,  &v26);
        uint64_t v41 = v26;
        __p[0] = &v41;
        __p[1] = &dword_0 + 2;
        CFArrayRef v10 = sub_A98C4((uint64_t)__p);
        v24[0] = v10;
        sub_A9A88((uint64_t)&v33, v24);
        *(void *)buf = &v33;
        *(void *)&buf[8] = 1LL;
        CFDictionaryRef v11 = sub_5A950((uint64_t)buf);
        v24[1] = v11;
        if (cf) {
          CFRelease(cf);
        }
        if (v33) {
          CFRelease(v33);
        }
        if (v10) {
          CFRelease(v10);
        }
        uint64_t v12 = sub_138E8(16);
        if ((*(_BYTE *)(v12 + 8) & 1) != 0)
        {
          uint64_t v13 = *(os_log_s **)v12;
          if (*(void *)v12)
          {
            if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = *a2;
              else {
                int v15 = off_471298[v14];
              }
              sub_7D084(&v33, v15);
              if (v35 >= 0) {
                uint64_t v16 = &v33;
              }
              else {
                uint64_t v16 = (void *)v33;
              }
              uint64_t v17 = CFCopyDescription(v11);
              sub_48188((uint64_t)__p, v17);
              if (v17) {
                CFRelease(v17);
              }
              uint64_t v18 = __p;
              if (v23 < 0) {
                uint64_t v18 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2794;
              __int16 v37 = 2080;
              float v38 = v16;
              __int16 v39 = 2080;
              unsigned int v40 = v18;
              _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Legacy: Get %s Dictionary description: %s",  buf,  0x26u);
              if (v23 < 0) {
                operator delete(__p[0]);
              }
              if (v35 < 0) {
                operator delete((void *)v33);
              }
            }
          }
        }

        *a5 = v11;
      }
    }

void sub_A31A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_A3254(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, _DWORD *a5, CFDictionaryRef *a6)
{
  if (*a2 != 1952997988)
  {
    uint64_t v31 = (os_log_t *)sub_138E8(13);
    char v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v47 = 136315394;
      *(void *)&v47[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v47[12] = 1024;
      *(_DWORD *)&_BYTE v47[14] = 2290;
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v47, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a2[1] == 1869968496)
  {
    int v12 = sub_1CB4A0();
    uint64_t v13 = (void *)(a1 + 184);
    if (v12)
    {
      sub_9D988((uint64_t *)v47, v13, "", 2295);
      uint64_t v14 = *(void *)&v47[8];
      if (*(_BYTE **)&v47[8] == v47)
      {
LABEL_7:
        if (a4)
        {
          sub_9EB48();
          sub_19DDF0(*a4);
        }

        int v15 = (os_log_t *)sub_138E8(16);
        uint64_t v16 = *v15;
        if (*v15)
        {
          if (os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2320;
            _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS: Getting Speaker ThermalBudget", buf, 0x12u);
          }
        }

        uint64_t v17 = sub_9EB48();
        sub_1A06BC((uint64_t)buf, v17, 0);
      }

      else
      {
        while (!sub_CFDD4(*(void *)(v14 + 16)))
        {
          uint64_t v14 = *(void *)(v14 + 8);
          if ((_BYTE *)v14 == v47) {
            goto LABEL_7;
          }
        }

        uint64_t v27 = sub_9EB48();
        sub_1A06BC((uint64_t)buf, v27, 1);
      }

      *a6 = *(CFDictionaryRef *)buf;
      *a5 = *(_DWORD *)&buf[8];
      uint64_t v26 = (uint64_t *)v47;
    }

    else
    {
      sub_9D988((uint64_t *)buf, v13, "", 2330);
      uint64_t v42 = 0x6F75747054684277LL;
      int v43 = 0;
      uint64_t v18 = *(void *)&buf[8];
      int v41 = 0;
      uint64_t v40 = 0x6F75747054684277LL;
      while ((_BYTE *)v18 != buf)
      {
        if (((*(uint64_t (**)(void, uint64_t *))(**(void **)(v18 + 16) + 16LL))( *(void *)(v18 + 16),  &v40) & 1) != 0)
        {
          if ((_BYTE *)v18 != buf)
          {
            int v38 = 4;
            int v39 = 0;
            (*(void (**)(void, uint64_t *, uint64_t, int *, int *, int *))(**(void **)(v18 + 16) + 40LL))( *(void *)(v18 + 16),  &v42,  a3,  a4,  &v38,  &v39);
            sub_59370((CFStringRef *)&v44, "HapticTargetPower");
            LODWORD(__p[0]) = v39;
            CFTypeRef cf = CFNumberCreate(0LL, kCFNumberIntType, __p);
            if (!cf)
            {
              int v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v34, "Could not construct");
            }

            *(void *)__int16 v47 = &v44;
            *(void *)&v47[8] = 1LL;
            CFDictionaryRef v19 = sub_5A950((uint64_t)v47);
            CFDictionaryRef v37 = v19;
            if (cf) {
              CFRelease(cf);
            }
            if (v44) {
              CFRelease(v44);
            }
            uint64_t v20 = sub_138E8(16);
            if ((*(_BYTE *)(v20 + 8) & 1) != 0)
            {
              BOOL v21 = *(os_log_s **)v20;
              if (*(void *)v20)
              {
                if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v22 = *a2;
                  else {
                    char v23 = off_471298[v22];
                  }
                  sub_7D084(&v44, v23);
                  if (v46 >= 0) {
                    int v28 = &v44;
                  }
                  else {
                    int v28 = (void *)v44;
                  }
                  uint64_t v29 = CFCopyDescription(v19);
                  sub_48188((uint64_t)__p, v29);
                  if (v29) {
                    CFRelease(v29);
                  }
                  int v30 = __p;
                  if (v36 < 0) {
                    int v30 = (void **)__p[0];
                  }
                  *(_DWORD *)__int16 v47 = 136315906;
                  *(void *)&v47[4] = "AggregateDevice_CommonBase.cpp";
                  *(_WORD *)&v47[12] = 1024;
                  *(_DWORD *)&_BYTE v47[14] = 2344;
                  __int16 v48 = 2080;
                  int v49 = v28;
                  __int16 v50 = 2080;
                  uint64_t v51 = v30;
                  _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Legacy: Get %s Dictionary description: %s",  v47,  0x26u);
                  if (v36 < 0) {
                    operator delete(__p[0]);
                  }
                  if (v46 < 0) {
                    operator delete((void *)v44);
                  }
                }
              }
            }

            *a6 = v19;
            goto LABEL_32;
          }

          break;
        }

        uint64_t v18 = *(void *)(v18 + 8);
      }

      unint64_t v24 = (os_log_t *)sub_138E8(16);
      int v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int16 v47 = 136315394;
        *(void *)&v47[4] = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&_BYTE v47[14] = 2349;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d kVirtualAudioDevicePropertyThermalBudget for CPMS is a write-only property",  v47,  0x12u);
      }

      *a5 = 0;
LABEL_32:
      uint64_t v26 = (uint64_t *)buf;
    }

    sub_1BB88(v26);
  }

void sub_A3778( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, CFTypeRef cf, int a20, __int16 a21, char a22, char a23, char a24)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_A3870(uint64_t a1, int a2, int a3, uint64_t a4, int *a5, _DWORD *a6, CFDictionaryRef *a7)
{
  if (a2 != 1952998002)
  {
    int v54 = (os_log_t *)sub_138E8(13);
    unint64_t v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2500;
      _os_log_impl(&dword_0, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 != 1869968496) {
    return;
  }
  sub_9D988(&v162, (void *)(a1 + 184), "", 2503);
  if (!sub_1CB4A0())
  {
    values = (void **)0x6F75747054684272LL;
    LODWORD(v174) = 0;
    int v12 = v163;
    int v161 = 0;
    uint64_t v160 = 0x6F75747054684272LL;
    while (v12 != &v162)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v12[2] + 16LL))(v12[2], &v160) & 1) != 0)
      {
        if (v12 != &v162)
        {
          LODWORD(v165) = 8;
          (*(void (**)(uint64_t, void ***, uint64_t, int *, uint64_t *, CFTypeRef *))(*(void *)v12[2] + 40LL))( v12[2],  &values,  a4,  a5,  &v165,  cf);
          CFTypeRef v179 = cf[0];
          uint64_t v175 = (uint64_t)&v179;
          v176[0] = (void *)(&dword_0 + 2);
          int v25 = (uint64_t *)sub_A98C4((uint64_t)&v175);
          v166 = v25;
          sub_A9A88((uint64_t)&v180, (const void **)&v166);
          *(void *)buf = &v180;
          *(void *)&buf[8] = 1LL;
          CFDictionaryRef v26 = sub_5A950((uint64_t)buf);
          v168 = (uint64_t **)v26;
          if (v181) {
            CFRelease(v181);
          }
          if (v180) {
            CFRelease((CFTypeRef)v180);
          }
          if (v25) {
            CFRelease(v25);
          }
          uint64_t v27 = sub_138E8(16);
          if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          {
            int v28 = *(os_log_s **)v27;
            if (*(void *)v27)
            {
              if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v29 = CFCopyDescription(v26);
                sub_48188((uint64_t)&v180, v29);
                if (v29) {
                  CFRelease(v29);
                }
                int v30 = &v180;
                if (v183 < 0) {
                  int v30 = (uint64_t *)v180;
                }
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2579;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v30;
                _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Legacy: Get ThermalBudgetRange Dictionary description: %s",  buf,  0x1Cu);
                if (v183 < 0) {
                  operator delete((void *)v180);
                }
              }
            }
          }

          *a7 = v26;
          *a6 = 8;
        }

        goto LABEL_85;
      }

      int v12 = (uint64_t *)v12[1];
    }

    goto LABEL_85;
  }

  for (uint64_t i = v163; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == &v162)
    {
      if (a5)
      {
        sub_9EB48();
      }

      v176[0] = 0LL;
      v176[1] = 0LL;
      uint64_t v175 = (uint64_t)v176;
      sub_156BE8(&v180);
      uint64_t v13 = (void ***)v180;
      if ((uint64_t **)v180 == v181)
      {
        uint64_t v31 = (os_log_t *)sub_138E8(13);
        char v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1287;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "IODeviceTree:/product/audio";
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = "speaker-cpms-bgd_inst";
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
            buf,
            0x26u);
        }

        uint64_t v16 = 0LL;
        CFTypeRef v33 = 0LL;
        if (!v13)
        {
LABEL_53:
          values = v33;
          sub_156F84((const __CFString *)qword_48F6C8, &values, (uint64_t **)&v175);
          sub_15684C(&v180);
          int v34 = (void ***)v180;
          if ((uint64_t **)v180 == v181)
          {
            int v38 = (os_log_t *)sub_138E8(13);
            int v39 = *v38;
            if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1287;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = "IODeviceTree:/product/audio";
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = "speaker-cpms-bgd_100ms";
              _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
                buf,
                0x26u);
            }

            CFDictionaryRef v37 = 0LL;
            uint64_t v40 = 0LL;
            if (!v34)
            {
LABEL_64:
              values = v40;
              sub_156F84((const __CFString *)qword_48F6C0, &values, (uint64_t **)&v175);
              sub_1563D0(&v180);
              int v41 = (void ***)v180;
              if ((uint64_t **)v180 == v181)
              {
                int v45 = (os_log_t *)sub_138E8(13);
                char v46 = *v45;
                if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315906;
                  *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1287;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = "IODeviceTree:/product/audio";
                  *(_WORD *)&buf[28] = 2080;
                  *(void *)&buf[30] = "speaker-cpms-bgd_1s";
                  _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
                    buf,
                    0x26u);
                }

                CFTypeRef v44 = 0LL;
                __int16 v47 = 0LL;
                if (!v41) {
                  goto LABEL_75;
                }
              }

              else
              {
                uint64_t v42 = sub_138E8(13);
                if ((*(_BYTE *)(v42 + 8) & 1) != 0)
                {
                  int v43 = *(os_log_s **)v42;
                  if (*(void *)v42)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 1282;
                      *(_WORD *)&_BYTE buf[18] = 2080;
                      *(void *)&buf[20] = "speaker-cpms-bgd_1s";
                      _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Power Budget T::key %s returned valid",  buf,  0x1Cu);
                    }
                  }
                }

                CFTypeRef v44 = *v41;
              }

              operator delete(v41);
              __int16 v47 = v44;
LABEL_75:
              values = v47;
              sub_156F84((const __CFString *)qword_48F6B8, &values, (uint64_t **)&v175);
              sub_1572EC((CFDictionaryRef *)cf, &v175);
              __int16 v48 = (os_log_t *)sub_138E8(13);
              int v49 = *v48;
              if (*v48)
              {
                BOOL v50 = os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT);
                uint64_t v51 = (const __CFDictionary *)cf[0];
                if (v50)
                {
                  unsigned int v52 = CFCopyDescription(cf[0]);
                  sub_48188((uint64_t)&v180, v52);
                  if (v52) {
                    CFRelease(v52);
                  }
                  __int16 v53 = &v180;
                  if (v183 < 0) {
                    __int16 v53 = (uint64_t *)v180;
                  }
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1408;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = v53;
                  _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS-Speaker: Get ThermalBudgetRange Array description: %s",  buf,  0x1Cu);
                  if (v183 < 0) {
                    operator delete((void *)v180);
                  }
                }
              }

              else
              {
                uint64_t v51 = (const __CFDictionary *)cf[0];
              }

              sub_157508(v176[0]);
              *a7 = v51;
              goto LABEL_85;
            }
          }

          else
          {
            uint64_t v35 = sub_138E8(13);
            if ((*(_BYTE *)(v35 + 8) & 1) != 0)
            {
              char v36 = *(os_log_s **)v35;
              if (*(void *)v35)
              {
                if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1282;
                  *(_WORD *)&_BYTE buf[18] = 2080;
                  *(void *)&buf[20] = "speaker-cpms-bgd_100ms";
                  _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Power Budget T::key %s returned valid",  buf,  0x1Cu);
                }
              }
            }

            CFDictionaryRef v37 = *v34;
          }

          operator delete(v34);
          uint64_t v40 = v37;
          goto LABEL_64;
        }
      }

      else
      {
        uint64_t v14 = sub_138E8(13);
        if ((*(_BYTE *)(v14 + 8) & 1) != 0)
        {
          int v15 = *(os_log_s **)v14;
          if (*(void *)v14)
          {
            if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1282;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = "speaker-cpms-bgd_inst";
              _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Power Budget T::key %s returned valid",  buf,  0x1Cu);
            }
          }
        }

        uint64_t v16 = *v13;
      }

      operator delete(v13);
      CFTypeRef v33 = v16;
      goto LABEL_53;
    }

    if (sub_CFDD4(i[2])) {
      break;
    }
  }

  v167[0] = 0LL;
  v167[1] = 0LL;
  v166 = (uint64_t *)v167;
  v156 = a5;
  v157 = a7;
  unsigned int v155 = a4;
  io_registry_entry_t v17 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v17)
  {
    char v57 = (os_log_t *)sub_138E8(13);
    unint64_t v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    __int128 v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v59, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  uint64_t v18 = CFStringCreateWithBytes(0LL, (const UInt8 *)"actuator-cpms-bgd_inst", 22LL, 0x8000100u, 0);
  *(void *)buf = v18;
  if (!v18)
  {
    int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v17, v18, kCFAllocatorDefault, 0);
  sub_14591C(&v175, CFProperty);
  if (!v175)
  {
    __int16 v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Could not construct");
  }

  sub_15676C(&v180, (const void *)v175);
  if (v175) {
    CFRelease((CFTypeRef)v175);
  }
  CFRelease(v18);
  IOObjectRelease(v17);
  BOOL v21 = (uint64_t *)v180;
  uint64_t v20 = v181;
  if ((uint64_t **)v180 != v181)
  {
    uint64_t v22 = sub_138E8(13);
    if ((*(_BYTE *)(v22 + 8) & 1) != 0)
    {
      char v23 = *(os_log_s **)v22;
      if (*(void *)v22)
      {
        if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1282;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "actuator-cpms-bgd_inst";
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Power Budget T::key %s returned valid",  buf,  0x1Cu);
        }
      }
    }

    uint64_t v24 = *v21;
    goto LABEL_101;
  }

  __int128 v62 = (os_log_t *)sub_138E8(13);
  uint64_t v63 = *v62;
  if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1287;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = "IODeviceTree:/product/audio";
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = "actuator-cpms-bgd_inst";
    _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
      buf,
      0x26u);
  }

  uint64_t v24 = 0LL;
  uint64_t v64 = 0LL;
  if (v20)
  {
LABEL_101:
    operator delete(v21);
    uint64_t v64 = v24;
  }

  uint64_t v165 = v64;
  sub_156F84((const __CFString *)qword_48F6C8, &v165, &v166);
  io_registry_entry_t v65 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v65)
  {
    __int128 v73 = (os_log_t *)sub_138E8(13);
    v74 = *v73;
    if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    v75 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v75, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  v66 = CFStringCreateWithBytes(0LL, (const UInt8 *)"actuator-cpms-bgd_100ms", 23LL, 0x8000100u, 0);
  *(void *)buf = v66;
  if (!v66)
  {
    uint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Could not construct");
  }

  CFTypeRef v67 = IORegistryEntryCreateCFProperty(v65, v66, kCFAllocatorDefault, 0);
  sub_14591C(&v175, v67);
  if (!v175)
  {
    int64x2_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Could not construct");
  }

  sub_15676C(&v180, (const void *)v175);
  if (v175) {
    CFRelease((CFTypeRef)v175);
  }
  CFRelease(v66);
  IOObjectRelease(v65);
  __int128 v69 = (uint64_t *)v180;
  float v68 = v181;
  if ((uint64_t **)v180 != v181)
  {
    uint64_t v70 = sub_138E8(13);
    if ((*(_BYTE *)(v70 + 8) & 1) != 0)
    {
      v71 = *(os_log_s **)v70;
      if (*(void *)v70)
      {
        if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1282;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "actuator-cpms-bgd_100ms";
          _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Power Budget T::key %s returned valid",  buf,  0x1Cu);
        }
      }
    }

    uint64_t v72 = *v69;
    goto LABEL_123;
  }

  v78 = (os_log_t *)sub_138E8(13);
  v79 = *v78;
  if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1287;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = "IODeviceTree:/product/audio";
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = "actuator-cpms-bgd_100ms";
    _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
      buf,
      0x26u);
  }

  uint64_t v72 = 0LL;
  uint64_t v80 = 0LL;
  if (v68)
  {
LABEL_123:
    operator delete(v69);
    uint64_t v80 = v72;
  }

  uint64_t v165 = v80;
  sub_156F84((const __CFString *)qword_48F6C0, &v165, &v166);
  io_registry_entry_t v81 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v81)
  {
    v89 = (os_log_t *)sub_138E8(13);
    v90 = *v89;
    if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v91, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  v82 = CFStringCreateWithBytes(0LL, (const UInt8 *)"actuator-cpms-bgd_1s", 20LL, 0x8000100u, 0);
  *(void *)buf = v82;
  if (!v82)
  {
    v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Could not construct");
  }

  CFTypeRef v83 = IORegistryEntryCreateCFProperty(v81, v82, kCFAllocatorDefault, 0);
  sub_14591C(&v175, v83);
  if (!v175)
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
  }

  sub_15676C(&v180, (const void *)v175);
  if (v175) {
    CFRelease((CFTypeRef)v175);
  }
  CFRelease(v82);
  IOObjectRelease(v81);
  v85 = (uint64_t *)v180;
  v84 = v181;
  if ((uint64_t **)v180 != v181)
  {
    uint64_t v86 = sub_138E8(13);
    if ((*(_BYTE *)(v86 + 8) & 1) != 0)
    {
      v87 = *(os_log_s **)v86;
      if (*(void *)v86)
      {
        if (os_log_type_enabled(*(os_log_t *)v86, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1282;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "actuator-cpms-bgd_1s";
          _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Power Budget T::key %s returned valid",  buf,  0x1Cu);
        }
      }
    }

    uint64_t v88 = *v85;
    goto LABEL_145;
  }

  v94 = (os_log_t *)sub_138E8(13);
  v95 = *v94;
  if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1287;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = "IODeviceTree:/product/audio";
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = "actuator-cpms-bgd_1s";
    _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
      buf,
      0x26u);
  }

  uint64_t v88 = 0LL;
  uint64_t v96 = 0LL;
  if (v84)
  {
LABEL_145:
    operator delete(v85);
    uint64_t v96 = v88;
  }

  uint64_t v165 = v96;
  sub_156F84((const __CFString *)qword_48F6B8, &v165, &v166);
  sub_1572EC((CFDictionaryRef *)&v164, &v166);
  uint64_t v97 = sub_9EB48();
  CFTypeRef v98 = v164;
  if (!v164)
  {
    v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v153, "Could not construct");
    goto LABEL_234;
  }

  uint64_t v99 = v97;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v98))
  {
    v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v153, "Could not convert");
LABEL_234:
  }

  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v98);
  v169 = 0LL;
  uint64_t v170 = 0LL;
  v168 = &v169;
  sub_7E328(&v175, Count);
  sub_7E328(&values, Count);
  uint64_t v154 = v99;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)v98, (const void **)v175, (const void **)values);
  CFIndex v158 = Count;
  if (Count)
  {
    uint64_t v102 = 0LL;
    while (1)
    {
      sub_48100((uint64_t)cf, *(const __CFString **)(v175 + 8 * v102));
      v103 = values[v102];
      if (!v103 || (CFTypeID v104 = CFArrayGetTypeID(), v104 != CFGetTypeID(v103)))
      {
        v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v152, "Could not convert");
      }

      CFIndex v105 = CFArrayGetCount((CFArrayRef)v103);
      int v106 = v105;
      if (v105 << 32)
      {
        if (v105 << 32 < 0) {
          sub_7A87C();
        }
        v107 = (char *)sub_7A890((int)v105);
        v109 = &v107[4 * v108];
        int64x2_t v110 = vdupq_n_s64((unint64_t)v107);
      }

      else
      {
        v109 = 0LL;
        int64x2_t v110 = 0uLL;
      }

      int64x2_t v159 = v110;
      if (v106 >= 1)
      {
        CFIndex v111 = 0LL;
        uint64_t v112 = v106;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v103, v111);
          int v114 = sub_A12A8(ValueAtIndex);
          int v115 = v114;
          uint64_t v116 = v159.i64[1];
          if (v159.i64[1] >= (unint64_t)v109)
          {
            v118 = (void *)v159.i64[0];
            uint64_t v119 = (v159.i64[1] - v159.i64[0]) >> 2;
            unint64_t v120 = v119 + 1;
            else {
              unint64_t v121 = v120;
            }
            if (v121) {
              unint64_t v121 = (unint64_t)sub_7A890(v121);
            }
            else {
              uint64_t v122 = 0LL;
            }
            v123 = (_DWORD *)(v121 + 4 * v119);
            _DWORD *v123 = v115;
            uint64_t v117 = (uint64_t)(v123 + 1);
            while (v116 != v159.i64[0])
            {
              int v124 = *(_DWORD *)(v116 - 4);
              v116 -= 4LL;
              *--v123 = v124;
            }

            v109 = (char *)(v121 + 4 * v122);
            v159.i64[0] = (uint64_t)v123;
            if (v118) {
              operator delete(v118);
            }
          }

          else
          {
            *(_DWORD *)v159.i64[1] = v114;
            uint64_t v117 = v159.i64[1] + 4;
          }

          v125.i64[0] = v159.i64[0];
          v125.i64[1] = v117;
          int64x2_t v159 = v125;
          ++v111;
        }

        while (v111 != v112);
      }

      *(_OWORD *)buf = *(_OWORD *)cf;
      uint64_t v126 = v172;
      cf[1] = 0LL;
      uint64_t v172 = 0LL;
      cf[0] = 0LL;
      *(int64x2_t *)&buf[24] = v159;
      *(void *)&buf[16] = v126;
      v178 = v109;
      v127 = sub_845D8((uint64_t)&v168, &v179, (void **)buf);
      v128 = (void *)v159.i64[0];
      if (!*v127) {
        break;
      }
      if (v159.i64[0]) {
        goto LABEL_177;
      }
LABEL_178:
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v172) < 0) {
        operator delete((void *)cf[0]);
      }
      if (++v102 == v158) {
        goto LABEL_191;
      }
    }

    v129 = operator new(0x50uLL);
    uint64_t v180 = (uint64_t)v129;
    v181 = &v169;
    char v182 = 0;
    v130 = v129 + 4;
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_24054(v130, *(void **)buf, *(unint64_t *)&buf[8]);
      int64x2_t v131 = *(int64x2_t *)&buf[24];
      v109 = v178;
    }

    else
    {
      *(_OWORD *)v130 = *(_OWORD *)buf;
      v129[6] = *(void *)&buf[16];
      int64x2_t v131 = v159;
    }

    *(int64x2_t *)(v129 + 7) = v131;
    v129[9] = v109;
    *(void *)&buf[32] = 0LL;
    v178 = 0LL;
    *(void *)&buf[24] = 0LL;
    char v182 = 1;
    CFTypeRef v132 = v179;
    void *v129 = 0LL;
    v129[1] = 0LL;
    v129[2] = v132;
    void *v127 = v129;
    if (*v168)
    {
      v168 = (uint64_t **)*v168;
      v129 = (void *)*v127;
    }

    sub_7A420(v169, v129);
    ++v170;
    uint64_t v180 = 0LL;
    sub_1576A8((uint64_t)&v180);
    v128 = *(void **)&buf[24];
    if (!*(void *)&buf[24]) {
      goto LABEL_178;
    }
LABEL_177:
    *(void *)&buf[32] = v128;
    operator delete(v128);
    goto LABEL_178;
  }

void sub_A566C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

void sub_A568C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, const void *a24)
{
  if (v24) {
    CFRelease(v24);
  }
  sub_7A708(&a24);
  JUMPOUT(0xA57F8LL);
}

void sub_A56BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_A56D0()
{
}

void sub_A56E8()
{
}

void sub_A56F0()
{
}

void sub_A5700( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  int v39 = *(void **)(v38 - 216);
  if (v39)
  {
    *(void *)(v38 - 208) = v39;
    operator delete(v39);
  }

  sub_157508(a30);
  JUMPOUT(0xA57F0LL);
}

void sub_A5710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27)
{
}

void sub_A5724( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_A5730()
{
}

void sub_A5754( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0xA57C8LL);
}

void sub_A5768()
{
}

void sub_A5770( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  CFDictionaryRef v37 = *(void **)(v36 - 216);
  if (v37)
  {
    *(void *)(v36 - 208) = v37;
    operator delete(v37);
  }

  sub_157508(a30);
  JUMPOUT(0xA57F0LL);
}

void sub_A577C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0xA57C8LL);
}

void sub_A5790()
{
}

void sub_A5798( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0xA57C8LL);
}

void sub_A57A0()
{
}

uint64_t sub_A5810(uint64_t result, int a2, int a3, _DWORD *a4, uint64_t a5)
{
  if (a2 != 1869574756)
  {
    BOOL v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v29 = "AggregateDevice_CommonBase.cpp";
      __int16 v30 = 1024;
      int v31 = 2590;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 == 1768845428)
  {
    uint64_t v5 = *(void *)(result + 520);
    for (uint64_t i = *(void *)(result + 528); v5 != i; v5 += 16LL)
    {
      uint64_t v9 = *(void *)(*(void *)v5 + 136LL);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 88LL))( v9,  1685287015LL,  1818980210LL,  0LL);
      if ((_DWORD)result)
      {
        int v26 = 4;
        int v27 = 0;
        int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, int *, void, void))(*(void *)v9 + 104LL))( v9,  1685287015LL,  1818980210LL,  &v27,  &v26,  0LL,  0LL);
        if (v10)
        {
          uint64_t v18 = (os_log_t *)sub_138E8(13);
          CFDictionaryRef v19 = *v18;
          if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v29 = "AggregateDevice_CommonBase.cpp";
            __int16 v30 = 1024;
            int v31 = 2603;
            __int16 v32 = 1024;
            int v33 = v10;
            _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) obtaining DSP Property for lock orientation",  buf,  0x18u);
          }

          uint64_t v20 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v20 = &off_4865A0;
          v20[2] = v10;
        }

        *(_DWORD *)a5 = v27;
        uint64_t v25 = 0LL;
        int v24 = 8;
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 88LL))( v9,  1685287015LL,  1869768052LL,  0LL) & 1) == 0)
        {
          int v12 = (os_log_t *)sub_138E8(13);
          uint64_t v13 = *v12;
          if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v29 = "AggregateDevice_CommonBase.cpp";
            __int16 v30 = 1024;
            int v31 = 2610;
            _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): LockOrientation Property is present, but OrientationEffectiveT ime is missing",  buf,  0x12u);
          }

          uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error( v14,  "LockOrientation Property is present, but OrientationEffectiveTime is missing");
        }

        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, int *, void, void))(*(void *)v9 + 104LL))( v9,  1685287015LL,  1869768052LL,  &v25,  &v24,  0LL,  0LL);
        int v11 = result;
        if ((_DWORD)result)
        {
          int v15 = (os_log_t *)sub_138E8(13);
          uint64_t v16 = *v15;
          if (*v15)
          {
            if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v29 = "AggregateDevice_CommonBase.cpp";
              __int16 v30 = 1024;
              int v31 = 2613;
              __int16 v32 = 1024;
              int v33 = v11;
              _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) obtaining DSP Property for orienta tion effective time",  buf,  0x18u);
            }
          }

          io_registry_entry_t v17 = __cxa_allocate_exception(0x10uLL);
          *(void *)io_registry_entry_t v17 = &off_4865A0;
          v17[2] = v11;
        }

        *(void *)(a5 + 8) = v25;
        *a4 = 16;
      }
    }
  }

  return result;
}

void sub_A5C3C(_Unwind_Exception *a1)
{
}

uint64_t sub_A5C5C(uint64_t result, int a2, int a3, int *a4, _DWORD *a5)
{
  if (a2 != 1869575794)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v20 = "AggregateDevice_CommonBase.cpp";
      __int16 v21 = 1024;
      int v22 = 2660;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 == 1768845428)
  {
    uint64_t v5 = *(void *)(result + 520);
    for (uint64_t i = *(void *)(result + 528); v5 != i; v5 += 16LL)
    {
      uint64_t v9 = *(void *)(*(void *)v5 + 136LL);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 88LL))( v9,  1685287015LL,  1818980210LL,  0LL);
      if ((_DWORD)result)
      {
        int v17 = 4;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, int *, void, void))(*(void *)v9 + 104LL))( v9,  1685287015LL,  1818980210LL,  &v18,  &v17,  0LL,  0LL);
        int v10 = result;
        if ((_DWORD)result)
        {
          int v11 = (os_log_t *)sub_138E8(13);
          int v12 = *v11;
          if (*v11)
          {
            if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v20 = "AggregateDevice_CommonBase.cpp";
              __int16 v21 = 1024;
              int v22 = 2672;
              __int16 v23 = 1024;
              int v24 = v10;
              _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) obtaining DSP Property for lock orientation",  buf,  0x18u);
            }
          }

          uint64_t v13 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v13 = &off_4865A0;
          v13[2] = v10;
        }

        *a5 = v18;
        *a4 = v17;
      }
    }
  }

  return result;
}

void sub_A5EC0(_Unwind_Exception *a1)
{
}

void sub_A5EDC(void *a1, int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  if (a2 != 1969844082)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    CFDictionaryRef v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v25 = "AggregateDevice_CommonBase.cpp";
      __int16 v26 = 1024;
      int v27 = 2707;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 == 1768845428)
  {
    uint64_t v6 = a1[65];
    for (uint64_t i = a1[66]; v6 != i; v6 += 16LL)
    {
      uint64_t v10 = *(void *)(*(void *)v6 + 136LL);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t, void))(*a1 + 384LL))( a1,  1685287015LL,  1818980210LL,  0LL)
        && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v10 + 56LL))( v10,  1685287015LL,  1969844082LL,  0LL))
      {
        int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)v10 + 64LL))( v10,  1685287015LL,  1969844082LL,  &v23,  0LL);
        int v12 = (os_log_t *)sub_138E8(16);
        uint64_t v13 = *v12;
        if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(__p, 1969844082LL);
          uint64_t v14 = __p;
          if (v22 < 0) {
            uint64_t v14 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          uint64_t v25 = "AggregateDevice_CommonBase.cpp";
          __int16 v26 = 1024;
          int v27 = 2721;
          __int16 v28 = 2080;
          uint64_t v29 = v14;
          __int16 v30 = 1024;
          int v31 = (int)v23;
          _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Getting UI orientation {%s, %d}", buf, 0x22u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }

        if (v11)
        {
          int v15 = (os_log_t *)sub_138E8(13);
          uint64_t v16 = *v15;
          if (*v15)
          {
            if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v25 = "AggregateDevice_CommonBase.cpp";
              __int16 v26 = 1024;
              int v27 = 2723;
              __int16 v28 = 1024;
              LODWORD(v29) = v11;
              _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) obtaining DSP param for UI orientation",  buf,  0x18u);
            }
          }

          int v17 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v17 = &off_4865A0;
          v17[2] = v11;
        }

        *a5 = v23;
        *a4 = 4;
      }
    }
  }

void sub_A6238(_Unwind_Exception *a1)
{
}

void sub_A6254( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, _DWORD *a6)
{
  if (a2->mSelector != 1718839674 && a2->mSelector != 1902539642)
  {
    uint64_t v25 = (os_log_t *)sub_138E8(13);
    __int16 v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v34 = 1024;
        int v35 = 3089;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned int outData = 0;
  uint64_t PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), a2, a3, a4, a5, &outData);
  if ((_DWORD)PropertyData)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(16);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v30, a2->mSelector);
      int v18 = v31;
      CFDictionaryRef v19 = (void **)v30[0];
      sub_2CA1C(__p, PropertyData);
      uint64_t v20 = v30;
      if (v18 < 0) {
        uint64_t v20 = v19;
      }
      if (v29 >= 0) {
        __int16 v21 = __p;
      }
      else {
        __int16 v21 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 3093;
      __int16 v36 = 2080;
      CFDictionaryRef v37 = v20;
      __int16 v38 = 2080;
      int v39 = v21;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectGetPropertyData() for selector '%s' returned status '%s'.",  buf,  0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }

    char v22 = (os_log_t *)sub_138E8(13);
    float v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 3094;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to obtain property data.",  buf,  0x12u);
    }

    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_4865A0;
    v24[2] = PropertyData;
  }

  if (sub_6C978(a1))
  {
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v12 = sub_5C2F8(a1);
    *((void *)&v15 + 1) = v13;
    *(void *)&__int128 v15 = v12;
    uint64_t v14 = v15 >> 32;
    if ((v14 & 0xFF00000000LL) == 0
      || !(_DWORD)v14
      || (_os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") & 1) == 0)
    {
      outData >>= 4;
    }
  }

  sub_5CABC(outData, a5, a6);
}

void sub_A658C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_A65BC(uint64_t a1, int a2, unsigned int a3, const __CFString *a4, void *a5)
{
  if (a2 != 1685287011)
  {
    uint64_t v42 = (os_log_t *)sub_138E8(13);
    int v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2990;
      _os_log_impl(&dword_0, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v8 = sub_77A54(a3);
  uint64_t v9 = a1 + 520;
  uint64_t v10 = 520LL;
  if (v8)
  {
    uint64_t v10 = 544LL;
    uint64_t v9 = a1 + 544;
  }

  uint64_t v11 = *(void *)(a1 + v10);
  for (uint64_t i = *(void *)(v9 + 8); v11 != i; v11 += 16LL)
  {
    uint64_t v13 = *(void *)(*(void *)v11 + 136LL);
    uint64_t v14 = (os_log_t *)sub_138E8(26);
    __int128 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      sub_48E98(__p, a4);
      uint64_t v16 = __p;
      if (v46 < 0) {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2996;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Get DSPConfig Qualifier String: %s", buf, 0x1Cu);
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
    }

    if (CFStringCompare(a4, @"haptics protection mode", 0LL))
    {
      if (CFStringCompare(a4, @"loudness normalizer reset", 0LL))
      {
        if (CFStringCompare(a4, @"dsp chain name", 0LL))
        {
          if (CFStringCompare(a4, @"dsp chain active", 0LL) == kCFCompareEqualTo)
          {
            id v17 = *(id *)sub_138E8(24);
            int v18 = v17;
            if (v17)
            {
              CFDictionaryRef v19 = (os_log_s *)v17;
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
              {
                if (*(_BYTE *)(v13 + 448) || *(void *)(v13 + 584) || *(void *)(v13 + 672)) {
                  uint64_t v20 = "yes";
                }
                else {
                  uint64_t v20 = "no";
                }
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "DSPChain.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2947;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v20;
                _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSP chain is active: %s", buf, 0x1Cu);
              }
            }

            if (*(_BYTE *)(v13 + 448) || *(void *)(v13 + 584) || (CFBooleanRef v21 = kCFBooleanFalse, *(void *)(v13 + 672))) {
              CFBooleanRef v21 = kCFBooleanTrue;
            }
            *a5 = v21;
          }
        }

        else
        {
          id v27 = *(id *)sub_138E8(24);
          __int16 v28 = v27;
          if (v27)
          {
            char v29 = (os_log_s *)v27;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(v13 + 735) < 0)
              {
                sub_24054(__p, *(void **)(v13 + 712), *(void *)(v13 + 720));
              }

              else
              {
                *(_OWORD *)__p = *(_OWORD *)(v13 + 712);
                uint64_t v46 = *(void *)(v13 + 728);
              }

              __int16 v30 = __p;
              if (v46 < 0) {
                __int16 v30 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "DSPChain.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2942;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v30;
              _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChain Name: %s", buf, 0x1Cu);
              if (SHIBYTE(v46) < 0) {
                operator delete(__p[0]);
              }
            }
          }

          if (*(char *)(v13 + 735) < 0)
          {
            sub_24054(buf, *(void **)(v13 + 712), *(void *)(v13 + 720));
          }

          else
          {
            *(_OWORD *)buf = *(_OWORD *)(v13 + 712);
            *(void *)&buf[16] = *(void *)(v13 + 728);
          }

          if (buf[23] >= 0) {
            char v31 = buf;
          }
          else {
            char v31 = *(const char **)buf;
          }
          *a5 = CFStringCreateWithCString(kCFAllocatorDefault, v31, 0x600u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        continue;
      }

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88LL))( v13,  1818521197LL,  1920165236LL,  0LL))
      {
        int v47 = 4;
        int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, int *, void, void))(*(void *)v13 + 104LL))( v13,  1818521197LL,  1920165236LL,  __p,  &v47,  0LL,  0LL);
        if (v25)
        {
          uint64_t v37 = sub_138E8(13);
          id v38 = sub_8C7D4(1, *(void **)v37, *(void *)(v37 + 8));
          int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          uint64_t v40 = v39;
          if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2934;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = v25;
            _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) getting AULoudnessNormalizer",  buf,  0x18u);
          }

          int v41 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v41 = &off_4865A0;
          v41[2] = v25;
        }

        *(_DWORD *)a5 = __p[0];
        __int16 v26 = (os_log_s *)*(id *)sub_138E8(26);
        int v24 = v26;
        if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2937;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = __p[0];
          _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LoudnessNormalizer Reset: %u", buf, 0x18u);
        }

void sub_A6DD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

void sub_A6E14(uint64_t a1, _DWORD *a2, CFDictionaryRef *a3)
{
  float v6 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 360LL))( a1,  1685287015LL,  1852076912LL,  0LL);
  float v7 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 360LL))( a1,  1685287015LL,  1835623283LL,  0LL);
  float v8 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 360LL))( a1,  1685287015LL,  1919247987LL,  0LL);
  sub_59370(&v17, "DSP channels");
  unsigned int valuePtr = v6;
  if (!CFNumberCreate(0LL, kCFNumberIntType, &valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  unsigned int valuePtr = v7;
  sub_A97FC((uint64_t)&v19, "mics", (int *)&valuePtr);
  unsigned int v14 = v8;
  sub_A97FC((uint64_t)v20, "refs", (int *)&v14);
  v15[0] = &v17;
  v15[1] = 3LL;
  CFDictionaryRef v9 = sub_5A950((uint64_t)v15);
  for (uint64_t i = 0LL; i != -48; i -= 16LL)
  {
    uint64_t v11 = *(const void **)&v20[i + 8];
    if (v11) {
      CFRelease(v11);
    }
    unint64_t v12 = *(const void **)&v20[i];
    if (v12) {
      CFRelease(v12);
    }
  }

  *a2 = 8;
  *a3 = v9;
}

void sub_A6FF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_7DCC4(&a14);
  _Unwind_Resume(a1);
}

void sub_A7098( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, unsigned int *a4, UInt32 *a5, float *a6)
{
  if (*(_BYTE *)(a1 + 296))
  {
    sub_289E4(*(_DWORD *)(a1 + 128), a2, a3, a4, a5, a6);
  }

  else
  {
    if (a3 != 4 || !a4)
    {
      unsigned int v14 = (os_log_t *)sub_138E8(13);
      __int128 v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v29);
        uint64_t v16 = v32 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136316674;
        __int16 v34 = "AggregateDevice_CommonBase.cpp";
        __int16 v35 = 1024;
        int v36 = 3339;
        __int16 v37 = 2080;
        id v38 = v16;
        __int16 v39 = 1024;
        int v40 = 4;
        __int16 v41 = 2080;
        uint64_t v42 = "non-";
        __int16 v43 = 1024;
        UInt32 v44 = a3;
        __int16 v45 = 2048;
        uint64_t v46 = a4;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 561211770;
    }

    UInt32 v11 = *a5;
    if (v11 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, unsigned int *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4))
    {
      int v18 = (os_log_t *)sub_138E8(13);
      uint64_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v29);
        int v20 = v32;
        CFBooleanRef v21 = (void **)__p[0];
        UInt32 v22 = *a5;
        int v23 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, unsigned int *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4);
        int v24 = __p;
        *(_DWORD *)buf = 136316162;
        __int16 v34 = "AggregateDevice_CommonBase.cpp";
        if (v20 < 0) {
          int v24 = v21;
        }
        __int16 v35 = 1024;
        int v36 = 3340;
        __int16 v37 = 2080;
        id v38 = v24;
        __int16 v39 = 1024;
        int v40 = v22;
        __int16 v41 = 1024;
        LODWORD(v42) = v23;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }

      int v25 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v25 = &off_4865A0;
      v25[2] = 561211770;
    }

    AudioObjectPropertyScope mScope = a2->mScope;
    if (mScope != 1768845428 && mScope != 1869968496)
    {
      __int16 v26 = (os_log_t *)sub_138E8(13);
      id v27 = *v26;
      if (*v26)
      {
        if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v34 = "AggregateDevice_CommonBase.cpp";
          __int16 v35 = 1024;
          int v36 = 3341;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      __int16 v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v28, "Precondition failure.");
    }

    *a6 = (*(float (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 360LL))( a1,  1685287015LL,  *a4,  0LL);
  }

void sub_A74C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A74F4( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, unsigned int *a4, UInt32 *a5, void *a6)
{
  if (*(_BYTE *)(a1 + 296)) {
    return sub_289E4(*(_DWORD *)(a1 + 128), a2, a3, a4, a5, a6);
  }
  if (a3 != 4 || !a4)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    UInt32 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      unint64_t v12 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316674;
      int v24 = "AggregateDevice_CommonBase.cpp";
      __int16 v25 = 1024;
      int v26 = 3211;
      __int16 v27 = 2080;
      __int16 v28 = v12;
      __int16 v29 = 1024;
      int v30 = 4;
      __int16 v31 = 2080;
      char v32 = "non-";
      __int16 v33 = 1024;
      UInt32 v34 = a3;
      __int16 v35 = 2048;
      int v36 = a4;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %s NULL (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x3Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  AudioObjectPropertyScope mScope = a2->mScope;
  if (mScope != 1768845428 && mScope != 1869968496)
  {
    unsigned int v14 = (os_log_t *)sub_138E8(13);
    __int128 v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v24 = "AggregateDevice_CommonBase.cpp";
        __int16 v25 = 1024;
        int v26 = 3212;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    uint64_t v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void *, UInt32 *, BOOL, void))(*(void *)a1 + 408LL))( a1,  1685287015LL,  *a4,  a6,  a5,  mScope != 1768845428,  a2->mElement);
}

void sub_A779C(_Unwind_Exception *a1)
{
}

uint64_t sub_A77B8(_BYTE *a1, uint64_t *a2, int a3, unsigned int *a4, int *a5, _DWORD *a6)
{
  if (a1[296])
  {
    uint64_t result = 1LL;
  }

  else
  {
    if (a3 != 4 || !a4)
    {
      __int128 v15 = (os_log_t *)sub_138E8(13);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v30);
        CFStringRef v17 = v33 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136316674;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3322;
        __int16 v38 = 2080;
        __int16 v39 = v17;
        __int16 v40 = 1024;
        int v41 = 4;
        __int16 v42 = 2080;
        __int16 v43 = "non-";
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 2048;
        int v47 = a4;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 561211770;
    }

    int v13 = *a5;
    if (v13 != (*(unsigned int (**)(_BYTE *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4))
    {
      uint64_t v19 = (os_log_t *)sub_138E8(13);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v30);
        int v21 = v33;
        char v22 = (void **)__p[0];
        int v23 = *a5;
        int v24 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4);
        __int16 v25 = __p;
        *(_DWORD *)buf = 136316162;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        if (v21 < 0) {
          __int16 v25 = v22;
        }
        __int16 v36 = 1024;
        int v37 = 3323;
        __int16 v38 = 2080;
        __int16 v39 = v25;
        __int16 v40 = 1024;
        int v41 = v23;
        __int16 v42 = 1024;
        LODWORD(v43) = v24;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }

      int v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v26 = &off_4865A0;
      v26[2] = 561211770;
    }

    int v14 = *((_DWORD *)a2 + 1);
    if (v14 != 1768845428 && v14 != 1869968496)
    {
      __int16 v27 = (os_log_t *)sub_138E8(13);
      __int16 v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3324;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      __int16 v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v29, "Precondition failure.");
    }

    uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, void, void))(*(void *)a1 + 352LL))( a1,  1685287015LL,  *a4,  0LL);
  }

  *a6 = result;
  return result;
}

void sub_A7B9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A7BD0(_BYTE *a1, uint64_t *a2, int a3, unsigned int *a4, int *a5, _DWORD *a6)
{
  if (a1[296])
  {
    uint64_t result = 1LL;
  }

  else
  {
    if (a3 != 4 || !a4)
    {
      __int128 v15 = (os_log_t *)sub_138E8(13);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v30);
        CFStringRef v17 = v33 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136316674;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3281;
        __int16 v38 = 2080;
        __int16 v39 = v17;
        __int16 v40 = 1024;
        int v41 = 4;
        __int16 v42 = 2080;
        __int16 v43 = "non-";
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 2048;
        int v47 = a4;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 561211770;
    }

    int v13 = *a5;
    if (v13 != (*(unsigned int (**)(_BYTE *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4))
    {
      uint64_t v19 = (os_log_t *)sub_138E8(13);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v30);
        int v21 = v33;
        char v22 = (void **)__p[0];
        int v23 = *a5;
        int v24 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4);
        __int16 v25 = __p;
        *(_DWORD *)buf = 136316162;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        if (v21 < 0) {
          __int16 v25 = v22;
        }
        __int16 v36 = 1024;
        int v37 = 3282;
        __int16 v38 = 2080;
        __int16 v39 = v25;
        __int16 v40 = 1024;
        int v41 = v23;
        __int16 v42 = 1024;
        LODWORD(v43) = v24;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }

      int v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v26 = &off_4865A0;
      v26[2] = 561211770;
    }

    int v14 = *((_DWORD *)a2 + 1);
    if (v14 != 1768845428 && v14 != 1869968496)
    {
      __int16 v27 = (os_log_t *)sub_138E8(13);
      __int16 v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3283;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      __int16 v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v29, "Precondition failure.");
    }

    uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, void, void))(*(void *)a1 + 384LL))( a1,  1685287015LL,  *a4,  0LL);
  }

  *a6 = result;
  return result;
}

void sub_A7FB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_A7FE8(_BYTE *__src, _BYTE *a2, _DWORD *a3, void *__dst)
{
  size_t v5 = a2 - __src;
  unint64_t v6 = *a3;
  if ((a2 - __src) >> 3 > v6 >> 3)
  {
    float v7 = (os_log_t *)sub_138E8(13);
    float v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "StandardUtilities.h";
      __int16 v15 = 1024;
      int v16 = 221;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): provided vector exceeds the size of the provided array.",  (uint8_t *)&v13,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "provided vector exceeds the size of the provided array.");
  }

  if (!(_DWORD)v6)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    UInt32 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "StandardUtilities.h";
      __int16 v15 = 1024;
      int v16 = 222;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): ioDataSize is 0.",  (uint8_t *)&v13,  0x12u);
    }

    unint64_t v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "ioDataSize is 0.");
  }

  if (a2 != __src)
  {
    *a3 = v5 & 0xFFFFFFF8;
    return memmove(__dst, __src, v5);
  }

  return __src;
}

void sub_A81D4(_Unwind_Exception *a1)
{
}

uint64_t sub_A81F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 1685220966LL;
  if (a1 != a2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)v10 + 136LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 88LL))( v11,  1936748595LL,  a3,  0LL))
      {
        break;
      }

      v10 += 16LL;
      if (v10 == a2) {
        return v5;
      }
    }

    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v11 + 104LL))( v11,  1936748595LL,  a3,  a4,  a5,  0LL,  0LL);
    uint64_t v13 = sub_138E8(16);
    uint64_t v14 = sub_138E8(24);
    char v15 = 0;
    uint64_t v16 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&buf[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1LL;
      if ((v19 & 1) != 0)
      {
        if ((v17 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_14;
      }
    }

    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
    if ((*(void *)(v13 + 8) & 1) != 0)
    {
LABEL_14:
      int v20 = *(os_log_s **)v13;
      if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v34 = 1024;
        int v35 = 3376;
        __int16 v36 = 1024;
        *(_DWORD *)int v37 = a3;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v12;
        _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->GetDSPProperty(%u): %d.", buf, 0x1Eu);
      }
    }

void sub_A84FC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_A851C(CFDictionaryRef *a1, uint64_t a2)
{
  CFTypeID v4 = v93;
  if (!v93) {
    goto LABEL_137;
  }
  int v5 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v93->_os_unfair_lock_opaque + 88LL))( v93,  0LL);
  v90 = 0LL;
  v91 = 0LL;
  unint64_t v6 = (unsigned __int8 *)v4;
  unint64_t v92 = 0LL;
  if (v5)
  {
    uint64_t v7 = sub_A09AC(v4);
    (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *, void, uint64_t))(*(void *)&v4->_os_unfair_lock_opaque
                                                                                     + 256LL))( v97,  v4,  0LL,  v7);
    valuePtr[0] = 0LL;
    if (*(void *)&v97[8])
    {
      float v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&v97[8]);
      valuePtr[1] = v8;
      if (v8)
      {
        uint64_t v9 = *(void *)v97;
        valuePtr[0] = *(const void **)v97;
      }

      else
      {
        uint64_t v9 = 0LL;
      }

      if (*(void *)&v97[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v97[8]);
      }
      if (v9)
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v9 + 144LL))(v97, v9);
        uint64_t v10 = *(uint64_t **)v97;
        uint64_t v11 = *(uint64_t **)&v97[8];
        if (*(void *)v97 != *(void *)&v97[8])
        {
          do
          {
            int v12 = (std::__shared_weak_count *)v10[1];
            if (v12)
            {
              uint64_t v13 = std::__shared_weak_count::lock(v12);
              v95.i64[1] = (uint64_t)v13;
              if (v13)
              {
                uint64_t v14 = v13;
                uint64_t v15 = *v10;
                v95.i64[0] = v15;
                if (v15 && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 152LL))(v15))
                {
                  __p[0] = (void *)0x676C6F62766F6C6DLL;
                  LODWORD(__p[1]) = 0;
                  unint64_t v16 = sub_5C2F8(v15);
                  *((void *)&v18 + 1) = v17;
                  *(void *)&__int128 v18 = v16;
                  if (((v18 >> 32) & 0xFF00000000LL) != 0) {
                    float v19 = *((float *)&v16 + 1);
                  }
                  else {
                    float v19 = 0.0;
                  }
                  int v2 = (char *)v91;
                  if ((unint64_t)v91 >= v92)
                  {
                    int v21 = (char *)v90;
                    uint64_t v22 = ((char *)v91 - (_BYTE *)v90) >> 2;
                    unint64_t v23 = v22 + 1;
                    uint64_t v24 = v92 - (void)v90;
                    else {
                      unint64_t v25 = v23;
                    }
                    if (v25) {
                      unint64_t v25 = (unint64_t)sub_7A890(v25);
                    }
                    else {
                      uint64_t v26 = 0LL;
                    }
                    __int16 v27 = (float *)(v25 + 4 * v22);
                    *__int16 v27 = v19;
                    int v20 = v27 + 1;
                    while (v2 != v21)
                    {
                      int v28 = *((_DWORD *)v2 - 1);
                      v2 -= 4;
                      *((_DWORD *)v27-- - 1) = v28;
                    }

                    v90 = v27;
                    unint64_t v92 = v25 + 4 * v26;
                    if (v21) {
                      operator delete(v21);
                    }
                  }

                  else
                  {
                    float *v91 = v19;
                    v2 += 4;
                    int v20 = (float *)v2;
                  }

                  v91 = v20;
                }

                p_shared_owners = (unint64_t *)&v14->__shared_owners_;
                do
                  unint64_t v30 = __ldaxr(p_shared_owners);
                while (__stlxr(v30 - 1, p_shared_owners));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                  std::__shared_weak_count::__release_weak(v14);
                }
              }
            }

            v10 += 2;
          }

          while (v10 != v11);
          float v8 = (std::__shared_weak_count *)valuePtr[1];
        }

        v95.i64[0] = (uint64_t)v97;
        sub_A0CF0((void ***)&v95);
      }

      if (v8)
      {
        int v31 = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }

    unint64_t v6 = (unsigned __int8 *)v93;
  }

  strcpy((char *)__p, "#rsnbolg");
  BYTE1(__p[1]) = 0;
  WORD1(__p[1]) = 0;
  if ((sub_5C3C4((uint64_t)v6) & 1) != 0)
  {
    *(_DWORD *)uint64_t v97 = 2003329396;
    v97[8] = 0;
    LOBYTE(v99) = 0;
    unsigned int v33 = sub_5C41C((uint64_t)v6);
    LODWORD(v89[0]) = v33;
    if (v33)
    {
      sub_76F28(valuePtr, v33 >> 4);
      *(_DWORD *)uint64_t v97 = sub_5C474((uint64_t)v6);
      if (*(_DWORD *)v97)
      {
        int v34 = 0;
        v95.i8[0] = 0;
      }

      else
      {
        __int16 v38 = sub_A9634((void **)&v97[8], valuePtr);
        v95.i8[0] = 0;
        if ((_BYTE)v99)
        {
          int64x2_t v95 = *(int64x2_t *)&v97[8];
          int v2 = (char *)v98;
          v38[1] = 0LL;
          v38[2] = 0LL;
          *__int16 v38 = 0LL;
          int v34 = 1;
        }

        else
        {
          int v34 = 0;
        }
      }

      int v39 = v34;
      if (valuePtr[0])
      {
        valuePtr[1] = valuePtr[0];
        operator delete((void *)valuePtr[0]);
        int v39 = v99;
      }

      if (v39 && *(void *)&v97[8])
      {
        *(void *)&v97[16] = *(void *)&v97[8];
        operator delete(*(void **)&v97[8]);
      }

      v97[0] = 0;
      BOOL v37 = v34 == 0;
      if (!v34)
      {
        int v35 = 0LL;
        __int16 v36 = valuePtr;
        goto LABEL_64;
      }
    }

    else
    {
      BOOL v37 = 0;
      int v2 = 0LL;
      int64x2_t v95 = 0uLL;
      v97[0] = 0;
    }

    *(int64x2_t *)uint64_t v97 = v95;
    *(void *)&v97[16] = v2;
    LOBYTE(v98) = 1;
    int v35 = (__int128 *)v95.i64[1];
    __int16 v36 = (const void **)v97;
  }

  else
  {
    int v35 = 0LL;
    v95.i8[0] = 0;
    v97[0] = 0;
    __int16 v36 = valuePtr;
    BOOL v37 = 1;
  }

LABEL_64:
  memset(valuePtr, 0, sizeof(valuePtr));
  int v40 = (__int128 *)*v36;
  v36[1] = 0LL;
  v36[2] = 0LL;
  unsigned int *v36 = 0LL;
  if (valuePtr[0]) {
    operator delete((void *)valuePtr[0]);
  }
  if (!v37 && *(void *)v97) {
    operator delete(*(void **)v97);
  }
  *(void *)&v97[8] = 0LL;
  *(void *)&v97[16] = 0LL;
  *(void *)uint64_t v97 = &v97[8];
  if (v40 == v35) {
    goto LABEL_89;
  }
  int v41 = v40;
  do
  {
    __int128 v85 = *v41;
    sub_A924C((uint64_t *)v97, *(double *)&v85, *(double *)&v85);
    sub_A924C((uint64_t *)v97, *((double *)&v85 + 1), *((double *)&v85 + 1));
    ++v41;
  }

  while (v41 != v35);
  __int16 v42 = *(double **)v97;
  if (*(_BYTE **)v97 == &v97[8])
  {
LABEL_89:
    int v49 = 0LL;
    BOOL v50 = 0LL;
  }

  else
  {
    unint64_t v43 = 0LL;
    __int16 v44 = *(_BYTE **)v97;
    do
    {
      unint64_t v45 = v43;
      __int16 v46 = (void *)*((void *)v44 + 1);
      if (v46)
      {
        do
        {
          int v47 = v46;
          __int16 v46 = (void *)*v46;
        }

        while (v46);
      }

      else
      {
        do
        {
          int v47 = (_BYTE *)*((void *)v44 + 2);
          BOOL v48 = *(void *)v47 == (void)v44;
          __int16 v44 = v47;
        }

        while (!v48);
      }

      unint64_t v43 = v45 + 1;
      __int16 v44 = v47;
    }

    while (v47 != &v97[8]);
    if (v45 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_7A87C();
    }
    int v49 = (double *)operator new(8 * v43);
    BOOL v50 = v49;
    do
    {
      *BOOL v50 = v42[4];
      uint64_t v51 = (double *)*((void *)v42 + 1);
      if (v51)
      {
        do
        {
          unsigned int v52 = v51;
          uint64_t v51 = *(double **)v51;
        }

        while (v51);
      }

      else
      {
        do
        {
          unsigned int v52 = (double *)*((void *)v42 + 2);
          BOOL v48 = *(void *)v52 == (void)v42;
          __int16 v42 = v52;
        }

        while (!v48);
      }

      ++v50;
      __int16 v42 = v52;
    }

    while (v52 != (double *)&v97[8]);
  }

  sub_32C8C(*(void **)&v97[8]);
  if (v40) {
    operator delete(v40);
  }
  BOOL v53 = v91 != v90;
  (*(void (**)(CFStringRef *__return_ptr, unsigned __int8 *))(*(void *)v6 + 128LL))(theString, v6);
  sub_48E98(__p, theString[0]);
  sub_59370((CFStringRef *)v97, "accessory UID");
  if ((v88 & 0x80u) == 0) {
    int v54 = __p;
  }
  else {
    int v54 = (void **)__p[0];
  }
  if ((v88 & 0x80u) == 0) {
    CFIndex v55 = v88;
  }
  else {
    CFIndex v55 = (CFIndex)__p[1];
  }
  *(void *)&v97[8] = CFStringCreateWithBytes(0LL, (const UInt8 *)v54, v55, 0x8000100u, 0);
  if (!*(void *)&v97[8])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_59370((CFStringRef *)&v97[16], "accessory capabilities");
  LODWORD(valuePtr[0]) = ((unint64_t)((char *)v50 - (char *)v49) > 8) | (2 * v53);
  CFNumberRef v98 = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
  if (!v98)
  {
    v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v79, "Could not construct");
  }

  if (((*(uint64_t (**)(unsigned __int8 *))(*(void *)v6 + 392LL))(v6) & 1) == 0)
  {
    uint64_t v80 = (os_log_t *)sub_138E8(13);
    io_registry_entry_t v81 = *v80;
    if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
    {
      LODWORD(valuePtr[0]) = 136315394;
      *(const void **)((char *)valuePtr + 4) = "PhysicalDevice.h";
      WORD2(valuePtr[1]) = 1024;
      *(_DWORD *)((char *)&valuePtr[1] + 6) = 414;
      _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)valuePtr,  0x12u);
    }

    v82 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v82, "Precondition failure.");
  }

  if ((sub_9D704(v6) & 1) != 0) {
    int v56 = 0;
  }
  else {
    int v56 = *((_DWORD *)v6 + 64);
  }
  sub_59370(&v99, "accessory available control token");
  LODWORD(valuePtr[0]) = v56;
  if (!CFNumberCreate(0LL, kCFNumberIntType, valuePtr))
  {
    CFTypeRef v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
  }

  sub_59370(v101, "accessory supported sample rates");
  int64x2_t v95 = 0uLL;
  unint64_t v96 = 0LL;
  sub_7E058(&v95, v50 - v49);
  if (v49 != v50)
  {
    char v57 = (CFNumberRef *)v95.i64[1];
    unint64_t v58 = v49;
    do
    {
      double v59 = *v58;
      if ((unint64_t)v57 >= v96)
      {
        uint64_t v60 = ((uint64_t)v57 - v95.i64[0]) >> 3;
        unint64_t v61 = (uint64_t)(v96 - v95.i64[0]) >> 2;
        if (v61 <= v60 + 1) {
          unint64_t v61 = v60 + 1;
        }
        if (v96 - v95.i64[0] >= 0x7FFFFFFFFFFFFFF8LL) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v61;
        }
        uint64_t v108 = &v96;
        if (v62) {
          unint64_t v62 = (unint64_t)sub_7DC90(v62);
        }
        else {
          uint64_t v63 = 0LL;
        }
        valuePtr[0] = (const void *)v62;
        valuePtr[1] = (const void *)(v62 + 8 * v60);
        valuePtr[2] = valuePtr[1];
        unint64_t v107 = v62 + 8 * v63;
        sub_A9588((CFNumberRef *)valuePtr[1], v59);
        uint64_t v64 = (char *)valuePtr[1];
        char v57 = (CFNumberRef *)((char *)valuePtr[2] + 8);
        valuePtr[2] = (char *)valuePtr[2] + 8;
        io_registry_entry_t v65 = (void *)v95.i64[1];
        v66 = (void *)v95.i64[0];
        if (v95.i64[1] == v95.i64[0])
        {
          int64x2_t v68 = vdupq_n_s64(v95.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v67 = *--v65;
            *((void *)v64 - 1) = v67;
            v64 -= 8;
            void *v65 = 0LL;
          }

          while (v65 != v66);
          int64x2_t v68 = v95;
          char v57 = (CFNumberRef *)valuePtr[2];
        }

        v95.i64[0] = (uint64_t)v64;
        v95.i64[1] = (uint64_t)v57;
        *(int64x2_t *)&valuePtr[1] = v68;
        unint64_t v69 = v96;
        unint64_t v96 = v107;
        unint64_t v107 = v69;
        valuePtr[0] = (const void *)v68.i64[0];
        sub_7E2DC((uint64_t)valuePtr);
      }

      else
      {
        sub_A9588(v57++, *v58);
      }

      v95.i64[1] = (uint64_t)v57;
      ++v58;
    }

    while (v58 != v50);
  }

  uint64_t v70 = (const __CFString *)sub_7E114((uint64_t **)&v95);
  valuePtr[0] = &v95;
  sub_7E254((void ***)valuePtr);
  v101[1] = v70;
  double v71 = (*(double (**)(unsigned __int8 *))(*(void *)v6 + 104LL))(v6);
  sub_59370(&v102, "accessory current sample rate");
  valuePtr[0] = *(const void **)&v71;
  if (!CFNumberCreate(0LL, kCFNumberDoubleType, valuePtr))
  {
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
  }

  sub_59370(&v104, "accessory input channel gains");
  CFArrayRef v105 = sub_A9308((float **)&v90);
  v89[0] = v97;
  v89[1] = 6LL;
  uint64_t v72 = 0LL;
  *a1 = sub_5A950((uint64_t)v89);
  do
  {
    __int128 v73 = valuePtr[v72 - 1];
    if (v73) {
      CFRelease(v73);
    }
    v74 = *(CFStringRef *)((char *)&v104 + v72 * 8);
    if (v74) {
      CFRelease(v74);
    }
    v72 -= 2LL;
  }

  while (v72 != -12);
  sub_19DFC((uint64_t)theString);
  if (v49) {
    operator delete(v49);
  }
  if (v90) {
    operator delete(v90);
  }
LABEL_137:
  v75 = v94;
  if (!v94) {
    goto LABEL_141;
  }
  uint64_t v76 = (unint64_t *)&v94->__shared_owners_;
  do
    unint64_t v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_141:
    if (v4) {
      return;
    }
    goto LABEL_142;
  }

  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
  std::__shared_weak_count::__release_weak(v75);
  if (!v4) {
LABEL_142:
  }
    *a1 = 0LL;
}

  if (v55) {
    (*(void (**)(void *))(*v54 + 24LL))(v54);
  }
}

    unint64_t v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "Precondition failure.");
  }

  if (CFStringCompare(a2, kCTAudioSampleRateSwitchCompleteNotification, 0LL))
  {
    if (CFStringCompare(a2, kCTDaemonReadyNotification, 0LL))
    {
      if (CFStringCompare(a2, kCTConnectionInvalidatedNotification, 0LL) == kCFCompareEqualTo) {
        v5[8] = 0;
      }
    }

    else
    {
      v5[8] = 1;
      uint64_t v13 = atomic_load(v5 + 9);
      if ((v13 & 1) != 0)
      {
        atomic_store(0, v5 + 9);
        __p = v5;
        unsigned int v33 = 1;
        LODWORD(v35) = 0;
        v38[0] = v5;
        v38[1] = &v35;
        int v39 = &__p;
        sub_1620D4((uint64_t)v38);
      }

      sub_15C4D0(v5);
    }

    goto LABEL_41;
  }

  if (!cfa)
  {
    int v28 = (os_log_t *)sub_138E8(13);
    __int16 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      int v41 = 1024;
      __int16 v42 = 576;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_64;
  }

  sub_15F86C();
  if (qword_48ECE8)
  {
    if (!cfa)
    {
      int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }

    uint64_t v11 = (const __CFBoolean *)sub_A15A4((const __CFDictionary *)cfa, kCTAudioSampleRateSwitchCompleteStatus);
    if (v11)
    {
      LOWORD(v11) = sub_476EC(v11);
      int v12 = BYTE1(v11);
    }

    else
    {
      int v12 = 0;
    }

    uint64_t v14 = v11 | (v12 << 8);
    if (v14 <= 0x100) {
      LOBYTE(v14) = 0;
    }
    if (!(_BYTE)v14)
    {
      uint64_t v15 = sub_138E8(12);
      unint64_t v16 = sub_138E8(39);
      uint64_t v17 = 0;
      __int128 v18 = 0LL;
      *(void *)buf = 0x100000002LL;
      float v19 = *(void *)(v15 + 8);
      while (1)
      {
        int v20 = *(int *)&buf[4 * v18];
        int v21 = v17;
        if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
          break;
        }
        uint64_t v17 = 1;
        __int128 v18 = 1LL;
        if ((v21 & 1) != 0) {
          goto LABEL_50;
        }
      }

      if ((v19 & v20) == 0) {
        uint64_t v15 = v16;
      }
LABEL_50:
      uint64_t v22 = *(os_log_s **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
        int v41 = 1024;
        __int16 v42 = 586;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Sample rate switch did not complete, this most likely means we are on a VoWifi call, so dont wait for confirmation",  buf,  0x12u);
      }
    }

    sub_15F86C();
    dispatch_semaphore_signal((dispatch_semaphore_t)qword_48ECE8);
  }

        if (v31) {
          goto LABEL_65;
        }
LABEL_66:
        if (v24) {
          std::__shared_weak_count::__release_weak(v24);
        }
        if (!v41)
        {
          uint64_t v13 = (uint64_t *)v13[1];
          if (v13 != v76) {
            continue;
          }
        }

        goto LABEL_78;
      }
    }

    int v41 = 0;
LABEL_78:
    sub_116394(v70);
    sub_B8CBC((uint64_t *)buf, (uint64_t *)(v10 + 16), "", 80);
    __int16 v46 = *(std::__shared_weak_count **)&buf[8];
    int v47 = *(_DWORD *)(*(void *)buf + 144LL);
    if (*(void *)&buf[8])
    {
      BOOL v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        int v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    if (v47 == 1885433888)
    {
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(v10 + 32), "", 82);
      BOOL v50 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v51 = *(_DWORD *)(*(void *)buf + 144LL);
      if (*(void *)&buf[8])
      {
        unsigned int v52 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          BOOL v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }

      v65 |= v51 == 1885888867;
      HIDWORD(v66) |= v51 != 1885888867;
    }

    else
    {
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(v10 + 16), "", 91);
      int v54 = *(std::__shared_weak_count **)&buf[8];
      CFIndex v55 = *(_DWORD *)(*(void *)buf + 144LL);
      if (*(void *)&buf[8])
      {
        int v56 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          char v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }

      LODWORD(v66) = (v55 == 1885433443) | v66;
    }

    uint64_t v11 = v68 & v41;
    uint64_t v10 = *(void *)(v10 + 8);
  }

  while (*v67 + 4 != (unsigned int *)v10);
  if ((v11 & HIDWORD(v66) & 1) != 0)
  {
    unint64_t v58 = *((void *)*v67 + 4);
  }

  else
  {
LABEL_102:
    double v59 = 0LL;
  }

  uint64_t v60 = sub_138E8(19);
  if ((*(_BYTE *)(v60 + 8) & 1) != 0)
  {
    unint64_t v61 = *(os_log_s **)v60;
    if (*(void *)v60)
    {
      if (os_log_type_enabled(*(os_log_t *)v60, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA51C(&__p, *v67);
        unint64_t v62 = "doesn't handle";
        *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        if ((_DWORD)v59) {
          unint64_t v62 = "handles";
        }
        *(_DWORD *)buf = 136315906;
        *(_DWORD *)&buf[14] = 105;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v79 = 2080;
        uint64_t v80 = v62;
        io_registry_entry_t v81 = 2080;
        v82 = p_p;
        _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RoutingHandler_SplitterPlayback %s the given route %s.",  buf,  0x26u);
      }
    }
  }

  sub_85B80(v76);
  return v59;
}

          sub_1A8240((uint64_t)a4, v19);
          goto LABEL_73;
        }

        if (v19 <= 1819173228)
        {
          if (v19 != 1768256368 && v19 != 1768256371) {
            goto LABEL_76;
          }
        }

        else
        {
          if (v19 == 1819173229)
          {
            __int16 v38 = sub_869B4();
            uint64_t v22 = operator new(8uLL);
            *uint64_t v22 = a4;
            unint64_t v23 = (dispatch_queue_s *)v38;
            uint64_t v24 = (void (__cdecl *)(void *))sub_1A88B0;
LABEL_72:
            dispatch_async_f(v23, v22, v24);
            goto LABEL_73;
          }

          if (v19 == 1819505773)
          {
            int v39 = sub_869B4();
            uint64_t v22 = operator new(8uLL);
            *uint64_t v22 = a4;
            unint64_t v23 = (dispatch_queue_s *)v39;
            uint64_t v24 = (void (__cdecl *)(void *))sub_1A8F6C;
            goto LABEL_72;
          }

          if (v19 != 1886546291) {
            goto LABEL_76;
          }
        }

        sub_1A63F0((uint64_t)a4);
      }

  if (*(_BYTE *)(a2 + 120))
  {
    if (v15) {
      std::string::append(&v36, ", ", 2uLL);
    }
    std::string::append(&v36, "ANC: 1", 6uLL);
    int v21 = *(void *)(a2 + 148);
    if ((v21 & 0xFF00000000LL) == 0) {
      goto LABEL_87;
    }
    goto LABEL_71;
  }

  int v21 = *(void *)(a2 + 148);
  if ((v21 & 0xFF00000000LL) != 0)
  {
    if ((v15 & 1) == 0)
    {
LABEL_72:
      sub_2CA1C(&v37, v21);
      uint64_t v22 = std::string::insert(&v37, 0LL, "isolatedUseCaseID: ", 0x13uLL);
      unint64_t v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0LL;
      v22->__r_.__value_.__l.__cap_ = 0LL;
      v22->__r_.__value_.__r.__words[0] = 0LL;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v24 = &__p;
      }
      else {
        uint64_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v25 = __p.__r_.__value_.__s.__size_;
      }
      else {
        unint64_t v25 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v36, (const std::string::value_type *)v24, v25);
      goto LABEL_87;
    }

  int v28 = xmmword_49D360;
  __int16 v29 = *(void **)(xmmword_49D360 + 8 * v6);
  if (v29)
  {
    *(void *)uint64_t i = *v29;
LABEL_72:
    std::logic_error *v29 = i;
    goto LABEL_73;
  }

  *(void *)uint64_t i = qword_49D370;
  qword_49D370 = (uint64_t)i;
  *(void *)(v28 + 8 * v6) = &qword_49D370;
  if (*(void *)i)
  {
    unint64_t v30 = *(void *)(*(void *)i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v30 >= v7) {
        v30 %= v7;
      }
    }

    else
    {
      v30 &= v7 - 1;
    }

    __int16 v29 = (void *)(xmmword_49D360 + 8 * v30);
    goto LABEL_72;
  }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  int v5 = (__int128 *)(a1 + 40);
  CFTypeID v4 = sub_273BC(v3, a1 + 40);
  if (v4)
  {
    uint64_t v63 = (os_log_t *)sub_138E8(13);
    unint64_t v61 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 179;
      unint64_t v62 = "%25s:%-5d EXCEPTION (result) [error result is an error]: Stream::GetCurrentFormat() returned an error.";
      goto LABEL_63;
    }

    goto LABEL_64;
  }

  if (*(_DWORD *)(a1 + 48) != 1819304813 || *(_DWORD *)(a1 + 88) != 1819304813) {
    goto LABEL_51;
  }
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    unint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    *(void *)&buf[8] = v6;
    if (v6)
    {
      unint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
      *(void *)buf = v6;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  float v8 = (double)sub_6BA08((uint64_t)v6);
  uint64_t v9 = *(double *)(a1 + 80);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      uint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  int v12 = v8 / v9;
  if (*(_BYTE *)(a1 + 272))
  {
    uint64_t v13 = sub_6ADEC(v71);
    uint64_t v14 = (_OWORD *)(a1 + 232);
    uint64_t v15 = *(void *)(a1 + 32);
    if ((v13 & 1) != 0)
    {
      unint64_t v16 = *(_OWORD *)(a1 + 56);
      __int128 v73 = *v5;
      v74 = v16;
      *(void *)v75 = *(void *)(a1 + 72);
      if (!*(_BYTE *)(a1 + 272)) {
        sub_8DEEC();
      }
      uint64_t v17 = *(_OWORD *)(a1 + 248);
      *(_OWORD *)&v75[8] = *v14;
      *(_OWORD *)&v75[24] = v17;
      *(void *)&v75[40] = *(void *)(a1 + 264);
      __int128 v18 = operator new(0x50uLL);
      unint64_t v69 = v18 + 5;
      uint64_t v70 = v18 + 5;
      float v19 = *(_OWORD *)&v75[16];
      v18[2] = *(_OWORD *)v75;
      v18[3] = v19;
      v18[4] = *(_OWORD *)&v75[32];
      int v20 = v74;
      os_log_t *v18 = v73;
      v18[1] = v20;
      __p = v18;
      int v21 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)v15 + 136LL))( v15,  a1 + 40,  &__p,  a1 + 80,  v12);
    }

    else
    {
      __int16 v27 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)buf = *v5;
      *(_OWORD *)&buf[16] = v27;
      *(void *)unint64_t v77 = *(void *)(a1 + 72);
      if (!*(_BYTE *)(a1 + 272)) {
        sub_8DEEC();
      }
      int v28 = *(_OWORD *)(a1 + 248);
      *(_OWORD *)&v77[8] = *v14;
      *(_OWORD *)&v77[24] = v28;
      *(void *)&v77[40] = *(void *)(a1 + 264);
      __int16 v29 = operator new(0x50uLL);
      unint64_t v30 = *(_OWORD *)&buf[16];
      int v31 = *(_OWORD *)&v77[16];
      unint64_t v32 = *(_OWORD *)&v77[32];
      v29[2] = *(_OWORD *)v77;
      v29[3] = v31;
      unint64_t v69 = v29 + 5;
      uint64_t v70 = v29 + 5;
      v29[4] = v32;
      std::logic_error *v29 = *(_OWORD *)buf;
      v29[1] = v30;
      __p = v29;
      int v21 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)v15 + 136LL))( v15,  a1 + 80,  &__p,  a1 + 40,  v12);
    }

    unsigned int v33 = v21;
    if (__p)
    {
      unint64_t v69 = __p;
      operator delete(__p);
    }

    if (!v33) {
      goto LABEL_39;
    }
    int v34 = (os_log_t *)sub_138E8(16);
    int v35 = *v34;
    if (!*v34 || !os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 194;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = v33;
  }

  else
  {
    uint64_t v22 = sub_6ADEC(v71);
    unint64_t v23 = *(void *)(a1 + 32);
    if ((v22 & 1) != 0)
    {
      uint64_t v24 = operator new(0x28uLL);
      *(void *)&buf[8] = (char *)v24 + 40;
      *(void *)&buf[16] = (char *)v24 + 40;
      unint64_t v25 = *(_OWORD *)(a1 + 56);
      const char *v24 = *v5;
      v24[1] = v25;
      *((void *)v24 + 4) = *(void *)(a1 + 72);
      *(void *)buf = v24;
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, double))(*(void *)v23 + 136LL))( v23,  a1 + 40,  buf,  a1 + 80,  v12);
    }

    else
    {
      __int16 v36 = operator new(0x28uLL);
      *(void *)&buf[8] = (char *)v36 + 40;
      *(void *)&buf[16] = (char *)v36 + 40;
      BOOL v37 = *(_OWORD *)(a1 + 56);
      unsigned int *v36 = *v5;
      v36[1] = v37;
      *((void *)v36 + 4) = *(void *)(a1 + 72);
      *(void *)buf = v36;
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, double))(*(void *)v23 + 136LL))( v23,  a1 + 80,  buf,  a1 + 40,  v12);
    }

    __int16 v38 = v26;
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    if (!v38) {
      goto LABEL_39;
    }
    int v39 = (os_log_t *)sub_138E8(16);
    int v35 = *v39;
    if (!*v39 || !os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 200;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = v38;
  }

  _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", buf, 0x18u);
LABEL_39:
  int v40 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v40 + 448) || *(void *)(v40 + 584) || *(void *)(v40 + 672))
  {
    sub_197D18(v40);
    sub_3057C(*(void *)(a1 + 32));
    int v41 = *(void *)(a1 + 32);
    __int16 v42 = *(_DWORD ***)(v41 + 984);
    unint64_t v43 = *(_DWORD ***)(v41 + 976);
    __int16 v44 = (_DWORD **)(v41 + 944);
    if (v42 != v43) {
      __int16 v44 = v43;
    }
    sub_2D9D4((uint64_t)buf, *v44, 0);
    unint64_t v45 = (void *)(a1 + 120);
    sub_2DB30(a1 + 120, (unsigned int **)buf);
    sub_2DBF4((unsigned int **)buf);
    __int16 v46 = *(void *)(a1 + 32);
    int v47 = *(void *)(v46 + 984);
    BOOL v48 = *(void *)(v46 + 976);
    int v49 = (_DWORD **)(v46 + 944);
    if (v47 != v48) {
      int v49 = (_DWORD **)(v47 - 16);
    }
    sub_2D9D4((uint64_t)buf, *v49, 0);
    BOOL v50 = (void *)(a1 + 136);
    sub_2DB30(a1 + 136, (unsigned int **)buf);
    sub_2DBF4((unsigned int **)buf);
    if (!*v45 || !*(_DWORD *)*v45 || !*v50 || !*(_DWORD *)*v50)
    {
      io_registry_entry_t v65 = (os_log_t *)sub_138E8(13);
      v66 = *v65;
      if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 217;
        _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): DSP chain ABL should not be invalid if DSP processing is enabled",  buf,  0x12u);
      }

      uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "DSP chain ABL should not be invalid if DSP processing is enabled");
    }

    uint64_t v51 = sub_2B8B8(*(void *)(a1 + 32));
    unsigned int v52 = *(_OWORD *)v51;
    BOOL v53 = *(_OWORD *)(v51 + 16);
    *(void *)(a1 + 184) = *(void *)(v51 + 32);
    *(_OWORD *)(a1 + 168) = v53;
    *(_OWORD *)(a1 + 152) = v52;
    int v54 = sub_2B940(*(void *)(a1 + 32));
    CFIndex v55 = *(_OWORD *)v54;
    int v56 = *(_OWORD *)(v54 + 16);
    *(void *)(a1 + 224) = *(void *)(v54 + 32);
    *(_OWORD *)(a1 + sub_157668(v38 - 192) = v55;
    *(_OWORD *)(a1 + 208) = v56;
  }

        int v35 = v36;
        int v34 = a1[89];
        ++v36;
        if (v35 >= (a1[90] - v34) >> 3) {
          goto LABEL_78;
        }
      }

      __int16 v44 = (os_log_t *)sub_138E8(16);
      unint64_t v45 = *v44;
      if (!*v44 || !os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      io_registry_entry_t v81 = 1024;
      v82 = 1462;
      CFTypeRef v83 = 1024;
      LODWORD(v84[0]) = v36 - 1;
      int v41 = v45;
      __int16 v42 = "%25s:%-5d     stream %u > disabled";
LABEL_62:
      unint64_t v43 = 24;
LABEL_63:
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEBUG, v42, buf, v43);
      goto LABEL_64;
    }

      sub_30DB60((uint64_t)v80);
      goto LABEL_65;
    case 20:
    case 29:
      goto LABEL_64;
    case 24:
    case 36:
    case 37:
    case 38:
    case 39:
      goto LABEL_3;
    case 41:
      sub_30DB60((uint64_t)v80);
      if ((a12 & 1) == 0)
      {
        sub_30E1A4((CFStringRef *)buf);
        LODWORD(v79.__r_.__value_.__l.__data_) = 21;
        sub_30E1F4((uint64_t)&buf[16], (int *)&v79);
        int v39 = CFDataCreate(0LL, byte_402B70, 4LL);
        if (!v39)
        {
          unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v69, "Could not construct");
        }

        sub_14591C(&cf, v39);
        sub_1459C8((uint64_t)&v89, "data", (const void **)&cf.__r_.__value_.__l.__data_);
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v91.__r_.__value_.__l.__size_ = 3LL;
        int v40 = 0LL;
        double v71 = sub_5A950((uint64_t)&v91);
        *(void *)&v93 = v71;
        do
        {
          int v41 = *(const void **)&v90[v40];
          if (v41) {
            CFRelease(v41);
          }
          __int16 v42 = *(const void **)&buf[v40 + 32];
          if (v42) {
            CFRelease(v42);
          }
          v40 -= 16LL;
        }

        while (v40 != -48);
        if (cf.__r_.__value_.__r.__words[0]) {
          CFRelease(cf.__r_.__value_.__l.__data_);
        }
        sub_2DC034((uint64_t)&cf, v71);
        LODWORD(v91.__r_.__value_.__l.__data_) = 1652060274;
        sub_2DC450((uint64_t)&v91.__r_.__value_.__l.__size_, (uint64_t)&cf);
        sub_149710((uint64_t)buf, (int *)&v91, 1LL);
        sub_3078E0((uint64_t)&v83, (uint64_t)buf);
        sub_D0C4C(*(void **)&buf[16]);
        unint64_t v43 = *(void **)buf;
        *(void *)buf = 0LL;
        if (v43) {
          operator delete(v43);
        }
        sub_2DBF5C((uint64_t)&v91.__r_.__value_.__l.__size_);
        sub_2DBF5C((uint64_t)&cf);
        CFRelease(v71);
      }

      goto LABEL_65;
    case 43:
      LODWORD(cf.__r_.__value_.__l.__data_) = 7;
      cf.__r_.__value_.__l.__size_ = 1886216809LL;
      LODWORD(v93) = 7;
      *((void *)&v93 + 1) = 1953655149LL;
      sub_149F28((uint64_t)buf, (uint64_t)&cf, (uint64_t)&v93);
      sub_2DC274((uint64_t)&v91, (uint64_t)buf);
      sub_2DBF5C((uint64_t)&buf[16]);
      sub_2DBF5C((uint64_t)buf);
      sub_2DBF5C((uint64_t)&v93);
      sub_2DBF5C((uint64_t)&cf);
      unsigned int v33 = sub_1498C0((uint64_t)&v91);
      int v34 = v81[0];
      *unsigned int v33 = v81[0];
      v33[1] = v81;
      *(void *)(v34 + 8) = v33;
      v81[0] = (uint64_t)v33;
      ++v82;
      sub_308B68((uint64_t)&v83, 0x75696F7264737067LL, 0);
      goto LABEL_44;
    case 44:
      LODWORD(cf.__r_.__value_.__l.__data_) = 7;
      cf.__r_.__value_.__l.__size_ = 1886216809LL;
      LODWORD(v93) = 7;
      *((void *)&v93 + 1) = 1953655149LL;
      sub_149F28((uint64_t)buf, (uint64_t)&cf, (uint64_t)&v93);
      sub_2DC274((uint64_t)&v91, (uint64_t)buf);
      sub_2DBF5C((uint64_t)&buf[16]);
      sub_2DBF5C((uint64_t)buf);
      sub_2DBF5C((uint64_t)&v93);
      sub_2DBF5C((uint64_t)&cf);
      BOOL v37 = sub_1498C0((uint64_t)&v91);
      __int16 v38 = v81[0];
      *BOOL v37 = v81[0];
      v37[1] = v81;
      *(void *)(v38 + 8) = v37;
      v81[0] = (uint64_t)v37;
      ++v82;
LABEL_44:
      sub_2DBF5C((uint64_t)&v91);
      goto LABEL_65;
    case 45:
      if (sub_149814(0LL, 0LL, 1685090928))
      {
        v66 = (os_log_t *)sub_138E8(13);
        uint64_t v67 = *v66;
        if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2932;
          _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    unint64_t v45 = sub_138E8(13);
    if ((*(_BYTE *)(v45 + 8) & 1) != 0 && (__int16 v46 = *(id *)v45) != 0LL)
    {
      int v47 = (os_log_s *)v46;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        BOOL v53 = *(void *)a2;
        int v54 = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&__lk, (unsigned int *)&v53);
        BOOL v48 = v56 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
        buf.uint64_t mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        v66 = 1024;
        uint64_t v67 = 288;
        int64x2_t v68 = 2080;
        *(void *)unint64_t v69 = v48;
        *(_WORD *)&v69[8] = 1024;
        *(_DWORD *)&v69[10] = a1;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v56 < 0) {
          operator delete(__lk.__m_);
        }
      }

      int v20 = 0LL;
      int v49 = v47;
LABEL_101:

LABEL_102:
    }

    else
    {
      int v20 = 0LL;
    }

void sub_A8FE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, char *a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, CFTypeRef a31, uint64_t a32, CFTypeRef a33, uint64_t a34, CFTypeRef a35, uint64_t a36, uint64_t a37, uint64_t a38, CFTypeRef cf)
{
  a26 = &a30;
  sub_A0CF0((void ***)&a26);
  sub_7A768(v40 - 176);
  if (v39) {
    operator delete(v39);
  }
  sub_7A768((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_A9220(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0xA9218LL);
}

uint64_t *sub_A924C(uint64_t *result, double a2, double a3)
{
  CFTypeID v4 = result;
  unint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        double v8 = *(double *)(v5 + 32);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(void *)v5;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (double *)operator new(0x28uLL);
    v9[4] = a3;
    *uint64_t v9 = 0.0;
    v9[1] = 0.0;
    *((void *)v9 + 2) = v7;
    unsigned __int8 *v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *CFTypeID v4 = v10;
      uint64_t v11 = *v6;
    }

    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }

    uint64_t result = sub_7A420((uint64_t *)v4[1], v11);
    ++v4[2];
  }

  return result;
}

CFArrayRef sub_A9308(float **a1)
{
  unint64_t v2 = a1[1] - *a1;
  int64x2_t v19 = 0uLL;
  unint64_t v20 = 0LL;
  sub_7E058(&v19, v2);
  uint64_t v3 = *a1;
  CFTypeID v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v5 = (CFNumberRef *)v19.i64[1];
    do
    {
      float v6 = *v3;
      if ((unint64_t)v5 >= v20)
      {
        uint64_t v7 = ((uint64_t)v5 - v19.i64[0]) >> 3;
        unint64_t v8 = (uint64_t)(v20 - v19.i64[0]) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v20 - v19.i64[0] >= 0x7FFFFFFFFFFFFFF8LL) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        uint64_t v24 = &v20;
        if (v9) {
          unint64_t v9 = (unint64_t)sub_7DC90(v9);
        }
        else {
          uint64_t v10 = 0LL;
        }
        int v21 = (int64x2_t *)v9;
        v22.i64[0] = v9 + 8 * v7;
        v22.i64[1] = v22.i64[0];
        unint64_t v23 = v9 + 8 * v10;
        sub_A94DC((CFNumberRef *)v22.i64[0], v6);
        uint64_t v11 = v22.i64[0];
        uint64_t v5 = (CFNumberRef *)(v22.i64[1] + 8);
        v22.i64[1] += 8LL;
        int v12 = (void *)v19.i64[1];
        uint64_t v13 = (void *)v19.i64[0];
        if (v19.i64[1] == v19.i64[0])
        {
          int64x2_t v15 = vdupq_n_s64(v19.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v14 = *--v12;
            *(void *)(v11 - 8) = v14;
            v11 -= 8LL;
            *int v12 = 0LL;
          }

          while (v12 != v13);
          int64x2_t v15 = v19;
          uint64_t v5 = (CFNumberRef *)v22.i64[1];
        }

        v19.i64[0] = v11;
        v19.i64[1] = (uint64_t)v5;
        int64x2_t v22 = v15;
        unint64_t v16 = v20;
        unint64_t v20 = v23;
        unint64_t v23 = v16;
        int v21 = (int64x2_t *)v15.i64[0];
        sub_7E2DC((uint64_t)&v21);
      }

      else
      {
        sub_A94DC(v5++, *v3);
      }

      v19.i64[1] = (uint64_t)v5;
      ++v3;
    }

    while (v3 != v4);
  }

  CFArrayRef v17 = sub_7E114((uint64_t **)&v19);
  int v21 = &v19;
  sub_7E254((void ***)&v21);
  return v17;
}

void sub_A949C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_7E254(&a13);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_A94DC(CFNumberRef *a1, float a2)
{
  float valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_A955C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

CFNumberRef *sub_A9588(CFNumberRef *a1, double a2)
{
  double valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberDoubleType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_A9608(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_A9634(void **a1, const void **a2)
{
  if (*((_BYTE *)a1 + 24))
  {
    if (a1 != (void **)a2)
    {
      CFNumberRef v3 = (char *)*a2;
      CFTypeID v4 = (char *)a2[1];
      int64_t v5 = v4 - (_BYTE *)*a2;
      unint64_t v6 = v5 >> 4;
      uint64_t v7 = (uint64_t)a1[2];
      unint64_t v8 = (char *)*a1;
      if (v5 >> 4 <= (unint64_t)((v7 - (uint64_t)*a1) >> 4))
      {
        uint64_t v11 = a1 + 1;
        int v12 = (char *)a1[1];
        unint64_t v13 = (v12 - v8) >> 4;
        if (v13 < v6)
        {
          uint64_t v14 = &v3[16 * v13];
          if (v12 != v8)
          {
            memmove(*a1, *a2, v12 - v8);
            unint64_t v8 = (char *)*v11;
          }

          int64_t v5 = v4 - v14;
          if (v4 == v14) {
            goto LABEL_22;
          }
          int64x2_t v15 = v8;
          unint64_t v16 = v14;
          goto LABEL_21;
        }
      }

      else
      {
        if (v8)
        {
          a1[1] = v8;
          operator delete(v8);
          uint64_t v7 = 0LL;
          *a1 = 0LL;
          a1[1] = 0LL;
          a1[2] = 0LL;
        }

        if (v5 < 0) {
          sub_7A87C();
        }
        uint64_t v9 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          uint64_t v9 = v5 >> 4;
        }
        else {
          unint64_t v10 = v9;
        }
        sub_846C4(a1, v10);
        uint64_t v11 = a1 + 1;
        unint64_t v8 = (char *)a1[1];
      }

      if (v4 == v3)
      {
LABEL_22:
        *uint64_t v11 = &v8[v5];
        return a1;
      }

      int64x2_t v15 = v8;
      unint64_t v16 = v3;
LABEL_21:
      memmove(v15, v16, v5);
      goto LABEL_22;
    }
  }

  else
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    sub_A9784(a1, *a2, (uint64_t)a2[1], ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 4);
    *((_BYTE *)a1 + 24) = 1;
  }

  return a1;
}

void *sub_A9784(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_846C4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_A97E0(_Unwind_Exception *exception_object)
{
  CFNumberRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_A97FC(uint64_t a1, char *a2, int *a3)
{
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_A9888(_Unwind_Exception *a1)
{
  CFNumberRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_A98C4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  int64x2_t v19 = 0uLL;
  unint64_t v20 = 0LL;
  sub_7E058(&v19, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    CFTypeID v4 = *(int **)a1;
    uint64_t v5 = *(void *)a1 + 4 * v3;
    unint64_t v6 = (CFNumberRef *)v19.i64[1];
    do
    {
      if ((unint64_t)v6 >= v20)
      {
        uint64_t v7 = ((uint64_t)v6 - v19.i64[0]) >> 3;
        unint64_t v8 = (uint64_t)(v20 - v19.i64[0]) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v20 - v19.i64[0] >= 0x7FFFFFFFFFFFFFF8LL) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        uint64_t v24 = &v20;
        if (v9) {
          unint64_t v9 = (unint64_t)sub_7DC90(v9);
        }
        else {
          uint64_t v10 = 0LL;
        }
        int v21 = (int64x2_t *)v9;
        v22.i64[0] = v9 + 8 * v7;
        v22.i64[1] = v22.i64[0];
        unint64_t v23 = v9 + 8 * v10;
        sub_A9AD0((CFNumberRef *)v22.i64[0], *v4);
        uint64_t v11 = v22.i64[0];
        unint64_t v6 = (CFNumberRef *)(v22.i64[1] + 8);
        v22.i64[1] += 8LL;
        int v12 = (void *)v19.i64[1];
        unint64_t v13 = (void *)v19.i64[0];
        if (v19.i64[1] == v19.i64[0])
        {
          int64x2_t v15 = vdupq_n_s64(v19.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v14 = *--v12;
            *(void *)(v11 - 8) = v14;
            v11 -= 8LL;
            *int v12 = 0LL;
          }

          while (v12 != v13);
          int64x2_t v15 = v19;
          unint64_t v6 = (CFNumberRef *)v22.i64[1];
        }

        v19.i64[0] = v11;
        v19.i64[1] = (uint64_t)v6;
        int64x2_t v22 = v15;
        unint64_t v16 = v20;
        unint64_t v20 = v23;
        unint64_t v23 = v16;
        int v21 = (int64x2_t *)v15.i64[0];
        sub_7E2DC((uint64_t)&v21);
      }

      else
      {
        sub_A9AD0(v6++, *v4);
      }

      v19.i64[1] = (uint64_t)v6;
      ++v4;
    }

    while (v4 != (int *)v5);
  }

  CFArrayRef v17 = sub_7E114((uint64_t **)&v19);
  int v21 = &v19;
  sub_7E254((void ***)&v21);
  return v17;
}

void sub_A9A48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_7E254(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_A9A88(uint64_t a1, const void **a2)
{
  CFTypeID v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

CFNumberRef *sub_A9AD0(CFNumberRef *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_A9B50(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A9B7C(unsigned int a1)
{
  uint64_t result = 20LL * a1;
  if ((result & 0xFFFFFFFF00000000LL) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A9C4C(exception, "arithmetic multiplication overflow");
  }

  return result;
}

void sub_A9BD4(_Unwind_Exception *a1)
{
}

uint64_t sub_A9BE8(int a1)
{
  BOOL v1 = __CFADD__(a1, 12);
  uint64_t result = (a1 + 12);
  if (v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A9C4C(exception, "arithmetic addition overflow");
  }

  return result;
}

void sub_A9C38(_Unwind_Exception *a1)
{
}

std::runtime_error *sub_A9C4C(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  return result;
}

uint64_t sub_A9C70(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != 1936876644)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int64x2_t v15 = "AggregateDevice_CommonBase.cpp";
      __int16 v16 = 1024;
      int v17 = 2934;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a2[1] == 1768845428) {
    uint64_t v7 = a1 + 472;
  }
  else {
    uint64_t v7 = a1 + 496;
  }
  if (*(void *)(v7 + 16) != 1LL)
  {
    unint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        int64x2_t v15 = "AggregateDevice_CommonBase.cpp";
        __int16 v16 = 1024;
        int v17 = 2937;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty should have blocked this code path because the appropriate device l ist's size is not 1.",  (uint8_t *)&v14,  0x12u);
      }
    }
  }

  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t))(**(void **)(*(void *)(v7 + 8) + 16LL) + 32LL))( *(void *)(*(void *)(v7 + 8) + 16LL),  a2,  a3,  a4);
}

void sub_A9E40(_Unwind_Exception *a1)
{
}

uint64_t sub_A9E5C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != 1936879204)
  {
    __int128 v18 = (os_log_t *)sub_138E8(13);
    int64x2_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      int64x2_t v22 = "AggregateDevice_CommonBase.cpp";
      __int16 v23 = 1024;
      int v24 = 2904;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v21,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v8 = sub_77A54(a2[1]);
  uint64_t v9 = a1 + 544;
  uint64_t v10 = 520LL;
  if (v8) {
    uint64_t v10 = 544LL;
  }
  else {
    uint64_t v9 = a1 + 520;
  }
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(v9 + 8);
  while (v11 != v12)
  {
    if (*(_BYTE *)(*(void *)v11 + 200LL))
    {
      int v17 = sub_A9B7C(*(_DWORD *)(*(void *)(*(void *)v11 + 192LL) + 8LL));
      return sub_A9BE8(v17);
    }

    v11 += 16LL;
  }

  if (a2[1] == 1768845428) {
    uint64_t v13 = a1 + 472;
  }
  else {
    uint64_t v13 = a1 + 496;
  }
  if (*(void *)(v13 + 16) != 1LL)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    int64x2_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v21 = 136315394;
        int64x2_t v22 = "AggregateDevice_CommonBase.cpp";
        __int16 v23 = 1024;
        int v24 = 2925;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty should have blocked this code path because the appropriate device l ist's size is not 1.",  (uint8_t *)&v21,  0x12u);
      }
    }
  }

  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t))(**(void **)(*(void *)(v13 + 8) + 16LL)
                                                                       + 32LL))( *(void *)(*(void *)(v13 + 8) + 16LL),  a2,  a3,  a4);
}

void sub_AA0B4(_Unwind_Exception *a1)
{
}

uint64_t sub_AA0D0(const void *a1)
{
  if (a1)
  {
    CFRetain(a1);
    sub_7F234(&v9, a1);
  }

  else
  {
    CFTypeRef v9 = 0LL;
  }

  sub_7F234(&v8, @"loudness normalizer reset");
  if (sub_5586C((const __CFString *)v9, (const __CFString **)&v8))
  {
    sub_7F234(&cf, @"haptics protection mode");
    BOOL v2 = sub_5586C((const __CFString *)v9, (const __CFString **)&cf) == kCFCompareEqualTo;
    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    BOOL v2 = 1;
  }

  if (v8) {
    CFRelease(v8);
  }
  if (v2)
  {
    uint64_t v3 = 4LL;
  }

  else
  {
    sub_7F234(&v8, @"dsp chain name");
    CFComparisonResult v4 = sub_5586C((const __CFString *)v9, (const __CFString **)&v8);
    if (v8) {
      CFRelease(v8);
    }
    if (v4)
    {
      sub_7F234(&v8, @"dsp chain active");
      CFComparisonResult v5 = sub_5586C((const __CFString *)v9, (const __CFString **)&v8);
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v3 = 8 * (v5 == kCFCompareEqualTo);
    }

    else
    {
      uint64_t v3 = 8LL;
    }
  }

  if (v9) {
    CFRelease(v9);
  }
  return v3;
}

void sub_AA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_AA244(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, unsigned int *a4)
{
  if (*(_BYTE *)(a1 + 296)) {
    return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
  }
  if (a3 != 4 || !a4)
  {
    CFTypeRef v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v21);
      uint64_t v11 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316674;
      uint64_t v26 = "AggregateDevice_CommonBase.cpp";
      __int16 v27 = 1024;
      int v28 = 3298;
      __int16 v29 = 2080;
      unint64_t v30 = v11;
      __int16 v31 = 1024;
      int v32 = 4;
      __int16 v33 = 2080;
      int v34 = "non-";
      __int16 v35 = 1024;
      UInt32 v36 = a3;
      __int16 v37 = 2048;
      __int16 v38 = a4;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %s NULL (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x3Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  AudioObjectPropertyScope mScope = a2->mScope;
  if (mScope != 1768845428 && mScope != 1869968496)
  {
    __int16 v16 = (os_log_t *)sub_138E8(13);
    int v17 = *v16;
    if (*v16)
    {
      if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v26 = "AggregateDevice_CommonBase.cpp";
        __int16 v27 = 1024;
        int v28 = 3299;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    __int128 v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v18, "Precondition failure.");
  }

  int v7 = *a4;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 352LL))( a1,  1685287015LL,  *a4,  0LL) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v26 = "AggregateDevice_CommonBase.cpp";
      __int16 v27 = 1024;
      int v28 = 3303;
      __int16 v29 = 1024;
      LODWORD(v30) = v7;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): GetPropertyDataSizeForDSPGraphParameter() failed fo r parameterID = %u",  buf,  0x18u);
    }

    int64x2_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int64x2_t v15 = &off_4865A0;
    void v15[2] = 1852797029;
  }

  return 4LL;
}

void sub_AA598(_Unwind_Exception *a1)
{
}

uint64_t sub_AA5B4(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, unsigned int *a4)
{
  if (*(_BYTE *)(a1 + 296)) {
    return sub_76D10(*(_DWORD *)(a1 + 128), a2, a3, a4);
  }
  if (a3 != 4 || !a4)
  {
    CFTypeRef v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v21);
      uint64_t v11 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316674;
      uint64_t v26 = "AggregateDevice_CommonBase.cpp";
      __int16 v27 = 1024;
      int v28 = 3249;
      __int16 v29 = 2080;
      unint64_t v30 = v11;
      __int16 v31 = 1024;
      int v32 = 4;
      __int16 v33 = 2080;
      int v34 = "non-";
      __int16 v35 = 1024;
      UInt32 v36 = a3;
      __int16 v37 = 2048;
      __int16 v38 = a4;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %s NULL (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x3Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  AudioObjectPropertyScope mScope = a2->mScope;
  if (mScope != 1768845428 && mScope != 1869968496)
  {
    __int16 v16 = (os_log_t *)sub_138E8(13);
    int v17 = *v16;
    if (*v16)
    {
      if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v26 = "AggregateDevice_CommonBase.cpp";
        __int16 v27 = 1024;
        int v28 = 3250;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    __int128 v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v18, "Precondition failure.");
  }

  LODWORD(__p[0]) = 0;
  LOBYTE(v21) = 0;
  uint64_t v7 = *a4;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, void, BOOL))(*(void *)a1 + 392LL))( a1,  1685287015LL,  v7,  __p,  &v21,  0LL,  mScope != 1768845428) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v26 = "AggregateDevice_CommonBase.cpp";
      __int16 v27 = 1024;
      int v28 = 3262;
      __int16 v29 = 1024;
      LODWORD(v30) = v7;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): GetPropertyDataSizeForDSPGraphProperty() failed for propertyID = %u",  buf,  0x18u);
    }

    int64x2_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int64x2_t v15 = &off_4865A0;
    void v15[2] = 1852797029;
  }

  return LODWORD(__p[0]);
}

void sub_AA920(_Unwind_Exception *a1)
{
}

uint64_t sub_AA93C(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 1936876644 && *a2 != 1936879204)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    CFTypeRef v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        uint64_t v11 = "AggregateDevice_CommonBase.cpp";
        __int16 v12 = 1024;
        int v13 = 2967;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v10,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v3 = a2[1];
  BOOL v4 = v3 == 1869968496 || v3 == 1768845428;
  if (v4 && (v3 != 1768845428 ? (uint64_t v5 = a1 + 496) : (uint64_t v5 = a1 + 472), *(void *)(v5 + 16) == 1LL)) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 8) + 16LL) + 24LL))(*(void *)(*(void *)(v5 + 8) + 16LL));
  }
  else {
    return 0LL;
  }
}

void sub_AAAC0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_AAADC(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 1936876644 && *a2 != 1936879204)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    CFTypeRef v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        uint64_t v11 = "AggregateDevice_CommonBase.cpp";
        __int16 v12 = 1024;
        int v13 = 2950;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v10,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v3 = a2[1];
  BOOL v4 = v3 == 1869968496 || v3 == 1768845428;
  if (v4 && (v3 != 1768845428 ? (uint64_t v5 = a1 + 496) : (uint64_t v5 = a1 + 472), *(void *)(v5 + 16) == 1LL)) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 8) + 16LL) + 16LL))(*(void *)(*(void *)(v5 + 8) + 16LL));
  }
  else {
    return 0LL;
  }
}

void sub_AAC60(_Unwind_Exception *exception_object)
{
}

uint64_t sub_AAC7C(uint64_t a1)
{
  if (MGGetBoolAnswer(@"DeviceSupportsSiriBargeIn")
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352LL))( a1,  1685287015LL,  1852076912LL,  0LL)
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352LL))( a1,  1685287015LL,  1835623283LL,  0LL))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352LL))( a1,  1685287015LL,  1919247987LL,  0LL);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_AAD28(uint64_t a1)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 416LL))(v3, a1, 1LL, 0LL);
  if (!v4) {
    return 0LL;
  }
  uint64_t v1 = sub_AADB0(v3, 2);
  if (v4) {
    sub_83284((uint64_t)v3);
  }
  return v1;
}

void sub_AAD94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    sub_83284((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AADB0(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_17;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }

  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }

  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5 || (unint64_t v6 = *v5) == 0LL) {
LABEL_17:
  }
    sub_8F9A4("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == a2) {
      break;
    }
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2) {
        v7 %= v2;
      }
    }

    else
    {
      v7 &= v2 - 1;
    }

    if (v7 != v4) {
      goto LABEL_17;
    }
LABEL_16:
    unint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_17;
    }
  }

  if (*((_DWORD *)v6 + 4) != a2) {
    goto LABEL_16;
  }
  return *((unsigned __int8 *)v6 + 20);
}

uint64_t sub_AAE78(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (__int128 *)(a2 + 64);
  sub_90418(v25, a2 + 112);
  uint64_t v5 = *(void *)(a2 + 136);
  AudioObjectID v6 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_474E30;
  uint64_t v7 = sub_1D7A74((uint64_t)v4);
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + sub_1576A8(v38 - 128) = v6;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (qword_49D060 != -1) {
    dispatch_once(&qword_49D060, &stru_475088);
  }
  if (off_49D068) {
    uint64_t v8 = off_49D068(2LL, a1 + 144);
  }
  else {
    uint64_t v8 = 0LL;
  }
  *(void *)(a1 + 168) = v8;
  *(_BYTE *)(a1 + 176) = sub_14E6E4();
  sub_1D83C0((uint64_t *)(a1 + 184), (uint64_t)v25);
  *(void *)(a1 + 208) = v5;
  sub_86550((uint64_t *)(a1 + 216), a2 + 144);
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  sub_7F2E0( (void *)(a1 + 240),  *(void **)(a2 + 40),  *(void **)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 4);
  __int128 v9 = *v4;
  __int128 v10 = v4[2];
  *(_OWORD *)(a1 + 280) = v4[1];
  *(_OWORD *)(a1 + 296) = v10;
  *(_OWORD *)(a1 + 264) = v9;
  AudioObjectID v34 = v6;
  *(void *)&v33.uint64_t mSelector = 0x676C6F6261706364LL;
  v33.AudioObjectPropertyElement mElement = 0;
  sub_C80E0((uint64_t)&__p, &v34, &v33, 0, 0LL);
  if (v32 && (v11 = v31, v31 = 0LL, v26 = &off_483688, cf = v11, char v28 = 1, sub_39FD8(&v30), v28))
  {
    CFTypeRef v12 = cf;
    if (cf) {
      CFRetain(cf);
    }
    sub_7F234(&v33, v12);
    if (!*(void *)&v33.mSelector)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_48100((uint64_t)&__p, *(const __CFString **)&v33.mSelector);
    if (*(void *)&v33.mSelector) {
      CFRelease(*(CFTypeRef *)&v33.mSelector);
    }
    uint64_t v13 = sub_287328((unsigned __int8 *)&__p);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p);
    }
    if (v28) {
      sub_39FD8(&v26);
    }
    uint64_t v14 = v13 & 0x100000000LL;
    uint64_t v15 = v13 & 0xFFFFFF00;
    uint64_t v16 = v13;
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v14 = 0LL;
  }

  *(void *)(a1 + 312) = v15 | v16 | v14;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  if (sub_14E6E4())
  {
    int v17 = *(void **)(a2 + 144);
    __int128 v18 = (void *)(a2 + 152);
    if (v17 != (void *)(a2 + 152))
    {
      while ((*((_DWORD *)v17 + 7) & 0xFBFFFFFF) != 0x6870696E)
      {
        int64x2_t v19 = (void *)v17[1];
        if (v19)
        {
          do
          {
            unint64_t v20 = v19;
            int64x2_t v19 = (void *)*v19;
          }

          while (v19);
        }

        else
        {
          do
          {
            unint64_t v20 = (void *)v17[2];
            BOOL v21 = *v20 == (void)v17;
            int v17 = v20;
          }

          while (!v21);
        }

        int v17 = v20;
        if (v20 == v18)
        {
          int v17 = (void *)(a2 + 152);
          break;
        }
      }
    }

    BOOL v22 = v17 == v18;
  }

  else
  {
    BOOL v22 = 0;
  }

  *(_BYTE *)(a1 + 364) = v22;
  *(_BYTE *)(a1 + 365) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  if (*(_BYTE *)(a2 + 192)) {
    std::string::operator=((std::string *)(a1 + 392), (const std::string *)(a2 + 168));
  }
  if (*(_BYTE *)(a2 + 224)) {
    std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a2 + 200));
  }
  sub_68314(v25);
  *(void *)a1 = off_46DD50;
  *(void *)(a1 + 416) = *(void *)(a2 + 8);
  sub_AB3D8((uint64_t *)(a1 + 424), a2 + 16);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 100);
  *(void *)(a1 + 456) = 0LL;
  *(void *)(a1 + 464) = 0LL;
  *(void *)(a1 + 472) = a1 + 472;
  *(void *)(a1 + 480) = a1 + 472;
  *(void *)(a1 + 488) = 0LL;
  *(void *)(a1 + 496) = a1 + 496;
  *(void *)(a1 + 504) = a1 + 496;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(void *)(a1 + 560) = 0LL;
  *(void *)(a1 + 568) = 850045863LL;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 624) = 0LL;
  return a1;
}

void sub_AB264( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, const void *a24)
{
  if (a16) {
    sub_39FD8(&a14);
  }
  sub_7A668((void ***)&__p);
  sub_32C8C(*(void **)(v24 + 224));
  sub_85B80(v28);
  sub_1D84CC(a10);
  sub_1D8544(v26, 0LL);
  sub_1D85B8(v25);
  uint64_t v32 = *v27;
  *__int16 v27 = 0LL;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
  }
  uint64_t v33 = *(void *)(v24 + 96);
  *(void *)(v24 + 96) = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
  }
  uint64_t v34 = *v30;
  *uint64_t v30 = 0LL;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
  }
  sub_F3008(v24);
  sub_68314(&a11);
  _Unwind_Resume(a1);
}

void sub_AB3C0()
{
  unint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 152) = v2;
    operator delete(v2);
  }

  JUMPOUT(0xAB34CLL);
}

uint64_t *sub_AB3D8(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = sub_AB4CC(i + 16);
    uint64_t v6 = *a1;
    void *v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }

  return a1;
}

void sub_AB448(_Unwind_Exception *a1)
{
}

void sub_AB45C(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint8x8_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_68314(v3 + 2);
        operator delete(v3);
        uint8x8_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

void *sub_AB4CC(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  sub_90418(v2 + 2, a1);
  return v2;
}

void sub_AB508(_Unwind_Exception *a1)
{
}

uint64_t sub_AB51C(uint64_t a1)
{
  *(void *)a1 = off_46DD50;
  sub_1B6F8(a1);
  sub_28976C( *(unsigned int *)(a1 + 128),  *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416));
  sub_2893F4(*(_DWORD *)(a1 + 128));
  uint64_t v3 = *(void *)(a1 + 240);
  for (uint64_t i = *(void *)(a1 + 248); i != v3; uint64_t i = sub_7A768(i - 16))
    ;
  *(void *)(a1 + 248) = v3;
  uint64_t v4 = *(void **)(a1 + 520);
  uint64_t v5 = *(void **)(a1 + 528);
  while (v4 != v5)
  {
    sub_AB888(v4);
    v4 += 2;
  }

  uint64_t v6 = *(void **)(a1 + 544);
  uint64_t v7 = *(void **)(a1 + 552);
  while (v6 != v7)
  {
    sub_AB888(v6);
    v6 += 2;
  }

  std::mutex::~mutex((std::mutex *)(a1 + 568));
  __int128 v9 = (void **)(a1 + 544);
  sub_7A668(&v9);
  __int128 v9 = (void **)(a1 + 520);
  sub_7A668(&v9);
  sub_68314((void *)(a1 + 496));
  sub_68314((void *)(a1 + 472));
  sub_AB45C((uint64_t *)(a1 + 424));
  sub_1D85E4(a1);
  return a1;
}

void sub_AB83C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_7A0E8(a1);
  }

  _Unwind_Resume(a1);
}

void sub_AB84C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_7A0E8(a1);
  }

  _Unwind_Resume(a1);
}

void sub_AB85C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_7A0E8(a1);
  }

  _Unwind_Resume(a1);
}

void sub_AB86C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xAB878LL);
  }
  sub_7A0E8(a1);
}

void sub_AB888(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_AB8E4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = 0;
  unsigned int v8 = 0;
  buf[0] = 0;
  *(void *)((char *)&v38 + 4) = a2;
  while (1)
  {
    HIDWORD(v38) = v7;
    uint64_t v9 = sub_289B14((uint64_t)buf);
LABEL_19:
    ++v7;
  }

  (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v9 + 128LL))(theString, v9);
  sub_48E98(__p, theString[0]);
  unint64_t v10 = v36;
  if ((v36 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10 == 7)
  {
    uint64_t v11 = (void **)__p[0];
    if ((v36 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    int v12 = *(_DWORD *)v11;
    int v13 = *(_DWORD *)((char *)v11 + 3);
    BOOL v15 = v12 == 1634037843 && v13 == 1919249249;
  }

  else
  {
    BOOL v15 = 0;
    if ((char)v36 < 0) {
LABEL_16:
    }
      operator delete(__p[0]);
  }

  sub_19DFC((uint64_t)theString);
  uint64_t v16 = *(void *)v9;
  if (!v15)
  {
    v8 += (*(uint64_t (**)(uint64_t, void))(v16 + 88))(v9, 0LL);
    goto LABEL_19;
  }

  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 312))(v9);
  BOOL v19 = (v17 & 0xFF00000000LL) != 0 && (_DWORD)v17 == 0;
  unint64_t v20 = *(uint64_t **)(a4 + 8);
  if (!v20)
  {
LABEL_33:
    int v22 = 1;
    goto LABEL_35;
  }

  while (2)
  {
    unsigned int v21 = *((_DWORD *)v20 + 7);
    if (v21 > 0x7073706B)
    {
LABEL_32:
      unint64_t v20 = (uint64_t *)*v20;
      if (!v20) {
        goto LABEL_33;
      }
      continue;
    }

    break;
  }

  if (v21 != 1886613611)
  {
    ++v20;
    goto LABEL_32;
  }

  int v22 = 0;
LABEL_35:
  if ((sub_7531C() & 1) != 0)
  {
LABEL_44:
    BOOL v24 = 1;
  }

  else
  {
    int v23 = a1[70];
    BOOL v24 = 1;
    if (v23 > 1987077986)
    {
      if (v23 != 1987077987 && v23 != 1987081839)
      {
        int v25 = 1987081833;
        goto LABEL_42;
      }

      goto LABEL_43;
    }

    if (v23 == 1768057203) {
      goto LABEL_43;
    }
    int v25 = 1919776355;
LABEL_42:
    if (v23 == v25)
    {
LABEL_43:
      sub_31821C();
      BOOL v24 = (_DWORD)qword_49DAC0 == 1;
    }
  }

  if (((v19 | v22) & 1) == 0 && v24)
  {
    BOOL v26 = v8 < *(_DWORD *)(*(void *)(a3 + 16) + 8LL);
    __int16 v27 = (os_log_t *)sub_138E8(16);
    char v28 = *v27;
    if (v26)
    {
      if (v28 && os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *(_DWORD *)(*(void *)(a3 + 16) + 4LL * v8 + 12);
        *(_DWORD *)buf = 136315906;
        *(void *)&__int128 v38 = "AggregateDevice_CommonBase.cpp";
        WORD4(v38) = 1024;
        *(_DWORD *)((char *)&v38 + 10) = 2184;
        HIWORD(v38) = 1024;
        unsigned int v39 = v8;
        __int16 v40 = 1024;
        int v41 = v29;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Speaker telemetry is at index %u, input stream usage mask is %u",  buf,  0x1Eu);
      }

      if (!*(_DWORD *)(*(void *)(a3 + 16) + 4LL * v8 + 12))
      {
        uint64_t v30 = (os_log_t *)sub_138E8(13);
        __int16 v31 = *v30;
        if (*v30)
        {
          if (os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&__int128 v38 = "AggregateDevice_CommonBase.cpp";
            WORD4(v38) = 1024;
            *(_DWORD *)((char *)&v38 + 10) = 2186;
            _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker is in device topology, but telemetry stream usage is off",  buf,  0x12u);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Speaker is in device topology, but telemetry stream usage is off");
      }
    }

    else if (v28 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int v33 = *(_DWORD *)(*(void *)(a3 + 16) + 8LL);
      *(_DWORD *)buf = 136315906;
      *(void *)&__int128 v38 = "AggregateDevice_CommonBase.cpp";
      WORD4(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 10) = 2180;
      HIWORD(v38) = 1024;
      unsigned int v39 = v8;
      __int16 v40 = 1024;
      int v41 = v33;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Telemetry stream index %u is inconsistent with stream usage size %u",  buf,  0x1Eu);
    }
  }

void sub_ABD0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL sub_ABD38(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 1819304813)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "CAStreamBasicDescription.h";
      __int16 v6 = 1024;
      int v7 = 234;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  PackednessIsSignificant only applies for PCM",  (uint8_t *)&v4,  0x12u);
    }

    __break(1u);
  }

  unsigned int v1 = *(_DWORD *)(a1 + 24);
  if (v1)
  {
    if ((*(_BYTE *)(a1 + 12) & 0x20) != 0)
    {
      unsigned int v2 = 1;
    }

    else
    {
      unsigned int v2 = *(_DWORD *)(a1 + 28);
      if (!v2)
      {
        unsigned int v1 = 0;
        return v1 != *(_DWORD *)(a1 + 32);
      }
    }

    unsigned int v1 = 8 * (v1 / v2);
  }

  return v1 != *(_DWORD *)(a1 + 32);
}

uint64_t sub_ABE30(_DWORD *a1, int a2)
{
  uint64_t result = a1[3];
  if (a1[2] == 1819304813)
  {
    unsigned int v4 = result & 0x7FFFFFFF;
    if ((result & 0x7FFFFFFF) == 0) {
      unsigned int v4 = result;
    }
    if (a2) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFBF;
    }
    BOOL v6 = sub_ABD38((uint64_t)a1);
    unsigned int v7 = a1[8];
    if (!v6 && (v7 & 7) == 0) {
      v5 &= ~0x10u;
    }
    unsigned int v8 = v5 & 0xFFFFFFFB;
    if ((v5 & 1) == 0) {
      unsigned int v8 = v5;
    }
    BOOL v9 = (v8 & 8) == 0 || v7 > 8;
    unsigned int v10 = v8 & 2;
    if (v9) {
      unsigned int v10 = v8;
    }
    if (a1[7] == 1) {
      v10 &= ~0x20u;
    }
    if (v10) {
      return v10;
    }
    else {
      return 0x80000000LL;
    }
  }

  return result;
}

BOOL sub_ABEE0(_DWORD *a1, _DWORD *a2, unsigned int a3)
{
  double v4 = *(double *)a1;
  if ((a3 & 1) == 0)
  {
    if (v4 == *(double *)a2)
    {
      int v5 = a1[2];
      if (v5 == a2[2] && a1[4] == a2[4] && a1[5] == a2[5] && a1[7] == a2[7] && a1[8] == a2[8]) {
        goto LABEL_36;
      }
    }

    return 0LL;
  }

  int v5 = a1[2];
  if (v5)
  {
    int v7 = a2[2];
    if (v7)
    {
      if (v5 != v7) {
        return 0LL;
      }
    }
  }

  int v8 = a1[4];
  if (v8)
  {
    int v9 = a2[4];
    if (v9)
    {
      if (v8 != v9) {
        return 0LL;
      }
    }
  }

  int v10 = a1[5];
  if (v10)
  {
    int v11 = a2[5];
    if (v11)
    {
      if (v10 != v11) {
        return 0LL;
      }
    }
  }

  int v12 = a1[6];
  if (v12)
  {
    int v13 = a2[6];
    if (v13)
    {
      if (v12 != v13) {
        return 0LL;
      }
    }
  }

  int v14 = a1[7];
  if (v14)
  {
    int v15 = a2[7];
    if (v15)
    {
      if (v14 != v15) {
        return 0LL;
      }
    }
  }

  int v16 = a1[8];
  if (v16)
  {
    int v17 = a2[8];
    if (v17)
    {
      if (v16 != v17) {
        return 0LL;
      }
    }
  }

  int32x4_t v19 = *(int32x4_t *)(a2 + 2);
  v19.i64[1] = *((void *)a1 + 1);
LABEL_36:
  if (v5 == 1819304813)
  {
    int v20 = (a3 >> 1) & 1;
    int v21 = sub_ABE30(a1, v20);
    return v21 == sub_ABE30(a2, v20);
  }

  else
  {
    return a1[3] == a2[3];
  }

char *sub_AC098(uint64_t **a1, void **a2, __int128 **a3)
{
  int v5 = (void **)sub_845D8((uint64_t)a1, &v12, a2);
  BOOL v6 = (char *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    BOOL v6 = (char *)operator new(0x40uLL);
    int v8 = v6 + 32;
    int v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_24054(v8, *(void **)v9, *((void *)v9 + 1));
    }

    else
    {
      __int128 v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)int v8 = v10;
    }

    *((_DWORD *)v6 + 14) = 0;
    sub_32C38(a1, v12, v7, (uint64_t *)v6);
  }

  return v6;
}

void sub_AC134(_Unwind_Exception *a1)
{
}

void sub_AC14C(uint64_t *a1)
{
  uint64_t v93 = 0LL;
  v94 = 0LL;
  unsigned int v2 = (std::__shared_weak_count *)a1[1];
  if (!v2) {
    goto LABEL_107;
  }
  v94 = std::__shared_weak_count::lock(v2);
  if (!v94) {
    goto LABEL_107;
  }
  uint64_t v3 = *a1;
  uint64_t v93 = v3;
  if (!v3) {
    goto LABEL_107;
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v3 + 16));
  if ((v4 & 1) == 0) {
    goto LABEL_107;
  }
  uint64_t v6 = *(void *)(v93 + 32);
  int v5 = *(std::__shared_weak_count **)(v93 + 40);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  uint64_t v9 = *(unsigned int *)(v93 + 48);
  v91[0] = 0LL;
  v91[1] = 0LL;
  v90 = v91;
  __int128 v10 = *(void ***)(v93 + 56);
  int v11 = (void **)(v93 + 64);
  if (v10 != (void **)(v93 + 64))
  {
    do
    {
      sub_88A20((uint64_t)&v90, (uint64_t)v91, v10 + 4, (uint64_t)(v10 + 4));
      uint64_t v12 = (void **)v10[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          uint64_t v12 = (void **)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          int v13 = (void **)v10[2];
          BOOL v14 = *v13 == v10;
          __int128 v10 = v13;
        }

        while (!v14);
      }

      __int128 v10 = v13;
    }

    while (v13 != v11);
  }

  if (!v5) {
    goto LABEL_70;
  }
  int v15 = std::__shared_weak_count::lock(v5);
  v99[2] = v15;
  if (!v15) {
    goto LABEL_70;
  }
  int v16 = v15;
  v99[1] = v6;
  if (v6)
  {
    int64x2_t v98 = 0uLL;
    v99[0] = 0LL;
    sub_7D084(buf, "measuredWattsParameterID");
    int v17 = *(_DWORD *)sub_ACA08((uint64_t)&v90, (void **)buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v17 != -1)
    {
      sub_7D084(buf, "measuredWattsParameterID");
      __int128 v18 = (unsigned int *)sub_ACA08((uint64_t)&v90, (void **)buf);
      uint64_t v19 = sub_ACA44(v6, v9, *v18);
      v100 = (_OWORD *)v19;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if ((v19 & 0xFF00000000LL) != 0)
      {
        sub_ACDBC((uint64_t)&v96, "Avg Watts Measured", (int *)&v100);
        uint64_t v20 = v98.i64[1];
        if (v98.i64[1] >= v99[0])
        {
          uint64_t v23 = (v98.i64[1] - v98.i64[0]) >> 4;
          unint64_t v24 = v23 + 1;
          uint64_t v25 = v99[0] - v98.i64[0];
          if ((v99[0] - v98.i64[0]) >> 3 > v24) {
            unint64_t v24 = v25 >> 3;
          }
          else {
            unint64_t v26 = v24;
          }
          v103 = (int64x2_t *)v99;
          __int16 v27 = (char *)sub_7BE90(v26);
          char v28 = (CFTypeRef *)&v27[16 * v23];
          CFStringRef v102 = &v27[16 * v29];
          *char v28 = v96;
          CFTypeRef v96 = 0LL;
          v28[1] = cf;
          CFTypeRef cf = 0LL;
          uint64_t v30 = v28 + 2;
          *(void *)&buf[16] = v28 + 2;
          __int16 v31 = (void *)v98.i64[1];
          uint64_t v32 = (void *)v98.i64[0];
          if (v98.i64[1] == v98.i64[0])
          {
            int64x2_t v34 = vdupq_n_s64(v98.u64[1]);
          }

          else
          {
            do
            {
              int v33 = (const void *)*(v31 - 2);
              v31 -= 2;
              *(v28 - 2) = v33;
              v28 -= 2;
              *__int16 v31 = 0LL;
              v28[1] = (CFTypeRef)v31[1];
              v31[1] = 0LL;
            }

            while (v31 != v32);
            int64x2_t v34 = v98;
            uint64_t v30 = *(void **)&buf[16];
          }

          v98.i64[0] = (uint64_t)v28;
          v98.i64[1] = (uint64_t)v30;
          *(int64x2_t *)&buf[8] = v34;
          __int16 v35 = (char *)v99[0];
          v99[0] = v102;
          CFStringRef v102 = v35;
          *(void *)buf = v34.i64[0];
          sub_7BEC4((uint64_t)buf);
          v98.i64[1] = (uint64_t)v30;
          if (cf) {
            CFRelease(cf);
          }
          if (v96) {
            CFRelease(v96);
          }
        }

        else
        {
          *(void *)v98.i64[1] = v96;
          *(void *)(v20 + 8) = cf;
          v98.i64[1] = v20 + 16;
        }
      }
    }

    sub_7D084(buf, "modelledWattsParameterID");
    int v36 = *(_DWORD *)sub_ACA08((uint64_t)&v90, (void **)buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v36 != -1)
    {
      sub_7D084(buf, "modelledWattsParameterID");
      v100 = buf;
      __int16 v37 = sub_ACE84((uint64_t **)&v90, (void **)buf, &v100);
      uint64_t v38 = sub_ACA44(v6, v9, *((unsigned int *)v37 + 14));
      uint64_t v95 = v38;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if ((v38 & 0xFF00000000LL) != 0)
      {
        sub_ACDBC((uint64_t)&v96, "Avg Watts Modelled", (int *)&v95);
        uint64_t v39 = v98.i64[1];
        if (v98.i64[1] >= v99[0])
        {
          uint64_t v40 = (v98.i64[1] - v98.i64[0]) >> 4;
          unint64_t v41 = v40 + 1;
          uint64_t v42 = v99[0] - v98.i64[0];
          if ((v99[0] - v98.i64[0]) >> 3 > v41) {
            unint64_t v41 = v42 >> 3;
          }
          else {
            unint64_t v43 = v41;
          }
          v103 = (int64x2_t *)v99;
          __int16 v44 = (char *)sub_7BE90(v43);
          __int16 v46 = (CFTypeRef *)&v44[16 * v40];
          CFTypeRef *v46 = v96;
          CFTypeRef v96 = 0LL;
          v46[1] = cf;
          CFTypeRef cf = 0LL;
          int v47 = v46 + 2;
          BOOL v48 = (void *)v98.i64[1];
          int v49 = (void *)v98.i64[0];
          if (v98.i64[1] == v98.i64[0])
          {
            int64x2_t v51 = vdupq_n_s64(v98.u64[1]);
          }

          else
          {
            do
            {
              BOOL v50 = (const void *)*(v48 - 2);
              v48 -= 2;
              *(v46 - 2) = v50;
              v46 -= 2;
              *BOOL v48 = 0LL;
              v46[1] = (CFTypeRef)v48[1];
              v48[1] = 0LL;
            }

            while (v48 != v49);
            int64x2_t v51 = v98;
          }

          v98.i64[0] = (uint64_t)v46;
          v98.i64[1] = (uint64_t)v47;
          *(int64x2_t *)&buf[8] = v51;
          unsigned int v52 = (char *)v99[0];
          v99[0] = &v44[16 * v45];
          CFStringRef v102 = v52;
          *(void *)buf = v51.i64[0];
          sub_7BEC4((uint64_t)buf);
          v98.i64[1] = (uint64_t)v47;
          if (cf) {
            CFRelease(cf);
          }
          if (v96) {
            CFRelease(v96);
          }
        }

        else
        {
          *(void *)v98.i64[1] = v96;
          *(void *)(v39 + 8) = cf;
          v98.i64[1] = v39 + 16;
        }
      }
    }

    CFDictionaryRef theDict = sub_7C1F4((void ***)&v98);
    *(void *)buf = &v98;
    sub_7CFCC((void ***)buf);
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (v54) {
      goto LABEL_74;
    }
  }

  else
  {
    int v21 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22) {
      goto LABEL_70;
    }
  }

  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!v6)
  {
LABEL_70:
    CFIndex v55 = (os_log_t *)sub_138E8(13);
    int v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "PowerLogManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 155;
      _os_log_impl(&dword_0, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to lock DSPChain.", buf, 0x12u);
    }

    CFDictionaryRef theDict = 0LL;
  }

void sub_AC924( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ACA08(uint64_t a1, void **a2)
{
  uint64_t v2 = *sub_845D8(a1, &v4, a2);
  if (!v2) {
    sub_8F9A4("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t sub_ACA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, void))(*(void *)a1 + 64LL))( a1,  a2,  a3,  &v13,  0LL);
  if (v4)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a3);
      if (v12 >= 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      int v15 = "PowerLogManager.cpp";
      __int16 v16 = 1024;
      int v17 = 124;
      __int16 v18 = 2080;
      uint64_t v19 = v7;
      __int16 v20 = 1024;
      LODWORD(v21) = v4;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get power param (%s): %d", buf, 0x22u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = v13;
    uint64_t v8 = 0x100000000LL;
  }

  return v9 | v8;
}

void sub_ACD7C(_Unwind_Exception *a1)
{
}

void sub_ACD88(_Unwind_Exception *a1)
{
}

void sub_ACD94(_Unwind_Exception *a1)
{
}

void sub_ACDA0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_ACDBC(uint64_t a1, char *a2, int *a3)
{
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_ACE48(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_ACE84(uint64_t **a1, void **a2, _OWORD **a3)
{
  CFNumberRef v5 = (void **)sub_845D8((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0LL;
    v8[1] = 0LL;
    v8[2] = 0LL;
    *((_DWORD *)v6 + 14) = 0;
    sub_32C38(a1, v11, v7, (uint64_t *)v6);
  }

  return v6;
}

void sub_ACF10(uint64_t a1)
{
  uint64_t v2 = (std::recursive_mutex *)(a1 + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 80));
  uint64_t v3 = *(const __CFDictionary ***)(a1 + 144);
  int v4 = *(const __CFDictionary ***)(a1 + 152);
  if (v3 != v4)
  {
    LOBYTE(v43) = 0;
    char v44 = 0;
    LOBYTE(v41) = 0;
    char v42 = 0;
    do
    {
      if (*v3)
      {
        sub_AD52C(v3, (const UInt8 *)"Avg Watts Measured", (uint64_t)&v43);
        sub_AD52C(v3, (const UInt8 *)"Avg Watts Modelled", (uint64_t)&v41);
      }

      ++v3;
    }

    while (v3 != v4);
    int64x2_t v48 = 0uLL;
    v49[0] = 0LL;
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    if (v44)
    {
      float v45 = v43 / (float)(unint64_t)v5;
      sub_AD464((uint64_t)&v46, "Avg Watts Measured", (int *)&v45);
      uint64_t v6 = v48.i64[1];
      if (v48.i64[1] >= v49[0])
      {
        uint64_t v7 = (v48.i64[1] - v48.i64[0]) >> 4;
        unint64_t v8 = v7 + 1;
        uint64_t v9 = v49[0] - v48.i64[0];
        if ((v49[0] - v48.i64[0]) >> 3 > v8) {
          unint64_t v8 = v9 >> 3;
        }
        else {
          unint64_t v10 = v8;
        }
        unsigned int v52 = v49;
        uint64_t v11 = (char *)sub_7BE90(v10);
        char v12 = (CFTypeRef *)&v11[16 * v7];
        int64x2_t v51 = &v11[16 * v13];
        *char v12 = v46;
        CFTypeRef v46 = 0LL;
        v12[1] = cf;
        CFTypeRef cf = 0LL;
        BOOL v14 = v12 + 2;
        *(void *)&buf[16] = v12 + 2;
        int v15 = (void *)v48.i64[1];
        __int16 v16 = (void *)v48.i64[0];
        if (v48.i64[1] == v48.i64[0])
        {
          int64x2_t v18 = vdupq_n_s64(v48.u64[1]);
        }

        else
        {
          do
          {
            int v17 = (const void *)*(v15 - 2);
            v15 -= 2;
            *(v12 - 2) = v17;
            v12 -= 2;
            void *v15 = 0LL;
            v12[1] = (CFTypeRef)v15[1];
            v15[1] = 0LL;
          }

          while (v15 != v16);
          int64x2_t v18 = v48;
          BOOL v14 = *(void **)&buf[16];
        }

        v48.i64[0] = (uint64_t)v12;
        v48.i64[1] = (uint64_t)v14;
        *(int64x2_t *)&buf[8] = v18;
        uint64_t v19 = (char *)v49[0];
        v49[0] = v51;
        int64x2_t v51 = v19;
        *(void *)buf = v18.i64[0];
        sub_7BEC4((uint64_t)buf);
        v48.i64[1] = (uint64_t)v14;
        if (cf) {
          CFRelease(cf);
        }
        if (v46) {
          CFRelease(v46);
        }
      }

      else
      {
        *(void *)v48.i64[1] = v46;
        *(void *)(v6 + 8) = cf;
        v48.i64[1] = v6 + 16;
      }
    }

    if (v42)
    {
      float v45 = v41 / (float)(unint64_t)v5;
      sub_AD464((uint64_t)&v46, "Avg Watts Modelled", (int *)&v45);
      uint64_t v20 = v48.i64[1];
      if (v48.i64[1] >= v49[0])
      {
        uint64_t v21 = (v48.i64[1] - v48.i64[0]) >> 4;
        unint64_t v22 = v21 + 1;
        uint64_t v23 = v49[0] - v48.i64[0];
        if ((v49[0] - v48.i64[0]) >> 3 > v22) {
          unint64_t v22 = v23 >> 3;
        }
        else {
          unint64_t v24 = v22;
        }
        unsigned int v52 = v49;
        uint64_t v25 = (char *)sub_7BE90(v24);
        __int16 v27 = (CFTypeRef *)&v25[16 * v21];
        *__int16 v27 = v46;
        CFTypeRef v46 = 0LL;
        v27[1] = cf;
        CFTypeRef cf = 0LL;
        char v28 = v27 + 2;
        uint64_t v29 = (void *)v48.i64[1];
        uint64_t v30 = (void *)v48.i64[0];
        if (v48.i64[1] == v48.i64[0])
        {
          int64x2_t v32 = vdupq_n_s64(v48.u64[1]);
        }

        else
        {
          do
          {
            __int16 v31 = (const void *)*(v29 - 2);
            v29 -= 2;
            *(v27 - 2) = v31;
            v27 -= 2;
            void *v29 = 0LL;
            v27[1] = (CFTypeRef)v29[1];
            v29[1] = 0LL;
          }

          while (v29 != v30);
          int64x2_t v32 = v48;
        }

        v48.i64[0] = (uint64_t)v27;
        v48.i64[1] = (uint64_t)v28;
        *(int64x2_t *)&buf[8] = v32;
        int v33 = (char *)v49[0];
        v49[0] = &v25[16 * v26];
        int64x2_t v51 = v33;
        *(void *)buf = v32.i64[0];
        sub_7BEC4((uint64_t)buf);
        v48.i64[1] = (uint64_t)v28;
        if (cf) {
          CFRelease(cf);
        }
        if (v46) {
          CFRelease(v46);
        }
      }

      else
      {
        *(void *)v48.i64[1] = v46;
        *(void *)(v20 + 8) = cf;
        v48.i64[1] = v20 + 16;
      }
    }

    int64x2_t v34 = sub_7C1F4((void ***)&v48);
    uint64_t v40 = v34;
    *(void *)buf = &v48;
    sub_7CFCC((void ***)buf);
    sub_AD768(&v40);
    uint64_t v35 = *(void *)(a1 + 144);
    for (uint64_t i = *(void *)(a1 + 152); i != v35; i -= 8LL)
    {
      __int16 v37 = *(const void **)(i - 8);
      sub_AD7B4(v37);
    }

    *(void *)(a1 + 152) = v35;
    uint64_t v38 = sub_138E8(13);
    if ((*(_BYTE *)(v38 + 8) & 1) != 0)
    {
      uint64_t v39 = *(os_log_s **)v38;
      if (*(void *)v38)
      {
        if (os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "PowerLogManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 357;
          _os_log_impl(&dword_0, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d PowerLogManager entries flushed.", buf, 0x12u);
        }
      }
    }

    if (v34) {
      CFRelease(v34);
    }
  }

  std::recursive_mutex::unlock(v2);
}

void sub_AD344( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_AD3C0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  v4[0] = *(void *)(a1 + 32);
  v4[1] = v1;
  if (v1)
  {
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      unint64_t v3 = __ldxr(p_shared_weak_owners);
    while (__stxr(v3 + 1, p_shared_weak_owners));
  }

  sub_AC14C(v4);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_AD420(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AD438(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    unint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_AD45C(uint64_t a1)
{
  return sub_7A768(a1 + 32);
}

uint64_t sub_AD464(uint64_t a1, char *a2, int *a3)
{
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_AD4F0(_Unwind_Exception *a1)
{
  unint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_AD52C(const __CFDictionary **a1, const UInt8 *__s, uint64_t a3)
{
  unint64_t v3 = *a1;
  if (!*a1) {
    goto LABEL_20;
  }
  CFNumberRef v5 = __s;
  size_t v7 = strlen((const char *)__s);
  if (v5)
  {
    CFStringRef v8 = CFStringCreateWithBytes(0LL, v5, v7, 0x8000100u, 0);
    if (!v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      goto LABEL_23;
    }
  }

  else
  {
    CFStringRef v8 = 0LL;
  }

  int v10 = CFDictionaryContainsKey(v3, v8);
  if (v8) {
    CFRelease(v8);
  }
  if (v10)
  {
    uint64_t v11 = *a1;
    if (v11)
    {
      size_t v12 = strlen((const char *)v5);
      if (v5)
      {
        CFNumberRef v5 = (const UInt8 *)CFStringCreateWithBytes(0LL, v5, v12, 0x8000100u, 0);
        if (!v5)
        {
          uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v13, "Could not construct");
        }
      }

      int Value = CFDictionaryGetValue(v11, v5);
      if (v5) {
        CFRelease(v5);
      }
      if (Value)
      {
        float v15 = sub_AD7D0((uint64_t)Value);
        if (*(_BYTE *)(a3 + 4))
        {
          *(float *)a3 = v15 + *(float *)a3;
        }

        else
        {
          *(float *)a3 = v15;
          *(_BYTE *)(a3 + 4) = 1;
        }

        return;
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_81384(exception);
LABEL_23:
    }

void sub_AD754(uint64_t a1, ...)
{
}

CFDictionaryRef sub_AD768(const __CFDictionary **a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if (result) {
      return (const __CFDictionary *)PLLogRegisteredEvent(26LL, @"Speaker Amp", *a1, 0LL);
    }
  }

  return result;
}

void sub_AD7B4(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

float sub_AD7D0(uint64_t a1)
{
  unint64_t v1 = sub_A15C8(a1);
  if (!HIDWORD(v1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  return *(float *)&v1;
}

void sub_AD820(_Unwind_Exception *a1)
{
}

void *sub_AD834(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

uint64_t sub_AD86C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_AD7B4(v4);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_AD8B8(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    CFNumberRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_AD7B4(v6);
      }

      while (v4 != v2);
      CFNumberRef v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void **sub_AD924(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v6 = a1;
  v7[0] = v1;
  v7[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }

  sub_AC14C(v7);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_ADC0C(&v6);
}

void sub_AD9B8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (a2 == 3)
  {
    uint64_t v21 = __cxa_begin_catch(a1);
    unint64_t v22 = (os_log_t *)sub_138E8(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v24;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 98;
      uint64_t v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v26 = v23;
      uint32_t v27 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }

  else
  {
    char v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v29 = v28;
      uint64_t v30 = (os_log_t *)sub_138E8(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16LL))(v29);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v32;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 98;
        uint64_t v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      int v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 98;
        uint64_t v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0xAD980LL);
}

void **sub_ADC0C(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }

  return a1;
}

void sub_ADC4C(caulk::concurrent::message *a1)
{
  *(void *)a1 = off_46E048;
  sub_7A768((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
}

void sub_ADC7C(caulk::concurrent::message *a1)
{
  *(void *)a1 = off_46E048;
  sub_7A768((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  operator delete(v2);
}

void sub_ADCB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  int64x2_t v41 = 0uLL;
  char v42 = 0LL;
  sub_7D084(&__p, "measuredWattsParameterID");
  uint64_t v3 = v2 + 56;
  int v4 = *(_DWORD *)sub_ACA08(v3, &__p);
  if (v44.i8[15] < 0) {
    operator delete(__p);
  }
  if (v4 != -1)
  {
    int v38 = 0;
    sub_AD464((uint64_t)&v39, "Avg Watts Measured", &v38);
    uint64_t v5 = v41.i64[1];
    if (v41.i64[1] >= (unint64_t)v42)
    {
      uint64_t v6 = (v41.i64[1] - v41.i64[0]) >> 4;
      unint64_t v7 = v6 + 1;
      uint64_t v8 = (uint64_t)&v42[-v41.i64[0]];
      else {
        unint64_t v9 = v7;
      }
      CFTypeRef v46 = &v42;
      int v10 = (char *)sub_7BE90(v9);
      uint64_t v11 = (CFTypeRef *)&v10[16 * v6];
      float v45 = &v10[16 * v12];
      *uint64_t v11 = v39;
      CFTypeRef v39 = 0LL;
      v11[1] = cf;
      CFTypeRef cf = 0LL;
      uint64_t v13 = v11 + 2;
      v44.i64[1] = (uint64_t)(v11 + 2);
      BOOL v14 = (void *)v41.i64[1];
      float v15 = (void *)v41.i64[0];
      if (v41.i64[1] == v41.i64[0])
      {
        int64x2_t v17 = vdupq_n_s64(v41.u64[1]);
      }

      else
      {
        do
        {
          __int16 v16 = (const void *)*(v14 - 2);
          v14 -= 2;
          *(v11 - 2) = v16;
          v11 -= 2;
          void *v14 = 0LL;
          v11[1] = (CFTypeRef)v14[1];
          v14[1] = 0LL;
        }

        while (v14 != v15);
        int64x2_t v17 = v41;
        uint64_t v13 = (void *)v44.i64[1];
      }

      v41.i64[0] = (uint64_t)v11;
      v41.i64[1] = (uint64_t)v13;
      int64x2_t v44 = v17;
      int64x2_t v18 = v42;
      char v42 = v45;
      float v45 = v18;
      __p = (void *)v17.i64[0];
      sub_7BEC4((uint64_t)&__p);
      v41.i64[1] = (uint64_t)v13;
      if (cf) {
        CFRelease(cf);
      }
      if (v39) {
        CFRelease(v39);
      }
    }

    else
    {
      *(void *)v41.i64[1] = v39;
      *(void *)(v5 + 8) = cf;
      v41.i64[1] = v5 + 16;
    }
  }

  sub_7D084(&__p, "modelledWattsParameterID");
  int v19 = *(_DWORD *)sub_ACA08(v3, &__p);
  if (v44.i8[15] < 0) {
    operator delete(__p);
  }
  if (v19 != -1)
  {
    int v38 = 0;
    sub_AD464((uint64_t)&v39, "Avg Watts Modelled", &v38);
    uint64_t v20 = v41.i64[1];
    if (v41.i64[1] >= (unint64_t)v42)
    {
      uint64_t v21 = (v41.i64[1] - v41.i64[0]) >> 4;
      unint64_t v22 = v21 + 1;
      uint64_t v23 = (uint64_t)&v42[-v41.i64[0]];
      else {
        unint64_t v24 = v22;
      }
      CFTypeRef v46 = &v42;
      uint64_t v25 = (char *)sub_7BE90(v24);
      uint32_t v27 = (CFTypeRef *)&v25[16 * v21];
      *uint32_t v27 = v39;
      CFTypeRef v39 = 0LL;
      v27[1] = cf;
      CFTypeRef cf = 0LL;
      char v28 = v27 + 2;
      uint64_t v29 = (void *)v41.i64[1];
      uint64_t v30 = (void *)v41.i64[0];
      if (v41.i64[1] == v41.i64[0])
      {
        int64x2_t v32 = vdupq_n_s64(v41.u64[1]);
      }

      else
      {
        do
        {
          os_log_t v31 = (const void *)*(v29 - 2);
          v29 -= 2;
          *(v27 - 2) = v31;
          v27 -= 2;
          void *v29 = 0LL;
          v27[1] = (CFTypeRef)v29[1];
          v29[1] = 0LL;
        }

        while (v29 != v30);
        int64x2_t v32 = v41;
      }

      v41.i64[0] = (uint64_t)v27;
      v41.i64[1] = (uint64_t)v28;
      int64x2_t v44 = v32;
      int v33 = v42;
      char v42 = &v25[16 * v26];
      float v45 = v33;
      __p = (void *)v32.i64[0];
      sub_7BEC4((uint64_t)&__p);
      v41.i64[1] = (uint64_t)v28;
      if (cf) {
        CFRelease(cf);
      }
      if (v39) {
        CFRelease(v39);
      }
    }

    else
    {
      *(void *)v41.i64[1] = v39;
      *(void *)(v20 + 8) = cf;
      v41.i64[1] = v20 + 16;
    }
  }

  os_log_t v34 = sub_7C1F4((void ***)&v41);
  __int16 v37 = v34;
  __p = &v41;
  sub_7CFCC((void ***)&__p);
  sub_AD768(&v37);
  CFRelease(v34);
  uint64_t v35 = (dispatch_queue_s *)sub_869B4();
  int v36 = operator new(8uLL);
  void *v36 = a1;
  dispatch_async_f(v35, v36, (dispatch_function_t)sub_AE0E4);
}

void sub_AE02C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, CFTypeRef cf, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  a11 = &a13;
  sub_7CFCC((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_AE0E4(uint64_t *__p)
{
  uint64_t v2 = *__p;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_AE118(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2 == (void *)(a1 + 64))
  {
LABEL_9:
    atomic_load((unsigned __int8 *)(a1 + 16));
  }

  else
  {
    while (*((_DWORD *)v2 + 14) == -1)
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          int v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }

        while (!v5);
      }

      uint64_t v2 = v4;
      if (v4 == (void *)(a1 + 64)) {
        goto LABEL_9;
      }
    }

    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 16));
    if ((v6 & 1) == 0)
    {
      uint64_t v11 = (os_log_t *)sub_138E8(13);
      uint64_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        float v15 = "PowerLogManager.cpp";
        __int16 v16 = 1024;
        int v17 = 277;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): BeginPowerLogTracking()/EndPowerLogTracking() mismatch.",  (uint8_t *)&v14,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "BeginPowerLogTracking()/EndPowerLogTracking() mismatch.");
    }
  }

  uint64_t v7 = sub_138E8(13);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    uint64_t v8 = *(os_log_s **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 136315394;
        float v15 = "PowerLogManager.cpp";
        __int16 v16 = 1024;
        int v17 = 279;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d EndPowerLogTracking()", (uint8_t *)&v14, 0x12u);
      }
    }
  }

  atomic_store(0, (unsigned __int8 *)(a1 + 16));
  unint64_t v9 = *(caulk::concurrent::message **)(a1 + 24);
  sub_92104();
  uint64_t result = caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_4A9D88, v9);
  *(void *)(a1 + 24) = 0LL;
  return result;
}

void sub_AE30C(_Unwind_Exception *a1)
{
}

void sub_AE32C(uint64_t a1)
{
  uint64_t v1 = sub_AEF18(a1);
  operator delete(v1);
}

void sub_AE340(uint64_t a1, char **a2)
{
  uint64_t v3 = *a2;
  a2[1] = *a2;
  unint64_t v4 = (unint64_t)a2[2];
  if ((unint64_t)v3 >= v4)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v3) >> 2);
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1LL;
    }
    if (v6 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v8 = 0x1555555555555555LL;
    }
    else {
      unint64_t v8 = v7;
    }
    unint64_t v9 = (char *)sub_87E70(v8);
    int v10 = *a2;
    uint64_t v11 = a2[1];
    uint64_t v13 = &v9[12 * v12];
    qmemcpy(v9, "xfuaedislppa", 12);
    BOOL v5 = v9 + 12;
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *(void *)(v11 - 12);
        v11 -= 12;
        int v15 = *((_DWORD *)v11 + 2);
        *(void *)(v9 - 12) = v14;
        v9 -= 12;
        *((_DWORD *)v9 + 2) = v15;
      }

      while (v11 != v10);
      int v10 = *a2;
    }

    *a2 = v9;
    a2[1] = v5;
    a2[2] = v13;
    if (v10) {
      operator delete(v10);
    }
  }

  else
  {
    qmemcpy(v3, "xfuaedislppa", 12);
    BOOL v5 = v3 + 12;
  }

  a2[1] = v5;
}

uint64_t sub_AE430(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int *a6, char *a7)
{
  char v7 = 0;
  if (a4)
  {
    uint64_t result = 4294956430LL;
    goto LABEL_22;
  }

  uint64_t result = 4294956417LL;
  if (a3 <= 10)
  {
    if (a3)
    {
      if (a3 == 3)
      {
        char v7 = 0;
        int v9 = 20 * *(_DWORD *)(a2 + 80) + 4;
      }

      else
      {
        if (a3 != 4) {
          goto LABEL_22;
        }
        int v9 = 104;
      }

      goto LABEL_21;
    }

    char v7 = 1;
    goto LABEL_17;
  }

  if (a3 <= 20)
  {
    if (a3 != 11)
    {
      if (a3 != 16) {
        goto LABEL_22;
      }
      char v7 = 0;
LABEL_17:
      int v9 = 8;
      goto LABEL_21;
    }

    char v7 = 0;
LABEL_19:
    int v9 = 4;
    goto LABEL_21;
  }

  if (a3 == 21)
  {
    char v7 = 1;
    goto LABEL_19;
  }

  if (a3 != 36) {
    goto LABEL_22;
  }
  char v7 = 1;
  int v9 = 16;
LABEL_21:
  uint64_t result = 0LL;
  *a6 = v9;
LABEL_22:
  if (a7) {
    *a7 = v7;
  }
  return result;
}

uint64_t sub_AE4EC(int a1, uint64_t a2, int a3, int a4, unsigned int a5, char *buffer, _DWORD *a7)
{
  if (a4) {
    return 4294956430LL;
  }
  uint64_t result = 4294956417LL;
  if (a3 <= 10)
  {
    if (a3)
    {
      if (a3 == 3)
      {
        unsigned int v20 = *(_DWORD *)(a2 + 80);
        if (*a7 != 4LL * (5 * v20 + 1)) {
          return 4294956445LL;
        }
        if (buffer)
        {
          *(_DWORD *)buffer = 0;
          unsigned int v20 = *(_DWORD *)(a2 + 80);
        }

        if (!v20) {
          return 0LL;
        }
        unsigned int v21 = 0;
        int v22 = 5;
        do
        {
          if (buffer)
          {
            *(_DWORD *)&buffer[4 * (v22 - 4)] = v21 + 1000;
            *(_DWORD *)&buffer[4 * (v22 - 3)] = v21 + 2000;
            *(_DWORD *)&buffer[4 * (v22 - 2)] = v21 + 3000;
            *(_DWORD *)&buffer[4 * (v22 - 1)] = v21 + 4000;
            *(_DWORD *)&buffer[4 * v22] = v21 + 5000;
            unsigned int v20 = *(_DWORD *)(a2 + 80);
          }

          uint64_t result = 0LL;
          ++v21;
          v22 += 5;
        }

        while (v21 < v20);
        return result;
      }

      if (a3 != 4) {
        return result;
      }
      *((_DWORD *)buffer + 24) = 0;
      *((void *)buffer + 7) = 0LL;
      if (!a5)
      {
        *((void *)buffer + 9) = @"global gain";
        *((_DWORD *)buffer + 24) = 0x8000000;
        CFStringGetCString(@"global gain", buffer, 64LL, 0x8000100u);
        *((_DWORD *)buffer + 20) = 13;
        *(void *)(buffer + 84) = 0x41C00000C2C00000LL;
        *((_DWORD *)buffer + 23) = 0;
        unsigned int v23 = *((_DWORD *)buffer + 24) | 0xC0000000;
LABEL_71:
        uint64_t result = 0LL;
        *((_DWORD *)buffer + 24) = v23;
        return result;
      }

      if (a5 >= 0x3E8)
      {
        unsigned int v11 = a5 % 0x3E8;
        if (a5 % 0x3E8 >= *(_DWORD *)(a2 + 80)) {
          return 4294956418LL;
        }
        a5 = 1000 * (a5 / 0x3E8);
      }

      else
      {
        unsigned int v11 = 0;
      }

      unsigned int v24 = v11 + 1;
      uint64_t result = 4294956418LL;
      if ((int)a5 <= 2999)
      {
        if (a5 != 1000)
        {
          if (a5 != 2000) {
            return result;
          }
          *((void *)buffer + 9) = @"type";
          *((_DWORD *)buffer + 24) = 0x8000000;
          CFStringGetCString(@"type", buffer, 64LL, 0x8000100u);
          *((_DWORD *)buffer + 16) = v24;
          int v25 = *((_DWORD *)buffer + 24);
          *((_DWORD *)buffer + 20) = 1;
          uint64_t v27 = 0x4120000000000000LL;
          goto LABEL_67;
        }

        *((void *)buffer + 9) = @"bypass";
        *((_DWORD *)buffer + 24) = 0x8000000;
        CFStringGetCString(@"bypass", buffer, 64LL, 0x8000100u);
        *((_DWORD *)buffer + 16) = v24;
        int v25 = *((_DWORD *)buffer + 24);
        *((_DWORD *)buffer + 20) = 2;
        *(void *)(buffer + 84) = 0x3F80000000000000LL;
        int v26 = 1065353216;
      }

      else
      {
        if (a5 != 3000)
        {
          if (a5 != 4000)
          {
            if (a5 != 5000) {
              return result;
            }
            *((void *)buffer + 9) = @"bandwidth";
            *((_DWORD *)buffer + 24) = 0x8000000;
            CFStringGetCString(@"bandwidth", buffer, 64LL, 0x8000100u);
            *((_DWORD *)buffer + 16) = v24;
            int v25 = *((_DWORD *)buffer + 24);
            *((_DWORD *)buffer + 20) = 21;
            *(void *)(buffer + 84) = 0x40A000003D4CCCCDLL;
            int v26 = 1056964608;
            goto LABEL_69;
          }

          *((void *)buffer + 9) = @"gain";
          *((_DWORD *)buffer + 24) = 0x8000000;
          CFStringGetCString(@"gain", buffer, 64LL, 0x8000100u);
          *((_DWORD *)buffer + 16) = v24;
          int v25 = *((_DWORD *)buffer + 24);
          *((_DWORD *)buffer + 20) = 13;
          uint64_t v27 = 0x41C00000C2C00000LL;
LABEL_67:
          *(void *)(buffer + 84) = v27;
          *((_DWORD *)buffer + 23) = 0;
LABEL_70:
          unsigned int v23 = v25 | 0xC0100000;
          goto LABEL_71;
        }

        *((void *)buffer + 9) = @"frequency";
        *((_DWORD *)buffer + 24) = 0x8000000;
        CFStringGetCString(@"frequency", buffer, 64LL, 0x8000100u);
        *((_DWORD *)buffer + 16) = v24;
        int v25 = *((_DWORD *)buffer + 24);
        *((void *)buffer + 10) = 0x4120000000000008LL;
        float v28 = *(double *)(a2 + 8) * 0.49000001;
        *((float *)buffer + 22) = v28;
        int v26 = 1148846080;
      }

void sub_AEC38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_AEC68(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a4) {
    return 4294956430LL;
  }
  if (!a3)
  {
    if (a7 == 8) {
      return sub_1C8D80(a2, *(CFTypeRef *)a6);
    }
    return 4294956417LL;
  }

  if (a3 != 36)
  {
    if (a3 == 21)
    {
      *(_DWORD *)(a2 + 88) = *(_DWORD *)a6;
      sub_1C9040((double *)a2);
      return 0LL;
    }

    return 4294956417LL;
  }

  if (a7 == 16 && *(void *)(a6 + 8))
  {
    CFRelease(*(CFTypeRef *)(a2 + 176));
    *(_OWORD *)(a2 + 168) = *(_OWORD *)a6;
    CFRetain(*(CFTypeRef *)(a2 + 176));
    return 0LL;
  }

  return 4294956445LL;
}

uint64_t sub_AED14(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float *a6)
{
  if (a3)
  {
    if (a3 >= 0x3E8)
    {
      unsigned int v6 = a3 % 0x3E8;
      if (a3 % 0x3E8 >= *(_DWORD *)(a2 + 80)) {
        return 4294956418LL;
      }
      a3 = 1000 * (a3 / 0x3E8);
    }

    else
    {
      unsigned int v6 = 0;
    }

    uint64_t result = 4294956418LL;
    if ((int)a3 <= 2999)
    {
      if (a3 == 1000)
      {
        unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 56) + 20LL * v6);
      }

      else
      {
        if (a3 != 2000) {
          return result;
        }
        unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 56) + 20LL * v6 + 4);
      }

      float v7 = (float)v9;
    }

    else
    {
      switch(a3)
      {
        case 0xBB8u:
          float v7 = *(float *)(*(void *)(a2 + 56) + 20LL * v6 + 8);
          break;
        case 0xFA0u:
          float v7 = *(float *)(*(void *)(a2 + 56) + 20LL * v6 + 12);
          break;
        case 0x1388u:
          float v7 = *(float *)(*(void *)(a2 + 56) + 20LL * v6 + 16);
          break;
        default:
          return result;
      }
    }
  }

  else
  {
    float v7 = *(float *)(a2 + 84);
  }

  uint64_t result = 0LL;
  *a6 = v7;
  return result;
}

uint64_t sub_AEE0C(float a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a4)
  {
    *(float *)(a3 + 84) = a1;
LABEL_5:
    sub_1C9040((double *)a3);
    return 0LL;
  }

  if (a4 >= 0x3E8)
  {
    unsigned int v4 = a4 % 0x3E8;
    if (a4 % 0x3E8 >= *(_DWORD *)(a3 + 80)) {
      return 4294956418LL;
    }
    a4 = 1000 * (a4 / 0x3E8);
  }

  else
  {
    unsigned int v4 = 0;
  }

  uint64_t result = 4294956418LL;
  if ((int)a4 <= 2999)
  {
    if (a4 == 1000)
    {
      *(_DWORD *)(*(void *)(a3 + 56) + 20LL * v4) = a1;
      goto LABEL_5;
    }

    if (a4 == 2000)
    {
      *(_DWORD *)(*(void *)(a3 + 56) + 20LL * v4 + 4) = a1;
      goto LABEL_5;
    }
  }

  else
  {
    switch(a4)
    {
      case 0xBB8u:
        *(float *)(*(void *)(a3 + 56) + 20LL * v4 + 8) = a1;
        goto LABEL_5;
      case 0xFA0u:
        *(float *)(*(void *)(a3 + 56) + 20LL * v4 + 12) = a1;
        goto LABEL_5;
      case 0x1388u:
        *(float *)(*(void *)(a3 + 56) + 20LL * v4 + 16) = a1;
        goto LABEL_5;
    }
  }

  return result;
}

void *sub_AEF18(uint64_t a1)
{
  *(void *)a1 = off_46E070;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != *(void *)(a1 + 32))
  {
    AUPBUnregisterAU(*(void *)(a1 + 16), *(void *)(v2 + 16));
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3 != v4)
    {
      uint64_t v5 = v3 - (v4 + 24);
      if (v3 != v4 + 24) {
        memmove(*(void **)(a1 + 24), (const void *)(v4 + 24), v3 - (v4 + 24));
      }
      *(void *)(a1 + 32) = v4 + v5;
    }
  }

  return sub_239DF4((void *)a1);
}

uint64_t sub_AEF9C( int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return AudioObjectAddPropertyListener(inObjectID, inAddress, inListener, inClientData);
}

BOOL sub_AEFB0(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress)
{
  return AudioObjectHasProperty(inObjectID, inAddress) != 0;
}

BOOL sub_AEFD4(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress)
{
  Boolean outIsSettable = 0;
  if (AudioObjectIsPropertySettable(inObjectID, inAddress, &outIsSettable)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = outIsSettable == 0;
  }
  return !v3;
}

uint64_t sub_AF014( int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, void *inQualifierData)
{
  UInt32 outDataSize = 0;
  if (AudioObjectGetPropertyDataSize(inObjectID, inAddress, inQualifierDataSize, inQualifierData, &outDataSize)) {
    return 0LL;
  }
  else {
    return outDataSize;
  }
}

uint64_t sub_AF058( int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return AudioObjectGetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

uint64_t sub_AF074( int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, void *inQualifierData, UInt32 inDataSize, void *inData)
{
  return AudioObjectSetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, inDataSize, inData);
}

uint64_t sub_AF090(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
}

void sub_AF0F4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, __int128 buf, __int128 a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  unsigned int v24 = (unsigned int *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v25 = v24;
    int v26 = (os_log_t *)sub_138E8(13);
    uint64_t v27 = *v26;
    if (!*v26 || !os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    sub_2CA1C(&a15, v25[2]);
    int v28 = a20;
    uint64_t v29 = (void **)a15;
    sub_2CA1C(&__p, *v22);
    unsigned int v30 = &a15;
    if (v28 < 0) {
      unsigned int v30 = v29;
    }
    if (a14 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    LODWORD(buf) = 136315906;
    *(void *)((char *)&buf + 4) = "HALSystem.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 27;
    WORD1(a22) = 2080;
    *(void *)((char *)&a22 + 4) = v30;
    WORD6(a22) = 2080;
    *(void *)((char *)&a22 + 14) = p_p;
    _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Exception (%s) looking for presence of property %s",  (uint8_t *)&buf,  0x26u);
    if (a14 < 0) {
      operator delete(__p);
    }
  }

  else
  {
    int64x2_t v32 = (os_log_t *)sub_138E8(13);
    int v33 = *v32;
    if (!*v32 || !os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    sub_2CA1C(&a15, *v22);
    if (a20 >= 0) {
      os_log_t v34 = &a15;
    }
    else {
      os_log_t v34 = a15;
    }
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "HALSystem.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 32;
    WORD1(a22) = 2080;
    *(void *)((char *)&a22 + 4) = v34;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unknown Exception looking for presence of property %s",  (uint8_t *)&buf,  0x1Cu);
  }

  if (a20 < 0) {
    operator delete(a15);
  }
LABEL_20:
  __cxa_end_catch();
  JUMPOUT(0xAF0C4LL);
}

uint64_t sub_AF2A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
}

void sub_AF2C4(void *a1)
{
}

uint64_t sub_AF2F8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
}

void sub_AF31C(void *a1)
{
}

void sub_AF350(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_46E130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_AF360(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_46E130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_AF380(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_AF394(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_AF3A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

CFTypeRef sub_AF3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  CFTypeRef result = *(CFTypeRef *)(a1 + 448);
  *(void *)a2 = result;
  LODWORD(v2) = *(unsigned __int8 *)(v2 + 456);
  *(_BYTE *)(a2 + 8) = v2;
  if ((_DWORD)v2) {
    BOOL v4 = result == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return CFRetain(result);
  }
  return result;
}

uint64_t sub_AF3D8(os_unfair_lock_s *a1)
{
  if (sub_14EA14()
    && (*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  0LL))
  {
    uint64_t v2 = operator new(0x50uLL);
    sub_EC558((uint64_t)v2);
    sub_1D5AE0(a1, (uint64_t)v2);
    BOOL v3 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v3, 0);
    sub_1D5AE0(a1, (uint64_t)v3);
    sub_1D55D4((uint64_t *)a1, 0, 1886742889LL, (uint64_t)v2);
    sub_1D580C((uint64_t)a1, 0, 1886742889LL, (uint64_t)v3);
    sub_F9530((uint64_t)v40, qword_48CEE8);
    BOOL v4 = (os_log_t *)sub_138E8(17);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = v42[0];
      uint64_t v7 = v41[0];
      uint64_t v8 = v40[0];
      (*(void (**)(char **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v37,  a1);
      if (v7) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = v8;
      }
      if (v6) {
        uint64_t v9 = v6;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_USB_IDAM_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 93;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&buf[20] = v9;
      __int16 v44 = 2112;
      float v45 = v37;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a USB IDAM input port with name %@ and UID %@",  buf,  0x26u);
      sub_19DFC((uint64_t)&v37);
    }

    CFArrayRef v10 = (char *)operator new(0xCuLL);
    *(void *)&buf[8] = v10 + 12;
    *(void *)&buf[16] = v10 + 12;
    qmemcpy(v10, "gcrvmorvtshv", 12);
    *(void *)buf = v10;
    __int16 v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v34,  a1);
    sub_AFC9C(&v35, &qword_48CEE8, (uint64_t)a1, (uint64_t)buf, (uint64_t)v40, (uint64_t)v34, &v37);
    __int128 v36 = v35;
    __int128 v35 = 0uLL;
    sub_3711D4((uint64_t)a1, (void ***)&v36);
    unsigned int v11 = (std::__shared_weak_count *)*((void *)&v36 + 1);
    if (*((void *)&v36 + 1))
    {
      int v12 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    unsigned int v14 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1))
    {
      uint64_t v15 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    sub_19DFC((uint64_t)v34);
    *(void *)&__int128 v35 = &v37;
    sub_7A668((void ***)&v35);
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    sub_19DFC((uint64_t)v42);
    sub_19DFC((uint64_t)v41);
    sub_19DFC((uint64_t)v40);
  }

  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  1LL))
  {
    int v17 = operator new(0x50uLL);
    sub_EC558((uint64_t)v17);
    sub_1D5AE0(a1, (uint64_t)v17);
    int64x2_t v18 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v18, 0);
    sub_1D5AE0(a1, (uint64_t)v18);
    sub_1D55D4((uint64_t *)a1, 1u, 1886742895LL, (uint64_t)v17);
    sub_1D580C((uint64_t)a1, 1u, 1886742895LL, (uint64_t)v18);
    sub_F9530((uint64_t)v40, qword_48CEB8);
    int v19 = (os_log_t *)sub_138E8(17);
    unsigned int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = v42[0];
      uint64_t v22 = v41[0];
      uint64_t v23 = v40[0];
      (*(void (**)(char **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v37,  a1);
      if (v22) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = v23;
      }
      if (v21) {
        uint64_t v24 = v21;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_USB_IDAM_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 110;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&buf[20] = v24;
      __int16 v44 = 2112;
      float v45 = v37;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a USB IDAM output port with name %@ and UID %@",  buf,  0x26u);
      sub_19DFC((uint64_t)&v37);
    }

    int v25 = (char *)operator new(0xCuLL);
    *(void *)&buf[8] = v25 + 12;
    *(void *)&buf[16] = v25 + 12;
    qmemcpy(v25, "gcrvmorvtshv", 12);
    *(void *)buf = v25;
    __int16 v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v34,  a1);
    sub_AFC9C(&v35, &qword_48CEB8, (uint64_t)a1, (uint64_t)buf, (uint64_t)v40, (uint64_t)v34, &v37);
    __int128 v33 = v35;
    __int128 v35 = 0uLL;
    sub_3711D4((uint64_t)a1, (void ***)&v33);
    int v26 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      uint64_t v27 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    uint64_t v29 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1))
    {
      unsigned int v30 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    sub_19DFC((uint64_t)v34);
    *(void *)&__int128 v35 = &v37;
    sub_7A668((void ***)&v35);
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    sub_19DFC((uint64_t)v42);
    sub_19DFC((uint64_t)v41);
    sub_19DFC((uint64_t)v40);
  }

  return 1LL;
}

void sub_AF968( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_AFA20()
{
  return 0LL;
}

uint64_t sub_AFA2C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886742895 && a2 != 1886742889)
  {
    BOOL v4 = (os_log_t *)sub_138E8(17);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      unsigned int v14 = "Device_USB_IDAM_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 137;
      __int16 v17 = 2080;
      int64x2_t v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unsigned int v14 = "Device_USB_IDAM_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 138;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_AFBE4(_Unwind_Exception *a1)
{
}

void sub_AFC00(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_AFC08()
{
  return 0LL;
}

uint64_t sub_AFC10()
{
  return 1LL;
}

uint64_t sub_AFC20()
{
  return 0LL;
}

uint64_t sub_AFC28()
{
  return 0LL;
}

CFTypeRef sub_AFC34@<X0>(CFTypeRef result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 58);
  if (v3) {
    CFTypeRef result = CFRetain(*((CFTypeRef *)result + 58));
  }
  *a2 = v3;
  return result;
}

CFTypeRef sub_AFC68@<X0>(CFTypeRef result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 59);
  if (v3) {
    CFTypeRef result = CFRetain(*((CFTypeRef *)result + 59));
  }
  *a2 = v3;
  return result;
}

void sub_AFC9C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  unsigned int v14 = operator new(0x228uLL);
  v14[1] = 0LL;
  v14[2] = 0LL;
  void *v14 = off_485B80;
  sub_7D084(__p, "");
  sub_F9638((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (__int128 *)__p);
  v14[3] = &off_46FD40;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;
  sub_AFDAC((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_AFD7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_AFDAC(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    BOOL v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        BOOL v4 = (std::__shared_weak_count *)a2[1];
      }

      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        CFArrayRef v10 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }

void sub_AFE5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_485B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_AFE6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_485B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_AFE8C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_AFE9C(void *a1)
{
  *a1 = off_46E168;
  uint64_t v2 = a1[12];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  a1[12] = 0LL;
  return sub_2F4E00((uint64_t)a1);
}

void sub_AFEE0(void *a1)
{
  *a1 = off_46E168;
  uint64_t v2 = a1[12];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  a1[12] = 0LL;
  uint64_t v3 = (void *)sub_2F4E00((uint64_t)a1);
  operator delete(v3);
}

void sub_AFF28(uint64_t a1, unsigned int a2, uint64_t *a3, int a4)
{
  if (a2)
  {
    uint64_t v7 = 0LL;
    char v8 = 0;
    uint64_t v9 = a2;
LABEL_3:
    char v18 = v8;
    uint64_t v10 = 12 * v7;
    do
    {
      int v11 = *(_DWORD *)((char *)a3 + v10);
      if (v11 <= 1919774834)
      {
        if (v11 != 1064725619 && v11 != 1684633187)
        {
LABEL_23:
          ++v7;
          char v8 = 1;
          uint64_t v17 = a2;
          if (v7 != v9) {
            goto LABEL_3;
          }
          goto LABEL_26;
        }
      }

      else if (v11 != 1919774835 && v11 != 1986817377 && v11 != 1986229104)
      {
        goto LABEL_23;
      }

      *(_DWORD *)uint64_t v22 = *(_DWORD *)((char *)a3 + v10);
      *(void *)&v22[4] = *(void *)(a1 + 104);
      if (a4)
      {
        (*(void (**)(void, uint64_t, _BYTE *, uint64_t))(**(void **)(a1 + 80) + 72LL))( *(void *)(a1 + 80),  1LL,  v22,  1LL);
      }

      else
      {
        uint64_t v20 = *(void *)v22;
        int v21 = *(_DWORD *)&v22[8];
        __int16 v15 = (dispatch_queue_s *)sub_869B4();
        char v16 = operator new(0x18uLL);
        *char v16 = a1;
        v16[1] = v20;
        *((_DWORD *)v16 + 4) = v21;
        dispatch_async_f(v15, v16, (dispatch_function_t)sub_B04C8);
      }

      ++v7;
      v10 += 12LL;
    }

    while (v9 != v7);
    uint64_t v17 = a2;
    if ((v18 & 1) == 0) {
      return;
    }
LABEL_26:
    sub_357E0(a1, v17, a3, a4);
  }

float sub_B00AC(uint64_t a1)
{
  v7[0] = 0.0;
  v7[1] = 0.0;
  int v6 = 16;
  uint64_t v1 = *(void *)(a1 + 96);
  strcpy(buf, "#bdvbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(uint64_t, _BYTE *, void, void, int *, double *))(*(void *)v1 + 40LL))( v1,  buf,  0LL,  0LL,  &v6,  v7);
  if (v7[0] > 3.40282347e38)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
      __int16 v9 = 1024;
      int v10 = 67;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::overflow_error): value exceeded the MAXFLOAT.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A9C4C(exception, "value exceeded the MAXFLOAT.");
  }

  return v7[0];
}

void sub_B01F0(_Unwind_Exception *a1)
{
}

float sub_B020C(uint64_t a1)
{
  uint64_t v7 = 0LL;
  double v8 = 0.0;
  int v6 = 16;
  uint64_t v1 = *(void *)(a1 + 96);
  strcpy(buf, "#bdvbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(uint64_t, _BYTE *, void, void, int *, uint64_t *))(*(void *)v1 + 40LL))( v1,  buf,  0LL,  0LL,  &v6,  &v7);
  if (v8 > 3.40282347e38)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
      __int16 v10 = 1024;
      int v11 = 79;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::overflow_error): value exceeded the MAXFLOAT.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A9C4C(exception, "value exceeded the MAXFLOAT.");
  }

  return v8;
}

void sub_B0350(_Unwind_Exception *a1)
{
}

float sub_B036C(uint64_t a1)
{
  int v5 = 4;
  float v6 = 0.0;
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v3 = 0x676C6F62766F6C64LL;
  int v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v1 + 40LL))( v1,  &v3,  0LL,  0LL,  &v5,  &v6);
  return v6;
}

uint64_t sub_B03C4(uint64_t a1, float a2)
{
  float v6 = a2;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F62766F6C64LL;
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, float *))(*(void *)v2 + 48LL))( v2,  &v4,  0LL,  0LL,  4LL,  &v6);
}

float sub_B0414(uint64_t a1)
{
  int v5 = 4;
  float v6 = 0.0;
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v3 = 0x676C6F62766F6C6DLL;
  int v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v1 + 40LL))( v1,  &v3,  0LL,  0LL,  &v5,  &v6);
  return v6;
}

float sub_B046C(uint64_t a1, float a2)
{
  float v7 = a2;
  int v6 = 4;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F6264623276LL;
  int v5 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v2 + 40LL))( v2,  &v4,  0LL,  0LL,  &v6,  &v7);
  return v7;
}

void sub_B04C8(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  (*(void (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v2 + 80) + 72LL))( *(void *)(v2 + 80),  1LL,  &v3,  1LL);
  operator delete(a1);
}

void sub_B0558( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v19 = __cxa_begin_catch(exception_object);
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v22;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 319;
      uint64_t v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }

  else
  {
    int v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v27 = v26;
      unint64_t v28 = (os_log_t *)sub_138E8(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16LL))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v30;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 319;
        uint64_t v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unint64_t v31 = (os_log_t *)sub_138E8(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 319;
        uint64_t v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0xB0520LL);
}

uint64_t sub_B09E4(void *a1)
{
  *a1 = off_46E288;
  uint64_t v2 = a1[12];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  a1[12] = 0LL;
  return sub_2F4E00((uint64_t)a1);
}

void sub_B0A28(void *a1)
{
  *a1 = off_46E288;
  uint64_t v2 = a1[12];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  a1[12] = 0LL;
  uint64_t v3 = (void *)sub_2F4E00((uint64_t)a1);
  operator delete(v3);
}

uint64_t sub_B0A70(uint64_t a1, int a2)
{
  int v6 = a2;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F626D757465LL;
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, int *))(*(void *)v2 + 48LL))( v2,  &v4,  0LL,  0LL,  4LL,  &v6);
}

void *sub_B0AC0(void *a1)
{
  *a1 = &off_46E378;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_B0AFC(void *__p)
{
  void *__p = &off_46E378;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_B0B38(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) + ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
}

double sub_B0B50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v5 >= (*(void *)(a1 + 24) - v7) >> 2)
    {
      __int16 v9 = (os_log_t *)sub_138E8(13);
      __int16 v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        unint64_t v13 = "VirtualAudio_Control.cpp";
        __int16 v14 = 1024;
        int v15 = 582;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): Invalid control address index",  (uint8_t *)&v12,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_8F9F4(exception, "Invalid control address index");
    }

    int v6 = (char *)(v7 + 4 * v5);
    goto LABEL_6;
  }

  if (a2 <= 0x25)
  {
    int v6 = &aKcajmlovdlovBd[4 * a2];
LABEL_6:
    *(_DWORD *)a3 = *(_DWORD *)v6;
  }

  double result = NAN;
  *(void *)(a3 + 4) = -3587560918LL;
  return result;
}

void sub_B0C88(_Unwind_Exception *exception_object)
{
}

uint64_t sub_B0CA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  if (!v2)
  {
    BOOL v8 = *(void *)(a1 + 112) == 0LL;
    unsigned int v9 = 2003329396;
    goto LABEL_12;
  }

  uint64_t v11 = 0x676C6F6278766F6CLL;
  int v12 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v11))
  {
    BOOL v8 = *(void *)(a1 + 112) == 0LL;
    unsigned int v9 = 1970171760;
LABEL_12:
    if (v8) {
      return 0LL;
    }
    else {
      return v9;
    }
  }

  uint64_t v3 = *(void *)(a1 + 112);
  BOOL v4 = v3 == 0;
  if (v3) {
    unint64_t v5 = sub_B0D64;
  }
  else {
    unint64_t v5 = 0LL;
  }
  if (v4) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = a1;
  }
  v10[0] = v5;
  v10[1] = v6;
  (*(void (**)(void, uint64_t *, void, void, uint64_t, void *))(**(void **)(a1 + 96) + 48LL))( *(void *)(a1 + 96),  &v11,  0LL,  0LL,  16LL,  v10);
  return 0LL;
}

void sub_B0D64(void *a1, float a2)
{
  unint64_t v5 = (void **)a1[14];
  uint64_t v4 = a1[15];
  uint64_t v6 = a1[10];
  if (v6) {
    (*(void (**)(void **__return_ptr))(*(void *)v6 + 96LL))(__p);
  }
  else {
    sub_7D084(__p, "unknown");
  }
  if (!v5)
  {
    uint64_t v14 = sub_138E8(0);
    uint64_t v15 = sub_138E8(38);
    char v16 = 0;
    uint64_t v17 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1LL;
      if ((v20 & 1) != 0)
      {
        if ((v18 & 1) == 0) {
          goto LABEL_30;
        }
        goto LABEL_24;
      }
    }

    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
    if ((*(void *)(v14 + 8) & 1) == 0) {
      goto LABEL_30;
    }
LABEL_24:
    uint64_t v27 = *(os_log_s **)v14;
    if (!v27 || !os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_30;
    }
    unint64_t v28 = __p;
    if (v30 < 0) {
      unint64_t v28 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
    __int16 v32 = 1024;
    int v33 = 482;
    __int16 v34 = 2080;
    __int128 v35 = v28;
    __int16 v36 = 2048;
    double v37 = a2;
    uint64_t v24 = "%25s:%-5d No external volume handler registered for VAD '%s'. Dropping volume change of %f on the floor.";
    uint32_t v25 = v27;
    uint32_t v26 = 38;
    goto LABEL_29;
  }

  ((void (*)(void, uint64_t, float))v5)(*(unsigned int *)(a1[10] + 8LL), v4, a2);
  uint64_t v7 = sub_138E8(0);
  uint64_t v8 = sub_138E8(38);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_16;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_16:
  os_log_t v21 = *(os_log_s **)v7;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(_DWORD *)(a1[10] + 8LL);
    uint64_t v23 = __p;
    if (v30 < 0) {
      uint64_t v23 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
    __int16 v32 = 1024;
    int v33 = 478;
    __int16 v34 = 2048;
    __int128 v35 = v5;
    __int16 v36 = 2048;
    double v37 = a2;
    __int16 v38 = 1024;
    int v39 = v22;
    __int16 v40 = 2080;
    int64x2_t v41 = v23;
    uint64_t v24 = "%25s:%-5d Calling external volume handler %p with volume %f for object ID %u. VAD '%s'.";
    uint32_t v25 = v21;
    uint32_t v26 = 54;
LABEL_29:
    _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEBUG, v24, buf, v26);
  }

void sub_B1044( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B1070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4 && v4 != a2)
    {
      uint64_t v11 = (os_log_t *)sub_138E8(13);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v15 = "VirtualAudio_Control.cpp";
          __int16 v16 = 1024;
          int v17 = 353;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Attempt to register an external volume handler when one is already registered.",  buf,  0x12u);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      int v10 = 1852797029;
      goto LABEL_18;
    }
  }

  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = a3;
  uint64_t result = sub_B0CA4(a1);
  if (a2 && (_DWORD)result)
  {
    int v13 = result;
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v15 = "VirtualAudio_Control.cpp";
      __int16 v16 = 1024;
      int v17 = 359;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result): error configuring external volume handler on dispatch control",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    int v10 = v13;
LABEL_18:
    exception[2] = v10;
  }

  return result;
}

void sub_B1210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned int *)a1;
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6) {
    uint64_t v7 = (*(void *(**)(void **__return_ptr))(*(void *)v6 + 96LL))(v102);
  }
  else {
    uint64_t v7 = sub_7D084(v102, "unknown");
  }
  uint64_t v86 = (uint64_t)&v86;
  uint64_t v8 = a2;
  uint64_t v87 = a2;
  __n128 v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v86 - v10;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  v9.n128_u64[0] = 136317186LL;
  __n128 v89 = v9;
  v9.n128_u64[0] = 136317442LL;
  __n128 v88 = v9;
  v94 = (char *)&v86 - v10;
  uint64_t v93 = a3;
  uint64_t v92 = a2;
  do
  {
    uint64_t v14 = (int *)(a3 + 12 * v12);
    int v15 = *v14;
    if (*v14 == 1986229104)
    {
      uint64_t v16 = sub_138E8(0);
      uint64_t v17 = sub_138E8(38);
      char v18 = 0;
      uint64_t v19 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v20 = *(void *)(v16 + 8);
      while (1)
      {
        uint64_t v21 = *(int *)&buf[4 * v19];
        char v22 = v18;
        if (((v20 & v21) != 0) != ((*(void *)(v17 + 8) & v21) != 0)) {
          break;
        }
        char v18 = 1;
        uint64_t v19 = 1LL;
        if ((v22 & 1) != 0)
        {
          if ((v20 & 1) == 0) {
            goto LABEL_27;
          }
          goto LABEL_14;
        }
      }

      if ((v20 & v21) == 0) {
        uint64_t v16 = v17;
      }
      if ((*(void *)(v16 + 8) & 1) != 0)
      {
LABEL_14:
        uint64_t v23 = *(os_log_s **)v16;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v95 = v13;
          if (v103 >= 0) {
            uint64_t v24 = v102;
          }
          else {
            uint64_t v24 = (void **)v102[0];
          }
          uint64_t v25 = a3 + 12 * v12;
          sub_2CA1C(v100, *(unsigned int *)(v25 + 4));
          uint64_t v26 = a3;
          int v27 = v101;
          unint64_t v28 = (void **)v100[0];
          int v29 = *(_DWORD *)(v25 + 4);
          int v30 = *(_DWORD *)(v26 + 12 * v12 + 8);
          sub_2CA1C(v98, v5[26]);
          unint64_t v31 = v100;
          if (v27 < 0) {
            unint64_t v31 = v28;
          }
          __int16 v32 = v98;
          if (v99 < 0) {
            __int16 v32 = (void **)v98[0];
          }
          unsigned int v33 = v5[26];
          unsigned int v34 = v5[27];
          *(_DWORD *)buf = v89.n128_u32[0];
          *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
          __int16 v105 = 1024;
          int v106 = 379;
          __int16 v107 = 2080;
          *(void *)uint64_t v108 = v24;
          *(_WORD *)&v108[8] = 2080;
          v109 = v31;
          __int16 v110 = 1024;
          *(_DWORD *)CFIndex v111 = v29;
          *(_WORD *)&v111[4] = 1024;
          *(_DWORD *)&v111[6] = v30;
          *(_WORD *)uint64_t v112 = 2080;
          *(void *)&v112[2] = v32;
          __int16 v113 = 1024;
          *(_DWORD *)int v114 = v33;
          *(_WORD *)&v114[4] = 1024;
          *(_DWORD *)&v114[6] = v34;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Send property listener callback to VAD client '%s'. (selector: kVirtualAudioDevicePropertyVolumeCo ntrolSupported; scope: '%s' (%u); element: %u) translated to (scope: '%s' (%u); element: %u).",
            buf,
            0x48u);
          if (v99 < 0) {
            operator delete(v98[0]);
          }
          uint64_t v11 = v94;
          uint64_t v13 = v95;
          a3 = v93;
          uint64_t v8 = v92;
          if (v101 < 0) {
            operator delete(v100[0]);
          }
        }
      }

void sub_B1B70(_Unwind_Exception *exception_object)
{
}

uint64_t sub_B1BFC(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 320LL))( a2,  *(void *)(result + 16),  *(void *)(result + 24));
  }
  return result;
}

uint64_t sub_B1C24(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 336LL))(a2, *(void *)(result + 16));
  }
  return result;
}

void *sub_B1C44(void *a1)
{
  *a1 = &off_46E420;
  uint64_t v2 = (void *)a1[4];
  a1[4] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_B1C80(void *__p)
{
  void *__p = &off_46E420;
  uint64_t v2 = (void *)__p[4];
  __p[4] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

uint64_t sub_B1CBC(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)a2 + 416LL))( a2,  *(void *)(result + 16),  *(unsigned __int8 *)(result + 24),  *(unsigned int *)(result + 28),  *(void *)(result + 32));
  }
  return result;
}

uint64_t sub_B1CF8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 400LL))(a2);
  }
  return result;
}

void sub_B1D18(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a1 + 12);
    if (a2[122] != v3)
    {
      int v4 = *(unsigned __int8 *)(a1 + 16);
      a2[122] = v3;
      uint64_t v5 = *((void *)a2 + 58);
      if (v5)
      {
        for (uint64_t i = *(uint64_t **)(v5 + 8); i != *(uint64_t **)(v5 + 16); ++i)
        {
          uint64_t v7 = *i;
          sub_74774(v5, v7);
        }

        sub_7480C((_DWORD **)v5);
      }

      uint64_t v8 = *((void *)a2 + 59);
      if (v8)
      {
        for (j = *(uint64_t **)(v8 + 8); j != *(uint64_t **)(v8 + 16); ++j)
        {
          uint64_t v10 = *j;
          sub_B47C8(v8, v10);
        }

        sub_B4860((_DWORD **)v8);
      }

      if (v4)
      {
        __int128 v21 = 0u;
        uint64_t v11 = sub_87E70(1uLL);
        *(void *)uint64_t v11 = 0x676C6F626673697ALL;
        v11[2] = 0;
        __p[1] = v11 + 3;
        *(void *)&__int128 v21 = &v11[3 * v12];
        __p[0] = v11;
        (*(void (**)(_DWORD *, uint64_t, void **))(*(void *)a2 + 552LL))(a2, 1LL, __p);
        uint64_t v13 = (unint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 528LL))(a2);
        if (v13
          && ((uint64_t v14 = pthread_self(), v15 = (_opaque_pthread_t *)atomic_load(v13 + 2), pthread_equal(v14, v15))
           || (uint64_t v16 = pthread_self(), v17 = (_opaque_pthread_t *)atomic_load(v13 + 13), pthread_equal(v16, v17))))
        {
          sub_79C14(v13);
          char v18 = 0;
        }

        else
        {
          char v18 = 1;
        }

        (*(void (**)(_DWORD *, void))(*(void *)a2 + 72LL))( a2,  -1431655765 * ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 2));
        if (v13) {
          char v19 = v18;
        }
        else {
          char v19 = 1;
        }
        if ((v19 & 1) == 0) {
          sub_79A04((uint64_t)v13);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }

      else
      {
        (*(void (**)(_DWORD *, void, void))(*(void *)a2 + 552LL))(a2, 0LL, 0LL);
      }
    }
  }

void sub_B1EDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B1F00(uint64_t a1)
{
  *(void *)a1 = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
  return a1;
}

void sub_B1F34(char *a1)
{
  *(void *)a1 = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
  operator delete(a1);
}

BOOL sub_B1F68(uint64_t a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(a1 + 16));
  return v1 == 0;
}

uint64_t sub_B1F7C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_46E4E8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  int v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 24), 0LL);
  if (v3)
  {
    int v5 = v3;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "CAMutex.cpp";
      __int16 v9 = 1024;
      int v10 = 56;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAMutex::CAMutex: Could not init the mutex",  (uint8_t *)&v7,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v5;
  }

  return a1;
}

uint64_t sub_B2084(uint64_t a1)
{
  *(void *)a1 = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
  return a1;
}

_BYTE *sub_B20B8(_BYTE *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  a1[8] = 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48LL))(a2) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      int v5 = "CAMutex.cpp";
      __int16 v6 = 1024;
      int v7 = 304;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  Major problem: Unlocker attempted to unlock a mutex not owned by the current thread!",  (uint8_t *)&v4,  0x12u);
    }

    __break(1u);
  }

  (*(void (**)(void))(**(void **)a1 + 24LL))(*(void *)a1);
  a1[8] = 1;
  return a1;
}

_BYTE *sub_B21A8(_BYTE *a1)
{
  if (a1[8]) {
    (*(void (**)(void))(**(void **)a1 + 16LL))();
  }
  return a1;
}

void sub_B21E8(uint64_t a1)
{
  unint64_t v1 = (void *)sub_B90EC(a1);
  operator delete(v1);
}

uint64_t *sub_B21FC()
{
  return &qword_48F828;
}

uint64_t sub_B2218(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

CFStringRef sub_B2224()
{
  return @"Apple Inc.";
}

const void *sub_B2250(uint64_t a1)
{
  unint64_t v1 = *(const void **)(a1 + 592);
  CFRetain(v1);
  return v1;
}

uint64_t sub_B2278()
{
  return 1LL;
}

uint64_t sub_B2280(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (((*(void *)(a1[58] + 16) - *(void *)(a1[58] + 8)) & 0x7FFFFFFF8LL) != 0)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3216;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): only a single IOProc is supported",  (uint8_t *)&v7,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  return sub_2BE804(a1, a2, a3);
}

uint64_t sub_B2380(void *a1, uint64_t a2, uint64_t a3)
{
  if (((*(void *)(a1[58] + 16LL) - *(void *)(a1[58] + 8LL)) & 0x7FFFFFFF8LL) != 0
    || ((*(void *)(a1[59] + 16LL) - *(void *)(a1[59] + 8LL)) & 0x7FFFFFFF8LL) != 0)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3223;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): only a single IOProc is supported",  (uint8_t *)&v7,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  return sub_2BEBA4(a1, a2, a3);
}

uint64_t sub_B2494(void *a1, uint64_t a2, uint64_t a3)
{
  if (((*(void *)(a1[58] + 16LL) - *(void *)(a1[58] + 8LL)) & 0x7FFFFFFF8LL) != 0)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3230;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): only a single IOProc is supported",  (uint8_t *)&v7,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  return sub_2BF6BC(a1, a2, a3);
}

uint64_t sub_B2594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 464);
  if (((*(void *)(v3 + 16) - *(void *)(v3 + 8)) & 0x7FFFFFFF8LL) != 0)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    __int16 v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      __int16 v9 = "VirtualAudio_Device.cpp";
      __int16 v10 = 1024;
      int v11 = 3237;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): only a single IOProc is supported",  (uint8_t *)&v8,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  return sub_2C1F0C(v3, a2, a3, 0);
}

uint64_t sub_B269C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 472);
  for (uint64_t i = *(void *)(v8 + 8); i != *(void *)(v8 + 16); i += 8LL)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B4538(v8, a2, a3, a4);
        sub_24944(a1);
        uint64_t v10 = **(void **)(a1 + 1008);
        if (a2)
        {
          uint64_t result = (*(uint64_t (**)(void))(v10 + 448))();
          int v12 = *(_DWORD *)(*(void *)(a1 + 464) + 112LL);
        }

        else
        {
          uint64_t result = (*(uint64_t (**)(void))(v10 + 440))();
          int v12 = *(_DWORD *)(*(void *)(a1 + 464) + 116LL);
        }

        if (v12 == 1 && (result & 1) == 0) {
          return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, BOOL))(*(void *)a1 + 568LL))( a1,  a3,  a4,  a2 == 0);
        }
        return result;
      }

      break;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      goto LABEL_7;
    }
  }

  uint64_t result = *(void *)(a1 + 464);
  for (uint64_t j = *(void *)(result + 8); ; j += 8LL)
  {
    if (j == *(void *)(result + 16))
    {
      uint64_t v14 = 0LL;
      goto LABEL_16;
    }

    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8LL) == a2)
    {
      BOOL v15 = a2 == 0;
      goto LABEL_20;
    }
  }

  uint64_t v14 = a2;
LABEL_16:
  BOOL v15 = a2 == 0;
  if (a2 && !v14) {
    return result;
  }
LABEL_20:
  sub_B4644(result, a2, a3, a4);
  sub_24944(a1);
  uint64_t v16 = **(void **)(a1 + 1008);
  if (v15)
  {
    uint64_t result = (*(uint64_t (**)(void))(v16 + 440))();
    int v17 = *(_DWORD *)(*(void *)(a1 + 464) + 116LL);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v16 + 448))();
    int v17 = *(_DWORD *)(*(void *)(a1 + 464) + 112LL);
  }

  if (v17 == 1 && (result & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, BOOL))(*(void *)a1 + 568LL))(a1, a3, a4, v15);
  }
  return result;
}

void sub_B287C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    int v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0xB2848LL);
      }
    }

    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }

    sub_B45F4(*(void *)(v10 + 472), v9);
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    BOOL v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3362;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error starting the io engine",  (uint8_t *)&a9,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v13;
  }

  _Unwind_Resume(a1);
}

void sub_B2A30(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int *a5)
{
  uint64_t v10 = a4;
  sub_8683C(__p, a4);
  if (a4)
  {
    int v11 = __p[0];
    int v12 = a5;
    do
    {
      int v13 = *v12++;
      *v11++ = v13;
      --v10;
    }

    while (v10);
  }

  (*(void (**)(void, void, void **))(**(void **)(a1 + 1008) + 264LL))( *(void *)(a1 + 1008),  a3 ^ 1u,  __p);
  sub_2C05EC(a1, a2, a3, a4, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_B2AE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B2AFC(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1008);
  if (!v2)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    __int16 v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v11 = "VirtualAudio_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 3425;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: mDevice is NULL",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  if (a2) {
    unsigned int v3 = 1768845428;
  }
  else {
    unsigned int v3 = 1869968496;
  }
  *(_DWORD *)buf = 1819569763;
  int v11 = (const char *)v3;
  int v8 = 4;
  unsigned int v9 = 0;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, unsigned int *))(*(void *)v2 + 40LL))( v2,  buf,  0LL,  0LL,  &v8,  &v9);
  return v9;
}

uint64_t sub_B2C44(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1008);
  if (!v2)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    __int16 v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v11 = "VirtualAudio_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 3437;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: mDevice is NULL",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  if (a2) {
    unsigned int v3 = 1768845428;
  }
  else {
    unsigned int v3 = 1869968496;
  }
  *(_DWORD *)buf = 1935763060;
  int v11 = (const char *)v3;
  int v8 = 4;
  unsigned int v9 = 0;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, unsigned int *))(*(void *)v2 + 40LL))( v2,  buf,  0LL,  0LL,  &v8,  &v9);
  return v9;
}

void sub_B2D8C(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 456LL))(a1) & 1) == 0)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3774;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Buffer size isn't valid",  (uint8_t *)&v7,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_B3FEC(a1, a2, 1);
}

void sub_B2E9C(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 456LL))(a1) & 1) == 0)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3784;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Buffer size isn't valid",  (uint8_t *)&v7,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_B3FEC(a1, a2, 0);
}

uint64_t sub_B2FAC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512LL))(a1);
}

uint64_t sub_B2FB8(uint64_t a1)
{
  return a1 + 648;
}

void sub_B2FC0()
{
  uint64_t v0 = (os_log_t *)sub_138E8(1);
  unint64_t v1 = *v0;
  if (*v0 && os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    __int16 v6 = "VirtualAudio_Device.cpp";
    __int16 v7 = 1024;
    int v8 = 3825;
    _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d IOBufferFrameSizeChanged not implemented. Unexpected code path.",  (uint8_t *)&v5,  0x12u);
  }

  uint64_t v2 = (os_log_t *)sub_138E8(13);
  unsigned int v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      __int16 v6 = "VirtualAudio_Device.cpp";
      __int16 v7 = 1024;
      int v8 = 3826;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): function not implemented",  (uint8_t *)&v5,  0x12u);
    }
  }

  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_4865A0;
  exception[2] = 1970171760;
}

uint64_t sub_B30EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a1 + 1008))
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3864;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v8 = pthread_self();
  __int16 v9 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 664));
  if (!pthread_equal(v8, v9))
  {
    int v10 = pthread_self();
    int v11 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 752));
    if (!pthread_equal(v10, v11))
    {
      int v13 = (os_log_t *)sub_138E8(1);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = *(void *)(a1 + 576);
          sub_33464(&__p, (unsigned int *)&v19);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3866;
          __int16 v22 = 2080;
          uint64_t v23 = p_p;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The IO monitor should be held prior to calling StartIOEngine on VAD: '%s'.",  buf,  0x1Cu);
        }
      }
    }
  }

  sub_6DD4();
  *(void *)buf = &qword_48F828;
  *(void *)&buf[8] = a1;
  buf[16] = sub_24DC0(a1);
  *(_DWORD *)(a1 + 1076) = 0;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 1008) + 248LL))( *(void *)(a1 + 1008),  a2,  a3,  a4);
  uint64_t result = sub_366B0((uint64_t)buf);
  *(_DWORD *)(a1 + 912) = 0;
  return result;
}

void sub_B3324(_Unwind_Exception *a1)
{
}

void sub_B3334(_Unwind_Exception *a1)
{
}

void sub_B333C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  if (a2)
  {
    sub_366B0((uint64_t)&buf);
    __cxa_begin_catch(a1);
    if (a2 == 2) {
      __cxa_rethrow();
    }
    BOOL v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 3887;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): error starting IO on the active device",  (uint8_t *)&buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  _Unwind_Resume(a1);
}

void sub_B341C(_Unwind_Exception *a1)
{
}

void sub_B342C(_Unwind_Exception *a1)
{
}

void sub_B3438(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xB3440LL);
  }
  sub_7A0E8(a1);
}

uint64_t sub_B3450(uint64_t a1)
{
  return *(unsigned int *)(a1 + 912);
}

uint64_t sub_B3458(BOOL *a1, uint64_t a2)
{
  if (((*(uint64_t (**)(BOOL *))(*a1 + 512))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1937010544;
  }

  if (!a1[126])
  {
    int v8 = (os_log_t *)sub_138E8(13);
    __int16 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      __int16 v12 = "VirtualAudio_Device.cpp";
      __int16 v13 = 1024;
      int v14 = 3506;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to get current time without an active device",  (uint8_t *)&v11,  0x12u);
    }

    int v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v10 = &off_4865A0;
    void v10[2] = 2003329396;
  }

  if (sub_24320(a1[80]))
  {
    int v4 = 0LL;
    int v5 = 0;
  }

  else
  {
    sub_6DD4();
    int v4 = &qword_48F828;
    int v5 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  }

  uint64_t result = (*(uint64_t (**)(BOOL, uint64_t))(*(void *)a1[126] + 280LL))(a1[126], a2);
  if (v5) {
    return (*(uint64_t (**)(uint64_t *))(*v4 + 24))(v4);
  }
  return result;
}

void sub_B3604(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B3614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
    }
    __int16 v13 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v14 = v13[2];
      __cxa_end_catch();
      if (!v14) {
        JUMPOUT(0xB34FCLL);
      }
    }

    else
    {
      int v14 = 2003329396;
      __cxa_end_catch();
    }

    BOOL v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3526;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error getting the current time from the active device",  (uint8_t *)&a9,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v14;
  }

  _Unwind_Resume(a1);
}

uint64_t sub_B371C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 600LL))(a1);
}

uint64_t sub_B3728(BOOL *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(a2 + 56) & 3) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      int v17 = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 3546;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): have to have either sample time or host time valid on the input",  (uint8_t *)&v16,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (((*(uint64_t (**)(BOOL *))(*a1 + 512))(a1) & 1) == 0)
  {
    __int16 v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v12 = &off_4865A0;
    v12[2] = 1937010544;
  }

  if (!a1[126])
  {
    __int16 v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      int v17 = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 3553;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to translate time without an active device",  (uint8_t *)&v16,  0x12u);
    }

    BOOL v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v15 = &off_4865A0;
    void v15[2] = 2003329396;
  }

  if (sub_24320(a1[80]))
  {
    __int16 v6 = 0LL;
    int v7 = 0;
  }

  else
  {
    sub_6DD4();
    __int16 v6 = &qword_48F828;
    int v7 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  }

  uint64_t result = (*(uint64_t (**)(BOOL, uint64_t, uint64_t))(*(void *)a1[126] + 288LL))(a1[126], a2, a3);
  if (v7) {
    return (*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
  }
  return result;
}

void sub_B3994(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B39A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
    }
    __int16 v13 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v14 = v13[2];
      __cxa_end_catch();
      if (!v14) {
        JUMPOUT(0xB37E4LL);
      }
    }

    else
    {
      int v14 = 2003329396;
      __cxa_end_catch();
    }

    BOOL v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3573;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error translating time by the active device",  (uint8_t *)&a9,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v14;
  }

  _Unwind_Resume(a1);
}

uint64_t sub_B3AAC(BOOL *a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(BOOL *))(*a1 + 512))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "VirtualAudio_Device.cpp";
      __int16 v20 = 1024;
      int v21 = 3581;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareNotRunningError): can't because there isn't anything running yet",  (uint8_t *)&v18,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1937010544;
  }

  if ((~(_DWORD)a3 & 6) == 0)
  {
    __int16 v12 = (os_log_t *)sub_138E8(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "VirtualAudio_Device.cpp";
      __int16 v20 = 1024;
      int v21 = 3582;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): can't because the start time flags are conflicting",  (uint8_t *)&v18,  0x12u);
    }

    int v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v14 = &off_4865A0;
    v14[2] = 1852797029;
  }

  if (!a1[126])
  {
    BOOL v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "VirtualAudio_Device.cpp";
      __int16 v20 = 1024;
      int v21 = 3585;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to get nearest start time with out an active device",  (uint8_t *)&v18,  0x12u);
    }

    int v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v17 = &off_4865A0;
    v17[2] = 2003329396;
  }

  if (sub_24320(a1[80]))
  {
    __int16 v6 = 0LL;
    int v7 = 0;
  }

  else
  {
    sub_6DD4();
    __int16 v6 = &qword_48F828;
    int v7 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  }

  uint64_t result = (*(uint64_t (**)(BOOL, uint64_t, uint64_t))(*(void *)a1[126] + 296LL))(a1[126], a2, a3);
  if (v7) {
    return (*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
  }
  return result;
}

void sub_B3D88(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B3D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
    }
    __int16 v13 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v14 = v13[2];
      __cxa_end_catch();
      if (!v14) {
        JUMPOUT(0xB3B68LL);
      }
    }

    else
    {
      int v14 = 2003329396;
      __cxa_end_catch();
    }

    BOOL v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3605;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error getting nearest start time from the active device",  (uint8_t *)&a9,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v14;
  }

  _Unwind_Resume(a1);
}

double sub_B3EA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    unsigned int v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3619;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to get actual sample rate with out an active device",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  double v7 = 0.0;
  int v6 = 8;
  strcpy(buf, "trsabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(uint64_t, _BYTE *, void, void, int *, double *))(*(void *)v1 + 40LL))( v1,  buf,  0LL,  0LL,  &v6,  &v7);
  return v7;
}

uint64_t sub_B3FD4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 1008);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 488LL))(result);
  }
  return result;
}

void sub_B3FEC(uint64_t a1, int a2, int a3)
{
  int v28 = a2;
  if (!*(void *)(a1 + 1008))
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      __int16 v30 = 1024;
      int v31 = 3794;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to set buffer frame size witho ut an active device",  (uint8_t *)buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  uint64_t v6 = sub_138E8(1);
  uint64_t v7 = sub_138E8(31);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = (int)buf[v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_8:
  __int16 v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    buf[0] = 136315906;
    *(void *)&buf[1] = "VirtualAudio_Device.cpp";
    __int16 v30 = 1024;
    int v31 = 3800;
    __int16 v32 = 1024;
    int v33 = a2;
    __int16 v34 = 1024;
    int v35 = a3 ^ 1;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "%25s:%-5d Client request to set I/O buffer frame size to %u sample frames (quiet = %u)",  (uint8_t *)buf,  0x1Eu);
  }

  if ((a3 & 1) != 0)
  {
    strcpy((char *)buf, "zisfbolg");
    BYTE1(buf[2]) = 0;
    HIWORD(buf[2]) = 0;
    (*(void (**)(void, _DWORD *, void, void, uint64_t, int *))(**(void **)(a1 + 1008) + 48LL))( *(void *)(a1 + 1008),  buf,  0LL,  0LL,  4LL,  &v28);
    sub_B4380(a1);
  }

  else
  {
    if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 1008) + 88LL))(*(void *)(a1 + 1008), 0LL)
      && (*(unsigned int (**)(void))(**(void **)(a1 + 1008) + 272LL))(*(void *)(a1 + 1008)))
    {
      uint64_t v14 = sub_138E8(1);
      uint64_t v15 = sub_138E8(31);
      char v16 = 0;
      uint64_t v17 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v18 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v19 = (int)buf[v17];
        char v20 = v16;
        if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
          break;
        }
        char v16 = 1;
        uint64_t v17 = 1LL;
        if ((v20 & 1) != 0) {
          goto LABEL_21;
        }
      }

      if ((v18 & v19) == 0) {
        uint64_t v14 = v15;
      }
LABEL_21:
      int v21 = *(os_log_s **)v14;
      if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        __int16 v30 = 1024;
        int v31 = 3805;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "%25s:%-5d Client request to quietly set I/O buffer frame size while input is active and I/O is runnning, which will likely fail",  (uint8_t *)buf,  0x12u);
      }
    }

    strcpy((char *)buf, "zsfqbolg");
    BYTE1(buf[2]) = 0;
    HIWORD(buf[2]) = 0;
    (*(void (**)(void, _DWORD *, void, void, uint64_t, int *))(**(void **)(a1 + 1008) + 48LL))( *(void *)(a1 + 1008),  buf,  0LL,  0LL,  4LL,  &v28);
    sub_B4380(a1);
    uint64_t v22 = *(void *)(a1 + 632);
    if (v22)
    {
      uint64_t v26 = 0x676C6F626673697ALL;
      int v27 = 0;
      sub_C974C(v22, a1, &v26, a1 + 488);
    }
  }

uint64_t sub_B4380(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v3 = *(void *)(a1 + 1008);
  if (!v3)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v11 = 1024;
      int v12 = 4097;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to update buffer frame size wi thout an active device",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  strcpy(buf, "zisfbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v8 = 4;
  int v9 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, _BYTE *, void, void, int *, int *))(*(void *)v3 + 40LL))( v3,  buf,  0LL,  0LL,  &v8,  &v9);
  *(_DWORD *)(a1 + 488) = v9;
  if (v2) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

void sub_B44F8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_B4538(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  if (a2)
  {
    int v5 = *(uint64_t **)(a1 + 8);
    uint64_t v6 = *(uint64_t **)(a1 + 16);
    if (v5 != v6)
    {
      while (1)
      {
        uint64_t v8 = *v5;
        if (*v5 == a2) {
          break;
        }
        if (*(void *)(v8 + 8) == a2) {
          goto LABEL_9;
        }
        if (++v5 == v6) {
          return;
        }
      }

      uint64_t v8 = a2;
LABEL_9:
      if (!*(_BYTE *)(v8 + 54))
      {
        *(_BYTE *)(v8 + 54) = 1;
        __int128 v9 = *a3;
        __int128 v10 = a3[1];
        __int128 v11 = a3[2];
        *(_OWORD *)(v8 + 104) = a3[3];
        *(_OWORD *)(v8 + 88) = v11;
        *(_OWORD *)(v8 + 72) = v10;
        *(_OWORD *)(v8 + 56) = v9;
        *(_DWORD *)(v8 + 120) = a4;
        ++*(_DWORD *)(a1 + 112);
        sub_B47C8(a1, v8);
        sub_B4860((_DWORD **)a1);
      }
    }
  }

  else
  {
    ++*(_DWORD *)(a1 + 116);
  }

void sub_B45F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v3 = *i;
      if (*i == a2)
      {
        uint64_t v3 = a2;
LABEL_11:
        sub_B4780(a1, v3);
        return;
      }

      if (*(void *)(v3 + 8) == a2) {
        goto LABEL_11;
      }
    }
  }

  else
  {
    int v4 = *(_DWORD *)(a1 + 116);
    if (v4) {
      *(_DWORD *)(a1 + 116) = v4 - 1;
    }
  }

void sub_B4644(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  if (a2)
  {
    int v5 = *(uint64_t **)(a1 + 8);
    uint64_t v6 = *(uint64_t **)(a1 + 16);
    if (v5 != v6)
    {
      while (1)
      {
        uint64_t v8 = *v5;
        if (*v5 == a2) {
          break;
        }
        if (*(void *)(v8 + 8) == a2) {
          goto LABEL_9;
        }
        if (++v5 == v6) {
          return;
        }
      }

      uint64_t v8 = a2;
LABEL_9:
      if (!*(_BYTE *)(v8 + 54))
      {
        *(_BYTE *)(v8 + 54) = 1;
        __int128 v9 = *a3;
        __int128 v10 = a3[1];
        __int128 v11 = a3[2];
        *(_OWORD *)(v8 + 104) = a3[3];
        *(_OWORD *)(v8 + 88) = v11;
        *(_OWORD *)(v8 + 72) = v10;
        *(_OWORD *)(v8 + 56) = v9;
        *(_DWORD *)(v8 + 120) = a4;
        ++*(_DWORD *)(a1 + 112);
        sub_74774(a1, v8);
        sub_7480C((_DWORD **)a1);
      }
    }
  }

  else
  {
    ++*(_DWORD *)(a1 + 116);
  }

_DWORD *sub_B4700(_DWORD *result, int a2)
{
  if (*((_BYTE *)result + 54))
  {
    int v2 = result;
    uint64_t v3 = *(_DWORD **)result;
    unsigned int v4 = v2[12];
    int v5 = *((unsigned __int8 *)v2 + 53);
    int v6 = *((unsigned __int8 *)v2 + 52);
    if (a2)
    {
      uint64_t result = sub_74B80(v3, 1, (void *)v2 + 16, v4, (vm_address_t **)v2 + 22, v5 != 0, v6 != 0);
      *((void *)v2 + 25) = result;
    }

    else
    {
      uint64_t result = sub_74B80(v3, 0, (void *)v2 + 19, v4, (vm_address_t **)v2 + 26, v5 != 0, v6 != 0);
      *((void *)v2 + 29) = result;
    }
  }

  return result;
}

void sub_B4780(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 54))
  {
    *(_BYTE *)(a2 + 54) = 0;
    --*(_DWORD *)(a1 + 112);
    sub_B47C8(a1, a2);
    sub_B4860((_DWORD **)a1);
  }

void sub_B47C8(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 200) = 0LL;
  if (*(_DWORD *)(a1 + 40) == 2) {
    sub_B4DD8((_DWORD *)a2, 1);
  }
  sub_74954( *(void *)a2,  0,  *(unsigned int *)(a2 + 48),  *(void **)(a2 + 232),  (vm_address_t **)(a2 + 208),  *(unsigned __int8 *)(a2 + 53));
  *(void *)(a2 + 232) = 0LL;
  if (*(_DWORD *)(a1 + 44) == 2) {
    sub_B4DD8((_DWORD *)a2, 0);
  }
}

void sub_B4860(_DWORD **a1)
{
  int v2 = a1[9];
  if (v2)
  {
    sub_74954((uint64_t)*a1, 1, *((unsigned int *)a1 + 8), v2, (vm_address_t **)a1 + 6, *((unsigned __int8 *)a1 + 36));
    a1[9] = 0LL;
  }

  if (*((_DWORD *)a1 + 10) <= 1u)
  {
    std::string __p = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    sub_74A64((uint64_t *)a1, 1, (uint64_t)&__p);
    a1[9] = sub_B49A8( *a1,  1,  &__p,  *((_DWORD *)a1 + 8),  (vm_address_t **)a1 + 6,  *((unsigned __int8 *)a1 + 36),  *((_DWORD *)a1 + 10) == 1);
    if (__p) {
      operator delete(__p);
    }
  }

  uint64_t v3 = a1[13];
  if (v3)
  {
    sub_74954((uint64_t)*a1, 0, *((unsigned int *)a1 + 8), v3, (vm_address_t **)a1 + 10, *((unsigned __int8 *)a1 + 36));
    a1[13] = 0LL;
  }

  if (*((_DWORD *)a1 + 11) <= 1u)
  {
    std::string __p = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    sub_74A64((uint64_t *)a1, 0, (uint64_t)&__p);
    a1[13] = sub_B49A8( *a1,  0,  &__p,  *((_DWORD *)a1 + 8),  (vm_address_t **)a1 + 10,  *((unsigned __int8 *)a1 + 36),  *((_DWORD *)a1 + 11) == 1);
    if (__p) {
      operator delete(__p);
    }
  }

void sub_B4984( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_B49A8(_DWORD *a1, int a2, void *a3, unsigned int a4, vm_address_t **a5, int a6, int a7)
{
  a5[1] = *a5;
  int v11 = a1[122];
  int v61 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 480LL))(a1);
  int v12 = a1 + 130;
  __int16 v13 = (uint64_t *)(a1 + 132);
  uint64_t v14 = a1 + 124;
  if (a2) {
    __int16 v13 = (uint64_t *)(a1 + 126);
  }
  uint64_t v15 = *v13;
  if (a2) {
    char v16 = a1 + 124;
  }
  else {
    char v16 = a1 + 130;
  }
  unint64_t v17 = v15 - *v16;
  unint64_t v18 = v17 >> 3;
  uint64_t v19 = calloc(1uLL, 24 * (v17 >> 3) + 8);
  if (v19) {
    *uint64_t v19 = v18;
  }
  char v58 = v19;
  if ((_DWORD)v18)
  {
    unint64_t v20 = 0LL;
    uint64_t v60 = (v17 >> 3);
    if (!a2) {
      uint64_t v14 = v12;
    }
    do
    {
      else {
        int v21 = *(_DWORD ***)(*v14 + 8 * v20);
      }
      int v22 = sub_75130(v21[13], v11);
      int v23 = sub_75130(v21[13], v61);
      if (a3[1] <= v20)
      {
        if (!a7) {
          goto LABEL_25;
        }
      }

      else if (((*(void *)(*a3 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0 || (a7 & 1) == 0)
      {
LABEL_25:
        int v29 = a5[1];
        unint64_t v28 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = v29 - *a5;
          uint64_t v32 = v28 - (void)*a5;
          uint64_t v33 = v32 >> 2;
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            unint64_t v34 = (unint64_t)sub_7DC90(v34);
          }
          else {
            uint64_t v35 = 0LL;
          }
          uint64_t v44 = (vm_address_t *)(v34 + 8 * v31);
          *uint64_t v44 = 0LL;
          __int16 v30 = v44 + 1;
          int v46 = (char *)*a5;
          uint64_t v45 = (char *)a5[1];
          if (v45 != (char *)*a5)
          {
            do
            {
              vm_address_t v47 = *((void *)v45 - 1);
              v45 -= 8;
              *--uint64_t v44 = v47;
            }

            while (v45 != v46);
            uint64_t v45 = (char *)*a5;
          }

          *a5 = v44;
          a5[1] = v30;
          a5[2] = (vm_address_t *)(v34 + 8 * v35);
          if (v45) {
            operator delete(v45);
          }
        }

        else
        {
          vm_address_t *v29 = 0LL;
          __int16 v30 = v29 + 1;
        }

        a5[1] = v30;
        int v48 = &v58[6 * v20];
        v48[4] = v21[13][11];
        v48[5] = v22;
        *((void *)v48 + 3) = 0LL;
        goto LABEL_60;
      }

      uint64_t v24 = (v23 + v22);
      vm_address_t address = 0LL;
      if (vm_allocate(mach_task_self_, &address, (v24 + 16), 1))
      {
        uint64_t v25 = (os_log_t *)sub_138E8(13);
        uint64_t v26 = *v25;
        if (*v25)
        {
          if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v64 = "HP_IOProcList.h";
            __int16 v65 = 1024;
            int v66 = 858;
            _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theKernelError): vm_allocate failed",  buf,  0x12u);
          }
        }
      }

      if (address)
      {
        bzero((void *)address, (v24 + 16));
        int v27 = (_DWORD *)address;
        *(_DWORD *)vm_address_t address = v22;
        v27[1] = v11;
        v27[2] = v24;
        v27[3] = v22;
        if (a6) {
          (*((void (**)(_DWORD **, void, void))*v21 + 20))(v21, a4, (v24 + 16));
        }
        else {
          (*((void (**)(_DWORD **, void, uint64_t, _DWORD *))*v21 + 20))(v21, a4, v24, v27 + 4);
        }
        char v37 = a5[1];
        unint64_t v36 = (unint64_t)a5[2];
        if ((unint64_t)v37 >= v36)
        {
          uint64_t v39 = v37 - *a5;
          uint64_t v40 = v36 - (void)*a5;
          uint64_t v41 = v40 >> 2;
          else {
            unint64_t v42 = v41;
          }
          if (v42) {
            unint64_t v42 = (unint64_t)sub_7DC90(v42);
          }
          else {
            uint64_t v43 = 0LL;
          }
          int v49 = (vm_address_t *)(v42 + 8 * v39);
          *int v49 = address;
          uint64_t v38 = v49 + 1;
          int64x2_t v51 = (char *)*a5;
          BOOL v50 = (char *)a5[1];
          if (v50 != (char *)*a5)
          {
            do
            {
              vm_address_t v52 = *((void *)v50 - 1);
              v50 -= 8;
              *--int v49 = v52;
            }

            while (v50 != v51);
            BOOL v50 = (char *)*a5;
          }

          *a5 = v49;
          a5[1] = v38;
          a5[2] = (vm_address_t *)(v42 + 8 * v43);
          if (v50) {
            operator delete(v50);
          }
        }

        else
        {
          *char v37 = address;
          uint64_t v38 = v37 + 1;
        }

        a5[1] = v38;
        unsigned int v53 = &v58[6 * v20];
        v53[4] = v21[13][11];
        vm_address_t v54 = address + 16;
        v53[5] = *(_DWORD *)address;
        *((void *)v53 + 3) = v54;
      }

_DWORD *sub_B4DD8(_DWORD *result, int a2)
{
  if (*((_BYTE *)result + 54))
  {
    int v2 = result;
    uint64_t v3 = *(_DWORD **)result;
    unsigned int v4 = v2[12];
    int v5 = *((unsigned __int8 *)v2 + 53);
    int v6 = *((unsigned __int8 *)v2 + 52);
    if (a2)
    {
      uint64_t result = sub_B49A8(v3, 1, (void *)v2 + 16, v4, (vm_address_t **)v2 + 22, v5 != 0, v6 != 0);
      *((void *)v2 + 25) = result;
    }

    else
    {
      uint64_t result = sub_B49A8(v3, 0, (void *)v2 + 19, v4, (vm_address_t **)v2 + 26, v5 != 0, v6 != 0);
      *((void *)v2 + 29) = result;
    }
  }

  return result;
}

void sub_B4E58(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v4 = *i;
      if (*i == a2)
      {
        uint64_t v4 = a2;
LABEL_9:
        if (!*(_BYTE *)(v4 + 54))
        {
          *(_BYTE *)(v4 + 54) = 1;
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 72) = 0u;
          *(_OWORD *)(v4 + 88) = 0u;
          *(_OWORD *)(v4 + 104) = 0u;
          *(_DWORD *)(v4 + 120) = 0;
          ++*(_DWORD *)(a1 + 112);
          sub_B47C8(a1, v4);
          sub_B4860((_DWORD **)a1);
        }

        return;
      }

      if (*(void *)(v4 + 8) == a2) {
        goto LABEL_9;
      }
    }
  }

  else
  {
    ++*(_DWORD *)(a1 + 116);
  }

uint64_t sub_B4F08(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(a1);
  *((void *)&v3 + 1) = v2;
  *(void *)&__int128 v3 = v1;
  if (((v3 >> 32) & 0xFF00000000LL) == 0 || HIDWORD(v1) == 0LL) {
    return 1LL;
  }
  else {
    return _os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") ^ 1;
  }
}

void sub_B4F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 1008))
  {
    unint64_t v18 = (os_log_t *)sub_138E8(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      unint64_t v28 = "VirtualAudio_Device.cpp";
      __int16 v29 = 1024;
      int v30 = 924;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mDevice is NULL]: mDevice is NULL",  (uint8_t *)&v27,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mDevice is NULL");
  }

  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440LL))(a1);
  int v9 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 1008) + 320LL))( *(void *)(a1 + 1008),  a2 ^ 1,  a3);
  if (v9)
  {
    int v21 = v9;
    int v22 = (os_log_t *)sub_138E8(13);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = "disabling";
      unint64_t v28 = "VirtualAudio_Device.cpp";
      int v30 = 930;
      if ((_DWORD)a3) {
        uint64_t v24 = "enabling";
      }
      __int16 v29 = 1024;
      __int16 v31 = 1024;
      int v27 = 136316162;
      int v32 = v21;
      __int16 v33 = 2080;
      unint64_t v34 = v24;
      if ((_DWORD)a2) {
        uint64_t v25 = "input";
      }
      else {
        uint64_t v25 = "output";
      }
      __int16 v35 = 2080;
      unint64_t v36 = v25;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error %u %s %s enhancement processing on the active a ggregate device",  (uint8_t *)&v27,  0x2Cu);
    }

    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v26 = &off_4865A0;
    v26[2] = v21;
  }

  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 440LL))(a1, a2);
  uint64_t v11 = 600LL;
  if (!(_DWORD)a2) {
    uint64_t v11 = 601LL;
  }
  int v12 = *(unsigned __int8 *)(a1 + v11);
  *(_BYTE *)(a1 + v11) = a3;
  if ((_DWORD)a2) {
    unsigned int v13 = 1768845428;
  }
  else {
    unsigned int v13 = 1869968496;
  }
  if (v12 != (_DWORD)a3)
  {
    int v14 = *(_DWORD *)(a1 + 8);
    int v27 = 1634035054;
    unint64_t v28 = (const char *)v13;
    uint64_t v15 = (unint64_t *)sub_E2D90(a4, v14);
    sub_87EB4(v15, &v27);
  }

  if (v10 != v8)
  {
    int v16 = *(_DWORD *)(a1 + 8);
    int v27 = 1819569763;
    unint64_t v28 = (const char *)v13;
    unint64_t v17 = (unint64_t *)sub_E2D90(a4, v16);
    sub_87EB4(v17, &v27);
  }

void sub_B523C(_Unwind_Exception *a1)
{
}

uint64_t sub_B5258()
{
  unint64_t v0 = atomic_load(&qword_48FB08);
  if (v0 != -1LL)
  {
    uint64_t v4 = &v2;
    __int128 v3 = &v4;
    std::__call_once(&qword_48FB08, &v3, (void (__cdecl *)(void *))sub_B6C24);
  }

  return qword_48FB10;
}

_BYTE *sub_B52B4(_BYTE *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a2 + 664));
  if (pthread_equal(v4, v5))
  {
    BOOL v6 = 1;
  }

  else
  {
    uint64_t v7 = pthread_self();
    int v8 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a2 + 752));
    BOOL v6 = pthread_equal(v7, v8) != 0;
  }

  a1[8] = v6;
  a1[9] = *(_BYTE *)(*(void *)a1 + 1072LL) ^ 1;
  uint64_t v9 = sub_138E8(1);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    int v10 = *(os_log_s **)v9;
    if (*(void *)v9)
    {
      if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void *)a1;
        int v12 = a1[8];
        int v13 = a1[9];
        sub_6DD4();
        int v14 = (*(uint64_t (**)(void))(qword_48F828 + 48))();
        int v16 = 136316418;
        unint64_t v17 = "VirtualAudio_Device.cpp";
        __int16 v18 = 1024;
        int v19 = 124;
        __int16 v20 = 2048;
        uint64_t v21 = v11;
        __int16 v22 = 1024;
        int v23 = v12;
        __int16 v24 = 1024;
        int v25 = v13;
        __int16 v26 = 1024;
        int v27 = v14;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Owning device: %p; mIOMonitorWasHeld: %u; mDoConfigChange: %u; state mutex is held: %u.",
          (uint8_t *)&v16,
          0x2Eu);
      }
    }
  }

  if (a1[9]) {
    sub_B60C8(*(void *)a1, a1[8] == 0, 0);
  }
  return a1;
}

uint64_t sub_B5444(unint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (!pthread_equal(v4, v5))
  {
    BOOL v6 = pthread_self();
    uint64_t v7 = (_opaque_pthread_t *)atomic_load(a1 + 94);
    if (!pthread_equal(v6, v7))
    {
      int v19 = (os_log_t *)sub_138E8(13);
      __int16 v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v24 = "VirtualAudio_Device.cpp";
        __int16 v25 = 1024;
        int v26 = 4905;
        _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
  }

  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    int v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v24 = "VirtualAudio_Device.cpp";
      __int16 v25 = 1024;
      int v26 = 4906;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Precondition failure.");
  }

  int v8 = a1 + 81;
  sub_79C14(v8);
  (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  sub_E3100(*a2, a2[1]);
  (*(void (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t result = sub_B6048((uint64_t)v8, &v22);
  if ((result & 1) == 0)
  {
    unsigned int v10 = 20;
    do
    {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
      usleep(0x1388u);
      (*(void (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
      uint64_t result = sub_B6048((uint64_t)v8, &v22);
      if (v10-- >= 2) {
        int v12 = result;
      }
      else {
        int v12 = 1;
      }
    }

    while (v12 != 1);
    if ((result & 1) == 0)
    {
      int v16 = (os_log_t *)sub_138E8(13);
      unint64_t v17 = *v16;
      if (*v16)
      {
        if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v24 = "VirtualAudio_Device.cpp";
          __int16 v25 = 1024;
          int v26 = 4942;
          _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to re-lock the IOMonitor. Please file a radar against \\ Audio - Routing\\",  buf,  0x12u);
        }
      }

      __int16 v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v18,  "Unable to re-lock the IOMonitor. Please file a radar against Audio - Routing");
    }
  }

  return result;
}

void sub_B575C(_Unwind_Exception *a1)
{
}

uint64_t *sub_B5780(uint64_t *a1)
{
  if (*((_BYTE *)a1 + 9)) {
    sub_B5920(*a1, 0LL, 1LL, *((_BYTE *)a1 + 8) == 0, 1LL);
  }
  uint64_t v2 = sub_138E8(1);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    __int128 v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v4 = *a1;
        int v5 = *((unsigned __int8 *)a1 + 8);
        int v6 = *((unsigned __int8 *)a1 + 9);
        sub_6DD4();
        int v7 = (*(uint64_t (**)(void))(qword_48F828 + 48))();
        uint64_t v8 = *a1;
        uint64_t v9 = pthread_self();
        unsigned int v10 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v8 + 664));
        if (pthread_equal(v9, v10))
        {
          BOOL v11 = 1;
        }

        else
        {
          int v12 = pthread_self();
          int v13 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v8 + 752));
          BOOL v11 = pthread_equal(v12, v13) != 0;
        }

        int v15 = 136316674;
        int v16 = "VirtualAudio_Device.cpp";
        __int16 v17 = 1024;
        int v18 = 141;
        __int16 v19 = 2048;
        uint64_t v20 = v4;
        __int16 v21 = 1024;
        int v22 = v5;
        __int16 v23 = 1024;
        int v24 = v6;
        __int16 v25 = 1024;
        int v26 = v7;
        __int16 v27 = 1024;
        BOOL v28 = v11;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Owning device: %p; mIOMonitorWasHeld: %u; mDoConfigChange: %u; IO monitor is held: %u; state mutex is held: %u.",
          (uint8_t *)&v15,
          0x34u);
      }
    }
  }

  return a1;
}

void sub_B5914(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_B5920(unint64_t *a1, uint64_t *a2, int a3, int a4, int a5)
{
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))() != a5)
  {
    uint64_t v44 = (os_log_t *)sub_138E8(13);
    uint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v52 = 1024;
      int v53 = 276;
      _os_log_impl(&dword_0, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned int v10 = pthread_self();
  BOOL v11 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (!pthread_equal(v10, v11))
  {
    int v15 = pthread_self();
    int v16 = (_opaque_pthread_t *)atomic_load(a1 + 94);
    if ((pthread_equal(v15, v16) != 0) == a4) {
      goto LABEL_4;
    }
LABEL_10:
    __int16 v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v52 = 1024;
      int v53 = 278;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    __int16 v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "Precondition failure.");
  }

  if ((a4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  int v49 = a1;
  char v50 = a4;
  if (!a3) {
    goto LABEL_43;
  }
  unint64_t v12 = a1[58];
  if (!v12) {
    goto LABEL_43;
  }
  int v14 = *(_DWORD *)(v12 + 112);
  int v13 = *(_DWORD *)(v12 + 116);
  if (v14)
  {
    if (!v13)
    {
LABEL_29:
      uint64_t v30 = sub_138E8(1);
      uint64_t v31 = sub_138E8(31);
      char v32 = 0;
      uint64_t v33 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v34 = *(void *)(v30 + 8);
      while (1)
      {
        uint64_t v35 = *(int *)&buf[4 * v33];
        char v36 = v32;
        if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
          break;
        }
        char v32 = 1;
        uint64_t v33 = 1LL;
        if ((v36 & 1) != 0) {
          goto LABEL_35;
        }
      }

      if ((v34 & v35) == 0) {
        uint64_t v30 = v31;
      }
LABEL_35:
      char v37 = *(os_log_s **)v30;
      if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        int v38 = *(_DWORD *)(a1[58] + 112);
        unint64_t v47 = a1[72];
        sub_33464(&__p, (unsigned int *)&v47);
        uint64_t v39 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v52 = 1024;
        int v53 = 306;
        __int16 v54 = 1024;
        int v55 = v38;
        __int16 v56 = 2080;
        uint64_t v57 = v39;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Internal configuration change request to restart %u normal IO proc(s) on VAD: '%s'.",  buf,  0x22u);
      }

      (*(void (**)(unint64_t *, void))(*a1 + 560))(a1, 0LL);
      goto LABEL_43;
    }
  }

  else if (!v13)
  {
    goto LABEL_43;
  }

  uint64_t v20 = sub_138E8(1);
  uint64_t v21 = sub_138E8(31);
  char v22 = 0;
  uint64_t v23 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v24 = *(void *)(v20 + 8);
  while (1)
  {
    uint64_t v25 = *(int *)&buf[4 * v23];
    char v26 = v22;
    if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
      break;
    }
    char v22 = 1;
    uint64_t v23 = 1LL;
    if ((v26 & 1) != 0) {
      goto LABEL_21;
    }
  }

  if ((v24 & v25) == 0) {
    uint64_t v20 = v21;
  }
LABEL_21:
  __int16 v27 = *(os_log_s **)v20;
  if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    int v28 = *(_DWORD *)(a1[58] + 116);
    unint64_t v47 = a1[72];
    sub_33464(&__p, (unsigned int *)&v47);
    __int16 v29 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v52 = 1024;
    int v53 = 297;
    __int16 v54 = 1024;
    int v55 = v28;
    __int16 v56 = 2080;
    uint64_t v57 = v29;
    _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Internal configuration change request to restart %u null IO proc(s) on VAD: '%s'.",  buf,  0x22u);
  }

  (*(void (**)(unint64_t *, uint64_t))(*a1 + 560))(a1, 1LL);
  if (*(_DWORD *)(a1[58] + 112)) {
    goto LABEL_29;
  }
LABEL_43:
  sub_B6010(&v49);
  if (a5)
  {
    uint64_t v40 = operator new(0x10uLL);
    sub_6DD4();
    sub_34AA0(v40, (uint64_t)&qword_48F828);
  }

  else
  {
    uint64_t v40 = 0LL;
  }

  uint64_t v41 = a1[79];
  if (v41) {
    goto LABEL_51;
  }
  unint64_t v42 = (os_log_t *)sub_138E8(1);
  uint64_t v43 = *v42;
  if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v52 = 1024;
    int v53 = 326;
    _os_log_impl(&dword_0, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d mPropertyManager is NULL", buf, 0x12u);
  }

  uint64_t v41 = a1[79];
  if (v41) {
LABEL_51:
  }
    sub_C9DFC(v41, a2);
  if (v40)
  {
    if (v40[8]) {
      (*(void (**)(void))(**(void **)v40 + 16LL))(*(void *)v40);
    }
    operator delete(v40);
  }

  *((_BYTE *)a1 + 1072) = 0;
}

void sub_B5EB0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v20 = (os_log_t *)sub_138E8(1);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
    {
      a9 = *(void *)(v19 + 576);
      sub_33464((std::string *)&__p, (unsigned int *)&a9);
      if (a15 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 314;
      WORD1(a19) = 2080;
      *(void *)((char *)&a19 + 4) = p_p;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to restart IOProc on VAD: '%s'.",  (uint8_t *)&buf,  0x1Cu);
      if (a15 < 0) {
        operator delete(__p);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0xB5CF8LL);
  }

  _Unwind_Resume(a1);
}

_BYTE *sub_B6010(_BYTE *a1)
{
  if (a1[8]) {
    sub_79C14((unint64_t *)(*(void *)a1 + 648LL));
  }
  return a1;
}

uint64_t sub_B6048(uint64_t a1, char *a2)
{
  *a2 = 0;
  uint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 104));
  if (pthread_equal(v4, v5))
  {
    char v6 = 0;
    goto LABEL_3;
  }

  uint64_t result = sub_4DDC(a1, a2);
  if ((_DWORD)result)
  {
    if ((sub_4DDC(a1 + 88, a2) & 1) == 0)
    {
      sub_563C(a1);
      char v6 = 0;
      uint64_t result = 0LL;
      goto LABEL_4;
    }

    char v6 = 1;
LABEL_3:
    uint64_t result = 1LL;
LABEL_4:
    *a2 = v6;
  }

  return result;
}

uint64_t sub_B60C8(std::string::size_type a1, int a2, int a3)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    int v61 = (os_log_t *)sub_138E8(13);
    char v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 178;
      _os_log_impl(&dword_0, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  char v6 = pthread_self();
  int v7 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 664));
  int v8 = pthread_equal(v6, v7);
  if (a2)
  {
    if (v8
      || (uint64_t v9 = pthread_self(),
          unsigned int v10 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 752)),
          pthread_equal(v9, v10)))
    {
      BOOL v11 = (os_log_t *)sub_138E8(13);
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 187;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v13, "Precondition failure.");
    }
  }

  else if (!v8)
  {
    int v14 = pthread_self();
    int v15 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 752));
    if (!pthread_equal(v14, v15))
    {
      uint64_t v64 = (os_log_t *)sub_138E8(13);
      __int16 v65 = *v64;
      if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 189;
        _os_log_impl(&dword_0, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      int v66 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v66, "Precondition failure.");
    }
  }

  *(_BYTE *)(a1 + 1072) = 1;
  int v16 = std::uncaught_exceptions();
  uint64_t v17 = *(void *)(a1 + 632);
  if (v17)
  {
    int v68 = v16;
    int v67 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 16) + 16LL))(v17 + 16);
    if (*(void *)(v17 + 256))
    {
      int v18 = (os_log_t *)sub_138E8(1);
      uint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
        {
          std::to_string(&v76, *(void *)(v17 + 256));
          uint64_t v20 = (v76.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v76 : (std::string *)v76.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 420;
          __int16 v74 = 2080;
          v75[0] = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Found %s stale property caches (expected 0)",  buf,  0x1Cu);
        }
      }
    }

    sub_C9C88(v17 + 240);
    sub_C9368((uint64_t *)buf, v17);
    for (uint64_t i = *(void *)&buf[8]; buf != (_BYTE *)i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v22 = *(void *)(i + 16);
      if (!v22)
      {
        uint64_t v25 = (os_log_t *)sub_138E8(13);
        char v26 = *v25;
        if (*v25)
        {
          if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v76.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_DevicePropertyManager.cpp";
            WORD2(v76.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = 428;
            _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: A property cache is NULL",  (uint8_t *)&v76,  0x12u);
          }
        }
      }

      uint64_t v23 = *(void *)(v22 + 8);
      int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
      *(_BYTE *)(v22 + 48) = 1;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
      }
    }

    sub_68314(buf);
    int v16 = v68;
    if (v67) {
      (*(void (**)(uint64_t))(*(void *)(v17 + 16) + 24LL))(v17 + 16);
    }
  }

  int v71 = std::uncaught_exceptions();
  std::string::size_type v72 = a1;
  if (a2) {
    sub_79A04(a1 + 648);
  }
  LODWORD(v76.__r_.__value_.__l.__data_) = std::uncaught_exceptions();
  v76.__r_.__value_.__l.__size_ = a1;
  v76.__r_.__value_.__s.__data_[16] = a2;
  if (*(void *)(a1 + 1008))
  {
    uint64_t v27 = *(void *)(a1 + 464);
    if (a3)
    {
      if (*(_DWORD *)(v27 + 112) || *(_DWORD *)(v27 + 116))
      {
        uint64_t v28 = sub_138E8(1);
        uint64_t v29 = sub_138E8(31);
        char v30 = 0;
        uint64_t v31 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v32 = *(void *)(v28 + 8);
        while (1)
        {
          uint64_t v33 = *(int *)&buf[4 * v31];
          char v34 = v30;
          if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
            break;
          }
          char v30 = 1;
          uint64_t v31 = 1LL;
          if ((v34 & 1) != 0) {
            goto LABEL_48;
          }
        }

        if ((v32 & v33) == 0) {
          uint64_t v28 = v29;
        }
LABEL_48:
        unint64_t v42 = *(os_log_s **)v28;
        if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v43 = *(void *)(a1 + 464);
          uint64_t v45 = *(void *)(v43 + 8);
          uint64_t v44 = *(void *)(v43 + 16);
          uint64_t v69 = *(void *)(a1 + 576);
          sub_33464(&__p, (unsigned int *)&v69);
          int v46 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 229;
          __int16 v74 = 1024;
          LODWORD(v75[0]) = (unint64_t)(v44 - v45) >> 3;
          WORD2(v75[0]) = 2080;
          *(void *)((char *)v75 + 6) = v46;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Internal configuration change request to stop %d IO proc(s) on VAD: '%s'.",  buf,  0x22u);
        }

        (*(void (**)(std::string::size_type))(*(void *)a1 + 400LL))(a1);
      }
    }

    else
    {
      if (*(_DWORD *)(v27 + 116))
      {
        uint64_t v35 = sub_138E8(1);
        uint64_t v36 = sub_138E8(31);
        char v37 = 0;
        uint64_t v38 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v39 = *(void *)(v35 + 8);
        while (1)
        {
          uint64_t v40 = *(int *)&buf[4 * v38];
          char v41 = v37;
          if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
            break;
          }
          char v37 = 1;
          uint64_t v38 = 1LL;
          if ((v41 & 1) != 0) {
            goto LABEL_58;
          }
        }

        if ((v39 & v40) == 0) {
          uint64_t v35 = v36;
        }
LABEL_58:
        unint64_t v47 = *(os_log_s **)v35;
        if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          int v48 = *(_DWORD *)(*(void *)(a1 + 464) + 116LL);
          uint64_t v69 = *(void *)(a1 + 576);
          sub_33464(&__p, (unsigned int *)&v69);
          int v49 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 241;
          __int16 v74 = 1024;
          LODWORD(v75[0]) = v48;
          WORD2(v75[0]) = 2080;
          *(void *)((char *)v75 + 6) = v49;
          _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Internal configuration change request to stop %u null IO proc(s) on VAD: '%s'.",  buf,  0x22u);
        }

        (*(void (**)(std::string::size_type, uint64_t))(*(void *)a1 + 576LL))(a1, 1LL);
        uint64_t v27 = *(void *)(a1 + 464);
      }

      if (*(_DWORD *)(v27 + 112))
      {
        uint64_t v50 = sub_138E8(1);
        uint64_t v51 = sub_138E8(31);
        char v52 = 0;
        uint64_t v53 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v54 = *(void *)(v50 + 8);
        while (1)
        {
          uint64_t v55 = *(int *)&buf[4 * v53];
          char v56 = v52;
          if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
            break;
          }
          char v52 = 1;
          uint64_t v53 = 1LL;
          if ((v56 & 1) != 0) {
            goto LABEL_73;
          }
        }

        if ((v54 & v55) == 0) {
          uint64_t v50 = v51;
        }
LABEL_73:
        uint64_t v57 = *(os_log_s **)v50;
        if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          int v58 = *(_DWORD *)(*(void *)(a1 + 464) + 112LL);
          uint64_t v69 = *(void *)(a1 + 576);
          sub_33464(&__p, (unsigned int *)&v69);
          uint64_t v59 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 250;
          __int16 v74 = 1024;
          LODWORD(v75[0]) = v58;
          WORD2(v75[0]) = 2080;
          *(void *)((char *)v75 + 6) = v59;
          _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Internal configuration change request to stop %u normal IO proc(s) on VAD: '%s'.",  buf,  0x22u);
        }

        (*(void (**)(std::string::size_type, void))(*(void *)a1 + 576LL))(a1, 0LL);
      }
    }
  }

  sub_B6B60((uint64_t)&v76);
  sub_B6BA8((uint64_t)&v71);
  uint64_t result = std::uncaught_exceptions();
  return result;
}

void sub_B69A4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, __int128 buf, __int128 a23)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    int v24 = (os_log_t *)sub_138E8(1);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      a13 = *(void *)(v23 + 576);
      sub_33464((std::string *)&__p, (unsigned int *)&a13);
      if (a19 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 258;
      WORD1(a23) = 2080;
      *(void *)((char *)&a23 + 4) = p_p;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Stopping IOProc on VirtualAudio_Device: VAD: '%s' FAILED.",  (uint8_t *)&buf,  0x1Cu);
      if (a19 < 0) {
        operator delete(__p);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0xB6808LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_B6B60(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1 && *(_BYTE *)(a1 + 16)) {
    sub_79C14((unint64_t *)(*(void *)(a1 + 8) + 648LL));
  }
  return a1;
}

uint64_t sub_B6BA8(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 632LL);
    if (v2)
    {
      memset(v4, 0, sizeof(v4));
      sub_C9DFC(v2, v4);
      int v5 = (void **)v4;
      sub_E2D18(&v5);
    }
  }

  return a1;
}

void sub_B6C0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_B6C24()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = 0LL;
  result[1] = 0LL;
  __dmb(0xBu);
  qword_48FB10 = (uint64_t)result;
  return result;
}

void sub_B6C4C(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    unsigned int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1383;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  memset(buf, 0, sizeof(buf));
  sub_B52B4(v18, a1);
  uint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 664));
  if (!pthread_equal(v4, v5))
  {
    char v6 = pthread_self();
    int v7 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 752));
    if (!pthread_equal(v6, v7))
    {
      int v15 = (os_log_t *)sub_138E8(13);
      int v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v19 = 136315394;
        *(void *)&v19[4] = "VirtualAudio_Device.cpp";
        __int16 v20 = 1024;
        int v21 = 1391;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v19, 0x12u);
      }

      uint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v17, "Invariant failure.");
    }
  }

  int v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1008) + 200LL))(*(void *)(a1 + 1008), a2);
  if (v8)
  {
    unint64_t v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)&v19[4] = "VirtualAudio_Device.cpp";
      __int16 v20 = 1024;
      int v21 = 1408;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: error setting the sample rate on the underlying device",  v19,  0x12u);
    }

    int v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v14 = &off_4865A0;
    v14[2] = v8;
  }

  sub_B6F94((void *)a1, (uint64_t *)buf);
  sub_B7320(a1);
  sub_CA170(*(void *)(a1 + 632), (uint64_t *)buf);
  sub_B5444((unint64_t *)a1, (uint64_t *)buf);
  sub_B5780(v18);
  *(void *)uint64_t v19 = buf;
  sub_E2D18((void ***)v19);
}

void sub_B6F34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = &a15;
  sub_E2D18((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_B6F94(void *a1, uint64_t *a2)
{
  if (((a1[63] - a1[62]) & 0x7FFFFFFF8LL) == 0 && ((a1[66] - a1[65]) & 0x7FFFFFFF8LL) == 0)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v29 = "VirtualAudio_Device.cpp";
      __int16 v30 = 1024;
      int v31 = 4327;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    __int16 v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v29 = "VirtualAudio_Device.cpp";
      __int16 v30 = 1024;
      int v31 = 4328;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Precondition failure.");
  }

  uint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (!pthread_equal(v4, v5))
  {
    char v6 = pthread_self();
    int v7 = (_opaque_pthread_t *)atomic_load(a1 + 94);
    if (!pthread_equal(v6, v7))
    {
      uint64_t v25 = (os_log_t *)sub_138E8(13);
      char v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v29 = "VirtualAudio_Device.cpp";
        __int16 v30 = 1024;
        int v31 = 4329;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v27, "Precondition failure.");
    }
  }

  char v8 = 1;
  do
  {
    char v9 = v8;
    BOOL v10 = (v8 & 1) == 0;
    if ((v8 & 1) != 0) {
      uint64_t v11 = 63LL;
    }
    else {
      uint64_t v11 = 66LL;
    }
    if ((v8 & 1) != 0) {
      unint64_t v12 = a1 + 63;
    }
    else {
      unint64_t v12 = a1 + 66;
    }
    if (v10) {
      uint64_t v13 = 65LL;
    }
    else {
      uint64_t v13 = 62LL;
    }
    if (v10) {
      int v14 = a1 + 65;
    }
    else {
      int v14 = a1 + 62;
    }
    uint64_t v15 = *v12;
    uint64_t v16 = *v14;
    if (((v15 - *v14) & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v17 = 0LL;
      do
      {
        if (v17 >= (v14[1] - v16) >> 3) {
          uint64_t v18 = 0LL;
        }
        else {
          uint64_t v18 = *(void *)(v16 + 8 * v17);
        }
        sub_E1394(v18, a1[126], v17++, a2);
        uint64_t v16 = a1[v13];
      }

      while (v17 < ((unint64_t)(a1[v11] - v16) >> 3));
    }

    char v8 = 0;
  }

  while ((v9 & 1) != 0);
}

void sub_B72FC(_Unwind_Exception *a1)
{
}

void sub_B7320(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    __int128 v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 136315394;
      *(void *)&v6[1] = "VirtualAudio_Device.cpp";
      __int16 v7 = 1024;
      int v8 = 4005;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)v6,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_B4380(a1);
  uint64_t v2 = *(void *)(a1 + 632);
  if (v2)
  {
    strcpy((char *)v6, "zisfbolg");
    BYTE1(v6[2]) = 0;
    HIWORD(v6[2]) = 0;
    sub_C974C(v2, a1, v6, a1 + 488);
  }

void sub_B745C(_Unwind_Exception *a1)
{
}

uint64_t sub_B7478(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  __int128 v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      char v6 = v5 + 4;
      __int16 v7 = *(uint64_t **)(a1 + 8);
      int v8 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      char v9 = *(void **)(a1 + 8);
      BOOL v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = v9;
          char v9 = (void *)v9[1];
        }

        while (v9);
      }

      else
      {
        do
        {
          int v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          BOOL v10 = v8;
        }

        while (v11);
      }

      unint64_t v12 = *v6;
      if (v8[4] < *v6)
      {
LABEL_8:
        if (v7) {
          uint64_t v13 = (uint64_t **)v8;
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
        if (v7) {
          int v14 = (uint64_t **)(v8 + 1);
        }
        else {
          int v14 = (uint64_t **)v3;
        }
      }

      else
      {
        uint64_t v13 = (uint64_t **)v3;
        int v14 = (uint64_t **)v3;
        if (v7)
        {
          int v14 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v7;
              unint64_t v18 = v7[4];
              if (v12 >= v18) {
                break;
              }
              __int16 v7 = *v13;
              int v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }

            if (v18 >= v12) {
              break;
            }
            int v14 = v13 + 1;
            __int16 v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v14)
      {
LABEL_15:
        uint64_t v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_32C38((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }

      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          unint64_t v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          int v5 = v17;
        }

        while (!v11);
      }

      int v5 = v17;
    }

    while (v17 != v4);
  }

  return a1;
}

void sub_B75E4(_Unwind_Exception *a1)
{
}

uint64_t sub_B75F8(uint64_t a1, double *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_76F9C((uint64_t **)a1, v4, a2, *a2);
      a2 += 2;
      v6 -= 16LL;
    }

    while (v6);
  }

  return a1;
}

void sub_B765C(_Unwind_Exception *a1)
{
}

uint64_t sub_B7670(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 1008);
  if (!v3)
  {
    int v8 = (os_log_t *)sub_138E8(13);
    char v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 1345;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to calculate buffer frame size without an active device",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  uint64_t v4 = a2;
  int v13 = 0;
  unsigned int v14 = a2;
  uint64_t v12 = 0x676C6F626366737ALL;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v3 + 16LL))(v3, &v12))
  {
    *(_DWORD *)buf = 4;
    (*(void (**)(void, uint64_t *, void, void, uint8_t *, unsigned int *))(**(void **)(a1 + 1008)
                                                                                         + 40LL))( *(void *)(a1 + 1008),  &v12,  0LL,  0LL,  buf,  &v14);
    return v14;
  }

  else
  {
    int v5 = (os_log_t *)sub_138E8(1);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 1008) + 128LL))(v11);
      *(_DWORD *)buf = 136315650;
      uint64_t v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 1359;
      __int16 v19 = 2112;
      uint64_t v20 = v11[0];
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Active device with UID '%@' does not implement the property kAudioDevicePropertyCalculateBufferFrameSize",  buf,  0x1Cu);
      sub_19DFC((uint64_t)v11);
    }
  }

  return v4;
}

void *sub_B7870(void *result, _DWORD *a2, _OWORD *a3)
{
  unint64_t v3 = result[2];
  unint64_t v4 = *a2;
  if (v3 > v4 >> 4)
  {
    BOOL v10 = (os_log_t *)sub_138E8(13);
    BOOL v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int16 v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 221;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): provided vector exceeds the size of the provided array.",  (uint8_t *)&v16,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "provided vector exceeds the size of the provided array.");
  }

  if (!(_DWORD)v4)
  {
    int v13 = (os_log_t *)sub_138E8(13);
    unsigned int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int16 v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 222;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): ioDataSize is 0.",  (uint8_t *)&v16,  0x12u);
    }

    uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "ioDataSize is 0.");
  }

  if (v3)
  {
    *a2 = 16 * v3;
    uint64_t v6 = (void *)*result++;
    int v5 = v6;
    if (v6 != result)
    {
      do
      {
        *a3 = *((_OWORD *)v5 + 2);
        __int16 v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            int v8 = v7;
            __int16 v7 = (void *)*v7;
          }

          while (v7);
        }

        else
        {
          do
          {
            int v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            int v5 = v8;
          }

          while (!v9);
        }

        ++a3;
        int v5 = v8;
      }

      while (v8 != result);
    }
  }

  return result;
}

void sub_B7A6C(_Unwind_Exception *a1)
{
}

void *sub_B7A8C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_7A840(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_B7AE8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_B7B04(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_B8E40(&v22, a3, "", 4020);
  uint64_t v7 = v23;
  if (v23 != &v22)
  {
    if (a4 == 1869968496) {
      int v8 = 44731034;
    }
    else {
      int v8 = 44731050;
    }
    if (a4 == 1768845428) {
      int v9 = 44731018;
    }
    else {
      int v9 = v8;
    }
    do
    {
      uint64_t v10 = *(void *)(a2 + 568);
      uint64_t v11 = v7[2];
      std::string __p = 0LL;
      unsigned int v14 = 0LL;
      uint64_t v15 = 0LL;
      strcpy(v16, "cwdv");
      v16[8] = 0;
      int v17 = 3;
      v19[0] = 0LL;
      v19[1] = 0LL;
      __int16 v18 = v19;
      CFTypeRef cf = 0LL;
      int v20 = v9;
      unsigned int v12 = sub_578E8(*(void *)(v10 + 128), v11, (uint64_t)&__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_32C8C(v19[0]);
      if (__p)
      {
        unsigned int v14 = __p;
        operator delete(__p);
      }

      if (v12) {
        sub_57ADC(a1, v12, v12);
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }

    while (v7 != &v22);
  }

  sub_1BB88(&v22);
}

void sub_B7C60(_Unwind_Exception *a1)
{
}

void *sub_B7C98(void *result, int a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = 528LL;
  if (a2)
  {
    uint64_t v3 = 504LL;
    uint64_t v4 = 496LL;
  }

  else
  {
    uint64_t v4 = 520LL;
  }

  if (a2) {
    uint64_t v5 = *result + 496LL;
  }
  else {
    uint64_t v5 = *result + 520LL;
  }
  unint64_t v6 = *(void *)(v2 + v3) - *(void *)(v2 + v4);
  if ((v6 & 0x7FFFFFFF8LL) != 0)
  {
    uint64_t v7 = result;
    unint64_t v8 = 0LL;
    uint64_t v9 = (v6 >> 3);
    do
    {
      uint64_t v10 = *(void *)(v2 + v4);
      if (v8 >= (*(void *)(v5 + 8) - v10) >> 3) {
        uint64_t v11 = 0LL;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 8 * v8);
      }
      unsigned int v12 = (int **)v7[1];
      int v13 = *v12;
      unsigned int v14 = v12[1];
      if (*v12 != v14)
      {
        while (1)
        {
          uint64_t result = (void *)sub_E0604(*(void *)(v11 + 120), *v13);
          if ((_DWORD)result) {
            break;
          }
          if (++v13 == v14) {
            goto LABEL_17;
          }
        }
      }

      uint64_t result = sub_57ADC((uint64_t *)v7[2], *(_DWORD *)(v11 + 8), *(_DWORD *)(v11 + 8));
LABEL_17:
      ++v8;
    }

    while (v8 != v9);
  }

  return result;
}

CFArrayRef sub_B7D88(CFArrayRef result, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  if (!a2)
  {
    uint64_t v44 = (os_log_t *)sub_138E8(13);
    uint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v59 = 1024;
      int v60 = 420;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inDevice is NULL]: inDevice is NULL.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inDevice is NULL.");
  }

  if (a3->mScope != 1735159650) {
    goto LABEL_54;
  }
  CFArrayRef v4 = result;
  AudioObjectPropertyElement mElement = a3->mElement;
  if (a3->mSelector == 1885434722)
  {
    if (!mElement) {
      goto LABEL_5;
    }
LABEL_54:
    uint64_t v29 = (os_log_t *)sub_138E8(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v59 = 1024;
      int v60 = 423;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inSubPortsAddress must be kVirtualAudioPortPropertyAvailableSubPorts o r kVirtualAudioPortPropertyActiveSubPorts.",  buf,  0x12u);
    }

    int v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v31,  "inSubPortsAddress must be kVirtualAudioPortPropertyAvailableSubPorts or kVirtualAudioPortPropertyActiveSubPorts.");
  }

  if (a3->mSelector != 1885430643 || mElement != 0) {
    goto LABEL_54;
  }
LABEL_5:
  *(void *)uint64_t result = 0LL;
  *((void *)result + 1) = 0LL;
  *((void *)result + 2) = 0LL;
  uint64_t v6 = *(void *)(a2 + 496);
  uint64_t v7 = *(void *)(a2 + 504);
  if (((v7 - v6) & 0x7FFFFFFF8LL) != 0)
  {
    unint64_t v8 = 0LL;
    do
    {
      unint64_t v9 = v8;
      if (v8 >= (v7 - v6) >> 3 || (uint64_t v10 = *(void *)(v6 + 8 * v8)) == 0)
      {
        char v41 = (os_log_t *)sub_138E8(13);
        unint64_t v42 = *v41;
        if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          __int16 v59 = 1024;
          int v60 = 429;
          __int16 v61 = 1024;
          LODWORD(v62) = v8;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theStream is NULL]: inDevice->GetStreamByIndex(kVAInputStream, % u) returned NULL.",  buf,  0x18u);
        }

        uint64_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v43, "inDevice->GetStreamByIndex(kVAInputStream, %u) returned NULL.");
      }

      CFArrayRef theArray = 0LL;
      int v56 = 8;
      strcpy(buf, "spasbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(uint64_t, _BYTE *, void, void, int *, CFArrayRef *))(*(void *)v10 + 56LL))( v10,  buf,  0LL,  0LL,  &v56,  &theArray);
      uint64_t result = theArray;
      if (theArray) {
        goto LABEL_14;
      }
      uint64_t v11 = (os_log_t *)sub_138E8(1);
      unsigned int v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v59 = 1024;
        int v60 = 433;
        __int16 v61 = 2048;
        uint64_t v62 = v10;
        __int16 v63 = 1024;
        int v64 = v8;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d An input stream (%p / index %u) reports having no associated ports.",  buf,  0x22u);
      }

      uint64_t result = theArray;
      if (theArray)
      {
LABEL_14:
        unsigned int v13 = 0;
        CFArrayRef v54 = result;
        __int16 v55 = 1;
        if (!result) {
          goto LABEL_16;
        }
LABEL_15:
        LODWORD(result) = CFArrayGetCount(result);
LABEL_16:
        while (v13 < result)
        {
          AudioObjectID inObjectID = 0;
          if ((sub_1A0E0C(&v54, v13, &inObjectID) & 1) == 0)
          {
            uint64_t v35 = (os_log_t *)sub_138E8(13);
            uint64_t v36 = *v35;
            if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              __int16 v59 = 1024;
              int v60 = 441;
              _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Associated ports CFArray contained a non-UInt32 value.",  buf,  0x12u);
            }

            char v37 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v37 = &off_4865A0;
            v37[2] = 2003329396;
          }

          if (inObjectID)
          {
            unsigned int outData = 0LL;
            UInt32 ioDataSize = 8;
            OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, a3, 0, 0LL, &ioDataSize, &outData);
            if (PropertyData)
            {
              uint64_t v38 = (os_log_t *)sub_138E8(13);
              uint64_t v39 = *v38;
              if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                __int16 v59 = 1024;
                int v60 = 449;
                __int16 v61 = 1024;
                LODWORD(v62) = inObjectID;
                _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Failed to get subports for port ID %u.",  buf,  0x18u);
              }

              uint64_t v40 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v40 = &off_4865A0;
              void v40[2] = PropertyData;
            }

            uint64_t v15 = outData;
            if (outData)
            {
              unsigned int v16 = 0;
              CFArrayRef v49 = outData;
              __int16 v50 = 1;
LABEL_22:
              LODWORD(v15) = CFArrayGetCount(v15);
              while (v16 < v15)
              {
                int v48 = 0;
                if ((sub_1A0E0C(&v49, v16, &v48) & 1) == 0)
                {
                  uint64_t v32 = (os_log_t *)sub_138E8(13);
                  uint64_t v33 = *v32;
                  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                    __int16 v59 = 1024;
                    int v60 = 457;
                    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Sub-port CFArray contained a non-UInt32 value.",  buf,  0x12u);
                  }

                  char v34 = __cxa_allocate_exception(0x10uLL);
                  *(void *)char v34 = &off_4865A0;
                  void v34[2] = 2003329396;
                }

                __int16 v18 = (_DWORD *)*((void *)v4 + 1);
                unint64_t v17 = *((void *)v4 + 2);
                if ((unint64_t)v18 >= v17)
                {
                  int v20 = *(_DWORD **)v4;
                  uint64_t v21 = ((uint64_t)v18 - *(void *)v4) >> 2;
                  unint64_t v22 = v21 + 1;
                  uint64_t v23 = v17 - (void)v20;
                  if (v23 >> 1 > v22) {
                    unint64_t v22 = v23 >> 1;
                  }
                  else {
                    unint64_t v24 = v22;
                  }
                  if (v24) {
                    unint64_t v24 = (unint64_t)sub_7A890(v24);
                  }
                  else {
                    uint64_t v25 = 0LL;
                  }
                  char v26 = (_DWORD *)(v24 + 4 * v21);
                  _DWORD *v26 = v48;
                  int v19 = v26 + 1;
                  while (v18 != v20)
                  {
                    int v27 = *--v18;
                    *--char v26 = v27;
                  }

                  *(void *)CFArrayRef v4 = v26;
                  *((void *)v4 + 1) = v19;
                  *((void *)v4 + 2) = v24 + 4 * v25;
                  if (v20) {
                    operator delete(v20);
                  }
                }

                else
                {
                  _DWORD *v18 = v48;
                  int v19 = v18 + 1;
                }

                *((void *)v4 + 1) = v19;
                ++v16;
                uint64_t v15 = v49;
                if (v49) {
                  goto LABEL_22;
                }
              }

              sub_13818((uint64_t)&v49);
            }

            unint64_t v8 = v9;
          }

          ++v13;
          uint64_t result = v54;
          if (v54) {
            goto LABEL_15;
          }
        }

        uint64_t result = (CFArrayRef)sub_13818((uint64_t)&v54);
      }

      ++v8;
      uint64_t v6 = *(void *)(a2 + 496);
      uint64_t v7 = *(void *)(a2 + 504);
    }

    while (v8 < ((unint64_t)(v7 - v6) >> 3));
  }

  return result;
}

void sub_B84E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

float sub_B8578(void **a1)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v39 = (os_log_t *)sub_138E8(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2803;
      _os_log_impl(&dword_0, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v2 = *((unsigned int *)a1[126] + 69);
  qmemcpy(buf, "gnrcpnrcmlacamecmmec", sizeof(buf));
  uint64_t v3 = wmemchr((const __int32 *)buf, v2, 5uLL);
  if (v3) {
    CFArrayRef v4 = v3;
  }
  else {
    CFArrayRef v4 = (__int32 *)&v50;
  }
  if ((char *)v4 - (char *)buf != 20)
  {
    uint64_t v32 = (os_log_t *)sub_138E8(1);
    uint64_t v33 = *v32;
    float v27 = 1.0;
    if (!*v32 || !os_log_type_enabled(*v32, OS_LOG_TYPE_INFO)) {
      return v27;
    }
    unint64_t v47 = a1[72];
    sub_33464(&v48, (unsigned int *)&v47);
    int size = (char)v48.__r_.__value_.__s.__size_;
    std::string::size_type v35 = v48.__r_.__value_.__r.__words[0];
    sub_2CA1C(__p, v2);
    uint64_t v36 = &v48;
    if (size < 0) {
      uint64_t v36 = (std::string *)v35;
    }
    if (v46 >= 0) {
      *(double *)&char v37 = COERCE_DOUBLE(__p);
    }
    else {
      char v37 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2810;
    *(_WORD *)&_BYTE buf[18] = 2080;
    __int16 v50 = v36;
    __int16 v51 = 2080;
    double v52 = *(double *)&v37;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_INFO,  "%25s:%-5d Returning 1.0 for SystemSoundVolumeCap for VAD '%s' since we're in broadcast category '%s'.",  buf,  0x26u);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_58;
  }

  uint64_t v5 = (void **)a1[130];
  float v6 = 0.0;
  if (v5 != a1 + 131)
  {
    do
    {
      sub_92EF8();
      uint64_t v7 = sub_28AFEC(*((_DWORD *)v5 + 7));
      unint64_t v8 = *(std::__shared_weak_count **)(v7 + 96);
      v48.__r_.__value_.__r.__words[0] = *(void *)(v7 + 88);
      v48.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          unint64_t v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }

      sub_B8CBC((uint64_t *)buf, (uint64_t *)&v48, "", 2818);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      sub_33200();
      uint64_t v11 = (float *)qword_48F0C0;
      if (qword_48F0C0 == qword_48F0C8)
      {
        float v13 = 0.0;
      }

      else
      {
        int v12 = *(_DWORD *)(*(void *)buf + 144LL);
        float v13 = 0.0;
        while (1)
        {
          int v14 = *((_DWORD *)v11 + 1);
          int v15 = *((_DWORD *)v11 + 2);
          BOOL v16 = v14 == v12 && v15 == *(_DWORD *)(*(void *)buf + 264LL);
          if (v16) {
            break;
          }
          if (v15) {
            BOOL v17 = 0;
          }
          else {
            BOOL v17 = v14 == v12;
          }
          float v18 = *v11;
          v11 += 3;
          float v19 = v18;
          if (v17) {
            float v13 = v19;
          }
        }

        float v13 = *v11;
      }

void sub_B8AB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
}

void sub_B8B14(_DWORD *a1, double *a2, double a3)
{
  if (*a1 <= 7u)
  {
    float v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "StandardUtilities.h";
        __int16 v10 = 1024;
        int v11 = 158;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) <= ioDataSize",  (uint8_t *)&v8,  0x12u);
      }
    }
  }

  *a1 = 8;
  *a2 = a3;
}

unint64_t sub_B8C00(uint64_t a1)
{
  if ((sub_2F4E5C(a1) & 1) != 0)
  {
    unsigned int v2 = 2003329396;
    uint64_t v3 = 0LL;
    if (sub_2F4EB4(a1))
    {
      unsigned int v2 = sub_2F4F0C(a1);
      if (v2) {
        uint64_t v3 = 0LL;
      }
      else {
        uint64_t v3 = v5;
      }
    }
  }

  else
  {
    uint64_t v3 = 0LL;
    unsigned int v2 = 2003332927;
  }

  return v2 | (unint64_t)(v3 << 32);
}

std::__shared_weak_count *sub_B8CBC(uint64_t *a1, uint64_t *a2, const char *a3, int a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    int v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        int v14 = strrchr(a3, 47);
        if (v14) {
          float v13 = v14 + 1;
        }
        else {
          float v13 = a3;
        }
      }

      else
      {
        float v13 = 0LL;
      }

      int v16 = 136315906;
      BOOL v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not lock weak ptr (%s:%d).",  (uint8_t *)&v16,  0x22u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }

  return result;
}

void sub_B8E18(_Unwind_Exception *a1)
{
}

void sub_B8E40(uint64_t *a1, uint64_t a2, const char *a3, int a4)
{
  int v16 = &v16;
  BOOL v17 = (uint64_t *)&v16;
  uint64_t v18 = 0LL;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    unint64_t v9 = a1 + 2;
    goto LABEL_7;
  }

  unint64_t v9 = &v18;
  do
  {
    sub_B8F68((uint64_t *)&v19, (uint64_t *)(v5 + 16), a3, a4);
    uint64_t v10 = operator new(0x20uLL);
    v10[1] = v19;
    uint64_t v11 = (uint64_t)v16;
    *(void *)uint64_t v10 = v16;
    *((void *)v10 + 1) = &v16;
    *(void *)(v11 + 8) = v10;
    uint64_t v12 = v18 + 1;
    int v16 = v10;
    ++v18;
    uint64_t v5 = *(void *)(v5 + 8);
  }

  while (v5 != a2);
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (v12)
  {
    float v13 = v17;
    uint64_t v14 = *v17;
    *(void *)(v14 + 8) = *((void *)v10 + 1);
    **((void **)v10 + 1) = v14;
    uint64_t v15 = *a1;
    *(void *)(v15 + 8) = v13;
    *float v13 = v15;
    *a1 = (uint64_t)v10;
    *((void *)v10 + 1) = a1;
    a1[2] = v12;
LABEL_7:
    *unint64_t v9 = 0LL;
  }

  sub_1BB88((uint64_t *)&v16);
}

void sub_B8F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  sub_1BB88((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_B8F68(uint64_t *a1, uint64_t *a2, const char *a3, int a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        uint64_t v14 = strrchr(a3, 47);
        if (v14) {
          float v13 = v14 + 1;
        }
        else {
          float v13 = a3;
        }
      }

      else
      {
        float v13 = 0LL;
      }

      int v16 = 136315906;
      BOOL v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not lock weak ptr (%s:%d).",  (uint8_t *)&v16,  0x22u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }

  return result;
}

void sub_B90C4(_Unwind_Exception *a1)
{
}

uint64_t sub_B90EC(uint64_t a1)
{
  *(void *)a1 = off_46E530;
  unsigned int v2 = (os_log_t *)sub_138E8(1);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(__p, a1);
    CFArrayRef v4 = v47 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v49 = 1024;
    int v50 = 525;
    __int16 v51 = 2080;
    double v52 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destructing VirtualAudio_Device: %s.", buf, 0x1Cu);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 512LL))(a1))
  {
    uint64_t v5 = (os_log_t *)sub_138E8(1);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v49 = 1024;
        int v50 = 527;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d IO must not be running.", buf, 0x12u);
      }
    }
  }

  uint64_t v7 = pthread_self();
  int v8 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 664));
  if (pthread_equal(v7, v8)
    || (unint64_t v9 = pthread_self(),
        uint64_t v10 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 752)),
        pthread_equal(v9, v10)))
  {
    uint64_t v11 = (os_log_t *)sub_138E8(1);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v49 = 1024;
        int v50 = 529;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The IO monitor must not be held by this thread.",  buf,  0x12u);
      }
    }
  }

  uint64_t v13 = sub_138E8(1);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    uint64_t v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(__p, a1);
        uint64_t v15 = v47 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v49 = 1024;
        int v50 = 531;
        __int16 v51 = 2080;
        double v52 = v15;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Tearing down VirtualAudio_Device: %s.", buf, 0x1Cu);
        if (v47 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  sub_B9718((uint64_t *)(a1 + 1064), 0LL);
  uint64_t v16 = *(void *)(a1 + 632);
  if (v16)
  {
    sub_C90D0(v16);
    uint64_t v17 = *(void *)(a1 + 632);
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
    *(void *)(a1 + 632) = 0LL;
  }

  uint64_t v18 = *(void *)(a1 + 920);
  if (v18)
  {
    sub_2F534C(a1, v18);
    uint64_t v19 = *(void *)(a1 + 920);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
    *(void *)(a1 + 920) = 0LL;
  }

  sub_BA0D0(a1, *(_DWORD **)(a1 + 928));
  sub_BA0D0(a1, *(_DWORD **)(a1 + 960));
  sub_BA0D0(a1, *(_DWORD **)(a1 + 968));
  sub_BA0D0(a1, *(_DWORD **)(a1 + 976));
  __int16 v20 = *(_DWORD ***)(a1 + 936);
  if (v20 != *(_DWORD ***)(a1 + 944))
  {
    do
    {
      sub_BA0D0(a1, *v20);
      uint64_t v21 = *(char **)(a1 + 944);
      int64_t v22 = v21 - (char *)(v20 + 1);
      int v23 = *(char **)(a1 + 936);
      unint64_t v24 = (char *)v20 + v22;
      *(void *)(a1 + 944) = (char *)v20 + v22;
      __int16 v20 = (_DWORD **)v23;
    }

    while (v23 != v24);
  }

  float v25 = *(_DWORD ***)(a1 + 984);
  if (v25 != *(_DWORD ***)(a1 + 992))
  {
    do
    {
      sub_BA0D0(a1, *v25);
      float v26 = *(char **)(a1 + 992);
      int64_t v27 = v26 - (char *)(v25 + 1);
      uint64_t v28 = *(char **)(a1 + 984);
      uint64_t v29 = (char *)v25 + v27;
      *(void *)(a1 + 992) = (char *)v25 + v27;
      float v25 = (_DWORD **)v28;
    }

    while (v28 != v29);
  }

  char v30 = 1;
  do
  {
    char v31 = v30;
    if ((v30 & 1) != 0) {
      uint64_t v32 = 504LL;
    }
    else {
      uint64_t v32 = 528LL;
    }
    if ((v30 & 1) != 0) {
      uint64_t v33 = 496LL;
    }
    else {
      uint64_t v33 = 520LL;
    }
    if ((v30 & 1) != 0) {
      uint64_t v34 = a1 + 496;
    }
    else {
      uint64_t v34 = a1 + 520;
    }
    uint64_t v35 = *(void *)(a1 + v33);
    if (((*(void *)(a1 + v32) - v35) & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v36 = 0LL;
      do
      {
        if (v36 >= (*(void *)(v34 + 8) - v35) >> 3)
        {
          sub_2C2370((char *)a1, 0LL);
        }

        else
        {
          uint64_t v37 = *(void *)(v35 + 8 * v36);
          sub_2C2370((char *)a1, v37);
          if (v37) {
            (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
          }
        }

        ++v36;
        uint64_t v35 = *(void *)(a1 + v33);
      }

      while (v36 < ((unint64_t)(*(void *)(a1 + v32) - v35) >> 3));
    }

    char v30 = 0;
  }

  while ((v31 & 1) != 0);
  uint64_t v38 = *(void *)(a1 + 1008);
  if (v38)
  {
    __p[0] = 0LL;
    strcpy(buf, "gwsobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_38A8E8(v38, (uint64_t)buf, 8LL, (uint64_t)__p);
    uint64_t v39 = *(void *)(a1 + 1080);
    *(void *)(a1 + 1080) = 0LL;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
    }
    (*(void (**)(void))(**(void **)(a1 + 1008) + 80LL))(*(void *)(a1 + 1008));
    uint64_t v40 = *(void *)(a1 + 1008);
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
    }
    *(void *)(a1 + 1008) = 0LL;
  }

  sub_B98F8();
  sub_B9960(a1);
  uint64_t v41 = *(void *)(a1 + 1080);
  *(void *)(a1 + 1080) = 0LL;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
  }
  sub_B9718((uint64_t *)(a1 + 1064), 0LL);
  sub_32C8C(*(void **)(a1 + 1048));
  sub_32C8C(*(void **)(a1 + 1024));
  unint64_t v42 = *(void **)(a1 + 984);
  if (v42)
  {
    *(void *)(a1 + 992) = v42;
    operator delete(v42);
  }

  uint64_t v43 = *(void **)(a1 + 936);
  if (v43)
  {
    *(void *)(a1 + 944) = v43;
    operator delete(v43);
  }

  *(void *)(a1 + 824) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 848));
  *(void *)(a1 + 736) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 760));
  *(void *)(a1 + 648) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 672));
  sub_32C8C(*(void **)(a1 + 616));
  uint64_t v44 = *(const void **)(a1 + 592);
  if (v44) {
    CFRelease(v44);
  }
  sub_2C2244(a1);
  return a1;
}

void sub_B96E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_B9718(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = AudioObjectRemovePropertyListener( *(_DWORD *)v2,  (const AudioObjectPropertyAddress *)(v2 + 4),  (AudioObjectPropertyListenerProc)sub_BA498,  (void *)v2);
    if ((_DWORD)v3)
    {
      CFArrayRef v4 = (os_log_t *)sub_138E8(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v15, v3);
          int v6 = v16;
          uint64_t v7 = (void **)v15[0];
          uint64_t v11 = *(void *)(v2 + 4);
          int v12 = *(_DWORD *)(v2 + 12);
          sub_613AC((uint64_t)__p, (unsigned int *)&v11);
          int v8 = v15;
          if (v6 < 0) {
            int v8 = v7;
          }
          if (v14 >= 0) {
            unint64_t v9 = __p;
          }
          else {
            unint64_t v9 = (void **)__p[0];
          }
          AudioObjectID v10 = *(_DWORD *)v2;
          *(_DWORD *)buf = 136316418;
          uint64_t v18 = "VirtualAudio_Device.cpp";
          __int16 v19 = 1024;
          int v20 = 374;
          __int16 v21 = 2080;
          int64_t v22 = v8;
          __int16 v23 = 1024;
          int v24 = v3;
          __int16 v25 = 2080;
          float v26 = v9;
          __int16 v27 = 1024;
          AudioObjectID v28 = v10;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %s (%d) unregistering listener for property %s on object %u",  buf,  0x32u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
          if (v16 < 0) {
            operator delete(v15[0]);
          }
        }
      }
    }

    operator delete((void *)v2);
  }

void sub_B98EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_B98F8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48D050);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48D050))
    {
      sub_BA01C();
      __cxa_guard_release(&qword_48D050);
    }
  }

void sub_B9948(_Unwind_Exception *a1)
{
}

void sub_B9960(uint64_t a1)
{
  if (!a1)
  {
    char v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int64_t v22 = "AVHIDEventListener.h";
      __int16 v23 = 1024;
      int v24 = 191;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  std::mutex::lock((std::mutex *)&qword_48CFF0);
  uint64_t v2 = (uint64_t *)qword_48D030;
  if ((uint64_t *)qword_48D030 != &qword_48D038)
  {
    while (v2[4] != a1)
    {
      uint64_t v3 = (uint64_t *)v2[1];
      if (v3)
      {
        do
        {
          CFArrayRef v4 = v3;
          uint64_t v3 = (uint64_t *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          CFArrayRef v4 = (uint64_t *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }

        while (!v5);
      }

      uint64_t v2 = v4;
      if (v4 == &qword_48D038) {
        goto LABEL_31;
      }
    }

    int v6 = (os_log_t *)sub_138E8(41);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(__p, a1);
      int v8 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      int64_t v22 = "AVHIDEventListener.h";
      __int16 v23 = 1024;
      int v24 = 200;
      __int16 v25 = 2080;
      float v26 = v8;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::UnregisterDevice() - unregistering device '%s' for updates.",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v9 = (uint64_t *)v2[1];
    if (v9)
    {
      do
      {
        AudioObjectID v10 = v9;
        unint64_t v9 = (uint64_t *)*v9;
      }

      while (v9);
    }

    else
    {
      uint64_t v11 = v2;
      do
      {
        AudioObjectID v10 = (uint64_t *)v11[2];
        BOOL v5 = *v10 == (void)v11;
        uint64_t v11 = v10;
      }

      while (!v5);
    }

    --qword_48D040;
    sub_911E8((uint64_t *)qword_48D038, v2);
    operator delete(v2);
    if (!qword_48D040)
    {
      int v12 = (os_log_t *)sub_138E8(41);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int64_t v22 = "AVHIDEventListener.h";
        __int16 v23 = 1024;
        int v24 = 207;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::UnregisterDevice() - unregistered all devices.",  buf,  0x12u);
      }

      char v14 = (dispatch_queue_s *)qword_48CFB0;
      uint64_t v15 = operator new(8uLL);
      void *v15 = &qword_48CFB0;
      dispatch_async_f(v14, v15, (dispatch_function_t)sub_B9CDC);
    }
  }

LABEL_31:
  std::mutex::unlock((std::mutex *)&qword_48CFF0);
}

    if (v22) {
      break;
    }
  }

  if (i == v16)
  {
LABEL_49:
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    goto LABEL_50;
  }

  __int16 v25 = i[2];
  float v26 = (std::__shared_weak_count *)i[3];
  *(void *)buf = v25;
  *(void *)&buf[8] = v26;
  if (v26)
  {
    __int16 v27 = (unint64_t *)&v26->__shared_owners_;
    do
      AudioObjectID v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }

  if (!v25)
  {
LABEL_50:
    char v31 = (os_log_t *)sub_138E8(13);
    uint64_t v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v41 = 136315394;
      *(void *)unint64_t v42 = "VirtualAudio_DevicePropertyCache.cpp";
      *(_WORD *)&v42[8] = 1024;
      *(_DWORD *)&v42[10] = 382;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not find property for given address.",  v41,  0x12u);
    }

    uint64_t v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Could not find property for given address.");
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16LL))(v25, 4LL, a4);
  if (!v26) {
    goto LABEL_42;
  }
  uint64_t v29 = (unint64_t *)&v26->__shared_owners_;
  do
    char v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (v13) {
LABEL_43:
    }
      (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  }

  else
  {
LABEL_42:
    if (v13) {
      goto LABEL_43;
    }
  }

  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24LL))(v37);
  }
}

    *((void *)v12 + 10) = 1LL;
    goto LABEL_32;
  }

    uint64_t v29 = 0;
LABEL_33:
    if ((sub_DE498((void *)(a2 + 456), 1885433953) & 1) != 0) {
      char v30 = 1;
    }
    else {
      char v30 = sub_DE498((void *)(a2 + 456), 1885433971);
    }
    char v31 = *(void **)a5;
    if (*(void *)a5 == a5 + 8)
    {
LABEL_47:
      unint64_t v36 = 0;
    }

    else
    {
      while (1)
      {
        uint64_t v32 = *((_DWORD *)v31 + 7);
        uint64_t v33 = v32 == 1885433953 || v32 == 1885433971;
        if (v33) {
          break;
        }
        uint64_t v34 = (void *)v31[1];
        if (v34)
        {
          do
          {
            uint64_t v35 = v34;
            uint64_t v34 = (void *)*v34;
          }

          while (v34);
        }

        else
        {
          do
          {
            uint64_t v35 = (void *)v31[2];
            uint64_t v33 = *v35 == (void)v31;
            char v31 = v35;
          }

          while (!v33);
        }

        char v31 = v35;
        if (v35 == (void *)(a5 + 8)) {
          goto LABEL_47;
        }
      }

      unint64_t v36 = 1;
    }

    v538 = (v29 | v36) ^ 1 | v30;
  }

  else
  {
    v538 = 0;
  }

  uint64_t v37 = *a3;
  uint64_t v38 = a3[1];
  if (*a3 != v38)
  {
    while (*(_DWORD *)(*(void *)v37 + 4LL) || **(_DWORD **)v37 != 1986291046)
    {
      v37 += 216LL;
      if (v37 == v38) {
        goto LABEL_54;
      }
    }
  }

  if (v38 == v37)
  {
LABEL_54:
    uint64_t v39 = (os_log_t *)sub_138E8(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2970;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v41, "Precondition failure.");
  }

  v535 = (_OWORD *)(v37 + 8);
  if (v538)
  {
    unint64_t v42 = sub_138E8(8);
    uint64_t v43 = sub_138E8(34);
    uint64_t v44 = 0;
    uint64_t v45 = 0LL;
    *(void *)buf = 0x100000002LL;
    char v46 = *(void *)(v42 + 8);
    while (1)
    {
      char v47 = (int)buf[v45];
      std::string v48 = v44;
      if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
        break;
      }
      uint64_t v44 = 1;
      uint64_t v45 = 1LL;
      if ((v48 & 1) != 0) {
        goto LABEL_70;
      }
    }

    if ((v46 & v47) == 0) {
      unint64_t v42 = v43;
    }
LABEL_70:
    int v56 = *(os_log_s **)v42;
    if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2975;
      _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v57 = sub_138E8(8);
    int v58 = sub_138E8(34);
    __int16 v59 = 0;
    int v60 = 0LL;
    *(void *)buf = 0x100000002LL;
    __int16 v61 = *(void *)(v57 + 8);
    while (1)
    {
      uint64_t v62 = (int)buf[v60];
      __int16 v63 = v59;
      if (((v61 & v62) != 0) != ((*(void *)(v58 + 8) & v62) != 0)) {
        break;
      }
      __int16 v59 = 1;
      int v60 = 1LL;
      if ((v63 & 1) != 0) {
        goto LABEL_88;
      }
    }

    if ((v61 & v62) == 0) {
      uint64_t v57 = v58;
    }
LABEL_88:
    std::string::size_type v72 = sub_138E8(27);
    __int128 v73 = 0;
    __int16 v74 = 0LL;
    *(void *)buf = 0x100000002LL;
    unsigned int v75 = *(void *)(v57 + 8);
    while (1)
    {
      std::string v76 = (int)buf[v74];
      BOOL v77 = v73;
      if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
        break;
      }
      __int128 v73 = 1;
      __int16 v74 = 1LL;
      if ((v77 & 1) != 0) {
        goto LABEL_117;
      }
    }

    if ((v75 & v76) == 0) {
      uint64_t v57 = v72;
    }
LABEL_117:
    char v97 = *(os_log_s **)v57;
    if (v97 && os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2976;
      _os_log_impl( &dword_0,  v97,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [AirPlay route change] Calling routing handler to process route using MultiRouteProcessingInfo:",  (uint8_t *)buf,  0x12u);
    }

    int64x2_t v98 = *a3;
    char v99 = a3[1];
    if (*a3 != v99)
    {
      do
      {
        v100 = sub_138E8(8);
        char v101 = sub_138E8(34);
        CFStringRef v102 = 0;
        char v103 = 0LL;
        *(void *)buf = 0x100000002LL;
        CFStringRef v104 = *(void *)(v100 + 8);
        while (1)
        {
          __int16 v105 = (int)buf[v103];
          int v106 = v102;
          if (((v104 & v105) != 0) != ((*(void *)(v101 + 8) & v105) != 0)) {
            break;
          }
          CFStringRef v102 = 1;
          char v103 = 1LL;
          if ((v106 & 1) != 0) {
            goto LABEL_127;
          }
        }

        if ((v104 & v105) == 0) {
          v100 = v101;
        }
LABEL_127:
        __int16 v107 = sub_138E8(27);
        uint64_t v108 = 0;
        v109 = 0LL;
        *(void *)buf = 0x100000002LL;
        __int16 v110 = *(void *)(v100 + 8);
        while (1)
        {
          CFIndex v111 = (int)buf[v109];
          uint64_t v112 = v108;
          if (((v110 & v111) != 0) != ((*(void *)(v107 + 8) & v111) != 0)) {
            break;
          }
          uint64_t v108 = 1;
          v109 = 1LL;
          if ((v112 & 1) != 0) {
            goto LABEL_133;
          }
        }

        if ((v110 & v111) == 0) {
          v100 = v107;
        }
LABEL_133:
        __int16 v113 = *(os_log_s **)v100;
        if (v113 && os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
        {
          sub_1AD4D8(&v582, v98);
          int v114 = &v582;
          if ((v582.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            int v114 = (std::string *)v582.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2979;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v114;
          _os_log_impl( &dword_0,  v113,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [AirPlay route change] - %s.",  (uint8_t *)buf,  0x1Cu);
        }

        v98 += 216LL;
      }

      while (v98 != v99);
    }

    unsigned int v115 = sub_138E8(8);
    __int16 v116 = sub_138E8(34);
    unsigned int v117 = 0;
    v118 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v119 = *(void *)(v115 + 8);
    while (1)
    {
      unint64_t v120 = (int)buf[v118];
      unint64_t v121 = v117;
      if (((v119 & v120) != 0) != ((*(void *)(v116 + 8) & v120) != 0)) {
        break;
      }
      unsigned int v117 = 1;
      v118 = 1LL;
      if ((v121 & 1) != 0) {
        goto LABEL_165;
      }
    }

    if ((v119 & v120) == 0) {
      unsigned int v115 = v116;
    }
LABEL_165:
    CFTypeRef v132 = sub_138E8(27);
    uint64_t v133 = 0;
    v134 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v135 = *(void *)(v115 + 8);
    while (1)
    {
      v136 = (int)buf[v134];
      v137 = v133;
      if (((v135 & v136) != 0) != ((*(void *)(v132 + 8) & v136) != 0)) {
        break;
      }
      uint64_t v133 = 1;
      v134 = 1LL;
      if ((v137 & 1) != 0) {
        goto LABEL_171;
      }
    }

    if ((v135 & v136) == 0) {
      unsigned int v115 = v132;
    }
LABEL_171:
    BOOL v138 = *(os_log_s **)v115;
    if (v138 && os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
    {
      sub_EB280(&v582, a4);
      v139 = (v582.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v582 : (std::string *)v582.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2981;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v139;
      _os_log_impl( &dword_0,  v138,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [AirPlay route change] Routes to be destroyed %s.",  (uint8_t *)buf,  0x1Cu);
    }

    v140 = sub_138E8(8);
    v141 = sub_138E8(34);
    v142 = 0;
    v143 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v144 = *(void *)(v140 + 8);
    while (1)
    {
      v145 = (int)buf[v143];
      unint64_t v146 = v142;
      if (((v144 & v145) != 0) != ((*(void *)(v141 + 8) & v145) != 0)) {
        break;
      }
      v142 = 1;
      v143 = 1LL;
      if ((v146 & 1) != 0) {
        goto LABEL_184;
      }
    }

    if ((v144 & v145) == 0) {
      v140 = v141;
    }
LABEL_184:
    uint64_t v147 = sub_138E8(27);
    v148 = 0;
    v149 = 0LL;
    *(void *)buf = 0x100000002LL;
    v150 = *(void *)(v140 + 8);
    while (1)
    {
      unint64_t v151 = (int)buf[v149];
      v152 = v148;
      if (((v150 & v151) != 0) != ((*(void *)(v147 + 8) & v151) != 0)) {
        break;
      }
      v148 = 1;
      v149 = 1LL;
      if ((v152 & 1) != 0) {
        goto LABEL_190;
      }
    }

    if ((v150 & v151) == 0) {
      v140 = v147;
    }
LABEL_190:
    v153 = *(os_log_s **)v140;
    if (v153 && os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
    {
      if (sub_1116D0(a2 + 32, (uint64_t)v535))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2982;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = "identical";
        _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [AirPlay route change] The previous default device category/mode was: %s.",  (uint8_t *)buf,  0x1Cu);
      }

      else
      {
        sub_2DB6FC(&v582, (unsigned int *)(a2 + 32));
        if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v167 = &v582;
        }
        else {
          v167 = (std::string *)v582.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2982;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v167;
        _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [AirPlay route change] The previous default device category/mode was: %s.",  (uint8_t *)buf,  0x1Cu);
      }
    }

    v168 = sub_138E8(8);
    v169 = sub_138E8(34);
    uint64_t v170 = 0;
    v171 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v172 = *(void *)(v168 + 8);
    while (1)
    {
      v173 = (int)buf[v171];
      v174 = v170;
      if (((v172 & v173) != 0) != ((*(void *)(v169 + 8) & v173) != 0)) {
        break;
      }
      uint64_t v170 = 1;
      v171 = 1LL;
      if ((v174 & 1) != 0) {
        goto LABEL_222;
      }
    }

    if ((v172 & v173) == 0) {
      v168 = v169;
    }
LABEL_222:
    uint64_t v175 = sub_138E8(27);
    v176 = 0;
    v177 = 0LL;
    *(void *)buf = 0x100000002LL;
    v178 = *(void *)(v168 + 8);
    while (1)
    {
      CFTypeRef v179 = (int)buf[v177];
      uint64_t v180 = v176;
      if (((v178 & v179) != 0) != ((*(void *)(v175 + 8) & v179) != 0)) {
        break;
      }
      v176 = 1;
      v177 = 1LL;
      if ((v180 & 1) != 0) {
        goto LABEL_228;
      }
    }

    if ((v178 & v179) == 0) {
      v168 = v175;
    }
LABEL_228:
    v181 = *(os_log_s **)v168;
    if (v181 && os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(&v582, a14);
      if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v182 = &v582;
      }
      else {
        char v182 = (std::string *)v582.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2983;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v182;
      CFTypeRef v164 = "%25s:%-5d [AirPlay route change] The route change will use reason %s.";
      uint64_t v165 = v181;
      v166 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_234;
    }
  }

  else
  {
    __int16 v49 = sub_138E8(8);
    int v50 = sub_138E8(34);
    __int16 v51 = 0;
    double v52 = 0LL;
    *(void *)buf = 0x100000002LL;
    __int16 v53 = *(void *)(v49 + 8);
    while (1)
    {
      double v54 = (int)buf[v52];
      __int16 v55 = v51;
      if (((v53 & v54) != 0) != ((*(void *)(v50 + 8) & v54) != 0)) {
        break;
      }
      __int16 v51 = 1;
      double v52 = 1LL;
      if ((v55 & 1) != 0) {
        goto LABEL_79;
      }
    }

    if ((v53 & v54) == 0) {
      __int16 v49 = v50;
    }
LABEL_79:
    int v64 = *(os_log_s **)v49;
    if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2987;
      _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_INFO,  "%25s:%-5d >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",  (uint8_t *)buf,  0x12u);
    }

    __int16 v65 = sub_138E8(8);
    int v66 = sub_138E8(34);
    int v67 = 0;
    int v68 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v69 = *(void *)(v65 + 8);
    while (1)
    {
      uint64_t v70 = (int)buf[v68];
      int v71 = v67;
      if (((v69 & v70) != 0) != ((*(void *)(v66 + 8) & v70) != 0)) {
        break;
      }
      int v67 = 1;
      int v68 = 1LL;
      if ((v71 & 1) != 0) {
        goto LABEL_94;
      }
    }

    if ((v69 & v70) == 0) {
      __int16 v65 = v66;
    }
LABEL_94:
    int v78 = *(os_log_s **)v65;
    if (v78 && os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2988;
      _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_INFO,  "%25s:%-5d Calling routing handler to process route using MultiRouteProcessingInfo:",  (uint8_t *)buf,  0x12u);
    }

    v79 = *a3;
    uint64_t v80 = a3[1];
    if (*a3 != v80)
    {
      do
      {
        uint64_t v81 = sub_138E8(8);
        unsigned int v82 = sub_138E8(34);
        CFTypeRef v83 = 0;
        unint64_t v84 = 0LL;
        *(void *)buf = 0x100000002LL;
        __int128 v85 = *(void *)(v81 + 8);
        while (1)
        {
          uint64_t v86 = (int)buf[v84];
          uint64_t v87 = v83;
          if (((v85 & v86) != 0) != ((*(void *)(v82 + 8) & v86) != 0)) {
            break;
          }
          CFTypeRef v83 = 1;
          unint64_t v84 = 1LL;
          if ((v87 & 1) != 0) {
            goto LABEL_104;
          }
        }

        if ((v85 & v86) == 0) {
          uint64_t v81 = v82;
        }
LABEL_104:
        __n128 v88 = *(os_log_s **)v81;
        if (v88 && os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
        {
          sub_1AD4D8(&v582, v79);
          __n128 v89 = &v582;
          if ((v582.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __n128 v89 = (std::string *)v582.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2991;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v89;
          _os_log_impl(&dword_0, v88, OS_LOG_TYPE_INFO, "%25s:%-5d - %s.", (uint8_t *)buf, 0x1Cu);
        }

        v79 += 216LL;
      }

      while (v79 != v80);
    }

    v90 = sub_138E8(8);
    v91 = sub_138E8(34);
    uint64_t v92 = 0;
    uint64_t v93 = 0LL;
    *(void *)buf = 0x100000002LL;
    v94 = *(void *)(v90 + 8);
    while (1)
    {
      unsigned int v95 = (int)buf[v93];
      CFTypeRef v96 = v92;
      if (((v94 & v95) != 0) != ((*(void *)(v91 + 8) & v95) != 0)) {
        break;
      }
      uint64_t v92 = 1;
      uint64_t v93 = 1LL;
      if ((v96 & 1) != 0) {
        goto LABEL_146;
      }
    }

    if ((v94 & v95) == 0) {
      v90 = v91;
    }
LABEL_146:
    uint64_t v122 = *(os_log_s **)v90;
    if (v122 && os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
    {
      sub_EB280(&v582, a4);
      v123 = (v582.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v582 : (std::string *)v582.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2993;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v123;
      _os_log_impl(&dword_0, v122, OS_LOG_TYPE_INFO, "%25s:%-5d Routes to be destroyed %s.", (uint8_t *)buf, 0x1Cu);
    }

    int v124 = sub_138E8(8);
    int64x2_t v125 = sub_138E8(34);
    uint64_t v126 = 0;
    v127 = 0LL;
    *(void *)buf = 0x100000002LL;
    v128 = *(void *)(v124 + 8);
    while (1)
    {
      v129 = (int)buf[v127];
      v130 = v126;
      if (((v128 & v129) != 0) != ((*(void *)(v125 + 8) & v129) != 0)) {
        break;
      }
      uint64_t v126 = 1;
      v127 = 1LL;
      if ((v130 & 1) != 0) {
        goto LABEL_159;
      }
    }

    if ((v128 & v129) == 0) {
      int v124 = v125;
    }
LABEL_159:
    int64x2_t v131 = *(os_log_s **)v124;
    if (v131 && os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
    {
      if (sub_1116D0(a2 + 32, (uint64_t)v535))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2994;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = "identical";
        _os_log_impl( &dword_0,  v131,  OS_LOG_TYPE_INFO,  "%25s:%-5d The previous default device category/mode was: %s.",  (uint8_t *)buf,  0x1Cu);
      }

      else
      {
        sub_2DB6FC(&v582, (unsigned int *)(a2 + 32));
        if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v154 = &v582;
        }
        else {
          uint64_t v154 = (std::string *)v582.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2994;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v154;
        _os_log_impl( &dword_0,  v131,  OS_LOG_TYPE_INFO,  "%25s:%-5d The previous default device category/mode was: %s.",  (uint8_t *)buf,  0x1Cu);
      }
    }

    unsigned int v155 = sub_138E8(8);
    v156 = sub_138E8(34);
    v157 = 0;
    CFIndex v158 = 0LL;
    *(void *)buf = 0x100000002LL;
    int64x2_t v159 = *(void *)(v155 + 8);
    while (1)
    {
      uint64_t v160 = (int)buf[v158];
      int v161 = v157;
      if (((v159 & v160) != 0) != ((*(void *)(v156 + 8) & v160) != 0)) {
        break;
      }
      v157 = 1;
      CFIndex v158 = 1LL;
      if ((v161 & 1) != 0) {
        goto LABEL_205;
      }
    }

    if ((v159 & v160) == 0) {
      unsigned int v155 = v156;
    }
LABEL_205:
    uint64_t v162 = *(os_log_s **)v155;
    if (v162 && os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(&v582, a14);
      if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v163 = &v582;
      }
      else {
        v163 = (std::string *)v582.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2995;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v163;
      CFTypeRef v164 = "%25s:%-5d The route change will use reason %s.";
      uint64_t v165 = v162;
      v166 = OS_LOG_TYPE_INFO;
LABEL_234:
      _os_log_impl(&dword_0, v165, v166, v164, (uint8_t *)buf, 0x1Cu);
    }
  }

  sub_116458((uint64_t)v547, &v549);
  v548 = a2;
  v562 = 0LL;
  char v183 = operator new(0x28uLL);
  *char v183 = off_470C18;
  sub_116458((uint64_t)(v183 + 1), v547);
  v183[4] = v548;
  v562 = v183;
  sub_35678(v563, 1, (uint64_t)v561);
  v184 = v562;
  if (v562 == v561)
  {
    v185 = 4LL;
    v184 = v561;
    goto LABEL_240;
  }

  if (v562)
  {
    v185 = 5LL;
LABEL_240:
    (*(void (**)(void))(*v184 + 8 * v185))();
  }

  sub_32C8C((void *)v547[1]);
  *(void *)buf = a2;
  sub_116458((uint64_t)&buf[2], &v549);
  v544 = std::uncaught_exceptions();
  v545 = *(void *)buf;
  sub_116458((uint64_t)&v546, &buf[2]);
  sub_32C8C(*(void **)&buf[4]);
  v186 = *a3;
  v187 = a3[1];
  if (*a3 == v187)
  {
    v513 = (os_log_t *)sub_138E8(13);
    v514 = *v513;
    if (*v513 && os_log_type_enabled(*v513, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 34;
      _os_log_impl( &dword_0,  v514,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    v515 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v515, "Precondition failure.");
  }

  if ((0x84BDA12F684BDA13LL * ((v187 - v186) >> 3)) >> 60) {
    sub_7A87C();
  }
  v188 = *(void *)(a2 + 8);
  v189 = (char *)operator new(0x4BDA12F684BDA130LL * ((v187 - v186) >> 3));
  v190 = &v189[0x4BDA12F684BDA130LL * ((v187 - v186) >> 3)];
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  v191 = v189;
  do
  {
    for (uint64_t i = *(void *)(v188 + 8); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v188)
      {
        v541 = 1;
        v543 = 0LL;
        v542 = 0uLL;
        memset(buf, 0, 24);
        v582.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        sub_110D60((void ***)&v582);
        goto LABEL_330;
      }

      if (!*(_BYTE *)(v186 + 212))
      {
        v507 = (os_log_t *)sub_138E8(13);
        v508 = *v507;
        if (*v507 && os_log_type_enabled(*v507, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 57;
          _os_log_impl( &dword_0,  v508,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

        v509 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v509, "Precondition failure.");
      }
    }

    if (v189 >= v190)
    {
      v193 = (v189 - v191) >> 4;
      v194 = v193 + 1;
      if ((v190 - v191) >> 3 > v194) {
        v194 = (v190 - v191) >> 3;
      }
      else {
        v195 = v194;
      }
      if (v195 >> 60) {
        sub_7A8C4();
      }
      v196 = (char *)operator new(16 * v195);
      v197 = &v196[16 * v193];
      *(void *)v197 = *(void *)(i + 16);
      *((void *)v197 + 1) = v186;
      if (v189 == v191)
      {
        v199 = &v196[16 * v193];
      }

      else
      {
        v198 = &v196[16 * v193];
        do
        {
          v199 = v198 - 16;
          *((_OWORD *)v198 - 1) = *((_OWORD *)v189 - 1);
          v189 -= 16;
          v198 -= 16;
        }

        while (v189 != v191);
      }

      v190 = &v196[16 * v195];
      v189 = v197 + 16;
      if (v191) {
        operator delete(v191);
      }
      v191 = v199;
    }

    else
    {
      *(void *)v189 = *(void *)(i + 16);
      *((void *)v189 + 1) = v186;
      v189 += 16;
    }

    v186 += 216LL;
  }

  while (v186 != v187);
  v559[0] = 0LL;
  v559[1] = 0LL;
  v558 = (uint64_t *)v559;
  v200 = *(uint64_t **)(v188 + 24);
  v533 = (uint64_t **)(v188 + 32);
  v526 = (uint64_t **)(v188 + 24);
  if (v200 != (uint64_t *)(v188 + 32))
  {
    do
    {
      v201 = v200[4];
      *(void *)v567 = v201;
      for (uint64_t j = __p.__r_.__value_.__l.__size_; j; uint64_t j = *(void *)j)
      {
        v203 = *(_DWORD *)(j + 28);
        v204 = *(_DWORD *)(j + 32);
        v205 = v204 > HIDWORD(v201);
        if (v203 != (_DWORD)v201) {
          v205 = v203 > v201;
        }
        if (!v205)
        {
          v206 = v204 < HIDWORD(v201);
          uint64_t v33 = v203 == (_DWORD)v201;
          v207 = v203 < v201;
          if (v33) {
            v207 = v206;
          }
          if (!v207) {
            goto LABEL_287;
          }
          j += 8LL;
        }
      }

      v208 = sub_138E8(19);
      if ((*(_BYTE *)(v208 + 8) & 1) != 0)
      {
        v209 = *(os_log_s **)v208;
        if (*(void *)v208)
        {
          if (os_log_type_enabled(*(os_log_t *)v208, OS_LOG_TYPE_DEBUG))
          {
            sub_33464(&v582, (unsigned int *)v567);
            v210 = &v582;
            if ((v582.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              v210 = (std::string *)v582.__r_.__value_.__r.__words[0];
            }
            buf[0] = 136315650;
            *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 92;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v210;
            _os_log_impl( &dword_0,  v209,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Undoing routing and removing routing actions for %s",  (uint8_t *)buf,  0x1Cu);
          }
        }
      }

      sub_2323EC(v200 + 5);
      sub_1163D8(&v558, *(unsigned int *)v567, *(unsigned int *)&v567[4], (uint64_t *)v567);
LABEL_287:
      v211 = (uint64_t *)v200[1];
      if (v211)
      {
        do
        {
          v212 = (uint64_t **)v211;
          v211 = (uint64_t *)*v211;
        }

        while (v211);
      }

      else
      {
        do
        {
          v212 = (uint64_t **)v200[2];
          uint64_t v33 = *v212 == v200;
          v200 = (uint64_t *)v212;
        }

        while (!v33);
      }

      v200 = (uint64_t *)v212;
    }

    while (v212 != v533);
    v213 = v558;
    if (v558 != (uint64_t *)v559)
    {
      do
      {
        v214 = *v533;
        if (*v533)
        {
          v215 = *((_DWORD *)v213 + 7);
          v216 = *((_DWORD *)v213 + 8);
          v217 = (uint64_t *)(v188 + 32);
          v218 = *v533;
          do
          {
            v219 = *((_DWORD *)v218 + 8);
            uint64_t v33 = v219 == v215;
            v220 = v219 < v215;
            if (v33) {
              v220 = *((_DWORD *)v218 + 9) < v216;
            }
            v221 = !v220;
            if (v220) {
              v222 = (uint64_t **)(v218 + 1);
            }
            else {
              v222 = (uint64_t **)v218;
            }
            if (v221) {
              v217 = v218;
            }
            v218 = *v222;
          }

          while (*v222);
          if (v217 != (uint64_t *)v533)
          {
            v223 = *((_DWORD *)v217 + 8);
            v224 = *((_DWORD *)v217 + 9) > v216;
            uint64_t v33 = v223 == v215;
            v225 = v223 > v215;
            if (v33) {
              v225 = v224;
            }
            if (!v225)
            {
              v226 = (uint64_t *)v217[1];
              v227 = v217;
              if (v226)
              {
                do
                {
                  v228 = v226;
                  v226 = (uint64_t *)*v226;
                }

                while (v226);
              }

              else
              {
                do
                {
                  v228 = (uint64_t *)v227[2];
                  uint64_t v33 = *v228 == (void)v227;
                  v227 = v228;
                }

                while (!v33);
              }

              if (*v526 == v217) {
                *v526 = v228;
              }
              --*(void *)(v188 + 40);
              sub_911E8(v214, v217);
              sub_D62E0(v217 + 5);
              operator delete(v217);
            }
          }
        }

        v229 = (uint64_t *)v213[1];
        if (v229)
        {
          do
          {
            v230 = v229;
            v229 = (uint64_t *)*v229;
          }

          while (v229);
        }

        else
        {
          do
          {
            v230 = (uint64_t *)v213[2];
            uint64_t v33 = *v230 == (void)v213;
            v213 = v230;
          }

          while (!v33);
        }

        v213 = v230;
      }

      while (v230 != (uint64_t *)v559);
    }
  }

  v556 = 0uLL;
  v557 = 0LL;
  v231 = v189 - v191;
  if (v189 != v191)
  {
    *(void *)&buf[8] = &v557;
    v232 = (char *)sub_119B98(v231 >> 4);
    *(void *)buf = v232;
    *(void *)&buf[2] = v232;
    v234 = &v232[120 * v233];
    *(void *)&uint8_t buf[4] = v232;
    *(void *)&buf[6] = v234;
    v235 = (__int128 *)v556.i64[1];
    v236 = (__int128 *)v556.i64[0];
    if (v556.i64[1] == v556.i64[0])
    {
      v238 = vdupq_n_s64(v556.u64[1]);
      v237 = (uint64_t)v232;
    }

    else
    {
      v237 = (uint64_t)v232;
      do
      {
        v237 -= 120LL;
        v235 = (__int128 *)((char *)v235 - 120);
        sub_119C24(v237, v235);
      }

      while (v235 != v236);
      v238 = v556;
      v232 = *(char **)&buf[4];
      v234 = *(char **)&buf[6];
    }

    v556.i64[0] = v237;
    v556.i64[1] = (uint64_t)v232;
    *(int64x2_t *)&buf[2] = v238;
    v431 = v557;
    v557 = v234;
    *(void *)&buf[6] = v431;
    *(void *)buf = v238.i64[0];
    sub_119D1C((uint64_t)buf);
  }

  v554 = 0LL;
  v555 = 0LL;
  v553 = &v554;
  v578 = &off_477CA8;
  v579 = (uint64_t (***)())&v553;
  v580 = &v556;
  v581 = (uint64_t *)&v578;
  sub_35678(&v582, 1, (uint64_t)&v578);
  v432 = (uint64_t (***)())v581;
  if (v581 == (uint64_t *)&v578)
  {
    v433 = 4LL;
    v432 = &v578;
  }

  else
  {
    if (!v581) {
      goto LABEL_670;
    }
    v433 = 5LL;
  }

  (*v432)[v433]();
LABEL_670:
  if (v189 == v191)
  {
LABEL_729:
    v465 = v553;
    if (v553 != &v554)
    {
      v466 = *(uint64_t **)(v188 + 24);
      while (v533 != (uint64_t **)v466)
      {
        v467 = *((_DWORD *)v465 + 8);
        v468 = *((_DWORD *)v465 + 9);
        v469 = *((_DWORD *)v466 + 8);
        v470 = *((_DWORD *)v466 + 9);
        v471 = v468 < v470;
        if (v467 != v469) {
          v471 = v467 < v469;
        }
        if (v471) {
          break;
        }
        v478 = v470 < v468;
        if (v467 == v469) {
          v479 = v478;
        }
        else {
          v479 = v469 < v467;
        }
        if (v479)
        {
          v480 = (uint64_t *)v466[1];
          v481 = v480;
          v482 = v466;
          if (v480)
          {
            do
            {
              v483 = (uint64_t **)v481;
              v481 = (uint64_t *)*v481;
            }

            while (v481);
          }

          else
          {
            do
            {
              v483 = (uint64_t **)v482[2];
              uint64_t v33 = *v483 == v482;
              v482 = (uint64_t *)v483;
            }

            while (!v33);
          }

          if (v483 == v533) {
            goto LABEL_758;
          }
          v484 = *((_DWORD *)v483 + 8);
          uint64_t v33 = v467 == v484;
          v485 = v467 < v484;
          if (v33) {
            v485 = v468 < *((_DWORD *)v483 + 9);
          }
          if (v485)
          {
LABEL_758:
            if (v480)
            {
              *(void *)v567 = v483;
              v466 = (uint64_t *)v483;
            }

            else
            {
              *(void *)v567 = v466++;
            }

    sub_1AB114((uint64_t)&buf, a2);
    sub_1BB60((std::mutex *)a1);
    uint64_t v7 = AudioObjectHasProperty(a1[67], &buf) == 0;
    return !v7;
  }

  if (v4 != 1650551140 && v4 != 1767989616) {
    goto LABEL_10;
  }
  return result;
}

    if (v4 == v6) {
      return 0LL;
    }
    goto LABEL_34;
  }

  if (v4 > 1684633186)
  {
    if (v4 > 1836414052)
    {
      if (v4 == 1836414053 || v4 == 1918987632) {
        return result;
      }
      int v6 = 1919774835;
      goto LABEL_31;
    }

    if (v4 != 1684633187)
    {
      if (v4 == 1685484390)
      {
        return 0LL;
      }

      goto LABEL_34;
    }

    return 0LL;
  }

  if (v4 > 1668705647)
  {
    if (v4 == 1668705648) {
      return 0LL;
    }
    int v6 = 1684157046;
    goto LABEL_31;
  }

  if (v4 == 1064725619) {
    return 0LL;
  }
  uint64_t v7 = 1668443504;
LABEL_16:
  if (v4 == v7) {
    return result;
  }
LABEL_34:
  int v8 = (os_log_t *)sub_138E8(13);
  unint64_t v9 = *v8;
  if (!*v8) {
    return 0LL;
  }
  uint64_t result = os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    uint64_t v13 = 136315394;
    char v14 = "OutputVolumeControl_HAL_Common.cpp";
    uint64_t v15 = 1024;
    char v16 = 348;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty() returned true, but I do not know about it.",  (uint8_t *)&v13,  0x12u);
    return 0LL;
  }

  return result;
}

    uint64_t v7 = 1121058816;
    goto LABEL_22;
  }

  if (v4 == 1647521842) {
    goto LABEL_31;
  }
  if (v4 == 1647522096) {
    goto LABEL_21;
  }
  if (v4 != 1647718502) {
    goto LABEL_31;
  }
  int v6 = 1120980173;
LABEL_23:
  uint64_t v15 = *(float *)&v6;
  int v8 = (os_log_t *)sub_138E8(24);
  unint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    AudioObjectID v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
    sub_2CA1C(__p, v3);
    if (v14 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316162;
    uint64_t v17 = "PortUtilities.cpp";
    uint64_t v18 = 1024;
    __int16 v19 = 749;
    char v20 = 1024;
    __int16 v21 = v10;
    int64_t v22 = 2080;
    __int16 v23 = v11;
    int v24 = 2048;
    __int16 v25 = v15;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Using default sensitivity value for device [%u - %s]: %.2f",  buf,  0x2Cu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  return v15;
}

  __int16 v23 = (os_log_t *)sub_138E8(13);
  int v24 = *v23;
  if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
  {
    uint64_t v38 = *(void *)a2;
    uint64_t v39 = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)&v38);
    if (v41 >= 0) {
      __int16 v25 = __p;
    }
    else {
      __int16 v25 = *(_BYTE **)__p;
    }
    *(_DWORD *)buf = 136315650;
    uint64_t v43 = "InputVolumeControl_HAL_Common.cpp";
    uint64_t v44 = 1024;
    uint64_t v45 = 388;
    char v46 = 2080;
    char v47 = v25;
    _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: GetPropertyDataSize() is correct and HasProperty() returned true, but I do not know about property %s.",  buf,  0x1Cu);
    if (v41 < 0) {
      operator delete(*(void **)__p);
    }
  }

        uint64_t v18 = sub_138E8(13);
        if ((*(_BYTE *)(v18 + 8) & 1) != 0)
        {
          __int16 v19 = *(os_log_s **)v18;
          if (*(void *)v18)
          {
            if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
            {
              std::string __p = *(void **)&inAddress.mSelector;
              LODWORD(v94) = inAddress.mElement;
              sub_613AC((uint64_t)&v120, (unsigned int *)&__p);
              char v20 = v120.__cv_.__opaque[15] >= 0 ? &v120 : (std::condition_variable *)v120.__cv_.__sig;
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 199;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&uint8_t buf[20] = v20;
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&buf[30] = v12;
              _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  buf,  0x22u);
              if (v120.__cv_.__opaque[15] < 0) {
                operator delete((void *)v120.__cv_.__sig);
              }
            }
          }
        }

        *(AudioObjectPropertyAddress *)buf = inAddress;
        __int16 v21 = v69;
        int64_t v22 = v70;
        __int16 v23 = sub_90738(v12, (const AudioObjectPropertyAddress *)buf, v69, v70);
        if (!(_DWORD)v23)
        {
          LOBYTE(v26) = 1;
          goto LABEL_66;
        }

        int v24 = v23;
        __int16 v25 = (os_log_t *)sub_138E8(13);
        float v26 = *v25;
        if (!*v25) {
          goto LABEL_66;
        }
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&v120, v24);
          __int16 v27 = v120.__cv_.__opaque[15];
          sig = v120.__cv_.__sig;
          *(AudioObjectPropertyAddress *)char v103 = inAddress;
          sub_613AC((uint64_t)&__p, (unsigned int *)v103);
          uint64_t v29 = &v120;
          if (v27 < 0) {
            uint64_t v29 = (std::condition_variable *)sig;
          }
          if (v95 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          *(_DWORD *)buf = 136316418;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 207;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&uint8_t buf[20] = v24;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v29;
          *(_WORD *)&buf[34] = 2080;
          *(void *)&buf[36] = p_p;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v12;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  buf,  0x32u);
          if (SHIBYTE(v95) < 0) {
            operator delete(__p);
          }
          if (v120.__cv_.__opaque[15] < 0) {
            operator delete((void *)v120.__cv_.__sig);
          }
        }

        goto LABEL_65;
      }
    }

    else
    {
      uint64_t v33 = 0;
      if (!v105) {
        goto LABEL_57;
      }
    }

    int v106 = v32;
    operator delete(v32);
    goto LABEL_57;
  }

  return 1LL;
}

      __int16 v61 = CFStringCreateWithBytes(0LL, (const UInt8 *)"trim_gain_data_source_id", 24LL, 0x8000100u, 0);
      if (!v61)
      {
        __int16 v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, "Could not construct");
      }

      *(_DWORD *)int valuePtr = v6;
      uint64_t v18 = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
      int v60 = v18;
      if (!v18)
      {
        int v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v50, "Could not construct");
      }

      sub_2C983C(__p, v61, (const void **)&v60);
      __int16 v19 = CFStringCreateWithBytes(0LL, (const UInt8 *)"trim_gain_db", 12LL, 0x8000100u, 0);
      __int16 v59 = v19;
      if (!v19)
      {
        __int16 v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
      }

      char v20 = v65;
      if (v65)
      {
        if (!cf)
        {
          double v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
        }

        __int16 v21 = (const __CFNumber *)sub_8D6E0((const __CFDictionary *)cf, "trim_gain_db");
        if (!v21) {
          goto LABEL_86;
        }
        int64_t v22 = v21;
        CFRetain(v21);
        __int16 v23 = CFGetTypeID(v22);
        if (v23 != CFNumberGetTypeID())
        {
          CFRelease(v22);
LABEL_86:
          LOBYTE(v56) = 0;
          uint64_t v57 = 0;
          sub_8DEEC();
        }

        uint64_t v57 = 1;
        int v58 = v22;
        int v56 = 0LL;
      }

      else
      {
        *(void *)int valuePtr = 0LL;
        int64_t v22 = CFNumberCreate(0LL, kCFNumberDoubleType, valuePtr);
        int v58 = v22;
        if (!v22)
        {
          __int16 v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
        }
      }

      sub_2C983C(v69, v19, (const void **)&v58);
      v62[0] = __p;
      v62[1] = 2LL;
      int v24 = sub_5A950((uint64_t)v62);
      __int16 v25 = v24;
      __int16 v63 = v24;
      float v26 = (void *)*((void *)&v66 + 1);
      if (*((void *)&v66 + 1) >= i)
      {
        __int16 v27 = (void *)v66;
        AudioObjectID v28 = (uint64_t)(*((void *)&v66 + 1) - v66) >> 3;
        uint64_t v29 = v28 + 1;
        char v30 = i - v66;
        else {
          char v31 = v29;
        }
        p_uint64_t i = &i;
        if (v31)
        {
          char v31 = (unint64_t)sub_7DC90(v31);
          float v26 = (void *)*((void *)&v66 + 1);
          __int16 v27 = (void *)v66;
        }

        else
        {
          uint64_t v32 = 0LL;
        }

        uint64_t v33 = (CFDictionaryRef *)(v31 + 8 * v28);
        uint64_t v34 = v31 + 8 * v32;
        *(void *)&valuePtr[24] = v34;
        *uint64_t v33 = v25;
        uint64_t v35 = v33 + 1;
        __int16 v63 = 0LL;
        *(void *)&valuePtr[16] = v33 + 1;
        if (v26 == v27)
        {
          uint64_t v37 = 0LL;
        }

        else
        {
          do
          {
            unint64_t v36 = (const __CFDictionary *)*--v26;
            *--uint64_t v33 = v36;
            char *v26 = 0LL;
          }

          while (v26 != v27);
          uint64_t v35 = *(void **)&valuePtr[16];
          uint64_t v34 = *(void *)&valuePtr[24];
          uint64_t v37 = v63;
        }

        uint64_t v38 = v66;
        *(void *)&int v66 = v33;
        *((void *)&v66 + 1) = v35;
        *(_OWORD *)&valuePtr[8] = v38;
        uint64_t v39 = i;
        uint64_t i = v34;
        *(void *)&valuePtr[24] = v39;
        *(void *)int valuePtr = v38;
        sub_AD86C((uint64_t)valuePtr);
        *((void *)&v66 + 1) = v35;
        if (v37) {
          CFRelease(v37);
        }
      }

      else
      {
        **((void **)&v66 + 1) = v24;
        __int16 v63 = 0LL;
        *((void *)&v66 + 1) = v26 + 1;
      }

      for (uint64_t j = 0LL; j != -4; j -= 2LL)
      {
        uint64_t v41 = (const void *)v69[j + 1];
        if (v41) {
          CFRelease(v41);
        }
        unint64_t v42 = __p[j + 2];
        if (v42) {
          CFRelease(v42);
        }
      }

      CFRelease(v22);
      if (v20) {
        sub_14AB14((uint64_t)&v56);
      }
      if (v59) {
        CFRelease(v59);
      }
      CFRelease(v18);
      if (v61) {
        CFRelease(v61);
      }
      sub_8D530((uint64_t)&cf);
    }

    uint64_t v43 = sub_2C97A8((uint64_t **)&v66);
    *a1 = v43;
    uint64_t v44 = (os_log_t *)sub_138E8(13);
    uint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_DEFAULT))
    {
      char v46 = CFCopyDescription(v43);
      sub_48188((uint64_t)__p, v46);
      if (v46) {
        CFRelease(v46);
      }
      char v47 = __p;
      if (v69[0] < 0) {
        char v47 = (void **)__p[0];
      }
      *(_DWORD *)int valuePtr = 136315650;
      *(void *)&valuePtr[4] = "FDRUtils.cpp";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 55;
      *(_WORD *)&valuePtr[18] = 2080;
      *(void *)&valuePtr[20] = v47;
      _os_log_impl(&dword_0, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR Sorted TrimGains ArrayRef: %s", valuePtr, 0x1Cu);
      if (SHIBYTE(v69[0]) < 0) {
        operator delete(__p[0]);
      }
    }

    *(void *)int valuePtr = &v66;
    sub_AD8B8((void ***)valuePtr);
  }

  else
  {
    *a1 = 0LL;
    *a4 = 0LL;
  }

void sub_B9C94(_Unwind_Exception *a1)
{
}

void sub_B9CDC(uint64_t *a1)
{
}

void sub_B9D08(_Unwind_Exception *a1)
{
}

void sub_B9D1C(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 24))
  {
    if (a2)
    {
      unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_48D060);
      if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_48D060))
      {
        qword_48D058 = sub_14F6C0();
        __cxa_guard_release(&qword_48D060);
      }

      if (BYTE4(qword_48D058))
      {
        if ((byte_48D068 & 1) == 0)
        {
          CFArrayRef v4 = (os_log_t *)sub_138E8(41);
          BOOL v5 = *v4;
          if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            int64_t v22 = "AVHIDEventListener.h";
            __int16 v23 = 1024;
            int v24 = 404;
            __int16 v25 = 1024;
            int v26 = qword_48D058;
            _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - logging interval overridden to %ums",  buf,  0x18u);
          }

          byte_48D068 = 1;
        }

        int v6 = qword_48D058;
      }

      else
      {
        int v6 = 50;
      }
    }

    else
    {
      int v6 = 0;
    }

    uint64_t v13 = (os_log_t *)sub_138E8(41);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int64_t v22 = "AVHIDEventListener.h";
      __int16 v23 = 1024;
      int v24 = 415;
      __int16 v25 = 1024;
      int v26 = v6;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - setting logging interval to %ums",  buf,  0x18u);
    }

    uint8_t report = 2;
    int v20 = v6;
    IOReturn v15 = IOHIDDeviceSetReport(*(IOHIDDeviceRef *)(a1 + 24), kIOHIDReportTypeFeature, 2LL, &report, 5LL);
    IOReturn v16 = v15;
    if (v15 != -536870206)
    {
      if (v15)
      {
        uint64_t v17 = (os_log_t *)sub_138E8(41);
        os_log_t v18 = *v17;
        if (*v17)
        {
          if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            int64_t v22 = "AVHIDEventListener.h";
            __int16 v23 = 1024;
            int v24 = 424;
            __int16 v25 = 1024;
            int v26 = v16;
            unint64_t v9 = "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - Error %u setting device report";
            AudioObjectID v10 = v18;
            os_log_type_t v11 = OS_LOG_TYPE_ERROR;
            uint32_t v12 = 24;
            goto LABEL_24;
          }
        }
      }
    }
  }

  else
  {
    uint64_t v7 = (os_log_t *)sub_138E8(41);
    os_log_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int64_t v22 = "AVHIDEventListener.h";
      __int16 v23 = 1024;
      int v24 = 385;
      unint64_t v9 = "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - no HID device, ignoring.";
      AudioObjectID v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
      uint32_t v12 = 18;
LABEL_24:
      _os_log_impl(&dword_0, v10, v11, v9, buf, v12);
    }
  }

void sub_B9FFC(_Unwind_Exception *a1)
{
}

void sub_BA01C()
{
  qword_48CFB0 = (uint64_t)dispatch_queue_create("AVHIDEventListenerQueue", 0LL);
  qword_48CFB8 = (uint64_t)IONotificationPortCreate(kIOMainPortDefault);
  dword_48CFC0 = 0;
  qword_48CFC8 = 0LL;
  qword_48CFF0 = 850045863LL;
  unk_48CFF8 = 0u;
  unk_48D008 = 0u;
  unk_48D018 = 0u;
  qword_48D040 = 0LL;
  qword_48D038 = 0LL;
  qword_48D028 = 0LL;
  qword_48D030 = (uint64_t)&qword_48D038;
  dword_48D048 = 0;
  dispatch_queue_set_specific( (dispatch_queue_t)qword_48CFB0,  "AVHIDEventListenerQueueKey",  "AVHIDEventListenerQueueKey",  0LL);
}

void sub_BA0B4(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  CFArrayRef v4 = *(dispatch_object_s **)(v2 + 4016);
  if (v4) {
    dispatch_release(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BA0D0(uint64_t a1, _DWORD *a2)
{
  v12[0] = a2[2];
  CFArrayRef v4 = *(void **)(a1 + 544);
  BOOL v5 = *(char **)(a1 + 552);
  if (v4 != (void *)v5)
  {
    while ((_DWORD *)*v4 != a2)
    {
      if (++v4 == (void *)v5)
      {
        CFArrayRef v4 = *(void **)(a1 + 552);
        break;
      }
    }
  }

  if (v4 != (void *)v5)
  {
    int64_t v6 = v5 - (char *)(v4 + 1);
    *(void *)(a1 + 552) = (char *)v4 + v6;
  }

  if (a2) {
    (*(void (**)(_DWORD *))(*(void *)a2 + 8LL))(a2);
  }
  uint64_t result = AudioObjectsPublishedAndDied(*(void *)(a1 + 568) + 80LL, *(unsigned int *)(a1 + 8), 0LL, 0LL, 1LL, v12);
  int v8 = result;
  if ((_DWORD)result)
  {
    unint64_t v9 = (os_log_t *)sub_138E8(13);
    AudioObjectID v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        char v14 = "VirtualAudio_Device.cpp";
        __int16 v15 = 1024;
        int v16 = 4562;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: couldn't tell the HAL about the controls",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v8;
  }

  return result;
}

void sub_BA260( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, __int128 a17)
{
  if (a2)
  {
    if (a2 == 3)
    {
      os_log_t v18 = (unsigned int *)__cxa_begin_catch(a1);
      __int16 v19 = (os_log_t *)sub_138E8(1);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&__p, v18[2]);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 4564;
        WORD1(a17) = 2080;
        *(void *)((char *)&a17 + 4) = p_p;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException thrown during control destruction: '%s'.",  (uint8_t *)&buf,  0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }

    else
    {
      int64_t v22 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        __int16 v23 = v22;
        int v24 = (os_log_t *)sub_138E8(1);
        __int16 v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 4565;
          WORD1(a17) = 2080;
          *(void *)((char *)&a17 + 4) = v26;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception thrown during control destruction: %s.",  (uint8_t *)&buf,  0x1Cu);
        }
      }

      else
      {
        __int16 v27 = (os_log_t *)sub_138E8(1);
        AudioObjectID v28 = *v27;
        if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 4566;
          _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception thrown during control destruction.",  (uint8_t *)&buf,  0x12u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0xBA194LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_BA498(int a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = 2003329396LL;
  if (!a4 || (*(_DWORD *)a4 == a1 ? (BOOL v6 = a2 == 0) : (BOOL v6 = 1), v6))
  {
LABEL_16:
    uint32_t v12 = (os_log_t *)sub_138E8(31);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 406;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Encountered one or more unexpected notification parameters",  buf,  0x12u);
    }

    return v4;
  }

  uint64_t v8 = a2;
  do
  {
    unint64_t v9 = (os_log_t *)sub_138E8(31);
    AudioObjectID v10 = *v9;
    if (*v9)
    {
      uint64_t v4 = 0LL;
      if (!os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      uint64_t v11 = a4 + 16;
      *(_DWORD *)buf = 136315650;
      int v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 399;
      __int16 v19 = 2080;
      uint64_t v20 = v11;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
    }

    uint64_t v4 = 0LL;
LABEL_14:
    a3 += 3;
    --v8;
  }

  while (v8);
  if ((_DWORD)v4) {
    goto LABEL_16;
  }
  return v4;
}

void sub_BA664(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 1008);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 168LL))(v3);
    uint64_t v5 = sub_138E8(1);
    uint64_t v6 = sub_138E8(16);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)__int16 v15 = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&v15[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0)
      {
        if ((v9 & 1) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
    if ((*(void *)(v5 + 8) & 1) != 0)
    {
LABEL_10:
      uint32_t v12 = *(os_log_s **)v5;
      if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = "false";
        uint64_t v14 = *(void *)(a1 + 1008);
        *(void *)&v15[4] = "VirtualAudio_Device.cpp";
        *(_DWORD *)__int16 v15 = 136315906;
        __int16 v16 = 1024;
        if (a2) {
          uint64_t v13 = "true";
        }
        int v17 = 611;
        __int16 v18 = 2080;
        __int16 v19 = v13;
        __int16 v20 = 2048;
        uint64_t v21 = v14;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SetAggregateIsTrustworthy: %s on device at %p",  v15,  0x26u);
      }
    }
  }

uint64_t sub_BA7E4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1008);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 280);
    BOOL v3 = v2 == 1986556788 || v2 == 1987211117;
    if (v3 || v2 == 1987208039)
    {
      uint64_t v5 = result;
      uint64_t v6 = (os_log_t *)sub_138E8(1);
      char v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(v5 + 1008) + 8LL));
        if (v10 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v12 = 1024;
        int v13 = 4788;
        __int16 v14 = 2080;
        __int16 v15 = v8;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Identifying speech detection VAD (%s) for the HAL.",  buf,  0x1Cu);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }

      LODWORD(__p[0]) = 1;
      strcpy(buf, "rddsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      return (*(uint64_t (**)(void, _BYTE *, void, void, uint64_t, void **))(**(void **)(v5 + 1008)
                                                                                          + 48LL))( *(void *)(v5 + 1008),  buf,  0LL,  0LL,  4LL,  __p);
    }
  }

  return result;
}

void sub_BA95C(uint64_t a1)
{
  uint64_t v1 = std::string::insert(&v62, 0LL, "[ type: ", 8uLL);
  __int128 v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  int64_t cap = v1->__r_.__value_.__l.__cap_;
  __int128 __p = v2;
  v1->__r_.__value_.__l.__size_ = 0LL;
  v1->__r_.__value_.__l.__cap_ = 0LL;
  v1->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v4 = HIBYTE(cap);
  }
  else {
    std::string::size_type v4 = *((void *)&__p + 1);
  }
  std::string::append(&v58, p_p, v4);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  std::to_string(&v62, *(_DWORD *)(a1 + 8));
  uint64_t v5 = std::string::insert(&v62, 0LL, "; id: ", 6uLL);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t cap = v5->__r_.__value_.__l.__cap_;
  __int128 __p = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    char v7 = (const std::string::value_type *)&__p;
  }
  else {
    char v7 = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v8 = HIBYTE(cap);
  }
  else {
    std::string::size_type v8 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v7, v8);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  snprintf((char *)&__str, 0x13uLL, "%p", (const void *)a1);
  sub_7D084(&v62, (char *)&__str);
  uint64_t v9 = std::string::insert(&v62, 0LL, "; addr: ", 8uLL);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t cap = v9->__r_.__value_.__l.__cap_;
  __int128 __p = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    char v11 = (const std::string::value_type *)&__p;
  }
  else {
    char v11 = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v12 = HIBYTE(cap);
  }
  else {
    std::string::size_type v12 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v11, v12);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  std::to_string(&v62, *(_DWORD *)(a1 + 580));
  int v13 = std::string::insert(&v62, 0LL, "; context id: ", 0xEuLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t cap = v13->__r_.__value_.__l.__cap_;
  __int128 __p = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int16 v15 = (const std::string::value_type *)&__p;
  }
  else {
    __int16 v15 = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v16 = HIBYTE(cap);
  }
  else {
    std::string::size_type v16 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v15, v16);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  sub_2CA1C(&v62, v17);
  __int16 v18 = std::string::insert(&v62, 0LL, "; hidden: ", 0xAuLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t cap = v18->__r_.__value_.__l.__cap_;
  __int128 __p = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int16 v20 = (const std::string::value_type *)&__p;
  }
  else {
    __int16 v20 = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v21 = HIBYTE(cap);
  }
  else {
    std::string::size_type v21 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v20, v21);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  sub_7D084(&v55, "{ ");
  char v22 = 0;
  uint64_t v23 = 0LL;
  __int16 v65 = 1;
  do
  {
    char v53 = v22;
    int v24 = *((unsigned __int8 *)&v65 + v23);
    uint64_t v25 = 528LL;
    if (*((_BYTE *)&v65 + v23))
    {
      uint64_t v25 = 504LL;
      uint64_t v26 = 496LL;
    }

    else
    {
      uint64_t v26 = 520LL;
    }

    if (*((_BYTE *)&v65 + v23)) {
      uint64_t v27 = a1 + 496;
    }
    else {
      uint64_t v27 = a1 + 520;
    }
    unint64_t v28 = *(void *)(a1 + v25) - *(void *)(a1 + v26);
    if ((v28 & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v29 = 0LL;
      if (*((_BYTE *)&v65 + v23)) {
        char v30 = "i/";
      }
      else {
        char v30 = "o/";
      }
      unint64_t v31 = (v28 >> 3);
      do
      {
        uint64_t v32 = *(void *)(a1 + v26);
        if (v29 >= (*(void *)(v27 + 8) - v32) >> 3) {
          uint64_t v33 = 0LL;
        }
        else {
          uint64_t v33 = *(unsigned int **)(v32 + 8 * v29);
        }
        std::to_string(&v61, v33[2]);
        uint64_t v34 = std::string::insert(&v61, 0LL, v30, 2uLL);
        __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0LL;
        v34->__r_.__value_.__l.__cap_ = 0LL;
        v34->__r_.__value_.__r.__words[0] = 0LL;
        unint64_t v36 = std::string::append(&__str, "/", 1uLL);
        __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0LL;
        v36->__r_.__value_.__l.__cap_ = 0LL;
        v36->__r_.__value_.__r.__words[0] = 0LL;
        snprintf(__s, 0x13uLL, "%p", v33);
        sub_7D084(v59, __s);
        if ((v60 & 0x80u) == 0) {
          uint64_t v38 = v59;
        }
        else {
          uint64_t v38 = (void **)v59[0];
        }
        if ((v60 & 0x80u) == 0) {
          std::string::size_type v39 = v60;
        }
        else {
          std::string::size_type v39 = (std::string::size_type)v59[1];
        }
        uint64_t v40 = std::string::append(&v62, (const std::string::value_type *)v38, v39);
        __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        int64_t cap = v40->__r_.__value_.__l.__cap_;
        __int128 __p = v41;
        v40->__r_.__value_.__l.__size_ = 0LL;
        v40->__r_.__value_.__l.__cap_ = 0LL;
        v40->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          unint64_t v42 = (const std::string::value_type *)&__p;
        }
        else {
          unint64_t v42 = (const std::string::value_type *)__p;
        }
        if (cap >= 0) {
          std::string::size_type v43 = HIBYTE(cap);
        }
        else {
          std::string::size_type v43 = *((void *)&__p + 1);
        }
        std::string::append(&v55, v42, v43);
        if (SHIBYTE(cap) < 0) {
          operator delete((void *)__p);
        }
        ++v29;
        if (v24 || v29 < v31) {
          std::string::append(&v55, ", ", 2uLL);
        }
      }

      while (v31 != v29);
    }

    char v22 = 1;
    uint64_t v23 = 1LL;
  }

  while ((v53 & 1) == 0);
  std::string::append(&v55, " }", 2uLL);
  uint64_t v44 = std::string::insert(&v55, 0LL, "; VA strms: ", 0xCuLL);
  __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  int64_t v57 = v44->__r_.__value_.__l.__cap_;
  *(_OWORD *)int v56 = v45;
  v44->__r_.__value_.__l.__size_ = 0LL;
  v44->__r_.__value_.__l.__cap_ = 0LL;
  v44->__r_.__value_.__r.__words[0] = 0LL;
  if (v57 >= 0) {
    char v46 = v56;
  }
  else {
    char v46 = (void **)v56[0];
  }
  if (v57 >= 0) {
    std::string::size_type v47 = HIBYTE(v57);
  }
  else {
    std::string::size_type v47 = (std::string::size_type)v56[1];
  }
  std::string::append(&v58, (const std::string::value_type *)v46, v47);
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  std::string v48 = *(os_unfair_lock_s **)(a1 + 1008);
  if (v48) {
    sub_23FE8((uint64_t)&v62, v48 + 2);
  }
  else {
    sub_7D084(&v62, "null");
  }
  __int16 v49 = std::string::insert(&v62, 0LL, "; agg dev: ", 0xBuLL);
  __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  int64_t cap = v49->__r_.__value_.__l.__cap_;
  __int128 __p = v50;
  v49->__r_.__value_.__l.__size_ = 0LL;
  v49->__r_.__value_.__l.__cap_ = 0LL;
  v49->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int16 v51 = (const std::string::value_type *)&__p;
  }
  else {
    __int16 v51 = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v52 = HIBYTE(cap);
  }
  else {
    std::string::size_type v52 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v51, v52);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  std::string::append(&v58, " ]", 2uLL);
  sub_BB174(a1 + 24, &v58);
}

void sub_BB038( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BB174(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 8), a2);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return a1;
}

void sub_BB1B0(_Unwind_Exception *a1)
{
}

void *sub_BB1C4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if ((_DWORD)a2 == 1836414053)
  {
    std::string::size_type v8 = operator new(0x70uLL);
    sub_2F4FC8((uint64_t)v8, v31, 1836414053, *(void *)(a1 + 568));
    v8[10] = a1;
    *((_BYTE *)v8 + 88) = 0;
    *std::string::size_type v8 = off_46E288;
    v8[12] = 0LL;
    *((_DWORD *)v8 + 26) = a3;
    *((_DWORD *)v8 + 27) = a4;
  }

  else
  {
    if ((_DWORD)a2 != 1986817381)
    {
      uint64_t v25 = (os_log_t *)sub_138E8(13);
      uint64_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, a2);
        uint64_t v27 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        uint64_t v33 = "VirtualAudio_Device.cpp";
        __int16 v34 = 1024;
        int v35 = 4500;
        __int16 v36 = 2080;
        __int128 v37 = v27;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unhandled control class %s.",  buf,  0x1Cu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unhandled control class %s.");
    }

    std::string::size_type v8 = operator new(0x80uLL);
    sub_2F4FC8((uint64_t)v8, v31, 1986817381, *(void *)(a1 + 568));
    v8[10] = a1;
    *((_BYTE *)v8 + 88) = 0;
    *std::string::size_type v8 = off_46E168;
    v8[12] = 0LL;
    *((_DWORD *)v8 + 26) = a3;
    *((_DWORD *)v8 + 27) = a4;
    v8[14] = 0LL;
    v8[15] = 0LL;
  }

  uint64_t v9 = *(void **)(a1 + 552);
  unint64_t v10 = *(void *)(a1 + 560);
  if ((unint64_t)v9 >= v10)
  {
    std::string::size_type v12 = *(void **)(a1 + 544);
    uint64_t v13 = v9 - v12;
    unint64_t v14 = v13 + 1;
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        sub_7A8C4();
      }
      uint64_t v17 = (char *)operator new(8 * v16);
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    __int16 v18 = &v17[8 * v13];
    *(void *)__int16 v18 = v8;
    char v11 = v18 + 8;
    if (v9 != v12)
    {
      do
      {
        uint64_t v19 = *--v9;
        *((void *)v18 - 1) = v19;
        v18 -= 8;
      }

      while (v9 != v12);
      uint64_t v9 = *(void **)(a1 + 544);
    }

    *(void *)(a1 + 544) = v18;
    *(void *)(a1 + 552) = v11;
    *(void *)(a1 + 560) = &v17[8 * v16];
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *uint64_t v9 = v8;
    char v11 = v9 + 1;
  }

  *(void *)(a1 + 552) = v11;
  int v20 = AudioObjectsPublishedAndDied(*(void *)(a1 + 568) + 80LL, *(unsigned int *)(a1 + 8), 1LL, &v31, 0LL, 0LL);
  if (v20)
  {
    char v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v33 = "VirtualAudio_Device.cpp";
      __int16 v34 = 1024;
      int v35 = 4508;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: couldn't tell the HAL about the controls",  buf,  0x12u);
    }

    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_4865A0;
    v24[2] = v20;
  }

  return v8;
}

void sub_BB560(_Unwind_Exception *a1)
{
}

void sub_BB590(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 632);
  if (v2)
  {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 16LL))(v2 + 16);
    uint64_t v3 = 0LL;
    __int128 v4 = *(_OWORD *)(v2 + 120);
    v24[0] = *(_OWORD *)(v2 + 104);
    v24[1] = v4;
    uint64_t v25 = *(void *)(v2 + 136);
    do
    {
      uint64_t v5 = *(void *)((char *)v24 + v3);
      if (!v5)
      {
        __int128 v6 = (os_log_t *)sub_138E8(13);
        char v7 = *v6;
        if (*v6)
        {
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            std::string::size_type v21 = "VirtualAudio_DevicePropertyManager.cpp";
            __int16 v22 = 1024;
            int v23 = 382;
            _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: PropertyCache is NULL",  buf,  0x12u);
          }
        }
      }

      sub_2296FC(v5);
      v3 += 8LL;
    }

    while (v3 != 40);
    for (uint64_t i = *(void *)(v2 + 152); i != v2 + 144; uint64_t i = *(void *)(i + 8))
    {
      unint64_t v9 = *(void *)(i + 16);
      sub_C9534((uint64_t *)(v2 + 240), v9, v9);
      sub_2296FC(v9);
    }

    sub_68314((void *)(v2 + 144));
    for (uint64_t j = *(void *)(v2 + 176); j != v2 + 168; uint64_t j = *(void *)(j + 8))
    {
      unint64_t v11 = *(void *)(j + 16);
      sub_C9534((uint64_t *)(v2 + 240), v11, v11);
      sub_2296FC(v11);
    }

    sub_68314((void *)(v2 + 168));
    for (uint64_t k = *(void *)(v2 + 200); k != v2 + 192; uint64_t k = *(void *)(k + 8))
    {
      unint64_t v13 = *(void *)(k + 16);
      sub_C9534((uint64_t *)(v2 + 240), v13, v13);
      sub_2296FC(v13);
    }

    sub_68314((void *)(v2 + 192));
    for (uint64_t m = *(void *)(v2 + 224); m != v2 + 216; uint64_t m = *(void *)(m + 8))
    {
      unint64_t v15 = *(void *)(m + 16);
      sub_C9534((uint64_t *)(v2 + 240), v15, v15);
      sub_2296FC(v15);
    }

    sub_68314((void *)(v2 + 216));
    uint64_t v1 = a1;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 24LL))(v2 + 16);
    }
  }

  uint64_t v16 = *(void *)(v1 + 1008);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 160LL))(v16);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 0x40000000LL;
  v19[2] = sub_BB8CC;
  v19[3] = &unk_46E858;
  v19[4] = v1;
  sub_36C08((uint64_t)v19);
  sub_B98F8();
  sub_B9960(v1);
}

void sub_BB874( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_BB8CC(uint64_t a1)
{
  uint64_t v1 = *(unint64_t **)(a1 + 32);
  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unint64_t v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      int v24 = "VirtualAudio_Device.cpp";
      __int16 v25 = 1024;
      int v26 = 4280;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v23,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v2 = pthread_self();
  uint64_t v3 = (_opaque_pthread_t *)atomic_load(v1 + 83);
  if (!pthread_equal(v2, v3))
  {
    __int128 v4 = pthread_self();
    uint64_t v5 = (_opaque_pthread_t *)atomic_load(v1 + 94);
    if (!pthread_equal(v4, v5))
    {
      int v20 = (os_log_t *)sub_138E8(13);
      std::string::size_type v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        int v23 = 136315394;
        int v24 = "VirtualAudio_Device.cpp";
        __int16 v25 = 1024;
        int v26 = 4281;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v23,  0x12u);
      }

      __int16 v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v22, "Precondition failure.");
    }
  }

  if (((*(uint64_t (**)(unint64_t *))(*v1 + 512))(v1) & 1) != 0)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      int v24 = "VirtualAudio_Device.cpp";
      __int16 v25 = 1024;
      int v26 = 4282;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v23,  0x12u);
    }

    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "Precondition failure.");
  }

  char v6 = 1;
  do
  {
    char v7 = v6;
    if ((v6 & 1) != 0) {
      uint64_t v8 = 63LL;
    }
    else {
      uint64_t v8 = 66LL;
    }
    if ((v6 & 1) != 0) {
      uint64_t v9 = 62LL;
    }
    else {
      uint64_t v9 = 65LL;
    }
    if ((v6 & 1) != 0) {
      unint64_t v10 = v1 + 62;
    }
    else {
      unint64_t v10 = v1 + 65;
    }
    unint64_t v11 = v1[v9];
    if (((v1[v8] - v11) & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v12 = 0LL;
      do
      {
        else {
          uint64_t v13 = *(void *)(v11 + 8 * v12);
        }
        sub_E10A0(v13);
        ++v12;
        unint64_t v11 = v1[v9];
      }

      while (v12 < ((v1[v8] - v11) >> 3));
    }

    char v6 = 0;
  }

  while ((v7 & 1) != 0);
}

void sub_BBC00(_Unwind_Exception *a1)
{
}

uint64_t sub_BBC24(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = 0x676C6F6261677270LL;
  int v33 = 0;
  uint64_t v3 = *(void *)(a1 + 1008);
  if (!v3)
  {
    int v24 = (os_log_t *)sub_138E8(13);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v35 = "VirtualAudio_Device.cpp";
      __int16 v36 = 1024;
      int v37 = 652;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(void *)(a2 + 1008))
  {
    uint64_t v27 = (os_log_t *)sub_138E8(13);
    unint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v35 = "VirtualAudio_Device.cpp";
      __int16 v36 = 1024;
      int v37 = 653;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Precondition failure.");
  }

  int v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 16LL))(v3, &v32);
  if ((v5 & (*(unsigned int (**)(void, uint64_t *))(**(void **)(a2 + 1008) + 16LL))( *(void *)(a2 + 1008),  &v32)) != 1) {
    return 0LL;
  }
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t *, void, void))(**(void **)(a1 + 1008) + 32LL))( *(void *)(a1 + 1008),  &v32,  0LL,  0LL);
  uint64_t v30 = (uint64_t)&v30;
  *(_DWORD *)buf = v6;
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - v8;
  (*(void (**)(void, uint64_t *, void, void, uint8_t *, char *, __n128))(*(void *)*v10 + 40LL))( *v10,  &v32,  0LL,  0LL,  buf,  (char *)&v30 - v8,  v7);
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t *, void, void))(**(void **)(a2 + 1008) + 32LL))( *(void *)(a2 + 1008),  &v32,  0LL,  0LL);
  unsigned int v31 = v11;
  __n128 v12 = __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v30 - v13;
  (*(void (**)(void, uint64_t *, void, void, unsigned int *, char *, __n128))(*(void *)*v15 + 40LL))( *v15,  &v32,  0LL,  0LL,  &v31,  (char *)&v30 - v13,  v12);
  if (*(_DWORD *)buf < 4u) {
    return 0LL;
  }
  uint64_t v17 = 0LL;
  unsigned int v18 = v31;
  unint64_t v19 = (unint64_t)*(unsigned int *)buf >> 2;
  if (v31 >> 2 <= 1) {
    uint64_t v20 = 1LL;
  }
  else {
    uint64_t v20 = v31 >> 2;
  }
  while (((*(uint64_t (**)(void, void))(**(void **)(a2 + 1008) + 456LL))( *(void *)(a2 + 1008),  *(unsigned int *)&v9[4 * v17]) & 1) == 0)
  {
    uint64_t v21 = v20;
    __int16 v22 = (int *)v14;
    if (v18 >= 4)
    {
      do
      {
        int v23 = *v22++;
        if (*(_DWORD *)&v9[4 * v17] == v23
          || ((*(uint64_t (**)(void))(**(void **)(a1 + 1008) + 456LL))(*(void *)(a1 + 1008)) & 1) != 0)
        {
          return 1LL;
        }
      }

      while (--v21);
    }

    if (++v17 == v19) {
      return 0LL;
    }
  }

  return 1LL;
}

void sub_BBFB0(_Unwind_Exception *a1)
{
}

uint64_t sub_BBFD0(unint64_t *a1)
{
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    unint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "VirtualAudio_Device.cpp";
      __int16 v27 = 1024;
      int v28 = 716;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v25,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v2 = pthread_self();
  uint64_t v3 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (pthread_equal(v2, v3)
    || (__int128 v4 = pthread_self(), v5 = (_opaque_pthread_t *)atomic_load(a1 + 94), pthread_equal(v4, v5)))
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "VirtualAudio_Device.cpp";
      __int16 v27 = 1024;
      int v28 = 717;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v25,  0x12u);
    }

    unint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Precondition failure.");
  }

  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    __int16 v22 = (os_log_t *)sub_138E8(13);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "VirtualAudio_Device.cpp";
      __int16 v27 = 1024;
      int v28 = 146;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v25,  0x12u);
    }

    int v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "Precondition failure.");
  }

  uint64_t v6 = (*(uint64_t (**)(unint64_t *))(*a1 + 528))(a1);
  __n128 v7 = pthread_self();
  uint64_t v8 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v6 + 16));
  if (pthread_equal(v7, v8)
    || (uint64_t v9 = pthread_self(),
        unint64_t v10 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v6 + 104)),
        pthread_equal(v9, v10)))
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "VirtualAudio_Device.cpp";
      __int16 v27 = 1024;
      int v28 = 147;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v25,  0x12u);
    }

    unsigned int v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v18, "Precondition failure.");
  }

  unint64_t v11 = a1[126];
  if (v11) {
    (*(void (**)(unint64_t, uint64_t))(*(void *)v11 + 176LL))(v11, 1LL);
  }
  sub_BA664((uint64_t)a1, 0);
  return sub_B60C8((std::string::size_type)a1, 1, 1);
}

void sub_BC36C(_Unwind_Exception *a1)
{
}

void sub_BC394(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    v323 = (os_log_t *)sub_138E8(13);
    v324 = *v323;
    if (*v323 && os_log_type_enabled(*v323, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 725;
      _os_log_impl(&dword_0, v324, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __n128 v7 = pthread_self();
  uint64_t v8 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (!pthread_equal(v7, v8))
  {
    uint64_t v9 = pthread_self();
    unint64_t v10 = (_opaque_pthread_t *)atomic_load(a1 + 94);
    if (!pthread_equal(v9, v10))
    {
      v353 = (os_log_t *)sub_138E8(13);
      v354 = *v353;
      if (*v353 && os_log_type_enabled(*v353, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 726;
        _os_log_impl( &dword_0,  v354,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      v355 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v355, "Precondition failure.");
    }
  }

  if ((*(unsigned int (**)(unint64_t *))(*a1 + 512))(a1))
  {
    v326 = (os_log_t *)sub_138E8(13);
    v327 = *v326;
    if (*v326 && os_log_type_enabled(*v326, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 727;
      _os_log_impl(&dword_0, v327, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    v328 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v328, "Precondition failure.");
  }

  if (!*(void *)(a2 + 16))
  {
    v329 = (os_log_t *)sub_138E8(13);
    v330 = *v329;
    if (*v329 && os_log_type_enabled(*v329, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 728;
      _os_log_impl(&dword_0, v330, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    v331 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v331, "Precondition failure.");
  }

  if (!*(void *)(a2 + 32))
  {
    v332 = (os_log_t *)sub_138E8(13);
    v333 = *v332;
    if (*v332 && os_log_type_enabled(*v332, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 732;
      _os_log_impl( &dword_0,  v333,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): DeviceState output volume control is NULL",  buf,  0x12u);
    }

    v334 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v334, "DeviceState output volume control is NULL");
  }

  if (!*(void *)(a2 + 40))
  {
    v335 = (os_log_t *)sub_138E8(13);
    v336 = *v335;
    if (*v335 && os_log_type_enabled(*v335, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 733;
      _os_log_impl( &dword_0,  v336,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): DeviceState output mute control is NULL",  buf,  0x12u);
    }

    v337 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v337, "DeviceState output mute control is NULL");
  }

  if (!*(void *)(a2 + 48))
  {
    v338 = (os_log_t *)sub_138E8(13);
    v339 = *v338;
    if (*v338 && os_log_type_enabled(*v338, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 734;
      _os_log_impl( &dword_0,  v339,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): DeviceState input volume control is NULL",  buf,  0x12u);
    }

    v340 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v340, "DeviceState input volume control is NULL");
  }

  if (!*(void *)(a2 + 56))
  {
    v341 = (os_log_t *)sub_138E8(13);
    v342 = *v341;
    if (*v341 && os_log_type_enabled(*v341, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 735;
      _os_log_impl( &dword_0,  v342,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): DeviceState input mute control is NULL",  buf,  0x12u);
    }

    v343 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v343, "DeviceState input mute control is NULL");
  }

  unint64_t v11 = (char **)*a4;
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    v344 = (os_log_t *)sub_138E8(13);
    v345 = *v344;
    if (*v344 && os_log_type_enabled(*v344, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3935;
      _os_log_impl(&dword_0, v345, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    v346 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v346, "Precondition failure.");
  }

  __n128 v12 = pthread_self();
  uint64_t v13 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (!pthread_equal(v12, v13))
  {
    unint64_t v14 = pthread_self();
    unint64_t v15 = (_opaque_pthread_t *)atomic_load(a1 + 94);
    if (!pthread_equal(v14, v15))
    {
      v356 = (os_log_t *)sub_138E8(13);
      v357 = *v356;
      if (*v356 && os_log_type_enabled(*v356, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3936;
        _os_log_impl( &dword_0,  v357,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      v358 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v358, "Precondition failure.");
    }
  }

  if ((*(unsigned int (**)(unint64_t *))(*a1 + 512))(a1))
  {
    v347 = (os_log_t *)sub_138E8(13);
    v348 = *v347;
    if (*v347 && os_log_type_enabled(*v347, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3937;
      _os_log_impl(&dword_0, v348, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    v349 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v349, "Precondition failure.");
  }

  unint64_t v16 = a1[126];
  unint64_t v369 = (unint64_t)a1;
  if (v16 != *(void *)(a2 + 16))
  {
    uint64_t v17 = operator new(0x10uLL);
    void *v17 = off_46E910;
    v17[1] = v16;
    sub_E4104(v11, (uint64_t)v17);
  }

  unsigned int v18 = (void *)a1[116];
  uint64_t v19 = v18[12];
  if (v19 != *(void *)(a2 + 32))
  {
    uint64_t v20 = operator new(0x10uLL);
    *uint64_t v20 = off_46E910;
    v20[1] = v19;
    sub_E4104(v11, (uint64_t)v20);
    unsigned int v18 = (void *)a1[116];
    uint64_t v19 = *(void *)(a2 + 32);
  }

  v18[12] = v19;
  _BYTE v18[14] = 0LL;
  v18[15] = 0LL;
  sub_B0CA4((uint64_t)v18);
  unint64_t v21 = a1[120];
  uint64_t v22 = *(void *)(v21 + 96);
  if (v22 != *(void *)(a2 + 40))
  {
    int v23 = operator new(0x10uLL);
    void *v23 = off_46E910;
    v23[1] = v22;
    sub_E4104(v11, (uint64_t)v23);
    unint64_t v21 = a1[120];
    uint64_t v22 = *(void *)(a2 + 40);
  }

  *(void *)(v21 + 96) = v22;
  int v24 = (void *)a1[121];
  uint64_t v25 = v24[12];
  if (v25 != *(void *)(a2 + 48))
  {
    int v26 = operator new(0x10uLL);
    void *v26 = off_46E910;
    v26[1] = v25;
    sub_E4104(v11, (uint64_t)v26);
    int v24 = (void *)a1[121];
    uint64_t v25 = *(void *)(a2 + 48);
  }

  v24[12] = v25;
  v24[14] = 0LL;
  v24[15] = 0LL;
  sub_B0CA4((uint64_t)v24);
  unint64_t v27 = a1[122];
  uint64_t v28 = *(void *)(v27 + 96);
  if (v28 != *(void *)(a2 + 56))
  {
    unint64_t v29 = operator new(0x10uLL);
    void *v29 = off_46E910;
    v29[1] = v28;
    sub_E4104(v11, (uint64_t)v29);
    unint64_t v27 = a1[122];
    uint64_t v28 = *(void *)(a2 + 56);
  }

  *(void *)(v27 + 96) = v28;
  unint64_t v30 = a1[126];
  uint64_t v31 = *(void *)(a2 + 16);
  a1[126] = v31;
  sub_C07E8((uint64_t)a1, v31, (uint64_t)a4);
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v379 = 0LL;
  if (v30)
  {
    memset(buf, 0, 24);
    sub_8D668( buf,  *(const void **)(v30 + 144),  *(void *)(v30 + 152),  (uint64_t)(*(void *)(v30 + 152) - *(void *)(v30 + 144)) >> 3);
    *(_OWORD *)__int128 __p = *(_OWORD *)buf;
    uint64_t v379 = *(void *)&buf[16];
    (*(void (**)(unint64_t))(*(void *)v30 + 160LL))(v30);
    (*(void (**)(unint64_t, void, void))(*(void *)v30 + 208LL))(v30, 0LL, 0LL);
  }

  if (a1[135])
  {
    uint64_t v32 = (os_log_t *)sub_138E8(1);
    int v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v34 = *(void *)(a1[135] + 8);
      (*(void (**)(AudioObjectPropertyAddress *__return_ptr))(*(void *)a1[126] + 128LL))(inAddress);
      int v35 = a1;
      __int16 v36 = *(std::string **)&inAddress[0].mSelector;
      sub_33464(&v388, (unsigned int *)v35 + 144);
      if ((v388.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v37 = &v388;
      }
      else {
        int v37 = (std::string *)v388.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4814;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&uint8_t buf[20] = v34;
      __int16 v383 = 2112;
      v384 = v36;
      __int16 v385 = 2080;
      v386 = v37;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting work group interval handle %p on AggregateDevice %@, VAD %s",  buf,  0x30u);
      sub_19DFC((uint64_t)inAddress);
      a1 = (unint64_t *)v369;
    }

    v388.__r_.__value_.__r.__words[0] = *(void *)(a1[135] + 8);
    uint64_t v38 = a1[126];
    strcpy(buf, "gwsobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_38A8E8(v38, (uint64_t)buf, 8LL, (uint64_t)&v388);
  }

  (*(void (**)(unint64_t, void (*)(uint64_t, uint64_t, void *, double *, unsigned int *, double *, uint64_t), unint64_t *))(*(void *)a1[126] + 208LL))( a1[126],  sub_4A20,  a1);
  sub_C1554((uint64_t *)a1, *(_DWORD *)(a2 + 8), (uint64_t)(a4 + 4));
  *((_BYTE *)a1 + 1074) = *(_DWORD *)(a2 + 12) == 1;
  std::string::size_type v39 = (os_log_t *)sub_138E8(1);
  uint64_t v40 = *v39;
  if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(AudioObjectPropertyAddress *__return_ptr))(*(void *)a1[126] + 128LL))(inAddress);
    uint64_t v41 = *(void *)&inAddress[0].mSelector;
    sub_33464(&v388, (unsigned int *)a1 + 144);
    if ((v388.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v42 = &v388;
    }
    else {
      unint64_t v42 = (std::string *)v388.__r_.__value_.__r.__words[0];
    }
    if (*((_BYTE *)a1 + 1074)) {
      std::string::size_type v43 = "on";
    }
    else {
      std::string::size_type v43 = "off";
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 771;
    *(_WORD *)&_BYTE buf[18] = 2112;
    *(void *)&uint8_t buf[20] = v41;
    __int16 v383 = 2080;
    v384 = v42;
    __int16 v385 = 2080;
    v386 = (std::string *)v43;
    _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AggregateDevice %@, VAD %s, configuration: sharing %s",  buf,  0x30u);
    sub_19DFC((uint64_t)inAddress);
  }

  sub_B4F78((uint64_t)a1, 1LL, *((unsigned __int8 *)a1 + 600), a4 + 1);
  sub_B4F78((uint64_t)a1, 0LL, *((unsigned __int8 *)a1 + 601), a4 + 1);
  v370 = a4 + 1;
  sub_B7B04((uint64_t *)&v376, (uint64_t)a1, a3, 1768845428);
  sub_B7B04((uint64_t *)&v374, (uint64_t)a1, a3, 1869968496);
  if ((void *)a1[129] == v377[1])
  {
    uint64_t v44 = (unint64_t *)a1[127];
    if (v44 == a1 + 128)
    {
LABEL_62:
      int v50 = 0;
      goto LABEL_66;
    }

    __int128 v45 = v376;
    while (*((_DWORD *)v44 + 7) == *((_DWORD *)v45 + 7))
    {
      char v46 = (unint64_t *)v44[1];
      std::string::size_type v47 = v44;
      if (v46)
      {
        do
        {
          uint64_t v44 = v46;
          char v46 = (unint64_t *)*v46;
        }

        while (v46);
      }

      else
      {
        do
        {
          uint64_t v44 = (unint64_t *)v47[2];
          BOOL v265 = *v44 == (void)v47;
          std::string::size_type v47 = v44;
        }

        while (!v265);
      }

      std::string v48 = (void *)v45[1];
      if (v48)
      {
        do
        {
          __int16 v49 = v48;
          std::string v48 = (void *)*v48;
        }

        while (v48);
      }

      else
      {
        do
        {
          __int16 v49 = (void *)v45[2];
          BOOL v265 = *v49 == (void)v45;
          __int128 v45 = v49;
        }

        while (!v265);
      }

      __int128 v45 = v49;
      if (v44 == a1 + 128) {
        goto LABEL_62;
      }
    }
  }

  int v51 = *((_DWORD *)a1 + 2);
  strcpy(buf, "pcadtpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  std::string::size_type v52 = (unint64_t *)sub_E2D90(v370, v51);
  sub_87EB4(v52, (int *)buf);
  int v53 = *((_DWORD *)a1 + 2);
  strcpy(buf, "cfpatpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  double v54 = (unint64_t *)sub_E2D90(v370, v53);
  sub_87EB4(v54, (int *)buf);
  int v50 = 1;
LABEL_66:
  if ((void *)a1[132] == v375[1])
  {
    std::string v55 = (unint64_t *)a1[130];
    if (v55 == a1 + 131)
    {
LABEL_81:
      if (!v50) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }

    int v56 = v374;
    while (*((_DWORD *)v55 + 7) == *((_DWORD *)v56 + 7))
    {
      int64_t v57 = (unint64_t *)v55[1];
      std::string v58 = v55;
      if (v57)
      {
        do
        {
          std::string v55 = v57;
          int64_t v57 = (unint64_t *)*v57;
        }

        while (v57);
      }

      else
      {
        do
        {
          std::string v55 = (unint64_t *)v58[2];
          BOOL v265 = *v55 == (void)v58;
          std::string v58 = v55;
        }

        while (!v265);
      }

      __int16 v59 = (void *)v56[1];
      if (v59)
      {
        do
        {
          unsigned __int8 v60 = v59;
          __int16 v59 = (void *)*v59;
        }

        while (v59);
      }

      else
      {
        do
        {
          unsigned __int8 v60 = (void *)v56[2];
          BOOL v265 = *v60 == (void)v56;
          int v56 = v60;
        }

        while (!v265);
      }

      int v56 = v60;
      if (v55 == a1 + 131) {
        goto LABEL_81;
      }
    }
  }

  int v61 = *((_DWORD *)a1 + 2);
  strcpy(buf, "pcadptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  std::string v62 = (unint64_t *)sub_E2D90(v370, v61);
  sub_87EB4(v62, (int *)buf);
  int v63 = *((_DWORD *)a1 + 2);
  strcpy(buf, "cfpaptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v64 = (unint64_t *)sub_E2D90(v370, v63);
  sub_87EB4(v64, (int *)buf);
LABEL_86:
  int v65 = *((_DWORD *)a1 + 2);
  strcpy(buf, "pcadbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v66 = (unint64_t *)sub_E2D90(v370, v65);
  sub_87EB4(v66, (int *)buf);
  int v67 = *((_DWORD *)a1 + 2);
  strcpy(buf, "cfpabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v68 = (unint64_t *)sub_E2D90(v370, v67);
  sub_87EB4(v68, (int *)buf);
LABEL_87:
  int v69 = *((_DWORD *)a1 + 2);
  strcpy(buf, "hcvatpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v70 = (unint64_t *)sub_E2D90(v370, v69);
  sub_87EB4(v70, (int *)buf);
  int v71 = *((_DWORD *)a1 + 2);
  strcpy(buf, "hcnetpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  std::string::size_type v72 = (unint64_t *)sub_E2D90(v370, v71);
  sub_87EB4(v72, (int *)buf);
  __int128 v73 = (_DWORD **)a1[117];
  if (v73 != (_DWORD **)a1[118])
  {
    do
    {
      sub_BA0D0((uint64_t)a1, *v73);
      __int16 v74 = (char *)a1[118];
      int64_t v75 = v74 - (char *)(v73 + 1);
      std::string v76 = (char *)a1[117];
      BOOL v77 = (char *)v73 + v75;
      a1[118] = (unint64_t)v73 + v75;
      __int128 v73 = (_DWORD **)v76;
    }

    while (v76 != v77);
  }

  if (*(_DWORD *)(a2 + 12) == 1)
  {
    int v78 = (unint64_t *)a1[130];
    v79 = a1 + 131;
    if (v78 != a1 + 131)
    {
      uint64_t v80 = (uint64_t *)(a2 + 72);
      uint64_t v81 = (unsigned int *)(a1 + 72);
      do
      {
        sub_92EF8();
        uint64_t v82 = sub_28AFEC(*((_DWORD *)v78 + 7));
        std::string::size_type v83 = *(void *)(v82 + 96);
        v388.__r_.__value_.__r.__words[0] = *(void *)(v82 + 88);
        v388.__r_.__value_.__l.__size_ = v83;
        if (v83)
        {
          unint64_t v84 = (unint64_t *)(v83 + 16);
          do
            unint64_t v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }

        sub_B8CBC((uint64_t *)buf, (uint64_t *)&v388, "", 4612);
        unsigned int v86 = (*(uint64_t (**)(void))(**(void **)(*(void *)buf + 192LL) + 120LL))(*(void *)(*(void *)buf + 192LL));
        uint64_t v87 = *v80;
        if (!*v80) {
          goto LABEL_108;
        }
        uint64_t v88 = a2 + 72;
        do
        {
          unsigned int v89 = *(_DWORD *)(v87 + 32);
          BOOL v90 = v89 >= v86;
          if (v89 >= v86) {
            v91 = (uint64_t *)v87;
          }
          else {
            v91 = (uint64_t *)(v87 + 8);
          }
          if (v90) {
            uint64_t v88 = v87;
          }
          uint64_t v87 = *v91;
        }

        while (*v91);
        if ((uint64_t *)v88 == v80 || v86 < *(_DWORD *)(v88 + 32)) {
LABEL_108:
        }
          uint64_t v88 = a2 + 72;
        uint64_t v92 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          uint64_t v93 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }

        if (v388.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v388.__r_.__value_.__l.__size_);
        }
        if ((uint64_t *)v88 != v80)
        {
          unsigned int v95 = (os_log_t *)sub_138E8(17);
          CFTypeRef v96 = *v95;
          if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_DEFAULT))
          {
            sub_33464(&v388, v81);
            char v97 = (v388.__r_.__value_.__s.__size_ & 0x80u) == 0
                ? &v388
                : (std::string *)v388.__r_.__value_.__r.__words[0];
            int v98 = *((_DWORD *)v78 + 7);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4616;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&uint8_t buf[20] = v97;
            __int16 v383 = 1024;
            LODWORD(v384) = v98;
            _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d %s creating volume control with element %u",  buf,  0x22u);
          }

          char v99 = sub_BB1C4((uint64_t)a1, 1986817381LL, 1869968496, *((_DWORD *)v78 + 7));
          v99[12] = *(void *)(v88 + 40);
          v99[14] = 0LL;
          v99[15] = 0LL;
          sub_B0CA4((uint64_t)v99);
          v100 = (void *)a1[118];
          unint64_t v101 = a1[119];
          if ((unint64_t)v100 >= v101)
          {
            unint64_t v103 = a1[117];
            uint64_t v104 = (uint64_t)((uint64_t)v100 - v103) >> 3;
            if ((unint64_t)(v104 + 1) >> 61) {
LABEL_428:
            }
              sub_7A87C();
            uint64_t v105 = v101 - v103;
            uint64_t v106 = v105 >> 2;
            else {
              unint64_t v107 = v106;
            }
            if (v107) {
              unint64_t v107 = (unint64_t)sub_7DC90(v107);
            }
            else {
              uint64_t v108 = 0LL;
            }
            a1 = (unint64_t *)v369;
            v109 = (void *)(v107 + 8 * v104);
            void *v109 = v99;
            CFStringRef v102 = v109 + 1;
            __int16 v110 = *(char **)(v369 + 944);
            CFIndex v111 = *(char **)(v369 + 936);
            if (v110 != v111)
            {
              do
              {
                uint64_t v112 = *((void *)v110 - 1);
                v110 -= 8;
                *--v109 = v112;
              }

              while (v110 != v111);
              __int16 v110 = *(char **)(v369 + 936);
            }

            *(void *)(v369 + 936) = v109;
            *(void *)(v369 + 944) = v102;
            *(void *)(v369 + 952) = v107 + 8 * v108;
            if (v110) {
              operator delete(v110);
            }
          }

          else
          {
            void *v100 = v99;
            CFStringRef v102 = v100 + 1;
          }

          a1[118] = (unint64_t)v102;
        }

        __int16 v113 = (unint64_t *)v78[1];
        if (v113)
        {
          do
          {
            int v114 = v113;
            __int16 v113 = (unint64_t *)*v113;
          }

          while (v113);
        }

        else
        {
          do
          {
            int v114 = (unint64_t *)v78[2];
            BOOL v265 = *v114 == (void)v78;
            int v78 = v114;
          }

          while (!v265);
        }

        int v78 = v114;
      }

      while (v114 != v79);
    }
  }

  unsigned int v115 = (_DWORD **)a1[123];
  if (v115 != (_DWORD **)a1[124])
  {
    while (1)
    {
      sub_BA0D0((uint64_t)a1, *v115);
      __int16 v116 = (char *)a1[124];
      int64_t v117 = v116 - (char *)(v115 + 1);
      memmove(v115, v115 + 1, v116 - (char *)(v115 + 1));
      a1[124] = (unint64_t)v115 + v117;
    }

    a1[124] = (unint64_t)(v116 - 8);
  }

  v118 = *(int **)(a2 + 88);
  for (uint64_t i = *(unsigned int **)(a2 + 96); v118 != (int *)i; v118 += 4)
  {
    unint64_t v120 = (os_log_t *)sub_138E8(17);
    unint64_t v121 = *v120;
    if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_DEFAULT))
    {
      sub_33464(&v388, (unsigned int *)(v369 + 576));
      uint64_t v122 = &v388;
      if ((v388.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v122 = (std::string *)v388.__r_.__value_.__r.__words[0];
      }
      v123 = (std::string *)*v118;
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4638;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&uint8_t buf[20] = v122;
      __int16 v383 = 2048;
      v384 = v123;
      _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d %s creating input channel volume control with element %lu",  buf,  0x26u);
    }

    int v124 = sub_BB1C4(v369, 1986817381LL, 1768845428, *v118);
    v124[12] = *((void *)v118 + 1);
    v124[14] = 0LL;
    v124[15] = 0LL;
    sub_B0CA4((uint64_t)v124);
    int64x2_t v125 = *(void **)(v369 + 992);
    unint64_t v126 = *(void *)(v369 + 1000);
    if ((unint64_t)v125 >= v126)
    {
      uint64_t v128 = *(void *)(v369 + 984);
      uint64_t v129 = ((uint64_t)v125 - v128) >> 3;
      uint64_t v130 = v126 - v128;
      uint64_t v131 = v130 >> 2;
      else {
        unint64_t v132 = v131;
      }
      if (v132) {
        unint64_t v132 = (unint64_t)sub_7DC90(v132);
      }
      else {
        uint64_t v133 = 0LL;
      }
      v134 = (void *)(v132 + 8 * v129);
      void *v134 = v124;
      v127 = v134 + 1;
      uint64_t v135 = *(char **)(v369 + 992);
      v136 = *(char **)(v369 + 984);
      if (v135 == v136)
      {
        BOOL v138 = (void *)v369;
      }

      else
      {
        do
        {
          uint64_t v137 = *((void *)v135 - 1);
          v135 -= 8;
          *--v134 = v137;
        }

        while (v135 != v136);
        BOOL v138 = (void *)v369;
        uint64_t v135 = *(char **)(v369 + 984);
      }

      v138[123] = v134;
      v138[124] = v127;
      v138[125] = v132 + 8 * v133;
      if (v135) {
        operator delete(v135);
      }
    }

    else
    {
      *int64x2_t v125 = v124;
      v127 = v125 + 1;
    }

    *(void *)(v369 + 992) = v127;
  }

  v139 = *(uint64_t **)(v369 + 632);
  if (v139)
  {
    v371 = v139 + 2;
    int v365 = (*(uint64_t (**)(void))(v139[2] + 16))();
    if (!v139[13])
    {
      v298 = (os_log_t *)sub_138E8(13);
      v299 = *v298;
      if (*v298)
      {
        if (os_log_type_enabled(*v298, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 217;
          _os_log_impl( &dword_0,  v299,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mDevicePropertyCache is NULL",  buf,  0x12u);
        }
      }
    }

    sub_229AFC(v139[13], *(void *)(a2 + 16), v370);
    if (!v139[14])
    {
      v300 = (os_log_t *)sub_138E8(13);
      v301 = *v300;
      if (*v300)
      {
        if (os_log_type_enabled(*v300, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 221;
          _os_log_impl( &dword_0,  v301,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mInputVolumeControlPropertyCache is NULL",  buf,  0x12u);
        }
      }
    }

    sub_229AFC(v139[14], *(void *)(a2 + 48), v370);
    if (!v139[15])
    {
      v302 = (os_log_t *)sub_138E8(13);
      v303 = *v302;
      if (*v302)
      {
        if (os_log_type_enabled(*v302, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 225;
          _os_log_impl( &dword_0,  v303,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mOutputVolumeControlPropertyCache is NULL",  buf,  0x12u);
        }
      }
    }

    sub_229AFC(v139[15], *(void *)(a2 + 32), v370);
    if (!v139[16])
    {
      v304 = (os_log_t *)sub_138E8(13);
      v305 = *v304;
      if (*v304)
      {
        if (os_log_type_enabled(*v304, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 229;
          _os_log_impl( &dword_0,  v305,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mInputMutePropertyCache is NULL",  buf,  0x12u);
        }
      }
    }

    sub_229AFC(v139[16], *(void *)(a2 + 56), v370);
    if (!v139[17])
    {
      v306 = (os_log_t *)sub_138E8(13);
      v307 = *v306;
      if (*v306)
      {
        if (os_log_type_enabled(*v306, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 233;
          _os_log_impl( &dword_0,  v307,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mOutputMutePropertyCache is NULL",  buf,  0x12u);
        }
      }
    }

    sub_229AFC(v139[17], *(void *)(a2 + 40), v370);
    v140 = v139 + 18;
    uint64_t v141 = v139[19];
    if ((uint64_t *)v141 != v139 + 18)
    {
      do
      {
        sub_C9534(v139 + 30, *(void *)(v141 + 16), *(void *)(v141 + 16));
        sub_2296FC(*(void *)(v141 + 16));
        uint64_t v141 = *(void *)(v141 + 8);
      }

      while ((_BYTE *)v141 != v140);
    }

    *(void *)buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0LL;
    uint64_t v142 = sub_135A0(v139[1], 1);
    sub_86550((uint64_t *)&v388, v142);
    std::string::size_type v143 = v388.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v388.__r_.__value_.__l.__data_ != &v388.__r_.__value_.__r.__words[1])
    {
      uint64_t v144 = (uint64_t *)(a2 + 72);
      do
      {
        sub_92EF8();
        uint64_t v145 = sub_28AFEC(*(_DWORD *)(v143 + 28));
        unint64_t v146 = *(std::__shared_weak_count **)(v145 + 96);
        v380 = *(AudioObjectPropertyAddress **)(v145 + 88);
        v381 = v146;
        if (v146)
        {
          p_shared_weak_owners = (unint64_t *)&v146->__shared_weak_owners_;
          do
            unint64_t v148 = __ldxr(p_shared_weak_owners);
          while (__stxr(v148 + 1, p_shared_weak_owners));
        }

        sub_B8CBC((uint64_t *)inAddress, (uint64_t *)&v380, "", 251);
        unsigned int v149 = (*(uint64_t (**)(void))(**(void **)(*(void *)&inAddress[0].mSelector + 192LL) + 120LL))(*(void *)(*(void *)&inAddress[0].mSelector + 192LL));
        uint64_t v150 = *v144;
        if (!*v144) {
          goto LABEL_200;
        }
        uint64_t v151 = a2 + 72;
        do
        {
          unsigned int v152 = *(_DWORD *)(v150 + 32);
          BOOL v153 = v152 >= v149;
          if (v152 >= v149) {
            uint64_t v154 = (uint64_t *)v150;
          }
          else {
            uint64_t v154 = (uint64_t *)(v150 + 8);
          }
          if (v153) {
            uint64_t v151 = v150;
          }
          uint64_t v150 = *v154;
        }

        while (*v154);
        if ((uint64_t *)v151 == v144 || v149 < *(_DWORD *)(v151 + 32)) {
LABEL_200:
        }
          uint64_t v151 = a2 + 72;
        unsigned int v155 = *(std::__shared_weak_count **)&inAddress[0].mElement;
        if (*(void *)&inAddress[0].mElement)
        {
          v156 = (unint64_t *)(*(void *)&inAddress[0].mElement + 8LL);
          do
            unint64_t v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }

        if (v381) {
          std::__shared_weak_count::__release_weak(v381);
        }
        if ((uint64_t *)v151 != v144)
        {
          uint64_t v158 = v139[1];
          int64x2_t v159 = *(void **)(v158 + 936);
          uint64_t v160 = *(void **)(v158 + 944);
          if (v159 == v160) {
            goto LABEL_416;
          }
          int v161 = *(_DWORD *)(v143 + 28);
          while ((*(unsigned int (**)(void))(*(void *)*v159 + 136LL))(*v159) != v161)
          {
            if (++v159 == v160)
            {
              int64x2_t v159 = v160;
              break;
            }
          }

          if (v159 == *(void **)(v158 + 944) || (uint64_t v162 = *v159) == 0)
          {
LABEL_416:
            v314 = (os_log_t *)sub_138E8(13);
            v315 = *v314;
            if (*v314 && os_log_type_enabled(*v314, OS_LOG_TYPE_ERROR))
            {
              inAddress[0].uint64_t mSelector = 136315394;
              *(void *)&inAddress[0].AudioObjectPropertyScope mScope = "VirtualAudio_DevicePropertyManager.cpp";
              LOWORD(inAddress[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&inAddress[1].mSelector + 2) = 255;
              _os_log_impl( &dword_0,  v315,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: couldn't get a volume control from device.",  (uint8_t *)inAddress,  0x12u);
            }

            v316 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v316, "couldn't get a volume control from device.");
          }

          v163 = (char *)operator new(0x70uLL);
          *(void *)v163 = v162;
          *((void *)v163 + 1) = v371;
          *((void *)v163 + 2) = 0LL;
          *((void *)v163 + 3) = v163 + 24;
          *((void *)v163 + 4) = v163 + 24;
          *((void *)v163 + 5) = 0LL;
          v163[48] = 1;
          *(_OWORD *)(v163 + 56) = 0u;
          *(_OWORD *)(v163 + 72) = 0u;
          *((void *)v163 + 11) = v163 + 88;
          *((void *)v163 + 12) = v163 + 88;
          *((void *)v163 + 13) = 0LL;
          strcpy((char *)inAddress, "mlovbolg");
          BYTE1(inAddress[0].mElement) = 0;
          HIWORD(inAddress[0].mElement) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v163, (int *)inAddress, 4);
          strcpy((char *)inAddress, "amlvbolg");
          BYTE1(inAddress[0].mElement) = 0;
          HIWORD(inAddress[0].mElement) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v163, (int *)inAddress, 4);
          strcpy((char *)inAddress, "cvidbolg");
          BYTE1(inAddress[0].mElement) = 0;
          HIWORD(inAddress[0].mElement) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v163, (int *)inAddress, 1);
          strcpy((char *)inAddress, "pscvbolg");
          BYTE1(inAddress[0].mElement) = 0;
          HIWORD(inAddress[0].mElement) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v163, (int *)inAddress, 0);
          strcpy((char *)inAddress, "slv?bolg");
          BYTE1(inAddress[0].mElement) = 0;
          HIWORD(inAddress[0].mElement) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v163, (int *)inAddress, 0);
          strcpy((char *)inAddress, "spmrbolg");
          BYTE1(inAddress[0].mElement) = 0;
          HIWORD(inAddress[0].mElement) = 0;
          sub_225790((std::__shared_weak_count_vtbl *)v163, (int *)inAddress, 1);
          memset(inAddress, 0, sizeof(inAddress));
          sub_229AFC((uint64_t)v163, *(void *)(v151 + 40), (uint64_t *)inAddress);
          CFTypeRef v164 = operator new(0x18uLL);
          uint64_t v165 = *(void *)buf;
          v164[1] = buf;
          v164[2] = v163;
          *CFTypeRef v164 = v165;
          *(void *)(v165 + 8) = v164;
          *(void *)buf = v164;
          ++*(void *)&buf[16];
          v380 = inAddress;
          sub_E2D18((void ***)&v380);
        }

        v166 = *(std::string **)(v143 + 8);
        if (v166)
        {
          do
          {
            v167 = v166;
            v166 = (std::string *)v166->__r_.__value_.__r.__words[0];
          }

          while (v166);
        }

        else
        {
          do
          {
            v167 = *(std::string **)(v143 + 16);
            BOOL v265 = v167->__r_.__value_.__r.__words[0] == v143;
            std::string::size_type v143 = (std::string::size_type)v167;
          }

          while (!v265);
        }

        std::string::size_type v143 = (std::string::size_type)v167;
      }

      while (v167 != (std::string *)&v388.__r_.__value_.__r.__words[1]);
    }

    if (v140 != buf) {
      sub_C95E8(v139 + 18, *(uint64_t *)&buf[8], (uint64_t)buf);
    }
    sub_32C8C((void *)v388.__r_.__value_.__l.__size_);
    sub_68314(buf);
    v168 = v139 + 21;
    v169 = (uint64_t *)v139[22];
    if (v169 != v139 + 21)
    {
      do
      {
        sub_C9534(v139 + 30, v169[2], v169[2]);
        sub_2296FC(v169[2]);
        v169 = (uint64_t *)v169[1];
      }

      while (v169 != v168);
    }

    *(void *)buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0LL;
    v171 = *(int **)(a2 + 88);
    uint64_t v170 = *(int **)(a2 + 96);
    for (uint64_t j = v139; v171 != v170; v171 += 4)
    {
      uint64_t v173 = v139[1];
      v174 = *(void **)(v173 + 984);
      uint64_t v175 = *(void **)(v173 + 992);
      if (v174 == v175) {
        goto LABEL_412;
      }
      int v176 = *v171;
      while ((*(unsigned int (**)(void))(*(void *)*v174 + 136LL))(*v174) != v176)
      {
        if (++v174 == v175)
        {
          v174 = v175;
          break;
        }
      }

      if (v174 == *(void **)(v173 + 992) || (uint64_t v177 = *v174) == 0)
      {
LABEL_412:
        v311 = (os_log_t *)sub_138E8(13);
        v312 = *v311;
        if (*v311 && os_log_type_enabled(*v311, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v388.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v388.__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_DevicePropertyManager.cpp";
          WORD2(v388.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v388.__r_.__value_.__r.__words[1] + 6) = 293;
          _os_log_impl( &dword_0,  v312,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: couldn't get a volume control from device.",  (uint8_t *)&v388,  0x12u);
        }

        v313 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v313, "couldn't get a volume control from device.");
      }

      v139 = j;
      v178 = (char *)operator new(0x70uLL);
      *(void *)v178 = v177;
      *((void *)v178 + 1) = v371;
      *((void *)v178 + 2) = 0LL;
      *((void *)v178 + 3) = v178 + 24;
      *((void *)v178 + 4) = v178 + 24;
      *((void *)v178 + 5) = 0LL;
      v178[48] = 1;
      *(_OWORD *)(v178 + 56) = 0u;
      *(_OWORD *)(v178 + 72) = 0u;
      *((void *)v178 + 11) = v178 + 88;
      *((void *)v178 + 12) = v178 + 88;
      *((void *)v178 + 13) = 0LL;
      strcpy((char *)&v388, "dlovbolg");
      v388.__r_.__value_.__s.__data_[9] = 0;
      WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
      sub_225790((std::__shared_weak_count_vtbl *)v178, (int *)&v388, 4);
      strcpy((char *)&v388, "#bdvbolg");
      v388.__r_.__value_.__s.__data_[9] = 0;
      WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
      sub_225790((std::__shared_weak_count_vtbl *)v178, (int *)&v388, 0);
      memset(&v388, 0, sizeof(v388));
      sub_229AFC((uint64_t)v178, *((void *)v171 + 1), (uint64_t *)&v388);
      CFTypeRef v179 = operator new(0x18uLL);
      v179[1] = buf;
      v179[2] = v178;
      uint64_t v180 = *(void *)buf;
      *CFTypeRef v179 = *(void *)buf;
      *(void *)(v180 + 8) = v179;
      *(void *)buf = v179;
      ++*(void *)&buf[16];
      *(void *)&inAddress[0].uint64_t mSelector = &v388;
      sub_E2D18((void ***)inAddress);
    }

    sub_68314(buf);
    char v181 = 0;
    uint64_t v182 = 0LL;
    LOWORD(v380) = 256;
    v366 = v139 + 27;
    v367 = v139 + 24;
    char v183 = v139 + 30;
    do
    {
      char v368 = v181;
      int v184 = *((unsigned __int8 *)&v380 + v182);
      if (*((_BYTE *)&v380 + v182)) {
        v185 = v366;
      }
      else {
        v185 = v367;
      }
      *(void *)buf = buf;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0LL;
      uint64_t v186 = j[1];
      uint64_t v187 = 504LL;
      if (v184)
      {
        uint64_t v187 = 528LL;
        uint64_t v188 = 520LL;
      }

      else
      {
        uint64_t v188 = 496LL;
      }

      if (((*(void *)(v186 + v187) - *(void *)(v186 + v188)) & 0x7FFFFFFF8LL) != 0)
      {
        unint64_t v189 = 0LL;
        do
        {
          uint64_t v190 = v186 + 496;
          if (v184) {
            uint64_t v191 = 520LL;
          }
          else {
            uint64_t v191 = 496LL;
          }
          if (v184) {
            uint64_t v190 = v186 + 520;
          }
          uint64_t v192 = *(void *)(v186 + v191);
          unint64_t v193 = (*(void *)(v190 + 8) - v192) >> 3;
          v194 = v185;
          do
          {
            v194 = (uint64_t *)v194[1];
            if (v194 == v185)
            {
              if (v193 <= v189) {
                uint64_t v199 = 0LL;
              }
              else {
                uint64_t v199 = *(void *)(v192 + 8 * v189);
              }
              v200 = (char *)operator new(0x70uLL);
              *(void *)v200 = v199;
              *((void *)v200 + 1) = v371;
              *((void *)v200 + 2) = 0LL;
              *((void *)v200 + 3) = v200 + 24;
              *((void *)v200 + 4) = v200 + 24;
              *((void *)v200 + 5) = 0LL;
              v200[48] = 1;
              *(_OWORD *)(v200 + 56) = 0u;
              *(_OWORD *)(v200 + 72) = 0u;
              *((void *)v200 + 11) = v200 + 88;
              *((void *)v200 + 12) = v200 + 88;
              *((void *)v200 + 13) = 0LL;
              strcpy((char *)&v388, "tmfsbolg");
              v388.__r_.__value_.__s.__data_[9] = 0;
              WORD1(v388.__r_.__value_.__r.__words[1]) = 0;
              sub_225790((std::__shared_weak_count_vtbl *)v200, (int *)&v388, 8);
              memset(&v388, 0, sizeof(v388));
              uint64_t v201 = *(void *)(a2 + 16);
              if (v201) {
                uint64_t v202 = (*(uint64_t (**)(uint64_t, BOOL, unint64_t))(*(void *)v201 + 96LL))( v201,  v184 != 0,  v189);
              }
              else {
                uint64_t v202 = 0LL;
              }
              sub_229AFC((uint64_t)v200, v202, (uint64_t *)&v388);
              v203 = operator new(0x18uLL);
              v203[1] = buf;
              v203[2] = v200;
              uint64_t v204 = *(void *)buf;
              void *v203 = *(void *)buf;
              *(void *)(v204 + 8) = v203;
              *(void *)buf = v203;
              ++*(void *)&buf[16];
              *(void *)&inAddress[0].uint64_t mSelector = &v388;
              sub_E2D18((void ***)inAddress);
              goto LABEL_271;
            }

            if (v193 <= v189) {
              uint64_t v195 = 0LL;
            }
            else {
              uint64_t v195 = *(void *)(v192 + 8 * v189);
            }
            v196 = (void *)v194[2];
          }

          while (*v196 != v195);
          uint64_t v197 = *(void *)(a2 + 16);
          if (v197) {
            uint64_t v198 = (*(uint64_t (**)(uint64_t, BOOL, unint64_t))(*(void *)v197 + 96LL))( v197,  v184 != 0,  v189);
          }
          else {
            uint64_t v198 = 0LL;
          }
          sub_229AFC((uint64_t)v196, v198, v370);
          if (buf != (_BYTE *)v194)
          {
            v205 = (_BYTE *)v194[1];
            if (v205 != buf)
            {
              uint64_t v206 = *v194;
              *(void *)(v206 + 8) = v205;
              *(void *)v194[1] = v206;
              uint64_t v207 = *(void *)buf;
              *(void *)(*(void *)buf + 8LL) = v194;
              uint64_t *v194 = v207;
              v194[1] = (uint64_t)buf;
              --v185[2];
              *(void *)buf = v194;
              ++*(void *)&buf[16];
            }
          }

void sub_BF798( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, void *__p, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int buf, uint64_t a33, __int16 a34, int a35, __int16 a36, uint64_t a37, __int16 a38, uint64_t a39, __int16 a40, int a41, uint64_t a42, std::__shared_weak_count *a43)
{
  char v46 = *(uint64_t **)(v44 + 112);
  *(void *)(v44 + 112) = 0LL;
  if (v46) {
    sub_C8B54(v46);
  }
  std::string::size_type v47 = *(uint64_t **)(v44 + 104);
  *(void *)(v44 + 104) = 0LL;
  if (v47) {
    sub_C8B54(v47);
  }
  *(void *)(v44 + 16) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v44 + 40));
  operator delete((void *)v44);
  sub_32C8C(a21);
  sub_32C8C(a24);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_C07E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v142 = a3;
  uint64_t v144 = a2;
  if (!a2)
  {
    v127 = (os_log_t *)sub_138E8(13);
    uint64_t v128 = *v127;
    if (*v127 && os_log_type_enabled(*v127, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v147 = 1024;
      int v148 = 4358;
      _os_log_impl(&dword_0, v128, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = sub_138E8(1);
  uint64_t v5 = sub_138E8(4);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if ((*(void *)(v4 + 8) & 1) != 0)
  {
LABEL_10:
    unint64_t v11 = *(os_log_s **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 3;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v147 = 1024;
      int v148 = 4360;
      __int16 v149 = 1024;
      LODWORD(v150) = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Previous input stream count: %u", buf, 0x18u);
    }
  }

void sub_C14C0(_Unwind_Exception *a1)
{
}

uint64_t *sub_C1554(uint64_t *result, int a2, uint64_t a3)
{
  if (*((_DWORD *)result + 146) != a2)
  {
    uint64_t v4 = result;
    *((_DWORD *)result + 146) = a2;
    sub_BA95C((uint64_t)result);
    unsigned int v5 = *((_DWORD *)v4 + 2);
    uint64_t v6 = sub_138E8(2);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      uint64_t v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v8 = 136315650;
          uint64_t v9 = "VirtualAudio_Utilities.cpp";
          __int16 v10 = 1024;
          int v11 = 345;
          __int16 v12 = 1024;
          unsigned int v13 = v5;
          _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device ID: %u", (uint8_t *)&v8, 0x18u);
        }
      }
    }

    return sub_57ADC((uint64_t *)(a3 + 32), v5, v5);
  }

  return result;
}

void sub_C1654(uint64_t a1)
{
  uint64_t v58 = 0x676C6F6274687372LL;
  int v59 = 0;
  uint64_t v56 = 0x676C6F6276636474LL;
  int v57 = 0;
  uint64_t v54 = 0x676C6F6276636472LL;
  int v55 = 0;
  sub_6DD4();
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v3 = *(void *)(a1 + 1008);
  strcpy((char *)buf, "tdcvbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  unint64_t v4 = sub_5C2F8(v3);
  *((void *)&v7 + 1) = v5;
  *(void *)&__int128 v7 = v4;
  uint64_t v6 = v7 >> 32;
  if ((v6 & 0xFF00000000LL) != 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 1008) + 16LL))( *(void *)(a1 + 1008),  &v58))
  {
    int v9 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 1008) + 16LL))(*(void *)(a1 + 1008), &v56);
    int v10 = (_DWORD)v8 ? v9 : 0;
    if (v10 == 1)
    {
      double v53 = 0.0;
      int v52 = 8;
      (*(void (**)(void, uint64_t *, void, void, int *, double *))(**(void **)(a1 + 1008) + 40LL))( *(void *)(a1 + 1008),  &v58,  0LL,  0LL,  &v52,  &v53);
      double v51 = 0.0;
      int v52 = 8;
      (*(void (**)(void, uint64_t *, void, void, int *, double *))(**(void **)(a1 + 1008) + 40LL))( *(void *)(a1 + 1008),  &v54,  0LL,  0LL,  &v52,  &v51);
      uint64_t v11 = sub_138E8(1);
      uint64_t v12 = sub_138E8(39);
      char v13 = 0;
      uint64_t v14 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v15 = *(void *)(v11 + 8);
      while (1)
      {
        uint64_t v16 = (int)buf[v14];
        char v17 = v13;
        if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
          break;
        }
        char v13 = 1;
        uint64_t v14 = 1LL;
        if ((v17 & 1) != 0)
        {
          if ((v15 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
      }

      if ((v15 & v16) == 0) {
        uint64_t v11 = v12;
      }
      if ((*(void *)(v11 + 8) & 1) != 0)
      {
LABEL_17:
        uint64_t v18 = *(os_log_s **)v11;
        if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          __int16 v66 = 1024;
          int v67 = 1055;
          __int16 v68 = 2048;
          double v69 = v53;
          __int16 v70 = 2048;
          int v71 = *(std::string **)&v51;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Telephony hardware sample rate is %f, vocoder sample rate %f",  (uint8_t *)buf,  0x26u);
        }
      }

void sub_C1CE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
  }
  _Unwind_Resume(a1);
}

void sub_C1D5C(void *a1, int a2, int a3)
{
  int v6 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v7 = a1[78];
  uint64_t v8 = sub_138E8(1);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    int v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = "not ";
        int v71 = "VirtualAudio_Device.cpp";
        *(_DWORD *)buf = 136315650;
        if (v7) {
          int v10 = "";
        }
        __int16 v72 = 1024;
        int v73 = 1618;
        __int16 v74 = 2080;
        int64_t v75 = (std::string *)v10;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Currently sample rate changes are %sblocked",  buf,  0x1Cu);
      }
    }
  }

  if (!v7)
  {
    uint64_t v11 = sub_138E8(1);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      uint64_t v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          memset(&v66, 0, sizeof(v66));
          std::string::append(&v66, "[ ", 2uLL);
          char v13 = (void *)a1[76];
          uint64_t v14 = a1 + 77;
          if (v13 != a1 + 77)
          {
            do
            {
              uint64_t v15 = (void *)v13[1];
              uint64_t v16 = v13;
              if (v15)
              {
                do
                {
                  uint64_t v17 = v15;
                  uint64_t v15 = (void *)*v15;
                }

                while (v15);
              }

              else
              {
                do
                {
                  uint64_t v17 = (void *)v16[2];
                  BOOL v58 = *v17 == (void)v16;
                  uint64_t v16 = v17;
                }

                while (!v58);
              }

              int v18 = *((_DWORD *)v13 + 7);
              int v19 = "????";
              if (v18 == 1) {
                int v19 = "Telephony Route";
              }
              if (v18) {
                uint64_t v20 = (char *)v19;
              }
              else {
                uint64_t v20 = "Shared Hardware";
              }
              sub_7D084(&v67, v20);
              if (v17 == v14) {
                double v21 = "";
              }
              else {
                double v21 = ", ";
              }
              uint64_t v22 = std::string::append(&v67, v21, 2LL * (v17 != v14));
              __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
              int64_t cap = v22->__r_.__value_.__l.__cap_;
              *(_OWORD *)std::string __p = v23;
              v22->__r_.__value_.__l.__size_ = 0LL;
              v22->__r_.__value_.__l.__cap_ = 0LL;
              v22->__r_.__value_.__r.__words[0] = 0LL;
              if (cap >= 0) {
                char v24 = __p;
              }
              else {
                char v24 = (void **)__p[0];
              }
              if (cap >= 0) {
                std::string::size_type v25 = HIBYTE(cap);
              }
              else {
                std::string::size_type v25 = (std::string::size_type)__p[1];
              }
              std::string::append(&v66, (const std::string::value_type *)v24, v25);
              if (SHIBYTE(cap) < 0) {
                operator delete(__p[0]);
              }
              char v13 = v17;
            }

            while (v17 != v14);
          }

          std::string::append(&v66, " ]", 2uLL);
          if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v26 = &v66;
          }
          else {
            uint64_t v26 = (std::string *)v66.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          int v71 = "VirtualAudio_Device.cpp";
          __int16 v72 = 1024;
          int v73 = 1620;
          __int16 v74 = 2080;
          int64_t v75 = v26;
          _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current Assertions: %s", buf, 0x1Cu);
        }
      }
    }
  }

  uint64_t v27 = a1 + 77;
  uint64_t v28 = a1[77];
  if (a2)
  {
    unint64_t v29 = a1 + 77;
    if (v28)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v29 = (void *)v28;
          int v30 = *(_DWORD *)(v28 + 28);
          if (v30 <= a3) {
            break;
          }
          uint64_t v28 = *(void *)v28;
          uint64_t v27 = v29;
          if (!*v29) {
            goto LABEL_50;
          }
        }

        if (v30 >= a3) {
          break;
        }
        uint64_t v28 = *(void *)(v28 + 8);
        if (!v28)
        {
          uint64_t v27 = v29 + 1;
          goto LABEL_50;
        }
      }

      uint64_t v44 = sub_138E8(1);
      if ((*(_BYTE *)(v44 + 8) & 1) != 0)
      {
        uint64_t v39 = *(os_log_s **)v44;
        if (*(void *)v44)
        {
          if (os_log_type_enabled(*(os_log_t *)v44, OS_LOG_TYPE_DEBUG))
          {
            char v45 = "????";
            if (a3 == 1) {
              char v45 = "Telephony Route";
            }
            if (a3) {
              int v46 = (char *)v45;
            }
            else {
              int v46 = "Shared Hardware";
            }
            sub_7D084(__p, v46);
            if (cap >= 0) {
              BOOL v47 = __p;
            }
            else {
              BOOL v47 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315650;
            int v71 = "VirtualAudio_Device.cpp";
            __int16 v72 = 1024;
            int v73 = 1625;
            __int16 v74 = 2080;
            int64_t v75 = (std::string *)v47;
            uint64_t v43 = "%25s:%-5d %s already exists within mSampleRateAssertions";
LABEL_87:
            _os_log_impl(&dword_0, v39, OS_LOG_TYPE_DEBUG, v43, buf, 0x1Cu);
            if ((SHIBYTE(cap) & 0x80000000) == 0) {
              goto LABEL_99;
            }
            std::string v48 = __p[0];
            goto LABEL_98;
          }
        }
      }
    }

    else
    {
LABEL_50:
      double v31 = operator new(0x20uLL);
      v31[7] = a3;
      *(void *)double v31 = 0LL;
      *((void *)v31 + 1) = 0LL;
      *((void *)v31 + 2) = v29;
      *uint64_t v27 = v31;
      uint64_t v32 = *(void *)a1[76];
      if (v32)
      {
        a1[76] = v32;
        double v31 = (_DWORD *)*v27;
      }

      sub_7A420((uint64_t *)a1[77], (uint64_t *)v31);
      ++a1[78];
    }
  }

  else
  {
    if (v28)
    {
      uint64_t v33 = a1 + 77;
      uint64_t v34 = a1[77];
      do
      {
        int v35 = *(_DWORD *)(v34 + 28);
        BOOL v36 = v35 < a3;
        if (v35 >= a3) {
          uint64_t v37 = (uint64_t *)v34;
        }
        else {
          uint64_t v37 = (uint64_t *)(v34 + 8);
        }
        if (!v36) {
          uint64_t v33 = (void *)v34;
        }
        uint64_t v34 = *v37;
      }

      while (*v37);
      if (v33 != v27 && *((_DWORD *)v33 + 7) <= a3)
      {
        BOOL v49 = (void *)v33[1];
        if (v49)
        {
          do
          {
            unint64_t v50 = v49;
            BOOL v49 = (void *)*v49;
          }

          while (v49);
        }

        else
        {
          double v51 = v33;
          do
          {
            unint64_t v50 = (void *)v51[2];
            BOOL v58 = *v50 == (void)v51;
            double v51 = v50;
          }

          while (!v58);
        }

        if ((void *)a1[76] == v33) {
          a1[76] = v50;
        }
        --a1[78];
        sub_911E8((uint64_t *)v28, v33);
        std::string v48 = v33;
LABEL_98:
        operator delete(v48);
        goto LABEL_99;
      }
    }

    uint64_t v38 = sub_138E8(1);
    if ((*(_BYTE *)(v38 + 8) & 1) != 0)
    {
      uint64_t v39 = *(os_log_s **)v38;
      if (*(void *)v38)
      {
        if (os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v40 = "????";
          if (a3 == 1) {
            uint64_t v40 = "Telephony Route";
          }
          if (a3) {
            char v41 = (char *)v40;
          }
          else {
            char v41 = "Shared Hardware";
          }
          sub_7D084(__p, v41);
          if (cap >= 0) {
            uint64_t v42 = __p;
          }
          else {
            uint64_t v42 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          int v71 = "VirtualAudio_Device.cpp";
          __int16 v72 = 1024;
          int v73 = 1635;
          __int16 v74 = 2080;
          int64_t v75 = (std::string *)v42;
          uint64_t v43 = "%25s:%-5d Unable to find assertion %s within mSampleRateAssertions";
          goto LABEL_87;
        }
      }
    }
  }

LABEL_99:
  uint64_t v52 = a1[78];
  if ((v7 != 0) != (v52 != 0))
  {
    uint64_t v53 = sub_138E8(1);
    if ((*(_BYTE *)(v53 + 8) & 1) != 0)
    {
      uint64_t v54 = *(os_log_s **)v53;
      if (*(void *)v53)
      {
        if (os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG))
        {
          int v55 = "un";
          int v71 = "VirtualAudio_Device.cpp";
          *(_DWORD *)buf = 136315650;
          if (v52) {
            int v55 = "";
          }
          __int16 v72 = 1024;
          int v73 = 1642;
          __int16 v74 = 2080;
          int64_t v75 = (std::string *)v55;
          _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Updating streams to %sblock sample rate changes",  buf,  0x1Cu);
        }
      }
    }

    char v56 = 1;
    do
    {
      char v57 = v56;
      BOOL v58 = (v56 & 1) == 0;
      if ((v56 & 1) != 0) {
        uint64_t v59 = 63LL;
      }
      else {
        uint64_t v59 = 66LL;
      }
      if (v58) {
        uint64_t v60 = 65LL;
      }
      else {
        uint64_t v60 = 62LL;
      }
      uint64_t v61 = a1[v59];
      uint64_t v62 = a1[v60];
      unint64_t v63 = v61 - v62;
      if ((v63 & 0x7FFFFFFF8LL) != 0)
      {
        uint64_t v64 = 0LL;
        uint64_t v65 = v63 >> 3;
        else {
          uint64_t v65 = v65;
        }
        do
          *(_BYTE *)(*(void *)(v62 + 8 * v64++) + 129LL) = v52 != 0;
        while (v65 != v64);
      }

      char v56 = 0;
    }

    while ((v57 & 1) != 0);
  }

  if (v6) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

    if (!v39) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }

    sub_7D084(buf, v52);
    char v56 = (void **)(a1 + 144);
    *(_OWORD *)char v56 = *(_OWORD *)buf;
    *(void *)(a1 + 160) = *(void *)&buf[16];
    *(_DWORD *)(a1 + 136) = a5;
    char v57 = (os_log_t *)sub_138E8(20);
    BOOL v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v59 = *(void *)(a1 + 144);
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1050;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&uint8_t buf[20] = v59;
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : dspchain device type: %s",  buf,  0x1Cu);
    }

    sub_149990(v74);
    sub_D0C4C((void *)v75[2]);
    uint64_t v60 = v75[0];
    v75[0] = 0LL;
    if (v60) {
      operator delete(v60);
    }
    if (v73 < 0) {
      operator delete(v72[0]);
    }
    uint64_t v61 = atomic_load((unsigned __int8 *)&qword_49D6A8);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_49D6A8))
    {
      int v71 = (char *)operator new(0x48uLL);
      *((void *)v71 + 1) = 0LL;
      *((void *)v71 + 2) = 0LL;
      *(void *)int v71 = off_47DEB8;
      *((void *)v71 + 4) = 1936747629LL;
      *((_DWORD *)v71 + 10) = 0;
      *(void *)(v71 + 60) = 0x100000001LL;
      *(_OWORD *)(v71 + 44) = xmmword_402D48;
      *((void *)v71 + 3) = off_47DEF0;
      qword_49D698 = (uint64_t)(v71 + 24);
      qword_49D6A0 = (uint64_t)v71;
      __cxa_guard_release(&qword_49D6A8);
    }

    uint64_t v62 = qword_49D698;
    unint64_t v63 = (std::__shared_weak_count *)qword_49D6A0;
    *(void *)buf = qword_49D698;
    *(void *)&buf[8] = qword_49D6A0;
    if (qword_49D6A0)
    {
      uint64_t v64 = (unint64_t *)(qword_49D6A0 + 8);
      do
        uint64_t v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }

    sub_143208((void *)a1, v62, (uint64_t)v63);
    if (v63)
    {
      std::string v66 = (unint64_t *)&v63->__shared_owners_;
      do
        std::string v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }

    __int16 v68 = (os_log_t *)sub_138E8(20);
    double v69 = *v68;
    if (*v68)
    {
      if (os_log_type_enabled(*v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1375;
        _os_log_impl(&dword_0, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Loading AUSPL", buf, 0x12u);
      }
    }
  }

void sub_C2460( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (v29) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C250C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  if (!*(void *)(a1 + 1008))
  {
    double v51 = (os_log_t *)sub_138E8(13);
    uint64_t v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)BOOL v77 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)&v77[10] = 1208;
      _os_log_impl(&dword_0, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (sub_56120() == 2 || sub_56120() == 3 || sub_56120() == 5)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(2);
    unint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(&__p, *(unsigned int *)(a1 + 576));
      uint64_t v5 = SHIBYTE(v58[1]) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)BOOL v77 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)&v77[10] = 1107;
      *(_WORD *)&v77[14] = 2080;
      *(void *)&v77[16] = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateSoundAutoConfig for device %s", buf, 0x1Cu);
      if (SHIBYTE(v58[1]) < 0) {
        operator delete(__p);
      }
    }

    LODWORD(v73) = *(_DWORD *)(a1 + 8);
    std::string __p = (void *)0x676C6F6273616369LL;
    LODWORD(v58[0]) = 0;
    sub_C57E0((uint64_t)buf, (AudioObjectID *)&v73, (AudioObjectPropertyAddress *)&__p);
    if (v77[20])
    {
      int v6 = *(const void **)&v77[12];
      *(void *)&v77[12] = 0LL;
      uint64_t v65 = &off_486378;
      CFTypeRef cf = v6;
      char v67 = 1;
      sub_39FD8(&v77[4]);
      if (v67)
      {
        CFTypeRef v7 = cf;
        if (cf) {
          CFRetain(cf);
        }
        sub_3617C(&v56, v7);
        LODWORD(__p) = *(_DWORD *)(*(void *)(a1 + 1008) + 280LL);
        BYTE4(__p) = 1;
        if (!v56)
        {
          uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
        }

        sub_342F30(v58, (const __CFDictionary *)v56, (const UInt8 *)"position");
        if (!v56)
        {
          int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v55, "Could not construct");
        }

        sub_342F30(v61, (const __CFDictionary *)v56, (const UInt8 *)"role");
        __int16 v64 = sub_34336C((const __CFDictionary **)&v56);
        id v8 = *(id *)sub_138E8(24);
        int v9 = v8;
        if (v8)
        {
          int v10 = (os_log_s *)v8;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            sub_7D084(&v68, "{ ");
            __int16 v72 = &v68;
            sub_7D084(&v69, "calibration");
            if ((v71 & 0x80u) == 0) {
              size_t v11 = v71;
            }
            else {
              size_t v11 = v70;
            }
            uint64_t v12 = &v73;
            sub_D0924((uint64_t)&v73, v11 + 2);
            if ((v75 & 0x80u) != 0) {
              uint64_t v12 = v73;
            }
            if (v11)
            {
              if ((v71 & 0x80u) == 0) {
                char v13 = &v69;
              }
              else {
                char v13 = v69;
              }
              memmove(v12, v13, v11);
            }

            strcpy((char *)v12 + v11, ": ");
            if ((v75 & 0x80u) == 0) {
              uint64_t v14 = (const std::string::value_type *)&v73;
            }
            else {
              uint64_t v14 = (const std::string::value_type *)v73;
            }
            if ((v75 & 0x80u) == 0) {
              std::string::size_type v15 = v75;
            }
            else {
              std::string::size_type v15 = v74;
            }
            std::string::append(&v68, v14, v15);
            if ((_BYTE)v64) {
              uint64_t v16 = "true";
            }
            else {
              uint64_t v16 = "false";
            }
            uint64_t v17 = 4LL;
            if (!(_BYTE)v64) {
              uint64_t v17 = 5LL;
            }
            if (HIBYTE(v64)) {
              int v18 = v16;
            }
            else {
              int v18 = "unspecified";
            }
            if (HIBYTE(v64)) {
              std::string::size_type v19 = v17;
            }
            else {
              std::string::size_type v19 = 11LL;
            }
            std::string::append(&v68, v18, v19);
            std::string::append(&v68, ", ", 2uLL);
            sub_7D084(&v73, "position");
            sub_22B940(&v72, (const void **)&v73, (uint64_t)v58);
            std::string::append(&v68, ", ", 2uLL);
            sub_7D084(&v73, "role");
            sub_22B940(&v72, (const void **)&v73, (uint64_t)v61);
            std::string::append(&v68, ", ", 2uLL);
            sub_7D084(&v69, "mode");
            if ((v71 & 0x80u) == 0) {
              size_t v20 = v71;
            }
            else {
              size_t v20 = v70;
            }
            double v21 = &v73;
            sub_D0924((uint64_t)&v73, v20 + 2);
            if ((v75 & 0x80u) != 0) {
              double v21 = v73;
            }
            if (v20)
            {
              if ((v71 & 0x80u) == 0) {
                uint64_t v22 = &v69;
              }
              else {
                uint64_t v22 = v69;
              }
              memmove(v21, v22, v20);
            }

            strcpy((char *)v21 + v20, ": ");
            if ((v75 & 0x80u) == 0) {
              __int128 v23 = (const std::string::value_type *)&v73;
            }
            else {
              __int128 v23 = (const std::string::value_type *)v73;
            }
            if ((v75 & 0x80u) == 0) {
              std::string::size_type v24 = v75;
            }
            else {
              std::string::size_type v24 = v74;
            }
            std::string::append(&v68, v23, v24);
            if (BYTE4(__p))
            {
              sub_2CA1C(&v73, __p);
              if ((v75 & 0x80u) == 0) {
                std::string::size_type v25 = (const std::string::value_type *)&v73;
              }
              else {
                std::string::size_type v25 = (const std::string::value_type *)v73;
              }
              if ((v75 & 0x80u) == 0) {
                std::string::size_type v26 = v75;
              }
              else {
                std::string::size_type v26 = v74;
              }
              std::string::append(&v68, v25, v26);
            }

            else
            {
              std::string::append(&v68, "unspecified", 0xBuLL);
            }

            std::string::append(&v68, " }", 2uLL);
            if ((v68.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v27 = &v68;
            }
            else {
              uint64_t v27 = (std::string *)v68.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)BOOL v77 = "SoundAutoConfigUtilities.mm";
            *(_WORD *)&v77[8] = 1024;
            *(_DWORD *)&v77[10] = 160;
            *(_WORD *)&v77[14] = 2080;
            *(void *)&v77[16] = v27;
            _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "%25s:%-5d Parsed SoundAutoConfig dictionary into ConcreteSoundAutoConfigCondition %s.",  buf,  0x1Cu);
          }
        }

        if (v56) {
          CFRelease(v56);
        }
        uint64_t v28 = *(void *)(a1 + 1008);
        int v73 = &dword_4;
        *(void *)&v77[4] = __p;
        sub_C590C(&v77[12], (__int128 *)v58);
        sub_C590C(v80, (__int128 *)v61);
        __int16 v81 = v64;
        int v82 = 1;
        (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v28 + 424LL))( v28,  &v73,  buf,  1869968496LL);
        sub_9DBD0((uint64_t)&v77[4]);
        if (v63 && v62 < 0) {
          operator delete(v61[0]);
        }
        if (v60 && v59 < 0) {
          operator delete(v58[0]);
        }
        if (v67) {
          sub_39FD8(&v65);
        }
      }
    }
  }

  char v29 = *(_BYTE *)sub_2FC9D4();
  int v30 = (os_log_t *)sub_138E8(2);
  double v31 = *v30;
  if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_INFO))
  {
    sub_2CA1C(&__p, *(unsigned int *)(a1 + 576));
    uint64_t v32 = SHIBYTE(v58[1]) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315650;
    *(void *)BOOL v77 = "VirtualAudio_Device.cpp";
    *(_WORD *)&v77[8] = 1024;
    *(_DWORD *)&v77[10] = 1121;
    *(_WORD *)&v77[14] = 2080;
    *(void *)&v77[16] = v32;
    _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateLateNightMode for device %s", buf, 0x1Cu);
    if (SHIBYTE(v58[1]) < 0) {
      operator delete(__p);
    }
  }

  uint64_t v33 = *(void *)(a1 + 1008);
  std::string __p = &dword_0 + 1;
  v77[4] = v29 & 1;
  int v82 = 0;
  (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v33 + 424LL))(v33, &__p, buf, 1869968496LL);
  sub_9DBD0((uint64_t)&v77[4]);
  char v34 = *(_BYTE *)sub_2FC9D4();
  int v35 = (os_log_t *)sub_138E8(2);
  BOOL v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_INFO))
  {
    sub_2CA1C(&__p, *(unsigned int *)(a1 + 576));
    uint64_t v37 = SHIBYTE(v58[1]) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315650;
    *(void *)BOOL v77 = "VirtualAudio_Device.cpp";
    *(_WORD *)&v77[8] = 1024;
    *(_DWORD *)&v77[10] = 1128;
    *(_WORD *)&v77[14] = 2080;
    *(void *)&v77[16] = v37;
    _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateEnhanceDialog for device %s", buf, 0x1Cu);
    if (SHIBYTE(v58[1]) < 0) {
      operator delete(__p);
    }
  }

  uint64_t v38 = *(void *)(a1 + 1008);
  std::string __p = &dword_0 + 2;
  v77[4] = (v34 & 4) != 0;
  int v82 = 0;
  (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v38 + 424LL))(v38, &__p, buf, 1869968496LL);
  sub_9DBD0((uint64_t)&v77[4]);
  uint64_t result = sub_1CCDF8();
  if ((_DWORD)result)
  {
    uint64_t v40 = sub_5954C();
    unsigned int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 288LL))(v40);
    if (v41 >= 4)
    {
      uint64_t v42 = (os_log_t *)sub_138E8(10);
      uint64_t v43 = *v42;
      if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)BOOL v77 = "VirtualAudio_Device.cpp";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 1193;
        *(_WORD *)&v77[14] = 1024;
        *(_DWORD *)&v77[16] = v41;
        _os_log_impl(&dword_0, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d EnhanceDialogLevel [%u] is out-of-range", buf, 0x18u);
      }

      unsigned int v41 = 0;
    }

    uint64_t v44 = (os_log_t *)sub_138E8(2);
    char v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(&__p, *(unsigned int *)(a1 + 576));
      int v46 = SHIBYTE(v58[1]) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)BOOL v77 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)&v77[10] = 1135;
      *(_WORD *)&v77[14] = 2080;
      *(void *)&v77[16] = v46;
      _os_log_impl(&dword_0, v45, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateEnhanceDialogLevel for device %s", buf, 0x1Cu);
      if (SHIBYTE(v58[1]) < 0) {
        operator delete(__p);
      }
    }

    if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 1008) + 376LL))( *(void *)(a1 + 1008),  1685287015LL,  1936289907LL,  0LL,  1LL))
    {
      LODWORD(v73) = v41 == 0;
      (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, uint64_t, void))(**(void **)(a1 + 1008)
                                                                                          + 400LL))( *(void *)(a1 + 1008),  1685287015LL,  1936289907LL,  &v73,  4LL,  1LL,  0LL);
      BOOL v47 = (os_log_t *)sub_138E8(2);
      std::string v48 = *v47;
      if (*v47)
      {
        if (os_log_type_enabled(*v47, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(&__p, 1936289907LL);
          BOOL v49 = SHIBYTE(v58[1]) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136315906;
          *(void *)BOOL v77 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v77[8] = 1024;
          *(_DWORD *)&v77[10] = 1147;
          *(_WORD *)&v77[14] = 2080;
          *(void *)&v77[16] = v49;
          __int16 v78 = 1024;
          int v79 = (int)v73;
          _os_log_impl(&dword_0, v48, OS_LOG_TYPE_INFO, "%25s:%-5d set property %s to %u on the graph", buf, 0x22u);
          if (SHIBYTE(v58[1]) < 0) {
            operator delete(__p);
          }
        }
      }
    }

    uint64_t v50 = *(void *)(a1 + 1008);
    std::string __p = &dword_4 + 3;
    *(_DWORD *)&v77[4] = v41;
    int v82 = 4;
    (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v50 + 424LL))( v50,  &__p,  buf,  1869968496LL);
    uint64_t result = sub_9DBD0((uint64_t)&v77[4]);
  }

  if (v2) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

void sub_C3148( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *__p, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }

  sub_C58BC((uint64_t)&a10);
  sub_7A708((const void **)&a9);
  if (a28) {
    sub_39FD8(&a26);
  }
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v56 + 24LL))(v56);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C3328(unint64_t a1)
{
  if (!*(void *)(a1 + 1008))
  {
    int v73 = (os_log_t *)sub_138E8(13);
    std::string::size_type v74 = *v73;
    if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1295;
      _os_log_impl(&dword_0, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_6DD4();
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v3 = *(unsigned int *)(a1 + 576);
  sub_75418(buf, *(void *)(a1 + 568));
  unint64_t v4 = (unint64_t)*(unsigned int *)&buf[4] << 32;
  sub_52EF0((uint64_t)buf);
  if (((_DWORD)v3 == 1987277417 || (_DWORD)v3 == 1986291046) && v4 == 0x7261772000000000LL)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(41);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, v3);
        CFTypeRef v7 = v88 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1309;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&uint8_t buf[20] = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Disabling DRC in kVirtualAudioPlugInMode_Raw for device %s",  buf,  0x1Cu);
        if (v88 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v8 = *(void *)(a1 + 1008);
  strcpy(buf, "newsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v9 = sub_5C2F8(v8);
  *((void *)&v12 + 1) = v10;
  *(void *)&__int128 v12 = v9;
  uint64_t v11 = v12 >> 32;
  if ((v11 & 0xFF00000000LL) == 0 || !(_DWORD)v11)
  {
    __int128 v23 = (os_log_t *)sub_138E8(41);
    std::string::size_type v24 = *v23;
    if (*v23)
    {
      uint64_t v18 = 0LL;
      std::string::size_type v19 = 0LL;
      if (!os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1227;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VirtualAudio_Device::IsAdaptiveVolumeEnabled() - software volume is disabled.",  buf,  0x12u);
    }

void sub_C42A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (a10) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C4704(uint64_t a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 416LL))(v5, a1, 1LL, 0LL);
  if (!v6) {
    return 0LL;
  }
  uint64_t v3 = sub_AADB0(v5, a2);
  if (v6) {
    sub_83284((uint64_t)v5);
  }
  return v3;
}

void sub_C4778( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    sub_83284((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_C4794(uint64_t *a1)
{
}

void sub_C47C0(_Unwind_Exception *a1)
{
}

uint64_t sub_C47D4(uint64_t a1, char *a2, const void **a3)
{
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_C4814(uint64_t a1, char *a2, const void **a3)
{
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_C4854(uint64_t a1, char *a2, const void **a3)
{
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

const void **sub_C4894(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_C48C8(uint64_t a1, io_iterator_t iterator)
{
  io_service_t MatchingService = 0;
  while (1)
  {
    uint64_t result = IOIteratorNext(iterator);
    io_object_t v5 = result;
    if (!(_DWORD)result) {
      break;
    }
    if (MatchingService)
    {
      char v6 = (os_log_t *)sub_138E8(41);
      os_log_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 277;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&uint8_t buf[20] = MatchingService;
        uint64_t v8 = v7;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
        uint64_t v10 = "%25s:%-5d AVHIDEventListener::Match() - found multiple matched services. Ignoring matched service %u.";
LABEL_10:
        _os_log_impl(&dword_0, v8, v9, v10, buf, 0x18u);
      }
    }

    else
    {
      *(void *)entryID = 0LL;
      IORegistryEntryGetRegistryEntryID(result, (uint64_t *)entryID);
      uint64_t v11 = IORegistryEntryIDMatching(*(uint64_t *)entryID);
      io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v11);
      __int128 v12 = (os_log_t *)sub_138E8(41);
      os_log_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 272;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&uint8_t buf[20] = MatchingService;
        uint64_t v8 = v13;
        os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
        uint64_t v10 = "%25s:%-5d AVHIDEventListener::Match() - found matched service %u.";
        goto LABEL_10;
      }
    }

    IOObjectRelease(v5);
  }

  if (MatchingService)
  {
    char v14 = IOHIDDeviceCreate(kCFAllocatorDefault, MatchingService);
    uint64_t v15 = (os_log_t *)sub_138E8(41);
    uint64_t v16 = *v15;
    if (v14)
    {
      if (v16 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 308;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AVHIDEventListener::SetupMatchedServiceInputHandler() - created device.",  buf,  0x12u);
      }

      uint64_t v17 = (uint8_t *)a1;
      if (*(void *)(a1 + 24))
      {
        uint64_t v18 = (os_log_t *)sub_138E8(41);
        std::string::size_type v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 294;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AVHIDEventListener::CloseDevice() - closing device.",  buf,  0x12u);
        }

        sub_B9D1C(a1, 0);
        IOHIDDeviceClose(*(IOHIDDeviceRef *)(a1 + 24), 0);
        IOHIDDeviceCancel(*(IOHIDDeviceRef *)(a1 + 24));
        int v20 = *(const void **)(a1 + 24);
        *(void *)(a1 + 24) = v14;
        uint64_t v17 = (uint8_t *)a1;
        if (v20)
        {
          CFRelease(v20);
          char v14 = *(__IOHIDDevice **)(a1 + 24);
        }
      }

      else
      {
        *(void *)(a1 + 24) = v14;
      }

      IOHIDDeviceRegisterInputReportCallback(v14, v17 + 32, 26LL, (IOHIDReportCallback)sub_C5048, v17);
      double v21 = *(__IOHIDDevice **)(a1 + 24);
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = sub_C54E0;
      uint64_t v32 = &unk_46E878;
      uint64_t v33 = a1;
      IOHIDDeviceSetCancelHandler(v21, buf);
      IOHIDDeviceSetDispatchQueue(*(IOHIDDeviceRef *)(a1 + 24), *(dispatch_queue_t *)a1);
      IOHIDDeviceActivate(*(IOHIDDeviceRef *)(a1 + 24));
      IOReturn v22 = IOHIDDeviceOpen(*(IOHIDDeviceRef *)(a1 + 24), 0);
      if (v22)
      {
        __int128 v23 = (os_log_t *)sub_138E8(41);
        std::string::size_type v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)entryID = 136315650;
          *(void *)&entryID[4] = "AVHIDEventListener.h";
          __int16 v27 = 1024;
          int v28 = 324;
          __int16 v29 = 1024;
          IOReturn v30 = v22;
          _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AVHIDEventListener::SetupMatchedServiceInputHandler() - error %u opening device.",  entryID,  0x18u);
        }

        IOHIDDeviceCancel(*(IOHIDDeviceRef *)(a1 + 24));
      }

      else
      {
        std::mutex::lock((std::mutex *)(a1 + 64));
        sub_B9D1C(a1, *(void *)(a1 + 144) != 0LL);
        std::mutex::unlock((std::mutex *)(a1 + 64));
      }
    }

    else if (v16 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 335;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AVHIDEventListener::SetupMatchedServiceInputHandler() - failed to create device.",  buf,  0x12u);
    }

    return IOObjectRelease(MatchingService);
  }

  return result;
}

void sub_C4D74(_Unwind_Exception *a1)
{
}

uint64_t sub_C4DA0(uint64_t a1)
{
  return sub_C48C8(***(void ***)(a1 + 32), *(_DWORD *)(***(void ***)(a1 + 32) + 16LL));
}

void sub_C4E08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      std::string::size_type v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    IOReturn v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int128 v23 = v22;
      std::string::size_type v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        std::string::size_type v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      __int16 v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        std::string::size_type v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0xC4DD8LL);
}

void sub_C5048(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a2)
  {
    os_log_t v7 = (os_log_t *)sub_138E8(41);
    os_log_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v42 = 136315650;
      CFNumberRef v43 = "AVHIDEventListener.h";
      __int16 v44 = 1024;
      int v45 = 431;
      __int16 v46 = 1024;
      LODWORD(v47) = a2;
      os_log_type_t v9 = "%25s:%-5d AVHIDEventListener - input report I/O error: %d";
      uint64_t v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
LABEL_5:
      uint32_t v12 = 24;
LABEL_6:
      _os_log_impl(&dword_0, v10, v11, v9, (uint8_t *)&v42, v12);
    }
  }

  else if (a1)
  {
    int v16 = *(_DWORD *)(a1 + 152);
    std::mutex::lock((std::mutex *)(a1 + 64));
    uint64_t v17 = *(void *)(a1 + 144);
    std::mutex::unlock((std::mutex *)(a1 + 64));
    if (v17)
    {
      if (a5 == 3)
      {
        if (!v16)
        {
          char v34 = (os_log_t *)sub_138E8(41);
          int v35 = *v34;
          if (*v34)
          {
            if (os_log_type_enabled(*v34, OS_LOG_TYPE_DEBUG))
            {
              int v42 = 136315394;
              CFNumberRef v43 = "AVHIDEventListener.h";
              __int16 v44 = 1024;
              int v45 = 461;
              _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AVHIDEventListener::OnInputReport() - received DRC data input report.",  (uint8_t *)&v42,  0x12u);
            }
          }
        }

        int v23 = *(_DWORD *)(a1 + 152);
        if (!v23)
        {
          BOOL v36 = (os_log_t *)sub_138E8(41);
          uint64_t v37 = *v36;
          if (*v36)
          {
            if (os_log_type_enabled(*v36, OS_LOG_TYPE_DEBUG))
            {
              int v42 = 136315394;
              CFNumberRef v43 = "AVHIDEventListener.h";
              __int16 v44 = 1024;
              int v45 = 344;
              _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - received AVClient DRC payload.",  (uint8_t *)&v42,  0x12u);
            }
          }
        }

        unsigned int v24 = *(unsigned __int8 *)(a6 + 1);
        char v25 = *(_BYTE *)(a6 + 2);
        if ((v25 & 2) != 0) {
          float v26 = 1.0;
        }
        else {
          float v26 = 0.0;
        }
        if (!v23)
        {
          uint64_t v38 = (os_log_t *)sub_138E8(41);
          uint64_t v39 = *v38;
          if (*v38)
          {
            if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v40 = "1";
              CFNumberRef v43 = "AVHIDEventListener.h";
              __int16 v44 = 1024;
              int v45 = 352;
              __int16 v46 = 2048;
              if ((v25 & 1) != 0) {
                unsigned int v41 = "1";
              }
              else {
                unsigned int v41 = "0";
              }
              int v42 = 136316162;
              if ((v25 & 2) == 0) {
                uint64_t v40 = "0";
              }
              double v47 = (double)v24;
              __int16 v48 = 2080;
              uint64_t v49 = v41;
              __int16 v50 = 2080;
              unint64_t v51 = v40;
              _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - dBA estimate: %.2f, wind flag: %s, self voice: %s",  (uint8_t *)&v42,  0x30u);
            }
          }
        }

        LOBYTE(v42) = v23 == 0;
        std::mutex::lock((std::mutex *)(a1 + 64));
        __int16 v27 = *(void **)(a1 + 128);
        if (v27 != (void *)(a1 + 136))
        {
          do
          {
            os_log_t v28 = (void **)v27[4];
            sub_C5508(&v42, v28, 1701735534LL, (float)v24);
            sub_C5508(&v42, v28, 1937140846LL, v26);
            __int16 v29 = (void *)v27[1];
            if (v29)
            {
              do
              {
                IOReturn v30 = v29;
                __int16 v29 = (void *)*v29;
              }

              while (v29);
            }

            else
            {
              do
              {
                IOReturn v30 = (void *)v27[2];
                BOOL v31 = *v30 == (void)v27;
                __int16 v27 = v30;
              }

              while (!v31);
            }

            __int16 v27 = v30;
          }

          while (v30 != (void *)(a1 + 136));
        }

        std::mutex::unlock((std::mutex *)(a1 + 64));
        int v32 = *(_DWORD *)(a1 + 152);
        if (v32 == 19) {
          int v33 = 0;
        }
        else {
          int v33 = v32 + 1;
        }
        *(_DWORD *)(a1 + 152) = v33;
      }

      else if (a5 == 2)
      {
        int v18 = (os_log_t *)sub_138E8(41);
        os_log_t v19 = *v18;
        if (*v18)
        {
          if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *(unsigned __int8 *)(a6 + 1);
            int v42 = 136315650;
            CFNumberRef v43 = "AVHIDEventListener.h";
            __int16 v44 = 1024;
            int v45 = 456;
            __int16 v46 = 1024;
            LODWORD(v47) = v20;
            os_log_type_t v9 = "%25s:%-5d AVHIDEventListener::OnInputReport() - received error status input report %d.";
            uint64_t v10 = v19;
            os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
            goto LABEL_5;
          }
        }
      }
    }

    else if (!v16)
    {
      uint32_t v21 = (os_log_t *)sub_138E8(41);
      os_log_t v22 = *v21;
      if (*v21)
      {
        if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
        {
          int v42 = 136315394;
          CFNumberRef v43 = "AVHIDEventListener.h";
          __int16 v44 = 1024;
          int v45 = 447;
          os_log_type_t v9 = "%25s:%-5d AVHIDEventListener::OnInputReport() - received input report but no devices registered. Ignoring.";
          uint64_t v10 = v22;
          os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
          uint32_t v12 = 18;
          goto LABEL_6;
        }
      }
    }
  }

void sub_C54C4(_Unwind_Exception *exception_object)
{
}

void sub_C54E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0LL;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_C5508(_BYTE *a1, void **a2, uint64_t a3, float a4)
{
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t, void))(*a2[126] + 352LL))( a2[126],  1685287015LL,  a3,  0LL))
  {
    if (*a1)
    {
      os_log_t v8 = (os_log_t *)sub_138E8(41);
      os_log_type_t v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v22, a3);
          int v10 = v23;
          os_log_type_t v11 = (void **)v22[0];
          ((void (*)(void **__return_ptr, void **))(*a2)[12])(__p, a2);
          uint32_t v12 = v22;
          if (v10 < 0) {
            uint32_t v12 = v11;
          }
          if (v21 >= 0) {
            os_log_t v13 = __p;
          }
          else {
            os_log_t v13 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136316162;
          char v25 = "AVHIDEventListener.h";
          __int16 v26 = 1024;
          int v27 = 359;
          __int16 v28 = 2080;
          __int16 v29 = v12;
          __int16 v30 = 2048;
          double v31 = a4;
          __int16 v32 = 2080;
          int v33 = v13;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - setting param '%s' to '%.2f' on device '%s'.",  buf,  0x30u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }

    (*(void (**)(void *, uint64_t, uint64_t, void, float))(*a2[126] + 368LL))( a2[126],  1685287015LL,  a3,  0LL,  a4);
  }

  else
  {
    char v14 = (os_log_t *)sub_138E8(41);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      ((void (*)(void **__return_ptr, void **))(*a2)[12])(v22, a2);
      int v16 = v23;
      uint64_t v17 = (void **)v22[0];
      sub_2CA1C(__p, a3);
      int v18 = v22;
      if (v16 < 0) {
        int v18 = v17;
      }
      if (v21 >= 0) {
        os_log_t v19 = __p;
      }
      else {
        os_log_t v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      char v25 = "AVHIDEventListener.h";
      __int16 v26 = 1024;
      int v27 = 367;
      __int16 v28 = 2080;
      __int16 v29 = v18;
      __int16 v30 = 2080;
      double v31 = *(double *)&v19;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - device '%s' does not support param '%s'",  buf,  0x26u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
  }

void sub_C57AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C57E0(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    uint64_t result = sub_37408(*a2, inAddress, 0, 0LL);
    UInt32 ioDataSize = result;
    if ((_DWORD)result)
    {
      uint64_t outData = 0LL;
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, 0, 0LL, &ioDataSize, &outData);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        uint64_t v7 = outData;
        *(_BYTE *)(a1 + 24) = 1;
        *(void *)(a1 + 8) = &off_486378;
        *(void *)(a1 + 16) = v7;
        v8[0] = &off_486378;
        v8[1] = 0LL;
        return (uint64_t)sub_39FD8(v8);
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

  return result;
}

uint64_t sub_C58BC(uint64_t a1)
{
  return a1;
}

_BYTE *sub_C590C(_BYTE *__dst, __int128 *a2)
{
  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
    }

    else
    {
      __int128 v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)__dst = v3;
    }

    __dst[24] = 1;
  }

  return __dst;
}

void sub_C5970(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24))
  {
  }

  _Unwind_Resume(exception_object);
}

void sub_C5998(void *a1)
{
  uint64_t v1 = sub_39FD8(a1);
  operator delete(v1);
}

uint64_t sub_C59AC(uint64_t a1)
{
  if (**(_BYTE **)a1)
  {
    uint64_t v2 = **(void **)(a1 + 8);
    __int128 v3 = pthread_self();
    unint64_t v4 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v2 + 752));
    if (!pthread_equal(v3, v4))
    {
      char v6 = (os_log_t *)sub_138E8(13);
      uint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315394;
          os_log_type_t v9 = "IOMonitor.h";
          __int16 v10 = 1024;
          int v11 = 125;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: It is illegal to call Unlock_FromIOThread from a thread that does not own the mIOProcThreadMutex.",  (uint8_t *)&v8,  0x12u);
        }
      }
    }

    sub_563C(v2 + 736);
  }

  return a1;
}

void sub_C5AA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_C5AB4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  unint64_t v4 = (uint64_t *)(a1 + 528);
  if (a2) {
    unint64_t v4 = (uint64_t *)(a1 + 504);
  }
  uint64_t v5 = *v4;
  if (a2) {
    char v6 = (void *)(a1 + 496);
  }
  else {
    char v6 = (void *)(a1 + 520);
  }
  unint64_t v7 = v5 - *v6;
  if ((v7 & 0x7FFFFFFF8LL) != 0)
  {
    unint64_t v11 = 0LL;
    uint64_t v12 = (v7 >> 3);
    if (a2) {
      os_log_t v13 = (void *)(a1 + 496);
    }
    else {
      os_log_t v13 = (void *)(a1 + 520);
    }
    uint64_t v14 = a3 + 8;
    do
    {
      else {
        uint64_t v15 = *(void *)(*v13 + 8LL * v11);
      }
      if (v11 < (uint64_t)(a4[1] - *a4) >> 3 && (int v16 = *(unsigned int **)(*a4 + 8 * v11)) != 0LL)
      {
        if (!a2 || !byte_48C10C || !byte_48C10D) {
          bzero(v16 + 4, v16[2]);
        }
        unsigned int v17 = v16[3];
        *(_DWORD *)uint64_t v14 = *(_DWORD *)(*(void *)(v15 + 104) + 44LL);
        *(_DWORD *)(v14 + 4) = v17;
        int v18 = v16 + 4;
      }

      else
      {
        os_log_t v19 = *(_DWORD **)(v15 + 104);
        *(_DWORD *)uint64_t v14 = v19[11];
        int v20 = sub_75130(v19, *(_DWORD *)(a1 + 488));
        int v18 = 0LL;
        *(_DWORD *)(v14 + 4) = v20;
      }

      *(void *)(v14 + 8) = v18;
      ++v11;
      v14 += 16LL;
    }

    while (v12 != v11);
  }

uint64_t sub_C5BE4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(*(void *)(a1[4] + 40LL) + 16LL))( *(void *)(a1[4] + 40LL),  a1[5],  a1[6],  a1[7],  a1[8],  a1[9]);
}

void sub_C5C00(uint64_t a1, uint64_t a2, int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  char v6 = *(uint64_t **)(a1 + 16);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v9 = *v5;
      if (*v5 == a2) {
        break;
      }
      if (*(void *)(v9 + 8) == a2) {
        goto LABEL_7;
      }
      if (++v5 == v6) {
        return;
      }
    }

    uint64_t v9 = a2;
    if (!a2) {
      return;
    }
LABEL_7:
    uint64_t v10 = *(void *)v9;
    if (a3) {
      uint64_t v11 = v9 + 128;
    }
    else {
      uint64_t v11 = v9 + 152;
    }
    *(void *)(v11 + 8) = 0LL;
    uint64_t v12 = 528LL;
    if (a3) {
      uint64_t v12 = 504LL;
    }
    uint64_t v13 = 520LL;
    if (a3) {
      uint64_t v13 = 496LL;
    }
    uint64_t v14 = (*(void *)(v10 + v12) - *(void *)(v10 + v13)) >> 3;
    else {
      uint64_t v15 = v14;
    }
    if ((_DWORD)v15)
    {
      do
      {
        sub_74FB0(v11, a5++);
        --v15;
      }

      while (v15);
    }

    if (*(_BYTE *)(v9 + 54))
    {
      sub_74774(a1, v9);
      sub_7480C((_DWORD **)a1);
    }
  }

void *sub_C5CFC(void *a1)
{
  *a1 = off_46E910;
  if (a1[1])
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    __int128 v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        char v6 = "VirtualAudio_Device.cpp";
        __int16 v7 = 1024;
        int v8 = 3943;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to execute command prior to destruction.",  (uint8_t *)&v5,  0x12u);
      }
    }
  }

  return a1;
}

void sub_C5DD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_C5DDC(void *a1)
{
  uint64_t v1 = sub_C5CFC(a1);
  operator delete(v1);
}

uint64_t sub_C5DF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *(void *)(a1 + 8) = 0LL;
  return result;
}

void sub_C5E24(unint64_t *a1, uint64_t *a2)
{
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "VirtualAudio_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 888;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (pthread_equal(v4, v5)
    || (v6 = pthread_self(), __int16 v7 = (_opaque_pthread_t *)atomic_load(a1 + 94), pthread_equal(v6, v7)))
  {
    int v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "VirtualAudio_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 889;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    uint64_t v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v10, "Precondition failure.");
  }

  sub_BA664((uint64_t)a1, 1);
  sub_B5920(a1, a2, 0, 0, 0);
}

void sub_C601C(_Unwind_Exception *a1)
{
}

void sub_C603C(unint64_t *a1, uint64_t *a2)
{
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
  {
    int v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "VirtualAudio_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 900;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unint64_t v4 = pthread_self();
  int v5 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (!pthread_equal(v4, v5))
  {
    char v6 = pthread_self();
    __int16 v7 = (_opaque_pthread_t *)atomic_load(a1 + 94);
    if (!pthread_equal(v6, v7))
    {
      uint64_t v11 = (os_log_t *)sub_138E8(13);
      uint64_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "VirtualAudio_Device.cpp";
        __int16 v16 = 1024;
        int v17 = 901;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
      }

      uint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v13, "Precondition failure.");
    }
  }

  sub_BA664((uint64_t)a1, 1);
  sub_B5920(a1, a2, 0, 1, 0);
}

void sub_C6234(_Unwind_Exception *a1)
{
}

uint64_t *sub_C6254(unint64_t *a1)
{
  uint64_t v2 = pthread_self();
  __int128 v3 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (pthread_equal(v2, v3)
    || (unint64_t v4 = pthread_self(), v5 = (_opaque_pthread_t *)atomic_load(a1 + 94), pthread_equal(v4, v5)))
  {
    int v27 = (os_log_t *)sub_138E8(13);
    __int16 v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v36 = 1024;
      int v37 = 978;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  char v6 = (os_log_t *)sub_138E8(1);
  __int16 v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v36 = 1024;
    int v37 = 980;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stream preference state change begun.", buf, 0x12u);
  }

  sub_6DD4();
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v9 = (int)result;
  unint64_t v10 = a1[66] - a1[65];
  if ((v10 & 0x7FFFFFFF8LL) != 0)
  {
    sub_B52B4(v34, (uint64_t)a1);
    uint64_t v11 = pthread_self();
    uint64_t v12 = (_opaque_pthread_t *)atomic_load(a1 + 83);
    if (!pthread_equal(v11, v12))
    {
      uint64_t v13 = pthread_self();
      int v14 = (_opaque_pthread_t *)atomic_load(a1 + 94);
      if (!pthread_equal(v13, v14))
      {
        __int16 v30 = (os_log_t *)sub_138E8(13);
        double v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          __int16 v36 = 1024;
          int v37 = 992;
          _os_log_impl(&dword_0, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
        }

        __int16 v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v32, "Invariant failure.");
      }
    }

    unint64_t v15 = 0LL;
    memset(v33, 0, sizeof(v33));
    uint64_t v16 = (v10 >> 3);
    do
    {
      unint64_t v17 = a1[65];
      else {
        uint64_t v18 = *(void *)(v17 + 8 * v15);
      }
      os_log_t v19 = (os_log_t *)sub_138E8(1);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v36 = 1024;
        int v37 = 1000;
        __int16 v38 = 2048;
        uint64_t v39 = v18;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Refreshing output stream %p for stream format preference change.",  buf,  0x1Cu);
      }

      sub_E1EEC(v18, v33);
      ++v15;
    }

    while (v16 != v15);
    if (sub_1D72C0((_DWORD *)(a1[126] + 264)))
    {
      unint64_t v21 = a1[62];
      unint64_t v22 = a1[63];
      if (((v22 - v21) & 0x7FFFFFFF8LL) != 0)
      {
        unint64_t v23 = 0LL;
        do
        {
          else {
            uint64_t v24 = *(void *)(v21 + 8 * v23);
          }
          char v25 = (os_log_t *)sub_138E8(1);
          __int16 v26 = *v25;
          if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            __int16 v36 = 1024;
            int v37 = 1014;
            __int16 v38 = 2048;
            uint64_t v39 = v24;
            _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Refreshing input stream %p for stream format preference change.",  buf,  0x1Cu);
          }

          sub_E1EEC(v24, v33);
          ++v23;
          unint64_t v21 = a1[62];
          unint64_t v22 = a1[63];
        }

        while (v23 < ((v22 - v21) >> 3));
      }
    }

    sub_CA170(a1[79], v33);
    sub_B5444(a1, v33);
    *(void *)buf = v33;
    sub_E2D18((void ***)buf);
    uint64_t result = sub_B5780(v34);
  }

  if (v9) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

void sub_C6700( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t buf, int a21, __int16 a22, int a23, __int16 a24, uint64_t a25, __int16 a26, uint64_t a27, int a28)
{
  if (a11) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C69DC(uint64_t a1, char a2)
{
  uint64_t v3 = 0LL;
  v5[0] = a2;
  int v6 = 0;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t))(*(void *)a1 + 424LL))(a1, &v3, v4, 1869968496LL);
  return sub_9DBD0((uint64_t)v5);
}

void sub_C6A60(_Unwind_Exception *a1)
{
}

void sub_C6A74(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1454;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v6 = pthread_self();
  __int16 v7 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (pthread_equal(v6, v7)
    || (int v8 = pthread_self(), v9 = (_opaque_pthread_t *)atomic_load(a1 + 94), pthread_equal(v8, v9)))
  {
    unint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1455;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Precondition failure.");
  }

  memset(buf, 0, sizeof(buf));
  sub_B52B4(v27, (uint64_t)a1);
  unint64_t v10 = pthread_self();
  uint64_t v11 = (_opaque_pthread_t *)atomic_load(a1 + 83);
  if (!pthread_equal(v10, v11))
  {
    uint64_t v12 = pthread_self();
    uint64_t v13 = (_opaque_pthread_t *)atomic_load(a1 + 94);
    if (!pthread_equal(v12, v13))
    {
      uint64_t v24 = (os_log_t *)sub_138E8(13);
      char v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 v28 = 136315394;
        *(void *)&v28[4] = "VirtualAudio_Device.cpp";
        __int16 v29 = 1024;
        int v30 = 1463;
        _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v28, 0x12u);
      }

      __int16 v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v26, "Invariant failure.");
    }
  }

  int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 144LL))(a3, a2);
  if (v14)
  {
    unint64_t v21 = (os_log_t *)sub_138E8(13);
    unint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v28 = 136315394;
      *(void *)&v28[4] = "VirtualAudio_Device.cpp";
      __int16 v29 = 1024;
      int v30 = 1480;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: error setting the format on the hardware stream",  v28,  0x12u);
    }

    unint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v23 = &off_4865A0;
    v23[2] = v14;
  }

  sub_B6F94(a1, (uint64_t *)buf);
  sub_B7320((uint64_t)a1);
  sub_CA170(a1[79], (uint64_t *)buf);
  sub_B5444(a1, (uint64_t *)buf);
  sub_B5780(v27);
  *(void *)__int16 v28 = buf;
  sub_E2D18((void ***)v28);
}

void sub_C6E30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = &a15;
  sub_E2D18((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_C6E94(uint64_t a1, const __CFDictionary *a2, int a3)
{
  if (*(double *)&a2 == 0.0)
  {
    BOOL v77 = (os_log_t *)sub_138E8(13);
    __int16 v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v87[8] = 1024;
      *(_DWORD *)&v87[10] = 1496;
      _os_log_impl(&dword_0, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 > 1936749156)
  {
    if (a3 == 1937007472) {
      goto LABEL_8;
    }
    unsigned __int16 v6 = 29285;
  }

  else
  {
    if (a3 == 1835229549) {
      goto LABEL_8;
    }
    unsigned __int16 v6 = 25456;
  }

  if (a3 != (v6 | 0x73700000)) {
    return;
  }
LABEL_8:
  __int16 v7 = operator new(8uLL);
  char v8 = 0;
  uint64_t v9 = 0LL;
  void *v7 = 0x63666F7663646972LL;
  int v10 = 1;
  do
  {
    char v11 = v8;
    v10 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 352LL))( *(void *)(a1 + 1008),  1685287015LL,  *((unsigned int *)v7 + v9),  0LL);
    char v8 = 1;
    uint64_t v9 = 1LL;
  }

  while ((v11 & 1) == 0);
  operator delete(v7);
  if ((v10 & 1) == 0)
  {
    uint64_t v12 = (os_log_t *)sub_138E8(1);
    uint64_t v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v84, 1667524978LL);
        int v14 = v85;
        unint64_t v15 = (void **)v84[0];
        sub_2CA1C(__p, 1667657590LL);
        *(double *)&uint64_t v16 = COERCE_DOUBLE(v84);
        if (v14 < 0) {
          uint64_t v16 = v15;
        }
        if (v83 >= 0) {
          unint64_t v17 = __p;
        }
        else {
          unint64_t v17 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
        *(_WORD *)&v87[8] = 1024;
        *(_DWORD *)&v87[10] = 1520;
        __int16 v88 = 2080;
        double v89 = *(double *)&v16;
        __int16 v90 = 2080;
        int v91 = v17;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Camera parameters [%s %s] not supported by DSP chain",  buf,  0x26u);
        if (v83 < 0) {
          operator delete(__p[0]);
        }
        if (v85 < 0) {
          operator delete(v84[0]);
        }
      }
    }
  }

  if (a3 > 1936749156)
  {
    if (a3 != 1937007472)
    {
      unsigned __int16 v18 = 29285;
LABEL_27:
      if (a3 != (v18 | 0x73700000)) {
        return;
      }
    }
  }

  else if (a3 != 1835229549)
  {
    unsigned __int16 v18 = 25456;
    goto LABEL_27;
  }

  os_log_t v19 = operator new(8uLL);
  char v20 = 0;
  uint64_t v21 = 0LL;
  *os_log_t v19 = 0x63666F7663646972LL;
  int v22 = 1;
  do
  {
    char v23 = v20;
    v22 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 352LL))( *(void *)(a1 + 1008),  1685287015LL,  *((unsigned int *)v19 + v21),  0LL);
    char v20 = 1;
    uint64_t v21 = 1LL;
  }

  while ((v23 & 1) == 0);
  operator delete(v19);
  if (v22)
  {
    uint64_t v24 = (os_log_t *)sub_138E8(1);
    char v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v87[8] = 1024;
      *(_DWORD *)&v87[10] = 1525;
      __int16 v88 = 2112;
      double v89 = *(double *)&a2;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting camera parameters on input DSP: %@",  buf,  0x1Cu);
    }

    __int16 v26 = (const __CFNumber *)sub_482C0(a2, "camera wind suppression");
    if (v26) {
      int v27 = sub_36328(v26);
    }
    else {
      int v27 = 0LL;
    }
    __int16 v28 = (const __CFNumber *)sub_36228(a2, "camera real time dynamics");
    if (v28) {
      __int16 v29 = sub_36328(v28);
    }
    else {
      __int16 v29 = 0LL;
    }
    if ((unint64_t)v27 >> 32)
    {
      int v30 = (os_log_t *)sub_138E8(1);
      double v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
        *(_WORD *)&v87[8] = 1024;
        *(_DWORD *)&v87[10] = 1533;
        __int16 v88 = 1024;
        LODWORD(v89) = (_DWORD)v27;
        _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting wind suppression overlay tuning to %u",  buf,  0x18u);
      }

      uint64_t v32 = *(void *)(a1 + 1008);
      v84[0] = &dword_4 + 1;
      v87[4] = (_DWORD)v27 != 0;
      int v94 = 0;
      (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v32 + 424LL))( v32,  v84,  buf,  1768845428LL);
      sub_9DBD0((uint64_t)&v87[4]);
      if ((unint64_t)v29 >> 32)
      {
        int v33 = (os_log_t *)sub_138E8(1);
        unint64_t v34 = ((_DWORD)v29 != 0) | (2LL * ((_DWORD)v27 != 0));
        int v35 = *v33;
        if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_DEFAULT))
        {
          char v36 = 0;
          uint64_t v37 = 0LL;
          char v85 = 2;
          strcpy((char *)v84, "00");
          do
          {
            char v38 = v36;
            if (((v34 >> v37) & 1) != 0)
            {
              uint64_t v39 = v37 ^ 1;
              if (v85 >= 0) {
                uint64_t v40 = v84;
              }
              else {
                uint64_t v40 = (void **)v84[0];
              }
              *((_BYTE *)v40 + v39) = 49;
            }

            char v36 = 1;
            uint64_t v37 = 1LL;
          }

          while ((v38 & 1) == 0);
          *(double *)&unsigned int v41 = COERCE_DOUBLE(v84);
          if (v85 < 0) {
            unsigned int v41 = (void **)v84[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1546;
          __int16 v88 = 2080;
          double v89 = *(double *)&v41;
          _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting wind and dynamics processing overlay tuning to %s",  buf,  0x1Cu);
          if (v85 < 0) {
            operator delete(v84[0]);
          }
        }

        uint64_t v42 = *(void *)(a1 + 1008);
        v84[0] = &dword_4 + 2;
        *(void *)&v87[4] = v34;
        int v94 = 3;
        (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v42 + 424LL))( v42,  v84,  buf,  1768845428LL);
        sub_9DBD0((uint64_t)&v87[4]);
      }
    }

    CFNumberRef v43 = (const __CFNumber *)sub_8D878(a2, "camera dir");
    if (v43)
    {
      __int16 v44 = sub_36328(v43);
      if ((unint64_t)v44 >> 32)
      {
        unsigned int v45 = v44;
        __int16 v46 = (os_log_t *)sub_138E8(16);
        double v47 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1555;
          __int16 v88 = 1024;
          LODWORD(v89) = v45;
          _os_log_impl(&dword_0, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting camera direction %d on DSP", buf, 0x18u);
        }

        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1667524978LL,  0LL,  (float)v45);
      }
    }

    __int16 v48 = sub_8D878(a2, "camera fov");
    if (v48)
    {
      unint64_t v49 = sub_A15C8((uint64_t)v48);
      if (HIDWORD(v49))
      {
        float v50 = *(float *)&v49;
        unint64_t v51 = (os_log_t *)sub_138E8(16);
        float v52 = v50;
        uint64_t v53 = *v51;
        if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1561;
          __int16 v88 = 2048;
          double v89 = v52;
          _os_log_impl(&dword_0, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting camera fov %f on DSP", buf, 0x1Cu);
        }

        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1667657590LL,  0LL,  v52);
      }
    }
  }

  if (a3 == 1835229549)
  {
    uint64_t v54 = (char *)operator new(0xCuLL);
    uint64_t v55 = 0LL;
    qmemcpy(v54, "tnfmkcbmnmom", 12);
    int v56 = 1;
    do
    {
      v56 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 384LL))( *(void *)(a1 + 1008),  1685287015LL,  *(unsigned int *)&v54[v55],  0LL);
      v55 += 4LL;
    }

    while (v55 != 12);
    operator delete(v54);
    if ((v56 & 1) == 0)
    {
      int v57 = (os_log_t *)sub_138E8(1);
      BOOL v58 = *v57;
      if (*v57)
      {
        if (os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v84, 1835429492LL);
          if (v85 >= 0) {
            *(double *)&char v59 = COERCE_DOUBLE(v84);
          }
          else {
            char v59 = (void **)v84[0];
          }
          sub_2CA1C(__p, 1835164523LL);
          int v60 = v83;
          char v61 = (void **)__p[0];
          sub_2CA1C(v80, 1836019054LL);
          uint64_t v62 = __p;
          if (v60 < 0) {
            uint64_t v62 = v61;
          }
          if (v81 >= 0) {
            BOOL v63 = v80;
          }
          else {
            BOOL v63 = (void **)v80[0];
          }
          *(_DWORD *)buf = 136316162;
          *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1569;
          __int16 v88 = 2080;
          double v89 = *(double *)&v59;
          __int16 v90 = 2080;
          int v91 = v62;
          __int16 v92 = 2080;
          unint64_t v93 = v63;
          _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Camera properties [%s %s %s] not supported by DSP chain",  buf,  0x30u);
          if (v81 < 0) {
            operator delete(v80[0]);
          }
          if (v83 < 0) {
            operator delete(__p[0]);
          }
          if (v85 < 0) {
            operator delete(v84[0]);
          }
        }
      }
    }

    __int16 v64 = (char *)operator new(0xCuLL);
    uint64_t v65 = 0LL;
    qmemcpy(v64, "tnfmkcbmnmom", 12);
    int v66 = 1;
    do
    {
      v66 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 384LL))( *(void *)(a1 + 1008),  1685287015LL,  *(unsigned int *)&v64[v65],  0LL);
      v65 += 4LL;
    }

    while (v65 != 12);
    operator delete(v64);
    if (v66)
    {
      char v67 = (const __CFNumber *)sub_C7A84(a2, "camera mics");
      if (v67 && (std::string v68 = sub_36328(v67), (unint64_t)v68 >> 32))
      {
        int v74 = (int)v68;
        LODWORD(v84[0]) = 1;
        if ((v68 & 4) != 0) {
          (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, void, void))(**(void **)(a1 + 1008)
        }
                                                                                             + 400LL))( *(void *)(a1 + 1008),  1685287015LL,  1835429492LL,  v84,  4LL,  0LL,  0LL);
        if ((v74 & 2) != 0) {
          (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, void, void))(**(void **)(a1 + 1008)
        }
                                                                                             + 400LL))( *(void *)(a1 + 1008),  1685287015LL,  1835164523LL,  v84,  4LL,  0LL,  0LL);
        if ((v74 & 1) != 0)
        {
          (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, void, void))(**(void **)(a1 + 1008)
                                                                                             + 400LL))( *(void *)(a1 + 1008),  1685287015LL,  1836019054LL,  v84,  4LL,  0LL,  0LL);
        }

        else if (!v74)
        {
          unsigned __int8 v75 = (os_log_t *)sub_138E8(16);
          os_log_t v76 = *v75;
          if (*v75)
          {
            if (os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
              *(_WORD *)&v87[8] = 1024;
              *(_DWORD *)&v87[10] = 1595;
              __int16 v88 = 1024;
              LODWORD(v89) = 0;
              unsigned __int8 v71 = "%25s:%-5d Invalid value %u for kVirtualAudioDeviceCameraMicsKey";
              __int16 v72 = v76;
              uint32_t v73 = 24;
              goto LABEL_99;
            }
          }
        }
      }

      else
      {
        double v69 = (os_log_t *)sub_138E8(16);
        os_log_t v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)uint64_t v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1601;
          unsigned __int8 v71 = "%25s:%-5d No value set for kVirtualAudioDeviceCameraMicsKey";
          __int16 v72 = v70;
          uint32_t v73 = 18;
LABEL_99:
          _os_log_impl(&dword_0, v72, OS_LOG_TYPE_ERROR, v71, buf, v73);
        }
      }
    }
  }

void sub_C79FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void *sub_C7A84(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_C7B2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

__n128 sub_C7B78(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_46E8C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_C7BB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_46E8C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_C7BD0(uint64_t result)
{
  if (**(_BYTE **)(result + 8)) {
    return sub_79A04(*(void *)(result + 16) + 648LL);
  }
  return result;
}

void sub_C7BEC(uint64_t a1, int a2)
{
  if ((a1 & 0xFF00000000LL) != 0)
  {
    AudioObjectID v3 = a1;
    AudioObjectID v35 = a1;
    std::string __p = (void *)0x676C6F6263756964LL;
    LODWORD(v30) = 0;
    sub_C80E0((uint64_t)buf, &v35, (AudioObjectPropertyAddress *)&__p, 0, 0LL);
    if (*(_DWORD *)buf || !(_BYTE)v37)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      int v28 = *(_DWORD *)buf;
      *(void *)exception = &off_4865A0;
      exception[2] = v28;
    }

    std::string __p = off_485B28;
    size_t v4 = *(const __CFString **)&buf[16];
    if (*(void *)&buf[16])
    {
      CFRetain(*(CFTypeRef *)&buf[16]);
      std::string __p = &off_483688;
      int v30 = v4;
      if (!(_BYTE)v37)
      {
LABEL_12:
        int v30 = 0LL;
        uint64_t v32 = &off_483688;
        CFStringRef theString = v4;
        char v34 = 1;
        sub_39FD8(&__p);
        if (!v34) {
          goto LABEL_46;
        }
        sub_48E98(buf, theString);
        sub_7D084(&__p, "NetworkUplinkClock_UID");
        char v7 = buf[23];
        if (buf[23] >= 0) {
          char v8 = (const __CFString *)buf[23];
        }
        else {
          char v8 = *(const __CFString **)&buf[8];
        }
        uint64_t v9 = (const __CFString *)v31;
        int v10 = (char)v31;
        if ((v31 & 0x80u) != 0) {
          uint64_t v9 = v30;
        }
        if (v8 == v9)
        {
          if ((v31 & 0x80u) == 0) {
            p_p = (unsigned __int8 *)&__p;
          }
          else {
            p_p = (unsigned __int8 *)__p;
          }
          if ((buf[23] & 0x80000000) != 0)
          {
            BOOL v22 = memcmp(*(const void **)buf, p_p, *(size_t *)&buf[8]) == 0;
          }

          else
          {
            if (buf[23])
            {
              uint64_t v12 = buf[23] - 1LL;
              uint64_t v13 = buf;
              do
              {
                int v15 = *v13++;
                int v14 = v15;
                int v16 = *p_p++;
                int v17 = v14 != v16;
              }

              while (v14 == v16 && v12-- != 0);
              if (((char)v31 & 0x80000000) == 0)
              {
LABEL_31:
                if ((v7 & 0x80) == 0) {
                  goto LABEL_32;
                }
                goto LABEL_45;
              }

LABEL_55:
                  if (v34) {
                    sub_39FD8(&v32);
                  }
                  return;
                }

    ++v8;
  }

  while (v8 != v9);
  if (v5 != v6) {
    (*(void (**)(uint64_t, void, int *, uint64_t))(*(void *)a4 + 72LL))( a4,  -1431655765 * ((unint64_t)((char *)v6 - (char *)v5) >> 2),  v5,  1LL);
  }
  if (v5) {
    operator delete(v5);
  }
}

        sub_232A4((uint64_t)a1, a2, a3, a4, a5, a6);
        return;
      }

      unsigned __int8 v31 = *a5;
      if (v31 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
      {
        double v89 = (os_log_t *)sub_138E8(13);
        __int16 v90 = *v89;
        if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
        {
          __int16 v113 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
          int v91 = v116;
          __int16 v92 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          unint64_t v93 = *a5;
          int v94 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          unsigned int v95 = &__p;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          if (v91 < 0) {
            unsigned int v95 = v92;
          }
          v118 = 1024;
          uint64_t v119 = 566;
          uint64_t v120 = 2080;
          *(void *)size_t v121 = v95;
          *(_WORD *)&v121[8] = 1024;
          LODWORD(v122[0]) = v93;
          WORD2(v122[0]) = 1024;
          *(_DWORD *)((char *)v122 + 6) = v94;
          _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v116 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }

        uint64_t v96 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v96 = &off_4865A0;
        v96[2] = 561211770;
      }

      if (a2->mElement != 6 || a2->mScope != 1869968496) {
        goto LABEL_55;
      }
      uint64_t v32 = sub_1F4000();
      char v23 = sub_1F4DF8(v32);
LABEL_45:
      *(_DWORD *)a6 = v23;
      return;
    }

    if (mSelector != 1835103844)
    {
      if (mSelector != 1836414053) {
        goto LABEL_55;
      }
      uint64_t v21 = *a5;
      if (v21 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
      {
        uint64_t v65 = (os_log_t *)sub_138E8(13);
        int v66 = *v65;
        if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
        {
          __int16 v113 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
          char v67 = v116;
          std::string v68 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          double v69 = *a5;
          os_log_t v70 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          unsigned __int8 v71 = &__p;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          if (v67 < 0) {
            unsigned __int8 v71 = v68;
          }
          v118 = 1024;
          uint64_t v119 = 554;
          uint64_t v120 = 2080;
          *(void *)size_t v121 = v71;
          *(_WORD *)&v121[8] = 1024;
          LODWORD(v122[0]) = v69;
          WORD2(v122[0]) = 1024;
          *(_DWORD *)((char *)v122 + 6) = v70;
          _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v116 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }

        __int16 v72 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v72 = &off_4865A0;
        v72[2] = 561211770;
      }

      if (a2->mElement != 6 || a2->mScope != 1869968496) {
        goto LABEL_55;
      }
      BOOL v22 = (unsigned __int8 *)sub_1F4000();
      char v23 = sub_1F5650(v22);
      goto LABEL_45;
    }

    int v33 = *a5;
    if (v33 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      char v97 = (os_log_t *)sub_138E8(13);
      int v98 = *v97;
      if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
      {
        __int16 v113 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
        char v99 = v116;
        uint64_t v100 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        unint64_t v101 = *a5;
        int64_t v102 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        unint64_t v103 = &__p;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        if (v99 < 0) {
          unint64_t v103 = v100;
        }
        v118 = 1024;
        uint64_t v119 = 508;
        uint64_t v120 = 2080;
        *(void *)size_t v121 = v103;
        *(_WORD *)&v121[8] = 1024;
        LODWORD(v122[0]) = v101;
        WORD2(v122[0]) = 1024;
        *(_DWORD *)((char *)v122 + 6) = v102;
        _os_log_impl( &dword_0,  v98,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v116 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      uint64_t v104 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v104 = &off_4865A0;
      v104[2] = 561211770;
    }

    AudioObjectPropertyScope mScope = a2->mScope;
    char v34 = a2->mElement;
    if (v34 != 6 || mScope != 1869968496)
    {
      __p.uint64_t mSelector = 1986290211;
      __p.AudioObjectPropertyScope mScope = mScope;
      __p.AudioObjectPropertyElement mElement = v34;
      LODWORD(v113) = 16;
      sub_232A4((uint64_t)a1, &__p, 0, 0LL, (UInt32 *)&v113, (float *)buf);
      int v15 = *(double *)buf;
      goto LABEL_57;
    }

    int v17 = -1027131310;
LABEL_50:
    *(_DWORD *)a6 = v17;
    return;
  }

  if (mSelector > 1634759541)
  {
    if (mSelector == 1634759542)
    {
      __int16 v29 = *a5;
      if (v29 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
      {
        char v81 = (os_log_t *)sub_138E8(13);
        int v82 = *v81;
        if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
        {
          __int16 v113 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
          char v83 = v116;
          uint64_t v84 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          char v85 = *a5;
          char v86 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          uint64_t v87 = &__p;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          if (v83 < 0) {
            uint64_t v87 = v84;
          }
          v118 = 1024;
          uint64_t v119 = 499;
          uint64_t v120 = 2080;
          *(void *)size_t v121 = v87;
          *(_WORD *)&v121[8] = 1024;
          LODWORD(v122[0]) = v85;
          WORD2(v122[0]) = 1024;
          *(_DWORD *)((char *)v122 + 6) = v86;
          _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v116 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }

        __int16 v88 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v88 = &off_4865A0;
        v88[2] = 561211770;
      }

      int v30 = a2->mScope;
      *(_DWORD *)buf = 1987013732;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_DWORD *)&buf[8] = 0;
      (*(void (**)(unsigned __int8 *, _BYTE *, uint64_t, const void *, UInt32 *, float *))(*(void *)a1 + 40LL))( a1,  buf,  a3,  a4,  a5,  a6);
    }

    else
    {
      if (mSelector != 1685483630) {
        goto LABEL_55;
      }
      unsigned __int16 v18 = (os_log_t *)sub_138E8(17);
      os_log_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&__p, a2->mSelector);
        char v20 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        v118 = 1024;
        uint64_t v119 = 585;
        uint64_t v120 = 2080;
        *(void *)size_t v121 = v20;
        _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property '%s' is write-only", buf, 0x1Cu);
        if (v116 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      *a5 = 0;
    }
  }

  else
  {
    if (mSelector != 913796710)
    {
      if (mSelector != 1064725619) {
        goto LABEL_55;
      }
      int v16 = *a5;
      if (v16 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
      {
        int v57 = (os_log_t *)sub_138E8(13);
        BOOL v58 = *v57;
        if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
        {
          __int16 v113 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
          char v59 = v116;
          int v60 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          char v61 = *a5;
          uint64_t v62 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          BOOL v63 = &__p;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          if (v59 < 0) {
            BOOL v63 = v60;
          }
          v118 = 1024;
          uint64_t v119 = 590;
          uint64_t v120 = 2080;
          *(void *)size_t v121 = v63;
          *(_WORD *)&v121[8] = 1024;
          LODWORD(v122[0]) = v61;
          WORD2(v122[0]) = 1024;
          *(_DWORD *)((char *)v122 + 6) = v62;
          _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v116 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }

        __int16 v64 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v64 = &off_4865A0;
        v64[2] = 561211770;
      }

      int v17 = 1;
      goto LABEL_50;
    }

    uint64_t v24 = *a5;
    if (v24 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      uint32_t v73 = (os_log_t *)sub_138E8(13);
      int v74 = *v73;
      if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
      {
        __int16 v113 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
        unsigned __int8 v75 = v116;
        os_log_t v76 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        BOOL v77 = *a5;
        __int16 v78 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        int v79 = &__p;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        if (v75 < 0) {
          int v79 = v76;
        }
        v118 = 1024;
        uint64_t v119 = 579;
        uint64_t v120 = 2080;
        *(void *)size_t v121 = v79;
        *(_WORD *)&v121[8] = 1024;
        LODWORD(v122[0]) = v77;
        WORD2(v122[0]) = 1024;
        *(_DWORD *)((char *)v122 + 6) = v78;
        _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v116 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      BOOL v80 = __cxa_allocate_exception(0x10uLL);
      *(void *)BOOL v80 = &off_4865A0;
      v80[2] = 561211770;
    }

    sub_232A4((uint64_t)a1, a2, a3, a4, a5, a6);
    if (*(_DWORD *)a6 != a1[680])
    {
      char v25 = (os_log_t *)sub_138E8(13);
      __int16 v26 = *v25;
      if (*v25)
      {
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          int v27 = a1[680];
          int v28 = *a6;
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          v118 = 1024;
          uint64_t v119 = 581;
          uint64_t v120 = 1024;
          *(_DWORD *)size_t v121 = v27;
          *(_WORD *)&v121[4] = 1024;
          *(float *)&v121[6] = v28;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Internal state for wind filter property is out of sync.  State:%u, Value:%u",  buf,  0x1Eu);
        }
      }
    }
  }

  v140 = v46;
  sub_19DFC((uint64_t)&v141);
  sub_19DFC((uint64_t)&v149[2]);
  sub_19DFC((uint64_t)&v147[16]);
  sub_19DFC((uint64_t)v147);
LABEL_56:
  uint64_t v55 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1[1] + 88LL))(a1[1], 0LL) - (v19 != 0);
  if (v55 >= 2)
  {
    v127 = (os_log_t *)sub_138E8(13);
    uint64_t v128 = *v127;
    if (*v127 && os_log_type_enabled(*v127, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v151 = 1024;
      *(_DWORD *)unsigned int v152 = 829;
      _os_log_impl( &dword_0,  v128,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (v3 && v55)
  {
    int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 120LL))(a1[1]);
    sub_F9584((uint64_t)v147, 1886152041LL, v56);
    int v57 = sub_138E8(17);
    BOOL v58 = sub_138E8(28);
    char v59 = 0;
    int v60 = 0LL;
    *(void *)buf = 0x100000002LL;
    char v61 = *(void *)(v57 + 8);
    while (1)
    {
      uint64_t v62 = (int)buf[v60];
      BOOL v63 = v59;
      if (((v61 & v62) != 0) != ((*(void *)(v58 + 8) & v62) != 0)) {
        break;
      }
      char v59 = 1;
      int v60 = 1LL;
      if ((v63 & 1) != 0) {
        goto LABEL_67;
      }
    }

    if ((v61 & v62) == 0) {
      int v57 = v58;
    }
LABEL_67:
    __int16 v64 = *(os_log_s **)v57;
    if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v65 = *(void *)&v149[2];
      int v66 = *(void *)&v147[16];
      char v67 = *(void *)v147;
      (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 128LL))(__p);
      if (v66) {
        std::string v68 = v66;
      }
      else {
        std::string v68 = v67;
      }
      if (v65) {
        std::string v68 = v65;
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v151 = 1024;
      *(_DWORD *)unsigned int v152 = 838;
      *(_WORD *)&v152[4] = 2112;
      *(void *)&v152[6] = v68;
      *(_WORD *)&v152[14] = 2112;
      *(void **)&v152[16] = __p[0];
      _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating a bluetooth LE input port with name %@ and UID %@",  (uint8_t *)buf,  0x26u);
      sub_19DFC((uint64_t)__p);
    }

    (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128LL))(&v141);
    double v69 = atomic_load((unsigned int *)(a1[1] + 492));
    os_log_t v70 = (std::__shared_weak_count *)operator new(0x2B8uLL);
    v70->__shared_owners_ = 0LL;
    unsigned __int8 v71 = (unint64_t *)&v70->__shared_owners_;
    v70->__shared_weak_owners_ = 0LL;
    v70->__vftable = (std::__shared_weak_count_vtbl *)off_4789D0;
    __int16 v72 = a1[1];
    sub_14FF7C((uint64_t)buf, 1886152041LL, v69);
    uint32_t v73 = v70 + 1;
    __p[0] = 0LL;
    __p[1] = 0LL;
    int64_t cap = 0LL;
    CFStringRef theString = 0LL;
    uint64_t v144 = 1;
    sub_224CC0((uint64_t)&v70[1], (uint64_t *)buf, v72, (uint64_t)__p, (uint64_t)v147, (uint64_t *)&v141, 0LL, 1);
    sub_19DFC((uint64_t)&theString);
    sub_32C8C(*(void **)&v152[10]);
    v70[1].__vftable = (std::__shared_weak_count_vtbl *)off_47B6C8;
    *(void *)&int v74 = v70 + 1;
    *((void *)&v74 + 1) = v70;
    unsigned __int8 v75 = (std::__shared_weak_count *)v70[4].__shared_weak_owners_;
    if (v75)
    {
      if (v75->__shared_owners_ != -1)
      {
LABEL_88:
        __int128 v139 = v74;
        sub_19DFC((uint64_t)&v141);
        sub_19DFC((uint64_t)&v149[2]);
        sub_19DFC((uint64_t)&v147[16]);
        sub_19DFC((uint64_t)v147);
        goto LABEL_89;
      }

      do
        os_log_t v76 = __ldxr(v71);
      while (__stxr(v76 + 1, v71));
      unint64_t v132 = v74;
      BOOL v77 = (unint64_t *)&v70->__shared_weak_owners_;
      do
        __int16 v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      v70[4].__shared_owners_ = (uint64_t)v73;
      v70[4].__shared_weak_owners_ = (uint64_t)v70;
      std::__shared_weak_count::__release_weak(v75);
      int v74 = v132;
    }

    else
    {
      do
        int v79 = __ldxr(v71);
      while (__stxr(v79 + 1, v71));
      BOOL v80 = (unint64_t *)&v70->__shared_weak_owners_;
      do
        char v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
      v70[4].__shared_owners_ = (uint64_t)v73;
      v70[4].__shared_weak_owners_ = (uint64_t)v70;
    }

    do
      int v82 = __ldaxr(v71);
    while (__stlxr(v82 - 1, v71));
    if (!v82)
    {
      uint64_t v133 = v74;
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
      int v74 = v133;
    }

    goto LABEL_88;
  }

  __int128 v139 = 0uLL;
  if (!v3)
  {
LABEL_96:
    unint64_t v93 = 0LL;
    int v94 = 0LL;
    int v137 = 0LL;
    BOOL v138 = 0LL;
    if (!v2) {
      goto LABEL_117;
    }
    goto LABEL_114;
  }

  memset(buf, 0, 24);
  sub_30E5D0((uint64_t)v73, (uint64_t)buf, *a15, a15[1]);
  sub_300D48((std::string *)&__p, a5);
  unint64_t v49 = a3[23];
  if (v49 >= 0) {
    float v50 = a3;
  }
  else {
    float v50 = *(const std::string::value_type **)a3;
  }
  if (v49 >= 0) {
    unint64_t v51 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    unint64_t v51 = *((void *)a3 + 1);
  }
  float v52 = std::string::append((std::string *)&__p, v50, v51);
  uint64_t v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  *(void *)&buf[16] = v52->__r_.__value_.__l.__cap_;
  *(_OWORD *)buf = v53;
  v52->__r_.__value_.__l.__size_ = 0LL;
  v52->__r_.__value_.__l.__cap_ = 0LL;
  v52->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v54 = std::string::append((std::string *)buf, ".dspg", 5uLL);
  uint64_t v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__l.__cap_ = v54->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0LL;
  v54->__r_.__value_.__l.__cap_ = 0LL;
  v54->__r_.__value_.__r.__words[0] = 0LL;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SBYTE7(v78) < 0) {
    operator delete((void *)__p);
  }
  int v56 = (os_log_t *)sub_138E8(20);
  int v57 = *v56;
  if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v58 = &v72;
    if ((v72.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      BOOL v58 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3328;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&uint8_t buf[20] = v58;
    _os_log_impl(&dword_0, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configuring microphone dsp from %s", buf, 0x1Cu);
  }

  sub_7D084(cf, a4);
  sub_7D084(v68, a4);
  std::string __p = *(_OWORD *)v68;
  *(void *)&__int16 v78 = v69;
  v68[1] = 0LL;
  double v69 = 0LL;
  v68[0] = 0LL;
  BYTE8(v78) = 1;
  sub_7D084(&bytes, a4);
  char v86 = bytes;
  memset(&bytes, 0, sizeof(bytes));
  LOBYTE(v87) = 1;
  memset(buf, 0, sizeof(buf));
  __int16 v88 = *(_OWORD *)&qword_402EFC;
  double v89 = 2LL;
  sub_83660((uint64_t)buf, (int *)&v88, 3LL);
  sub_302438( a1,  (char *)cf,  &v72,  (std::string *)&__p,  &v86,  a6,  a14 | 0x100000000LL,  0x100000001LL,  0.0,  (uint64_t)v73,  1,  (uint64_t)buf);
  sub_83284((uint64_t)buf);
  if (BYTE8(v78) && SBYTE7(v78) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[0]);
  }
  if (v71 < 0) {
    operator delete((void *)cf[0]);
  }
  if (a12)
  {
    sub_30EB94(buf, v76);
    char v59 = *(std::__shared_weak_count **)&buf[8];
    sub_143208(a1, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        char v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }

  sub_D0C4C((void *)v74);
  uint64_t v62 = v73[0];
  v73[0] = 0LL;
  if (v62) {
    operator delete(v62);
  }
}

          AudioObjectID v35 = 1000 * v34.__d_.__rep_;
LABEL_56:
          if (v35 > (v33.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v36.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_59:
            std::condition_variable::__do_timed_wait(&v81, &__lk, v36);
            std::chrono::steady_clock::now();
            goto LABEL_60;
          }
        }

        v36.__d_.__rep_ = v35 + v33.__d_.__rep_;
        goto LABEL_59;
      }

    operator delete(__p[0]);
    goto LABEL_60;
  }

  return 1LL;
}

          a3 = *(unsigned int *)(v27 + 32);
          goto LABEL_56;
        }
      }

      __int16 v44 = (os_log_t *)sub_138E8(13);
      unsigned int v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        float v50 = "SubPort.cpp";
        unint64_t v51 = 1024;
        float v52 = 189;
        _os_log_impl(&dword_0, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      CFNumberRef v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v43, "Precondition failure.");
    }
  }

void sub_C806C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23)
{
  if (a15) {
    sub_39FD8(&a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C80E0( uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    uint64_t result = sub_37408(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = result;
    if ((_DWORD)result)
    {
      uint64_t outData = 0LL;
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, &outData);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        uint64_t v11 = outData;
        *(_BYTE *)(a1 + 24) = 1;
        *(void *)(a1 + 8) = &off_483688;
        *(void *)(a1 + 16) = v11;
        v12[0] = &off_483688;
        v12[1] = 0LL;
        return (uint64_t)sub_39FD8(v12);
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

  return result;
}

uint64_t sub_C81CC(AudioObjectID a1, void *inData, double a3)
{
  inAddress.uint64_t mSelector = 1414746691;
  *(double *)&inAddress.AudioObjectPropertyScope mScope = a3;
  uint64_t result = AudioObjectSetPropertyData(a1, &inAddress, 0, 0LL, 4u, inData);
  if ((_DWORD)result)
  {
    int v4 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  return result;
}

void sub_C8250(void *a1)
{
  uint64_t v1 = sub_39FD8(a1);
  operator delete(v1);
}

void sub_C8264(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 1074))
  {
    if (sub_C4704(*(void *)(a1 + 1008), 0))
    {
      int v4 = 1;
      (*(void (**)(void, uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(**(void **)(a1 + 1008)
                                                                                        + 400LL))( *(void *)(a1 + 1008),  1685287015LL,  1652123756LL,  &v4,  4LL,  1LL,  0LL);
      uint64_t v2 = (os_log_t *)sub_138E8(2);
      AudioObjectID v3 = *v2;
      if (*v2)
      {
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          unsigned __int16 v6 = "VirtualAudio_Device.cpp";
          __int16 v7 = 1024;
          int v8 = 4776;
          __int16 v9 = 1024;
          int v10 = v4;
          _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PME Bypass state change %u", buf, 0x18u);
        }
      }
    }
  }

void sub_C8384(unint64_t a1)
{
  uint64_t v1 = (void *)sub_C85B4(a1);
  operator delete(v1);
}

uint64_t sub_C8398( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, unsigned int a6, uint64_t *a7)
{
  if (*(_BYTE *)(result + 448))
  {
    uint64_t v7 = result;
    int v8 = (unsigned int *)(result + 680);
    WORD1(v31) = *(_WORD *)(result + 682);
    LOWORD(v31) = *(_WORD *)(result + 682);
    WORD1(v30) = *(_WORD *)(result + 682) == 0;
    LOWORD(v30) = *(_WORD *)(result + 682);
    while (1)
    {
      unsigned int v9 = __ldaxr(v8);
      if (v9 != (_DWORD)v31) {
        break;
      }
      if (!__stlxr(v30, v8)) {
        goto LABEL_7;
      }
    }

    __clrex();
LABEL_7:
    if (*(_WORD *)(result + 682)) {
      uint64_t v10 = 400LL;
    }
    else {
      uint64_t v10 = 424LL;
    }
    if (*(_WORD *)(result + 682)) {
      uint64_t v11 = result + 400;
    }
    else {
      uint64_t v11 = result + 424;
    }
    uint64_t v12 = *(void *)(v11 + 8) - *(void *)(result + v10);
    if (v12)
    {
      uint64_t v13 = 0LL;
      unint64_t v14 = v12 / 24;
      unint64_t v15 = v14 - 1;
      if (v14 <= 1) {
        uint64_t v16 = 1LL;
      }
      else {
        uint64_t v16 = v14;
      }
      uint64_t v17 = 16LL;
      uint64_t v18 = 8LL;
      do
      {
        os_log_t v19 = a5;
        if (v13) {
          os_log_t v19 = (uint64_t *)(*(void *)(v7 + 976) + v17 - 16);
        }
        char v20 = a7;
        if (v15 != v13) {
          char v20 = (uint64_t *)(*(void *)(v7 + 976) + v17);
        }
        uint64_t v21 = *v19;
        uint64_t v30 = *v20;
        uint64_t v22 = *(void *)(v7 + v10);
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v22 + v18) + 216LL))(*(void *)(v22 + v18));
        if ((_DWORD)result)
        {
          uint64_t v31 = v21;
          uint64_t v32 = 0LL;
          if (((a4 > 1) & sub_336A9C(*(void *)(v22 + v18))) == 1)
          {
            uint64_t v32 = a5[1];
            uint64_t v23 = a4;
          }

          else
          {
            uint64_t v23 = 1LL;
          }

          uint64_t result = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t *, void, uint64_t *))(**(void **)(v22 + v18) + 112LL))( *(void *)(v22 + v18),  a2,  a3,  v23,  &v31,  a6,  &v30);
        }

        else if (v30)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v22 + v18) + 104LL))( *(void *)(v22 + v18),  a2,  a3);
        }

        ++v13;
        v17 += 32LL;
        v18 += 24LL;
      }

      while (v16 != v13);
    }
  }

  return result;
}

unint64_t sub_C85B4(unint64_t a1)
{
  *(void *)a1 = off_46E958;
  uint64_t v2 = (os_log_t *)sub_138E8(24);
  AudioObjectID v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_24054(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
      uint64_t v7 = *(void *)(a1 + 728);
    }

    int v4 = __p;
    if (v7 < 0) {
      int v4 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    unsigned int v9 = "DSPGraphChain_SpeakerProtection.cpp";
    __int16 v10 = 1024;
    int v11 = 90;
    __int16 v12 = 2080;
    uint64_t v13 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting DSPGraphChain_SpeakerProtection %s", buf, 0x1Cu);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_81770(a1);
  return a1;
}

void sub_C86E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_C86F8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_C870C(a1);
  operator delete(v1);
}

uint64_t sub_C870C(uint64_t a1)
{
  *(void *)a1 = off_46EA30;
  uint64_t v2 = a1 + 16;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 16LL))(a1 + 16);
  if (*(void *)(a1 + 256))
  {
    int v4 = (os_log_t *)sub_138E8(13);
    CFStringRef v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v31 = 136315394;
      uint64_t v32 = "VirtualAudio_DevicePropertyManager.cpp";
      __int16 v33 = 1024;
      int v34 = 132;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Stale property caches were not cleared before property manager destruction",  (uint8_t *)&v31,  0x12u);
    }

    if (*(void *)(a1 + 256))
    {
      unsigned __int16 v6 = (uint64_t **)(a1 + 240);
      do
      {
        uint64_t v7 = *v6;
        int v8 = (uint64_t *)(*v6)[4];
        sub_71ACC((uint64_t **)(a1 + 240), *v6);
        operator delete(v7);
        if (!v8)
        {
          int v28 = (os_log_t *)sub_138E8(13);
          __int16 v29 = *v28;
          if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
          {
            int v31 = 136315394;
            uint64_t v32 = "VirtualAudio_DevicePropertyManager.cpp";
            __int16 v33 = 1024;
            int v34 = 137;
            _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [cachePtr is NULL]: Encountered null cache pointer",  (uint8_t *)&v31,  0x12u);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Encountered null cache pointer");
        }

        sub_85B80(v8 + 11);
        unsigned int v9 = (void *)v8[7];
        if (v9)
        {
          v8[8] = (uint64_t)v9;
          operator delete(v9);
        }

        sub_1BB88(v8 + 3);
        operator delete(v8);
      }

      while (*(void *)(a1 + 256));
    }
  }

  for (uint64_t i = *(void *)(a1 + 152); a1 + 144 != i; uint64_t i = *(void *)(i + 8))
  {
    int v11 = *(uint64_t **)(i + 16);
    if (v11)
    {
      sub_85B80(v11 + 11);
      __int16 v12 = (void *)v11[7];
      if (v12)
      {
        v11[8] = (uint64_t)v12;
        operator delete(v12);
      }

      sub_1BB88(v11 + 3);
      operator delete(v11);
    }
  }

  for (uint64_t j = *(void *)(a1 + 176); a1 + 168 != j; uint64_t j = *(void *)(j + 8))
  {
    unint64_t v14 = *(uint64_t **)(j + 16);
    if (v14)
    {
      sub_85B80(v14 + 11);
      unint64_t v15 = (void *)v14[7];
      if (v15)
      {
        v14[8] = (uint64_t)v15;
        operator delete(v15);
      }

      sub_1BB88(v14 + 3);
      operator delete(v14);
    }
  }

  for (uint64_t k = *(void *)(a1 + 200); a1 + 192 != k; uint64_t k = *(void *)(k + 8))
  {
    uint64_t v17 = *(uint64_t **)(k + 16);
    if (v17)
    {
      sub_85B80(v17 + 11);
      uint64_t v18 = (void *)v17[7];
      if (v18)
      {
        v17[8] = (uint64_t)v18;
        operator delete(v18);
      }

      sub_1BB88(v17 + 3);
      operator delete(v17);
    }
  }

  for (uint64_t m = *(void *)(a1 + 224); a1 + 216 != m; uint64_t m = *(void *)(m + 8))
  {
    char v20 = *(uint64_t **)(m + 16);
    if (v20)
    {
      sub_85B80(v20 + 11);
      uint64_t v21 = (void *)v20[7];
      if (v21)
      {
        v20[8] = (uint64_t)v21;
        operator delete(v21);
      }

      sub_1BB88(v20 + 3);
      operator delete(v20);
    }
  }

  sub_68314((void *)(a1 + 144));
  sub_68314((void *)(a1 + 168));
  sub_68314((void *)(a1 + 192));
  sub_68314((void *)(a1 + 216));
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  sub_32C8C(*(void **)(a1 + 248));
  sub_68314((void *)(a1 + 216));
  sub_68314((void *)(a1 + 192));
  sub_68314((void *)(a1 + 168));
  sub_68314((void *)(a1 + 144));
  uint64_t v22 = *(uint64_t **)(a1 + 136);
  *(void *)(a1 + 136) = 0LL;
  if (v22) {
    sub_C8B54(v22);
  }
  uint64_t v23 = *(uint64_t **)(a1 + 128);
  *(void *)(a1 + sub_1576A8(v38 - 128) = 0LL;
  if (v23) {
    sub_C8B54(v23);
  }
  uint64_t v24 = *(uint64_t **)(a1 + 120);
  *(void *)(a1 + 120) = 0LL;
  if (v24) {
    sub_C8B54(v24);
  }
  char v25 = *(uint64_t **)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v25) {
    sub_C8B54(v25);
  }
  __int16 v26 = *(uint64_t **)(a1 + 104);
  *(void *)(a1 + 104) = 0LL;
  if (v26) {
    sub_C8B54(v26);
  }
  *(void *)(a1 + 16) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 40));
  return a1;
}

void sub_C8AF4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_C8B54(uint64_t *a1)
{
  if (a1)
  {
    sub_85B80(a1 + 11);
    uint64_t v2 = (void *)a1[7];
    if (v2)
    {
      a1[8] = (uint64_t)v2;
      operator delete(v2);
    }

    sub_1BB88(a1 + 3);
    operator delete(a1);
  }

void sub_C8B9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5) {
    int v9 = 1869968496;
  }
  else {
    int v9 = 1768845428;
  }
  *(_DWORD *)buf = 1836414053;
  *(_DWORD *)&uint8_t buf[4] = v9;
  *(_DWORD *)&buf[8] = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)a2 + 680LL))(a2, buf);
  if (!v10)
  {
    unint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 587;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [theMuteControl is NULL]: couldn't get a mute control from device",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "couldn't get a mute control from device");
  }

  int v11 = (char *)operator new(0x70uLL);
  uint64_t v12 = (uint64_t)v11;
  *(void *)int v11 = v10;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 2) = 0LL;
  *((void *)v11 + 3) = v11 + 24;
  *((void *)v11 + 4) = v11 + 24;
  *((void *)v11 + 5) = 0LL;
  v11[48] = 1;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *((void *)v11 + 11) = v11 + 88;
  *((void *)v11 + 12) = v11 + 88;
  *((void *)v11 + 13) = 0LL;
  *a1 = v11;
  *(void *)buf = 0x676C6F626D757465LL;
  if (a5) {
    char v13 = 1;
  }
  else {
    char v13 = 2;
  }
  *(_DWORD *)&buf[8] = 0;
  sub_225790((std::__shared_weak_count_vtbl *)v11, (int *)buf, v13);
  memset(buf, 0, sizeof(buf));
  uint64_t v14 = 56LL;
  if (a5) {
    uint64_t v14 = 40LL;
  }
  sub_229AFC(v12, *(void *)(a3 + v14), (uint64_t *)buf);
  uint64_t v18 = buf;
  sub_E2D18((void ***)&v18);
}

void sub_C8D88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_C8DCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((_DWORD)a5) {
    uint64_t v9 = 528LL;
  }
  else {
    uint64_t v9 = 504LL;
  }
  if ((_DWORD)a5) {
    uint64_t v10 = 520LL;
  }
  else {
    uint64_t v10 = 496LL;
  }
  if ((_DWORD)a5) {
    uint64_t v11 = a2 + 520;
  }
  else {
    uint64_t v11 = a2 + 496;
  }
  uint64_t v12 = (*(void *)(a2 + v9) - *(void *)(a2 + v10)) >> 3;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a3 + 88LL))(a3, a5) != (_DWORD)v12)
  {
    char v20 = (os_log_t *)sub_138E8(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 610;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): The Plugin Device and the Core Device do not have the same number of streams.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "The Plugin Device and the Core Device do not have the same number of streams.");
  }

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  uint64_t v13 = *(void *)(a2 + v10);
  if (((*(void *)(a2 + v9) - v13) & 0x7FFFFFFF8LL) != 0)
  {
    unint64_t v14 = 0LL;
    do
    {
      if (v14 >= (*(void *)(v11 + 8) - v13) >> 3) {
        uint64_t v15 = 0LL;
      }
      else {
        uint64_t v15 = *(void *)(v13 + 8 * v14);
      }
      uint64_t v16 = (char *)operator new(0x70uLL);
      *(void *)uint64_t v16 = v15;
      *((void *)v16 + 1) = a4;
      *((void *)v16 + 2) = 0LL;
      *((void *)v16 + 3) = v16 + 24;
      *((void *)v16 + 4) = v16 + 24;
      *((void *)v16 + 5) = 0LL;
      v16[48] = 1;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 72) = 0u;
      *((void *)v16 + 11) = v16 + 88;
      *((void *)v16 + 12) = v16 + 88;
      *((void *)v16 + 13) = 0LL;
      strcpy((char *)buf, "tmfsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_225790((std::__shared_weak_count_vtbl *)v16, (int *)buf, 8);
      strcpy((char *)buf, "talsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_225790((std::__shared_weak_count_vtbl *)v16, (int *)buf, 0);
      memset(buf, 0, sizeof(buf));
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a3 + 96LL))(a3, a5, v14);
      sub_229AFC((uint64_t)v16, v17, (uint64_t *)buf);
      uint64_t v18 = operator new(0x18uLL);
      v18[1] = a1;
      uint64_t v18[2] = v16;
      uint64_t v19 = *a1;
      void *v18 = *a1;
      *(void *)(v19 + 8) = v18;
      *a1 = (uint64_t)v18;
      ++a1[2];
      uint64_t v24 = buf;
      sub_E2D18((void ***)&v24);
      ++v14;
      uint64_t v13 = *(void *)(a2 + v10);
    }

    while (v14 < ((unint64_t)(*(void *)(a2 + v9) - v13) >> 3));
  }

void sub_C9084( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_C90D0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 16LL))(a1 + 16);
  if (v2[30])
  {
    int v4 = (os_log_t *)sub_138E8(13);
    CFStringRef v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        *(void *)uint64_t v17 = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&v17[8] = 1024;
        *(_DWORD *)&v17[10] = 104;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Stale property caches were not cleared before property manager teardown",  (uint8_t *)&v16,  0x12u);
      }
    }
  }

  unsigned __int16 v6 = *(void **)(a1 + 240);
  if (v6 != (void *)(a1 + 248))
  {
    do
    {
      uint64_t v7 = (uint64_t *)v6[4];
      if (!v7)
      {
        uint64_t v13 = (os_log_t *)sub_138E8(13);
        unint64_t v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          int v16 = 136315394;
          *(void *)uint64_t v17 = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&v17[8] = 1024;
          *(_DWORD *)&v17[10] = 107;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [cachePtr is NULL]: Encountered null cache pointer",  (uint8_t *)&v16,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Encountered null cache pointer");
      }

      sub_229514(v7);
      int v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          unsigned __int16 v6 = v9;
        }

        while (!v10);
      }

      unsigned __int16 v6 = v9;
    }

    while (v9 != (void *)(a1 + 248));
  }

  sub_C9368((uint64_t *)&v16, a1);
  uint64_t result = sub_68314(&v16);
  if (v3) {
    return (void *)(*(uint64_t (**)(void *))(*v2 + 24LL))(v2);
  }
  return result;
}

void sub_C9300(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void *sub_C9368(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  uint64_t v4 = *(void *)(a2 + 104);
  CFStringRef v5 = operator new(0x18uLL);
  v5[1] = a1;
  v5[2] = v4;
  void *v5 = a1;
  *a1 = (uint64_t)v5;
  a1[1] = (uint64_t)v5;
  a1[2] = 1LL;
  uint64_t v6 = *(void *)(a2 + 112);
  uint64_t v7 = operator new(0x18uLL);
  v7[1] = a1;
  double v7[2] = v6;
  void *v7 = v5;
  v5[1] = v7;
  *a1 = (uint64_t)v7;
  a1[2] = 2LL;
  uint64_t v8 = *(void *)(a2 + 120);
  uint64_t v9 = operator new(0x18uLL);
  v9[1] = a1;
  v9[2] = v8;
  *uint64_t v9 = v7;
  v7[1] = v9;
  *a1 = (uint64_t)v9;
  a1[2] = 3LL;
  uint64_t v10 = *(void *)(a2 + 128);
  uint64_t v11 = operator new(0x18uLL);
  v11[1] = a1;
  void v11[2] = v10;
  *uint64_t v11 = v9;
  v9[1] = v11;
  *a1 = (uint64_t)v11;
  a1[2] = 4LL;
  uint64_t v12 = *(void *)(a2 + 136);
  uint64_t v13 = operator new(0x18uLL);
  v13[1] = a1;
  v13[2] = v12;
  *uint64_t v13 = v11;
  v11[1] = v13;
  *a1 = (uint64_t)v13;
  a1[2] = 5LL;
  sub_C94C8(*(void **)(a2 + 152), (void *)(a2 + 144), a1);
  sub_C94C8(*(void **)(a2 + 176), (void *)(a2 + 168), a1);
  sub_C94C8(*(void **)(a2 + 200), (void *)(a2 + 192), a1);
  return sub_C94C8(*(void **)(a2 + 224), (void *)(a2 + 216), a1);
}

void sub_C94A0(_Unwind_Exception *a1)
{
}

void *sub_C94C8(void *result, void *a2, uint64_t *a3)
{
  if (result != a2)
  {
    CFStringRef v5 = result;
    do
    {
      uint64_t result = operator new(0x18uLL);
      result[2] = v5[2];
      uint64_t v6 = *a3;
      *uint64_t result = *a3;
      result[1] = a3;
      *(void *)(v6 + 8) = result;
      *a3 = (uint64_t)result;
      ++a3[2];
      CFStringRef v5 = (void *)v5[1];
    }

    while (v5 != a2);
  }

  return result;
}

uint64_t *sub_C9534(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  CFStringRef v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        CFStringRef v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      CFStringRef v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *uint64_t v9 = 0LL;
    v9[1] = 0LL;
    v9[2] = (uint64_t)v7;
    void *v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      uint64_t v11 = *v6;
    }

    else
    {
      uint64_t v11 = v9;
    }

    uint64_t result = sub_7A420((uint64_t *)v4[1], v11);
    ++v4[2];
  }

  return result;
}

void *sub_C95E8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t result = (void *)a1[1];
  if (a2 != a3 && result != a1)
  {
    do
    {
      result[2] = *(void *)(v4 + 16);
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t result = (void *)result[1];
    }

    while (v4 != a3 && result != a1);
  }

  if (result == a1)
  {
    if (v4 != a3)
    {
      uint64_t result = operator new(0x18uLL);
      uint64_t v11 = result;
      *uint64_t result = 0LL;
      result[1] = 0LL;
      result[2] = *(void *)(v4 + 16);
      uint64_t v12 = *(void *)(v4 + 8);
      uint64_t v13 = 1LL;
      if (v12 != a3)
      {
        unint64_t v14 = result;
        do
        {
          uint64_t result = operator new(0x18uLL);
          *uint64_t result = v14;
          result[1] = 0LL;
          result[2] = *(void *)(v12 + 16);
          v14[1] = result;
          ++v13;
          uint64_t v12 = *(void *)(v12 + 8);
          unint64_t v14 = result;
        }

        while (v12 != a3);
      }

      uint64_t v15 = *a1;
      *(void *)(v15 + 8) = v11;
      *uint64_t v11 = v15;
      *a1 = result;
      result[1] = a1;
      a1[2] += v13;
    }
  }

  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *result;
    *(void *)(v9 + 8) = *(void *)(*a1 + 8LL);
    **(void **)(v8 + 8) = v9;
    do
    {
      uint64_t v10 = (void *)result[1];
      --a1[2];
      operator delete(result);
      uint64_t result = v10;
    }

    while (v10 != a1);
  }

  return result;
}

void sub_C9718(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_C9738(_Unwind_Exception *a1)
{
}

void sub_C974C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v37 = a1 + 16;
  int v39 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16LL))();
  sub_C9368((uint64_t *)v41, a1);
  uint64_t v7 = *(void *)&v42[4];
  if (v41 == *(uint8_t **)&v42[4])
  {
    sub_68314(v41);
    goto LABEL_55;
  }

  do
  {
    uint64_t v8 = *(void **)(v7 + 16);
    if (!v8)
    {
      uint64_t v10 = (os_log_t *)sub_138E8(13);
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 199;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: A property cache is NULL",  buf,  0x12u);
        }
      }
    }

    uint64_t v7 = *(void *)(v7 + 8);
    if (*v8 == a2) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0LL;
    }
  }

  while (!v9 && v41 != (uint8_t *)v7);
  sub_68314(v41);
  if (!v9)
  {
LABEL_55:
    int v34 = (os_log_t *)sub_138E8(13);
    AudioObjectID v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v41 = 136315394;
      *(void *)uint64_t v42 = "VirtualAudio_DevicePropertyManager.cpp";
      *(_WORD *)&v42[8] = 1024;
      *(_DWORD *)&v42[10] = 408;
      _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [thePropertyCache is NULL]: could not find property cache for given HP_Object",  v41,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "could not find property cache for given HP_Object");
  }

  uint64_t v12 = v9[1];
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16LL))(v12);
  if (((*(uint64_t (**)(void))(*(void *)v9[1] + 48LL))(v9[1]) & 1) == 0)
  {
    unint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int v41 = 136315394;
        *(void *)uint64_t v42 = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&v42[10] = 450;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Cache mutex not held by current thread.",  v41,  0x12u);
      }
    }
  }

  int v16 = v9 + 3;
  for (uint64_t i = (void *)v9[4]; ; uint64_t i = (void *)i[1])
  {
    if (i == v16) {
      goto LABEL_49;
    }
    uint64_t v18 = (_DWORD *)i[2];
    uint64_t v19 = (std::__shared_weak_count *)i[3];
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }

    if (v18[9] == a3[1] && v18[8] == *a3)
    {
      BOOL v22 = v18[10] == a3[2];
      if (!v19) {
        goto LABEL_31;
      }
    }

    else
    {
      BOOL v22 = 0;
      if (!v19) {
        goto LABEL_31;
      }
    }

    uint64_t v23 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }

void sub_C9BE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_C9C88(uint64_t a1)
{
  while (*(void *)(a1 + 16))
  {
    uint64_t v2 = *(void **)a1;
    int v3 = *(uint64_t **)(*(void *)a1 + 32LL);
    sub_71ACC((uint64_t **)a1, *(uint64_t **)a1);
    operator delete(v2);
    if (!v3)
    {
      CFStringRef v5 = (os_log_t *)sub_138E8(13);
      uint64_t v6 = *v5;
      if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        uint64_t v9 = "VirtualAudio_DevicePropertyManager.cpp";
        __int16 v10 = 1024;
        int v11 = 64;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [cachePtr is NULL]: Encountered a NULL stream property cache pointer",  (uint8_t *)&v8,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered a NULL stream property cache pointer");
    }

    sub_229514(v3);
    sub_85B80(v3 + 11);
    uint64_t v4 = (void *)v3[7];
    if (v4)
    {
      v3[8] = (uint64_t)v4;
      operator delete(v4);
    }

    sub_1BB88(v3 + 3);
    operator delete(v3);
  }

void sub_C9DE0(_Unwind_Exception *exception_object)
{
}

void *sub_C9DFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 16;
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 16LL))(a1 + 16);
  sub_C9C88(v4 + 224);
  sub_C9368(&v16, a1);
  for (uint64_t i = v17; &v16 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v6 = i[2];
    if (!v6)
    {
      uint64_t v9 = (os_log_t *)sub_138E8(13);
      __int16 v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 446;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: A property cache is NULL",  buf,  0x12u);
        }
      }
    }

    uint64_t v7 = *(void *)(v6 + 8);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
    sub_2297C0((uint64_t *)v6);
    *(_BYTE *)(v6 + 48) = 0;
    if (a2)
    {
      sub_229FB0(v6, a2);
    }

    else
    {
      if (((*(uint64_t (**)(void))(**(void **)(v6 + 8) + 48LL))(*(void *)(v6 + 8)) & 1) == 0)
      {
        int v11 = (os_log_t *)sub_138E8(13);
        uint64_t v12 = *v11;
        if (*v11)
        {
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 488;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Cache mutex not held by current thread.",  buf,  0x12u);
          }
        }
      }

      memset(buf, 0, sizeof(buf));
      sub_87DA8( (char *)buf,  *(uint64_t **)(v6 + 56),  *(uint64_t **)(v6 + 64),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 64) - *(void *)(v6 + 56)) >> 2));
      uint64_t v21 = *(void *)(v6 + 80);
      *(void *)(v6 + 64) = *(void *)(v6 + 56);
      sub_34AA0(&v18, *(void *)(v6 + 8));
      int v13 = *(void **)buf;
      sub_34B90( (unint64_t **)v6,  -1431655765 * ((*(void *)&buf[8] - *(void *)buf) >> 2),  *(int **)buf,  1);
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v18 + 16LL))(v18);
      }
      if (v13) {
        operator delete(v13);
      }
    }

    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
    }
  }

  uint64_t result = sub_68314(&v16);
  if (v15) {
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return result;
}

void sub_CA0B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void *sub_CA170(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 16;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 16LL))(a1 + 16);
  sub_C9368(&v11, a1);
  for (uint64_t i = v12; &v11 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v6 = i[2];
    if (!v6)
    {
      uint64_t v7 = (os_log_t *)sub_138E8(13);
      int v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          unint64_t v14 = "VirtualAudio_DevicePropertyManager.cpp";
          __int16 v15 = 1024;
          int v16 = 461;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: A property cache is NULL",  buf,  0x12u);
        }
      }
    }

    sub_229FB0(v6, a2);
  }

  uint64_t result = sub_68314(&v11);
  if (v10) {
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return result;
}

void sub_CA2E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_CA330(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(uint64_t **)(*(void *)a2 + 24LL);
  int v8 = v7 + 2;
  sub_B8CBC(&v110, v7 + 2, "", 50);
  sub_B8CBC(&v108, v7 + 4, "", 51);
  uint64_t v9 = *(unsigned int *)(v110 + 144);
  int v10 = *(os_unfair_lock_s **)(v110 + 192);
  if (!v10)
  {
    int v82 = (os_log_t *)sub_138E8(13);
    char v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(void *)v110 + 144LL))(buf);
      uint64_t v84 = *(void *)buf;
      sub_2CA1C(__p, v9);
      if (v107 >= 0) {
        char v85 = __p;
      }
      else {
        char v85 = (void **)__p[0];
      }
      *(_DWORD *)__int16 v113 = 136315906;
      *(void *)&v113[4] = "RoutingHandler_Record_Unk.cpp";
      *(_WORD *)&v113[12] = 1024;
      *(_DWORD *)&v113[14] = 56;
      __int16 v114 = 2112;
      uint64_t v115 = v84;
      __int16 v116 = 2080;
      BOOL v117 = v85;
      _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [device is NULL]: could not get device for port \\%@\\ (type: '%s').",  v113,  0x26u);
      if (v107 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)buf);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  sub_1B6AD4((uint64_t)v113, *(void *)(v110 + 192), v110, a2, v7[9], *(_DWORD *)(a2 + 12));
  sub_1BB524((unsigned int **)v113, v7 + 2, v10);
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  uint64_t v11 = (std::__shared_weak_count *)v7[3];
  if (v11)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      int v13 = v12;
      uint64_t v14 = *v8;
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        unint64_t v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
      *(void *)buf = v14;
      *(void *)&buf[8] = v12;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    else
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = 0LL;
    }
  }

  sub_1BC5DC((uint64_t)__p, (char **)v113, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  char v19 = (char *)operator new(0x30uLL);
  uint64_t v20 = v9;
  int v21 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v10->_os_unfair_lock_opaque + 120LL))(v10);
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  BOOL v22 = (std::__shared_weak_count *)v7[3];
  if (v22)
  {
    uint64_t v23 = std::__shared_weak_count::lock(v22);
    if (!v23)
    {
      unint64_t v24 = *(std::__shared_weak_count **)&buf[8];
      *(void *)buf = 0LL;
      *(void *)&buf[8] = 0LL;
      if (!v24) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }

    unint64_t v24 = v23;
    uint64_t v25 = *v8;
    __int16 v26 = (unint64_t *)&v23->__shared_weak_owners_;
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    unint64_t v28 = *(std::__shared_weak_count **)&buf[8];
    *(void *)buf = v25;
    *(void *)&buf[8] = v24;
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    __int16 v29 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
LABEL_24:
      std::__shared_weak_count::__release_weak(v24);
    }
  }

void sub_CAC78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, std::__shared_weak_count *a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, void *__p, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_CAE40(void *a1@<X8>)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = a1 + 1;
}

uint64_t *sub_CAE54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v4 = a2;
    CFStringRef v5 = &a2[2 * a3];
    do
    {
      sub_85C34(a1, *v4, v4[1]);
      v4 += 2;
    }

    while (v4 != v5);
  }

  return a1;
}

void sub_CAEA8(_Unwind_Exception *a1)
{
}

uint64_t sub_CAEBC(uint64_t *a1)
{
  uint64_t v2 = operator new(0x80uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  *uint64_t v2 = off_484268;
  uint64_t result = sub_EC5B8((uint64_t)(v2 + 3), 0);
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_CAF00(_Unwind_Exception *a1)
{
}

uint64_t sub_CAF18(uint64_t a1, __int128 *a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_484208;
  *(void *)(a1 + 80) = 0LL;
  int v3 = (int64x2_t *)(a1 + 80);
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  if (*(void *)a2)
  {
    uint64_t v39 = a1 + 96;
    CFStringRef v5 = sub_7BE90(1uLL);
    __int128 v7 = *a2;
    _OWORD *v5 = *a2;
    if (*((void *)&v7 + 1))
    {
      int v8 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    uint64_t v11 = *(void **)(a1 + 80);
    int v10 = *(void **)(a1 + 88);
    if (v10 == v11)
    {
      int64x2_t v14 = vdupq_n_s64((unint64_t)v10);
      uint64_t v12 = v5;
    }

    else
    {
      uint64_t v12 = v5;
      do
      {
        __int128 v13 = *((_OWORD *)v10 - 1);
        v10 -= 2;
        *--uint64_t v12 = v13;
        *int v10 = 0LL;
        v10[1] = 0LL;
      }

      while (v10 != v11);
      int64x2_t v14 = *v3;
    }

    unint64_t v18 = v5 + 1;
    *(void *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = v5 + 1;
    int64x2_t v37 = v14;
    uint64_t v19 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = &v5[v6];
    uint64_t v38 = v19;
LABEL_25:
    uint64_t v36 = v14.i64[0];
    sub_A0D64((uint64_t)&v36);
    goto LABEL_26;
  }

  sub_CAEBC((uint64_t *)&v34);
  __int128 v15 = v34;
  __int128 v35 = v34;
  __int128 v34 = 0uLL;
  unint64_t v16 = *(void *)(a1 + 96);
  uint64_t v17 = *(_OWORD **)(a1 + 88);
  if ((unint64_t)v17 >= v16)
  {
    __int128 v33 = v15;
    uint64_t v20 = ((uint64_t)v17 - v3->i64[0]) >> 4;
    uint64_t v21 = v16 - v3->i64[0];
    uint64_t v22 = v21 >> 3;
    else {
      unint64_t v23 = v22;
    }
    uint64_t v39 = a1 + 96;
    unint64_t v24 = (char *)sub_7BE90(v23);
    __int16 v26 = &v24[16 * v20];
    *(_OWORD *)__int16 v26 = v33;
    __int128 v35 = 0uLL;
    unint64_t v28 = *(void **)(a1 + 80);
    unint64_t v27 = *(void **)(a1 + 88);
    if (v27 == v28)
    {
      int64x2_t v14 = vdupq_n_s64((unint64_t)v27);
      __int16 v29 = &v24[16 * v20];
    }

    else
    {
      __int16 v29 = &v24[16 * v20];
      do
      {
        __int128 v30 = *((_OWORD *)v27 - 1);
        v27 -= 2;
        *((_OWORD *)v29 - 1) = v30;
        v29 -= 16;
        *unint64_t v27 = 0LL;
        v27[1] = 0LL;
      }

      while (v27 != v28);
      int64x2_t v14 = *v3;
    }

    unint64_t v18 = v26 + 16;
    *(void *)(a1 + 80) = v29;
    *(void *)(a1 + 88) = v26 + 16;
    int64x2_t v37 = v14;
    uint64_t v31 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = &v24[16 * v25];
    uint64_t v38 = v31;
    goto LABEL_25;
  }

  _OWORD *v17 = v15;
  unint64_t v18 = v17 + 1;
  __int128 v35 = 0uLL;
LABEL_26:
  *(void *)(a1 + 88) = v18;
  sub_CC160(a1);
  return a1;
}

void sub_CB108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  sub_7A768((uint64_t)va);
  sub_7A668((void ***)va1);
  sub_F3008(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_CB144(uint64_t *a1)
{
  uint64_t v2 = operator new(0x68uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  *uint64_t v2 = off_484410;
  uint64_t result = sub_EC558((uint64_t)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_CB184(_Unwind_Exception *a1)
{
}

void sub_CB19C(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = operator new(0x88uLL);
  uint64_t v7 = v6;
  v6[1] = 0LL;
  v6[2] = 0LL;
  void *v6 = off_4842D8;
  int v8 = v6 + 3;
  v11[0] = a2;
  v11[1] = a3;
  if (a3)
  {
    p_shared_weak_owners = (unint64_t *)&a3->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  sub_CB254((uint64_t)(v6 + 3), v11);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_CB230(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_CB254(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_2BC660(a1);
  *uint64_t v4 = off_484310;
  v4[10] = off_4843D8;
  v4[12] = *a2;
  uint64_t v5 = a2[1];
  v4[13] = v5;
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = (unint64_t *)(v5 + 16);
  do
    unint64_t v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  uint64_t v8 = *(void *)(a1 + 104);
  if (!v8 || *(void *)(v8 + 8) == -1LL)
  {
LABEL_7:
    unint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int64x2_t v14 = "HardwareVolumeControl.h";
      __int16 v15 = 1024;
      int v16 = 39;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): inPhysicalDeviceOwnedVolumeControl has expired",  (uint8_t *)&v13,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "inPhysicalDeviceOwnedVolumeControl has expired");
  }

  return a1;
}

void sub_CB3A8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 104);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_F3008(v1);
  _Unwind_Resume(a1);
}

void sub_CB3E0(void *a1)
{
  uint64_t v1 = (void *)sub_CBF1C(a1);
  operator delete(v1);
}

uint64_t sub_CB3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 16LL))(v8, a2);
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return v3;
}

void sub_CB484( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CB498(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 24LL))(v8, a2);
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return v3;
}

void sub_CB528( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CB53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 32LL))(v12, a2, a3, a4);
  uint64_t v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_CB5E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CB5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_CB6B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CB6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_CB77C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CB790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 64LL))(v12, a2, a3, a4);
  uint64_t v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_CB838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CB84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 72LL))(v12, a2, a3, a4);
  uint64_t v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_CB8F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CB908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_CB9B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CB9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v14;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  std::string __p = 0LL;
  sub_A9784(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v7 + 88LL))(v7, &__p, a3, a4);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }

  uint64_t v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_CBA94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a13);
  _Unwind_Resume(a1);
}

double sub_CBAC0(uint64_t a1)
{
  double v1 = (*(double (**)(uint64_t))(*(void *)v6 + 96LL))(v6);
  uint64_t v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return v1;
}

void sub_CBB58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_CBB6C(uint64_t a1)
{
  double v1 = (*(double (**)(uint64_t))(*(void *)v6 + 104LL))(v6);
  uint64_t v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return v1;
}

void sub_CBC04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CBC18()
{
  return 0LL;
}

uint64_t sub_CBC24()
{
  return 0LL;
}

void sub_CBC30()
{
  unsigned __int8 v0 = (os_log_t *)sub_138E8(13);
  double v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unint64_t v4 = "VolumeControl.h";
      __int16 v5 = 1024;
      int v6 = 191;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempting to add sub volume control to an unsupported VolumeControl object.",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error( exception,  "Attempting to add sub volume control to an unsupported VolumeControl object.");
}

void sub_CBCF0(_Unwind_Exception *exception_object)
{
}

void sub_CBD0C(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

uint64_t sub_CBD18()
{
  return 0LL;
}

void sub_CBD20(uint64_t a1)
{
  double v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_CBDA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CBDB4(uint64_t a1)
{
  double v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_CBE34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CBE48(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 80) + 32LL))(v6 + 80);
  uint64_t v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return v1;
}

void sub_CBED0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CBEE4(uint64_t a1)
{
  return sub_CBF1C((void *)(a1 - 80));
}

void sub_CBEEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_CBF1C((void *)(a1 - 80));
  operator delete(v1);
}

void sub_CBF04(uint64_t a1)
{
}

void sub_CBF0C(uint64_t a1)
{
}

uint64_t sub_CBF14(uint64_t a1)
{
  return sub_CBE48(a1 - 80);
}

uint64_t sub_CBF1C(void *a1)
{
  *a1 = off_484310;
  a1[10] = off_4843D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_F3008((uint64_t)a1);
}

std::__shared_weak_count *sub_CBF5C(uint64_t *a1, uint64_t *a2, const char *a3, int a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    unint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        uint64_t v14 = strrchr(a3, 47);
        if (v14) {
          uint64_t v13 = v14 + 1;
        }
        else {
          uint64_t v13 = a3;
        }
      }

      else
      {
        uint64_t v13 = 0LL;
      }

      int v16 = 136315906;
      uint64_t v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not lock weak ptr (%s:%d).",  (uint8_t *)&v16,  0x22u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }

  return result;
}

void sub_CC0B8(_Unwind_Exception *a1)
{
}

void sub_CC0E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4842D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_CC0F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4842D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_CC110(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_CC120(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_484410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_CC130(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_484410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_CC150(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_CC160(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56LL))(__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v2 = (void **)(a1 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
  *(void *)(a1 + 32) = v4;
  HIBYTE(v4) = 0;
  LOBYTE(__p[0]) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_CC1EC(uint64_t a1)
{
  *(void *)a1 = off_484208;
  unint64_t v3 = (void **)(a1 + 80);
  sub_7A668(&v3);
  return sub_F3008(a1);
}

void sub_CC230(uint64_t a1)
{
  *(void *)a1 = off_484208;
  unint64_t v3 = (void **)(a1 + 80);
  sub_7A668(&v3);
  uint64_t v2 = (void *)sub_F3008(a1);
  operator delete(v2);
}

std::string *sub_CC278@<X0>(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_7D084(&v14, __str);
  uint64_t v4 = std::string::insert(&v14, 0LL, "addr: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v15, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::string::append(a2, "controls: { ", 0xCuLL);
  uint64_t v10 = (os_unfair_lock_s **)a1[10];
  while (v10 != (os_unfair_lock_s **)a1[11])
  {
    sub_23FE8((uint64_t)__p, *v10 + 2);
    if (cap >= 0) {
      unint64_t v11 = __p;
    }
    else {
      unint64_t v11 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v12 = HIBYTE(cap);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v11, v12);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    v10 += 2;
    if (v10 == (os_unfair_lock_s **)a1[11]) {
      break;
    }
    std::string::append(a2, ", ", 2uLL);
  }

  return std::string::append(a2, " } ]", 4uLL);
}

void sub_CC478( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CC4FC(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t *, unsigned int *))(*a1 + 16))(a1, a2) & 1) == 0)
  {
    std::string v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v21 = "ControlSet.h";
      __int16 v22 = 1024;
      int v23 = 177;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported property.",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  uint64_t v8 = (void *)a1[10];
  if (v8 != (void *)a1[11])
  {
    while (((*(uint64_t (**)(void, unsigned int *, uint64_t, uint64_t))(*(void *)*v8 + 64LL))( *v8,  a2,  a3,  a4) & 1) != 0)
    {
      v8 += 2;
      if (v8 == (void *)a1[11]) {
        return 1LL;
      }
    }

    uint64_t v10 = (os_log_t *)sub_138E8(18);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, *a2);
      if (v19 >= 0) {
        std::string::size_type v12 = __p;
      }
      else {
        std::string::size_type v12 = (void **)__p[0];
      }
      unsigned int v13 = a2[1];
      unsigned int v14 = a2[2];
      *(_DWORD *)buf = 136316162;
      uint64_t v21 = "ControlSet.h";
      __int16 v22 = 1024;
      int v23 = 183;
      __int16 v24 = 2080;
      uint64_t v25 = v12;
      __int16 v26 = 1024;
      unsigned int v27 = v13;
      __int16 v28 = 1024;
      unsigned int v29 = v14;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d RegisterRelayedListener() failed. selector: '%s'; scope: %u; element: %u.",
        buf,
        0x28u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    while (v8 != (void *)a1[10])
    {
      (*(void (**)(void, unsigned int *, uint64_t, uint64_t))(*(void *)*v8 + 72LL))(*v8, a2, a3, a4);
      v8 -= 2;
    }
  }

  return 0LL;
}

uint64_t sub_CC770(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t *, unsigned int *))(*a1 + 16))(a1, a2) & 1) == 0)
  {
    std::string v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v21 = "ControlSet.h";
      __int16 v22 = 1024;
      int v23 = 200;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported property.",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  uint64_t v8 = (void *)a1[10];
  for (LOBYTE(v9) = 1; v8 != (void *)a1[11]; v8 += 2)
  {
    if (((*(uint64_t (**)(void, unsigned int *, uint64_t, uint64_t))(*(void *)*v8 + 72LL))(*v8, a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = (os_log_t *)sub_138E8(18);
      std::string::size_type v9 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, *a2);
          unint64_t v11 = __p;
          if (v19 < 0) {
            unint64_t v11 = (void **)__p[0];
          }
          unsigned int v12 = a2[1];
          unsigned int v13 = a2[2];
          *(_DWORD *)buf = 136316162;
          uint64_t v21 = "ControlSet.h";
          __int16 v22 = 1024;
          int v23 = 206;
          __int16 v24 = 2080;
          uint64_t v25 = v11;
          __int16 v26 = 1024;
          unsigned int v27 = v12;
          __int16 v28 = 1024;
          unsigned int v29 = v13;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d UnregisterRelayedListener() failed. selector: '%s'; scope: %u; element: %u.",
            buf,
            0x28u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }

        LOBYTE(v9) = 0;
      }
    }
  }

  return v9 & 1;
}

void sub_CC9CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_484268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_CC9DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_484268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_CC9FC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_CCA0C(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8LL);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *uint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0LL;
  }

  return result;
}

void *sub_CCA54(void *a1)
{
  *a1 = off_484140;
  sub_85B80(a1 + 2);
  return a1;
}

void sub_CCA84(uint64_t *a1)
{
  *a1 = (uint64_t)off_484140;
  sub_85B80(a1 + 2);
  operator delete(a1);
}

void *sub_CCAB4(uint64_t a1)
{
  v11[0] = &off_484178;
  v11[1] = a1;
  unsigned int v12 = v11;
  uint64_t v2 = sub_EAD14();
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = (uint64_t)v12;
  if (!v12) {
    goto LABEL_4;
  }
  if (v12 != v11)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v12 + 16LL))();
LABEL_4:
    uint64_t v10 = (_BYTE *)v4;
    goto LABEL_6;
  }

  uint64_t v10 = v9;
  (*(void (**)(void *, _BYTE *))(v11[0] + 24LL))(v11, v9);
LABEL_6:
  sub_EAF70(v2, v3, (uint64_t)v9);
  uint64_t v5 = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v9;
  }

  else
  {
    if (!v10) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v11;
  }

  else
  {
    if (!v12) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_CCBE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char v19 = a13;
  if (a13 == v17)
  {
    uint64_t v20 = 4LL;
    char v19 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  uint64_t v21 = a17;
  if (a17 == &a14)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void *sub_CCC50(uint64_t a1)
{
  v11[0] = &off_4841C0;
  v11[1] = a1;
  unsigned int v12 = v11;
  uint64_t v2 = sub_EAD14();
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = (uint64_t)v12;
  if (!v12) {
    goto LABEL_4;
  }
  if (v12 != v11)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v12 + 16LL))();
LABEL_4:
    uint64_t v10 = (_BYTE *)v4;
    goto LABEL_6;
  }

  uint64_t v10 = v9;
  (*(void (**)(void *, _BYTE *))(v11[0] + 24LL))(v11, v9);
LABEL_6:
  sub_EAF70(v2, v3, (uint64_t)v9);
  uint64_t v5 = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v9;
  }

  else
  {
    if (!v10) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v11;
  }

  else
  {
    if (!v12) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_CCD7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char v19 = a13;
  if (a13 == v17)
  {
    uint64_t v20 = 4LL;
    char v19 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  uint64_t v21 = a17;
  if (a17 == &a14)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_CCDEC(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void *sub_CCE00(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_4841C0;
  result[1] = v3;
  return result;
}

uint64_t sub_CCE34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_4841C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_CCE50(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = (uint64_t)v5;
  v5[1] = (uint64_t)v5;
  v5[2] = 0LL;
  (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v2 + 272LL))( v2,  v5,  *(unsigned int *)(v3 + 40),  *(unsigned __int8 *)(v3 + 44));
  sub_85B80(v5);
  return 1LL;
}

void sub_CCEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_CCEC8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_484178;
  result[1] = v3;
  return result;
}

uint64_t sub_CCEFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_484178;
  a2[1] = v2;
  return result;
}

uint64_t sub_CCF18(uint64_t a1, void *a2)
{
  return 1LL;
}

void sub_CCF5C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_CCF70(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(17);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_Thunderbolt_Aspen.cpp";
    __int16 v69 = 1024;
    *(_DWORD *)os_log_t v70 = 115;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "%25s:%-5d Creating controls and ports", buf, 0x12u);
  }

  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  1LL))
  {
    unsigned int v4 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 440LL))( a1,  1LL);
    uint64_t v5 = sub_374204(a1, v4);
    uint64_t v6 = sub_374864(a1, v4, (uint64_t)v5);
    uint64_t v7 = (os_log_t *)sub_138E8(17);
    uint64_t v8 = *v7;
    if (v6)
    {
      if (v8 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v65,  a1);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Thunderbolt_Aspen.cpp";
        __int16 v69 = 1024;
        *(_DWORD *)os_log_t v70 = 139;
        *(_WORD *)&v70[4] = 2112;
        *(void *)&v70[6] = *(void *)v65;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a valid output volume control for %@",  buf,  0x1Cu);
        sub_19DFC((uint64_t)v65);
      }

      std::string::size_type v9 = v6;
    }

    else
    {
      if (v8 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v65,  a1);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Thunderbolt_Aspen.cpp";
        __int16 v69 = 1024;
        *(_DWORD *)os_log_t v70 = 130;
        *(_WORD *)&v70[4] = 2112;
        *(void *)&v70[6] = *(void *)v65;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a NULL output volume control for %@",  buf,  0x1Cu);
        sub_19DFC((uint64_t)v65);
      }

      uint64_t v6 = operator new(0x50uLL);
      sub_EC558((uint64_t)v6);
      sub_1D5AE0(a1, (uint64_t)v6);
      std::string::size_type v9 = operator new(0x68uLL);
      sub_EC5B8((uint64_t)v9, 0);
      sub_1D5AE0(a1, (uint64_t)v9);
    }

    sub_1D55D4((uint64_t *)a1, 1u, 1886675567LL, (uint64_t)v6);
    sub_1D580C((uint64_t)a1, 1u, 1886675567LL, (uint64_t)v9);
    sub_F9584((uint64_t)buf, qword_48D198, a1[67]._os_unfair_lock_opaque);
    uint64_t v10 = (os_log_t *)sub_138E8(17);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = v71[0];
      uint64_t v13 = *(void *)&v70[2];
      uint64_t v14 = *(void *)buf;
      (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &inAddress,  a1);
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = v14;
      }
      if (v12) {
        uint64_t v15 = v12;
      }
      *(_DWORD *)uint64_t v65 = 136315906;
      *(void *)&v65[4] = "Device_Thunderbolt_Aspen.cpp";
      *(_WORD *)&v65[12] = 1024;
      *(_DWORD *)&v65[14] = 148;
      *(_WORD *)&v65[18] = 2112;
      *(void *)&v65[20] = v15;
      __int16 v66 = 2112;
      uint64_t v67 = inAddress;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "%25s:%-5d Creating a thunderbolt output port with name %@ and UID %@",  v65,  0x26u);
      sub_19DFC((uint64_t)&inAddress);
    }

    if ((sub_14E1A0() & 1) != 0)
    {
      memset(v65, 0, 24);
    }

    else
    {
      int v16 = (char *)operator new(0xCuLL);
      *(void *)&v65[8] = v16 + 12;
      *(void *)&v65[16] = v16 + 12;
      qmemcpy(v16, "gcrvmorvtshv", 12);
      *(void *)uint64_t v65 = v16;
    }

    (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v51,  a1);
    sub_373464((char **)&inAddress, (std::mutex *)a1, 1869968496LL);
    sub_CE368(&v54, &qword_48D198, (uint64_t)a1, (uint64_t)v65, (uint64_t)buf, (uint64_t)&v51, (char **)&inAddress);
    p_uint64_t inAddress = (void **)&inAddress;
    sub_7A668(&p_inAddress);
    sub_19DFC((uint64_t)&v51);
    p_uint64_t inAddress = v54;
    int v60 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }

    sub_3711D4((uint64_t)a1, &p_inAddress);
    char v19 = v60;
    if (v60)
    {
      uint64_t v20 = (unint64_t *)&v60->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    uint64_t inAddress = 0x6F75747073736323LL;
    LODWORD(inAddress_8) = 0;
    sub_1BB60((std::mutex *)a1);
    if (AudioObjectHasProperty(a1[67]._os_unfair_lock_opaque, (const AudioObjectPropertyAddress *)&inAddress))
    {
      uint64_t v51 = 0x6F75747073737263LL;
      LODWORD(v52) = 0;
      LODWORD(v57) = 4;
      LODWORD(v53[0]) = 0;
      (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, void ***, void *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                                + 40LL))( a1,  &v51,  0LL,  0LL,  &v57,  v53);
      __int32 v64 = v53[0];
      sub_852D0(&inAddress, &v64, 1LL);
      uint64_t v22 = v55;
      uint64_t v51 = (uint64_t)v54;
      unint64_t v52 = v55;
      if (v55)
      {
        p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
        do
          unint64_t v24 = __ldxr(p_shared_weak_owners);
        while (__stxr(v24 + 1, p_shared_weak_owners));
      }

      sub_1BB524((unsigned int **)&inAddress, &v51, a1);
      if (v22) {
        std::__shared_weak_count::__release_weak(v22);
      }
      if (inAddress)
      {
        uint64_t inAddress_8 = inAddress;
        operator delete((void *)inAddress);
      }

      if (!v22) {
        goto LABEL_48;
      }
    }

    else
    {
      uint64_t v22 = v55;
      if (!v55)
      {
LABEL_48:
        if (*(void *)v65) {
          operator delete(*(void **)v65);
        }
        sub_19DFC((uint64_t)v71);
        sub_19DFC((uint64_t)&v70[2]);
        sub_19DFC((uint64_t)buf);
        goto LABEL_51;
      }
    }

    uint64_t v25 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }

    goto LABEL_48;
  }

void sub_CDA40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
}

uint64_t sub_CDCBC(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886675567 && a2 != 1886675561)
  {
    unsigned int v4 = (os_log_t *)sub_138E8(17);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v14 = "Device_Thunderbolt_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 231;
      __int16 v17 = 2080;
      unint64_t v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v14 = "Device_Thunderbolt_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 232;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_CDE74(_Unwind_Exception *a1)
{
}

uint64_t sub_CDE90()
{
  return 1LL;
}

void sub_CDE98(uint64_t a1, __int32 **a2, int a3)
{
  uint64_t v3 = *a2;
  unsigned int v4 = a2[1];
  if ((unint64_t)((char *)v4 - (char *)*a2) >= 8)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v36 = "Device_Thunderbolt_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 240;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (v3 != v4)
  {
    __int32 v7 = *v3;
    __int32 v34 = *v3;
    uint64_t v8 = sub_138E8(17);
    if ((*(_BYTE *)(v8 + 8) & 1) != 0)
    {
      std::string::size_type v9 = *(os_log_s **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v36 = "Device_Thunderbolt_Aspen.cpp";
          __int16 v37 = 1024;
          int v38 = 247;
          __int16 v39 = 1024;
          LODWORD(v40) = v7;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to activate sub-port with ID %u",  buf,  0x18u);
        }
      }
    }

    sub_370F60((uint64_t *)buf, a1);
    sub_9DCB8(&v32, buf);
    sub_85B80((uint64_t *)buf);
    uint64_t v10 = v33;
    if (v33 == &v32)
    {
      sub_1BB88(&v32);
    }

    else
    {
      char v11 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v10[2] + 168LL))( &__p,  v10[2],  1768776806LL);
        char v12 = v31;
        uint64_t v13 = wmemchr((const __int32 *)__p, v34, ((char *)v31 - (_BYTE *)__p) >> 2);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = v12;
        }
        __int16 v15 = v31;
        if (v14 != v31)
        {
          int v16 = *(_DWORD *)(v10[2] + 144);
          if ((((v16 != 1886675561) ^ a3) & 1) == 0)
          {
            unint64_t v18 = (os_log_t *)sub_138E8(13);
            char v19 = *v18;
            if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
            {
              sub_23FE8((uint64_t)v28, (os_unfair_lock_t)(v10[2] + 8));
              uint64_t v20 = v29 >= 0 ? v28 : (void **)v28[0];
              *(_DWORD *)buf = 136315650;
              uint64_t v36 = "Device_Thunderbolt_Aspen.cpp";
              __int16 v37 = 1024;
              int v38 = 261;
              __int16 v39 = 2080;
              unint64_t v40 = v20;
              _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Scope of Port (%s) does not match scope of input parameter",  buf,  0x1Cu);
              if (v29 < 0) {
                operator delete(v28[0]);
              }
            }

            unint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v21, "Scope of Port (%s) does not match scope of input parameter");
          }

          if (v16 == 1886675561) {
            unsigned int v17 = 1768845428;
          }
          else {
            unsigned int v17 = 1869968496;
          }
          *(_DWORD *)buf = 1936945763;
          uint64_t v36 = (const char *)v17;
          (*(void (**)(uint64_t, uint8_t *, void, void, uint64_t, __int32 *))(*(void *)a1 + 48LL))( a1,  buf,  0LL,  0LL,  4LL,  &v34);
          char v11 = 1;
        }

        if (__p)
        {
          uint64_t v31 = (__int32 *)__p;
          operator delete(__p);
        }

        if (v14 != v15) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
      }

      while (v10 != &v32);
      sub_1BB88(&v32);
      if ((v11 & 1) != 0) {
        return;
      }
    }

    uint64_t v25 = (os_log_t *)sub_138E8(13);
    unint64_t v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v36 = "Device_Thunderbolt_Aspen.cpp";
        __int16 v37 = 1024;
        int v38 = 271;
        __int16 v39 = 1024;
        LODWORD(v40) = v34;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not locate sub-port with ID: %u in order to activate it.",  buf,  0x18u);
      }
    }

    unsigned int v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Could not locate sub-port with ID: %u in order to activate it.");
  }

void sub_CE2F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_CE368(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  uint64_t v14 = operator new(0x228uLL);
  v14[1] = 0LL;
  v14[2] = 0LL;
  void *v14 = off_485B80;
  sub_7D084(__p, "");
  sub_F9638((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (__int128 *)__p);
  v14[3] = &off_46FD40;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;
  sub_AFDAC((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_CE448( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_CE478(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_36E3FC(a1, a2, a3, a3, 0LL) = &off_46EA88;
  unsigned int v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    uint64_t v8 = "Device_Thunderbolt_Aspen.cpp";
    __int16 v9 = 1024;
    int v10 = 85;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Created DriverKit device", (uint8_t *)&v7, 0x12u);
  }

  return a1;
}

void sub_CE550(_Unwind_Exception *a1)
{
}

void sub_CE568(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_CE57C(os_unfair_lock_s *a1)
{
  uint64_t v96 = 0x6F7574706D757465LL;
  int v97 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v96))
  {
    buf.uint64_t mSelector = 0;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque + 48LL))( a1,  &v96,  0LL,  0LL,  4LL,  &buf);
  }

  uint64_t v94 = 0x6F757470766F6C64LL;
  int v95 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v94))
  {
    buf.uint64_t mSelector = 0;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque + 48LL))( a1,  &v94,  0LL,  0LL,  4LL,  &buf);
  }

  uint64_t v2 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v2, 0);
  sub_1D5AE0(a1, (uint64_t)v2);
  uint64_t v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D55D4((uint64_t *)a1, 1u, 1885430644LL, (uint64_t)v3);
  sub_1D580C((uint64_t)a1, 1u, 1885430644LL, (uint64_t)v2);
  unsigned int v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    buf.uint64_t mSelector = 136315394;
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Actuator_Aspen.cpp";
    __int16 v138 = 1024;
    int v139 = 117;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Actuator Port", (uint8_t *)&buf, 0x12u);
  }

  uint64_t v6 = (std::__shared_weak_count *)operator new(0x230uLL);
  *(_OWORD *)&v6->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_46EE58;
  uint64_t v8 = v6 + 1;
  memset(&v148, 0, 24);
  sub_F9530((uint64_t)&buf, qword_48CAA8);
  *(void *)&__int128 v134 = CFStringCreateWithCString(0LL, "Actuator", 0x600u);
  BYTE8(v134) = 1;
  memset(&v147, 0, 24);
  sub_7D084(&__p, "");
  sub_F9638( (uint64_t)&v6[1],  &qword_48CAA8,  (uint64_t)a1,  (uint64_t)&v148,  (uint64_t)&buf,  (uint64_t)&v134,  (char **)&v147,  &__p);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
  LOWORD(v6[22].__shared_weak_owners_) = 0;
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&__int128 __p = &v147;
  sub_7A668((void ***)&__p);
  sub_19DFC((uint64_t)&v134);
  sub_19DFC((uint64_t)&v141[12]);
  sub_19DFC((uint64_t)&v139 + 2);
  sub_19DFC((uint64_t)&buf);
  shared_weak_owners = (std::__shared_weak_count *)v6[4].__shared_weak_owners_;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46D918;
  v6[23].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v126[0] = &v6[1];
  v126[1] = v6;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_23;
    }
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v6[4].__shared_owners_ = (uint64_t)v8;
    v6[4].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  else
  {
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    uint64_t v14 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v6[4].__shared_owners_ = (uint64_t)v8;
    v6[4].__shared_weak_owners_ = (uint64_t)v6;
  }

  do
    unint64_t v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

LABEL_87:
              int v48 = 1;
              if (v47) {
                goto LABEL_88;
              }
LABEL_89:
              if (v48)
              {
                if (v48 == 12)
                {
                  uint64_t v69 = sub_138E8(13);
                  if ((*(_BYTE *)(v69 + 8) & 1) != 0)
                  {
                    os_log_t v70 = *(os_log_s **)v69;
                    if (*(void *)v69)
                    {
                      if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
                      {
                        __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
                        *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
                        sub_613AC((uint64_t)&v113, (unsigned int *)&__lk);
                        unint64_t v71 = v115 >= 0 ? &v113 : (void **)v113;
                        buf.uint64_t mSelector = 136315906;
                        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                        __int16 v138 = 1024;
                        int v139 = 288;
                        __int16 v140 = 2080;
                        *(void *)uint64_t v141 = v71;
                        *(_WORD *)&v141[8] = 1024;
                        *(_DWORD *)&v141[10] = os_unfair_lock_opaque;
                        _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                        if (v115 < 0) {
                          operator delete(v113);
                        }
                      }
                    }
                  }
                }

                sub_7D898((uint64_t)&__p);
                std::condition_variable::~condition_variable(&v147);
                std::mutex::~mutex(&v148);
                __int16 v72 = v126[0];
LABEL_153:
                if (v72) {
                  operator delete(v72);
                }
LABEL_155:
                uint32_t v73 = operator new(0x68uLL);
                sub_EC5B8((uint64_t)v73, 0);
                sub_1D5AE0(a1, (uint64_t)v73);
                sub_1D580C((uint64_t)a1, 0, 1885432182LL, (uint64_t)v73);
                unint64_t v74 = operator new(0x50uLL);
                sub_EC558((uint64_t)v74);
                sub_1D5AE0(a1, (uint64_t)v74);
                sub_1D55D4((uint64_t *)a1, 0, 1885432182LL, (uint64_t)v74);
                memset(&v147, 0, 24);
                sub_F9530((uint64_t)&buf, qword_48D270);
                __int128 __p = 0uLL;
                uint64_t v118 = 0LL;
                unsigned __int8 v75 = operator new(0x228uLL);
                v75[1] = 0LL;
                v75[2] = 0LL;
                void *v75 = off_485B80;
                *(void *)&__int128 v134 = CFStringCreateWithCString(0LL, "ActuatorIV", 0x600u);
                BYTE8(v134) = 1;
                sub_7D084(&v148, "");
                sub_F9638( (uint64_t)(v75 + 3),  &qword_48D270,  (uint64_t)a1,  (uint64_t)&v147,  (uint64_t)&buf,  (uint64_t)&v134,  (char **)&__p,  (__int128 *)&v148.__m_.__sig);
                void v75[3] = &off_46FD40;
                *((_WORD *)v75 + 272) = 0;
                if (v148.__m_.__opaque[15] < 0) {
                  operator delete((void *)v148.__m_.__sig);
                }
                sub_19DFC((uint64_t)&v134);
                v126[0] = v75 + 3;
                v126[1] = v75;
                sub_AFDAC((uint64_t)v126, v75 + 13, (uint64_t)(v75 + 3));
                __int128 v88 = *(_OWORD *)v126;
                v126[0] = 0LL;
                v126[1] = 0LL;
                sub_3711D4((uint64_t)a1, (void ***)&v88);
                os_log_t v76 = (std::__shared_weak_count *)*((void *)&v88 + 1);
                if (*((void *)&v88 + 1))
                {
                  unint64_t v77 = (unint64_t *)(*((void *)&v88 + 1) + 8LL);
                  do
                    unint64_t v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }

                int v79 = (std::__shared_weak_count *)v126[1];
                if (v126[1])
                {
                  BOOL v80 = (unint64_t *)((char *)v126[1] + 8);
                  do
                    unint64_t v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }

                v148.__m_.__uint64_t sig = (uint64_t)&__p;
                sub_7A668((void ***)&v148);
                sub_19DFC((uint64_t)&v141[12]);
                sub_19DFC((uint64_t)&v139 + 2);
                sub_19DFC((uint64_t)&buf);
                if (v147.__cv_.__sig) {
                  operator delete((void *)v147.__cv_.__sig);
                }
                if (v89) {
                  operator delete(v89);
                }
                return 1LL;
              }
            }

            BOOL v53 = memcmp(v110, v107, v111 - v110) == 0;
            if (!v52) {
              goto LABEL_96;
            }
LABEL_95:
            uint64_t v108 = v52;
            operator delete(v52);
            goto LABEL_96;
          }
        }

        else if (v44)
        {
          goto LABEL_76;
        }

    uint64_t v20 = 1918989668;
  }

          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
          do
            os_log_t v76 = __ldaxr(p_shared_owners);
          while (__stlxr(v76 - 1, p_shared_owners));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }

          goto LABEL_105;
        }
      }
    }

    else
    {
      uint64_t v55 = 0LL;
    }

    __int16 v72 = (os_log_t *)sub_138E8(13);
    uint32_t v73 = *v72;
    if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int128 v93 = 1024;
      uint64_t v94 = 205;
      _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: software volume is required but we have a NULL software volume command",  buf,  0x12u);
    }

    goto LABEL_86;
  }

                sub_32C38(v9, (uint64_t)v54, v52, *(uint64_t **)&buf[16]);
                *(void *)&buf[16] = *(void *)&buf[8];
                if (*(void *)&buf[8]) {
                  *(void *)&buf[8] = sub_68080(*(uint64_t *)&buf[8]);
                }
                uint64_t v55 = (void *)v10[1];
                if (v55)
                {
                  do
                  {
                    uint64_t v56 = v55;
                    uint64_t v55 = (void *)*v55;
                  }

                  while (v55);
                }

                else
                {
                  do
                  {
                    uint64_t v56 = (void *)v10[2];
                    std::chrono::steady_clock::time_point v57 = *v56 == (void)v10;
                    unint64_t v10 = v56;
                  }

                  while (!v57);
                }

                uint64_t v14 = *(void *)&buf[16];
                if (*(void *)&buf[16]) {
                  std::chrono::steady_clock::time_point v57 = v56 == v78;
                }
                else {
                  std::chrono::steady_clock::time_point v57 = 1;
                }
                unint64_t v10 = v56;
                if (v57) {
                  goto LABEL_101;
                }
              }

              sub_7E6D4((char *)(v14 + 40), (char *)v10[5], v10[6], (uint64_t)(v10[6] - v10[5]) >> 2);
              unint64_t v15 = *(char **)(v14 + 64);
              unsigned int v17 = (_BYTE *)v10[8];
              unint64_t v16 = (_BYTE *)v10[9];
              unint64_t v18 = v16 - v17;
              unint64_t v19 = (v16 - v17) >> 3;
              uint64_t v20 = *(void *)(v14 + 80);
              if (v19 <= (v20 - (uint64_t)v15) >> 3)
              {
                int v23 = *(_BYTE **)(v14 + 72);
                int v24 = (v23 - v15) >> 3;
                if (v24 >= v19) {
                  goto LABEL_31;
                }
                if (v23 != v15)
                {
                  memmove(*(void **)(v14 + 64), (const void *)v10[8], v23 - v15);
                  unint64_t v15 = *(char **)(v14 + 72);
                }

                uint64_t v25 = &v17[8 * v24];
                unint64_t v18 = v16 - v25;
                if (v16 != v25)
                {
                  uint64_t v26 = v15;
                  goto LABEL_33;
                }
              }

              else
              {
                if (v15)
                {
                  *(void *)(v14 + 72) = v15;
                  operator delete(v15);
                  uint64_t v20 = 0LL;
                  *(void *)(v14 + 64) = 0LL;
                  *(void *)(v14 + 72) = 0LL;
                  *(void *)(v14 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0LL;
                }

                if ((v18 & 0x8000000000000000LL) != 0) {
                  sub_7A87C();
                }
                unint64_t v21 = v20 >> 2;
                if (v20 >> 2 <= v19) {
                  unint64_t v21 = (v16 - v17) >> 3;
                }
                else {
                  unint64_t v22 = v21;
                }
                sub_7E420((void *)(v14 + 64), v22);
                unint64_t v15 = *(char **)(v14 + 72);
LABEL_31:
                if (v16 != v17)
                {
                  uint64_t v26 = v15;
                  uint64_t v25 = v17;
LABEL_33:
                  memmove(v26, v25, v18);
                }
              }

              __int16 v9 = v76;
              *(void *)(v14 + 72) = &v15[v18];
              unsigned int v27 = (uint64_t **)(v14 + 88);
              __int16 v28 = (void *)v10[11];
              uint64_t v29 = v10 + 12;
              if (*(void *)(v14 + 104))
              {
                uint64_t v31 = (uint64_t **)(v14 + 96);
                __int128 v30 = *(void *)(v14 + 96);
                uint64_t v32 = *(void *)(v14 + 88);
                *(void *)(v14 + 88) = v14 + 96;
                *(void *)(v30 + 16) = 0LL;
                *(void *)(v14 + sub_19DFC(v32 - 96) = 0LL;
                *(void *)(v14 + 104) = 0LL;
                if (*(void *)(v32 + 8)) {
                  uint64_t v33 = *(void *)(v32 + 8);
                }
                else {
                  uint64_t v33 = v32;
                }
                if (v33)
                {
                  uint64_t v34 = sub_68080(v33);
                  if (v28 == v29)
                  {
                    uint64_t v36 = (void *)v33;
                  }

                  else
                  {
                    uint64_t v35 = v28;
                    do
                    {
                      uint64_t v36 = v34;
                      __int16 v37 = *((_DWORD *)v35 + 8);
                      *(_DWORD *)(v33 + 32) = v37;
                      int v38 = v35[5];
                      *(_BYTE *)(v33 + 48) = *((_BYTE *)v35 + 48);
                      *(void *)(v33 + 40) = v38;
                      __int16 v39 = *v31;
                      unint64_t v40 = (uint64_t **)(v14 + 96);
                      unsigned int v41 = (uint64_t **)(v14 + 96);
                      if (*v31)
                      {
                        do
                        {
                          while (1)
                          {
                            unint64_t v40 = (uint64_t **)v39;
                            if (v37 >= *((_DWORD *)v39 + 8)) {
                              break;
                            }
                            __int16 v39 = (uint64_t *)*v39;
                            unsigned int v41 = v40;
                            if (!*v40) {
                              goto LABEL_47;
                            }
                          }

                          __int16 v39 = (uint64_t *)v39[1];
                        }

                        while (v39);
                        unsigned int v41 = v40 + 1;
                      }

    if (v69) {
      operator delete(v69);
    }
    sub_D0C4C(*(void **)&v72[16]);
    uint64_t v62 = *(void **)v72;
    *(void *)__int16 v72 = 0LL;
    if (v62) {
      operator delete(v62);
    }
    return;
  }

  else {
    uint64_t v25 = *(char **)a4;
  }
  if (a8[23] < 0) {
    a8 = *(const char **)a8;
  }
  sub_309484(a1, a2, v25, (uint64_t *)a5, a6, a7, a12, a8, a13, a14);
}

void sub_CF73C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CF99C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885430644)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    unsigned int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v13 = "Device_Actuator_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 151;
      __int16 v16 = 2080;
      unsigned int v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v13 = "Device_Actuator_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 152;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_CFB48(_Unwind_Exception *a1)
{
}

void sub_CFB64(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].uint64_t mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v21;
  if (v21)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        unint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v15);
        char v11 = v19;
        if (v9 < 0) {
          char v11 = v10;
        }
        unint64_t v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          unint64_t v12 = __p;
        }
        buf[0].uint64_t mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        unsigned int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
  }

void sub_CFD58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_CFD94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_46EE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_CFDA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_46EE58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_CFDC4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL sub_CFDD4(uint64_t a1)
{
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1 + 128LL))(theString1);
  BOOL v1 = CFStringCompare(theString1[0], @"Actuator", 0LL) == kCFCompareEqualTo;
  sub_19DFC((uint64_t)theString1);
  return v1;
}

void sub_CFE2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **sub_CFE40(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0LL;
  unsigned int v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0LL;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    UInt32 v5 = a2;
    uint64_t v6 = 0LL;
    int v7 = &a2[3 * a3];
    uint64_t v8 = a1 + 1;
    while (1)
    {
      int v9 = v4;
      unint64_t v10 = v6;
      char v11 = v4;
      if (v6)
      {
        do
        {
          int v9 = v10;
          unint64_t v10 = (uint64_t *)v10[1];
        }

        while (v10);
      }

      else
      {
        do
        {
          int v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          char v11 = v9;
        }

        while (v12);
      }

      unsigned int v13 = *((_DWORD *)v9 + 7);
      unsigned int v14 = *v5;
      if (v13 < *v5 || v13 == v14 && *((_DWORD *)v9 + 8) < v5[1])
      {
LABEL_9:
        if (v6) {
          uint64_t v15 = v9;
        }
        else {
          uint64_t v15 = v4;
        }
        if (v6) {
          int v16 = (char **)(v9 + 1);
        }
        else {
          int v16 = (char **)v4;
        }
      }

      else
      {
        uint64_t v15 = v4;
        int v16 = (char **)v4;
        if (v6)
        {
          unsigned int v20 = v5[1];
          int v16 = (char **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v15 = v6;
              unsigned int v21 = *((_DWORD *)v6 + 7);
              if (v14 >= v21) {
                break;
              }
LABEL_26:
              uint64_t v6 = (uint64_t *)*v15;
              int v16 = (char **)v15;
              if (!*v15) {
                goto LABEL_16;
              }
            }

            if (v14 == v21)
            {
              unsigned int v22 = *((_DWORD *)v15 + 8);
              if (v20 < v22) {
                goto LABEL_26;
              }
              if (v22 >= v20) {
                break;
              }
            }

            else if (v21 >= v14)
            {
              break;
            }

            int v16 = (char **)(v15 + 1);
            uint64_t v6 = (uint64_t *)v15[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }

      if (!*v16)
      {
LABEL_16:
        unsigned int v17 = (char *)operator new(0x28uLL);
        uint64_t v18 = *(void *)v5;
        *((_DWORD *)v17 + 9) = v5[2];
        *(void *)(v17 + 28) = v18;
        *(void *)unsigned int v17 = 0LL;
        *((void *)v17 + 1) = 0LL;
        *((void *)v17 + 2) = v15;
        *int v16 = v17;
        unint64_t v19 = (uint64_t *)**a1;
        if (v19)
        {
          *a1 = v19;
          unsigned int v17 = *v16;
        }

        sub_7A420(a1[1], (uint64_t *)v17);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }

      v5 += 3;
      if (v5 == v7) {
        return a1;
      }
      uint64_t v8 = (uint64_t **)*a1;
      uint64_t v6 = a1[1];
    }
  }

  return a1;
}

void sub_CFFDC(_Unwind_Exception *a1)
{
}

uint64_t sub_CFFF0(void *a1, void *a2)
{
  if (a1 == a2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    unsigned int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unint64_t v10 = "DSPChainUtilities.cpp";
      __int16 v11 = 1024;
      int v12 = 36;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a1 == a1[1])
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unint64_t v10 = "DSPChainUtilities.cpp";
      __int16 v11 = 1024;
      int v12 = 40;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    uint64_t v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, "Precondition failure.");
  }

  return *(void *)*a1;
}

void sub_D0194(_Unwind_Exception *a1)
{
}

uint64_t *sub_D01B4(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0LL;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }

  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }

  UInt32 v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0LL;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }

    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }

      else
      {
        v7 &= v2 - 1;
      }

      if (v7 != v4) {
        return 0LL;
      }
    }
  }

  return result;
}

__int128 *sub_D0268(void *a1, void *a2)
{
  unint64_t v2 = (void *)sub_CFFF0(a1, a2);
  uint8x8_t v3 = sub_D01B4(v2, 1685090928);
  if (!v3) {
    return &xmmword_48D2D0;
  }
  int v5 = *((_DWORD *)v3 + 6);
  unint64_t v4 = (int *)(v3 + 3);
  if (v5 != 15)
  {
    unint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        __int16 v11 = "DSPChainUtilities.cpp";
        __int16 v12 = 1024;
        int v13 = 99;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v10,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return (__int128 *)sub_2DD064(v4);
}

void sub_D03A4(_Unwind_Exception *exception_object)
{
}

void sub_D03C0(void *a1, void *a2, void *a3)
{
  unint64_t v4 = sub_D0268(a2, a3);
  int v5 = sub_D01B4(v4, 1685287015);
  if (v5 && (uint64_t v6 = (const void *)sub_2DCF68((int *)v5 + 6)) != 0LL)
  {
    unint64_t v7 = v6;
    CFRetain(v6);
    sub_7F234(&cf, v7);
    uint64_t v8 = (const __CFString *)cf;
  }

  else
  {
    uint64_t v8 = 0LL;
    CFTypeRef cf = 0LL;
  }

  sub_48100((uint64_t)__p, v8);
  sub_D0720(&theData, (uint64_t)__p);
  int v9 = theData;
  if (!theData)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(v9);
  CFStringRef v12 = CFStringCreateWithBytes(0LL, BytePtr, Length, 0x8000100u, 0);
  if (!v12)
  {
    unsigned int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }

  sub_7F234(a1, v12);
  CFRelease(v9);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_D054C(_Unwind_Exception *exception_object)
{
}

void sub_D0558( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, __int128 buf, __int128 a17)
{
  if (a2 == 2)
  {
    unsigned int v20 = __cxa_begin_catch(a1);
    unsigned int v21 = (os_log_t *)sub_138E8(24);
    unsigned int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      if (a14 >= 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = __p;
      }
      uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v20 + 16LL))(v20);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "DSPChainUtilities.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 209;
      WORD1(a17) = 2080;
      *(void *)((char *)&a17 + 4) = p_p;
      WORD6(a17) = 2080;
      *(void *)((char *)&a17 + 14) = v24;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Exception reading DSP graph from path %s : %s",  (uint8_t *)&buf,  0x26u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>("Cannot read file ", &__p);
    std::runtime_error::runtime_error(exception, (const std::string *)&buf);
  }

  if (a14 < 0) {
    operator delete(__p);
  }
  sub_7A738(&a15);
  _Unwind_Resume(a1);
}

void sub_D06B0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0) {
      goto LABEL_6;
    }
  }

  else if (!v19)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0xD06ECLL);
  }

  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_D0708(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xD0710LL);
  }
  sub_7A0E8(a1);
}

uint64_t *sub_D0720(CFDataRef *a1, uint64_t a2)
{
  else {
    uint8x8_t v3 = *(const char **)a2;
  }
  __int128 __p = &off_485708;
  int v10 = &fclose;
  uint64_t p_p = &__p;
  __streauint64_t m = fopen(v3, "rb");
  v13[3] = v13;
  sub_D0B18((uint64_t)&__p, v13);
  if (!__stream)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  fseek(__stream, 0LL, 2);
  size_t v4 = ftell(__stream);
  sub_D09A4(&__p, v4);
  fseek(__stream, 0LL, 0);
  fread(__p, 1uLL, v10 - (_BYTE *)__p, __stream);
  CFDataRef v5 = CFDataCreate(0LL, (const UInt8 *)__p, v10 - (_BYTE *)__p);
  *a1 = v5;
  if (!v5)
  {
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }

  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }

  return sub_D0A14((uint64_t *)&__stream);
}

void sub_D08A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_D0A14(&a13);
  _Unwind_Resume(a1);
}

const void **sub_D08F4(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_D0924(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_7D1D4();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

void *sub_D09A4(void *a1, size_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_D0AA0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }

  return a1;
}

void sub_D09F8(_Unwind_Exception *exception_object)
{
  uint8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_D0A14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v7 = v2;
    uint64_t v3 = a1[4];
    if (!v3) {
      sub_82CEC();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v7);
  }

  uint64_t v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1 + 1;
    goto LABEL_8;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

char *sub_D0AA0(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    sub_7A87C();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *sub_D0AE4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_485708;
  result[1] = v3;
  return result;
}

uint64_t sub_D0B18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_485708;
  a2[1] = v2;
  return result;
}

uint64_t sub_D0B34(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void sub_D0B40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = sub_D01B4(a2, a3);
  if (!v5)
  {
LABEL_8:
    *a1 = 0LL;
    return;
  }

  int v7 = *((_DWORD *)v5 + 6);
  uint64_t v6 = (int *)(v5 + 3);
  if (v7 != 18)
  {
    int v10 = (const void *)sub_2DCE6C(v6);
    if (v10)
    {
      __int16 v11 = v10;
      CFRetain(v10);
      sub_3617C(a1, v11);
      return;
    }

    goto LABEL_8;
  }

  uint64_t v8 = *(void *)(sub_2DC354(v6) + 24);
  if (!v8) {
    sub_82CEC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 48LL))(__p);
  sub_D0B40(a1, __p, a3);
  sub_D0C4C((void *)__p[2]);
  int v9 = __p[0];
  __p[0] = 0LL;
  if (v9) {
    operator delete(v9);
  }
}

void sub_D0C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_D0C14(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_D0C4C(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_2DBF5C(v1 + 3);
      operator delete(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

void sub_D0C88(CFArrayRef *a1, void **a2)
{
  uint64_t v4 = (os_log_t *)sub_138E8(24);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CF0E8(&__p, (uint64_t)a2);
    uint64_t v6 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChainUtilities.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 241;
    __int16 v14 = 2080;
    uint64_t v15 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChain config is %s", buf, 0x1Cu);
  }

  int v7 = (void *)sub_CFFF0(*a2, a2[1]);
  uint64_t v8 = sub_D01B4(v7, 1685090928);
  if (!v8)
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    __p.__r_.__value_.__s.__data_[16] = 0;
    goto LABEL_16;
  }

  sub_2DC450((uint64_t)&__p, (uint64_t)(v8 + 3));
  __p.__r_.__value_.__s.__data_[16] = 1;
  sub_D0EBC(buf, (int *)&__p, 1735553138LL);
  int v9 = *(const void **)buf;
  if (!*(void *)buf)
  {
LABEL_16:
    *a1 = 0LL;
    goto LABEL_17;
  }

  CFRetain(*(CFTypeRef *)buf);
  CFTypeRef cf = v9;
  sub_7E328(buf, 1uLL);
  **(void **)AudioObjectPropertyAddress buf = cf;
  CFArrayRef v10 = sub_7E39C(*(const void ***)buf, *(uint64_t *)&buf[8]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  *a1 = v10;
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v9);
LABEL_17:
  if (__p.__r_.__value_.__s.__data_[16]) {
    sub_2DBF5C((uint64_t)&__p);
  }
}

void sub_D0E50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_D0EBC(void *a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  if (*a2 != 13)
  {
    if (v4 == 16)
    {
      uint64_t v8 = sub_2DD25C(a2);
      uint64_t v9 = v8;
      while (1)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (v9 == v8) {
          break;
        }
        if (*(_DWORD *)(v9 + 16) != 15)
        {
          char v16 = (os_log_t *)sub_138E8(13);
          unsigned int v17 = *v16;
          if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChainUtilities.cpp";
            __int16 v25 = 1024;
            *(_DWORD *)__int16 v26 = 147;
            _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }

        sub_D0EBC(a1, v9 + 16, a3);
        if (*a1) {
          return;
        }
      }
    }

    else if (v4 == 15)
    {
      uint64_t v6 = sub_2DD064(a2);
      sub_D1274((uint64_t)__p, v6);
      int v7 = sub_D01B4(__p, a3);
      if (v7) {
        sub_D0EBC(a1, v7 + 3, a3);
      }
      else {
        *a1 = 0LL;
      }
      sub_D0C4C(*(void **)&v26[2]);
      uint64_t v15 = *(void **)__p;
      *(void *)std::string __p = 0LL;
      if (v15) {
        operator delete(v15);
      }
      return;
    }

void sub_D11FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D1274(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_52168(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_D12D0(_Unwind_Exception *a1)
{
}

BOOL sub_D12E8(const __CFDictionary *a1, const UInt8 *__s)
{
  uint64_t v2 = __s;
  size_t v4 = strlen((const char *)__s);
  if (v2)
  {
    uint64_t v2 = (const UInt8 *)CFStringCreateWithBytes(0LL, v2, v4, 0x8000100u, 0);
    if (!v2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  int v6 = CFDictionaryContainsKey(a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return v6 != 0;
}

void sub_D139C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

const void *sub_D13C4(const __CFDictionary *a1, const UInt8 *__s)
{
  uint64_t v3 = __s;
  size_t v5 = strlen((const char *)__s);
  if (!v3)
  {
    if (a1) {
      goto LABEL_4;
    }
LABEL_7:
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  uint64_t v3 = (const UInt8 *)CFStringCreateWithBytes(0LL, v3, v5, 0x8000100u, 0);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (!a1) {
    goto LABEL_7;
  }
LABEL_4:
  int Value = CFDictionaryGetValue(a1, v3);
  if (v3) {
LABEL_8:
  }
    CFRelease(v3);
LABEL_9:
  if (!a1) {
    return 0LL;
  }
  return Value;
}

void sub_D1498(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_D14D8(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }

    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  CFStringRef v12 = (void *)(a1 + 16);
  CFTypeRef v13 = operator new(0x28uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  char v24 = 0;
  *CFTypeRef v13 = 0LL;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  sub_2DC450(v13 + 3, a3 + 2);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1LL;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_52168(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v20 = *(void *)a1;
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *CFTypeRef v13 = *v21;
LABEL_38:
    *unsigned int v21 = v13;
    goto LABEL_39;
  }

  *CFTypeRef v13 = *v12;
  *CFStringRef v12 = v13;
  *(void *)(v20 + 8 * v3) = v12;
  if (*v13)
  {
    unint64_t v22 = *(void *)(*v13 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }

    else
    {
      v22 &= v7 - 1;
    }

    unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_D1704(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_D171C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_2DBF5C((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }

uint64_t sub_D1760(int a1)
{
  if (a1 <= 1936745080)
  {
    if (a1 == 1634625388) {
      return sub_7531C();
    }
    int v1 = 1668312435;
  }

  else
  {
    if (a1 == 1936745081 || a1 == 1936749683) {
      return sub_7531C();
    }
    int v1 = 1936748645;
  }

  if (a1 == v1) {
    return sub_7531C();
  }
  return 0LL;
}

uint64_t sub_D17C8(int a1)
{
  if (a1 <= 1836281974)
  {
    if (a1 != 1650550370)
    {
      int v1 = 1835298935;
      goto LABEL_6;
    }

    return sub_7531C();
  }

  if (a1 == 1986358383) {
    return sub_7531C();
  }
  int v1 = 1836281975;
LABEL_6:
  if (a1 == v1) {
    return sub_7531C();
  }
  return 0LL;
}

uint64_t sub_D1820(unsigned int a1, unsigned int a2)
{
  LOBYTE(v2) = a2;
  if (a1 == 1685287015)
  {
    unsigned int v3 = a2 & 0xFFFFFF00;
    uint64_t v4 = 0x100000000LL;
  }

  else
  {
    size_t v5 = sub_D18A0((uint64_t)&unk_48D310, a1, a2);
    if (v5 == (uint64_t *)&unk_48D318)
    {
      uint64_t v4 = 0LL;
      LOBYTE(v2) = 0;
      unsigned int v3 = 0;
    }

    else
    {
      int v2 = *((_DWORD *)v5 + 9);
      unsigned int v3 = v2 & 0xFFFFFF00;
      uint64_t v4 = 0x100000000LL;
    }
  }

  return v4 | v3 | v2;
}

uint64_t *sub_D18A0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  size_t v5 = *(uint64_t **)(a1 + 8);
  unsigned int v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  unint64_t v6 = v3;
  do
  {
    unsigned int v7 = *((_DWORD *)v4 + 7);
    if (v7 < a2 || v7 == a2 && *((_DWORD *)v4 + 8) < a3) {
      ++v4;
    }
    else {
      unint64_t v6 = v4;
    }
    uint64_t v4 = (uint64_t *)*v4;
  }

  while (v4);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v8 = *((_DWORD *)v6 + 7);
  if (v8 > a2 || v8 == a2 && *((_DWORD *)v6 + 8) > a3) {
    return v3;
  }
  return v6;
}

void sub_D1910(uint64_t a1)
{
  int v1 = (void *)sub_D572C(a1);
  operator delete(v1);
}

uint64_t *sub_D1924()
{
  return &qword_48F828;
}

uint64_t sub_D1940(uint64_t a1, int *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v2 & 1) == 0)
  {
    float v14 = (os_log_t *)sub_138E8(13);
    float v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v17 = 136315394;
      *(void *)&v17[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&v17[12] = 1024;
      *(_DWORD *)&_BYTE v17[14] = 360;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Underlying Port is not valid",  v17,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }

  uint64_t v4 = 0LL;
  int v5 = *a2;
  if (*a2 > 1886417761)
  {
    if (v5 > 1936746610)
    {
      if (v5 > 1953653605)
      {
        if (v5 <= 1986164322)
        {
          if (v5 > 1953719141)
          {
            if (v5 == 1953719142 || v5 == 1970040164) {
              return v4;
            }
            int v6 = 1970496630;
            goto LABEL_120;
          }

          if (v5 != 1953653606)
          {
            int v6 = 1953655149;
            goto LABEL_120;
          }

          return v4;
        }

        if (v5 > 1986947427)
        {
          if (v5 != 1986947428 && v5 != 2004050279)
          {
            int v6 = 2004054901;
            goto LABEL_120;
          }

          goto LABEL_113;
        }

        if (v5 == 1986164323) {
          goto LABEL_113;
        }
        if (v5 != 1986814563) {
          return sub_5E070(a1, a2);
        }
        return 1LL;
      }

      if (v5 > 1936749679)
      {
        if (v5 <= 1937204589)
        {
          if (v5 == 1936749680) {
            return v4;
          }
          int v8 = 1936945763;
          goto LABEL_112;
        }

        if (v5 != 1937204590 && v5 != 1952609377)
        {
          int v6 = 1952740208;
          goto LABEL_120;
        }

        goto LABEL_113;
      }

      if (v5 > 1936748140)
      {
        if (v5 != 1936748141)
        {
          int v6 = 1936748656;
          goto LABEL_120;
        }

        return v4;
      }

      unsigned __int16 v7 = 26739;
    }

    else
    {
      if (v5 <= 1886742883)
      {
        if (v5 <= 1886613618)
        {
          if (v5 > 1886484337)
          {
            if (v5 == 1886484338 || v5 == 1886611810) {
              return v4;
            }
            int v6 = 1886613101;
            goto LABEL_120;
          }

          if (v5 != 1886417762)
          {
            if (v5 != 1886417783) {
              return sub_5E070(a1, a2);
            }
            sub_B8CBC((uint64_t *)v17, (uint64_t *)(a1 + 88), "", 427);
            uint64_t v4 = (*(uint64_t (**)(void))(**(void **)v17 + 328LL))(*(void *)v17);
            sub_7A768((uint64_t)v17);
          }

          return v4;
        }

        if (v5 > 1886614624)
        {
          if (v5 == 1886614625 || v5 == 1886614882) {
            return v4;
          }
          int v6 = 1886681456;
          goto LABEL_120;
        }

        if (v5 == 1886613619) {
          return v4;
        }
        int v8 = 1886614381;
        goto LABEL_112;
      }

      if (v5 <= 1936221549)
      {
        if (v5 > 1886810225)
        {
          if (v5 == 1886810226 || v5 == 1935762278) {
            return v4;
          }
          int v6 = 1935895923;
          goto LABEL_120;
        }

        if (v5 != 1886742884)
        {
          int v6 = 1886808435;
          goto LABEL_120;
        }

        return v4;
      }

      if (v5 > 1936745317)
      {
        if (v5 == 1936745318) {
          goto LABEL_113;
        }
        if (v5 == 1936745586) {
          return v4;
        }
        unsigned __int16 v7 = 25966;
      }

      else
      {
        if (v5 == 1936221550 || v5 == 1936225136) {
          goto LABEL_113;
        }
        unsigned __int16 v7 = 24944;
      }
    }

    int v8 = v7 | 0x73700000;
    goto LABEL_112;
  }

  if (v5 <= 1819046767)
  {
    if (v5 <= 1684826731)
    {
      if (v5 <= 1651797099)
      {
        if (v5 > 1651796324)
        {
          unsigned int v9 = v5 - 1651796325;
          if (v9 <= 0xE && ((1 << v9) & 0x4801) != 0) {
            return v4;
          }
          return sub_5E070(a1, a2);
        }

        if (v5 == 1650551140 || v5 == 1651271025) {
          goto LABEL_113;
        }
        int v8 = 1651794290;
        goto LABEL_112;
      }

      if (v5 > 1651798885)
      {
        if (v5 == 1651798886) {
          goto LABEL_113;
        }
        int v8 = 1668051827;
        goto LABEL_112;
      }

      if (v5 != 1651797100)
      {
        int v6 = 1651798131;
        goto LABEL_120;
      }

LABEL_120:
  if (v5 == v6) {
    return v4;
  }
  return sub_5E070(a1, a2);
}

            uint64_t v94 = std::__shared_weak_count::lock(v87);
            if (!v94) {
              goto LABEL_127;
            }
            int v95 = v94;
            uint64_t v96 = v81 == v88;
            int v97 = (unint64_t *)&v94->__shared_owners_;
            do
              uint64_t v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v95);
            }

            if (!v93)
            {
LABEL_131:
              if (v96) {
                goto LABEL_132;
              }
              goto LABEL_134;
            }

        uint64_t v109 = sub_138E8(17);
        uint64_t v110 = sub_138E8(28);
        CFIndex v111 = 0;
        uint64_t v112 = 0LL;
        *(void *)&buf.uint64_t mSelector = 0x100000002LL;
        __int16 v113 = *(void *)(v109 + 8);
        while (1)
        {
          uint64_t v114 = *((int *)&buf.mSelector + v112);
          char v115 = v111;
          if (((v113 & v114) != 0) != ((*(void *)(v110 + 8) & v114) != 0)) {
            break;
          }
          CFIndex v111 = 1;
          uint64_t v112 = 1LL;
          if ((v115 & 1) != 0) {
            goto LABEL_126;
          }
        }

        if ((v113 & v114) == 0) {
          uint64_t v109 = v110;
        }
LABEL_126:
        int v116 = *(os_log_s **)v109;
        if (v116 && os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
        {
          outData[0] = (void *)sub_1A6D54(a1);
          outData[1] = v117;
          sub_F9154(&inAddress, (uint64_t)outData);
          uint64_t v118 = (inAddress.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &inAddress
               : (std::string *)inAddress.__r_.__value_.__r.__words[0];
          buf.uint64_t mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
          BOOL v153 = 1024;
          uint64_t v154 = 360;
          unsigned int v155 = 1024;
          *(_DWORD *)v156 = a1;
          *(_WORD *)&v156[4] = 2080;
          *(void *)&v156[6] = v118;
          _os_log_impl( &dword_0,  v116,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Initial headset status for Bluetooth device %u: %s",  (uint8_t *)&buf,  0x22u);
        }

        char v119 = sub_138E8(17);
        uint64_t v120 = sub_138E8(28);
        size_t v121 = 0;
        uint64_t v122 = 0LL;
        *(void *)&buf.uint64_t mSelector = 0x100000002LL;
        v123 = *(void *)(v119 + 8);
        while (1)
        {
          int v124 = *((int *)&buf.mSelector + v122);
          uint64_t v125 = v121;
          if (((v123 & v124) != 0) != ((*(void *)(v120 + 8) & v124) != 0)) {
            break;
          }
          size_t v121 = 1;
          uint64_t v122 = 1LL;
          if ((v125 & 1) != 0) {
            goto LABEL_139;
          }
        }

        if ((v123 & v124) == 0) {
          char v119 = v120;
        }
LABEL_139:
        unint64_t v126 = *(os_log_s **)v119;
        if (v126 && os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
        {
          if (v14[520] && *((_DWORD *)v14 + 129)) {
            int v127 = "yes";
          }
          else {
            int v127 = "no";
          }
          buf.uint64_t mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
          BOOL v153 = 1024;
          uint64_t v154 = 365;
          unsigned int v155 = 1024;
          *(_DWORD *)v156 = a1;
          *(_WORD *)&v156[4] = 2080;
          *(void *)&v156[6] = v127;
          _os_log_impl( &dword_0,  v126,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Software volume supported for Bluetooth device %u: %s",  (uint8_t *)&buf,  0x22u);
        }

        uint64_t v128 = sub_138E8(17);
        uint64_t v129 = sub_138E8(28);
        uint64_t v130 = 0;
        BOOL v131 = 0LL;
        *(void *)&buf.uint64_t mSelector = 0x100000002LL;
        unint64_t v132 = *(void *)(v128 + 8);
        while (1)
        {
          uint64_t v133 = *((int *)&buf.mSelector + v131);
          __int128 v134 = v130;
          if (((v132 & v133) != 0) != ((*(void *)(v129 + 8) & v133) != 0)) {
            break;
          }
          uint64_t v130 = 1;
          BOOL v131 = 1LL;
          if ((v134 & 1) != 0) {
            goto LABEL_152;
          }
        }

        if ((v132 & v133) == 0) {
          uint64_t v128 = v129;
        }
LABEL_152:
        int v135 = *(os_log_s **)v128;
        if (v135 && os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v136 = v14[524];
          int v137 = "yes";
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
          buf.uint64_t mSelector = 136315906;
          BOOL v153 = 1024;
          if (!v136) {
            int v137 = "no";
          }
          uint64_t v154 = 370;
          unsigned int v155 = 1024;
          *(_DWORD *)v156 = a1;
          *(_WORD *)&v156[4] = 2080;
          *(void *)&v156[6] = v137;
          _os_log_impl( &dword_0,  v135,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Is temporary shared device %u: %s",  (uint8_t *)&buf,  0x22u);
        }

        *(void *)float v14 = off_47C1F8;
        LODWORD(inAddress.__r_.__value_.__l.__data_) = a1;
        strcpy((char *)&buf, "pcvabolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        int v139 = sub_36EF4((AudioObjectID *)&inAddress, &buf, 0, 0LL);
        if ((_DWORD)v139 || !v138)
        {
          AudioObjectID v146 = __cxa_allocate_exception(0x10uLL);
          *(void *)AudioObjectID v146 = &off_4865A0;
          v146[2] = v139;
        }

        __int16 v140 = (os_log_t *)sub_138E8(17);
        uint64_t v141 = HIDWORD(v139);
        BOOL v142 = *v140;
        if (*v140 && os_log_type_enabled(*v140, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(&inAddress, v141);
          __int16 v143 = (inAddress.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &inAddress
               : (std::string *)inAddress.__r_.__value_.__r.__words[0];
          buf.uint64_t mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_BluetoothUnified_Aspen.cpp";
          BOOL v153 = 1024;
          uint64_t v154 = 74;
          unsigned int v155 = 1024;
          *(_DWORD *)v156 = a1;
          *(_WORD *)&v156[4] = 2080;
          *(void *)&v156[6] = v143;
          _os_log_impl( &dword_0,  v142,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Current profile for %u: %s",  (uint8_t *)&buf,  0x22u);
        }

        *((_DWORD *)v14 + 134) = v141;
        *((void *)v14 + 70) = 0LL;
        *((void *)v14 + 69) = 0LL;
        *((void *)v14 + 68) = v14 + 552;
        *((void *)v14 + 71) = 850045863LL;
        *((_OWORD *)v14 + 36) = 0u;
        *((_OWORD *)v14 + 37) = 0u;
        *((_OWORD *)v14 + 38) = 0u;
        *((void *)v14 + 78) = 0LL;
        sub_189C20((uint64_t)(v14 + 632));
        *(void *)&buf.uint64_t mSelector = 0x706D627470687062LL;
        sub_7A22C((uint64_t)(v14 + 776), &buf.mSelector, 2LL);
        LODWORD(inAddress.__r_.__value_.__l.__data_) = 3;
        sub_15FFCC((uint64_t *)v14 + 100, (int *)&inAddress, 1LL);
        *((void *)v14 + 103) = sub_2EAAF8;
        *((void *)v14 + 104) = v14;
        *((void *)v14 + 105) = 0x7264697300000000LL;
        int v144 = dispatch_queue_create("Profile Change Queue", 0LL);
        *((void *)v14 + 106) = v144;
        dispatch_queue_set_specific(v144, "ProfileChangeQueueKey", "ProfileChangeQueueKey", 0LL);
        if (sub_1CBE08()) {
          sub_371820((uint64_t)v14, 0, 0x6F757470u, 0);
        }
        return v14;
      }

      buf.uint64_t mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      BOOL v153 = 1024;
      uint64_t v154 = 257;
      unsigned int v155 = 1024;
      *(_DWORD *)v156 = a1;
      _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %u: ownership is not supported",  (uint8_t *)&buf,  0x18u);
    }

    __int16 v72 = 0;
    goto LABEL_78;
  }

  unsigned int v27 = sub_138E8(17);
  __int16 v28 = sub_138E8(28);
  uint64_t v29 = 0;
  __int16 v30 = 0LL;
  *(void *)&buf.uint64_t mSelector = 0x100000002LL;
  AudioObjectID v31 = *(void *)(v27 + 8);
  while (1)
  {
    uint64_t v32 = *((int *)&buf.mSelector + v30);
    uint64_t v33 = v29;
    if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
      break;
    }
    uint64_t v29 = 1;
    __int16 v30 = 1LL;
    if ((v33 & 1) != 0) {
      goto LABEL_25;
    }
  }

  if ((v31 & v32) == 0) {
    unsigned int v27 = v28;
  }
LABEL_25:
  uint64_t v34 = *(os_log_s **)v27;
  if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&inAddress, v13);
    uint64_t v35 = (inAddress.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &inAddress
        : (std::string *)inAddress.__r_.__value_.__r.__words[0];
    buf.uint64_t mSelector = 136315906;
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
    BOOL v153 = 1024;
    uint64_t v154 = 300;
    unsigned int v155 = 1024;
    *(_DWORD *)v156 = v13;
    *(_WORD *)&v156[4] = 2080;
    *(void *)&v156[6] = v35;
    _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown bluetooth audio device type %u ('%s')",  (uint8_t *)&buf,  0x22u);
  }

  return 0LL;
}

    v74.__r_.__value_.__r.__words[0] = 0LL;
    ++*((void *)&v62 + 1);
    sub_83D18((uint64_t)&v74);
LABEL_121:
    sub_831AC((uint64_t)cf);
    if ((size & 0x80) != 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++*(void *)&buf[8];
    int v6 = (const __CFDictionary *)theDict.__r_.__value_.__r.__words[0];
  }

  if (v87)
  {
    __int128 v88 = v87;
    operator delete(v87);
  }

  if (*(void *)&buf[16])
  {
    uint64_t v86 = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }

  if (v6) {
    CFRelease(v6);
  }
  sub_8D530((uint64_t)v76);
  if (*((void *)&v72 + 1))
  {
    sub_83134((void *)v72);
    *(void *)&__int16 v72 = 0LL;
    __int16 v30 = (char *)v71[1];
    if (v71[1])
    {
      AudioObjectID v31 = 0LL;
      do
        *((void *)v71[0] + (void)v31++) = 0LL;
      while (v30 != v31);
    }

    *((void *)&v72 + 1) = 0LL;
  }

  uint64_t v32 = v61[0];
  v61[0] = 0LL;
  uint64_t v33 = v71[0];
  v71[0] = v32;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v35 = (unint64_t)v61[1];
  uint64_t v34 = (void *)v62;
  v61[1] = 0LL;
  __int16 v72 = v62;
  uint32_t v73 = LODWORD(v63);
  v71[1] = (void *)v35;
  if (*((void *)&v62 + 1))
  {
    uint64_t v36 = *(void *)(v62 + 8);
    if ((v35 & (v35 - 1)) != 0)
    {
      if (v36 >= v35) {
        v36 %= v35;
      }
    }

    else
    {
      v36 &= v35 - 1;
    }

    uint64_t v34 = 0LL;
    *((void *)v71[0] + v36) = &v72;
    uint64_t v62 = 0uLL;
  }

  sub_83134(v34);
  __int16 v37 = v61[0];
  v61[0] = 0LL;
  if (v37) {
    operator delete(v37);
  }
  if (v64) {
    CFRelease(v64);
  }
  sub_84854(v60, (uint64_t)v71);
  if (SHIBYTE(v66) < 0)
  {
    sub_24054((_BYTE *)(v60 + 40), __dst[0], (unint64_t)__dst[1]);
  }

  else
  {
    *(_OWORD *)(v60 + 40) = *(_OWORD *)__dst;
    *(void *)(v60 + 56) = v66;
  }

  if (SHIBYTE(v68) < 0)
  {
    sub_24054((_BYTE *)(v60 + 64), (void *)v67, *((unint64_t *)&v67 + 1));
  }

  else
  {
    *(_OWORD *)(v60 + 64) = v67;
    *(void *)(v60 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = v68;
  }

  int v38 = (_BYTE *)(v60 + 88);
  if (SHIBYTE(v70) < 0)
  {
    sub_24054(v38, (void *)v69, *((unint64_t *)&v69 + 1));
    if (SHIBYTE(v70) < 0) {
      operator delete((void *)v69);
    }
  }

  else
  {
    *(_OWORD *)int v38 = v69;
    *(void *)(v60 + 104) = v70;
  }

  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(__dst[0]);
  }
  sub_83134((void *)v72);
  __int16 v39 = v71[0];
  v71[0] = 0LL;
  if (v39) {
    operator delete(v39);
  }
}

void sub_D21AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_D21DC(uint64_t a1, int *a2, uint64_t a3, unsigned int *a4, uint64_t a5, float *a6, uint64_t a7)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v7 & 1) == 0)
  {
    unint64_t v50 = (os_log_t *)sub_138E8(13);
    uint64_t v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1007;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Underlying Port is not valid",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1) & 1) == 0)
  {
    BOOL v53 = (os_log_t *)sub_138E8(13);
    std::chrono::system_clock::time_point v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      uint64_t v94 = *(void *)a2;
      int v95 = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
      uint64_t v55 = v98 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1009;
      __int16 v100 = 2080;
      unint64_t v101 = (const char *)v55;
      _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v98 < 0) {
        operator delete(__p);
      }
    }

    uint64_t v56 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v56 = &off_4865A0;
    v56[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    std::chrono::steady_clock::time_point v57 = (os_log_t *)sub_138E8(13);
    unint64_t v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      uint64_t v94 = *(void *)a2;
      int v95 = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
      char v59 = v98 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1010;
      __int16 v100 = 2080;
      unint64_t v101 = (const char *)v59;
      __int16 v102 = 1024;
      *(_DWORD *)uint64_t v103 = a3;
      *(_WORD *)&v103[4] = 2048;
      *(void *)&v103[6] = a4;
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v98 < 0) {
        operator delete(__p);
      }
    }

    int v60 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v60 = &off_4865A0;
    v60[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v61 = (os_log_t *)sub_138E8(13);
    uint64_t v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      uint64_t v94 = *(void *)a2;
      int v95 = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
      BOOL v63 = v98 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1011;
      __int16 v100 = 2080;
      unint64_t v101 = "inData";
      __int16 v102 = 2080;
      *(void *)uint64_t v103 = v63;
      _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v98 < 0) {
        operator delete(__p);
      }
    }

    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = &off_4865A0;
    v64[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 40LL))(a1, a2) & 1) == 0)
  {
    std::chrono::steady_clock::time_point v65 = (os_log_t *)sub_138E8(13);
    std::chrono::system_clock::time_point v66 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
    {
      uint64_t v94 = *(void *)a2;
      int v95 = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v98 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1012;
      __int16 v100 = 2080;
      unint64_t v101 = (const char *)v67;
      _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v98 < 0) {
        operator delete(__p);
      }
    }

    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = &off_4865A0;
    v68[2] = 1852797029;
  }

  int v15 = *a2;
  if (*a2 > 1886614380)
  {
    if (v15 <= 1936747875)
    {
      if (v15 > 1936745317)
      {
        if (v15 != 1936745318 && v15 != 1936745838)
        {
          unsigned __int16 v16 = 26739;
          goto LABEL_56;
        }
      }

      else if (v15 != 1886614381 && v15 != 1936221550)
      {
        unsigned __int16 v16 = 24944;
LABEL_56:
        int v17 = v16 | 0x73700000;
        goto LABEL_70;
      }

LABEL_71:
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
      {
        uint64_t v69 = (os_log_t *)sub_138E8(13);
        os_log_t v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          uint64_t v94 = *(void *)a2;
          int v95 = a2[2];
          sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
          int v71 = v98;
          __int16 v72 = (void **)__p;
          int v73 = (*(uint64_t (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
          uint64_t p_p = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          if (v71 < 0) {
            uint64_t p_p = v72;
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1053;
          __int16 v100 = 2080;
          unint64_t v101 = (const char *)p_p;
          __int16 v102 = 1024;
          *(_DWORD *)uint64_t v103 = a5;
          *(_WORD *)&v103[4] = 1024;
          *(_DWORD *)&v103[6] = v73;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v98 < 0) {
            operator delete(__p);
          }
        }

        unsigned __int8 v75 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned __int8 v75 = &off_4865A0;
        v75[2] = 561211770;
      }

      sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 1054);
      (*(void (**)(void, int *, uint64_t, unsigned int *, uint64_t, float *))(**(void **)buf + 48LL))( *(void *)buf,  a2,  a3,  a4,  a5,  a6);
      uint64_t v45 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v47 = __ldaxr(v48);
        while (__stlxr(v47 - 1, v48));
LABEL_75:
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }

        return;
      }

      return;
    }

    if (v15 <= 1986164322)
    {
      if (v15 != 1936747876 && v15 != 1937204590)
      {
        int v17 = 1952609377;
        goto LABEL_70;
      }

      goto LABEL_71;
    }

    if (v15 == 1986164323)
    {
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 1058);
      (*(void (**)(void, int *, uint64_t, unsigned int *, uint64_t, float *))(**(void **)buf + 48LL))( *(void *)buf,  a2,  a3,  a4,  a5,  a6);
      uint64_t v45 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        return;
      }
      uint64_t v49 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v47 = __ldaxr(v49);
      while (__stlxr(v47 - 1, v49));
      goto LABEL_75;
    }

    if (v15 == 1986814563) {
      goto LABEL_71;
    }
    int v17 = 2004050279;
LABEL_70:
    if (v15 == v17) {
      goto LABEL_71;
    }
LABEL_82:
    sub_61C64(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
    return;
  }

  if (v15 <= 1752327776)
  {
    if (v15 > 1651798885)
    {
      if (v15 != 1651798886 && v15 != 1668051827)
      {
        if (v15 == 1685287026)
        {
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
          {
            os_log_t v76 = (os_log_t *)sub_138E8(13);
            unint64_t v77 = *v76;
            if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
            {
              uint64_t v94 = *(void *)a2;
              int v95 = a2[2];
              sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
              int v78 = v98;
              int v79 = (void **)__p;
              int v80 = (*(uint64_t (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              unint64_t v81 = &__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
              if (v78 < 0) {
                unint64_t v81 = v79;
              }
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1023;
              __int16 v100 = 2080;
              unint64_t v101 = (const char *)v81;
              __int16 v102 = 1024;
              *(_DWORD *)uint64_t v103 = a5;
              *(_WORD *)&v103[4] = 1024;
              *(_DWORD *)&v103[6] = v80;
              _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                buf,
                0x28u);
              if (v98 < 0) {
                operator delete(__p);
              }
            }

            int v82 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v82 = &off_4865A0;
            v82[2] = 561211770;
          }

          if ((_DWORD)a3 != 8 || !a4)
          {
            uint64_t v90 = (os_log_t *)sub_138E8(13);
            uint64_t v91 = *v90;
            if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
            {
              uint64_t v94 = *(void *)a2;
              int v95 = a2[2];
              sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
              __int16 v92 = v98 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1025;
              __int16 v100 = 2080;
              unint64_t v101 = (const char *)v92;
              __int16 v102 = 1024;
              *(_DWORD *)uint64_t v103 = 8;
              *(_WORD *)&v103[4] = 2080;
              *(void *)&v103[6] = "non-";
              __int16 v104 = 1024;
              int v105 = a3;
              __int16 v106 = 2048;
              char v107 = a4;
              _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier da ta is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                buf,
                0x3Cu);
              if (v98 < 0) {
                operator delete(__p);
              }
            }

            __int128 v93 = __cxa_allocate_exception(0x10uLL);
            *(void *)__int128 v93 = &off_4865A0;
            v93[2] = 561211770;
          }

          unint64_t v18 = *(void **)(a1 + 80);
          unsigned int v19 = *(_DWORD *)(a1 + 8);
          uint64_t v20 = *a4;
          uint64_t v21 = a4[1];
          float v22 = *a6;
          sub_6DD4();
          int v23 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
          if (__PAIR64__(v21, v20) == 1650814258) {
            sub_271D48(v18[27], v22);
          }
          uint64_t v24 = v18[27];
          if (!*(_BYTE *)v24 || !*(void *)(v24 + 32))
          {
            uint64_t v25 = v18[18];
            if (v18[19] == v25)
            {
LABEL_49:
              uint64_t v40 = sub_138E8(13);
              id v41 = sub_8C7D4(1, *(void **)v40, *(void *)(v40 + 8));
              unint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
              unint64_t v43 = v42;
              if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1611;
                __int16 v100 = 1024;
                LODWORD(v101) = v19;
                _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Unable to locate a VirtualAudio_Device th at uses VirtualAudioPortID %u.",  buf,  0x18u);
              }

              BOOL v44 = __cxa_allocate_exception(0x10uLL);
              *(void *)BOOL v44 = &off_4865A0;
              v44[2] = 1852797029;
            }

            uint64_t v26 = 0LL;
            unsigned int v27 = 0;
LABEL_34:
            char v28 = 0;
            uint64_t v29 = 0LL;
            uint64_t v30 = *(void *)(v25 + 8 * v26);
            *(_WORD *)AudioObjectPropertyAddress buf = 256;
            while (1)
            {
              char v31 = v28;
              uint64_t v32 = sub_135A0(v30, buf[v29]);
              uint64_t v35 = *(void *)(v32 + 8);
              uint64_t v33 = v32 + 8;
              uint64_t v34 = v35;
              if (v35)
              {
                uint64_t v36 = v33;
                do
                {
                  unsigned int v37 = *(_DWORD *)(v34 + 28);
                  BOOL v38 = v37 >= v19;
                  if (v37 >= v19) {
                    __int16 v39 = (uint64_t *)v34;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v34 + 8);
                  }
                  if (v38) {
                    uint64_t v36 = v34;
                  }
                  uint64_t v34 = *v39;
                }

                while (*v39);
                if (v36 != v33
                  && *(_DWORD *)(v36 + 28) <= v19
                  && (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v30 + 1008) + 352LL))( *(void *)(v30 + 1008),  v20,  v21,  0LL))
                {
                  break;
                }
              }

              char v28 = 1;
              uint64_t v29 = 1LL;
              if ((v31 & 1) != 0)
              {
                uint64_t v25 = v18[18];
                uint64_t v26 = ++v27;
                goto LABEL_34;
              }
            }

            (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(v30 + 1008) + 368LL))( *(void *)(v30 + 1008),  v20,  v21,  0LL,  v22);
          }

          if (v23) {
            (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
          }
          return;
        }

        goto LABEL_82;
      }

      goto LABEL_71;
    }

    if (v15 == 1651271025) {
      goto LABEL_71;
    }
    int v17 = 1651797100;
    goto LABEL_70;
  }

  if (v15 <= 1819505772)
  {
    if (v15 != 1752327777 && v15 != 1752462195)
    {
      int v17 = 1767989616;
      goto LABEL_70;
    }

    goto LABEL_71;
  }

  if (v15 == 1819505773 || v15 == 1869832547) {
    goto LABEL_71;
  }
  if (v15 != 1886417783) {
    goto LABEL_82;
  }
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
  {
    char v83 = (os_log_t *)sub_138E8(13);
    uint64_t v84 = *v83;
    if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
    {
      uint64_t v94 = *(void *)a2;
      int v95 = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v94);
      int v85 = v98;
      uint64_t v86 = (void **)__p;
      int v87 = (*(uint64_t (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
      __int128 v88 = &__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      if (v85 < 0) {
        __int128 v88 = v86;
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1017;
      __int16 v100 = 2080;
      unint64_t v101 = (const char *)v88;
      __int16 v102 = 1024;
      *(_DWORD *)uint64_t v103 = a5;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v87;
      _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v98 < 0) {
        operator delete(__p);
      }
    }

    double v89 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v89 = &off_4865A0;
    void v89[2] = 561211770;
  }

  sub_B8CBC((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 1018);
  std::string __p = a6;
  char v97 = 0;
  (*(void (**)(void, void **))(**(void **)buf + 336LL))(*(void *)buf, &__p);
  sub_19DFC((uint64_t)&__p);
  uint64_t v45 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v46 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    goto LABEL_75;
  }

  if (v9)
  {
    if (!*(_BYTE *)(a3 + 16)) {
      sub_8DEEC();
    }
    int v73 = 0;
    sub_52C24(*(const __CFDictionary **)a3, @"vp client stereo chat enabled", &v73);
    if (v73)
    {
      *(_DWORD *)a5 = 1936090482;
      *(_BYTE *)(a5 + 4) = 1;
    }

    if (v11 > 1919776354)
    {
      if (v11 > 1987081832)
      {
        if (v11 == 1987081833) {
          goto LABEL_112;
        }
        unint64_t v47 = 30319;
      }

      else
      {
        if (v11 == 1919776355) {
          goto LABEL_112;
        }
        unint64_t v47 = 26467;
      }

      BOOL v44 = v47 | 0x76700000;
    }

    else
    {
      if (v11 > 1768779618)
      {
        if (v11 == 1768779619)
        {
LABEL_111:
          unint64_t v11 = 1987081839;
          goto LABEL_112;
        }

        if (v11 == 1768781411)
        {
          unint64_t v11 = 1987081833;
          goto LABEL_112;
        }

    uint64_t v30 = 0LL;
LABEL_72:
    sub_7F234(&v72, v30);
    if (v72)
    {
      uint64_t v32 = v20;
      uint64_t v33 = v27;
      uint64_t v34 = v26;
      uint64_t v35 = (void **)sub_15D74C((uint64_t)&v66, v70, (const __CFString **)&v72);
      uint64_t v36 = *v35;
      if (!*v35)
      {
        unsigned int v37 = v35;
        uint64_t v36 = operator new(0x30uLL);
        *(void *)&buf[8] = &v67;
        BOOL v38 = v72;
        if (v72) {
          CFRetain(v72);
        }
        v36[4] = v38;
        *((_BYTE *)v36 + 40) = 0;
        buf[16] = 1;
        __int16 v39 = v70[0];
        os_log_t *v36 = 0LL;
        v36[1] = 0LL;
        v36[2] = v39;
        *unsigned int v37 = v36;
        uint64_t v40 = v36;
        if (*v66)
        {
          std::chrono::system_clock::time_point v66 = (uint64_t *)*v66;
          uint64_t v40 = (uint64_t *)*v37;
        }

        sub_7A420(v67, v40);
        ++v68;
        *(void *)AudioObjectPropertyAddress buf = 0LL;
        sub_15D7E4((uint64_t)buf);
        uint64_t v25 = v64;
      }

      *((_BYTE *)v36 + 40) = 1;
      uint64_t v26 = v34;
      unsigned int v27 = v33;
      uint64_t v20 = v32;
LABEL_88:
      if (v72) {
        CFRelease(v72);
      }
      goto LABEL_90;
    }

            unint64_t v43 = v55;
            if (v55) {
              goto LABEL_99;
            }
            goto LABEL_100;
          }

          char v31 = v30[36];
          uint64_t v32 = (const void *)*((void *)v30 + 31);
          BOOL v53 = v32;
          LOBYTE(v54) = *((_BYTE *)v30 + 256);
          if ((_BYTE)v54 && v32)
          {
            CFRetain(v32);
          }

          else if (!v32)
          {
            goto LABEL_64;
          }

          CFRetain(v32);
LABEL_64:
          sub_7F234(&cf, v32);
          sub_19DFC((uint64_t)&v53);
          sub_17487C(a1 + 128, v31, (const __CFString **)&cf);
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_66;
        }
      }

      else
      {
        CFRetain(v9);
      }

      CFRetain(v9);
      goto LABEL_34;
    }

          id v41 = 1000 * v40.__d_.__rep_;
LABEL_72:
          if (v41 > (v39.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v42.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_75:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v42);
            std::chrono::steady_clock::now();
            goto LABEL_76;
          }
        }

        v42.__d_.__rep_ = v41 + v39.__d_.__rep_;
        goto LABEL_75;
      }

    std::string::append(&v36, ", ", 2uLL);
    goto LABEL_72;
  }

  if ((v15 & 1) == 0) {
    std::string::append(&v36, "empty", 5uLL);
  }
LABEL_87:
  std::string::append(&v36, " }", 2uLL);
  if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v26 = &v36;
  }
  else {
    uint64_t v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v27 = v36.__r_.__value_.__s.__size_;
  }
  else {
    unsigned int v27 = v36.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v26, v27);
  if (*(_BYTE *)(a2 + 200)) {
    std::operator+<char>("; AggregateDevice Clock Device: ", a2 + 176);
  }
  else {
    sub_7D084(&__p, "");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v28 = &__p;
  }
  else {
    char v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v29 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v29 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v28, v29);
  std::string::append(&v35, " ]", 2uLL);
  if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v30 = &v35;
  }
  else {
    uint64_t v30 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v31 = v35.__r_.__value_.__s.__size_;
  }
  else {
    char v31 = v35.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v30, v31);
  std::string::append(a1, "; Route: ", 9uLL);
  sub_2DA51C(&__p, *(unsigned int **)a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v32 = &__p;
  }
  else {
    uint64_t v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v33 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v33 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v32, v33);
  return std::string::append(a1, " ]", 2uLL);
}

          unsigned int v37 = 1000 * v36.__d_.__rep_;
LABEL_72:
          if (v37 > (v35.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v38.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_75:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v38);
            std::chrono::steady_clock::now();
            goto LABEL_76;
          }
        }

        v38.__d_.__rep_ = v37 + v35.__d_.__rep_;
        goto LABEL_75;
      }

  int v60 = v304;
  if (*(_DWORD *)(v304 + 264) == 1752709424)
  {
    sub_1BAC98(*(_DWORD *)(a2 + 12), (uint64_t)v30);
    int v60 = v304;
  }

  sub_1B5F60(v294, v60, a2, *(void *)(v12 + 56), *(_DWORD *)(a2 + 12), 0);
  uint64_t v61 = (std::__shared_weak_count *)*((void *)&v304 + 1);
  *(_OWORD *)AudioObjectPropertyAddress buf = v304;
  if (*((void *)&v304 + 1))
  {
    uint64_t v62 = (unint64_t *)(*((void *)&v304 + 1) + 16LL);
    do
      BOOL v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }

  sub_1BB524((unsigned int **)v294, (uint64_t *)buf, v30);
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v306;
  *(void *)AudioObjectPropertyAddress buf = v305;
  *(void *)&buf[8] = v306;
  if (v306)
  {
    std::chrono::steady_clock::time_point v65 = (unint64_t *)&v306->__shared_weak_owners_;
    do
      std::chrono::system_clock::time_point v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }

  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = (std::__shared_weak_count *)*((void *)&v304 + 1);
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v304;
  if (*((void *)&v304 + 1))
  {
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = (unint64_t *)(*((void *)&v304 + 1) + 16LL);
    do
      uint64_t v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }

  sub_212D4C( &v293,  a1,  (uint64_t)v16,  (uint64_t)v30,  (uint64_t *)buf,  (uint64_t *)&v315,  (uint64_t)&v299,  a2,  (unsigned int **)&v301,  a5,  a3);
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v268 == 1918990112) {
    os_log_t v70 = sub_14D9C8();
  }
  else {
    os_log_t v70 = 0;
  }
  if ((sub_1CBD44() & 1) != 0)
  {
    int v71 = sub_1BDE08((os_unfair_lock_s *)v304, (uint64_t *)&v293);
  }

  else
  {
    LODWORD(v315.__r_.__value_.__l.__data_) = v14;
    __int16 v72 = (void *)sub_7A22C((uint64_t)buf, (unsigned int *)&v315, 1LL);
    int v71 = sub_1BDD40(v72, (uint64_t *)&v293);
    sub_32C8C(*(void **)&buf[8]);
  }

  int v73 = sub_7531C();
  unint64_t v74 = 0;
  if ((v73 & 1) == 0)
  {
    unsigned __int8 v75 = *(_DWORD *)(a2 + 12);
    if (v75 <= 1987077986)
    {
      if (v75 != 1768057203)
      {
        os_log_t v76 = 1919776355;
LABEL_101:
        if (v75 != v76) {
          goto LABEL_103;
        }
      }
    }

    else if (v75 != 1987077987 && v75 != 1987081839)
    {
      os_log_t v76 = 1987081833;
      goto LABEL_101;
    }

    unint64_t v74 = *(_BYTE *)(a2 + 156) == 0;
  }

          id v41 = 1000 * v40.__d_.__rep_;
LABEL_72:
          if (v41 > (v39.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v42.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_75:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v42);
            std::chrono::steady_clock::now();
            goto LABEL_76;
          }
        }

        v42.__d_.__rep_ = v41 + v39.__d_.__rep_;
        goto LABEL_75;
      }

void sub_D319C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D3240(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_D324C(uint64_t a1)
{
  uint64_t v2 = sub_138E8(3);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    unsigned int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v4 = *(_DWORD *)(a1 + 8);
        sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(v17 + 8));
        int v5 = v16 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
        __int16 v20 = 1024;
        int v21 = 113;
        __int16 v22 = 1024;
        int v23 = v4;
        __int16 v24 = 2048;
        uint64_t v25 = a1;
        __int16 v26 = 2080;
        unsigned int v27 = v5;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Tearing down VirtualAudio_Port with ID %u at address %p (underlying port: %s).",  buf,  0x2Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
        __int16 v20 = 1024;
        int v21 = 114;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: routing mutex not held",  buf,  0x12u);
      }
    }
  }

  atomic_store(0, (unsigned __int8 *)(a1 + 104));
  strcpy(buf, "ofnpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
  strcpy(buf, "manpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
  strcpy(buf, "mnspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
  strcpy(buf, "wsppbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
  strcpy(buf, "atspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
  uint64_t v8 = v17;
  if ((*(_WORD *)(v17 + 184) & 0x40) != 0)
  {
    strcpy(buf, "rsipbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F35C8(v17, buf, (uint64_t)sub_D3B20, a1);
    uint64_t v8 = v17;
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 392LL))(v8))
  {
    strcpy(buf, "eitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
    strcpy(buf, "pitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
    strcpy(buf, "sitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
    strcpy(buf, "sptbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
  }

  strcpy(buf, "casobolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v17 + 16LL))(v17, buf))
  {
    strcpy(buf, "fcasbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
    strcpy(buf, "casobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
  }

  unsigned int v9 = (int *)qword_48D3D0;
  for (uint64_t i = qword_48D3D8; v9 != (int *)i; ++v9)
  {
    int v11 = *v9;
    *(_DWORD *)AudioObjectPropertyAddress buf = *v9;
    *(void *)&uint8_t buf[4] = 1735159650LL;
    if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v17 + 16LL))(v17, buf))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = v11;
      *(void *)&uint8_t buf[4] = 1735159650LL;
      sub_F35C8(v17, buf, (uint64_t)sub_D37EC, a1);
    }
  }

  unint64_t v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_D36EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_D3750(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 200LL))(v6);
  uint64_t v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return v1;
}

void sub_D37D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_D37EC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return;
  }
  int v5 = 0LL;
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = a2;
  do
  {
    int v10 = *(_DWORD *)(a3 + 12 * v8);
    if (v10 > 1886417782)
    {
      if (v10 > 1936745837)
      {
        if (v10 > 1936747875)
        {
          goto LABEL_38;
        }

        BOOL v12 = v10 == 1936745838;
        unsigned __int16 v14 = 26739;
      }

      else
      {
        if (v10 <= 1886614624)
        {
          BOOL v12 = v10 == 1886417783;
          int v13 = 1886613101;
          goto LABEL_33;
        }

        BOOL v12 = v10 == 1886614625 || v10 == 1935762278;
        unsigned __int16 v14 = 25446;
      }

      int v13 = v14 | 0x73700000;
    }

    else if (v10 > 1752327776)
    {
      if (v10 <= 1869832546)
      {
        BOOL v12 = v10 == 1752327777;
        int v13 = 1819505773;
      }

      else
      {
        BOOL v12 = v10 == 1869832547 || v10 == 1886282093;
        int v13 = 1886283375;
      }
    }

    else
    {
      BOOL v12 = (v10 - 1651796325) <= 0xE && ((1 << (v10 - 101)) & 0x4801) != 0 || v10 == 1651798131;
      int v13 = 1668051827;
    }

void sub_D3B00(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_D3B20(uint64_t a1, unsigned int a2, int *a3, void **a4)
{
  if (a2)
  {
    uint64_t v5 = a2;
    while (1)
    {
      int v6 = *a3;
      a3 += 3;
      if (v6 == 1885959026) {
        break;
      }
      if (!--v5) {
        return;
      }
    }

    uint64_t v9 = 0x676C6F6270697372LL;
    int v10 = 0;
    ((void (*)(void **, uint64_t, uint64_t *, uint64_t))(*a4)[9])(a4, 1LL, &v9, 1LL);
    sub_6DD4();
    if ((*(unsigned int (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828))
    {
      sub_6DD4();
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
      uint64_t v7 = 0x676C6F6270727473LL;
      int v8 = 0;
      (*(void (**)(void *, uint64_t, uint64_t *, uint64_t))(*a4[2] + 72LL))(a4[2], 1LL, &v7, 1LL);
      sub_6DD4();
      (*(void (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    }

    else
    {
      uint64_t v7 = 0x676C6F6270727473LL;
      int v8 = 0;
      (*(void (**)(void *, uint64_t, uint64_t *, uint64_t))(*a4[2] + 72LL))(a4[2], 1LL, &v7, 1LL);
    }

    sub_D3C44((uint64_t)a4);
  }

void sub_D3C44(uint64_t a1)
{
  uint64_t v2 = std::string::insert(&v14, 0LL, "[ id: ", 6uLL);
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v4 = __p;
  }
  else {
    unint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(&v17, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_7D084(&v14, __str);
  int v6 = std::string::insert(&v14, 0LL, "; addr: ", 8uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(&v17, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  sub_D3ECC(&v14, (os_unfair_lock_s **)(a1 + 88));
  int v10 = std::string::insert(&v14, 0LL, "; core port: ", 0xDuLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t cap = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    BOOL v12 = __p;
  }
  else {
    BOOL v12 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v13 = HIBYTE(cap);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append(&v17, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::string::append(&v17, " ]", 2uLL);
  sub_BB174(a1 + 24, &v17);
}

void sub_D3E64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_D3ECC(void *a1, os_unfair_lock_s **a2)
{
  __int128 v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    goto LABEL_13;
  }
  std::string::size_type v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_13;
  }
  int v6 = v5;
  __int128 v7 = *a2;
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }

  sub_23FE8((uint64_t)a1, v7 + 2);
  int v8 = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return;
    }
LABEL_13:
    sub_7D084(a1, "expired");
  }

void sub_D3F9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_D3FB0(void *a1, uint64_t a2, int a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_B8CBC(&v24, (uint64_t *)(a2 + 88), "", 1082);
  if (sub_D51D4(v24))
  {
    sub_FA368(v20, v24);
    std::string __p = 0LL;
    BOOL v12 = 0LL;
    uint64_t v13 = 0LL;
    strcpy(v14, "cwdv");
    v14[8] = 0;
    int v15 = 3;
    char v16 = v17;
    v17[0] = 0LL;
    v17[1] = 0LL;
    if (a3 == 1869968496) {
      int v6 = 44731034;
    }
    else {
      int v6 = 44731050;
    }
    CFTypeRef cf = 0LL;
    if (a3 == 1768845428) {
      int v6 = 44731018;
    }
    int v18 = v6;
    sub_335C00(v21, v20, (uint64_t)&__p);
    sub_D5040(&v22, *(void *)(a2 + 80), (uint64_t)v21);
    uint64_t v7 = v23;
    *(_OWORD *)a1 = v22;
    a1[2] = v7;
    uint64_t v23 = 0LL;
    __int128 v22 = 0uLL;
    sub_85B80(v21);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v17[0]);
    if (__p)
    {
      BOOL v12 = __p;
      operator delete(__p);
    }

    sub_85B80(v20);
  }

  int v8 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_D4130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_85B80((uint64_t *)(v2 - 104));
  sub_A0DB0((uint64_t)va);
  sub_85B80((uint64_t *)va1);
  sub_7A768(v2 - 48);
  _Unwind_Resume(a1);
}

void sub_D4170(void *a1, uint64_t a2, int a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_B8CBC(&v24, (uint64_t *)(a2 + 88), "", 1105);
  if (sub_D4FEC(v24))
  {
    sub_FAA90(v20, v24);
    std::string __p = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    strcpy(v14, "cwdv");
    v14[8] = 0;
    int v15 = 3;
    char v16 = v17;
    v17[0] = 0LL;
    v17[1] = 0LL;
    if (a3 == 1869968496) {
      int v6 = 44731034;
    }
    else {
      int v6 = 44731050;
    }
    CFTypeRef cf = 0LL;
    if (a3 == 1768845428) {
      int v6 = 44731018;
    }
    int v18 = v6;
    sub_335C00(v21, v20, (uint64_t)&__p);
    sub_D5040(&v22, *(void *)(a2 + 80), (uint64_t)v21);
    uint64_t v7 = v23;
    *(_OWORD *)a1 = v22;
    a1[2] = v7;
    uint64_t v23 = 0LL;
    __int128 v22 = 0uLL;
    sub_85B80(v21);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v17[0]);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }

    sub_85B80(v20);
  }

  uint64_t v8 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_D42F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_85B80((uint64_t *)(v2 - 104));
  sub_A0DB0((uint64_t)va);
  sub_85B80((uint64_t *)va1);
  sub_7A768(v2 - 48);
  _Unwind_Resume(a1);
}

void sub_D4330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 176LL))(&__p, v11, a3);
  std::string::size_type v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = (int *)__p;
  uint64_t v9 = v14;
  *(void *)a1 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  *(_WORD *)(a1 + 8) = 257;
  while (v8 != v9)
  {
    int v10 = *v8++;
    sub_1378C(a1, v10);
  }

  if (__p)
  {
    uint64_t v14 = (int *)__p;
    operator delete(__p);
  }

void sub_D4414( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D4450(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v22 = 0LL;
  uint64_t v23 = 0LL;
  int v21 = 0LL;
  std::string::size_type v5 = *(uint64_t **)(v19 + 96);
  uint64_t v6 = *(uint64_t **)(v19 + 104);
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = (std::__shared_weak_count *)v5[1];
    uint64_t v25 = *v5;
    __int16 v26 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }

    if (*(_DWORD *)(v7 + 8) == 1)
    {
      uint64_t v11 = *(void *)(v7 + 32);
LABEL_8:
      if (v11 != *(void *)(v7 + 40))
      {
        for (uint64_t i = *(_DWORD **)(v11 + 40); i != *(_DWORD **)(v11 + 48); ++i)
        {
          if (*i == a3)
          {
            v11 += 64LL;
            goto LABEL_8;
          }
        }

        __int32 v24 = *(_DWORD *)v7;
        sub_8598C((uint64_t)&v21, &v24);
      }
    }

    if (v8)
    {
      uint64_t v13 = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    v5 += 2;
  }

  uint64_t v15 = v20;
  if (v20)
  {
    char v16 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  int v18 = v21;
  sub_D4F74(a1, v21, v22);
  if (v18) {
    operator delete(v18);
  }
}

void sub_D45BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_D45F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v28 + 176LL))(&v26, v28, a3);
  if (v26 == v27)
  {
    *(void *)a1 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    *(_WORD *)(a1 + 8) = 257;
    goto LABEL_30;
  }

  uint64_t v23 = 0LL;
  __int32 v24 = 0LL;
  uint64_t v25 = 0LL;
  else {
    uint64_t v6 = sub_D4ABC(a2);
  }
  float v7 = *(float *)&v6;
  if ((v6 & 0xFF00000000LL) != 0)
  {
    uint64_t v8 = sub_138E8(3);
    float v9 = v7;
    if ((*(_BYTE *)(v8 + 8) & 1) != 0)
    {
      unint64_t v10 = *(os_log_s **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          __int16 v31 = 1024;
          int v32 = 1169;
          __int16 v33 = 2048;
          double v34 = v9;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Looking up active sub-port for beam direction: %f",  buf,  0x1Cu);
        }
      }
    }

    *(void *)AudioObjectPropertyAddress buf = (*(uint64_t (**)(uint64_t, void, float))(*(void *)v28 + 192LL))( v28,  *(unsigned int *)(a3 + 4),  v9);
    if ((*(void *)buf & 0xFF00000000LL) == 0) {
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v11 = sub_138E8(3);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      uint64_t v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          __int16 v31 = 1024;
          int v32 = 1178;
          _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Looking up active sub-port. (No beam)", buf, 0x12u);
        }
      }
    }

    *(void *)AudioObjectPropertyAddress buf = (*(uint64_t (**)(uint64_t, void))(*(void *)v28 + 184LL))( v28,  *(unsigned int *)(a3 + 4));
    if ((*(void *)buf & 0xFF00000000LL) == 0) {
      goto LABEL_19;
    }
  }

  sub_8598C((uint64_t)&v23, (__int32 *)buf);
LABEL_19:
  uint64_t v13 = v23;
  unint64_t v14 = v24;
  if (v23 != v24)
  {
    uint64_t v15 = sub_138E8(3);
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      char v16 = *(os_log_s **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, *v13);
          if (v22 >= 0) {
            *(double *)&unint64_t v17 = COERCE_DOUBLE(__p);
          }
          else {
            unint64_t v17 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          __int16 v31 = 1024;
          int v32 = 1186;
          __int16 v33 = 2080;
          double v34 = *(double *)&v17;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Active sub-port is %s", buf, 0x1Cu);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  sub_D4F74(a1, v13, v14);
  if (v13) {
    operator delete(v13);
  }
LABEL_30:
  if (v26)
  {
    unsigned int v27 = v26;
    operator delete(v26);
  }

  int v18 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

void sub_D498C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  sub_7A768((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_D49F0(uint64_t a1, uint64_t a2)
{
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  sub_B8CBC(&v7, (uint64_t *)(a2 + 88), "", 1193);
  __int128 v3 = v8;
  uint64_t v9 = *(void *)(v7 + 128);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (BYTE4(v9)) {
    sub_8598C((uint64_t)&v10, (__int32 *)&v9);
  }
  uint64_t v6 = v10;
  sub_D4F74(a1, v10, v11);
  if (v6) {
    operator delete(v6);
  }
}

void sub_D4AA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D4ABC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  sub_6DD4();
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  unint64_t v5 = *(uint64_t **)(v2 + 144);
  uint64_t v6 = *(uint64_t **)(v2 + 152);
  if (v5 == v6)
  {
LABEL_16:
    int v19 = 0;
    if (!v4) {
      goto LABEL_20;
    }
  }

  else
  {
LABEL_2:
    char v7 = 0;
    uint64_t v8 = 0LL;
    uint64_t v9 = *v5;
    __int16 v27 = 256;
    while (1)
    {
      char v10 = v7;
      uint64_t v11 = sub_135A0(v9, *((unsigned __int8 *)&v27 + v8));
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v12 = v11 + 8;
      uint64_t v13 = v14;
      if (v14)
      {
        uint64_t v15 = v12;
        do
        {
          unsigned int v16 = *(_DWORD *)(v13 + 28);
          BOOL v17 = v16 >= v3;
          if (v16 >= v3) {
            int v18 = (uint64_t *)v13;
          }
          else {
            int v18 = (uint64_t *)(v13 + 8);
          }
          if (v17) {
            uint64_t v15 = v13;
          }
          uint64_t v13 = *v18;
        }

        while (*v18);
        if (v15 != v12 && *(_DWORD *)(v15 + 28) <= v3) {
          break;
        }
      }

      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v10 & 1) != 0)
      {
        if (++v5 != v6) {
          goto LABEL_2;
        }
        goto LABEL_16;
      }
    }

    int v19 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v9 + 1008) + 384LL))( *(void *)(v9 + 1008),  1685287015LL,  1818980210LL,  0LL);
    if (!v4) {
      goto LABEL_20;
    }
  }

  (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
LABEL_20:
  if (v19 && sub_278B1C(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), 1685287015LL, 1667524978LL))
  {
    unint64_t v20 = *(void **)(a1 + 80);
    unsigned int v21 = *(_DWORD *)(a1 + 8);
    uint64_t v22 = 1685287015LL;
    uint64_t v23 = 1667524978LL;
  }

  else
  {
    if (!sub_278B1C(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), 1650814258LL, 0LL))
    {
      uint64_t v25 = 0LL;
      float v24 = 0.0;
      return v25 | LODWORD(v24);
    }

    unint64_t v20 = *(void **)(a1 + 80);
    unsigned int v21 = *(_DWORD *)(a1 + 8);
    uint64_t v22 = 1650814258LL;
    uint64_t v23 = 0LL;
  }

  float v24 = sub_278CCC(v20, v21, v22, v23);
  uint64_t v25 = 0x100000000LL;
  return v25 | LODWORD(v24);
}

void sub_D4C88(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) != 0) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_D4CB0(uint64_t a1, _DWORD *a2, void *a3)
{
  (*(void (**)(void **__return_ptr))(**(void **)(v11 + 192) + 288LL))(&v13);
  unint64_t v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = v13;
  unint64_t v9 = (v14 - (_BYTE *)v13) >> 2;
  size_t v10 = (4 * v9);
  *a2 = v10;
  if ((_DWORD)v9) {
    memcpy(a3, v8, v10);
  }
  if (v8)
  {
    uint64_t v14 = v8;
    operator delete(v8);
  }

void sub_D4D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_D4DA0(uint64_t *a1, uint64_t a2, const char *a3, int a4)
{
  unsigned int v16 = &v16;
  BOOL v17 = (uint64_t *)&v16;
  uint64_t v18 = 0LL;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    unint64_t v9 = a1 + 2;
    goto LABEL_7;
  }

  unint64_t v9 = &v18;
  do
  {
    sub_B8CBC((uint64_t *)&v19, (uint64_t *)(v5 + 16), a3, a4);
    size_t v10 = operator new(0x20uLL);
    v10[1] = v19;
    uint64_t v11 = (uint64_t)v16;
    *(void *)size_t v10 = v16;
    *((void *)v10 + 1) = &v16;
    *(void *)(v11 + 8) = v10;
    uint64_t v12 = v18 + 1;
    unsigned int v16 = v10;
    ++v18;
    uint64_t v5 = *(void *)(v5 + 8);
  }

  while (v5 != a2);
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (v12)
  {
    uint64_t v13 = v17;
    uint64_t v14 = *v17;
    *(void *)(v14 + 8) = *((void *)v10 + 1);
    **((void **)v10 + 1) = v14;
    uint64_t v15 = *a1;
    *(void *)(v15 + 8) = v13;
    *uint64_t v13 = v15;
    *a1 = (uint64_t)v10;
    *((void *)v10 + 1) = a1;
    a1[2] = v12;
LABEL_7:
    *unint64_t v9 = 0LL;
  }

  sub_1BB88((uint64_t *)&v16);
}

void sub_D4EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  sub_1BB88((uint64_t *)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_D4EC8(CFStringRef *a1, const UInt8 *a2, CFIndex a3)
{
  if (a2)
  {
    CFStringRef v4 = CFStringCreateWithBytes(0LL, a2, a3, 0x8000100u, 0);
    *a1 = v4;
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  else
  {
    *a1 = 0LL;
  }

  return a1;
}

void sub_D4F48(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D4F74(uint64_t a1, int *a2, int *a3)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  while (a2 != a3)
  {
    int v7 = *a2++;
    uint64_t result = sub_1378C(a1, v7);
  }

  return result;
}

void sub_D4FD8(_Unwind_Exception *a1)
{
}

BOOL sub_D4FEC(uint64_t a1)
{
  uint64_t v2 = a1 + 320;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 320) + 16LL))(a1 + 320);
  uint64_t v4 = *(void *)(a1 + 312);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  return v4 != 0;
}

void sub_D5040(void *a1, uint64_t a2, uint64_t a3)
{
  std::string __p = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  strcpy(v16, "cwdv");
  v16[8] = 0;
  int v17 = 3;
  v19[0] = 0LL;
  v19[1] = 0LL;
  uint64_t v18 = v19;
  CFTypeRef cf = 0LL;
  int v20 = 44731050;
  sub_252EDC(&v22, a2, a3, (uint64_t)&__p);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v19[0]);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }

  uint64_t v4 = v22;
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  if ((void **)v4 != v23)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = (void **)v4;
    do
    {
      int v7 = v6[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (void **)v7;
          int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void **)v6[2];
          BOOL v9 = *v8 == v6;
          uint64_t v6 = v8;
        }

        while (!v9);
      }

      ++v5;
      uint64_t v6 = v8;
    }

    while (v8 != v23);
    sub_7A840(a1, v5);
    size_t v10 = (_DWORD *)a1[1];
    do
    {
      *size_t v10 = *(_DWORD *)(v4 + 28);
      uint64_t v11 = *(void **)(v4 + 8);
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = *(void ***)(v4 + 16);
          BOOL v9 = *v12 == (void *)v4;
          uint64_t v4 = (uint64_t)v12;
        }

        while (!v9);
      }

      ++v10;
      uint64_t v4 = (uint64_t)v12;
    }

    while (v12 != v23);
    a1[1] = v10;
  }

  sub_32C8C(v23[0]);
}

void sub_D519C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }

  sub_32C8C(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

BOOL sub_D51D4(uint64_t a1)
{
  uint64_t v2 = a1 + 320;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 320) + 16LL))(a1 + 320);
  uint64_t v4 = *(void *)(a1 + 288);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  return v4 != 0;
}

uint64_t sub_D5228(uint64_t a1, int a2)
{
  if (sub_D51D4(v21))
  {
    sub_FA368(v19, v21);
    std::string __p = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    strcpy(v13, "cwdv");
    v13[8] = 0;
    int v14 = 3;
    uint64_t v15 = v16;
    v16[0] = 0LL;
    v16[1] = 0LL;
    if (a2 == 1869968496) {
      int v4 = 44731034;
    }
    else {
      int v4 = 44731050;
    }
    CFTypeRef cf = 0LL;
    if (a2 == 1768845428) {
      int v4 = 44731018;
    }
    int v17 = v4;
    sub_335C00(v20, v19, (uint64_t)&__p);
    uint64_t v5 = sub_D5568(a1, (uint64_t)v20);
    sub_85B80(v20);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v16[0]);
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }

    sub_85B80(v19);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v6 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return v5;
}

void sub_D5388(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_D53C8(uint64_t a1, int a2)
{
  if (sub_D4FEC(v21))
  {
    sub_FAA90(v19, v21);
    std::string __p = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    strcpy(v13, "cwdv");
    v13[8] = 0;
    int v14 = 3;
    uint64_t v15 = v16;
    v16[0] = 0LL;
    v16[1] = 0LL;
    if (a2 == 1869968496) {
      int v4 = 44731034;
    }
    else {
      int v4 = 44731050;
    }
    CFTypeRef cf = 0LL;
    if (a2 == 1768845428) {
      int v4 = 44731018;
    }
    int v17 = v4;
    sub_335C00(v20, v19, (uint64_t)&__p);
    uint64_t v5 = sub_D5568(a1, (uint64_t)v20);
    sub_85B80(v20);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v16[0]);
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }

    sub_85B80(v19);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v6 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return v5;
}

void sub_D5528(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_D5568(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0LL;
  }
  LODWORD(v5) = 0;
  do
  {
    std::string __p = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    strcpy(v17, "cwdv");
    v17[8] = 0;
    int v18 = 3;
    v20[0] = 0LL;
    v20[1] = 0LL;
    __int128 v19 = v20;
    CFTypeRef cf = 0LL;
    int v21 = 44731048;
    uint64_t v6 = *(void *)(a1 + 80);
    sub_B8F68(&v12, (uint64_t *)(v2 + 16), "", 1119);
    int v7 = sub_578E8(*(void *)(v6 + 128), v12, (uint64_t)&__p);
    unint64_t v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v20[0]);
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }

    if (v7) {
      uint64_t v5 = (v5 + 1);
    }
    else {
      uint64_t v5 = v5;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }

  while (v2 != a2);
  return v5;
}

void sub_D56B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, CFTypeRef cf)
{
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(a19);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D572C(uint64_t a1)
{
  *(void *)a1 = off_46EE90;
  uint64_t v2 = (os_log_t *)sub_138E8(3);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 8);
    int v7 = 136315906;
    unint64_t v8 = "VirtualAudio_Port.cpp";
    __int16 v9 = 1024;
    int v10 = 105;
    __int16 v11 = 1024;
    int v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = a1;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Destroying VirtualAudio_Port with ID %u at address %p.",  (uint8_t *)&v7,  0x22u);
  }

  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_2F4E00(a1);
  return a1;
}

void sub_D5824(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_D5830(uint64_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  unint64_t v8 = (void *)sub_2F4FC8(a1, a2, 1886549091, a3);
  *unint64_t v8 = off_46EE90;
  v8[10] = a3;
  v8[11] = *a4;
  uint64_t v9 = a4[1];
  v8[12] = v9;
  if (v9)
  {
    int v10 = (unint64_t *)(v9 + 16);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *(_WORD *)(a1 + 104) = 0;
  sub_B8CBC((uint64_t *)&v25, v8 + 11, "", 59);
  atomic_store(1u, (unsigned __int8 *)(a1 + 104));
  *(_BYTE *)(a1 + 105) = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v25->_os_unfair_lock_opaque + 208LL))(v25);
  int v12 = v25;
  if ((v25[46]._os_unfair_lock_opaque & 0x40) != 0)
  {
    strcpy(buf, "rsipbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D3B20, a1, 1);
    int v12 = v25;
  }

  strcpy(buf, "ofnpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F31A4((uint64_t)v12, buf, (uint64_t)sub_D37EC, a1, 1);
  strcpy(buf, "manpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
  strcpy(buf, "mnspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
  strcpy(buf, "wsppbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
  strcpy(buf, "atspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
  if ((*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&v25->_os_unfair_lock_opaque + 392LL))(v25))
  {
    strcpy(buf, "eitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
    strcpy(buf, "pitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
    strcpy(buf, "sitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
    strcpy(buf, "sptbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
  }

  strcpy(buf, "casobolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&v25->_os_unfair_lock_opaque + 16LL))( v25,  buf))
  {
    strcpy(buf, "fcasbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
    strcpy(buf, "casobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
  }

  __int16 v13 = (int *)qword_48D3D0;
  for (uint64_t i = qword_48D3D8; v13 != (int *)i; ++v13)
  {
    int v15 = *v13;
    *(_DWORD *)AudioObjectPropertyAddress buf = *v13;
    *(void *)&uint8_t buf[4] = 1735159650LL;
    if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&v25->_os_unfair_lock_opaque + 16LL))( v25,  buf))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = v15;
      *(void *)&uint8_t buf[4] = 1735159650LL;
      sub_F31A4((uint64_t)v25, buf, (uint64_t)sub_D37EC, a1, 1);
    }
  }

  sub_D3C44(a1);
  uint64_t v16 = (os_log_t *)sub_138E8(3);
  int v17 = *v16;
  if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
  {
    sub_23FE8((uint64_t)__p, v25 + 2);
    int v18 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
    __int16 v28 = 1024;
    int v29 = 100;
    __int16 v30 = 1024;
    unsigned int v31 = a2;
    __int16 v32 = 2048;
    uint64_t v33 = a1;
    __int16 v34 = 2080;
    uint64_t v35 = v18;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating VirtualAudio_Port with ID %u at address %p (underlying port: %s).",  buf,  0x2Cu);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }

  __int128 v19 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  return a1;
}

void sub_D5CEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  int v18 = *(std::__shared_weak_count **)(v14 + 96);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_2F4E00(v14);
  _Unwind_Resume(a1);
}

void sub_D5D90(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v5 & 1) == 0)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 180;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Underlying Port is not valid",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }

  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  unint64_t v8 = (uint64_t *)(a1 + 88);
  *(void *)AudioObjectPropertyAddress buf = v7;
  *(void *)&buf[8] = v6;
  if (v6)
  {
    uint64_t v9 = (unint64_t *)(v6 + 16);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_D61C0(v33, (uint64_t *)buf, 1LL);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  unint64_t v11 = (os_log_t *)sub_138E8(3);
  int v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
  {
    sub_B8CBC(&v29, v8, "", 189);
    __int16 v13 = __p;
    sub_2CA1C(__p, *(unsigned int *)(v29 + 144));
    if (v32 < 0) {
      __int16 v13 = (void **)__p[0];
    }
    sub_B8CBC(&v25, v8, "", 189);
    uint64_t v14 = *(const void **)(v25 + 248);
    __int16 v27 = v14;
    char v28 = *(_BYTE *)(v25 + 256);
    if (v28 && v14) {
      CFRetain(v14);
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 189;
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 2080;
    BOOL v38 = v13;
    __int16 v39 = 2112;
    uint64_t v40 = v14;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "%25s:%-5d Request to set port routability to %u for port with type '%s' and UID %@",  buf,  0x2Cu);
    sub_19DFC((uint64_t)&v27);
    int v15 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    if (v32 < 0) {
      operator delete(__p[0]);
    }
    int v18 = v30;
    if (v30)
    {
      __int128 v19 = (unint64_t *)&v30->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  sub_6DD4();
  sub_34AA0(buf, (uint64_t)&qword_48F828);
  uint64_t v21 = sub_546E0();
  sub_103CF8(v21, (uint64_t)v33, a2, 0);
  if (buf[8]) {
    (*(void (**)(void))(**(void **)buf + 16LL))(*(void *)buf);
  }
  sub_85B80(v33);
  if (v4) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

void sub_D60E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::__shared_weak_count *a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a13);
  sub_85B80(&a21);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v26 + 24LL))(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_D61C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a3)
  {
    int v4 = a2;
    unsigned __int8 v5 = &a2[2 * a3];
    do
    {
      sub_85C34(a1, *v4, v4[1]);
      v4 += 2;
    }

    while (v4 != v5);
  }

  return a1;
}

void sub_D6214(_Unwind_Exception *a1)
{
}

uint64_t sub_D6228(uint64_t a1)
{
  *(void *)a1 = off_46EF18;
  sub_D62A0(*(void **)(a1 + 48));
  sub_D62E0((uint64_t *)(a1 + 8));
  return a1;
}

void sub_D6264(void *a1)
{
  *(void *)a1 = off_46EF18;
  sub_D62A0(*((void **)a1 + 6));
  sub_D62E0((uint64_t *)a1 + 1);
  operator delete(a1);
}

void sub_D62A0(void *a1)
{
  if (a1)
  {
    sub_D62A0(*a1);
    sub_D62A0(a1[1]);
    sub_D635C((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_D62E0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v3[1];
        uint64_t v5 = v3[2];
        v3[2] = 0LL;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
        }
        operator delete(v3);
        int v3 = v6;
      }

      while (v6 != a1);
    }
  }

void sub_D635C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_D63A4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    unint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "VirtualAudio_PortManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 404;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: handed empty port list",  (uint8_t *)__p,  0x12u);
      }
    }
  }

  if (!a2)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    unint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "VirtualAudio_PortManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 405;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: handed NULL client data",  (uint8_t *)__p,  0x12u);
      }
    }
  }

  __n128 v18 = 0uLL;
  uint64_t v19 = 0LL;
  sub_6DD4();
  int v15 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_D4DA0(&v16, a1, "", 421);
  uint64_t v4 = v17;
  if (v17 == &v16)
  {
    char v5 = 0;
  }

  else
  {
    char v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4[2] + 152LL))(v4[2]))
      {
        memset(__p, 0, sizeof(__p));
        strcpy(v21, "cwdv");
        v21[8] = 0;
        int v22 = 3;
        v24[0] = 0LL;
        v24[1] = 0LL;
        uint64_t v23 = v24;
        CFTypeRef cf = 0LL;
        int v25 = 44739240;
        else {
          unsigned int v6 = sub_D67FC(a2, (void *)v4[2]);
        }
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v24[0]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }

      else
      {
        unsigned int v6 = sub_D756C(a2, v4[2], (os_unfair_lock_s ****)&v18);
      }

      v5 |= v6 != 0;
      uint64_t v4 = (uint64_t *)v4[1];
    }

    while (v4 != &v16);
  }

  sub_1BB88(&v16);
  if (v18.n128_u64[1] != v18.n128_u64[0])
  {
    uint64_t v11 = sub_5954C();
    int v12 = operator new(0x28uLL);
    __n128 v13 = sub_D7C48((uint64_t)v12, &v18);
    (*(void (**)(uint64_t, void *, __n128))(*(void *)v11 + 328LL))(v11, v12, v13);
  }

  if (v15) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  __p[0] = &v18;
  sub_D7DB0((void ***)__p);
  if ((v5 & 1) != 0)
  {
    sub_6DD4();
    if ((*(unsigned int (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828))
    {
      uint64_t v14 = operator new(0x10uLL);
      sub_6DD4();
      sub_B20B8(v14, (uint64_t)&qword_48F828);
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    strcpy((char *)__p, "strpbolg");
    BYTE1(__p[1]) = 0;
    WORD1(__p[1]) = 0;
    (*(void (**)(void, uint64_t, void **, uint64_t))(**(void **)(a2 + 32) + 72LL))( *(void *)(a2 + 32),  1LL,  __p,  1LL);
    if (v14)
    {
      if (v14[8]) {
        (*(void (**)(void))(**(void **)v14 + 16LL))(*(void *)v14);
      }
      operator delete(v14);
    }
  }

void sub_D6740( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

os_log_s *sub_D67FC(uint64_t a1, void *a2)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    char v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 262;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: routing mutex not held",  buf,  0x12u);
      }
    }
  }

  if (((*(uint64_t (**)(void *))(*a2 + 152LL))(a2) & 1) == 0)
  {
    unsigned int v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 264;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: specified port is not connected",  buf,  0x12u);
      }
    }
  }

  memset(buf, 0, sizeof(buf));
  strcpy(v81, "cwdv");
  v81[8] = 0;
  int v82 = 3;
  v84[0] = 0LL;
  v84[1] = 0LL;
  char v83 = v84;
  CFTypeRef cf = 0LL;
  int v85 = 44739240;
  if (sub_578E8(a1, (uint64_t)a2, (uint64_t)buf))
  {
    uint64_t v69 = (os_log_t *)sub_138E8(13);
    os_log_t v70 = *v69;
    if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v77 = 136315394;
      *(void *)&v77[4] = "VirtualAudio_PortManager.cpp";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 270;
      _os_log_impl(&dword_0, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v77, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!(*(unsigned int (**)(void *))(*a2 + 152LL))(a2))
  {
LABEL_15:
    uint64_t v9 = 0LL;
    goto LABEL_16;
  }

  unsigned int v76 = 0;
  if (AudioObjectCreate( *(void *)(a1 + 32) + 80LL,  *(unsigned int *)(*(void *)(a1 + 32) + 8LL),  1886549091LL,  &v76))
  {
    unint64_t v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (!*v8) {
      goto LABEL_16;
    }
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v77 = 136315394;
      *(void *)&v77[4] = "VirtualAudio_PortManager.cpp";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 284;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theResult): error creating virtual audio port object",  v77,  0x12u);
    }

    goto LABEL_15;
  }

  uint64_t v12 = a2[10];
  uint64_t v11 = (std::__shared_weak_count *)a2[11];
  uint64_t v74 = v12;
  unsigned __int8 v75 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }

  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = operator new(0x70uLL);
  sub_D5830((uint64_t)v16, v76, v15, &v74);
  unint64_t v17 = operator new(0x38uLL);
  __n128 v18 = (uint64_t **)(a1 + 48);
  *(void *)unint64_t v77 = v17;
  *(void *)&v77[8] = a1 + 48;
  v17[4] = 0LL;
  uint64_t v19 = v17 + 4;
  v17[5] = 0LL;
  if (v11)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v11);
    if (!v20)
    {
      uint64_t v21 = (std::__shared_weak_count *)v17[5];
      *uint64_t v19 = 0LL;
      v17[5] = 0LL;
      if (!v21) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }

    uint64_t v21 = v20;
    int v22 = (unint64_t *)&v20->__shared_weak_owners_;
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    char v24 = (std::__shared_weak_count *)v17[5];
    v17[4] = v12;
    v17[5] = v21;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
LABEL_35:
      std::__shared_weak_count::__release_weak(v21);
    }
  }

LABEL_36:
  __int16 v27 = (uint64_t **)(a1 + 40);
  v17[6] = v16;
  v77[16] = 1;
  char v28 = *v18;
  if (*v18)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v29 = (uint64_t **)v28;
        __int16 v30 = (unint64_t *)(v28 + 4);
        char v28 = *v29;
        __n128 v18 = v29;
        if (!*v29) {
          goto LABEL_44;
        }
      }

      if (!sub_D7370(v30, v19)) {
        break;
      }
      __n128 v18 = v29 + 1;
      char v28 = v29[1];
      if (!v28) {
        goto LABEL_44;
      }
    }

    if (*v18) {
      goto LABEL_47;
    }
  }

  else
  {
    uint64_t v29 = (uint64_t **)(a1 + 48);
  }

    if (!v21) {
      goto LABEL_40;
    }
    char v28 = (unint64_t *)&v21->__shared_owners_;
    do
      uint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (v29)
    {
LABEL_40:
      if (!v15) {
        goto LABEL_42;
      }
LABEL_41:
      std::__shared_weak_count::__release_weak(v15);
      goto LABEL_42;
    }

    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v15) {
      goto LABEL_41;
    }
LABEL_42:
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
    __int16 v30 = (uint64_t *)v2[1];
    if (!v25) {
      goto LABEL_108;
    }
    while (1)
    {
      if (v30 == a1)
      {
        uint64_t v56 = 1;
        __int16 v30 = a1;
        goto LABEL_97;
      }

      unsigned int v31 = (std::__shared_weak_count *)v30[3];
      if (v31)
      {
        char v32 = std::__shared_weak_count::lock(v31);
        uint64_t v33 = v32;
        if (v32)
        {
          uint64_t v34 = v30[2];
          __int16 v35 = (unint64_t *)&v32->__shared_weak_owners_;
          do
            int v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
          uint64_t v37 = (unint64_t *)&v32->__shared_owners_;
          do
            int v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v33);
          }
        }

        else
        {
          uint64_t v34 = 0LL;
        }
      }

      else
      {
        uint64_t v34 = 0LL;
        uint64_t v33 = 0LL;
      }

      __int16 v39 = (std::__shared_weak_count *)a2[1];
      if (!v39)
      {
        unint64_t v42 = 0LL;
        id v41 = 0LL;
LABEL_66:
        if (!v33) {
          goto LABEL_73;
        }
        goto LABEL_67;
      }

      uint64_t v40 = std::__shared_weak_count::lock(v39);
      id v41 = v40;
      if (v40)
      {
        unint64_t v42 = *a2;
        uint64_t v43 = (unint64_t *)&v40->__shared_weak_owners_;
        do
          BOOL v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        unint64_t v45 = (unint64_t *)&v40->__shared_owners_;
        do
          uint64_t v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v41);
          if (!v33) {
            goto LABEL_73;
          }
          goto LABEL_67;
        }

        goto LABEL_66;
      }

      unint64_t v42 = 0LL;
      if (!v33)
      {
LABEL_73:
        int v48 = 0LL;
        unint64_t v47 = 0LL;
        if (!v41) {
          goto LABEL_79;
        }
        goto LABEL_74;
      }

      if (v22)
      {
        uint64_t v29 = (unint64_t *)&v22->__shared_owners_;
        do
          __int16 v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          if (!v16) {
            goto LABEL_42;
          }
LABEL_41:
          std::__shared_weak_count::__release_weak(v16);
          goto LABEL_42;
        }
      }

      if (v16) {
        goto LABEL_41;
      }
LABEL_42:
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v26) {
        return v3;
      }
      int v3 = (void *)v3[1];
      if (v3 == a2) {
        return a2;
      }
    }

    unint64_t v17 = 0LL;
    uint64_t v16 = 0LL;
LABEL_22:
    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_23;
  }

  return v3;
}

    unint64_t v26 = std::__shared_weak_count::lock(v18);
    if (!v26) {
      goto LABEL_43;
    }
    __int16 v27 = v26;
    char v28 = v25 == v19;
    uint64_t v29 = (unint64_t *)&v26->__shared_owners_;
    do
      __int16 v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v27);
    }

    if (!v24)
    {
LABEL_47:
      if (v28) {
        goto LABEL_70;
      }
      goto LABEL_48;
    }

    uint64_t v12 = (os_log_t *)sub_138E8(13);
    __n128 v13 = *v12;
    if (*v12)
    {
      uint64_t v7 = 0LL;
      if (!os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_DWORD *)int v22 = 136315394;
      *(void *)&v22[4] = "RunTimeDefaults.cpp";
      unint64_t v23 = 1024;
      char v24 = 2213;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d va::SiriCarKitPreferredOutputRoute::A2DP", v22, 0x12u);
    }

    uint64_t v7 = 0LL;
LABEL_46:
    goto LABEL_48;
  }

  char v5 = (os_log_t *)sub_138E8(13);
  unsigned int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2197;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d  !hasValue va::SiriCarKitPreferredOutputRoute::HFP",  buf,  0x12u);
  }

  uint64_t v7 = 1LL;
LABEL_48:
  sub_19DFC((uint64_t)cf);
  return v7;
}

      *(void *)(a1 + 88) = v5 + 50000000;
    }
  }

  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    char v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }

  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    char v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }

  sub_13850((uint64_t)&v21);
  return v12;
}

  if (!v21)
  {
    if (v23) {
      goto LABEL_40;
    }
LABEL_10:
    unint64_t v10 = sub_138E8(13);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      uint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          std::string __p = *(void **)a2;
          __int16 v78 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&v111, (unsigned int *)&__p);
          uint64_t v12 = v111.__cv_.__opaque[15] >= 0 ? &v111 : (std::condition_variable *)v111.__cv_.__sig;
          buf.uint64_t mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v102 = 1024;
          uint64_t v103 = 199;
          __int16 v104 = 2080;
          *(void *)int v105 = v12;
          *(_WORD *)&v105[8] = 1024;
          *(_DWORD *)&v105[10] = a1;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v111.__cv_.__opaque[15] < 0) {
            operator delete((void *)v111.__cv_.__sig);
          }
        }
      }
    }

    AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
    __n128 v13 = sub_90738(a1, &buf, *(void **)a3, *(void *)(a3 + 8));
    if (!(_DWORD)v13)
    {
      LOBYTE(v16) = 1;
      goto LABEL_45;
    }

    unint64_t v14 = v13;
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (!*v15) {
      goto LABEL_45;
    }
    if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v111, v14);
      unint64_t v17 = v111.__cv_.__opaque[15];
      uint64_t sig = v111.__cv_.__sig;
      int v87 = *(void **)a2;
      LODWORD(v88) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v87);
      uint64_t v19 = &v111;
      if (v17 < 0) {
        uint64_t v19 = (std::condition_variable *)sig;
      }
      if (v79 >= 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = __p;
      }
      buf.uint64_t mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v102 = 1024;
      uint64_t v103 = 207;
      __int16 v104 = 1024;
      *(_DWORD *)int v105 = v14;
      *(_WORD *)&v105[4] = 2080;
      *(void *)&v105[6] = v19;
      *(_WORD *)&v105[14] = 2080;
      *(void *)&v105[16] = p_p;
      *(_WORD *)&v105[24] = 1024;
      *(_DWORD *)&v105[26] = a1;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (v79 < 0) {
        operator delete(__p);
      }
      if (v111.__cv_.__opaque[15] < 0) {
        operator delete((void *)v111.__cv_.__sig);
      }
    }

    goto LABEL_44;
  }

  uint64_t v94 = v21;
  operator delete(v21);
  if (!v23) {
    goto LABEL_10;
  }
LABEL_40:
  char v24 = sub_138E8(13);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
  {
    uint64_t v16 = *(os_log_s **)v24;
    if (!*(void *)v24) {
      goto LABEL_45;
    }
    if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
    {
      buf.uint64_t mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v102 = 1024;
      uint64_t v103 = 191;
      __int16 v104 = 1024;
      *(_DWORD *)int v105 = a1;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
    }
  }

  sub_7D084(a1, "pref:");
  sub_2CA1C(__p, *(unsigned int *)(a2 + 24));
  if ((v14 & 0x80u) == 0) {
    unsigned int v6 = __p;
  }
  else {
    unsigned int v6 = *(const std::string::value_type **)__p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v7 = v14;
  }
  else {
    uint64_t v7 = *(void *)&__p[8];
  }
  std::string::append(a1, v6, v7);
  std::string::append(a1, "; policy:", 9uLL);
  if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v8 = &v12;
  }
  else {
    unint64_t v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int size = v12.__r_.__value_.__s.__size_;
  }
  else {
    int size = v12.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, size);
}

  if (!v21)
  {
    if (v23) {
      goto LABEL_40;
    }
LABEL_10:
    unint64_t v10 = sub_138E8(13);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      uint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          std::string __p = *(void **)a2;
          unint64_t v81 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&v114, (unsigned int *)&__p);
          uint64_t v12 = v114.__cv_.__opaque[15] >= 0 ? &v114 : (std::condition_variable *)v114.__cv_.__sig;
          buf.uint64_t mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          int v105 = 1024;
          __int16 v106 = 199;
          char v107 = 2080;
          *(void *)uint64_t v108 = v12;
          *(_WORD *)&v108[8] = 1024;
          *(_DWORD *)&_BYTE v108[10] = a1;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v114.__cv_.__opaque[15] < 0) {
            operator delete((void *)v114.__cv_.__sig);
          }
        }
      }
    }

    AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
    __n128 v13 = sub_90738(a1, &buf, *(void **)a3, *(void *)(a3 + 8));
    if (!(_DWORD)v13)
    {
      LOBYTE(v15) = 1;
      goto LABEL_46;
    }

    unint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (!*v14) {
      goto LABEL_46;
    }
    if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = a1;
      sub_2CA1C(&v114, v13);
      unint64_t v17 = v114.__cv_.__opaque[15];
      uint64_t sig = v114.__cv_.__sig;
      uint64_t v90 = *(void **)a2;
      LODWORD(v91) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v90);
      uint64_t v19 = &v114;
      if (v17 < 0) {
        uint64_t v19 = (std::condition_variable *)sig;
      }
      if (v82 >= 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = __p;
      }
      buf.uint64_t mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      int v105 = 1024;
      __int16 v106 = 207;
      char v107 = 1024;
      *(_DWORD *)uint64_t v108 = v13;
      *(_WORD *)&v108[4] = 2080;
      *(void *)&v108[6] = v19;
      *(_WORD *)&v108[14] = 2080;
      *(void *)&v108[16] = p_p;
      *(_WORD *)&v108[24] = 1024;
      a1 = v16;
      *(_DWORD *)&v108[26] = v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (v82 < 0) {
        operator delete(__p);
      }
      if (v114.__cv_.__opaque[15] < 0) {
        operator delete((void *)v114.__cv_.__sig);
      }
    }

    goto LABEL_45;
  }

  char v97 = v21;
  operator delete(v21);
  if (!v23) {
    goto LABEL_10;
  }
LABEL_40:
  char v24 = sub_138E8(13);
  if ((*(_BYTE *)(v24 + 8) & 1) == 0)
  {
LABEL_44:
    LOBYTE(v15) = 0;
    __n128 v13 = 0LL;
    goto LABEL_46;
  }

  __n128 v13 = *(void *)v24;
  if (*(void *)v24)
  {
    if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
    {
      buf.uint64_t mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      int v105 = 1024;
      __int16 v106 = 191;
      char v107 = 1024;
      *(_DWORD *)uint64_t v108 = a1;
      _os_log_impl( &dword_0,  (os_log_t)v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
    }

    goto LABEL_44;
  }

  if (*(_DWORD *)(v84 + 8) != 1819304813)
  {
    BOOL v44 = 0;
    if (!v33) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }

  uint64_t v43 = *(void *)(a1 + 88);
  *(_OWORD *)&buf.mNumberBuffers = xmmword_403250;
  if (v43) {
    sub_75260(v43, &buf, (uint64_t)inInputData, v23, (uint64_t)*a7);
  }
  sub_4974(a1 + 144, *(unsigned int *)(v84 + 200), (uint64_t)inInputData, v23, (uint64_t)a7);
  BOOL v44 = 1;
  if (v33)
  {
LABEL_42:
    sub_3014C(*(OpaqueAudioConverter **)(v41 + 584), v23, inInputData, outOutputData);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 624LL))(a1))
    {
      unint64_t v45 = sub_231EDC(*(_BYTE **)(a1 + 640), *(_BYTE **)(a1 + 648), 0);
      buf.mNumberBuffers = 1;
      buf.mBuffers[0] = *(AudioBuffer *)(a4 + 16LL * v45 + 8);
      *(void *)&v91.mNumberBuffers = outOutputData;
      *(void *)&v91.mBuffers[0].mNumberChannels = &buf;
      (*(void (**)(uint64_t, double *, uint64_t, uint64_t, AudioBufferList *, uint64_t, AudioBufferList **))(*(void *)v41 + 144LL))( v41,  a7,  v23,  2LL,  &v91,  1LL,  &v89);
    }

    else
    {
      (*(void (**)(uint64_t, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))(*(void *)v41 + 144LL))( v41,  a7,  v23,  1LL,  &outOutputData,  1LL,  &v89);
      (*(void (**)(uint64_t, double *))(*(void *)v41 + 152LL))(v41, a7);
      sub_197EA0(*(void *)(v41 + 376), (uint64_t)a7);
    }

    buf.mNumberBuffers = 1;
    buf.mBuffers[0] = *(AudioBuffer *)(a6 + 2);
    sub_3014C(*(OpaqueAudioConverter **)(v41 + 672), v23, v89, &buf);
    sub_4974(a1 + 144, *(unsigned int *)(v84 + 204), (uint64_t)&buf, v23, (uint64_t)a7);
  }

void sub_D70C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  sub_A0DB0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_D7220(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *sub_D744C(a1, &v4, a2);
  if (!v2) {
    sub_8F9A4("map::at:  key not found");
  }
  return v2 + 48;
}

void sub_D725C(uint64_t **a1, unint64_t *a2)
{
  int v3 = sub_D72F8((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    uint64_t v4 = v3;
    char v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        unsigned int v6 = v5;
        char v5 = (uint64_t *)*v5;
      }

      while (v5);
    }

    else
    {
      uint64_t v7 = v3;
      do
      {
        unsigned int v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        uint64_t v7 = v6;
      }

      while (!v8);
    }

    if (*a1 == v3) {
      *a1 = v6;
    }
    uint64_t v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    sub_911E8(v9, v4);
    sub_D635C((uint64_t)(v4 + 4));
    operator delete(v4);
  }

void *sub_D72F8(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  char v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_D7370(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      char v5 = v3;
    }

    int v3 = (void *)*v7;
  }

  while (*v7);
  if (v5 == v2 || sub_D7370(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

BOOL sub_D7370(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    char v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      unint64_t v6 = *a1;
    }
    else {
      unint64_t v6 = 0LL;
    }
  }

  else
  {
    unint64_t v6 = 0LL;
    char v5 = 0LL;
  }

  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7 && (BOOL v8 = std::__shared_weak_count::lock(v7)) != 0LL)
  {
    uint64_t v9 = v8;
    unint64_t v10 = *a2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    unint64_t v10 = 0LL;
  }

  if (v5)
  {
    __n128 v13 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v6 < v10;
}

void *sub_D744C(uint64_t a1, void *a2, unint64_t *a3)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        BOOL v8 = v4 + 4;
        if (!sub_D7370(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        char v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (!sub_D7370(v8, a3)) {
        break;
      }
      char v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

void sub_D74DC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_D635C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

void *sub_D7528()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46EF68;
  return result;
}

void sub_D754C(uint64_t a1, void *a2)
{
  *a2 = &off_46EF68;
}

uint64_t sub_D7564()
{
  return 1LL;
}

os_log_s *sub_D756C(uint64_t a1, uint64_t a2, os_unfair_lock_s ****a3)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        __int16 v60 = 1024;
        int v61 = 336;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: routing mutex not held",  buf,  0x12u);
      }
    }
  }

  sub_D8280(&v57, (uint64_t *)(a2 + 80));
  BOOL v8 = sub_D72F8(a1 + 40, &v57);
  if ((void *)(a1 + 48) == v8)
  {
    unint64_t v12 = (os_log_t *)sub_138E8(3);
    __n128 v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        __int16 v60 = 1024;
        int v61 = 345;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d could not find virtual audio port for specified port",  buf,  0x12u);
      }

      __n128 v13 = 0LL;
    }
  }

  else
  {
    uint64_t v9 = (os_unfair_lock_s **)v8[6];
    v8[6] = 0LL;
    unsigned int v56 = *((_DWORD *)v9 + 2);
    sub_D725C((uint64_t **)(a1 + 40), &v57);
    if (sub_1CCD00())
    {
      unint64_t v10 = (uint64_t *)(a1 + 8);
      uint64_t v11 = *(uint64_t **)(a1 + 16);
      if (v11 != (uint64_t *)(a1 + 8))
      {
        while (*(_DWORD *)(v11[2] + 8) != v56)
        {
          uint64_t v11 = (uint64_t *)v11[1];
          if (v11 == v10) {
            goto LABEL_19;
          }
        }

        if (v11 != v10)
        {
          uint64_t v14 = *v11;
          *(void *)(v14 + 8) = v11[1];
          *(void *)v11[1] = v14;
          --*(void *)(a1 + 24);
          uint64_t v15 = v11[2];
          void v11[2] = 0LL;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
          }
          operator delete(v11);
        }
      }
    }

void sub_D7B80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, std::__shared_weak_count *a23, uint64_t a24, char a25)
{
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_D7C48(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = off_46EF38;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + sub_7A768(v2 - 32) = 0LL;
  __n128 result = *a2;
  *(__n128 *)(a1 + 16) = *a2;
  *(void *)(a1 + sub_7A768(v2 - 32) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  a2[1].n128_u64[0] = 0LL;
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16))
  {
    int v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v7 = "VirtualAudio_PortManager.cpp";
        __int16 v8 = 1024;
        int v9 = 48;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return result;
}

void sub_D7D80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  a11 = a10;
  sub_D7DB0(&a11);
  _Unwind_Resume(a1);
}

void sub_D7DB0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0LL;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
        }
      }

      while (v4 != v2);
      char v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_D7E2C(uint64_t a1)
{
  int v3 = (void **)(a1 + 16);
  sub_D7DB0(&v3);
  return a1;
}

void sub_D7E64(void **a1)
{
  uint64_t v2 = a1 + 2;
  sub_D7DB0(&v2);
  operator delete(a1);
}

void sub_D7E9C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
  {
    int v3 = operator new(0x10uLL);
    sub_6DD4();
    sub_B20B8(v3, (uint64_t)&qword_48F828);
  }

  else
  {
    int v3 = 0LL;
  }

  uint64_t v4 = *(uint64_t **)(a1 + 16);
  for (uint64_t i = *(uint64_t **)(a1 + 24); v4 != i; ++v4)
  {
    uint64_t v6 = sub_138E8(3);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      uint64_t v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = *v4;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v11 = "VirtualAudio_PortManager.cpp";
          __int16 v12 = 1024;
          int v13 = 59;
          __int16 v14 = 2048;
          uint64_t v15 = v8;
          _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destroying HP object at address %p.", buf, 0x1Cu);
        }
      }
    }

    sub_92EF8();
    sub_28AF60(v4);
  }

  sub_72210(a2, 1920099684LL);
  if (v3)
  {
    if (v3[8]) {
      (*(void (**)(void))(**(void **)v3 + 16LL))(*(void *)v3);
    }
    operator delete(v3);
  }

void sub_D8040(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8080(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != *(void *)(a1 + 24))
  {
    (*(void (**)(std::string *__return_ptr))(**(void **)v2 + 96LL))(&v10);
    int v3 = std::string::insert(&v10, 0LL, "'", 1uLL);
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__l.__cap_ = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    char v5 = std::string::append(&v11, "'", 1uLL);
    __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t cap = v5->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v6;
    v5->__r_.__value_.__l.__size_ = 0LL;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    v5->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v8 = HIBYTE(cap);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(&v9, (const std::string::value_type *)v7, v8);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    v2 += 8LL;
    if (v2 == *(void *)(a1 + 24)) {
      break;
    }
    std::string::append(&v9, ", ", 2uLL);
  }

  std::string::append(&v9, " }", 2uLL);
  std::operator+<char>("Destroying PlugIn objects: ", &v9);
}

void sub_D8210( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8280(void *a1, uint64_t *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  int v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    char v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      __int128 v6 = v5;
      uint64_t v7 = *a2;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *a1 = v7;
      a1[1] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    else
    {
      *a1 = 0LL;
      a1[1] = 0LL;
    }
  }

uint64_t sub_D831C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v5 = v4;
  __int128 v6 = *(void **)(a1 + 40);
  uint64_t v7 = (void *)(a1 + 48);
  if (v6 == (void *)(a1 + 48))
  {
    uint64_t v8 = 0LL;
    if (!v4) {
      return v8;
    }
LABEL_21:
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    return v8;
  }

  LODWORD(v8) = 0;
  do
  {
    sub_B8F68(&v20, v6 + 4, "", 195);
    uint64_t v9 = v20;
    sub_737E8((uint64_t)__p, a2);
    int v10 = sub_54ADC(v9, (uint64_t)__p);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C((void *)__p[7]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    unint64_t v11 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    __int16 v14 = (void *)v6[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        __int16 v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      do
      {
        uint64_t v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        __int128 v6 = v15;
      }

      while (!v16);
    }

    uint64_t v8 = (v8 + v10);
    __int128 v6 = v15;
  }

  while (v15 != v7);
  if (v5) {
    goto LABEL_21;
  }
  return v8;
}

void sub_D8498( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, CFTypeRef cf, uint64_t a21, std::__shared_weak_count *a22)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(a17);
  if (__p) {
    operator delete(__p);
  }
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }

  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v22 + 24LL))(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D852C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  if (*(void *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 16LL);
    if (v3)
    {
      uint64_t v4 = *(unsigned int *)(v3 + 8);
      if (!v2) {
        return v4;
      }
      goto LABEL_6;
    }
  }

  uint64_t v4 = 0LL;
  if (v2) {
LABEL_6:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  return v4;
}

double sub_D85A4(double a1, double a2)
{
  double v2 = 44100.0;
  if (a1 > 44100.0 || a2 < 44100.0)
  {
    double v2 = 48000.0;
    if (a1 > 48000.0 || a2 < 48000.0)
    {
      double v2 = 96000.0;
      if (a1 > 96000.0 || a2 < 96000.0)
      {
        double v2 = 88200.0;
        if (a1 > 88200.0 || a2 < 88200.0)
        {
          double v2 = 64000.0;
          if (a1 > 64000.0 || a2 < 64000.0)
          {
            double v2 = 32000.0;
            if (a1 > 32000.0 || a2 < 32000.0)
            {
              double v2 = 24000.0;
              if (a1 > 24000.0 || a2 < 24000.0)
              {
                double v2 = 22050.0;
                if (a1 > 22050.0 || a2 < 22050.0)
                {
                  double v2 = 16000.0;
                  if (a1 > 16000.0 || a2 < 16000.0)
                  {
                    double v2 = 12000.0;
                    if (a1 > 12000.0 || a2 < 12000.0)
                    {
                      double v2 = 11025.0;
                      if (a1 > 11025.0 || a2 < 11025.0)
                      {
                        double v2 = 8000.0;
                        if (a2 < 8000.0 || a1 > 8000.0) {
                          return a2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return v2;
}

uint64_t sub_D86F4(void *a1)
{
  *a1 = off_46EFB0;
  uint64_t v2 = a1[62];
  a1[62] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_36F1E0((uint64_t)a1);
}

void sub_D8738(void *a1)
{
  *a1 = off_46EFB0;
  uint64_t v2 = a1[62];
  a1[62] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)sub_36F1E0((uint64_t)a1);
  operator delete(v3);
}

BOOL sub_D8780(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1668049764) {
    return 1LL;
  }
  sub_1BB60((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

BOOL sub_D87D4(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1668049764 && sub_36854C(a1, a2);
}

uint64_t sub_D87F4(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      unint64_t v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v22 = "Device_DigitalMic_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 115;
      __int16 v25 = 2080;
      unint64_t v26 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    unint64_t v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      uint64_t v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v22 = "Device_DigitalMic_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 116;
      __int16 v25 = 2080;
      unint64_t v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      __int16 v30 = a4;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    BOOL v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v16 = &off_4865A0;
    v16[2] = 561211770;
  }

  if (a2->mSelector == 1668049764) {
    return 4LL;
  }
  else {
    return sub_21524(a1, a2, a3, a4);
  }
}

void sub_D8ACC( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v12 = (os_log_t *)sub_138E8(13);
    unint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v24);
      __int16 v14 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v29 = "Device_DigitalMic_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 137;
      __int16 v32 = 2080;
      uint64_t v33 = (const char *)v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    BOOL v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v24);
      __n128 v18 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v29 = "Device_DigitalMic_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 138;
      __int16 v32 = 2080;
      uint64_t v33 = (const char *)v18;
      __int16 v34 = 1024;
      LODWORD(v35[0]) = a3;
      WORD2(v35[0]) = 2048;
      *(void *)((char *)v35 + 6) = a4;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_4865A0;
    v19[2] = 561211770;
  }

  if (!a6)
  {
    char v20 = (os_log_t *)sub_138E8(13);
    char v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v24);
      uint64_t v22 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v29 = "Device_DigitalMic_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 139;
      __int16 v32 = 2080;
      uint64_t v33 = "outData";
      __int16 v34 = 2080;
      v35[0] = v22;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v23 = &off_4865A0;
    void v23[2] = 561211770;
  }

  if (a2->mSelector == 1668049764) {
    sub_372174(a1, a5, a6);
  }
  else {
    sub_232A4(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sub_D8ECC(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(17);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_DigitalMic_Aspen.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = 159;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d initializing Device_HAL_Common", buf, 0x12u);
  }

  sub_36A36C((os_unfair_lock_s *)a1);
  uint64_t v4 = (os_log_t *)sub_138E8(17);
  int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_DigitalMic_Aspen.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = 163;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 1;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d initialized Device_HAL_Common: %u", buf, 0x18u);
  }

  __int128 v6 = (os_log_t *)sub_138E8(17);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_DigitalMic_Aspen.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = 167;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating controls and ports", buf, 0x12u);
  }

  uint64_t v8 = operator new(0x128uLL);
  sub_236254((uint64_t)v8, a1, 1768845428LL, 0, 0, 59);
  sub_1D5AE0((void *)a1, (uint64_t)v8);
  uint64_t v9 = operator new(0x50uLL);
  sub_EC558((uint64_t)v9);
  sub_1D5AE0((void *)a1, (uint64_t)v9);
  sub_1D580C(a1, 0, 1886216809LL, (uint64_t)v8);
  sub_1D55D4((uint64_t *)a1, 0, 1886216809LL, (uint64_t)v9);
  int v10 = (os_log_t *)sub_138E8(17);
  unint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_DigitalMic_Aspen.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = 176;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating an internal microphone port", buf, 0x12u);
  }

  CFMutableStringRef v34 = 0LL;
  char v35 = 1;
  sub_D9948((uint64_t)&theString, (uint64_t)@"device-name-localized");
  if (v33 && theString)
  {
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateMutableCopy(0LL, 0LL, theString);
    buf[8] = 1;
    sub_D9A0C((uint64_t)&v34, (uint64_t)buf);
    sub_D9A64((uint64_t)buf);
    if (v34) {
      CFStringAppend(v34, @" ");
    }
  }

  else
  {
    __int16 v12 = (os_log_t *)sub_138E8(17);
    unint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_DigitalMic_Aspen.cpp";
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = 186;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not retrieve localized device name", buf, 0x12u);
    }

    *(void *)AudioObjectPropertyAddress buf = CFStringCreateMutableCopy(0LL, 0LL, &stru_486F70);
    buf[8] = 1;
    sub_D9A0C((uint64_t)&v34, (uint64_t)buf);
    sub_D9A64((uint64_t)buf);
  }

  sub_1F0A70((uint64_t)buf, 1886216809LL);
  if (v34) {
    CFStringAppend(v34, *(CFStringRef *)buf);
  }
  sub_19DFC((uint64_t)buf);
  uint64_t v14 = sub_138E8(17);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
  {
    uint64_t v15 = *(os_log_s **)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        sub_48E98(&__p, v34);
        BOOL v16 = v31 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_DigitalMic_Aspen.cpp";
        __int16 v39 = 1024;
        *(_DWORD *)uint64_t v40 = 190;
        *(_WORD *)&v40[4] = 2080;
        *(void *)&v40[6] = v16;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Localized microphone name: '%s'", buf, 0x1Cu);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p);
        }
      }
    }
  }

  uint64_t v17 = (void *)CFRetain(v34);
  std::string __p = v17;
  LOBYTE(v30) = 1;
  *(void *)AudioObjectPropertyAddress buf = v17;
  buf[8] = 1;
  if (v17) {
    CFRetain(v17);
  }
  *(void *)&void v40[2] = 0LL;
  v40[10] = 1;
  uint64_t v41 = 0LL;
  char v42 = 1;
  sub_19DFC((uint64_t)&__p);
  std::string __p = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v18 = *(void *)(a1 + 504);
  uint64_t v19 = operator new(0x260uLL);
  v19[1] = 0LL;
  v19[2] = 0LL;
  *uint64_t v19 = off_4753F8;
  CFStringRef v36 = CFStringCreateWithCString(0LL, "Built-In Microphone", 0x600u);
  char v37 = 1;
  sub_38ECC0((uint64_t)(v19 + 3), a1, (uint64_t)&__p, (uint64_t)buf, (uint64_t)&v36, v18);
  sub_19DFC((uint64_t)&v36);
  *(void *)&__int128 v27 = v19 + 3;
  *((void *)&v27 + 1) = v19;
  sub_AFDAC((uint64_t)&v27, v19 + 13, (uint64_t)(v19 + 3));
  __int128 v28 = v27;
  __int128 v27 = 0uLL;
  sub_3711D4(a1, (void ***)&v28);
  char v20 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1))
  {
    char v21 = (unint64_t *)(*((void *)&v28 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  __int16 v23 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    uint64_t v24 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  if (__p) {
    operator delete(__p);
  }
  sub_373CEC((uint64_t *)a1, &qword_48D4F0, 0);
  sub_19DFC((uint64_t)&v41);
  sub_19DFC((uint64_t)&v40[2]);
  sub_19DFC((uint64_t)buf);
  sub_D9A9C((uint64_t)&theString);
  sub_D9A64((uint64_t)&v34);
  return 1LL;
}

void sub_D94EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_D9A9C((uint64_t)va);
  sub_D9A64((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_D95C8(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886216809)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      int v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v13 = "Device_DigitalMic_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 214;
      __int16 v16 = 2080;
      uint64_t v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v13 = "Device_DigitalMic_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 215;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_D9774(_Unwind_Exception *a1)
{
}

void *sub_D9790@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 != 1886216809) {
    return sub_2E22D0(a3, *(void *)(a1 + 496), a2);
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 504) + 24LL);
  if (!v3)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      __int32 v12 = 136315394;
      unint64_t v13 = "Device_DigitalMic_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 231;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: No default s ub-port specified for built-in mic.",  (uint8_t *)&v12,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
  }

  uint64_t v4 = *(__int32 **)(v3 + 32);
  int v5 = *(__int32 **)(v3 + 40);
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x41 && v4 != v5)
  {
    uint64_t v7 = v4;
    while (v7[8] != 1869442665)
    {
      v7 += 16;
      if (v7 == v5) {
        goto LABEL_13;
      }
    }

    uint64_t v4 = v7;
  }

void sub_D9924(_Unwind_Exception *a1)
{
}

void sub_D9940(uint64_t a1, unsigned int **a2, int a3)
{
}

void sub_D9948(uint64_t a1, uint64_t a2)
{
  int v9 = 0;
  uint64_t v3 = (const void *)MGCopyAnswerWithError(a2, 0LL, &v9);
  uint64_t v4 = v3;
  CFTypeRef v8 = v3;
  if (v9) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0LL;
  }
  if (!v5)
  {
    CFTypeID v6 = CFGetTypeID(v3);
    if (v6 == CFStringGetTypeID())
    {
      sub_D9B14(&v7, &v8);
      *(void *)a1 = v7;
      *(_BYTE *)(a1 + 8) = 1;
    }

    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }

    goto LABEL_11;
  }

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (v3) {
LABEL_11:
  }
    CFRelease(v4);
}

uint64_t sub_D9A0C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
  }

  BOOL v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  if (v6) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v5);
  }
  return a1;
}

uint64_t sub_D9A64(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

uint64_t sub_D9A9C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

void sub_D9AD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4753F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_D9AE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4753F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_D9B04(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_D9B14(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_7E414(exception);
    }

    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }

  else
  {
    CFTypeRef v5 = 0LL;
  }

  return sub_7F234(a1, v5);
}

void sub_D9BA0(_Unwind_Exception *a1)
{
}

uint64_t sub_D9BBC(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_36E3FC(a1, a2, a3, a3, 0LL) = off_46EFB0;
  *(void *)int v9 = &v9[8];
  *(void *)&v9[8] = 0LL;
  v11[0] = 0LL;
  v11[1] = 0LL;
  *(void *)&v9[16] = 0LL;
  uint64_t v10 = v11;
  sub_2DE180((uint64_t *)v9, 0x706D6269u, 1768778083);
  sub_2DE180((uint64_t *)v9, 0x706D6269u, 1768778033);
  sub_2DE334((uint64_t)v9, 0x696D6963u, 1886216809);
  sub_2DE334((uint64_t)v9, 0x696D6931u, 1886216809);
  sub_2DE334((uint64_t)v9, 0x736D6963u, 1886216809);
  sub_2DE334((uint64_t)v9, 0x696D6932u, 1886216809);
  sub_2DE334((uint64_t)v9, 0x6C6D6963u, 1886216809);
  sub_2DE334((uint64_t)v9, 0x666D6963u, 1886216809);
  sub_2DE334((uint64_t)v9, 0x6265616Du, 1886216809);
  CFTypeRef v5 = operator new(0x78uLL);
  sub_2DFDA8((uint64_t)v5, a2, v9);
  *(void *)(a1 + 4sub_19DFC(v32 - 96) = v5;
  sub_8DF20(v11[0]);
  sub_8DF20(*(void **)&v9[8]);
  *(void *)(a1 + 504) = sub_33341C();
  int v6 = (os_log_t *)sub_138E8(17);
  BOOL v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int v9 = 136315394;
    *(void *)&v9[4] = "Device_DigitalMic_Aspen.cpp";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 66;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d created Device_DigitalMic_Aspen", v9, 0x12u);
  }

  return a1;
}

void sub_D9DC4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 496);
  *(void *)(v1 + 4sub_19DFC(v32 - 96) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_36F1E0(v1);
  _Unwind_Resume(a1);
}

std::string *sub_D9E20(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Volume Properties: ", 0x13uLL);
  sub_D9F00(&__p, a2 + 8);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  return std::string::append(a1, " ]", 2uLL);
}

void sub_D9EC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_D9F00(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  if (*(_BYTE *)(a2 + 4))
  {
    std::string::append(a1, "Min: ", 5uLL);
    if (!*(_BYTE *)(a2 + 4)) {
      sub_8DEEC();
    }
    std::to_string(&v15, *(float *)a2);
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFTypeID v4 = &v15;
    }
    else {
      CFTypeID v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v15.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v4, size);
  }

  if (*(_BYTE *)(a2 + 12))
  {
    std::string::append(a1, "; Max: ", 7uLL);
    if (!*(_BYTE *)(a2 + 12)) {
      sub_8DEEC();
    }
    std::to_string(&v15, *(float *)(a2 + 8));
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v6 = &v15;
    }
    else {
      int v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v7 = v15.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v7 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v6, v7);
  }

  if (*(_BYTE *)(a2 + 20))
  {
    std::string::append(a1, "; Default: ", 0xBuLL);
    if (!*(_BYTE *)(a2 + 20)) {
      sub_8DEEC();
    }
    std::to_string(&v15, *(float *)(a2 + 16));
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFTypeRef v8 = &v15;
    }
    else {
      CFTypeRef v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = v15.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v9 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v8, v9);
  }

  if (*(_BYTE *)(a2 + 32))
  {
    std::string::append(a1, "; Ext: ", 7uLL);
    if (!*(_BYTE *)(a2 + 32)) {
      sub_8DEEC();
    }
    sub_2CEE1C(&v15, *(unsigned int **)(a2 + 24));
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v11 = v15.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v11 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v10, v11);
  }

  if (*(_BYTE *)(a2 + 44))
  {
    std::string::append(a1, "Curve: ", 7uLL);
    if (*(_BYTE *)(a2 + 44)) {
      std::to_string(&v15, *(_DWORD *)(a2 + 40));
    }
    else {
      sub_7D084(&v15, "no value assigned");
    }
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int32 v12 = &v15;
    }
    else {
      __int32 v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v13 = v15.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v13 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v12, v13);
  }

  return std::string::append(a1, " ]", 2uLL);
}

void sub_DA184( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DA1DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = v2;
      operator delete(v2);
    }
  }

  return a1;
}

void sub_DA214(void *__p)
{
  if (*((_BYTE *)__p + 96))
  {
    uint64_t v2 = (void *)__p[9];
    if (v2)
    {
      __p[10] = v2;
      operator delete(v2);
    }
  }

  operator delete(__p);
}

std::string *sub_DA24C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  sub_D9E20(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  std::string::append(a2, "; DSP ChainConfig: ", 0x13uLL);
  if (*(_BYTE *)(a1 + 96)) {
    sub_2D1DAC(&__p, (uint64_t **)(a1 + 72));
  }
  else {
    sub_7D084(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v6 = &__p;
  }
  else {
    int v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  return std::string::append(a2, " ]", 2uLL);
}

void sub_DA35C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_DA39C(uint64_t a1, uint64_t a2)
{
  return sub_DA3A8(a1 + 72, a2 + 72);
}

BOOL sub_DA3A8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24)) {
    BOOL v2 = *(_BYTE *)(a2 + 24) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(_BYTE *)(a1 + 24) != 0) == (*(_BYTE *)(a2 + 24) != 0);
  }
  CFTypeID v4 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8) - (void)v4;
  std::string::size_type v7 = *(const void **)a2;
  return v6 == *(void *)(a2 + 8) - (void)v7 && memcmp(v4, v7, v6) == 0;
}

void sub_DA418(uint64_t a1)
{
  uint64_t v1 = (void *)sub_DA680(a1);
  operator delete(v1);
}

std::string *sub_DA42C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  sub_D9E20(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  std::string::append(a2, "; ", 2uLL);
  if (*(_BYTE *)(a1 + 96)) {
    sub_2D1DAC(&__p, (uint64_t **)(a1 + 72));
  }
  else {
    sub_7D084(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v6 = &__p;
  }
  else {
    size_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  std::string::append(a2, "; ", 2uLL);
  return std::string::append(a2, " ]", 2uLL);
}

void sub_DA550( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DA590(uint64_t a1, uint64_t a2)
{
  __n128 result = (uint64_t *)sub_DA3A8(a1 + 72, a2 + 72);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 144)) {
      BOOL v5 = *(_BYTE *)(a2 + 144) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      return (uint64_t *)((*(_BYTE *)(a1 + 144) != 0) == (*(_BYTE *)(a2 + 144) != 0));
    }
    else {
      return sub_DA600(a1 + 104, (void *)(a2 + 104));
    }
  }

  return result;
}

uint64_t *sub_DA600(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0LL;
  }
  uint64_t v3 = (uint64_t *)(a1 + 16);
  while (1)
  {
    uint64_t v3 = (uint64_t *)*v3;
    __n128 result = (uint64_t *)(v3 == 0LL);
    if (!v3) {
      break;
    }
    int v5 = *((_DWORD *)v3 + 4);
    __n128 result = sub_D01B4(a2, v5);
    if (!result) {
      break;
    }
  }

  return result;
}

uint64_t sub_DA680(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144)) {
    sub_D0C14(a1 + 104);
  }
  if (*(_BYTE *)(a1 + 96))
  {
    BOOL v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = v2;
      operator delete(v2);
    }
  }

  return a1;
}

uint64_t sub_DA6C8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    sub_DA744( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

void sub_DA720(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }

  _Unwind_Resume(exception_object);
}

void *sub_DA744(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    __n128 result = sub_7E420(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_DA7A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

_BYTE *sub_DA7BC(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    sub_D1274((uint64_t)a1, a2);
    a1[40] = 1;
  }

  return a1;
}

void sub_DA7FC(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 40)) {
    sub_D0C14(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DA818(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int a7, char a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (a3)
  {
    __int16 v14 = (unint64_t *)(a3 + 16);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  sub_B8F68(&v22, (uint64_t *)a1, "", 295);
  __int16 v16 = v23;
  int v17 = *(_DWORD *)(v22 + 264);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 16) = v17;
  *(_DWORD *)(a1 + 20) = a4;
  *(void *)(a1 + sub_7A768(v2 - 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_7A5B8( (void *)(a1 + 24),  *(const void **)a5,  *(void *)(a5 + 8),  (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  uint64_t v20 = *a6;
  *a6 = 0LL;
  *(void *)(a1 + 48) = v20;
  *(_DWORD *)(a1 + 56) = a7;
  *(_BYTE *)(a1 + 60) = a8;
  return a1;
}

void sub_DA910(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_DA92C(void *__s2, uint64_t a2, void *__s1, uint64_t a4)
{
  return a4 - (void)__s1 == a2 - (void)__s2 && memcmp(__s1, __s2, a4 - (void)__s1) == 0;
}

void sub_DA970(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a3 + 56))
  {
    unint64_t v52 = (os_log_t *)sub_138E8(13);
    char v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int8 v75 = 136315394;
      *(void *)&v75[4] = "RouteCache.cpp";
      *(_WORD *)&v75[12] = 1024;
      *(_DWORD *)&v75[14] = 57;
      _os_log_impl(&dword_0, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v75, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_B8CBC(&v69, a2, "", 59);
  sub_B8CBC(&v67, (uint64_t *)(a3 + 16), "", 60);
  uint64_t v8 = *(void *)(v69 + 192);
  uint64_t v9 = *(void *)(a3 + 56);
  int v10 = *(_DWORD *)(a4 + 12);
  v65[0] = 0LL;
  v65[1] = 0LL;
  uint64_t v66 = 0LL;
  if (v8)
  {
    sub_B8CBC((uint64_t *)__p, a2, "", 36);
    std::string::size_type v11 = (void *)sub_EAD14();
    *(void *)unsigned __int8 v75 = CFStringCreateWithCString(0LL, "Codec", 0x600u);
    v75[8] = 1;
    uint64_t v12 = sub_EAE28(v11, (CFStringRef *)v75);
    sub_19DFC((uint64_t)v75);
    if (v12 == v8 || *((_DWORD *)__p[0] + 36) == 1885433443)
    {
      sub_1B5F60(v75, (uint64_t)__p[0], a4, v9, v10, 1);
      if (*(void *)v75 == *(void *)&v75[8])
      {
        std::string::size_type v13 = (os_log_t *)sub_138E8(20);
        __int16 v14 = *v13;
        if (*v13)
        {
          if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1002;
            _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unable to locate a set of sub-ports.",  buf,  0x12u);
          }
        }
      }
    }

    else
    {
      sub_1B6AD4((uint64_t)v75, v8, (uint64_t)__p[0], a4, v9, v10);
    }

    *(_OWORD *)uint64_t v65 = *(_OWORD *)v75;
    uint64_t v66 = *(void *)&v75[16];
    unint64_t v15 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      __int16 v16 = (unint64_t *)((char *)__p[1] + 8);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    int v18 = sub_1D72C0((_DWORD *)(a4 + 120));
    sub_1B3C0C( (unint64_t *)buf,  v18,  v69,  *(unsigned int *)(v67 + 144),  (uint64_t)v65,  v9,  *(unsigned int *)(a4 + 12),  *(void *)(a4 + 104));
  }

  else
  {
    __int128 v81 = 0u;
    memset(buf, 0, sizeof(buf));
  }

  if (*(_DWORD *)(v67 + 144) != 1885892706)
  {
    int v20 = 0;
    goto LABEL_27;
  }

  int v19 = sub_1BAB2C(v10);
  if (*(_BYTE *)(a4 + 164)) {
    int v20 = *(_DWORD *)(a4 + 160);
  }
  else {
    int v20 = v19;
  }
  if (v20 <= 1919708274)
  {
    if (v20 != 1919115628 && v20 != 1919183219) {
      goto LABEL_87;
    }
  }

  else if (v20 != 1919708275 && v20 != 1920364387)
  {
    if (v20 == 1936090482)
    {
      int v20 = 1919115628;
      goto LABEL_27;
    }

LABEL_54:
  sub_CAE54(v57, &v73, 1LL);
  sub_1FEAFC(v58, v10, (_OWORD *)(a4 + 24), v9, v57[1], v57[2], (uint64_t)v65);
  uint64_t v41 = (char *)operator new(0x68uLL);
  uint64_t v42 = (uint64_t)v41;
  LOBYTE(__p[0]) = 0;
  char v72 = 0;
  int v43 = v60;
  if (v60)
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v58;
    __p[2] = v59;
    v58[1] = 0LL;
    uint64_t v59 = 0LL;
    v58[0] = 0LL;
    char v72 = 1;
  }

  __int128 v44 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v41 + 8) = *(_OWORD *)buf;
  *(_OWORD *)(v41 + 24) = v44;
  *(_OWORD *)(v41 + 40) = v81;
  *((void *)v41 + 7) = v29;
  *((void *)v41 + 8) = v31;
  *(void *)uint64_t v41 = &off_46F198;
  sub_DA6C8((uint64_t)(v41 + 72), (uint64_t)__p);
  if (v43 && __p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v61 = v42;
  sub_DA818(a1, v56, (uint64_t)v24, 0, (uint64_t)&v62, &v61, v20, v55);
  uint64_t v45 = v61;
  uint64_t v61 = 0LL;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
  }
  if (v43 && v58[0]) {
    operator delete(v58[0]);
  }
  sub_85B80(v57);
  if (v74) {
    std::__shared_weak_count::__release_weak(v74);
  }
  if (v77) {
    operator delete(v77);
  }
  if (v62)
  {
    unint64_t v63 = v62;
    operator delete(v62);
  }

  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v65[0]) {
    operator delete(v65[0]);
  }
  uint64_t v46 = v68;
  if (v68)
  {
    unint64_t v47 = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

  uint64_t v49 = v70;
  if (v70)
  {
    uint64_t v50 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }

    if (sub_203D48(v23))
    {
      LODWORD(v43) = 1;
      goto LABEL_56;
    }

    if (v27 == 1885433888) {
      ++v21;
    }
    v20 |= v27 == 1885433888;
LABEL_57:
    int v19 = (void *)v19[1];
  }

  while (v19 != (void *)v4);
  if (((v20 & v42 | v45 & HIDWORD(v45)) & HIDWORD(v42) & 1) != 0)
  {
LABEL_94:
    int v18 = 1LL;
    goto LABEL_66;
  }

  uint64_t v35 = a2[3];
  int v18 = 1LL;
  if (v35 > 1987077986)
  {
    if (v35 != 1987077987 && v35 != 1987081833)
    {
      CFStringRef v36 = 1987081839;
      goto LABEL_91;
    }

    goto LABEL_66;
  }

  if (v35 != 1768057203)
  {
    CFStringRef v36 = 1919776355;
LABEL_91:
    if (v35 != v36)
    {
LABEL_93:
      if ((HIDWORD(v43) & v41 & 1) != 0 && ((HIDWORD(v45) | v20) & 1) != 0) {
        goto LABEL_94;
      }
      LODWORD(v18) = v43;
      if ((v43 & HIDWORD(v44) & v20 & 1) != 0)
      {
        __int16 v39 = a2[3];
        int v18 = 1LL;
        if (v39 <= 1987077986)
        {
          if (v39 == 1768057203) {
            goto LABEL_66;
          }
          unint64_t v40 = 1919776355;
        }

        else
        {
          if (v39 == 1987077987 || v39 == 1987081833) {
            goto LABEL_66;
          }
          unint64_t v40 = 1987081839;
        }

        HIDWORD(v44) = 1;
        if (v39 == v40) {
          goto LABEL_66;
        }
      }

  uint64_t v49 = v174;
  uint64_t v50 = *(void *)(v174 + 688);
  v166 = *(void *)(v174 + 696);
  v167 = v50;
  if (v50 == v166)
  {
    unint64_t v51 = 0LL;
  }

  else
  {
    unint64_t v51 = *(unsigned int **)(v174 + 776);
    unint64_t v52 = v172;
    if (*v172)
    {
      for (uint64_t i = 0LL; i < *v52; ++i)
      {
        unint64_t v54 = &v52[4 * i];
        uint64_t v56 = *((void *)v54 + 2);
        char v55 = (uint64_t *)(v54 + 4);
        if (v56)
        {
          unint64_t v57 = *(void *)(*(void *)(v49 + 736) + 8 * i);
          if (v57)
          {
            uint64_t v59 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v58 + 64LL))(v58);
            unsigned __int8 v60 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v58 + 72LL))(v58);
            uint64_t v61 = v58[72];
            a1 = (*(uint64_t (**)(unsigned int *))(*(void *)v58 + 40LL))(v58);
            __int16 v62 = v172[4 * i + 3];
            if ((_DWORD)a1)
            {
              unint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v57 + 96LL))(v57, v62);
              uint64_t v64 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v58 + 184LL))(v58, v63);
              uint64_t v65 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v58 + 120LL))(v58, v63);
              uint64_t v66 = *v59;
              if ((_DWORD)v66)
              {
                uint64_t v67 = v59 + 3;
                do
                {
                  os_log_s *v67 = v64;
                  v67 += 4;
                  v51[4 * v61 + 3] = v65;
                  LODWORD(v61) = v61 + 1;
                  --v66;
                }

                while (v66);
              }

              a1 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v58 + 200LL))(v58, v63);
              std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = *v60;
              unint64_t v52 = v172;
              uint64_t v49 = v174;
              if ((_DWORD)v68)
              {
                uint64_t v69 = v60 + 3;
                do
                {
                  *uint64_t v69 = a1;
                  v69 += 4;
                  --v68;
                }

                while (v68);
              }

              continue;
            }

            v51[4 * v61 + 3] = v62;
            os_log_t v70 = *v55;
            unint64_t v52 = v172;
            uint64_t v49 = v174;
            goto LABEL_70;
          }
        }

        else if (i < *v51)
        {
          os_log_t v70 = 0LL;
          v51[4 * i + 3] = 0;
          uint64_t v61 = i;
LABEL_70:
          *(void *)&v51[4 * v61 + 4] = v70;
        }
      }
    }

    if (!v51)
    {
      int v71 = (os_log_t *)sub_138E8(13);
      char v72 = *v71;
      if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
      {
        buf.mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 1190;
        _os_log_impl( &dword_0,  v72,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): outputActive cannot be true while clientBufferList_Output is nullptr , and inversely.",  (uint8_t *)&buf,  0x12u);
      }

      uint64_t v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error( v73,  "outputActive cannot be true while clientBufferList_Output is nullptr, and inversely.");
    }
  }

  if (v167 == v166)
  {
    mBuffers = 0LL;
    uint64_t v78 = 0LL;
  }

  else
  {
    __chkstk_darwin(a1);
    mBuffers = (AudioBuffer *)((char *)&v159 - ((v74 + 15) & 0x1FFFFFFF0LL));
    a8 = __chkstk_darwin(v75);
    uint64_t v78 = (unsigned int *)((char *)&v159 - v77);
    *(_DWORD *)((char *)&v159 - v77) = v76;
    if ((_DWORD)v76)
    {
      uint64_t v79 = 0LL;
      int v80 = 16 * v76;
      do
      {
        a8 = *(__n128 *)&v51[v79 / 4 + 2];
        *(__n128 *)&v78[v79 / 4 + 2] = a8;
        v79 += 16LL;
      }

      while (v80 != v79);
    }
  }

  __int128 v81 = v174;
  if (*(_BYTE *)(v174 + 364)) {
    int v82 = v15 == 0LL;
  }
  else {
    int v82 = 1;
  }
  if (!v82 && *v15)
  {
    char v83 = 0LL;
    uint64_t v84 = (void **)(v15 + 4);
    do
    {
      bzero(*v84, *((unsigned int *)v84 - 1));
      ++v83;
      v84 += 2;
    }

    while (v83 < *v15);
  }

  int v85 = v167 == v166;
  (*(void (**)(uint64_t, AudioBuffer *, _DWORD *, double *, unsigned int *, double *, void, __n128))(v81 + 456))( v165,  v164,  v15,  v173,  v78,  v170,  *(void *)(v81 + 464),  a8);
  if (v85) {
    goto LABEL_97;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v174 + 448LL))(v174) & 1) == 0)
  {
    int v87 = v172;
    if (*v172)
    {
      __int128 v88 = 0LL;
      double v89 = (void **)(v172 + 4);
      do
      {
        bzero(*v89, *((unsigned int *)v89 - 1));
        ++v88;
        v89 += 2;
      }

      while (v88 < *v87);
    }

  if (*a2) {
    unint64_t v29 = 72LL;
  }
  else {
    unint64_t v29 = 48LL;
  }
  if (*a2) {
    uint64_t v30 = a1 + 72;
  }
  else {
    uint64_t v30 = a1 + 48;
  }
  uint64_t v31 = (const void **)(a1 + 96);
  sub_31494((std::string *)v79, v8, a2, (const void **)(a1 + 96));
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v79;
  *(void *)(v30 + 16) = *(void *)&v79[16];
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    char v33 = (uint64_t **)(a1 + 32);
    __int16 v32 = *(uint64_t **)(a1 + 32);
    if (v32)
    {
      while (1)
      {
        while (1)
        {
          char v33 = (uint64_t **)v32;
          CFMutableStringRef v34 = v32 + 4;
          if (!sub_4930(a2, (_DWORD *)v32 + 8)) {
            break;
          }
          __int16 v32 = *v33;
          uint64_t v35 = v33;
          if (!*v33) {
            goto LABEL_71;
          }
        }

        if (!sub_4930(v34, a2)) {
          break;
        }
        uint64_t v35 = v33 + 1;
        __int16 v32 = v33[1];
        if (!v32) {
          goto LABEL_71;
        }
      }

      CFStringRef v36 = v33;
    }

    else
    {
      uint64_t v35 = (uint64_t **)(a1 + 32);
LABEL_71:
      CFStringRef v36 = operator new(0x40uLL);
      *((_OWORD *)v36 + 2) = *(_OWORD *)a2;
      *((void *)v36 + 6) = 0LL;
      *((void *)v36 + 7) = 0LL;
      *(void *)CFStringRef v36 = 0LL;
      *((void *)v36 + 1) = 0LL;
      *((void *)v36 + 2) = v33;
      *uint64_t v35 = (uint64_t *)v36;
      unint64_t v37 = **(void **)(a1 + 24);
      unint64_t v38 = (uint64_t *)v36;
      if (v37)
      {
        *(void *)(a1 + 24) = v37;
        unint64_t v38 = *v35;
      }

      sub_7A420(*(uint64_t **)(a1 + 32), v38);
      ++*(void *)(a1 + 40);
    }

    if (cap >= 0) {
      __int16 v39 = v73;
    }
    else {
      __int16 v39 = (void **)v73[0];
    }
    sub_31494((std::string *)v79, v8, a2, v31);
    if (v79[23] >= 0) {
      unint64_t v40 = v79;
    }
    else {
      unint64_t v40 = *(_BYTE **)v79;
    }
    if (qword_49F0F8 != -1) {
      dispatch_once(&qword_49F0F8, &stru_4811A0);
    }
    if (off_49F0F0) {
      uint64_t v41 = off_49F0F0(v27, v39, v40, 1667327590LL, 0LL, a3);
    }
    else {
      uint64_t v41 = 0LL;
    }
    uint64_t v42 = operator new(0x20uLL);
    std::__shared_weak_count *v42 = &off_481158;
    v42[1] = 0LL;
    void v42[2] = 0LL;
    v42[3] = v41;
    *(void *)&int v43 = v41;
    *((void *)&v43 + 1) = v42;
    __int128 v44 = (std::__shared_weak_count *)*((void *)v36 + 7);
    *((_OWORD *)v36 + 3) = v43;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        uint64_t v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }

    if ((v79[23] & 0x80000000) != 0) {
      operator delete(*(void **)v79);
    }
  }

  unint64_t v47 = sub_138E8(40);
  if ((*(_BYTE *)(v47 + 8) & 1) != 0)
  {
    unint64_t v48 = *(os_log_s **)v47;
    if (*(void *)v47)
    {
      if (os_log_type_enabled(*(os_log_t *)v47, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(&v78, v8);
        uint64_t v49 = (char)v78.__r_.__value_.__s.__size_;
        uint64_t v50 = v78.__r_.__value_.__r.__words[0];
        sub_2CC00(&__p, a3);
        unint64_t v51 = &v78;
        if (v49 < 0) {
          unint64_t v51 = (std::string *)v50;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t p_p = &__p;
        }
        else {
          uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v79 = 136315906;
        *(void *)&v79[4] = "AudioIOMonitor.cpp";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 321;
        *(_WORD *)&v79[18] = 2080;
        *(void *)&v79[20] = v51;
        int v80 = 2080;
        __int128 v81 = (uint64_t)p_p;
        _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Set stream format for stream with port type %s : %s",  v79,  0x26u);
      }
    }
  }

  char v53 = sub_138E8(40);
  if ((*(_BYTE *)(v53 + 8) & 1) == 0) {
    goto LABEL_135;
  }
  unint64_t v54 = *(os_log_s **)v53;
  if (!*(void *)v53 || !os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_135;
  }
  sub_82600((uint64_t)v79);
  if (*a2) {
    char v55 = "Output, ";
  }
  else {
    char v55 = "Input, ";
  }
  if (*a2) {
    uint64_t v56 = 8LL;
  }
  else {
    uint64_t v56 = 7LL;
  }
  sub_826EC(v79, (uint64_t)v55, v56);
  unint64_t v57 = a2[1];
  if (v57) {
    unint64_t v58 = "Underlying, ";
  }
  else {
    unint64_t v58 = "Client, ";
  }
  if (v57) {
    uint64_t v59 = 12LL;
  }
  else {
    uint64_t v59 = 8LL;
  }
  sub_826EC(v79, (uint64_t)v58, v59);
  unsigned __int8 v60 = a2[2];
  if (v60 == 1)
  {
    uint64_t v61 = "pre-DSP, ";
    __int16 v62 = 9LL;
    goto LABEL_128;
  }

  if (v60 == 2)
  {
    uint64_t v61 = "post-DSP, ";
    __int16 v62 = 10LL;
LABEL_128:
    sub_826EC(v79, (uint64_t)v61, v62);
  }

  sub_826EC(v79, (uint64_t)"Index: ", 7LL);
  std::ostream::operator<<(v79, a2[3]);
  sub_82924(&v78, (uint64_t)&v79[8]);
  if (v83 < 0) {
    operator delete(v82);
  }
  std::streambuf::~streambuf(&v79[8]);
  std::ios::~ios(&v84);
  uint64_t v65 = &v78;
  if ((v78.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v65 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)uint64_t v79 = 136315650;
  *(void *)&v79[4] = "AudioIOMonitor.cpp";
  *(_WORD *)&v79[12] = 1024;
  *(_DWORD *)&v79[14] = 322;
  *(_WORD *)&v79[18] = 2080;
  *(void *)&v79[20] = v65;
  _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream identity: %s", v79, 0x1Cu);
LABEL_135:
  if (size < 0) {
    operator delete(v72);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v73[0]);
  }
  uint64_t v66 = v76;
  if (v76)
  {
    uint64_t v67 = (unint64_t *)&v76->__shared_owners_;
    do
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

      sub_85B80(&v33);
      goto LABEL_55;
    }
  }

  return 0LL;
}

      v29.__d_.__rep_ = v28 + v26.__d_.__rep_;
      goto LABEL_55;
    }

    int v20 = *(id *)sub_138E8(13);
    char v21 = v20;
    if (v20)
    {
      uint64_t v22 = (os_log_s *)v20;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v43 = inAddress;
        sub_613AC((uint64_t)&__lk, &v43.mSelector);
        p_luint64_t k = &__lk;
        if (v45 < 0) {
          p_luint64_t k = __lk.__m_;
        }
        uint64_t v24 = a3[1] - *a3 != v14;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316930;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        unint64_t v58 = 1024;
        uint64_t v59 = 248;
        unsigned __int8 v60 = 2080;
        *(void *)uint64_t v61 = "updated";
        *(_WORD *)&v61[8] = 2080;
        __int16 v62 = p_lk;
        unint64_t v63 = 2080;
        uint64_t v64 = "updated";
        uint64_t v65 = 1024;
        uint64_t v66 = v24;
        uint64_t v67 = 1024;
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = 0;
        uint64_t v69 = 1024;
        os_log_t v70 = a1;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  buf,  0x42u);
        if (v45 < 0) {
          operator delete(__lk.__m_);
        }
      }
    }

    uint64_t v3 = 2003329396;
    std::string::size_type v13 = 1;
    if (v12) {
      goto LABEL_29;
    }
  }

  while (!v13);
  if (v13 == 12)
  {
    uint64_t v30 = sub_138E8(13);
    if ((*(_BYTE *)(v30 + 8) & 1) != 0)
    {
      uint64_t v31 = *(id *)v30;
      if (v31)
      {
        __int16 v32 = (os_log_s *)v31;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
          *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
          sub_613AC((uint64_t)__p, (unsigned int *)&__lk);
          char v33 = v47 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          unint64_t v58 = 1024;
          uint64_t v59 = 288;
          unsigned __int8 v60 = 2080;
          *(void *)uint64_t v61 = v33;
          *(_WORD *)&v61[8] = 1024;
          LODWORD(v62) = a1;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  buf,  0x22u);
          if (v47 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v3 = 0;
  }

  sub_7D898((uint64_t)inClientData);
  std::condition_variable::~condition_variable(&v71);
  std::mutex::~mutex(&v72);
  int v10 = (void *)v51[0];
  if (v51[0]) {
LABEL_71:
  }
    operator delete(v10);
LABEL_72:
  if (v3)
  {
    unint64_t v37 = sub_138E8(13);
    unint64_t v38 = sub_8C7D4(1, *(void **)v37, *(void *)(v37 + 8));
    __int16 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    unint64_t v40 = v39;
    if (v39)
    {
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        unint64_t v58 = 1024;
        uint64_t v59 = 94;
        unsigned __int8 v60 = 1024;
        *(_DWORD *)uint64_t v61 = a1;
        *(_WORD *)&v61[4] = 1024;
        *(_DWORD *)&v61[6] = v3;
        _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not enable stream in device %d, error = %u",  buf,  0x1Eu);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not enable stream in device %d, error = %u");
  }

void sub_DB088( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, char a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, std::__shared_weak_count *a36, void *__p, uint64_t a38, uint64_t a39, uint64_t a40, void *a41)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_7A768((uint64_t)&a31);
  sub_7A768((uint64_t)&a27);
  sub_7A768((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_DB1C0()
{
}

void sub_DB1C8()
{
}

uint64_t sub_DB1D0(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a1 + sub_7A768(v2 - 32) = 0LL;
  size_t v6 = (void *)(a1 + 32);
  *(v6 - 1) = v5;
  v6[1] = 0LL;
  v6[2] = 0LL;
  sub_7A5B8( v6,  *(const void **)(a3 + 24),  *(void *)(a3 + 32),  (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
  uint64_t v7 = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0LL;
  *(void *)(a1 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 56);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a3 + 60);
  *(_DWORD *)(a1 + 64) = v7;
  return a1;
}

void sub_DB240(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB258(uint64_t **a1, int a2, uint64_t a3)
{
  size_t v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  uint64_t v8 = (char **)(a1 + 1);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (char **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    int v10 = (char *)operator new(0x68uLL);
    v15[0] = v10;
    v15[1] = v6;
    char v16 = 0;
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    std::string::size_type v11 = *(const void **)(a3 + 32);
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    *((void *)v10 + 9) = 0LL;
    *((void *)v10 + 10) = 0LL;
    uint64_t v12 = *(void *)(a3 + 40);
    *((void *)v10 + 8) = 0LL;
    sub_7A5B8((void *)v10 + 8, v11, v12, (v12 - (uint64_t)v11) >> 2);
    uint64_t v13 = *(void *)(a3 + 56);
    *(void *)(a3 + 56) = 0LL;
    *((void *)v10 + 11) = v13;
    *((_DWORD *)v10 + 24) = *(_DWORD *)(a3 + 64);
    v10[100] = *(_BYTE *)(a3 + 68);
    char v16 = 1;
    *(void *)int v10 = 0LL;
    *((void *)v10 + 1) = 0LL;
    *((void *)v10 + 2) = v8;
    const void *v7 = v10;
    __int16 v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      int v10 = *v7;
    }

    sub_7A420(a1[1], (uint64_t *)v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v15[0] = 0LL;
    sub_DB550((uint64_t)v15);
  }

void sub_DB384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  CFTypeID v4 = *(std::__shared_weak_count **)(v2 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_DB550((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_DB3A4(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

  CFTypeID v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *sub_DB3F8(void *a1)
{
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  CFTypeID v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_DB44C(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)sub_2FC95C();
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + sub_7A768(v2 - 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  sub_2CE7A0((_DWORD *)a1);
  return a1;
}

void sub_DB498(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(exception_object);
}

void sub_DB4B8(void *a1)
{
  if (a1)
  {
    sub_DB4B8(*a1);
    sub_DB4B8(a1[1]);
    sub_DB4F8(a1 + 4);
    operator delete(a1);
  }

void sub_DB4F8(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

  CFTypeID v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_DB550(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_DB4F8(v1 + 4);
    }
    operator delete(v1);
  }

std::string *sub_DB594(std::string *a1, unsigned __int8 *a2)
{
  if ((v46.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v46.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  CFTypeID v4 = (unsigned __int8 *)*((void *)a2 + 1);
  uint64_t v5 = a2 + 16;
  if (v4 != a2 + 16)
  {
    do
    {
      uint64_t v6 = *((unsigned int *)v4 + 8);
      std::string::size_type v7 = size;
      if ((_DWORD)v6)
      {
        else {
          std::string::size_type v7 = v46.__r_.__value_.__s.__size_;
        }
      }

      uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 1);
      int v9 = v4;
      if (v8)
      {
        do
        {
          int v10 = v8;
          uint64_t v8 = *(unsigned __int8 **)v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v10 = (unsigned __int8 *)*((void *)v9 + 2);
          BOOL v11 = *(void *)v10 == (void)v9;
          int v9 = v10;
        }

        while (!v11);
      }

      uint64_t v12 = "????";
      sub_7D084(&v48, v12);
      uint64_t v13 = std::string::insert(&v48, 0LL, "[ Port Type: ", 0xDuLL);
      __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v15 = std::string::append(&v49, "; ", 2uLL);
      __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0LL;
      v15->__r_.__value_.__l.__cap_ = 0LL;
      v15->__r_.__value_.__r.__words[0] = 0LL;
      memset(&v47, 0, sizeof(v47));
      std::string::append(&v47, "[ Port: ", 8uLL);
      sub_B8F68((uint64_t *)&v54, (uint64_t *)v4 + 5, "", 335);
      sub_23FE8((uint64_t)&v56, v54 + 2);
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v17 = &v56;
      }
      else {
        unint64_t v17 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v18 = v56.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v18 = v56.__r_.__value_.__l.__size_;
      }
      std::string::append(&v47, (const std::string::value_type *)v17, v18);
      int v19 = v55;
      if (v55)
      {
        p_shared_owners = (unint64_t *)&v55->__shared_owners_;
        do
          unint64_t v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }

      std::string::append(&v47, "; SubPorts: ", 0xCuLL);
      sub_238850(&v56, (unsigned int **)v4 + 8);
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v22 = &v56;
      }
      else {
        uint64_t v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v23 = v56.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v23 = v56.__r_.__value_.__l.__size_;
      }
      std::string::append(&v47, (const std::string::value_type *)v22, v23);
      std::string::append(&v47, "; Properties: ", 0xEuLL);
      (*(void (**)(std::string *__return_ptr))(**((void **)v4 + 11) + 16LL))(&v56);
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v24 = &v56;
      }
      else {
        uint64_t v24 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v25 = v56.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v25 = v56.__r_.__value_.__l.__size_;
      }
      std::string::append(&v47, (const std::string::value_type *)v24, v25);
      std::string::append(&v47, "; Enable reason: ", 0x11uLL);
      sub_2CA1C(&v56, *((unsigned int *)v4 + 24));
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v26 = &v56;
      }
      else {
        unint64_t v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v27 = v56.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v27 = v56.__r_.__value_.__l.__size_;
      }
      std::string::append(&v47, (const std::string::value_type *)v26, v27);
      std::string::append(&v47, "; BuiltInMicThroughAOP: ", 0x18uLL);
      if (v4[100]) {
        unint64_t v28 = "yes";
      }
      else {
        unint64_t v28 = "no";
      }
      if (v4[100]) {
        std::string::size_type v29 = 3LL;
      }
      else {
        std::string::size_type v29 = 2LL;
      }
      std::string::append(&v47, v28, v29);
      std::string::append(&v47, " ]", 2uLL);
      if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v30 = &v47;
      }
      else {
        uint64_t v30 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v31 = v47.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v31 = v47.__r_.__value_.__l.__size_;
      }
      __int16 v32 = std::string::append(&v50, (const std::string::value_type *)v30, v31);
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      if (v10 == v5) {
        CFMutableStringRef v34 = " ]";
      }
      else {
        CFMutableStringRef v34 = " ]; ";
      }
      if (v10 == v5) {
        std::string::size_type v35 = 2LL;
      }
      else {
        std::string::size_type v35 = 4LL;
      }
      CFStringRef v36 = std::string::append(&v51, v34, v35);
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      int64_t cap = v36->__r_.__value_.__l.__cap_;
      __int128 v52 = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        unint64_t v38 = (const std::string::value_type *)&v52;
      }
      else {
        unint64_t v38 = (const std::string::value_type *)v52;
      }
      if (cap >= 0) {
        std::string::size_type v39 = HIBYTE(cap);
      }
      else {
        std::string::size_type v39 = *((void *)&v52 + 1);
      }
      std::string::insert(&v46, v7, v38, v39);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)v52);
      }
      CFTypeID v4 = v10;
    }

    while (v10 != v5);
  }

  std::string::append(&v46, " }", 2uLL);
  if ((v46.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v40 = &v46;
  }
  else {
    unint64_t v40 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v41 = v46.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v41 = v46.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v40, v41);
  std::string::append(a1, "; Optional: ", 0xCuLL);
  std::to_string(&v56, *a2);
  if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v42 = &v56;
  }
  else {
    uint64_t v42 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v43 = v56.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v43 = v56.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v42, v43);
  return std::string::append(a1, " ]", 2uLL);
}

void sub_DBABC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *__p, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
}

uint64_t sub_DBC08(uint64_t a1, void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = **a2;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v5 = *a2;
  uint64_t v6 = v5 + 2;
  uint64_t v7 = v5[3];
  if ((void *)v7 == v5 + 2) {
    goto LABEL_194;
  }
  int v127 = v2 + 6;
  uint64_t v128 = a1 + 8;
  uint64_t v133 = (uint64_t)v2;
  unint64_t v126 = v5 + 2;
  do
  {
    uint64_t v8 = (char *)operator new(0x60uLL);
    int v9 = (uint64_t *)(v7 + 16);
    *(void *)uint64_t v8 = 0LL;
    *((void *)v8 + 1) = 0LL;
    char v10 = *(_BYTE *)(v7 + 64);
    *((void *)v8 + 4) = 0LL;
    BOOL v11 = (int *)(v8 + 32);
    v8[16] = v10;
    uint64_t v12 = (uint64_t **)(v8 + 24);
    *((void *)v8 + 5) = 0LL;
    *((void *)v8 + 3) = v8 + 32;
    uint64_t v141 = 0LL;
    BOOL v142 = 0LL;
    uint64_t v13 = *(std::__shared_weak_count **)(v7 + 24);
    if (v13)
    {
      BOOL v142 = std::__shared_weak_count::lock(v13);
      if (v142)
      {
        uint64_t v14 = *v9;
        uint64_t v141 = v14;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 144) != 1885433888)
          {
            unint64_t v15 = *(char **)v11;
            if (*(void *)v11)
            {
              __int128 v16 = (int *)(v8 + 32);
              do
              {
                int v17 = *((_DWORD *)v15 + 8);
                BOOL v18 = v17 < 0;
                if (v17 >= 0) {
                  int v19 = (char **)v15;
                }
                else {
                  int v19 = (char **)(v15 + 8);
                }
                if (!v18) {
                  __int128 v16 = (int *)v15;
                }
                unint64_t v15 = *v19;
              }

              while (*v19);
              if (v16 != v11 && v16[8] <= 0)
              {
                BOOL v117 = (os_log_t *)sub_138E8(13);
                uint64_t v118 = *v117;
                if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)uint64_t v173 = 136315394;
                  v174 = "RouteCache.cpp";
                  __int16 v175 = 1024;
                  *(_DWORD *)int v176 = 164;
                  _os_log_impl( &dword_0,  v118,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v173,  0x12u);
                }

                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "Precondition failure.");
              }
            }

            sub_DA970((uint64_t)&v136, (uint64_t *)(v7 + 16), v7 + 16, (uint64_t)v2);
            sub_DB1D0((uint64_t)v173, 0, (uint64_t)&v136);
            sub_DB258(v12, *(int *)v173, (uint64_t)v173);
            uint64_t v20 = v179;
            uint64_t v179 = 0LL;
            if (v20) {
              (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
            }
            if (v177)
            {
              v178 = v177;
              operator delete(v177);
            }

            if (*(void *)&v176[2]) {
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v176[2]);
            }
            uint64_t v21 = v140;
            uint64_t v140 = 0LL;
            if (v21) {
              (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
            }
            if (__p)
            {
              int v139 = __p;
              operator delete(__p);
            }

            if (v137) {
              std::__shared_weak_count::__release_weak(v137);
            }
          }
        }
      }
    }

    int v135 = 0LL;
    uint64_t v22 = *(std::__shared_weak_count **)(v7 + 40);
    if (v22)
    {
      int v135 = std::__shared_weak_count::lock(v22);
      if (v135)
      {
        uint64_t v23 = *(void *)(v7 + 32);
        if (v23)
        {
          if (*(_DWORD *)(v23 + 144) != 1885433888)
          {
            uint64_t v24 = *(char **)v11;
            if (*(void *)v11)
            {
              std::string::size_type v25 = (int *)(v8 + 32);
              do
              {
                int v26 = *((_DWORD *)v24 + 8);
                BOOL v27 = v26 < 1;
                if (v26 >= 1) {
                  unint64_t v28 = (char **)v24;
                }
                else {
                  unint64_t v28 = (char **)(v24 + 8);
                }
                if (!v27) {
                  std::string::size_type v25 = (int *)v24;
                }
                uint64_t v24 = *v28;
              }

              while (*v28);
              if (v25 != v11 && v25[8] <= 1)
              {
                uint64_t v120 = (os_log_t *)sub_138E8(13);
                size_t v121 = *v120;
                if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)uint64_t v173 = 136315394;
                  v174 = "RouteCache.cpp";
                  __int16 v175 = 1024;
                  *(_DWORD *)int v176 = 172;
                  _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v173,  0x12u);
                }

                uint64_t v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v122, "Precondition failure.");
              }
            }

            if (!*(void *)(v7 + 72))
            {
              CFIndex v111 = (os_log_t *)sub_138E8(13);
              uint64_t v112 = *v111;
              if (*v111 && os_log_type_enabled(*v111, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 124;
                _os_log_impl( &dword_0,  v112,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

LABEL_215:
              __int16 v113 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v113, "Precondition failure.");
            }

            if (!*(void *)(*(void *)v2 + 40LL))
            {
              uint64_t v109 = (os_log_t *)sub_138E8(13);
              uint64_t v110 = *v109;
              if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 125;
                _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              goto LABEL_215;
            }

            sub_B8CBC(&v165, (uint64_t *)(v7 + 32), "", 127);
            uint64_t v131 = *(void *)(v7 + 72);
            if (*((_BYTE *)v2 + 20)) {
              std::string::size_type v29 = v2 + 4;
            }
            else {
              std::string::size_type v29 = v2 + 3;
            }
            unsigned int v134 = *v29;
            uint64_t v30 = *(void *)v2;
            uint64_t v130 = *(void *)(*(void *)v2 + 40LL);
            std::string::size_type v31 = v166;
            if (v166)
            {
              uint64_t v32 = v165;
              p_shared_weak_owners = (unint64_t *)&v166->__shared_weak_owners_;
              do
                unint64_t v34 = __ldxr(p_shared_weak_owners);
              while (__stxr(v34 + 1, p_shared_weak_owners));
              uint64_t v162 = (uint64_t *)&v162;
              v163 = (uint64_t *)&v162;
              uint64_t v164 = 0LL;
              if (**((_DWORD **)v2 + 14) != 1667396196)
              {
                if (v31->__shared_owners_ == -1)
                {
LABEL_228:
                  v123 = (os_log_t *)sub_138E8(13);
                  int v124 = *v123;
                  if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 104;
                    _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
                  }

                  uint64_t v125 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v125, "Precondition failure.");
                }

                std::string v48 = (uint64_t *)operator new(0x20uLL);
                uint64_t v47 = v131;
                v48[2] = v32;
                v48[3] = (uint64_t)v31;
                do
                  unint64_t v49 = __ldxr(p_shared_weak_owners);
                while (__stxr(v49 + 1, p_shared_weak_owners));
                *std::string v48 = (uint64_t)&v162;
                v48[1] = (uint64_t)&v162;
                uint64_t v162 = v48;
                v163 = v48;
                ++v164;
                goto LABEL_73;
              }

              uint64_t v129 = v31;
              uint64_t v30 = *(void *)v2;
            }

            else
            {
              uint64_t v129 = 0LL;
              uint64_t v162 = (uint64_t *)&v162;
              v163 = (uint64_t *)&v162;
              uint64_t v164 = 0LL;
              if (**((_DWORD **)v2 + 14) != 1667396196) {
                goto LABEL_228;
              }
            }

            std::string::size_type v35 = (void *)(v30 + 16);
            for (uint64_t i = *(void **)(v30 + 24); i != v35; uint64_t i = (void *)i[1])
            {
              __int128 v37 = (std::__shared_weak_count *)i[5];
              if (!v37 || v37->__shared_owners_ == -1)
              {
                __int16 v106 = (os_log_t *)sub_138E8(13);
                char v107 = *v106;
                if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 104;
                  _os_log_impl( &dword_0,  v107,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
                }

                uint64_t v108 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v108, "Precondition failure.");
              }

              unint64_t v38 = std::__shared_weak_count::lock(v37);
              std::string::size_type v39 = v38;
              if (v38)
              {
                uint64_t v40 = i[4];
                std::string::size_type v41 = (unint64_t *)&v38->__shared_weak_owners_;
                do
                  unint64_t v42 = __ldxr(v41);
                while (__stxr(v42 + 1, v41));
                p_shared_owners = (unint64_t *)&v38->__shared_owners_;
                do
                  unint64_t v44 = __ldaxr(p_shared_owners);
                while (__stlxr(v44 - 1, p_shared_owners));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }

              else
              {
                uint64_t v40 = 0LL;
              }

              uint64_t v45 = (uint64_t *)operator new(0x20uLL);
              v45[2] = v40;
              v45[3] = (uint64_t)v39;
              uint64_t v46 = (uint64_t)v162;
              uint64_t *v45 = (uint64_t)v162;
              v45[1] = (uint64_t)&v162;
              *(void *)(v46 + 8) = v45;
              uint64_t v162 = v45;
              ++v164;
            }

            std::string::size_type v31 = v129;
            uint64_t v47 = v131;
            if (!v129)
            {
LABEL_74:
              uint64_t v50 = v165;
              if (*(void *)(v165 + 192))
              {
                int v51 = v134;
                sub_1B5F60(&v159, v165, (uint64_t)v2, v47, v134, 0);
                uint64_t v50 = v165;
                uint64_t v52 = *(void *)(v165 + 192);
                if (v52)
                {
                  strcpy(buf, "pshsbolg");
                  buf[9] = 0;
                  *(_WORD *)&buf[10] = 0;
                  unint64_t v53 = sub_5C2F8(v52);
                  *((void *)&v56 + 1) = v54;
                  *(void *)&__int128 v56 = v53;
                  uint64_t v55 = v56 >> 32;
                  BOOL v58 = (v55 & 0xFF00000000LL) != 0 && (_DWORD)v55 == 1;
                  uint64_t v50 = v165;
                }

                else
                {
                  BOOL v58 = 0;
                }
              }

              else
              {
                BOOL v58 = 0;
                int64x2_t v159 = 0LL;
                uint64_t v160 = 0LL;
                uint64_t v161 = 0LL;
                int v51 = v134;
              }

              if (*(_DWORD *)(v50 + 144) == 1885892706)
              {
                int v59 = sub_1BAB2C(v51);
                if (*((_BYTE *)v2 + 164)) {
                  int v60 = v2[40];
                }
                else {
                  int v60 = v59;
                }
                if (v60 <= 1919708274)
                {
                  if (v60 == 1919115628 || v60 == 1919183219) {
                    goto LABEL_97;
                  }
                }

                else
                {
                  if (v60 == 1919708275 || v60 == 1920364387) {
                    goto LABEL_97;
                  }
                  if (v60 == 1936090482)
                  {
                    if (v58) {
                      int v60 = 1936090482;
                    }
                    else {
                      int v60 = 1919115628;
                    }
                    goto LABEL_97;
                  }
                }

                int v60 = 1918989668;
              }

              else
              {
                int v60 = 0;
              }

LABEL_152:
    int v82 = *(std::__shared_weak_count **)(v7 + 56);
    if (v82)
    {
      char v83 = std::__shared_weak_count::lock(v82);
      *(void *)&buf[8] = v83;
      if (v83)
      {
        uint64_t v84 = v83;
        uint64_t v85 = *(void *)(v7 + 48);
        *(void *)AudioObjectPropertyAddress buf = v85;
        if (v85 && *(_DWORD *)(v85 + 144) != 1885433888)
        {
          uint64_t v86 = *(char **)v11;
          if (*(void *)v11)
          {
            int v87 = (int *)(v8 + 32);
            do
            {
              int v88 = *((_DWORD *)v86 + 8);
              BOOL v89 = v88 < 2;
              if (v88 >= 2) {
                uint64_t v90 = (char **)v86;
              }
              else {
                uint64_t v90 = (char **)(v86 + 8);
              }
              if (!v89) {
                int v87 = (int *)v86;
              }
              uint64_t v86 = *v90;
            }

            while (*v90);
            if (v87 != v11 && v87[8] <= 2)
            {
              uint64_t v114 = (os_log_t *)sub_138E8(13);
              char v115 = *v114;
              if (*v114 && os_log_type_enabled(*v114, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v173 = 136315394;
                v174 = "RouteCache.cpp";
                __int16 v175 = 1024;
                *(_DWORD *)int v176 = 180;
                _os_log_impl( &dword_0,  v115,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v173,  0x12u);
              }

              int v116 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v116, "Precondition failure.");
            }
          }

          sub_DA970((uint64_t)&v136, (uint64_t *)(v7 + 48), (uint64_t)v9, (uint64_t)v2);
          sub_DB1D0((uint64_t)v173, 2, (uint64_t)&v136);
          sub_DB258(v12, *(int *)v173, (uint64_t)v173);
          uint64_t v91 = v179;
          uint64_t v179 = 0LL;
          if (v91) {
            (*(void (**)(uint64_t))(*(void *)v91 + 8LL))(v91);
          }
          if (v177)
          {
            v178 = v177;
            operator delete(v177);
          }

          if (*(void *)&v176[2]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v176[2]);
          }
          uint64_t v92 = v140;
          uint64_t v140 = 0LL;
          if (v92) {
            (*(void (**)(uint64_t))(*(void *)v92 + 8LL))(v92);
          }
          if (__p)
          {
            int v139 = __p;
            operator delete(__p);
          }

          if (v137) {
            std::__shared_weak_count::__release_weak(v137);
          }
        }

        __int128 v93 = (unint64_t *)&v84->__shared_owners_;
        do
          unint64_t v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
    }

    if (v135)
    {
      int v95 = (unint64_t *)&v135->__shared_owners_;
      do
        unint64_t v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }

    char v97 = v142;
    if (v142)
    {
      char v98 = (unint64_t *)&v142->__shared_owners_;
      do
        unint64_t v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }

    sub_280F54( (uint64_t)(v8 + 48),  *(void *)(v7 + 72),  *(void *)(*(void *)v2 + 40LL),  **(unsigned int **)v2,  1768776806LL);
    uint64_t v100 = *(void *)(a1 + 8);
    *(void *)uint64_t v8 = v100;
    *((void *)v8 + 1) = v4;
    *(void *)(v100 + 8) = v8;
    *(void *)(a1 + 8) = v8;
    ++*(void *)(a1 + 24);
    uint64_t v7 = *(void *)(v7 + 8);
  }

  while ((void *)v7 != v6);
  uint64_t v5 = *(void **)v2;
LABEL_194:
  int v101 = v2[3];
  BOOL v104 = v101 == 1986556788 || v101 == 1987208039 || v101 == 1987211117;
  sub_DCF84((uint64_t *)(a1 + 32), (uint64_t)v5, v104);
  *(_DWORD *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = *(_DWORD *)(*(void *)v2 + 8LL);
  sub_C590C((_BYTE *)(a1 + 88), (__int128 *)v2 + 11);
  *(_DWORD *)(a1 + 120) = v2[3];
  *(_BYTE *)(a1 + 124) = *((_BYTE *)v2 + 156);
  return a1;
}

  if (v6) {
LABEL_153:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  return v9;
}

void sub_DCC38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, std::__shared_weak_count *a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

void sub_DCF14(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_DB4B8((void *)v3[4]);
        operator delete(v3);
        uint64_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_DCF84(uint64_t *a1, uint64_t a2, int a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  a1[4] = 0LL;
  a1[3] = (uint64_t)(a1 + 4);
  uint64_t v3 = a1 + 3;
  a1[5] = 0LL;
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  if (v5 != (void *)(a2 + 16))
  {
    uint64_t v7 = a1;
    unint64_t v38 = a1 + 3;
    do
    {
      v41[0] = 0LL;
      v41[1] = 0LL;
      v43[0] = 0LL;
      v43[1] = 0LL;
      uint64_t v40 = v41;
      unint64_t v42 = v43;
      uint64_t v8 = (std::__shared_weak_count *)v5[3];
      if (v8)
      {
        int v9 = std::__shared_weak_count::lock(v8);
        uint64_t v45 = v9;
        if (v9)
        {
          char v10 = v9;
          uint64_t v11 = v5[2];
          uint64_t v44 = v11;
          if (v11)
          {
            uint64_t v12 = sub_20442C(v11, a3);
            if (v12) {
              sub_DD4F0((uint64_t *)&v40, v12, v12);
            }
          }

          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            unint64_t v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }

      unint64_t v15 = (std::__shared_weak_count *)v5[5];
      if (v15)
      {
        __int128 v16 = std::__shared_weak_count::lock(v15);
        uint64_t v45 = v16;
        if (v16)
        {
          int v17 = v16;
          uint64_t v18 = v5[4];
          uint64_t v44 = v18;
          if (v18)
          {
            uint64_t v19 = sub_20442C(v18, a3);
            if (v19) {
              sub_DD4F0((uint64_t *)&v42, v19, v19);
            }
          }

          uint64_t v20 = (unint64_t *)&v17->__shared_owners_;
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }

      uint64_t v22 = (std::__shared_weak_count *)v5[7];
      if (v22)
      {
        uint64_t v23 = std::__shared_weak_count::lock(v22);
        uint64_t v45 = v23;
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = v5[6];
          uint64_t v44 = v25;
          if (v25)
          {
            unint64_t v26 = *(void *)(v25 + 192);
            if (v26)
            {
              BOOL v27 = v4;
              __int16 v28 = *(_WORD *)(v25 + 184);
              if ((v28 & 1) != 0) {
                std::string::size_type v29 = &v40;
              }
              else {
                std::string::size_type v29 = &v42;
              }
              uint64_t v30 = operator new(0x28uLL);
              v30[4] = v26;
              uint64_t v31 = 1LL;
              if ((v28 & 1) != 0)
              {
                uint64_t v32 = v41;
              }

              else
              {
                uint64_t v31 = 4LL;
                uint64_t v32 = v43;
              }

              __int128 v33 = v41[v31 - 1];
              if (v33)
              {
                while (1)
                {
                  while (1)
                  {
                    unint64_t v34 = (uint64_t **)v33;
                    unint64_t v35 = v33[4];
                    if (v26 >= v35) {
                      break;
                    }
                    __int128 v33 = *v34;
                    uint64_t v32 = v34;
                    if (!*v34) {
                      goto LABEL_39;
                    }
                  }

                  if (v35 >= v26) {
                    break;
                  }
                  __int128 v33 = v34[1];
                  if (!v33)
                  {
                    uint64_t v32 = v34 + 1;
                    goto LABEL_39;
                  }
                }

                operator delete(v30);
              }

              else
              {
                unint64_t v34 = v32;
LABEL_39:
                sub_32C38(v29, (uint64_t)v34, v32, v30);
              }

              uint64_t v4 = v27;
              uint64_t v3 = v38;
              uint64_t v7 = a1;
            }
          }

          CFStringRef v36 = (unint64_t *)&v24->__shared_owners_;
          do
            unint64_t v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }

      sub_DD2A8(v7, v40, v41);
      sub_DD2A8(v3, v42, v43);
      sub_32C8C(v43[0]);
      sub_32C8C(v41[0]);
      uint64_t v5 = (void *)v5[1];
    }

    while (v5 != v4);
  }

void sub_DD23C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, ...)
{
}

uint64_t sub_DD278(uint64_t a1)
{
  return a1;
}

uint64_t *sub_DD2A8(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_DD32C(v5, v6, v4[4], v4[4]);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_DD32C(uint64_t **a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (unint64_t v8 = a2[4], v8 > a3))
  {
    uint64_t v9 = *a2;
    if (*a1 == a2)
    {
      uint64_t v11 = (uint64_t **)a2;
LABEL_16:
      if (v9) {
        unint64_t v14 = v11;
      }
      else {
        unint64_t v14 = (uint64_t **)a2;
      }
      if (v9) {
        uint64_t v12 = v11 + 1;
      }
      else {
        uint64_t v12 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }

    if (v9)
    {
      char v10 = (uint64_t **)*a2;
      do
      {
        uint64_t v11 = v10;
        char v10 = (uint64_t **)v10[1];
      }

      while (v10);
    }

    else
    {
      __int128 v16 = a2;
      do
      {
        uint64_t v11 = (uint64_t **)v16[2];
        BOOL v17 = *v11 == v16;
        __int128 v16 = (uint64_t *)v11;
      }

      while (v17);
    }

    uint64_t v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v14 = (uint64_t **)v18;
          unint64_t v19 = v18[4];
          if (v19 <= a3) {
            break;
          }
          uint64_t v18 = *v14;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }

        if (v19 >= a3) {
          break;
        }
        uint64_t v7 = v14 + 1;
        uint64_t v18 = v14[1];
        if (!v18) {
          goto LABEL_44;
        }
      }

uint64_t *sub_DD4F0(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return sub_32C38(v4, (uint64_t)v7, v6, v9);
  }

  return result;
}

void sub_DD588(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 16);
  uint64_t v56 = (uint64_t)&v56;
  unint64_t v57 = &v56;
  uint64_t v58 = 0LL;
  uint64_t v55 = (void *)(a2 + 8);
  if (v2 != (void *)(a2 + 8))
  {
    while (1)
    {
      uint64_t v3 = (void *)v2[3];
      uint64_t v62 = (uint64_t)&v62;
      unint64_t v63 = &v62;
      uint64_t v64 = 0LL;
      if (v3 == v2 + 4)
      {
        uint64_t v59 = (uint64_t)&v59;
        int v60 = &v59;
        std::string::size_type v29 = &v61;
      }

      else
      {
        do
        {
          sub_85A90((uint64_t *)&v65, &v62);
          uint64_t v4 = v3[6];
          if (!v4 || *(void *)(v4 + 8) == -1LL)
          {
            int v51 = (os_log_t *)sub_138E8(13);
            uint64_t v52 = *v51;
            if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RouteCache.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 316;
              _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Precondition failure.");
          }

          uint64_t v5 = v3[5];
          uint64_t v6 = (unint64_t *)(v4 + 16);
          do
            unint64_t v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
          unint64_t v8 = operator new(0x20uLL);
          *(void *)&__int128 v9 = v5;
          *((void *)&v9 + 1) = v4;
          v8[1] = v9;
          uint64_t v10 = (uint64_t)v65;
          *(void *)unint64_t v8 = v65;
          *((void *)v8 + 1) = &v65;
          *(void *)(v10 + 8) = v8;
          *(void *)AudioObjectPropertyAddress buf = buf;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0LL;
          BOOL v11 = __CFADD__(v67, 1LL);
          uint64_t v12 = v67 + 1;
          uint64_t v65 = v8;
          ++v67;
          if (!v11)
          {
            uint64_t v13 = v66;
            uint64_t v14 = *v66;
            *(void *)(v14 + 8) = &v65;
            **((void **)v8 + 1) = v14;
            uint64_t v15 = *(void *)buf;
            *(void *)(*(void *)buf + 8LL) = v13;
            *uint64_t v13 = v15;
            *((void *)v8 + 1) = buf;
            *(void *)AudioObjectPropertyAddress buf = v8;
            *(void *)&buf[16] = v12;
            uint64_t v67 = 0LL;
          }

          sub_85B80((uint64_t *)&v65);
          sub_85B80(&v62);
          uint64_t v16 = *(void *)&buf[16];
          if (*(void *)&buf[16])
          {
            uint64_t v18 = *(void *)buf;
            BOOL v17 = *(uint64_t **)&buf[8];
            uint64_t v19 = **(void **)&buf[8];
            *(void *)(v19 + 8) = *(void *)(*(void *)buf + 8LL);
            **(void **)(v18 + 8) = v19;
            uint64_t v20 = v62;
            *(void *)(v62 + 8) = v17;
            uint64_t *v17 = v20;
            *(void *)(v18 + 8) = &v62;
            uint64_t v62 = v18;
            v64 += v16;
            *(void *)&buf[16] = 0LL;
          }

          sub_85B80((uint64_t *)buf);
          unint64_t v21 = (void *)v3[1];
          if (v21)
          {
            do
            {
              unint64_t v22 = v21;
              unint64_t v21 = (void *)*v21;
            }

            while (v21);
          }

          else
          {
            do
            {
              unint64_t v22 = (void *)v3[2];
              BOOL v23 = *v22 == (void)v3;
              uint64_t v3 = v22;
            }

            while (!v23);
          }

          uint64_t v3 = v22;
        }

        while (v22 != v2 + 4);
        uint64_t v24 = v64;
        uint64_t v59 = (uint64_t)&v59;
        int v60 = &v59;
        uint64_t v61 = 0LL;
        if (!v64) {
          goto LABEL_21;
        }
        uint64_t v26 = v62;
        uint64_t v25 = v63;
        uint64_t v27 = *v63;
        *(void *)(v27 + 8) = *(void *)(v62 + 8);
        **(void **)(v26 + 8) = v27;
        uint64_t v28 = v59;
        *(void *)(v59 + 8) = v25;
        uint64_t *v25 = v28;
        *(void *)(v26 + 8) = &v59;
        uint64_t v59 = v26;
        uint64_t v61 = v24;
        std::string::size_type v29 = &v64;
      }

      uint64_t *v29 = 0LL;
LABEL_21:
      sub_85B80(&v62);
      sub_85A90((uint64_t *)&v65, &v56);
      for (uint64_t i = v60; i != &v59; uint64_t i = (uint64_t *)i[1])
      {
        sub_B8F68((uint64_t *)buf, i + 2, "", 449);
        uint64_t v31 = *(std::__shared_weak_count **)&buf[8];
        int v32 = *(_DWORD *)(*(void *)buf + 144LL);
        if (*(void *)&buf[8])
        {
          __int128 v33 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }

        if (v32 != 1885433888) {
          sub_85C34((uint64_t *)&v65, i[2], i[3]);
        }
      }

      *(void *)AudioObjectPropertyAddress buf = buf;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0LL;
      uint64_t v35 = v67;
      if (v67)
      {
        uint64_t v37 = (uint64_t)v65;
        CFStringRef v36 = v66;
        uint64_t v38 = *v66;
        *(void *)(v38 + 8) = v65[1];
        **(void **)(v37 + 8) = v38;
        uint64_t v39 = *(void *)buf;
        *(void *)(*(void *)buf + 8LL) = v36;
        void *v36 = v39;
        *(void *)(v37 + 8) = buf;
        *(void *)AudioObjectPropertyAddress buf = v37;
        *(void *)&buf[16] = v35;
        uint64_t v67 = 0LL;
      }

      sub_85B80((uint64_t *)&v65);
      sub_85B80(&v59);
      sub_85B80(&v56);
      uint64_t v40 = *(void *)&buf[16];
      if (*(void *)&buf[16])
      {
        uint64_t v42 = *(void *)buf;
        std::string::size_type v41 = *(uint64_t **)&buf[8];
        uint64_t v43 = **(void **)&buf[8];
        *(void *)(v43 + 8) = *(void *)(*(void *)buf + 8LL);
        **(void **)(v42 + 8) = v43;
        uint64_t v44 = v56;
        *(void *)(v56 + 8) = v41;
        uint64_t *v41 = v44;
        *(void *)(v42 + 8) = &v56;
        uint64_t v56 = v42;
        v58 += v40;
        *(void *)&buf[16] = 0LL;
      }

      sub_85B80((uint64_t *)buf);
      uint64_t v2 = (void *)v2[1];
      if (v2 == v55)
      {
        uint64_t v45 = v58;
        *a1 = (uint64_t)a1;
        a1[1] = (uint64_t)a1;
        a1[2] = 0LL;
        if (v45)
        {
          uint64_t v47 = v56;
          uint64_t v46 = v57;
          uint64_t v48 = *v57;
          *(void *)(v48 + 8) = *(void *)(v56 + 8);
          **(void **)(v47 + 8) = v48;
          uint64_t v49 = *a1;
          *(void *)(v49 + 8) = v46;
          uint64_t *v46 = v49;
          *a1 = v47;
          *(void *)(v47 + 8) = a1;
          a1[2] = v45;
          uint64_t v50 = &v58;
          goto LABEL_39;
        }

        goto LABEL_40;
      }
    }
  }

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  uint64_t v50 = a1 + 2;
LABEL_39:
  *uint64_t v50 = 0LL;
LABEL_40:
  sub_85B80(&v56);
}

void sub_DDA48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_85B80((uint64_t *)va1);
  sub_85B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DDAB0(int a1)
{
  uint64_t result = 1LL;
  if (a1 > 1919776354)
  {
    if (a1 > 1987081832)
    {
      if (a1 == 1987081833) {
        return result;
      }
      unsigned __int16 v4 = 30319;
    }

    else
    {
      if (a1 == 1919776355) {
        return result;
      }
      unsigned __int16 v4 = 26467;
    }

    int v3 = v4 | 0x76700000;
  }

  else if (a1 > 1768779618)
  {
    if (a1 == 1768779619) {
      return result;
    }
    int v3 = 1768781411;
  }

  else
  {
    if (a1 == 1735222132) {
      return result;
    }
    int v3 = 1768057203;
  }

  if (a1 != v3) {
    return 0LL;
  }
  return result;
}

std::string *sub_DDB64(std::string *a1, uint64_t a2)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  std::string::append(a1, ";", 1uLL);
  uint64_t v6 = (void *)(a2 + 8);
  memset(&v23, 0, sizeof(v23));
  uint64_t v7 = a2 + 8;
  while (1)
  {
    uint64_t v7 = *(void *)(v7 + 8);
    if ((void *)v7 == v6) {
      break;
    }
    std::string::append(&v23, "{ ", 2uLL);
    sub_DB594(&__p, (unsigned __int8 *)(v7 + 16));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = &__p;
    }
    else {
      uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v23, (const std::string::value_type *)v8, v9);
    if (v7 == *v6) {
      uint64_t v10 = " }";
    }
    else {
      uint64_t v10 = " },";
    }
    if (v7 == *v6) {
      std::string::size_type v11 = 2LL;
    }
    else {
      std::string::size_type v11 = 3LL;
    }
    std::string::append(&v23, v10, v11);
  }

  if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v12 = &v23;
  }
  else {
    uint64_t v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v13 = v23.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v13 = v23.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v12, v13);
  std::string::append(a1, "; Source Physical Devices: ", 0x1BuLL);
  sub_2DA930(&__p, (void *)(a2 + 32));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v14 = &__p;
  }
  else {
    uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v15 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v14, v15);
  std::string::append(a1, "; Destination Physical Devices: ", 0x20uLL);
  sub_2DA930(&__p, (void *)(a2 + 56));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v16 = &__p;
  }
  else {
    uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v17 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v16, v17);
  if (*(_BYTE *)(a2 + 112)) {
    std::operator+<char>("; Aggregate device clock device: ", a2 + 88);
  }
  else {
    sub_7D084(&__p, "");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v18 = &__p;
  }
  else {
    uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v19 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v18, v19);
  std::string::append(a1, "; Mode: ", 8uLL);
  sub_2CA1C(&__p, *(unsigned int *)(a2 + 120));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v20 = &__p;
  }
  else {
    uint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v21 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v20, v21);
  return std::string::append(a1, " ]", 2uLL);
}

void sub_DDE58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DDEE4(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_DDF54((uint64_t)(v3 + 2));
        operator delete(v3);
        int v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_DDF54(uint64_t a1)
{
}

uint64_t sub_DDF9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_85D64(v2);
  }

  return a1;
}

std::string *sub_DDFE8(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_33464(&__p, a2 + 7);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      uint64_t v8 = (unsigned int *)*((void *)a2 + 1);
      if (v8)
      {
        do
        {
          std::string::size_type v9 = v8;
          uint64_t v8 = *(unsigned int **)v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          std::string::size_type v9 = (unsigned int *)*((void *)a2 + 2);
          BOOL v10 = *(void *)v9 == (void)a2;
          a2 = v9;
        }

        while (!v10);
      }

      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_DE0EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_DE128(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = v5)
  {
    uint64_t v5 = *(void *)(i + 8);
    std::string::append(a1, "[ ", 2uLL);
    sub_DDB64(&__p, i + 16);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t p_p = &__p;
    }
    else {
      uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_p, size);
    if (v5 == a2) {
      uint64_t v8 = " ]";
    }
    else {
      uint64_t v8 = " ],";
    }
    if (v5 == a2) {
      std::string::size_type v9 = 2LL;
    }
    else {
      std::string::size_type v9 = 3LL;
    }
    std::string::append(a1, v8, v9);
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_DE234( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_DE274(uint64_t a1, uint64_t a2, std::__shared_weak_count *this)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (this)
  {
    p_shared_weak_owners = &this->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v7 + 1, (unint64_t *)p_shared_weak_owners));
  }

  if (v5 == a1)
  {
    BOOL v19 = 0LL;
    if (!this) {
      return v19;
    }
    goto LABEL_49;
  }

  uint64_t v8 = &this->__shared_weak_owners_;
  do
  {
    std::string::size_type v9 = *(void **)(v5 + 32);
    if (this)
    {
      do
        unint64_t v10 = __ldxr((unint64_t *)v8);
      while (__stxr(v10 + 1, (unint64_t *)v8));
    }

    uint64_t v29 = v5;
    std::string::size_type v11 = (void *)(v5 + 24);
    if (v9 != (void *)(v5 + 24))
    {
      while (1)
      {
        uint64_t v12 = (void *)v9[3];
        if (this)
        {
          do
            unint64_t v13 = __ldxr((unint64_t *)v8);
          while (__stxr(v13 + 1, (unint64_t *)v8));
        }

        if (v12 != v9 + 4) {
          break;
        }
        BOOL v19 = 0LL;
        if (this) {
          goto LABEL_37;
        }
LABEL_38:
        if (!v19)
        {
          std::string::size_type v9 = (void *)v9[1];
          if (v9 != v11) {
            continue;
          }
        }

        goto LABEL_44;
      }

      do
      {
        if (this)
        {
          uint64_t v14 = std::__shared_weak_count::lock(this);
          if (v14) {
            uint64_t v15 = a2;
          }
          else {
            uint64_t v15 = 0LL;
          }
        }

        else
        {
          uint64_t v15 = 0LL;
          uint64_t v14 = 0LL;
        }

        uint64_t v16 = (std::__shared_weak_count *)v12[6];
        if (v16 && (std::string::size_type v17 = std::__shared_weak_count::lock(v16)) != 0LL)
        {
          uint64_t v18 = v17;
          BOOL v19 = v15 == v12[5];
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            unint64_t v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }

        else
        {
          BOOL v19 = v15 == 0;
        }

        if (v14)
        {
          unint64_t v22 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }

        if (v19) {
          break;
        }
        uint64_t v24 = (void *)v12[1];
        if (v24)
        {
          do
          {
            uint64_t v25 = v24;
            uint64_t v24 = (void *)*v24;
          }

          while (v24);
        }

        else
        {
          do
          {
            uint64_t v25 = (void *)v12[2];
            BOOL v26 = *v25 == (void)v12;
            uint64_t v12 = v25;
          }

          while (!v26);
        }

        uint64_t v12 = v25;
      }

      while (v25 != v9 + 4);
      if (!this) {
        goto LABEL_38;
      }
LABEL_37:
      std::__shared_weak_count::__release_weak(this);
      goto LABEL_38;
    }

    BOOL v19 = 0LL;
LABEL_44:
    if (this) {
      std::__shared_weak_count::__release_weak(this);
    }
    if (v19) {
      break;
    }
    uint64_t v5 = *(void *)(v29 + 8);
  }

  while (v5 != a1);
  if (this) {
LABEL_49:
  }
    std::__shared_weak_count::__release_weak(this);
  return v19;
}

uint64_t sub_DE498(void *a1, int a2)
{
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1)
  {
    while (2)
    {
      for (uint64_t i = (void *)v2[4]; i != v2 + 3; uint64_t i = (void *)i[1])
      {
        uint64_t v6 = (void *)i[3];
        if (v6 != i + 4)
        {
          do
          {
            sub_B8F68(&v15, v6 + 5, "", 311);
            unint64_t v7 = v16;
            int v8 = *(_DWORD *)(v15 + 144);
            if (v16)
            {
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                unint64_t v10 = __ldaxr(p_shared_owners);
              while (__stlxr(v10 - 1, p_shared_owners));
              if (!v10)
              {
                ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                std::__shared_weak_count::__release_weak(v7);
              }
            }

            if (v8 == a2) {
              return 1LL;
            }
            std::string::size_type v11 = (void *)v6[1];
            if (v11)
            {
              do
              {
                uint64_t v12 = v11;
                std::string::size_type v11 = (void *)*v11;
              }

              while (v11);
            }

            else
            {
              do
              {
                uint64_t v12 = (void *)v6[2];
                BOOL v13 = *v12 == (void)v6;
                uint64_t v6 = v12;
              }

              while (!v13);
            }

            uint64_t v6 = v12;
          }

          while (v12 != i + 4);
        }
      }

      uint64_t v2 = (void *)v2[1];
      if (v2 != a1) {
        continue;
      }
      break;
    }
  }

  return 0LL;
}

void sub_DE5C4(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    if (v4 >> 61) {
      sub_7A87C();
    }
    uint64_t v5 = sub_7DC90(v4);
    *a1 = v5;
    a1[1] = v5;
    a1[2] = &v5[v6];
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  for (i = *(void *)(a2 + 8); i != a2; uint64_t v5 = v10)
  {
    uint64_t v8 = i + 16;
    unint64_t v9 = a1[2];
    if ((unint64_t)v5 >= v9)
    {
      std::string::size_type v11 = (void *)*a1;
      uint64_t v12 = ((uint64_t)v5 - *a1) >> 3;
      unint64_t v13 = v12 + 1;
      uint64_t v14 = v9 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)sub_7DC90(v15);
      }
      else {
        uint64_t v16 = 0LL;
      }
      std::string::size_type v17 = (void *)(v15 + 8 * v12);
      void *v17 = v8;
      unint64_t v10 = v17 + 1;
      if (v5 != v11)
      {
        do
        {
          uint64_t v18 = *--v5;
          *--std::string::size_type v17 = v18;
        }

        while (v5 != v11);
        uint64_t v5 = (void *)*a1;
      }

      *a1 = v17;
      a1[1] = v10;
      a1[2] = v15 + 8 * v16;
      if (v5) {
        operator delete(v5);
      }
    }

    else
    {
      void *v5 = v8;
      unint64_t v10 = v5 + 1;
    }

    a1[1] = v10;
    uint64_t i = *(void *)(i + 8);
  }

void sub_DE708(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }

  _Unwind_Resume(exception_object);
}

void *sub_DE728(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    while (1)
    {
      if (!*a2)
      {
        unint64_t v4 = (os_log_t *)sub_138E8(13);
        uint64_t v5 = *v4;
        if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v7 = 136315394;
          uint64_t v8 = "RouteCache.cpp";
          __int16 v9 = 1024;
          int v10 = 591;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v7,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      if (*(void *)*a2 == a1) {
        break;
      }
      if (++a2 == a3) {
        return a3;
      }
    }
  }

  return a2;
}

void sub_DE844(_Unwind_Exception *exception_object)
{
}

void sub_DE864(void *a1)
{
  uint64_t v1 = (void *)sub_151868(a1);
  operator delete(v1);
}

uint64_t sub_DE878(uint64_t a1, int *a2)
{
  uint64_t v2 = 0LL;
  int v3 = *a2;
  if (*a2 > 1936092514)
  {
    if (v3 > 1936482675)
    {
      if (v3 != 1936482676)
      {
        if (v3 == 1952542835) {
          return (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 24LL))(*(void *)(a1 + 120));
        }
        return sub_151638(a1, a2);
      }
    }

    else
    {
      if (v3 == 1936092515) {
        return 1LL;
      }
      if (v3 != 1936222577) {
        return sub_151638(a1, a2);
      }
    }

    return v2;
  }

  if (v3 == 1718641517) {
    return 1LL;
  }
  return sub_151638(a1, a2);
}

double sub_DE938(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1) & 1) == 0)
  {
    uint64_t v37 = (os_log_t *)sub_138E8(13);
    uint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(void *)unint64_t v99 = *(void *)a2;
      *(_DWORD *)&v99[8] = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)v99);
      uint64_t v39 = SBYTE3(v110) >= 0 ? __p : *(_BYTE **)__p;
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 221;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v39;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)buf,  0x1Cu);
      if (SBYTE3(v110) < 0) {
        operator delete(*(void **)__p);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    std::string::size_type v41 = (os_log_t *)sub_138E8(13);
    uint64_t v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(void *)unint64_t v99 = *(void *)a2;
      *(_DWORD *)&v99[8] = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)v99);
      uint64_t v43 = SBYTE3(v110) >= 0 ? __p : *(_BYTE **)__p;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 222;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v43;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = a3;
      HIWORD(buf[8]) = 2048;
      *(void *)&buf[9] = a4;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
      if (SBYTE3(v110) < 0) {
        operator delete(*(void **)__p);
      }
    }

    uint64_t v44 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v44 = &off_4865A0;
    v44[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v45 = (os_log_t *)sub_138E8(13);
    uint64_t v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      *(void *)unint64_t v99 = *(void *)a2;
      *(_DWORD *)&v99[8] = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)v99);
      uint64_t v47 = SBYTE3(v110) >= 0 ? __p : *(_BYTE **)__p;
      buf[0] = 136315906;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 223;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v47;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)buf,  0x26u);
      if (SBYTE3(v110) < 0) {
        operator delete(*(void **)__p);
      }
    }

    uint64_t v48 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v48 = &off_4865A0;
    v48[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 40LL))(a1, a2) & 1) == 0)
  {
    uint64_t v49 = (os_log_t *)sub_138E8(13);
    uint64_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      *(void *)unint64_t v99 = *(void *)a2;
      *(_DWORD *)&v99[8] = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)v99);
      int v51 = SBYTE3(v110) >= 0 ? __p : *(_BYTE **)__p;
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 224;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v51;
      _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  (uint8_t *)buf,  0x1Cu);
      if (SBYTE3(v110) < 0) {
        operator delete(*(void **)__p);
      }
    }

    uint64_t v52 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v52 = &off_4865A0;
    v52[2] = 1852797029;
  }

  int v14 = *a2;
  if (*a2 == 1936092532 || v14 == 1885762592)
  {
    uint64_t v15 = sub_138E8(4);
    uint64_t v16 = sub_138E8(35);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = (int)buf[v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
LABEL_13:
    unint64_t v22 = *(os_log_s **)v15;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v23 = *a2 == 1885762592 ? "physical" : "virtual";
      sub_2CC00((std::string *)__p, a6);
      uint64_t v24 = SBYTE3(v110) >= 0 ? __p : *(_BYTE **)__p;
      int v25 = *(_DWORD *)(a1 + 8);
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 226;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v23;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v24;
      HIWORD(buf[9]) = 1024;
      buf[10] = v25;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client request to set %s format %s on virtual audio stream %u.",  (uint8_t *)buf,  0x2Cu);
      if (SBYTE3(v110) < 0) {
        operator delete(*(void **)__p);
      }
    }

    int v14 = *a2;
  }

  if (v14 > 1936092514)
  {
    if (v14 == 1936092515)
    {
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
      {
        uint64_t v74 = (os_log_t *)sub_138E8(13);
        unsigned __int8 v75 = *v74;
        if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
        {
          *(void *)unint64_t v99 = *(void *)a2;
          *(_DWORD *)&v99[8] = a2[2];
          sub_613AC((uint64_t)__p, (unsigned int *)v99);
          int v76 = SBYTE3(v110);
          unint64_t v77 = *(_BYTE **)__p;
          int v78 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          unint64_t v79 = __p;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
          if (v76 < 0) {
            unint64_t v79 = v77;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 294;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v79;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a5;
          HIWORD(buf[8]) = 1024;
          buf[9] = v78;
          _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)buf,
            0x28u);
          if (SBYTE3(v110) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v80 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v80 = &off_4865A0;
        v80[2] = 561211770;
      }

      (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 120) + 48LL))( *(void *)(a1 + 120),  a2,  a3,  a4,  a5,  a6);
      sub_C6254(*(unint64_t **)(a1 + 112));
    }

    else
    {
      if (v14 != 1936092532) {
        goto LABEL_52;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
      {
        int v60 = (os_log_t *)sub_138E8(13);
        uint64_t v61 = *v60;
        if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
        {
          *(void *)unint64_t v99 = *(void *)a2;
          *(_DWORD *)&v99[8] = a2[2];
          sub_613AC((uint64_t)__p, (unsigned int *)v99);
          int v62 = SBYTE3(v110);
          unint64_t v63 = *(_BYTE **)__p;
          int v64 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          uint64_t v65 = __p;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
          if (v62 < 0) {
            uint64_t v65 = v63;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 233;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v65;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a5;
          HIWORD(buf[8]) = 1024;
          buf[9] = v64;
          _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)buf,
            0x28u);
          if (SBYTE3(v110) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v66 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v66 = &off_4865A0;
        v66[2] = 561211770;
      }

      __int128 v30 = *(_OWORD *)(a6 + 16);
      *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a6;
      *(_OWORD *)&uint8_t buf[4] = v30;
      *(void *)&buf[8] = *(void *)(a6 + 32);
      if (*(_BYTE *)(a1 + 129) && !sub_E04F0(*(void *)(a1 + 120), (double *)buf))
      {
        uint64_t v92 = (os_log_t *)sub_138E8(13);
        __int128 v93 = *v92;
        if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
          __int16 v107 = 1024;
          int v108 = 239;
          _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): Sample rate changes are not allowed currently.",  __p,  0x12u);
        }

        unint64_t v94 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v94 = &off_4865A0;
        v94[2] = 560226676;
      }

      if ((sub_1AE190(*(void *)(a1 + 104), (uint64_t)buf) & 1) == 0)
      {
        uint64_t v85 = (os_log_t *)sub_138E8(4);
        uint64_t v86 = *v85;
        if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_DEBUG))
        {
          sub_2CC00((std::string *)v99, (uint64_t)buf);
          int v87 = SBYTE3(v103) >= 0 ? v99 : *(_BYTE **)v99;
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
          __int16 v107 = 1024;
          int v108 = 244;
          __int16 v109 = 2080;
          uint64_t v110 = v87;
          _os_log_impl( &dword_0,  v86,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to set unsupported value for kAudioStreamPropertyVirtualFormat (%s). Poor form but not lik ely a serious issue. Quietly returning failure.",  __p,  0x1Cu);
          if (SBYTE3(v103) < 0) {
            operator delete(*(void **)v99);
          }
        }

        int v88 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v88 = &off_4865A0;
        v88[2] = 560226676;
      }

      sub_1AE28C((uint64_t *)(*(void *)(a1 + 104) + 80LL), (__int128 *)buf, *(double *)(*(void *)(a1 + 104) + 16LL));
      int v98 = 40;
      (*(void (**)(uint64_t, int *, void, void, int *, _BYTE *))(*(void *)a1 + 56LL))( a1,  a2,  0LL,  0LL,  &v98,  __p);
      if (sub_ABEE0(__p, buf, 0))
      {
        uint64_t v31 = sub_138E8(4);
        if ((*(_BYTE *)(v31 + 8) & 1) != 0)
        {
          int v32 = *(os_log_s **)v31;
          if (*(void *)v31)
          {
            if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
            {
              sub_2CC00(&v97, (uint64_t)buf);
              int size = (char)v97.__r_.__value_.__s.__size_;
              std::string::size_type v34 = v97.__r_.__value_.__r.__words[0];
              sub_2CC00(&v96, (uint64_t)__p);
              uint64_t v35 = &v97;
              if (size < 0) {
                uint64_t v35 = (std::string *)v34;
              }
              if ((v96.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                CFStringRef v36 = &v96;
              }
              else {
                CFStringRef v36 = (std::string *)v96.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)unint64_t v99 = 136315906;
              *(void *)&v99[4] = "VirtualAudio_Stream.cpp";
              __int16 v100 = 1024;
              int v101 = 258;
              __int16 v102 = 2080;
              uint64_t v103 = v35;
              __int16 v104 = 2080;
              int v105 = v36;
              _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Requested stream format %s is equivalent to the current format %s.  Ignoring the new format request.",  v99,  0x26u);
            }
          }
        }
      }

      else
      {
        *(double *)&__int128 v28 = sub_1AE428(*(void *)(a1 + 104), (__int128 *)buf);
      }
    }
  }

  else
  {
    if (v14 != 1718641517)
    {
      if (v14 == 1885762592)
      {
        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
        {
          unint64_t v53 = (os_log_t *)sub_138E8(13);
          uint64_t v54 = *v53;
          if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
          {
            *(void *)unint64_t v99 = *(void *)a2;
            *(_DWORD *)&v99[8] = a2[2];
            sub_613AC((uint64_t)__p, (unsigned int *)v99);
            int v55 = SBYTE3(v110);
            uint64_t v56 = *(_BYTE **)__p;
            int v57 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
            uint64_t v58 = __p;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
            if (v55 < 0) {
              uint64_t v58 = v56;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 270;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v58;
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = a5;
            HIWORD(buf[8]) = 1024;
            buf[9] = v57;
            _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              (uint8_t *)buf,
              0x28u);
            if (SBYTE3(v110) < 0) {
              operator delete(*(void **)__p);
            }
          }

          uint64_t v59 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v59 = &off_4865A0;
          v59[2] = 561211770;
        }

        __int128 v26 = *(_OWORD *)(a6 + 16);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a6;
        *(_OWORD *)&uint8_t buf[4] = v26;
        *(void *)&buf[8] = *(void *)(a6 + 32);
        if (*(_BYTE *)(a1 + 129) && !sub_E04F0(*(void *)(a1 + 120), (double *)buf))
        {
          BOOL v89 = (os_log_t *)sub_138E8(13);
          uint64_t v90 = *v89;
          if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
            __int16 v107 = 1024;
            int v108 = 276;
            _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): Sample rate changes are not allowed currently.",  __p,  0x12u);
          }

          uint64_t v91 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v91 = &off_4865A0;
          v91[2] = 560226676;
        }

        if ((sub_1AE190(*(void *)(a1 + 104), (uint64_t)buf) & 1) == 0)
        {
          uint64_t v81 = (os_log_t *)sub_138E8(4);
          int v82 = *v81;
          if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_DEBUG))
          {
            sub_2CC00((std::string *)v99, (uint64_t)buf);
            char v83 = SBYTE3(v103) >= 0 ? v99 : *(_BYTE **)v99;
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
            __int16 v107 = 1024;
            int v108 = 281;
            __int16 v109 = 2080;
            uint64_t v110 = v83;
            _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to set unsupported value for kAudioStreamPropertyPhysicalFormat (%s). Poor form but not likely a serious issue. Quietly returning failure.",  __p,  0x1Cu);
            if (SBYTE3(v103) < 0) {
              operator delete(*(void **)v99);
            }
          }

          uint64_t v84 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v84 = &off_4865A0;
          v84[2] = 560226676;
        }

        sub_1AE28C( (uint64_t *)(*(void *)(a1 + 104) + 56LL),  (__int128 *)buf,  *(double *)(*(void *)(a1 + 104) + 16LL));
        uint64_t v27 = *(void *)(a1 + 104);
        if ((*(unsigned int (**)(void, _DWORD *))(**(void **)(v27 + 8) + 176LL))( *(void *)(v27 + 8),  buf))
        {
          uint64_t v29 = *(void *)&buf[8];
          __int128 v28 = *(_OWORD *)&buf[4];
          *(_OWORD *)(v27 + 16) = *(_OWORD *)buf;
          *(_OWORD *)(v27 + sub_7A768(v2 - 32) = v28;
          *(void *)(v27 + 48) = v29;
        }

        return *(double *)&v28;
      }

void sub_DFA58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DFA9C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  int v5 = *(char *)(a1 + 55);
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 55);
  }
  if (!v6)
  {
    std::to_string(&v49, *(_DWORD *)(a1 + 8));
    int v7 = std::string::insert(&v49, 0LL, "[ id: ", 6uLL);
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v9 = &v50;
    }
    else {
      __int16 v9 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v50.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v9, size);
    snprintf((char *)&__str, 0x13uLL, "%p", (const void *)a1);
    sub_7D084(&v49, (char *)&__str);
    std::string::size_type v11 = std::string::insert(&v49, 0LL, "; addr: ", 8uLL);
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v13 = &v50;
    }
    else {
      unint64_t v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v14 = v50.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v14 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v13, v14);
    else {
      uint64_t v15 = "in";
    }
    sub_7D084(&v49, v15);
    uint64_t v16 = std::string::insert(&v49, 0LL, "; dir: ", 7uLL);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v18 = &v50;
    }
    else {
      uint64_t v18 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v19 = v50.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v19 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v18, v19);
    uint64_t v20 = *(unsigned int **)(a1 + 112);
    std::to_string(&v48, v20[2]);
    char v21 = std::string::insert(&v48, 0LL, "[ ", 2uLL);
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v23 = std::string::append(&__str, "/", 1uLL);
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    snprintf(__s, 0x13uLL, "%p", v20);
    sub_7D084(__p, __s);
    if ((v47 & 0x80u) == 0) {
      int v25 = __p;
    }
    else {
      int v25 = (void **)__p[0];
    }
    if ((v47 & 0x80u) == 0) {
      std::string::size_type v26 = v47;
    }
    else {
      std::string::size_type v26 = (std::string::size_type)__p[1];
    }
    uint64_t v27 = std::string::append(&v49, (const std::string::value_type *)v25, v26);
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v29 = std::string::append(&v50, " ]", 2uLL);
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v31 = std::string::insert(&v43, 0LL, "; owning VAD: ", 0xEuLL);
    __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    int64_t cap = v31->__r_.__value_.__l.__cap_;
    *(_OWORD *)uint64_t v44 = v32;
    v31->__r_.__value_.__l.__size_ = 0LL;
    v31->__r_.__value_.__l.__cap_ = 0LL;
    v31->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v33 = v44;
    }
    else {
      __int128 v33 = (void **)v44[0];
    }
    if (cap >= 0) {
      std::string::size_type v34 = HIBYTE(cap);
    }
    else {
      std::string::size_type v34 = (std::string::size_type)v44[1];
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v33, v34);
    if (SHIBYTE(cap) < 0) {
      operator delete(v44[0]);
    }
    sub_23FE8((uint64_t)&v49, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8LL));
    uint64_t v35 = std::string::insert(&v49, 0LL, "; virt strms: ", 0xEuLL);
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v37 = &v50;
    }
    else {
      uint64_t v37 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v38 = v50.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v38 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v37, v38);
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 120) + 160LL))(&__str);
    sub_2D9BB0(&v49, (uint64_t)&__str, 1);
    uint64_t v39 = std::string::insert(&v49, 0LL, "; associated ports: ", 0x14uLL);
    __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0LL;
    v39->__r_.__value_.__l.__cap_ = 0LL;
    v39->__r_.__value_.__r.__words[0] = 0LL;
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v41 = &v50;
    }
    else {
      std::string::size_type v41 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v42 = v50.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v42 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v41, v42);
    sub_85B80((uint64_t *)&__str);
    std::string::append((std::string *)(a1 + 32), " ]", 2uLL);
    if ((*(_BYTE *)(a1 + 55) & 0x80) == 0) {
      goto LABEL_6;
    }
LABEL_87:
    sub_24054((_BYTE *)a2, *(void **)(a1 + 32), *(void *)(a1 + 40));
    goto LABEL_88;
  }

  if ((v5 & 0x80) != 0) {
    goto LABEL_87;
  }
LABEL_6:
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 16) = *(void *)(a1 + 48);
LABEL_88:
  os_unfair_lock_unlock(v4);
}

void sub_E000C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
}

uint64_t sub_E0164(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (!v2)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    __int128 v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      __int16 v21 = 1024;
      int v22 = 347;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadStreamError) [mStream is NULL]: the underlying stream is NULL",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561214578;
  }

  uint64_t v4 = *(void *)(a1 + 112);
  int v5 = (*(uint64_t (**)(void, _BYTE *))(*(void *)v2 + 112LL))(*(void *)(a1 + 120), buf);
  if (v5)
  {
    int v10 = (os_log_t *)sub_138E8(13);
    std::string::size_type v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int128 v17 = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 1417;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error getting the current hardware stream format",  (uint8_t *)&v16,  0x12u);
    }

    __int128 v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v12 = &off_4865A0;
    void v12[2] = v5;
  }

  if (*(void *)(v4 + 624) && *(double *)buf != *a2)
  {
    unint64_t v13 = (os_log_t *)sub_138E8(13);
    std::string::size_type v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int128 v17 = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 1422;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Sample rate changes are currently blocked by policy.",  (uint8_t *)&v16,  0x12u);
    }

    uint64_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v15 = &off_4865A0;
    void v15[2] = 1852797029;
  }

  (*(void (**)(void, double *, uint64_t))(**(void **)(v4 + 1008) + 520LL))(*(void *)(v4 + 1008), a2, v2);
  sub_C6A74((unint64_t *)v4, (uint64_t)a2, v2);
  return 1LL;
}

void sub_E0438( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __int16 v9 = (os_log_t *)sub_138E8(1);
    int v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 1440;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error re-setting the current stream format",  (uint8_t *)&a9,  0x12u);
      }
    }

    __cxa_end_catch();
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_E04F0(uint64_t a1, double *a2)
{
  int v3 = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 112LL))(a1, v9);
  if (v3)
  {
    int v8 = v3;
    int v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      std::string::size_type v11 = "VirtualAudio_Stream.cpp";
      __int16 v12 = 1024;
      int v13 = 579;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: mStream->GetCurrentFormat returned an error",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v8;
  }

  return v9[0] == *a2;
}

uint64_t sub_E0604(uint64_t a1, int a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160LL))(v14);
  for (uint64_t i = (uint64_t *)v14[1]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v14)
    {
      uint64_t v10 = 0LL;
      goto LABEL_13;
    }

    uint64_t v4 = (std::__shared_weak_count *)i[3];
    if (v4)
    {
      int v5 = std::__shared_weak_count::lock(v4);
      if (v5) {
        break;
      }
    }

uint64_t sub_E06F8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v6 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v7 = *(void *)(a1 + 120);
  if (!v7)
  {
    __int128 v17 = (os_log_t *)sub_138E8(13);
    __int16 v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 530;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: the underlying stream is NULL",  buf,  0x12u);
    }

    uint64_t v9 = 0LL;
    if (v6) {
      goto LABEL_153;
    }
    return v9;
  }

  uint64_t v89 = 0LL;
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v7 + 112LL))(v7, &v87);
  uint64_t v9 = (_DWORD)v8 == 0;
  if ((_DWORD)v8)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(4);
    os_log_t v11 = *v10;
    if (!*v10 || !os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_152;
    }
    sub_2CA1C(__p, v8);
    if ((SBYTE7(v93) & 0x80u) == 0) {
      __int16 v12 = __p;
    }
    else {
      __int16 v12 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 539;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&uint8_t buf[20] = v12;
    unint64_t v13 = "%25s:%-5d error '%s' getting underlying stream format";
    std::string::size_type v14 = v11;
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    uint32_t v16 = 28;
  }

  else
  {
    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v20 = *(void **)(a1 + 112);
    __int128 v21 = *(_OWORD *)(v19 + 32);
    __int128 v84 = *(_OWORD *)(v19 + 16);
    __int128 v85 = v21;
    uint64_t v86 = *(void *)(v19 + 48);
    double v22 = *(double *)&v84;
    int v83 = v6;
    if (*(double *)&v84 != 0.0 && *(double *)&v87 != 0.0 && *(double *)&v84 != *(double *)&v87
      || DWORD2(v84) && DWORD2(v87) && DWORD2(v84) != DWORD2(v87)
      || (_DWORD)v85 && (_DWORD)v88 && (_DWORD)v85 != (_DWORD)v88
      || DWORD1(v85) && DWORD1(v88) && DWORD1(v85) != DWORD1(v88)
      || DWORD2(v85) && DWORD2(v88) && DWORD2(v85) != DWORD2(v88)
      || HIDWORD(v85) && HIDWORD(v88) && HIDWORD(v85) != HIDWORD(v88)
      || (_DWORD)v86 && (_DWORD)v89 && (_DWORD)v86 != (_DWORD)v89
      || (sub_2854C((uint64_t)&v84, (uint64_t)&v87) & 1) == 0)
    {
      __int128 v23 = *(_OWORD *)(v19 + 32);
      *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v19 + 16);
      *(_OWORD *)&buf[16] = v23;
      *(void *)&uint8_t buf[32] = *(void *)(v19 + 48);
      *(_OWORD *)std::string __p = v87;
      __int128 v93 = v88;
      uint64_t v94 = v89;
      unsigned int v80 = v9;
      if (*(double *)buf != 0.0 && *(double *)__p != 0.0 && *(double *)buf != *(double *)__p
        || *(_DWORD *)&buf[8] && LODWORD(__p[1]) && *(_DWORD *)&buf[8] != LODWORD(__p[1])
        || *(_DWORD *)&buf[16] && (_DWORD)v93 && *(_DWORD *)&buf[16] != (_DWORD)v93
        || *(_DWORD *)&buf[20] && DWORD1(v93) && *(_DWORD *)&buf[20] != DWORD1(v93)
        || *(_DWORD *)&buf[24] && DWORD2(v93) && *(_DWORD *)&buf[24] != DWORD2(v93)
        || *(_DWORD *)&buf[28] && HIDWORD(v93) && *(_DWORD *)&buf[28] != HIDWORD(v93)
        || *(_DWORD *)&buf[32] && (_DWORD)v94 && *(_DWORD *)&buf[32] != (_DWORD)v94)
      {
        int v24 = 1;
      }

      else
      {
        int v24 = sub_2854C((uint64_t)buf, (uint64_t)__p) ^ 1;
      }

      double v25 = *(double *)&v87;
      int v81 = HIDWORD(v88);
      int v82 = HIDWORD(v85);
      int v26 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 92);
      if (*(_BYTE *)(a1 + 88)) {
        int v27 = 1768845428;
      }
      else {
        int v27 = 1869968496;
      }
      LODWORD(v90) = 1885762592;
      HIDWORD(v90) = v27;
      int v91 = v26;
      sub_87EB4(a2, (int *)&v90);
      if (v26 == 1)
      {
        int v91 = 0;
        sub_87EB4(a2, (int *)&v90);
      }

      uint64_t v90 = 0x676C6F6270667420LL;
      int v91 = 0;
      sub_87EB4(a3, (int *)&v90);
      if (v24)
      {
        if (*(_BYTE *)(a1 + 88)) {
          int v28 = 1768845428;
        }
        else {
          int v28 = 1869968496;
        }
        LODWORD(v90) = 1936092532;
        HIDWORD(v90) = v28;
        int v91 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 92);
        sub_87EB4(a2, (int *)&v90);
        if (v26 == 1)
        {
          int v91 = 0;
          sub_87EB4(a2, (int *)&v90);
        }

        uint64_t v90 = 0x676C6F6273666D74LL;
        int v91 = 0;
        sub_87EB4(a3, (int *)&v90);
      }

      if (v22 != v25)
      {
        uint64_t v90 = 0x676C6F626E737274LL;
        int v91 = 0;
        sub_87EB4(a2, (int *)&v90);
        int v29 = *(unsigned __int8 *)(a1 + 88);
        __int128 v30 = v20 + 65;
        uint64_t v31 = v20 + 62;
        uint64_t v32 = v20[66];
        uint64_t v34 = v20[62];
        uint64_t v33 = v20[63];
        if (*(_BYTE *)(a1 + 88)) {
          uint64_t v35 = v20[63];
        }
        else {
          uint64_t v35 = v20[66];
        }
        uint64_t v36 = v20[65];
        if (*(_BYTE *)(a1 + 88)) {
          uint64_t v37 = v20[62];
        }
        else {
          uint64_t v37 = v20[65];
        }
        unint64_t v79 = a3;
        if (((v35 - v37) & 0x7FFFFFFF8LL) != 0)
        {
          uint64_t v90 = 0x696E70746C746E63LL;
          int v91 = 0;
          sub_87EB4(a2, (int *)&v90);
          uint64_t v90 = 0x696E707473616674LL;
          int v91 = 0;
          sub_87EB4(a2, (int *)&v90);
          int v29 = *(unsigned __int8 *)(a1 + 88);
          uint64_t v32 = v20[66];
          uint64_t v34 = v20[62];
          uint64_t v33 = v20[63];
          uint64_t v38 = *(_BYTE *)(a1 + 88) ? v20[63] : v20[66];
          uint64_t v36 = v20[65];
          uint64_t v39 = *(_BYTE *)(a1 + 88) ? v20[62] : v20[65];
          unint64_t v40 = v38 - v39;
          if ((v40 & 0x7FFFFFFF8LL) != 0)
          {
            int v78 = v20;
            unint64_t v41 = 0LL;
            uint64_t v42 = (v40 >> 3);
            do
            {
              if (*(_BYTE *)(a1 + 88)) {
                std::string v43 = v31;
              }
              else {
                std::string v43 = v30;
              }
              uint64_t v45 = v43;
              uint64_t v44 = *v43;
              if (v41 >= (v45[1] - v44) >> 3) {
                uint64_t v46 = 0LL;
              }
              else {
                uint64_t v46 = *(void *)(v44 + 8 * v41);
              }
              if (*(_BYTE *)(v46 + 88)) {
                int v47 = 1768845428;
              }
              else {
                int v47 = 1869968496;
              }
              LODWORD(v90) = 1885762592;
              HIDWORD(v90) = v47;
              int v91 = *(_DWORD *)(v46 + 96) + *(_DWORD *)(v46 + 92);
              int v48 = v91;
              sub_87EB4(a2, (int *)&v90);
              if (v48 == 1)
              {
                int v91 = 0;
                sub_87EB4(a2, (int *)&v90);
              }

              if (*(_BYTE *)(v46 + 88)) {
                int v49 = 1768845428;
              }
              else {
                int v49 = 1869968496;
              }
              LODWORD(v90) = 1936092532;
              HIDWORD(v90) = v49;
              int v50 = *(_DWORD *)(v46 + 96) + *(_DWORD *)(v46 + 92);
              int v91 = v50;
              sub_87EB4(a2, (int *)&v90);
              if (v50 == 1)
              {
                int v91 = 0;
                sub_87EB4(a2, (int *)&v90);
              }

              ++v41;
            }

            while (v42 != v41);
            int v29 = *(unsigned __int8 *)(a1 + 88);
            uint64_t v20 = v78;
            uint64_t v32 = v78[66];
            uint64_t v34 = v78[62];
            uint64_t v33 = v78[63];
            uint64_t v36 = v78[65];
          }
        }

        BOOL v51 = v29 == 0;
        if (v29) {
          uint64_t v52 = v32;
        }
        else {
          uint64_t v52 = v33;
        }
        if (v51) {
          uint64_t v53 = v34;
        }
        else {
          uint64_t v53 = v36;
        }
        if (((v52 - v53) & 0x7FFFFFFF8LL) != 0)
        {
          uint64_t v90 = 0x6F7574706C746E63LL;
          int v91 = 0;
          sub_87EB4(a2, (int *)&v90);
          uint64_t v90 = 0x6F75747073616674LL;
          int v91 = 0;
          sub_87EB4(a2, (int *)&v90);
          if (*(_BYTE *)(a1 + 88)) {
            uint64_t v54 = v20 + 66;
          }
          else {
            uint64_t v54 = v20 + 63;
          }
          uint64_t v55 = *v54;
          uint64_t v56 = v20 + 62;
          if (*(_BYTE *)(a1 + 88)) {
            uint64_t v56 = v20 + 65;
          }
          unint64_t v57 = v55 - *v56;
          if ((v57 & 0x7FFFFFFF8LL) != 0)
          {
            unint64_t v58 = 0LL;
            uint64_t v59 = (v57 >> 3);
            do
            {
              if (*(_BYTE *)(a1 + 88)) {
                int v60 = v30;
              }
              else {
                int v60 = v31;
              }
              int v62 = v60;
              uint64_t v61 = *v60;
              if (v58 >= (v62[1] - v61) >> 3) {
                uint64_t v63 = 0LL;
              }
              else {
                uint64_t v63 = *(void *)(v61 + 8 * v58);
              }
              if (*(_BYTE *)(v63 + 88)) {
                int v64 = 1768845428;
              }
              else {
                int v64 = 1869968496;
              }
              LODWORD(v90) = 1885762592;
              HIDWORD(v90) = v64;
              int v91 = *(_DWORD *)(v63 + 96) + *(_DWORD *)(v63 + 92);
              int v65 = v91;
              sub_87EB4(a2, (int *)&v90);
              if (v65 == 1)
              {
                int v91 = 0;
                sub_87EB4(a2, (int *)&v90);
              }

              if (*(_BYTE *)(v63 + 88)) {
                int v66 = 1768845428;
              }
              else {
                int v66 = 1869968496;
              }
              LODWORD(v90) = 1936092532;
              HIDWORD(v90) = v66;
              int v67 = *(_DWORD *)(v63 + 96) + *(_DWORD *)(v63 + 92);
              int v91 = v67;
              sub_87EB4(a2, (int *)&v90);
              if (v67 == 1)
              {
                int v91 = 0;
                sub_87EB4(a2, (int *)&v90);
              }

              ++v58;
            }

            while (v59 != v58);
          }
        }

        uint64_t v90 = 0x676C6F626E737274LL;
        int v91 = 0;
        sub_87EB4(v79, (int *)&v90);
        uint64_t v90 = 0x676C6F626C746E63LL;
        int v91 = 0;
        sub_87EB4(v79, (int *)&v90);
      }

      if (v82 != v81)
      {
        if (*(_BYTE *)(a1 + 88)) {
          int v68 = 1768845428;
        }
        else {
          int v68 = 1869968496;
        }
        LODWORD(v90) = 1936482681;
        HIDWORD(v90) = v68;
        int v91 = 0;
        sub_87EB4(a2, (int *)&v90);
      }

      uint64_t v19 = *(void *)(a1 + 104);
      int v6 = v83;
      uint64_t v9 = v80;
    }

    uint64_t v69 = v89;
    __int128 v70 = v88;
    *(_OWORD *)(v19 + 16) = v87;
    *(_OWORD *)(v19 + sub_7A768(v2 - 32) = v70;
    *(void *)(v19 + 48) = v69;
    int v71 = (os_log_t *)sub_138E8(4);
    os_log_t v72 = *v71;
    if (!*v71 || !os_log_type_enabled(*v71, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_152;
    }
    int v73 = *(unsigned __int8 *)(a1 + 88);
    int v74 = *(_DWORD *)(a1 + 8);
    sub_2CC00((std::string *)__p, (uint64_t)&v87);
    unsigned __int8 v75 = "input";
    if (!v73) {
      unsigned __int8 v75 = "output";
    }
    *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
    int v76 = (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(_WORD *)&_BYTE buf[12] = 1024;
    if ((SBYTE7(v93) & 0x80u) == 0) {
      int v76 = __p;
    }
    *(_DWORD *)&_DWORD buf[14] = 556;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&uint8_t buf[20] = v75;
    *(_WORD *)&_BYTE buf[28] = 1024;
    *(_DWORD *)&buf[30] = v74;
    *(_WORD *)&buf[34] = 2080;
    *(void *)&buf[36] = v76;
    unint64_t v13 = "%25s:%-5d Updated %s VirtualAudio_Stream %u format: %s";
    std::string::size_type v14 = v72;
    os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
    uint32_t v16 = 44;
  }

  _os_log_impl(&dword_0, v14, v15, v13, buf, v16);
  if (SBYTE7(v93) < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      return v9;
    }
    goto LABEL_153;
  }

void sub_E103C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  if (a13) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(exception_object);
}

void sub_E10A0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (v2) {
    goto LABEL_6;
  }
  int v3 = (os_log_t *)sub_138E8(13);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 383;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: underlying stream is NULL",  buf,  0x12u);
  }

  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (v2)
  {
LABEL_6:
    BOOL v5 = sub_27DB40(v2);
    int v6 = *(void **)(a1 + 120);
    if (v5)
    {
      uint64_t v7 = (std::__shared_weak_count *)v6[11];
      if (v7)
      {
        uint64_t v8 = v6[10];
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          unint64_t v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        os_log_t v11 = std::__shared_weak_count::lock(v7);
        *(void *)&buf[8] = v11;
        if (v11)
        {
          __int16 v12 = v11;
          *(void *)AudioObjectPropertyAddress buf = v8;
          std::__shared_weak_count::__release_weak(v7);
          if (v8)
          {
            uint64_t v17 = 0x676C6F6270667461LL;
            int v18 = 0;
            sub_F35C8(v8, &v17, (uint64_t)sub_E1278, *(void *)(a1 + 112));
          }

          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (v14) {
            goto LABEL_20;
          }
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        }

        else
        {
          __int16 v12 = v7;
        }

        std::__shared_weak_count::__release_weak(v12);
      }

void sub_E125C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_E1278(uint64_t a1, unsigned int a2, int *a3, unint64_t *a4)
{
  if (a2)
  {
    uint64_t v6 = a2;
    do
    {
      int v7 = *a3;
      a3 += 3;
      if (v7 == 1885762657)
      {
        uint64_t v8 = (os_log_t *)sub_138E8(4);
        uint64_t v9 = *v8;
        if (*v8)
        {
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            os_log_t v11 = "VirtualAudio_Stream.cpp";
            __int16 v12 = 1024;
            int v13 = 373;
            _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Physical formats changed! Firing the surround sound pref thingy on the VAD",  buf,  0x12u);
          }
        }

        sub_C6254(a4);
      }

      --v6;
    }

    while (v6);
  }

void sub_E1394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a2)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 403;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inNewDevice is NULL]: inNewDevice is NULL.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNewDevice is NULL.");
  }

  uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, BOOL))(*(void *)a2 + 96LL))(a2, *(_BYTE *)(a1 + 88) == 0);
  *(void *)(a1 + 120) = v6;
  if (!v6)
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    __int128 v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 407;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadStreamError) [mStream is NULL]: stream is active but underlying stream is NULL",  buf,  0x12u);
    }

    double v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v22 = &off_4865A0;
    v22[2] = 561214578;
  }

  if (sub_27DB40(v6))
  {
    uint64_t v7 = *(void *)(a1 + 120);
    uint64_t v8 = *(std::__shared_weak_count **)(v7 + 88);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 80);
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      __int16 v12 = std::__shared_weak_count::lock(v8);
      *(void *)&buf[8] = v12;
      if (!v12)
      {
        uint32_t v16 = v8;
        goto LABEL_15;
      }

      int v13 = v12;
      *(void *)AudioObjectPropertyAddress buf = v9;
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
      {
        uint64_t v23 = 0x676C6F6270667461LL;
        int v24 = 0;
        sub_F31A4(v9, &v23, (uint64_t)sub_E1278, *(void *)(a1 + 112), 1);
      }

      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        uint32_t v16 = v13;
LABEL_15:
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  sub_E1654(a1, a4);
}

void sub_E1628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_E1654(uint64_t a1, uint64_t *a2)
{
  std::string __p = 0LL;
  unint64_t v58 = 0LL;
  uint64_t v59 = 0LL;
  (*(void (**)(void, void **))(**(void **)(a1 + 120) + 96LL))(*(void *)(a1 + 120), &__p);
  uint64_t v56 = a2;
  BOOL v5 = __p;
  uint64_t v4 = v58;
  unint64_t v6 = (v58 - (_BYTE *)__p) / 56;
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(v7 + 56);
  uint64_t v9 = *(void *)(v7 + 64);
  if (v8 == v9)
  {
    uint64_t v10 = 0LL;
    int v13 = 0;
    int v12 = 0;
  }

  else
  {
    LODWORD(v10) = 0;
    uint64_t v11 = v8;
    do
    {
      uint64_t v10 = v10 + ((*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 4);
      v11 += 64LL;
    }

    while (v11 != v9);
    if (v8 == v9)
    {
      int v12 = 0;
    }

    else
    {
      int v12 = 0;
      do
      {
        v12 += (*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 4;
        v8 += 64LL;
      }

      while (v8 != v9);
    }

    int v13 = v10;
  }

  if (v6 != v12)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(4);
    uint64_t v20 = *v19;
    if (!*v19 || !os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_30;
    }
    *(_DWORD *)uint64_t v63 = 136315394;
    *(void *)&v63[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 473;
    __int128 v21 = "%25s:%-5d Number of Stream Formats Changed!";
    double v22 = v63;
    goto LABEL_29;
  }

  if (v58 == __p)
  {
LABEL_22:
    int v18 = v56;
    goto LABEL_48;
  }

  uint64_t v14 = 0LL;
  if (v6 <= 1) {
    uint64_t v15 = 1LL;
  }
  else {
    uint64_t v15 = (v58 - (_BYTE *)__p) / 56;
  }
  while (v13)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = (char *)__p + 56 * v14;
    while (1)
    {
      sub_6A7CC( *(__int128 **)(*(void *)(a1 + 104) + 56LL),  *(__int128 **)(*(void *)(a1 + 104) + 64LL),  v16,  (uint64_t)v63);
      if (v10 == ++v16) {
        goto LABEL_26;
      }
    }

    if (++v14 == v15) {
      goto LABEL_22;
    }
  }

void sub_E1D34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E1DB8(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    int v6 = *(_DWORD *)(a2 + 8);
    if (v6 && v5 != v6) {
      return 0LL;
    }
  }

  int v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    int v9 = *(_DWORD *)(a2 + 16);
    if (v9)
    {
      if (v8 != v9) {
        return 0LL;
      }
    }
  }

  int v10 = *(_DWORD *)(a1 + 20);
  if (v10)
  {
    int v11 = *(_DWORD *)(a2 + 20);
    if (v11)
    {
      if (v10 != v11) {
        return 0LL;
      }
    }
  }

  int v12 = *(_DWORD *)(a1 + 24);
  if (v12)
  {
    int v13 = *(_DWORD *)(a2 + 24);
    if (v13)
    {
      if (v12 != v13) {
        return 0LL;
      }
    }
  }

  int v14 = *(_DWORD *)(a1 + 28);
  if (v14)
  {
    int v15 = *(_DWORD *)(a2 + 28);
    if (v15)
    {
      if (v14 != v15) {
        return 0LL;
      }
    }
  }

  int v16 = *(_DWORD *)(a1 + 32);
  if (v16)
  {
    int v17 = *(_DWORD *)(a2 + 32);
    if (v17)
    {
      if (v16 != v17) {
        return 0LL;
      }
    }
  }

  uint64_t result = sub_2854C(a1, a2);
  if (!(_DWORD)result) {
    return result;
  }
  double v19 = *(double *)(a1 + 48);
  double v20 = *(double *)(a2 + 40);
  if (v19 < v20) {
    return 0LL;
  }
  double v21 = *(double *)(a1 + 40);
  double v22 = *(double *)(a2 + 48);
  if (v21 < v20 && v19 <= v22) {
    return 0LL;
  }
  if (v21 < v20 && v19 > v22) {
    return 0LL;
  }
  if (v19 == v22) {
    return v21 == v20;
  }
  return 0LL;
}

void sub_E1EEC(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 120))
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "VirtualAudio_Stream.cpp";
        __int16 v8 = 1024;
        int v9 = 422;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: underlying stream is NULL",  (uint8_t *)&v6,  0x12u);
      }
    }
  }

  (*(void (**)(void))(**(void **)(a1 + 120) + 168LL))(*(void *)(a1 + 120));
  sub_E1654(a1, a2);
}

uint64_t sub_E1FDC(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  int v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      int v6 = (unsigned int *)(v5 + 4);
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      __int16 v8 = v3;
      uint64_t v9 = *(void *)(a1 + 8);
      int v10 = v3;
      if (v7)
      {
        do
        {
          __int16 v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }

        while (v9);
      }

      else
      {
        do
        {
          __int16 v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          int v10 = v8;
        }

        while (v11);
      }

      unsigned int v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7) {
          int v13 = v8;
        }
        else {
          int v13 = v3;
        }
        if (v7) {
          int v14 = v8 + 1;
        }
        else {
          int v14 = v3;
        }
      }

      else
      {
        int v13 = v3;
        int v14 = v3;
        if (v7)
        {
          int v14 = v3;
          while (1)
          {
            while (1)
            {
              int v13 = (uint64_t **)v7;
              unsigned int v17 = *((_DWORD *)v7 + 8);
              if (v12 >= v17) {
                break;
              }
              uint64_t v7 = *v13;
              int v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }

            if (v17 >= v12) {
              break;
            }
            int v14 = v13 + 1;
            uint64_t v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v14)
      {
LABEL_15:
        sub_E2354((uint64_t)v19, a1, v6);
        sub_32C38((uint64_t **)a1, (uint64_t)v13, v14, v19[0]);
        v19[0] = 0LL;
        sub_8D4EC((uint64_t)v19);
      }

      int v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          int v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          int v16 = (void *)v5[2];
          BOOL v11 = *v16 == (void)v5;
          int v5 = v16;
        }

        while (!v11);
      }

      int v5 = v16;
    }

    while (v16 != v4);
  }

  return a1;
}

void sub_E2150(_Unwind_Exception *a1)
{
}

void sub_E2164(std::string *a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  else {
    int v5 = off_471298[v4];
  }
  sub_7D084(&v16, v5);
  int v6 = std::string::insert(&v16, 0LL, "[", 1uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v8 = std::string::append(&v17, ", ", 2uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_8E0F4(&__p, (uint64_t)(a2 + 2));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned int v12 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  int v14 = std::string::append(&v19, "]", 1uLL);
  *a1 = *v14;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_E22D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E2354(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a2 + 8;
  int v6 = operator new(0x1C8uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v6[8] = *a3;
  uint64_t result = sub_8D9F8((uint64_t)(v6 + 10), (uint64_t)(a3 + 2));
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_E23AC(_Unwind_Exception *a1)
{
}

char *sub_E23C0(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  __int128 v7 = v5;
  if (*a1 != __src)
  {
    __int16 v8 = __src;
    __int128 v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + 8) = v7;
  int v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    __int128 v7 = *(char **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v11 + v12;
  __int128 v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  int v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  int v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_E2488(void *a1)
{
  uint64_t v1 = sub_E2C18(a1);
  operator delete(v1);
}

_BYTE *sub_E249C(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  if (!*(void *)(a1 + 8))
  {
    int v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int128 v7 = "VirtualAudio_Utilities.cpp";
      __int16 v8 = 1024;
      int v9 = 476;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_92EF8();
  return sub_28AF60(v1);
}

void sub_E25A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint8_t buf, int a17, int a18, __int16 a19, int a20, __int16 a21, uint64_t a22)
{
}

void *sub_E2C18(void *a1)
{
  *a1 = off_4790E0;
  if (a1[1])
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      __int128 v7 = "VirtualAudio_Utilities.cpp";
      __int16 v8 = 1024;
      int v9 = 470;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to execute command prior to destruction.",  (uint8_t *)&v6,  0x12u);
    }

    uint64_t v4 = a1[1];
    a1[1] = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  else
  {
    a1[1] = 0LL;
  }

  return a1;
}

void sub_E2D0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_E2D18(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }

        v4 -= 40;
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_E2D90(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = v5;
  while (v6 != v4)
  {
    int v7 = *(_DWORD *)(v6 - 40);
    v6 -= 40LL;
    if (v7 == a2)
    {
      uint64_t v8 = v6 + 40;
      return v8 - 32;
    }
  }

  unint64_t v9 = a1[2];
  if (v5 >= v9)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v4) >> 3);
    if (v10 + 1 > 0x666666666666666LL) {
      sub_7A87C();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v4) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x333333333333333LL) {
      unint64_t v13 = 0x666666666666666LL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v29 = a1 + 2;
    if (v13)
    {
      if (v13 > 0x666666666666666LL) {
        sub_7A8C4();
      }
      int v14 = operator new(40 * v13);
    }

    else
    {
      int v14 = 0LL;
    }

    int v15 = (char *)&v14[5 * v10];
    int v27 = v14;
    *(void *)int v28 = v15;
    *(void *)&v28[8] = v15;
    *(void *)&v28[16] = &v14[5 * v13];
    *(_DWORD *)int v15 = a2;
    *((void *)v15 + 2) = 0LL;
    *((void *)v15 + 3) = 0LL;
    *((void *)v15 + 1) = 0LL;
    sub_87DA8(v15 + 8, 0LL, 0LL, 0LL);
    v14[5 * v10 + 4] = 0LL;
    uint64_t v16 = *(void *)v28;
    *(void *)&v28[8] += 40LL;
    uint64_t v17 = *a1;
    uint64_t v18 = a1[1];
    *(void *)&__int128 v33 = *(void *)v28;
    *((void *)&v33 + 1) = *(void *)v28;
    __int128 v32 = v33;
    v30[0] = a1 + 2;
    v30[1] = &v32;
    v30[2] = &v33;
    char v31 = 0;
    if (v18 != v17)
    {
      uint64_t v19 = v18;
      do
      {
        int v20 = *(_DWORD *)(v19 - 40);
        v19 -= 40LL;
        *(void *)(v16 - sub_7A768(v2 - 32) = 0LL;
        uint64_t v21 = v16 - 32;
        *(_DWORD *)(v16 - 40) = v20;
        *(void *)(v21 + 8) = 0LL;
        *(void *)(v21 + 16) = 0LL;
        sub_87DA8( (char *)(v16 - 32),  *(uint64_t **)(v19 + 8),  *(uint64_t **)(v19 + 16),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 2));
        *(void *)(v16 - 8) = *(void *)(v18 - 8);
        uint64_t v16 = *((void *)&v33 + 1) - 40LL;
        *((void *)&v33 + 1) -= 40LL;
        uint64_t v18 = v19;
      }

      while (v19 != v17);
    }

    char v31 = 1;
    sub_E3050((uint64_t)v30);
    uint64_t v22 = a1[2];
    __int128 v23 = *(_OWORD *)&v28[8];
    uint64_t v26 = *(void *)&v28[8];
    __int128 v24 = *(_OWORD *)a1;
    *a1 = v16;
    *(_OWORD *)int v28 = v24;
    *(_OWORD *)(a1 + 1) = v23;
    *(void *)&v28[16] = v22;
    int v27 = (void *)v24;
    sub_E2FF0((uint64_t)&v27);
    uint64_t v8 = v26;
  }

  else
  {
    *(_DWORD *)unint64_t v5 = a2;
    *(void *)(v5 + 16) = 0LL;
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 8) = 0LL;
    sub_87DA8((char *)(v5 + 8), 0LL, 0LL, 0LL);
    *(void *)(v5 + sub_7A768(v2 - 32) = 0LL;
    uint64_t v8 = v5 + 40;
    a1[1] = v5 + 40;
  }

  a1[1] = v8;
  return v8 - 32;
}

void sub_E2FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_E2FF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 40LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_E3050(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8LL);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8LL);
    while (v3 != v4)
    {
      unint64_t v5 = *(void **)(v3 + 8);
      if (v5)
      {
        *(void *)(v3 + 16) = v5;
        operator delete(v5);
      }

      v3 += 40LL;
    }
  }

  return a1;
}

void sub_E30AC(uint64_t *a1, int a2, unsigned int a3, int *a4)
{
  if (a3)
  {
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = (unint64_t *)sub_E2D90(a1, a2);
      sub_87EB4(v8, a4);
      a4 += 3;
      --v7;
    }

    while (v7);
  }

uint64_t sub_E3100(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      sub_92EF8();
      uint64_t result = sub_28AFEC(*(_DWORD *)v3);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 72LL))( result,  -1431655765 * ((*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2));
      }
      v3 += 40LL;
    }

    while (v3 != a2);
  }

  return result;
}

void sub_E3174(uint64_t a1, __int32 a2)
{
  uint64_t v4 = *(__int32 **)(a1 + 8);
  unint64_t v5 = wmemchr(*(const __int32 **)a1, a2, ((uint64_t)v4 - *(void *)a1) >> 2);
  if (v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6 == *(__int32 **)(a1 + 8))
  {
    unint64_t v7 = *(void *)(a1 + 16);
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = *(__int32 **)a1;
      uint64_t v10 = ((uint64_t)v6 - *(void *)a1) >> 2;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = v7 - (void)v9;
      if (v12 >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v13) {
        unint64_t v14 = v11;
      }
      if (v14)
      {
        unint64_t v14 = (unint64_t)sub_7A890(v14);
        unint64_t v9 = *(__int32 **)a1;
        unint64_t v6 = *(__int32 **)(a1 + 8);
      }

      else
      {
        uint64_t v15 = 0LL;
      }

      uint64_t v16 = (__int32 *)(v14 + 4 * v10);
      unint64_t v17 = v14 + 4 * v15;
      *uint64_t v16 = a2;
      uint64_t v8 = v16 + 1;
      while (v6 != v9)
      {
        __int32 v18 = *--v6;
        *--uint64_t v16 = v18;
      }

      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v17;
      if (v9) {
        operator delete(v9);
      }
    }

    else
    {
      __int32 *v6 = a2;
      uint64_t v8 = v6 + 1;
    }

    *(void *)(a1 + 8) = v8;
  }

void sub_E326C(void *a1, int a2, __int32 a3)
{
  uint64_t v6 = sub_138E8(2);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    unint64_t v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315906;
        uint64_t v10 = "VirtualAudio_Utilities.cpp";
        __int16 v11 = 1024;
        int v12 = 323;
        __int16 v13 = 1024;
        __int32 v14 = a3;
        __int16 v15 = 1024;
        int v16 = a2;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device ID: %u (owner : %u)", (uint8_t *)&v9, 0x1Eu);
      }
    }
  }

  uint64_t v8 = sub_E3368(a1, a2);
  if (v8) {
    sub_E3174(v8, a3);
  }
}

uint64_t sub_E3368(void *a1, int a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  while (v3 != v4)
  {
    int v5 = *(_DWORD *)(v3 - 56);
    v3 -= 56LL;
    uint64_t result = v3 + 8;
    if (v5 == a2 && result != 0) {
      return result;
    }
  }

  *(_OWORD *)__int128 v33 = 0u;
  __int128 v34 = 0u;
  *(_OWORD *)__int128 v32 = 0u;
  int v35 = a2;
  sub_E364C(v36, (uint64_t)v32);
  unint64_t v8 = a1[3];
  unint64_t v9 = a1[2];
  if (v9 >= v8)
  {
    uint64_t v11 = a1[1];
    uint64_t v12 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v9 - v11) >> 3);
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v8 - v11) >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v12 + 1) {
      uint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x249249249249249LL) {
      unint64_t v15 = 0x492492492492492LL;
    }
    else {
      unint64_t v15 = v14;
    }
    int v41 = a1 + 3;
    if (v15)
    {
      if (v15 > 0x492492492492492LL) {
        sub_7A8C4();
      }
      int v16 = (char *)operator new(56 * v15);
    }

    else
    {
      int v16 = 0LL;
    }

    unint64_t v17 = &v16[56 * v12];
    int v39 = v16;
    *(void *)unint64_t v40 = v17;
    *(void *)&v40[8] = v17;
    *(void *)&v40[16] = &v16[56 * v15];
    *(_DWORD *)unint64_t v17 = v35;
    sub_E364C((void *)v17 + 1, (uint64_t)v36);
    uint64_t v18 = 0LL;
    uint64_t v19 = *(void *)v40;
    *(void *)&v40[8] += 56LL;
    uint64_t v21 = a1[1];
    uint64_t v20 = a1[2];
    while (1)
    {
      uint64_t v22 = v19 + v18;
      uint64_t v23 = v20 + v18;
      if (v20 + v18 == v21) {
        break;
      }
      int v24 = *(_DWORD *)(v23 - 56);
      *(void *)(v22 - 48) = 0LL;
      uint64_t v25 = v22 - 48;
      *(_DWORD *)(v22 - 56) = v24;
      *(void *)(v25 + 8) = 0LL;
      *(void *)(v25 + 16) = 0LL;
      sub_7A5B8( (void *)(v22 - 48),  *(const void **)(v23 - 48),  *(void *)(v23 - 40),  (uint64_t)(*(void *)(v23 - 40) - *(void *)(v23 - 48)) >> 2);
      uint64_t v26 = v19 + v18;
      *(void *)(v26 - 24) = 0LL;
      *(void *)(v26 - 16) = 0LL;
      int v27 = (void *)(v19 + v18 - 24);
      uint64_t v27[2] = 0LL;
      v18 -= 56LL;
      sub_7A5B8( v27,  *(const void **)(v23 - 24),  *(void *)(v23 - 16),  (uint64_t)(*(void *)(v23 - 16) - *(void *)(v23 - 24)) >> 2);
    }

    uint64_t v28 = a1[3];
    unint64_t v31 = *(void *)&v40[8];
    __int128 v29 = *(_OWORD *)&v40[8];
    __int128 v30 = *(_OWORD *)(a1 + 1);
    a1[1] = v22;
    *(_OWORD *)unint64_t v40 = v30;
    *((_OWORD *)a1 + 1) = v29;
    *(void *)&v40[16] = v28;
    int v39 = (char *)v30;
    sub_E3744((uint64_t)&v39);
    unint64_t v10 = v31;
  }

  else
  {
    *(_DWORD *)unint64_t v9 = v35;
    sub_E364C((void *)(v9 + 8), (uint64_t)v36);
    unint64_t v10 = v9 + 56;
    a1[2] = v9 + 56;
  }

  a1[2] = v10;
  if (__p)
  {
    uint64_t v38 = __p;
    operator delete(__p);
  }

  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }

  if (v33[1]) {
    operator delete(v33[1]);
  }
  if (v32[0]) {
    operator delete(v32[0]);
  }
  return a1[2] - 48LL;
}

void sub_E35D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_E3744(v3 - 104);
  sub_E36C4((uint64_t *)va1);
  sub_E3704((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_E364C(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_7A5B8(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0LL;
  sub_7A5B8( a1 + 3,  *(const void **)(a2 + 24),  *(void *)(a2 + 32),  (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  return a1;
}

void sub_E36A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_E36C4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_E3704(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + sub_7A768(v2 - 32) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_E3744(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_E3790((void *)(i - 56));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_E3790(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

void sub_E37D4(void *a1, int a2, __int32 a3)
{
  uint64_t v6 = sub_138E8(2);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    uint64_t v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315906;
        uint64_t v10 = "VirtualAudio_Utilities.cpp";
        __int16 v11 = 1024;
        int v12 = 334;
        __int16 v13 = 1024;
        __int32 v14 = a3;
        __int16 v15 = 1024;
        int v16 = a2;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device ID: %u (owner : %u)", (uint8_t *)&v9, 0x1Eu);
      }
    }
  }

  uint64_t v8 = sub_E3368(a1, a2);
  if (v8) {
    sub_E3174(v8 + 24, a3);
  }
}

uint64_t *sub_E38D4(uint64_t *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t *sub_E390C(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v3 = 0LL;
    unsigned int v4 = 0;
    uint64_t v2 = *result;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 16LL))(*(void *)(v2 + 8 * v3));
      uint64_t v5 = *v1;
      uint64_t result = *(uint64_t **)(*v1 + 8 * v3);
      if (result)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        uint64_t v5 = *v1;
      }

      *(void *)(v5 + 8 * v3) = 0LL;
      uint64_t v2 = *v1;
      uint64_t v3 = ++v4;
    }

    while (v4 < (unint64_t)((v1[1] - *v1) >> 3));
  }

  v1[1] = v2;
  return result;
}

void sub_E40BC()
{
}

void sub_E40C4()
{
}

void sub_E40D0()
{
}

void sub_E40DC()
{
}

void sub_E40EC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xE40F4LL);
  }
  sub_7A0E8(a1);
}

void sub_E4104(char **a1, uint64_t a2)
{
  if (!a2)
  {
    __int16 v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "VirtualAudio_Utilities.cpp";
      __int16 v20 = 1024;
      int v21 = 431;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_7A8C4();
      }
      int v12 = (char *)operator new(8 * v11);
    }

    else
    {
      int v12 = 0LL;
    }

    __int16 v13 = &v12[8 * v8];
    *(void *)__int16 v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }

      while (v5 != v7);
      uint64_t v5 = *a1;
    }

    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }

  else
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
}

void sub_E42C4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_E42E0(uint64_t a1)
{
  *(void *)a1 = &off_46F2D8;
  sub_32C8C(*(void **)(a1 + 40));
  uint64_t v3 = (void **)(a1 + 8);
  sub_E4378(&v3);
  return a1;
}

void sub_E432C(char *a1)
{
  *(void *)a1 = &off_46F2D8;
  sub_32C8C(*((void **)a1 + 5));
  uint64_t v2 = (void **)(a1 + 8);
  sub_E4378(&v2);
  operator delete(a1);
}

void sub_E4378(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        sub_E3790(v4);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_E43E8(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)&v6[4] = "VirtualAudio_Utilities.cpp";
      __int16 v7 = 1024;
      int v8 = 513;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The destroyed object tracker has not been detached. Manually executing DestroyObjects, which may be unsafe.",  v6,  0x12u);
    }

    sub_E390C(*(uint64_t **)a1);
    if (*(void *)a1)
    {
      unint64_t v4 = sub_E38D4(*(uint64_t **)a1);
      operator delete(v4);
    }

    *(void *)a1 = 0LL;
  }

  *(void *)(a1 + sub_7A768(v2 - 32) = &off_46F2D8;
  sub_32C8C(*(void **)(a1 + 72));
  *(void *)uint64_t v6 = a1 + 40;
  sub_E4378((void ***)v6);
  *(void *)uint64_t v6 = a1 + 8;
  sub_E2D18((void ***)v6);
  return a1;
}

void sub_E4500(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_E450C(int a1)
{
  if (a1 == 1668314723) {
    return 1LL;
  }
  if (a1 != 1986357346) {
    return 0LL;
  }
  uint64_t v1 = sub_546E0();
  uint64_t v2 = operator new(4uLL);
  std::string __p = v2;
  *uint64_t v2 = 1886609775;
  int v8 = v2 + 1;
  unint64_t v9 = v2 + 1;
  strcpy(v10, "cwdv");
  v10[8] = 0;
  int v11 = 3;
  v13[0] = 0LL;
  v13[1] = 0LL;
  int v12 = v13;
  int v14 = 44739242;
  CFTypeRef cf = 0LL;
  v17[0] = &off_46F338;
  int v18 = v17;
  sub_FFB0C(v16, v1, &__p, (uint64_t)v17);
  BOOL v3 = v16[2] != 0;
  sub_85B80(v16);
  unint64_t v4 = v18;
  if (v18 == v17)
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = v17;
    goto LABEL_9;
  }

  if (v18)
  {
    uint64_t v5 = 5LL;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v13[0]);
  if (__p)
  {
    int v8 = __p;
    operator delete(__p);
  }

  return v3;
}

void sub_E4678( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E46D0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F338;
  return result;
}

void sub_E46F4(uint64_t a1, void *a2)
{
  *a2 = &off_46F338;
}

uint64_t sub_E470C()
{
  return 1LL;
}

uint64_t sub_E4714(uint64_t a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 1008) + 352LL))( *(void *)(a1 + 1008),  1650814258LL,  2LL,  4LL);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1650814258LL,  2LL,  4LL,  (float)a2);
  }
  return result;
}

uint64_t sub_E4784(uint64_t a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 352LL))( *(void *)(a1 + 1008),  1685287015LL,  1651797616LL,  0LL);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1651797616LL,  0LL,  (float)a2);
  }
  return result;
}

uint64_t sub_E47FC(uint64_t a1)
{
  uint64_t v2 = sub_5954C();
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344LL))(v2);
  uint64_t result = sub_C4704(*(void *)(a1 + 1008), 0);
  if ((_DWORD)result)
  {
    int v5 = v3 == 0;
    int v23 = v5;
    uint64_t v6 = *(void *)sub_2FC9D4();
    int v7 = sub_C4704(*(void *)(a1 + 1008), 2);
    if ((v6 & 1) != 0 || v7)
    {
      int v5 = 0;
      int v23 = 0;
    }

    if (v3)
    {
      int v8 = (os_log_t *)sub_138E8(2);
      unint64_t v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v25 = "VirtualAudio_Utilities.cpp";
        __int16 v26 = 1024;
        int v27 = 803;
        __int16 v28 = 1024;
        LODWORD(v29) = v3;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [VolumeLimit] SPLTarget update %u", buf, 0x18u);
      }

      float v10 = (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360LL))( *(void *)(a1 + 1008),  1685287015LL,  1936749423LL,  0LL);
      float v11 = (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360LL))( *(void *)(a1 + 1008),  1685287015LL,  1819176045LL,  0LL);
      int v12 = (os_log_t *)sub_138E8(2);
      float v13 = (float)((float)v3 - (float)(v10 + 13.0)) - v11;
      int v14 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v25 = "VirtualAudio_Utilities.cpp";
        __int16 v26 = 1024;
        int v27 = 808;
        __int16 v28 = 2048;
        double v29 = v13;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [VolumeLimit] Updating kGraphParameter_VolumeLimit_TargetLoudnessLKFS  to %f",  buf,  0x1Cu);
      }

      (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1818977907LL,  0LL,  v13);
    }

    int v22 = 4;
    (*(void (**)(void, uint64_t, uint64_t, uint8_t *, int *, uint64_t, void))(**(void **)(a1 + 1008)
                                                                                        + 408LL))( *(void *)(a1 + 1008),  1685287015LL,  1652124782LL,  buf,  &v22,  1LL,  0LL);
    if (v5 != *(_DWORD *)buf) {
      (*(void (**)(void, uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(**(void **)(a1 + 1008)
    }
                                                                                        + 400LL))( *(void *)(a1 + 1008),  1685287015LL,  1652124782LL,  &v23,  4LL,  1LL,  0LL);
    if (v3 - 1 >= 0x4F)
    {
      if (v3 - 80 >= 5)
      {
        v15.n128_u32[0] = -1.5;
        if (v3 - 85 < 5) {
          v15.n128_f32[0] = -6.5;
        }
        (*(void (**)(void, uint64_t, uint64_t, void, __n128))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1751934580LL,  0LL,  v15);
        if (!v3)
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360LL))( *(void *)(a1 + 1008),  1685287015LL,  1819160624LL,  0LL);
          int v21 = (void *)(a1 + 1008);
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)*v21 + 368LL))( *v21,  1685287015LL,  1819176295LL,  0LL);
          return (*(uint64_t (**)(void, uint64_t, uint64_t, void, float))(*(void *)*v21 + 368LL))( *v21,  1685287015LL,  1818977907LL,  0LL,  0.0);
        }

        unsigned int v16 = 1819162677;
        unsigned int v17 = 1819162928;
        int v19 = 1819162933;
        if (v3 >= 0x60) {
          int v19 = 1819160624;
        }
        if (v3 >= 0x5B) {
          unsigned int v17 = v19;
        }
        BOOL v18 = v3 >= 0x56;
      }

      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1751934580LL,  0LL,  -11.5);
        unsigned int v16 = 1819162672;
        unsigned int v17 = 1819162677;
        BOOL v18 = v3 >= 0x51;
      }
    }

    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1751934580LL,  0LL,  -16.5);
      unsigned int v16 = 1819162421;
      unsigned int v17 = 1819162672;
      BOOL v18 = v3 >= 0x4C;
    }

    if (v18) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = v16;
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360LL))( *(void *)(a1 + 1008),  1685287015LL,  v20,  0LL);
    return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  1819176295LL,  0LL);
  }

  return result;
}

void *sub_E4C70(void *a1)
{
  uint64_t v1 = (void *)a1[3];
  if (!v1)
  {
    uint64_t v6 = 0LL;
    unsigned int v3 = (void *)qword_491590;
    if ((uint64_t *)qword_491590 != &qword_491578)
    {
      uint64_t result = 0LL;
LABEL_9:
      uint64_t v6 = v3;
      qword_491590 = (uint64_t)result;
      goto LABEL_14;
    }

void sub_E4E98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void *sub_E4EAC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F380;
  return result;
}

void sub_E4ED0(uint64_t a1, void *a2)
{
  *a2 = &off_46F380;
}

void sub_E4EE8(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = sub_138E8(13);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    uint64_t v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        if (v2)
        {
          memset(&v17, 0, sizeof(v17));
          if ((v2 & 1) != 0) {
            std::string::append(&v17, "Open", 4uLL);
          }
          if ((v2 & 2) != 0) {
            std::string::append(&v17, " | Flap1", 8uLL);
          }
          if ((v2 & 4) != 0) {
            std::string::append(&v17, " | Flap2", 8uLL);
          }
          if ((v2 & 8) != 0) {
            std::string::append(&v17, " | Flap3", 8uLL);
          }
          if ((v2 & 0x10) != 0) {
            std::string::append(&v17, " | Attach", 9uLL);
          }
          if ((v2 & 0x20) != 0) {
            std::string::append(&v17, " | StateUnknown", 0xFuLL);
          }
        }

        else
        {
          sub_7D084(&v17, "None");
        }

        int v5 = &v17;
        if ((v17.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 876;
        __int16 v21 = 2080;
        int v22 = v5;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d HallEffectSensorListener state = %s", buf, 0x1Cu);
      }
    }
  }

  int v6 = v2 & 3;
  if (dword_48D760 != (v6 == 3))
  {
    if (v6 == 3) {
      int v7 = "Closed";
    }
    else {
      int v7 = "Open";
    }
    sub_7D084(&v17, v7);
    if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v8 = &v17;
    }
    else {
      int v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        CFIndex size = v17.__r_.__value_.__s.__size_;
      }
      else {
        CFIndex size = v17.__r_.__value_.__l.__size_;
      }
      CFStringRef v10 = CFStringCreateWithBytes(0LL, (const UInt8 *)v8, size, 0x8000100u, 0);
      CFStringRef v16 = v10;
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }

    else
    {
      CFStringRef v10 = 0LL;
      CFStringRef v16 = 0LL;
    }

    sub_C47D4((uint64_t)&v18, "SmartCoverState", (const void **)&v16);
    *(void *)AudioObjectPropertyAddress buf = &v18;
    *(void *)&buf[8] = 1LL;
    CFDictionaryRef v12 = sub_5A950((uint64_t)buf);
    sub_E5360((uint64_t)v12, 1LL, 5LL);
    CFRelease(v12);
    if (cf) {
      CFRelease(cf);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v10) {
      CFRelease(v10);
    }
    float v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      __n128 v15 = &v17;
      if ((v17.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __n128 v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 888;
      __int16 v21 = 2080;
      int v22 = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SmartCoverState::%s", buf, 0x1Cu);
    }

    if (qword_49D060 != -1) {
      dispatch_once(&qword_49D060, &stru_46F3D8);
    }
    if (off_49D0C8) {
      off_49D0C8(v6 == 3);
    }
    dword_48D760 = v6 == 3;
  }

void sub_E52A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, CFTypeRef a16, CFTypeRef cf)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E5360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_48D6E8 != -1) {
    dispatch_once(&qword_48D6E8, &stru_46F308);
  }
  if (off_48D748) {
    off_48D748(a1, a2, a3);
  }
}

void sub_E53E0(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0LL)
  {
    off_49D068 = dlsym(v1, "AudioIssueDetectorCreate");
    off_49D070 = dlsym(v1, "AudioIssueDetectorInitialize");
    off_49D078 = dlsym(v1, "AudioIssueDetectorDispose");
    qword_49D080 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_49D088 = dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_49D090 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_49D098 = (uint64_t (*)(void, void, void, void, void, void))dlsym( v1,  "AudioIssueDetectorAnalyzeBuffer");
    off_49D0A0 = dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_49D0A8 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_49D0B0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_49D0B8 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_49D0C0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_49D0C8 = dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }

  int v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    uint64_t v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3) {
      v3();
    }
  }

void sub_E5590(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (v1)
  {
    int v2 = v1;
    qword_48D6F0 = (uint64_t)dlsym(v1, "CreateSharedCAReportingClient");
    qword_48D6F8 = (uint64_t)dlsym(v2, "CAReportingClientCreateReporterID");
    qword_48D700 = (uint64_t)dlsym(v2, "CAReportingClientCreateReporterIDFromSessionID");
    qword_48D708 = (uint64_t)dlsym(v2, "CAReportingClientCreatePerformanceReporterID");
    qword_48D710 = (uint64_t)dlsym(v2, "CAReportingClientStartReporter");
    qword_48D718 = (uint64_t)dlsym(v2, "CAReportingClientStopReporter");
    qword_48D720 = (uint64_t)dlsym(v2, "CAReportingClientSetAudioServiceType");
    qword_48D728 = (uint64_t)dlsym(v2, "CAReportingClientGetAudioServiceType");
    qword_48D730 = (uint64_t)dlsym(v2, "CAReportingClientSetConfiguration");
    qword_48D738 = (uint64_t)dlsym(v2, "CAReportingClientCopyConfiguration");
    off_48D740 = (uint64_t (*)(void, void, void, void))dlsym(v2, "CAReportingClientSendMessage");
    off_48D748 = (uint64_t (*)(void, void, void))dlsym(v2, "CAReportingClientSendSingleMessage");
    qword_48D750 = (uint64_t)dlsym(v2, "CAReportingClientDestroyReporterID");
    qword_48D758 = (uint64_t)dlsym(v2, "CAReportingClientRequestMessage");
  }

void sub_E570C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v5[16]) {
    sub_13850((uint64_t)v5);
  }
}

void sub_E5768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    sub_13850((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_E5784(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16)) {
    sub_E6604((uint64_t)a1, a2);
  }
  return a1;
}

void sub_E57BC(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 16)) {
    sub_13850(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_E57D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v9 = *(_BYTE *)(a3 + 16) && *(void *)a3 && CFDictionaryGetCount(*(CFDictionaryRef *)a3) != 0;
  int v10 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    uint64_t v64 = (os_log_t *)sub_138E8(13);
    int v65 = *v64;
    if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v77 = 136315394;
      *(void *)&v77[4] = "VirtualAudio_Utilities.cpp";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 915;
      _os_log_impl(&dword_0, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v77, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v11 = *(_DWORD *)(a2 + 4);
  if (!v11)
  {
    int v67 = (os_log_t *)sub_138E8(13);
    int v68 = *v67;
    if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v77 = 136315394;
      *(void *)&v77[4] = "VirtualAudio_Utilities.cpp";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 916;
      _os_log_impl(&dword_0, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v77, 0x12u);
    }

    uint64_t v69 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v69, "Precondition failure.");
  }

  if (v10 == 1668706147)
  {
    __int128 v70 = (os_log_t *)sub_138E8(13);
    int v71 = *v70;
    if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v77 = 136315394;
      *(void *)&v77[4] = "VirtualAudio_Utilities.cpp";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 918;
      _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): kVirtualAudioPlugInRoutingCategoryVoiceChat is obsolete. Please use kVirtualAudioPlugInRoutingCategoryPlayAndRecord + kVirtualAudioPlugInMode_VoiceChat.",  v77,  0x12u);
    }

    os_log_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( v72,  "kVirtualAudioPlugInRoutingCategoryVoiceChat is obsolete. Please use kVirtualAudioPlugInRoutingCategoryPlayAndRecor d + kVirtualAudioPlugInMode_VoiceChat.");
  }

  int v12 = 1668309362;
  *(void *)&v77[8] = 0LL;
  *(void *)&v77[16] = 0LL;
  *(void *)unint64_t v77 = &v77[8];
  if (v10 <= 1668313714)
  {
    switch(v10)
    {
      case 1668301427:
        if (v11 != 1751212899)
        {
          sub_57ADC((uint64_t *)v77, 0x706D6274u, 1886216820);
          sub_57ADC((uint64_t *)v77, 0x70687062u, 1885892706);
        }

        sub_57ADC((uint64_t *)v77, 0x70726563u, 1886545251);
        uint64_t v20 = sub_138E8(2);
        uint64_t v21 = sub_138E8(34);
        char v22 = 0;
        uint64_t v23 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v24 = *(void *)(v20 + 8);
        while (1)
        {
          uint64_t v25 = *(int *)&buf[4 * v23];
          char v26 = v22;
          if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
            break;
          }
          char v22 = 1;
          uint64_t v23 = 1LL;
          if ((v26 & 1) != 0)
          {
            if ((v24 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_62;
          }
        }

        if ((v24 & v25) == 0) {
          uint64_t v20 = v21;
        }
        if ((*(void *)(v20 + 8) & 1) == 0) {
          goto LABEL_66;
        }
LABEL_62:
        int v41 = *(os_log_s **)v20;
        if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v75 = 1024;
          int v76 = 953;
          uint64_t v42 = "%25s:%-5d kVirtualAudioPlugInRoutingCategoryPlayAndRecordDefaultToSpeakerNoBT is now obsolete.";
          goto LABEL_65;
        }

        goto LABEL_66;
      case 1668309362:
LABEL_66:
        if (v11 == 1987208039 || v11 == 1986098036)
        {
          int v12 = 1668509810;
        }

        goto LABEL_71;
      case 1668313666:
        if (v11 != 1751212899)
        {
          sub_57ADC((uint64_t *)v77, 0x706D6274u, 1886216820);
          sub_57ADC((uint64_t *)v77, 0x70687062u, 1885892706);
        }

        uint64_t v13 = sub_138E8(2);
        uint64_t v14 = sub_138E8(34);
        char v15 = 0;
        uint64_t v16 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v17 = *(void *)(v13 + 8);
        while (1)
        {
          uint64_t v18 = *(int *)&buf[4 * v16];
          char v19 = v15;
          if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
            break;
          }
          char v15 = 1;
          uint64_t v16 = 1LL;
          if ((v19 & 1) != 0)
          {
            if ((v17 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_49;
          }
        }

        if ((v17 & v18) == 0) {
          uint64_t v13 = v14;
        }
        if ((*(void *)(v13 + 8) & 1) == 0) {
          goto LABEL_66;
        }
LABEL_49:
        int v41 = *(os_log_s **)v13;
        if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v75 = 1024;
          int v76 = 935;
          uint64_t v42 = "%25s:%-5d kVirtualAudioPlugInRoutingCategoryPlayAndRecordNoBT is now obsolete.";
          goto LABEL_65;
        }

        goto LABEL_66;
    }

LABEL_108:
        uint64_t v55 = (os_log_t *)sub_138E8(2);
        uint64_t v56 = *v55;
        if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v75 = 1024;
          int v76 = 1006;
          _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Is VP vX device, so we will turn this non chat mode into voice chat for now.",  buf,  0x12u);
        }

        goto LABEL_111;
      }

      if (v11 == 1735222132)
      {
        int v11 = 1987077987;
        goto LABEL_112;
      }

      int v44 = 1768057203;
    }

    if (v11 == v44) {
      goto LABEL_112;
    }
    goto LABEL_100;
  }

  if (v11 == 1936749157)
  {
    int v48 = (os_log_t *)sub_138E8(2);
    int v11 = 1937007472;
    os_log_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v75 = 1024;
      int v76 = 1028;
      int v50 = "%25s:%-5d Converting SpatialRecording to StereoCapture";
      uint64_t v51 = v49;
      os_log_type_t v52 = OS_LOG_TYPE_INFO;
LABEL_92:
      _os_log_impl(&dword_0, v51, v52, v50, buf, 0x12u);
    }
  }

  else if (v11 == 1919776355)
  {
    uint64_t v45 = sub_138E8(2);
    if ((*(_BYTE *)(v45 + 8) & 1) != 0)
    {
      uint64_t v46 = *(os_log_s **)v45;
      if (*(void *)v45)
      {
        if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v75 = 1024;
          int v76 = 1024;
          _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Converting RemoteVoiceChat mode to VoiceChat mode since the VP is not (yet) in use",  buf,  0x12u);
        }
      }
    }

    int v11 = 1768779619;
  }

  if (!v186) {
    goto LABEL_146;
  }
  v211 = 0LL;
  uint64_t v212 = 0LL;
  uint64_t v210 = (std::string::value_type *)&v211;
  sub_1033D4((uint64_t)buf, v204, v205, v202, v203, (uint64_t)&v210, (uint64_t)&v211);
  uint64_t v55 = v210;
  if (v210 != (std::string::value_type *)&v211)
  {
    do
    {
      sub_F7548(v176, (uint64_t *)v55 + 4);
      sub_F7548(&v184, (uint64_t *)v55 + 4);
      uint64_t v56 = (std::string::value_type *)*((void *)v55 + 1);
      if (v56)
      {
        do
        {
          uint64_t v57 = (std::string::value_type **)v56;
          uint64_t v56 = *(std::string::value_type **)v56;
        }

        while (v56);
      }

      else
      {
        do
        {
          uint64_t v57 = (std::string::value_type **)*((void *)v55 + 2);
          uint64_t v30 = *v57 == v55;
          uint64_t v55 = (std::string::value_type *)v57;
        }

        while (!v30);
      }

      uint64_t v55 = (std::string::value_type *)v57;
    }

    while (v57 != (std::string::value_type **)&v211);
  }

  unint64_t v58 = 0;
  uint64_t v59 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = v11;
  *(void *)&buf[8] = v12;
  do
  {
    int v60 = v58;
    unsigned __int16 v61 = *(uint64_t **)&buf[8 * v59];
    int v62 = v210;
    if (v61) {
      os_log_t v63 = v210 == (std::string::value_type *)&v211;
    }
    else {
      os_log_t v63 = 1;
    }
    if (!v63)
    {
      do
      {
        sub_F7548(v61, (uint64_t *)v62 + 4);
        uint64_t v64 = (std::string::value_type *)*((void *)v62 + 1);
        if (v64)
        {
          do
          {
            int v65 = (std::string::value_type **)v64;
            uint64_t v64 = *(std::string::value_type **)v64;
          }

          while (v64);
        }

        else
        {
          do
          {
            int v65 = (std::string::value_type **)*((void *)v62 + 2);
            uint64_t v30 = *v65 == v62;
            int v62 = (std::string::value_type *)v65;
          }

          while (!v30);
        }

        int v62 = (std::string::value_type *)v65;
      }

      while (v65 != (std::string::value_type **)&v211);
    }

    unint64_t v58 = 1;
    uint64_t v59 = 1LL;
  }

  while ((v60 & 1) == 0);
  __int16 v66 = 0;
  int v67 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x6E63727566637275LL;
  int v12 = v172;
  int v11 = v173;
  do
  {
    int v68 = v66;
    if (!v209[0]) {
      goto LABEL_144;
    }
    uint64_t v69 = *(_DWORD *)&buf[4 * v67];
    __int128 v70 = v209[0];
    while (1)
    {
      int v71 = *((_DWORD *)v70 + 8);
      if (v69 >= v71) {
        break;
      }
LABEL_134:
      __int128 v70 = (uint64_t *)*v70;
      if (!v70) {
        goto LABEL_144;
      }
    }

    if (v71 < v69)
    {
      ++v70;
      goto LABEL_134;
    }

    os_log_t v72 = sub_10338C(v209[0], v69);
    char v73 = v210;
    if (v210 != (std::string::value_type *)&v211)
    {
      int v74 = v72;
      do
      {
        sub_F7548(v74, (uint64_t *)v73 + 4);
        __int16 v75 = (std::string::value_type *)*((void *)v73 + 1);
        if (v75)
        {
          do
          {
            int v76 = (std::string::value_type **)v75;
            __int16 v75 = *(std::string::value_type **)v75;
          }

          while (v75);
        }

        else
        {
          do
          {
            int v76 = (std::string::value_type **)*((void *)v73 + 2);
            uint64_t v30 = *v76 == v73;
            char v73 = (std::string::value_type *)v76;
          }

          while (!v30);
        }

        char v73 = (std::string::value_type *)v76;
      }

      while (v76 != (std::string::value_type **)&v211);
    }

      int v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v62, "Precondition failure.");
    default:
      break;
  }

  if (a2) {
    char v33 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 88LL))(*a2, 0LL);
  }
  else {
    char v33 = 0;
  }
  if (a2 == a3) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v15;
  }
  uint64_t v35 = v33 + v34;
  char v36 = a1[1] - *a1;
  if (v36 != v35)
  {
    uint64_t v37 = (os_log_t *)sub_138E8(16);
    uint64_t v38 = *v37;
    if (*v37)
    {
      if (os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        if (a2)
        {
          uint64_t v39 = &v64;
          sub_1D4C48(&v64, (uint64_t)a2);
          if ((v64.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v39 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
        }

        else
        {
          uint64_t v39 = (std::string *)"none";
        }

        sub_1D4C48(&__p, (uint64_t)a3);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t p_p = &__p;
        }
        else {
          uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        __int16 v66 = "AggregateDevice_Simple.cpp";
        int v67 = 1024;
        int v68 = 149;
        uint64_t v69 = 2048;
        __int128 v70 = v36;
        int v71 = 1024;
        os_log_t v72 = v35;
        char v73 = 2080;
        int v74 = v39;
        __int16 v75 = 2080;
        int v76 = p_p;
        _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d InputStreamUsage mask size (%zu) does not match the number of input streams (%u). Device Description s {input: %s, output: %s}",  buf,  0x36u);
      }
    }
  }

    sub_7D898((uint64_t)inClientData);
    std::condition_variable::~condition_variable(&v97);
    std::mutex::~mutex(&v98);
    goto LABEL_109;
  }

  uint64_t v25 = *(id *)sub_138E8(13);
  char v26 = v25;
  if (v25)
  {
    uint64_t v27 = (os_log_s *)v25;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v98, v24);
      uint64_t v28 = v98.__m_.__opaque[15];
      uint64_t sig = v98.__m_.__sig;
      inClientData[0] = inAddress;
      sub_613AC((uint64_t)&v97, &inClientData[0].mSelector);
      uint64_t v30 = &v98;
      if (v28 < 0) {
        uint64_t v30 = (std::mutex *)sig;
      }
      if (v97.__cv_.__opaque[15] >= 0) {
        uint64_t v31 = (uint64_t)&v97;
      }
      else {
        uint64_t v31 = v97.__cv_.__sig;
      }
      buf.uint64_t mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      uint64_t v89 = 1024;
      uint64_t v90 = 207;
      int v91 = 1024;
      *(_DWORD *)uint64_t v92 = v24;
      *(_WORD *)&v92[4] = 2080;
      *(void *)&v92[6] = v30;
      *(_WORD *)&v92[14] = 2080;
      *(void *)&v92[16] = v31;
      *(_WORD *)&v92[24] = 1024;
      *(_DWORD *)&v92[26] = inObjectID;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (v97.__cv_.__opaque[15] < 0) {
        operator delete((void *)v97.__cv_.__sig);
      }
      if (v98.__m_.__opaque[15] < 0) {
        operator delete((void *)v98.__m_.__sig);
      }
    }
  }

LABEL_109:
  kdebug_trace(553912334LL, (unint64_t)inData, 0LL, 0LL, 0LL);
  if ((_DWORD)v24)
  {
    uint64_t v59 = sub_138E8(17);
    int v60 = sub_138E8(36);
    unsigned __int16 v61 = 0;
    int v62 = 0LL;
    *(void *)&buf.uint64_t mSelector = 0x100000002LL;
    os_log_t v63 = *(void *)(v59 + 8);
    while (1)
    {
      uint64_t v64 = *((int *)&buf.mSelector + v62);
      int v65 = v61;
      if (((v63 & v64) != 0) != ((*(void *)(v60 + 8) & v64) != 0)) {
        break;
      }
      unsigned __int16 v61 = 1;
      int v62 = 1LL;
      if ((v65 & 1) != 0) {
        goto LABEL_116;
      }
    }

    if ((v63 & v64) == 0) {
      uint64_t v59 = v60;
    }
LABEL_116:
    __int16 v66 = *(id *)v59;
    int v67 = v66;
    if (v66)
    {
      int v68 = (os_log_s *)v66;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v98, v24);
        uint64_t v69 = v98.__m_.__opaque[15];
        __int128 v70 = v98.__m_.__sig;
        int v71 = inData;
        os_log_t v72 = *(_DWORD *)(a1 + 268);
        (*(void (**)(std::condition_variable *__return_ptr))(*(void *)a1 + 128LL))(&v97);
        char v73 = &v98;
        if (v69 < 0) {
          char v73 = (std::mutex *)v70;
        }
        buf.uint64_t mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HAL_Common.mm";
        uint64_t v89 = 1024;
        uint64_t v90 = 436;
        int v91 = 2080;
        *(void *)uint64_t v92 = v73;
        *(_WORD *)&v92[8] = 2048;
        *(double *)&v92[10] = v71;
        *(_WORD *)&v92[18] = 1024;
        *(_DWORD *)&v92[20] = v72;
        *(_WORD *)&v92[24] = 2112;
        *(void *)&v92[26] = v97.__cv_.__sig;
        _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' setting sample rate to %f Hz on HAL device %u with UID %@",  (uint8_t *)&buf,  0x36u);
        sub_19DFC((uint64_t)&v97);
        if (v98.__m_.__opaque[15] < 0) {
          operator delete((void *)v98.__m_.__sig);
        }
      }
    }
  }

  return v24;
}

LABEL_112:
  uint64_t v57 = *(void *)(a2 + 8);
  *(_DWORD *)a1 = v12;
  *(_DWORD *)(a1 + 4) = v11;
  *(void *)(a1 + 8) = v57;
  sub_86550((uint64_t *)(a1 + 16), (uint64_t)v77);
  sub_32C8C(*(void **)&v77[8]);
}

    int v6 = (uint64_t *)v6[1];
  }

  while (v6 != &v90);
LABEL_129:
  sub_1BB88(&v90);
}

  if (v68)
  {
    uint64_t v69 = (unsigned int *)v68;
    operator delete(v68);
  }

    (*(void (**)(uint8_t *__return_ptr))(**(void **)(v541 + 192) + 128LL))(buf);
    if (CFStringCompare(*(CFStringRef *)buf, @"Codec", 0LL) == kCFCompareEqualTo)
    {
      sub_19DFC((uint64_t)buf);
LABEL_116:
      int v71 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v15->_os_unfair_lock_opaque + 240LL))( v15,  v518);
      *(void *)AudioObjectPropertyAddress buf = 0x6F7574706D757465LL;
      *(_DWORD *)&buf[8] = v71;
      if ((*(unsigned int (**)(os_unfair_lock_s *, uint8_t *))(*(void *)&v15->_os_unfair_lock_opaque + 16LL))( v15,  buf))
      {
        os_log_t v72 = operator new(0x28uLL);
        *os_log_t v72 = &off_4842A0;
        v72[1] = v15;
        v72[2] = *(void *)buf;
        *((_DWORD *)v72 + 6) = *(_DWORD *)&buf[8];
        *(void *)((char *)v72 + 28) = 0x100000000LL;
        char v73 = operator new(0x18uLL);
        int v74 = *(void **)(a3 + 8);
        *char v73 = a3;
        v73[1] = v74;
        v73[2] = v72;
        os_log_t *v74 = v73;
        __int16 v75 = *(void *)(a3 + 16) + 1LL;
        *(void *)(a3 + 8) = v73;
        *(void *)(a3 + 16) = v75;
        sub_1BCA18((uint64_t)v72);
      }

      goto LABEL_125;
    }

    (*(void (**)(_DWORD *__return_ptr))(**(void **)(v541 + 192) + 128LL))(__src);
    __int128 v70 = CFStringCompare(*(CFStringRef *)__src, @"Receiver", 0LL);
    sub_19DFC((uint64_t)__src);
    sub_19DFC((uint64_t)buf);
    if (v70 == kCFCompareEqualTo) {
      goto LABEL_116;
    }
LABEL_125:
    if (qword_48E768 != -1) {
      dispatch_once(&qword_48E768, &stru_471098);
    }
    if (os_unfair_lock_opaque == 1885433888)
    {
      if (byte_48E760)
      {
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(v541 + 192) + 128LL))(buf);
        unint64_t v79 = CFStringCompare(*(CFStringRef *)buf, @"Actuator", 0LL);
        sub_19DFC((uint64_t)buf);
        if (v79 == kCFCompareEqualTo)
        {
          unsigned int v80 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v15->_os_unfair_lock_opaque + 240LL))( v15,  v518);
          *(void *)AudioObjectPropertyAddress buf = 0x6F7574706D757465LL;
          *(_DWORD *)&buf[8] = v80;
          if ((*(unsigned int (**)(os_unfair_lock_s *, uint8_t *))(*(void *)&v15->_os_unfair_lock_opaque
                                                                             + 16LL))( v15,  buf))
          {
            int v81 = operator new(0x28uLL);
            *int v81 = &off_4842A0;
            v81[1] = v15;
            v81[2] = *(void *)buf;
            *((_DWORD *)v81 + 6) = *(_DWORD *)&buf[8];
            *(void *)((char *)v81 + 28) = 0x100000000LL;
            int v82 = operator new(0x18uLL);
            int v83 = *(void **)(a3 + 8);
            os_log_s *v82 = a3;
            v82[1] = v83;
            v82[2] = v81;
            *int v83 = v82;
            __int128 v84 = *(void *)(a3 + 16) + 1LL;
            *(void *)(a3 + 8) = v82;
            *(void *)(a3 + 16) = v84;
            sub_1BCA18((uint64_t)v81);
          }
        }
      }
    }

    if (sub_2C7B94((uint64_t)v15))
    {
      __int128 v85 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v15->_os_unfair_lock_opaque + 240LL))( v15,  v518);
      *(void *)AudioObjectPropertyAddress buf = 0x6F7574706D757465LL;
      *(_DWORD *)&buf[8] = v85;
      if ((*(unsigned int (**)(os_unfair_lock_s *, uint8_t *))(*(void *)&v15->_os_unfair_lock_opaque + 16LL))( v15,  buf))
      {
        uint64_t v86 = operator new(0x28uLL);
        *uint64_t v86 = &off_4842A0;
        v86[1] = v15;
        v86[2] = *(void *)buf;
        *((_DWORD *)v86 + 6) = *(_DWORD *)&buf[8];
        *(void *)((char *)v86 + 28) = 0x100000000LL;
        __int128 v87 = operator new(0x18uLL);
        __int128 v88 = *(void **)(a3 + 8);
        _BYTE *v87 = a3;
        v87[1] = v88;
        v87[2] = v86;
        *__int128 v88 = v87;
        uint64_t v89 = *(void *)(a3 + 16) + 1LL;
        *(void *)(a3 + 8) = v87;
        *(void *)(a3 + 16) = v89;
        sub_1BCA18((uint64_t)v86);
      }
    }

    sub_1B6C7C(v15, os_unfair_lock_opaque == 1885433888, *(_DWORD *)(a2 + 12), i[9], a3);
    if (v554[0].__r_.__value_.__r.__words[0])
    {
      v554[0].__r_.__value_.__l.__size_ = v554[0].__r_.__value_.__r.__words[0];
      operator delete(v554[0].__r_.__value_.__l.__data_);
    }

    uint64_t v90 = (std::__shared_weak_count *)*((void *)&v541 + 1);
    if (*((void *)&v541 + 1))
    {
      int v91 = (unint64_t *)(*((void *)&v541 + 1) + 8LL);
      do
        uint64_t v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }

    __int128 v93 = v528;
    if (v528)
    {
      uint64_t v94 = (unint64_t *)&v528->__shared_owners_;
      do
        int v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
  }

  if (!v537)
  {
    v490 = (os_log_t *)sub_138E8(13);
    v491 = *v490;
    if (*v490 && os_log_type_enabled(*v490, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 237;
      _os_log_impl( &dword_0,  v491,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): could not get any IO devices for multi route",  buf,  0x12u);
    }

    v492 = __cxa_allocate_exception(0x10uLL);
    *(void *)v492 = &off_4865A0;
    v492[2] = 2003329396;
  }

  std::string v96 = v536;
  if (&v535 != (void **)v536)
  {
    do
    {
      *(void *)AudioObjectPropertyAddress buf = buf;
      *(void *)&buf[8] = buf;
      std::string v97 = 1;
      *(void *)&buf[16] = 0LL;
      do
      {
        int v98 = v97;
        if ((v97 & 1) != 0) {
          unint64_t v99 = 3LL;
        }
        else {
          unint64_t v99 = 6LL;
        }
        if ((v97 & 1) != 0) {
          __int16 v100 = v96 + 3;
        }
        else {
          __int16 v100 = v96 + 6;
        }
        int v101 = v96[v99];
        if (v100[1] != v101)
        {
          __int16 v102 = 0LL;
          uint64_t v103 = 1;
          do
          {
            sub_134D88(buf, (uint64_t *)buf, *(void **)(v101 + 24 * v102 + 8), (void *)(v101 + 24 * v102));
            __int16 v102 = v103;
            int v101 = v96[v99];
            int v275 = 0xAAAAAAAAAAAAAAABLL * ((v100[1] - v101) >> 3) > v103++;
          }

          while (v275);
        }

        std::string v97 = 0;
      }

      while ((v98 & 1) != 0);
      __int16 v104 = sub_1BAB2C(*(_DWORD *)(a2 + 12));
      if (*(_BYTE *)(a2 + 164)) {
        int v105 = *(_DWORD *)(a2 + 160);
      }
      else {
        int v105 = v104;
      }
      __int16 v106 = operator new(0x30uLL);
      __int16 v107 = (*(uint64_t (**)(uint64_t))(*(void *)v96[2] + 120LL))(v96[2]);
      sub_85A90(&v529, buf);
      *(void *)__int16 v106 = off_484140;
      v106[2] = v107;
      *((void *)v106 + 2) = v106 + 4;
      *((void *)v106 + 3) = v106 + 4;
      *((void *)v106 + 4) = 0LL;
      int v108 = v531;
      if (v531)
      {
        uint64_t v110 = v529;
        __int16 v109 = v530;
        CFIndex v111 = *v530;
        *(void *)(v111 + 8) = *(void *)(v529 + 8);
        **(void **)(v110 + 8) = v111;
        uint64_t v112 = *((void *)v106 + 2);
        *(void *)(v112 + 8) = v109;
        os_log_t *v109 = v112;
        *((void *)v106 + 2) = v110;
        *(void *)(v110 + 8) = v106 + 4;
        *((void *)v106 + 4) = v108;
        v531 = 0LL;
      }

      v106[10] = v105;
      *((_BYTE *)v106 + 44) = 0;
      __int16 v113 = operator new(0x18uLL);
      uint64_t v114 = *(void **)(a3 + 8);
      *__int16 v113 = a3;
      v113[1] = v114;
      v113[2] = v106;
      *uint64_t v114 = v113;
      char v115 = *(void *)(a3 + 16) + 1LL;
      *(void *)(a3 + 8) = v113;
      *(void *)(a3 + 16) = v115;
      sub_CCAB4((uint64_t)v106);
      sub_85B80(&v529);
      sub_85B80((uint64_t *)buf);
      std::string v96 = (uint64_t *)v96[1];
    }

    while (&v535 != (void **)v96);
    for (uint64_t j = v536; j != (uint64_t *)&v535; uint64_t j = (uint64_t *)j[1])
    {
      BOOL v117 = (os_log_t *)sub_138E8(19);
      uint64_t v118 = *v117;
      if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_DEFAULT))
      {
        sub_1D4C48(v554, (uint64_t)(j + 2));
        char v119 = v554;
        if ((v554[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
          char v119 = (std::string *)v554[0].__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 262;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&uint8_t buf[20] = v119;
        _os_log_impl(&dword_0, v118, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device Description: %s", buf, 0x1Cu);
      }

      if (!sub_2C7B94(j[2]))
      {
        sub_1BBBD8(j + 9, (os_unfair_lock_s *)j[2], 1u);
        sub_1BBBD8(j + 12, (os_unfair_lock_s *)j[2], 0);
      }
    }
  }

  uint64_t v120 = *(void *)a2;
  v505 = *(_DWORD *)(a2 + 12);
  sub_105E0C((char **)&v527, *(_DWORD *)(v511 + 8), (_DWORD *)a2, (unsigned int **)v532);
  size_t v121 = sub_1BAF50((uint64_t)&v535);
  v508 = operator new(0x328uLL);
  *v508 = &off_47D730;
  uint64_t v122 = sub_7531C();
  if (HIDWORD(v121)) {
    v123 = v122;
  }
  else {
    v123 = 0;
  }
  int v124 = (v123 & 1) == 0 && (v121 & 0xFFFFFFFD) == 1;
  if (!v537)
  {
    v493 = (os_log_t *)sub_138E8(13);
    v494 = *v493;
    if (*v493 && os_log_type_enabled(*v493, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
      WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 464;
      _os_log_impl( &dword_0,  v494,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)v554,  0x12u);
    }

    v495 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v495, "Precondition failure.");
  }

  uint64_t v125 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&buf[16] = v125;
  *(_OWORD *)&_BYTE buf[32] = *(_OWORD *)(a2 + 152);
  v543 = *(unsigned int *)(a2 + 136);
  *(void *)&v544 = &v544;
  *((void *)&v544 + 1) = &v544;
  *(void *)&v545 = 0LL;
  v547[1] = 0LL;
  v547[0] = 0LL;
  v546[1] = v547;
  LOBYTE(v548) = 0;
  v550 = 0;
  LOBYTE(v551) = 0;
  v553 = 0;
  *(void *)__src = __src;
  *(void *)&__src[2] = __src;
  *(void *)&__src[4] = 0LL;
  unint64_t v126 = sub_138E8(16);
  int v127 = sub_138E8(33);
  uint64_t v128 = 0;
  uint64_t v129 = 0LL;
  v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
  uint64_t v130 = *(void *)(v126 + 8);
  while (1)
  {
    uint64_t v131 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v129);
    unint64_t v132 = v128;
    if (((v130 & v131) != 0) != ((*(void *)(v127 + 8) & v131) != 0)) {
      break;
    }
    uint64_t v128 = 1;
    uint64_t v129 = 1LL;
    if ((v132 & 1) != 0) {
      goto LABEL_190;
    }
  }

  if ((v130 & v131) == 0) {
    unint64_t v126 = v127;
  }
LABEL_190:
  uint64_t v133 = *(os_log_s **)v126;
  if (v133 && os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
    WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 46;
    WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2048;
    *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)&v535;
    _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d inPhysicalDeviceDescriptions: %p.",  (uint8_t *)v554,  0x1Cu);
  }

  for (uint64_t k = v536; k != (uint64_t *)&v535; uint64_t k = (uint64_t *)k[1])
  {
    sub_10AA94(v554, k + 2);
    int v135 = operator new(0x28uLL);
    *int v135 = 0LL;
    v135[1] = 0LL;
    v135[2] = v135 + 2;
    v135[3] = v135 + 2;
    v135[4] = 0LL;
    int64_t cap = v554[0].__r_.__value_.__l.__cap_;
    if (v554[0].__r_.__value_.__l.__cap_)
    {
      int v137 = *(_OWORD *)&v554[0].__r_.__value_.__l.__data_;
      __int16 v138 = *(void *)v554[0].__r_.__value_.__l.__size_;
      *(void *)(v138 + 8) = *(void *)(v554[0].__r_.__value_.__r.__words[0] + 8);
      **(void **)(v137 + 8) = v138;
      int v139 = v135[2];
      *(void *)(v139 + 8) = *((void *)&v137 + 1);
      **((void **)&v137 + 1) = v139;
      v135[2] = v137;
      *(void *)(v137 + 8) = v135 + 2;
      v135[4] = cap;
      v554[0].__r_.__value_.__l.__cap_ = 0LL;
    }

    uint64_t v140 = *(void *)__src;
    *int v135 = *(void *)__src;
    v135[1] = __src;
    *(void *)(v140 + 8) = v135;
    *(void *)__src = v135;
    ++*(void *)&__src[4];
    sub_68314(v554);
  }

  uint64_t v141 = sub_138E8(16);
  BOOL v142 = sub_138E8(33);
  __int16 v143 = 0;
  int v144 = 0LL;
  v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
  __int16 v145 = *(void *)(v141 + 8);
  while (1)
  {
    AudioObjectID v146 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v144);
    unint64_t v147 = v143;
    if (((v145 & v146) != 0) != ((*(void *)(v142 + 8) & v146) != 0)) {
      break;
    }
    __int16 v143 = 1;
    int v144 = 1LL;
    if ((v147 & 1) != 0) {
      goto LABEL_203;
    }
  }

  if ((v145 & v146) == 0) {
    uint64_t v141 = v142;
  }
LABEL_203:
  v513 = v121;
  v504 = v120;
  std::mutex v148 = *(os_log_s **)v141;
  if (v148 && os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
    WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 53;
    _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Built topology for multi aggregate device:",  (uint8_t *)v554,  0x12u);
  }

  for (uint64_t m = *(void *)&__src[2]; (_DWORD *)m != __src; uint64_t m = *(void *)(m + 8))
  {
    int v150 = *(void *)(*(void *)(m + 24) + 16LL);
    char v151 = sub_138E8(16);
    __int128 v152 = sub_138E8(33);
    BOOL v153 = 0;
    unsigned __int8 v154 = 0LL;
    v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
    unsigned int v155 = *(void *)(v151 + 8);
    while (1)
    {
      v156 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v154);
      unint64_t v157 = v153;
      if (((v155 & v156) != 0) != ((*(void *)(v152 + 8) & v156) != 0)) {
        break;
      }
      BOOL v153 = 1;
      unsigned __int8 v154 = 1LL;
      if ((v157 & 1) != 0) {
        goto LABEL_213;
      }
    }

    if ((v155 & v156) == 0) {
      char v151 = v152;
    }
LABEL_213:
    uint64_t v158 = *(os_log_s **)v151;
    if (v158 && os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
    {
      int64x2_t v159 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 120LL))(v150);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v150 + 128LL))(__p, v150);
      LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
      WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 58;
      WORD1(v554[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v554[0].__r_.__value_.__r.__words[2]) = v159;
      LOWORD(v554[1].__r_.__value_.__l.__data_) = 2112;
      *(void **)((char *)v554[1].__r_.__value_.__r.__words + 2) = __p[0];
      _os_log_impl( &dword_0,  v158,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - PhysicalDevice ID %u (uid: %@).",  (uint8_t *)v554,  0x22u);
      sub_19DFC((uint64_t)__p);
    }
  }

  sub_AB45C((uint64_t *)&v544);
  uint64_t v160 = *(void *)&__src[4];
  if (*(void *)&__src[4])
  {
    uint64_t v162 = *(void *)__src;
    uint64_t v161 = *(void **)&__src[2];
    v163 = **(void **)&__src[2];
    *(void *)(v163 + 8) = *(void *)(*(void *)__src + 8LL);
    **(void **)(v162 + 8) = v163;
    uint64_t v164 = v544;
    *(void *)(v544 + 8) = v161;
    *uint64_t v161 = v164;
    *(void *)&v544 = v162;
    *(void *)(v162 + 8) = &v544;
    *(void *)&v545 = v545 + v160;
    *(void *)&__src[4] = 0LL;
  }

  sub_AB45C((uint64_t *)__src);
  uint64_t v165 = *(os_unfair_lock_s **)(*(void *)(*((void *)&v544 + 1) + 24LL) + 16LL);
  v546[0] = v165;
  v166 = v536;
  v167 = 0LL;
  if (v536 != (uint64_t *)&v535)
  {
    do
    {
      v168 = HIDWORD(v167);
      int v169 = v166[2];
      if (v169)
      {
        LODWORD(v167) = (*(uint64_t (**)(uint64_t, void))(*(void *)v169 + 88LL))(v169, 0LL) + v167;
      }

      v167 = v167 | (v168 << 32);
      v166 = (uint64_t *)v166[1];
    }

    while (v166 != (uint64_t *)&v535);
    uint64_t v165 = (os_unfair_lock_s *)v546[0];
  }

  char v170 = *(void *)(v504 + 40);
  if (!v170)
  {
    char v172 = 0;
LABEL_233:
    __int16 v175 = 64;
    goto LABEL_234;
  }

  v171 = sub_2D10E8(v170, v505);
  if ((v171 & 0xFF00000000LL) != 0) {
    char v172 = v171;
  }
  else {
    char v172 = 0;
  }
  uint64_t v173 = *(void *)(v504 + 40);
  if (!v173) {
    goto LABEL_233;
  }
  v174 = sub_2D129C(v173, v505);
  if ((v174 & 0xFF00000000LL) != 0) {
    __int16 v175 = v174;
  }
  else {
    __int16 v175 = 64;
  }
LABEL_234:
  v554[0].__r_.__value_.__s.__data_[0] = 0;
  v554[1].__r_.__value_.__s.__data_[0] = 0;
  v554[1].__r_.__value_.__s.__data_[8] = 0;
  v556 = 0;
  int v176 = *(void *)(a2 + 148);
  uint64_t v177 = *(_DWORD *)(a2 + 136);
  v178 = v177 == 1987208039 || v177 == 1987211117;
  uint64_t v179 = v177 == 1986556788 || v178;
  uint64_t v180 = sub_1FEC80((_DWORD *)v504, v179);
  DWORD1(v543) = sub_2877F0((uint64_t)&v544, (int *)v504, v167, v165, v172, v175, 0, 0, (uint64_t)v554, v176, v180);
  if (v556 && v555 < 0) {
    operator delete((void *)v554[1].__r_.__value_.__l.__size_);
  }
  *((void *)&v543 + 1) = sub_2895AC( DWORD1(v543),  (OSStatus (__cdecl *)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))sub_2B57C8,  v508);
  WORD4(v545) = v124;
  sub_52A24((uint64_t)&v546[1], v533, v534);
  int v181 = sub_138E8(16);
  uint64_t v182 = sub_138E8(33);
  uint64_t v183 = 0;
  uint64_t v184 = 0LL;
  v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
  v185 = *(void *)(v181 + 8);
  uint64_t v186 = (unsigned int *)v504;
  while (1)
  {
    uint64_t v187 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v184);
    uint64_t v188 = v183;
    if (((v185 & v187) != 0) != ((*(void *)(v182 + 8) & v187) != 0)) {
      break;
    }
    uint64_t v183 = 1;
    uint64_t v184 = 1LL;
    if ((v188 & 1) != 0)
    {
      if ((v185 & 1) == 0) {
        goto LABEL_257;
      }
      goto LABEL_254;
    }
  }

  if ((v185 & v187) == 0) {
    int v181 = v182;
  }
  if ((*(void *)(v181 + 8) & 1) != 0)
  {
LABEL_254:
    unint64_t v189 = *(os_log_s **)v181;
    if (v189 && os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
      WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 487;
      WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2048;
      *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = v537;
      _os_log_impl( &dword_0,  v189,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d inPhysicalDeviceDescriptions.size(): %lu.",  (uint8_t *)v554,  0x1Cu);
    }
  }

void sub_E6574( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

CFTypeRef sub_E6604(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)a2;
  *(void *)a1 = *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  if (v4) {
    BOOL v5 = result == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    CFTypeRef result = CFRetain(result);
  }
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_E6650(uint64_t a1, const __CFDictionary **a2)
{
  if (!*a2)
  {
    *(_OWORD *)(a1 + sub_19DFC(v32 - 96) = 0u;
    *(_OWORD *)(a1 + sub_19DFC(v32 - 112) = 0u;
    *(void *)(a1 + 160) = 0LL;
    *(_OWORD *)(a1 + sub_19DFC(v32 - 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0u;
    *(_OWORD *)(a1 + sub_7A768(v2 - 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 1065353216;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_DWORD *)(a1 + 120) = 1065353216;
    *(_DWORD *)(a1 + 160) = 1065353216;
    return;
  }

  int v4 = sub_E6E10(*a2, "input port UIDs");
  if (!v4) {
    goto LABEL_10;
  }
  BOOL v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_10:
    LOBYTE(buf[0]) = 0;
    LOBYTE(buf[2]) = 0;
    CFArrayRef v32 = 0LL;
    sub_8D840((uint64_t)buf);
    BOOL v5 = 0LL;
    char v14 = 1;
    goto LABEL_21;
  }

  *(void *)AudioObjectPropertyAddress buf = v5;
  LOBYTE(buf[2]) = 1;
  CFRetain(v5);
  CFArrayRef v32 = (CFArrayRef)v5;
  sub_8D840((uint64_t)buf);
  uint64_t v7 = sub_138E8(2);
  uint64_t v8 = sub_138E8(34);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = (int)buf[v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_13;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_13:
  char v15 = *(os_log_s **)v7;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_151A78(&__p, (const __CFArray *)v5);
    uint64_t v16 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    buf[0] = 136315650;
    *(void *)&buf[1] = "VirtualAudio_Utilities.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1096;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v16;
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Persistent input port UIDs: %s.", (uint8_t *)buf, 0x1Cu);
  }

  char v14 = 0;
LABEL_21:
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  uint64_t v17 = sub_81298(*a2, "output port UIDs");
  if (v17)
  {
    uint64_t v18 = v17;
    CFRetain(v17);
    CFTypeID v19 = CFGetTypeID(v18);
    if (v19 == CFArrayGetTypeID())
    {
      *(void *)AudioObjectPropertyAddress buf = v18;
      LOBYTE(buf[2]) = 1;
      CFRetain(v18);
      CFArrayRef v30 = (CFArrayRef)v18;
      sub_8D840((uint64_t)buf);
      uint64_t v20 = sub_138E8(2);
      uint64_t v21 = sub_138E8(34);
      char v22 = 0;
      uint64_t v23 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v24 = *(void *)(v20 + 8);
      while (1)
      {
        uint64_t v25 = (int)buf[v23];
        char v26 = v22;
        if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
          break;
        }
        char v22 = 1;
        uint64_t v23 = 1LL;
        if ((v26 & 1) != 0) {
          goto LABEL_32;
        }
      }

      if ((v24 & v25) == 0) {
        uint64_t v20 = v21;
      }
LABEL_32:
      uint64_t v27 = *(os_log_s **)v20;
      if (v27)
      {
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          sub_151A78(&__p, (const __CFArray *)v18);
          uint64_t v28 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          buf[0] = 136315650;
          *(void *)&buf[1] = "VirtualAudio_Utilities.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1101;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v28;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Persistent output port UIDs: %s.",  (uint8_t *)buf,  0x1Cu);
        }

        LOBYTE(v27) = 0;
      }

      goto LABEL_40;
    }

    CFRelease(v18);
  }

  LOBYTE(buf[0]) = 0;
  LOBYTE(buf[2]) = 0;
  CFArrayRef v30 = 0LL;
  sub_8D840((uint64_t)buf);
  uint64_t v18 = 0LL;
  LOBYTE(v27) = 1;
LABEL_40:
  memset(buf, 0, 24);
  memset(&__p, 0, sizeof(__p));
  sub_E6BB4((CFTypeRef **)buf, &v32);
  sub_E6BB4((CFTypeRef **)&__p, &v30);
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_8D204( (void *)a1,  *(const void ***)buf,  *(const void ***)&buf[2],  (uint64_t)(*(void *)&buf[2] - *(void *)buf) >> 3);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + sub_7A768(v2 - 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_8D204( (void *)(a1 + 24),  (const void **)__p.__r_.__value_.__l.__data_,  (const void **)__p.__r_.__value_.__l.__size_,  (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + sub_19DFC(v32 - 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  uint64_t p_p = &__p;
  sub_8C8F0((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_8C8F0((void ***)&__p);
  if ((v14 & 1) == 0) {
    CFRelease(v5);
  }
}

void sub_E6AFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13)
{
}

void sub_E6BB4(CFTypeRef **a1, CFArrayRef *a2)
{
  int v2 = *a2;
  if (*a2)
  {
    CFIndex Count = CFArrayGetCount(*a2);
    CFIndex v6 = Count;
    uint64_t v7 = *a2;
    if (v7)
    {
      CFIndex v8 = CFArrayGetCount(v7);
      if (!v6) {
        return;
      }
    }

    else
    {
      CFIndex v8 = 0LL;
      if (!Count) {
        return;
      }
    }

    unint64_t v9 = 0LL;
    do
    {
      if (v2 == v7 && v9 == v8) {
        break;
      }
      sub_36030(&cf, v2, v9);
      CFTypeRef v10 = cf;
      if (cf)
      {
        CFTypeID v11 = CFGetTypeID(cf);
        if (v11 == CFStringGetTypeID())
        {
          sub_D9B14(&v27, &cf);
          uint64_t v12 = a1[1];
          unint64_t v13 = (unint64_t)a1[2];
          if ((unint64_t)v12 >= v13)
          {
            char v14 = *a1;
            uint64_t v15 = v12 - *a1;
            unint64_t v16 = v15 + 1;
            uint64_t v17 = v13 - (void)v14;
            if (v17 >> 2 > v16) {
              unint64_t v16 = v17 >> 2;
            }
            else {
              unint64_t v18 = v16;
            }
            CFArrayRef v32 = a1 + 2;
            if (v18)
            {
              unint64_t v18 = (unint64_t)sub_7DC90(v18);
              char v14 = *a1;
              uint64_t v12 = a1[1];
            }

            else
            {
              uint64_t v19 = 0LL;
            }

            uint64_t v20 = (CFTypeRef *)(v18 + 8 * v15);
            unint64_t v21 = v18 + 8 * v19;
            unint64_t v31 = v21;
            *uint64_t v20 = v27;
            char v22 = v20 + 1;
            CFTypeRef v27 = 0LL;
            *((void *)&v30 + 1) = v20 + 1;
            if (v12 != v14)
            {
              do
              {
                uint64_t v23 = *--v12;
                *--uint64_t v20 = v23;
                *uint64_t v12 = 0LL;
              }

              while (v12 != v14);
              char v22 = (CFTypeRef *)*((void *)&v30 + 1);
              unint64_t v21 = v31;
            }

            __int128 v24 = *(_OWORD *)a1;
            *a1 = v20;
            a1[1] = v22;
            __int128 v30 = v24;
            uint64_t v25 = a1[2];
            a1[2] = (CFTypeRef *)v21;
            unint64_t v31 = (unint64_t)v25;
            uint64_t v29 = v24;
            sub_E6DC4((uint64_t)&v29);
            CFTypeRef v26 = v27;
            a1[1] = v22;
            if (v26) {
              CFRelease(v26);
            }
          }

          else
          {
            *uint64_t v12 = v27;
            a1[1] = v12 + 1;
          }
        }

        CFRelease(v10);
      }

      ++v9;
    }

    while (v9 != v6);
  }

void sub_E6D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, const void *);
  sub_7A738((const void **)va);
  sub_7DCC4((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_E6DC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_8D328(v4);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void *sub_E6E10(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0LL;
  }
  return Value;
}

void sub_E6ED0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL sub_E6F10()
{
  if (!byte_48D6E4)
  {
    unsigned __int8 v0 = (void *)sub_EAD14();
    std::string __p = (void *)CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
    LOBYTE(v8) = 1;
    byte_48D6E4 = sub_EAE28(v0, (CFStringRef *)&__p) != 0;
    sub_19DFC((uint64_t)&__p);
  }

  if (byte_48D6E5)
  {
    BOOL v1 = 1;
    return byte_48D6E4 && v1;
  }

  uint64_t v2 = sub_546E0();
  uint64_t v3 = operator new(4uLL);
  _DWORD *v3 = 1886216809;
  std::string __p = v3;
  CFIndex v8 = v3 + 1;
  unint64_t v9 = v3 + 1;
  strcpy(v10, "cwdv");
  v10[8] = 0;
  int v11 = 3;
  v13[0] = 0LL;
  v13[1] = 0LL;
  uint64_t v12 = v13;
  int v14 = 44739242;
  CFTypeRef cf = 0LL;
  v17[0] = &off_46F338;
  unint64_t v18 = v17;
  sub_FF3FC(v16, v2, (unsigned int **)&__p, (uint64_t)v17);
  int v4 = v18;
  if (v18 == v17)
  {
    uint64_t v5 = 4LL;
    int v4 = v17;
    goto LABEL_9;
  }

  if (v18)
  {
    uint64_t v5 = 5LL;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v13[0]);
  if (__p)
  {
    CFIndex v8 = __p;
    operator delete(__p);
  }

  byte_48D6E5 = v16[2] != 0;
  sub_85B80(v16);
  BOOL v1 = byte_48D6E5 != 0;
  return byte_48D6E4 && v1;
}

void sub_E70D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E7140(uint64_t result, uint64_t a2, void **a3, uint64_t a4)
{
  CFStringRef v6 = (uint64_t *)a2;
  uint64_t v7 = (uint64_t **)result;
  CFIndex v8 = (void **)(result + 8);
  if (result + 8 == a2 || (CFTypeRef result = sub_845A0(a3, (void **)(a2 + 32)), (result & 0x80) != 0))
  {
    uint64_t v10 = *v6;
    if (*v7 == v6)
    {
      uint64_t v12 = v6;
    }

    else
    {
      if (v10)
      {
        int v11 = (uint64_t *)*v6;
        do
        {
          uint64_t v12 = v11;
          int v11 = (uint64_t *)v11[1];
        }

        while (v11);
      }

      else
      {
        uint64_t v15 = v6;
        do
        {
          uint64_t v12 = (uint64_t *)v15[2];
          BOOL v16 = *v12 == (void)v15;
          uint64_t v15 = v12;
        }

        while (v16);
      }

      CFTypeRef result = sub_845A0(v12 + 4, a3);
      if ((result & 0x80) == 0) {
        goto LABEL_19;
      }
    }

    if (!v10)
    {
      uint64_t v20 = v6;
      unint64_t v9 = (void **)v6;
      goto LABEL_25;
    }

    uint64_t v20 = v12;
    unint64_t v9 = (void **)(v12 + 1);
    goto LABEL_22;
  }

  CFTypeRef result = sub_845A0(v6 + 4, a3);
  if ((result & 0x80) != 0)
  {
    uint64_t v13 = v6[1];
    if (v13)
    {
      int v14 = (void **)v6[1];
      do
      {
        unint64_t v9 = v14;
        int v14 = (void **)*v14;
      }

      while (v14);
    }

    else
    {
      uint64_t v17 = (void **)v6;
      do
      {
        unint64_t v9 = (void **)v17[2];
        BOOL v16 = *v9 == v17;
        uint64_t v17 = v9;
      }

      while (!v16);
    }

    if (v9 == v8 || (CFTypeRef result = sub_845A0(a3, v9 + 4), (result & 0x80) != 0))
    {
      if (v13)
      {
        uint64_t v20 = (uint64_t *)v9;
      }

      else
      {
        uint64_t v20 = v6;
        unint64_t v9 = (void **)(v6 + 1);
      }

void *sub_E72E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  CFStringRef v6 = (char *)operator new(0x38uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  CFTypeRef result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    CFTypeRef result = sub_24054(result, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)CFTypeRef result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }

  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_E7358(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_88C50(0, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_E7374(uint64_t result, uint64_t a2)
{
  qword_4938E8 = 0LL;
  qword_4938E0 = 0LL;
  qword_4938D8 = (uint64_t)&qword_4938E0;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0LL;
    uint64_t v4 = result + 16 * a2;
    for (uint64_t i = &qword_4938E0; i != &qword_4938E0; uint64_t i = (uint64_t *)qword_4938D8)
    {
      CFStringRef v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          uint64_t v7 = v6;
          CFStringRef v6 = (uint64_t *)v6[1];
        }

        while (v6);
      }

      else
      {
        CFIndex v8 = &qword_4938E0;
        do
        {
          uint64_t v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          CFIndex v8 = v7;
        }

        while (v9);
      }

      uint64_t v10 = *(void **)v2;
      size_t v11 = *(void *)(v2 + 8);
      CFTypeRef result = sub_84668((const void *)v7[4], v7[5], *(void **)v2, v11);
      if ((result & 0x80) != 0) {
        goto LABEL_19;
      }
      if (v3)
      {
        uint64_t v12 = (uint64_t *)v3;
        do
        {
          while (1)
          {
            uint64_t v7 = v12;
            uint64_t v13 = (void *)v12[4];
            size_t v14 = v12[5];
            if ((sub_84668(v10, v11, v13, v14) & 0x80) == 0) {
              break;
            }
            uint64_t v12 = (uint64_t *)*v7;
            uint64_t v15 = v7;
            if (!*v7) {
              goto LABEL_23;
            }
          }

          CFTypeRef result = sub_84668(v13, v14, v10, v11);
          if ((result & 0x80) == 0) {
            goto LABEL_26;
          }
          uint64_t v15 = v7 + 1;
          uint64_t v12 = (uint64_t *)v7[1];
        }

        while (v12);
        goto LABEL_23;
      }

void sub_E7514(_Unwind_Exception *a1)
{
}

void sub_E7528(void *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (a1[2] != v6)
  {
    unint64_t v7 = a1[4];
    CFIndex v8 = (char **)(v6 + 8 * (v7 >> 8));
    BOOL v9 = *v8;
    uint64_t v10 = &(*v8)[16 * v7];
    uint64_t v11 = *(void *)(v6 + (((a1[5] + v7) >> 5) & 0x7FFFFFFFFFFFFF8LL))
        + 16LL * (*((_BYTE *)a1 + 40) + v7);
    while (v10 != (char *)v11)
    {
      if (!*(_DWORD *)v10)
      {
        uint64_t v13 = (os_log_t *)sub_138E8(7);
        size_t v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "DeviceManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 253;
          _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d invalid AudioObjectID", (uint8_t *)buf, 0x12u);
        }

        break;
      }

      v10 += 16;
      if (v10 - v9 == 4096)
      {
        uint64_t v12 = v8[1];
        ++v8;
        BOOL v9 = v12;
        uint64_t v10 = v12;
      }
    }
  }

  uint64_t v15 = a1[1];
  if (a1[2] != v15)
  {
    unint64_t v16 = a1[4];
    uint64_t v17 = (uint64_t *)(v15 + 8 * (v16 >> 8));
    uint64_t v18 = *v17;
    uint64_t v19 = *v17 + 16LL * v16;
    uint64_t v20 = *(void *)(v15 + (((a1[5] + v16) >> 5) & 0x7FFFFFFFFFFFFF8LL))
        + 16LL * (*((_BYTE *)a1 + 40) + v16);
    while (v19 != v20)
    {
      if (!*(void *)(v19 + 8))
      {
        if (!a2)
        {
          std::mutex v148 = (os_log_t *)sub_138E8(7);
          __int16 v149 = *v148;
          if (*v148)
          {
            if (os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "DeviceManager.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 254;
              _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_ERROR,  "%25s:%-5d uid is NULL for a new PhysicalDevice",  (uint8_t *)buf,  0x12u);
            }
          }
        }

        break;
      }

      v19 += 16LL;
      if (v19 - v18 == 4096)
      {
        uint64_t v21 = v17[1];
        ++v17;
        uint64_t v18 = v21;
        uint64_t v19 = v21;
      }
    }
  }

  if (a3)
  {
    int v152 = (*(uint64_t (**)(uint64_t *))(*a3 + 16))(a3);
    char v22 = a3 + 13;
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(void *)&AudioObjectPropertyAddress buf[2] = buf;
    *(void *)&uint8_t buf[4] = 0LL;
    for (uint64_t i = a3 + 13; ; sub_EACA8((uint64_t *)buf, i[2], i[3]))
    {
      uint64_t i = (uint64_t *)i[1];
      if (i == v22) {
        break;
      }
    }

    int v154 = std::uncaught_exceptions();
    v155[0] = v155;
    v155[1] = v155;
    uint64_t v156 = 0LL;
    uint64_t v24 = *(void *)&buf[4];
    if (*(void *)&buf[4])
    {
      uint64_t v26 = *(void *)buf;
      uint64_t v25 = *(void **)&buf[2];
      uint64_t v27 = **(void **)&buf[2];
      *(void *)(v27 + 8) = *(void *)(*(void *)buf + 8LL);
      **(void **)(v26 + 8) = v27;
      uint64_t v28 = v155[0];
      *(void *)(v155[0] + 8LL) = v25;
      void *v25 = v28;
      v155[0] = v26;
      *(void *)(v26 + 8) = v155;
      uint64_t v156 = v24;
      *(void *)&uint8_t buf[4] = 0LL;
    }

    sub_1BB88((uint64_t *)buf);
    memset(v153, 0, sizeof(v153));
    if (a2)
    {
      memset(buf, 0, 48);
      uint64_t v164 = &v164;
      uint64_t v165 = (uint64_t *)&v164;
      uint64_t v166 = 0LL;
      LOBYTE(v159) = 0;
      uint64_t v160 = 0LL;
      uint64_t v29 = (_DWORD *)sub_546E0();
      sub_1008E4(v29);
      uint64_t v30 = a1[1];
      if (a1[2] != v30)
      {
        unint64_t v31 = a1[4];
        uint64_t v32 = a1[5];
        char v33 = (void *)(v30 + 8 * (v31 >> 8));
        uint64_t v34 = *v33 + 16LL * v31;
        uint64_t v35 = *(void *)(v30 + (((v32 + v31) >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * (v32 + v31);
        if (v34 != v35)
        {
          while (1)
          {
            char v36 = (os_log_t *)sub_138E8(7);
            uint64_t v37 = *v36;
            if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
            {
              int v38 = *(_DWORD *)v34;
              uint64_t v39 = *(void *)(v34 + 8);
              v171[0] = 136316162;
              *(void *)&v171[1] = "DeviceManager.cpp";
              LOWORD(v171[3]) = 1024;
              *(_DWORD *)((char *)&v171[3] + 2) = 365;
              HIWORD(v171[4]) = 2080;
              *(void *)&v171[5] = "Removed";
              LOWORD(v171[7]) = 1024;
              *(_DWORD *)((char *)&v171[7] + 2) = v38;
              HIWORD(v171[8]) = 2112;
              *(void *)&v171[9] = v39;
              _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Handling device state [%s] for Device ID: %u for UID: %@",  (uint8_t *)v171,  0x2Cu);
            }

            char v40 = (os_log_t *)sub_138E8(7);
            int v41 = *v40;
            if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_INFO))
            {
              int v42 = *(_DWORD *)v34;
              uint64_t v43 = *(void *)(v34 + 8);
              v171[0] = 136315906;
              *(void *)&v171[1] = "DeviceManager.cpp";
              LOWORD(v171[3]) = 1024;
              *(_DWORD *)((char *)&v171[3] + 2) = 402;
              HIWORD(v171[4]) = 1024;
              v171[5] = v42;
              LOWORD(v171[6]) = 2112;
              *(void *)((char *)&v171[6] + 2) = v43;
              _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_INFO,  "%25s:%-5d Deleting Device ID: %u with UID: %@",  (uint8_t *)v171,  0x22u);
            }

            int v44 = (uint64_t *)a3[14];
            if (v44 == v22) {
              break;
            }
            int v45 = *(_DWORD *)v34;
            while ((*(unsigned int (**)(uint64_t))(*(void *)v44[2] + 120LL))(v44[2]) != v45)
            {
              int v44 = (uint64_t *)v44[1];
              if (v44 == v22) {
                goto LABEL_43;
              }
            }

            if (v44 == v22) {
              break;
            }
            uint64_t v46 = (void *)v44[2];
            unsigned __int16 v47 = (std::__shared_weak_count *)v44[3];
            std::string __p = v46;
            v168 = v47;
            if (v47)
            {
              p_shared_owners = (unint64_t *)&v47->__shared_owners_;
              do
                unint64_t v49 = __ldxr(p_shared_owners);
              while (__stxr(v49 + 1, p_shared_owners));
            }

            if (!v46) {
              goto LABEL_44;
            }
            uint64_t v50 = *v44;
            *(void *)(v50 + 8) = v44[1];
            *(void *)v44[1] = v50;
            --a3[15];
            sub_7A768((uint64_t)(v44 + 2));
            operator delete(v44);
            uint64_t v51 = __p;
            (*(void (**)(void *))(*(void *)__p + 80LL))(__p);
            CFTypeRef cf = v51;
            uint64_t v163 = (uint64_t)v168;
LABEL_53:
            uint64_t v56 = operator new(0x20uLL);
            uint64_t v57 = v163;
            v56[2] = v51;
            v56[3] = v57;
            if (v57)
            {
              unint64_t v58 = (unint64_t *)(v57 + 8);
              do
                unint64_t v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
            }

            uint64_t v60 = (uint64_t)v164;
            void *v56 = v164;
            v56[1] = &v164;
            *(void *)(v60 + 8) = v56;
            uint64_t v164 = v56;
            ++v166;
LABEL_57:
            unsigned __int16 v61 = (std::__shared_weak_count *)v163;
            if (v163)
            {
              int v62 = (unint64_t *)(v163 + 8);
              do
                unint64_t v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }

            v34 += 16LL;
            if (v34 - *v33 == 4096)
            {
              uint64_t v64 = v33[1];
              ++v33;
              uint64_t v34 = v64;
            }

            if (v34 == v35) {
              goto LABEL_65;
            }
          }

LABEL_82:
              os_log_t v72 = (uint64_t *)v72[1];
            }

            while (v72 != &v159);
          }

          int v83 = 1;
        }

        else
        {
          if (v160 != &v159)
          {
            do
            {
              uint64_t v136 = sub_138E8(7);
              uint64_t v137 = sub_138E8(15);
              char v138 = 0;
              uint64_t v139 = 0LL;
              *(void *)v171 = 0x100000002LL;
              uint64_t v140 = *(void *)(v136 + 8);
              while (1)
              {
                uint64_t v141 = (int)v171[v139];
                char v142 = v138;
                if (((v140 & v141) != 0) != ((*(void *)(v137 + 8) & v141) != 0)) {
                  break;
                }
                char v138 = 1;
                uint64_t v139 = 1LL;
                if ((v142 & 1) != 0)
                {
                  if ((v140 & 1) == 0) {
                    goto LABEL_172;
                  }
                  goto LABEL_166;
                }
              }

              if ((v140 & v141) == 0) {
                uint64_t v136 = v137;
              }
              if ((*(void *)(v136 + 8) & 1) != 0)
              {
LABEL_166:
                __int16 v143 = *(os_log_s **)v136;
                if (v143 && os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
                {
                  int v144 = (os_unfair_lock_s *)v72[2];
                  sub_23FE8((uint64_t)&__p, v144 + 2);
                  __int16 v145 = &__p;
                  if (v169 < 0) {
                    __int16 v145 = __p;
                  }
                  v171[0] = 136315906;
                  *(void *)&v171[1] = "DeviceManager.cpp";
                  LOWORD(v171[3]) = 1024;
                  *(_DWORD *)((char *)&v171[3] + 2) = 65;
                  HIWORD(v171[4]) = 2048;
                  *(void *)&v171[5] = v144;
                  LOWORD(v171[7]) = 2080;
                  *(void *)((char *)&v171[7] + 2) = v145;
                  _os_log_impl( &dword_0,  v143,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Immediately deleting device %p (%s).",  (uint8_t *)v171,  0x26u);
                  if (v169 < 0) {
                    operator delete(__p);
                  }
                }
              }

LABEL_172:
              os_log_t v72 = (uint64_t *)v72[1];
            }

            while (v72 != &v159);
          }

          AudioObjectID v146 = (os_log_t *)sub_138E8(7);
          unint64_t v147 = *v146;
          if (*v146 && os_log_type_enabled(*v146, OS_LOG_TYPE_ERROR))
          {
            v171[0] = 136315394;
            *(void *)&v171[1] = "DeviceManager.cpp";
            LOWORD(v171[3]) = 1024;
            *(_DWORD *)((char *)&v171[3] + 2) = 71;
            _os_log_impl( &dword_0,  v147,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to locate a valid serialization context. Deleting the device synchronously. This may lead to a crash if someone tries to access it or its controls subsequently.",  (uint8_t *)v171,  0x12u);
          }

          int v83 = 0;
        }

        sub_E9114((unint64_t *)qword_4A9BE8, &v159, v83);
      }

      sub_1BB88(&v159);
      if (*(void *)&buf[10])
      {
        exception = __cxa_allocate_exception(0x58uLL);
        sub_E9720((uint64_t)v171, buf);
        sub_E99F0((uint64_t)exception, v171);
      }

      sub_1BB88((uint64_t *)&v164);
      int v135 = buf;
    }

    else
    {
      memset(v171, 0, 48);
      LOBYTE(v164) = 1;
      uint64_t v165 = a3;
      if (((*(uint64_t (**)(uint64_t *))(*a3 + 48))(a3) & 1) == 0)
      {
        uint64_t v86 = (os_log_t *)sub_138E8(13);
        __int128 v87 = *v86;
        if (*v86)
        {
          if (os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "PortManager.h";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 202;
            _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Client mutex is not owned by the current thread",  (uint8_t *)buf,  0x12u);
          }
        }
      }

      __int128 v88 = (_DWORD *)sub_546E0();
      sub_1008E4(v88);
      uint64_t v89 = a1[1];
      if (a1[2] != v89)
      {
        unint64_t v90 = a1[4];
        uint64_t v91 = a1[5];
        uint64_t v92 = (void *)(v89 + 8 * (v90 >> 8));
        uint64_t v93 = *v92 + 16LL * v90;
        uint64_t v94 = *(void *)(v89 + (((v91 + v90) >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * (v91 + v90);
        while (v93 != v94)
        {
          int v95 = (os_log_t *)sub_138E8(7);
          std::string v96 = *v95;
          if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_DEFAULT))
          {
            AudioObjectPropertySelector v97 = *(_DWORD *)v93;
            uint64_t v98 = *(void *)(v93 + 8);
            buf[0] = 136316162;
            *(void *)&buf[1] = "DeviceManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 319;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = "Added";
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = v97;
            HIWORD(buf[8]) = 2112;
            *(void *)&buf[9] = v98;
            _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Handling device state [%s] for Device ID: %u for UID: %@",  (uint8_t *)buf,  0x2Cu);
          }

          if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_HandleDeviceArrival", 0x16uLL) == &qword_4938E0)
          {
            os_signpost_id_t v100 = 0LL;
          }

          else
          {
            unsigned __int8 v99 = atomic_load((unsigned __int8 *)&qword_493908);
            if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
            {
              qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_493908);
            }

            os_signpost_id_t v100 = os_signpost_id_generate((os_log_t)qword_493900);
            unsigned __int8 v101 = atomic_load((unsigned __int8 *)&qword_493908);
            if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
            {
              qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_493908);
            }

            if (v100 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              __int16 v102 = (os_log_s *)qword_493900;
              if (os_signpost_enabled((os_log_t)qword_493900))
              {
                AudioObjectPropertySelector v103 = *(_DWORD *)v93;
                uint64_t v104 = *(void *)(v93 + 8);
                buf[0] = 67109378;
                buf[1] = v103;
                LOWORD(buf[2]) = 2112;
                *(void *)((char *)&buf[2] + 2) = v104;
                _os_signpost_emit_with_name_impl( &dword_0,  v102,  OS_SIGNPOST_INTERVAL_BEGIN,  v100,  "VA_HandleDeviceArrival",  "Adding device, ID: %u for UID: %@",  (uint8_t *)buf,  0x12u);
              }
            }
          }

          os_signpost_id_t v157 = v100;
          uint64_t v105 = sub_138E8(42);
          if ((*(_BYTE *)(v105 + 8) & 1) != 0)
          {
            __int16 v106 = *(os_log_s **)v105;
            if (*(void *)v105)
            {
              if (os_log_type_enabled(*(os_log_t *)v105, OS_LOG_TYPE_DEBUG))
              {
                buf[0] = 136315650;
                *(void *)&buf[1] = "SignpostUtilities.h";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 97;
                HIWORD(buf[4]) = 2080;
                *(void *)&buf[5] = "kHandleDeviceArrival";
                _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting measurement for signpost %s",  (uint8_t *)buf,  0x1Cu);
              }
            }
          }

          __int16 v107 = (os_log_t *)sub_138E8(7);
          int v108 = *v107;
          if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_INFO))
          {
            AudioObjectPropertySelector v109 = *(_DWORD *)v93;
            uint64_t v110 = *(void *)(v93 + 8);
            buf[0] = 136315906;
            *(void *)&buf[1] = "DeviceManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 266;
            HIWORD(buf[4]) = 1024;
            buf[5] = v109;
            LOWORD(buf[6]) = 2112;
            *(void *)((char *)&buf[6] + 2) = v110;
            _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_INFO,  "%25s:%-5d Creating Device ID: %u with UID: %@",  (uint8_t *)buf,  0x22u);
          }

          uint64_t v111 = a3[14];
          AudioObjectPropertySelector v112 = *(_DWORD *)v93;
          while ((*(unsigned int (**)(void))(**(void **)(v111 + 16) + 120LL))(*(void *)(v111 + 16)) != v112)
          {
            uint64_t v111 = *(void *)(v111 + 8);
          }

          if ((uint64_t *)v111 == v22)
          {
LABEL_120:
            AudioObjectPropertySelector v115 = *(_DWORD *)v93;
            int v116 = *(const void **)(v93 + 8);
            if (v116) {
              CFRetain(*(CFTypeRef *)(v93 + 8));
            }
            CFTypeRef cf = v116;
            sub_166594(&__p, v115, &cf);
            if (cf) {
              CFRelease(cf);
            }
            if (__p)
            {
              sub_EACA8(a3 + 13, (uint64_t)__p, (uint64_t)v168);
              (*(void (**)(void *))(*(void *)__p + 136LL))(__p);
              uint64_t v159 = 0x676C6F6264736473LL;
              LODWORD(v160) = 0;
              if (*((_BYTE *)a3 + 128)
                && (*(unsigned int (**)(void *, uint64_t *))(*(void *)__p + 16LL))(__p, &v159))
              {
                int v158 = 1;
                (*(void (**)(void *, uint64_t *, void, void, uint64_t, int *))(*(void *)__p + 48LL))( __p,  &v159,  0LL,  0LL,  4LL,  &v158);
                uint64_t v117 = sub_138E8(7);
                uint64_t v118 = sub_138E8(27);
                char v119 = 0;
                uint64_t v120 = 0LL;
                *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
                uint64_t v121 = *(void *)(v117 + 8);
                while (1)
                {
                  uint64_t v122 = (int)buf[v120];
                  char v123 = v119;
                  if (((v121 & v122) != 0) != ((*(void *)(v118 + 8) & v122) != 0)) {
                    break;
                  }
                  char v119 = 1;
                  uint64_t v120 = 1LL;
                  if ((v123 & 1) != 0)
                  {
                    if ((v121 & 1) == 0) {
                      goto LABEL_141;
                    }
                    goto LABEL_138;
                  }
                }

                if ((v121 & v122) == 0) {
                  uint64_t v117 = v118;
                }
                if ((*(void *)(v117 + 8) & 1) != 0)
                {
LABEL_138:
                  uint64_t v128 = *(os_log_s **)v117;
                  if (v128 && os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
                  {
                    AudioObjectPropertySelector v129 = *(_DWORD *)v93;
                    uint64_t v130 = *(void *)(v93 + 8);
                    buf[0] = 136315906;
                    *(void *)&buf[1] = "DeviceManager.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 297;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v129;
                    LOWORD(buf[6]) = 2112;
                    *(void *)((char *)&buf[6] + 2) = v130;
                    _os_log_impl( &dword_0,  v128,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Enabled port discovery on device ID %u (uid '%@').",  (uint8_t *)buf,  0x22u);
                  }
                }
              }

  AudioObjectPropertySelector v129 = (*(uint64_t (**)(uint64_t))(*(void *)qword_490F30 + 48LL))(qword_490F30);
  if (IAPAudioRegisterDeviceStateChangedCallback(sub_1F1008, v120, v129) != 1)
  {
    uint64_t v215 = (os_log_t *)sub_138E8(13);
    v216 = *v215;
    if (*v215 && os_log_type_enabled(*v215, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 176;
      _os_log_impl( &dword_0,  v216,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): IAPAudioRegisterDeviceStateChangedCallback() returned FALSE.",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v217, "IAPAudioRegisterDeviceStateChangedCallback() returned FALSE.");
LABEL_301:
  }

  uint64_t v130 = (os_log_t *)sub_138E8(11);
  uint64_t v131 = *v130;
  if (*v130 && os_log_type_enabled(*v130, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315650;
    *(void *)&buf[1] = "IAPManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 177;
    HIWORD(buf[4]) = 1024;
    buf[5] = 1;
    _os_log_impl( &dword_0,  v131,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d IAPAudioRegisterDeviceStateChangedCallback() returned %u.",  (uint8_t *)buf,  0x18u);
  }

  if (IAPAudioRegisterVolumeControlSupportChangedCallback(sub_1F1240, v120, v129) != 1)
  {
    uint64_t v218 = (os_log_t *)sub_138E8(13);
    v219 = *v218;
    if (*v218 && os_log_type_enabled(*v218, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 180;
      _os_log_impl( &dword_0,  v219,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): IAPAudioRegisterVolumeControlSupportChangedCallback() returned FALSE.",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v217, "IAPAudioRegisterVolumeControlSupportChangedCallback() returned FALSE.");
    goto LABEL_301;
  }

  unint64_t v132 = (os_log_t *)sub_138E8(11);
  unint64_t v133 = *v132;
  if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315650;
    *(void *)&buf[1] = "IAPManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 181;
    HIWORD(buf[4]) = 1024;
    buf[5] = 1;
    _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d IAPAudioRegisterVolumeControlSupportChangedCallback() returned %u.",  (uint8_t *)buf,  0x18u);
  }

  sub_1F14DC((uint64_t)v120);
  uint64_t v134 = sub_138E8(11);
  int v135 = sub_138E8(6);
  uint64_t v136 = 0;
  uint64_t v137 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  char v138 = *(void *)(v134 + 8);
  while (1)
  {
    uint64_t v139 = (int)buf[v137];
    uint64_t v140 = v136;
    if (((v138 & v139) != 0) != ((*(void *)(v135 + 8) & v139) != 0)) {
      break;
    }
    uint64_t v136 = 1;
    uint64_t v137 = 1LL;
    if ((v140 & 1) != 0)
    {
      if ((v138 & 1) == 0) {
        goto LABEL_191;
      }
      goto LABEL_188;
    }
  }

  if ((v138 & v139) == 0) {
    uint64_t v134 = v135;
  }
  if ((*(void *)(v134 + 8) & 1) != 0)
  {
LABEL_188:
    uint64_t v141 = *(os_log_s **)v134;
    if (v141 && os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 187;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v120;
      _os_log_impl(&dword_0, v141, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager[%p]::IAPManager()", (uint8_t *)buf, 0x1Cu);
    }
  }

  uint64_t v86 = (os_log_t *)sub_138E8(20);
  __int128 v87 = *v86;
  if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v88 = &v136;
    if ((v136.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v88 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1571;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&uint8_t buf[20] = v88;
    _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Adding SW Volume Property to Headset Playback DSPGraph chain %s",  buf,  0x1Cu);
  }

  uint64_t v89 = (char *)sub_7D084(buf, a3);
  unint64_t v90 = sub_307B60(v89);
  uint64_t v91 = v90;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v91) {
      goto LABEL_208;
    }
  }

  else if (!v90)
  {
    goto LABEL_208;
  }

  if (!sub_307BF0((char *)&v136))
  {
    unsigned __int8 v99 = atomic_load((unsigned __int8 *)&qword_49D720);
    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_49D720))
    {
      int v116 = (char *)operator new(0x48uLL);
      *((void *)v116 + 1) = 0LL;
      *((void *)v116 + 2) = 0LL;
      *(void *)int v116 = off_47E2C8;
      *((void *)v116 + 4) = 0x6877766F64737067LL;
      *((_DWORD *)v116 + 10) = 0;
      *(void *)(v116 + 60) = 0x100000001LL;
      *(_OWORD *)(v116 + 44) = xmmword_402D48;
      *((void *)v116 + 3) = off_47E700;
      qword_49D710 = (uint64_t)(v116 + 24);
      qword_49D718 = (uint64_t)v116;
      __cxa_guard_release(&qword_49D720);
      unint64_t v63 = a1;
    }

    os_signpost_id_t v100 = qword_49D710;
    uint64_t v94 = (std::__shared_weak_count *)qword_49D718;
    *(void *)AudioObjectPropertyAddress buf = qword_49D710;
    *(void *)&buf[8] = qword_49D718;
    if (qword_49D718)
    {
      unsigned __int8 v101 = (unint64_t *)(qword_49D718 + 8);
      do
        __int16 v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }

    sub_143208(v63, v100, (uint64_t)v94);
    if (!v94) {
      goto LABEL_208;
    }
    AudioObjectPropertySelector v103 = (unint64_t *)&v94->__shared_owners_;
    do
      uint64_t v98 = __ldaxr(v103);
    while (__stlxr(v98 - 1, v103));
LABEL_206:
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }

    goto LABEL_208;
  }

  if (a6 >> 1 != 823859251)
  {
    uint64_t v104 = atomic_load((unsigned __int8 *)&qword_49D708);
    if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_49D708))
    {
      uint64_t v118 = (char *)operator new(0x48uLL);
      *((void *)v118 + 1) = 0LL;
      *((void *)v118 + 2) = 0LL;
      *(void *)uint64_t v118 = off_47E290;
      *((void *)v118 + 4) = 0x6877766F64737067LL;
      *((_DWORD *)v118 + 10) = 0;
      *(void *)(v118 + 60) = 0x100000001LL;
      *(_OWORD *)(v118 + 44) = xmmword_402D48;
      *((void *)v118 + 3) = off_47E740;
      v118[68] = 0;
      qword_49D6F8 = (uint64_t)(v118 + 24);
      qword_49D700 = (uint64_t)v118;
      __cxa_guard_release(&qword_49D708);
      unint64_t v63 = a1;
    }

    uint64_t v105 = qword_49D6F8;
    uint64_t v94 = (std::__shared_weak_count *)qword_49D700;
    *(void *)AudioObjectPropertyAddress buf = qword_49D6F8;
    *(void *)&buf[8] = qword_49D700;
    if (qword_49D700)
    {
      __int16 v106 = (unint64_t *)(qword_49D700 + 8);
      do
        __int16 v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
    }

    sub_143208(v63, v105, (uint64_t)v94);
    if (!v94) {
      goto LABEL_208;
    }
    int v108 = (unint64_t *)&v94->__shared_owners_;
    do
      uint64_t v98 = __ldaxr(v108);
    while (__stlxr(v98 - 1, v108));
    goto LABEL_206;
  }

  uint64_t v92 = atomic_load((unsigned __int8 *)&qword_49D6F0);
  if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_49D6F0))
  {
    uint64_t v117 = (char *)operator new(0x48uLL);
    *((void *)v117 + 1) = 0LL;
    *((void *)v117 + 2) = 0LL;
    *(void *)uint64_t v117 = off_47E290;
    *((void *)v117 + 4) = 0x6877766F64737067LL;
    *((_DWORD *)v117 + 10) = 0;
    *(void *)(v117 + 60) = 0x100000001LL;
    *(_OWORD *)(v117 + 44) = xmmword_402D48;
    *((void *)v117 + 3) = off_47E740;
    v117[68] = 1;
    qword_49D6E0 = (uint64_t)(v117 + 24);
    qword_49D6E8 = (uint64_t)v117;
    __cxa_guard_release(&qword_49D6F0);
    unint64_t v63 = a1;
  }

  uint64_t v93 = qword_49D6E0;
  uint64_t v94 = (std::__shared_weak_count *)qword_49D6E8;
  *(void *)AudioObjectPropertyAddress buf = qword_49D6E0;
  *(void *)&buf[8] = qword_49D6E8;
  if (qword_49D6E8)
  {
    int v95 = (unint64_t *)(qword_49D6E8 + 8);
    do
      std::string v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }

  sub_143208(v63, v93, (uint64_t)v94);
  if (v94)
  {
    AudioObjectPropertySelector v97 = (unint64_t *)&v94->__shared_owners_;
    do
      uint64_t v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    goto LABEL_206;
  }

void sub_E8CD8()
{
}

void sub_E8CF4()
{
}

void sub_E8D08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, unsigned __int8 a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
}

void sub_E8D30()
{
}

void sub_E8D40()
{
}

void sub_E8D9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
}

void sub_E8DB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
}

void sub_E8DF8()
{
}

void sub_E8E20(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xE8E28LL);
  }
  sub_7A0E8(a1);
}

uint64_t sub_E8E38(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_E9C8C((uint64_t)a1);
}

uint64_t sub_E8ECC(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(7);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v10 = "DeviceManager.cpp";
      __int16 v11 = 1024;
      int v12 = 430;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Error Occured handling a Device Update", buf, 0x12u);
    }

    unint64_t v4 = (os_log_t *)sub_138E8(7);
    unint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
    {
      sub_EA5AC(&__p, *(void **)(a1 + 16), (void *)(a1 + 8));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v10 = "DeviceManager.cpp";
      __int16 v11 = 1024;
      int v12 = 431;
      __int16 v13 = 2080;
      size_t v14 = p_p;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Cached Device List: %s", buf, 0x1Cu);
    }
  }

  sub_1BB88((uint64_t *)(a1 + 8));
  return a1;
}

void sub_E9058(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

unsigned __int8 *sub_E9064(unsigned __int8 *a1)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    uint64_t v3 = operator new(0x10uLL);
    sub_B20B8(v3, v2);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  unint64_t v4 = (_DWORD *)sub_546E0();
  sub_FCC10(v4, *a1);
  if (v3)
  {
    if (v3[8]) {
      (*(void (**)(void))(**(void **)v3 + 16LL))(*(void *)v3);
    }
    operator delete(v3);
  }

  return a1;
}

void sub_E90E4(void *a1)
{
}

void sub_E9114(unint64_t *a1, void *a2, int a3)
{
  if (a2[2])
  {
    if (a3)
    {
      unint64_t v4 = (dispatch_queue_s *)sub_869B4();
      unint64_t v5 = v24;
      *(void *)uint64_t v24 = v24;
      *(void *)&v24[8] = v24;
      *(void *)&char v24[16] = 0LL;
      uint64_t v6 = a2[2];
      if (v6)
      {
        uint64_t v8 = *a2;
        unint64_t v7 = (uint64_t *)a2[1];
        uint64_t v9 = *v7;
        *(void *)(v9 + 8) = *(void *)(*a2 + 8LL);
        **(void **)(v8 + 8) = v9;
        uint64_t v10 = *(void *)v24;
        *(void *)(*(void *)v24 + 8LL) = v7;
        uint64_t *v7 = v10;
        *(void *)(v8 + 8) = v24;
        *(void *)uint64_t v24 = v8;
        *(void *)&char v24[16] = v6;
        a2[2] = 0LL;
        unint64_t v5 = (_BYTE *)v8;
      }

      __int16 v11 = (uint64_t *)operator new(0x18uLL);
      *__int16 v11 = (uint64_t)v11;
      v11[1] = (uint64_t)v11;
      void v11[2] = 0LL;
      if (v6)
      {
        int v12 = *(void **)&v24[8];
        uint64_t v13 = **(void **)&v24[8];
        *(void *)(v13 + 8) = *((void *)v5 + 1);
        **((void **)v5 + 1) = v13;
        uint64_t v14 = *v11;
        *(void *)(v14 + 8) = v12;
        *int v12 = v14;
        *__int16 v11 = (uint64_t)v5;
        *((void *)v5 + 1) = v11;
        void v11[2] = v6;
        *(void *)&char v24[16] = 0LL;
      }

      dispatch_async_f(v4, v11, (dispatch_function_t)sub_EA0C8);
      sub_1BB88((uint64_t *)v24);
      if (a2[2])
      {
        uint64_t v15 = (os_log_t *)sub_138E8(13);
        unint64_t v16 = *v15;
        if (*v15)
        {
          if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v24 = 136315394;
            *(void *)&v24[4] = "ObjectDestructionManager.h";
            *(_WORD *)&v24[12] = 1024;
            *(_DWORD *)&v24[14] = 91;
            _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The object destruction manager did not propery clear a command's object lis t! Some objects may not be deleted.",  v24,  0x12u);
          }
        }
      }
    }

    else
    {
      if ((sub_397E74(a1) & 1) == 0)
      {
        uint64_t v17 = (os_log_t *)sub_138E8(13);
        uint64_t v18 = *v17;
        if (*v17)
        {
          if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v24 = 136315394;
            *(void *)&v24[4] = "ObjectDestructionManager.h";
            *(_WORD *)&v24[12] = 1024;
            *(_DWORD *)&v24[14] = 72;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event",  v24,  0x12u);
          }
        }
      }

      while (a2[2])
      {
        uint64_t v19 = (_OWORD *)a2[1];
        *(_OWORD *)uint64_t v24 = v19[1];
        *((void *)v19 + 3) = 0LL;
        *((void *)v19 + 2) = 0LL;
        sub_E9EFC(v24);
        uint64_t v20 = *(std::__shared_weak_count **)&v24[8];
        if (*(void *)&v24[8])
        {
          uint64_t v21 = (unint64_t *)(*(void *)&v24[8] + 8LL);
          do
            unint64_t v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }

        uint64_t v23 = *(void *)v19;
        *(void *)(v23 + 8) = *((void *)v19 + 1);
        **((void **)v19 + 1) = v23;
        --a2[2];
        sub_7A768((uint64_t)(v19 + 1));
        operator delete(v19);
      }
    }
  }

void sub_E93AC(_Unwind_Exception *exception_object)
{
}

void sub_E93D8(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  unint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  unint64_t v9 = v7 + v8;
  if (v6 == v7 + v8)
  {
    if (v8 < 0x400)
    {
      unint64_t v23 = (v4 - v5) >> 3;
      uint64_t v24 = (char *)a1[3];
      uint64_t v25 = (uint64_t)&v24[-*a1];
      if (v23 >= v25 >> 3)
      {
        else {
          unint64_t v26 = v25 >> 2;
        }
        uint64_t v65 = a1 + 3;
        *(void *)&__int128 v63 = sub_7DC90(v26);
        *((void *)&v63 + 1) = v63 + 8 * v23;
        *(void *)&__int128 v64 = *((void *)&v63 + 1);
        *((void *)&v64 + 1) = v63 + 8 * v27;
        int v62 = operator new(0x1000uLL);
        sub_E9CD8(&v63, &v62);
        __int128 v30 = v63;
        __int128 v31 = v64;
        *(void *)&__int128 v63 = *a1;
        uint64_t v29 = (void *)v63;
        *((void *)&v63 + 1) = i;
        *(_OWORD *)a1 = v30;
        *((_OWORD *)a1 + 1) = v31;
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_44;
      }

      if (v24 != v4)
      {
        *(void *)&__int128 v63 = operator new(0x1000uLL);
        sub_E9CD8(a1, &v63);
LABEL_44:
        unint64_t v5 = (char *)a1[1];
        uint64_t v7 = a1[5];
        unint64_t v9 = a1[4] + v7;
        goto LABEL_45;
      }

      *(void *)&__int128 v63 = operator new(0x1000uLL);
      sub_E9DE8((uint64_t)a1, &v63);
      uint64_t v43 = (void *)a1[1];
      unint64_t v4 = (char *)a1[2];
      uint64_t v45 = *v43;
      int v44 = (char *)(v43 + 1);
      uint64_t v11 = v45;
      a1[1] = v44;
      if (v4 == (char *)a1[3])
      {
        uint64_t v46 = (uint64_t)&v44[-*a1];
        if ((unint64_t)v44 > *a1)
        {
          uint64_t v47 = v46 >> 3;
          BOOL v15 = v46 >> 3 < -1;
          uint64_t v48 = (v46 >> 3) + 2;
          if (v15) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = v47 + 1;
          }
          uint64_t v50 = -(v49 >> 1);
          uint64_t v51 = v49 >> 1;
          os_log_type_t v52 = &v44[-8 * v51];
          int64_t v53 = v4 - v44;
          if (v4 != v44)
          {
            memmove(&v44[-8 * v51], v44, v4 - v44);
            int v44 = (char *)a1[1];
          }

          unint64_t v4 = &v52[v53];
          unsigned __int16 v54 = &v44[8 * v50];
          goto LABEL_42;
        }

        else {
          unint64_t v55 = (uint64_t)&v4[-*a1] >> 2;
        }
        char v33 = (char *)sub_7DC90(v55);
        uint64_t v34 = &v33[8 * (v55 >> 2)];
        char v36 = &v33[8 * v56];
        uint64_t v57 = (uint64_t *)a1[1];
        unint64_t v4 = v34;
        uint64_t v58 = a1[2] - (void)v57;
        if (v58)
        {
          unint64_t v4 = &v34[v58 & 0xFFFFFFFFFFFFFFF8LL];
          uint64_t v59 = 8 * (v58 >> 3);
          uint64_t v60 = &v33[8 * (v55 >> 2)];
          do
          {
            uint64_t v61 = *v57++;
            *(void *)uint64_t v60 = v61;
            v60 += 8;
            v59 -= 8LL;
          }

          while (v59);
        }

void sub_E96F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_E9720(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + sub_7A768(v2 - 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  unint64_t v5 = (char *)(v4 + 8 * (v3 >> 10));
  if (a2[2] == v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v9 = 0LL;
    unint64_t v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 10));
  }

  else
  {
    uint64_t v6 = (char *)(*(void *)v5 + 4 * (a2[4] & 0x3FFLL));
    unint64_t v7 = a2[5] + v3;
    unint64_t v8 = (char *)(v4 + 8 * (v7 >> 10));
    uint64_t v9 = *(void *)v8 + 4 * (v7 & 0x3FF);
  }

  uint64_t v10 = ((v9 - *(void *)v8) >> 2) + ((v8 - v5) << 7);
  uint64_t v11 = (uint64_t)&v6[-*(void *)v5];
  uint64_t v12 = v10 - (v11 >> 2);
  if (v10 == v11 >> 2) {
    return a1;
  }
  if (((v12 + 1) & 0x3FF) != 0) {
    unint64_t v13 = ((unint64_t)(v12 + 1) >> 10) + 1;
  }
  else {
    unint64_t v13 = (unint64_t)(v12 + 1) >> 10;
  }
  if (v13)
  {
    uint64_t v41 = a1 + 24;
    *(void *)&__int128 v39 = sub_7DC90(v13);
    *((void *)&v39 + 1) = v39;
    *(void *)&__int128 v40 = v39;
    *((void *)&v40 + 1) = v39 + 8 * v14;
    uint64_t v15 = -(uint64_t)v13;
    do
    {
      uint64_t v38 = operator new(0x1000uLL);
      sub_E9CD8(&v39, &v38);
    }

    while (!__CFADD__(v15++, 1LL));
    __int128 v19 = v39;
    __int128 v20 = v40;
    *(void *)&__int128 v39 = *(void *)a1;
    uint64_t v18 = (void *)v39;
    *((void *)&v39 + 1) = i;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v20;
    if (v18)
    {
      operator delete(v18);
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = *(void *)(a1 + 16);
    }

    else
    {
      uint64_t v21 = *((void *)&v19 + 1);
      uint64_t v22 = v20;
    }

    uint64_t v24 = *(void *)(a1 + 40);
    unint64_t v26 = *(void *)(a1 + 32) + v24;
    uint64_t v25 = (void *)(v21 + 8 * (v26 >> 10));
    if (v22 == v21)
    {
      uint64_t v23 = 0LL;
      if (!v12)
      {
        uint64_t v30 = 0LL;
        uint64_t v28 = v25;
        goto LABEL_28;
      }
    }

    else
    {
      if (!v12) {
        return a1;
      }
      uint64_t v23 = *v25 + 4 * (v26 & 0x3FF);
    }
  }

  else
  {
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
  }

  uint64_t v27 = v12 + ((v23 - *v25) >> 2);
  if (v27 < 1)
  {
    unint64_t v29 = 1023 - v27;
    LOWORD(v27) = ~(1023 - v27);
    uint64_t v28 = &v25[-(v29 >> 10)];
  }

  else
  {
    uint64_t v28 = &v25[(unint64_t)v27 >> 10];
  }

  uint64_t v30 = *v28 + 4 * (v27 & 0x3FF);
LABEL_28:
  if (v23 != v30)
  {
    do
    {
      uint64_t v31 = v30;
      if (v25 != v28) {
        uint64_t v31 = *v25 + 4096LL;
      }
      if (v23 == v31)
      {
        uint64_t v31 = v23;
      }

      else
      {
        unint64_t v32 = *(char **)v5;
        char v33 = (_DWORD *)v23;
        do
        {
          int v34 = *(_DWORD *)v6;
          v6 += 4;
          *v33++ = v34;
          if (v6 - v32 == 4096)
          {
            uint64_t v35 = (char *)*((void *)v5 + 1);
            v5 += 8;
            unint64_t v32 = v35;
            uint64_t v6 = v35;
          }
        }

        while (v33 != (_DWORD *)v31);
      }

      v24 += (v31 - v23) >> 2;
      if (v25 == v28) {
        break;
      }
      uint64_t v36 = v25[1];
      ++v25;
      uint64_t v23 = v36;
    }

    while (v36 != v30);
    *(void *)(a1 + 40) = v24;
  }

  return a1;
}

void sub_E9994( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
}

uint64_t sub_E99F0(uint64_t a1, void *a2)
{
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, "DeviceUpdate failed");
  v4->__vftable = (std::runtime_error_vtbl *)off_46F408;
  unint64_t v5 = v4 + 1;
  sub_7D084(&v4[1].__vftable, "DeviceUpdate failed");
  sub_E9720(a1 + 40, a2);
  sub_82600((uint64_t)&v16);
  uint64_t v6 = a2[1];
  if (a2[2] != v6)
  {
    unint64_t v7 = a2[4];
    unint64_t v8 = (void *)(v6 + 8 * (v7 >> 10));
    uint64_t v9 = (unsigned int *)(*v8 + 4 * (v7 & 0x3FF));
    uint64_t v10 = *(void *)(v6 + (((a2[5] + v7) >> 7) & 0x1FFFFFFFFFFFFF8LL)) + 4 * ((a2[5] + v7) & 0x3FF);
    while (v9 != (unsigned int *)v10)
    {
      uint64_t v11 = *v9;
      sub_826EC(&v16, (uint64_t)" ", 1LL);
      std::ostream::operator<<(&v16, v11);
      if ((char *)++v9 - *v8 == ".A.dylib")
      {
        uint64_t v12 = (unsigned int *)v8[1];
        ++v8;
        uint64_t v9 = v12;
      }
    }
  }

  sub_82924(&v14, (uint64_t)v17);
  std::runtime_error *v5 = v14;
  v5[1].__vftable = v15;
  if (v18 < 0) {
    operator delete((void *)v17[8]);
  }
  std::streambuf::~streambuf(v17);
  std::ios::~ios(&v19);
  return a1;
}

void sub_E9B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_E9BEC(uint64_t a1)
{
  *(void *)a1 = off_46F408;
  sub_E8E38((void *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_E9C2C(uint64_t a1)
{
  *(void *)a1 = off_46F408;
  sub_E8E38((void *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  operator delete(v2);
}

uint64_t sub_E9C70(uint64_t a1)
{
  uint64_t result = a1 + 16;
  return result;
}

uint64_t sub_E9C8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_E9CD8(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_7DC90(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      __int128 v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void sub_E9DE8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_7DC90(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_E9EFC(void *a1)
{
  if (!*a1)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "ObjectDestructionManager.h";
      __int16 v13 = 1024;
      int v14 = 156;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inObject.get() is NULL]: Null object",  (uint8_t *)&v11,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Null object");
  }

  uint64_t v2 = a1[1];
  if (!v2 || *(void *)(v2 + 8))
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "ObjectDestructionManager.h";
        __int16 v13 = 1024;
        int v14 = 157;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Shared object has other references!",  (uint8_t *)&v11,  0x12u);
      }
    }
  }

  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_EA0AC(_Unwind_Exception *exception_object)
{
}

void sub_EA0C8(uint64_t *a1)
{
  uint64_t v2 = sub_5954C();
  uint64_t v3 = (char *)operator new(0x28uLL);
  uint64_t v4 = v3;
  uint64_t v5 = a1[1];
  __int16 v13 = &v13;
  int v14 = (uint64_t *)&v13;
  uint64_t v15 = 0LL;
  if ((uint64_t *)v5 == a1)
  {
    *((_DWORD *)v3 + 2) = 1;
    *(void *)uint64_t v3 = &off_46F430;
    *((void *)v3 + 2) = v3 + 16;
    *((void *)v3 + 3) = v3 + 16;
    uint64_t v6 = (uint64_t *)(v3 + 32);
    goto LABEL_7;
  }

  uint64_t v6 = &v15;
  unint64_t v7 = (uint64_t *)&v13;
  do
  {
    uint64_t v8 = operator new(0x20uLL);
    v8[1] = *(_OWORD *)(v5 + 16);
    *(void *)(v5 + 16) = 0LL;
    *(void *)(v5 + 24) = 0LL;
    *(void *)uint64_t v8 = v7;
    *((void *)v8 + 1) = &v13;
    v7[1] = (uint64_t)v8;
    uint64_t v9 = v15 + 1;
    __int16 v13 = v8;
    ++v15;
    uint64_t v5 = *(void *)(v5 + 8);
    unint64_t v7 = (uint64_t *)v8;
  }

  while ((uint64_t *)v5 != a1);
  *((_DWORD *)v4 + 2) = 1;
  *(void *)uint64_t v4 = &off_46F430;
  *((void *)v4 + 2) = v4 + 16;
  *((void *)v4 + 3) = v4 + 16;
  *((void *)v4 + 4) = 0LL;
  if (v9)
  {
    uint64_t v10 = v14;
    uint64_t v11 = *v14;
    *(void *)(v11 + 8) = *((void *)v8 + 1);
    **((void **)v8 + 1) = v11;
    uint64_t v12 = *((void *)v4 + 2);
    *(void *)(v12 + 8) = v10;
    *uint64_t v10 = v12;
    *((void *)v4 + 2) = v8;
    *((void *)v8 + 1) = v4 + 16;
    *((void *)v4 + 4) = v9;
LABEL_7:
    uint64_t *v6 = 0LL;
  }

  (*(void (**)(uint64_t, char *))(*(void *)v2 + 328LL))(v2, v4);
  sub_1BB88((uint64_t *)&v13);
  sub_1BB88(a1);
  operator delete(a1);
}

void sub_EA21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_EA268(uint64_t *a1)
{
  uint64_t v1 = sub_EA78C(a1);
  operator delete(v1);
}

uint64_t sub_EA27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unint64_t *)qword_4A9BE8;
  if (atomic_load((unint64_t *)qword_4A9BE8))
  {
    if ((sub_397E74((unint64_t *)qword_4A9BE8) & 1) == 0)
    {
      uint64_t v6 = (os_log_t *)sub_138E8(13);
      unint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
          __int16 v22 = 1024;
          int v23 = 124;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mExecutionThread has been set outside of this command's execution",  buf,  0x12u);
        }
      }
    }
  }

  if (sub_397E74(v4))
  {
    uint64_t v8 = sub_138E8(13);
    uint64_t v9 = sub_138E8(15);
    char v10 = 0;
    uint64_t v11 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v14 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_13:
    uint64_t v15 = *(os_log_s **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v22 = 1024;
      int v23 = 127;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Called recursively", buf, 0x12u);
    }
  }

  v19[0] = &off_46F460;
  v19[1] = v4;
  uint64_t v20 = v19;
  sub_35678(buf, 0, (uint64_t)v19);
  unint64_t v16 = v20;
  if (v20 == v19)
  {
    uint64_t v17 = 4LL;
    unint64_t v16 = v19;
    goto LABEL_20;
  }

  if (v20)
  {
    uint64_t v17 = 5LL;
LABEL_20:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  atomic_store((unint64_t)pthread_self(), v4);
  sub_E9114(v4, (void *)(a1 + 16), 0);
  sub_72210(a2, 1920099684LL);
  return sub_35B78((uint64_t)buf);
}

void sub_EA4BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_EA51C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = std::string::insert(&v4, 0LL, "Destroying core object(s): ", 0x1BuLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_EA590( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_EA5AC(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v6 = (os_unfair_lock_s *)a2[2];
      unint64_t v7 = (std::__shared_weak_count *)a2[3];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }

      sub_23FE8((uint64_t)__p, v6 + 2);
      if ((v16 & 0x80u) == 0) {
        char v10 = __p;
      }
      else {
        char v10 = (void **)__p[0];
      }
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v11 = v16;
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if ((char)v16 < 0)
      {
        operator delete(__p[0]);
        if (!v7) {
          goto LABEL_19;
        }
      }

      else if (!v7)
      {
        goto LABEL_19;
      }

      uint64_t v12 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }

void sub_EA6E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void *sub_EA730(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_46F460;
  result[1] = v3;
  return result;
}

uint64_t sub_EA764(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_46F460;
  a2[1] = v2;
  return result;
}

uint64_t sub_EA780(uint64_t result)
{
  return result;
}

uint64_t *sub_EA78C(uint64_t *a1)
{
  uint64_t v2 = a1 + 2;
  if (a1[4])
  {
    uint64_t v3 = sub_138E8(13);
    uint64_t v4 = sub_138E8(15);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)std::string __p = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&__p[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    char v10 = *(os_log_s **)v3;
    if (v10)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v11 = (uint64_t *)a1[3];
        memset(&v22, 0, sizeof(v22));
        std::string::append(&v22, "{ ", 2uLL);
        if (v11 != v2)
        {
          while (1)
          {
            uint64_t v12 = (os_unfair_lock_s *)v11[2];
            unint64_t v13 = (std::__shared_weak_count *)v11[3];
            int v23 = v12;
            uint64_t v24 = v13;
            if (v13)
            {
              p_shared_owners = (unint64_t *)&v13->__shared_owners_;
              do
                unint64_t v15 = __ldxr(p_shared_owners);
              while (__stxr(v15 + 1, p_shared_owners));
            }

            sub_23FE8((uint64_t)__p, v12 + 2);
            if (SBYTE3(v27) >= 0) {
              unsigned __int8 v16 = __p;
            }
            else {
              unsigned __int8 v16 = *(const std::string::value_type **)__p;
            }
            if (SBYTE3(v27) >= 0) {
              std::string::size_type v17 = BYTE3(v27);
            }
            else {
              std::string::size_type v17 = *(void *)&__p[8];
            }
            std::string::append(&v22, v16, v17);
            if (SBYTE3(v27) < 0)
            {
              operator delete(*(void **)__p);
              if (!v13) {
                goto LABEL_28;
              }
            }

            else if (!v13)
            {
              goto LABEL_28;
            }

            uint64_t v18 = (unint64_t *)&v13->__shared_owners_;
            do
              unint64_t v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }

void sub_EAA0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_7A0E8(exception_object);
}

uint64_t *sub_EAA74(void *__s2, size_t a2)
{
  uint64_t v2 = qword_4938E0;
  if (!qword_4938E0) {
    return &qword_4938E0;
  }
  char v5 = &qword_4938E0;
  do
  {
    char v6 = sub_84668(*(const void **)(v2 + 32), *(void *)(v2 + 40), __s2, a2);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6 >= 0) {
      char v5 = (uint64_t *)v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  return v5;
}

os_signpost_id_t *sub_EAB10(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        char v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 97;
        __int16 v12 = 2080;
        unint64_t v13 = "kHandleDeviceArrival";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      char v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_HandleDeviceArrival",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_EAC9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void *sub_EACA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3)
  {
    uint64_t v7 = (unint64_t *)(a3 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v9 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t sub_EAD14()
{
  uint64_t result = qword_48D7B0;
  if (!qword_48D7B0)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        os_signpost_id_t v5 = "DeviceManager.cpp";
        __int16 v6 = 1024;
        int v7 = 114;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sDeviceManager is NULL]: sDeviceManager is NULL!",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sDeviceManager is NULL!");
  }

  return result;
}

void sub_EAE0C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_EAE28(void *a1, CFStringRef *a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  os_signpost_id_t v5 = a1 + 13;
  for (uint64_t i = a1[14]; (void *)i != v5; uint64_t i = *(void *)(i + 8))
  {
    (*(void (**)(CFStringRef *__return_ptr))(**(void **)(i + 16) + 128LL))(theString2);
    CFComparisonResult v7 = CFStringCompare(*a2, theString2[0], 0LL);
    sub_19DFC((uint64_t)theString2);
    if (v7 == kCFCompareEqualTo)
    {
      if ((void *)i != v5)
      {
        uint64_t v8 = *(void *)(i + 16);
        if (!v4) {
          return v8;
        }
        goto LABEL_9;
      }

      break;
    }
  }

  uint64_t v8 = 0LL;
  if (!v4) {
    return v8;
  }
LABEL_9:
  (*(void (**)(void *))(*a1 + 24LL))(a1);
  return v8;
}

void sub_EAEF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  }
  _Unwind_Resume(a1);
}

BOOL sub_EAF24(unsigned __int8 *a1)
{
  int v2 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16LL))(a1);
  int v3 = a1[128];
  if (v2) {
    (*(void (**)(unsigned __int8 *))(*(void *)a1 + 24LL))(a1);
  }
  return v3 != 0;
}

uint64_t sub_EAF70(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  CFComparisonResult v7 = (void *)sub_EAD14();
  int v8 = (*(uint64_t (**)(void *))(*v7 + 16LL))(v7);
  uint64_t v9 = v7 + 13;
  for (uint64_t i = (void *)v7[14]; i != v9; uint64_t i = (void *)i[1])
  {
    if ((*(unsigned int (**)(void))(*(void *)i[2] + 120LL))(i[2]) == a2)
    {
      if (i != v9)
      {
        uint64_t v11 = i[2];
        if (!v8) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }

      break;
    }
  }

  uint64_t v11 = 0LL;
  if (!v8) {
    goto LABEL_10;
  }
LABEL_9:
  (*(void (**)(void *))(*v7 + 24LL))(v7);
LABEL_10:
  if (!v11)
  {
    uint64_t v13 = 0LL;
    if (!v6) {
      return v13;
    }
LABEL_15:
    (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    return v13;
  }

  uint64_t v15 = v11;
  uint64_t v12 = *(void *)(a3 + 24);
  if (!v12) {
    sub_82CEC();
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v12 + 48LL))(v12, &v15);
  if (v6) {
    goto LABEL_15;
  }
  return v13;
}

void sub_EB090(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_EB0D4(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ Device Type: ", 0xFuLL);
  sub_2CA1C(&__p, *a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  std::string::append(a1, "[ Context ID: ", 0xEuLL);
  std::to_string(&__p, a2[1]);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v6 = &__p;
  }
  else {
    int v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v6, v7);
  std::string::append(a1, "; Reconfiguration Context: ", 0x1BuLL);
  uint64_t v8 = a2[28];
  else {
    uint64_t v9 = off_46F498[v8];
  }
  sub_7D084(&__p, v9);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v10 = &__p;
  }
  else {
    int v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v11 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v10, v11);
  return std::string::append(a1, " ]", 2uLL);
}

void sub_EB238( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_EB280(std::string *a1, unsigned int **a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  int v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 30)
  {
    sub_EB0D4(&__p, v4);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t p_p = &__p;
    }
    else {
      uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_p, size);
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_EB334( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_EB370(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F3008(a1);
  operator delete(v1);
}

uint64_t sub_EB384()
{
  return 1LL;
}

uint64_t sub_EB38C()
{
  return 1LL;
}

uint64_t sub_EB394()
{
  return 0LL;
}

std::string *sub_EB3A4@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  return sub_EB3C0(a2, a1);
}

uint64_t sub_EB3B0()
{
  return 1LL;
}

uint64_t sub_EB3B8()
{
  return 1LL;
}

std::string *sub_EB3C0(std::string *a1, const void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a2);
  sub_7D084(&v11, __str);
  int v4 = std::string::insert(&v11, 0LL, "addr: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  int v6 = std::string::append(&v12, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_EB514( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_EB580(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F3008(a1);
  operator delete(v1);
}

uint64_t sub_EB594(uint64_t a1, int *a2)
{
  uint64_t result = 0LL;
  int v3 = *a2;
  if (*a2 <= 1986225517)
  {
    if (v3 > 1684633186)
    {
      BOOL v4 = v3 == 1684633187 || v3 == 1836478308;
      int v6 = 1983013986;
    }

    else
    {
      BOOL v4 = v3 == 1064725619 || v3 == 1668705648;
      int v6 = 1684157046;
    }
  }

  else if (v3 <= 1986817376)
  {
    BOOL v4 = v3 == 1986225518 || v3 == 1986229104;
    int v6 = 1986290211;
  }

  else
  {
    if (v3 > 1987013740)
    {
      BOOL v4 = v3 == 2021027692;
      unsigned __int16 v5 = 27757;
    }

    else
    {
      BOOL v4 = v3 == 1986817377;
      unsigned __int16 v5 = 27748;
    }

    int v6 = v5 | 0x766F0000;
  }

  if (v4 || v3 == v6) {
    return 1LL;
  }
  return result;
}

uint64_t sub_EB680(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    std::string v12 = a2;
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    std::string::size_type v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)v12;
      int v14 = v12[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v13);
      int v10 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v18 = "NullControl.cpp";
      __int16 v19 = 1024;
      int v20 = 137;
      __int16 v21 = 2080;
      std::string v22 = v10;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  buf,  0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  uint64_t result = 0LL;
  int v4 = *a2;
  if (*a2 <= 1987013731)
  {
    BOOL v5 = v4 == 1836478308;
    int v6 = 1986817377;
  }

  else
  {
    BOOL v5 = v4 == 1987013732 || v4 == 2021027692;
    int v6 = 1987013741;
  }

  if (v5 || v4 == v6) {
    return 1LL;
  }
  return result;
}

uint64_t sub_EB838(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    std::string v11 = a2;
    __int128 v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)v11;
      int v13 = v11[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v12);
      if (v15 >= 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v17 = "NullControl.cpp";
      __int16 v18 = 1024;
      int v19 = 169;
      __int16 v20 = 2080;
      __int16 v21 = v9;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  buf,  0x1Cu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v3 = *a2;
  if (*a2 <= 1986225517)
  {
    if (v3 > 1684633186)
    {
      if (v3 != 1684633187 && v3 != 1836478308)
      {
        uint64_t result = 0LL;
        int v6 = 1983013986;
        goto LABEL_22;
      }
    }

    else if (v3 != 1064725619 && v3 != 1668705648)
    {
      uint64_t result = 0LL;
      int v6 = 1684157046;
      goto LABEL_22;
    }

    return 4LL;
  }

  if (v3 > 1986817376)
  {
    if (v3 > 1987013740)
    {
      if (v3 == 2021027692) {
        return 16LL;
      }
      uint64_t result = 0LL;
      unsigned __int16 v5 = 27757;
      goto LABEL_21;
    }

    if (v3 != 1986817377)
    {
      uint64_t result = 0LL;
      unsigned __int16 v5 = 27748;
LABEL_21:
      int v6 = v5 | 0x766F0000;
LABEL_22:
      if (v3 != v6) {
        return result;
      }
    }

    return 4LL;
  }

  if (v3 == 1986225518 || v3 == 1986229104) {
    return 4LL;
  }
  if (v3 == 1986290211) {
    return 16LL;
  }
  else {
    return 0LL;
  }
}

void sub_EBABC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  if (*a2 == 1836414053)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v26 = (os_log_t *)sub_138E8(13);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)a2;
      int v35 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v34);
      uint64_t v28 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int128 v39 = "NullControl.cpp";
      __int16 v40 = 1024;
      int v41 = 208;
      __int16 v42 = 2080;
      uint64_t v43 = v28;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  buf,  0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v29 = &off_4865A0;
    v29[2] = 2003332927;
  }

  int v12 = *a5;
  if (v12 != (*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4))
  {
    uint64_t v30 = (os_log_t *)sub_138E8(13);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)a2;
      int v35 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v34);
      unint64_t v32 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int128 v39 = "NullControl.cpp";
      __int16 v40 = 1024;
      int v41 = 209;
      __int16 v42 = 2080;
      uint64_t v43 = v32;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for property %s.",  buf,  0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    char v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v33 = &off_4865A0;
    v33[2] = 561211770;
  }

  int v13 = *a2;
  if (*a2 <= 1986225517)
  {
    if (v13 > 1684633186)
    {
      if (v13 != 1684633187 && v13 != 1983013986)
      {
        if (v13 == 1836478308)
        {
          std::string::size_type v17 = (os_log_t *)sub_138E8(13);
          __int16 v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v34 = *(void *)a2;
            int v35 = a2[2];
            sub_613AC((uint64_t)__p, (unsigned int *)&v34);
            int v19 = v37 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int128 v39 = "NullControl.cpp";
            __int16 v40 = 1024;
            int v41 = 247;
            __int16 v42 = 2080;
            uint64_t v43 = v19;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Attempt to GetPropertyData for %s.  This property is write-only.",  buf,  0x1Cu);
            if (v37 < 0) {
              operator delete(__p[0]);
            }
          }

          __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v20, "Attempt to GetPropertyData for %s.  This property is write-only.");
        }

        return;
      }
    }

    else if (v13 != 1064725619 && v13 != 1668705648)
    {
      if (v13 != 1684157046) {
        return;
      }
      int v15 = 1065353216;
      goto LABEL_27;
    }

    *(_DWORD *)a6 = 0;
    return;
  }

  if (v13 <= 1986817376)
  {
    if (v13 == 1986225518)
    {
      int v15 = 1;
    }

    else
    {
      if (v13 != 1986229104)
      {
        if (v13 == 1986290211)
        {
          *(double *)a6 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
          *(void *)(a6 + 8) = v16;
        }

        return;
      }

      int v15 = *(unsigned __int8 *)(a1 + 100);
    }

void sub_EC0C8(_Unwind_Exception *a1)
{
}

float sub_EC0E8(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, float *a6)
{
  if (((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *a2;
      int v27 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v26);
      uint64_t v16 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v31 = "NullControl.cpp";
      __int16 v32 = 1024;
      int v33 = 264;
      __int16 v34 = 2080;
      int v35 = v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((*(uint64_t (**)(_DWORD *, uint64_t *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    __int16 v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *a2;
      int v27 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v26);
      __int16 v20 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v31 = "NullControl.cpp";
      __int16 v32 = 1024;
      int v33 = 265;
      __int16 v34 = 2080;
      int v35 = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Property %s is not settable.",  buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v21 = &off_4865A0;
    v21[2] = 1970171760;
  }

  if ((*(unsigned int (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) != a5)
  {
    std::string v22 = (os_log_t *)sub_138E8(13);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *a2;
      int v27 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v26);
      uint64_t v24 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v31 = "NullControl.cpp";
      __int16 v32 = 1024;
      int v33 = 266;
      __int16 v34 = 2080;
      int v35 = v24;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for property %s.",  buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v25 = &off_4865A0;
    v25[2] = 561211770;
  }

  int v13 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1986817377 || v13 == 1987013741)
  {
    float result = *a6;
    a1[24] = *(_DWORD *)a6;
  }

  else if (v13 == 1987013732)
  {
    float result = *a6;
    a1[23] = *(_DWORD *)a6;
  }

  return result;
}

std::string *sub_EC4C4@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  return sub_EB3C0(a2, a1);
}

uint64_t sub_EC4D0()
{
  return 1LL;
}

uint64_t sub_EC4D8()
{
  return 1LL;
}

double sub_EC4E8()
{
  return 0.0;
}

double sub_EC4F4()
{
  return 0.0;
}

uint64_t sub_EC500(uint64_t result)
{
  *(_BYTE *)(result + 101) = 1;
  return result;
}

uint64_t sub_EC50C(uint64_t result)
{
  *(_BYTE *)(result + 101) = 0;
  return result;
}

uint64_t sub_EC514(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 101);
}

uint64_t sub_EC51C(uint64_t a1)
{
  return sub_F3008(a1 - 80);
}

void sub_EC524(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F3008(a1 - 80);
  operator delete(v1);
}

uint64_t sub_EC53C(uint64_t result)
{
  *(_BYTE *)(result + 21) = 1;
  return result;
}

uint64_t sub_EC548(uint64_t result)
{
  *(_BYTE *)(result + 21) = 0;
  return result;
}

uint64_t sub_EC550(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 21);
}

uint64_t sub_EC558(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + sub_7A768(v2 - 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = &off_46F4D0;
  sub_CC160(a1);
  return a1;
}

void sub_EC5A4(_Unwind_Exception *a1)
{
}

uint64_t sub_EC5B8(uint64_t a1, char a2)
{
  uint64_t v4 = sub_2BC660(a1);
  *(void *)uint64_t v4 = &off_46F530;
  *(void *)(v4 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = off_46F5F8;
  *(void *)(v4 + 92) = 0x3F80000000000000LL;
  *(_BYTE *)(v4 + 100) = a2;
  *(_BYTE *)(v4 + 101) = 0;
  sub_CC160(v4);
  return a1;
}

void sub_EC60C(_Unwind_Exception *a1)
{
}

uint64_t sub_EC620(void *a1)
{
  uint64_t v2 = a1[65];
  a1[65] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_EE450(a1);
}

void sub_EC658(void *a1)
{
  uint64_t v2 = a1[65];
  a1[65] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  int v3 = (void *)sub_EE450(a1);
  operator delete(v3);
}

unsigned __int8 *sub_EC694(uint64_t a1)
{
  if (*(void *)(a1 + 520))
  {
    uint64_t v2 = sub_5954C();
    (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v2 + 80LL))(v2, sub_ED7D8);
    uint64_t v3 = sub_5954C();
    (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v3 + 56LL))(v3, sub_ED7D8);
  }

  return sub_369228(a1);
}

uint64_t sub_EC6EC(uint64_t a1)
{
  if (*(void *)(a1 + 520))
  {
    uint64_t v2 = (void *)sub_EAD14();
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Codec", 0x600u);
    buf[8] = 1;
    uint64_t v3 = sub_EAE28(v2, (CFStringRef *)buf);
    sub_19DFC((uint64_t)buf);
    if (!v3)
    {
      int v41 = (os_log_t *)sub_138E8(17);
      __int16 v42 = *v41;
      if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 199;
        _os_log_impl(&dword_0, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to get codec device.", buf, 0x12u);
      }

      goto LABEL_70;
    }

    strcpy(buf, "cnaEurtp");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    if (!(*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v3 + 16LL))(v3, buf))
    {
LABEL_70:
      sub_ED780((os_unfair_lock_s *)a1);
      sub_ED780((os_unfair_lock_s *)a1);
      return 1LL;
    }

    uint64_t v4 = (os_log_t *)sub_138E8(17);
    unsigned __int16 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 204;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating an ANC monitor port", buf, 0x12u);
    }

    uint64_t v6 = sub_33341C();
    int64x2_t v54 = 0uLL;
    unint64_t v55 = 0LL;
    __int128 v7 = *(uint64_t **)(v6 + 64);
    for (uint64_t i = *(uint64_t **)(v6 + 72); v7 != i; ++v7)
    {
      sub_EE250(__p, *v7);
      uint64_t v9 = sub_138E8(23);
      if ((*(_BYTE *)(v9 + 8) & 1) != 0)
      {
        int v10 = *(os_log_s **)v9;
        if (*(void *)v9)
        {
          if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
          {
            sub_3893A0(&v63, (unsigned int *)__p[0]);
            std::string v11 = &v63;
            if ((v63.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              std::string v11 = (std::string *)v63.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 63;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&uint8_t buf[20] = v11;
            _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding a sub-port %s", buf, 0x1Cu);
          }
        }
      }

      uint64_t v12 = v54.i64[1];
      if (v54.i64[1] >= (unint64_t)v55)
      {
        uint64_t v17 = (v54.i64[1] - v54.i64[0]) >> 4;
        unint64_t v18 = v17 + 1;
        uint64_t v19 = (uint64_t)&v55[-v54.i64[0]];
        else {
          unint64_t v20 = v18;
        }
        uint64_t v61 = &v55;
        __int16 v21 = (char *)sub_7BE90(v20);
        int v23 = &v21[16 * v17];
        uint64_t v24 = (char *)__p[1];
        *(_OWORD *)int v23 = *(_OWORD *)__p;
        if (v24)
        {
          uint64_t v25 = (unint64_t *)(v24 + 8);
          do
            unint64_t v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }

        int v27 = (void *)v54.i64[1];
        uint64_t v28 = (void *)v54.i64[0];
        if (v54.i64[1] == v54.i64[0])
        {
          int64x2_t v31 = vdupq_n_s64(v54.u64[1]);
          char v29 = &v21[16 * v17];
        }

        else
        {
          char v29 = &v21[16 * v17];
          do
          {
            __int128 v30 = *((_OWORD *)v27 - 1);
            v27 -= 2;
            *((_OWORD *)v29 - 1) = v30;
            v29 -= 16;
            *int v27 = 0LL;
            v27[1] = 0LL;
          }

          while (v27 != v28);
          int64x2_t v31 = v54;
        }

        uint64_t v16 = v23 + 16;
        v54.i64[0] = (uint64_t)v29;
        v54.i64[1] = (uint64_t)(v23 + 16);
        *(int64x2_t *)&buf[8] = v31;
        __int16 v32 = v55;
        unint64_t v55 = &v21[16 * v22];
        *(void *)&_BYTE buf[24] = v32;
        *(void *)AudioObjectPropertyAddress buf = v31.i64[0];
        sub_A0D64((uint64_t)buf);
        int v13 = (std::__shared_weak_count *)__p[1];
      }

      else
      {
        *(void *)v54.i64[1] = __p[0];
        int v13 = (std::__shared_weak_count *)__p[1];
        *(void **)(v12 + 8) = __p[1];
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }

        uint64_t v16 = (_OWORD *)(v12 + 16);
      }

      v54.i64[1] = (uint64_t)v16;
      if (v13)
      {
        int v33 = (unint64_t *)&v13->__shared_owners_;
        do
          unint64_t v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }

    uint64_t v35 = sub_138E8(23);
    if ((*(_BYTE *)(v35 + 8) & 1) != 0)
    {
      uint64_t v36 = *(os_log_s **)v35;
      if (*(void *)v35)
      {
        if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 67;
          *(_WORD *)&_BYTE buf[18] = 2048;
          *(void *)&uint8_t buf[20] = (v54.i64[1] - v54.i64[0]) >> 4;
          _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Finished creating sub-ports.  Added %lu subPorts",  buf,  0x1Cu);
        }
      }
    }

    memset(v52, 0, sizeof(v52));
    CFStringRef v37 = CFStringCreateWithCString(0LL, "ANC Monitor", 0x600u);
    CFStringRef v50 = v37;
    char v51 = 1;
    *(void *)AudioObjectPropertyAddress buf = v37;
    buf[8] = 1;
    if (v37) {
      CFRetain(v37);
    }
    *(void *)&_DWORD buf[16] = 0LL;
    _BYTE buf[24] = 1;
    uint64_t v61 = 0LL;
    char v62 = 1;
    uint64_t v38 = operator new(0x2A0uLL);
    v38[1] = 0LL;
    v38[2] = 0LL;
    *uint64_t v38 = off_484A98;
    CFStringRef v58 = CFStringCreateWithCString(0LL, "ANC Monitor", 0x600u);
    char v59 = 1;
    sub_7D084(__p, "");
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_46F838;
    __int128 v64 = &v63;
    sub_FAB1C( (uint64_t)(v38 + 3),  &qword_48D858,  a1,  (uint64_t)v52,  (uint64_t)buf,  (uint64_t)&v58,  (char **)&v54,  (__int128 *)__p,  (uint64_t)&v63);
    __int128 v39 = v64;
    if (v64 == &v63)
    {
      uint64_t v40 = 4LL;
      __int128 v39 = &v63;
    }

    else
    {
      if (!v64)
      {
LABEL_55:
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)&v58);
        *(void *)&__int128 v53 = v38 + 3;
        *((void *)&v53 + 1) = v38;
        sub_AFDAC((uint64_t)&v53, v38 + 13, (uint64_t)(v38 + 3));
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v53;
        __int128 v53 = 0uLL;
        sub_3711D4(a1, (void ***)&v63);
        std::string::size_type size = (std::__shared_weak_count *)v63.__r_.__value_.__l.__size_;
        if (v63.__r_.__value_.__l.__size_)
        {
          int v44 = (unint64_t *)(v63.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }

        uint64_t v46 = (std::__shared_weak_count *)*((void *)&v53 + 1);
        if (*((void *)&v53 + 1))
        {
          uint64_t v47 = (unint64_t *)(*((void *)&v53 + 1) + 8LL);
          do
            unint64_t v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }

        sub_19DFC((uint64_t)&v61);
        sub_19DFC((uint64_t)&buf[16]);
        sub_19DFC((uint64_t)buf);
        sub_19DFC((uint64_t)&v50);
        if (v52[0]) {
          operator delete(v52[0]);
        }
        *(void *)AudioObjectPropertyAddress buf = &v54;
        sub_7A668((void ***)buf);
        goto LABEL_70;
      }

      uint64_t v40 = 5LL;
    }

    (*(void (**)(void))(v39->__r_.__value_.__r.__words[0] + 8 * v40))();
    goto LABEL_55;
  }

  return 1LL;
}

void sub_ECD8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32, uint64_t a33, char *a34)
{
  a34 = &a21;
  sub_7A668((void ***)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_ECF4C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885433443 && a2 != 1751409257)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(17);
    unsigned __int16 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v14 = "Device_ExtendedHapticDebug_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 149;
      __int16 v17 = 2080;
      unint64_t v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v14 = "Device_ExtendedHapticDebug_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 150;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType");
  }

  return 0LL;
}

void sub_ED104(_Unwind_Exception *a1)
{
}

void *sub_ED120@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = result[65];
  if (v4) {
    return sub_2E22D0(a3, v4, a2);
  }
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  return result;
}

uint64_t sub_ED140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(const void **)(a1 + 448);
  *(void *)theString1 = v6;
  theString1[8] = *(_BYTE *)(a1 + 456);
  if (theString1[8]) {
    BOOL v7 = v6 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v6);
  }
  CFStringRef v20 = CFStringCreateWithCString(0LL, "DSP Debug1", 0x600u);
  char v21 = 1;
  CFComparisonResult v8 = CFStringCompare(*(CFStringRef *)theString1, v20, 0LL);
  sub_19DFC((uint64_t)&v20);
  uint64_t result = sub_19DFC((uint64_t)theString1);
  if (v8)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  else
  {
    int v10 = *(_DWORD *)(a2 + 144);
    if (v10 != 1886216809 && v10 != 1886545251)
    {
      int v14 = (os_log_t *)sub_138E8(13);
      __int16 v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)theString1 = 136315394;
        *(void *)&theString1[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 179;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to get trim gains on port that is not internal mic or receiver",  theString1,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Attempt to get trim gains on port that is not internal mic or receiver");
    }

    std::string v11 = (void *)sub_EAD14();
    *(void *)theString1 = CFStringCreateWithCString(0LL, "Codec", 0x600u);
    theString1[8] = 1;
    uint64_t v12 = sub_EAE28(v11, (CFStringRef *)theString1);
    sub_19DFC((uint64_t)theString1);
    if (!v12)
    {
      int v13 = (void *)sub_EAD14();
      *(void *)theString1 = CFStringCreateWithCString(0LL, "Receiver", 0x600u);
      theString1[8] = 1;
      uint64_t v12 = sub_EAE28(v13, (CFStringRef *)theString1);
      sub_19DFC((uint64_t)theString1);
      if (!v12)
      {
        __int16 v17 = (os_log_t *)sub_138E8(13);
        unint64_t v18 = *v17;
        if (*v17)
        {
          if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)theString1 = 136315394;
            *(void *)&theString1[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
            __int16 v23 = 1024;
            int v24 = 184;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [ioDevice is NULL]: could not get io device",  theString1,  0x12u);
          }
        }

        uint64_t v19 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v19 = &off_4865A0;
        v19[2] = 2003329396;
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 288LL))(v12, a2);
  }

  return result;
}

void sub_ED41C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_ED460(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 520);
  if (v3) {
    sub_2E0360(v3, a2, a3);
  }
  else {
    sub_1D0774(0LL, a2);
  }
}

BOOL sub_ED474(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(const __CFString **)(a1 + 448);
  CFStringRef theString1 = v2;
  LODWORD(sub_88C50(0, v1) = *(unsigned __int8 *)(v1 + 456);
  char v9 = v1;
  if ((_DWORD)v1) {
    BOOL v3 = v2 == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    CFRetain(v2);
  }
  CFStringRef v6 = CFStringCreateWithCString(0LL, "DSP Debug1", 0x600u);
  char v7 = 1;
  BOOL v4 = CFStringCompare(theString1, v6, 0LL) == kCFCompareEqualTo;
  sub_19DFC((uint64_t)&v6);
  sub_19DFC((uint64_t)&theString1);
  return v4;
}

void sub_ED504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_ED528()
{
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8 || byte_48CDA9)
  {
    uint64_t v0 = (void *)sub_EAD14();
    *(void *)&__int128 v22 = CFStringCreateWithCString(0LL, "DSP Debug1", 0x600u);
    BYTE8(v22) = 1;
    uint64_t v1 = sub_EAE28(v0, (CFStringRef *)&v22);
    sub_19DFC((uint64_t)&v22);
    uint64_t v2 = (void *)sub_EAD14();
    *(void *)&__int128 v22 = CFStringCreateWithCString(0LL, "DSP Debug2", 0x600u);
    BYTE8(v22) = 1;
    uint64_t v3 = sub_EAE28(v2, (CFStringRef *)&v22);
    sub_19DFC((uint64_t)&v22);
    if (v1)
    {
      if (v3)
      {
        unint64_t v4 = xmmword_4A09A8;
        if ((void)xmmword_4A09A8)
        {
          __int128 v22 = xmmword_4A09A8;
          if (*((void *)&xmmword_4A09A8 + 1))
          {
            unsigned __int16 v5 = (unint64_t *)(*((void *)&xmmword_4A09A8 + 1) + 8LL);
            do
              unint64_t v6 = __ldxr(v5);
            while (__stxr(v6 + 1, v5));
          }
        }

        else
        {
          sub_32E270((__n128 *)&v22);
          unint64_t v4 = v22;
        }

        char v7 = operator new(0x18uLL);
        double v7[2] = v1;
        uint64_t v9 = *(void *)(v4 + 32);
        CFComparisonResult v8 = (void *)(v4 + 32);
        void *v7 = v9;
        v7[1] = v8;
        *(void *)(v9 + 8) = v7;
        *CFComparisonResult v8 = v7;
        ++v8[2];
        int v10 = (std::__shared_weak_count *)*((void *)&v22 + 1);
        if (*((void *)&v22 + 1))
        {
          std::string v11 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
          do
            unint64_t v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }

        unint64_t v13 = xmmword_4A09A8;
        if ((void)xmmword_4A09A8)
        {
          __int128 v22 = xmmword_4A09A8;
          if (*((void *)&xmmword_4A09A8 + 1))
          {
            int v14 = (unint64_t *)(*((void *)&xmmword_4A09A8 + 1) + 8LL);
            do
              unint64_t v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
        }

        else
        {
          sub_32E270((__n128 *)&v22);
          unint64_t v13 = v22;
        }

        int v16 = operator new(0x18uLL);
        v16[2] = v3;
        uint64_t v18 = *(void *)(v13 + 32);
        __int16 v17 = (void *)(v13 + 32);
        *int v16 = v18;
        v16[1] = v17;
        *(void *)(v18 + 8) = v16;
        void *v17 = v16;
        ++v17[2];
        uint64_t v19 = (std::__shared_weak_count *)*((void *)&v22 + 1);
        if (*((void *)&v22 + 1))
        {
          CFStringRef v20 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
    }
  }

void sub_ED754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_ED780(os_unfair_lock_s *a1)
{
  uint64_t v2 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *), os_unfair_lock_s *))(*(void *)v2 + 72LL))( v2,  sub_ED7D8,  a1);
  uint64_t v3 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *), os_unfair_lock_s *))(*(void *)v3 + 48LL))( v3,  sub_ED7D8,  a1);
  sub_ED8A4(a1);
}

void sub_ED7D8(os_unfair_lock_s *a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        unsigned __int16 v5 = "Device_ExtendedHapticDebug_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 236;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: SystemSettingsManager passed clientData as NULL.",  (uint8_t *)&v4,  0x12u);
      }
    }
  }

  sub_ED8A4(a1);
}

void sub_ED8A4(os_unfair_lock_s *a1)
{
  uint64_t v2 = operator new(4uLL);
  *(void *)std::string __p = v2;
  *uint64_t v2 = 1885433443;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(&__p[24], "cwdv");
  char v38 = 0;
  int v39 = 3;
  v41[0] = 0LL;
  v41[1] = 0LL;
  uint64_t v40 = v41;
  int v42 = 44739242;
  CFTypeRef cf = 0LL;
  sub_3710DC((uint64_t *)v30, (uint64_t)a1, (uint64_t)__p);
  sub_EDD50(&v32, v30);
  sub_85B80((uint64_t *)v30);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v41[0]);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }

  if (v34 >= 2)
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)v30, a1 + 2);
      CFStringRef v20 = v31 >= 0 ? v30 : (void **)v30[0];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 245;
      *(_WORD *)&_BYTE __p[18] = 2080;
      *(void *)&__p[20] = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Encountered more than one ANC port in device %s",  __p,  0x1Cu);
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Encountered more than one ANC port in device %s");
  }

  if (v34)
  {
    uint64_t v4 = *(void *)(v33 + 16);
    uint64_t v3 = *(std::__shared_weak_count **)(v33 + 24);
    uint64_t v28 = v4;
    char v29 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    if (!v4)
    {
      __int128 v22 = (os_log_t *)sub_138E8(13);
      __int16 v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 263;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Encountered a NULL ANC port",  __p,  0x12u);
      }

      int v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Encountered a NULL ANC port");
    }

    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
    (*(void (**)(uint64_t))(*(void *)v4 + 544LL))(v4);
    if (v7 != (*(unsigned int (**)(uint64_t))(*(void *)v4 + 152LL))(v4))
    {
      uint64_t v35 = v4;
      uint64_t v36 = v3;
      if (v3)
      {
        p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
      }

      sub_D61C0(&v25, &v35, 1LL);
      *(_DWORD *)std::string __p = 1852011125;
      *(void *)&__p[8] = &__p[8];
      *(void *)&__p[16] = &__p[8];
      *(void *)&__p[24] = 0LL;
      uint64_t v10 = v27;
      if (v27)
      {
        uint64_t v12 = v25;
        std::string v11 = v26;
        uint64_t v13 = *v26;
        *(void *)(v13 + 8) = *(void *)(v25 + 8);
        **(void **)(v12 + 8) = v13;
        uint64_t v14 = *(void *)&__p[8];
        *(void *)(*(void *)&__p[8] + 8LL) = v11;
        *std::string v11 = v14;
        *(void *)&__p[8] = v12;
        *(void *)(v12 + 8) = &__p[8];
        *(void *)&__p[24] = v10;
        uint64_t v27 = 0LL;
      }

      sub_EDEBC((uint64_t)v30, (unsigned int *)__p, 1LL);
      sub_85B80((uint64_t *)&__p[8]);
      sub_85B80(&v25);
      if (v36) {
        std::__shared_weak_count::__release_weak(v36);
      }
      uint64_t v15 = sub_546E0();
      sub_101870(v15, v30, 0);
      sub_EDF34((void *)v30[1]);
    }

    if (v3)
    {
      int v16 = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

  sub_1BB88(&v32);
}

void sub_EDC90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, std::__shared_weak_count *a22, char a23)
{
}

void sub_EDD50(uint64_t *a1, void *a2)
{
  unint64_t v21 = &v21;
  __int128 v22 = (uint64_t *)&v21;
  uint64_t v23 = 0LL;
  uint64_t v3 = (void *)a2[1];
  if (v3 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    unsigned __int16 v5 = a1 + 2;
    goto LABEL_17;
  }

  unsigned __int16 v5 = &v23;
  do
  {
    unint64_t v6 = (std::__shared_weak_count *)v3[3];
    if (v6)
    {
      int v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        CFComparisonResult v8 = v7;
        uint64_t v9 = v3[2];
        if (v9)
        {
          uint64_t v10 = operator new(0x20uLL);
          void v10[2] = v9;
          v10[3] = v8;
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            unint64_t v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          uint64_t v13 = (uint64_t)v21;
          v21[1] = v10;
          *uint64_t v10 = v13;
          v10[1] = &v21;
          unint64_t v21 = v10;
          ++v23;
        }

        uint64_t v14 = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }

    uint64_t v3 = (void *)v3[1];
  }

  while (v3 != a2);
  uint64_t v16 = v23;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (v16)
  {
    uint64_t v18 = (uint64_t)v21;
    unint64_t v17 = v22;
    uint64_t v19 = *v22;
    *(void *)(v19 + 8) = v21[1];
    **(void **)(v18 + 8) = v19;
    uint64_t v20 = *a1;
    *(void *)(v20 + 8) = v17;
    uint64_t *v17 = v20;
    *a1 = v18;
    *(void *)(v18 + 8) = a1;
    a1[2] = v16;
LABEL_17:
    uint64_t *v5 = 0LL;
  }

  sub_1BB88((uint64_t *)&v21);
}

void sub_EDEA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_7A768((uint64_t)va);
  sub_1BB88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_EDEBC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_EDF74((uint64_t **)a1, v4, *a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32LL;
    }

    while (v6);
  }

  return a1;
}

void sub_EDF20(_Unwind_Exception *a1)
{
}

void sub_EDF34(void *a1)
{
  if (a1)
  {
    sub_EDF34(*a1);
    sub_EDF34(a1[1]);
    sub_85B80(a1 + 5);
    operator delete(a1);
  }

void sub_EDF74(uint64_t **a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (unsigned int v6 = *((_DWORD *)a2 + 8), v6 > a3))
  {
    int v7 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v9 = a2;
LABEL_16:
      if (v7) {
        unint64_t v12 = (uint64_t **)v9;
      }
      else {
        unint64_t v12 = (uint64_t **)a2;
      }
      if (v7) {
        uint64_t v10 = (uint64_t **)(v9 + 1);
      }
      else {
        uint64_t v10 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }

    if (v7)
    {
      CFComparisonResult v8 = (uint64_t *)*a2;
      do
      {
        uint64_t v9 = v8;
        CFComparisonResult v8 = (uint64_t *)v8[1];
      }

      while (v8);
    }

    else
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v9 = (uint64_t *)v14[2];
        BOOL v15 = *v9 == (void)v14;
        uint64_t v14 = v9;
      }

      while (v15);
    }

    if (*((_DWORD *)v9 + 8) < a3) {
      goto LABEL_16;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v12 = (uint64_t **)v16;
          unsigned int v17 = *((_DWORD *)v16 + 8);
          if (v17 <= a3) {
            break;
          }
          uint64_t v16 = *v12;
          uint64_t v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }

        if (v17 >= a3) {
          break;
        }
        uint64_t v5 = v12 + 1;
        uint64_t v16 = v12[1];
        if (!v16) {
          goto LABEL_44;
        }
      }

uint64_t *sub_EE138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a3;
  uint64_t result = sub_EE1E8((uint64_t *)v6 + 5, (void *)(a3 + 8));
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_EE190(_Unwind_Exception *a1)
{
}

void sub_EE1A4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_85B80(v1 + 5);
    }
    operator delete(v1);
  }

uint64_t *sub_EE1E8(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = a2; ; sub_85C34(a1, i[2], i[3]))
  {
    uint64_t i = (void *)i[1];
    if (i == a2) {
      break;
    }
  }

  return a1;
}

void sub_EE23C(_Unwind_Exception *a1)
{
}

void sub_EE250(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = off_4851A8;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  __int128 v5 = *(_OWORD *)(a2 + 9);
  *((void *)v4 + 7) = 0LL;
  *(_OWORD *)(v4 + 33) = v5;
  *((_OWORD *)v4 + 4) = 0u;
  sub_85774( (void *)v4 + 7,  *(void *)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 6);
  sub_1F0A70((uint64_t)(v4 + 80), *((unsigned int *)v4 + 7));
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_EE2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_EE318()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F838;
  return result;
}

void sub_EE33C(uint64_t a1, void *a2)
{
  *a2 = &off_46F838;
}

BOOL sub_EE354()
{
  uint64_t v0 = sub_5954C();
  uint64_t v2 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 40LL))(v2) == 560488803;
}

void sub_EE3A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_484A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_EE3B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_484A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_EE3D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_EE3E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4851A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_EE3F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4851A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_EE410(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  sub_855A4(&v2);
}

uint64_t sub_EE450(void *a1)
{
  *a1 = off_473F30;
  uint64_t v2 = (void *)a1[62];
  if (v2)
  {
    a1[63] = v2;
    operator delete(v2);
  }

  return sub_36F1E0((uint64_t)a1);
}

uint64_t sub_EE48C(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_1A22B8(a1, a2, a3) = off_46F630;
  AudioObjectID v14 = a2;
  *(void *)&inAddress.uint64_t mSelector = 0x696E707473736323LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  sub_90764((uint64_t)&v8, &v14, &inAddress, 0, 0LL);
  if (!LOBYTE(v12[0]))
  {
LABEL_8:
    *(void *)(a1 + 520) = 0LL;
    return a1;
  }

  if (v9 == (void *)v10)
  {
LABEL_6:
    if (v9) {
      operator delete(v9);
    }
    goto LABEL_8;
  }

  __int128 v5 = v9;
  while (*v5 != 1095648109)
  {
    if (++v5 == v10) {
      goto LABEL_6;
    }
  }

  if (v9) {
    operator delete(v9);
  }
  CFComparisonResult v8 = &v9;
  uint64_t v9 = 0LL;
  v12[0] = 0LL;
  v12[1] = 0LL;
  uint64_t v10 = 0LL;
  std::string v11 = v12;
  sub_2DE180((uint64_t *)&v8, 0x70616E63u, 1095648109);
  sub_2DE180((uint64_t *)&v8, 0x70616E63u, 1095648112);
  sub_2DE334((uint64_t)&v8, 0x696D6963u, 1885433443);
  sub_2DE334((uint64_t)&v8, 0x736D6963u, 1885433443);
  sub_2DE334((uint64_t)&v8, 0x666D6963u, 1885433443);
  sub_2DE334((uint64_t)&v8, 0x414E436Du, 1885433443);
  sub_2DE334((uint64_t)&v8, 0x414E434Du, 1885433443);
  sub_2DE334((uint64_t)&v8, 0x414E4370u, 1885433443);
  int v7 = operator new(0x78uLL);
  sub_2DFDA8((uint64_t)v7, a2, &v8);
  *(void *)(a1 + 520) = v7;
  sub_8DF20(v12[0]);
  sub_8DF20(v9);
  return a1;
}

void sub_EE650( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void *sub_EE690()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46FA30;
  return result;
}

void sub_EE6B4(uint64_t a1, void *a2)
{
  *a2 = &off_46FA30;
}

BOOL sub_EE6CC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_EE6EC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F9E8;
  return result;
}

void sub_EE710(uint64_t a1, void *a2)
{
  *a2 = &off_46F9E8;
}

BOOL sub_EE728(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_EE748()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F9A0;
  return result;
}

void sub_EE76C(uint64_t a1, void *a2)
{
  *a2 = &off_46F9A0;
}

uint64_t sub_EE784(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_EE7E4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F958;
  return result;
}

void sub_EE808(uint64_t a1, void *a2)
{
  *a2 = &off_46F958;
}

uint64_t sub_EE820(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_EE838()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F910;
  return result;
}

void sub_EE85C(uint64_t a1, void *a2)
{
  *a2 = &off_46F910;
}

uint64_t sub_EE874(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_EE88C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F8C8;
  return result;
}

void sub_EE8B0(uint64_t a1, void *a2)
{
  *a2 = &off_46F8C8;
}

BOOL sub_EE8C8(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_EE8EC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_46F880;
  return result;
}

void sub_EE910(uint64_t a1, void *a2)
{
  *a2 = &off_46F880;
}

uint64_t sub_EE928(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

void *sub_EE938()
{
  v214[0] = v214;
  v214[1] = v214;
  uint64_t v215 = 0LL;
  int v216 = 3;
  v218[1] = 0LL;
  v218[0] = 0LL;
  uint64_t v217 = v218;
  int v219 = 3;
  v222 = 0LL;
  v221[1] = 0LL;
  v221[0] = 0LL;
  uint64_t v220 = v221;
  v224[1] = 0LL;
  v224[0] = 0LL;
  uint64_t v223 = v224;
  uint64_t v184 = 0x696E70746D6F6465LL;
  int v185 = 0;
  LODWORD(v225[0]) = 7;
  *((void *)&v225[0] + 1) = 1684434036LL;
  LOBYTE(v210[0]) = 0;
  LOBYTE(v206[0]) = 1;
  uint64_t v0 = qword_48DF18;
  if ((unint64_t)qword_48DF18 >= unk_48DF20)
  {
    uint64_t v1 = sub_F0D78(&qword_48DF10, &v184, v225, (char *)v210, (char *)v206);
  }

  else
  {
    sub_F0C04(qword_48DF18, &v184, v225, 0, 1);
    uint64_t v1 = v0 + 40;
    qword_48DF18 = v0 + 40;
  }

  qword_48DF18 = v1;
  sub_2DBF5C((uint64_t)v225);
  uint64_t v184 = 0x696E70746D6F6465LL;
  int v185 = 0;
  LODWORD(v225[0]) = 7;
  *((void *)&v225[0] + 1) = 1667329132LL;
  LOBYTE(v210[0]) = 0;
  LOBYTE(v206[0]) = 1;
  uint64_t v2 = qword_48DF30;
  if ((unint64_t)qword_48DF30 >= *(void *)algn_48DF38)
  {
    uint64_t v3 = sub_F0D78(&qword_48DF28, &v184, v225, (char *)v210, (char *)v206);
  }

  else
  {
    sub_F0C04(qword_48DF30, &v184, v225, 0, 1);
    uint64_t v3 = v2 + 40;
    qword_48DF30 = v2 + 40;
  }

  qword_48DF30 = v3;
  sub_2DBF5C((uint64_t)v225);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_48DF48);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_48DF48))
  {
    v178 = operator new(0x80uLL);
    LODWORD(v184) = 0;
    BYTE4(v184) = 1;
    *(void *)&v225[0] = &qword_48DF10;
    BYTE8(v225[0]) = 1;
    sub_2CE400( (uint64_t)v178,  0LL,  &qword_401928,  &qword_401930,  &v184,  (uint64_t *)&unk_401938,  v225,  (uint64_t)&unk_401948);
    qword_48DF40 = (uint64_t)v178;
    __cxa_guard_release(&qword_48DF48);
  }

  sub_2D251C((uint64_t)v210, qword_48DF40);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_48DF58);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_48DF58))
  {
    uint64_t v179 = operator new(0x80uLL);
    *(void *)&v225[0] = &qword_48DF28;
    BYTE8(v225[0]) = 1;
    sub_2CE400( (uint64_t)v179,  0LL,  &qword_401928,  &qword_401930,  &qword_401978,  (uint64_t *)&unk_401938,  v225,  (uint64_t)&unk_401948);
    qword_48DF50 = (uint64_t)v179;
    __cxa_guard_release(&qword_48DF58);
  }

  sub_2D251C((uint64_t)v206, qword_48DF50);
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_48DFA8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_48DFA8))
  {
    sub_F0E98();
    __cxa_guard_release(&qword_48DFA8);
  }

  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_48DFC8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_48DFC8))
  {
    sub_F0FB8();
    __cxa_guard_release(&qword_48DFC8);
  }

  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_48DFD8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_48DFD8))
  {
    uint64_t v180 = operator new(0x80uLL);
    *(void *)&v225[0] = &qword_48DFB0;
    BYTE8(v225[0]) = 1;
    sub_2CE400( (uint64_t)v180,  0LL,  &qword_401928,  &qword_401930,  &qword_401978,  (uint64_t *)&unk_401938,  v225,  (uint64_t)&unk_401948);
    qword_48DFD0 = (uint64_t)v180;
    __cxa_guard_release(&qword_48DFD8);
  }

  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_48E028);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_48E028))
  {
    sub_F1058();
    __cxa_guard_release(&qword_48E028);
  }

  v204[0] = 0;
  v204[128] = 0;
  sub_295580(v225, v204);
  memset(__p, 0, sizeof(__p));
  sub_F10CC( __p,  *(const void **)&v225[0],  *((uint64_t *)&v225[0] + 1),  (uint64_t)(*((void *)&v225[0] + 1) - *(void *)&v225[0]) >> 2);
  if (*(void *)&v225[0])
  {
    *((void *)&v225[0] + 1) = *(void *)&v225[0];
    operator delete(*(void **)&v225[0]);
  }

  sub_F1144((uint64_t)v204);
  v202[0] = (uint64_t)v202;
  v202[1] = (uint64_t)v202;
  uint64_t v203 = 0LL;
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_48E048);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_48E048))
  {
    LODWORD(v184) = 2;
    sub_F1194(v225, &v184, 1uLL);
    sub_2971C0(qword_48E030, (unsigned int **)__p, *(const void **)&v225[0], *((uint64_t *)&v225[0] + 1));
    if (*(void *)&v225[0])
    {
      *((void *)&v225[0] + 1) = *(void *)&v225[0];
      operator delete(*(void **)&v225[0]);
    }

    __cxa_guard_release(&qword_48E048);
  }

  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  if (byte_48E8E0) {
    std::string v11 = 0LL;
  }
  else {
    std::string v11 = qword_48E030;
  }
  if (_os_feature_enabled_impl("VirtualAudio", "usb_loopback_test"))
  {
    unint64_t v12 = (char *)operator new(0x38uLL);
    strcpy(v12 + 16, " paposup");
    *((void *)v12 + 4) = &qword_4A9200;
    v12[40] = 0;
    v12[48] = 0;
    uint64_t v13 = v214[0];
    *(void *)unint64_t v12 = v214[0];
    *((void *)v12 + 1) = v214;
    *(void *)(v13 + 8) = v12;
    v214[0] = v12;
    ++v215;
    v222 = v11;
    AudioObjectID v14 = sub_F1214((uint64_t)v214);
    uint64_t v15 = v202[0];
    void *v14 = v202[0];
    v14[1] = v202;
    *(void *)(v15 + 8) = v14;
    v202[0] = (uint64_t)v14;
    ++v203;
    sub_F12DC((uint64_t)v214);
  }

  uint64_t v16 = (char *)operator new(0x38uLL);
  strcpy(v16 + 16, " papspap");
  *((void *)v16 + 4) = &qword_4A9200;
  v16[40] = 0;
  v16[48] = 0;
  uint64_t v17 = v214[0];
  *(void *)uint64_t v16 = v214[0];
  *((void *)v16 + 1) = v214;
  *(void *)(v17 + 8) = v16;
  v214[0] = v16;
  ++v215;
  v222 = v11;
  uint64_t v18 = sub_F1214((uint64_t)v214);
  uint64_t v19 = v202[0];
  void *v18 = v202[0];
  v18[1] = v202;
  *(void *)(v19 + 8) = v18;
  v202[0] = (uint64_t)v18;
  ++v203;
  sub_F12DC((uint64_t)v214);
  unsigned int v20 = (char *)operator new(0x38uLL);
  strcpy(v20 + 16, " papapap");
  *((void *)v20 + 4) = &qword_4A9200;
  v20[40] = 0;
  v20[48] = 0;
  uint64_t v21 = v214[0];
  *(void *)unsigned int v20 = v214[0];
  *((void *)v20 + 1) = v214;
  *(void *)(v21 + 8) = v20;
  v214[0] = v20;
  ++v215;
  v222 = v11;
  __int128 v22 = sub_F1214((uint64_t)v214);
  uint64_t v23 = v202[0];
  *__int128 v22 = v202[0];
  v22[1] = v202;
  *(void *)(v23 + 8) = v22;
  v202[0] = (uint64_t)v22;
  ++v203;
  sub_F12DC((uint64_t)v214);
  unsigned __int8 v24 = atomic_load((unsigned __int8 *)&qword_48E068);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_48E068))
  {
    LODWORD(v184) = 19;
    sub_F1194(v225, &v184, 1uLL);
    sub_2971C0(qword_48E050, (unsigned int **)__p, *(const void **)&v225[0], *((uint64_t *)&v225[0] + 1));
    if (*(void *)&v225[0])
    {
      *((void *)&v225[0] + 1) = *(void *)&v225[0];
      operator delete(*(void **)&v225[0]);
    }

    __cxa_guard_release(&qword_48E068);
  }

  uint64_t v25 = (char *)operator new(0x38uLL);
  strcpy(v25 + 16, " papBphp");
  *((void *)v25 + 4) = &qword_4A9200;
  v25[40] = 0;
  v25[48] = 0;
  uint64_t v26 = v214[0];
  *(void *)uint64_t v25 = v214[0];
  *((void *)v25 + 1) = v214;
  *(void *)(v26 + 8) = v25;
  v214[0] = v25;
  ++v215;
  v222 = qword_48E050;
  uint64_t v27 = sub_F1214((uint64_t)v214);
  uint64_t v28 = v202[0];
  *uint64_t v27 = v202[0];
  v27[1] = v202;
  *(void *)(v28 + 8) = v27;
  v202[0] = (uint64_t)v27;
  ++v203;
  sub_F12DC((uint64_t)v214);
  char v29 = (char *)operator new(0x38uLL);
  strcpy(v29 + 16, " paplpap");
  *((void *)v29 + 4) = &qword_4A9200;
  v29[40] = 0;
  v29[48] = 0;
  uint64_t v30 = v214[0];
  *(void *)char v29 = v214[0];
  *((void *)v29 + 1) = v214;
  *(void *)(v30 + 8) = v29;
  v214[0] = v29;
  ++v215;
  v222 = qword_48E050;
  char v31 = sub_F1214((uint64_t)v214);
  uint64_t v32 = v202[0];
  *char v31 = v202[0];
  v31[1] = v202;
  *(void *)(v32 + 8) = v31;
  v202[0] = (uint64_t)v31;
  ++v203;
  sub_F12DC((uint64_t)v214);
  uint64_t v33 = (char *)operator new(0x38uLL);
  strcpy(v33 + 16, " pappsdp");
  *((void *)v33 + 4) = &qword_4A9200;
  v33[40] = 0;
  v33[48] = 0;
  uint64_t v34 = v214[0];
  *(void *)uint64_t v33 = v214[0];
  *((void *)v33 + 1) = v214;
  *(void *)(v34 + 8) = v33;
  v214[0] = v33;
  ++v215;
  v222 = qword_48E050;
  uint64_t v35 = sub_F1214((uint64_t)v214);
  uint64_t v36 = v202[0];
  *uint64_t v35 = v202[0];
  v35[1] = v202;
  *(void *)(v36 + 8) = v35;
  v202[0] = (uint64_t)v35;
  ++v203;
  sub_F12DC((uint64_t)v214);
  CFStringRef v37 = (char *)operator new(0x38uLL);
  strcpy(v37 + 16, " papmdhp");
  *((void *)v37 + 4) = &qword_4A9200;
  v37[40] = 0;
  v37[48] = 0;
  uint64_t v38 = v214[0];
  *(void *)CFStringRef v37 = v214[0];
  *((void *)v37 + 1) = v214;
  *(void *)(v38 + 8) = v37;
  v214[0] = v37;
  ++v215;
  v222 = qword_48E050;
  int v39 = sub_F1214((uint64_t)v214);
  uint64_t v40 = v202[0];
  *int v39 = v202[0];
  v39[1] = v202;
  *(void *)(v40 + 8) = v39;
  v202[0] = (uint64_t)v39;
  ++v203;
  sub_F12DC((uint64_t)v214);
  int v41 = (char *)operator new(0x38uLL);
  strcpy(v41 + 16, " pappcsp");
  *((void *)v41 + 4) = &qword_4A9200;
  v41[40] = 0;
  v41[48] = 0;
  uint64_t v42 = v214[0];
  *(void *)int v41 = v214[0];
  *((void *)v41 + 1) = v214;
  *(void *)(v42 + 8) = v41;
  v214[0] = v41;
  ++v215;
  uint64_t v43 = sub_F1214((uint64_t)v214);
  uint64_t v44 = v202[0];
  void *v43 = v202[0];
  v43[1] = v202;
  *(void *)(v44 + 8) = v43;
  v202[0] = (uint64_t)v43;
  ++v203;
  sub_F12DC((uint64_t)v214);
  unint64_t v45 = (char *)operator new(0x38uLL);
  strcpy(v45 + 16, " paplunp");
  *((void *)v45 + 4) = &qword_4A9200;
  v45[40] = 0;
  v45[48] = 0;
  uint64_t v46 = v214[0];
  *(void *)unint64_t v45 = v214[0];
  *((void *)v45 + 1) = v214;
  *(void *)(v46 + 8) = v45;
  v214[0] = v45;
  ++v215;
  v222 = qword_48E050;
  uint64_t v47 = sub_F1214((uint64_t)v214);
  uint64_t v48 = v202[0];
  *uint64_t v47 = v202[0];
  v47[1] = v202;
  *(void *)(v48 + 8) = v47;
  v202[0] = (uint64_t)v47;
  ++v203;
  sub_F12DC((uint64_t)v214);
  v200[0] = (uint64_t)v200;
  v200[1] = (uint64_t)v200;
  uint64_t v201 = 0LL;
  uint64_t v49 = (char *)operator new(0x38uLL);
  strcpy(v49 + 16, "tbmp pap");
  *((void *)v49 + 4) = &qword_4A9200;
  v49[40] = 0;
  v49[48] = 0;
  uint64_t v50 = v214[0];
  *(void *)uint64_t v49 = v214[0];
  *((void *)v49 + 1) = v214;
  *(void *)(v50 + 8) = v49;
  v214[0] = v49;
  ++v215;
  char v51 = sub_F1214((uint64_t)v214);
  uint64_t v52 = v200[0];
  *char v51 = v200[0];
  v51[1] = v200;
  *(void *)(v52 + 8) = v51;
  v200[0] = (uint64_t)v51;
  ++v201;
  sub_F12DC((uint64_t)v214);
  __int128 v53 = (char *)operator new(0x38uLL);
  strcpy(v53 + 16, "mocp pap");
  *((void *)v53 + 4) = &qword_48DF60;
  v53[40] = 0;
  v53[48] = 0;
  uint64_t v54 = v214[0];
  *(void *)__int128 v53 = v214[0];
  *((void *)v53 + 1) = v214;
  *(void *)(v54 + 8) = v53;
  v214[0] = v53;
  ++v215;
  unint64_t v55 = sub_F1214((uint64_t)v214);
  qmemcpy(v181, " papapap papspap", sizeof(v181));
  uint64_t v56 = v200[0];
  *unint64_t v55 = v200[0];
  v55[1] = v200;
  *(void *)(v56 + 8) = v55;
  v200[0] = (uint64_t)v55;
  ++v201;
  sub_F12DC((uint64_t)v214);
  v198[0] = (uint64_t)v198;
  v198[1] = (uint64_t)v198;
  uint64_t v199 = 0LL;
  if (_os_feature_enabled_impl("VirtualAudio", "usb_loopback_test"))
  {
    char v57 = (char *)operator new(0x38uLL);
    strcpy(v57 + 16, "isup pap");
    *((void *)v57 + 4) = &qword_4A9200;
    v57[40] = 0;
    v57[48] = 0;
    uint64_t v58 = v214[0];
    *(void *)char v57 = v214[0];
    *((void *)v57 + 1) = v214;
    *(void *)(v58 + 8) = v57;
    uint64_t v59 = v215;
    v214[0] = v57;
    ++v215;
    uint64_t v60 = (char *)operator new(0x38uLL);
    strcpy(v60 + 16, " paposup");
    *((void *)v60 + 4) = &qword_4A9200;
    v60[40] = 0;
    v60[48] = 0;
    *(void *)uint64_t v60 = v57;
    *((void *)v60 + 1) = v214;
    *((void *)v57 + 1) = v60;
    v214[0] = v60;
    uint64_t v215 = v59 + 2;
    v222 = qword_48E050;
    uint64_t v61 = sub_F1214((uint64_t)v214);
    uint64_t v62 = v198[0];
    *uint64_t v61 = v198[0];
    v61[1] = v198;
    *(void *)(v62 + 8) = v61;
    v198[0] = (uint64_t)v61;
    ++v199;
    sub_F12DC((uint64_t)v214);
    std::string v63 = (char *)operator new(0x38uLL);
    strcpy(v63 + 16, "isup pap");
    *((void *)v63 + 4) = &qword_4A9200;
    v63[40] = 0;
    _BYTE v63[48] = 0;
    uint64_t v64 = v214[0];
    *(void *)std::string v63 = v214[0];
    *((void *)v63 + 1) = v214;
    *(void *)(v64 + 8) = v63;
    uint64_t v65 = v215;
    v214[0] = v63;
    ++v215;
    __int16 v66 = (char *)operator new(0x38uLL);
    strcpy(v66 + 16, " papmdhp");
    *((void *)v66 + 4) = &qword_4A9200;
    v66[40] = 0;
    v66[48] = 0;
    *(void *)__int16 v66 = v63;
    *((void *)v66 + 1) = v214;
    *((void *)v63 + 1) = v66;
    v214[0] = v66;
    uint64_t v215 = v65 + 2;
    v222 = qword_48E050;
    uint64_t v67 = sub_F1214((uint64_t)v214);
    uint64_t v68 = v198[0];
    void *v67 = v198[0];
    v67[1] = v198;
    *(void *)(v68 + 8) = v67;
    v198[0] = (uint64_t)v67;
    ++v199;
    sub_F12DC((uint64_t)v214);
  }

  uint64_t v69 = (char *)operator new(0x38uLL);
  strcpy(v69 + 16, "tbmp pap");
  *((void *)v69 + 4) = &qword_4A9200;
  v69[40] = 0;
  v69[48] = 0;
  uint64_t v70 = v214[0];
  *(void *)uint64_t v69 = v214[0];
  *((void *)v69 + 1) = v214;
  *(void *)(v70 + 8) = v69;
  uint64_t v71 = v215;
  v214[0] = v69;
  ++v215;
  os_log_t v72 = (char *)operator new(0x38uLL);
  strcpy(v72 + 16, " papbphp");
  *((void *)v72 + 4) = &qword_4A9200;
  v72[40] = 0;
  v72[48] = 0;
  *(void *)os_log_t v72 = v69;
  *((void *)v72 + 1) = v214;
  *((void *)v69 + 1) = v72;
  v214[0] = v72;
  uint64_t v215 = v71 + 2;
  int v216 = dword_48D998;
  sub_52A24((uint64_t)&v217, (void *)qword_48D9A0, qword_48D9A8);
  v222 = qword_48E050;
  uint64_t v73 = sub_F1214((uint64_t)v214);
  uint64_t v74 = v198[0];
  *uint64_t v73 = v198[0];
  v73[1] = v198;
  *(void *)(v74 + 8) = v73;
  v198[0] = (uint64_t)v73;
  ++v199;
  sub_F12DC((uint64_t)v214);
  char v75 = (char *)operator new(0x38uLL);
  strcpy(v75 + 16, "mocp pap");
  *((void *)v75 + 4) = &qword_48DF60;
  v75[40] = 0;
  v75[48] = 0;
  uint64_t v76 = v214[0];
  *(void *)char v75 = v214[0];
  *((void *)v75 + 1) = v214;
  *(void *)(v76 + 8) = v75;
  uint64_t v77 = v215;
  v214[0] = v75;
  ++v215;
  uint64_t v78 = (char *)operator new(0x38uLL);
  strcpy(v78 + 16, " papBphp");
  *((void *)v78 + 4) = &qword_4A9200;
  v78[40] = 0;
  v78[48] = 0;
  *(void *)uint64_t v78 = v75;
  *((void *)v78 + 1) = v214;
  *((void *)v75 + 1) = v78;
  v214[0] = v78;
  uint64_t v215 = v77 + 2;
  int v216 = dword_48D998;
  sub_52A24((uint64_t)&v217, (void *)qword_48D9A0, qword_48D9A8);
  v222 = qword_48E050;
  char v79 = sub_F1214((uint64_t)v214);
  uint64_t v80 = v198[0];
  void *v79 = v198[0];
  v79[1] = v198;
  *(void *)(v80 + 8) = v79;
  v198[0] = (uint64_t)v79;
  ++v199;
  sub_F12DC((uint64_t)v214);
  int v81 = (char *)operator new(0x38uLL);
  strcpy(v81 + 16, "mocp pap");
  *((void *)v81 + 4) = &qword_48DF60;
  v81[40] = 0;
  v81[48] = 0;
  uint64_t v82 = v214[0];
  *(void *)int v81 = v214[0];
  *((void *)v81 + 1) = v214;
  *(void *)(v82 + 8) = v81;
  uint64_t v83 = v215;
  v214[0] = v81;
  ++v215;
  __int128 v84 = (char *)operator new(0x38uLL);
  strcpy(v84 + 16, " paplpap");
  *((void *)v84 + 4) = &qword_4A9200;
  v84[40] = 0;
  v84[48] = 0;
  *(void *)__int128 v84 = v81;
  *((void *)v84 + 1) = v214;
  *((void *)v81 + 1) = v84;
  v214[0] = v84;
  uint64_t v215 = v83 + 2;
  int v216 = dword_48D998;
  sub_52A24((uint64_t)&v217, (void *)qword_48D9A0, qword_48D9A8);
  v222 = qword_48E050;
  __int128 v85 = sub_F1214((uint64_t)v214);
  uint64_t v86 = v198[0];
  void *v85 = v198[0];
  v85[1] = v198;
  *(void *)(v86 + 8) = v85;
  v198[0] = (uint64_t)v85;
  ++v199;
  sub_F12DC((uint64_t)v214);
  __int128 v87 = (char *)operator new(0x38uLL);
  strcpy(v87 + 16, "mocp pap");
  *((void *)v87 + 4) = &qword_48DF60;
  v87[40] = 0;
  v87[48] = 0;
  uint64_t v88 = v214[0];
  *(void *)__int128 v87 = v214[0];
  *((void *)v87 + 1) = v214;
  *(void *)(v88 + 8) = v87;
  uint64_t v89 = v215;
  v214[0] = v87;
  ++v215;
  unint64_t v90 = (char *)operator new(0x38uLL);
  strcpy(v90 + 16, " pappsdp");
  *((void *)v90 + 4) = &qword_4A9200;
  v90[40] = 0;
  v90[48] = 0;
  *(void *)unint64_t v90 = v87;
  *((void *)v90 + 1) = v214;
  *((void *)v87 + 1) = v90;
  v214[0] = v90;
  uint64_t v215 = v89 + 2;
  int v216 = dword_48D998;
  sub_52A24((uint64_t)&v217, (void *)qword_48D9A0, qword_48D9A8);
  v222 = qword_48E050;
  uint64_t v91 = sub_F1214((uint64_t)v214);
  uint64_t v92 = v198[0];
  void *v91 = v198[0];
  v91[1] = v198;
  *(void *)(v92 + 8) = v91;
  v198[0] = (uint64_t)v91;
  ++v199;
  sub_F12DC((uint64_t)v214);
  uint64_t v93 = (char *)operator new(0x38uLL);
  strcpy(v93 + 16, "mocp pap");
  *((void *)v93 + 4) = &qword_48DF60;
  v93[40] = 0;
  v93[48] = 0;
  uint64_t v94 = v214[0];
  *(void *)uint64_t v93 = v214[0];
  *((void *)v93 + 1) = v214;
  *(void *)(v94 + 8) = v93;
  uint64_t v95 = v215;
  v214[0] = v93;
  ++v215;
  std::string v96 = (char *)operator new(0x38uLL);
  strcpy(v96 + 16, " papmdhp");
  *((void *)v96 + 4) = &qword_4A9200;
  v96[40] = 0;
  v96[48] = 0;
  *(void *)std::string v96 = v93;
  *((void *)v96 + 1) = v214;
  *((void *)v93 + 1) = v96;
  v214[0] = v96;
  uint64_t v215 = v95 + 2;
  int v216 = dword_48D998;
  sub_52A24((uint64_t)&v217, (void *)qword_48D9A0, qword_48D9A8);
  v222 = qword_48E050;
  AudioObjectPropertySelector v97 = sub_F1214((uint64_t)v214);
  uint64_t v98 = v198[0];
  *AudioObjectPropertySelector v97 = v198[0];
  v97[1] = v198;
  *(void *)(v98 + 8) = v97;
  v198[0] = (uint64_t)v97;
  ++v199;
  sub_F12DC((uint64_t)v214);
  unsigned __int8 v99 = (char *)operator new(0x38uLL);
  strcpy(v99 + 16, "tbmp pap");
  *((void *)v99 + 4) = &qword_4A9200;
  v99[40] = 0;
  v99[48] = 0;
  uint64_t v100 = v214[0];
  *(void *)unsigned __int8 v99 = v214[0];
  *((void *)v99 + 1) = v214;
  *(void *)(v100 + 8) = v99;
  uint64_t v101 = v215;
  v214[0] = v99;
  ++v215;
  __int16 v102 = operator new(0x38uLL);
  v102[2] = 0x7061702070686674LL;
  *((_BYTE *)v102 + 24) = 1;
  v102[4] = &qword_4A9200;
  *((_BYTE *)v102 + 40) = 0;
  *((_BYTE *)v102 + 48) = 0;
  *__int16 v102 = v99;
  v102[1] = v214;
  *((void *)v99 + 1) = v102;
  v214[0] = v102;
  uint64_t v215 = v101 + 2;
  AudioObjectPropertySelector v103 = (char *)operator new(0x38uLL);
  strcpy(v103 + 16, " papbphp");
  *((void *)v103 + 4) = &qword_4A9200;
  v103[40] = 0;
  v103[48] = 0;
  *(void *)AudioObjectPropertySelector v103 = v102;
  *((void *)v103 + 1) = v214;
  v102[1] = v103;
  v214[0] = v103;
  uint64_t v215 = v101 + 3;
  int v216 = dword_48D9F8;
  sub_52A24((uint64_t)&v217, (void *)qword_48DA00, qword_48DA08);
  v222 = qword_48E050;
  uint64_t v104 = sub_F1214((uint64_t)v214);
  uint64_t v105 = v198[0];
  *uint64_t v104 = v198[0];
  v104[1] = v198;
  *(void *)(v105 + 8) = v104;
  v198[0] = (uint64_t)v104;
  ++v199;
  sub_F12DC((uint64_t)v214);
  __int16 v106 = (char *)operator new(0x38uLL);
  strcpy(v106 + 16, "mocp pap");
  *((void *)v106 + 4) = &qword_48DF60;
  v106[40] = 0;
  v106[48] = 0;
  uint64_t v107 = v214[0];
  *(void *)__int16 v106 = v214[0];
  *((void *)v106 + 1) = v214;
  *(void *)(v107 + 8) = v106;
  uint64_t v108 = v215;
  v214[0] = v106;
  ++v215;
  AudioObjectPropertySelector v109 = (char *)operator new(0x38uLL);
  strcpy(v109 + 16, " papBphp");
  *((void *)v109 + 4) = &qword_4A9200;
  v109[40] = 0;
  v109[48] = 0;
  *(void *)AudioObjectPropertySelector v109 = v106;
  *((void *)v109 + 1) = v214;
  *((void *)v106 + 1) = v109;
  v214[0] = v109;
  uint64_t v215 = v108 + 2;
  uint64_t v110 = (char *)operator new(0x38uLL);
  strcpy(v110 + 16, "t2ap pap");
  *((void *)v110 + 4) = &qword_4A9200;
  v110[40] = 0;
  v110[48] = 0;
  *(void *)uint64_t v110 = v109;
  *((void *)v110 + 1) = v214;
  *((void *)v109 + 1) = v110;
  v214[0] = v110;
  uint64_t v215 = v108 + 3;
  int v216 = dword_48D9F8;
  sub_52A24((uint64_t)&v217, (void *)qword_48DA00, qword_48DA08);
  v222 = qword_48E050;
  uint64_t v111 = sub_F1214((uint64_t)v214);
  uint64_t v112 = v198[0];
  *uint64_t v111 = v198[0];
  v111[1] = v198;
  *(void *)(v112 + 8) = v111;
  v198[0] = (uint64_t)v111;
  ++v199;
  sub_F12DC((uint64_t)v214);
  __int16 v113 = (char *)operator new(0x38uLL);
  strcpy(v113 + 16, "mocp pap");
  *((void *)v113 + 4) = &qword_48DF60;
  v113[40] = 0;
  v113[48] = 0;
  uint64_t v114 = v214[0];
  *(void *)__int16 v113 = v214[0];
  *((void *)v113 + 1) = v214;
  *(void *)(v114 + 8) = v113;
  uint64_t v115 = v215;
  v214[0] = v113;
  ++v215;
  int v116 = (char *)operator new(0x38uLL);
  strcpy(v116 + 16, " paplpap");
  *((void *)v116 + 4) = &qword_48DFE0;
  v116[40] = 0;
  v116[48] = 0;
  *(void *)int v116 = v113;
  *((void *)v116 + 1) = v214;
  *((void *)v113 + 1) = v116;
  v214[0] = v116;
  uint64_t v215 = v115 + 2;
  uint64_t v117 = (char *)operator new(0x38uLL);
  strcpy(v117 + 16, "tlap pap");
  *((void *)v117 + 4) = &qword_4A9200;
  v117[40] = 0;
  v117[48] = 0;
  *(void *)uint64_t v117 = v116;
  *((void *)v117 + 1) = v214;
  *((void *)v116 + 1) = v117;
  v214[0] = v117;
  uint64_t v215 = v115 + 3;
  int v216 = dword_48D9F8;
  sub_52A24((uint64_t)&v217, (void *)qword_48DA00, qword_48DA08);
  v222 = qword_48E050;
  uint64_t v118 = sub_F1214((uint64_t)v214);
  uint64_t v119 = v198[0];
  void *v118 = v198[0];
  v118[1] = v198;
  *(void *)(v119 + 8) = v118;
  v198[0] = (uint64_t)v118;
  ++v199;
  sub_F12DC((uint64_t)v214);
  uint64_t v120 = (char *)operator new(0x38uLL);
  strcpy(v120 + 16, "mocp pap");
  *((void *)v120 + 4) = &qword_48DF60;
  v120[40] = 0;
  v120[48] = 0;
  uint64_t v121 = v214[0];
  *(void *)uint64_t v120 = v214[0];
  *((void *)v120 + 1) = v214;
  *(void *)(v121 + 8) = v120;
  uint64_t v122 = v215;
  v214[0] = v120;
  ++v215;
  char v123 = (char *)operator new(0x38uLL);
  strcpy(v123 + 16, "tdhp pap");
  *((void *)v123 + 4) = &qword_4A9200;
  v123[40] = 0;
  v123[48] = 0;
  *(void *)char v123 = v120;
  *((void *)v123 + 1) = v214;
  *((void *)v120 + 1) = v123;
  v214[0] = v123;
  uint64_t v215 = v122 + 2;
  int v124 = (char *)operator new(0x38uLL);
  strcpy(v124 + 16, " pappsdp");
  *((void *)v124 + 4) = &qword_4A9200;
  v124[40] = 0;
  v124[48] = 0;
  *(void *)int v124 = v123;
  *((void *)v124 + 1) = v214;
  *((void *)v123 + 1) = v124;
  v214[0] = v124;
  uint64_t v215 = v122 + 3;
  int v216 = dword_48D9F8;
  sub_52A24((uint64_t)&v217, (void *)qword_48DA00, qword_48DA08);
  v222 = qword_48E050;
  uint64_t v125 = sub_F1214((uint64_t)v214);
  uint64_t v126 = v198[0];
  *uint64_t v125 = v198[0];
  v125[1] = v198;
  *(void *)(v126 + 8) = v125;
  v198[0] = (uint64_t)v125;
  ++v199;
  sub_F12DC((uint64_t)v214);
  uint64_t v127 = (char *)operator new(0x38uLL);
  strcpy(v127 + 16, "mocp pap");
  *((void *)v127 + 4) = &qword_48DF60;
  v127[40] = 0;
  v127[48] = 0;
  uint64_t v128 = v214[0];
  *(void *)uint64_t v127 = v214[0];
  *((void *)v127 + 1) = v214;
  *(void *)(v128 + 8) = v127;
  uint64_t v129 = v215;
  v214[0] = v127;
  ++v215;
  uint64_t v130 = (char *)operator new(0x38uLL);
  strcpy(v130 + 16, "tdhp pap");
  *((void *)v130 + 4) = &qword_4A9200;
  v130[40] = 0;
  v130[48] = 0;
  *(void *)uint64_t v130 = v127;
  *((void *)v130 + 1) = v214;
  *((void *)v127 + 1) = v130;
  v214[0] = v130;
  uint64_t v215 = v129 + 2;
  uint64_t v131 = (char *)operator new(0x38uLL);
  strcpy(v131 + 16, " papmdhp");
  *((void *)v131 + 4) = &qword_4A9200;
  v131[40] = 0;
  v131[48] = 0;
  *(void *)uint64_t v131 = v130;
  *((void *)v131 + 1) = v214;
  *((void *)v130 + 1) = v131;
  v214[0] = v131;
  uint64_t v215 = v129 + 3;
  int v216 = dword_48D9F8;
  sub_52A24((uint64_t)&v217, (void *)qword_48DA00, qword_48DA08);
  v222 = qword_48E050;
  unint64_t v132 = sub_F1214((uint64_t)v214);
  uint64_t v133 = v198[0];
  *unint64_t v132 = v198[0];
  v132[1] = v198;
  *(void *)(v133 + 8) = v132;
  v198[0] = (uint64_t)v132;
  ++v199;
  sub_F12DC((uint64_t)v214);
  v196[0] = (uint64_t)v196;
  v196[1] = (uint64_t)v196;
  uint64_t v197 = 0LL;
  uint64_t v134 = (char *)operator new(0x38uLL);
  strcpy(v134 + 16, "crap pap");
  *((void *)v134 + 4) = &qword_4A9200;
  v134[40] = 0;
  v134[48] = 0;
  uint64_t v135 = v214[0];
  *(void *)uint64_t v134 = v214[0];
  *((void *)v134 + 1) = v214;
  *(void *)(v135 + 8) = v134;
  uint64_t v136 = v215;
  v214[0] = v134;
  ++v215;
  uint64_t v137 = (char *)operator new(0x38uLL);
  strcpy(v137 + 16, " paplpap");
  *((void *)v137 + 4) = &qword_4A9200;
  v137[40] = 0;
  v137[48] = 0;
  *(void *)uint64_t v137 = v134;
  *((void *)v137 + 1) = v214;
  *((void *)v134 + 1) = v137;
  v214[0] = v137;
  uint64_t v215 = v136 + 2;
  v222 = qword_48E050;
  int v216 = dword_48DA38;
  sub_52A24((uint64_t)&v217, (void *)qword_48DA40, qword_48DA48);
  char v138 = sub_F1214((uint64_t)v214);
  uint64_t v139 = v196[0];
  *char v138 = v196[0];
  v138[1] = v196;
  *(void *)(v139 + 8) = v138;
  v196[0] = (uint64_t)v138;
  ++v197;
  sub_F12DC((uint64_t)v214);
  uint64_t v140 = operator new(0x38uLL);
  v140[2] = v181[1];
  *((_BYTE *)v140 + 24) = 0;
  v140[4] = &qword_4A9200;
  *((_BYTE *)v140 + 40) = 0;
  *((_BYTE *)v140 + 48) = 0;
  uint64_t v141 = v214[0];
  void *v140 = v214[0];
  v140[1] = v214;
  *(void *)(v141 + 8) = v140;
  uint64_t v142 = v215;
  v214[0] = v140;
  ++v215;
  __int16 v143 = (char *)operator new(0x38uLL);
  strcpy(v143 + 16, "ilnp pap");
  *((void *)v143 + 4) = &qword_4A9200;
  v143[40] = 0;
  v143[48] = 0;
  *(void *)__int16 v143 = v140;
  *((void *)v143 + 1) = v214;
  v140[1] = v143;
  v214[0] = v143;
  uint64_t v215 = v142 + 2;
  int v144 = sub_F1214((uint64_t)v214);
  uint64_t v145 = v196[0];
  *int v144 = v196[0];
  v144[1] = v196;
  *(void *)(v145 + 8) = v144;
  v196[0] = (uint64_t)v144;
  ++v197;
  sub_F12DC((uint64_t)v214);
  AudioObjectID v146 = operator new(0x38uLL);
  v146[2] = v181[0];
  *((_BYTE *)v146 + 24) = 0;
  v146[4] = &qword_4A9200;
  *((_BYTE *)v146 + 40) = 0;
  *((_BYTE *)v146 + 48) = 0;
  uint64_t v147 = v214[0];
  *AudioObjectID v146 = v214[0];
  v146[1] = v214;
  *(void *)(v147 + 8) = v146;
  uint64_t v148 = v215;
  v214[0] = v146;
  ++v215;
  __int16 v149 = (char *)operator new(0x38uLL);
  strcpy(v149 + 16, "ilnp pap");
  *((void *)v149 + 4) = &qword_4A9200;
  v149[40] = 0;
  v149[48] = 0;
  *(void *)__int16 v149 = v146;
  *((void *)v149 + 1) = v214;
  v146[1] = v149;
  v214[0] = v149;
  uint64_t v215 = v148 + 2;
  int v150 = sub_F1214((uint64_t)v214);
  uint64_t v151 = v196[0];
  void *v150 = v196[0];
  v150[1] = v196;
  *(void *)(v151 + 8) = v150;
  v196[0] = (uint64_t)v150;
  ++v197;
  sub_F12DC((uint64_t)v214);
  int v152 = (char *)operator new(0x38uLL);
  strcpy(v152 + 16, "crap pap");
  *((void *)v152 + 4) = &qword_4A9200;
  v152[40] = 0;
  v152[48] = 0;
  uint64_t v153 = v214[0];
  *(void *)int v152 = v214[0];
  *((void *)v152 + 1) = v214;
  *(void *)(v153 + 8) = v152;
  uint64_t v154 = v215;
  v214[0] = v152;
  ++v215;
  unsigned int v155 = (char *)operator new(0x38uLL);
  strcpy(v155 + 16, " papBphp");
  *((void *)v155 + 4) = &qword_4A9200;
  v155[40] = 0;
  v155[48] = 0;
  *(void *)unsigned int v155 = v152;
  *((void *)v155 + 1) = v214;
  *((void *)v152 + 1) = v155;
  v214[0] = v155;
  uint64_t v215 = v154 + 2;
  v222 = qword_48E050;
  uint64_t v156 = sub_F1214((uint64_t)v214);
  uint64_t v157 = v196[0];
  void *v156 = v196[0];
  v156[1] = v196;
  *(void *)(v157 + 8) = v156;
  v196[0] = (uint64_t)v156;
  ++v197;
  sub_F12DC((uint64_t)v214);
  int v158 = (char *)operator new(0x38uLL);
  strcpy(v158 + 16, "crap pap");
  *((void *)v158 + 4) = &qword_4A9200;
  v158[40] = 0;
  v158[48] = 0;
  uint64_t v159 = v214[0];
  *(void *)int v158 = v214[0];
  *((void *)v158 + 1) = v214;
  *(void *)(v159 + 8) = v158;
  uint64_t v160 = v215;
  v214[0] = v158;
  ++v215;
  uint64_t v161 = (char *)operator new(0x38uLL);
  strcpy(v161 + 16, " paplpap");
  *((void *)v161 + 4) = &qword_4A9200;
  v161[40] = 0;
  v161[48] = 0;
  *(void *)uint64_t v161 = v158;
  *((void *)v161 + 1) = v214;
  *((void *)v158 + 1) = v161;
  v214[0] = v161;
  uint64_t v215 = v160 + 2;
  v222 = qword_48E050;
  uint64_t v162 = sub_F1214((uint64_t)v214);
  uint64_t v163 = v196[0];
  *uint64_t v162 = v196[0];
  v162[1] = v196;
  *(void *)(v163 + 8) = v162;
  v196[0] = (uint64_t)v162;
  ++v197;
  sub_F12DC((uint64_t)v214);
  uint64_t v164 = (char *)operator new(0x38uLL);
  strcpy(v164 + 16, "crap pap");
  *((void *)v164 + 4) = &qword_4A9200;
  v164[40] = 0;
  v164[48] = 0;
  uint64_t v165 = v214[0];
  *(void *)uint64_t v164 = v214[0];
  *((void *)v164 + 1) = v214;
  *(void *)(v165 + 8) = v164;
  uint64_t v166 = v215;
  v214[0] = v164;
  ++v215;
  v167 = (char *)operator new(0x38uLL);
  strcpy(v167 + 16, " paplunp");
  *((void *)v167 + 4) = &qword_4A9200;
  v167[40] = 0;
  v167[48] = 0;
  *(void *)v167 = v164;
  *((void *)v167 + 1) = v214;
  *((void *)v164 + 1) = v167;
  v214[0] = v167;
  uint64_t v215 = v166 + 2;
  v222 = qword_48E050;
  v168 = sub_F1214((uint64_t)v214);
  uint64_t v169 = v196[0];
  void *v168 = v196[0];
  v168[1] = v196;
  *(void *)(v169 + 8) = v168;
  v196[0] = (uint64_t)v168;
  ++v197;
  sub_F12DC((uint64_t)v214);
  char v170 = (char *)operator new(0x38uLL);
  strcpy(v170 + 16, " paplunp");
  *((void *)v170 + 4) = &qword_4A9200;
  v170[40] = 0;
  v170[48] = 0;
  uint64_t v171 = v214[0];
  *(void *)char v170 = v214[0];
  *((void *)v170 + 1) = v214;
  *(void *)(v171 + 8) = v170;
  uint64_t v172 = v215;
  v214[0] = v170;
  ++v215;
  uint64_t v173 = (char *)operator new(0x38uLL);
  strcpy(v173 + 16, "ilnp pap");
  *((void *)v173 + 4) = &qword_4A9200;
  v173[40] = 0;
  v173[48] = 0;
  *(void *)uint64_t v173 = v170;
  *((void *)v173 + 1) = v214;
  *((void *)v170 + 1) = v173;
  v214[0] = v173;
  uint64_t v215 = v172 + 2;
  v222 = qword_48E050;
  v174 = sub_F1214((uint64_t)v214);
  uint64_t v175 = v196[0];
  void *v174 = v196[0];
  v174[1] = v196;
  *(void *)(v175 + 8) = v174;
  v196[0] = (uint64_t)v174;
  ++v197;
  sub_F12DC((uint64_t)v214);
  sub_2381A4(v195);
  sub_238484(v194);
  uint64_t v191 = (uint64_t *)v192;
  v192[0] = 0LL;
  v193[0] = 0LL;
  v193[1] = 0LL;
  v192[1] = 0LL;
  v192[2] = v193;
  sub_2D439C(&v191, 1);
  uint64_t v188 = (uint64_t *)v189;
  v189[0] = 0LL;
  v190[0] = 0LL;
  v190[1] = 0LL;
  v189[1] = 0LL;
  v189[2] = v190;
  LODWORD(v184) = 1885892674;
  sub_7A22C((uint64_t)v225, (unsigned int *)&v184, 1LL);
  sub_2D44EC(&v188, 0x696D6466u, (uint64_t)v225);
  sub_32C8C(*((void **)&v225[0] + 1));
  unsigned __int8 v176 = atomic_load((unsigned __int8 *)&qword_48E088);
  if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_48E088))
  {
    *(void *)&v225[0] = 1885892706LL;
    sub_F13D0((uint64_t **)&unk_48E070, (unsigned int *)v225, 1LL);
    __cxa_guard_release(&qword_48E088);
  }

  qword_48F0B0 = 0LL;
  qword_48F0A8 = (uint64_t)&qword_48F0B0;
  qword_48F0B8 = 0LL;
  qword_48F0C0 = 0LL;
  qword_48F0C8 = 0LL;
  qword_48F0D0 = 0LL;
  qword_48F0E0 = 0LL;
  qword_48F0D8 = (uint64_t)&qword_48F0E0;
  qword_48F0F8 = 0LL;
  qword_48F0E8 = 0LL;
  qword_48F0F0 = &qword_48F0F8;
  qword_48F118 = 0LL;
  qword_48F110 = 0LL;
  qword_48F100 = 0LL;
  unk_48F108 = &qword_48F110;
  qword_48F130 = 0LL;
  qword_48F128 = 0LL;
  qword_48F148 = 0LL;
  qword_48F120 = &qword_48F128;
  LOBYTE(qword_48F138) = 0;
  BYTE4(qword_48F138) = 0;
  qword_48F150 = 0LL;
  qword_48F140 = (uint64_t)&qword_48F148;
  sub_2D1F40((uint64_t)v225, (uint64_t)v202, &v191, 1668510820, 0, 0, 1, 1, 0, 0);
  sub_F1540(0x63736176u, 1668505974, (uint64_t)v225);
  sub_F16A4(v228);
  sub_F16E4(v226);
  sub_F1724((uint64_t *)v225);
  sub_2D202C((uint64_t)&v184, (uint64_t)v200, 1668510820, 0, 1, 0, 1, 1, 0);
  sub_F17B0((uint64_t)v225, 1668441443, (uint64_t)&v184);
  sub_F1878(v225[0], (int *)v225);
  sub_F16A4(v229);
  sub_F16E4(v227);
  sub_F1724((uint64_t *)v225 + 1);
  sub_F16A4(v187);
  sub_F16E4(v186);
  sub_F1724(&v184);
  sub_2D1F40((uint64_t)&v184, (uint64_t)v198, &v188, 1668510820, 0, 1, 1, 1, 0, 0);
  sub_F17B0((uint64_t)v225, 1668309362, (uint64_t)&v184);
  sub_F1878(v225[0], (int *)v225);
  sub_F16A4(v229);
  sub_F16E4(v227);
  sub_F1724((uint64_t *)v225 + 1);
  sub_F16A4(v187);
  sub_F16E4(v186);
  sub_F1724(&v184);
  sub_2D202C((uint64_t)v225, (uint64_t)v196, 1668510820, 0, 1, 1, 1, 0, 0);
  sub_F1540(0x6361726Cu, 1667330668, (uint64_t)v225);
  sub_F16A4(v228);
  sub_F16E4(v226);
  sub_F1724((uint64_t *)v225);
  sub_2D202C((uint64_t)v225, (uint64_t)v195, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x636D7573u, 1668117875, (uint64_t)v225);
  sub_F16A4(v228);
  sub_F16E4(v226);
  sub_F1724((uint64_t *)v225);
  sub_2D202C((uint64_t)v225, (uint64_t)v194, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x63616972u, 1667328370, (uint64_t)v225);
  sub_F16A4(v228);
  sub_F16E4(v226);
  sub_F1724((uint64_t *)v225);
  sub_2CF584(0x696D6466u, (uint64_t)&unk_48E070);
  sub_2D054C();
  sub_2FCDC8((uint64_t *)v225);
  sub_52A24((uint64_t)&qword_48F0F0, *(void **)&v225[0], (void *)v225 + 1);
  sub_32C8C(*((void **)&v225[0] + 1));
  *(void *)&v225[0] = 0x706864747068646DLL;
  sub_7A22C((uint64_t)&v182, (unsigned int *)v225, 2LL);
  sub_52A24((uint64_t)&qword_48F120, v182, &v183);
  sub_32C8C(v183);
  sub_F19DC();
  sub_F16A4(v190[0]);
  sub_F16E4(v189[0]);
  sub_F16A4(v193[0]);
  sub_F16E4(v192[0]);
  sub_F1724(v194);
  sub_F1724(v195);
  sub_F1724(v196);
  sub_F1724(v198);
  sub_F1724(v200);
  sub_F1724(v202);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  sub_32C8C(v209);
  if (v207)
  {
    uint64_t v208 = v207;
    operator delete(v207);
  }

  if (v206[0])
  {
    v206[1] = v206[0];
    operator delete(v206[0]);
  }

  sub_32C8C(v213);
  if (v211)
  {
    uint64_t v212 = v211;
    operator delete(v211);
  }

  if (v210[0])
  {
    v210[1] = v210[0];
    operator delete(v210[0]);
  }

  sub_F20B8(v224[0]);
  sub_32C8C(v221[0]);
  sub_32C8C(v218[0]);
  return sub_68314(v214);
}

void sub_F0884( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (STACK[0x210]) {
    operator delete((void *)STACK[0x210]);
  }
  sub_F215C((uint64_t)&STACK[0x228]);
  sub_F215C((uint64_t)&STACK[0x270]);
  sub_F21A4((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_F0C04(uint64_t a1, uint64_t *a2, _DWORD *a3, char a4, char a5)
{
  uint64_t v9 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v9;
  sub_2DC450(a1 + 16, (uint64_t)a3);
  *(_BYTE *)(a1 + sub_7A768(v2 - 32) = a4;
  *(_BYTE *)(a1 + 33) = a5;
  if ((*a3 - 9) >= 2 && *a3 != 7)
  {
    unint64_t v12 = (os_log_t *)sub_138E8(13);
    uint64_t v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315394;
        uint64_t v16 = "RoutingTypes.h";
        __int16 v17 = 1024;
        int v18 = 906;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v15,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return a1;
}

void sub_F0D50(_Unwind_Exception *a1)
{
}

uint64_t sub_F0D78(uint64_t *a1, uint64_t *a2, _DWORD *a3, char *a4, char *a5)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666LL) {
    sub_7A87C();
  }
  unint64_t v12 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333LL) {
    unint64_t v13 = 0x666666666666666LL;
  }
  else {
    unint64_t v13 = v6;
  }
  uint64_t v21 = v12;
  if (v13) {
    unint64_t v13 = (unint64_t)sub_F2BEC(v13);
  }
  else {
    uint64_t v14 = 0LL;
  }
  unint64_t v17 = v13;
  uint64_t v18 = v13 + 40 * v5;
  uint64_t v19 = v18;
  unint64_t v20 = v13 + 40 * v14;
  sub_F0C04(v18, a2, a3, *a4, *a5);
  uint64_t v19 = v18 + 40;
  sub_F2C30(a1, &v17);
  uint64_t v15 = a1[1];
  sub_F2D1C((uint64_t)&v17);
  return v15;
}

void sub_F0E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_F0E98()
{
  qword_48DF68 = 0LL;
  qword_48DF80 = 0LL;
  qword_48DF60 = (uint64_t)&qword_48DF68;
  qword_48DF70 = 0LL;
  unk_48DF78 = &qword_48DF80;
  qword_48DF98 = 0LL;
  qword_48DFA0 = 0LL;
  qword_48DF88 = 0LL;
  unk_48DF90 = &qword_48DF98;
  uint64_t v3 = 0x696D646600000000LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_48DF60, (uint64_t)&v3, qword_48DF40);
  for (uint64_t i = 0LL; i != 20; i += 4LL)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv[i];
    LODWORD(v3) = 0;
    HIDWORD(v3) = v1;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t result = sub_2D5228((uint64_t **)&qword_48DF60, (uint64_t)&v3, qword_48DF50);
  }

  return result;
}

void sub_F0F94(_Unwind_Exception *a1)
{
}

uint64_t sub_F0FB8()
{
  qword_48DFB0 = 0LL;
  qword_48DFB8 = 0LL;
  qword_48DFC0 = 0LL;
  uint64_t v5 = 0x676C6F62766F6963LL;
  int v6 = 0;
  int v3 = 7;
  uint64_t v4 = 1LL;
  char v2 = 1;
  char v1 = 1;
  qword_48DFB8 = sub_F0D78(&qword_48DFB0, &v5, &v3, &v2, &v1);
  return sub_2DBF5C((uint64_t)&v3);
}

void sub_F1038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_F1058()
{
  qword_48DFE8 = 0LL;
  qword_48DFE0 = (uint64_t)&qword_48DFE8;
  qword_48E000 = 0LL;
  qword_48DFF0 = 0LL;
  unk_48DFF8 = &qword_48E000;
  qword_48E020 = 0LL;
  qword_48E018 = 0LL;
  qword_48E008 = 0LL;
  unk_48E010 = &qword_48E018;
  return sub_2D5228((uint64_t **)&qword_48DFE0, (uint64_t)&qword_4A9190, qword_48DFD0);
}

void sub_F10B4(_Unwind_Exception *a1)
{
}

void *sub_F10CC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_7A840(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_F1128(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_F1144(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
  {
    sub_32C8C(*(void **)(a1 + 104));
    char v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }

    int v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + sub_7A768(v2 - 32) = v3;
      operator delete(v3);
    }
  }

  return a1;
}

void *sub_F1194(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_7A840(a1, a3);
    int v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }

  return a1;
}

void sub_F11F8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_F1214(uint64_t a1)
{
  char v2 = operator new(0x88uLL);
  *char v2 = 0LL;
  v2[1] = 0LL;
  sub_F23F0(v2 + 2, a1);
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 24);
  sub_86550(v2 + 6, a1 + 32);
  *((_DWORD *)v2 + 18) = *(_DWORD *)(a1 + 56);
  sub_F2490(v2 + 10, (void *)(a1 + 64));
  v2[13] = *(void *)(a1 + 88);
  sub_F2538(v2 + 14, (void *)(a1 + 96));
  return v2;
}

void sub_F1298(_Unwind_Exception *a1)
{
}

void sub_F12DC(uint64_t a1)
{
  unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v3 = a1 + 40;
  char v2 = *(void **)(a1 + 40);
  *(_DWORD *)(a1 + 24) = 3;
  sub_32C8C(v2);
  uint64_t v4 = v12;
  *(void *)(a1 + sub_7A768(v2 - 32) = &v12;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = v13;
  *(void *)(a1 + 48) = v13;
  if (v5)
  {
    void v4[2] = v3;
    unint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    *(void *)(a1 + sub_7A768(v2 - 32) = v3;
  }

  sub_32C8C(v4);
  unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v7 = a1 + 72;
  int v6 = *(void **)(a1 + 72);
  *(_DWORD *)(a1 + 56) = 3;
  sub_32C8C(v6);
  size_t v8 = v12;
  *(void *)(a1 + 64) = &v12;
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = v13;
  *(void *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = v13;
  if (v9)
  {
    void v8[2] = v7;
    unint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    size_t v8 = 0LL;
  }

  else
  {
    *(void *)(a1 + 64) = v7;
  }

  sub_32C8C(v8);
  std::string v11 = *(void **)(a1 + 104);
  unsigned __int8 v10 = (void *)(a1 + 104);
  *(v10 - 2) = 0LL;
  sub_F20B8(v11);
  *(v10 - 1) = v10;
  *unsigned __int8 v10 = 0LL;
  v10[1] = 0LL;
}

uint64_t **sub_F13D0(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0LL;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    int v6 = 0LL;
    uint64_t v7 = &a2[2 * a3];
    size_t v8 = (uint64_t *)(a1 + 1);
    while (1)
    {
      uint64_t v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      unsigned __int8 v10 = v6;
      std::string v11 = v4;
      if (v6)
      {
        do
        {
          uint64_t v9 = v10;
          unsigned __int8 v10 = (uint64_t *)v10[1];
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          std::string v11 = v9;
        }

        while (v12);
      }

      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        uint64_t v14 = (uint64_t **)(v6 ? v9 : v4);
        uint64_t v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }

      else
      {
        uint64_t v14 = (uint64_t **)v4;
        uint64_t v15 = (uint64_t **)v4;
        if (v6)
        {
          uint64_t v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v6;
              unsigned int v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18) {
                break;
              }
              int v6 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }

            if (v18 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            int v6 = v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }

      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)v5;
        *uint64_t v16 = 0LL;
        v16[1] = 0LL;
        v16[2] = (uint64_t)v14;
        os_log_s *v15 = v16;
        unint64_t v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = *v15;
        }

        sub_7A420(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }

      v5 += 2;
      if (v5 == v7) {
        break;
      }
      size_t v8 = *a1;
      int v6 = a1[1];
    }
  }

  return a1;
}

void sub_F152C(_Unwind_Exception *a1)
{
}

void sub_F1540(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v5 = qword_48F0B0;
  if (qword_48F0B0)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (uint64_t *)v5;
        unsigned int v7 = *(_DWORD *)(v5 + 32);
        if (v7 <= a1) {
          break;
        }
        uint64_t v5 = *v6;
        size_t v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }

      if (v7 >= a1) {
        break;
      }
      uint64_t v5 = v6[1];
      if (!v5)
      {
        size_t v8 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }

  else
  {
    size_t v8 = (uint64_t **)&qword_48F0B0;
    int v6 = &qword_48F0B0;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x88uLL);
    v19[1] = &qword_48F0B0;
    *((_DWORD *)v9 + 8) = a2;
    *((void *)v9 + 5) = v9 + 40;
    *((void *)v9 + 6) = v9 + 40;
    *((void *)v9 + 7) = 0LL;
    sub_CCA0C((uint64_t)(v9 + 40), (uint64_t *)v9 + 5, (void *)a3);
    unsigned __int8 v10 = (void *)(a3 + 48);
    uint64_t v11 = *(void *)(a3 + 48);
    v9[64] = *(_BYTE *)(a3 + 24);
    *((_DWORD *)v9 + 18) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(v9 + 75) = *(_DWORD *)(a3 + 35);
    *((void *)v9 + 10) = *(void *)(a3 + 40);
    *((void *)v9 + 11) = v11;
    BOOL v12 = v9 + 88;
    uint64_t v13 = *(void *)(a3 + 56);
    *((void *)v9 + 12) = v13;
    if (v13)
    {
      *(void *)(v11 + 16) = v12;
      *(void *)(a3 + 40) = v10;
      *unsigned __int8 v10 = 0LL;
      *(void *)(a3 + 56) = 0LL;
    }

    else
    {
      *((void *)v9 + 10) = v12;
    }

    uint64_t v14 = (void *)(a3 + 72);
    uint64_t v15 = *(void *)(a3 + 72);
    uint64_t v16 = *(void *)(a3 + 64);
    *((void *)v9 + 14) = v15;
    unint64_t v17 = v9 + 112;
    *((void *)v9 + 13) = v16;
    uint64_t v18 = *(void *)(a3 + 80);
    *((void *)v9 + 15) = v18;
    if (v18)
    {
      *(void *)(v15 + 16) = v17;
      *(void *)(a3 + 64) = v14;
      void *v14 = 0LL;
      *(void *)(a3 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0LL;
    }

    else
    {
      *((void *)v9 + 13) = v17;
    }

    v9[128] = *(_BYTE *)(a3 + 88);
    char v20 = 1;
    sub_F22EC((uint64_t)v6, v8, (uint64_t *)v9);
    v19[0] = 0LL;
    sub_F2348((uint64_t)v19);
  }

void sub_F16A4(void *a1)
{
  if (a1)
  {
    sub_F16A4(*a1);
    sub_F16A4(a1[1]);
    sub_32C8C((void *)a1[6]);
    operator delete(a1);
  }

void sub_F16E4(void *a1)
{
  if (a1)
  {
    sub_F16E4(*a1);
    sub_F16E4(a1[1]);
    sub_F238C((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_F1724(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_F20B8((void *)v3[15]);
        sub_32C8C((void *)v3[11]);
        sub_32C8C((void *)v3[7]);
        sub_68314(v3 + 2);
        operator delete(v3);
        uint64_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

uint64_t sub_F17B0(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  uint64_t v5 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0LL;
  sub_CCA0C((uint64_t)v5, v5, (void *)a3);
  *(_BYTE *)(a1 + sub_7A768(v2 - 32) = *(_BYTE *)(a3 + 24);
  int v6 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a1 + 43) = *(_DWORD *)(a3 + 35);
  *(_DWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a3 + 40);
  unsigned int v7 = (void *)(a3 + 48);
  uint64_t v8 = *(void *)(a3 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a1 + 56;
  uint64_t v10 = *(void *)(a3 + 56);
  *(void *)(a1 + 64) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a3 + 40) = v7;
    void *v7 = 0LL;
    *(void *)(a3 + 56) = 0LL;
  }

  else
  {
    *(void *)(a1 + 48) = v9;
  }

  *(void *)(a1 + 72) = *(void *)(a3 + 64);
  uint64_t v11 = (void *)(a3 + 72);
  uint64_t v12 = *(void *)(a3 + 72);
  *(void *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = v12;
  uint64_t v13 = a1 + 80;
  uint64_t v14 = *(void *)(a3 + 80);
  *(void *)(a1 + 88) = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    *(void *)(a3 + 64) = v11;
    *uint64_t v11 = 0LL;
    *(void *)(a3 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0LL;
  }

  else
  {
    *(void *)(a1 + 72) = v13;
  }

  *(_BYTE *)(a1 + sub_19DFC(v32 - 96) = *(_BYTE *)(a3 + 88);
  return a1;
}

void sub_F1878(unsigned int a1, int *a2)
{
  uint64_t v3 = qword_48F0B0;
  if (qword_48F0B0)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3;
        unsigned int v5 = *(_DWORD *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        int v6 = (uint64_t **)v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }

      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        int v6 = (uint64_t **)(v4 + 1);
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v6 = (uint64_t **)&qword_48F0B0;
    uint64_t v4 = &qword_48F0B0;
LABEL_9:
    unsigned int v7 = (char *)operator new(0x88uLL);
    int v8 = *a2;
    v18[1] = &qword_48F0B0;
    *((_DWORD *)v7 + 8) = v8;
    *((void *)v7 + 5) = v7 + 40;
    *((void *)v7 + 6) = v7 + 40;
    *((void *)v7 + 7) = 0LL;
    sub_CCA0C((uint64_t)(v7 + 40), (uint64_t *)v7 + 5, (void *)a2 + 1);
    uint64_t v9 = a2 + 14;
    uint64_t v10 = *((void *)a2 + 7);
    v7[64] = *((_BYTE *)a2 + 32);
    *((_DWORD *)v7 + 18) = a2[10];
    *(_DWORD *)(v7 + 75) = *(int *)((char *)a2 + 43);
    *((void *)v7 + 10) = *((void *)a2 + 6);
    *((void *)v7 + 11) = v10;
    uint64_t v11 = v7 + 88;
    uint64_t v12 = *((void *)a2 + 8);
    *((void *)v7 + 12) = v12;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      *((void *)a2 + 6) = v9;
      *uint64_t v9 = 0LL;
      *((void *)a2 + 8) = 0LL;
    }

    else
    {
      *((void *)v7 + 10) = v11;
    }

    uint64_t v13 = a2 + 20;
    uint64_t v14 = *((void *)a2 + 10);
    uint64_t v15 = *((void *)a2 + 9);
    *((void *)v7 + 14) = v14;
    uint64_t v16 = v7 + 112;
    *((void *)v7 + 13) = v15;
    uint64_t v17 = *((void *)a2 + 11);
    *((void *)v7 + 15) = v17;
    if (v17)
    {
      *(void *)(v14 + 16) = v16;
      *((void *)a2 + 9) = v13;
      *uint64_t v13 = 0LL;
      *((void *)a2 + 11) = 0LL;
    }

    else
    {
      *((void *)v7 + 13) = v16;
    }

    v7[128] = *((_BYTE *)a2 + 96);
    char v19 = 1;
    sub_F22EC((uint64_t)v4, v6, (uint64_t *)v7);
    v18[0] = 0LL;
    sub_F2348((uint64_t)v18);
  }

void sub_F19DC()
{
  uint64_t v0 = qword_48F0A8;
  if ((uint64_t *)qword_48F0A8 != &qword_48F0B0)
  {
    while (1)
    {
      uint64_t v1 = sub_138E8(20);
      if ((*(_BYTE *)(v1 + 8) & 1) != 0)
      {
        uint64_t v2 = *(os_log_s **)v1;
        if (*(void *)v1)
        {
          if (os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, *(unsigned int *)(v0 + 32));
            uint64_t v3 = __p;
            if (v39 < 0) {
              uint64_t v3 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2180;
            __int16 v44 = 2080;
            *(void *)unint64_t v45 = v3;
            _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Located Category for category '%s'.", buf, 0x1Cu);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      uint64_t v4 = sub_138E8(20);
      if ((*(_BYTE *)(v4 + 8) & 1) != 0)
      {
        unsigned int v5 = *(os_log_s **)v4;
        if (*(void *)v4)
        {
          if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, *(unsigned int *)(v0 + 72));
            int v6 = __p;
            if (v39 < 0) {
              int v6 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2181;
            __int16 v44 = 2080;
            *(void *)unint64_t v45 = v6;
            _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category type: '%s'.", buf, 0x1Cu);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      uint64_t v7 = sub_138E8(20);
      if ((*(_BYTE *)(v7 + 8) & 1) != 0)
      {
        int v8 = *(os_log_s **)v7;
        if (*(void *)v7)
        {
          if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, *(unsigned int *)(v0 + 32));
            uint64_t v9 = __p;
            if (v39 < 0) {
              uint64_t v9 = (void **)__p[0];
            }
            uint64_t v10 = "obeys";
            if (!*(_BYTE *)(v0 + 76)) {
              uint64_t v10 = "does not obey";
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2183;
            __int16 v44 = 2080;
            *(void *)unint64_t v45 = v9;
            *(_WORD *)&v45[8] = 2080;
            *(void *)&v45[10] = v10;
            _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category '%s' %s silent mode.", buf, 0x26u);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      if (!*(void *)(v0 + 56))
      {
        uint64_t v33 = (os_log_t *)sub_138E8(20);
        os_log_t v34 = *v33;
        if (!*v33 || !os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR)) {
          return;
        }
        sub_2CA1C(__p, *(unsigned int *)(v0 + 32));
        if (v39 >= 0) {
          uint64_t v35 = __p;
        }
        else {
          uint64_t v35 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        int v41 = "RoutingTypes.h";
        __int16 v42 = 1024;
        int v43 = 2187;
        __int16 v44 = 2080;
        *(void *)unint64_t v45 = v35;
        uint64_t v30 = "%25s:%-5d !!!!! Category '%s' has an empty PrioritizedRouteList !!!!!";
        char v31 = v34;
        uint32_t v32 = 28;
        goto LABEL_64;
      }

      uint64_t v11 = *(void **)(v0 + 48);
      if (v11 != (void *)(v0 + 40)) {
        break;
      }
LABEL_51:
      unsigned __int8 v24 = *(uint64_t **)(v0 + 8);
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          unsigned __int8 v24 = (uint64_t *)*v24;
        }

        while (v24);
      }

      else
      {
        do
        {
          uint64_t v25 = *(uint64_t **)(v0 + 16);
          BOOL v26 = *v25 == v0;
          uint64_t v0 = (uint64_t)v25;
        }

        while (!v26);
      }

      uint64_t v0 = (uint64_t)v25;
      if (v25 == &qword_48F0B0) {
        return;
      }
    }

    int v12 = 0;
    while (1)
    {
      uint64_t v13 = sub_138E8(20);
      if ((*(_BYTE *)(v13 + 8) & 1) != 0)
      {
        uint64_t v14 = *(os_log_s **)v13;
        if (*(void *)v13)
        {
          if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, *(unsigned int *)(v0 + 32));
            uint64_t v15 = __p;
            if (v39 < 0) {
              uint64_t v15 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2193;
            __int16 v44 = 1024;
            *(_DWORD *)unint64_t v45 = v12;
            *(_WORD *)&v45[4] = 2080;
            *(void *)&v45[6] = v15;
            _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d --> Searching AbstractRoute #%d of the PrioritizedRouteList for category '%s'.",  buf,  0x22u);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      if (!v11[4]) {
        break;
      }
      uint64_t v16 = v11[3];
      if ((void *)v16 != v11 + 2)
      {
        int v17 = 0;
        do
        {
          uint64_t v18 = sub_138E8(20);
          if ((*(_BYTE *)(v18 + 8) & 1) != 0)
          {
            char v19 = *(os_log_s **)v18;
            if (*(void *)v18)
            {
              if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(__p, *(unsigned int *)(v16 + 16));
                int v20 = v39;
                uint64_t v21 = (void **)__p[0];
                sub_2CA1C(v36, *(unsigned int *)(v16 + 20));
                __int128 v22 = __p;
                if (v20 < 0) {
                  __int128 v22 = v21;
                }
                uint64_t v23 = v36;
                if (v37 < 0) {
                  uint64_t v23 = (void **)v36[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                int v41 = "RoutingTypes.h";
                __int16 v42 = 1024;
                int v43 = 2202;
                __int16 v44 = 1024;
                *(_DWORD *)unint64_t v45 = v17;
                *(_WORD *)&v45[4] = 2080;
                *(void *)&v45[6] = v22;
                *(_WORD *)&v45[14] = 2080;
                *(void *)&v45[16] = v23;
                _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ----> AbstractRoute #%d contains Connection ('%s' / '%s')",  buf,  0x2Cu);
                if (v37 < 0) {
                  operator delete(v36[0]);
                }
                if (v39 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }

          ++v17;
          uint64_t v16 = *(void *)(v16 + 8);
        }

        while ((void *)v16 != v11 + 2);
      }

      ++v12;
      uint64_t v11 = (void *)v11[1];
      if (v11 == (void *)(v0 + 40)) {
        goto LABEL_51;
      }
    }

    uint64_t v27 = (os_log_t *)sub_138E8(20);
    os_log_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, *(unsigned int *)(v0 + 32));
      if (v39 >= 0) {
        char v29 = __p;
      }
      else {
        char v29 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v41 = "RoutingTypes.h";
      __int16 v42 = 1024;
      int v43 = 2196;
      __int16 v44 = 1024;
      *(_DWORD *)unint64_t v45 = v12;
      *(_WORD *)&v45[4] = 2080;
      *(void *)&v45[6] = v29;
      uint64_t v30 = "%25s:%-5d !!!!! AbstractRoute #%d of the PrioritizedRouteList for category '%s' is empty !!!!!";
      char v31 = v28;
      uint32_t v32 = 34;
LABEL_64:
      _os_log_impl(&dword_0, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_F2020( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F2044(uint64_t a1)
{
  return a1;
}

uint64_t sub_F207C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_F16A4(*(void **)(a1 + 80));
  sub_F16E4(*(void **)(a1 + 56));
  sub_F1724(v2);
  return a1;
}

void sub_F20B8(void *a1)
{
  if (a1)
  {
    sub_F20B8(*a1);
    sub_F20B8(a1[1]);
    sub_F22A0((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_F20F8()
{
  if (qword_48F0C0)
  {
    qword_48F0C8 = qword_48F0C0;
    operator delete((void *)qword_48F0C0);
  }

  sub_F222C((void *)qword_48F0B0);
}

uint64_t sub_F215C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + sub_7A768(v2 - 32) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_F21A4(uint64_t a1)
{
  return a1;
}

void sub_F21E4(void *a1)
{
  if (a1)
  {
    sub_F21E4(*a1);
    sub_F21E4(a1[1]);
    uint64_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }

    operator delete(a1);
  }

void sub_F222C(void *a1)
{
  if (a1)
  {
    sub_F222C(*a1);
    sub_F222C(a1[1]);
    sub_F226C((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_F226C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_F16A4(*(void **)(a1 + 80));
  sub_F16E4(*(void **)(a1 + 56));
  sub_F1724(v2);
}

void sub_F22A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      operator delete(v2);
    }
  }

uint64_t *sub_F22EC(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_48F0A8)
  {
    qword_48F0A8 = *(void *)qword_48F0A8;
    a3 = *a2;
  }

  uint64_t result = sub_7A420((uint64_t *)qword_48F0B0, a3);
  ++qword_48F0B8;
  return result;
}

void sub_F2348(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_F226C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

void sub_F238C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136)) {
    sub_F16A4(*(void **)(a1 + 120));
  }
  sub_32C8C(*(void **)(a1 + 96));
  if (*(_BYTE *)(a1 + 80)) {
    sub_32C8C(*(void **)(a1 + 64));
  }
  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }

void *sub_F23F0(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1LL;
    int v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x38uLL);
      __int128 v8 = *(_OWORD *)(v3 + 16);
      __int128 v9 = *(_OWORD *)(v3 + 32);
      v7[6] = *(void *)(v3 + 48);
      *((_OWORD *)v7 + 1) = v8;
      *((_OWORD *)v7 + 2) = v9;
      void *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }

    while (v3 != a2);
  }

  return a1;
}

void sub_F247C(_Unwind_Exception *a1)
{
}

uint64_t *sub_F2490(uint64_t *a1, void *a2)
{
  a1[1] = 0LL;
  uint64_t v3 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_82DF4(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }

        while (!v8);
      }

      uint64_t v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_F2524(_Unwind_Exception *a1)
{
}

uint64_t ***sub_F2538(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t ***)a1;
  a1[1] = 0LL;
  uint64_t v3 = (uint64_t **)(a1 + 1);
  a1[2] = 0LL;
  *a1 = a1 + 1;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    char v57 = (uint64_t **)(a1 + 1);
    unint64_t v55 = a2 + 1;
    do
    {
      int v6 = (uint64_t *)v2[1];
      uint64_t v7 = v3;
      if (*v2 == v3) {
        goto LABEL_9;
      }
      BOOL v8 = v2[1];
      __int128 v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          BOOL v8 = (uint64_t **)v8[1];
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          __int128 v9 = v7;
        }

        while (v10);
      }

      unsigned int v11 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v7 + 8) < v11)
      {
LABEL_9:
        if (v6) {
          int v12 = v7;
        }
        else {
          int v12 = v3;
        }
        if (v6) {
          uint64_t v13 = v7 + 1;
        }
        else {
          uint64_t v13 = v3;
        }
      }

      else
      {
        int v12 = v3;
        uint64_t v13 = v3;
        if (v6)
        {
          uint64_t v13 = v3;
          while (1)
          {
            while (1)
            {
              int v12 = (uint64_t **)v6;
              unsigned int v53 = *((_DWORD *)v6 + 8);
              if (v11 >= v53) {
                break;
              }
              int v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_16;
              }
            }

            if (v53 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            int v6 = v12[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }

      if (!*v13)
      {
LABEL_16:
        uint64_t v14 = (char *)operator new(0xB0uLL);
        uint64_t v58 = (uint64_t)v12;
        v60[0] = v14;
        v60[1] = v3;
        char v61 = 0;
        *((_DWORD *)v14 + 8) = *((_DWORD *)v5 + 8);
        *((void *)v14 + 5) = v5[5];
        sub_DA6C8((uint64_t)(v14 + 48), (uint64_t)(v5 + 6));
        __int128 v15 = *((_OWORD *)v5 + 5);
        __int128 v16 = *(_OWORD *)((char *)v5 + 93);
        *((void *)v14 + 15) = 0LL;
        int v17 = v14 + 120;
        uint64_t v59 = v14;
        *((void *)v14 + 14) = v14 + 120;
        uint64_t v18 = v14 + 112;
        *(_OWORD *)(v18 - 19) = v16;
        *((_OWORD *)v18 - 2) = v15;
        *((void *)v18 + 2) = 0LL;
        char v19 = (void *)v5[14];
        if (v19 != v5 + 15)
        {
          do
          {
            int v20 = (unsigned int *)v19 + 7;
            uint64_t v21 = *v17;
            __int128 v22 = v17;
            if (*(void **)v18 == v17) {
              goto LABEL_23;
            }
            uint64_t v23 = (void *)*v17;
            unsigned __int8 v24 = v17;
            if (v21)
            {
              do
              {
                __int128 v22 = v23;
                uint64_t v23 = (void *)v23[1];
              }

              while (v23);
            }

            else
            {
              do
              {
                __int128 v22 = (void *)v24[2];
                BOOL v10 = *v22 == (void)v24;
                unsigned __int8 v24 = v22;
              }

              while (v10);
            }

            unsigned int v25 = *v20;
            if (*((_DWORD *)v22 + 7) < *v20)
            {
LABEL_23:
              if (v21) {
                BOOL v26 = (uint64_t **)v22;
              }
              else {
                BOOL v26 = (uint64_t **)v17;
              }
              if (v21) {
                uint64_t v27 = (uint64_t **)(v22 + 1);
              }
              else {
                uint64_t v27 = (uint64_t **)v17;
              }
            }

            else
            {
              BOOL v26 = (uint64_t **)v17;
              uint64_t v27 = (uint64_t **)v17;
              if (v21)
              {
                uint32_t v32 = (uint64_t *)*v17;
                uint64_t v27 = (uint64_t **)v17;
                while (1)
                {
                  while (1)
                  {
                    BOOL v26 = (uint64_t **)v32;
                    unsigned int v33 = *((_DWORD *)v32 + 7);
                    if (v25 >= v33) {
                      break;
                    }
                    uint32_t v32 = *v26;
                    uint64_t v27 = v26;
                    if (!*v26) {
                      goto LABEL_30;
                    }
                  }

                  if (v33 >= v25) {
                    break;
                  }
                  uint64_t v27 = v26 + 1;
                  uint32_t v32 = v26[1];
                  if (!v32) {
                    goto LABEL_30;
                  }
                }
              }
            }

            if (!*v27)
            {
LABEL_30:
              os_log_t v28 = (char *)operator new(0x28uLL);
              uint64_t v29 = *(void *)v20;
              *((_DWORD *)v28 + 9) = *((_DWORD *)v19 + 9);
              *(void *)(v28 + 28) = v29;
              sub_32C38((uint64_t **)v18, (uint64_t)v26, v27, (uint64_t *)v28);
            }

            uint64_t v30 = (void *)v19[1];
            if (v30)
            {
              do
              {
                char v31 = v30;
                uint64_t v30 = (void *)*v30;
              }

              while (v30);
            }

            else
            {
              do
              {
                char v31 = (void *)v19[2];
                BOOL v10 = *v31 == (void)v19;
                char v19 = v31;
              }

              while (!v10);
            }

            char v19 = v31;
          }

          while (v31 != v5 + 15);
        }

        *((void *)v59 + 18) = 0LL;
        *((void *)v59 + 19) = 0LL;
        os_log_t v34 = (uint64_t **)(v59 + 144);
        *((void *)v59 + 17) = v59 + 144;
        uint64_t v35 = (void *)v5[17];
        if (v35 != v5 + 18)
        {
          do
          {
            uint64_t v36 = (unsigned int *)v35 + 7;
            char v37 = *v34;
            uint64_t v38 = v59 + 144;
            char v39 = *v34;
            uint64_t v40 = v59 + 144;
            if (v37)
            {
              do
              {
                uint64_t v38 = (char *)v39;
                char v39 = (uint64_t *)v39[1];
              }

              while (v39);
            }

            else
            {
              do
              {
                uint64_t v38 = (char *)*((void *)v40 + 2);
                BOOL v10 = *(void *)v38 == (void)v40;
                uint64_t v40 = v38;
              }

              while (v10);
            }

            unsigned int v41 = *v36;
            if (*((_DWORD *)v38 + 7) < *v36)
            {
LABEL_53:
              if (v37) {
                __int16 v42 = (uint64_t **)v38;
              }
              else {
                __int16 v42 = (uint64_t **)(v59 + 144);
              }
              if (v37) {
                int v43 = (uint64_t **)(v38 + 8);
              }
              else {
                int v43 = (uint64_t **)(v59 + 144);
              }
            }

            else
            {
              __int16 v42 = (uint64_t **)(v59 + 144);
              int v43 = (uint64_t **)(v59 + 144);
              if (v37)
              {
                uint64_t v48 = *v34;
                int v43 = (uint64_t **)(v59 + 144);
                while (1)
                {
                  while (1)
                  {
                    __int16 v42 = (uint64_t **)v48;
                    unsigned int v49 = *((_DWORD *)v48 + 7);
                    if (v41 >= v49) {
                      break;
                    }
                    uint64_t v48 = *v42;
                    int v43 = v42;
                    if (!*v42) {
                      goto LABEL_60;
                    }
                  }

                  if (v49 >= v41) {
                    break;
                  }
                  int v43 = v42 + 1;
                  uint64_t v48 = v42[1];
                  if (!v48) {
                    goto LABEL_60;
                  }
                }
              }
            }

            if (!*v43)
            {
LABEL_60:
              __int16 v44 = (char *)operator new(0x28uLL);
              uint64_t v45 = *(void *)v36;
              *((_DWORD *)v44 + 9) = *((_DWORD *)v35 + 9);
              *(void *)(v44 + 28) = v45;
              sub_32C38((uint64_t **)v59 + 17, (uint64_t)v42, v43, (uint64_t *)v44);
            }

            uint64_t v46 = (void *)v35[1];
            if (v46)
            {
              do
              {
                uint64_t v47 = v46;
                uint64_t v46 = (void *)*v46;
              }

              while (v46);
            }

            else
            {
              do
              {
                uint64_t v47 = (void *)v35[2];
                BOOL v10 = *v47 == (void)v35;
                uint64_t v35 = v47;
              }

              while (!v10);
            }

            uint64_t v35 = v47;
          }

          while (v47 != v5 + 18);
        }

        uint64_t v50 = v5[20];
        v59[168] = *((_BYTE *)v5 + 168);
        *((void *)v59 + 20) = v50;
        char v61 = 1;
        uint64_t v2 = (uint64_t ***)a1;
        sub_32C38((uint64_t **)a1, v58, v13, (uint64_t *)v59);
        v60[0] = 0LL;
        sub_F2A20((uint64_t)v60);
        uint64_t v3 = v57;
        uint64_t v4 = v55;
      }

      char v51 = (void *)v5[1];
      if (v51)
      {
        do
        {
          uint64_t v52 = v51;
          char v51 = (void *)*v51;
        }

        while (v51);
      }

      else
      {
        do
        {
          uint64_t v52 = (void *)v5[2];
          BOOL v10 = *v52 == (void)v5;
          uint64_t v5 = v52;
        }

        while (!v10);
      }

      uint64_t v5 = v52;
    }

    while (v52 != v4);
  }

  return v2;
}

void sub_F29B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_F2A20(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_F22A0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

void **sub_F2A64(void **a1)
{
  return a1;
}

void sub_F2A9C(void *a1)
{
  if (a1)
  {
    sub_F2A9C(*a1);
    sub_F2A9C(a1[1]);
    sub_F2AEC((void *)a1[13]);
    uint64_t v2 = (void *)a1[9];
    a1[9] = 0LL;
    if (v2) {
      free(v2);
    }
    operator delete(a1);
  }

void sub_F2AEC(void *a1)
{
  if (a1)
  {
    sub_F2AEC(*a1);
    sub_F2AEC(a1[1]);
    sub_F2B2C((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_F2B2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

void sub_F2B78(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 40;
        sub_2DBF5C((uint64_t)(v4 - 24));
        uint64_t v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_F2BEC(unint64_t a1)
{
  if (a1 >= 0x666666666666667LL) {
    sub_7A8C4();
  }
  return operator new(40 * a1);
}

uint64_t *sub_F2C30(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = *(void *)(v4 + v7 - 40);
      *(_DWORD *)(v8 - sub_7A768(v2 - 32) = *(_DWORD *)(v4 + v7 - 32);
      *(void *)(v8 - 40) = v9;
      uint64_t result = (uint64_t *)sub_2DC450(v6 + v7 - 24, v4 + v7 - 24);
      *(_WORD *)(v8 - 8) = *(_WORD *)(v4 + v7 - 8);
      v7 -= 40LL;
    }

    while (v4 + v7 != v5);
    v6 += v7;
  }

  a2[1] = v6;
  uint64_t v10 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_F2D1C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    sub_2DBF5C(i - 24);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_F2D6C(void *a1)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &off_471AC0;
  v2[1] = 0LL;
  *((_DWORD *)v2 + 2) = 1952608868;
  *((_BYTE *)v2 + 12) = 1;
  uint64_t v3 = operator new(0x18uLL);
  v3[1] = a1;
  v3[2] = v2;
  void *v3 = a1;
  *a1 = v3;
  a1[1] = v3;
  a1[2] = 1LL;
  uint64_t v4 = operator new(0x10uLL);
  *uint64_t v4 = &off_471188;
  v4[1] = 0LL;
  *((_DWORD *)v4 + 2) = 1953524833;
  uint64_t v5 = operator new(0x18uLL);
  v5[1] = a1;
  v5[2] = v4;
  void *v5 = v3;
  v3[1] = v5;
  *a1 = v5;
  a1[2] = 2LL;
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = &off_476430;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 2) = 1953654115;
  uint64_t v7 = operator new(0x18uLL);
  v7[1] = a1;
  double v7[2] = v6;
  void *v7 = v5;
  v5[1] = v7;
  *a1 = v7;
  a1[2] = 3LL;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = &off_4763D0;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 2) = 1953524850;
  uint64_t result = operator new(0x18uLL);
  result[1] = a1;
  result[2] = v8;
  *uint64_t result = v7;
  v7[1] = result;
  *a1 = result;
  a1[2] = 4LL;
  return result;
}

void sub_F2EBC(_Unwind_Exception *a1)
{
}

uint64_t sub_F2F1C(uint64_t a1, __int128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    __int128 v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }

  else
  {
    __int128 v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

uint64_t sub_F2F9C()
{
  return 0LL;
}

uint64_t sub_F2FA4()
{
  return 0LL;
}

uint64_t sub_F2FAC(uint64_t a1)
{
  return 0LL;
}

void sub_F2FD4(void *a1)
{
}

uint64_t sub_F3008(uint64_t a1)
{
  *(void *)a1 = off_46FA78;
  sub_339C0();
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_49CF68 + 16))(&qword_49CF68);
  uint64_t v14 = &v14;
  __int128 v15 = &v14;
  uint64_t v16 = 0LL;
  uint64_t v3 = (uint64_t *)qword_49CF58;
  if ((uint64_t *)qword_49CF58 != &qword_49CF50)
  {
    uint64_t v4 = 0LL;
    __int128 v5 = &v14;
    do
    {
      uint64_t v6 = v3[2];
      if (*(void *)(v6 + 16) == a1)
      {
        uint64_t v7 = operator new(0x18uLL);
        v7[1] = &v14;
        double v7[2] = v6;
        void *v7 = v5;
        v5[1] = v7;
        ++v4;
        __int128 v5 = v7;
        uint64_t v14 = v7;
        uint64_t v16 = v4;
      }

      uint64_t v3 = (uint64_t *)v3[1];
    }

    while (v3 != &qword_49CF50);
    for (uint64_t i = v15; i != &v14; uint64_t i = (void *)i[1])
      sub_2EB784(i[2]);
  }

  sub_68314(&v14);
  if (v2) {
    (*(void (**)(uint64_t *))(qword_49CF68 + 24))(&qword_49CF68);
  }
  uint64_t v9 = *(void **)(a1 + 56);
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)*v9;
      uint64_t v11 = (std::__shared_weak_count *)v9[5];
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      operator delete(v9);
      uint64_t v9 = v10;
    }

    while (v10);
  }

  uint64_t v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v12) {
    operator delete(v12);
  }
  return a1;
}

void sub_F316C(void *a1)
{
}

uint64_t sub_F31A4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v35 = 0LL;
  sub_339C0();
  int v11 = (*(uint64_t (**)(uint64_t *))(qword_49CF68 + 16))(&qword_49CF68);
  sub_2EB4B0((uint64_t *)buf, a1, a2, a3, a4);
  uint64_t v12 = *(void *)buf;
  if (*(void *)buf)
  {
    uint64_t v35 = **(void **)buf;
    int v5 = *(_DWORD *)(*(void *)buf + 8LL) + 1;
    *(_DWORD *)(*(void *)buf + 8LL) = v5;
  }

  uint64_t v13 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_7;
  }
  uint64_t v14 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v12)
    {
LABEL_8:
      if (!v11) {
        goto LABEL_16;
      }
LABEL_15:
      (*(void (**)(uint64_t *))(qword_49CF68 + 24))(&qword_49CF68);
      goto LABEL_16;
    }
  }

  else
  {
LABEL_7:
    if (v12) {
      goto LABEL_8;
    }
  }

  uint64_t v16 = qword_49CFC0;
  uint64_t v35 = qword_49CFC0;
  if (__CFADD__(qword_49CFC0++, 1LL)) {
    qword_49CFC0 = 1LL;
  }
  uint64_t v18 = operator new(0x40uLL);
  *(void *)uint64_t v18 = v16;
  void v18[2] = 1;
  uint64_t v19 = *(void *)a2;
  *((void *)v18 + 2) = a1;
  *((void *)v18 + 3) = v19;
  v18[8] = a2[2];
  *((void *)v18 + 5) = a3;
  *((void *)v18 + 6) = a4;
  _BYTE v18[14] = a5;
  *((_BYTE *)v18 + 60) = 0;
  *(void *)AudioObjectPropertyAddress buf = v18;
  int v20 = operator new(0x20uLL);
  *int v20 = &off_47C6A0;
  v20[1] = 0LL;
  v20[2] = 0LL;
  uint64_t v20[3] = v18;
  *(void *)&buf[8] = v20;
  uint64_t v21 = operator new(0x20uLL);
  v21[2] = v18;
  uint64_t v21[3] = v20;
  uint64_t v22 = qword_49CF50;
  *uint64_t v21 = qword_49CF50;
  v21[1] = &qword_49CF50;
  *(void *)(v22 + 8) = v21;
  qword_49CF50 = (uint64_t)v21;
  ++qword_49CF60;
  int v5 = 1;
  if (v11) {
    goto LABEL_15;
  }
LABEL_16:
  if (v35)
  {
    if (v5 == 1
      && ((*(uint64_t (**)(uint64_t, _DWORD *, uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t)))(*(void *)a1 + 64LL))( a1,  a2,  sub_336C8) & 1) == 0)
    {
      uint64_t v27 = (os_log_t *)sub_138E8(14);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = *(void *)a2;
        int v32 = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)&v31);
        if (v34 >= 0) {
          uint64_t v29 = __p;
        }
        else {
          uint64_t v29 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Object.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 94;
        __int16 v37 = 2080;
        uint64_t v38 = v29;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error registering relayed listener for property %s",  buf,  0x1Cu);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_339C0();
      sub_2EB5F0(a1, a2, a3, a4, &v35);
      return 2003329396LL;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t v23 = 2003329396LL;
    unsigned __int8 v24 = (os_log_t *)sub_138E8(14);
    unsigned int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)a2;
      int v32 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v31);
      BOOL v26 = v34 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Object.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 83;
      __int16 v37 = 2080;
      uint64_t v38 = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error adding ListenerRelay for property %s",  buf,  0x1Cu);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return v23;
}

void sub_F3564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_F35C8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = 0LL;
  sub_339C0();
  uint64_t v8 = sub_2EB5F0(a1, a2, a3, a4, &v18);
  if ((v8 & 0xFF00000000LL) != 0)
  {
    if ((_DWORD)v8
      || (*(unsigned int (**)(uint64_t, _DWORD *, void, uint64_t))(*(void *)a1 + 72LL))( a1,  a2,  sub_336C8,  v18))
    {
      return 0LL;
    }

    else
    {
      return 2003329396LL;
    }
  }

  else
  {
    uint64_t v9 = 2003329396LL;
    uint64_t v10 = (os_log_t *)sub_138E8(14);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)a2;
      int v15 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v14);
      uint64_t v12 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v20 = "Object.cpp";
      __int16 v21 = 1024;
      int v22 = 118;
      __int16 v23 = 2080;
      unsigned __int8 v24 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Could not find listener relay for property %s, or its ref count was already zero.",  buf,  0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return v9;
}

void sub_F3758(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t *)(a2 + 40);
  int8x8_t v10 = *(int8x8_t *)(a2 + 48);
  if (!*(void *)&v10) {
    goto LABEL_19;
  }
  int v11 = *a3;
  int v12 = a3[1];
  int v13 = a3[2];
  unint64_t v14 = v12 ^ *a3 ^ v13;
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v10);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = v12 ^ v11 ^ v13;
    if (*(void *)&v10 <= v14) {
      unint64_t v16 = v14 % *(void *)&v10;
    }
  }

  else
  {
    unint64_t v16 = (v10.i32[0] - 1) & v14;
  }

  char v17 = *(uint64_t ***)(*v9 + 8 * v16);
  if (!v17 || (uint64_t v18 = *v17) == 0LL)
  {
LABEL_19:
    int v20 = operator new(0x58uLL);
    v20[1] = 0LL;
    v20[2] = 0LL;
    *int v20 = off_46FAD8;
    sub_82AF0((uint64_t)v39, a4);
    sub_82AF0((uint64_t)v37, a5);
    sub_F3F10((uint64_t)(v20 + 3), (uint64_t)v39);
    sub_F3F10((uint64_t)(v20 + 7), (uint64_t)v37);
    uint64_t v21 = v20[6];
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 48LL))(v21);
    }
    int v22 = v38;
    if (v38 == v37)
    {
      uint64_t v23 = 4LL;
      int v22 = v37;
    }

    else
    {
      if (!v38) {
        goto LABEL_26;
      }
      uint64_t v23 = 5LL;
    }

    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_26:
    unsigned __int8 v24 = v40;
    if (v40 == v39)
    {
      uint64_t v25 = 4LL;
      unsigned __int8 v24 = v39;
    }

    else
    {
      if (!v40)
      {
LABEL_31:
        *a1 = (uint64_t)(v20 + 3);
        a1[1] = (uint64_t)v20;
        BOOL v26 = sub_F3AEC(v9, a3, (uint64_t)a3);
        uint64_t v28 = *a1;
        uint64_t v27 = a1[1];
        if (v27)
        {
          uint64_t v29 = (unint64_t *)(v27 + 16);
          do
            unint64_t v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }

        uint64_t v31 = (std::__shared_weak_count *)v26[5];
        v26[4] = v28;
        v26[5] = v27;
        if (v31) {
          std::__shared_weak_count::__release_weak(v31);
        }
        return;
      }

      uint64_t v25 = 5LL;
    }

    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_31;
  }

  while (1)
  {
    unint64_t v19 = v18[1];
    if (v19 == v14) {
      break;
    }
    if (v15.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v10) {
        v19 %= *(void *)&v10;
      }
    }

    else
    {
      v19 &= *(void *)&v10 - 1LL;
    }

    if (v19 != v16) {
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v18 = (uint64_t *)*v18;
    if (!v18) {
      goto LABEL_19;
    }
  }

  if (*((_DWORD *)v18 + 5) != v12 || *((_DWORD *)v18 + 4) != v11 || *((_DWORD *)v18 + 6) != v13) {
    goto LABEL_18;
  }
  int v32 = sub_F3AEC((uint64_t *)(a2 + 40), a3, (uint64_t)a3);
  unsigned int v33 = v32;
  *a1 = 0LL;
  a1[1] = 0LL;
  char v34 = (std::__shared_weak_count *)v32[5];
  if (!v34
    || ((uint64_t v35 = std::__shared_weak_count::lock(v34), (a1[1] = (uint64_t)v35) == 0)
      ? (uint64_t v36 = *a1)
      : (uint64_t v36 = v33[4], *a1 = v36),
        !v36))
  {
    sub_7A768((uint64_t)a1);
    goto LABEL_19;
  }

void sub_F39F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  shared_owners = (void *)v17[3].__shared_owners_;
  if (shared_owners == v19)
  {
    uint64_t v22 = 4LL;
  }

  else
  {
    if (!shared_owners) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
    unint64_t v19 = (void *)v17[3].__shared_owners_;
  }

  (*(void (**)(void *))(*v19 + 8 * v22))(v19);
LABEL_6:
  uint64_t v23 = v17[2].__vftable;
  if (v23 == v18)
  {
    uint64_t v24 = 4LL;
  }

  else
  {
    if (!v23) {
      goto LABEL_11;
    }
    uint64_t v24 = 5LL;
    uint64_t v18 = v17[2].__vftable;
  }

  (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + v24))(v18);
LABEL_11:
  uint64_t v25 = a13;
  if (a13 == &a10)
  {
    uint64_t v26 = 4LL;
    uint64_t v25 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_16;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*(void *)v25 + 8 * v26))();
LABEL_16:
  uint64_t v27 = a17;
  if (a17 == &a14)
  {
    uint64_t v28 = 4LL;
    uint64_t v27 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_21;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*(void *)v27 + 8 * v28))();
LABEL_21:
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void *sub_F3AEC(uint64_t *a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  int v7 = a2[1];
  unsigned int v8 = a2[2];
  unint64_t v9 = v7 ^ *a2 ^ v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v7 ^ v6 ^ v8;
      if (v10 <= v9) {
        unint64_t v3 = v9 % v10;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v10 - 1) & v9;
    }

    int v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 6) == v8) {
              return v13;
            }
          }

          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }

            else
            {
              v14 &= v10 - 1;
            }

            if (v14 != v3) {
              break;
            }
          }

          int v13 = (void *)*v13;
        }

        while (v13);
      }
    }
  }

  uint8x8_t v15 = a1 + 2;
  int v13 = operator new(0x30uLL);
  *int v13 = 0LL;
  v13[1] = v9;
  v13[2] = *(void *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  void v13[4] = 0LL;
  v13[5] = 0LL;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (v10 && (float)(v17 * (float)v10) >= v16)
  {
    unint64_t v9 = v3;
    goto LABEL_66;
  }

  BOOL v18 = 1LL;
  if (v10 >= 3) {
    BOOL v18 = (v10 & (v10 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v10);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    int8x8_t prime = (int8x8_t)v20;
  }
  else {
    int8x8_t prime = (int8x8_t)v19;
  }
  if (*(void *)&prime == 1LL)
  {
    int8x8_t prime = (int8x8_t)2LL;
  }

  else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v10 = a1[1];
  }

  if (*(void *)&prime <= v10)
  {
    if (*(void *)&prime >= v10) {
      goto LABEL_62;
    }
    unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      unint64_t v28 = std::__next_prime(v28);
    }

    else
    {
      uint64_t v30 = 1LL << -(char)__clz(v28 - 1);
      if (v28 >= 2) {
        unint64_t v28 = v30;
      }
    }

    if (*(void *)&prime <= v28) {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime >= v10)
    {
      unint64_t v10 = a1[1];
      goto LABEL_62;
    }

    if (!*(void *)&prime)
    {
      __int16 v37 = (void *)*a1;
      *a1 = 0LL;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v10 = 0LL;
      a1[1] = 0LL;
      goto LABEL_62;
    }
  }

  if (*(void *)&prime >> 61) {
    sub_7A8C4();
  }
  uint64_t v22 = operator new(8LL * *(void *)&prime);
  uint64_t v23 = (void *)*a1;
  *a1 = (uint64_t)v22;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = 0LL;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v24++) = 0LL;
  while (*(void *)&prime != v24);
  uint64_t v25 = (void *)*v15;
  if (*v15)
  {
    unint64_t v26 = v25[1];
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(void *)&prime) {
        v26 %= *(void *)&prime;
      }
    }

    else
    {
      v26 &= *(void *)&prime - 1LL;
    }

    *(void *)(*a1 + 8 * v26) = v15;
    uint64_t v31 = (void *)*v25;
    if (*v25)
    {
      do
      {
        unint64_t v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(void *)&prime) {
            v32 %= *(void *)&prime;
          }
        }

        else
        {
          v32 &= *(void *)&prime - 1LL;
        }

        if (v32 != v26)
        {
          if (!*(void *)(*a1 + 8 * v32))
          {
            *(void *)(*a1 + 8 * vsub_7A768(v2 - 32) = v25;
            goto LABEL_58;
          }

          void *v25 = *v31;
          *uint64_t v31 = **(void **)(*a1 + 8 * v32);
          **(void **)(*a1 + 8 * vsub_7A768(v2 - 32) = v31;
          uint64_t v31 = v25;
        }

        unint64_t v32 = v26;
LABEL_58:
        uint64_t v25 = v31;
        uint64_t v31 = (void *)*v31;
        unint64_t v26 = v32;
      }

      while (v31);
    }
  }

  unint64_t v10 = (unint64_t)prime;
LABEL_62:
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v10 <= v9) {
      v9 %= v10;
    }
  }

  else
  {
    unint64_t v9 = ((_DWORD)v10 - 1) & v9;
  }

LABEL_75:
  ++a1[3];
  return v13;
}

  ++*(void *)(a1 + 48);
LABEL_76:
  __int16 v37 = (uint64_t *)(a1 + 64);
  AudioObjectID os_unfair_lock_opaque = a2[36]._os_unfair_lock_opaque;
  char v39 = *(void *)(a1 + 72);
  if (v39)
  {
    uint64_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      unint64_t v10 = a2[36]._os_unfair_lock_opaque;
      if (v39 <= os_unfair_lock_opaque) {
        unint64_t v10 = os_unfair_lock_opaque % v39;
      }
    }

    else
    {
      unint64_t v10 = ((_DWORD)v39 - 1) & os_unfair_lock_opaque;
    }

    unsigned int v41 = *(void ***)(*v37 + 8 * v10);
    if (v41)
    {
      __int16 v42 = *v41;
      if (*v41)
      {
        do
        {
          int v43 = v42[1];
          if (v43 == os_unfair_lock_opaque)
          {
            if (*((_DWORD *)v42 + 4) == (_DWORD)os_unfair_lock_opaque) {
              goto LABEL_115;
            }
          }

          else
          {
            if (v40.u32[0] > 1uLL)
            {
              if (v43 >= v39) {
                v43 %= v39;
              }
            }

            else
            {
              v43 &= v39 - 1;
            }

            if (v43 != v10) {
              break;
            }
          }

          __int16 v42 = (void *)*v42;
        }

        while (v42);
      }
    }
  }

  __int16 v44 = (void *)(a1 + 80);
  __int16 v42 = operator new(0x30uLL);
  *(void *)AudioObjectPropertyAddress buf = v42;
  *(void *)&buf[8] = a1 + 80;
  os_log_s *v42 = 0LL;
  v42[1] = os_unfair_lock_opaque;
  *((_DWORD *)v42 + 4) = os_unfair_lock_opaque;
  v42[3] = v42 + 3;
  v42[4] = v42 + 3;
  v42[5] = 0LL;
  _DWORD buf[16] = 1;
  uint64_t v45 = (float)(unint64_t)(*(void *)(a1 + 88) + 1LL);
  uint64_t v46 = *(float *)(a1 + 96);
  if (!v39 || (float)(v46 * (float)v39) < v45)
  {
    uint64_t v47 = 1LL;
    if (v39 >= 3) {
      uint64_t v47 = (v39 & (v39 - 1)) != 0;
    }
    uint64_t v48 = v47 | (2 * v39);
    unsigned int v49 = vcvtps_u32_f32(v45 / v46);
    if (v48 <= v49) {
      uint64_t v50 = v49;
    }
    else {
      uint64_t v50 = v48;
    }
    sub_52168(a1 + 64, v50);
    char v39 = *(void *)(a1 + 72);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v39 <= os_unfair_lock_opaque) {
        unint64_t v10 = os_unfair_lock_opaque % v39;
      }
      else {
        unint64_t v10 = os_unfair_lock_opaque;
      }
    }

    else
    {
      unint64_t v10 = ((_DWORD)v39 - 1) & os_unfair_lock_opaque;
    }
  }

  char v51 = *v37;
  uint64_t v52 = *(void **)(*v37 + 8 * v10);
  if (v52)
  {
    os_log_s *v42 = *v52;
LABEL_113:
    void *v52 = v42;
    goto LABEL_114;
  }

  os_log_s *v42 = *v44;
  *__int16 v44 = v42;
  *(void *)(v51 + 8 * v10) = v44;
  if (*v42)
  {
    unsigned int v53 = *(void *)(*v42 + 8LL);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v53 >= v39) {
        v53 %= v39;
      }
    }

    else
    {
      v53 &= v39 - 1;
    }

    uint64_t v52 = (void *)(*v37 + 8 * v53);
    goto LABEL_113;
  }

  uint64_t v62 = *a2;
  if (*a2 < v10) {
    uint64_t v62 = v10;
  }
  unsigned int v53 = v62;
  if (v11 >= a2[1]) {
    std::string v63 = a2[1];
  }
  else {
    std::string v63 = v11;
  }
  uint64_t v54 = v63;
  *(float *)(a1 + 2sub_7A768(v2 - 32) = v53;
  *(float *)(a1 + 236) = v54;
LABEL_81:
  *(_DWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  __asm { FMOV            V0.2S, #1.0 }

  *(void *)(a1 + sub_7A768(v35 - 192) = _D0;
  if (*(void *)(a1 + 176)) {
    uint64_t v68 = *(_DWORD *)(*(void *)(a1 + 160) + 28LL);
  }
  else {
    uint64_t v68 = 0;
  }
  uint64_t v69 = sub_64578(a1 + 152);
  sub_32C8C(*(void **)(a1 + 168));
  *(void *)(a1 + sub_19DFC(v35 - 176) = 0LL;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 168) = 0LL;
  *(float *)&uint64_t v70 = v53;
  sub_886F8(a1 + 152, v68, v69, v70, v54);
  uint64_t v71 = *(float *)(a1 + 200);
  os_log_t v72 = *(void *)(a1 + 176);
  if (v72)
  {
    else {
      uint64_t v73 = *(float *)(a1 + 200);
    }
  }

  else if (v71 < 0.0)
  {
    uint64_t v73 = 0.0;
  }

  else
  {
    uint64_t v73 = *(float *)(a1 + 200);
  }

  *(float *)(a1 + 200) = v73;
  char v75 = sub_6461C(a1 + 152);
  if (v73 <= v75) {
    char v75 = v73;
  }
  *(float *)(a1 + 200) = v75;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a2;
}

  *(_OWORD *)AudioObjectPropertyAddress buf = v62[0];
  *(_OWORD *)&_DWORD buf[16] = v62[1];
  *(void *)&_BYTE buf[32] = v63;
  if (DWORD2(v62[0]) == 1819304813 && (buf[12] & 0x40) == 0)
  {
    *(_DWORD *)&_BYTE buf[12] = 9;
    *(_DWORD *)&_DWORD buf[16] = 4 * *(_DWORD *)&buf[28];
    *(_DWORD *)&uint8_t buf[20] = 1;
    *(_DWORD *)&_BYTE buf[24] = 4 * *(_DWORD *)&buf[28];
    *(_DWORD *)&_BYTE buf[32] = 32;
  }

  unsigned int v49 = sub_138E8(22);
  if ((*(_BYTE *)(v49 + 8) & 1) != 0)
  {
    uint64_t v50 = *(os_log_s **)v49;
    if (*(void *)v49)
    {
      if (os_log_type_enabled(*(os_log_t *)v49, OS_LOG_TYPE_DEBUG))
      {
        sub_2CC00(&v61, (uint64_t)a2);
        std::string::size_type size = (char)v61.__r_.__value_.__s.__size_;
        uint64_t v52 = v61.__r_.__value_.__r.__words[0];
        sub_2CC00(&v60, (uint64_t)buf);
        unsigned int v53 = &v61;
        if (size < 0) {
          unsigned int v53 = (std::string *)v52;
        }
        if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v54 = &v60;
        }
        else {
          uint64_t v54 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "VirtualStream.cpp";
        uint64_t v65 = 1024;
        __int16 v66 = 882;
        uint64_t v67 = 2080;
        uint64_t v68 = v53;
        uint64_t v69 = 2080;
        uint64_t v70 = v54;
        _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d HAL IOProc format for client format %s is %s",  __p,  0x26u);
      }
    }
  }

  unint64_t v26 = sub_27E4C0(a1, (uint64_t)buf, a2);
  if ((_DWORD)v26)
  {
    unint64_t v55 = (os_log_t *)sub_138E8(22);
    uint64_t v56 = *v55;
    if (*v55)
    {
      if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v61, v26);
        char v57 = (v61.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v61 : (std::string *)v61.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "VirtualStream.cpp";
        uint64_t v65 = 1024;
        __int16 v66 = 888;
        uint64_t v67 = 2080;
        uint64_t v68 = v57;
        _os_log_impl(&dword_0, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' configuring the DSP chain", __p, 0x1Cu);
        if ((char)v61.__r_.__value_.__s.__size_ < 0)
        {
          uint64_t v48 = (void *)v61.__r_.__value_.__r.__words[0];
          goto LABEL_73;
        }
      }
    }
  }

  return v26;
}

  sub_68314(v109);
  sub_2811E8((uint64_t *)buf, v10, v9, (uint64_t)a6, (uint64_t)a7);
  if (*(void *)&buf[16])
  {
    if (*(void *)&buf[16] == 1LL) {
      uint64_t v59 = *(uint64_t **)(*(void *)(*(void *)&buf[8] + 16LL) + 56LL);
    }
    else {
      uint64_t v59 = &qword_4A9200;
    }
    sub_280F54((uint64_t)v117, (uint64_t)v59, *((void *)a7 + 5), *a7, a2);
  }

  else
  {
    v117[16] = 0;
    BYTE4(v119) = 0;
    LOBYTE(v120) = 0;
    BYTE2(v121) = 0;
    BYTE6(v121) = 0;
    LOBYTE(v123) = 0;
    BYTE4(v123) = 0;
    *(void *)uint64_t v117 = 0LL;
    v117[8] = 0;
  }

  sub_68314(buf);
  uint64_t v60 = operator new(0x2E0uLL);
  char v61 = (uint64_t)v60;
  uint64_t v62 = v102;
  std::string v63 = (void *)(v15 + 24LL * v9);
  *(void *)AudioObjectPropertyAddress buf = v101;
  *(void *)&buf[8] = v102;
  if (v102)
  {
    uint64_t v64 = (unint64_t *)&v102->__shared_weak_owners_;
    do
      uint64_t v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }

  __int16 v66 = *a6;
  uint64_t v67 = v100;
  sub_2805B4((uint64_t)v60, buf, v97, v66, v63, &v99, v100, (uint64_t)v117);
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
  kdebug_trace(553912326LL, v16, 0LL, 0LL, 0LL);
  sub_27A3CC(v61);
  uint64_t v68 = (os_log_t *)sub_138E8(22);
  uint64_t v69 = *v68;
  if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v70 = buf;
    sub_33464((std::string *)buf, a7);
    if (buf[23] < 0) {
      uint64_t v70 = *(_BYTE **)buf;
    }
    sub_2CA1C(&v113, *(unsigned int *)(v97 + 276));
    if (v115 >= 0) {
      uint64_t v71 = &v113;
    }
    else {
      uint64_t v71 = v113;
    }
    sub_2CA1C(v109, *(unsigned int *)(v97 + 280));
    if (v110 >= 0) {
      os_log_t v72 = v109;
    }
    else {
      os_log_t v72 = (void **)v109[0];
    }
    uint64_t v73 = v63[2];
    if (v73)
    {
      sub_B8F68(&v111, (uint64_t *)(v63[1] + 16LL), "", 360);
      sub_2CA1C(&__p, *(unsigned int *)(v111 + 144));
      if (v106 >= 0) {
        uint64_t p_p = (const char *)&__p;
      }
      else {
        uint64_t p_p = (const char *)__p;
      }
      if (v67)
      {
LABEL_101:
        char v75 = (const char *)(v67 + 24);
        goto LABEL_105;
      }
    }

    else
    {
      uint64_t p_p = "unknown";
      if (v67) {
        goto LABEL_101;
      }
    }

    char v75 = "none";
LABEL_105:
    *(_DWORD *)uint64_t v117 = 136316674;
    *(void *)&v117[4] = "StreamUtilities.cpp";
    *(_WORD *)&v117[12] = 1024;
    *(_DWORD *)&v117[14] = 360;
    uint64_t v118 = 2080;
    uint64_t v119 = v70;
    uint64_t v120 = 2080;
    uint64_t v121 = v71;
    uint64_t v122 = 2080;
    char v123 = v72;
    int v124 = 2080;
    uint64_t v125 = p_p;
    uint64_t v126 = 2080;
    uint64_t v127 = v75;
    _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Created virtual stream for %s (%s/%s) port %s with DSP chain '%s'",  v117,  0x44u);
    if (v73)
    {
      if (SHIBYTE(v106) < 0) {
        operator delete(__p);
      }
      uint64_t v76 = v112;
      if (v112)
      {
        uint64_t v77 = (unint64_t *)&v112->__shared_owners_;
        do
          uint64_t v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }

    if (SHIBYTE(v110) < 0) {
      operator delete(v109[0]);
    }
    if (SHIBYTE(v115) < 0) {
      operator delete(v113);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  char v79 = (std::__shared_weak_count *)*((void *)&v99 + 1);
  if (*((void *)&v99 + 1))
  {
    uint64_t v80 = (unint64_t *)(*((void *)&v99 + 1) + 8LL);
    do
      int v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

  uint64_t v82 = v102;
  if (v102)
  {
    uint64_t v83 = (unint64_t *)&v102->__shared_owners_;
    do
      __int128 v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }

  return v61;
}

                  sub_32C38(v27, (uint64_t)v48, v49, v45);
                  uint64_t v50 = (void *)v28[1];
                  if (v50)
                  {
                    do
                    {
                      char v51 = v50;
                      uint64_t v50 = (void *)*v50;
                    }

                    while (v50);
                  }

                  else
                  {
                    do
                    {
                      char v51 = (void *)v28[2];
                      char v57 = *v51 == (void)v28;
                      unint64_t v28 = v51;
                    }

                    while (!v57);
                  }

                  unint64_t v28 = v51;
                }

                while (v51 != v29);
              }

              goto LABEL_81;
            }
          }

          uint64_t v56 = v10;
LABEL_101:
          sub_2D5714((uint64_t)buf);
          unint64_t v10 = v56;
          int v7 = (uint64_t)a1;
          unsigned int v8 = v72;
        }

        if (v10 != v78)
        {
          uint64_t v58 = (uint64_t **)(v8 + 104);
          do
          {
            uint64_t v59 = operator new(0x70uLL);
            *(void *)AudioObjectPropertyAddress buf = v59;
            *(void *)&buf[8] = v58;
            _DWORD buf[16] = 0;
            *((_DWORD *)v59 + 8) = *((_DWORD *)v10 + 8);
            *((void *)v59 + 5) = 0LL;
            *((void *)v59 + 6) = 0LL;
            *((void *)v59 + 7) = 0LL;
            sub_7A5B8((void *)v59 + 5, (const void *)v10[5], v10[6], (uint64_t)(v10[6] - v10[5]) >> 2);
            *((void *)v59 + 8) = 0LL;
            *((void *)v59 + 9) = 0LL;
            *((void *)v59 + 10) = 0LL;
            sub_2493B0((void *)v59 + 8, (const void *)v10[8], v10[9], (uint64_t)(v10[9] - v10[8]) >> 3);
            sub_249428((uint64_t *)v59 + 11, v10 + 11);
            _DWORD buf[16] = 1;
            uint64_t v60 = *v58;
            char v61 = v58;
            uint64_t v62 = v58;
            if (*v58)
            {
              do
              {
                while (1)
                {
                  char v61 = (uint64_t **)v60;
                  if (*((_DWORD *)v59 + 8) >= *((_DWORD *)v60 + 8)) {
                    break;
                  }
                  uint64_t v60 = (uint64_t *)*v60;
                  uint64_t v62 = v61;
                  if (!*v61) {
                    goto LABEL_110;
                  }
                }

                uint64_t v60 = (uint64_t *)v60[1];
              }

              while (v60);
              uint64_t v62 = v61 + 1;
            }

void sub_F3EF8(_Unwind_Exception *a1)
{
}

uint64_t sub_F3F10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

void sub_F3F74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_46FAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_F3F84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_46FAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void *sub_F3FA4(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
    unint64_t v3 = (void *)a1[10];
    if (v3 == a1 + 7)
    {
      uint64_t v4 = 4LL;
      unint64_t v3 = a1 + 7;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
  }

void sub_F4044(char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_F4094()
{
  return 0LL;
}

uint64_t sub_F409C(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unsigned int v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v16);
      unint64_t v10 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v21 = "Port.cpp";
      __int16 v22 = 1024;
      int v23 = 252;
      __int16 v24 = 2080;
      uint64_t v25 = v10;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0))
  {
    int v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v16);
      if (v19 >= 0) {
        unint64_t v14 = __p;
      }
      else {
        unint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v21 = "Port.cpp";
      __int16 v22 = 1024;
      int v23 = 253;
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 1024;
      int v27 = a3;
      __int16 v28 = 2048;
      uint64_t v29 = a4;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    uint8x8_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint8x8_t v15 = &off_4865A0;
    void v15[2] = 561211770;
  }

  return 0LL;
}

uint64_t sub_F4320(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if ((result & 1) == 0)
  {
    uint8x8_t v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a2;
      int v24 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v23);
      int v13 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v28 = "Port.cpp";
      __int16 v29 = 1024;
      int v30 = 260;
      __int16 v31 = 2080;
      unint64_t v32 = (const char *)v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0))
  {
    uint8x8_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a2;
      int v24 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v23);
      int v17 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v28 = "Port.cpp";
      __int16 v29 = 1024;
      int v30 = 261;
      __int16 v31 = 2080;
      unint64_t v32 = (const char *)v17;
      __int16 v33 = 1024;
      LODWORD(v34[0]) = a3;
      WORD2(v34[0]) = 2048;
      *(void *)((char *)v34 + 6) = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    BOOL v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v18 = &off_4865A0;
    void v18[2] = 561211770;
  }

  if (!a6)
  {
    char v19 = (os_log_t *)sub_138E8(13);
    unint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a2;
      int v24 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v23);
      if (v26 >= 0) {
        uint64_t v21 = __p;
      }
      else {
        uint64_t v21 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v28 = "Port.cpp";
      __int16 v29 = 1024;
      int v30 = 262;
      __int16 v31 = 2080;
      unint64_t v32 = "outData";
      __int16 v33 = 2080;
      v34[0] = v21;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v22 = &off_4865A0;
    v22[2] = 561211770;
  }

  return result;
}

uint64_t sub_F46A8(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      unint64_t v14 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 267;
      __int16 v36 = 2080;
      __int16 v37 = (const char *)v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      BOOL v18 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 268;
      __int16 v36 = 2080;
      __int16 v37 = (const char *)v18;
      __int16 v38 = 1024;
      LODWORD(v39[0]) = a3;
      WORD2(v39[0]) = 2048;
      *(void *)((char *)v39 + 6) = a4;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    char v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v19 = &off_4865A0;
    void v19[2] = 561211770;
  }

  if (!a6)
  {
    unint64_t v20 = (os_log_t *)sub_138E8(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      __int16 v22 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 269;
      __int16 v36 = 2080;
      __int16 v37 = "inData";
      __int16 v38 = 2080;
      v39[0] = v22;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v23 = &off_4865A0;
    void v23[2] = 561211770;
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, a2);
  if ((result & 1) == 0)
  {
    int v24 = (os_log_t *)sub_138E8(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      if (v31 >= 0) {
        char v26 = __p;
      }
      else {
        char v26 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 270;
      __int16 v36 = 2080;
      __int16 v37 = (const char *)v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    int v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v27 = &off_4865A0;
    uint64_t v27[2] = 1852797029;
  }

  return result;
}

void sub_F4B44(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(const void **)(a1 + 248);
  *(void *)std::string __str = v4;
  LOBYTE(p_cf) = *(_BYTE *)(a1 + 256);
  if ((_BYTE)p_cf && v4)
  {
    CFRetain(v4);
    uint64_t v4 = *(const void **)__str;
  }

  if (v4) {
    CFRetain(v4);
  }
  sub_7F234(&cf, v4);
  sub_19DFC((uint64_t)__str);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  std::to_string(&v10, v5);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
  std::to_string(&v9, v6);
  *(void *)std::string __str = v14;
  p_CFTypeRef cf = &cf;
  BOOL v18 = __p;
  char v19 = &v10;
  unint64_t v20 = &v9;
  sub_F79E8(a2, (uint64_t)__str, 1);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 464));
  std::string::operator=((std::string *)(a1 + 472), a2);
  sub_F79E8(&v8, (uint64_t)__str, 0);
  int v7 = (void **)(a1 + 496);
  *(_OWORD *)int v7 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
  *(void *)(a1 + 512) = v8.__r_.__value_.__l.__cap_;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 464));
  if (cf) {
    CFRelease(cf);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_F4D18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_F4DDC(uint64_t a1, int *a2)
{
  if (a2[1] != 1735159650) {
    return 0LL;
  }
  int v2 = *a2;
  int v3 = a2[2];
  if (*a2 != 1886283375)
  {
    if (v2 == 1886282093 && v3 == 0) {
      return 1LL;
    }
    if (v2 != 1886613101 && v2 != 1886614625 && v2 != 1886417783) {
      return 0LL;
    }
  }

  return !v3;
}

BOOL sub_F4E54(uint64_t a1, int *a2)
{
  if (a2[1] != 1735159650) {
    return 0LL;
  }
  int v2 = *a2;
  int v3 = a2[2];
  if (*a2 != 1886283375)
  {
    if (v2 == 1886282093 && v3 == 0) {
      return 1LL;
    }
    if (v2 != 1886613101 && v2 != 1886614625 && v2 != 1886417783) {
      return 0LL;
    }
  }

  return !v3;
}

void sub_F4ECC(uint64_t a1)
{
  uint64_t v2 = a1 + 320;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 320) + 16LL))(a1 + 320);
  *(_BYTE *)(a1 + 4sub_7A768(v2 - 32) = 1;
  sub_EDD50(&v17, (void *)(a1 + 272));
  for (uint64_t i = v18; i != &v17; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v5 = i[2];
    int v6 = *(std::__shared_weak_count **)(a1 + 88);
    char v15 = *(os_unfair_lock_s **)(a1 + 80);
    uint64_t v16 = v6;
    if (v6)
    {
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }

    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 320) + 16LL))(v5 + 320);
    sub_F7548((uint64_t *)(v5 + 272), (uint64_t *)&v15);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)(v5 + 320) + 24LL))(v5 + 320);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_1BB88(&v17);
  sub_85B80((uint64_t *)(a1 + 272));
  sub_EDD50(&v17, (void *)(a1 + 296));
  for (uint64_t j = v18; j != &v17; uint64_t j = (uint64_t *)j[1])
  {
    uint64_t v11 = j[2];
    int v12 = *(std::__shared_weak_count **)(a1 + 88);
    char v15 = *(os_unfair_lock_s **)(a1 + 80);
    uint64_t v16 = v12;
    if (v12)
    {
      char v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    sub_F736C(v11, &v15);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sub_1BB88(&v17);
  sub_85B80((uint64_t *)(a1 + 296));
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
}

void sub_F5068( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F50D4(uint64_t a1, uint64_t a2)
{
  return sub_6A8C0(a1 + 232, a2 + 32);
}

void sub_F5110(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
}

void sub_F511C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_F512C(uint64_t a1)
{
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    uint64_t v28 = (os_log_t *)sub_138E8(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v38 = "Port.cpp";
      __int16 v39 = 1024;
      int v40 = 528;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(_BYTE *)(a1 + 124)) {
    return 0LL;
  }
  uint64_t v2 = sub_138E8(23);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        if (!*(_BYTE *)(a1 + 124)) {
          sub_8DEEC();
        }
        unsigned int v4 = *(_DWORD *)(a1 + 120);
        sub_2CA1C(__p, v4);
        if (v36 >= 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v38 = "Port.cpp";
        __int16 v39 = 1024;
        int v40 = 531;
        __int16 v41 = 1024;
        int v42 = v4;
        __int16 v43 = 2080;
        __int16 v44 = v5;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Looking up client visible port ID for %u (%s)",  buf,  0x22u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  if (!*(_BYTE *)(a1 + 124)) {
    sub_8DEEC();
  }
  uint64_t v6 = *(unsigned int *)(a1 + 120);
  int v7 = *(uint64_t **)(a1 + 96);
  unint64_t v8 = *(uint64_t **)(a1 + 104);
  while (1)
  {
    if (v7 == v8)
    {
      char v19 = (os_log_t *)sub_138E8(23);
      unint64_t v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v6);
        int v21 = v36;
        __int16 v22 = (void **)__p[0];
        sub_23FE8((uint64_t)v33, (os_unfair_lock_t)(a1 + 8));
        uint64_t v23 = __p;
        if (v21 < 0) {
          uint64_t v23 = v22;
        }
        if (v34 >= 0) {
          int v24 = v33;
        }
        else {
          int v24 = (void **)v33[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        __int16 v38 = "Port.cpp";
        __int16 v39 = 1024;
        int v40 = 454;
        __int16 v41 = 1024;
        int v42 = v6;
        __int16 v43 = 2080;
        __int16 v44 = v23;
        __int16 v45 = 2080;
        uint64_t v46 = v24;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Could not find match for internal sub-port ID %u (%s) for Port %s",  buf,  0x2Cu);
        if (v34 < 0) {
          operator delete(v33[0]);
        }
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }

void sub_F5588(_Unwind_Exception *a1)
{
}

uint64_t sub_F55E0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1);
}

uint64_t sub_F55EC()
{
  return 0LL;
}

void sub_F55F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_BYTE *)(a4 + 4) && !sub_F7070(a1, a3))
  {
    uint64_t v48 = (os_log_t *)sub_138E8(13);
    unsigned int v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
      uint64_t v50 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 577;
      __int16 v61 = 2080;
      uint64_t v62 = v50;
      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempting to set a polar pattern on a port (%s) that does not support polar patterns.",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "Attempting to set a polar pattern on a port (%s) that does not support polar patterns.");
  }

  uint64_t v9 = (os_log_t *)sub_138E8(23);
  std::string v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
    uint64_t v11 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Port.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 579;
    __int16 v61 = 2080;
    uint64_t v62 = v11;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting preferred sub-port on port %s", buf, 0x1Cu);
  }

  unint64_t v12 = *(int ***)(a1 + 96);
  int v13 = *(int ***)(a1 + 104);
  if (v12 == v13) {
    goto LABEL_59;
  }
  do
  {
    unint64_t v14 = *v12;
    uint64_t v15 = (std::__shared_weak_count *)v12[1];
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      int v18 = *v14;
      do
        unint64_t v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }

      if (v18 == (_DWORD)a3) {
        goto LABEL_23;
      }
    }

    else if (*v14 == (_DWORD)a3)
    {
      goto LABEL_23;
    }

    v12 += 2;
  }

  while (v12 != v13);
  unint64_t v12 = v13;
LABEL_23:
  if (v12 == *(int ***)(a1 + 104))
  {
LABEL_59:
    int v40 = (os_log_t *)sub_138E8(13);
    __int16 v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__p, a3);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_2CA1C(v57, *(unsigned int *)(a1 + 144));
      int v43 = v58;
      __int16 v44 = (void **)v57[0];
      sub_2CA1C(v55, a3);
      __int16 v45 = v57;
      if (v43 < 0) {
        __int16 v45 = v44;
      }
      if (v56 >= 0) {
        uint64_t v46 = v55;
      }
      else {
        uint64_t v46 = (void **)v55[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 586;
      __int16 v61 = 2080;
      uint64_t v62 = p_p;
      __int16 v63 = 2080;
      uint64_t v64 = v45;
      __int16 v65 = 2080;
      __int16 v66 = v46;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to set unknown sub-port (%s) preferred on port with type %s. R equested sub-port: %s",  buf,  0x30u);
      if (v56 < 0) {
        operator delete(v55[0]);
      }
      if (v58 < 0) {
        operator delete(v57[0]);
      }
    }

    uint64_t v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v47,  "Attempt to set unknown sub-port (%s) preferred on port with type %s. Requested sub-port: %s");
  }

  int v21 = *v12;
  unint64_t v20 = (std::__shared_weak_count *)v12[1];
  v57[0] = *v12;
  v57[1] = v20;
  if (v20)
  {
    __int16 v22 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  int v24 = (_DWORD *)*((void *)v21 + 4);
  uint64_t v25 = (_DWORD *)*((void *)v21 + 5);
  if (v24 != v25)
  {
    char v26 = v24 + 16;
    do
    {
      int v27 = *(v26 - 8);
      BOOL v28 = v27 != 1852796517 || v26 == v25;
      v26 += 16;
    }

    while (!v28);
    if (v27 != 1852796517)
    {
      uint64_t v52 = (os_log_t *)sub_138E8(13);
      unsigned int v53 = *v52;
      if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "SubPort.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 137;
        _os_log_impl(&dword_0, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      uint64_t v54 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v54, "Precondition failure.");
    }
  }

  *(_DWORD *)(a1 + sub_19DFC(v32 - 128) = *v24;
  *(_BYTE *)(a1 + 1sub_7A768(v2 - 32) = 1;
  if (v21[2] >= 2)
  {
    int v29 = (os_log_t *)sub_138E8(23);
    int v30 = *v29;
    if (*v29)
    {
      if (os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
      {
        sub_3893A0(&__p, (unsigned int *)v21);
        char v31 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 592;
        __int16 v61 = 2080;
        uint64_t v62 = v31;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client has set a preferred sub-port that does not have client scope: %s",  buf,  0x1Cu);
      }
    }
  }

  if (*(_BYTE *)(a1 + 124) && *(_BYTE *)(a1 + 132))
  {
    int v32 = *(_DWORD *)(a1 + 120);
    int v33 = *(_DWORD *)(a1 + 128);
  }

  else
  {
    int v33 = *(unsigned __int8 *)(a1 + 132) != 0;
    int v32 = *(unsigned __int8 *)(a1 + 124) != 0;
  }

  if (v32 != v33)
  {
    uint64_t v34 = sub_546E0();
    int v35 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)AudioObjectPropertyAddress buf = *(void *)(a1 + 80);
    *(void *)&buf[8] = v35;
    if (v35)
    {
      p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
      do
        unint64_t v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
    }

    sub_1014AC(v34, 0x70707570u, (uint64_t *)buf, a5);
    if (v35) {
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  if (v20)
  {
    __int16 v38 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_F5C54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F5CE0(uint64_t result)
{
  if (*(_BYTE *)(result + 132)) {
    *(_BYTE *)(result + 1sub_7A768(v2 - 32) = 0;
  }
  return result;
}

uint64_t sub_F5CF0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(int ***)(a1 + 96);
  uint64_t v5 = *(int ***)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_16;
  }
  do
  {
    uint64_t v6 = *v4;
    int v7 = (std::__shared_weak_count *)v4[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      int v10 = *v6;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }

      if (v10 == (_DWORD)a2) {
        goto LABEL_14;
      }
    }

    else if (*v6 == (_DWORD)a2)
    {
      goto LABEL_14;
    }

    v4 += 2;
  }

  while (v4 != v5);
  unsigned int v4 = v5;
LABEL_14:
  if (v4 == *(int ***)(a1 + 104))
  {
LABEL_16:
    int v13 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v22, a2);
      int v15 = v23;
      uint64_t v16 = (void **)v22[0];
      sub_2CA1C(__p, *(unsigned int *)(a1 + 144));
      unint64_t v17 = v22;
      if (v15 < 0) {
        unint64_t v17 = v16;
      }
      if (v21 >= 0) {
        int v18 = __p;
      }
      else {
        int v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v25 = "Port.cpp";
      __int16 v26 = 1024;
      int v27 = 608;
      __int16 v28 = 2080;
      int v29 = v17;
      __int16 v30 = 2080;
      char v31 = v18;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to get type for unknown sub-port (%s) type on port with type %s.",  buf,  0x26u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to get type for unknown sub-port (%s) type on port with type %s.");
  }

  return (*v4)[1];
}

void sub_F5EFC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_F5F2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(int ***)(a1 + 96);
  uint64_t v5 = *(int ***)(a1 + 104);
  if (v4 == v5)
  {
    unint64_t v20 = (os_log_t *)sub_138E8(13);
    char v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v35 = "Port.cpp";
      __int16 v36 = 1024;
      int v37 = 614;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  do
  {
    unint64_t v8 = *v4;
    unint64_t v9 = (std::__shared_weak_count *)v4[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      int v12 = *v8;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }

      if (v12 == (_DWORD)a2) {
        goto LABEL_14;
      }
    }

    else if (*v8 == (_DWORD)a2)
    {
      goto LABEL_14;
    }

    v4 += 2;
  }

  while (v4 != v5);
  unsigned int v4 = v5;
LABEL_14:
  if (v4 == *(int ***)(a1 + 104))
  {
    char v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      int v25 = v33;
      __int16 v26 = (void **)__p[0];
      sub_2CA1C(v30, *(unsigned int *)(a1 + 144));
      int v27 = __p;
      if (v25 < 0) {
        int v27 = v26;
      }
      if (v31 >= 0) {
        __int16 v28 = v30;
      }
      else {
        __int16 v28 = (void **)v30[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v35 = "Port.cpp";
      __int16 v36 = 1024;
      int v37 = 616;
      __int16 v38 = 2080;
      unint64_t v39 = v27;
      __int16 v40 = 2080;
      __int16 v41 = v28;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to get name for unknown sub-port (%s) type on port with type %s.",  buf,  0x26u);
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }

    int v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Attempt to get name for unknown sub-port (%s) type on port with type %s.");
  }

  unint64_t v14 = *v4;
  int v15 = (const __CFString *)*((void *)*v4 + 7);
  *(void *)a3 = v15;
  LODWORD(v14) = *((unsigned __int8 *)v14 + 64);
  *(_BYTE *)(a3 + 8) = (_BYTE)v14;
  if ((_DWORD)v14) {
    BOOL v16 = v15 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    CFRetain(v15);
    goto LABEL_21;
  }

  if (v15)
  {
LABEL_21:
  }

  unint64_t v17 = (os_log_t *)sub_138E8(23);
  int v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, a2);
    if (v33 >= 0) {
      unint64_t v19 = __p;
    }
    else {
      unint64_t v19 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    int v35 = "Port.cpp";
    __int16 v36 = 1024;
    int v37 = 618;
    __int16 v38 = 2080;
    unint64_t v39 = v19;
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Returning empty string for sub-port name.  Sub-port ID:%s",  buf,  0x1Cu);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_F62C0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_F630C(os_unfair_lock_s *a1)
{
  int v2 = (os_log_t *)sub_138E8(13);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
  {
    sub_23FE8((uint64_t)__p, a1 + 2);
    if (v7 >= 0) {
      unsigned int v4 = __p;
    }
    else {
      unsigned int v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unint64_t v9 = "Port.cpp";
    __int16 v10 = 1024;
    int v11 = 624;
    __int16 v12 = 2080;
    unint64_t v13 = v4;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Port: %s does not have sub-ports with Polar patterns",  buf,  0x1Cu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Port: %s does not have sub-ports with Polar patterns");
}

void sub_F640C(_Unwind_Exception *a1)
{
}

char *sub_F6428@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[431] < 0) {
    return (char *)sub_24054((_BYTE *)a2, *((void **)result + 51), *((void *)result + 52));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 408);
  *(void *)(a2 + 16) = *((void *)result + 53);
  return result;
}

void sub_F6454(void *a1@<X8>)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
}

void sub_F6460()
{
  uint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "Port.cpp";
      __int16 v5 = 1024;
      int v6 = 765;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): not implemented",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "not implemented");
}

void sub_F6520(_Unwind_Exception *exception_object)
{
}

void sub_F653C()
{
  uint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "Port.cpp";
      __int16 v5 = 1024;
      int v6 = 770;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): not implemented",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "not implemented");
}

void sub_F65FC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_F6618()
{
  return 0LL;
}

CFMutableDictionaryRef sub_F6620@<X0>(uint64_t a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  return result;
}

uint64_t sub_F6664()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_F666C()
{
  return 1LL;
}

void sub_F6674(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_138E8(23);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    char v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        sub_23FE8((uint64_t)&v34, (os_unfair_lock_t)(a1 + 8));
        int size = (char)v34.__r_.__value_.__s.__size_;
        std::string::size_type v9 = v34.__r_.__value_.__r.__words[0];
        sub_2CA1C(__p, a2);
        __int16 v10 = &v34;
        if (size < 0) {
          __int16 v10 = (std::string *)v9;
        }
        if (v33 >= 0) {
          int v11 = __p;
        }
        else {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 784;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&uint8_t buf[20] = v10;
        __int16 v36 = 1024;
        int v37 = a2;
        __int16 v38 = 2080;
        unint64_t v39 = v11;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port: %s; ID: %u (%s)", buf, 0x2Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  unint64_t v13 = *(void **)(a1 + 96);
  __int16 v12 = *(void **)(a1 + 104);
  if (v13 == v12)
  {
LABEL_36:
    int v27 = (os_log_t *)sub_138E8(13);
    __int16 v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v34, a2);
      if ((v34.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v29 = &v34;
      }
      else {
        int v29 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 797;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&uint8_t buf[20] = v29;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): No match found for internal sub-port ID: %s",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No match found for internal sub-port ID: %s");
  }

  char v14 = 0;
  while (1)
  {
    int v15 = (void *)*v13;
    BOOL v16 = (std::__shared_weak_count *)v13[1];
    __p[0] = *(void **)v13;
    __p[1] = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }

    sub_389D94(buf, v15[4], v15[5], a2);
    if (*(void *)a3)
    {
      operator delete(*(void **)a3);
      *(void *)a3 = 0LL;
      *(void *)(a3 + 8) = 0LL;
      *(void *)(a3 + 16) = 0LL;
    }

    unint64_t v19 = *(unsigned int **)buf;
    *(void *)a3 = *(void *)buf;
    unint64_t v20 = *(unsigned int **)&buf[8];
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&buf[8];
    char v21 = v20;
    if (v19 != v20)
    {
      uint64_t v22 = sub_138E8(23);
      if ((*(_BYTE *)(v22 + 8) & 1) != 0)
      {
        char v23 = *(os_log_s **)v22;
        if (*(void *)v22)
        {
          if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
          {
            sub_F6EB0(&v34, v19, v21);
            int v24 = &v34;
            if ((v34.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v24 = (std::string *)v34.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "Port.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 792;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&uint8_t buf[20] = v24;
            _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning %s", buf, 0x1Cu);
          }
        }
      }

      char v14 = 1;
    }

    if (v16)
    {
      int v25 = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    if (v19 != v21) {
      break;
    }
    v13 += 2;
    if (v13 == v12) {
      goto LABEL_36;
    }
  }

  if ((v14 & 1) == 0)
  {
    char v31 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v31;
      operator delete(v31);
    }
  }

void sub_F6A54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F6ABC()
{
  uint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "Port.cpp";
      __int16 v5 = 1024;
      int v6 = 498;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Cannot set routable state if CanSetRoutable() returns false.",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Cannot set routable state if CanSetRoutable() returns false.");
}

void sub_F6B7C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_F6B98()
{
  return 1LL;
}

void sub_F6BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_138E8(23);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    __int16 v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(&v22, a2);
        int v6 = v24;
        char v7 = (void **)v22;
        sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
        unint64_t v8 = &v22;
        if (v6 < 0) {
          unint64_t v8 = v7;
        }
        if (v21 >= 0) {
          std::string::size_type v9 = __p;
        }
        else {
          std::string::size_type v9 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        unint64_t v26 = "Port.cpp";
        __int16 v27 = 1024;
        int v28 = 460;
        __int16 v29 = 1024;
        int v30 = a2;
        __int16 v31 = 2080;
        int v32 = v8;
        __int16 v33 = 2080;
        std::string v34 = v9;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting sub-port %u (%s) active on port %s.",  buf,  0x2Cu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (v24 < 0) {
          operator delete(v22);
        }
      }
    }
  }

  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 464LL))(&v22, a1, a2);
  __int16 v10 = v22;
  if (v22 == v23)
  {
    int v11 = (os_log_t *)sub_138E8(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      int v13 = v21;
      char v14 = (void **)__p[0];
      sub_23FE8((uint64_t)v18, (os_unfair_lock_t)(a1 + 8));
      int v15 = __p;
      if (v13 < 0) {
        int v15 = v14;
      }
      if (v19 >= 0) {
        BOOL v16 = v18;
      }
      else {
        BOOL v16 = (void **)v18[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      unint64_t v26 = "Port.cpp";
      __int16 v27 = 1024;
      int v28 = 462;
      __int16 v29 = 1024;
      int v30 = a2;
      __int16 v31 = 2080;
      int v32 = v15;
      __int16 v33 = 2080;
      std::string v34 = v16;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not find a match for sub-port %u (%s) active on port %s.",  buf,  0x2Cu);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Could not find a match for sub-port %u (%s) active on port %s.");
  }

  *(_DWORD *)(a1 + 120) = a2;
  *(_BYTE *)(a1 + 124) = 1;
  if (v10)
  {
    char v23 = v10;
    operator delete(v10);
  }

void sub_F6E4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_F6EB0(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2CA1C(&v13, *a2);
      int v6 = std::string::insert(&v13, 0LL, "'", 1uLL);
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v8 = std::string::append(&v14, "'", 1uLL);
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      int64_t cap = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        __int16 v10 = __p;
      }
      else {
        __int16 v10 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v11 = HIBYTE(cap);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_F7004( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

BOOL sub_F7070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int ***)(a1 + 96);
  __int16 v5 = *(int ***)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_23;
  }
  do
  {
    int v6 = *v4;
    __int128 v7 = (std::__shared_weak_count *)v4[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      int v10 = *v6;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }

      if (v10 == (_DWORD)a2) {
        goto LABEL_14;
      }
    }

    else if (*v6 == (_DWORD)a2)
    {
      goto LABEL_14;
    }

    v4 += 2;
  }

  while (v4 != v5);
  uint64_t v4 = v5;
LABEL_14:
  if (v4 == *(int ***)(a1 + 104))
  {
LABEL_23:
    uint64_t v18 = sub_138E8(23);
    if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    {
      char v19 = *(os_log_s **)v18;
      if (*(void *)v18)
      {
        BOOL result = os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        sub_2CA1C(v26, a2);
        int v20 = v27;
        char v21 = (void **)v26[0];
        sub_2CA1C(__p, *(unsigned int *)(a1 + 144));
        int v22 = v26;
        if (v20 < 0) {
          int v22 = v21;
        }
        if (v25 >= 0) {
          char v23 = __p;
        }
        else {
          char v23 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v29 = "Port.cpp";
        __int16 v30 = 1024;
        int v31 = 654;
        __int16 v32 = 2080;
        __int16 v33 = v22;
        __int16 v34 = 2080;
        int v35 = v23;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Unable to locate unknown sub-port (%s) type on port with type %s.",  buf,  0x26u);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
      }
    }

    return 0LL;
  }

  uint64_t v13 = *((void *)*v4 + 4);
  uint64_t v12 = *((void *)*v4 + 5);
  if (v13 == v12) {
    return 0LL;
  }
  uint64_t v14 = v13 + 64;
  do
  {
    int v15 = *(_DWORD *)(v14 - 32);
    BOOL result = v15 != 1852796517;
    BOOL v17 = v15 != 1852796517 || v14 == v12;
    v14 += 64LL;
  }

  while (!v17);
  return result;
}

void sub_F7284(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_F72A4(void *a1, int a2, __int32 **a3, __int32 **a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3 != a4)
  {
    __int16 v5 = a3;
    do
    {
      unint64_t v8 = *v5;
      uint64_t v9 = *((void *)*v5 + 4);
LABEL_4:
      if (v9 != *((void *)*v5 + 5))
      {
        for (uint64_t i = *(_DWORD **)(v9 + 40); i != *(_DWORD **)(v9 + 48); ++i)
        {
          if (*i == a2)
          {
            v9 += 64LL;
            goto LABEL_4;
          }
        }

        if (v8[2] <= 0)
        {
          __int32 v11 = *v8;
          sub_8598C((uint64_t)a1, &v11);
        }
      }

      v5 += 2;
    }

    while (v5 != a4);
  }

void sub_F7350(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_F736C(uint64_t a1, os_unfair_lock_s **a2)
{
  uint64_t v4 = a1 + 320;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 320) + 16LL))(a1 + 320);
  int v6 = (os_log_t *)sub_138E8(23);
  __int128 v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_D3ECC(v14, a2);
    int v8 = v15;
    uint64_t v9 = (void **)v14[0];
    sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
    int v10 = v14;
    if (v8 < 0) {
      int v10 = v9;
    }
    if (v13 >= 0) {
      __int32 v11 = __p;
    }
    else {
      __int32 v11 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    BOOL v17 = "Port.cpp";
    __int16 v18 = 1024;
    int v19 = 727;
    __int16 v20 = 2080;
    char v21 = v10;
    __int16 v22 = 2080;
    char v23 = v11;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d removing partner port %s from %s", buf, 0x26u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }

  sub_F7548((uint64_t *)(a1 + 296), (uint64_t *)a2);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
}

void sub_F74F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_F7548(uint64_t *a1, uint64_t *a2)
{
  v63[0] = (uint64_t)v63;
  v63[1] = (uint64_t)v63;
  uint64_t v64 = 0LL;
  int v2 = (uint64_t *)a1[1];
  if (v2 == a1) {
    goto LABEL_109;
  }
  do
  {
    int v5 = (std::__shared_weak_count *)v2[3];
    if (!v5)
    {
      __int128 v7 = 0LL;
LABEL_11:
      uint64_t v8 = 0LL;
      goto LABEL_12;
    }

    int v6 = std::__shared_weak_count::lock(v5);
    __int128 v7 = v6;
    if (!v6) {
      goto LABEL_11;
    }
    uint64_t v8 = v2[2];
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }

std::string *sub_F79E8(std::string *a1, uint64_t a2, int a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::reserve(a1, 0x40uLL);
  std::operator+<char>("[ type: ", *(void *)a2);
  if (cap >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v7 = HIBYTE(cap);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = **(const __CFString ***)(a2 + 8);
  if (v8) {
    sub_48100((uint64_t)&v20, v8);
  }
  else {
    sub_7D084(&v20, "");
  }
  uint64_t v9 = std::string::insert(&v20, 0LL, "; uid: ", 7uLL);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t cap = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int32 v11 = __p;
  }
  else {
    __int32 v11 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v12 = HIBYTE(cap);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if (!a3) {
      goto LABEL_32;
    }
  }

  else if (!a3)
  {
    goto LABEL_32;
  }

  std::operator+<char>("; addr: ", *(void *)(a2 + 16));
  if (cap >= 0) {
    char v13 = __p;
  }
  else {
    char v13 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v14 = HIBYTE(cap);
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
LABEL_32:
  std::operator+<char>("; conn: ", *(void *)(a2 + 24));
  if (cap >= 0) {
    char v15 = __p;
  }
  else {
    char v15 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v16 = HIBYTE(cap);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::operator+<char>("; rout: ", *(void *)(a2 + 32));
  if (cap >= 0) {
    uint64_t v17 = __p;
  }
  else {
    uint64_t v17 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v18 = HIBYTE(cap);
  }
  else {
    std::string::size_type v18 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v17, v18);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_F7C08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F7C8C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_F7CA0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 144);
  if ((sub_1CC860() & 1) == 0
    && (v2 != 1885565807 ? (BOOL v4 = v2 == 1886745455) : (BOOL v4 = 1), !v4 ? (v5 = v2 == 1886745449) : (v5 = 1), v5))
  {
    uint64_t v6 = *(void *)(a1 + 192);
    if ((*(_WORD *)(a1 + 184) & 1) == 0) {
      goto LABEL_22;
    }
    int v7 = (*(uint64_t (**)(void, void))(*(void *)v6 + 88LL))(*(void *)(a1 + 192), 0LL);
    int v8 = v7 - (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 312LL))(v6) & 0xFF00000000LL) != 0);
    unsigned int v9 = sub_38AB80(v6, 0LL);
    __int128 v10 = (os_log_t *)sub_138E8(13);
    __int32 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      unint64_t v26 = "PortUtilities.cpp";
      __int16 v27 = 1024;
      int v28 = 1364;
      __int16 v29 = 1024;
      *(_DWORD *)__int16 v30 = v8;
      *(_WORD *)&v30[4] = 1024;
      *(_DWORD *)&v30[6] = v9;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Number of Non Tap Input Streams: %u; Input Channels: %u",
        buf,
        0x1Eu);
    }

    BOOL v12 = v9 < 3 && v8 == 1;
    BOOL v3 = v12;
    if ((*(_WORD *)(a1 + 184) & 1) == 0)
    {
LABEL_22:
      int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 88LL))(v6, 1LL);
      unsigned int v14 = sub_38AB80(v6, 1LL);
      char v15 = (os_log_t *)sub_138E8(13);
      std::string::size_type v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        unint64_t v26 = "PortUtilities.cpp";
        __int16 v27 = 1024;
        int v28 = 1376;
        __int16 v29 = 1024;
        *(_DWORD *)__int16 v30 = v13;
        *(_WORD *)&v30[4] = 1024;
        *(_DWORD *)&v30[6] = v14;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Number of Output Streams: %u; Output Channels: %u",
          buf,
          0x1Eu);
      }

      BOOL v3 = v14 < 3 && v13 == 1;
    }
  }

  else
  {
    BOOL v3 = 1;
  }

  std::string::size_type v18 = (os_log_t *)sub_138E8(13);
  int v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
  {
    if (v3) {
      std::string v20 = "true";
    }
    else {
      std::string v20 = "false";
    }
    sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
    if (v24 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    unint64_t v26 = "PortUtilities.cpp";
    __int16 v27 = 1024;
    int v28 = 1383;
    __int16 v29 = 2080;
    *(void *)__int16 v30 = v20;
    *(_WORD *)&v30[8] = 2080;
    int v31 = v21;
    _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "%25s:%-5d Port returning %s for telephony support: %s", buf, 0x26u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_BYTE *)(a1 + 521) = v3;
  *(_BYTE *)(a1 + 520) = 1;
  sub_CC160(a1);
  return 1LL;
}

void sub_F7FC0(uint64_t a1)
{
  *(_BYTE *)(a1 + 520) = 0;
  sub_F4ECC(a1);
  sub_CC160(a1);
}

void sub_F7FE8(os_unfair_lock_s *a1)
{
  uint64_t v2 = sub_138E8(23);
  uint64_t v3 = sub_138E8(9);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0)
    {
      if ((v6 & 1) == 0) {
        return;
      }
      goto LABEL_9;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
  if ((*(void *)(v2 + 8) & 1) != 0)
  {
LABEL_9:
    unsigned int v9 = *(os_log_s **)v2;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      sub_23FE8((uint64_t)__p, a1 + 2);
      if (v12 >= 0) {
        __int128 v10 = __p;
      }
      else {
        __int128 v10 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      __int16 v14 = 1024;
      int v15 = 162;
      __int16 v16 = 2080;
      uint64_t v17 = v10;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Instantiated Port: %s.", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }

uint64_t sub_F8158(uint64_t a1)
{
  *(void *)a1 = off_46FB10;
  uint64_t v2 = (os_log_t *)sub_138E8(23);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
    char v4 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Port.cpp";
    __int16 v18 = 1024;
    int v19 = 219;
    __int16 v20 = 2080;
    uint64_t v21 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d deleting port %s", buf, 0x1Cu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v5 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v5 != 1885433888)
  {
    if ((sub_397E74((unint64_t *)qword_4A9BE8) & 1) == 0)
    {
      uint64_t v6 = (os_log_t *)sub_138E8(13);
      uint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v5);
          char v8 = v16 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Port.cpp";
          __int16 v18 = 1024;
          int v19 = 229;
          __int16 v20 = 2080;
          uint64_t v21 = v8;
          __int16 v22 = 2048;
          uint64_t v23 = a1;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: A Port of type '%s' at %p is being destroyed by something other than the Obje ct Destruction Handler",  buf,  0x26u);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    if (!*(_BYTE *)(a1 + 432))
    {
      char v12 = (os_log_t *)sub_138E8(13);
      int v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v5);
          __int16 v14 = v16 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Port.cpp";
          __int16 v18 = 1024;
          int v19 = 232;
          __int16 v20 = 2080;
          uint64_t v21 = v14;
          __int16 v22 = 2048;
          uint64_t v23 = a1;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: A Port of type '%s' at %p was not torn down prior to being destroyed",  buf,  0x26u);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  unsigned int v9 = *(void **)(a1 + 440);
  if (v9)
  {
    *(void *)(a1 + 448) = v9;
    operator delete(v9);
  }

  *(void *)(a1 + 320) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 344));
  sub_85B80((uint64_t *)(a1 + 296));
  sub_85B80((uint64_t *)(a1 + 272));
  sub_19DFC(a1 + 248);
  sub_19DFC(a1 + 232);
  sub_19DFC(a1 + 216);
  sub_19DFC(a1 + 200);
  sub_32C8C(*(void **)(a1 + 168));
  *(void *)AudioObjectPropertyAddress buf = a1 + 96;
  sub_7A668((void ***)buf);
  __int128 v10 = *(std::__shared_weak_count **)(a1 + 88);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_F3008(a1);
  return a1;
}

void sub_F84B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_F84C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8750(a1);
  operator delete(v1);
}

uint64_t sub_F84DC(os_unfair_lock_s *a1)
{
  return 1LL;
}

void sub_F84F4(uint64_t a1)
{
  uint64_t v2 = a1 + 552;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 552) + 16LL))(a1 + 552);
  *(_BYTE *)(a1 + 640) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  sub_F4ECC(a1);
}

BOOL sub_F8544(uint64_t a1)
{
  uint64_t v2 = a1 + 552;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 552) + 16LL))(a1 + 552);
  int v4 = *(unsigned __int8 *)(a1 + 640);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  return v4 != 0;
}

void sub_F8598(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 544);
  if (!v2) {
    sub_82CEC();
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
  uint64_t v4 = sub_138E8(23);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
        if (v10 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        uint64_t v7 = "Disabled";
        char v12 = "Port.cpp";
        __int16 v13 = 1024;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        if (v3) {
          uint64_t v7 = "Enabled";
        }
        int v14 = 914;
        __int16 v15 = 2080;
        char v16 = v6;
        __int16 v17 = 2080;
        __int16 v18 = v7;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Dynamic Port updating state: %s will be %s",  buf,  0x26u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 552) + 16LL))(a1 + 552);
  *(_BYTE *)(a1 + 640) = v3;
  sub_CC160(a1);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)(a1 + 552) + 24LL))(a1 + 552);
  }
}

void sub_F8714(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8750(uint64_t a1)
{
  *(void *)a1 = off_46FF70;
  if (*(_BYTE *)(a1 + 640))
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        int v8 = "Port.cpp";
        __int16 v9 = 1024;
        int v10 = 884;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Dynamic port is being destroyed while still enabled!",  (uint8_t *)&v7,  0x12u);
      }
    }
  }

  *(void *)(a1 + 552) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 576));
  uint64_t v4 = *(void **)(a1 + 544);
  if (v4 == (void *)(a1 + 520))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(a1 + 520);
    goto LABEL_9;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  sub_F8158(a1);
  return a1;
}

void sub_F8870(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_F8884(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F9108(a1);
  operator delete(v1);
}

os_log_s *sub_F8898(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v8 = a1 + 69;
  uint64_t v9 = (*(uint64_t (**)(void *))(a1[69] + 16LL))(a1 + 69);
  int v10 = v9;
  if (*a2 == 1885959026 && a2[1] == 1735159650 && a2[2] == 0)
  {
    int v14 = a1 + 66;
    for (uint64_t i = (void *)a1[67]; ; uint64_t i = (void *)i[1])
    {
      if (i == v14) {
        goto LABEL_24;
      }
      if (i[2] == a3 && i[3] == a4) {
        break;
      }
    }

    if (i == v14)
    {
LABEL_24:
      __int16 v18 = operator new(0x20uLL);
      void v18[2] = a3;
      v18[3] = a4;
      uint64_t v19 = a1[66];
      void *v18 = v19;
      v18[1] = v14;
      *(void *)(v19 + 8) = v18;
      a1[66] = v18;
      ++a1[68];
      __int16 v13 = (os_log_s *)(&dword_0 + 1);
      if (!v10) {
        return v13;
      }
      goto LABEL_25;
    }

    __int16 v17 = (os_log_t *)sub_138E8(23);
    __int16 v13 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        int v21 = 136315394;
        __int16 v22 = "Port.cpp";
        __int16 v23 = 1024;
        int v24 = 1005;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Specified routability listener already exists",  (uint8_t *)&v21,  0x12u);
      }

      __int16 v13 = 0LL;
    }

    if (v10) {
      goto LABEL_25;
    }
  }

  else
  {
    __int16 v13 = (os_log_s *)sub_F4DDC(v9, a2);
    if (v10) {
LABEL_25:
    }
      (*(void (**)(void *))(*v8 + 24LL))(v8);
  }

  return v13;
}

void sub_F8A44(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

os_log_s *sub_F8A80(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v8 = a1 + 69;
  uint64_t v9 = (*(uint64_t (**)(void *))(a1[69] + 16LL))(a1 + 69);
  int v10 = v9;
  if (*a2 == 1885959026 && a2[1] == 1735159650 && a2[2] == 0)
  {
    int v14 = a1 + 66;
    for (uint64_t i = (uint64_t *)a1[67]; i != v14; uint64_t i = (uint64_t *)i[1])
    {
      if (i[2] == a3 && i[3] == a4)
      {
        if (i != v14)
        {
          uint64_t v17 = *i;
          *(void *)(v17 + 8) = i[1];
          *(void *)i[1] = v17;
          --a1[68];
          operator delete(i);
          __int16 v13 = (os_log_s *)(&dword_0 + 1);
          goto LABEL_22;
        }

        break;
      }
    }

    __int16 v18 = (os_log_t *)sub_138E8(23);
    __int16 v13 = *v18;
    if (*v18)
    {
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        int v20 = 136315394;
        int v21 = "Port.cpp";
        __int16 v22 = 1024;
        int v23 = 1031;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Specified routability listener does not exist",  (uint8_t *)&v20,  0x12u);
      }

      __int16 v13 = 0LL;
    }
  }

  else
  {
    __int16 v13 = (os_log_s *)sub_F4E54(v9, a2);
  }

void sub_F8C1C(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8C54(uint64_t a1)
{
  *(_BYTE *)(a1 + 520) = 1;
  sub_CC160(a1);
  return 1LL;
}

void sub_F8C88(uint64_t a1)
{
  *(_WORD *)(a1 + 520) = 0;
  sub_CC160(a1);
  sub_F4ECC(a1);
}

uint64_t sub_F8CB0(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 552;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 552) + 16LL))(a1 + 552);
  if (*(_BYTE *)(a1 + 520)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2 == 0;
  }
  if (!v6)
  {
    int v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23)
    {
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 979;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): Ports cannot be set routable if not connected.",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797556;
  }

  uint64_t result = sub_138E8(23);
  int v8 = *(os_log_s **)result;
  if (*(void *)result)
  {
    uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144LL))(&v31, a1);
      uint64_t v9 = v31;
      int v10 = *(const void **)(a1 + 248);
      __int16 v29 = v10;
      char v30 = *(_BYTE *)(a1 + 256);
      if (v30 && v10) {
        CFRetain(v10);
      }
      sub_2CA1C(&__p, *(unsigned int *)(a1 + 144));
      if (v28 >= 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = __p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 981;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&uint8_t buf[20] = a2;
      __int16 v34 = 2112;
      uint64_t v35 = v9;
      __int16 v36 = 2112;
      int v37 = v10;
      __int16 v38 = 2080;
      unint64_t v39 = p_p;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Changing port routability to %u for port with name %@, UID %@, and type '%s'",  buf,  0x36u);
      if (v28 < 0) {
        operator delete(__p);
      }
      sub_19DFC((uint64_t)&v29);
      uint64_t result = sub_19DFC((uint64_t)&v31);
    }
  }

  int v12 = *(unsigned __int8 *)(a1 + 521);
  *(_BYTE *)(a1 + 521) = a2;
  if (v12 != a2)
  {
    sub_CC160(a1);
    __int16 v13 = pthread_self();
    int v14 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 568));
    if (!pthread_equal(v13, v14))
    {
      int v21 = (os_log_t *)sub_138E8(13);
      __int16 v22 = *v21;
      if (*v21)
      {
        if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 1048;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mutex not owned by current thread",  buf,  0x12u);
        }
      }
    }

    uint64_t v15 = a1 + 528;
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(_OWORD *)&buf[8] = (unint64_t)buf;
    uint64_t v16 = *(void *)(a1 + 536);
    if (v16 != v15)
    {
      uint64_t v17 = 1LL;
      __int16 v18 = buf;
      do
      {
        uint64_t v19 = operator new(0x20uLL);
        v19[1] = *(_OWORD *)(v16 + 16);
        *(void *)uint64_t v19 = v18;
        *((void *)v19 + 1) = buf;
        *((void *)v18 + 1) = v19;
        *(void *)AudioObjectPropertyAddress buf = v19;
        *(void *)&_DWORD buf[16] = v17;
        uint64_t v16 = *(void *)(v16 + 8);
        ++v17;
        __int16 v18 = v19;
      }

      while (v16 != v15);
    }

    sub_34AA0(&__p, v4);
    uint64_t v31 = 0x676C6F6270697372LL;
    int v32 = 0;
    for (uint64_t i = *(void *)&buf[8]; buf != (_BYTE *)i; uint64_t i = *(void *)(i + 8))
      (*(void (**)(void, uint64_t, uint64_t *, void))(i + 16))(0LL, 1LL, &v31, *(void *)(i + 24));
    if (v27) {
      (*(void (**)(void *))(*(void *)__p + 16LL))(__p);
    }
    uint64_t result = (uint64_t)sub_68314(buf);
  }

  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return result;
}

void sub_F9064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_F9108(uint64_t a1)
{
  *(void *)a1 = off_4701A8;
  *(void *)(a1 + 552) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 576));
  sub_68314((void *)(a1 + 528));
  return sub_F8158(a1);
}

std::string *sub_F9154(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[", 1uLL);
  std::to_string(&v29, *(_DWORD *)a2);
  uint64_t v4 = std::string::insert(&v29, 0LL, "iesp: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v6 = std::string::append(&v30, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  __int128 v31 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v8 = (const std::string::value_type *)&v31;
  }
  else {
    int v8 = (const std::string::value_type *)v31;
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v31);
  }
  std::to_string(&v29, *(_DWORD *)(a2 + 4));
  int v10 = std::string::insert(&v29, 0LL, "iess: ", 6uLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  int v12 = std::string::append(&v30, "; ", 2uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t cap = v12->__r_.__value_.__l.__cap_;
  __int128 v31 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v14 = (const std::string::value_type *)&v31;
  }
  else {
    int v14 = (const std::string::value_type *)v31;
  }
  if (cap >= 0) {
    std::string::size_type v15 = HIBYTE(cap);
  }
  else {
    std::string::size_type v15 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v14, v15);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v31);
  }
  std::to_string(&v29, *(_DWORD *)(a2 + 8));
  uint64_t v16 = std::string::insert(&v29, 0LL, "pris: ", 6uLL);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v18 = std::string::append(&v30, "; ", 2uLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t cap = v18->__r_.__value_.__l.__cap_;
  __int128 v31 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v20 = (const std::string::value_type *)&v31;
  }
  else {
    int v20 = (const std::string::value_type *)v31;
  }
  if (cap >= 0) {
    std::string::size_type v21 = HIBYTE(cap);
  }
  else {
    std::string::size_type v21 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v20, v21);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v31);
  }
  std::to_string(&v29, *(unsigned __int8 *)(a2 + 12));
  __int16 v22 = std::string::insert(&v29, 0LL, "iede: ", 6uLL);
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  int v24 = std::string::append(&v30, "; ", 2uLL);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  int64_t cap = v24->__r_.__value_.__l.__cap_;
  __int128 v31 = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v26 = (const std::string::value_type *)&v31;
  }
  else {
    unint64_t v26 = (const std::string::value_type *)v31;
  }
  if (cap >= 0) {
    std::string::size_type v27 = HIBYTE(cap);
  }
  else {
    std::string::size_type v27 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v26, v27);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v31);
  }
  return std::string::append(a1, "]", 1uLL);
}

void sub_F9498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F9530(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + sub_7A768(v2 - 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void sub_F9570(_Unwind_Exception *a1)
{
}

uint64_t sub_F9584(uint64_t a1, uint64_t a2, AudioObjectID a3)
{
  uint64_t outData = 0LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.uint64_t mSelector = 0x676C6F626C6E616DLL;
  AudioObjectGetPropertyData(a3, &inAddress, 0, 0LL, &ioDataSize, &outData);
  *(void *)(a1 + sub_7A768(v2 - 32) = outData;
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void sub_F9614(_Unwind_Exception *a1)
{
}

uint64_t sub_F9638( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7, __int128 *a8)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + sub_7A768(v2 - 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + sub_19DFC(v32 - 96) = 0LL;
  *(void *)a1 = off_46FB10;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + sub_19DFC(v32 - 112) = 0LL;
  std::string::size_type v15 = *a7;
  uint64_t v16 = a7[1];
  *(void *)AudioObjectPropertyAddress buf = a1 + 96;
  buf[8] = 0;
  uint64_t v17 = v16 - v15;
  if (v16 != v15)
  {
    if (v17 < 0) {
      sub_7A87C();
    }
    __int16 v18 = sub_7BE90(v17 >> 4);
    *(void *)(a1 + sub_19DFC(v32 - 96) = v18;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + sub_19DFC(v32 - 112) = &v18[2 * v19];
    do
    {
      void *v18 = *(void *)v15;
      uint64_t v20 = *((void *)v15 + 1);
      v18[1] = v20;
      if (v20)
      {
        uint64_t v21 = (unint64_t *)(v20 + 8);
        do
          unint64_t v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }

      v15 += 16;
      v18 += 2;
    }

    while (v15 != v16);
    *(void *)(a1 + 104) = v18;
  }

  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + sub_19DFC(v32 - 128) = 0;
  *(_BYTE *)(a1 + 1sub_7A768(v2 - 32) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  uint64_t v23 = *a2;
  *(void *)(a1 + 149) = *(uint64_t *)((char *)a2 + 5);
  *(void *)(a1 + 144) = v23;
  sub_86550((uint64_t *)(a1 + 160), (uint64_t)(a2 + 2));
  *(_WORD *)(a1 + 184) = *((_WORD *)a2 + 20);
  int v24 = *(const __CFString **)a5;
  *(void *)(a1 + 200) = *(void *)a5;
  *(void *)(a1 + sub_7A768(v35 - 192) = a3;
  int v25 = *(unsigned __int8 *)(a5 + 8);
  *(_BYTE *)(a1 + 208) = v25;
  if (v25 && v24) {
    CFRetain(v24);
  }
  unint64_t v26 = *(const void **)(a5 + 16);
  *(void *)(a1 + 216) = v26;
  int v27 = *(unsigned __int8 *)(a5 + 24);
  *(_BYTE *)(a1 + 224) = v27;
  if (v27 && v26) {
    CFRetain(v26);
  }
  char v28 = *(const void **)(a5 + 32);
  *(void *)(a1 + 2sub_7A768(v2 - 32) = v28;
  int v29 = *(unsigned __int8 *)(a5 + 40);
  *(_BYTE *)(a1 + 240) = v29;
  if (v29 && v28) {
    CFRetain(v28);
  }
  CFStringRef v30 = *(CFStringRef *)a6;
  *(void *)(a1 + 248) = *(void *)a6;
  int v31 = *(unsigned __int8 *)(a6 + 8);
  *(_BYTE *)(a1 + 256) = v31;
  if (v31 && v30) {
    CFRetain(v30);
  }
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 272;
  *(void *)(a1 + 2(*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = a1 + 272;
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 2sub_19DFC(v32 - 96) = a1 + 296;
  *(void *)(a1 + 304) = a1 + 296;
  *(void *)(a1 + 312) = 0LL;
  sub_B1F7C(a1 + 320, (uint64_t)"Port Sibling/Partner List Mutex");
  if (*((char *)a8 + 23) < 0)
  {
    sub_24054((_BYTE *)(a1 + 408), *(void **)a8, *((void *)a8 + 1));
  }

  else
  {
    __int128 v32 = *a8;
    *(void *)(a1 + 424) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 408) = v32;
  }

  *(_BYTE *)(a1 + 4sub_7A768(v2 - 32) = 0;
  *(void *)(a1 + 448) = 0LL;
  *(void *)(a1 + 456) = 0LL;
  *(void *)(a1 + 440) = 0LL;
  sub_7A5B8( (void *)(a1 + 440),  *(const void **)a4,  *(void *)(a4 + 8),  (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  __int16 v33 = *(const __CFString **)(a5 + 32);
  if (!v33 && (*(void *)(a5 + 16) ? (__int16 v33 = *(const __CFString **)(a5 + 16)) : (__int16 v33 = *(const __CFString **)a5), !v33)
    || !CFStringGetLength(v33))
  {
    __int16 v34 = (os_log_t *)sub_138E8(23);
    uint64_t v35 = *v34;
    if (*v34)
    {
      if (os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        __int16 v40 = 1024;
        int v41 = 154;
        _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d port name is zero-length.", buf, 0x12u);
      }
    }
  }

  if (!*(void *)a6 || !CFStringGetLength(*(CFStringRef *)a6))
  {
    __int16 v36 = (os_log_t *)sub_138E8(23);
    int v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      __int16 v40 = 1024;
      int v41 = 156;
      _os_log_impl(&dword_0, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d inUID is zero-length.", buf, 0x12u);
    }
  }

  return a1;
}

void sub_F99CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  a11 = a10;
  sub_7A668(&a11);
  uint64_t v17 = *(std::__shared_weak_count **)(v11 + 88);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  sub_F3008(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_F9AB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_F9AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(__int32 **)(a1 + 448);
  __int128 v5 = wmemchr(*(const __int32 **)(a1 + 440), a2, ((uint64_t)v4 - *(void *)(a1 + 440)) >> 2);
  if (v5) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = v4;
  }
  if (v4 == v6) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 520LL))(a1, a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_F9B60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v6 = *(int ***)(a2 + 96);
  __int128 v7 = *(int ***)(a2 + 104);
  if (v6 == v7) {
    goto LABEL_31;
  }
  do
  {
    int v10 = *v6;
    uint64_t v11 = (std::__shared_weak_count *)v6[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      int v14 = *v10;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }

      if (v14 == (_DWORD)a4) {
        goto LABEL_14;
      }
    }

    else if (*v10 == (_DWORD)a4)
    {
      goto LABEL_14;
    }

    v6 += 2;
  }

  while (v6 != v7);
  BOOL v6 = v7;
LABEL_14:
  if (v6 == *(int ***)(a2 + 104))
  {
LABEL_31:
    int v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v36, a4);
      int v26 = v37;
      int v27 = (void **)v36[0];
      sub_2CA1C(__p, *(unsigned int *)(a2 + 144));
      char v28 = v36;
      if (v26 < 0) {
        char v28 = v27;
      }
      if (v35 >= 0) {
        int v29 = __p;
      }
      else {
        int v29 = (void **)__p[0];
      }
      *(_DWORD *)value = 136315906;
      *(void *)&value[4] = "Port.cpp";
      __int16 v39 = 1024;
      int v40 = 630;
      __int16 v41 = 2080;
      uint64_t v42 = v28;
      __int16 v43 = 2080;
      unint64_t v44 = v29;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to get polar pattern for unknown sub-port (%s) type on port with type %s.",  value,  0x26u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (v37 < 0) {
        operator delete(v36[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "Attempt to get polar pattern for unknown sub-port (%s) type on port with type %s.");
  }

  uint64_t v16 = *v6;
  if (!*((_BYTE *)*v6 + 16) || !*((_BYTE *)v16 + 24))
  {
    int v31 = (os_log_t *)sub_138E8(13);
    __int128 v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)value = 136315394;
      *(void *)&value[4] = "SubPort.cpp";
      __int16 v39 = 1024;
      int v40 = 195;
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", value, 0x12u);
    }

    __int16 v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Precondition failure.");
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = Mutable;
  *(_WORD *)(a1 + 8) = 257;
  sub_13408(a1, @"region", v16[3]);
  sub_13408(a1, @"orientation", v16[5]);
  CFMutableArrayRef v18 = CFArrayCreateMutable( 0LL,  ((*((void *)v16 + 5) - *((void *)v16 + 4)) >> 6),  &kCFTypeArrayCallBacks);
  *(void *)value = v18;
  *(_WORD *)&value[8] = 257;
  uint64_t v20 = *((void *)v16 + 4);
  uint64_t v19 = *((void *)v16 + 5);
  if (v20 != v19)
  {
    do
    {
      for (uint64_t i = *(_DWORD **)(v20 + 40); i != *(_DWORD **)(v20 + 48); ++i)
      {
        if (*i == a3) {
          goto LABEL_23;
        }
      }

      sub_1378C((uint64_t)value, *(_DWORD *)(v20 + 32));
LABEL_23:
      v20 += 64LL;
    }

    while (v20 != v19);
    CFMutableArrayRef v18 = *(CFMutableArrayRef *)value;
  }

  if (v18) {
    BOOL v22 = Mutable == 0LL;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22) {
    CFDictionarySetValue(Mutable, @"polar pattern", v18);
  }
  return sub_13818((uint64_t)value);
}

void sub_F9F14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_F9F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int ***)(a1 + 96);
  __int128 v5 = *(int ***)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_17;
  }
  do
  {
    BOOL v6 = *v4;
    __int128 v7 = (std::__shared_weak_count *)v4[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      int v10 = *v6;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }

      if (v10 == (_DWORD)a2) {
        goto LABEL_14;
      }
    }

    else if (*v6 == (_DWORD)a2)
    {
      goto LABEL_14;
    }

    v4 += 2;
  }

  while (v4 != v5);
  uint64_t v4 = v5;
LABEL_14:
  if (v4 == *(int ***)(a1 + 104))
  {
LABEL_17:
    uint64_t v13 = sub_138E8(23);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      int v14 = *(os_log_s **)v13;
      if (*(void *)v13)
      {
        BOOL result = os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        sub_2CA1C(v21, a2);
        int v15 = v22;
        int v16 = (void **)v21[0];
        sub_2CA1C(__p, *(unsigned int *)(a1 + 144));
        uint64_t v17 = v21;
        if (v15 < 0) {
          uint64_t v17 = v16;
        }
        if (v20 >= 0) {
          CFMutableArrayRef v18 = __p;
        }
        else {
          CFMutableArrayRef v18 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        int v24 = "Port.cpp";
        __int16 v25 = 1024;
        int v26 = 665;
        __int16 v27 = 2080;
        char v28 = v17;
        __int16 v29 = 2080;
        CFStringRef v30 = v18;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Unable to locate unknown sub-port (%s) type on port with type %s.",  buf,  0x26u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
    }
  }

  else if (*((_BYTE *)*v4 + 16))
  {
    return *((_BYTE *)*v4 + 24) != 0;
  }

  return 0LL;
}

void sub_FA168(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_FA188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 320;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 320) + 16LL))(a1 + 320);
  if (*(_BYTE *)(a1 + 432))
  {
    BOOL v6 = (os_log_t *)sub_138E8(23);
    __int128 v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_D3ECC(v14, (os_unfair_lock_s **)a2);
      int v8 = v15;
      unint64_t v9 = (void **)v14[0];
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      int v10 = v14;
      if (v8 < 0) {
        int v10 = v9;
      }
      if (v13 >= 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v17 = "Port.cpp";
      __int16 v18 = 1024;
      int v19 = 680;
      __int16 v20 = 2080;
      uint64_t v21 = v10;
      __int16 v22 = 2080;
      uint64_t v23 = v11;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Not adding sibling port %s to %s. This Port is already torn down",  buf,  0x26u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
  }

  else
  {
    sub_85C34((uint64_t *)(a1 + 272), *(void *)a2, *(void *)(a2 + 8));
  }

  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
}

void sub_FA310( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_FA368(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 320;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 320) + 16LL))(a2 + 320);
  BOOL result = sub_FA3F4(a1, *(void *)(a2 + 280), a2 + 272);
  if (v5) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return result;
}

void sub_FA3D0(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_FA3F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      sub_FA460(a1, (uint64_t *)(v5 + 16));
      uint64_t v5 = *(void *)(v5 + 8);
    }

    while (v5 != a3);
  }

  return a1;
}

void sub_FA44C(_Unwind_Exception *a1)
{
}

void *sub_FA460(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  BOOL result = sub_FA4C0(v4 + 2, a2);
  uint64_t v6 = *a1;
  *uint64_t v4 = *a1;
  v4[1] = a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void *sub_FA4C0(void *a1, uint64_t *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  int v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *a2;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      int v10 = (std::__shared_weak_count *)a1[1];
      *a1 = v7;
      a1[1] = v6;
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
LABEL_12:
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    else
    {
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      *a1 = 0LL;
      a1[1] = 0LL;
      if (v6) {
        goto LABEL_12;
      }
    }
  }

  return a1;
}

BOOL sub_FA56C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 320;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 320) + 16LL))(a1 + 320);
  int v6 = *(unsigned __int8 *)(a1 + 432);
  if (*(_BYTE *)(a1 + 432))
  {
    uint64_t v7 = (os_log_t *)sub_138E8(23);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      sub_D3ECC(v22, (os_unfair_lock_s **)a2);
      int v9 = v23;
      int v10 = (void **)v22[0];
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      unint64_t v11 = v22;
      if (v9 < 0) {
        unint64_t v11 = v10;
      }
      if (v21 >= 0) {
        unint64_t v12 = __p;
      }
      else {
        unint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v25 = "Port.cpp";
      __int16 v26 = 1024;
      int v27 = 710;
      __int16 v28 = 2080;
      __int16 v29 = v11;
      __int16 v30 = 2080;
      int v31 = v12;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Not adding partner port %s to %s. This Port is already torn down",  buf,  0x26u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
  }

  else if ((void *)(a1 + 296) == sub_FA870(*(void **)(a1 + 304), (void *)(a1 + 296), (uint64_t *)a2))
  {
    char v13 = (os_log_t *)sub_138E8(23);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_D3ECC(v22, (os_unfair_lock_s **)a2);
      int v15 = v23;
      int v16 = (void **)v22[0];
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      uint64_t v17 = v22;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v21 >= 0) {
        int v18 = __p;
      }
      else {
        int v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v25 = "Port.cpp";
      __int16 v26 = 1024;
      int v27 = 717;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2080;
      int v31 = v18;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d adding partner port (%s) to %s", buf, 0x26u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    sub_85C34((uint64_t *)(a1 + 296), *(void *)a2, *(void *)(a2 + 8));
  }

  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return v6 == 0;
}

void sub_FA808( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FA870(void *a1, void *a2, uint64_t *a3)
{
  int v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      int v6 = (std::__shared_weak_count *)v3[3];
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = v3[2];
          p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
          do
            unint64_t v11 = __ldxr(p_shared_weak_owners);
          while (__stxr(v11 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            unint64_t v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }

        else
        {
          uint64_t v9 = 0LL;
        }
      }

      else
      {
        uint64_t v9 = 0LL;
        int v8 = 0LL;
      }

      int v14 = (std::__shared_weak_count *)a3[1];
      if (!v14) {
        break;
      }
      int v15 = std::__shared_weak_count::lock(v14);
      int v16 = v15;
      if (v15)
      {
        uint64_t v17 = *a3;
        int v18 = (unint64_t *)&v15->__shared_weak_owners_;
        do
          unint64_t v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        __int16 v20 = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v16);
          if (!v8) {
            goto LABEL_29;
          }
          goto LABEL_23;
        }

        goto LABEL_22;
      }

      uint64_t v17 = 0LL;
      if (!v8)
      {
LABEL_29:
        uint64_t v23 = 0LL;
        __int16 v22 = 0LL;
        if (!v16) {
          goto LABEL_35;
        }
        goto LABEL_30;
      }

uint64_t *sub_FAA90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 320;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 320) + 16LL))(a2 + 320);
  BOOL result = sub_FA3F4(a1, *(void *)(a2 + 304), a2 + 296);
  if (v5) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return result;
}

void sub_FAAF8(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FAB1C( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7, __int128 *a8, uint64_t a9)
{
  int v10 = (void *)sub_F9638(a1, a2, a3, a4, a5, a6, a7, a8);
  *int v10 = off_46FF70;
  sub_82AF0((uint64_t)(v10 + 65), a9);
  sub_B1F7C(a1 + 552, (uint64_t)"Port Dynamic mutex");
  *(_BYTE *)(a1 + 640) = 0;
  return a1;
}

void sub_FAB7C(_Unwind_Exception *a1)
{
  int v3 = v2;
  int v5 = *(void **)(v1 + 544);
  if (v5 == v3)
  {
    int v6 = v3;
    uint64_t v7 = 4LL;
  }

  else
  {
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
    int v6 = *(void **)(v1 + 544);
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  sub_F8158(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FABCC( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7, __int128 *a8, char a9, char a10)
{
  uint64_t v11 = sub_F9638(a1, a2, a3, a4, a5, a6, a7, a8);
  *(void *)uint64_t v11 = off_4701A8;
  *(_BYTE *)(v11 + 520) = a10 ^ 1;
  *(_BYTE *)(v11 + 521) = a9;
  *(void *)(v11 + 528) = v11 + 528;
  *(void *)(v11 + 536) = v11 + 528;
  *(void *)(v11 + 544) = 0LL;
  sub_B1F7C(v11 + 552, (uint64_t)"Port Routability Mutex");
  if ((*(_WORD *)(a1 + 184) & 0x40) == 0)
  {
    unint64_t v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "Port.cpp";
      __int16 v18 = 1024;
      int v19 = 943;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): CanSetRoutable() must be true.",  (uint8_t *)&v16,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "CanSetRoutable() must be true.");
  }

  return a1;
}

void sub_FAD20(_Unwind_Exception *a1)
{
}

void *sub_FAD60(void *a1)
{
  *a1 = &off_4703D8;
  int v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_FAD98(void *__p)
{
  void *__p = &off_4703D8;
  int v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void sub_FADD0(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 312LL))(*(void *)(a1 + 8), v50);
  uint64_t v3 = *(unsigned int *)(v50 + 144);
  if (v4) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    __int16 v38 = (os_log_t *)sub_138E8(13);
    __int16 v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, v3);
      int v40 = v49 >= 0 ? __dst : (void **)__dst[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v53 = "RoutingHandlerAction_SetDSPParameter.cpp";
      __int16 v54 = 1024;
      int v55 = 28;
      __int16 v56 = 2080;
      uint64_t v57 = v40;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No dsp chain found for port type %s",  buf,  0x1Cu);
      if (SHIBYTE(v49) < 0) {
        operator delete(__dst[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No dsp chain found for port type %s");
  }

  uint64_t v6 = *(void *)(v2 + 136);
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 120LL))(v6, *(unsigned int *)(a1 + 16)) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(19);
    unint64_t v12 = *v11;
    if (!*v11 || !os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_72;
    }
    sub_2CA1C(__dst, *(unsigned int *)(a1 + 16));
    if (v49 >= 0) {
      unint64_t v13 = __dst;
    }
    else {
      unint64_t v13 = (void **)__dst[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unint64_t v53 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v54 = 1024;
    int v55 = 33;
    __int16 v56 = 2080;
    uint64_t v57 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d DSPChain with AU %s not found", buf, 0x1Cu);
    goto LABEL_70;
  }

  if (!(*(unsigned int (**)(uint64_t, void, void, void))(*(void *)v6 + 56LL))( v6,  *(unsigned int *)(a1 + 16),  *(unsigned int *)(a1 + 48),  0LL))
  {
    int v14 = (os_log_t *)sub_138E8(19);
    int v15 = *v14;
    if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_72;
    }
    if (*(char *)(v6 + 735) < 0)
    {
      sub_24054(__dst, *(void **)(v6 + 712), *(void *)(v6 + 720));
    }

    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v6 + 712);
      uint64_t v49 = *(void *)(v6 + 728);
    }

    if (v49 >= 0) {
      int v16 = __dst;
    }
    else {
      int v16 = (void **)__dst[0];
    }
    sub_2CA1C(v46, *(unsigned int *)(a1 + 48));
    int v17 = SHIBYTE(v47);
    __int16 v18 = (void **)v46[0];
    sub_2CA1C(v44, *(unsigned int *)(a1 + 16));
    int v19 = v46;
    if (v17 < 0) {
      int v19 = v18;
    }
    if (v45 >= 0) {
      __int16 v20 = v44;
    }
    else {
      __int16 v20 = (void **)v44[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    unint64_t v53 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v54 = 1024;
    int v55 = 51;
    __int16 v56 = 2080;
    uint64_t v57 = v16;
    __int16 v58 = 2080;
    double v59 = *(double *)&v19;
    __int16 v60 = 2080;
    uint64_t v61 = v20;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP chain : %s does not have Parameter %s for AU : %s",  buf,  0x30u);
    goto LABEL_66;
  }

  uint64_t v7 = (os_log_t *)sub_138E8(19);
  int v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = __dst;
    sub_2CA1C(__dst, *(unsigned int *)(a1 + 48));
    if (v49 < 0) {
      uint64_t v9 = (void **)__dst[0];
    }
    float v10 = *(float *)(a1 + 20);
    if (*(char *)(v6 + 735) < 0)
    {
      sub_24054(v46, *(void **)(v6 + 712), *(void *)(v6 + 720));
    }

    else
    {
      *(_OWORD *)unint64_t v46 = *(_OWORD *)(v6 + 712);
      uint64_t v47 = *(void *)(v6 + 728);
    }

    if (v47 >= 0) {
      unint64_t v21 = v46;
    }
    else {
      unint64_t v21 = (void **)v46[0];
    }
    sub_2CA1C(v44, *(unsigned int *)(a1 + 16));
    int v22 = v45;
    uint64_t v23 = (void **)v44[0];
    sub_2CA1C(__p, v3);
    int v24 = v44;
    if (v22 < 0) {
      int v24 = v23;
    }
    __int16 v25 = (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
    if (v43 >= 0) {
      __int16 v25 = __p;
    }
    unint64_t v53 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v54 = 1024;
    int v55 = 40;
    __int16 v56 = 2080;
    uint64_t v57 = v9;
    __int16 v58 = 2048;
    double v59 = v10;
    __int16 v60 = 2080;
    uint64_t v61 = v21;
    __int16 v62 = 2080;
    __int16 v63 = v24;
    __int16 v64 = 2080;
    __int16 v65 = v25;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting Parameter (%s, %f) for chain : %s AU : %s Port type : %s",  buf,  0x44u);
    if (v43 < 0) {
      operator delete(__p[0]);
    }
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(__dst[0]);
    }
  }

  if ((*(unsigned int (**)(uint64_t, void, void, void, float))(*(void *)v6 + 72LL))( v6,  *(unsigned int *)(a1 + 16),  *(unsigned int *)(a1 + 48),  0LL,  *(float *)(a1 + 20)))
  {
    BOOL v26 = (os_log_t *)sub_138E8(19);
    int v27 = *v26;
    if (*v26)
    {
      if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        unint64_t v28 = __dst;
        sub_2CA1C(__dst, *(unsigned int *)(a1 + 48));
        if (v49 < 0) {
          unint64_t v28 = (void **)__dst[0];
        }
        float v29 = *(float *)(a1 + 20);
        if (*(char *)(v6 + 735) < 0)
        {
          sub_24054(v46, *(void **)(v6 + 712), *(void *)(v6 + 720));
        }

        else
        {
          *(_OWORD *)unint64_t v46 = *(_OWORD *)(v6 + 712);
          uint64_t v47 = *(void *)(v6 + 728);
        }

        if (v47 >= 0) {
          unint64_t v30 = v46;
        }
        else {
          unint64_t v30 = (void **)v46[0];
        }
        sub_2CA1C(v44, *(unsigned int *)(a1 + 16));
        int v31 = v45;
        __int128 v32 = (void **)v44[0];
        sub_2CA1C(__p, v3);
        __int16 v33 = v44;
        if (v31 < 0) {
          __int16 v33 = v32;
        }
        __int16 v34 = (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        if (v43 >= 0) {
          __int16 v34 = __p;
        }
        unint64_t v53 = "RoutingHandlerAction_SetDSPParameter.cpp";
        __int16 v54 = 1024;
        int v55 = 46;
        __int16 v56 = 2080;
        uint64_t v57 = v28;
        __int16 v58 = 2048;
        double v59 = v29;
        __int16 v60 = 2080;
        uint64_t v61 = v30;
        __int16 v62 = 2080;
        __int16 v63 = v33;
        __int16 v64 = 2080;
        __int16 v65 = v34;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error setting DSP Parameter  (%s, %f) for chain : %s AU : %s Port type : %s",  buf,  0x44u);
        if (v43 < 0) {
          operator delete(__p[0]);
        }
LABEL_66:
        if (v45 < 0) {
          operator delete(v44[0]);
        }
        if (SHIBYTE(v47) < 0) {
          operator delete(v46[0]);
        }
LABEL_70:
        if (SHIBYTE(v49) < 0) {
          operator delete(__dst[0]);
        }
      }
    }
  }

void sub_FB4C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_FB594(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 312LL))(*(void *)(a1 + 8), v53);
  uint64_t v3 = *(unsigned int *)(v53 + 144);
  if (v4) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    __int16 v41 = (os_log_t *)sub_138E8(13);
    uint64_t v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, v3);
      char v43 = v52 >= 0 ? __dst : (void **)__dst[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v56 = "RoutingHandlerAction_SetDSPParameter.cpp";
      __int16 v57 = 1024;
      int v58 = 61;
      __int16 v59 = 2080;
      __int16 v60 = v43;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No dsp chain found for port type %s",  buf,  0x1Cu);
      if (SHIBYTE(v52) < 0) {
        operator delete(__dst[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No dsp chain found for port type %s");
  }

  uint64_t v6 = *(void *)(v2 + 136);
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 120LL))(v6, *(unsigned int *)(a1 + 16)) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(19);
    unint64_t v12 = *v11;
    if (!*v11 || !os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    if (*(char *)(v6 + 735) < 0)
    {
      sub_24054(__dst, *(void **)(v6 + 712), *(void *)(v6 + 720));
    }

    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v6 + 712);
      uint64_t v52 = *(void *)(v6 + 728);
    }

    int v15 = SHIBYTE(v52);
    int v16 = (void **)__dst[0];
    sub_2CA1C(v49, *(unsigned int *)(a1 + 16));
    int v17 = __dst;
    if (v15 < 0) {
      int v17 = v16;
    }
    if (v50 >= 0) {
      __int16 v18 = v49;
    }
    else {
      __int16 v18 = (void **)v49[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    __int16 v56 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v57 = 1024;
    int v58 = 67;
    __int16 v59 = 2080;
    __int16 v60 = v17;
    __int16 v61 = 2080;
    double v62 = *(double *)&v18;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d DSPChain %s with AU %s not found", buf, 0x26u);
    goto LABEL_73;
  }

  if (!(*(unsigned int (**)(uint64_t, void, void, void))(*(void *)v6 + 56LL))( v6,  *(unsigned int *)(a1 + 16),  *(unsigned int *)(a1 + 48),  0LL))
  {
    unint64_t v13 = (os_log_t *)sub_138E8(19);
    int v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    if (*(char *)(v6 + 735) < 0)
    {
      sub_24054(__dst, *(void **)(v6 + 712), *(void *)(v6 + 720));
    }

    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v6 + 712);
      uint64_t v52 = *(void *)(v6 + 728);
    }

    if (v52 >= 0) {
      int v19 = __dst;
    }
    else {
      int v19 = (void **)__dst[0];
    }
    sub_2CA1C(v49, *(unsigned int *)(a1 + 48));
    int v20 = SHIBYTE(v50);
    unint64_t v21 = (void **)v49[0];
    sub_2CA1C(v47, *(unsigned int *)(a1 + 16));
    int v22 = v49;
    if (v20 < 0) {
      int v22 = v21;
    }
    if (v48 >= 0) {
      uint64_t v23 = v47;
    }
    else {
      uint64_t v23 = (void **)v47[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    __int16 v56 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v57 = 1024;
    int v58 = 85;
    __int16 v59 = 2080;
    __int16 v60 = v19;
    __int16 v61 = 2080;
    double v62 = *(double *)&v22;
    __int16 v63 = 2080;
    __int16 v64 = v23;
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP chain : %s does not have Parameter %s for AU : %s",  buf,  0x30u);
    goto LABEL_71;
  }

  uint64_t v7 = (os_log_t *)sub_138E8(19);
  int v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = __dst;
    sub_2CA1C(__dst, *(unsigned int *)(a1 + 48));
    if (v52 < 0) {
      uint64_t v9 = (void **)__dst[0];
    }
    float v10 = *(float *)(a1 + 24);
    if (*(char *)(v6 + 735) < 0)
    {
      sub_24054(v49, *(void **)(v6 + 712), *(void *)(v6 + 720));
    }

    else
    {
      *(_OWORD *)uint64_t v49 = *(_OWORD *)(v6 + 712);
      uint64_t v50 = *(void *)(v6 + 728);
    }

    if (v50 >= 0) {
      int v24 = v49;
    }
    else {
      int v24 = (void **)v49[0];
    }
    sub_2CA1C(v47, *(unsigned int *)(a1 + 16));
    int v25 = v48;
    BOOL v26 = (void **)v47[0];
    sub_2CA1C(__p, v3);
    int v27 = v47;
    if (v25 < 0) {
      int v27 = v26;
    }
    unint64_t v28 = (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
    if (v46 >= 0) {
      unint64_t v28 = __p;
    }
    __int16 v56 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v57 = 1024;
    int v58 = 74;
    __int16 v59 = 2080;
    __int16 v60 = v9;
    __int16 v61 = 2048;
    double v62 = v10;
    __int16 v63 = 2080;
    __int16 v64 = v24;
    __int16 v65 = 2080;
    __int16 v66 = v27;
    __int16 v67 = 2080;
    uint64_t v68 = v28;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting Parameter (%s, %f) for chain : %s AU : %s Port type : %s",  buf,  0x44u);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete(v49[0]);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(__dst[0]);
    }
  }

  if ((*(unsigned int (**)(uint64_t, void, void, void, float))(*(void *)v6 + 72LL))( v6,  *(unsigned int *)(a1 + 16),  *(unsigned int *)(a1 + 48),  0LL,  *(float *)(a1 + 24)))
  {
    float v29 = (os_log_t *)sub_138E8(19);
    unint64_t v30 = *v29;
    if (*v29)
    {
      if (os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        int v31 = __dst;
        sub_2CA1C(__dst, *(unsigned int *)(a1 + 48));
        if (v52 < 0) {
          int v31 = (void **)__dst[0];
        }
        float v32 = *(float *)(a1 + 24);
        if (*(char *)(v6 + 735) < 0)
        {
          sub_24054(v49, *(void **)(v6 + 712), *(void *)(v6 + 720));
        }

        else
        {
          *(_OWORD *)uint64_t v49 = *(_OWORD *)(v6 + 712);
          uint64_t v50 = *(void *)(v6 + 728);
        }

        if (v50 >= 0) {
          __int16 v33 = v49;
        }
        else {
          __int16 v33 = (void **)v49[0];
        }
        sub_2CA1C(v47, *(unsigned int *)(a1 + 16));
        int v34 = v48;
        char v35 = (void **)v47[0];
        sub_2CA1C(__p, v3);
        __int16 v36 = v47;
        if (v34 < 0) {
          __int16 v36 = v35;
        }
        unint64_t v37 = (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        if (v46 >= 0) {
          unint64_t v37 = __p;
        }
        __int16 v56 = "RoutingHandlerAction_SetDSPParameter.cpp";
        __int16 v57 = 1024;
        int v58 = 80;
        __int16 v59 = 2080;
        __int16 v60 = v31;
        __int16 v61 = 2048;
        double v62 = v32;
        __int16 v63 = 2080;
        __int16 v64 = v33;
        __int16 v65 = 2080;
        __int16 v66 = v36;
        __int16 v67 = 2080;
        uint64_t v68 = v37;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error setting DSP Parameter (%s, %f) for chain : %s AU : %s Port type : %s",  buf,  0x44u);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
LABEL_71:
        if (v48 < 0) {
          operator delete(v47[0]);
        }
LABEL_73:
        if (SHIBYTE(v50) < 0) {
          operator delete(v49[0]);
        }
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst[0]);
        }
      }
    }
  }

void sub_FBCD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void *sub_FBDB4(uint64_t a1, os_unfair_lock_s *a2)
{
  if (sub_FC61C(a1, (unint64_t)a2) != a1)
  {
    __int16 v59 = (os_log_t *)sub_138E8(13);
    __int16 v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)__p, a2 + 2);
      __int16 v61 = v67 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 221;
      __int16 v69 = 2080;
      uint64_t v70 = v61;
      _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Port %s is already in the container",  buf,  0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Port %s is already in the container");
  }

  BOOL v5 = (void **)(a1 + 24);
  if (sub_FC6AC((void *)(a1 + 24), (unint64_t)a2))
  {
    __int16 v63 = (os_log_t *)sub_138E8(13);
    __int16 v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "FastLookupList.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 106;
      _os_log_impl(&dword_0, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    __int16 v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v65, "Precondition failure.");
  }

  uint64_t v6 = operator new(0x18uLL);
  v6[1] = a1;
  v6[2] = a2;
  uint64_t v7 = *(void *)a1;
  void *v6 = *(void *)a1;
  *(void *)(v7 + 8) = v6;
  *(void *)a1 = v6;
  ++*(void *)(a1 + 16);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * ((((((unint64_t)a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ ((unint64_t)a2 >> 32));
  unint64_t v9 = 0x9DDFEA08EB382D69LL * (((unint64_t)a2 >> 32) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69LL * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 32);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69LL * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v2 = v10 % v11;
      }
    }

    else
    {
      unint64_t v2 = v10 & (v11 - 1);
    }

    unint64_t v13 = (void *)*((void *)*v5 + v2);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if ((os_unfair_lock_s *)i[2] == a2) {
            goto LABEL_76;
          }
        }

        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }

          else
          {
            v15 &= v11 - 1;
          }

          if (v15 != v2) {
            break;
          }
        }
      }
    }
  }

  int v16 = operator new(0x20uLL);
  *int v16 = 0LL;
  v16[1] = v10;
  v16[2] = a2;
  uint64_t v16[3] = v6;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 48) + 1LL);
  float v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *(void *)(a1 + 32);
    }

    if (*(void *)&prime > v11) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }

      else
      {
        uint64_t v31 = 1LL << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }

      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 32);
      }

      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          uint64_t v23 = operator new(8LL * *(void *)&prime);
          int v24 = *v5;
          void *v5 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0LL;
          *(int8x8_t *)(a1 + sub_7A768(v2 - 32) = prime;
          do
            *((void *)*v5 + v25++) = 0LL;
          while (*(void *)&prime != v25);
          BOOL v26 = *(void **)(a1 + 40);
          if (v26)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }

            else
            {
              v27 &= *(void *)&prime - 1LL;
            }

            *((void *)*v5 + v27) = a1 + 40;
            float v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }

                else
                {
                  v33 &= *(void *)&prime - 1LL;
                }

                if (v33 != v27)
                {
                  if (!*((void *)*v5 + v33))
                  {
                    *((void *)*v5 + v33) = v26;
                    goto LABEL_57;
                  }

                  void *v26 = *v32;
                  void *v32 = **((void **)*v5 + v33);
                  **((void **)*v5 + v33) = v32;
                  float v32 = v26;
                }

                unint64_t v33 = v27;
LABEL_57:
                BOOL v26 = v32;
                float v32 = (void *)*v32;
                unint64_t v27 = v33;
              }

              while (v32);
            }
          }

          unint64_t v11 = (unint64_t)prime;
          goto LABEL_61;
        }

        int v58 = *v5;
        void *v5 = 0LL;
        if (v58) {
          operator delete(v58);
        }
        unint64_t v11 = 0LL;
        *(void *)(a1 + sub_7A768(v2 - 32) = 0LL;
      }
    }

void sub_FC5DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_FC61C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  char v4 = (void *)(a1 + 24);
  if (sub_FC6AC((void *)(a1 + 24), a2)) {
    return sub_FC794(v4, a2)[3];
  }
  return v3;
}

void sub_FC668(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_68314(v1 + 3);
    }
    operator delete(v1);
  }

void *sub_FC6AC(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * (((8 * a2) + 8LL) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  BOOL result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      BOOL result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *sub_FC794(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * (((8 * a2) + 8LL) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  BOOL result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      BOOL result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void sub_FC87C(void *a1, uint64_t **a2)
{
  int8x8_t v2 = (int8x8_t)a1[9];
  if (!*(void *)&v2) {
    goto LABEL_17;
  }
  uint64_t v5 = (*a2)[2];
  unint64_t v6 = *(unsigned int *)(v5 + 144);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = *(unsigned int *)(v5 + 144);
    if (*(void *)&v2 <= v6) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v8 = (v2.i32[0] - 1) & v6;
  }

  unint64_t v9 = *(uint64_t ***)(a1[8] + 8 * v8);
  if (!v9 || (unint64_t v10 = *v9) == 0LL) {
LABEL_17:
  }
    sub_8F9A4("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == v6) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v2) {
        v11 %= *(void *)&v2;
      }
    }

    else
    {
      v11 &= *(void *)&v2 - 1LL;
    }

    if (v11 != v8) {
      goto LABEL_17;
    }
LABEL_16:
    unint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_17;
    }
  }

  if (*((_DWORD *)v10 + 4) != (_DWORD)v6) {
    goto LABEL_16;
  }
  uint8x8_t v12 = v10 + 3;
  for (uint64_t i = (uint64_t *)v10[4]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v12) {
      goto LABEL_51;
    }
    if (i[2] == v5) {
      break;
    }
  }

  if (v12 == i)
  {
LABEL_51:
    uint8x8_t v28 = (os_log_t *)sub_138E8(13);
    unint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = (*a2)[2];
      int v32 = 136315650;
      unint64_t v33 = "PortManager.cpp";
      __int16 v34 = 1024;
      int v35 = 235;
      __int16 v36 = 2048;
      uint64_t v37 = v30;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not find port at %p in port type to port iter map",  (uint8_t *)&v32,  0x1Cu);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find port at %p in port type to port iter map");
  }

  uint64_t v14 = *i;
  *(void *)(v14 + 8) = i[1];
  *(void *)i[1] = v14;
  --v10[5];
  operator delete(i);
  unint64_t v15 = *a2;
  int v16 = a1 + 3;
  float v17 = sub_FC794(a1 + 3, v15[2]);
  if (v17)
  {
    int8x8_t v18 = (int8x8_t)a1[4];
    unint64_t v19 = v17[1];
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v18) {
        v19 %= *(void *)&v18;
      }
    }

    else
    {
      v19 &= *(void *)&v18 - 1LL;
    }

    unint64_t v21 = *(void **)(*v16 + 8 * v19);
    do
    {
      int v22 = v21;
      unint64_t v21 = (void *)*v21;
    }

    while (v21 != v17);
    if (v22 == a1 + 5) {
      goto LABEL_40;
    }
    unint64_t v23 = v22[1];
    if (v20.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&v18) {
        v23 %= *(void *)&v18;
      }
    }

    else
    {
      v23 &= *(void *)&v18 - 1LL;
    }

    if (v23 != v19)
    {
LABEL_40:
      if (!*v17) {
        goto LABEL_41;
      }
      unint64_t v24 = *(void *)(*v17 + 8LL);
      if (v20.u32[0] > 1uLL)
      {
        if (v24 >= *(void *)&v18) {
          v24 %= *(void *)&v18;
        }
      }

      else
      {
        v24 &= *(void *)&v18 - 1LL;
      }

      if (v24 != v19) {
LABEL_41:
      }
        *(void *)(*v16 + 8 * v19) = 0LL;
    }

    uint64_t v25 = *v17;
    if (*v17)
    {
      unint64_t v26 = *(void *)(v25 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v26 >= *(void *)&v18) {
          v26 %= *(void *)&v18;
        }
      }

      else
      {
        v26 &= *(void *)&v18 - 1LL;
      }

      if (v26 != v19)
      {
        *(void *)(*v16 + 8 * v26) = v22;
        uint64_t v25 = *v17;
      }
    }

    *int v22 = v25;
    void *v17 = 0LL;
    --a1[6];
    operator delete(v17);
  }

  uint64_t v27 = *v15;
  *(void *)(v27 + 8) = v15[1];
  *(void *)v15[1] = v27;
  --a1[2];
  operator delete(v15);
}

void sub_FCBF4(_Unwind_Exception *exception_object)
{
}

void sub_FCC10(_DWORD *a1, int a2)
{
  os_log_t v4 = (os_log_t)operator new(0x10uLL);
  *(void *)os_log_t v4 = a1;
  *((_BYTE *)v4 + 8) = 0;
  *((_BYTE *)v4 + 8) = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1);
  int v5 = a1[114];
  if (!v5)
  {
    unint64_t v19 = (os_log_t *)sub_138E8(13);
    uint8x8_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v29 = "PortManager.cpp";
      __int16 v30 = 1024;
      int v31 = 794;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint8x8_t v7 = a1 + 62;
  uint64_t v6 = *((void *)a1 + 31);
  a1[114] = v5 - 1;
  int v8 = (*(uint64_t (**)(_DWORD *))(v6 + 16))(a1 + 62);
  if (sub_FD118(a1))
  {
    if (!a2) {
      goto LABEL_38;
    }
    sub_FD804(v4);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v7 + 64LL))(a1 + 62, 50000000LL))
    {
      unint64_t v9 = (os_log_t *)sub_138E8(9);
      os_log_t v4 = *v9;
      if (!*v9) {
        goto LABEL_38;
      }
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v29 = "PortManager.cpp";
        __int16 v30 = 1024;
        int v31 = 830;
        __int16 v32 = 1024;
        LODWORD(v33) = 50;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Timed out while waiting %d ms for notifications to resume. Continuing thread execution.",  buf,  0x18u);
      }
    }

    os_log_t v4 = 0LL;
  }

  else
  {
    uint64_t v10 = sub_138E8(9);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      unint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          std::to_string(&v27, *((void *)a1 + 53));
          if ((v27.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint8x8_t v12 = &v27;
          }
          else {
            uint8x8_t v12 = (std::string *)v27.__r_.__value_.__r.__words[0];
          }
          sub_2D9F18(&v26, (uint64_t)(a1 + 102));
          if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t v13 = &v26;
          }
          else {
            unint64_t v13 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          std::to_string(&v25, *((void *)a1 + 56));
          int v22 = v13;
          if ((v25.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v14 = &v25;
          }
          else {
            uint64_t v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
          }
          sub_2D9F18(&v24, (uint64_t)(a1 + 108));
          int size = (char)v24.__r_.__value_.__s.__size_;
          std::string::size_type v16 = v24.__r_.__value_.__r.__words[0];
          sub_FD164(&__p, (void *)a1 + 48);
          float v17 = &v24;
          if (size < 0) {
            float v17 = (std::string *)v16;
          }
          uint64_t p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
          unint64_t v29 = "PortManager.cpp";
          __int16 v30 = 1024;
          int v31 = 806;
          __int16 v32 = 2080;
          unint64_t v33 = v12;
          __int16 v34 = 2080;
          int v35 = v22;
          __int16 v36 = 2080;
          uint64_t v37 = v14;
          __int16 v38 = 2080;
          unint64_t v39 = v17;
          __int16 v40 = 2080;
          __int16 v41 = p_p;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resuming suspended notifications\n %s connected ports: %s\n %s disconnected ports: %s\n PortUpdateMap: %s",  buf,  0x44u);
        }
      }
    }

    if (*((void *)a1 + 50)) {
      sub_FD324((uint64_t)a1, (void *)a1 + 48, (void *)a1 + 51, (void *)a1 + 54);
    }
    sub_EDF34(*((void **)a1 + 49));
    *((void *)a1 + 49) = 0LL;
    *((void *)a1 + 50) = 0LL;
    *((void *)a1 + 48) = a1 + 98;
    sub_85B80((uint64_t *)a1 + 51);
    sub_85B80((uint64_t *)a1 + 54);
    (*(void (**)(_DWORD *))(*((void *)a1 + 31) + 88LL))(a1 + 62);
  }

void sub_FD030( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24LL))(v37);
  }
  if (v36) {
    sub_FD804(v36);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_FD118(_DWORD *a1)
{
  int v2 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1);
  int v3 = a1[114];
  if (v2) {
    (*(void (**)(_DWORD *))(*(void *)a1 + 24LL))(a1);
  }
  return v3 != 0;
}

std::string *sub_FD164(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v6 = (void *)*a2;
  os_log_t v4 = a2 + 1;
  int v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      std::string::append(a1, "'", 1uLL);
      sub_2CA1C(&__p, *((unsigned int *)v5 + 8));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      std::string::append(a1, "': ", 3uLL);
      sub_2D9BB0(&__p, (uint64_t)(v5 + 5), 1);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v9 = &__p;
      }
      else {
        unint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v10 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v9, v10);
      unint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          uint8x8_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint8x8_t v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          int v5 = v12;
        }

        while (!v13);
      }

      if (v12 == v4) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      int v5 = v12;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_FD2E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_FD324(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = sub_5954C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 304LL))(v8))
  {
    uint64_t v9 = sub_5954C();
    std::string::size_type v10 = operator new(0x60uLL);
    *((_DWORD *)v10 + 2) = 0;
    *(void *)std::string::size_type v10 = off_470410;
    *((void *)v10 + 2) = a1;
    sub_FD840((uint64_t)v10 + 24, a2);
    sub_EE1E8((uint64_t *)v10 + 6, a3);
    sub_EE1E8((uint64_t *)v10 + 9, a4);
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 328LL))(v9, v10);
  }

  else
  {
    uint8x8_t v12 = (os_log_t *)sub_138E8(9);
    BOOL v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
    {
      sub_FD164(&__p, a2);
      uint64_t v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      __int16 v35 = 1024;
      int v36 = 749;
      __int16 v37 = 2080;
      int v38 = v14;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "%25s:%-5d synchronously updating Ports: %s", buf, 0x1Cu);
    }

    if (!a2[2])
    {
      std::string v26 = (os_log_t *)sub_138E8(13);
      std::string v27 = *v26;
      if (*v26)
      {
        if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "PortManager.cpp";
          __int16 v35 = 1024;
          int v36 = 750;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: called with empty port update map.",  buf,  0x12u);
        }
      }
    }

    sub_FD8E8((void *)a1, (uint64_t)a3);
    sub_FD9DC(a1, a2, a3, (uint64_t)a4);
    for (uint64_t i = (void *)a3[1]; i != a3; uint64_t i = (void *)i[1])
      sub_FE3AC((void *)a1, i + 2);
    uint64_t v16 = sub_5954C();
    float v17 = operator new(0x28uLL);
    v17[2] = 0;
    *(void *)float v17 = off_470440;
    sub_FD840((uint64_t)(v17 + 4), a2);
    (*(void (**)(uint64_t, _DWORD *))(*(void *)v16 + 328LL))(v16, v17);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    int v18 = result;
    __int128 v32 = *(_OWORD *)(a1 + 192);
    if ((void)v32 && a4[2])
    {
      uint64_t v19 = sub_138E8(9);
      uint64_t v20 = sub_138E8(15);
      char v21 = 0;
      uint64_t v22 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v23 = *(void *)(v19 + 8);
      while (1)
      {
        uint64_t v24 = *(int *)&buf[4 * v22];
        char v25 = v21;
        if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
          break;
        }
        char v21 = 1;
        uint64_t v22 = 1LL;
        if ((v25 & 1) != 0)
        {
          if ((v23 & 1) == 0) {
            goto LABEL_34;
          }
          goto LABEL_27;
        }
      }

      if ((v23 & v24) == 0) {
        uint64_t v19 = v20;
      }
      if ((*(void *)(v19 + 8) & 1) != 0)
      {
LABEL_27:
        uint8x8_t v28 = *(os_log_s **)v19;
        if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          sub_FEC64(&__p, a4[1], (uint64_t)a4);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t p_p = &__p;
          }
          else {
            uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "PortManager.cpp";
          __int16 v35 = 1024;
          int v36 = 770;
          __int16 v37 = 2080;
          int v38 = p_p;
          _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Queueing port disconnections (%s) for notification.",  buf,  0x1Cu);
        }
      }

void sub_FD77C(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_FD804(_BYTE *__p)
{
  if (__p[8]) {
    (*(void (**)(void))(**(void **)__p + 24LL))();
  }
  operator delete(__p);
}

uint64_t sub_FD840(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  int v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  os_log_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_EDF74((uint64_t **)a1, v3, *((_DWORD *)v5 + 8), (uint64_t)(v5 + 4));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint8x8_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint8x8_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }

        while (!v8);
      }

      int v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_FD8D4(_Unwind_Exception *a1)
{
}

uint64_t sub_FD8E8(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  int v5 = result;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))a1[24];
  if (*(void *)(a2 + 16)) {
    BOOL v7 = v6 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = a1[25];
    sub_34AA0(&v9, (uint64_t)a1);
    uint64_t result = v6(a2, v8);
    if (v10) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16LL))(v9);
    }
  }

  if (v5) {
    return (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  }
  return result;
}

void sub_FD994( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a9 + 16LL))(a9);
  }
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_FD9DC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  int v68 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  sub_FFA7C(*(void **)(a1 + 472));
  *(void *)(a1 + 472) = 0LL;
  *(void *)(a1 + 4(*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0LL;
  *(void *)(a1 + 464) = a1 + 472;
  uint64_t v71 = a1;
  if (a3[2])
  {
    uint64_t v6 = (void *)a3[1];
    if (v6 != a3)
    {
      while (1)
      {
        BOOL v7 = (std::__shared_weak_count *)v6[3];
        if (!v7) {
          break;
        }
        uint64_t v8 = std::__shared_weak_count::lock(v7);
        if (!v8) {
          goto LABEL_14;
        }
        uint64_t v9 = (os_unfair_lock_s *)v6[2];
        if (!v9) {
          goto LABEL_14;
        }
        uint64_t v10 = (os_log_t *)sub_138E8(9);
        int v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
        {
          sub_23FE8((uint64_t)__p, v9 + 2);
          uint8x8_t v12 = __p;
          if (v81 < 0) {
            uint8x8_t v12 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "PortManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 670;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&uint8_t buf[20] = v12;
          _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding port %s", buf, 0x1Cu);
          if (v81 < 0) {
            operator delete(__p[0]);
          }
        }

        sub_FBDB4(a1 + 88, v9);
LABEL_18:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }

void sub_FE2A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_FE3AC(void *a1, uint64_t *a2)
{
  int v3 = a1;
  int j = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  sub_B8CBC(&v78, a2, "", 433);
  (*(void (**)(void **__return_ptr))(*(void *)v78 + 264LL))(&__s1);
  size_t v5 = v77;
  unsigned __int8 v6 = v77;
  if ((v77 & 0x80u) != 0) {
    size_t v5 = __n;
  }
  if (!v5) {
    goto LABEL_124;
  }
  int v71 = j;
  memset(__p, 0, 24);
  strcpy(&__p[24], "cwdv");
  BYTE2(v88) = 0;
  LODWORD(v90) = 3;
  *((void *)&v91 + 1) = 0LL;
  uint64_t v92 = 0LL;
  *(void *)&__int128 v91 = (char *)&v91 + 8;
  int v93 = 44739242;
  CFTypeRef cf = 0LL;
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_470708;
  uint64_t v86 = &v85;
  uint64_t v70 = v3;
  sub_FF3FC((uint64_t *)&v83, (uint64_t)v3, (unsigned int **)__p, (uint64_t)&v85);
  BOOL v7 = v86;
  if (v86 == &v85)
  {
    uint64_t v8 = 4LL;
    BOOL v7 = &v85;
    goto LABEL_8;
  }

  if (v86)
  {
    uint64_t v8 = 5LL;
LABEL_8:
    (*(void (**)(void))(v7->__r_.__value_.__r.__words[0] + 8 * v8))();
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(*((void **)&v91 + 1));
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }

  sub_EE1E8((uint64_t *)__p, v3 + 51);
  sub_FF6B4(&v83, (uint64_t *)&v83, *(void **)&__p[8], __p);
  os_log_t v72 = &v72;
  uint64_t v73 = (uint64_t *)&v72;
  uint64_t v74 = 0LL;
  sub_EDD50((uint64_t *)&v85, &v83);
  for (uint64_t i = (std::string *)v85.__r_.__value_.__l.__size_; i != &v85; uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
  {
    sub_FA368((uint64_t *)v80, v78);
    sub_9DCB8(v82, v80);
    sub_85B80((uint64_t *)v80);
    uint64_t v10 = (uint64_t *)v82[1];
    std::string::size_type cap = i->__r_.__value_.__l.__cap_;
    while (v10 != v82)
    {
      if (v10[2] == cap) {
        goto LABEL_90;
      }
      uint64_t v10 = (uint64_t *)v10[1];
    }

    (*(void (**)(void **__return_ptr))(*(void *)cap + 264LL))(v80);
    std::string::size_type v13 = i->__r_.__value_.__l.__cap_;
    data = (std::__shared_weak_count *)i[1].__r_.__value_.__l.__data_;
    if (data)
    {
      p_shared_weak_owners = (unint64_t *)&data->__shared_weak_owners_;
      do
        unint64_t v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
    }

    unint64_t v16 = (std::__shared_weak_count *)a2[1];
    if (v16)
    {
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      int v18 = v17;
      if (v17)
      {
        uint64_t v19 = *a2;
        uint64_t v20 = (unint64_t *)&v17->__shared_weak_owners_;
        do
          unint64_t v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (v23)
        {
          if (!data) {
            goto LABEL_35;
          }
        }

        else
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
          if (!data)
          {
LABEL_35:
            std::string::size_type v25 = 0LL;
            uint64_t v24 = 0LL;
            if (!v18) {
              goto LABEL_43;
            }
            goto LABEL_36;
          }
        }
      }

      else
      {
        uint64_t v19 = 0LL;
        if (!data) {
          goto LABEL_35;
        }
      }
    }

    else
    {
      uint64_t v19 = 0LL;
      int v18 = 0LL;
      if (!data) {
        goto LABEL_35;
      }
    }

    uint64_t v24 = std::__shared_weak_count::lock(data);
    if (v24) {
      std::string::size_type v25 = v13;
    }
    else {
      std::string::size_type v25 = 0LL;
    }
    if (!v18)
    {
LABEL_43:
      BOOL v28 = v25 == 0;
      if (!v24) {
        goto LABEL_47;
      }
      goto LABEL_44;
    }

LABEL_70:
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    if (data) {
      std::__shared_weak_count::__release_weak(data);
    }
LABEL_88:
LABEL_90:
    sub_1BB88(v82);
  }

  sub_1BB88((uint64_t *)&v85);
  sub_85B80((uint64_t *)__p);
  sub_85B80((uint64_t *)&v83);
  if (v74)
  {
    uint64_t v51 = (os_log_t *)sub_138E8(9);
    uint64_t v52 = *v51;
    if (*v51)
    {
      if (os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v53 = v74;
        if (v74 == 1) {
          uint64_t v54 = "";
        }
        else {
          uint64_t v54 = "s";
        }
        int v55 = *(const void **)(v78 + 248);
        uint64_t v83 = v55;
        char v84 = *(_BYTE *)(v78 + 256);
        if (v84 && v55)
        {
          CFRetain(v55);
          int v55 = v83;
        }

        sub_FEE90(&v85, (uint64_t)v73, (uint64_t)&v72);
        if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int16 v56 = &v85;
        }
        else {
          __int16 v56 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136316418;
        *(void *)&__p[4] = "PortManager.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 470;
        *(_WORD *)&_BYTE __p[18] = 2048;
        *(void *)&__p[20] = v53;
        *(_WORD *)&__p[28] = 2080;
        CFTypeRef v88 = v54;
        __int16 v89 = 2112;
        unint64_t v90 = v55;
        LOWORD(v91) = 2080;
        *(void *)((char *)&v91 + 2) = v56;
        _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found %ld prospective partner port%s for port %@: %s",  __p,  0x3Au);
        sub_19DFC((uint64_t)&v83);
      }
    }
  }

  int v3 = v70;
  sub_EDD50((uint64_t *)__p, &v72);
  uint64_t v57 = *(void *)&__p[8];
  for (j = v71; (_BYTE *)v57 != __p; uint64_t v57 = *(void *)(v57 + 8))
  {
    uint64_t v58 = v78;
    unint64_t v59 = *(std::__shared_weak_count **)(v57 + 24);
    v85.__r_.__value_.__r.__words[0] = *(void *)(v57 + 16);
    v85.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
    if (v59)
    {
      __int16 v60 = (unint64_t *)&v59->__shared_weak_owners_;
      do
        unint64_t v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }

    BOOL v62 = sub_FA56C(v58, (uint64_t)&v85);
    if (v59) {
      std::__shared_weak_count::__release_weak(v59);
    }
    if (v62 && !sub_FA56C(*(void *)(v57 + 16), (uint64_t)a2))
    {
      uint64_t v63 = v78;
      unint64_t v64 = *(std::__shared_weak_count **)(v57 + 24);
      v85.__r_.__value_.__r.__words[0] = *(void *)(v57 + 16);
      v85.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
      if (v64)
      {
        uint64_t v65 = (unint64_t *)&v64->__shared_weak_owners_;
        do
          unint64_t v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }

      sub_F736C(v63, (os_unfair_lock_s **)&v85);
      if (v64) {
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }

  sub_1BB88((uint64_t *)__p);
  sub_85B80((uint64_t *)&v72);
  unsigned __int8 v6 = v77;
LABEL_124:
  if ((v6 & 0x80) != 0) {
    operator delete(__s1);
  }
  uint64_t v67 = v79;
  if (!v79) {
    goto LABEL_130;
  }
  int v68 = (unint64_t *)&v79->__shared_owners_;
  do
    unint64_t v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (!j) {
      return;
    }
  }

  else
  {
LABEL_130:
    if (!j) {
      return;
    }
  }

  (*(void (**)(void *))(*v3 + 24LL))(v3);
}

    uint64_t v19 = 0;
    goto LABEL_71;
  }

  return 1LL;
}

    sub_EDD50((uint64_t *)&v358, __p);
    uint64_t v36 = v359;
    if (v359 != &v358)
    {
      if (v29) {
        unint64_t v37 = " routable";
      }
      else {
        unint64_t v37 = "unroutable";
      }
      do
      {
        int v39 = (std::string::size_type)v36[2];
        int v38 = (std::__shared_weak_count *)v36[3];
        v409[0].__r_.__value_.__r.__words[0] = v39;
        v409[0].__r_.__value_.__l.__size_ = (std::string::size_type)v38;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            int v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
        }

        if ((*(unsigned int (**)(std::string::size_type))(*(void *)v39 + 152LL))(v39)
          && (*(unsigned int (**)(std::string::size_type))(*(void *)v39 + 120LL))(v39)
          && v29 != (*(unsigned int (**)(std::string::size_type))(*(void *)v39 + 160LL))(v39))
        {
          (*(void (**)(std::string::size_type, BOOL))(*(void *)v39 + 472LL))(v39, v29);
          uint64_t v42 = sub_138E8(8);
          BOOL v43 = sub_138E8(34);
          BOOL v44 = 0;
          std::string::size_type v45 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          std::string::pointer v46 = *(void *)(v42 + 8);
          while (1)
          {
            BOOL v47 = *(int *)&buf[4 * v45];
            unint64_t v48 = v44;
            if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
              break;
            }
            BOOL v44 = 1;
            std::string::size_type v45 = 1LL;
            if ((v48 & 1) != 0) {
              goto LABEL_86;
            }
          }

          if ((v46 & v47) == 0) {
            uint64_t v42 = v43;
          }
LABEL_86:
          unint64_t v49 = *(os_log_s **)v42;
          if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 3836;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&uint8_t buf[20] = v37;
            _os_log_impl(&dword_0, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Making BTLE Port %s ", buf, 0x1Cu);
          }
        }

        if (v38)
        {
          uint64_t v50 = (unint64_t *)&v38->__shared_owners_;
          do
            uint64_t v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }

        uint64_t v36 = (uint64_t ***)v36[1];
      }

      while (v36 != &v358);
    }

    sub_1BB88((uint64_t *)&v358);
    sub_85B80((uint64_t *)__p);
    unint64_t v16 = a3 + 1;
    unint64_t v15 = *v348;
    goto LABEL_96;
  }

  *(void *)AudioObjectPropertyAddress buf = buf;
  *(void *)&buf[8] = buf;
  *(void *)&_DWORD buf[16] = 0LL;
LABEL_120:
  v350 = (const void ***)(a2 + 216);
  sub_173FAC(a2 + 216, (uint64_t)buf);
  sub_85B80((uint64_t *)buf);
  if (*(void *)(a2 + 288) || *(void *)(a2 + 328) || *(void *)(a2 + 368))
  {
    unint64_t v61 = sub_138E8(2);
    BOOL v62 = sub_138E8(34);
    uint64_t v63 = 0;
    unint64_t v64 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v65 = *(void *)(v61 + 8);
    while (1)
    {
      unint64_t v66 = *(int *)&buf[4 * v64];
      uint64_t v67 = v63;
      if (((v65 & v66) != 0) != ((*(void *)(v62 + 8) & v66) != 0)) {
        break;
      }
      uint64_t v63 = 1;
      unint64_t v64 = 1LL;
      if ((v67 & 1) != 0) {
        goto LABEL_129;
      }
    }

    if ((v65 & v66) == 0) {
      unint64_t v61 = v62;
    }
LABEL_129:
    int v68 = *(os_log_s **)v61;
    if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      sub_173AF4((std::string *)__p, v350);
      unint64_t v69 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 3455;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&uint8_t buf[20] = v69;
      _os_log_impl(&dword_0, v68, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Persistent route info: %s.", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  v340 = a3;
  v366 = (uint64_t)&v366;
  v367 = &v366;
  char v368 = 0LL;
  v363 = (uint64_t)&v363;
  v364 = &v363;
  int v365 = 0LL;
  uint64_t v70 = *v16;
  if (!*v16)
  {
    char v75 = 0;
    goto LABEL_320;
  }

  int v71 = a2;
  do
  {
    os_log_t v72 = *(_DWORD *)(v70 + 32);
    uint64_t v73 = v72 >= 0x66637275;
    if (v72 >= 0x66637275) {
      uint64_t v74 = (uint64_t *)v70;
    }
    else {
      uint64_t v74 = (uint64_t *)(v70 + 8);
    }
    if (v73) {
      unint64_t v16 = (void *)v70;
    }
    uint64_t v70 = *v74;
  }

  while (*v74);
  if (v16 == v348)
  {
    char v75 = 0;
    unint64_t v16 = a3 + 1;
    goto LABEL_321;
  }

  if (*((_DWORD *)v16 + 8) > 0x66637275u)
  {
    char v75 = 0;
    unint64_t v16 = a3 + 1;
    goto LABEL_321;
  }

  sub_12964C((uint64_t *)buf, (uint64_t *)a2, v16 + 5, &v366);
  sub_85B80(&v363);
  uint64_t v76 = *(void *)&buf[16];
  if (*(void *)&buf[16])
  {
    unsigned __int8 v77 = *(uint64_t **)&buf[8];
    uint64_t v78 = *(void *)buf;
    char v79 = **(void **)&buf[8];
    *(void *)(v79 + 8) = *(void *)(*(void *)buf + 8LL);
    **(void **)(v78 + 8) = v79;
    uint64_t v80 = v363;
    *(void *)(v363 + 8) = v77;
    *unsigned __int8 v77 = v80;
    *(void *)(v78 + 8) = &v363;
    v363 = v78;
    v365 += v76;
    *(void *)&_DWORD buf[16] = 0LL;
  }

  sub_85B80((uint64_t *)buf);
  if (!v365) {
    goto LABEL_233;
  }
  unsigned __int8 v81 = v364;
  if (v364 == &v363) {
    goto LABEL_233;
  }
  while (1)
  {
    uint64_t v82 = v81[3];
    *(void *)std::string __p = v81[2];
    *(void *)&__p[8] = v82;
    if (v82)
    {
      uint64_t v83 = (unint64_t *)(v82 + 16);
      do
        char v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }

    sub_B8CBC((uint64_t *)buf, (uint64_t *)__p, "", 3768);
    std::string v85 = *(void *)buf
    uint64_t v86 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v87 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        CFTypeRef v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }

    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
    if (v85) {
      break;
    }
    unsigned __int8 v81 = (uint64_t *)v81[1];
    if (v81 == &v363) {
      goto LABEL_170;
    }
  }

  __int16 v89 = v364;
  if (v364 != &v363)
  {
    while (1)
    {
      unint64_t v90 = v89[3];
      *(void *)std::string __p = v89[2];
      *(void *)&__p[8] = v90;
      if (v90)
      {
        __int128 v91 = (unint64_t *)(v90 + 16);
        do
          uint64_t v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }

      sub_B8CBC((uint64_t *)buf, (uint64_t *)__p, "", 3774);
      int v93 = *(void *)buf
         && (*(unsigned int (**)(void))(**(void **)buf + 152LL))(*(void *)buf)
      uint64_t v94 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v95 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          std::string v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }

      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
      }
      if (v93) {
        break;
      }
      __int16 v89 = (uint64_t *)v89[1];
      if (v89 == &v363) {
        goto LABEL_189;
      }
    }

  unint64_t v49 = (void *)sub_B5258();
  if (*v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = sub_138E8(0);
    uint64_t v52 = sub_138E8(38);
    uint64_t v53 = 0;
    uint64_t v54 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    int v55 = *(void *)(v51 + 8);
    while (1)
    {
      __int16 v56 = (int)buf[v54];
      uint64_t v57 = v53;
      if (((v55 & v56) != 0) != ((*(void *)(v52 + 8) & v56) != 0)) {
        break;
      }
      uint64_t v53 = 1;
      uint64_t v54 = 1LL;
      if ((v57 & 1) != 0) {
        goto LABEL_77;
      }
    }

    if ((v55 & v56) == 0) {
      uint64_t v51 = v52;
    }
LABEL_77:
    uint64_t v58 = *(os_log_s **)v51;
    if (v58 && os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v59 = (void (*)(void, void, float))*v50;
      buf[0] = 136315906;
      *(void *)&buf[1] = "HWVolumeNotificationService.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 35;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v59;
      LOWORD(buf[7]) = 2048;
      *(double *)((char *)&buf[7] + 2) = v10;
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling external hardware volume handler %p with volume %f",  (uint8_t *)buf,  0x26u);
    }

    ((void (*)(void, void, float))*v50)(0LL, v50[1], v10);
  }

  __int16 v60 = sub_138E8(18);
  unint64_t v61 = sub_138E8(38);
  BOOL v62 = 0;
  uint64_t v63 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  unint64_t v64 = *(void *)(v60 + 8);
  while (1)
  {
    uint64_t v65 = (int)buf[v63];
    unint64_t v66 = v62;
    if (((v64 & v65) != 0) != ((*(void *)(v61 + 8) & v65) != 0)) {
      break;
    }
    BOOL v62 = 1;
    uint64_t v63 = 1LL;
    if ((v66 & 1) != 0) {
      goto LABEL_87;
    }
  }

  if ((v64 & v65) == 0) {
    __int16 v60 = v61;
  }
LABEL_87:
  uint64_t v67 = *(os_log_s **)v60;
  if (v67 && os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 320)) {
      int v68 = "Yes";
    }
    else {
      int v68 = "No";
    }
    sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
    unint64_t v69 = (void **)__p[0];
    buf[0] = 136316674;
    if (v257 >= 0) {
      unint64_t v69 = __p;
    }
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1345;
    HIWORD(buf[4]) = 2048;
    *(double *)&buf[5] = v8;
    LOWORD(buf[7]) = 2048;
    *(double *)((char *)&buf[7] + 2) = v10;
    HIWORD(buf[9]) = 2048;
    char v261 = v11;
    *(_WORD *)uint64_t v262 = 2080;
    *(void *)&v262[2] = v68;
    *(_WORD *)&v262[10] = 2080;
    uint64_t v263 = v69;
    _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting Volume = %f dB, Final HW Volume = %f dB, Final SW Volume = %f dB, External Volume Handler: %s on VAD '%s'.",  (uint8_t *)buf,  0x44u);
    if (v257 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v70 = sub_138E8(18);
  int v71 = sub_138E8(38);
  os_log_t v72 = 0;
  uint64_t v73 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v74 = *(void *)(v70 + 8);
  while (1)
  {
    char v75 = (int)buf[v73];
    uint64_t v76 = v72;
    if (((v74 & v75) != 0) != ((*(void *)(v71 + 8) & v75) != 0)) {
      break;
    }
    os_log_t v72 = 1;
    uint64_t v73 = 1LL;
    if ((v76 & 1) != 0) {
      goto LABEL_102;
    }
  }

  if ((v74 & v75) == 0) {
    uint64_t v70 = v71;
  }
LABEL_102:
  unsigned __int8 v77 = *(os_log_s **)v70;
  if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 96) + 128LL))(__p);
    buf[0] = 136315650;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1348;
    HIWORD(buf[4]) = 2112;
    *(void **)&buf[5] = __p[0];
    _os_log_impl(&dword_0, v77, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     PhysicalDevice UID = %@", (uint8_t *)buf, 0x1Cu);
    sub_19DFC((uint64_t)__p);
  }

  uint64_t v78 = sub_138E8(18);
  char v79 = sub_138E8(38);
  uint64_t v80 = 0;
  unsigned __int8 v81 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v82 = *(void *)(v78 + 8);
  while (1)
  {
    uint64_t v83 = (int)buf[v81];
    char v84 = v80;
    if (((v82 & v83) != 0) != ((*(void *)(v79 + 8) & v83) != 0)) {
      break;
    }
    uint64_t v80 = 1;
    unsigned __int8 v81 = 1LL;
    if ((v84 & 1) != 0) {
      goto LABEL_111;
    }
  }

  if ((v82 & v83) == 0) {
    uint64_t v78 = v79;
  }
LABEL_111:
  std::string v85 = *(os_log_s **)v78;
  if (v85 && os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v86 = *(_DWORD *)(a1 + 128);
    sub_2CA1C(__p, v86);
    int v87 = v257 >= 0 ? __p : (void **)__p[0];
    buf[0] = 136315906;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1350;
    HIWORD(buf[4]) = 1024;
    buf[5] = v86;
    LOWORD(buf[6]) = 2080;
    *(void *)((char *)&buf[6] + 2) = v87;
    _os_log_impl(&dword_0, v85, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Scope = %u (%s)", (uint8_t *)buf, 0x22u);
    if (v257 < 0) {
      operator delete(__p[0]);
    }
  }

  CFTypeRef v88 = sub_138E8(18);
  __int16 v89 = sub_138E8(38);
  unint64_t v90 = 0;
  __int128 v91 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v92 = *(void *)(v88 + 8);
  while (1)
  {
    int v93 = (int)buf[v91];
    uint64_t v94 = v90;
    if (((v92 & v93) != 0) != ((*(void *)(v89 + 8) & v93) != 0)) {
      break;
    }
    unint64_t v90 = 1;
    __int128 v91 = 1LL;
    if ((v94 & 1) != 0) {
      goto LABEL_124;
    }
  }

  if ((v92 & v93) == 0) {
    CFTypeRef v88 = v89;
  }
LABEL_124:
  uint64_t v95 = *(os_log_s **)v88;
  if (v95 && os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    std::string v96 = *(_DWORD *)(a1 + 132);
    sub_2CA1C(__p, v96);
    AudioObjectPropertySelector v97 = v257 >= 0 ? __p : (void **)__p[0];
    buf[0] = 136315906;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1352;
    HIWORD(buf[4]) = 1024;
    buf[5] = v96;
    LOWORD(buf[6]) = 2080;
    *(void *)((char *)&buf[6] + 2) = v97;
    _os_log_impl(&dword_0, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Element = %u (%s)", (uint8_t *)buf, 0x22u);
    if (v257 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v98 = sub_138E8(18);
  unsigned __int8 v99 = sub_138E8(38);
  uint64_t v100 = 0;
  uint64_t v101 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  __int16 v102 = *(void *)(v98 + 8);
  while (1)
  {
    AudioObjectPropertySelector v103 = (int)buf[v101];
    uint64_t v104 = v100;
    if (((v102 & v103) != 0) != ((*(void *)(v99 + 8) & v103) != 0)) {
      break;
    }
    uint64_t v100 = 1;
    uint64_t v101 = 1LL;
    if ((v104 & 1) != 0) {
      goto LABEL_137;
    }
  }

  if ((v102 & v103) == 0) {
    uint64_t v98 = v99;
  }
LABEL_137:
  uint64_t v105 = *(os_log_s **)v98;
  if (v105 && os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v106 = *(_DWORD *)(a1 + 264);
    buf[0] = 136315650;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1354;
    HIWORD(buf[4]) = 1024;
    buf[5] = v106;
    _os_log_impl(&dword_0, v105, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     VolumeMode = %u", (uint8_t *)buf, 0x18u);
  }

  if (!*(_DWORD *)(a1 + 264))
  {
    uint64_t v120 = sub_138E8(18);
    uint64_t v121 = sub_138E8(38);
    uint64_t v122 = 0;
    char v123 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    int v124 = *(void *)(v120 + 8);
    while (1)
    {
      uint64_t v125 = (int)buf[v123];
      uint64_t v126 = v122;
      if (((v124 & v125) != 0) != ((*(void *)(v121 + 8) & v125) != 0)) {
        break;
      }
      uint64_t v122 = 1;
      char v123 = 1LL;
      if ((v126 & 1) != 0) {
        goto LABEL_194;
      }
    }

    if ((v124 & v125) == 0) {
      uint64_t v120 = v121;
    }
LABEL_194:
    uint64_t v156 = *(os_log_s **)v120;
    if (v156 && os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1356;
      _os_log_impl(&dword_0, v156, OS_LOG_TYPE_DEBUG, "%25s:%-5d     SW Volume: disabled", (uint8_t *)buf, 0x12u);
    }
  }

  uint64_t v107 = sub_1C3E50(a1, v8);
  int v255 = v10;
  if (!*(_BYTE *)(a1 + 311)) {
    goto LABEL_256;
  }
  uint64_t v108 = *(void *)(a1 + 96);
  strcpy((char *)buf, "newsbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  AudioObjectPropertySelector v109 = sub_5C2F8(v108);
  *((void *)&v111 + 1) = v110;
  *(void *)&uint64_t v111 = v109;
  uint64_t v112 = ((v111 >> 32) & 0xFF00000000LL) == 0 || HIDWORD(v109) == 0LL;
  if (!v112 && *(_DWORD *)(a1 + 264) == 1 && (sub_14E87C() & 1) == 0)
  {
    uint64_t v157 = sub_138E8(18);
    int v158 = sub_138E8(38);
    uint64_t v159 = 0;
    uint64_t v160 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v161 = *(void *)(v157 + 8);
    while (1)
    {
      uint64_t v162 = (int)buf[v160];
      uint64_t v163 = v159;
      if (((v161 & v162) != 0) != ((*(void *)(v158 + 8) & v162) != 0)) {
        break;
      }
      uint64_t v159 = 1;
      uint64_t v160 = 1LL;
      if ((v163 & 1) != 0) {
        goto LABEL_203;
      }
    }

    if ((v161 & v162) == 0) {
      uint64_t v157 = v158;
    }
LABEL_203:
    uint64_t v164 = *(os_log_s **)v157;
    if (v164 && os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1090;
      _os_log_impl( &dword_0,  v164,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Software Volume Mode Enabled!",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v165 = *(std::__shared_weak_count **)(a1 + 288);
    if (!v165) {
      goto LABEL_217;
    }
    uint64_t v166 = std::__shared_weak_count::lock(v165);
    *(void *)&AudioObjectPropertyAddress buf[2] = v166;
    if (!v166) {
      goto LABEL_217;
    }
    v167 = v166;
    v168 = *(void *)(a1 + 280);
    *(void *)AudioObjectPropertyAddress buf = v168;
    if (v168)
    {
      uint64_t v8 = (*(float (**)(uint64_t, float))(*(void *)v168 + 56LL))(v168, v11);
      uint64_t v169 = (unint64_t *)&v167->__shared_owners_;
      do
        char v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (v170) {
        goto LABEL_226;
      }
    }

    else
    {
      uint64_t v171 = (unint64_t *)&v166->__shared_owners_;
      do
        uint64_t v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (v172)
      {
LABEL_217:
        uint64_t v173 = sub_138E8(18);
        v174 = sub_138E8(38);
        uint64_t v175 = 0;
        unsigned __int8 v176 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v177 = *(void *)(v173 + 8);
        while (1)
        {
          v178 = (int)buf[v176];
          uint64_t v179 = v175;
          if (((v177 & v178) != 0) != ((*(void *)(v174 + 8) & v178) != 0)) {
            break;
          }
          uint64_t v175 = 1;
          unsigned __int8 v176 = 1LL;
          if ((v179 & 1) != 0) {
            goto LABEL_223;
          }
        }

        if ((v177 & v178) == 0) {
          uint64_t v173 = v174;
        }
LABEL_223:
        uint64_t v180 = *(os_log_s **)v173;
        uint64_t v8 = 0.0;
        if (v180 && os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1096;
          _os_log_impl( &dword_0,  v180,  OS_LOG_TYPE_ERROR,  "%25s:%-5d SoftwareVolumeCommand pointer expired!",  (uint8_t *)buf,  0x12u);
        }

        goto LABEL_226;
      }
    }

    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
    std::__shared_weak_count::__release_weak(v167);
    if (!v168) {
      goto LABEL_217;
    }
LABEL_226:
    int v181 = *(void *)(a1 + 96);
    *(float *)std::string __p = v8 + v11;
    buf[0] = 1987013732;
    *(void *)&buf[1] = *(void *)(a1 + 128);
    if (sub_F2FAC(v181))
    {
      uint64_t v182 = sub_138E8(18);
      uint64_t v183 = sub_138E8(38);
      uint64_t v184 = 0;
      int v185 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v186 = *(void *)(v182 + 8);
      while (1)
      {
        uint64_t v187 = (int)buf[v185];
        uint64_t v188 = v184;
        if (((v186 & v187) != 0) != ((*(void *)(v183 + 8) & v187) != 0)) {
          break;
        }
        uint64_t v184 = 1;
        int v185 = 1LL;
        if ((v188 & 1) != 0) {
          goto LABEL_233;
        }
      }

      if ((v186 & v187) == 0) {
        uint64_t v182 = v183;
      }
LABEL_233:
      unint64_t v189 = *(os_log_s **)v182;
      if (v189 && os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, 1987013732LL);
        uint64_t v190 = v257;
        uint64_t v191 = (void **)__p[0];
        (*(void (**)(double *__return_ptr))(**(void **)(a1 + 96) + 128LL))(&v258);
        uint64_t v192 = __p;
        if (v190 < 0) {
          uint64_t v192 = v191;
        }
        buf[0] = 136316162;
        *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1105;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v192;
        LOWORD(buf[7]) = 2048;
        *(double *)((char *)&buf[7] + 2) = v10;
        HIWORD(buf[9]) = 2112;
        char v261 = v258;
        _os_log_impl( &dword_0,  v189,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Setting volume %s, %f failed for %@",  (uint8_t *)buf,  0x30u);
        sub_19DFC((uint64_t)&v258);
        if (v257 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    unint64_t v193 = sub_138E8(18);
    v194 = sub_138E8(38);
    uint64_t v195 = 0;
    v196 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v197 = *(void *)(v193 + 8);
    while (1)
    {
      uint64_t v198 = (int)buf[v196];
      uint64_t v199 = v195;
      if (((v197 & v198) != 0) != ((*(void *)(v194 + 8) & v198) != 0)) {
        break;
      }
      uint64_t v195 = 1;
      v196 = 1LL;
      if ((v199 & 1) != 0) {
        goto LABEL_245;
      }
    }

    if ((v197 & v198) == 0) {
      unint64_t v193 = v194;
    }
LABEL_245:
    v200 = *(os_log_s **)v193;
    if (v200 && os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1109;
      HIWORD(buf[4]) = 2048;
      *(double *)&buf[5] = v11;
      LOWORD(buf[7]) = 2048;
      *(double *)((char *)&buf[7] + 2) = v8;
      _os_log_impl( &dword_0,  v200,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Hardware device is in software volume mode. sending volume level %f dB and VolumeLimitAttenuation %f dB",  (uint8_t *)buf,  0x26u);
    }

    uint64_t v201 = *(std::__shared_weak_count **)(a1 + 288);
    if (v201)
    {
      uint64_t v202 = std::__shared_weak_count::lock(v201);
      *(void *)&AudioObjectPropertyAddress buf[2] = v202;
      if (v202)
      {
        uint64_t v203 = v202;
        uint64_t v204 = *(void *)(a1 + 280);
        *(void *)AudioObjectPropertyAddress buf = v204;
        if (v204) {
          (*(void (**)(uint64_t, float, float))(*(void *)v204 + 24LL))(v204, 0.0, *(float *)(a1 + 296));
        }
        v205 = (unint64_t *)&v203->__shared_owners_;
        do
          uint64_t v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
    }

    goto LABEL_256;
  }

  __int16 v113 = sub_138E8(18);
  uint64_t v114 = sub_138E8(38);
  uint64_t v115 = 0;
  int v116 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v117 = *(void *)(v113 + 8);
  while (1)
  {
    uint64_t v118 = (int)buf[v116];
    uint64_t v119 = v115;
    if (((v117 & v118) != 0) != ((*(void *)(v114 + 8) & v118) != 0)) {
      break;
    }
    uint64_t v115 = 1;
    int v116 = 1LL;
    if ((v119 & 1) != 0) {
      goto LABEL_158;
    }
  }

  if ((v117 & v118) == 0) {
    __int16 v113 = v114;
  }
LABEL_158:
  uint64_t v127 = *(os_log_s **)v113;
  if (v127 && os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v128 = *(float *)(a1 + 300);
    buf[0] = 136315650;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1216;
    HIWORD(buf[4]) = 2048;
    *(double *)&buf[5] = v128;
    _os_log_impl(&dword_0, v127, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Hardware volume is %f dB", (uint8_t *)buf, 0x1Cu);
  }

  *(float *)(a1 + 300) = v10;
  uint64_t v129 = sub_1C7638(*(void *)(a1 + 96));
  if (*(_BYTE *)(a1 + 312) && v129 == *(float *)(a1 + 300))
  {
LABEL_256:
    unsigned int v155 = 0;
    goto LABEL_257;
  }

  uint64_t v130 = sub_138E8(18);
  uint64_t v131 = sub_138E8(38);
  unint64_t v132 = 0;
  uint64_t v133 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v134 = *(void *)(v130 + 8);
  while (1)
  {
    uint64_t v135 = (int)buf[v133];
    uint64_t v136 = v132;
    if (((v134 & v135) != 0) != ((*(void *)(v131 + 8) & v135) != 0)) {
      break;
    }
    unint64_t v132 = 1;
    uint64_t v133 = 1LL;
    if ((v136 & 1) != 0) {
      goto LABEL_169;
    }
  }

  if ((v134 & v135) == 0) {
    uint64_t v130 = v131;
  }
LABEL_169:
  uint64_t v137 = *(os_log_s **)v130;
  if (v137 && os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
  {
    char v138 = *(float *)(a1 + 300);
    buf[0] = 136315650;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1224;
    HIWORD(buf[4]) = 2048;
    *(double *)&buf[5] = v138;
    _os_log_impl( &dword_0,  v137,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting hardware volume to %f dB",  (uint8_t *)buf,  0x1Cu);
  }

  if (v129 <= v10)
  {
    uint64_t v139 = *(std::__shared_weak_count **)(a1 + 288);
    if (v139)
    {
      uint64_t v140 = std::__shared_weak_count::lock(v139);
      *(void *)&AudioObjectPropertyAddress buf[2] = v140;
      if (v140)
      {
        uint64_t v141 = v140;
        uint64_t v142 = *(void *)(a1 + 280);
        *(void *)AudioObjectPropertyAddress buf = v142;
        if (v142) {
          (*(void (**)(uint64_t, float, float))(*(void *)v142 + 24LL))(v142, v10, *(float *)(a1 + 296));
        }
        __int16 v143 = (unint64_t *)&v141->__shared_owners_;
        do
          int v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
    }
  }

  uint64_t v145 = *(void *)(a1 + 96);
  buf[0] = 1987013732;
  *(void *)&buf[1] = *(void *)(a1 + 128);
  (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, float *))(*(void *)v145 + 48LL))( v145,  buf,  0LL,  0LL,  4LL,  &v255);
  uint64_t v147 = *(double *)(a1 + 280);
  AudioObjectID v146 = *(std::__shared_weak_count **)(a1 + 288);
  if (v146)
  {
    p_shared_weak_owners = (unint64_t *)&v146->__shared_weak_owners_;
    do
      __int16 v149 = __ldxr(p_shared_weak_owners);
    while (__stxr(v149 + 1, p_shared_weak_owners));
  }

  int v150 = *(_DWORD *)(a1 + 296);
  uint64_t v151 = dispatch_time(0LL, 0LL);
  int v152 = (dispatch_queue_s *)sub_869B4();
  *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
  *(void *)&AudioObjectPropertyAddress buf[2] = 1174405120LL;
  *(void *)&uint8_t buf[4] = sub_1C76BC;
  *(void *)&buf[6] = &unk_4749D0;
  *(void *)&buf[8] = a1;
  char v261 = v147;
  *(void *)uint64_t v262 = v146;
  if (v146)
  {
    uint64_t v153 = (unint64_t *)&v146->__shared_weak_owners_;
    do
      uint64_t v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }

  *(float *)&v262[8] = v255;
  LODWORD(v263) = v150;
  dispatch_after(v151, v152, buf);
  if (*(void *)v262) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v262);
  }
  if (v146) {
    std::__shared_weak_count::__release_weak(v146);
  }
  unsigned int v155 = 1;
LABEL_257:
  if ((a2 & 0xFFFFFFFD) != 0)
  {
    uint64_t v207 = 1;
    goto LABEL_269;
  }

  uint64_t v208 = *(void (**)(void, float))(a1 + 320);
  if (!v208)
  {
    if (!*(_DWORD *)(a1 + 264)
      || (uint64_t v210 = *(std::__shared_weak_count **)(a1 + 288)) == 0LL
      || (v211 = std::__shared_weak_count::lock(v210), (uint64_t v259 = v211) == 0LL))
    {
      uint64_t v209 = 0;
      goto LABEL_268;
    }

    uint64_t v212 = v211;
    v213 = *(double *)(a1 + 280);
    v258 = v213;
    if (v213 == 0.0) {
      goto LABEL_309;
    }
    uint64_t v214 = (*(uint64_t (**)(double))(**(void **)&v213 + 136LL))(COERCE_DOUBLE(*(void *)&v213));
    uint64_t v215 = v214;
    if (v107 < 0x100u)
    {
      uint64_t v228 = v11;
      if (v214 != 1935895666)
      {
LABEL_298:
        if (v228 != *(float *)(a1 + 304) || !*(_BYTE *)(a1 + 308))
        {
          if ((*(unsigned int (**)(double))(**(void **)&v213 + 168LL))(COERCE_DOUBLE(*(void *)&v213)))
          {
            uint64_t v229 = sub_138E8(18);
            v230 = sub_138E8(38);
            unint64_t v231 = 0;
            unsigned int v232 = 0LL;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
            uint64_t v233 = *(void *)(v229 + 8);
            while (1)
            {
              uint64_t v234 = (int)buf[v232];
              unsigned int v235 = v231;
              if (((v233 & v234) != 0) != ((*(void *)(v230 + 8) & v234) != 0)) {
                break;
              }
              unint64_t v231 = 1;
              unsigned int v232 = 1LL;
              if ((v235 & 1) != 0) {
                goto LABEL_312;
              }
            }

            if ((v233 & v234) == 0) {
              uint64_t v229 = v230;
            }
LABEL_312:
            int v243 = *(os_log_s **)v229;
            if (v243 && os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
            {
              sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
              uint64_t v244 = "dB";
              *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
              LOWORD(buf[3]) = 1024;
              buf[0] = 136316418;
              if (v215 == 1935895666) {
                uint64_t v244 = "scalar";
              }
              *(_DWORD *)((char *)&buf[3] + 2) = 1304;
              HIWORD(buf[4]) = 2048;
              if (v257 >= 0) {
                v245 = __p;
              }
              else {
                v245 = (void **)__p[0];
              }
              *(double *)&buf[5] = v228;
              LOWORD(buf[7]) = 2080;
              *(void *)((char *)&buf[7] + 2) = v244;
              HIWORD(buf[9]) = 2048;
              char v261 = v11;
              *(_WORD *)uint64_t v262 = 2080;
              *(void *)&v262[2] = v245;
              _os_log_impl( &dword_0,  v243,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Aggregate software volume commands present:    SW Volume: %f %s\t; DB Volume %f dB on VAD '%s'.",
                (uint8_t *)buf,
                0x3Au);
              if (v257 < 0) {
                operator delete(__p[0]);
              }
            }

            v246 = sub_757A4(a1 + 168, v11);
            (*(void (**)(double, float, float))(**(void **)&v213 + 192LL))( COERCE_DOUBLE(*(void *)&v213),  v11,  v246);
          }

          else
          {
            BOOL v236 = sub_138E8(18);
            v237 = sub_138E8(38);
            v238 = 0;
            v239 = 0LL;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
            unint64_t v240 = *(void *)(v236 + 8);
            while (1)
            {
              v241 = (int)buf[v239];
              v242 = v238;
              if (((v240 & v241) != 0) != ((*(void *)(v237 + 8) & v241) != 0)) {
                break;
              }
              v238 = 1;
              v239 = 1LL;
              if ((v242 & 1) != 0) {
                goto LABEL_324;
              }
            }

            if ((v240 & v241) == 0) {
              BOOL v236 = v237;
            }
LABEL_324:
            uint64_t v247 = *(os_log_s **)v236;
            if (v247 && os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
            {
              sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
              v248 = "dB";
              *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
              buf[0] = 136316162;
              if (v215 == 1935895666) {
                v248 = "scalar";
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1313;
              HIWORD(buf[4]) = 2048;
              if (v257 >= 0) {
                *(double *)&v249 = COERCE_DOUBLE(__p);
              }
              else {
                v249 = (void **)__p[0];
              }
              *(double *)&buf[5] = v228;
              LOWORD(buf[7]) = 2080;
              *(void *)((char *)&buf[7] + 2) = v248;
              HIWORD(buf[9]) = 2080;
              char v261 = *(double *)&v249;
              _os_log_impl( &dword_0,  v247,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Software volume command present:    SW Volume: %f %s on VAD '%s'.",  (uint8_t *)buf,  0x30u);
              if (v257 < 0) {
                operator delete(__p[0]);
              }
            }

            (*(void (**)(double, float))(**(void **)&v213 + 16LL))(COERCE_DOUBLE(*(void *)&v213), v228);
          }

          *(float *)(a1 + 304) = v228;
          uint64_t v209 = 1;
          *(_BYTE *)(a1 + 308) = 1;
          goto LABEL_335;
        }

  *(void *)&_BYTE buf[24] = 0LL;
  *(void *)&_DWORD buf[16] = 0LL;
  if (v455)
  {
    uint64_t v57 = std::__shared_weak_count::lock(v455);
    if (v57)
    {
      uint64_t v58 = v57;
      unint64_t v59 = v454;
      __int16 v60 = (unint64_t *)&v57->__shared_weak_owners_;
      do
        unint64_t v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      BOOL v62 = *(std::__shared_weak_count **)&buf[24];
      *(void *)&_DWORD buf[16] = v59;
      *(void *)&_BYTE buf[24] = v58;
      if (v62) {
        std::__shared_weak_count::__release_weak(v62);
      }
      uint64_t v63 = (unint64_t *)&v58->__shared_owners_;
      do
        unint64_t v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
LABEL_81:
        std::__shared_weak_count::__release_weak(v58);
      }
    }

    else
    {
      uint64_t v58 = *(std::__shared_weak_count **)&buf[24];
      *(void *)&_DWORD buf[16] = 0LL;
      *(void *)&_BYTE buf[24] = 0LL;
      if (v58) {
        goto LABEL_81;
      }
    }
  }

  sub_CAE54(v441, (uint64_t *)buf, 2LL);
  for (uint64_t k = 24LL; k != -8; k -= 16LL)
  {
    unint64_t v66 = *(std::__shared_weak_count **)&buf[k];
    if (v66) {
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  *(void *)&buf[8] = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  sub_21749C(v441, buf);
  uint64_t v67 = *(unsigned __int8 *)(a8 + 164);
  int v68 = *(_DWORD *)(a8 + 160);
  unint64_t v69 = sub_1BAB2C(*(_DWORD *)(a8 + 12));
  if (v67) {
    uint64_t v70 = v68;
  }
  else {
    uint64_t v70 = v69;
  }
  int v71 = operator new(0x30uLL);
  os_log_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120LL))(a3);
  sub_85A90(&v438, v441);
  *(void *)int v71 = off_484140;
  void v71[2] = v72;
  *((void *)v71 + 2) = v71 + 4;
  *((void *)v71 + 3) = v71 + 4;
  *((void *)v71 + 4) = 0LL;
  uint64_t v73 = v440;
  if (v440)
  {
    char v75 = v438;
    uint64_t v74 = v439;
    uint64_t v76 = *v439;
    *(void *)(v76 + 8) = *(void *)(v438 + 8);
    **(void **)(v75 + 8) = v76;
    unsigned __int8 v77 = *((void *)v71 + 2);
    *(void *)(v77 + 8) = v74;
    uint64_t *v74 = v77;
    *((void *)v71 + 2) = v75;
    *(void *)(v75 + 8) = v71 + 4;
    *((void *)v71 + 4) = v73;
    v440 = 0LL;
  }

  v71[10] = v70;
  *((_BYTE *)v71 + 44) = v38;
  uint64_t v78 = operator new(0x18uLL);
  char v79 = *(void **)(a11 + 8);
  char *v78 = a11;
  v78[1] = v79;
  v78[2] = v71;
  std::__shared_weak_count *v79 = v78;
  uint64_t v80 = *(void *)(a11 + 16) + 1LL;
  *(void *)(a11 + 8) = v78;
  *(void *)(a11 + 16) = v80;
  sub_CCAB4((uint64_t)v71);
  sub_85B80(&v438);
  *(void *)&buf[8] = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  unsigned __int8 v81 = (std::__shared_weak_count *)a6[1];
  if (v81)
  {
    uint64_t v82 = std::__shared_weak_count::lock(v81);
    if (!v82)
    {
      uint64_t v83 = *(std::__shared_weak_count **)&buf[8];
      *(void *)&buf[8] = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0LL;
      if (!v83) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }

    uint64_t v83 = v82;
    char v84 = *a6;
    std::string v85 = (unint64_t *)&v82->__shared_weak_owners_;
    do
      uint64_t v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    int v87 = *(std::__shared_weak_count **)&buf[8];
    *(void *)AudioObjectPropertyAddress buf = v84;
    *(void *)&buf[8] = v83;
    if (v87) {
      std::__shared_weak_count::__release_weak(v87);
    }
    CFTypeRef v88 = (unint64_t *)&v83->__shared_owners_;
    do
      __int16 v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
LABEL_102:
      std::__shared_weak_count::__release_weak(v83);
    }
  }

  if (v10) {
    operator delete(v10);
  }
}

            memset(v121.__m_.__opaque, 0, sizeof(v121.__m_.__opaque));
            v121.__m_.__uint64_t sig = 850045863LL;
            memset(v120.__cv_.__opaque, 0, sizeof(v120.__cv_.__opaque));
            v120.__cv_.__uint64_t sig = 1018212795LL;
            std::string v96 = 0;
            sub_7D684(&__p, v12, &inAddress, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v96);
            uint64_t v35 = 2000LL;
            while (1)
            {
              sub_37BB60((uint64_t)&v89, (uint64_t)&v111);
              uint64_t v36 = v89;
              if (v92) {
                goto LABEL_72;
              }
              uint64_t v86 = 0LL;
              int v87 = 0LL;
              CFTypeRef v88 = 0LL;
              int v38 = v90;
              int v39 = (v90 - (uint64_t)v89) >> 2;
              sub_7A5B8(&v86, v89, v90, v39);
              uint64_t v83 = 0LL;
              char v84 = 0LL;
              std::string v85 = 0LL;
              sub_7A5B8(&v83, v21, v70, (v70 - (uint64_t)v21) >> 2);
              int v40 = v86;
              int v41 = v83;
              if (v87 - v86 != v84 - v83) {
                break;
              }
              uint64_t v42 = memcmp(v86, v83, v87 - v86) == 0;
              if (v41) {
                goto LABEL_78;
              }
LABEL_79:
              if (v40)
              {
                int v87 = v40;
                operator delete(v40);
              }

              if (!v42)
              {
                if (v35 <= 0)
                {
                  BOOL v47 = (os_log_t *)sub_138E8(13);
                  unint64_t v48 = *v47;
                  if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v80 = inAddress;
                    sub_613AC((uint64_t)&__lk, &v80.mSelector);
                    if (v82 >= 0) {
                      p_luint64_t k = &__lk;
                    }
                    else {
                      p_luint64_t k = __lk.__m_;
                    }
                    uint64_t v78 = 0LL;
                    char v79 = 0LL;
                    unsigned __int8 v77 = 0LL;
                    sub_7A5B8(&v77, v36, v38, v39);
                    uint64_t v74 = 0LL;
                    char v75 = 0LL;
                    uint64_t v76 = 0LL;
                    sub_7A5B8(&v74, v21, v70, (v70 - (uint64_t)v21) >> 2);
                    uint64_t v50 = v77;
                    uint64_t v51 = v74;
                    uint64_t v52 = v78 - v77 == v75 - v74 && memcmp(v77, v74, v78 - v77) == 0;
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136316930;
                    *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&_DWORD buf[14] = 248;
                    *(_WORD *)&_BYTE buf[18] = 2080;
                    *(void *)&uint8_t buf[20] = "set";
                    *(_WORD *)&_BYTE buf[28] = 2080;
                    *(void *)&buf[30] = p_lk;
                    *(_WORD *)&buf[38] = 2080;
                    *(void *)&uint8_t buf[40] = "set";
                    *(_WORD *)&buf[48] = 1024;
                    uint64_t v115 = v52;
                    int v116 = 1024;
                    uint64_t v117 = 0;
                    uint64_t v118 = 1024;
                    uint64_t v119 = v12;
                    _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, erro r = %d) on id %u.",  buf,  0x42u);
                    if (v51)
                    {
                      char v75 = v51;
                      operator delete(v51);
                    }

                    if (v50)
                    {
                      uint64_t v78 = v50;
                      operator delete(v50);
                    }

                    if (v82 < 0) {
                      operator delete(__lk.__m_);
                    }
                  }

void sub_FEAE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a22);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24LL))(a10);
  }
  _Unwind_Resume(a1);
}

std::string *sub_FEC64(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_D3ECC(__p, (os_unfair_lock_s **)(a2 + 16));
      unsigned __int8 v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      BOOL v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_FED3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_FED78(uint64_t a1)
{
  return a1;
}

void sub_FEDA0(uint64_t *a1)
{
}

BOOL sub_FEDC8@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_72210(a2, 1920099684LL);
}

void sub_FEE00(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3 = std::string::insert(&v4, 0LL, "Port disconnection(s): ", 0x17uLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_FEE74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_FEE90(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_D3ECC(__p, (os_unfair_lock_s **)(a2 + 16));
      unsigned __int8 v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      BOOL v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_FEF68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_FEFA4(uint64_t a1)
{
  return a1;
}

void sub_FEFCC(void **a1)
{
}

void sub_FEFF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_4709D0;
  *(void *)(a2 + 8) = 1LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + sub_7A768(v2 - 32) = 0;
  uint64_t v4 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v4 + 312LL))(buf);
  uint64_t v5 = *(void *)buf;
  if (*(void *)buf)
  {
    v15[0] = (uint64_t)v15;
    v15[1] = (uint64_t)v15;
    void v15[2] = 0LL;
    sub_13B3F8((uint64_t)v16, *(uint64_t *)buf, (uint64_t)v15);
    sub_12A970((uint64_t)buf, v5, (void *)(a1 + 16), v16);
    sub_725DC(a2, (uint64_t)buf);
    *(void *)AudioObjectPropertyAddress buf = off_4709D0;
    unsigned __int8 v6 = *(void **)&v19[2];
    if (*(void *)&v19[2])
    {
      sub_10AF78((uint64_t *)(*(void *)&v19[2] + 16LL));
      operator delete(v6);
    }

    sub_FF3B8((void *)v16[1]);
    sub_85B80(v15);
  }

  else
  {
    uint64_t v7 = sub_138E8(9);
    uint64_t v8 = sub_138E8(15);
    char v9 = 0;
    uint64_t v10 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v11 = *(void *)(v7 + 8);
    while (1)
    {
      uint64_t v12 = *(int *)&buf[4 * v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 1LL;
      if ((v13 & 1) != 0) {
        goto LABEL_12;
      }
    }

    if ((v11 & v12) == 0) {
      uint64_t v7 = v8;
    }
LABEL_12:
    uint64_t v14 = *(os_log_s **)v7;
    if (*(void *)v7 && os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = 73;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  buf,  0x12u);
    }
  }

void sub_FF1CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15)
{
}

std::string *sub_FF214@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 != (void *)(a1 + 24))
  {
    while (1)
    {
      sub_2CA1C(&__p, *((unsigned int *)v4 + 8));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      std::string::append(a2, ": ", 2uLL);
      sub_FEE90(&__p, v4[6], (uint64_t)(v4 + 5));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v7 = &__p;
      }
      else {
        uint64_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v8 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v7, v8);
      char v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          char v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          uint64_t v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          uint64_t v4 = v10;
        }

        while (!v11);
      }

      if (v10 == (void *)(a1 + 24)) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
      uint64_t v4 = v10;
    }
  }

  return std::string::append(a2, " }", 2uLL);
}

void sub_FF374( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_FF3B8(void *a1)
{
  if (a1)
  {
    sub_FF3B8(*a1);
    sub_FF3B8(a1[1]);
    int v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }

uint64_t sub_FF3FC(uint64_t *a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  sub_547F4(a2);
  uint64_t v10 = *a3;
  char v9 = a3[1];
  if ((char *)v9 - (char *)*a3 == 4)
  {
    unsigned int v25 = *v10;
    BOOL v11 = sub_FF7EC(a2 + 152, v25, &v25) + 3;
    uint64_t v10 = *a3;
    char v9 = a3[1];
  }

  else
  {
    BOOL v11 = (void *)(a2 + 88);
  }

  else {
    uint64_t result = sub_548C8((uint64_t)a3);
  }
  char v13 = result;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = (void *)v11[1]; i != v11; uint64_t i = (void *)i[1])
  {
    uint64_t v15 = i[2];
    if (!v15)
    {
      uint64_t v22 = (os_log_t *)sub_138E8(13);
      unint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        unsigned int v25 = 136315394;
        std::string v26 = "PortManager.cpp";
        __int16 v27 = 1024;
        int v28 = 617;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v25,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    if ((v13 & 1) == 0)
    {
      uint64_t result = sub_54ADC(i[2], (uint64_t)a3);
      if (!(_DWORD)result) {
        continue;
      }
    }

    uint64_t v16 = *(void *)(a4 + 24);
    if (!v16) {
      sub_82CEC();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 48LL))(v16, v15);
    if ((_DWORD)result)
    {
      uint64_t v18 = *(void *)(v15 + 80);
      uint64_t v17 = *(void *)(v15 + 88);
      if (v17)
      {
        uint64_t v19 = (unint64_t *)(v17 + 16);
        do
          unint64_t v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }

      uint64_t result = (uint64_t)operator new(0x20uLL);
      *(void *)(result + 16) = v18;
      *(void *)(result + 24) = v17;
      uint64_t v21 = *a1;
      *(void *)uint64_t result = *a1;
      *(void *)(result + 8) = a1;
      *(void *)(v21 + 8) = result;
      *a1 = result;
      ++a1[2];
    }
  }

  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24LL))(a2);
  }
  return result;
}

void sub_FF640(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void *sub_FF6B4(void *result, uint64_t *a2, void *a3, void *a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x20uLL);
    int v8 = result;
    *uint64_t result = 0LL;
    result[1] = 0LL;
    uint64_t v9 = a3[3];
    result[2] = a3[2];
    result[3] = v9;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)(v9 + 16);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    uint64_t v12 = (void *)a3[1];
    uint64_t v13 = 1LL;
    if (v12 != a4)
    {
      uint64_t v14 = result;
      do
      {
        uint64_t result = operator new(0x20uLL);
        *uint64_t result = v14;
        result[1] = 0LL;
        uint64_t v15 = v12[3];
        result[2] = v12[2];
        result[3] = v15;
        if (v15)
        {
          uint64_t v16 = (unint64_t *)(v15 + 16);
          do
            unint64_t v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }

        v14[1] = result;
        ++v13;
        uint64_t v12 = (void *)v12[1];
        uint64_t v14 = result;
      }

      while (v12 != a4);
    }

    uint64_t v18 = *a2;
    *(void *)(v18 + 8) = v8;
    *int v8 = v18;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v13;
  }

  return result;
}

void sub_FF7AC(void *a1)
{
  while (1)
  {
    int v2 = (void *)*v1;
    int v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v1);
    uint64_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }

void sub_FF7D8(_Unwind_Exception *a1)
{
}

void *sub_FF7EC(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & a2;
    }

    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v12 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x30uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  *uint64_t v10 = 0LL;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = v10 + 3;
  v10[4] = v10 + 3;
  v10[5] = 0LL;
  char v24 = 1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_52168(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v10 = *v20;
LABEL_38:
    *unint64_t v20 = v10;
    goto LABEL_39;
  }

  *uint64_t v10 = *v12;
  *uint64_t v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_FFA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_FFA38()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_470708;
  return result;
}

void sub_FFA5C(uint64_t a1, void *a2)
{
  *a2 = &off_470708;
}

uint64_t sub_FFA74()
{
  return 1LL;
}

void sub_FFA7C(void *a1)
{
  if (a1)
  {
    sub_FFA7C(*a1);
    sub_FFA7C(a1[1]);
    sub_FFF04((uint64_t)(a1 + 4));
    operator delete(a1);
  }

uint64_t sub_FFABC(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  uint64_t v4 = __p[1];
  *(void *)(v3 + 8) = v4;
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  uint64_t v5 = (std::__shared_weak_count *)__p[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(__p);
  return v4;
}

uint64_t sub_FFB0C(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  sub_547F4(a2);
  uint64_t v9 = (_DWORD *)*a3;
  uint64_t v8 = a3[1];
  if (v8 - *a3 == 4)
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = *v9;
    uint64_t v10 = sub_FF7EC(a2 + 152, *(unsigned int *)buf, buf) + 3;
    uint64_t v9 = (_DWORD *)*a3;
    uint64_t v8 = a3[1];
  }

  else
  {
    uint64_t v10 = (void *)(a2 + 88);
  }

  if (v8 - (void)v9 == 4) {
    uint64_t result = sub_335B80(a3);
  }
  else {
    uint64_t result = sub_548C8((uint64_t)a3);
  }
  char v12 = result;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = (void *)v10[1]; i != v10; uint64_t i = (void *)i[1])
  {
    uint64_t v14 = i[2];
    if (!v14)
    {
      __int16 v27 = (os_log_t *)sub_138E8(13);
      int v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v32 = "PortManager.cpp";
        __int16 v33 = 1024;
        int v34 = 617;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    if ((v12 & 1) == 0)
    {
      uint64_t result = sub_54ADC(i[2], (uint64_t)a3);
      if (!(_DWORD)result) {
        continue;
      }
    }

    uint64_t v15 = *(void *)(a4 + 24);
    if (!v15) {
      sub_82CEC();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 48LL))(v15, v14);
    if ((_DWORD)result)
    {
      unint64_t v16 = *(std::__shared_weak_count **)(v14 + 88);
      if (v16)
      {
        uint64_t v17 = *(void *)(v14 + 80);
        p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
        do
          unint64_t v19 = __ldxr(p_shared_weak_owners);
        while (__stxr(v19 + 1, p_shared_weak_owners));
        unint64_t v20 = std::__shared_weak_count::lock(v16);
        unint64_t v21 = v20;
        if (v20)
        {
          uint64_t v22 = (unint64_t *)&v20->__shared_weak_owners_;
          do
            unint64_t v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          std::__shared_weak_count::__release_weak(v16);
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            unint64_t v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            unint64_t v16 = v21;
            goto LABEL_26;
          }
        }

        else
        {
          uint64_t v17 = 0LL;
LABEL_26:
          std::__shared_weak_count::__release_weak(v16);
        }
      }

      else
      {
        uint64_t v17 = 0LL;
        unint64_t v21 = 0LL;
      }

      uint64_t result = (uint64_t)operator new(0x20uLL);
      *(void *)(result + 16) = v17;
      *(void *)(result + 24) = v21;
      uint64_t v26 = *a1;
      *(void *)uint64_t result = *a1;
      *(void *)(result + 8) = a1;
      *(void *)(v26 + 8) = result;
      *a1 = result;
      ++a1[2];
      continue;
    }
  }

  if (v30) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24LL))(a2);
  }
  return result;
}

void sub_FFDD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t ***sub_FFE48(uint64_t ***a1, unsigned int *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = sub_32AB0(*a1, (uint64_t *)a1[1], &v13, &v12, *a2);
  unint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v6 + 7) = *a2;
    sub_32C38(v4, (uint64_t)v13, v7, v6);
  }

  a1[1] = (uint64_t **)v6;
  uint64_t v8 = (uint64_t *)v6[1];
  if (v8)
  {
    do
    {
      uint64_t v9 = v8;
      uint64_t v8 = (uint64_t *)*v8;
    }

    while (v8);
  }

  else
  {
    do
    {
      uint64_t v9 = (uint64_t *)v6[2];
      BOOL v10 = *v9 == (void)v6;
      unint64_t v6 = v9;
    }

    while (!v10);
  }

  a1[1] = (uint64_t **)v9;
  return a1;
}

void sub_FFF04(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    CFRelease(v3);
  }
  sub_32C8C(*(void **)(a1 + 56));
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }

uint64_t sub_FFF5C(uint64_t a1)
{
  return a1;
}

void sub_FFF94(uint64_t a1)
{
}

void sub_FFFCC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_4709D0;
  *(void *)(a2 + 8) = 1LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + sub_7A768(v2 - 32) = 0;
  uint64_t v4 = a1 + 6;
  sub_FD8E8((void *)a1[2], (uint64_t)(a1 + 6));
  sub_FD9DC(a1[2], a1 + 3, a1 + 6, (uint64_t)(a1 + 9));
  uint64_t v5 = a1[7];
  if ((uint64_t *)v5 != v4)
  {
    unint64_t v6 = (void *)a1[2];
    do
    {
      sub_FE3AC(v6, (uint64_t *)(v5 + 16));
      uint64_t v5 = *(void *)(v5 + 8);
    }

    while ((uint64_t *)v5 != v4);
  }

  uint64_t v7 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v7 + 312LL))(buf);
  uint64_t v8 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_13B3F8((uint64_t)v18, *(uint64_t *)buf, (uint64_t)(a1 + 9));
    sub_12A970((uint64_t)buf, v8, a1 + 3, v18);
    sub_725DC(a2, (uint64_t)buf);
    *(void *)AudioObjectPropertyAddress buf = off_4709D0;
    uint64_t v9 = *(void **)&v21[2];
    if (*(void *)&v21[2])
    {
      sub_10AF78((uint64_t *)(*(void *)&v21[2] + 16LL));
      operator delete(v9);
    }

    sub_FF3B8((void *)v18[1]);
  }

  else
  {
    uint64_t v10 = sub_138E8(9);
    uint64_t v11 = sub_138E8(15);
    char v12 = 0;
    uint64_t v13 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1LL;
      if ((v16 & 1) != 0) {
        goto LABEL_17;
      }
    }

    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_17:
    uint64_t v17 = *(os_log_s **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      __int16 v20 = 1024;
      *(_DWORD *)unint64_t v21 = 159;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute Notify Command",  buf,  0x12u);
    }
  }

  if (a1[11]) {
    sub_FD8E8((void *)a1[2], (uint64_t)(a1 + 9));
  }
}

void sub_100208(_Unwind_Exception *a1)
{
}

std::string *sub_100250@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4 != (void *)(a1 + 32))
  {
    while (1)
    {
      std::string::append(a2, "'", 1uLL);
      sub_2CA1C(__p, *((unsigned int *)v4 + 8));
      if (v26 >= 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      if (v26 >= 0) {
        std::string::size_type v7 = HIBYTE(v26);
      }
      else {
        std::string::size_type v7 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      std::string::append(a2, "': ", 3uLL);
      sub_EDD50(&v19, v4 + 5);
      sub_7D084(v23, "{ ");
      sub_1005DC((uint64_t)__p, (__int128 *)v23);
      uint64_t v8 = v20;
      if (v20 != &v19)
      {
        while (1)
        {
          sub_23FE8((uint64_t)v23, (os_unfair_lock_t)(v8[2] + 8));
          if ((v24 & 0x80u) == 0) {
            uint64_t v9 = v23;
          }
          else {
            uint64_t v9 = (void **)v23[0];
          }
          if ((v24 & 0x80u) == 0) {
            uint64_t v10 = v24;
          }
          else {
            uint64_t v10 = (uint64_t)v23[1];
          }
          sub_826EC(&v26, (uint64_t)v9, v10);
          uint64_t v8 = (uint64_t *)v8[1];
          if (v8 == &v19) {
            break;
          }
          sub_826EC(&v26, (uint64_t)", ", 2LL);
        }
      }

      sub_826EC(&v26, (uint64_t)" }", 2LL);
      sub_82924(v21, (uint64_t)v27);
      __p[0] = v5;
      *(void **)((char *)__p + *((void *)v5 - 3)) = v18;
      uint64_t v26 = v17;
      if (v28 < 0) {
        operator delete((void *)v27[8]);
      }
      std::streambuf::~streambuf(v27);
      std::ios::~ios(&v29);
      if ((v22 & 0x80u) == 0) {
        uint64_t v11 = v21;
      }
      else {
        uint64_t v11 = (void **)v21[0];
      }
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v12 = v22;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v21[1];
      }
      std::string::append(a2, (const std::string::value_type *)v11, v12);
      sub_1BB88(&v19);
      uint64_t v13 = (void *)v4[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          uint64_t v14 = (void *)v4[2];
          BOOL v15 = *v14 == (void)v4;
          uint64_t v4 = v14;
        }

        while (!v15);
      }

      if (v14 == (void *)(a1 + 32)) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
      uint64_t v4 = v14;
    }
  }

  return std::string::append(a2, " }", 2uLL);
}

void sub_100530( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
}

uint64_t sub_1005DC(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = a1 + 24;
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = v7;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0LL;
  v8[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v9;
  *(void *)(v4 + *(void *)(v9 - 24)) = v10;
  *(void *)a1 = v11;
  std::streambuf::basic_streambuf(v5);
  __int128 v12 = *a2;
  *(void *)(a1 + 104) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v12;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + sub_19DFC(v32 - 112) = 0LL;
  *(_DWORD *)(a1 + 120) = 24;
  sub_100748(v5);
  return a1;
}

void sub_100700(_Unwind_Exception *a1)
{
}

void sub_100748(uint64_t a1)
{
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }

  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }

  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v5 + 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + sub_7A768(v2 - 32) = (char *)v4 + v5;
  }

  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v5 + 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22LL;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v5 + 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v5 + 8) = v4;
      }

      if (v5) {
        *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v5 + 8) = (char *)v4 + v5;
      }
    }
  }

void sub_10085C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_100870(uint64_t a1)
{
  *(_BYTE *)(a1 + 520) = 1;
  return 1LL;
}

void sub_10089C(uint64_t a1)
{
  *(_BYTE *)(a1 + 520) = 0;
  sub_F4ECC(a1);
}

void sub_1008A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4704A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1008B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4704A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1008D4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1008E4(_DWORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1);
  ++a1[114];
  if ((_DWORD)result) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24LL))(a1);
  }
  return result;
}

uint64_t sub_100930(uint64_t a1)
{
  return a1;
}

void *sub_100968(void *a1)
{
  return a1;
}

uint64_t sub_1009A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      char v3 = (void *)*v2;
      sub_68314(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1009FC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v55 = (*(uint64_t (**)(void *))(*a2 + 16LL))(a2);
  uint64_t v9 = (void *)a2[59];
  uint64_t v54 = a2;
  if (!v9) {
    goto LABEL_18;
  }
  unint64_t v10 = a2 + 59;
  do
  {
    char v11 = sub_3358F4((uint64_t)(v9 + 4), a3);
    if (v11 >= 0) {
      __int128 v12 = v9;
    }
    else {
      __int128 v12 = v9 + 1;
    }
    if (v11 >= 0) {
      unint64_t v10 = v9;
    }
    uint64_t v9 = (void *)*v12;
  }

  while (*v12);
  if (v10 == a2 + 59 || (char)sub_3358F4(a3, (uint64_t)(v10 + 4)) < 0)
  {
LABEL_18:
    char v19 = 0;
LABEL_19:
    if (*(void *)(a3 + 8) - *(void *)a3 == 4LL)
    {
      *(_DWORD *)std::string __p = **(_DWORD **)a3;
      __int16 v20 = sub_FF7EC((uint64_t)(a2 + 19), *(unsigned int *)__p, __p) + 3;
    }

    else
    {
      __int16 v20 = a2 + 11;
    }

    unint64_t v21 = (uint64_t **)(a2 + 58);
    if (v20 == (void *)v20[1]) {
      goto LABEL_55;
    }
    int v22 = 0;
    unint64_t v23 = v20;
    do
    {
      uint64_t v24 = *(void *)(*v23 + 16LL);
      v22 |= sub_54ADC(v24, a3);
      if ((v22 & 1) != 0)
      {
        uint64_t v25 = *(void *)(a5 + 24);
        if (!v25) {
          sub_82CEC();
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v25 + 48LL))(v25, v24))
        {
          uint64_t v26 = *(void *)(v24 + 80);
          __int16 v27 = *(std::__shared_weak_count **)(v24 + 88);
          *a1 = v26;
          a1[1] = (uint64_t)v27;
          if (v27)
          {
            p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
            do
              unint64_t v29 = __ldxr(p_shared_weak_owners);
            while (__stxr(v29 + 1, p_shared_weak_owners));
          }

          if ((v19 & 1) == 0)
          {
            sub_1010B8((uint64_t)__p, a3, a1);
            char v30 = sub_101184(v21, (uint64_t)__p, (uint64_t)__p);
            if (v62) {
              std::__shared_weak_count::__release_weak(v62);
            }
            if (cf) {
              CFRelease(cf);
            }
            sub_32C8C(v60);
            if (*(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }

            if ((v30 & 1) == 0)
            {
              unint64_t v48 = (os_log_t *)sub_138E8(13);
              unint64_t v49 = *v48;
              if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "PortManager.cpp";
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = 374;
                _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Failed to cache result due to overlapping cache values",  __p,  0x12u);
              }

              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Failed to cache result due to overlapping cache values");
            }
          }

          *(void *)std::string __p = 0LL;
          *(void *)&__p[8] = 0LL;
          if (v27)
          {
            int v31 = std::__shared_weak_count::lock(v27);
            if (v31)
            {
              unint64_t v32 = v31;
              __int16 v33 = (unint64_t *)&v31->__shared_weak_owners_;
              do
                unint64_t v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
              *(void *)std::string __p = v26;
              *(void *)&__p[8] = v31;
              p_shared_owners = (unint64_t *)&v31->__shared_owners_;
              do
                unint64_t v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v32);
              }
            }

            else
            {
              *(void *)std::string __p = 0LL;
              *(void *)&__p[8] = 0LL;
            }
          }

          uint64_t v37 = sub_101050(*(void **)(a4 + 8), (unint64_t *)__p);
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
          }
          if (!v37) {
            goto LABEL_64;
          }
          int v38 = (std::__shared_weak_count *)a1[1];
          if (v38) {
            std::__shared_weak_count::__release_weak(v38);
          }
          char v19 = 1;
        }
      }

      unint64_t v23 = (void *)*v23;
    }

    while (v23 != (void *)v20[1]);
    if ((v22 & 1) == 0)
    {
LABEL_55:
      if ((v19 & 1) == 0)
      {
        uint64_t v57 = 0LL;
        uint64_t v58 = 0LL;
        sub_1010B8((uint64_t)__p, a3, &v57);
        char v39 = sub_101184(v21, (uint64_t)__p, (uint64_t)__p);
        if (v62) {
          std::__shared_weak_count::__release_weak(v62);
        }
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v60);
        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }

        if ((v39 & 1) == 0)
        {
          uint64_t v51 = (os_log_t *)sub_138E8(13);
          uint64_t v52 = *v51;
          if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "PortManager.cpp";
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = 386;
            _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Failed to cache result due to overlapping cache values",  __p,  0x12u);
          }

          uint64_t v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v53, "Failed to cache result due to overlapping cache values");
        }
      }
    }

    goto LABEL_63;
  }

  uint64_t v13 = (std::__shared_weak_count *)v10[16];
  if (!v13 || (uint64_t v14 = std::__shared_weak_count::lock(v13), (*(void *)&__p[8] = v14) == 0LL))
  {
LABEL_63:
    *a1 = 0LL;
    a1[1] = 0LL;
    goto LABEL_64;
  }

  BOOL v15 = v14;
  uint64_t v16 = v10[15];
  *(void *)std::string __p = v16;
  if (v16)
  {
    uint64_t v57 = v16;
    uint64_t v58 = v14;
    uint64_t v17 = (unint64_t *)&v14->__shared_weak_owners_;
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    if (sub_101050(*(void **)(a4 + 8), (unint64_t *)&v57))
    {
      std::__shared_weak_count::__release_weak(v15);
LABEL_75:
      std::string::pointer v46 = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }

      char v19 = 1;
      goto LABEL_19;
    }

    uint64_t v40 = *(void *)(a5 + 24);
    if (!v40) {
      sub_82CEC();
    }
    char v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v40 + 48LL))(v40, v16);
    std::__shared_weak_count::__release_weak(v15);
    if ((v41 & 1) == 0) {
      goto LABEL_75;
    }
  }

  *a1 = v16;
  a1[1] = (uint64_t)v15;
  uint64_t v42 = (unint64_t *)&v15->__shared_weak_owners_;
  do
    unint64_t v43 = __ldxr(v42);
  while (__stxr(v43 + 1, v42));
  BOOL v44 = (unint64_t *)&v15->__shared_owners_;
  do
    unint64_t v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }

void sub_100F78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24LL))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101050(void *a1, unint64_t *a2)
{
  if (a1)
  {
    char v3 = a1;
    uint64_t v4 = 1LL;
    do
    {
      if (!sub_D7370(a2, v3 + 4))
      {
        if (!sub_D7370(v3 + 4, a2)) {
          return v4;
        }
        ++v3;
      }

      char v3 = (void *)*v3;
    }

    while (v3);
  }

  return 0LL;
}

uint64_t sub_1010B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_7A5B8((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v6 = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + sub_7A768(v2 - 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_86550((uint64_t *)(a1 + 48), a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  std::string::size_type v7 = *(const void **)(a2 + 80);
  if (v7) {
    CFRetain(v7);
  }
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = v7;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v5 + 8) = v9;
  *(void *)(a1 + sub_19DFC(v32 - 96) = v8;
  if (v8)
  {
    unint64_t v10 = (unint64_t *)(v8 + 16);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  return a1;
}

void sub_101168(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::iostream::~basic_iostream(v2, v5 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_101184(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = (char *)a1[1];
  std::string::size_type v7 = (char **)(a1 + 1);
  uint64_t v8 = (char **)(a1 + 1);
  if (v5)
  {
    std::string::size_type v7 = (char **)(a1 + 1);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (char **)v5;
        uint64_t v10 = (uint64_t)(v5 + 32);
        unint64_t v5 = *v8;
        std::string::size_type v7 = v8;
        if (!*v8) {
          goto LABEL_11;
        }
      }

      if ((sub_3358F4(v10, a2) & 0x80) == 0) {
        break;
      }
      std::string::size_type v7 = v8 + 1;
      unint64_t v5 = v8[1];
      if (!v5) {
        goto LABEL_11;
      }
    }

    if (*v7) {
      return 0LL;
    }
  }

void sub_10130C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v5;
    operator delete(v5);
  }

  sub_10138C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101338(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  char v3 = *(const void **)(a1 + 80);
  if (v3) {
    CFRelease(v3);
  }
  sub_32C8C(*(void **)(a1 + 56));
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = v4;
    operator delete(v4);
  }

  return a1;
}

void sub_10138C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_FFF04((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

std::logic_error *sub_1013D0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_1013F4(uint64_t a1, uint64_t *a2)
{
  if ((*(_WORD *)(v8 + 184) & 2) != 0) {
    unsigned int v4 = 1717793397;
  }
  else {
    unsigned int v4 = 1852011125;
  }
  sub_1014AC(a1, v4, a2, 0);
  unint64_t v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_101498( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1014AC(uint64_t a1, unsigned int a2, uint64_t *a3, int a4)
{
  v39[0] = 0LL;
  v39[1] = 0LL;
  int v38 = (uint64_t *)v39;
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  unint64_t v43 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  sub_D61C0(&v31, &v42, 1LL);
  unsigned int v34 = a2;
  uint64_t v35 = (uint64_t)&v35;
  unint64_t v36 = &v35;
  uint64_t v37 = 0LL;
  uint64_t v11 = v33;
  if (v33)
  {
    uint64_t v13 = v31;
    __int128 v12 = v32;
    uint64_t v14 = *v32;
    *(void *)(v14 + std::iostream::~basic_iostream(v2, v5 + 8) = *(void *)(v31 + 8);
    **(void **)(v13 + std::iostream::~basic_iostream(v2, v5 + 8) = v14;
    uint64_t v15 = v35;
    *(void *)(v35 + std::iostream::~basic_iostream(v2, v5 + 8) = v12;
    *__int128 v12 = v15;
    uint64_t v35 = v13;
    *(void *)(v13 + std::iostream::~basic_iostream(v2, v5 + 8) = &v35;
    uint64_t v37 = v11;
    uint64_t v33 = 0LL;
    a2 = v34;
  }

  sub_10179C(&v38, a2, (int *)&v34);
  sub_85B80(&v35);
  sub_85B80(&v31);
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  char v16 = (std::__shared_weak_count *)a3[1];
  if (v16)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v16);
    unint64_t v43 = v17;
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v42 = *a3;
      uint64_t v19 = v42;
      if (v42
        && (*(unsigned int (**)(uint64_t))(*(void *)v42 + 120LL))(v42)
        && (*(unsigned int (**)(uint64_t))(*(void *)v19 + 152LL))(v19))
      {
        __int16 v20 = (std::__shared_weak_count *)a3[1];
        uint64_t v40 = *a3;
        char v41 = v20;
        if (v20)
        {
          unint64_t v21 = (unint64_t *)&v20->__shared_weak_owners_;
          do
            unint64_t v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }

        sub_D61C0(&v31, &v40, 1LL);
        unsigned int v23 = 1684238965;
        unsigned int v34 = 1684238965;
        uint64_t v35 = (uint64_t)&v35;
        unint64_t v36 = &v35;
        uint64_t v37 = 0LL;
        uint64_t v24 = v33;
        if (v33)
        {
          uint64_t v26 = v31;
          uint64_t v25 = v32;
          uint64_t v27 = *v32;
          *(void *)(v27 + std::iostream::~basic_iostream(v2, v5 + 8) = *(void *)(v31 + 8);
          **(void **)(v26 + std::iostream::~basic_iostream(v2, v5 + 8) = v27;
          uint64_t v28 = v35;
          *(void *)(v35 + std::iostream::~basic_iostream(v2, v5 + 8) = v25;
          uint64_t *v25 = v28;
          uint64_t v35 = v26;
          *(void *)(v26 + std::iostream::~basic_iostream(v2, v5 + 8) = &v35;
          uint64_t v37 = v24;
          uint64_t v33 = 0LL;
          unsigned int v23 = v34;
        }

        sub_10179C(&v38, v23, (int *)&v34);
        sub_85B80(&v35);
        sub_85B80(&v31);
        if (v41) {
          std::__shared_weak_count::__release_weak(v41);
        }
      }

      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  sub_101870(a1, &v38, a4);
  sub_EDF34(v39[0]);
}

void sub_101720( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_weak(a21);
  }
  sub_7A768(v22 - 72);
  sub_EDF34(a18);
  _Unwind_Resume(a1);
}

void sub_10179C(uint64_t **a1, unsigned int a2, int *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        unint64_t v5 = *v8;
        unint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      if (v9 >= a2) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    unint64_t v10 = (char *)operator new(0x40uLL);
    int v11 = *a3;
    v12[1] = v6;
    *((_DWORD *)v10 + std::iostream::~basic_iostream(v2, v5 + 8) = v11;
    *((void *)v10 + 5) = v10 + 40;
    *((void *)v10 + 6) = v10 + 40;
    *((void *)v10 + 7) = 0LL;
    sub_CCA0C((uint64_t)(v10 + 40), (uint64_t *)v10 + 5, (void *)a3 + 1);
    char v13 = 1;
    sub_32C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0LL;
    sub_EE1A4((uint64_t)v12);
  }

void sub_101870(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v184 = (uint64_t)&v184;
  int v185 = &v184;
  uint64_t v186 = 0LL;
  uint64_t v181 = (uint64_t)&v181;
  uint64_t v182 = &v181;
  uint64_t v183 = 0LL;
  uint64_t v178 = (uint64_t)&v178;
  uint64_t v179 = &v178;
  uint64_t v180 = 0LL;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  sub_102EEC(v5, 0x66637275u, (uint64_t)a2, &v184, &v181, &v178);
  sub_102EEC(v5, 0x6E637275u, (uint64_t)a2, &v184, &v181, &v178);
  if (a3) {
    goto LABEL_2;
  }
  if (!sub_FD118((_DWORD *)v5))
  {
    sub_34AA0(buf, v5);
    sub_FD324(v5, a2, &v184, &v181);
    if (buf[8]) {
      (*(void (**)(void))(**(void **)buf + 16LL))(*(void *)buf);
    }
LABEL_2:
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  sub_547F4(v5);
  sub_FD840((uint64_t)&v208, a2);
  uint64_t v177 = (uint64_t *)(v5 + 408);
  uint64_t v175 = (void *)v5;
  sub_103310((uint64_t)&v206, *(void *)(v5 + 416), v5 + 408);
  unsigned __int8 v176 = (uint64_t *)(v5 + 432);
  sub_103310((uint64_t)&v204, *(void *)(v5 + 440), v5 + 432);
  sub_103310((uint64_t)&v202, (uint64_t)v185, (uint64_t)&v184);
  int v174 = v6;
  sub_103310((uint64_t)&v200, (uint64_t)v182, (uint64_t)&v181);
  unint64_t v7 = (uint64_t **)(v5 + 392);
  uint64_t v8 = *(uint64_t **)(v5 + 392);
  if (!v8)
  {
    int v11 = 0LL;
    goto LABEL_16;
  }

  unsigned int v9 = *(uint64_t **)(v5 + 392);
  while (1)
  {
    unsigned int v10 = *((_DWORD *)v9 + 8);
    if (v10 <= 0x66637275) {
      break;
    }
LABEL_11:
    unsigned int v9 = (uint64_t *)*v9;
    if (!v9)
    {
      int v11 = 0LL;
      goto LABEL_18;
    }
  }

  if (v10 != 1717793397)
  {
    ++v9;
    goto LABEL_11;
  }

  int v11 = sub_10338C(v8, 0x66637275u);
  uint64_t v8 = *v7;
  if (!*v7)
  {
LABEL_16:
    __int128 v12 = 0LL;
    goto LABEL_31;
  }

LABEL_106:
      char v44 = 1;
      uint64_t v45 = 1LL;
      if ((v46 & 1) != 0)
      {
        sub_FF3B8(v211);
        goto LABEL_108;
      }
    }

    ++v48;
    goto LABEL_96;
  }

    ++v8;
  }

  while (v8 != a2);
}

      char v66 = *(_OWORD *)v637;
      *(void *)&v637[8] = 0LL;
      *(void *)v637 = 0LL;
      uint64_t v67 = (std::__shared_weak_count *)*((void *)v51 + 146);
      *(_OWORD *)v583 = v66;
      if (v67)
      {
        char v68 = (unint64_t *)&v67->__shared_owners_;
        do
          unsigned int v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }

      uint64_t v70 = *(std::__shared_weak_count **)&v637[8];
      if (*(void *)&v637[8])
      {
        unsigned int v71 = (unint64_t *)(*(void *)&v637[8] + 8LL);
        do
          os_log_t v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }

      uint64_t v73 = (unint64_t *)(*(void *)v583 + 176LL);
      v633.__r_.__value_.__r.__words[0] = *(void *)v583;
      uint64_t v74 = atomic_load((unint64_t *)(v633.__r_.__value_.__r.__words[0] + 176));
      if (v74 != -1LL)
      {
        *(void *)v637 = &v633;
        v627[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v637;
        std::__call_once(v73, v627, (void (__cdecl *)(void *))sub_2C2F34);
      }

      char v75 = *(void *)v583;
      memset(v627, 0, 24);
      sub_7F2E0( v627,  *(void **)(v75 + 80),  *(void **)(v75 + 88),  (uint64_t)(*(void *)(v75 + 88) - *(void *)(v75 + 80)) >> 4);
      char v77 = v627[0].__pn_.__r_.__value_.__l.__size_;
      uint64_t v76 = v627[0].__pn_.__r_.__value_.__r.__words[0];
      if (v627[0].__pn_.__r_.__value_.__r.__words[0] != v627[0].__pn_.__r_.__value_.__l.__size_)
      {
        uint64_t v78 = v51 + 352;
        char v79 = (void *)*((void *)v51 + 43);
        do
        {
          if ((unint64_t)v79 >= *v78)
          {
            uint64_t v83 = *((void *)v51 + 42);
            char v84 = ((uint64_t)v79 - v83) >> 4;
            std::string v85 = *v78 - v83;
            uint64_t v86 = v85 >> 3;
            else {
              int v87 = v86;
            }
            *(void *)&v637[32] = v51 + 352;
            unsigned int v88 = (char *)sub_7BE90(v87);
            unint64_t v90 = &v88[16 * v84];
            __int128 v91 = *(_OWORD *)v76;
            *(_OWORD *)unint64_t v90 = *(_OWORD *)v76;
            if (*((void *)&v91 + 1))
            {
              uint64_t v92 = (unint64_t *)(*((void *)&v91 + 1) + 8LL);
              do
                int v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }

            uint64_t v95 = (void *)*((void *)v51 + 42);
            uint64_t v94 = (void *)*((void *)v51 + 43);
            if (v94 == v95)
            {
              unint64_t v98 = vdupq_n_s64((unint64_t)v94);
              uint64_t v96 = &v88[16 * v84];
            }

            else
            {
              uint64_t v96 = &v88[16 * v84];
              do
              {
                AudioObjectPropertySelector v97 = *((_OWORD *)v94 - 1);
                v94 -= 2;
                *((_OWORD *)v96 - 1) = v97;
                v96 -= 16;
                _DWORD *v94 = 0LL;
                v94[1] = 0LL;
              }

              while (v94 != v95);
              unint64_t v98 = *((int64x2_t *)v51 + 21);
            }

            char v79 = v90 + 16;
            *((void *)v51 + 42) = v96;
            *((void *)v51 + 43) = v90 + 16;
            *(int64x2_t *)&v637[8] = v98;
            unsigned __int8 v99 = *((void *)v51 + 44);
            *((void *)v51 + 44) = &v88[16 * v89];
            *(void *)&v637[24] = v99;
            *(void *)v637 = v98.i64[0];
            sub_A0D64((uint64_t)v637);
          }

          else
          {
            std::__shared_weak_count *v79 = *(void *)v76;
            uint64_t v80 = *(void *)(v76 + 8);
            v79[1] = v80;
            if (v80)
            {
              unsigned __int8 v81 = (unint64_t *)(v80 + 8);
              do
                uint64_t v82 = __ldxr(v81);
              while (__stxr(v82 + 1, v81));
            }

            v79 += 2;
          }

          *((void *)v51 + 43) = v79;
          v76 += 16LL;
        }

        while (v76 != v77);
      }

      *(void *)v637 = v627;
      sub_7A668((void ***)v637);
      if (!*(_BYTE *)(*(void *)v583 + 168LL)) {
        sub_8DEEC();
      }
      uint64_t v100 = *(void *)(*(void *)v583 + 160LL);
      uint64_t v101 = *(uint64_t ***)v100;
      uint64_t v102 = *(uint64_t ***)(v100 + 8);
      AudioObjectPropertySelector v103 = v582;
      if (*(uint64_t ***)v100 != v102)
      {
        unint64_t v104 = (void ***)*v582;
        while (1)
        {
          uint64_t v105 = *v101;
          __int16 v106 = v101[1];
          if (*v101 != v106) {
            break;
          }
LABEL_153:
          v101 += 3;
          v104 += 3;
          if (v101 == v102) {
            goto LABEL_154;
          }
        }

        uint64_t v107 = *v104;
        while (1)
        {
          uint64_t v108 = *v105;
          AudioObjectPropertySelector v109 = *v107;
          if ((void *)*v105 != *v107)
          {
            unsigned int v110 = !v108 || v109 == 0LL;
          }

          ++v105;
          ++v107;
          if (v105 == v106) {
            goto LABEL_153;
          }
        }
      }

  sub_226218(buf, a1, (uint64_t)a2, a3);
LABEL_98:
  __int128 v12 = *(std::__shared_weak_count **)buf;
  unsigned int v10 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)buf)
  {
    if (*(void *)&buf[8])
    {
      char v38 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        char v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    return;
  }

LABEL_144:
    char v66 = 1;
    uint64_t v67 = 1LL;
  }

  while ((v68 & 1) == 0);
  sub_FF3B8(v211);
LABEL_146:
  if (v180)
  {
    char v77 = 0;
    uint64_t v78 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = v11;
    *(void *)&buf[8] = v12;
    do
    {
      char v79 = v77;
      uint64_t v80 = *(uint64_t **)&buf[8 * v78];
      unsigned __int8 v81 = v179;
      if (v80 && v179 != &v178)
      {
        do
        {
          sub_F7548(v80, v81 + 2);
          unsigned __int8 v81 = (uint64_t *)v81[1];
        }

        while (v81 != &v178);
      }

      char v77 = 1;
      uint64_t v78 = 1LL;
    }

    while ((v79 & 1) == 0);
  }

  uint64_t v82 = (uint64_t **)(v175 + 48);
  uint64_t v83 = (uint64_t *)v208;
  if (v208 != v209)
  {
    do
    {
      char v84 = (unsigned int *)(v83 + 4);
      std::string v85 = *v7;
      uint64_t v86 = v7;
      int v87 = v7;
      if (*v7)
      {
        unsigned int v88 = *v84;
        while (1)
        {
          while (1)
          {
            int v87 = (uint64_t **)v85;
            unsigned int v89 = *((_DWORD *)v85 + 8);
            if (v88 >= v89) {
              break;
            }
            std::string v85 = *v87;
            uint64_t v86 = v87;
            if (!*v87) {
              goto LABEL_161;
            }
          }

          if (v89 >= v88) {
            break;
          }
          std::string v85 = v87[1];
          if (!v85)
          {
            uint64_t v86 = v87 + 1;
            goto LABEL_161;
          }
        }

        uint64_t v92 = v83 + 5;
        int v93 = (uint64_t *)v83[6];
        if (v93 != v83 + 5)
        {
          uint64_t v94 = (uint64_t **)operator new(0x20uLL);
          uint64_t v95 = v94;
          _DWORD *v94 = 0LL;
          v94[1] = 0LL;
          v94[2] = (uint64_t *)v93[2];
          uint64_t v96 = v93[3];
          v94[3] = (uint64_t *)v96;
          if (v96)
          {
            AudioObjectPropertySelector v97 = (unint64_t *)(v96 + 16);
            do
              unint64_t v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }

          unsigned __int8 v99 = (void *)v93[1];
          if (v99 == v92)
          {
            uint64_t v100 = 1LL;
          }

          else
          {
            uint64_t v100 = 1LL;
            uint64_t v101 = (uint64_t *)v94;
            do
            {
              uint64_t v94 = (uint64_t **)operator new(0x20uLL);
              _DWORD *v94 = v101;
              v94[1] = 0LL;
              v94[2] = (uint64_t *)v99[2];
              uint64_t v102 = v99[3];
              v94[3] = (uint64_t *)v102;
              if (v102)
              {
                AudioObjectPropertySelector v103 = (unint64_t *)(v102 + 16);
                do
                  unint64_t v104 = __ldxr(v103);
                while (__stxr(v104 + 1, v103));
              }

              v101[1] = (uint64_t)v94;
              ++v100;
              unsigned __int8 v99 = (void *)v99[1];
              uint64_t v101 = (uint64_t *)v94;
            }

            while (v99 != v92);
          }

          uint64_t v105 = v87[5];
          v105[1] = (uint64_t)v95;
          os_log_t *v95 = v105;
          v87[5] = (uint64_t *)v94;
          v94[1] = (uint64_t *)(v87 + 5);
          v87[7] = (uint64_t *)((char *)v87[7] + v100);
        }
      }

      else
      {
LABEL_161:
        sub_EE138((uint64_t)buf, (uint64_t)v82, (uint64_t)v84);
        sub_32C38(v82, (uint64_t)v87, v86, *(uint64_t **)buf);
        *(void *)AudioObjectPropertyAddress buf = 0LL;
        sub_EE1A4((uint64_t)buf);
      }

      unint64_t v90 = (uint64_t *)v83[1];
      if (v90)
      {
        do
        {
          __int128 v91 = (uint64_t **)v90;
          unint64_t v90 = (uint64_t *)*v90;
        }

        while (v90);
      }

      else
      {
        do
        {
          __int128 v91 = (uint64_t **)v83[2];
          BOOL v30 = *v91 == v83;
          uint64_t v83 = (uint64_t *)v91;
        }

        while (!v30);
      }

      uint64_t v83 = (uint64_t *)v91;
    }

    while (v91 != v209);
  }

  sub_FD840((uint64_t)&v210, v82);
  __int16 v106 = v210;
  if (v210 != (std::string::value_type *)&v211)
  {
    do
    {
      if (!*((void *)v106 + 7))
      {
        AudioObjectPropertySelector v109 = *v7;
        if (*v7)
        {
          unsigned int v110 = *((_DWORD *)v106 + 8);
          uint64_t v111 = (uint64_t *)v7;
          uint64_t v112 = *v7;
          do
          {
            unsigned int v113 = *((_DWORD *)v112 + 8);
            BOOL v114 = v113 >= v110;
            if (v113 >= v110) {
              uint64_t v115 = v112;
            }
            else {
              uint64_t v115 = v112 + 1;
            }
            if (v114) {
              uint64_t v111 = v112;
            }
            uint64_t v112 = (uint64_t *)*v115;
          }

          while (*v115);
          if (v111 != (uint64_t *)v7 && v110 >= *((_DWORD *)v111 + 8))
          {
            int v116 = (uint64_t *)v111[1];
            uint64_t v117 = v111;
            if (v116)
            {
              do
              {
                uint64_t v118 = v116;
                int v116 = (uint64_t *)*v116;
              }

              while (v116);
            }

            else
            {
              do
              {
                uint64_t v118 = (uint64_t *)v117[2];
                BOOL v30 = *v118 == (void)v117;
                uint64_t v117 = v118;
              }

              while (!v30);
            }

            if (*v82 == v111) {
              os_log_s *v82 = v118;
            }
            --v175[50];
            sub_911E8(v109, v111);
            sub_85B80(v111 + 5);
            operator delete(v111);
          }
        }
      }

      uint64_t v107 = (std::string::value_type *)*((void *)v106 + 1);
      if (v107)
      {
        do
        {
          uint64_t v108 = (std::string::value_type **)v107;
          uint64_t v107 = *(std::string::value_type **)v107;
        }

        while (v107);
      }

      else
      {
        do
        {
          uint64_t v108 = (std::string::value_type **)*((void *)v106 + 2);
          BOOL v30 = *v108 == v106;
          __int16 v106 = (std::string::value_type *)v108;
        }

        while (!v30);
      }

      __int16 v106 = (std::string::value_type *)v108;
    }

    while (v108 != (std::string::value_type **)&v211);
  }

  sub_FF6B4(v177, v177, v185, &v184);
  sub_FF6B4(v176, v176, v182, &v181);
  uint64_t v119 = sub_5954C();
  uint64_t v120 = *v7;
  if (!*v7)
  {
    char v123 = 0LL;
    int v124 = 0LL;
    uint64_t v125 = v175;
    goto LABEL_234;
  }

  uint64_t v121 = *v7;
  while (2)
  {
    unsigned int v122 = *((_DWORD *)v121 + 8);
    if (v122 > 0x66637275)
    {
LABEL_216:
      uint64_t v121 = (uint64_t *)*v121;
      if (!v121)
      {
        char v123 = 0LL;
        goto LABEL_220;
      }

      continue;
    }

    break;
  }

  if (v122 != 1717793397)
  {
    ++v121;
    goto LABEL_216;
  }

  char v123 = sub_10338C(v120, 0x66637275u);
  uint64_t v120 = *v7;
LABEL_220:
  uint64_t v125 = v175;
  if (!v120)
  {
LABEL_226:
    int v124 = 0LL;
    goto LABEL_234;
  }

  uint64_t v126 = v120;
  while (2)
  {
    unsigned int v127 = *((_DWORD *)v126 + 8);
    if (v127 > 0x6E637275)
    {
LABEL_225:
      uint64_t v126 = (uint64_t *)*v126;
      if (!v126) {
        goto LABEL_226;
      }
      continue;
    }

    break;
  }

  if (v127 != 1852011125)
  {
    ++v126;
    goto LABEL_225;
  }

  int v124 = sub_10338C(v120, 0x6E637275u);
LABEL_234:
  sub_103518((uint64_t)&v197, v125[52], (uint64_t)v177);
  sub_103518((uint64_t)&v196, v125[55], (uint64_t)v176);
  uint64_t v130 = (uint64_t *)&v193;
  v194 = 0LL;
  uint64_t v195 = 0LL;
  unint64_t v193 = &v194;
  uint64_t v131 = v197;
  std::string::size_type cap = (std::string *)v196.__r_.__value_.__r.__words[0];
  uint64_t v191 = (uint64_t *)&v193;
  v192[0] = &v194;
  if (v197 == (os_unfair_lock_s **)&v198)
  {
    uint64_t v139 = &v194;
LABEL_257:
    sub_1038AC((uint64_t)buf, cap, &v196.__r_.__value_.__l.__size_, (uint64_t)v130, (uint64_t)v139);
  }

  else
  {
    while (cap != (std::string *)&v196.__r_.__value_.__r.__words[1])
    {
      if (sub_D7370(&cap[1].__r_.__value_.__l.__size_, (unint64_t *)v131 + 4))
      {
        sub_103940((uint64_t)&v191, &cap[1].__r_.__value_.__l.__size_);
        std::string::size_type size = (std::string *)cap->__r_.__value_.__l.__size_;
        if (size)
        {
          do
          {
            std::string::size_type cap = size;
            std::string::size_type size = (std::string *)size->__r_.__value_.__r.__words[0];
          }

          while (size);
        }

        else
        {
          do
          {
            uint64_t v134 = cap;
            std::string::size_type cap = (std::string *)cap->__r_.__value_.__l.__cap_;
          }

          while ((std::string *)cap->__r_.__value_.__l.__data_ != v134);
        }
      }

      else
      {
        if (sub_D7370((unint64_t *)v131 + 4, &cap[1].__r_.__value_.__l.__size_))
        {
          uint64_t v135 = (std::string **)cap;
        }

        else
        {
          uint64_t v136 = (std::string *)cap->__r_.__value_.__l.__size_;
          if (v136)
          {
            do
            {
              uint64_t v135 = (std::string **)v136;
              uint64_t v136 = (std::string *)v136->__r_.__value_.__r.__words[0];
            }

            while (v136);
          }

          else
          {
            do
            {
              uint64_t v135 = (std::string **)cap->__r_.__value_.__l.__cap_;
              BOOL v30 = *v135 == cap;
              std::string::size_type cap = (std::string *)v135;
            }

            while (!v30);
          }
        }

        sub_103940((uint64_t)&v191, (unint64_t *)v131 + 4);
        uint64_t v137 = v131[1];
        if (v137)
        {
          do
          {
            uint64_t v131 = (os_unfair_lock_s **)v137;
            uint64_t v137 = *(os_unfair_lock_s **)&v137->_os_unfair_lock_opaque;
          }

          while (v137);
        }

        else
        {
          do
          {
            char v138 = v131;
            uint64_t v131 = (os_unfair_lock_s **)v131[2];
          }

          while (*v131 != (os_unfair_lock_s *)v138);
        }

        std::string::size_type cap = (std::string *)v135;
      }

      if (v131 == (os_unfair_lock_s **)&v198)
      {
        uint64_t v130 = v191;
        uint64_t v139 = (void **)v192[0];
        goto LABEL_257;
      }
    }

    sub_1038AC((uint64_t)buf, v131, &v198, (uint64_t)v191, (uint64_t)v192[0]);
  }

  char v140 = 0;
  uint64_t v141 = 0LL;
  v192[0] = 0LL;
  v192[1] = 0LL;
  uint64_t v191 = (uint64_t *)v192;
  *(void *)AudioObjectPropertyAddress buf = v123;
  *(void *)&buf[8] = v124;
  uint64_t v142 = (uint64_t)v124;
  do
  {
    char v143 = v140;
    uint64_t v144 = *(void *)&buf[8 * v141];
    if (v144)
    {
      for (uint64_t i = *(void *)(v144 + 8); i != v144; uint64_t i = *(void *)(i + 8))
        sub_103590(&v191, v192, (uint64_t *)(i + 16));
    }

    char v140 = 1;
    uint64_t v141 = 1LL;
  }

  while ((v143 & 1) == 0);
  if (v195 != v196.__r_.__value_.__l.__cap_ + v199)
  {
    AudioObjectID v146 = (os_log_t *)sub_138E8(13);
    uint64_t v147 = *v146;
    if (*v146)
    {
      if (os_log_type_enabled(*v146, OS_LOG_TYPE_ERROR))
      {
        sub_FEC64(&v190, v175[52], (uint64_t)v177);
        int v148 = (char)v190.__r_.__value_.__s.__size_;
        std::string::size_type v149 = v190.__r_.__value_.__r.__words[0];
        sub_FEC64(&__p, v175[55], (uint64_t)v176);
        int v150 = &v190;
        if (v148 < 0) {
          int v150 = (std::string *)v149;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t p_p = &__p;
        }
        else {
          uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1098;
        __int16 v214 = 2080;
        uint64_t v215 = v150;
        __int16 v216 = 2080;
        uint64_t v217 = p_p;
        _os_log_impl( &dword_0,  v147,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Batch notification corruption: overlap between port connectins and disconnectio ns. Connection list: %s; Disconnection list: %s",
          buf,
          0x26u);
      }
    }
  }

  int v152 = v193;
  if (v193 != &v194)
  {
    uint64_t v153 = v191;
    while (sub_103644(v152 + 4, v153 + 4))
    {
      uint64_t v154 = (void *)v152[1];
      unsigned int v155 = v152;
      if (v154)
      {
        do
        {
          int v152 = v154;
          uint64_t v154 = (void *)*v154;
        }

        while (v154);
      }

      else
      {
        do
        {
          int v152 = (void *)v155[2];
          BOOL v30 = *v152 == (void)v155;
          unsigned int v155 = v152;
        }

        while (!v30);
      }

      uint64_t v156 = (uint64_t *)v153[1];
      if (v156)
      {
        do
        {
          uint64_t v157 = v156;
          uint64_t v156 = (uint64_t *)*v156;
        }

        while (v156);
      }

      else
      {
        do
        {
          uint64_t v157 = (uint64_t *)v153[2];
          BOOL v30 = *v157 == (void)v153;
          uint64_t v153 = v157;
        }

        while (!v30);
      }

      uint64_t v153 = v157;
      if (v152 == &v194) {
        goto LABEL_319;
      }
    }

    int v158 = (os_log_t *)sub_138E8(13);
    uint64_t v159 = *v158;
    if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
    {
      sub_FEC64(&v190, v175[52], (uint64_t)v177);
      if ((v190.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v160 = &v190;
      }
      else {
        uint64_t v160 = (std::string *)v190.__r_.__value_.__r.__words[0];
      }
      sub_FEC64(&__p, v175[55], (uint64_t)v176);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v161 = &__p;
      }
      else {
        uint64_t v161 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v123)
      {
        uint64_t v162 = &v188;
        sub_FEC64(&v188, v123[1], (uint64_t)v123);
        if ((v188.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v162 = (std::string *)v188.__r_.__value_.__r.__words[0];
        }
      }

      else
      {
        uint64_t v162 = (std::string *)"NULL";
      }

      if (v142)
      {
        sub_FEC64(&v187, *(void *)(v142 + 8), v142);
        if ((v187.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v163 = &v187;
        }
        else {
          uint64_t v163 = (std::string *)v187.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1108;
        __int16 v214 = 2080;
        uint64_t v215 = v160;
        __int16 v216 = 2080;
        uint64_t v217 = v161;
        __int16 v218 = 2080;
        int v219 = v162;
        __int16 v220 = 2080;
        uint64_t v221 = (const char *)v163;
        _os_log_impl( &dword_0,  v159,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Batch notification corruption: connection/disconnection list contents do not ma tch cached PortUpdateMap. Connection list: %s; Disconnection list: %s; Cacheable update list: %s; NonCacheable"
          " update list: %s",
          buf,
          0x3Au);
      }

      else
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1108;
        __int16 v214 = 2080;
        uint64_t v215 = v160;
        __int16 v216 = 2080;
        uint64_t v217 = v161;
        __int16 v218 = 2080;
        int v219 = v162;
        __int16 v220 = 2080;
        uint64_t v221 = "NULL";
        _os_log_impl( &dword_0,  v159,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Batch notification corruption: connection/disconnection list contents do not ma tch cached PortUpdateMap. Connection list: %s; Disconnection list: %s; Cacheable update list: %s; NonCacheable"
          " update list: %s",
          buf,
          0x3Au);
      }
    }
  }

            if (*(_DWORD *)v65)
            {
              uint64_t v163 = (os_log_t *)sub_138E8(13);
              uint64_t v164 = *v163;
              if (*v163 && os_log_type_enabled(*v163, OS_LOG_TYPE_ERROR))
              {
                sub_23FE8((uint64_t)&__p, v197 + 2);
                uint64_t v165 = v210;
                uint64_t v166 = (void **)__p;
                sub_7D084(&v207, __s);
                v167 = &__p;
                if (v165 < 0) {
                  v167 = v166;
                }
                if ((v207.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v168 = &v207;
                }
                else {
                  v168 = (std::string *)v207.__r_.__value_.__r.__words[0];
                }
                uint64_t v169 = *(_DWORD *)v65;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
                uint64_t v215 = 1024;
                __int16 v216 = 629;
                uint64_t v217 = 2080;
                *(void *)__int16 v218 = v167;
                *(_WORD *)&v218[8] = 2080;
                *(void *)&v218[10] = v168;
                *(_WORD *)&v218[18] = 1024;
                *(_DWORD *)&v218[20] = v169;
                *(_WORD *)&v218[24] = 1024;
                *(_DWORD *)&v218[26] = 0;
                _os_log_impl( &dword_0,  v164,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Device %s describes its %s channel layout with tag %#X (expected %#X)",  buf,  0x32u);
                if (v210 < 0) {
                  operator delete(__p);
                }
              }

              char v170 = __cxa_allocate_exception(0x10uLL);
              *(void *)char v170 = &off_4865A0;
              v170[2] = 2003329396;
            }

            if (v203 > *((_DWORD *)v65 + 2))
            {
              unsigned int v155 = (os_log_t *)sub_138E8(13);
              uint64_t v156 = *v155;
              if (*v155 && os_log_type_enabled(*v155, OS_LOG_TYPE_ERROR))
              {
                sub_7D084(&__p, __s);
                uint64_t v157 = v210;
                int v158 = (void **)__p;
                sub_23FE8((uint64_t)&v207, v197 + 2);
                uint64_t v159 = &__p;
                if (v157 < 0) {
                  uint64_t v159 = v158;
                }
                if ((v207.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v160 = &v207;
                }
                else {
                  uint64_t v160 = (std::string *)v207.__r_.__value_.__r.__words[0];
                }
                uint64_t v161 = *((_DWORD *)v65 + 2);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
                uint64_t v215 = 1024;
                __int16 v216 = 633;
                uint64_t v217 = 2080;
                *(void *)__int16 v218 = v159;
                *(_WORD *)&v218[8] = 2080;
                *(void *)&v218[10] = v160;
                *(_WORD *)&v218[18] = 1024;
                *(_DWORD *)&v218[20] = v161;
                *(_WORD *)&v218[24] = 1024;
                *(_DWORD *)&v218[26] = v203;
                _os_log_impl( &dword_0,  v156,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Malformed channel layout: The %s channel layout for device %s contains %u channel descriptions (expeted at least %u)",  buf,  0x32u);
                if (v210 < 0) {
                  operator delete(__p);
                }
              }

              uint64_t v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error( v162,  "Malformed channel layout: The %s channel layout for device %s contains %u channel descriptions (expeted at least %u)");
            }

            __int16 v106 = v211;
            uint64_t v107 = v211[v200];
            v211[v200] = v65;
            if (v107) {
              free(v107);
            }
            v106[2 * v202 + 1] = (void *)(v66 | (unint64_t)(v67 << 32));
            uint64_t v33 = v203 + v199;
            uint64_t v31 = v196;
            goto LABEL_150;
          }

          unsigned int v71 = sub_138E8(16);
          os_log_t v72 = sub_138E8(33);
          uint64_t v73 = 0;
          uint64_t v74 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          char v75 = *(void *)(v71 + 8);
          while (1)
          {
            uint64_t v76 = *(int *)&buf[4 * v74];
            char v77 = v73;
            if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
              break;
            }
            uint64_t v73 = 1;
            uint64_t v74 = 1LL;
            if ((v77 & 1) != 0)
            {
              if ((v75 & 1) == 0) {
                goto LABEL_124;
              }
              goto LABEL_97;
            }
          }

          if ((v75 & v76) == 0) {
            unsigned int v71 = v72;
          }
          if ((*(void *)(v71 + 8) & 1) == 0) {
            goto LABEL_124;
          }
LABEL_97:
          uint64_t v78 = *(os_log_s **)v71;
          if (!v78 || !os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          sub_23FE8((uint64_t)&__p, v50 + 2);
          char v79 = v210;
          uint64_t v80 = (void **)__p;
          sub_613AC((uint64_t)&v207, v201);
          unsigned __int8 v81 = &__p;
          if (v79 < 0) {
            unsigned __int8 v81 = v80;
          }
          uint64_t v82 = &v207;
          if ((v207.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v82 = (std::string *)v207.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
          uint64_t v215 = 1024;
          __int16 v216 = 623;
          uint64_t v217 = 2080;
          *(void *)__int16 v218 = v81;
          *(_WORD *)&v218[8] = 2080;
          *(void *)&v218[10] = v82;
          *(_WORD *)&v218[18] = 1024;
          *(_DWORD *)&v218[20] = v203;
          _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PhysicalDevice %s does not support %s. Setting unknown channel layouts for its %u client-facing channels",  buf,  0x2Cu);
          unint64_t v32 = v195;
          if ((v210 & 0x80000000) == 0) {
            goto LABEL_124;
          }
          goto LABEL_123;
        }

        char v39 = sub_138E8(16);
        uint64_t v40 = sub_138E8(33);
        BOOL v41 = 0;
        uint64_t v42 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        unint64_t v43 = *(void *)(v39 + 8);
        while (1)
        {
          char v44 = *(int *)&buf[4 * v42];
          uint64_t v45 = v41;
          if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
            break;
          }
          BOOL v41 = 1;
          uint64_t v42 = 1LL;
          if ((v45 & 1) != 0)
          {
            if ((v43 & 1) == 0) {
              goto LABEL_150;
            }
            goto LABEL_81;
          }
        }

        if ((v43 & v44) == 0) {
          char v39 = v40;
        }
        if ((*(void *)(v39 + 8) & 1) != 0)
        {
LABEL_81:
          char v68 = *(os_log_s **)v39;
          if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            sub_7D084(&__p, __s);
            unsigned int v69 = &__p;
            if (v210 < 0) {
              unsigned int v69 = __p;
            }
            uint64_t v70 = "hidden";
            if (v38 == -1) {
              uint64_t v70 = "disabled";
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
            uint64_t v215 = 1024;
            __int16 v216 = 559;
            uint64_t v217 = 2080;
            *(void *)__int16 v218 = v69;
            *(_WORD *)&v218[8] = 1024;
            *(_DWORD *)&v218[10] = v34;
            *(_WORD *)&v218[14] = 2080;
            *(void *)&v218[16] = v70;
            _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d The %s underlying stream cache item at index %d references a %s client stream",  buf,  0x2Cu);
            if (v210 < 0) {
              operator delete(__p);
            }
          }
        }
      }

LABEL_319:
  sub_FF3B8(v192[0]);
  sub_FF3B8(v194);
  sub_FF3B8((void *)v196.__r_.__value_.__l.__size_);
  sub_FF3B8(v198);
LABEL_320:
  sub_EDF34(v211);
  sub_FF3B8(v201[0]);
  sub_FF3B8(v203[0]);
  sub_FF3B8(v205[0]);
  sub_FF3B8(v207[0]);
  sub_EDF34(v209[0]);
  uint64_t v5 = (uint64_t)v175;
  if (v174) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
LABEL_4:
  sub_85B80(&v178);
  sub_85B80(&v181);
  sub_85B80(&v184);
}

            uint64_t v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v142, "Precondition failure.");
LABEL_320:
            int v150 = (void (*)(void *))&std::logic_error::~logic_error;
            goto LABEL_321;
          }

          uint64_t v137 = (os_log_t *)sub_138E8(13);
          char v138 = *v137;
          if (*v137 && os_log_type_enabled(*v137, OS_LOG_TYPE_ERROR))
          {
            buf.uint64_t mSelector = 136315394;
            *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
            uint64_t v208 = 1024;
            uint64_t v209 = 42;
            _os_log_impl( &dword_0,  v138,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
          }
        }

        else
        {
          uint64_t v135 = (os_log_t *)sub_138E8(13);
          uint64_t v136 = *v135;
          if (*v135 && os_log_type_enabled(*v135, OS_LOG_TYPE_ERROR))
          {
            buf.uint64_t mSelector = 136315394;
            *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
            uint64_t v208 = 1024;
            uint64_t v209 = 41;
            _os_log_impl( &dword_0,  v136,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
          }
        }
      }

      else
      {
        uint64_t v133 = (os_log_t *)sub_138E8(13);
        uint64_t v134 = *v133;
        if (*v133 && os_log_type_enabled(*v133, OS_LOG_TYPE_ERROR))
        {
          buf.uint64_t mSelector = 136315394;
          *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
          uint64_t v208 = 1024;
          uint64_t v209 = 40;
          _os_log_impl( &dword_0,  v134,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
        }
      }

      uint64_t v139 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v139, "Precondition failure.");
    }
  }

void sub_102C44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24LL))(a14);
  }
  sub_85B80(&a17);
  sub_85B80(&a20);
  sub_85B80(&a23);
  _Unwind_Resume(a1);
}

void sub_102EEC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  *(void *)(a1 + 472) = 0LL;
  *(void *)(a1 + 4(*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0LL;
  *(void *)(a1 + 464) = a1 + 472;
  uint64_t v14 = *(void *)(a3 + 8);
  uint64_t v13 = a3 + 8;
  uint64_t v12 = v14;
  if (v14)
  {
    uint64_t v15 = v13;
    do
    {
      unsigned int v16 = *(_DWORD *)(v12 + 32);
      BOOL v17 = v16 >= a2;
      if (v16 >= a2) {
        unint64_t v18 = (uint64_t *)v12;
      }
      else {
        unint64_t v18 = (uint64_t *)(v12 + 8);
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      uint64_t v12 = *v18;
    }

    while (*v18);
    if (v15 != v13 && *(_DWORD *)(v15 + 32) <= a2)
    {
      uint64_t v19 = v15 + 40;
      uint64_t v20 = *(void *)(v15 + 48);
      if (v20 != v15 + 40)
      {
        std::string::size_type v21 = (void *)(a1 + 88);
        do
        {
          sub_B8CBC((uint64_t *)&v48, (uint64_t *)(v20 + 16), "", 556);
          uint64_t v22 = v48;
          uint64_t v23 = sub_FC61C((uint64_t)v21, (unint64_t)v48);
          if (v21 == (void *)v23
            && (int v24 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v22->_os_unfair_lock_opaque + 152LL))(v22),
                uint64_t v22 = v48,
                v24))
          {
            char v25 = v49;
            if (v49)
            {
              p_shared_weak_owners = (unint64_t *)&v49->__shared_weak_owners_;
              do
                unint64_t v27 = __ldxr(p_shared_weak_owners);
              while (__stxr(v27 + 1, p_shared_weak_owners));
            }

            uint64_t v28 = operator new(0x20uLL);
            v28[2] = v22;
            v28[3] = v25;
            uint64_t v29 = *a4;
            *uint64_t v28 = *a4;
            v28[1] = a4;
            *(void *)(v29 + std::iostream::~basic_iostream(v2, v5 + 8) = v28;
            *a4 = (uint64_t)v28;
            BOOL v30 = a4 + 2;
          }

          else if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v22->_os_unfair_lock_opaque + 152LL))(v22) & 1) != 0)
          {
            *(void *)AudioObjectPropertyAddress buf = v23;
            sub_FC87C(v21, (uint64_t **)buf);
            sub_FBDB4((uint64_t)v21, v48);
            uint64_t v31 = v48;
            char v25 = v49;
            if (v49)
            {
              unint64_t v32 = (unint64_t *)&v49->__shared_weak_owners_;
              do
                unint64_t v33 = __ldxr(v32);
              while (__stxr(v33 + 1, v32));
            }

            unsigned int v34 = operator new(0x20uLL);
            uint64_t v34[2] = v31;
            void v34[3] = v25;
            uint64_t v35 = *a6;
            *unsigned int v34 = *a6;
            v34[1] = a6;
            *(void *)(v35 + std::iostream::~basic_iostream(v2, v5 + 8) = v34;
            *a6 = (uint64_t)v34;
            BOOL v30 = a6 + 2;
          }

          else
          {
            if ((*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&v48->_os_unfair_lock_opaque + 160LL))(v48))
            {
              uint64_t v45 = (os_log_t *)sub_138E8(13);
              char v46 = *v45;
              if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "PortManager.cpp";
                __int16 v51 = 1024;
                int v52 = 569;
                _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal state. Port claims to be disconnected and routable.",  buf,  0x12u);
              }

              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Illegal state. Port claims to be disconnected and routable.");
            }

            if (v21 == (void *)v23)
            {
              unint64_t v43 = (os_log_t *)sub_138E8(9);
              char v44 = *v43;
              if (*v43)
              {
                if (os_log_type_enabled(*v43, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                  *(void *)&uint8_t buf[4] = "PortManager.cpp";
                  __int16 v51 = 1024;
                  int v52 = 578;
                  __int16 v53 = 2048;
                  uint64_t v54 = v48;
                  _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unable to locate the disconnected Port at %p in PortManager's connected port list (yet). A dding to the disconnections list",  buf,  0x1Cu);
                }
              }
            }

            char v36 = v48;
            char v25 = v49;
            if (v49)
            {
              uint64_t v37 = (unint64_t *)&v49->__shared_weak_owners_;
              do
                unint64_t v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }

            char v39 = operator new(0x20uLL);
            v39[2] = v36;
            void v39[3] = v25;
            uint64_t v40 = *a5;
            *char v39 = *a5;
            v39[1] = a5;
            *(void *)(v40 + std::iostream::~basic_iostream(v2, v5 + 8) = v39;
            *a5 = (uint64_t)v39;
            BOOL v30 = a5 + 2;
          }

          ++*v30;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              unint64_t v42 = __ldaxr(p_shared_owners);
            while (__stlxr(v42 - 1, p_shared_owners));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }

          uint64_t v20 = *(void *)(v20 + 8);
        }

        while (v20 != v19);
      }
    }
  }

void sub_1032B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_103310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
  unsigned int v4 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_103AA0((uint64_t **)a1, v4, (unint64_t *)(v6 + 16), (uint64_t *)(v6 + 16));
      uint64_t v6 = *(void *)(v6 + 8);
    }

    while (v6 != a3);
  }

  return a1;
}

void sub_103378(_Unwind_Exception *a1)
{
}

uint64_t *sub_10338C(uint64_t *a1, unsigned int a2)
{
  if (!a1) {
LABEL_7:
  }
    sub_8F9A4("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unsigned int v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }

    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }

double sub_1033D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&__int128 v20 = a6;
  *((void *)&v20 + 1) = a7;
  if (a2 != a3)
  {
    unsigned int v10 = a4;
    if (a4 != a5)
    {
      int v11 = a2;
      do
      {
        if (sub_862E4(v11 + 4, v10 + 4))
        {
          uint64_t v12 = (void *)v11[1];
          if (v12)
          {
            do
            {
              int v11 = v12;
              uint64_t v12 = (void *)*v12;
            }

            while (v12);
          }

          else
          {
            do
            {
              uint64_t v13 = v11;
              int v11 = (void *)v11[2];
            }

            while ((void *)*v11 != v13);
          }
        }

        else
        {
          if (sub_862E4(v10 + 4, v11 + 4))
          {
            uint64_t v14 = v11;
          }

          else
          {
            sub_103A38((uint64_t ***)&v20, v11 + 4);
            uint64_t v15 = (void *)v11[1];
            if (v15)
            {
              do
              {
                uint64_t v14 = v15;
                uint64_t v15 = (void *)*v15;
              }

              while (v15);
            }

            else
            {
              do
              {
                uint64_t v14 = (void *)v11[2];
                BOOL v16 = *v14 == (void)v11;
                int v11 = v14;
              }

              while (!v16);
            }
          }

          BOOL v17 = (void *)v10[1];
          if (v17)
          {
            do
            {
              unsigned int v10 = v17;
              BOOL v17 = (void *)*v17;
            }

            while (v17);
          }

          else
          {
            do
            {
              unint64_t v18 = v10;
              unsigned int v10 = (void *)v10[2];
            }

            while ((void *)*v10 != v18);
          }

          int v11 = v14;
        }
      }

      while (v11 != a3 && v10 != a5);
    }
  }

  *(void *)a1 = a3;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = a5;
  double result = *(double *)&v20;
  *(_OWORD *)(a1 + 16) = v20;
  return result;
}

uint64_t sub_103518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
  unsigned int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_103590((uint64_t **)a1, v4, (uint64_t *)(v6 + 16));
      uint64_t v6 = *(void *)(v6 + 8);
    }

    while (v6 != a3);
  }

  return a1;
}

void sub_10357C(_Unwind_Exception *a1)
{
}

void sub_103590(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x30uLL);
  sub_FA4C0(v6 + 4, a3);
  unint64_t v7 = sub_103728(a1, a2, &v9, &v8, v6 + 4);
  if (*v7) {
    sub_F4044(1, v6);
  }
  else {
    sub_32C38(a1, v9, (uint64_t **)v7, v6);
  }
}

void sub_10362C(_Unwind_Exception *a1)
{
}

BOOL sub_103644(uint64_t *a1, void *a2)
{
  unsigned int v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = *a1;
    }
    else {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  unint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0LL)
  {
    uint64_t v9 = v8;
    BOOL v10 = v6 == *a2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    BOOL v10 = v6 == 0;
  }

  if (v5)
  {
    uint64_t v13 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v10;
}

uint64_t *sub_103728(void *a1, void *a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_D7370(a5, a2 + 4))
  {
    if ((void *)*a1 == a2)
    {
      unint64_t v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    int v11 = (void *)*a2;
    if (*a2)
    {
      do
      {
        unint64_t v12 = v11;
        int v11 = (void *)v11[1];
      }

      while (v11);
    }

    else
    {
      BOOL v16 = a2;
      do
      {
        unint64_t v12 = (void *)v16[2];
        BOOL v17 = *v12 == (void)v16;
        BOOL v16 = v12;
      }

      while (v17);
    }

    if (sub_D7370(v12 + 4, a5)) {
      goto LABEL_16;
    }
    return sub_D744C((uint64_t)a1, a3, a5);
  }

  if (sub_D7370(a2 + 4, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        unint64_t v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      unint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        unint64_t v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      if (!sub_D7370(a5, v15 + 4)) {
        return sub_D744C((uint64_t)a1, a3, a5);
      }
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = a2;
    }

    return a4;
  }

  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

double sub_1038AC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  *(void *)&__int128 v12 = a4;
  *((void *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      sub_103940((uint64_t)&v12, v5 + 4);
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }

        while (!v10);
      }

      uint64_t v5 = v9;
    }

    while (v9 != a3);
    uint64_t v5 = a3;
  }

  *(void *)a1 = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = v12;
  return result;
}

uint64_t sub_103940(uint64_t a1, unint64_t *a2)
{
  char v3 = sub_1039A8(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t *)a2);
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = v3;
  unsigned int v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      unsigned int v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      char v3 = v5;
    }

    while (!v6);
  }

  *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = v5;
  return a1;
}

uint64_t *sub_1039A8(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  BOOL v6 = sub_103728(a1, a2, &v14, &v13, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      BOOL v10 = (unint64_t *)(v9 + 16);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    sub_32C38(a1, v14, v8, v7);
  }

  return v7;
}

uint64_t ***sub_103A38(uint64_t ***a1, unint64_t *a2)
{
  char v3 = sub_103AA0(*a1, a1[1], a2, (uint64_t *)a2);
  a1[1] = (uint64_t **)v3;
  unsigned int v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      unsigned int v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      char v3 = v5;
    }

    while (!v6);
  }

  a1[1] = (uint64_t **)v5;
  return a1;
}

uint64_t *sub_103AA0(uint64_t **a1, uint64_t **a2, unint64_t *a3, uint64_t *a4)
{
  BOOL v6 = (uint64_t *)a2;
  uint64_t v8 = a1 + 1;
  if (a1 + 1 != a2 && !sub_862E4(a3, (unint64_t *)a2 + 4))
  {
    if (!sub_862E4((unint64_t *)v6 + 4, a3))
    {
      uint64_t v22 = v6;
      uint64_t v23 = v6;
      __int128 v12 = &v22;
      if (v6) {
        return v6;
      }
      goto LABEL_31;
    }

    __int128 v12 = (uint64_t **)(v6 + 1);
    unint64_t v11 = (uint64_t *)v6[1];
    if (v11)
    {
      uint64_t v13 = (uint64_t *)v6[1];
      do
      {
        uint64_t v14 = (uint64_t **)v13;
        uint64_t v13 = (uint64_t *)*v13;
      }

      while (v13);
    }

    else
    {
      BOOL v17 = v6;
      do
      {
        uint64_t v14 = (uint64_t **)v17[2];
        BOOL v16 = *v14 == v17;
        BOOL v17 = (uint64_t *)v14;
      }

      while (!v16);
    }

    if (v14 != v8)
    {
      if (!sub_862E4(a3, (unint64_t *)v14 + 4))
      {
LABEL_29:
        __int128 v12 = (uint64_t **)sub_103C68((uint64_t)a1, &v23, a3);
        goto LABEL_30;
      }

      unint64_t v11 = *v12;
    }

    if (v11)
    {
      uint64_t v23 = (uint64_t *)v14;
      __int128 v12 = v14;
    }

    else
    {
      uint64_t v23 = v6;
    }

void *sub_103C68(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_862E4(a3, v4 + 4)) {
          break;
        }
        unsigned int v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (!sub_862E4(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unsigned int v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }

void sub_103CF8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v45 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  uint64_t v51 = (uint64_t)&v51;
  int v52 = &v51;
  uint64_t v53 = 0LL;
  uint64_t v8 = *(void **)(a2 + 8);
  uint64_t v46 = a1;
  if (v8 == (void *)a2)
  {
    uint64_t v18 = 0LL;
  }

  else
  {
    do
    {
      uint64_t v9 = (std::__shared_weak_count *)v8[3];
      if (v9)
      {
        BOOL v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          unint64_t v11 = v10;
          unint64_t v12 = v8[2];
          if (v12)
          {
            uint64_t v13 = sub_FC61C(a1 + 88, v12);
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              unint64_t v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }

            if (a1 + 88 != v13) {
              sub_85C34(&v51, v8[2], v8[3]);
            }
          }

          else
          {
            BOOL v16 = (unint64_t *)&v10->__shared_owners_;
            do
              unint64_t v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
        }
      }

      uint64_t v8 = (void *)v8[1];
    }

    while (v8 != (void *)a2);
    uint64_t v18 = v53;
  }

  if (v18 != *(void *)(a2 + 16))
  {
    uint64_t v19 = (os_log_t *)sub_138E8(9);
    unint64_t v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *(_DWORD *)(a2 + 16) - v53;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        int v55 = "PortManager.cpp";
        __int16 v56 = 1024;
        int v57 = 1143;
        __int16 v58 = 1024;
        LODWORD(v59) = v21;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Skipping %d ports from input list, as these ports are not available",  buf,  0x18u);
      }
    }
  }

  sub_EE1E8(&v49, &v51);
  int v44 = a4;
  uint64_t v22 = v52;
  if (&v51 != v52)
  {
    do
    {
      sub_B8CBC((uint64_t *)&v47, v22 + 2, "", 1150);
      if ((v47[23] & 0x80) != 0 && sub_D51D4((uint64_t)v47))
      {
        uint64_t v23 = v47;
        int v24 = v47 + 40;
        int v25 = (*(uint64_t (**)(uint64_t *))(v47[40] + 16))(v47 + 40);
        sub_EE1E8((uint64_t *)buf, v23 + 34);
        if (v25) {
          (*(void (**)(uint64_t *))(*v24 + 24))(v24);
        }
        sub_104374(&v49, (uint64_t *)buf);
        sub_85B80((uint64_t *)buf);
      }

      uint64_t v26 = (std::__shared_weak_count *)v48[0];
      if (v48[0])
      {
        unint64_t v27 = v48[0] + 1;
        do
          unint64_t v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }

      uint64_t v22 = (uint64_t *)v22[1];
    }

    while (&v51 != v22);
    for (uint64_t i = v52; &v51 != i; uint64_t i = (uint64_t *)i[1])
    {
      sub_B8CBC((uint64_t *)&v47, i + 2, "", 1160);
      if ((v47[23] & 0x100) != 0 && sub_D4FEC((uint64_t)v47))
      {
        BOOL v30 = v47;
        uint64_t v31 = v47 + 40;
        int v32 = (*(uint64_t (**)(uint64_t *))(v47[40] + 16))(v47 + 40);
        sub_EE1E8((uint64_t *)buf, v30 + 37);
        if (v32) {
          (*(void (**)(uint64_t *))(*v31 + 24))(v31);
        }
        sub_104374(&v49, (uint64_t *)buf);
        sub_85B80((uint64_t *)buf);
      }

      unint64_t v33 = (std::__shared_weak_count *)v48[0];
      if (v48[0])
      {
        unsigned int v34 = v48[0] + 1;
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }

  char v36 = v50;
  if (&v49 != v50)
  {
    uint64_t v37 = a1 + 88;
    do
    {
      sub_B8CBC((uint64_t *)&v47, v36 + 2, "", 1170);
      unint64_t v38 = v47;
      if (v37 == sub_FC61C(v37, (unint64_t)v47))
      {
        unint64_t v42 = (os_log_t *)sub_138E8(9);
        unint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v55 = "PortManager.cpp";
          __int16 v56 = 1024;
          int v57 = 1177;
          __int16 v58 = 2048;
          uint64_t v59 = v47;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Port not available: %p. Skipping ... ",  buf,  0x1Cu);
        }
      }

      else
      {
        (*(void (**)(uint64_t *, uint64_t))(*v38 + 472))(v38, a3);
      }

      char v39 = (std::__shared_weak_count *)v48[0];
      if (v48[0])
      {
        uint64_t v40 = v48[0] + 1;
        do
          unint64_t v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }

      char v36 = (uint64_t *)v36[1];
    }

    while (&v49 != v36);
  }

  v48[0] = 0LL;
  v48[1] = 0LL;
  unsigned int v47 = (uint64_t *)v48;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1717793397;
  sub_EE1E8((uint64_t *)((char *)&v55 + 4), &v49);
  sub_10179C(&v47, *(unsigned int *)buf, (int *)buf);
  sub_85B80((uint64_t *)((char *)&v55 + 4));
  sub_101870(v46, &v47, v44);
  sub_EDF34(v48[0]);
  sub_85B80(&v49);
  sub_85B80(&v51);
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v46 + 24LL))(v46);
  }
}

void sub_10426C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_104374(void *a1, uint64_t *a2)
{
  char v3 = a2;
  do
  {
    unsigned int v4 = *(std::__shared_weak_count **)(*v3 + 24);
    uint64_t v38 = *(void *)(*v3 + 16);
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }

    for (uint64_t i = (void *)a1[1]; i != a1; uint64_t i = (void *)i[1])
    {
      uint64_t v8 = (std::__shared_weak_count *)i[3];
      if (!v8)
      {
        uint64_t v11 = 0LL;
        BOOL v10 = 0LL;
LABEL_18:
        if (!v4) {
          goto LABEL_29;
        }
        goto LABEL_19;
      }

      uint64_t v9 = std::__shared_weak_count::lock(v8);
      BOOL v10 = v9;
      if (v9)
      {
        uint64_t v11 = i[2];
        unint64_t v12 = (unint64_t *)&v9->__shared_weak_owners_;
        do
          unint64_t v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v10);
          if (!v4) {
            goto LABEL_29;
          }
          goto LABEL_19;
        }

        goto LABEL_18;
      }

      uint64_t v11 = 0LL;
      if (!v4)
      {
LABEL_29:
        uint64_t v22 = 0LL;
        unint64_t v17 = 0LL;
        if (!v10) {
          goto LABEL_36;
        }
        goto LABEL_30;
      }

void sub_104628(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_104640(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)(*(void *)a2 + 24LL);
  if ((void *)(*(void *)a2 + 16LL) == v2) {
    goto LABEL_25;
  }
  char v4 = 0;
  int v5 = 0;
  int v6 = 0;
  do
  {
    sub_B8CBC((uint64_t *)buf, v2 + 2, "", 150);
    sub_B8CBC(&v26, v2 + 4, "", 151);
    int v7 = *(_DWORD *)(*(void *)buf + 144LL);
    if (v7 == 1885433888)
    {
      int v8 = *(_DWORD *)(v26 + 144);
      BOOL v9 = v8 == 1885888867;
      BOOL v10 = v8 != 1885888867;
      int v11 = v9;
      v6 |= v11;
      v4 |= v10;
    }

    else
    {
      v5 |= v7 == 1885433443;
    }

    unint64_t v12 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    unint64_t v15 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      BOOL v16 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    unsigned int v2 = (void *)v2[1];
  }

  while ((void *)(*(void *)a2 + 16LL) != v2);
  if ((v4 & 1) == 0)
  {
LABEL_25:
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v18 = *(void *)(*(void *)a2 + 32LL);
    BOOL v19 = v18 == 2;
    BOOL v9 = v18 == 1;
    int v20 = v6 & v19;
    if (v9) {
      int v20 = 1;
    }
    uint64_t v21 = v20 | v5 & v19;
  }

  uint64_t v22 = sub_138E8(19);
  if ((*(_BYTE *)(v22 + 8) & 1) != 0)
  {
    uint64_t v23 = *(os_log_s **)v22;
    if (*(void *)v22)
    {
      if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = "doesn't handle";
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if ((_DWORD)v21) {
          uint64_t v24 = "handles";
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 177;
        __int16 v29 = 2080;
        BOOL v30 = v24;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RoutingHandler_Playback %s the given route.",  buf,  0x1Cu);
      }
    }
  }

  return v21;
}

void sub_10489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1048B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *(void *)a1 + 16LL;
  for (uint64_t i = *(void **)(*(void *)a1 + 24LL); i != (void *)v3; uint64_t i = (void *)i[1])
  {
    sub_B8CBC(&v16, i + 2, "", 187);
    sub_B8CBC(&v14, i + 4, "", 188);
    int v5 = *(_DWORD *)(v16 + 144);
    if (v5 == 1885433443)
    {
      int v7 = 2;
    }

    else
    {
      if (v5 != 1885433888) {
        goto LABEL_11;
      }
      int v6 = *(_DWORD *)(v14 + 144);
      if (v6 == 1885888867)
      {
        int v7 = 3;
      }

      else
      {
        if (v6 == 1886613611) {
          sub_104A84((uint64_t **)a2, 8, (uint64_t)(i + 2));
        }
        int v7 = 1;
      }
    }

    sub_104A84((uint64_t **)a2, v7, (uint64_t)(i + 2));
LABEL_11:
    int v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    int v11 = v17;
    if (v17)
    {
      unint64_t v12 = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

void sub_104A50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_104A84(uint64_t **a1, int a2, uint64_t a3)
{
  int v6 = a1 + 1;
  int v7 = a1[1];
  if (v7)
  {
    int v8 = a1 + 1;
    BOOL v9 = a1[1];
    do
    {
      int v10 = *((_DWORD *)v9 + 8);
      BOOL v11 = v10 < a2;
      if (v10 >= a2) {
        unint64_t v12 = (uint64_t **)v9;
      }
      else {
        unint64_t v12 = (uint64_t **)(v9 + 1);
      }
      if (!v11) {
        int v8 = (uint64_t **)v9;
      }
      BOOL v9 = *v12;
    }

    while (*v12);
    if (v8 != v6 && *((_DWORD *)v8 + 8) <= a2)
    {
      uint64_t v21 = v8[6];
      unint64_t v20 = (unint64_t)v8[7];
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = v8[5];
        uint64_t v24 = v21 - v23;
        uint64_t v25 = v20 - (void)v23;
        uint64_t v26 = v25 >> 2;
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)sub_7DC90(v27);
        }
        else {
          uint64_t v28 = 0LL;
        }
        __int16 v29 = (uint64_t *)(v27 + 8 * v24);
        unint64_t v30 = v27 + 8 * v28;
        uint64_t *v29 = a3;
        uint64_t v22 = v29 + 1;
        int v32 = (char *)v8[5];
        unint64_t v31 = (char *)v8[6];
        if (v31 != v32)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 1);
            v31 -= 8;
            *--__int16 v29 = v33;
          }

          while (v31 != v32);
          unint64_t v31 = (char *)v8[5];
        }

        v8[5] = v29;
        v8[6] = v22;
        v8[7] = (uint64_t *)v30;
        if (v31) {
          operator delete(v31);
        }
      }

      else
      {
        *uint64_t v21 = a3;
        uint64_t v22 = v21 + 1;
      }

      v8[6] = v22;
      return;
    }

    *(void *)&__int128 v14 = operator new(8uLL);
    *(void *)__int128 v14 = a3;
    uint64_t v13 = v14 + 8;
    *((void *)&v14 + 1) = v14 + 8;
    __int128 v34 = v14;
    do
    {
      while (1)
      {
        unint64_t v15 = v7;
        int v16 = *((_DWORD *)v7 + 8);
        if (v16 <= a2) {
          break;
        }
        int v7 = (uint64_t *)*v7;
        if (!*v15)
        {
          int v6 = (uint64_t **)v15;
          goto LABEL_19;
        }
      }

      if (v16 >= a2) {
        goto LABEL_22;
      }
      int v7 = (uint64_t *)v7[1];
    }

    while (v7);
    int v6 = (uint64_t **)(v15 + 1);
  }

  else
  {
    *(void *)&__int128 v17 = operator new(8uLL);
    *(void *)__int128 v17 = a3;
    uint64_t v13 = v17 + 8;
    *((void *)&v17 + 1) = v17 + 8;
    __int128 v34 = v17;
    unint64_t v15 = (uint64_t *)v6;
  }

void sub_104CB0(_Unwind_Exception *a1)
{
}

uint64_t sub_104CC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 32);
  if (v4 == 2)
  {
    uint64_t v9 = *(void *)(v3 + 16);
    uint64_t v10 = *(void *)(v3 + 24);
    sub_B8CBC((uint64_t *)buf, (uint64_t *)(v10 + 16), "", 244);
    if (*(_DWORD *)(*(void *)buf + 144LL) == 1886216809)
    {
      sub_B8CBC((uint64_t *)&__p, (uint64_t *)(v10 + 32), "", 245);
      std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      BOOL v12 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 144) == 1885433888;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }

    else
    {
      BOOL v12 = 0;
    }

    unint64_t v15 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v16 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    if (_os_feature_enabled_impl("VirtualAudio", "podcast_production"))
    {
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(v10 + 32), "", 249);
      uint64_t v18 = *(std::__shared_weak_count **)&buf[8];
      BOOL v12 = *(_DWORD *)(*(void *)buf + 144LL) == 1885433888;
      if (*(void *)&buf[8])
      {
        BOOL v19 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }

    sub_B8CBC((uint64_t *)buf, (uint64_t *)(v9 + 16), "", 251);
    if (sub_203D48(*(_DWORD *)(*(void *)buf + 144LL)))
    {
      sub_B8CBC((uint64_t *)&__p, (uint64_t *)(v9 + 32), "", 252);
      uint64_t v21 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      BOOL v22 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 144) == 1885433888;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }

    else
    {
      BOOL v22 = 0;
    }

    uint64_t v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v26 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    uint64_t v6 = v12 & v22;
  }

  else if (v4 == 1)
  {
    sub_B8CBC((uint64_t *)buf, (uint64_t *)(*(void *)(v3 + 24) + 32LL), "", 237);
    int v5 = *(std::__shared_weak_count **)&buf[8];
    uint64_t v6 = *(_DWORD *)(*(void *)buf + 144LL) == 1885433888;
    if (*(void *)&buf[8])
    {
      int v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v28 = sub_138E8(19);
  if ((*(_BYTE *)(v28 + 8) & 1) != 0)
  {
    __int16 v29 = *(os_log_s **)v28;
    if (*(void *)v28)
    {
      if (os_log_type_enabled(*(os_log_t *)v28, OS_LOG_TYPE_DEBUG))
      {
        if ((_DWORD)v6) {
          unint64_t v30 = "handles";
        }
        else {
          unint64_t v30 = "does not handle";
        }
        sub_2DA408(&__p, *a2 + 16);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t p_p = &__p;
        }
        else {
          uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 258;
        __int16 v35 = 2080;
        uint64_t v36 = v30;
        __int16 v37 = 2080;
        uint64_t v38 = p_p;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RoutingHandler_Record %s the given route: %s",  buf,  0x26u);
      }
    }
  }

  return v6;
}

void sub_10509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1050C0(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)a2 + 16LL;
  unint64_t v5 = *(void *)(*(void *)a2 + 32LL);
  if (v5 == 2)
  {
    uint64_t v6 = *(void **)(v3 + 24);
    if ((void *)v4 != v6)
    {
      int v7 = 0;
      int v8 = 0;
      do
      {
        sub_B8CBC((uint64_t *)buf, v6 + 2, "", 472);
        uint64_t v9 = *(std::__shared_weak_count **)&buf[8];
        int v10 = *(_DWORD *)(*(void *)buf + 144LL);
        if (*(void *)&buf[8])
        {
          BOOL v11 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }

        if (v10 == 1885433888) {
          ++v7;
        }
        sub_B8CBC((uint64_t *)buf, v6 + 4, "", 477);
        uint64_t v13 = *(std::__shared_weak_count **)&buf[8];
        int v14 = *(_DWORD *)(*(void *)buf + 144LL);
        if (*(void *)&buf[8])
        {
          unint64_t v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }

        if (v14 == 1885433888) {
          ++v8;
        }
        uint64_t v6 = (void *)v6[1];
      }

      while ((void *)(*(void *)a2 + 16LL) != v6);
      uint64_t v18 = v7 == 1 && v8 == 1;
      goto LABEL_66;
    }

LABEL_56:
      int v20 = 1;
      goto LABEL_57;
    }

    switch(v23)
    {
      case 1885433443:
        LODWORD(v45) = (v27 == 1885433888) | v45;
        goto LABEL_57;
      case 1885433888:
        switch(v27)
        {
          case 1885888867:
            HIDWORD(v44) = 1;
            LODWORD(v42) = 1;
            break;
          case 1886613611:
            int v41 = 1;
            break;
          case 1886545251:
            HIDWORD(v44) = 1;
            HIDWORD(v42) = 1;
            goto LABEL_57;
          default:
            HIDWORD(v44) = 1;
            break;
        }

        goto LABEL_57;
      case 1885564784:
        goto LABEL_47;
    }

  *(void *)AudioObjectPropertyAddress buf = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  *(void *)&buf[8] = v52;
  *(_DWORD *)&_DWORD buf[16] = 0;
  *(void *)&v97[4] = 0LL;
  *(void *)&v97[12] = 0LL;
  if (v104)
  {
    uint64_t v53 = v103;
    if (v103 != qword_4A8610)
    {
      uint64_t v54 = sub_138E8(20);
      int v55 = sub_138E8(38);
      __int16 v56 = 0;
      int v57 = 0LL;
      *(void *)int v93 = 0x100000002LL;
      __int16 v58 = *(void *)(v54 + 8);
      while (1)
      {
        uint64_t v59 = *(int *)&v93[4 * v57];
        char v60 = v56;
        if (((v58 & v59) != 0) != ((*(void *)(v55 + 8) & v59) != 0)) {
          break;
        }
        __int16 v56 = 1;
        int v57 = 1LL;
        if ((v60 & 1) != 0)
        {
          if ((v58 & 1) == 0) {
            goto LABEL_73;
          }
          goto LABEL_66;
        }
      }

      if ((v58 & v59) == 0) {
        uint64_t v54 = v55;
      }
      if ((*(void *)(v54 + 8) & 1) != 0)
      {
LABEL_66:
        unint64_t v61 = *(os_log_s **)v54;
        if (v61 && os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          sub_2CEE1C(&__p, (unsigned int *)v53);
          BOOL v62 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)int v93 = 136315650;
          *(void *)&v93[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&v93[12] = 1024;
          *(_DWORD *)&v93[14] = 786;
          uint64_t v94 = 2080;
          uint64_t v95 = v62;
          _os_log_impl(&dword_0, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found extended volume description: %s", v93, 0x1Cu);
        }
      }

        uint64_t v18 = 0;
        goto LABEL_57;
      }
    }

    goto LABEL_49;
  }

  if (sub_1EC7C0(a2))
  {
    uint64_t v18 = 0;
    if ((_DWORD)a1) {
      a1 = 1784965235LL;
    }
    else {
      a1 = 1784965232LL;
    }
    goto LABEL_57;
  }

  (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)a2 + 448LL))(&cf, a2);
  sub_90BC0();
  BOOL v19 = (*(uint64_t (**)(void))(qword_48CD58 + 32))();
  int v20 = v19;
  if (v19 < 0x100u)
  {
    else {
      unint64_t v5 = 0LL;
    }
    goto LABEL_45;
  }

  int v21 = (os_log_t *)sub_138E8(17);
  BOOL v22 = v20;
  int v23 = *v21;
  if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v24 = "is";
    uint64_t v33 = "Device_USB_Aspen.cpp";
    __int128 v34 = 1024;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    if (!v22) {
      unint64_t v24 = "is not";
    }
    int v35 = 1483;
    int v36 = 2112;
    int v37 = cf;
    int v38 = 2080;
    int v39 = v24;
    _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d According to ADAM, device %@ %s headphones", buf, 0x26u);
  }

  if (!v22)
  {
    unint64_t v5 = 0LL;
LABEL_45:
    unint64_t v25 = 1;
    goto LABEL_46;
  }

  unint64_t v25 = 0;
  if ((_DWORD)a1) {
    a1 = 1784965235LL;
  }
  else {
    a1 = 1784965232LL;
  }
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  if ((v25 & 1) == 0) {
    goto LABEL_56;
  }
LABEL_49:
  uint64_t v26 = sub_1CC860() ^ 1;
  if (!(_DWORD)v5) {
    LOBYTE(v26) = 0;
  }
  if ((v26 & 1) != 0 || (int v27 = (os_log_t *)sub_138E8(17), v5 = 1786082146LL, (v28 = *v27) == 0LL))
  {
    uint64_t v18 = 1;
  }

  else
  {
    uint64_t v18 = 1;
    if (os_log_type_enabled(*v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v33 = "Device_USB_Aspen.cpp";
      __int128 v34 = 1024;
      int v35 = 1532;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, "%25s:%-5d Forcing USB Default sub type", buf, 0x12u);
    }
  }

  if (v212[24]) {
    unint64_t v17 = (uint64_t *)v212;
  }
  else {
    unint64_t v17 = &qword_492FB0;
  }
  sub_E1FDC((uint64_t)v196, v17);
  sub_6E1CC((uint64_t)&__p, *(uint64_t **)(a1 + 112), (uint64_t)v207, v196, 0);
  if ((_DWORD)__p)
  {
    if ((_DWORD)__p == 2)
    {
      uint64_t v169 = sub_138E8(13);
      char v170 = sub_8C7D4(1, *(void **)v169, *(void *)(v169 + 8));
      uint64_t v171 = (os_log_s *)objc_claimAutoreleasedReturnValue(v170);
      unsigned int v122 = v171;
      char v123 = 1852793716;
      if (!v171 || !os_log_type_enabled(v171, OS_LOG_TYPE_ERROR)) {
        goto LABEL_317;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 4833;
      uint64_t v172 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error processing kVirtualAudioPlugIn"
             "PropertyRouteConfigurationIsDisruptive.)";
    }

    else
    {
      if ((_DWORD)__p == 1)
      {
        uint64_t v119 = sub_138E8(13);
        uint64_t v120 = sub_8C7D4(1, *(void **)v119, *(void *)(v119 + 8));
        uint64_t v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
        unsigned int v122 = v121;
        char v123 = 1852797556;
        if (v121 && os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 4833;
          _os_log_impl( &dword_0,  v122,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error processing kVirtualAudioPlugInPr opertyRouteConfigurationIsDisruptive.)",  buf,  0x12u);
          char v123 = 1852797556;
        }

  uint64_t v42 = std::__shared_weak_count::lock(v26);
  if (!v42) {
    goto LABEL_61;
  }
  uint64_t v43 = v42;
  uint64_t v44 = v31 == v27;
  uint64_t v45 = (unint64_t *)&v42->__shared_owners_;
  do
    uint64_t v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v43);
  }

        double result = sub_19DFC((uint64_t)&v77);
        ++v16;
      }

      while (v16 != v66);
    }
  }

  return result;
}

  if (v15)
  {
    uint64_t v33 = (unint64_t *)&v15->__shared_owners_;
    do
      __int128 v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (!v14) {
    goto LABEL_63;
  }
  return a3;
}

void sub_1056C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = a2 + 8;
  uint64_t v4 = *(void *)a1 + 16LL;
  for (uint64_t i = *(void **)(*(void *)a1 + 24LL); i != (void *)v4; uint64_t i = (void *)i[1])
  {
    sub_B8CBC(&v17, i + 2, "", 581);
    uint64_t v6 = v18;
    int v7 = *(_DWORD *)(v17 + 144);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    sub_B8CBC(&v17, i + 4, "", 582);
    int v10 = v18;
    int v11 = *(_DWORD *)(v17 + 144);
    if (v18)
    {
      unint64_t v12 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    if (v7 == 1885433443)
    {
      int v14 = 1;
      int v2 = 2;
      goto LABEL_28;
    }

    if (v7 == 1885433888)
    {
      int v14 = 1;
      if (v11 == 1885888867)
      {
        int v2 = 3;
        goto LABEL_28;
      }

      unsigned int v15 = 1;
      if (v11 == 1886613611)
      {
        sub_104A84((uint64_t **)a2, 8, (uint64_t)(i + 2));
        int v2 = 1;
        goto LABEL_28;
      }
    }

    else
    {
      int v14 = 0;
      unsigned int v15 = v2 & 0xFFFFFF00;
    }

    if (v11 == 1885433888)
    {
      unsigned int v15 = 0;
      BOOL v16 = 1;
    }

    else
    {
      BOOL v16 = v7 == 1886613618;
    }

    if (v16) {
      int v14 = 1;
    }
    if (v7 == 1886613618) {
      int v2 = 4;
    }
    else {
      int v2 = v15;
    }
LABEL_28:
    if (sub_203D48(v7))
    {
      int v2 = 9;
LABEL_31:
      sub_104A84((uint64_t **)a2, v2, (uint64_t)(i + 2));
      continue;
    }

    if (v14) {
      goto LABEL_31;
    }
  }

void sub_1058B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

BOOL sub_1058D4(uint64_t a1, _DWORD **a2)
{
  if (*a2[14] == 1667396196 && *((void *)*a2 + 4) >= 2uLL)
  {
    uint64_t v3 = (uint64_t *)(*a2 + 6);
    while (1)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = (uint64_t)(*a2 + 4);
      BOOL v6 = v5 == v4;
      if (v5 == v4) {
        break;
      }
      sub_B8CBC((uint64_t *)v15, (uint64_t *)(v4 + 16), "", 649);
      int v7 = *(std::__shared_weak_count **)&v15[8];
      int v8 = *(_DWORD *)(*(void *)v15 + 144LL);
      if (*(void *)&v15[8])
      {
        unint64_t v9 = (unint64_t *)(*(void *)&v15[8] + 8LL);
        do
          unint64_t v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }

      uint64_t v3 = (uint64_t *)(v4 + 8);
      if (v8 != 1885433888) {
        goto LABEL_11;
      }
    }
  }

  else
  {
LABEL_11:
    BOOL v6 = 0LL;
  }

  uint64_t v11 = sub_138E8(19);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
  {
    unint64_t v12 = *(os_log_s **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v13 = "doesn't handle";
        *(void *)&v15[4] = "RoutingHandler.cpp";
        *(_DWORD *)unsigned int v15 = 136315650;
        if (v6) {
          unint64_t v13 = "handles";
        }
        *(_WORD *)&_BYTE v15[12] = 1024;
        *(_DWORD *)&v15[14] = 655;
        __int16 v16 = 2080;
        uint64_t v17 = v13;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RoutingHandler_Broadcast %s the given route.",  v15,  0x1Cu);
      }
    }
  }

  return v6;
}

BOOL sub_105A88(uint64_t a1, uint64_t a2)
{
  int v2 = **(_DWORD **)(a2 + 112);
  uint64_t v3 = sub_138E8(19);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    uint64_t v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = "doesn't handle";
        int v8 = "RoutingHandler.cpp";
        int v7 = 136315650;
        if (v2 == 1668246894) {
          uint64_t v5 = "handles";
        }
        __int16 v9 = 1024;
        int v10 = 672;
        __int16 v11 = 2080;
        unint64_t v12 = v5;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RoutingHandler_Multi %s the given route.",  (uint8_t *)&v7,  0x1Cu);
      }
    }
  }

  return v2 == 1668246894;
}

uint64_t *sub_105B8C(uint64_t *result, int a2)
{
  if (result)
  {
    int v2 = result;
    do
    {
      int v3 = *((_DWORD *)v2 + 8);
      if (v3 <= a2)
      {
        if (v3 >= a2) {
          return (uint64_t *)(*(void *)*sub_105BDC(result, a2) != 0LL);
        }
        ++v2;
      }

      int v2 = (uint64_t *)*v2;
    }

    while (v2);
    return 0LL;
  }

  return result;
}

uint64_t *sub_105BDC(uint64_t *a1, int a2)
{
  if (!a1) {
LABEL_8:
  }
    sub_8F9A4("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_8;
      }
    }

    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_8;
    }
  }

uint64_t sub_105C24(uint64_t a1, int a2)
{
  else {
    return 0LL;
  }
}

os_signpost_id_t *sub_105C74(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        __int16 v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 94;
        __int16 v12 = 2080;
        unint64_t v13 = "kRoutingHandlerActivation";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      BOOL v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(vstd::iostream::~basic_iostream(v2, v5 + 8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_RoutingHandlerActivation",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_105E00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_105E0C(char **a1, int a2, _DWORD *a3, unsigned int **a4)
{
  os_signpost_id_t v5 = a3;
  int v7 = a1;
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v8 = *(void *)a3;
  int v9 = a3[3];
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  *(void *)&buf[8] = 0LL;
  int v10 = MGGetBoolAnswer(@"HasBaseband");
  __int128 v11 = 0uLL;
  v359 = v5;
  if (v10)
  {
    v355 = a4;
    __int16 v12 = (char *)operator new(0x60uLL);
    int v354 = v9;
    unint64_t v13 = (void *)(v8 + 16);
    *(_OWORD *)(v12 + std::iostream::~basic_iostream(v2, v5 + 8) = 0u;
    *(void *)__int16 v12 = off_4746C0;
    *((void *)v12 + 3) = off_4746F8;
    *(_OWORD *)(v12 + 40) = 0u;
    *((void *)v12 + 4) = v12 + 40;
    *((void *)v12 + std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
    int v14 = (uint64_t **)(v12 + 64);
    *((void *)v12 + 7) = v12 + 64;
    *(_OWORD *)(v12 + 72) = 0u;
    unsigned int v15 = *(void **)(v8 + 24);
    if (v15 != (void *)(v8 + 16))
    {
      do
      {
        __int16 v16 = (std::__shared_weak_count *)v15[5];
        if (v16)
        {
          uint64_t v17 = std::__shared_weak_count::lock(v16);
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = v15[4];
            if (v19 && (*(_WORD *)(v19 + 184) & 0x11) == 0x10)
            {
              unsigned int v20 = *(_DWORD *)(v19 + 144);
              int v21 = *v14;
              BOOL v22 = (uint64_t **)(v12 + 64);
              int v23 = (uint64_t **)(v12 + 64);
              if (*v14)
              {
                while (1)
                {
                  while (1)
                  {
                    int v23 = (uint64_t **)v21;
                    unsigned int v24 = *((_DWORD *)v21 + 8);
                    if (v20 >= v24) {
                      break;
                    }
                    int v21 = *v23;
                    BOOL v22 = v23;
                    if (!*v23) {
                      goto LABEL_14;
                    }
                  }

                  if (v24 >= v20) {
                    break;
                  }
                  int v21 = v23[1];
                  if (!v21)
                  {
                    BOOL v22 = v23 + 1;
                    goto LABEL_14;
                  }
                }
              }

              else
              {
LABEL_14:
                unint64_t v25 = operator new(0x30uLL);
                v25[8] = v20;
                *((void *)v25 + 5) = 0LL;
                sub_32C38((uint64_t **)v12 + 7, (uint64_t)v23, v22, (uint64_t *)v25);
                int v23 = (uint64_t **)v25;
              }

              v23[5] = (void *)(&dword_0 + 1);
            }

            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              unint64_t v27 = __ldaxr(p_shared_owners);
            while (__stlxr(v27 - 1, p_shared_owners));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }

        unsigned int v15 = (void *)v15[1];
      }

      while (v15 != v13);
    }

    unint64_t v29 = *v355;
    uint64_t v28 = v355[1];
    os_signpost_id_t v5 = v359;
    if (*v355 != v28)
    {
      do
      {
        sub_12A68C((uint64_t **)v12 + 4, *v29, v29)[5] = (void *)(&dword_0 + 1);
        ++v29;
      }

      while (v29 != v28);
    }

    int v7 = a1;
    if (a2 == 1952670060) {
      goto LABEL_31;
    }
    if (v354 <= 1987077986)
    {
      if (v354 == 1768057203) {
        goto LABEL_31;
      }
      int v30 = 1919776355;
    }

    else
    {
      if (v354 == 1987077987 || v354 == 1987081839) {
        goto LABEL_31;
      }
      int v30 = 1987081833;
    }

    if (v354 != v30)
    {
LABEL_32:
      sub_15F86C();
      *((void *)v12 + 11) = &qword_48EC28;
      *(void *)&__int128 v11 = v12 + 24;
      *((void *)&v11 + 1) = v12;
      goto LABEL_33;
    }

LABEL_179:
  __p.__r_.__value_.__r.__words[0] = v102;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)size;
LABEL_180:
  uint64_t v115 = (std::__shared_weak_count *)v364[1];
  if (v364[1])
  {
    int v116 = (unint64_t *)((char *)v364[1] + 8);
    do
      unint64_t v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }

  if (__p.__r_.__value_.__r.__words[0])
  {
    uint64_t v118 = v100 + 2;
    unint64_t v119 = v100[2];
    uint64_t v120 = (void *)v100[1];
    if ((unint64_t)v120 >= v119)
    {
      uint64_t v126 = *v100;
      uint64_t v127 = ((uint64_t)v120 - *v100) >> 4;
      unint64_t v128 = v127 + 1;
      uint64_t v129 = v119 - v126;
      if (v129 >> 3 > v128) {
        unint64_t v128 = v129 >> 3;
      }
      else {
        unint64_t v130 = v128;
      }
      char v368 = v118;
      uint64_t v131 = (char *)sub_7BE90(v130);
      uint64_t v133 = &v131[16 * v127];
      std::string::size_type v134 = __p.__r_.__value_.__l.__size_;
      *(_OWORD *)uint64_t v133 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (v134)
      {
        uint64_t v135 = (unint64_t *)(v134 + 8);
        do
          unint64_t v136 = __ldxr(v135);
        while (__stxr(v136 + 1, v135));
      }

      char v138 = *a1;
      uint64_t v137 = a1[1];
      if (v137 == *a1)
      {
        int64x2_t v141 = vdupq_n_s64((unint64_t)v137);
        uint64_t v139 = &v131[16 * v127];
      }

      else
      {
        uint64_t v139 = &v131[16 * v127];
        do
        {
          __int128 v140 = *((_OWORD *)v137 - 1);
          v137 -= 16;
          *((_OWORD *)v139 - 1) = v140;
          v139 -= 16;
          *(void *)uint64_t v137 = 0LL;
          *((void *)v137 + 1) = 0LL;
        }

        while (v137 != v138);
        int64x2_t v141 = *(int64x2_t *)a1;
      }

      uint64_t v125 = a1;
      int v124 = v133 + 16;
      *a1 = v139;
      a1[1] = v133 + 16;
      *(int64x2_t *)&buf[8] = v141;
      int v152 = a1[2];
      a1[2] = &v131[16 * v132];
      *(void *)&_BYTE buf[24] = v152;
      *(void *)AudioObjectPropertyAddress buf = v141.i64[0];
      sub_A0D64((uint64_t)buf);
    }

    else
    {
      *uint64_t v120 = __p.__r_.__value_.__r.__words[0];
      std::string::size_type v121 = __p.__r_.__value_.__l.__size_;
      v120[1] = __p.__r_.__value_.__l.__size_;
      if (v121)
      {
        unsigned int v122 = (unint64_t *)(v121 + 8);
        do
          unint64_t v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }

      int v124 = (char *)(v120 + 2);
      uint64_t v125 = a1;
    }

    v125[1] = v124;
  }

LABEL_219:
  uint64_t v153 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    uint64_t v154 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }

  uint64_t v156 = *(void *)v5;
  uint64_t v157 = (void *)sub_EAD14();
  *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Codec", 0x600u);
  buf[8] = 1;
  uint64_t v158 = sub_EAE28(v157, (CFStringRef *)buf);
  sub_19DFC((uint64_t)buf);
  uint64_t v159 = (void *)sub_EAD14();
  *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "HPMic", 0x600u);
  buf[8] = 1;
  uint64_t v160 = sub_EAE28(v159, (CFStringRef *)buf);
  sub_19DFC((uint64_t)buf);
  if (v158)
  {
    uint64_t v161 = *(void *)(v156 + 24);
    if (v161 != v156 + 16)
    {
      while (1)
      {
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(v161 + 16), "", 1084);
        int v162 = *(_DWORD *)(*(void *)buf + 144LL);
        BOOL v163 = v162 == 1886222185 || v162 == 1886216809 && *(_DWORD *)v156 != 1987276900 || v162 == 1886680169;
        uint64_t v164 = *(void *)(*(void *)buf + 192LL);
        uint64_t v165 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          uint64_t v166 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }

        if (v164 == v158 && v163) {
          break;
        }
        uint64_t v161 = *(void *)(v161 + 8);
        if (v161 == v156 + 16) {
          goto LABEL_259;
        }
      }

      uint64_t v179 = (uint64_t *)a1;
      os_signpost_id_t v5 = v359;
      uint64_t v177 = (std::__shared_weak_count *)operator new(0x28uLL);
      v177->__shared_owners_ = 0LL;
      v177->__shared_weak_owners_ = 0LL;
      v177->__vftable = (std::__shared_weak_count_vtbl *)off_4738E0;
      v177[1].__vftable = (std::__shared_weak_count_vtbl *)&off_473918;
      std::string::size_type v178 = (std::string::size_type)&v177[1];
      v177[1].__shared_owners_ = v158;
      goto LABEL_264;
    }

          *(_OWORD *)v573 = v30;
          goto LABEL_220;
        }

LABEL_260:
    uint64_t v177 = 0LL;
    std::string::size_type v178 = 0LL;
    uint64_t v179 = (uint64_t *)a1;
LABEL_264:
    __dst.__r_.__value_.__r.__words[0] = v178;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v177;
    if (v178)
    {
      uint64_t v180 = v179 + 2;
      unint64_t v181 = v179[2];
      uint64_t v182 = (void *)v179[1];
      if ((unint64_t)v182 >= v181)
      {
        uint64_t v187 = *v179;
        uint64_t v188 = ((uint64_t)v182 - *v179) >> 4;
        unint64_t v189 = v188 + 1;
        uint64_t v190 = v181 - v187;
        if (v190 >> 3 > v189) {
          unint64_t v189 = v190 >> 3;
        }
        else {
          unint64_t v191 = v189;
        }
        char v368 = v180;
        uint64_t v192 = (char *)sub_7BE90(v191);
        v194 = &v192[16 * v188];
        std::string::size_type v195 = __dst.__r_.__value_.__l.__size_;
        *(_OWORD *)v194 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        if (v195)
        {
          std::string v196 = (unint64_t *)(v195 + 8);
          do
            unint64_t v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }

        uint64_t v199 = *a1;
        uint64_t v198 = a1[1];
        if (v198 == *a1)
        {
          int64x2_t v202 = vdupq_n_s64((unint64_t)v198);
          v200 = &v192[16 * v188];
        }

        else
        {
          v200 = &v192[16 * v188];
          do
          {
            __int128 v201 = *((_OWORD *)v198 - 1);
            v198 -= 16;
            *((_OWORD *)v200 - 1) = v201;
            v200 -= 16;
            *(void *)uint64_t v198 = 0LL;
            *((void *)v198 + 1) = 0LL;
          }

          while (v198 != v199);
          int64x2_t v202 = *(int64x2_t *)a1;
        }

        uint64_t v186 = a1;
        int v185 = v194 + 16;
        *a1 = v200;
        a1[1] = v194 + 16;
        *(int64x2_t *)&buf[8] = v202;
        uint64_t v203 = a1[2];
        a1[2] = &v192[16 * v193];
        *(void *)&_BYTE buf[24] = v203;
        *(void *)AudioObjectPropertyAddress buf = v202.i64[0];
        sub_A0D64((uint64_t)buf);
      }

      else
      {
        *uint64_t v182 = __dst.__r_.__value_.__r.__words[0];
        v182[1] = v177;
        if (v177)
        {
          uint64_t v183 = (unint64_t *)&v177->__shared_owners_;
          do
            unint64_t v184 = __ldxr(v183);
          while (__stxr(v184 + 1, v183));
        }

        int v185 = (char *)(v182 + 2);
        uint64_t v186 = a1;
      }

      v186[1] = v185;
      uint64_t v177 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    }

    if (v177)
    {
      uint64_t v204 = (unint64_t *)&v177->__shared_owners_;
      do
        unint64_t v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }

    goto LABEL_291;
  }

  if (v160)
  {
    uint64_t v169 = *(void *)(v156 + 24);
    if (v169 != v156 + 16)
    {
      while (1)
      {
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(v169 + 16), "", 975);
        int v170 = *(_DWORD *)(*(void *)buf + 144LL);
        BOOL v171 = v170 == 1886222185 || v170 == 1886216809 && *(_DWORD *)v156 != 1987276900 || v170 == 1886680169;
        uint64_t v172 = *(void *)(*(void *)buf + 192LL);
        uint64_t v173 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          int v174 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }

        if (v172 == v160 && v171) {
          break;
        }
        uint64_t v169 = *(void *)(v169 + 8);
        if (v169 == v156 + 16)
        {
LABEL_259:
          uint64_t v177 = 0LL;
          std::string::size_type v178 = 0LL;
          os_signpost_id_t v5 = v359;
          uint64_t v179 = (uint64_t *)a1;
          goto LABEL_264;
        }
      }

      uint64_t v179 = (uint64_t *)a1;
      os_signpost_id_t v5 = v359;
      uint64_t v177 = (std::__shared_weak_count *)operator new(0x28uLL);
      v177->__shared_owners_ = 0LL;
      v177->__shared_weak_owners_ = 0LL;
      v177->__vftable = (std::__shared_weak_count_vtbl *)off_475370;
      v177[1].__vftable = (std::__shared_weak_count_vtbl *)&off_4753A8;
      std::string::size_type v178 = (std::string::size_type)&v177[1];
      v177[1].__shared_owners_ = v160;
      goto LABEL_264;
    }

    goto LABEL_260;
  }

  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
LABEL_291:
  if (*(_DWORD *)(*(void *)v5 + 4LL)) {
    BOOL v206 = 0;
  }
  else {
    BOOL v206 = **(_DWORD **)v5 == 1986817911;
  }
  if (v206)
  {
    uint64_t v207 = (std::__shared_weak_count *)operator new(0x28uLL);
    v207->__shared_owners_ = 0LL;
    uint64_t v208 = (unint64_t *)&v207->__shared_owners_;
    v207->__shared_weak_owners_ = 0LL;
    v207->__vftable = (std::__shared_weak_count_vtbl *)off_46DB98;
    v207[1].__vftable = (std::__shared_weak_count_vtbl *)off_46DB48;
    uint64_t v209 = v207 + 1;
    if (notify_register_check("com.apple.odeon.lla", (int *)&v207[1].__shared_owners_))
    {
      v345 = (os_log_t *)sub_138E8(13);
      v346 = *v345;
      if (*v345 && os_log_type_enabled(*v345, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OdeonIODelegate.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 25;
        _os_log_impl( &dword_0,  v346,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Failed to register notification token for low latency device",  buf,  0x12u);
      }

      v347 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v347, "Failed to register notification token for low latency device");
    }

    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207[1];
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v207;
    v364[0] = &v207[1];
    v364[1] = v207;
    do
      unint64_t v210 = __ldxr(v208);
    while (__stxr(v210 + 1, v208));
    v211 = a1;
    unint64_t v212 = (unint64_t)a1[2];
    v213 = (std::__shared_weak_count **)a1[1];
    if ((unint64_t)v213 >= v212)
    {
      uint64_t v215 = ((char *)v213 - *a1) >> 4;
      unint64_t v216 = v215 + 1;
      uint64_t v217 = v212 - (void)*a1;
      if (v217 >> 3 > v216) {
        unint64_t v216 = v217 >> 3;
      }
      else {
        unint64_t v218 = v216;
      }
      char v368 = a1 + 2;
      int v219 = (char *)sub_7BE90(v218);
      uint64_t v221 = (std::__shared_weak_count **)&v219[16 * v215];
      *uint64_t v221 = v209;
      v221[1] = v207;
      v211 = a1;
      uint64_t v223 = *a1;
      v222 = a1[1];
      if (v222 == *a1)
      {
        int64x2_t v226 = vdupq_n_s64((unint64_t)v222);
        uint64_t v224 = v221;
      }

      else
      {
        uint64_t v224 = v221;
        do
        {
          __int128 v225 = *((_OWORD *)v222 - 1);
          v222 -= 16;
          *((_OWORD *)v224 - 1) = v225;
          v224 -= 2;
          *(void *)v222 = 0LL;
          *((void *)v222 + 1) = 0LL;
        }

        while (v222 != v223);
        int64x2_t v226 = *(int64x2_t *)a1;
      }

      __int16 v214 = (char *)(v221 + 2);
      *a1 = (char *)v224;
      a1[1] = (char *)(v221 + 2);
      *(int64x2_t *)&buf[8] = v226;
      v227 = a1[2];
      a1[2] = &v219[16 * v220];
      *(void *)&_BYTE buf[24] = v227;
      *(void *)AudioObjectPropertyAddress buf = v226.i64[0];
      sub_A0D64((uint64_t)buf);
    }

    else
    {
      void *v213 = v209;
      v213[1] = v207;
      __int16 v214 = (char *)(v213 + 2);
    }

    v211[1] = v214;
    uint64_t v228 = (unint64_t *)&v207->__shared_owners_;
    do
      unint64_t v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }

  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  }

  uint64_t v230 = *(void *)v5;
  unint64_t v231 = operator new(8uLL);
  *unint64_t v231 = 0x6C70696E6870696ELL;
  *(void *)AudioObjectPropertyAddress buf = v231;
  *(void *)&buf[8] = v231 + 1;
  *(void *)&_DWORD buf[16] = v231 + 1;
  strcpy(&buf[24], "cwdv");
  LOBYTE(v36std::iostream::~basic_iostream(v2, v5 + 8) = 0;
  int v369 = 3;
  v371[0] = 0LL;
  v371[1] = 0LL;
  v370 = v371;
  int v372 = 44739242;
  CFTypeRef cf = 0LL;
  sub_7267C((unint64_t *)&__dst, v230, (uint64_t)buf);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v371[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (__dst.__r_.__value_.__l.__cap_)
  {
    unsigned int v232 = (std::__shared_weak_count *)operator new(0x38uLL);
    v232->__shared_owners_ = 0LL;
    v232->__shared_weak_owners_ = 0LL;
    v232->__vftable = (std::__shared_weak_count_vtbl *)off_483C00;
    v232[1].__vftable = (std::__shared_weak_count_vtbl *)off_483BB0;
    uint64_t v233 = v232 + 1;
    sub_85A90(&v232[1].__shared_owners_, &__dst);
    v364[0] = &v232[1];
    v364[1] = v232;
    sub_85B80((uint64_t *)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v232[1];
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v232;
    uint64_t v234 = (unint64_t *)&v232->__shared_owners_;
    do
      unint64_t v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
    BOOL v236 = a1;
    unint64_t v237 = (unint64_t)a1[2];
    v238 = (std::__shared_weak_count **)a1[1];
    if ((unint64_t)v238 >= v237)
    {
      uint64_t v240 = ((char *)v238 - *a1) >> 4;
      unint64_t v241 = v240 + 1;
      uint64_t v242 = v237 - (void)*a1;
      if (v242 >> 3 > v241) {
        unint64_t v241 = v242 >> 3;
      }
      else {
        unint64_t v243 = v241;
      }
      char v368 = a1 + 2;
      uint64_t v244 = (char *)sub_7BE90(v243);
      v246 = (std::__shared_weak_count **)&v244[16 * v240];
      void *v246 = v233;
      v246[1] = v232;
      BOOL v236 = a1;
      v248 = *a1;
      uint64_t v247 = a1[1];
      if (v247 == *a1)
      {
        int64x2_t v251 = vdupq_n_s64((unint64_t)v247);
        v249 = v246;
      }

      else
      {
        v249 = v246;
        do
        {
          __int128 v250 = *((_OWORD *)v247 - 1);
          v247 -= 16;
          *((_OWORD *)v249 - 1) = v250;
          v249 -= 2;
          *(void *)uint64_t v247 = 0LL;
          *((void *)v247 + 1) = 0LL;
        }

        while (v247 != v248);
        int64x2_t v251 = *(int64x2_t *)a1;
      }

      v239 = (char *)(v246 + 2);
      *a1 = (char *)v249;
      a1[1] = (char *)(v246 + 2);
      *(int64x2_t *)&buf[8] = v251;
      v252 = a1[2];
      a1[2] = &v244[16 * v245];
      *(void *)&_BYTE buf[24] = v252;
      *(void *)AudioObjectPropertyAddress buf = v251.i64[0];
      sub_A0D64((uint64_t)buf);
    }

    else
    {
      *v238 = v233;
      v238[1] = v232;
      v239 = (char *)(v238 + 2);
    }

    v236[1] = v239;
    v253 = (unint64_t *)&v232->__shared_owners_;
    do
      unint64_t v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }

  else
  {
    v364[0] = 0LL;
    v364[1] = 0LL;
    sub_85B80((uint64_t *)&__dst);
  }

  uint64_t v255 = *(void *)v5 + 16LL;
  for (uint64_t i = *(void *)(*(void *)v5 + 24LL); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v255) {
      goto LABEL_349;
    }
  }

  if (!_os_feature_enabled_impl("VirtualAudio", "handset_prox_block_gm")
    || (unsigned __int16)sub_8339C((uint64_t)@"DeviceSupportsGenerativeModelSystems") < 0x101u)
  {
LABEL_349:
    __int128 v361 = 0uLL;
    goto LABEL_350;
  }

  int v275 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v275->__shared_owners_ = 0u;
  char v276 = (unint64_t *)&v275->__shared_owners_;
  v275->__vftable = (std::__shared_weak_count_vtbl *)off_481598;
  v275[1].__vftable = (std::__shared_weak_count_vtbl *)off_481488;
  char v277 = v275 + 1;
  *(_OWORD *)&v275[1].__shared_owners_ = 0u;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_481500;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v275[1];
  p_dst = &__dst;
  uint64_t v278 = sub_869B4();
  uint64_t v279 = (void *)objc_claimAutoreleasedReturnValue(v278);
  v280 = (std::__shared_weak_count_vtbl *)operator new(0x48uLL);
  sub_22C48C((uint64_t)buf, (uint64_t)&__dst);
  v281 = v279;
  LODWORD(v280->~__shared_weak_count) = 0;
  sub_7D084(&v280->~__shared_weak_count_0, "com.apple.backboard.proximity.changed");
  uint64_t v282 = *(void *)&buf[24];
  if (!*(void *)&buf[24]) {
    goto LABEL_389;
  }
  if (*(_BYTE **)&buf[24] != buf)
  {
    uint64_t v282 = (*(uint64_t (**)(void))(**(void **)&buf[24] + 16LL))(*(void *)&buf[24]);
LABEL_389:
    v280[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v282;
    goto LABEL_414;
  }

  v280[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v280->__on_zero_shared_weak;
  (*(void (**)(_BYTE *))(*(void *)buf + 24LL))(buf);
LABEL_414:
  v280[1].__get_deleter = v281;
  v275[2].__vftable = v280;
  v306 = *(void **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    uint64_t v307 = 4LL;
    v306 = buf;
  }

  else
  {
    if (!*(void *)&buf[24]) {
      goto LABEL_419;
    }
    uint64_t v307 = 5LL;
  }

  (*(void (**)(void *))(*v306 + 8 * v307))(v306);
LABEL_419:

  unsigned int v308 = p_dst;
  if (p_dst == &__dst)
  {
    uint64_t v309 = 4LL;
    unsigned int v308 = &__dst;
  }

  else
  {
    if (!p_dst) {
      goto LABEL_424;
    }
    uint64_t v309 = 5LL;
  }

  (*(void (**)(std::string *))(v308->__r_.__value_.__r.__words[0] + 8 * v309))(v308);
LABEL_424:
  unint64_t v310 = (std::string *)operator new(0x30uLL);
  sub_7D084(v364, "AudioRecording");
  sub_7D084(&__p, "Receiver IO + Prox Sensor Active");
  v310->__r_.__value_.__r.__words[0] = (std::string::size_type)off_4814D8;
  v310->__r_.__value_.__l.__size_ = 0LL;
  v310->__r_.__value_.__l.__cap_ = 0LL;
  else {
    v310[1] = __p;
  }
  if (SHIBYTE(v365) < 0)
  {
    sub_24054(buf, v364[0], (unint64_t)v364[1]);
  }

  else
  {
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v364;
    *(void *)&_DWORD buf[16] = v365;
  }

  else {
    std::string __dst = __p;
  }
  sub_7A0DC(&v366);
  sub_127660((uint64_t)&v310->__r_.__value_.__l.__size_, &v366);
  v311 = (std::__shared_weak_count *)*((void *)&v366 + 1);
  if (*((void *)&v366 + 1))
  {
    v312 = (unint64_t *)(*((void *)&v366 + 1) + 8LL);
    do
      unint64_t v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }

  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v365) < 0) {
    operator delete(v364[0]);
  }
  v275[2].__shared_owners_ = (uint64_t)v310;
  *(void *)&__int128 v361 = v275 + 1;
  *((void *)&v361 + 1) = v275;
  shared_weak_owners = (std::__shared_weak_count *)v275[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_459;
    }
    do
      unint64_t v315 = __ldxr(v276);
    while (__stxr(v315 + 1, v276));
    p_shared_weak_owners = (unint64_t *)&v275->__shared_weak_owners_;
    do
      unint64_t v317 = __ldxr(p_shared_weak_owners);
    while (__stxr(v317 + 1, p_shared_weak_owners));
    v275[1].__shared_owners_ = (uint64_t)v277;
    v275[1].__shared_weak_owners_ = (uint64_t)v275;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  else
  {
    do
      unint64_t v318 = __ldxr(v276);
    while (__stxr(v318 + 1, v276));
    v319 = (unint64_t *)&v275->__shared_weak_owners_;
    do
      unint64_t v320 = __ldxr(v319);
    while (__stxr(v320 + 1, v319));
    v275[1].__shared_owners_ = (uint64_t)v277;
    v275[1].__shared_weak_owners_ = (uint64_t)v275;
  }

  do
    unint64_t v321 = __ldaxr(v276);
  while (__stlxr(v321 - 1, v276));
  if (!v321)
  {
    ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
    std::__shared_weak_count::__release_weak(v275);
  }

        unint64_t v119 = (v120 + 1);
        uint64_t v118 = v41[4];
        uint64_t v120 = v119;
      }

      while (0xAAAAAAAAAAAAAAABLL * ((v41[5] - v118) >> 3) > v119);
    }

    v41 += 13;
  }

  while (v41 != v179);
  sub_2B32AC((uint64_t)v13, (uint64_t)&v201);
  if (v206[0])
  {
    v206[1] = v206[0];
    operator delete(v206[0]);
  }

  *(void *)AudioObjectPropertyAddress buf = (char *)&v204 + 8;
  sub_2A4E90((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v203;
  sub_2A4E90((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = (char *)v202 + 8;
  sub_7A668((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v201;
  sub_7A668((void ***)buf);
  if (v200 && v199 < 0) {
    operator delete(v198[0]);
  }
  if (v197 && v196 < 0) {
    operator delete(__dst[0]);
  }
  return v13;
}

LABEL_459:
  uint64_t v322 = v361;
  os_signpost_id_t v5 = v359;
  if (!(void)v361)
  {
LABEL_350:
    v257 = (std::__shared_weak_count *)*((void *)&v361 + 1);
    if (!*((void *)&v361 + 1)) {
      goto LABEL_355;
    }
    goto LABEL_351;
  }

  v257 = (std::__shared_weak_count *)*((void *)&v361 + 1);
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v361;
  if (*((void *)&v361 + 1))
  {
    v323 = (unint64_t *)(*((void *)&v361 + 1) + 8LL);
    do
      unint64_t v324 = __ldxr(v323);
    while (__stxr(v324 + 1, v323));
  }

  v325 = a1;
  unint64_t v326 = (unint64_t)a1[2];
  v327 = a1[1];
  if ((unint64_t)v327 >= v326)
  {
    uint64_t v329 = (v327 - *a1) >> 4;
    unint64_t v330 = v329 + 1;
    uint64_t v331 = v326 - (void)*a1;
    if (v331 >> 3 > v330) {
      unint64_t v330 = v331 >> 3;
    }
    else {
      unint64_t v332 = v330;
    }
    char v368 = a1 + 2;
    v333 = (char *)sub_7BE90(v332);
    v335 = &v333[16 * v329];
    *(void *)v335 = v322;
    *((void *)v335 + 1) = v257;
    v325 = a1;
    v337 = *a1;
    v336 = a1[1];
    if (v336 == *a1)
    {
      int64x2_t v340 = vdupq_n_s64((unint64_t)v336);
      v338 = v335;
    }

    else
    {
      v338 = v335;
      do
      {
        __int128 v339 = *((_OWORD *)v336 - 1);
        v336 -= 16;
        *((_OWORD *)v338 - 1) = v339;
        v338 -= 16;
        *(void *)v336 = 0LL;
        *((void *)v336 + 1) = 0LL;
      }

      while (v336 != v337);
      int64x2_t v340 = *(int64x2_t *)a1;
    }

    v328 = v335 + 16;
    *a1 = v338;
    a1[1] = v335 + 16;
    *(int64x2_t *)&buf[8] = v340;
    v344 = a1[2];
    a1[2] = &v333[16 * v334];
    *(void *)&_BYTE buf[24] = v344;
    *(void *)AudioObjectPropertyAddress buf = v340.i64[0];
    sub_A0D64((uint64_t)buf);
  }

  else
  {
    *(void *)v327 = v322;
    *((void *)v327 + 1) = v257;
    v328 = v327 + 16;
  }

  v325[1] = v328;
  if (v257)
  {
LABEL_351:
    v258 = (unint64_t *)&v257->__shared_owners_;
    do
      unint64_t v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }

LABEL_355:
  uint64_t v260 = *(void *)v5;
  int v261 = v5[3];
  if (!_os_feature_enabled_impl("AudioDSP", "gm_coex_mitigation")
    || (unsigned __int16)sub_8339C((uint64_t)@"DeviceSupportsGenerativeModelSystems") < 0x101u
    || (uint64_t v262 = *(void *)(v260 + 24), v262 == v260 + 16))
  {
LABEL_379:
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }

  else
  {
    while (1)
    {
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(v262 + 16), "", 55);
      int v263 = *(_DWORD *)(*(void *)buf + 144LL);
      BOOL v264 = v261 == 1937007472;
      if (v261 == 1936749157) {
        BOOL v264 = 1;
      }
      int v265 = v261 == 1936745328 || v264;
      BOOL v268 = 0;
      if (*(void *)(*(void *)buf + 96LL) != *(void *)(*(void *)buf + 104LL))
      {
        uint64_t v266 = (*(uint64_t (**)(void))(**(void **)buf + 184LL))(*(void *)buf);
        uint64_t v267 = (v266 & 0xFF00000000LL) != 0 ? v266 : 0LL;
        if (sub_F7070(*(uint64_t *)buf, v267))
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          __dst.__r_.__value_.__s.__data_[4] = 0;
          if ((*(unsigned int (**)(void, uint64_t, std::string *))(**(void **)buf + 248LL))( *(void *)buf,  v267,  &__dst) == 1937007986) {
            BOOL v268 = 1;
          }
        }
      }

      unint64_t v269 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        unint64_t v270 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }

      if (v263 == 1886216809 && ((v265 | v268) & 1) != 0) {
        break;
      }
      uint64_t v262 = *(void *)(v262 + 8);
      if (v262 == v260 + 16) {
        goto LABEL_379;
      }
    }

    v283 = (std::__shared_weak_count *)operator new(0x30uLL);
    *(_OWORD *)&v283->__shared_owners_ = 0u;
    v284 = (unint64_t *)&v283->__shared_owners_;
    v283->__vftable = (std::__shared_weak_count_vtbl *)off_486518;
    v283[1].__vftable = (std::__shared_weak_count_vtbl *)off_486458;
    uint64_t v285 = v283 + 1;
    *(_OWORD *)&v283[1].__shared_owners_ = 0u;
    sub_7D084(buf, "AudioRecording");
    sub_7D084(&__dst, "Spatial or stereo capture active");
    sub_7A0DC(v364);
    sub_127660((uint64_t)&v283[1].__shared_owners_, (__int128 *)v364);
    v286 = (std::__shared_weak_count *)v364[1];
    if (v364[1])
    {
      unint64_t v287 = (unint64_t *)((char *)v364[1] + 8);
      do
        unint64_t v288 = __ldaxr(v287);
      while (__stlxr(v288 - 1, v287));
      if (!v288)
      {
        ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
        std::__shared_weak_count::__release_weak(v286);
      }
    }

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v283[1];
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v283;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v283[1];
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v283;
    do
      unint64_t v289 = __ldxr(v284);
    while (__stxr(v289 + 1, v284));
    unint64_t v290 = a1;
    unint64_t v291 = (unint64_t)a1[2];
    v292 = (std::__shared_weak_count **)a1[1];
    if ((unint64_t)v292 >= v291)
    {
      uint64_t v294 = ((char *)v292 - *a1) >> 4;
      unint64_t v295 = v294 + 1;
      uint64_t v296 = v291 - (void)*a1;
      if (v296 >> 3 > v295) {
        unint64_t v295 = v296 >> 3;
      }
      else {
        unint64_t v297 = v295;
      }
      char v368 = a1 + 2;
      v298 = (char *)sub_7BE90(v297);
      v300 = (std::__shared_weak_count **)&v298[16 * v294];
      os_log_t *v300 = v285;
      v300[1] = v283;
      unint64_t v290 = a1;
      v302 = *a1;
      v301 = a1[1];
      if (v301 == *a1)
      {
        int64x2_t v305 = vdupq_n_s64((unint64_t)v301);
        v303 = v300;
      }

      else
      {
        v303 = v300;
        do
        {
          __int128 v304 = *((_OWORD *)v301 - 1);
          v301 -= 16;
          *((_OWORD *)v303 - 1) = v304;
          v303 -= 2;
          *(void *)v301 = 0LL;
          *((void *)v301 + 1) = 0LL;
        }

        while (v301 != v302);
        int64x2_t v305 = *(int64x2_t *)a1;
      }

      v293 = (char *)(v300 + 2);
      *a1 = (char *)v303;
      a1[1] = (char *)(v300 + 2);
      *(int64x2_t *)&buf[8] = v305;
      v341 = a1[2];
      a1[2] = &v298[16 * v299];
      *(void *)&_BYTE buf[24] = v341;
      *(void *)AudioObjectPropertyAddress buf = v305.i64[0];
      sub_A0D64((uint64_t)buf);
    }

    else
    {
      os_log_t *v292 = v285;
      v292[1] = v283;
      v293 = (char *)(v292 + 2);
    }

    v290[1] = v293;
    v342 = (unint64_t *)&v283->__shared_owners_;
    do
      unint64_t v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }

  uint64_t v272 = (std::__shared_weak_count *)*((void *)&v362 + 1);
  if (*((void *)&v362 + 1))
  {
    uint64_t v273 = (unint64_t *)(*((void *)&v362 + 1) + 8LL);
    do
      unint64_t v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }

void sub_107DD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41)
{
  a19 = a16;
  sub_7A668((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_108294( uint64_t **a1, uint64_t a2, unint64_t a3, os_unfair_lock_s *a4, uint64_t a5, unsigned int **a6)
{
  if ((*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 328LL))(a4)
    || (int v12 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88LL))( a4,  0LL),  v12 - (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 312LL))(a4) & 0xFF00000000LL) != 0) < 2))
  {
    sub_108744(a1, a2, a3, a4, a5, a6);
  }

  else
  {
    if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88LL))( a4,  0LL) <= 1)
    {
      uint64_t v17 = (os_log_t *)sub_138E8(13);
      uint64_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v35 = "RoutingHandler.cpp";
        __int16 v36 = 1024;
        int v37 = 313;
        _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    sub_B8CBC(&v25, (uint64_t *)(*(void *)(*(void *)a3 + 24LL) + 16LL), "", 316);
    *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(v25 + 144);
    sub_7A22C((uint64_t)v24, (unsigned int *)buf, 1LL);
    sub_1D3A30((uint64_t *)buf, (uint64_t)a4, v25);
    sub_85EA4(&v31, buf);
    int v21 = 0LL;
    BOOL v22 = 0LL;
    int v23 = 0LL;
    uint64_t v28 = (void **)&v21;
    char v29 = 0;
    int v21 = (uint64_t *)operator new(0x68uLL);
    BOOL v22 = v21;
    int v23 = v21 + 13;
    BOOL v22 = (uint64_t *)sub_10A49C((uint64_t)&v31, (uint64_t)buf, (uint64_t)v21);
    uint64_t v13 = *(void *)a3;
    sub_105E0C((char **)v20, *(_DWORD *)(a2 + 8), (_DWORD *)a3, a6);
    uint64_t v27 = 0LL;
    LOBYTE(v2std::iostream::~basic_iostream(v2, v5 + 8) = 0;
    char v30 = 0;
    *a1 = sub_2B7D7C(&v21, v13, (__int128 *)(a3 + 24), (uint64_t)&v28, v20, a3 + 120, &v27, v24, (__int128 *)(a3 + 176));
    uint64_t v28 = (void **)v20;
    sub_7A668(&v28);
    uint64_t v28 = (void **)&v21;
    sub_10A52C(&v28);
    sub_85D64(v33[7]);
    sub_85D64(v33[4]);
    uint64_t v28 = (void **)v33;
    sub_85DA4(&v28);
    uint64_t v28 = (void **)&v32;
    sub_85DA4(&v28);
    sub_85D64(v38[7]);
    sub_85D64(v38[4]);
    unint64_t v31 = (void **)v38;
    sub_85DA4(&v31);
    unint64_t v31 = (void **)((char *)&v35 + 4);
    sub_85DA4(&v31);
    sub_32C8C((void *)v24[1]);
    int v14 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

void sub_108624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
}

void sub_108744( uint64_t **a1, uint64_t a2, unint64_t a3, os_unfair_lock_s *a4, uint64_t a5, unsigned int **a6)
{
  unint64_t v9 = a3;
  int v12 = (uint64_t *)(*(void *)(*(void *)a3 + 16LL) + 16LL);
  sub_B8CBC((uint64_t *)buf, v12, "", 288);
  uint64_t v13 = *(std::__shared_weak_count **)&buf[8];
  int v14 = *(os_unfair_lock_s **)(*(void *)buf + 192LL);
  if (*(void *)&buf[8])
  {
    unsigned int v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  uint64_t v17 = *(void *)v9;
  if (*(void *)(*(void *)v9 + 32LL) == 2LL)
  {
    sub_B8CBC((uint64_t *)buf, v12, "", 291);
    BOOL v18 = sub_203D48(*(_DWORD *)(*(void *)buf + 144LL));
    BOOL v19 = v18;
    unsigned int v20 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_11;
    }
    int v21 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (v19) {
        goto LABEL_12;
      }
    }

    else
    {
LABEL_11:
      if (v18)
      {
LABEL_12:
        if (v14 != a4)
        {
          int v23 = (os_log_t *)sub_138E8(19);
          unsigned int v24 = *v23;
          if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            sub_23FE8((uint64_t)v183, a4 + 2);
            unint64_t v155 = a4;
            uint64_t v25 = a2;
            unint64_t v26 = v9;
            int v27 = (char)v183[23];
            uint64_t v28 = *(uint8_t **)v183;
            sub_23FE8((uint64_t)__p, v14 + 2);
            char v29 = v183;
            if (v27 < 0) {
              char v29 = v28;
            }
            if ((SBYTE7(v165) & 0x80u) == 0) {
              char v30 = __p;
            }
            else {
              char v30 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 338;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&uint8_t buf[20] = v29;
            *(_WORD *)&_BYTE buf[28] = 2080;
            *(void *)&buf[30] = v30;
            _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Input Device: %s, Aux Input Device: %s",  buf,  0x26u);
            if (SBYTE7(v165) < 0) {
              operator delete(__p[0]);
            }
            unint64_t v9 = v26;
            a2 = v25;
            a4 = v155;
          }

          if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88LL))( a4,  0LL) != 1)
          {
            unint64_t v123 = (os_log_t *)sub_138E8(13);
            int v124 = *v123;
            if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 341;
              _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Precondition failure.");
          }

          if (!v14)
          {
            uint64_t v126 = (os_log_t *)sub_138E8(13);
            uint64_t v127 = *v126;
            if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 348;
              _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            unint64_t v128 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v128, "Precondition failure.");
          }

          uint64_t v31 = *(void *)(*(void *)v9 + 16LL);
          sub_B8CBC((uint64_t *)&v157, (uint64_t *)(*(void *)(*(void *)v9 + 24LL) + 16LL), "", 352);
          sub_B8CBC(&v171, (uint64_t *)(v31 + 16), "", 353);
          int v32 = *(_DWORD *)(v171 + 144);
          *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)v157 + 36);
          *(_DWORD *)&uint8_t buf[4] = v32;
          sub_7A22C((uint64_t)&v169, (unsigned int *)buf, 2LL);
          if (*(void *)(*(void *)v9 + 32LL) == 2LL && sub_203D48(v32))
          {
            if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v14->_os_unfair_lock_opaque + 312LL))(v14) & 0xFF00000000LL) != 0)
            {
              sub_1D3810(v183, (uint64_t)a4, (uint64_t)v157, 0, a5);
              uint64_t v33 = v171;
              uint64_t v34 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v14->_os_unfair_lock_opaque + 312LL))(v14);
              if ((v34 & 0xFF00000000LL) == 0) {
                sub_8DEEC();
              }
              memset(buf, 0, 24);
              sub_1D3810(__p, (uint64_t)v14, v33, v34, (uint64_t)buf);
              if ((unint64_t)*(unsigned __int8 *)(v9 + 152) << 32)
              {
                sub_85EA4(buf, v183);
                sub_85EA4(v182, __p);
                memset(&v173, 0, sizeof(v173));
                v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
                v159.__r_.__value_.__s.__data_[8] = 0;
                v173.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xD0uLL);
                v173.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
                v173.__r_.__value_.__l.__cap_ = v173.__r_.__value_.__r.__words[0] + 208;
                v173.__r_.__value_.__l.__size_ = sub_10A49C( (uint64_t)buf,  (uint64_t)v183,  (uint64_t)v173.__r_.__value_.__l.__data_);
                uint64_t v35 = *(void *)v9;
                sub_105E0C((char **)v163, *(_DWORD *)(a2 + 8), (_DWORD *)v9, a6);
                *(void *)&__int128 v162 = 0LL;
                v159.__r_.__value_.__s.__data_[0] = 0;
                v159.__r_.__value_.__s.__data_[16] = 0;
                *a1 = sub_2B7D7C( (uint64_t **)&v173,  v35,  (__int128 *)(v9 + 24),  (uint64_t)&v159,  v163,  v9 + 120,  &v162,  &v169,  (__int128 *)(v9 + 176));
                v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
                sub_7A668((void ***)&v159);
                v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
                sub_10A52C((void ***)&v159);
                for (uint64_t i = 0LL; i != -26; i -= 13LL)
                {
                  sub_85D64((void *)v182[i + 11]);
                  sub_85D64((void *)v182[i + 8]);
                  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182[i + 4];
                  sub_85DA4((void ***)&v159);
                  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182[i + 1];
                  sub_85DA4((void ***)&v159);
                }

                goto LABEL_80;
              }

              int64x2_t v52 = *(unsigned int **)v9;
              sub_105E0C((char **)v163, *(_DWORD *)(a2 + 8), (_DWORD *)v9, a6);
              uint64_t v153 = (uint64_t *)operator new(0x358uLL);
              *(void *)&__int128 v162 = *(void *)v183;
              int v174 = __p[0];
              if (*(void *)v183)
              {
                if (__p[0] && ((*(uint64_t (**)(void))(*(void *)__p[0] + 312LL))() & 0xFF00000000LL) != 0)
                {
                  v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
                  *(_OWORD *)&v173.__r_.__value_.__r.__words[1] = (unint64_t)&v173;
                  sub_10AA94(buf, (uint64_t *)&v162);
                  sub_10AAF4((uint64_t *)&v173, buf);
                  sub_68314(buf);
                  sub_10AA94(buf, (uint64_t *)&v174);
                  sub_10AAF4((uint64_t *)&v173, buf);
                  int v152 = a1;
                  sub_68314(buf);
                  uint64_t v53 = (os_log_t *)sub_138E8(16);
                  int v148 = v52;
                  int v150 = (__int128 *)(v9 + 120);
                  uint64_t v54 = *v53;
                  if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    *(void *)&uint8_t buf[4] = "AggregateDevice_AuxInput.h";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&_DWORD buf[14] = 146;
                    _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Build topology for auxiliary input aggregate device:",  buf,  0x12u);
                  }

                  for (int j = (std::string *)v173.__r_.__value_.__l.__size_;
                        j != &v173;
                        int j = (std::string *)j->__r_.__value_.__l.__size_)
                  {
                    for (std::string::pointer k = j[1].__r_.__value_.__l.__data_;
                          k != (std::string::pointer)&j->__r_.__value_.__r.__words[2];
                          std::string::pointer k = (std::string::pointer)*((void *)k + 1))
                    {
                      unint64_t v57 = (os_unfair_lock_s *)*((void *)k + 2);
                      unsigned __int8 v58 = (os_log_t *)sub_138E8(16);
                      uint64_t v59 = *v58;
                      if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_DEBUG))
                      {
                        int v60 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v57->_os_unfair_lock_opaque
                                                                            + 120LL))(v57);
                        sub_23FE8((uint64_t)&v159, v57 + 2);
                        unint64_t v61 = &v159;
                        if ((v159.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                          unint64_t v61 = (std::string *)v159.__r_.__value_.__r.__words[0];
                        }
                        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                        *(void *)&uint8_t buf[4] = "AggregateDevice_AuxInput.h";
                        *(_WORD *)&_BYTE buf[12] = 1024;
                        *(_DWORD *)&_DWORD buf[14] = 152;
                        *(_WORD *)&_BYTE buf[18] = 1024;
                        *(_DWORD *)&uint8_t buf[20] = v60;
                        *(_WORD *)&_BYTE buf[24] = 2080;
                        *(void *)&buf[26] = v61;
                        _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d   - PhysicalDevice ID %u: %s",  buf,  0x22u);
                      }
                    }
                  }

                  buf[0] = 0;
                  _BYTE buf[24] = 0;
                  _BYTE buf[32] = 0;
                  LOBYTE(v179) = 0;
                  sub_21C444( v153,  (uint64_t)&v173,  (uint64_t *)v183,  (uint64_t *)__p,  (uint64_t)v148,  v150,  v163,  (uint64_t)&v169,  (__int128 *)buf);
                  BOOL v62 = (__int128 *)(v9 + 24);
                  if ((_BYTE)v179 && v178 < 0) {
                    operator delete(*(void **)&buf[32]);
                  }
                  sub_AB45C((uint64_t *)&v173);
                  uint64_t *v153 = (uint64_t)off_470750;
                  buf[0] = 0;
                  _DWORD buf[16] = 0;
                  sub_21AF4C(v153, (uint64_t *)v183, 0LL, v148, (unsigned int *)v150, v62, (uint64_t)buf);
                  char *v152 = v153;
                  *(void *)AudioObjectPropertyAddress buf = v163;
                  sub_7A668((void ***)buf);
LABEL_80:
                  sub_85D64(v168);
                  sub_85D64(v167);
                  *(void *)AudioObjectPropertyAddress buf = &v166;
                  sub_85DA4((void ***)buf);
                  *(void *)AudioObjectPropertyAddress buf = &__p[1];
                  sub_85DA4((void ***)buf);
                  sub_85D64(v188);
                  sub_85D64(v187);
                  *(void *)AudioObjectPropertyAddress buf = &v184;
                  sub_85DA4((void ***)buf);
                  *(void *)AudioObjectPropertyAddress buf = &v183[8];
                  sub_85DA4((void ***)buf);
                  sub_32C8C(v170);
                  BOOL v63 = v172;
                  if (v172)
                  {
                    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
                    do
                      unint64_t v65 = __ldaxr(p_shared_owners);
                    while (__stlxr(v65 - 1, p_shared_owners));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                  }

                  int v38 = v158;
                  if (v158)
                  {
                    char v66 = (unint64_t *)&v158->__shared_owners_;
                    do
                      unint64_t v40 = __ldaxr(v66);
                    while (__stlxr(v40 - 1, v66));
                    goto LABEL_40;
                  }

                  return;
                }

                uint64_t v132 = (os_log_t *)sub_138E8(13);
                uint64_t v133 = *v132;
                if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "AggregateDevice_AuxInput.h";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&_DWORD buf[14] = 139;
                  _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
                }
              }

              else
              {
                uint64_t v145 = (os_log_t *)sub_138E8(13);
                AudioObjectID v146 = *v145;
                if (*v145 && os_log_type_enabled(*v145, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "AggregateDevice_AuxInput.h";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&_DWORD buf[14] = 136;
                  _os_log_impl( &dword_0,  v146,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
                }
              }

              uint64_t v147 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v147, "Precondition failure.");
            }

            uint64_t v129 = (os_log_t *)sub_138E8(13);
            unint64_t v130 = *v129;
            if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 358;
              _os_log_impl( &dword_0,  v130,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }
          }

          else
          {
            uint64_t v118 = (os_log_t *)sub_138E8(13);
            unint64_t v119 = *v118;
            if (*v118 && os_log_type_enabled(*v118, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 357;
              _os_log_impl( &dword_0,  v119,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }
          }

          uint64_t v131 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v131, "Precondition failure.");
        }

        if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88LL))( a4,  0LL) != 2)
        {
          std::string::size_type v134 = (os_log_t *)sub_138E8(13);
          uint64_t v135 = *v134;
          if (*v134 && os_log_type_enabled(*v134, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 394;
            _os_log_impl( &dword_0,  v135,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          unint64_t v136 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v136, "Precondition failure.");
        }

        uint64_t v41 = *(void *)v9;
        if (*(void *)(*(void *)v9 + 32LL) != 2LL)
        {
          uint64_t v137 = (os_log_t *)sub_138E8(13);
          char v138 = *v137;
          if (*v137 && os_log_type_enabled(*v137, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 395;
            _os_log_impl( &dword_0,  v138,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          uint64_t v139 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v139, "Precondition failure.");
        }

        uint64_t v42 = *(void *)(v41 + 16);
        sub_B8CBC(&v171, (uint64_t *)(*(void *)(v41 + 24) + 16LL), "", 399);
        sub_B8CBC((uint64_t *)&v162, (uint64_t *)(v42 + 16), "", 400);
        int v43 = *(_DWORD *)(v162 + 144);
        *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(v171 + 144);
        *(_DWORD *)&uint8_t buf[4] = v43;
        sub_7A22C((uint64_t)v163, (unsigned int *)buf, 2LL);
        if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 312LL))(a4) & 0xFF00000000LL) == 0
          || !sub_203D48(v43))
        {
          uint64_t v120 = (os_log_t *)sub_138E8(13);
          std::string::size_type v121 = *v120;
          if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 404;
            _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          unsigned int v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v122, "Precondition failure.");
        }

        sub_10AB90(v183, v171, (uint64_t)v172, a5);
        *(_DWORD *)AudioObjectPropertyAddress buf = 0;
        *(void *)&buf[8] = *(void *)v183;
        *(void *)&_DWORD buf[16] = *(void *)&v183[8];
        if (*(void *)&v183[8])
        {
          uint64_t v44 = (unint64_t *)(*(void *)&v183[8] + 16LL);
          do
            unint64_t v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }

        *(_OWORD *)&_BYTE buf[24] = *(_OWORD *)&v183[16];
        unsigned __int8 v176 = v184;
        *(void *)&v183[24] = 0LL;
        unint64_t v184 = 0LL;
        *(void *)&v183[16] = 0LL;
        __int128 v46 = v162;
        *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v162;
        uint64_t v151 = a2;
        uint64_t v156 = (uint64_t)a4;
        std::string::size_type v149 = (std::__shared_weak_count *)*((void *)&v162 + 1);
        if (*((void *)&v162 + 1))
        {
          unint64_t v47 = (unint64_t *)(*((void *)&v162 + 1) + 8LL);
          do
            unint64_t v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v159.__r_.__value_.__l.__cap_ = 0LL;
          uint64_t v160 = 0LL;
          uint64_t v161 = 0LL;
          int v177 = 1;
          uint64_t v49 = (unint64_t *)(*((void *)&v46 + 1) + 16LL);
          __int128 v179 = v46;
          do
            unint64_t v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
          __int128 v51 = a1;
        }

        else
        {
          *(_OWORD *)&v159.__r_.__value_.__r.__words[1] = 0uLL;
          __int128 v51 = a1;
          uint64_t v160 = 0LL;
          uint64_t v161 = 0LL;
          int v177 = 1;
          __int128 v179 = (unint64_t)v162;
        }

        uint64_t v154 = (_DWORD *)v9;
        uint64_t v67 = 0LL;
        v180[0] = 0LL;
        v180[1] = 0LL;
        unint64_t v181 = 0LL;
        uint64_t v160 = 0LL;
        uint64_t v161 = 0LL;
        v159.__r_.__value_.__l.__cap_ = 0LL;
        float v166 = 1.0;
        *(_OWORD *)std::string __p = 0u;
        __int128 v165 = 0u;
        while (1)
        {
          unint64_t v68 = *(unsigned int *)&buf[48 * v67];
          unint64_t v69 = (unint64_t)__p[1];
          if (__p[1])
          {
            uint8x8_t v70 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v70.i16[0] = vaddlv_u8(v70);
            if (v70.u32[0] > 1uLL)
            {
              unint64_t v9 = *(unsigned int *)&buf[48 * v67];
            }

            else
            {
              unint64_t v9 = (LODWORD(__p[1]) - 1) & v68;
            }

            unint64_t v71 = (uint64_t **)*((void *)__p[0] + v9);
            if (v71)
            {
              for (uint64_t m = *v71; m; uint64_t m = (uint64_t *)*m)
              {
                unint64_t v73 = m[1];
                if (v73 == v68)
                {
                  if (*((_DWORD *)m + 4) == (_DWORD)v68) {
                    goto LABEL_132;
                  }
                }

                else
                {
                  if (v70.u32[0] > 1uLL)
                  {
                  }

                  else
                  {
                    v73 &= (unint64_t)__p[1] - 1;
                  }

                  if (v73 != v9) {
                    break;
                  }
                }
              }
            }
          }

          uint64_t v74 = operator new(0x40uLL);
          unsigned int v75 = v74;
          v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
          v173.__r_.__value_.__l.__size_ = (std::string::size_type)&v165;
          v173.__r_.__value_.__s.__data_[16] = 0;
          void *v74 = 0LL;
          v74[1] = v68;
          *((_DWORD *)v74 + 4) = v68;
          uint64_t v76 = &buf[48 * v67];
          uint64_t v78 = *((void *)v76 + 1);
          uint64_t v77 = *((void *)v76 + 2);
          v74[3] = v78;
          v74[4] = v77;
          if (v77)
          {
            char v79 = (unint64_t *)(v77 + 16);
            do
              unint64_t v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }

          v74[5] = 0LL;
          v74[6] = 0LL;
          v74[7] = 0LL;
          sub_7A5B8( v74 + 5,  *(const void **)&buf[48 * v67 + 24],  *(void *)&buf[48 * v67 + 32],  (uint64_t)(*(void *)&buf[48 * v67 + 32] - *(void *)&buf[48 * v67 + 24]) >> 2);
          v173.__r_.__value_.__s.__data_[16] = 1;
          float v81 = (float)(unint64_t)(*((void *)&v165 + 1) + 1LL);
          if (!v69 || (float)(v166 * (float)v69) < v81)
          {
            BOOL v82 = (v69 & (v69 - 1)) != 0;
            if (v69 < 3) {
              BOOL v82 = 1LL;
            }
            unint64_t v83 = v82 | (2 * v69);
            unint64_t v84 = vcvtps_u32_f32(v81 / v166);
            if (v83 <= v84) {
              size_t v85 = v84;
            }
            else {
              size_t v85 = v83;
            }
            sub_52168((uint64_t)__p, v85);
            unint64_t v69 = (unint64_t)__p[1];
            if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
            {
              else {
                unint64_t v9 = v68;
              }
            }

            else
            {
              unint64_t v9 = (LODWORD(__p[1]) - 1) & v68;
            }
          }

          uint64_t v86 = __p[0];
          int v87 = (void *)*((void *)__p[0] + v9);
          if (v87)
          {
            void *v75 = *v87;
          }

          else
          {
            void *v75 = v165;
            *(void *)&__int128 v165 = v75;
            v86[v9] = &v165;
            if (!*v75) {
              goto LABEL_131;
            }
            unint64_t v88 = *(void *)(*v75 + 8LL);
            if ((v69 & (v69 - 1)) != 0)
            {
              if (v88 >= v69) {
                v88 %= v69;
              }
            }

            else
            {
              v88 &= v69 - 1;
            }

            int v87 = (char *)__p[0] + 8 * v88;
          }

          void *v87 = v75;
LABEL_131:
          v173.__r_.__value_.__r.__words[0] = 0LL;
          ++*((void *)&v165 + 1);
          sub_10AF1C((uint64_t)&v173);
LABEL_132:
          if (++v67 == 2)
          {
            uint64_t v89 = 0LL;
            unint64_t v90 = v51;
            do
            {
              __int128 v91 = &buf[v89 * 8];
              uint64_t v92 = (void *)v180[v89];
              if (v92)
              {
                *((void *)v91 + 10) = v92;
                operator delete(v92);
              }

              int v93 = (std::__shared_weak_count *)*((void *)v91 + 8);
              if (v93) {
                std::__shared_weak_count::__release_weak(v93);
              }
              v89 -= 6LL;
            }

            while (v89 != -12);
            uint64_t v94 = v154;
            if (v149)
            {
              int v95 = (unint64_t *)&v149->__shared_owners_;
              do
                unint64_t v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }

            if (*(void *)&v183[16])
            {
              *(void *)&v183[24] = *(void *)&v183[16];
              operator delete(*(void **)&v183[16]);
            }

            AudioObjectPropertySelector v97 = *(std::__shared_weak_count **)&v183[8];
            if (*(void *)&v183[8])
            {
              char v98 = (unint64_t *)(*(void *)&v183[8] + 8LL);
              do
                unint64_t v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }

            memset(v183, 0, sizeof(v183));
            LODWORD(v184) = 1065353216;
            sub_1D3E10((uint64_t *)buf, v156, (uint64_t)__p, (uint64_t)v183);
            sub_10ABFC((uint64_t)v183);
            uint64_t v100 = (os_log_t *)sub_138E8(19);
            uint64_t v101 = *v100;
            if (*v100 && os_log_type_enabled(*v100, OS_LOG_TYPE_DEBUG))
            {
              sub_1D4C48(&v159, (uint64_t)buf);
              uint64_t v102 = (v159.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &v159
                   : (std::string *)v159.__r_.__value_.__r.__words[0];
              *(_DWORD *)uint64_t v183 = 136315650;
              *(void *)&v183[4] = "RoutingHandler.cpp";
              *(_WORD *)&v183[12] = 1024;
              *(_DWORD *)&v183[14] = 413;
              *(_WORD *)&v183[18] = 2080;
              *(void *)&v183[20] = v102;
              _os_log_impl( &dword_0,  v101,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Device description for creating aggregate with auxiliary input: %s",  v183,  0x1Cu);
            }

            AudioObjectPropertySelector v103 = *(unsigned int **)v154;
            sub_105E0C((char **)&v157, *(_DWORD *)(v151 + 8), v154, a6);
            unint64_t v104 = (uint64_t *)operator new(0x358uLL);
            int v174 = *(void **)buf;
            if (*(void *)buf)
            {
              if (((*(uint64_t (**)(void))(**(void **)buf + 312LL))(*(void *)buf) & 0xFF00000000LL) != 0)
              {
                sub_10AA94(v183, (uint64_t *)&v174);
                sub_10AD64((uint64_t *)&v169, (uint64_t)v183, 1LL);
                sub_68314(v183);
                uint64_t v105 = (os_log_t *)sub_138E8(16);
                __int16 v106 = *v105;
                if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v107 = v170;
                  memset(&v173, 0, sizeof(v173));
                  std::string::append(&v173, "{ ", 2uLL);
                  if (v107 != &v169)
                  {
                    while (1)
                    {
                      sub_10ADE8(&v159, (uint64_t)v107[3], (uint64_t)(v107 + 2));
                      if ((v159.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        uint64_t v108 = &v159;
                      }
                      else {
                        uint64_t v108 = (std::string *)v159.__r_.__value_.__r.__words[0];
                      }
                      if ((v159.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        std::string::size_type size = v159.__r_.__value_.__s.__size_;
                      }
                      else {
                        std::string::size_type size = v159.__r_.__value_.__l.__size_;
                      }
                      std::string::append(&v173, (const std::string::value_type *)v108, size);
                      uint64_t v107 = (void **)v107[1];
                      if (v107 == &v169) {
                        break;
                      }
                      std::string::append(&v173, ", ", 2uLL);
                    }
                  }

                  std::string::append(&v173, " }", 2uLL);
                  if ((v173.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    unsigned int v110 = &v173;
                  }
                  else {
                    unsigned int v110 = (std::string *)v173.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)uint64_t v183 = 136315650;
                  *(void *)&v183[4] = "AggregateDevice_AuxInput.h";
                  *(_WORD *)&v183[12] = 1024;
                  *(_DWORD *)&v183[14] = 168;
                  *(_WORD *)&v183[18] = 2080;
                  *(void *)&v183[20] = v110;
                  _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Build topology for auxiliary input aggregate device: %s",  v183,  0x1Cu);
                  uint64_t v94 = v154;
                }

                v183[0] = 0;
                v183[24] = 0;
                LOBYTE(v184) = 0;
                char v186 = 0;
                sub_21C444( v104,  (uint64_t)&v169,  (uint64_t *)buf,  (uint64_t *)buf,  (uint64_t)v103,  (__int128 *)(v94 + 30),  &v157,  (uint64_t)v163,  (__int128 *)v183);
                if (v186 && v185 < 0) {
                  operator delete(v184);
                }
                sub_AB45C((uint64_t *)&v169);
                *unint64_t v104 = (uint64_t)off_470750;
                unint64_t v111 = (os_log_t *)sub_138E8(16);
                uint64_t v112 = *v111;
                if (*v111 && os_log_type_enabled(*v111, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1D4C48(&v159, (uint64_t)buf);
                  unint64_t v113 = (v159.__r_.__value_.__s.__size_ & 0x80u) == 0
                       ? &v159
                       : (std::string *)v159.__r_.__value_.__r.__words[0];
                  *(_DWORD *)uint64_t v183 = 136315650;
                  *(void *)&v183[4] = "AggregateDevice_AuxInput.h";
                  *(_WORD *)&v183[12] = 1024;
                  *(_DWORD *)&v183[14] = 109;
                  *(_WORD *)&v183[18] = 2080;
                  *(void *)&v183[20] = v113;
                  _os_log_impl( &dword_0,  v112,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating AuxInput aggregate with one physical device (%s)",  v183,  0x1Cu);
                }

                v183[0] = 0;
                v183[16] = 0;
                sub_21AF4C(v104, (uint64_t *)buf, 0LL, v103, v94 + 30, (__int128 *)(v94 + 6), (uint64_t)v183);
                uint64_t *v90 = v104;
                *(void *)uint64_t v183 = &v157;
                sub_7A668((void ***)v183);
                sub_85D64(v181);
                sub_85D64(*((void **)&v179 + 1));
                *(void *)uint64_t v183 = &buf[32];
                sub_85DA4((void ***)v183);
                *(void *)uint64_t v183 = &buf[8];
                sub_85DA4((void ***)v183);
                sub_10ACC8((uint64_t)__p);
                sub_32C8C(v163[1]);
                BOOL v114 = (std::__shared_weak_count *)*((void *)&v162 + 1);
                if (*((void *)&v162 + 1))
                {
                  uint64_t v115 = (unint64_t *)(*((void *)&v162 + 1) + 8LL);
                  do
                    unint64_t v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }

                int v38 = v172;
                if (v172)
                {
                  unint64_t v117 = (unint64_t *)&v172->__shared_owners_;
                  do
                    unint64_t v40 = __ldaxr(v117);
                  while (__stlxr(v40 - 1, v117));
                  goto LABEL_40;
                }

                return;
              }

              uint64_t v142 = (os_log_t *)sub_138E8(13);
              AudioObjectID v143 = *v142;
              if (*v142 && os_log_type_enabled(*v142, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v183 = 136315394;
                *(void *)&v183[4] = "AggregateDevice_AuxInput.h";
                *(_WORD *)&v183[12] = 1024;
                *(_DWORD *)&v183[14] = 164;
                _os_log_impl( &dword_0,  v143,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v183,  0x12u);
              }
            }

            else
            {
              __int128 v140 = (os_log_t *)sub_138E8(13);
              int64x2_t v141 = *v140;
              if (*v140 && os_log_type_enabled(*v140, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v183 = 136315394;
                *(void *)&v183[4] = "AggregateDevice_AuxInput.h";
                *(_WORD *)&v183[12] = 1024;
                *(_DWORD *)&v183[14] = 163;
                _os_log_impl( &dword_0,  v141,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v183,  0x12u);
              }
            }

            uint64_t v144 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v144, "Precondition failure.");
          }
        }
      }
    }

    uint64_t v17 = *(void *)v9;
  }

  sub_B8CBC((uint64_t *)&v173, (uint64_t *)(*(void *)(v17 + 24) + 16LL), "", 429);
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(v173.__r_.__value_.__r.__words[0] + 144);
  sub_7A22C((uint64_t)__p, (unsigned int *)buf, 1LL);
  sub_1D3810(buf, (uint64_t)a4, (uint64_t)v173.__r_.__value_.__l.__data_, 0, a5);
  int v37 = *(unsigned int **)v9;
  sub_105E0C(&v159.__r_.__value_.__l.__data_, *(_DWORD *)(a2 + 8), (_DWORD *)v9, a6);
  v183[0] = 0;
  v183[16] = 0;
  *a1 = sub_10A5F4( (uint64_t *)buf,  1,  0,  v37,  v9 + 120,  (__int128 *)(v9 + 24),  (uint64_t)v183,  &v159,  0LL,  (uint64_t)__p,  (__int128 *)(v9 + 176));
  *(void *)uint64_t v183 = &v159;
  sub_7A668((void ***)v183);
  sub_85D64(v181);
  sub_85D64(*((void **)&v179 + 1));
  *(void *)uint64_t v183 = &buf[32];
  sub_85DA4((void ***)v183);
  *(void *)uint64_t v183 = &buf[8];
  sub_85DA4((void ***)v183);
  sub_32C8C((void *)__p[1]);
  int v38 = (std::__shared_weak_count *)v173.__r_.__value_.__l.__size_;
  if (v173.__r_.__value_.__l.__size_)
  {
    uint64_t v39 = (unint64_t *)(v173.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
LABEL_40:
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

void sub_10A0DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t *a61)
{
  a61 = &a33;
  sub_7A668((void ***)&a61);
  sub_10A59C((uint64_t)&a36);
  sub_10A59C(v62 - 208);
  sub_32C8C(a50);
  sub_7A768((uint64_t)&a52);
  sub_7A768((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10A49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0LL;
    do
    {
      sub_85EA4((void *)(a3 + v6), (void *)(a1 + v6));
      v6 += 104LL;
    }

    while (a1 + v6 != a2);
    a3 += v6;
  }

  return a3;
}

void sub_10A52C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    os_signpost_id_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104LL;
        sub_85D10(v4);
      }

      while ((void *)v4 != v2);
      os_signpost_id_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10A59C(uint64_t a1)
{
  int v3 = (void **)(a1 + 32);
  sub_85DA4(&v3);
  int v3 = (void **)(a1 + 8);
  sub_85DA4(&v3);
  return a1;
}

uint64_t *sub_10A5F4( uint64_t *a1, int a2, int a3, unsigned int *a4, uint64_t a5, __int128 *a6, uint64_t a7, void **a8, uint64_t a9, uint64_t a10, __int128 *a11)
{
  *(void *)AudioObjectPropertyAddress buf = *(void *)(a5 + 4);
  sub_2899B8((uint64_t)&__p, (uint64_t *)buf);
  BOOL v19 = (uint64_t *)operator new(0x358uLL);
  uint64_t v45 = *a1;
  if (!v45)
  {
    char v30 = (os_log_t *)sub_138E8(13);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_SingleDevice.h";
      __int16 v47 = 1024;
      int v48 = 123;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inDevice is NULL]: inDevice is NULL.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inDevice is NULL.");
  }

  uint64_t v41 = (uint64_t)&v41;
  uint64_t v42 = &v41;
  uint64_t v43 = 0LL;
  sub_10AA94(buf, &v45);
  sub_10AAF4(&v41, buf);
  uint64_t v34 = a4;
  sub_68314(buf);
  unsigned int v20 = (os_log_t *)sub_138E8(16);
  int v21 = a3;
  unint64_t v22 = *v20;
  if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_SingleDevice.h";
    __int16 v47 = 1024;
    int v48 = 129;
    _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built topology for single aggregate device:", buf, 0x12u);
  }

  uint64_t v23 = *(void *)(v42[3] + 16);
  unsigned int v24 = (os_log_t *)sub_138E8(16);
  uint64_t v25 = *v24;
  if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v33 = a7;
    int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 120LL))(v23);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v23 + 128LL))(v44, v23);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_SingleDevice.h";
    __int16 v47 = 1024;
    int v48 = 135;
    __int16 v49 = 1024;
    int v50 = v26;
    __int16 v51 = 2112;
    uint64_t v52 = v44[0];
    _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d - PhysicalDevice ID %u (uid: %@).", buf, 0x22u);
    sub_19DFC((uint64_t)v44);
    a7 = v33;
  }

  if (a2) {
    int v27 = a1;
  }
  else {
    int v27 = 0LL;
  }
  if (v21) {
    uint64_t v28 = a1;
  }
  else {
    uint64_t v28 = 0LL;
  }
  sub_21AD3C(v19, (uint64_t)&v41, v27, v28, (uint64_t)v34, (__int128 *)a5, a8, a9, a10, (__int128 *)__dst);
  sub_AB45C(&v41);
  *BOOL v19 = (uint64_t)off_47D0C0;
  sub_21AF4C(v19, v27, (std::__shared_weak_count *)v28, v34, (unsigned int *)a5, a6, a7);
  if (v40 && v39 < 0) {
    operator delete(__p);
  }
  if (v37 && v36 < 0) {
    operator delete(__dst[0]);
  }
  return v19;
}

void sub_10A96C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10A9E4()
{
}

void sub_10A9EC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }

  JUMPOUT(0x10A9DCLL);
}

void sub_10AA0C()
{
}

uint64_t sub_10AA14(uint64_t a1)
{
  return a1;
}

uint64_t sub_10AA64(void *a1)
{
  *a1 = off_47D0C0;
  return sub_21ACE8(a1);
}

void sub_10AA74(void *a1)
{
  *a1 = off_47D0C0;
  uint64_t v1 = (void *)sub_21ACE8(a1);
  operator delete(v1);
}

void *sub_10AA94(void *a1, uint64_t *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a2;
  v4[1] = a1;
  void v4[2] = v5;
  *uint64_t v4 = a1;
  *a1 = v4;
  a1[1] = v4;
  a1[2] = 1LL;
  return a1;
}

void sub_10AAE0(_Unwind_Exception *a1)
{
}

uint64_t sub_10AAF4(uint64_t *a1, void *a2)
{
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  void v4[2] = v4 + 2;
  void v4[3] = v4 + 2;
  v4[4] = 0LL;
  uint64_t result = sub_CCA0C((uint64_t)(v4 + 2), v4 + 2, a2);
  uint64_t v6 = *a1;
  *uint64_t v4 = *a1;
  v4[1] = a1;
  *(void *)(v6 + std::iostream::~basic_iostream(v2, v5 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

uint64_t sub_10AB60(void *a1)
{
  *a1 = off_470750;
  return sub_21ACE8(a1);
}

void sub_10AB70(void *a1)
{
  *a1 = off_470750;
  uint64_t v1 = (void *)sub_21ACE8(a1);
  operator delete(v1);
}

void *sub_10AB90(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    uint64_t v5 = (unint64_t *)(a3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  sub_7A5B8(a1 + 2, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_10ABE8(_Unwind_Exception *a1)
{
}

uint64_t sub_10ABFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void *sub_10AC5C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_10AC98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  return sub_7A768(a1);
}

uint64_t sub_10ACC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      sub_10AD24(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_10AD24(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *sub_10AD64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      unint64_t v6 = sub_AB4CC(a2);
      uint64_t v7 = *a1;
      void *v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + std::iostream::~basic_iostream(v2, v5 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 24LL;
      v5 -= 24LL;
    }

    while (v5);
  }

  return a1;
}

void sub_10ADD4(_Unwind_Exception *a1)
{
}

std::string *sub_10ADE8(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      unint64_t v6 = *(os_unfair_lock_s **)(a2 + 16);
      if (v6) {
        sub_23FE8((uint64_t)__p, v6 + 2);
      }
      else {
        sub_7D084(__p, "NULL");
      }
      uint64_t v7 = (v11 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v8 = (v11 & 0x80u) == 0 ? (void *)v11 : __p[1];
      std::string::append(a1, v7, (std::string::size_type)v8);
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_10AEE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_10AF1C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10AD24(v1 + 2);
    }
    operator delete(v1);
  }

void sub_10AF64(void *a1)
{
  uint64_t v1 = sub_7058C(a1);
  operator delete(v1);
}

void sub_10AF78(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + std::iostream::~basic_iostream(v2, v5 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + std::iostream::~basic_iostream(v2, v5 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_85B80(v3 + 17);
        unint64_t v6 = (void *)v3[13];
        if (v6)
        {
          v3[14] = (uint64_t)v6;
          operator delete(v6);
        }

        sub_32C8C((void *)v3[11]);
        operator delete(v3);
        int v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_10B004(uint64_t a1)
{
  uint64_t v1 = (void *)sub_128D54(a1);
  operator delete(v1);
}

void sub_10B018(uint64_t a1@<X0>, unsigned int ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_138E8(8);
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
  {
    unint64_t v6 = *(os_log_s **)v5;
    if (*(void *)v5)
    {
      if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v115 = a2;
        uint64_t v112 = *(void *)(a1 + 392);
        memset(&v116, 0, sizeof(v116));
        std::string::append(&v116, "{ ", 2uLL);
        if ((v116.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = v116.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = v116.__r_.__value_.__l.__size_;
        }
        uint64_t v8 = *(void **)(a1 + 400);
        unint64_t v9 = (void *)(a1 + 408);
        if (v8 != (void *)(a1 + 408))
        {
          do
          {
            std::string::size_type v10 = size;
            if (*((_DWORD *)v8 + 7) != 1986291046)
            {
              else {
                std::string::size_type v10 = v116.__r_.__value_.__s.__size_;
              }
            }

            unsigned __int8 v11 = (void *)v8[1];
            int v12 = v8;
            if (v11)
            {
              do
              {
                uint64_t v13 = v11;
                unsigned __int8 v11 = (void *)*v11;
              }

              while (v11);
            }

            else
            {
              do
              {
                uint64_t v13 = (void *)v12[2];
                BOOL v14 = *v13 == (void)v12;
                int v12 = v13;
              }

              while (!v14);
            }

            sub_33464(&v118, (unsigned int *)v8 + 7);
            uint64_t v15 = std::string::append(&v118, "; ", 2uLL);
            __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            v119.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v16;
            v15->__r_.__value_.__l.__size_ = 0LL;
            v15->__r_.__value_.__l.__cap_ = 0LL;
            v15->__r_.__value_.__r.__words[0] = 0LL;
            sub_2DB8A4(&__p, (uint64_t)v8 + 36);
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t p_p = &__p;
            }
            else {
              uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v18 = __p.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
            }
            BOOL v19 = std::string::append(&v119, (const std::string::value_type *)p_p, v18);
            __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v120.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v20;
            v19->__r_.__value_.__l.__size_ = 0LL;
            v19->__r_.__value_.__l.__cap_ = 0LL;
            v19->__r_.__value_.__r.__words[0] = 0LL;
            if (v13 == v9) {
              int v21 = " ]";
            }
            else {
              int v21 = " ], ";
            }
            if (v13 == v9) {
              std::string::size_type v22 = 2LL;
            }
            else {
              std::string::size_type v22 = 4LL;
            }
            uint64_t v23 = std::string::append(&v120, v21, v22);
            __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            *(void *)&uint8_t buf[4] = v23->__r_.__value_.__l.__cap_;
            *(_OWORD *)AudioObjectPropertyAddress buf = v24;
            v23->__r_.__value_.__l.__size_ = 0LL;
            v23->__r_.__value_.__l.__cap_ = 0LL;
            v23->__r_.__value_.__r.__words[0] = 0LL;
            if (buf[5] >= 0) {
              uint64_t v25 = (const std::string::value_type *)buf;
            }
            else {
              uint64_t v25 = *(const std::string::value_type **)buf;
            }
            if (buf[5] >= 0) {
              std::string::size_type v26 = HIBYTE(buf[5]);
            }
            else {
              std::string::size_type v26 = *(void *)&buf[2];
            }
            std::string::insert(&v116, v10, v25, v26);
            if (SHIBYTE(buf[5]) < 0) {
              operator delete(*(void **)buf);
            }
            uint64_t v8 = v13;
          }

          while (v13 != v9);
        }

        std::string::append(&v116, " }", 2uLL);
        if ((v116.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v27 = &v116;
        }
        else {
          int v27 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        int v28 = *(_DWORD *)(a1 + 424);
        buf[0] = 136316162;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1678;
        HIWORD(buf[4]) = 2048;
        *(void *)&buf[5] = v112;
        __int16 v122 = 2080;
        unint64_t v123 = v27;
        __int16 v124 = 1024;
        int v125 = v28;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Command data: mOwner %p, VAD Context attributes: %s, mReason %u",  (uint8_t *)buf,  0x2Cu);
        a2 = v115;
      }
    }
  }

  char v29 = (os_log_t *)sub_138E8(8);
  char v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEBUG))
  {
    sub_2DA6D0(&v120, a2);
    uint64_t v31 = (v120.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v120 : (std::string *)v120.__r_.__value_.__r.__words[0];
    buf[0] = 136315650;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1680;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v31;
    _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to activate with concrete route(s): %s",  (uint8_t *)buf,  0x1Cu);
  }

  sub_10BDD4( a3,  *(void *)(a1 + 392),  (__n128 ***)a2,  a1 + 400,  (void **)(a1 + 24),  (void *)(a1 + 48),  (void **)(a1 + 96),  *(_DWORD *)(a1 + 120),  (void *)(a1 + 128),  a1 + 152,  a1 + 192,  *(_BYTE *)(a1 + 360),  (uint64_t *)(a1 + 368),  *(_DWORD *)(a1 + 424),  (__int128 *)(a1 + 432),  (uint64_t *)(a1 + 464));
  if (*(_DWORD *)(a3 + 8)) {
    goto LABEL_155;
  }
  uint64_t v32 = sub_138E8(8);
  uint64_t v33 = sub_138E8(34);
  char v34 = 0;
  uint64_t v35 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v36 = *(void *)(v32 + 8);
  while (1)
  {
    uint64_t v37 = (int)buf[v35];
    char v38 = v34;
    if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
      break;
    }
    char v34 = 1;
    uint64_t v35 = 1LL;
    if ((v38 & 1) != 0) {
      goto LABEL_65;
    }
  }

  if ((v36 & v37) == 0) {
    uint64_t v32 = v33;
  }
LABEL_65:
  char v39 = *(os_log_s **)v32;
  if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1685;
    _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully activated new concrete route.",  (uint8_t *)buf,  0x12u);
  }

  if (*(_DWORD *)(a3 + 8)) {
    goto LABEL_155;
  }
  uint64_t v40 = *(void *)(a1 + 392);
  if (*(void *)(v40 + 472)) {
    goto LABEL_80;
  }
  uint64_t v41 = sub_138E8(8);
  uint64_t v42 = sub_138E8(34);
  char v43 = 0;
  uint64_t v44 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v45 = *(void *)(v41 + 8);
  while (1)
  {
    uint64_t v46 = (int)buf[v44];
    char v47 = v43;
    if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
      break;
    }
    char v43 = 1;
    uint64_t v44 = 1LL;
    if ((v47 & 1) != 0) {
      goto LABEL_76;
    }
  }

  if ((v45 & v46) == 0) {
    uint64_t v41 = v42;
  }
LABEL_76:
  int v48 = *(os_log_s **)v41;
  if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "RouteCache.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 576;
    _os_log_impl(&dword_0, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Empty Route Cache", (uint8_t *)buf, 0x12u);
  }

  if (*(void *)(v40 + 472))
  {
LABEL_80:
    uint64_t v49 = sub_138E8(8);
    uint64_t v50 = sub_138E8(34);
    char v51 = 0;
    uint64_t v52 = 0LL;
    uint64_t v113 = v40 + 456;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v53 = *(void *)(v49 + 8);
    while (1)
    {
      uint64_t v54 = (int)buf[v52];
      char v55 = v51;
      if (((v53 & v54) != 0) != ((*(void *)(v50 + 8) & v54) != 0)) {
        break;
      }
      char v51 = 1;
      uint64_t v52 = 1LL;
      if ((v55 & 1) != 0) {
        goto LABEL_86;
      }
    }

    if ((v53 & v54) == 0) {
      uint64_t v49 = v50;
    }
LABEL_86:
    __int16 v56 = *(os_log_s **)v49;
    if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RouteCache.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 579;
      _os_log_impl(&dword_0, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route Cache:", (uint8_t *)buf, 0x12u);
    }

    for (uint64_t i = *(void *)(v40 + 464); i != v113; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v58 = sub_138E8(8);
      uint64_t v59 = sub_138E8(34);
      char v60 = 0;
      uint64_t v61 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v62 = *(void *)(v58 + 8);
      while (1)
      {
        uint64_t v63 = (int)buf[v61];
        char v64 = v60;
        if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
          break;
        }
        char v60 = 1;
        uint64_t v61 = 1LL;
        if ((v64 & 1) != 0) {
          goto LABEL_96;
        }
      }

      if ((v62 & v63) == 0) {
        uint64_t v58 = v59;
      }
LABEL_96:
      unint64_t v65 = *(os_log_s **)v58;
      if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        sub_33464(&v120, (unsigned int *)(i + 16));
        char v66 = &v120;
        if ((v120.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          char v66 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RouteCache.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 461;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v66;
        _os_log_impl(&dword_0, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d DeviceType: %s.", (uint8_t *)buf, 0x1Cu);
      }

      uint64_t v67 = sub_138E8(8);
      uint64_t v68 = sub_138E8(34);
      char v69 = 0;
      uint64_t v70 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v71 = *(void *)(v67 + 8);
      while (1)
      {
        uint64_t v72 = (int)buf[v70];
        char v73 = v69;
        if (((v71 & v72) != 0) != ((*(void *)(v68 + 8) & v72) != 0)) {
          break;
        }
        char v69 = 1;
        uint64_t v70 = 1LL;
        if ((v73 & 1) != 0) {
          goto LABEL_108;
        }
      }

      if ((v71 & v72) == 0) {
        uint64_t v67 = v68;
      }
LABEL_108:
      uint64_t v74 = *(os_log_s **)v67;
      if (v74 && os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA930(&v120, (void *)(i + 48));
        unsigned int v75 = &v120;
        if ((v120.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unsigned int v75 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RouteCache.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 462;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v75;
        _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Source physical devices: %s.",  (uint8_t *)buf,  0x1Cu);
      }

      uint64_t v76 = sub_138E8(8);
      uint64_t v77 = sub_138E8(34);
      char v78 = 0;
      uint64_t v79 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v80 = *(void *)(v76 + 8);
      while (1)
      {
        uint64_t v81 = (int)buf[v79];
        char v82 = v78;
        if (((v80 & v81) != 0) != ((*(void *)(v77 + 8) & v81) != 0)) {
          break;
        }
        char v78 = 1;
        uint64_t v79 = 1LL;
        if ((v82 & 1) != 0) {
          goto LABEL_120;
        }
      }

      if ((v80 & v81) == 0) {
        uint64_t v76 = v77;
      }
LABEL_120:
      unint64_t v83 = *(os_log_s **)v76;
      if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA930(&v120, (void *)(i + 72));
        unint64_t v84 = &v120;
        if ((v120.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unint64_t v84 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RouteCache.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 463;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v84;
        _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Destination physical devices: %s.",  (uint8_t *)buf,  0x1Cu);
      }

      if (*(_BYTE *)(i + 128))
      {
        uint64_t v85 = sub_138E8(8);
        uint64_t v86 = sub_138E8(34);
        char v87 = 0;
        uint64_t v88 = 0LL;
        uint64_t v89 = (void *)(i + 104);
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v90 = *(void *)(v85 + 8);
        while (1)
        {
          uint64_t v91 = (int)buf[v88];
          char v92 = v87;
          if (((v90 & v91) != 0) != ((*(void *)(v86 + 8) & v91) != 0)) {
            break;
          }
          char v87 = 1;
          uint64_t v88 = 1LL;
          if ((v92 & 1) != 0) {
            goto LABEL_133;
          }
        }

        if ((v90 & v91) == 0) {
          uint64_t v85 = v86;
        }
LABEL_133:
        int v93 = *(os_log_s **)v85;
        if (v93 && os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "RouteCache.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 464;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v89;
          _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Aggregate device clock device: %s",  (uint8_t *)buf,  0x1Cu);
        }
      }

      for (uint64_t j = *(void *)(i + 32); j != i + 24; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v95 = sub_138E8(8);
        uint64_t v96 = sub_138E8(34);
        char v97 = 0;
        uint64_t v98 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v99 = *(void *)(v95 + 8);
        while (1)
        {
          uint64_t v100 = (int)buf[v98];
          char v101 = v97;
          if (((v99 & v100) != 0) != ((*(void *)(v96 + 8) & v100) != 0)) {
            break;
          }
          char v97 = 1;
          uint64_t v98 = 1LL;
          if ((v101 & 1) != 0) {
            goto LABEL_146;
          }
        }

        if ((v99 & v100) == 0) {
          uint64_t v95 = v96;
        }
LABEL_146:
        uint64_t v102 = *(os_log_s **)v95;
        if (v102 && os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
        {
          sub_DB594(&v120, (unsigned __int8 *)(j + 16));
          AudioObjectPropertySelector v103 = &v120;
          if ((v120.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            AudioObjectPropertySelector v103 = (std::string *)v120.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "RouteCache.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 396;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v103;
          _os_log_impl(&dword_0, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", (uint8_t *)buf, 0x1Cu);
        }
      }
    }
  }

  if (*(_DWORD *)(a3 + 8))
  {
LABEL_155:
    uint64_t v104 = sub_138E8(8);
    uint64_t v105 = sub_138E8(34);
    char v106 = 0;
    uint64_t v107 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v108 = *(void *)(v104 + 8);
    while (1)
    {
      uint64_t v109 = (int)buf[v107];
      char v110 = v106;
      if (((v108 & v109) != 0) != ((*(void *)(v105 + 8) & v109) != 0)) {
        break;
      }
      char v106 = 1;
      uint64_t v107 = 1LL;
      if ((v110 & 1) != 0) {
        goto LABEL_161;
      }
    }

    if ((v108 & v109) == 0) {
      uint64_t v104 = v105;
    }
LABEL_161:
    unint64_t v111 = *(os_log_s **)v104;
    if (*(void *)v104 && os_log_type_enabled(*(os_log_t *)v104, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1691;
      _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to activate a route list for which all ports were connected! Attempting additional route lists",  (uint8_t *)buf,  0x12u);
    }
  }

void sub_10BCCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10BD8C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v5 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  strcpy((char *)(a1 + 24), "cwdv");
  *(_BYTE *)(a1 + sub_7A768(v2 - 32) = 0;
  *(_DWORD *)(a1 + 40) = 3;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v5 + 8) = a1 + 56;
  *(_DWORD *)(a1 + 72) = 44739242;
  *(void *)(a1 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = 0LL;
}

void sub_10BDD4( uint64_t a1, uint64_t a2, __n128 ***a3, uint64_t a4, void **a5, void *a6, void **a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t *a13, unsigned int a14, __int128 *a15, uint64_t *a16)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    v452 = (os_log_t *)sub_138E8(13);
    v453 = *v452;
    if (*v452 && os_log_type_enabled(*v452, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2831;
      _os_log_impl( &dword_0,  v453,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int64x2_t v514 = 0uLL;
  unint64_t v515 = 0LL;
  int v21 = *a3;
  std::string::size_type v22 = a3[1];
  if (*a3 == v22)
  {
    unint64_t v23 = 0LL;
  }

  else
  {
    unint64_t v23 = 0LL;
    do
    {
      __int128 v24 = *v21;
      if (v23 >= v515)
      {
        unint64_t v23 = sub_110A78(&v514, *v21);
      }

      else
      {
        unint64_t v25 = v24->n128_u64[0];
        *(_DWORD *)(v23 + std::iostream::~basic_iostream(v2, v5 + 8) = v24->n128_u32[2];
        *(void *)unint64_t v23 = v25;
        sub_719C8((__n128 **)(v23 + 16), v24 + 1);
        *(void *)(v23 + 40) = v24[2].n128_u64[1];
        v23 += 48LL;
      }

      v514.i64[1] = v23;
      ++v21;
    }

    while (v21 != v22);
  }

  std::string::size_type v26 = (uint64_t **)(a4 + 8);
  if (a4 + 8 == sub_71A5C(a4, 0x76646566u, 0))
  {
    v455 = (os_log_t *)sub_138E8(13);
    v456 = *v455;
    if (*v455 && os_log_type_enabled(*v455, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2839;
      _os_log_impl( &dword_0,  v456,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
    }

    v457 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v457, "Precondition failure.");
  }

  int v27 = *v26;
  if (!*v26) {
LABEL_19:
  }
    sub_8F9A4("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unsigned int v28 = *((_DWORD *)v27 + 7);
      BOOL v29 = *((_DWORD *)v27 + 8) != 0;
      if (v28 != 1986291046) {
        BOOL v29 = v28 > 0x76646566;
      }
      if (!v29) {
        break;
      }
      int v27 = (uint64_t *)*v27;
      if (!v27) {
        goto LABEL_19;
      }
    }

    if (v28 >= 0x76646566) {
      break;
    }
    int v27 = (uint64_t *)v27[1];
    if (!v27) {
      goto LABEL_19;
    }
  }

  unint64_t v30 = *(uint64_t *)((char *)v27 + 36);
  v476 = (unsigned int *)v27 + 9;
  uint64_t v31 = *(void *)(*(void *)a2 + 8LL);
  v473 = a6;
  v474 = a7;
  int v472 = a8;
  if (v31)
  {
    uint64_t v32 = *(void *)a2 + 8LL;
    do
    {
      unsigned int v33 = *(_DWORD *)(v31 + 32);
      BOOL v34 = v33 >= v30;
      else {
        uint64_t v35 = (uint64_t *)(v31 + 8);
      }
      if (v34) {
        uint64_t v32 = v31;
      }
      uint64_t v31 = *v35;
    }

    while (*v35);
    if (v32 != *(void *)a2 + 8LL && *(_DWORD *)(v32 + 32) <= v30)
    {
      unsigned __int16 v36 = sub_2D4AF4(v32 + 80, HIDWORD(v30));
      BOOL v37 = v36 >= 0x100u && v36 == 0;
      if (v37)
      {
        uint64_t v513 = 0LL;
        v512 = 0LL;
        v511 = (uint64_t *)&v512;
        goto LABEL_59;
      }

      unint64_t v23 = v514.u64[1];
    }
  }

  uint64_t v513 = 0LL;
  v512 = 0LL;
  v511 = (uint64_t *)&v512;
  for (uint64_t i = v514.i64[0]; i != v23; i += 48LL)
  {
    for (uint64_t j = *(void **)(i + 24); j != (void *)(i + 16); uint64_t j = (void *)j[1])
    {
      sub_B8CBC((uint64_t *)v532, j + 2, "", 941);
      if ((*(_WORD *)(*(void *)v532 + 184LL) & 1) != 0
        && (*(void *)(*(void *)v532 + 128LL) & 0xFF00000000LL) != 0)
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = *(void *)(*(void *)v532 + 128LL);
        sub_852D0(__p, (__int32 *)buf, 1LL);
        sub_110C60(&v511, *(uint64_t *)v532, *(uint64_t *)&v532[8], (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }

      sub_B8CBC((uint64_t *)buf, j + 4, "", 953);
      if ((*(_WORD *)(*(void *)buf + 184LL) & 1) == 0 && (*(void *)(*(void *)buf + 128LL) & 0xFF00000000LL) != 0)
      {
        LODWORD(v502) = *(void *)(*(void *)buf + 128LL);
        sub_852D0(__p, (__int32 *)&v502, 1LL);
        sub_110C60(&v511, *(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }

      uint64_t v40 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v41 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      char v43 = *(std::__shared_weak_count **)&v532[8];
      if (*(void *)&v532[8])
      {
        uint64_t v44 = (unint64_t *)(*(void *)&v532[8] + 8LL);
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
  }

LABEL_145:
      char v97 = std::__shared_weak_count::lock(v89);
      if (!v97) {
        goto LABEL_152;
      }
      uint64_t v98 = v97;
      BOOL v99 = v96 == v90;
      uint64_t v100 = (unint64_t *)&v97->__shared_owners_;
      do
        unint64_t v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v98);
      }

      if (!v95)
      {
LABEL_156:
        if (!v89) {
          goto LABEL_158;
        }
LABEL_157:
        std::__shared_weak_count::__release_weak(v89);
        goto LABEL_158;
      }

    uint64_t v95 = IAPAudioUnregisterDeviceStateChangedCallback();
    uint64_t v96 = (os_log_t *)sub_138E8(11);
    char v97 = *v96;
    if (*v96 && os_log_type_enabled(*v96, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315650;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"IAPManager.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 199;
      buf[1].n128_u16[1] = 1024;
      buf[1].n128_u32[1] = v95;
      _os_log_impl( &dword_0,  v97,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d IAPAudioUnregisterDeviceStateChangedCallback() returned %u.",  (uint8_t *)buf,  0x18u);
    }

    uint64_t v98 = IAPAudioUnregisterVolumeControlSupportChangedCallback();
    BOOL v99 = (os_log_t *)sub_138E8(11);
    uint64_t v100 = *v99;
    if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315650;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"IAPManager.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 201;
      buf[1].n128_u16[1] = 1024;
      buf[1].n128_u32[1] = v98;
      _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d IAPAudioUnregisterVolumeControlSupportChangedCallback() returned %u.",  (uint8_t *)buf,  0x18u);
    }

    if (*((void *)v85 + 19))
    {
      unint64_t v101 = (os_log_t *)sub_138E8(11);
      uint64_t v102 = *v101;
      if (*v101)
      {
        if (os_log_type_enabled(*v101, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"IAPManager.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 203;
          _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d mPortConnectionListenerMap is not empty on destruction.",  (uint8_t *)buf,  0x12u);
        }
      }
    }

    unint64_t v103 = sub_138E8(11);
    uint64_t v104 = sub_138E8(6);
    uint64_t v105 = 0;
    char v106 = 0LL;
    buf[0].n128_u64[0] = 0x100000002LL;
    uint64_t v107 = *(void *)(v103 + 8);
    while (1)
    {
      uint64_t v108 = buf[0].n128_i32[v106];
      unint64_t v109 = v105;
      if (((v107 & v108) != 0) != ((*(void *)(v104 + 8) & v108) != 0)) {
        break;
      }
      uint64_t v105 = 1;
      char v106 = 1LL;
      if ((v109 & 1) != 0)
      {
        if ((v107 & 1) == 0) {
          goto LABEL_166;
        }
        goto LABEL_163;
      }
    }

    if ((v107 & v108) == 0) {
      unint64_t v103 = v104;
    }
    if ((*(void *)(v103 + 8) & 1) != 0)
    {
LABEL_163:
      char v110 = *(os_log_s **)v103;
      if (v110 && os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
      {
        buf[0].n128_u32[0] = 136315650;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"IAPManager.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 205;
        buf[1].n128_u16[1] = 2048;
        *(unint64_t *)((char *)buf[1].n128_u64 + 4) = (unint64_t)v85;
        _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - IAPManager[%p]::~IAPManager()",  (uint8_t *)buf,  0x1Cu);
      }
    }

LABEL_170:
  sub_1BB88((uint64_t *)v569);
  std::string::size_type v26 = (uint64_t **)(a4 + 8);
  uint64_t v59 = v492;
  __int128 v16 = (uint8_t *)&v503;
LABEL_171:
  sub_73454((uint64_t *)&v503);
  (*(void (**)(void *))(*v59 + 8LL))(v59);
  sub_85B80((uint64_t *)&__dst);
LABEL_172:
  v483 = 0LL;
  uint64_t v479 = 0LL;
LABEL_173:
  unint64_t v500 = 0LL;
  unint64_t v501 = 0LL;
  v499 = 0LL;
  if (*(_BYTE *)(a2 + 452))
  {
    uint64_t v104 = (os_log_t *)sub_138E8(8);
    uint64_t v105 = *v104;
    if (*v104)
    {
      if (os_log_type_enabled(*v104, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v532, *(unsigned int *)(a2 + 448));
        char v106 = v532[23] >= 0 ? v532 : *(_BYTE **)v532;
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 3362;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v106;
        _os_log_impl( &dword_0,  v105,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Route processing info will use device activation override of %s",  (uint8_t *)__p,  0x1Cu);
        if ((v532[23] & 0x80000000) != 0) {
          operator delete(*(void **)v532);
        }
      }
    }
  }

  uint64_t v481 = v514.i64[1];
  uint64_t v107 = v514.i64[0];
  if (v483)
  {
    uint64_t v108 = (unint64_t *)&v483->__shared_weak_owners_;
    do
      unint64_t v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }

  if (v107 != v481)
  {
    char v110 = (unint64_t *)&v483->__shared_weak_owners_;
    while (1)
    {
      uint64_t v111 = sub_71A5C(a4, *(_DWORD *)v107, *(_DWORD *)(v107 + 4));
      if (v26 == (uint64_t **)v111)
      {
        v436 = (os_log_t *)sub_138E8(13);
        v437 = *v436;
        if (*v436 && os_log_type_enabled(*v436, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 3379;
          _os_log_impl( &dword_0,  v437,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

    unint64_t v71 = a2;
    goto LABEL_233;
  }

      BOOL v117 = (os_log_t *)sub_138E8(24);
      std::string v118 = *v117;
      if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v637 = 136315394;
        *(void *)&v637[4] = "DSPGraphChain_HAL_SpeakerProtection.cpp";
        *(_WORD *)&v637[12] = 1024;
        *(_DWORD *)&v637[14] = 51;
        _os_log_impl( &dword_0,  v118,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Reconfiguring speaker protection DSP - DSPChainConfig changed",  v637,  0x12u);
      }

      uint64_t v119 = *(void *)v583;
      if (!*(_BYTE *)(*(void *)v583 + 168LL)) {
        *(_BYTE *)(v119 + 16std::iostream::~basic_iostream(v2, v5 + 8) = 1;
      }
      *(void *)(v119 + 160) = v103;
      std::string v120 = (os_log_t *)sub_138E8(24);
      std::string::size_type v121 = *v120;
      __int16 v122 = v582;
      if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CF0E8(&v627[0].__pn_, (uint64_t)v582);
        unint64_t v123 = (char)v627[0].__pn_.__r_.__value_.__s.__size_;
        uint64_t v124 = v627[0].__pn_.__r_.__value_.__r.__words[0];
        sub_2CA1C(&v633, v585);
        int v125 = v627;
        if (v123 < 0) {
          int v125 = (std::__fs::filesystem::path *)v124;
        }
        if ((v633.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v126 = &v633;
        }
        else {
          unint64_t v126 = (std::string *)v633.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v637 = 136315906;
        *(void *)&v637[4] = "SpeakerProtection_HAL_Interface.cpp";
        *(_WORD *)&v637[12] = 1024;
        *(_DWORD *)&v637[14] = 106;
        *(_WORD *)&v637[18] = 2080;
        *(void *)&v637[20] = v125;
        *(_WORD *)&v637[28] = 2080;
        *(void *)&v637[30] = v126;
        _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Reconfiguring Speaker Protection HAL : %s, chain type: %s",  v637,  0x26u);
        __int16 v122 = v582;
      }

      if ((_DWORD)v585 == 1668049011)
      {
        char v127 = operator new(4uLL);
        v627[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
        os_log_s *v127 = 0;
        v627[0].__pn_.__r_.__value_.__l.__cap_ = (std::string::size_type)(v127 + 1);
        v627[0].__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)(v127 + 1);
        __int16 v122 = v582;
      }

      else
      {
        memset(v627, 0, 24);
      }

      sub_D03C0(&v633, *v122, v122[1]);
      uint64_t v128 = sub_D0268(*v122, v122[1]);
      sub_D0B40(&v629, v128, 1635087216LL);
      uint64_t v129 = sub_D0268(*v122, v122[1]);
      sub_D0B40(&v612, v129, 1886548848LL);
      sub_2C247C((uint64_t)v637, *(void *)(v119 + 16), v585);
      sub_7A960( v119,  (uint64_t)v627,  (const void **)&v633.__r_.__value_.__l.__data_,  (const void **)&v629.__r_.__value_.__l.__data_,  (const void **)&v612,  (uint64_t)v637);
      sub_7A7C0(*(void **)&v637[16]);
      uint64_t v130 = *(void **)v637;
      *(void *)v637 = 0LL;
      if (v130) {
        operator delete(v130);
      }
      if ((void)v612) {
        CFRelease((CFTypeRef)v612);
      }
      if (v629.__r_.__value_.__r.__words[0]) {
        CFRelease(v629.__r_.__value_.__l.__data_);
      }
      if (v633.__r_.__value_.__r.__words[0]) {
        CFRelease(v633.__r_.__value_.__l.__data_);
      }
      sub_D0C88((CFArrayRef *)v637, v122);
      __int16 v131 = *(const void **)(v119 + 72);
      uint64_t v132 = *(const void **)v637;
      *(void *)(v119 + 72) = *(void *)v637;
      if (v132) {
        CFRetain(v132);
      }
      if (v131) {
        CFRelease(v131);
      }
      if (v132) {
        CFRelease(v132);
      }
      sub_7AC78(v119);
      if (v627[0].__pn_.__r_.__value_.__r.__words[0])
      {
        v627[0].__pn_.__r_.__value_.__l.__size_ = v627[0].__pn_.__r_.__value_.__r.__words[0];
        operator delete(v627[0].__pn_.__r_.__value_.__l.__data_);
      }

      goto LABEL_205;
    }

    char v39 = (std::__shared_weak_count_vtbl *)operator new(0x488uLL);
    sub_818B8((uint64_t)v39, (__int128 *)&v599);
    v39->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_46E958;
    uint64_t v40 = (os_log_t *)sub_138E8(24);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v42 = &v599;
      if ((v599.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v42 = (std::string *)v599.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)v637 = 136315650;
      *(void *)&v637[4] = "DSPGraphChain_SpeakerProtection.cpp";
      *(_WORD *)&v637[12] = 1024;
      *(_DWORD *)&v637[14] = 85;
      *(_WORD *)&v637[18] = 2080;
      *(void *)&v637[20] = v42;
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating DSPGraph chain %s", v637, 0x1Cu);
    }

    unsigned int v28 = (std::__shared_weak_count *)operator new(0x20uLL);
    v28->__shared_owners_ = 0LL;
    char v43 = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_46D428;
    v28->__shared_weak_owners_ = 0LL;
    v28[1].__vftable = v39;
    *(void *)&unint64_t v30 = v39;
    *((void *)&v30 + 1) = v28;
    on_zero_shared = (std::__shared_weak_count *)v39->__on_zero_shared;
    if (on_zero_shared)
    {
      if (on_zero_shared->__shared_owners_ != -1) {
        goto LABEL_219;
      }
      do
        unint64_t v45 = __ldxr(v43);
      while (__stxr(v45 + 1, v43));
      v585 = v30;
      uint64_t v46 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        uint64_t v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v39->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
      v39->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v28;
      std::__shared_weak_count::__release_weak(on_zero_shared);
      unint64_t v30 = v585;
    }

    else
    {
      do
        unsigned int v48 = __ldxr(v43);
      while (__stxr(v48 + 1, v43));
      uint64_t v49 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        uint64_t v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      v39->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
      v39->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v28;
    }

    do
      char v38 = __ldaxr(v43);
    while (__stlxr(v38 - 1, v43));
LABEL_217:
    if (!v38)
    {
      int64x2_t v141 = v28->__on_zero_shared;
      v585 = v30;
      ((void (*)(std::__shared_weak_count *))v141)(v28);
      std::__shared_weak_count::__release_weak(v28);
      unint64_t v30 = v585;
    }

    goto LABEL_219;
  }

  sub_19628C(v573, (uint64_t)&v599, *(unsigned int *)(v559 + 48), a2);
LABEL_220:
  sub_654FC();
  LOBYTE(v596[0]) = 0;
  v598 = 0;
  v595 = 0LL;
  int v143 = *(void ****)v559;
  v562 = *(void ****)(v559 + 8);
  if (v143 == v562)
  {
    *(void *)&v585 = 0LL;
    v456 = *v573;
    if (*v573) {
      goto LABEL_902;
    }
    goto LABEL_941;
  }

  *(void *)&v585 = 0LL;
  BOOL v144 = 0LL;
  char v558 = 0;
  v572 = (int *)&v637[16];
  v582 = 0LL;
  *(void *)&v583 = &v627[0].__pn_.__r_.__value_.__l.__cap_;
  v578 = (int *)&v633.__r_.__value_.__r.__words[2];
  v576 = &v639;
  p_std::string::size_type size = &v629.__r_.__value_.__l.__size_;
  char v554 = (std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 2);
  char v568 = &v627[0].__pn_.__r_.__value_.__l.__size_;
  uint64_t v552 = &v637[32];
  __int128 v551 = v640;
  v550 = v643;
  v549 = v644;
  v548 = v646;
  v547 = v647;
  char v555 = (const void **)&v606;
  char v567 = v559 + 80;
  *(void *)&unint64_t v142 = 136315650LL;
  char v565 = v142;
  *(void *)&unint64_t v142 = 136315394LL;
  v569 = v142;
  *(void *)&unint64_t v142 = 136316162LL;
  v574 = v142;
  *(void *)&unint64_t v142 = 136315906LL;
  v561 = v142;
  __int128 v563 = &v602;
  do
  {
    __int16 v570 = v143;
    v579 = **v143;
    uint64_t v145 = sub_D01B4(v579, 1685090932);
    if (!v145)
    {
      v524 = (os_log_t *)sub_138E8(13);
      uint64_t v525 = *v524;
      if (*v524 && os_log_type_enabled(*v524, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v637 = v569;
        *(void *)&v637[4] = "RouteUtilities.cpp";
        *(_WORD *)&v637[12] = 1024;
        *(_DWORD *)&v637[14] = 483;
        _os_log_impl( &dword_0,  v525,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Routing database error: Unable to locate kDSP_Processor_Type withi n a DSP processor map entry.",  v637,  0x12u);
      }

      v526 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v526,  "Routing database error: Unable to locate kDSP_Processor_Type within a DSP processor map entry.");
    }

    v580 = sub_2DCA7C((int *)v145 + 6);
    unint64_t v146 = sub_138E8(24);
    if ((*(_BYTE *)(v146 + 8) & 1) != 0)
    {
      int v147 = *(os_log_s **)v146;
      if (*(void *)v146)
      {
        if (os_log_type_enabled(*(os_log_t *)v146, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v627, v580);
          uint64_t v148 = v627;
          if ((v627[0].__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v148 = (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v637 = v565;
          *(void *)&v637[4] = "RouteUtilities.cpp";
          *(_WORD *)&v637[12] = 1024;
          *(_DWORD *)&v637[14] = 486;
          *(_WORD *)&v637[18] = 2080;
          *(void *)&v637[20] = v148;
          _os_log_impl(&dword_0, v147, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found DSP Processor type %s", v637, 0x1Cu);
        }
      }
    }

    uint64_t v149 = sub_D01B4(v579, 1701736511);
    if (v149) {
      __int128 v150 = sub_2DCA7C((int *)v149 + 6) != 0;
    }
    else {
      __int128 v150 = 0LL;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, void, BOOL))(qword_4913D0 + 40))( &v593,  &qword_4913D0,  v580,  v150);
    if (!v593)
    {
      char v521 = (os_log_t *)sub_138E8(13);
      __int16 v522 = *v521;
      if (*v521 && os_log_type_enabled(*v521, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v637 = v569;
        *(void *)&v637[4] = "RouteUtilities.cpp";
        *(_WORD *)&v637[12] = 1024;
        *(_DWORD *)&v637[14] = 493;
        _os_log_impl( &dword_0,  v522,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [inst.get() is NULL]: Unable to instantiate DSPProcessor.",  v637,  0x12u);
      }

      char v523 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v523, "Unable to instantiate DSPProcessor.");
    }

    uint64_t v151 = (os_log_t *)sub_138E8(24);
    BOOL v152 = *v151;
    if (*v151 && os_log_type_enabled(*v151, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)v593 + 152LL))(v593);
      sub_2CA1C(v627, v153);
      uint64_t v154 = (char)v627[0].__pn_.__r_.__value_.__s.__size_;
      unint64_t v155 = v627[0].__pn_.__r_.__value_.__r.__words[0];
      uint64_t v156 = (*(uint64_t (**)(uint64_t))(*(void *)v593 + 144LL))(v593);
      uint64_t v157 = *v573;
      uint64_t v158 = v627;
      if (v154 < 0) {
        uint64_t v158 = (std::__fs::filesystem::path *)v155;
      }
      *(_DWORD *)v637 = v574;
      *(void *)&v637[4] = "RouteUtilities.cpp";
      *(_WORD *)&v637[12] = 1024;
      *(_DWORD *)&v637[14] = 494;
      *(_WORD *)&v637[18] = 2080;
      *(void *)&v637[20] = v158;
      *(_WORD *)&v637[28] = 1024;
      *(_DWORD *)&v637[30] = v156;
      *(_WORD *)&v637[34] = 2048;
      *(void *)&v637[36] = v157;
      _os_log_impl( &dword_0,  v152,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Instantiated DSP Processor type '%s', instanceID: %u dspchain: %p",  v637,  0x2Cu);
    }

    unint64_t v159 = sub_D01B4(v579, 1685091188);
    if (v159)
    {
      uint64_t v160 = sub_2DC980((int *)v159 + 6);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v593 + 88LL))(v593, v160);
    }

    uint64_t v161 = sub_D01B4(v579, 1685090928);
    if (v161)
    {
      __int16 v162 = sub_2DD064((int *)v161 + 6);
      sub_1FD148(v162, v593);
    }

    BOOL v163 = sub_D01B4(v579, 1768907891);
    if (v163)
    {
      uint64_t v164 = sub_2DD358((int *)v163 + 6);
      sub_1FDD64((uint64_t)v637, v164);
      char v558 = sub_2DCA7C((int *)v637);
      uint64_t v165 = sub_2DD25C(v572);
      uint64_t v166 = *(void *)(v165 + 8);
      while (v166 != v165)
      {
        sub_2DC450((uint64_t)&v633, v166 + 16);
        uint64_t v167 = sub_2DD358((int *)&v633);
        sub_1FDD64((uint64_t)v627, v167);
        char v168 = sub_2DCA7C((int *)v627);
        uint64_t v169 = v168 | (unint64_t)(sub_2DCA7C((int *)v583) << 32);
        if (v144 >= (uint64_t *)v582)
        {
          uint64_t v171 = (uint64_t)((uint64_t)v144 - v585) >> 3;
          uint64_t v172 = v171 + 1;
          uint64_t v173 = (uint64_t)v582 - v585;
          else {
            uint64_t v174 = v172;
          }
          if (v174) {
            uint64_t v174 = (unint64_t)sub_7DC90(v174);
          }
          else {
            unint64_t v175 = 0LL;
          }
          unsigned __int8 v176 = (unint64_t *)(v174 + 8 * v171);
          *unsigned __int8 v176 = v169;
          uint64_t v170 = (uint64_t *)(v176 + 1);
          while (v144 != (uint64_t *)v585)
          {
            uint64_t v177 = *--v144;
            *--unsigned __int8 v176 = v177;
          }

          v582 = (void **)(v174 + 8 * v175);
          if ((void)v585) {
            operator delete((void *)v585);
          }
          *(void *)&v585 = v176;
        }

        else
        {
          *BOOL v144 = v169;
          uint64_t v170 = v144 + 1;
        }

        sub_2DBF5C(v583);
        sub_2DBF5C((uint64_t)v627);
        sub_2DBF5C((uint64_t)&v633);
        uint64_t v166 = *(void *)(v166 + 8);
        BOOL v144 = v170;
      }

      sub_2DBF5C((uint64_t)v572);
      sub_2DBF5C((uint64_t)v637);
    }

    uint64_t v178 = v579;
    sub_1FDDAC(v579, 1936746861);
    sub_1FDDAC(v178, 1886610801);
    sub_1FDDAC(v178, 1835235437);
    __int128 v179 = sub_D01B4(v178, 1886352244);
    if (v179)
    {
      uint64_t v180 = (const void *)sub_2DCE6C((int *)v179 + 6);
      unint64_t v181 = v180;
      if (v180) {
        CFRetain(v180);
      }
      sub_3617C(v637, v181);
      int v182 = v595;
      v595 = *(CFTypeRef *)v637;
      *(void *)v637 = v182;
      if (v182) {
        CFRelease(v182);
      }
    }

    int v183 = sub_D01B4(v579, 1835233903);
    if (v183)
    {
      char v184 = *v573;
      char v185 = (const void *)sub_2DCE6C((int *)v183 + 6);
      char v186 = v185;
      if (v185) {
        CFRetain(v185);
      }
      sub_3617C(v637, v186);
      unint64_t v187 = *(const void **)(v184 + 1128);
      uint64_t v188 = *(const void **)v637;
      *(void *)(v184 + 1sub_19DFC(v32 - 128) = *(void *)v637;
      if (v188) {
        CFRetain(v188);
      }
      if (v187) {
        CFRelease(v187);
      }
      if (*(void *)v637) {
        CFRelease(*(CFTypeRef *)v637);
      }
    }

    unint64_t v189 = (uint64_t *)*v573;
    if (*v573)
    {
      sub_1FDDDC(0LL, 1701737068, 1635087216, v579, (uint64_t *)*v573);
      sub_1FDDDC(1LL, 1818326117, 1635087216, v579, v189);
      sub_1FDDDC(2LL, 1701080167, 1635087216, v579, v189);
      sub_1FDDDC(3LL, 1633972835, 1600941675, v579, v189);
      uint64_t v190 = *v560;
      unint64_t v191 = atomic_load((unsigned __int8 *)&qword_4A1AA0);
      if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_4A1AA0))
      {
        sub_3419D0();
        __cxa_guard_release(&qword_4A1AA0);
      }

      uint64_t v192 = qword_4A1A90;
      if (!qword_4A1A90) {
        goto LABEL_296;
      }
      int v193 = &qword_4A1A90;
      v194 = qword_4A1A90;
      do
      {
        unint64_t v195 = *(_DWORD *)(v194 + 32);
        uint64_t v196 = v195 >= v190;
        if (v195 >= v190) {
          unint64_t v197 = (uint64_t *)v194;
        }
        else {
          unint64_t v197 = (uint64_t *)(v194 + 8);
        }
        if (v196) {
          int v193 = (uint64_t *)v194;
        }
        v194 = *v197;
      }

      while (*v197);
      if (v193 != &qword_4A1A90 && *((_DWORD *)v193 + 8) <= v190)
      {
        while (1)
        {
          while (1)
          {
            char v247 = *(_DWORD *)(v192 + 32);
            if (v247 <= v190) {
              break;
            }
            uint64_t v192 = *(void *)v192;
            if (!v192) {
              goto LABEL_960;
            }
          }

          if (v247 >= v190) {
            break;
          }
          uint64_t v192 = *(void *)(v192 + 8);
          if (!v192) {
LABEL_960:
          }
            sub_8F9A4("map::at:  key not found");
        }

        memset(v637, 0, 24);
        v445 = *(void *)(v192 + 40);
        v446 = *(void *)(v192 + 48);
        v627[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v637;
        v627[0].__pn_.__r_.__value_.__s.__data_[8] = 0;
        if (v446 != v445)
        {
          v447 = 0xF0F0F0F0F0F0F0F1LL * ((v446 - v445) >> 3);
          if (v447 > 0x1E1E1E1E1E1E1E1LL) {
            sub_7A87C();
          }
          v448 = (char *)sub_1FE648(v447);
          v449 = 0LL;
          *(void *)v637 = v448;
          *(void *)&v637[8] = v448;
          *(void *)&v637[16] = &v448[136 * v450];
          do
          {
            v451 = v445 + v449;
            *(void *)&v448[v449] = *(void *)(v445 + v449);
            sub_199E0C((uint64_t)&v448[v449 + 16], v445 + v449 + 16);
            *(_DWORD *)&v448[v449 + 104] = *(_DWORD *)(v445 + v449 + 104);
            v452 = &v448[v449 + 112];
            v453 = (void **)(v445 + v449 + 112);
            if (*(char *)(v445 + v449 + 135) < 0)
            {
              sub_24054(v452, *v453, *(void *)(v445 + v449 + 120));
            }

            else
            {
              v454 = *(_OWORD *)v453;
              *(void *)&v448[v449 + 128] = *(void *)(v451 + 128);
              *(_OWORD *)v452 = v454;
            }

            v449 += 136LL;
          }

          while (v451 + 136 != v446);
          v455 = *(void *)v637;
          *(void *)&v637[8] = &v448[v449];
          while ((char *)v455 != &v448[v449])
          {
            sub_1FE0BC(v189, v455);
            v455 += 136LL;
          }
        }
      }

      else
      {
LABEL_296:
        memset(v637, 0, 24);
      }

      v627[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v637;
      sub_196014((void ***)v627);
      if (sub_D01B4(v579, 1668248691))
      {
        if (*(_BYTE *)(v559 + 128))
        {
          uint64_t v198 = sub_D01B4(v579, 1668248691);
          if (!v198) {
            sub_8F9A4("unordered_map::at: key not found");
          }
          uint64_t v199 = (const void *)sub_2DCE6C((int *)v198 + 6);
          v200 = v199;
          if (v199) {
            CFRetain(v199);
          }
          sub_3617C(&v592, v200);
          unint64_t v201 = (uint64_t *)*v573;
          v602 = 0LL;
          v600 = 0LL;
          v601 = 0LL;
          sub_22BC0C((uint64_t)&v633, v592);
          sub_22BC0C((uint64_t)&v629, v592);
          v629.__r_.__value_.__l.__size_ = (int64_t)(cap - v629.__r_.__value_.__l.__cap_) >> 3;
          while (1)
          {
            if (v633.__r_.__value_.__r.__words[0]
              && v633.__r_.__value_.__l.__size_ != (uint64_t)((uint64_t)v634 - v633.__r_.__value_.__l.__cap_) >> 3)
            {
              unint64_t v202 = v629.__r_.__value_.__r.__words[0];
            }

            else
            {
              unint64_t v202 = v629.__r_.__value_.__r.__words[0];
              if (!v629.__r_.__value_.__r.__words[0]
                || v629.__r_.__value_.__l.__size_ == (int64_t)(cap - v629.__r_.__value_.__l.__cap_) >> 3)
              {
LABEL_463:
                if (v631)
                {
                  v632 = v631;
                  operator delete(v631);
                }

                if (v629.__r_.__value_.__l.__cap_)
                {
                  std::string::size_type cap = v629.__r_.__value_.__l.__cap_;
                  operator delete((void *)v629.__r_.__value_.__l.__cap_);
                }

                if (v635)
                {
                  v636 = v635;
                  operator delete(v635);
                }

                if (v633.__r_.__value_.__l.__cap_)
                {
                  v634 = (std::string *)v633.__r_.__value_.__l.__cap_;
                  operator delete((void *)v633.__r_.__value_.__l.__cap_);
                }

                uint64_t v248 = v600;
                v249 = v601;
                while (v248 != v249)
                {
                  sub_1FE0BC(v201, v248);
                  v248 += 136LL;
                }

                *(void *)v637 = &v600;
                sub_196014((void ***)v637);
                if (v592) {
                  CFRelease(v592);
                }
                break;
              }
            }

            if (*(_OWORD *)&v633.__r_.__value_.__l.__data_ == __PAIR128__(v629.__r_.__value_.__l.__size_, v202)) {
              goto LABEL_463;
            }
            sub_22BC8C((uint64_t)v620, &v633);
            unint64_t v203 = atomic_load((unsigned __int8 *)&qword_491708);
            if ((v203 & 1) == 0 && __cxa_guard_acquire(&qword_491708))
            {
              sub_7D084(v637, "wind");
              *(void *)&v637[24] = 5LL;
              sub_7D084(v552, "wind_and_dynamics");
              v639 = (void *)(&dword_4 + 2);
              sub_7D084(v551, "enrollment");
              v642 = 0LL;
              sub_7D084(v550, "late_night_mode");
              v643[3] = &dword_0 + 1;
              sub_7D084(v549, "enhance_dialog");
              v645 = 2LL;
              sub_7D084(v548, "auto_drc");
              v646[3] = 3LL;
              sub_7D084(v547, "enhance_dialog_with_levels");
              v648 = 7LL;
              sub_22BD78((uint64_t)v637, 7LL);
              for (uint64_t i = 0LL; i != -224; i -= 32LL)
              {
              }

              __cxa_guard_release(&qword_491708);
            }

            unint64_t v204 = sub_7ED44((uint64_t)v620);
            unint64_t v205 = *((void *)&xmmword_4916E0 + 1);
            if (!*((void *)&xmmword_4916E0 + 1)) {
              goto LABEL_446;
            }
            unint64_t v206 = v204;
            uint64_t v207 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_4916E0 + 8));
            v207.i16[0] = vaddlv_u8(v207);
            uint64_t v208 = v207.u32[0];
            if (v207.u32[0] > 1uLL)
            {
              uint64_t v209 = v204;
              if (v204 >= *((void *)&xmmword_4916E0 + 1)) {
                uint64_t v209 = v204 % *((void *)&xmmword_4916E0 + 1);
              }
            }

            else
            {
              uint64_t v209 = (*((void *)&xmmword_4916E0 + 1) - 1LL) & v204;
            }

            unint64_t v210 = *(unsigned __int8 ***)(xmmword_4916E0 + 8 * v209);
            if (!v210) {
              goto LABEL_446;
            }
            uint64_t v211 = *v210;
            if (!*v210) {
              goto LABEL_446;
            }
            while (1)
            {
              unint64_t v212 = *((void *)v211 + 1);
              if (v206 == v212) {
                break;
              }
              if (v208 > 1)
              {
                if (v212 >= v205) {
                  v212 %= v205;
                }
              }

              else
              {
                v212 &= v205 - 1;
              }

              if (v212 != v209) {
                goto LABEL_446;
              }
LABEL_326:
              uint64_t v211 = *(unsigned __int8 **)v211;
              if (!v211) {
                goto LABEL_446;
              }
            }

            uint64_t v213 = *((void *)v211 + 5);
            __int16 v214 = v622;
            if (v622) {
              CFRetain(v622);
            }
            v619 = v214;
            sub_7D084(v637, "propertyID");
            LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = 1635087216;
            uint64_t v215 = sub_1585CC(&v619, v637, (unsigned int *)v627);
            if ((v637[23] & 0x80000000) != 0) {
              operator delete(*(void **)v637);
            }
            if (!v214)
            {
              uint64_t v530 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v530, "Could not construct");
            }

            CFRelease(v214);
            sub_22C22C(&v617, v214, (const UInt8 *)"tunings");
            if (v618)
            {
              sub_22C2B0((uint64_t)&v612, v617);
              sub_22C2B0((uint64_t)&v607, v617);
              *((void *)&v607 + 1) = (v609 - v608) >> 3;
              while (1)
              {
                if ((void)v612 && (int v216 = *((void *)&v612 + 1), *((void *)&v612 + 1) != (v614 - v613) >> 3))
                {
                  uint64_t v217 = v607;
                }

                else
                {
                  uint64_t v217 = v607;
                  if (!(void)v607 || *((void *)&v607 + 1) == (v609 - v608) >> 3) {
                    goto LABEL_437;
                  }
                  int v216 = *((void *)&v612 + 1);
                }

                if ((void)v612 == v217 && v216 == *((void *)&v607 + 1))
                {
LABEL_437:
                  if (v610)
                  {
                    v611 = v610;
                    operator delete(v610);
                  }

                  if (v608)
                  {
                    v609 = v608;
                    operator delete(v608);
                  }

                  if (v615)
                  {
                    v616 = v615;
                    operator delete(v615);
                  }

                  if (v613)
                  {
                    v614 = v613;
                    operator delete(v613);
                  }

                  goto LABEL_445;
                }

                if ((v216 & 0x8000000000000000LL) != 0 || v216 >= (v614 - v613) >> 3)
                {
                  char v519 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v519, "DictionaryRef_iterator iterator out of range.");
                }

                sub_48100((uint64_t)v637, *(const __CFString **)&v613[8 * v216]);
                uint64_t v219 = (const __CFNumber *)*((void *)v615 + *((void *)&v612 + 1));
                if (v219) {
                  CFRetain(*((CFTypeRef *)v615 + *((void *)&v612 + 1)));
                }
                v605 = *(std::string *)v637;
                v606 = v219;
                sub_83A3C(&v627[0].__pn_, &v605);
                sub_83AA0((std::__fs::filesystem::path *)v637, v567, v627);
                if ((v637[23] & 0x80000000) != 0) {
                  sub_24054(v627, *(void **)v637, *(unint64_t *)&v637[8]);
                }
                else {
                  v627[0] = *(std::__fs::filesystem::path *)v637;
                }
                uint64_t v220 = std::__fs::filesystem::path::__extension(v627);
                if ((char)v627[0].__pn_.__r_.__value_.__s.__size_ < 0)
                {
                  operator delete(v627[0].__pn_.__r_.__value_.__l.__data_);
                  if (v220.__size) {
                    goto LABEL_377;
                  }
                }

                else if (v220.__size)
                {
                  goto LABEL_377;
                }

                sub_7D084(v627, "");
                if (v215 == 1635087216) {
                  break;
                }
                if (v215 == 1886548848)
                {
                  if ((char)v627[0].__pn_.__r_.__value_.__s.__size_ < 0)
                  {
                    v627[0].__pn_.__r_.__value_.__l.__size_ = 10LL;
                    uint64_t v221 = (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
                    v222 = (std::string::size_type *)(v627[0].__pn_.__r_.__value_.__r.__words[0] + 10);
                  }

                  else
                  {
                    v627[0].__pn_.__r_.__value_.__s.__size_ = 10;
                    uint64_t v221 = v627;
                    v222 = v554;
                  }

                  LOWORD(v221->__pn_.__r_.__value_.__r.__words[1]) = 28777;
                  uint64_t v223 = *(void *)".propstrip";
LABEL_368:
                  v221->__pn_.__r_.__value_.__r.__words[0] = v223;
                  *(_BYTE *)v222 = 0;
                }

                uint64_t v224 = v627[0].__pn_.__r_.__value_.__s.__size_;
                uint64_t v225 = v627[0].__pn_.__r_.__value_.__s.__size_;
                if ((v627[0].__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v224 = v627[0].__pn_.__r_.__value_.__l.__size_;
                }
                if (v224)
                {
                  sub_83A3C(&v624, &v627[0].__pn_);
                  std::__fs::filesystem::path::replace_extension( (std::__fs::filesystem::path *)v637,  (const std::__fs::filesystem::path *)&v624);
                  uint64_t v225 = v627[0].__pn_.__r_.__value_.__s.__size_;
                }

                if ((v225 & 0x80) != 0) {
                  operator delete(v627[0].__pn_.__r_.__value_.__l.__data_);
                }
LABEL_377:
                if ((v637[23] & 0x80000000) != 0)
                {
                  sub_24054(&v603, *(void **)v637, *(unint64_t *)&v637[8]);
                  if ((v637[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v637);
                  }
                }

                else
                {
                  v603 = *(_OWORD *)v637;
                  v604 = *(void *)&v637[16];
                }

                if (v213 == 7)
                {
                  if (!v606 || (BOOL v229 = CFGetTypeID(v606), v229 != CFNumberGetTypeID()))
                  {
LABEL_411:
                    v627[0].__pn_.__r_.__value_.__s.__data_[8] = 0;
                    v628 = 0;
                    goto LABEL_412;
                  }

                  sub_158360(&v624, v555);
                  uint64_t v230 = (const void *)v624.__r_.__value_.__r.__words[0];
                  if (!v624.__r_.__value_.__r.__words[0])
                  {
                    v531 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v531, "Could not construct");
                  }

                  CFTypeID TypeID = CFNumberGetTypeID();
                  if (TypeID != CFGetTypeID(v230)
                    || (v623 = 0, !CFNumberGetValue((CFNumberRef)v230, kCFNumberIntType, &v623)))
                  {
                    v527 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v527, "Could not convert");
                  }

                  LODWORD(v627[0].__pn_.__r_.__value_.__r.__words[1]) = v623;
                  v628 = 4;
                  CFRelease(v230);
                }

                else if (v213 == 6)
                {
                  if (!v606) {
                    goto LABEL_411;
                  }
                  uint64_t v226 = CFGetTypeID(v606);
                  if (v226 == CFNumberGetTypeID())
                  {
                    if (!v606)
                    {
                      __int128 v533 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v533, "Could not construct");
                    }

                    v227 = sub_36328(v606);
                    uint64_t v228 = v227 & 3;
                    v627[0].__pn_.__r_.__value_.__l.__size_ = v228;
                    v628 = 3;
                  }

                  else
                  {
                    if (!v606) {
                      goto LABEL_411;
                    }
                    int v235 = CFGetTypeID(v606);
                    if (v235 != CFDictionaryGetTypeID()) {
                      goto LABEL_411;
                    }
                    sub_360D4(&v624, v555);
                    if (!v624.__r_.__value_.__r.__words[0])
                    {
                      uint64_t v535 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v535, "Could not construct");
                    }

                    BOOL v236 = sub_22C330((const __CFDictionary *)v624.__r_.__value_.__l.__data_, (const UInt8 *)"wind");
                    if (!v624.__r_.__value_.__r.__words[0])
                    {
                      v537 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v537, "Could not construct");
                    }

                    v627[0].__pn_.__r_.__value_.__l.__size_ = ((unsigned __int16)sub_22C330( (const __CFDictionary *)v624.__r_.__value_.__l.__data_,  (const UInt8 *)"dynamics") > 0x100u) | (2LL * (v236 > 0x100u));
                    v628 = 3;
                    unint64_t v237 = (const void *)v624.__r_.__value_.__r.__words[0];
                    if (v624.__r_.__value_.__r.__words[0]) {
                      goto LABEL_406;
                    }
                  }
                }

                else
                {
                  if (!v606) {
                    goto LABEL_411;
                  }
                  unsigned int v232 = CFGetTypeID(v606);
                  if (v232 == CFBooleanGetTypeID())
                  {
                    if (v606)
                    {
                      uint64_t v233 = CFGetTypeID(v606);
                      if (v233 != CFBooleanGetTypeID())
                      {
                        char v534 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v534, "Could not construct");
                      }

                      int v234 = v606;
                      if (v606) {
                        CFRetain(v606);
                      }
                    }

                    else
                    {
                      int v234 = 0LL;
                    }

                    sub_1CA4C0(&v624, v234);
                    if (!v624.__r_.__value_.__r.__words[0])
                    {
                      v532 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v532, "Could not construct");
                    }

                    v627[0].__pn_.__r_.__value_.__s.__data_[8] = sub_1476F8((const __CFNumber *)v624.__r_.__value_.__l.__data_);
                    v628 = 0;
                    unint64_t v237 = (const void *)v624.__r_.__value_.__r.__words[0];
                    if (v624.__r_.__value_.__r.__words[0]) {
LABEL_406:
                    }
                      CFRelease(v237);
                  }

                  else
                  {
                    if (!v606) {
                      goto LABEL_411;
                    }
                    v238 = CFGetTypeID(v606);
                    if (v238 != CFNumberGetTypeID()) {
                      goto LABEL_411;
                    }
                    sub_158360(&v624, v555);
                    v239 = (const void *)v624.__r_.__value_.__r.__words[0];
                    if (!v624.__r_.__value_.__r.__words[0])
                    {
                      v536 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v536, "Could not construct");
                    }

                    v627[0].__pn_.__r_.__value_.__s.__data_[8] = sub_8D7E0((const __CFNumber *)v624.__r_.__value_.__l.__data_) != 0;
                    v628 = 0;
                    CFRelease(v239);
                  }
                }

    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }

    goto LABEL_172;
  }

  char v64 = atomic_load((unsigned __int8 *)&qword_49D6C0);
  if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_49D6C0))
  {
    sub_3082D4();
    __cxa_guard_release(&qword_49D6C0);
    char v63 = a1;
  }

  unint64_t v65 = qword_49D6B0;
  char v66 = (std::__shared_weak_count *)qword_49D6B8;
  *(void *)AudioObjectPropertyAddress buf = qword_49D6B0;
  *(void *)&buf[8] = qword_49D6B8;
  if (qword_49D6B8)
  {
    uint64_t v67 = (unint64_t *)(qword_49D6B8 + 8);
    do
      uint64_t v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }

  sub_143208(v63, v65, (uint64_t)v66);
  if (v66)
  {
    __int16 v69 = (unint64_t *)&v66->__shared_owners_;
    do
      uint64_t v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    goto LABEL_170;
  }

LABEL_859:
        v438 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v438, "Precondition failure.");
      }

      uint64_t v112 = *(void *)(*(void *)a2 + 8LL);
      if (!v112) {
        goto LABEL_852;
      }
      uint64_t v113 = v111;
      uint64_t v493 = *(void *)v107;
      uint64_t v496 = v111 + 36;
      unsigned int v114 = *(_DWORD *)(v111 + 36);
      uint64_t v115 = *(void *)a2 + 8LL;
      do
      {
        unsigned int v116 = *(_DWORD *)(v112 + 32);
        BOOL v117 = v116 >= v114;
        if (v116 >= v114) {
          std::string v118 = (uint64_t *)v112;
        }
        else {
          std::string v118 = (uint64_t *)(v112 + 8);
        }
        if (v117) {
          uint64_t v115 = v112;
        }
        uint64_t v112 = *v118;
      }

      while (*v118);
      if (v115 == *(void *)a2 + 8LL || v114 < *(_DWORD *)(v115 + 32))
      {
LABEL_852:
        v434 = (os_log_t *)sub_138E8(13);
        v435 = *v434;
        if (*v434 && os_log_type_enabled(*v434, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 3386;
          _os_log_impl( &dword_0,  v435,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_859;
      }

      uint64_t v490 = *a16;
      uint64_t v119 = v107 + 16;
      for (n = *(void **)(v107 + 24); n != (void *)v119; n = (void *)n[1])
      {
        std::string::size_type v121 = (std::__shared_weak_count *)n[5];
        if (v121)
        {
          __int16 v122 = std::__shared_weak_count::lock(v121);
          if (v122)
          {
            unint64_t v123 = v122;
            uint64_t v124 = n[4];
            if (v124 && *(_DWORD *)(v124 + 144) == 1885892706 && sub_2043D4(n[4])) {
              sub_204C7C(v124);
            }
            int v125 = (unint64_t *)&v123->__shared_owners_;
            do
              unint64_t v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
      }

      char v127 = a12;
      if ((_DWORD)v493 != 1986291046) {
        char v127 = 0;
      }
      char v488 = v127;
      *(_OWORD *)v529 = *(_OWORD *)v496;
      uint64_t v530 = *(void *)(v496 + 16);
      if ((_DWORD)v493 == 1986291305 || (_DWORD)v493 == 1986291046)
      {
        sub_86054((uint64_t)&v526, &v511);
      }

      else
      {
        v527 = 0LL;
        uint64_t v528 = 0LL;
        v526 = (void **)&v527;
      }

      uint64_t v128 = *(void *)(v107 + 24);
      if (v128 == v119)
      {
        uint64_t v129 = 0LL;
      }

      else
      {
        uint64_t v129 = 0LL;
        do
        {
          sub_B8CBC((uint64_t *)buf, (uint64_t *)(v128 + 32), "", 3399);
          uint64_t v130 = *(void *)buf;
          if (*(void *)buf)
          {
            __int16 v131 = *(_WORD *)(*(void *)buf + 184LL);
            LOBYTE(v16) = (v131 & 1) == 0 && (v131 & 0x10) != 0;
          }

          uint64_t v132 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            uint64_t v133 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              unint64_t v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }

          v129 += (v130 != 0) & v16;
          uint64_t v128 = *(void *)(v128 + 8);
        }

        while (v128 != v119);
        uint64_t v119 = *(void *)(v107 + 24);
      }

      *(void *)v569 = 0LL;
      *(void *)&v569[8] = 0LL;
      uint64_t v135 = *(std::__shared_weak_count **)(v119 + 40);
      if (v135)
      {
        unint64_t v136 = std::__shared_weak_count::lock(v135);
        if (v136)
        {
          uint64_t v137 = v136;
          uint64_t v138 = *(void *)(v119 + 32);
          uint64_t v139 = (unint64_t *)&v136->__shared_weak_owners_;
          do
            unint64_t v140 = __ldxr(v139);
          while (__stxr(v140 + 1, v139));
          *(void *)v569 = v138;
          *(void *)&v569[8] = v136;
          int64x2_t v141 = (unint64_t *)&v136->__shared_owners_;
          do
            unint64_t v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v137);
          }
        }

        else
        {
          *(void *)v569 = 0LL;
          *(void *)&v569[8] = 0LL;
        }
      }

      sub_B8F68((uint64_t *)&__dst, (uint64_t *)v569, "", 1110);
      if ((void)__dst
        && ((v143 = *(_DWORD *)(__dst + 264), v143 != 1635085420) ? (BOOL v144 = v143 == 1633759844) : (BOOL v144 = 1),
            v144
         && (uint64_t v145 = *(void *)(__dst + 192)) != 0
         && (*(unsigned int (**)(uint64_t))(*(void *)v145 + 120LL))(v145)))
      {
        if (!*(void *)(__dst + 192))
        {
          v445 = (os_log_t *)sub_138E8(13);
          v446 = *v445;
          if (*v445 && os_log_type_enabled(*v445, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "PortUtilities.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 1066;
            _os_log_impl( &dword_0,  v446,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          v447 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v447, "Precondition failure.");
        }

        strcpy(buf, "newsbolg");
        buf[9] = 0;
        *(_WORD *)&_DWORD buf[10] = 0;
        unint64_t v146 = sub_5C2F8(__dst);
        int v147 = 0;
        *((void *)&v150 + 1) = v148;
        *(void *)&__int128 v150 = v146;
        uint64_t v149 = v150 >> 32;
        BOOL v152 = (v149 & 0xFF00000000LL) != 0 && (_DWORD)v149 != 0;
        if (v129 <= 1) {
          int v147 = sub_1F6EF0(__dst);
        }
        uint64_t v153 = (os_log_t *)sub_138E8(8);
        uint64_t v154 = *v153;
        if (*v153 && os_log_type_enabled(*v153, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          if (v152) {
            unint64_t v155 = "YES";
          }
          else {
            unint64_t v155 = "NO";
          }
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          if (v147) {
            uint64_t v156 = "YES";
          }
          else {
            uint64_t v156 = "NO";
          }
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 1120;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&uint8_t buf[20] = v155;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = v156;
          _os_log_impl( &dword_0,  v154,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Output port is using software volume: %s. Output port should use software volume: %s",  buf,  0x26u);
        }

        LOBYTE(v16) = v152 ^ v147;
      }

      else
      {
        LOBYTE(v16) = 0;
      }

      uint64_t v157 = (std::__shared_weak_count *)*((void *)&__dst + 1);
      if (*((void *)&__dst + 1))
      {
        uint64_t v158 = (unint64_t *)(*((void *)&__dst + 1) + 8LL);
        do
          unint64_t v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }

      if (*(void *)&v569[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v569[8]);
      }
      if ((_DWORD)v493 == 1986291046)
      {
        sub_C590C(&__dst, a15);
      }

      else
      {
        LOBYTE(__dst) = 0;
        char v519 = 0;
      }

      uint64_t v160 = *(void *)(v113 + 36);
      uint64_t v161 = *(void *)(v113 + 44);
      __int16 v162 = sub_11AB10(*(void *)a2, (unsigned int *)v496);
      if ((_BYTE)v162)
      {
        BOOL v163 = (uint64_t *)sub_2FC95C();
        uint64_t v164 = *v163;
        uint64_t v165 = v163[1];
      }

      else
      {
        uint64_t v166 = sub_5954C();
        uint64_t v164 = (*(uint64_t (**)(uint64_t))(*(void *)v166 + 216LL))(v166);
        uint64_t v165 = v167;
      }

      *(void *)&__int128 v516 = v164;
      char v168 = *(_BYTE *)(v113 + 48);
      uint64_t v486 = v165;
      if (v168)
      {
        if (HIBYTE(v162))
        {
          uint64_t v169 = sub_2FC95C();
          uint64_t v170 = *(void *)v169;
          uint64_t v484 = *(unsigned int *)(v169 + 8);
        }

        else
        {
          uint64_t v172 = sub_5954C();
          uint64_t v170 = (*(uint64_t (**)(uint64_t))(*(void *)v172 + 216LL))(v172);
          uint64_t v484 = v173;
        }

        uint64_t v525 = v170;
        char v168 = *(_BYTE *)(v113 + 48) != 0;
        uint64_t v171 = *(_BYTE *)(v113 + 48) ? &v525 : (uint64_t *)&v516;
        uint64_t v164 = *v171;
        char v485 = 1;
      }

      else
      {
        char v485 = 0;
        LOBYTE(v525) = 0;
        uint64_t v171 = (uint64_t *)&v516;
      }

      uint64_t *v171 = v164 & 0xFFFFFFFFFFFFFFFBLL;
      if ((v164 & 2) == 0) {
        break;
      }
      uint64_t v178 = *(void *)(v107 + 24);
      __int128 v179 = *(std::__shared_weak_count **)(v178 + 40);
      if (!v179) {
        goto LABEL_339;
      }
      uint64_t v180 = std::__shared_weak_count::lock(v179);
      *(void *)&v531[8] = v180;
      if (!v180) {
        goto LABEL_339;
      }
      unsigned __int8 v176 = v180;
      unint64_t v181 = *(_DWORD **)(v178 + 32);
      *(void *)v531 = v181;
      if (v181)
      {
        int v182 = v181[36];
        if (v182 == 1885892674 || v182 == 1885892706)
        {
          uint64_t v188 = (*(uint64_t (**)(_DWORD *))(*(void *)v181 + 112LL))(v181);
          int v183 = (v188 & 0xFF00000000LL) != 0 && (_DWORD)v188 == 1701865584;
        }

        else if (v182 == 1885892727)
        {
          sub_90BC0();
          int v183 = (*(uint64_t (**)(void))(qword_48CD58 + 16))();
        }

        else
        {
          int v183 = 0;
        }

        uint64_t v190 = sub_5954C();
        int v478 = (*(uint64_t (**)(uint64_t))(*(void *)v190 + 344LL))(v190);
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v181 + 480LL))(v181))
        {
          sub_204C7C((uint64_t)v181);
          int v497 = sub_31F914();
        }

        else
        {
          int v497 = 0;
        }

        unint64_t v191 = (os_log_t *)sub_138E8(8);
        uint64_t v192 = *v191;
        if (*v191 && os_log_type_enabled(*v191, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v569 = 136315906;
          *(void *)&v569[4] = "RoutingManager.cpp";
          *(_WORD *)&v569[12] = 1024;
          *(_DWORD *)&v569[14] = 5242;
          *(_WORD *)&v569[18] = 1024;
          *(_DWORD *)&v569[20] = v478 == 0;
          __int16 v570 = 1024;
          int v571 = v497;
          _os_log_impl( &dword_0,  v192,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VolumeLimit state: %u. Effective PME state: %u",  v569,  0x1Eu);
        }

        int v193 = v497;
        if (v478) {
          int v193 = 1;
        }
        if ((v183 & v193 & 1) == 0) {
          *v171 &= ~2uLL;
        }
      }

      v194 = (unint64_t *)&v176->__shared_owners_;
      do
        unint64_t v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (v195) {
        goto LABEL_339;
      }
LABEL_338:
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
LABEL_339:
      *(_DWORD *)v559 = *(_DWORD *)v524;
      *(_DWORD *)&v559[3] = *(_DWORD *)&v524[3];
      uint64_t v196 = *(void *)a2;
      *(void *)AudioObjectPropertyAddress buf = v160;
      *(void *)&buf[8] = v161;
      *(void *)&_DWORD buf[16] = v516;
      *(void *)&_BYTE buf[24] = v486;
      *(void *)&_BYTE buf[32] = v525;
      *(void *)&uint8_t buf[40] = v484;
      char v558 = v485;
      uint64_t v560 = v479;
      v561 = v483;
      if (v483)
      {
        do
          unint64_t v197 = __ldxr(v110);
        while (__stxr(v197 + 1, v110));
      }

      sub_86054((uint64_t)v562, &v526);
      *(void *)&__int128 v563 = v196 + 24;
      *((void *)&v563 + 1) = v115 + 72;
      v564[0] = 0;
      *(_WORD *)&v564[1] = v522;
      v564[3] = v523;
      *(void *)&v564[4] = v493;
      *(_OWORD *)&v564[12] = *(_OWORD *)v529;
      *(void *)&v564[28] = v530;
      v564[36] = v488;
      *(_WORD *)&v564[37] = v520;
      v564[39] = v521;
      *(void *)&v564[40] = v490;
      char v565 = (char)v16;
      sub_C590C(v566, &__dst);
      std::string::size_type v26 = (uint64_t **)(a4 + 8);
      if ((buf[12] != 0) != (v558 != 0))
      {
        uint64_t v198 = (os_log_t *)sub_138E8(13);
        uint64_t v199 = *v198;
        if (*v198)
        {
          if (os_log_type_enabled(*v198, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v569 = 136315394;
            *(void *)&v569[4] = "RoutingHandlerTypes.cpp";
            *(_WORD *)&v569[12] = 1024;
            *(_DWORD *)&v569[14] = 37;
            _os_log_impl( &dword_0,  v199,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: OutputMode must be matched with an entry for mOutputSystemAudioEffectsSettings",  v569,  0x12u);
          }
        }
      }

      *(_OWORD *)&v532[8] = *(_OWORD *)buf;
      *(_OWORD *)&v532[24] = *(_OWORD *)&buf[16];
      __int128 v533 = *(_OWORD *)&buf[32];
      char v534 = v558;
      *(void *)v532 = v107;
      uint64_t v535 = v560;
      v536 = v561;
      if (v561)
      {
        v200 = &v561->__shared_weak_owners_;
        do
          unint64_t v201 = __ldxr((unint64_t *)v200);
        while (__stxr(v201 + 1, (unint64_t *)v200));
      }

      sub_86054((uint64_t)v537, v562);
      __int128 v540 = *(_OWORD *)&v564[16];
      __int128 v541 = *(_OWORD *)&v564[32];
      char v542 = v565;
      __int128 v538 = v563;
      __int128 v539 = *(_OWORD *)v564;
      sub_C590C(&v543, (__int128 *)v566);
      if (v568 && v567 < 0) {
        operator delete(v566[0]);
      }
      sub_85D64((void *)v562[1]);
      if (v561) {
        std::__shared_weak_count::__release_weak(v561);
      }
      if (v519 && SHIBYTE(v518) < 0) {
        operator delete((void *)__dst);
      }
      sub_85D64(v527);
      sub_11A9F0((uint64_t)__p, (uint64_t)v532);
      LOBYTE(v556) = 0;
      BYTE4(v556) = 0;
      unint64_t v202 = v500;
      if (v500 >= v501)
      {
        unint64_t v204 = 0x84BDA12F684BDA13LL * ((uint64_t)(v500 - (void)v499) >> 3);
        unint64_t v205 = v204 + 1;
        if (v204 + 1 > 0x12F684BDA12F684LL) {
          sub_7A87C();
        }
        else {
          unint64_t v206 = v205;
        }
        *(void *)&_BYTE buf[32] = &v501;
        if (v206)
        {
          uint64_t v208 = sub_119BDC(v206);
        }

        else
        {
          uint64_t v208 = 0LL;
          uint64_t v207 = 0LL;
        }

        *(void *)AudioObjectPropertyAddress buf = v208;
        *(void *)&buf[8] = &v208[27 * v204];
        *(void *)&_DWORD buf[16] = *(void *)&buf[8];
        *(void *)&_BYTE buf[24] = &v208[27 * v207];
        sub_11A9F0(*(uint64_t *)&buf[8], (uint64_t)__p);
        v208[27 * v204 + 26] = v556;
        *(void *)&buf[16] += 216LL;
        sub_119DB8((uint64_t *)&v499, buf);
        unint64_t v203 = v500;
        sub_119E90((uint64_t)buf);
      }

      else
      {
        sub_11A9F0(v500, (uint64_t)__p);
        *(void *)(v202 + 20std::iostream::~basic_iostream(v2, v5 + 8) = v556;
        unint64_t v203 = v202 + 216;
      }

      unint64_t v500 = v203;
      if (v555 && v554 < 0) {
        operator delete(v553);
      }
      sub_85D64(*(void **)cf_8);
      if (v547[1]) {
        std::__shared_weak_count::__release_weak(v547[1]);
      }
      if (v545 && v544 < 0) {
        operator delete(v543);
      }
      sub_85D64(v537[1]);
      if (v536) {
        std::__shared_weak_count::__release_weak(v536);
      }
      v107 += 48LL;
      if (v107 == v481) {
        goto LABEL_379;
      }
    }

    if (!HIBYTE(v162)) {
      char v168 = 0;
    }
    if ((_BYTE)v162 || (v168 & 1) != 0) {
      goto LABEL_339;
    }
    uint64_t v174 = *(void *)(v107 + 24);
    *(void *)v569 = 0LL;
    *(void *)&v569[8] = 0LL;
    unint64_t v175 = *(std::__shared_weak_count **)(v174 + 40);
    if (v175)
    {
      unsigned __int8 v176 = std::__shared_weak_count::lock(v175);
      *(void *)&v569[8] = v176;
      if (v176)
      {
        uint64_t v177 = *(void *)(v174 + 32);
        *(void *)v569 = v177;
        goto LABEL_307;
      }
    }

    else
    {
      unsigned __int8 v176 = 0LL;
    }

    uint64_t v177 = 0LL;
LABEL_307:
    char v184 = sub_1F6998(v107);
    if (v177) {
      char v185 = v184;
    }
    else {
      char v185 = 1;
    }
    if (!v176) {
      goto LABEL_339;
    }
    char v186 = (unint64_t *)&v176->__shared_owners_;
    do
      unint64_t v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (v187) {
      goto LABEL_339;
    }
    goto LABEL_338;
  }

LABEL_413:
    uint64_t v224 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v224, "Precondition failure.");
  }

  int v216 = *(_DWORD *)(a2 + 32);
  v480 = (unsigned int *)(a2 + 32);
  if (!v216)
  {
    uint64_t v217 = sub_138E8(8);
    if ((*(_BYTE *)(v217 + 8) & 1) != 0)
    {
      unint64_t v218 = *(os_log_s **)v217;
      if (*(void *)v217)
      {
        if (os_log_type_enabled(*(os_log_t *)v217, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3220;
          _os_log_impl( &dword_0,  v218,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Initial category never set, not redundant.",  (uint8_t *)__p,  0x12u);
        }
      }
    }
  }

  if (a14 == 1919971427)
  {
    uint64_t v219 = sub_138E8(8);
    if ((*(_BYTE *)(v219 + 8) & 1) != 0)
    {
      uint64_t v220 = *(os_log_s **)v219;
      if (*(void *)v219)
      {
        if (os_log_type_enabled(*(os_log_t *)v219, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3223;
          _os_log_impl( &dword_0,  v220,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Port Properties Changed, not redundant.",  (uint8_t *)__p,  0x12u);
        }
      }
    }
  }

  uint64_t v221 = v499;
  if (v499 != (void *)v500)
  {
    while (*(_DWORD *)(*v221 + 4LL) || *(_DWORD *)*v221 != 1986291046)
    {
      v221 += 27;
      if (v221 == (void *)v500) {
        goto LABEL_410;
      }
    }
  }

  if ((void *)v500 == v221)
  {
LABEL_410:
    v222 = (os_log_t *)sub_138E8(13);
    uint64_t v223 = *v222;
    if (*v222 && os_log_type_enabled(*v222, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 3227;
      _os_log_impl( &dword_0,  v223,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
    }

    goto LABEL_413;
  }

  uint64_t v225 = v221[12];
  uint64_t v226 = *(void *)(a2 + 496);
  if (v225 == v226)
  {
    v227 = (void *)v221[10];
    if (v227 == v221 + 11)
    {
      int v235 = 0;
      goto LABEL_440;
    }

    uint64_t v228 = *(void **)(a2 + 480);
    do
    {
      BOOL v229 = sub_118570(v227 + 4, v228 + 4);
      if (!v229) {
        break;
      }
      uint64_t v230 = (void *)v227[1];
      unint64_t v231 = v227;
      if (v230)
      {
        do
        {
          v227 = v230;
          uint64_t v230 = (void *)*v230;
        }

        while (v230);
      }

      else
      {
        do
        {
          v227 = (void *)v231[2];
          BOOL v37 = *v227 == (void)v231;
          unint64_t v231 = v227;
        }

        while (!v37);
      }

      unsigned int v232 = (void *)v228[1];
      if (v232)
      {
        do
        {
          uint64_t v233 = v232;
          unsigned int v232 = (void *)*v232;
        }

        while (v232);
      }

      else
      {
        do
        {
          uint64_t v233 = (void *)v228[2];
          BOOL v37 = *v233 == (void)v228;
          uint64_t v228 = v233;
        }

        while (!v37);
      }

      uint64_t v228 = v233;
    }

    while (v227 != v221 + 11);
    uint64_t v225 = v221[12];
    uint64_t v226 = *(void *)(a2 + 496);
  }

  else
  {
    BOOL v229 = 0;
  }

  int v234 = !v229;
  if (a14 != 1919971427) {
    int v234 = 0;
  }
  if (v216) {
    int v235 = 0;
  }
  else {
    int v235 = v234;
  }
  if (v225 != v226) {
    goto LABEL_455;
  }
  v227 = (void *)v221[10];
LABEL_440:
  BOOL v236 = v221 + 11;
  if (v227 == v236) {
    goto LABEL_460;
  }
  unint64_t v237 = *(void **)(a2 + 480);
  while (sub_118570(v227 + 4, v237 + 4))
  {
    v238 = (void *)v227[1];
    v239 = v227;
    if (v238)
    {
      do
      {
        v227 = v238;
        v238 = (void *)*v238;
      }

      while (v238);
    }

    else
    {
      do
      {
        v227 = (void *)v239[2];
        BOOL v37 = *v227 == (void)v239;
        v239 = v227;
      }

      while (!v37);
    }

    uint64_t v240 = (void *)v237[1];
    if (v240)
    {
      do
      {
        unint64_t v241 = v240;
        uint64_t v240 = (void *)*v240;
      }

      while (v240);
    }

    else
    {
      do
      {
        unint64_t v241 = (void *)v237[2];
        BOOL v37 = *v241 == (void)v237;
        unint64_t v237 = v241;
      }

      while (!v37);
    }

    unint64_t v237 = v241;
    if (v227 == v236) {
      goto LABEL_460;
    }
  }

LABEL_455:
  uint64_t v242 = sub_138E8(8);
  if ((*(_BYTE *)(v242 + 8) & 1) == 0
    || (unint64_t v243 = *(os_log_s **)v242) == 0LL
    || !os_log_type_enabled(*(os_log_t *)v242, OS_LOG_TYPE_DEBUG))
  {
LABEL_460:
    if (!v235) {
      goto LABEL_459;
    }
    goto LABEL_461;
  }

  LODWORD(__p[0]) = 136315394;
  *(void **)((char *)__p + 4) = "RoutingManager.cpp";
  WORD2(__p[1]) = 1024;
  *(_DWORD *)((char *)&__p[1] + 6) = 3230;
  _os_log_impl(&dword_0, v243, OS_LOG_TYPE_DEBUG, "%25s:%-5d Sub-ports differ.", (uint8_t *)__p, 0x12u);
  if ((v235 & 1) == 0)
  {
LABEL_459:
    int v487 = 1;
    goto LABEL_466;
  }

LABEL_461:
  uint64_t v244 = sub_138E8(8);
  if ((*(_BYTE *)(v244 + 8) & 1) != 0)
  {
    uint64_t v245 = *(os_log_s **)v244;
    if (*(void *)v244)
    {
      if (os_log_type_enabled(*(os_log_t *)v244, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 3232;
        _os_log_impl( &dword_0,  v245,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d We need to invalidate the default VAD.",  (uint8_t *)__p,  0x12u);
      }
    }
  }

  int v487 = 0;
LABEL_466:
  memset(v569, 0, sizeof(v569));
  sub_DE5C4(v529, a2 + 456);
  uint64_t v246 = (uint64_t)v499;
  unint64_t v489 = v500;
  if (v499 != (void *)v500)
  {
    int v494 = 0;
    char v247 = 1;
    while (1)
    {
      uint64_t v248 = sub_138E8(8);
      if ((*(_BYTE *)(v248 + 8) & 1) != 0)
      {
        v249 = *(os_log_s **)v248;
        if (*(void *)v248)
        {
          if (os_log_type_enabled(*(os_log_t *)v248, OS_LOG_TYPE_DEBUG))
          {
            sub_33464((std::string *)v532, *(unsigned int **)v246);
            int v250 = v532[23];
            int64x2_t v251 = *(_BYTE **)v532;
            sub_1ACDE4((std::string *)buf, v246);
            v252 = v532;
            if (v250 < 0) {
              v252 = v251;
            }
            v253 = buf;
            if (buf[23] < 0) {
              v253 = *(_BYTE **)buf;
            }
            LODWORD(__p[0]) = 136315906;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3245;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v252;
            WORD2(__p[3]) = 2080;
            *(void **)((char *)&__p[3] + 6) = v253;
            _os_log_impl( &dword_0,  v249,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Beginning determination of base reconfiguration context for %s %s.",  (uint8_t *)__p,  0x26u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if ((v532[23] & 0x80000000) != 0) {
              operator delete(*(void **)v532);
            }
          }
        }
      }

      unint64_t v254 = *(uint64_t **)v246;
      int v255 = *(_DWORD *)(v246 + 12);
      int v256 = 1;
      char v498 = v247;
      if (v255 > 1919776354)
      {
        if (v255 > 1987081832)
        {
          if (v255 == 1987081833) {
            goto LABEL_493;
          }
          unsigned __int16 v258 = 30319;
        }

        else
        {
          if (v255 == 1919776355) {
            goto LABEL_493;
          }
          unsigned __int16 v258 = 26467;
        }

        int v257 = v258 | 0x76700000;
      }

      else if (v255 > 1768779618)
      {
        if (v255 == 1768779619) {
          goto LABEL_493;
        }
        int v257 = 1768781411;
      }

      else
      {
        if (v255 == 1735222132) {
          goto LABEL_493;
        }
        int v257 = 1768057203;
      }

      if (v255 != v257) {
        int v256 = 0;
      }
LABEL_493:
      uint64_t v259 = *v254;
      uint64_t v260 = (uint64_t *)v529[1];
      int v261 = sub_DE728(*v254, (void *)v529[0], (void *)v529[1]);
      uint64_t v262 = v261;
      if (v260 == v261)
      {
        int v271 = 1;
        char v272 = v498;
        if (v256) {
          goto LABEL_562;
        }
        goto LABEL_563;
      }

      uint64_t v263 = *v261;
      sub_DBC08((uint64_t)__p, (void **)v246);
      BOOL v264 = *(unsigned int **)v246;
      uint64_t v265 = *(void *)v246 + 16LL;
      uint64_t v266 = *(void *)(*(void *)v246 + 24LL);
      if (v266 != v265)
      {
        while (1)
        {
          sub_B8CBC((uint64_t *)v532, (uint64_t *)(v266 + 32), "", 1538);
          uint64_t v267 = *(std::__shared_weak_count **)&v532[8];
          int v268 = *(_DWORD *)(*(void *)v532 + 144LL);
          if (*(void *)&v532[8])
          {
            unint64_t v269 = (unint64_t *)(*(void *)&v532[8] + 8LL);
            do
              unint64_t v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }

          if (v268 == 1886152047) {
            break;
          }
          uint64_t v266 = *(void *)(v266 + 8);
          if (v266 == v265) {
            goto LABEL_507;
          }
        }

        uint64_t v265 = v266;
LABEL_507:
        BOOL v264 = *(unsigned int **)v246;
      }

      if ((unsigned int *)v265 == v264 + 4 || *(unsigned __int8 *)(v246 + 156) == *(unsigned __int8 *)(v263 + 124))
      {
        int v274 = 4;
        if (*(_BYTE *)(v246 + 168)) {
          int v275 = 2;
        }
        else {
          int v275 = 4;
        }
        if (!*(_BYTE *)(v246 + 168)) {
          goto LABEL_533;
        }
      }

      else
      {
LABEL_518:
        int v275 = 2;
      }

      uint64_t v276 = *(void *)(v263 + 16);
      if (v276 != v263 + 8)
      {
        char v277 = &__p[1];
        while (1)
        {
          char v277 = (void **)v277[1];
          uint64_t v276 = *(void *)(v276 + 8);
          if (v276 == v263 + 8) {
            goto LABEL_526;
          }
        }

LABEL_532:
        int v274 = 2;
        goto LABEL_533;
      }

  *(_DWORD *)(a2 + 400) = v418;
  *(_BYTE *)(a2 + 404) = v419;
  unint64_t v310 = v420;
  v311 = v421;
  if (v421)
  {
    v312 = (unint64_t *)(v421 + 16);
    do
      unint64_t v313 = __ldxr(v312);
    while (__stxr(v313 + 1, v312));
  }

  v314 = *(std::__shared_weak_count **)(a2 + 416);
  *(void *)(a2 + 40std::iostream::~basic_iostream(v2, v5 + 8) = v310;
  *(void *)(a2 + 416) = v311;
  if (v314) {
    std::__shared_weak_count::__release_weak(v314);
  }
  unint64_t v315 = v422;
  int v316 = v423;
  if (v423)
  {
    BOOL v317 = (unint64_t *)(v423 + 16);
    do
      uint64_t v318 = __ldxr(v317);
    while (__stxr(v318 + 1, v317));
  }

  v319 = *(std::__shared_weak_count **)(a2 + 432);
  *(void *)(a2 + 424) = v315;
  *(void *)(a2 + 4sub_7A768(v2 - 32) = v316;
  if (v319) {
    std::__shared_weak_count::__release_weak(v319);
  }
  uint64_t v320 = *(id *)sub_138E8(2);
  unint64_t v321 = v320;
  if (v320)
  {
    int v322 = (os_log_s *)v320;
    if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
    {
      sub_22C764(&v433, (int *)(a2 + 400));
      v323 = (v433.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v433 : (std::string *)v433.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3862;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v323;
      _os_log_impl( &dword_0,  v322,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Saving expanse info in VAPlugin: %s:",  (uint8_t *)buf,  0x1Cu);
    }
  }

  sub_2693E4((uint64_t)v384, (uint64_t)&v391);
  unint64_t v324 = v384[0];
  if (v384[0] == 1668509810LL) {
    unint64_t v324 = 1668309362;
  }
  v384[0] = v324;
  sub_2697F0((uint64_t)buf, (uint64_t)v384);
  sub_269ACC(a1, (uint64_t)&v441, (uint64_t)buf);
  sub_52EF0((uint64_t)buf);
  sub_52EF0((uint64_t)v384);
  sub_EDF34(v387);
  *(void *)&v441 = off_4709D0;
  uint64_t v137 = v442;
  if (v442)
  {
LABEL_553:
    sub_10AF78(v137 + 2);
    operator delete(v137);
  }

LABEL_526:
      if (!sub_11A788(v263 + 32, &__p[4])
        || *(_DWORD *)(v263 + 80) == (_DWORD)cf
        || !sub_11A8D4((unsigned __int8 *)(v263 + 88), cf_8))
      {
        goto LABEL_532;
      }

      if (*(unsigned __int8 *)(v263 + 124) == cf_8[36])
      {
        int v275 = 3;
        int v274 = 3;
      }

      else
      {
        int v274 = 2;
      }

LABEL_533:
      uint64_t v278 = sub_138E8(8);
      if ((*(_BYTE *)(v278 + 8) & 1) != 0)
      {
        uint64_t v279 = *(os_log_s **)v278;
        if (*(void *)v278)
        {
          if (os_log_type_enabled(*(os_log_t *)v278, OS_LOG_TYPE_DEBUG))
          {
            sub_33464((std::string *)buf, (unsigned int *)v254);
            if (buf[23] >= 0) {
              v280 = buf;
            }
            else {
              v280 = *(_BYTE **)buf;
            }
            sub_7D084(&__dst, off_46F498[v275]);
            int v281 = SHIBYTE(v518);
            uint64_t v282 = (__int128 *)__dst;
            int v283 = sub_118780(v263, (uint64_t)__p);
            *(_DWORD *)v532 = 136316162;
            v284 = &__dst;
            if (v281 < 0) {
              v284 = v282;
            }
            *(void *)&v532[4] = "RoutingManager.cpp";
            uint64_t v285 = "different than";
            if (v283) {
              uint64_t v285 = "the same as";
            }
            *(_WORD *)&v532[12] = 1024;
            *(_DWORD *)&v532[14] = 3202;
            *(_WORD *)&v532[18] = 2080;
            *(void *)&v532[20] = v280;
            *(_WORD *)&v532[28] = 2080;
            *(void *)&v532[30] = v284;
            *(_WORD *)&v532[38] = 2080;
            *(void *)&__int128 v533 = v285;
            _os_log_impl( &dword_0,  v279,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Reconfiguration Context for %s will be %s because the cashed route snapshot is %s the new route snapshot.",  v532,  0x30u);
            if (SHIBYTE(v518) < 0) {
              operator delete((void *)__dst);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            int v274 = v275;
          }
        }
      }

      BOOL v286 = (v274 - 5) >= 0xFFFFFFFE && (_DWORD)v259 == 1986291046;
      int v287 = v487;
      if (!v286) {
        int v287 = 1;
      }
      if (v287) {
        int v271 = v275;
      }
      else {
        int v271 = 2;
      }
      unsigned __int8 v288 = sub_DDAB0(*(_DWORD *)(v263 + 120));
      unsigned __int8 v289 = sub_DDAB0(*(int *)&cf_8[32]);
      unint64_t v290 = (char *)((char *)v529[1] - (char *)(v262 + 1));
      if (v529[1] != v262 + 1) {
        memmove(v262, v262 + 1, (char *)v529[1] - (char *)(v262 + 1));
      }
      v529[1] = &v290[(void)v262];
      char v272 = v498;
      if (cf_8[24] && (cf_8[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf_8);
      }
      sub_32C8C(&v547[0]->__vftable);
      sub_32C8C((void *)__p[5]);
      sub_DCF14((uint64_t *)&__p[1]);
      if (((v288 ^ v289) & 1) != 0) {
LABEL_562:
      }
        int v494 = 1;
LABEL_563:
      *(_DWORD *)(v246 + 20std::iostream::~basic_iostream(v2, v5 + 8) = v271;
      *(_BYTE *)(v246 + 212) = 1;
      if (sub_56120() != 2
        && sub_56120() != 3
        && sub_56120() != 4
        && sub_56120() != 5
        && sub_56120() != 195
        || v494)
      {
        uint64_t v291 = sub_138E8(8);
        if ((*(_BYTE *)(v291 + 8) & 1) != 0)
        {
          v292 = *(os_log_s **)v291;
          if (*(void *)v291)
          {
            if (os_log_type_enabled(*(os_log_t *)v291, OS_LOG_TYPE_DEBUG))
            {
              sub_33464((std::string *)v532, *(unsigned int **)v246);
              v293 = v532;
              if (v532[23] < 0) {
                v293 = *(_BYTE **)v532;
              }
              LODWORD(__p[0]) = 136315650;
              *(void **)((char *)__p + 4) = "RoutingManager.cpp";
              WORD2(__p[1]) = 1024;
              *(_DWORD *)((char *)&__p[1] + 6) = 3261;
              WORD1(__p[2]) = 2080;
              *(void **)((char *)&__p[2] + 4) = v293;
              _os_log_impl( &dword_0,  v292,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Updating reconfiguration context based on shared hardware invalidation for %s.",  (uint8_t *)__p,  0x1Cu);
              if ((v532[23] & 0x80000000) != 0) {
                operator delete(*(void **)v532);
              }
            }
          }
        }

        uint64_t v294 = *(unsigned int *)(v246 + 208);
        int v295 = *(_DWORD *)(v246 + 12);
        BOOL v296 = 1;
        if (v295 != 1986556788 && v295 != 1987208039) {
          BOOL v296 = v295 == 1987211117;
        }
        sub_DCF84((uint64_t *)v532, *(void *)v246, v296);
        unint64_t v297 = *(unsigned int **)v246;
        memset(__p, 0, 24);
        strcpy((char *)&__p[3], "cwdv");
        LOBYTE(__p[4]) = 0;
        LODWORD(__p[5]) = 3;
        __p[7] = 0LL;
        v547[0] = 0LL;
        __p[6] = &__p[7];
        LODWORD(v547[1]) = 44739242;
        uint64_t cf = 0LL;
        sub_7267C((unint64_t *)&v526, (uint64_t)v297, (uint64_t)__p);
        *(_DWORD *)(v246 + 20std::iostream::~basic_iostream(v2, v5 + 8) = sub_1188BC(v294, v532, &v526, (uint64_t *)v569);
        *(_BYTE *)(v246 + 212) = 1;
        sub_85B80((uint64_t *)&v526);
        if (cf) {
          CFRelease((CFTypeRef)cf);
        }
        sub_32C8C((void *)__p[7]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        sub_32C8C(*(void **)&v532[32]);
        sub_32C8C(*(void **)&v532[8]);
      }

      if (a14 == 1651799408)
      {
        int v308 = *(_DWORD *)(v246 + 12);
        BOOL v309 = 1;
        if (v308 != 1986556788 && v308 != 1987208039) {
          BOOL v309 = v308 == 1987211117;
        }
        sub_DCF84((uint64_t *)__p, *(void *)v246, v309);
        unint64_t v310 = (void **)__p[0];
        if (__p[0] != &__p[1])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v310[4] + 384LL))(v310[4]) & 1) == 0)
          {
            v311 = (void **)v310[1];
            if (v311)
            {
              do
              {
                v312 = v311;
                v311 = (void **)*v311;
              }

              while (v311);
            }

            else
            {
              do
              {
                v312 = (void **)v310[2];
                BOOL v37 = *v312 == v310;
                unint64_t v310 = v312;
              }

              while (!v37);
            }

            unint64_t v310 = v312;
            if (v312 == &__p[1]) {
              goto LABEL_623;
            }
          }

          goto LABEL_632;
        }

LABEL_623:
        unint64_t v313 = (void **)__p[3];
        if (__p[3] != &__p[4])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v313[4] + 384LL))(v313[4]) & 1) == 0)
          {
            v314 = (void **)v313[1];
            if (v314)
            {
              do
              {
                unint64_t v315 = v314;
                v314 = (void **)*v314;
              }

              while (v314);
            }

            else
            {
              do
              {
                unint64_t v315 = (void **)v313[2];
                BOOL v37 = *v315 == v313;
                unint64_t v313 = v315;
              }

              while (!v37);
            }

            unint64_t v313 = v315;
            if (v315 == &__p[4]) {
              goto LABEL_633;
            }
          }

LABEL_632:
          *(_DWORD *)(v246 + 20std::iostream::~basic_iostream(v2, v5 + 8) = 2;
          *(_BYTE *)(v246 + 212) = 1;
        }
      }

      else
      {
        if (a14 != 1667327075)
        {
          if (a14 == 1920429155)
          {
            uint64_t v298 = *(void *)v246 + 16LL;
            for (iuint64_t i = *(void *)(*(void *)v246 + 24LL); ii != v298; iuint64_t i = *(void *)(ii + 8))
            {
              if (sub_1F5F2C(1885892674, (uint64_t *)(ii + 16)))
              {
                int v316 = 2;
                *(_DWORD *)(v246 + 20std::iostream::~basic_iostream(v2, v5 + 8) = 2;
                *(_BYTE *)(v246 + 212) = 1;
                goto LABEL_636;
              }
            }
          }

          goto LABEL_634;
        }

        int v300 = *(_DWORD *)(v246 + 12);
        BOOL v301 = 1;
        if (v300 != 1986556788 && v300 != 1987208039) {
          BOOL v301 = v300 == 1987211117;
        }
        sub_DCF84((uint64_t *)__p, *(void *)v246, v301);
        v302 = (void **)__p[0];
        if (__p[0] != &__p[1])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v302[4] + 392LL))(v302[4]) & 1) == 0)
          {
            v303 = (void **)v302[1];
            if (v303)
            {
              do
              {
                __int128 v304 = v303;
                v303 = (void **)*v303;
              }

              while (v303);
            }

            else
            {
              do
              {
                __int128 v304 = (void **)v302[2];
                BOOL v37 = *v304 == v302;
                v302 = v304;
              }

              while (!v37);
            }

            v302 = v304;
            if (v304 == &__p[1]) {
              goto LABEL_601;
            }
          }

          goto LABEL_610;
        }

LABEL_601:
        int64x2_t v305 = (void **)__p[3];
        if (__p[3] != &__p[4])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v305[4] + 392LL))(v305[4]) & 1) == 0)
          {
            v306 = (void **)v305[1];
            if (v306)
            {
              do
              {
                uint64_t v307 = v306;
                v306 = (void **)*v306;
              }

              while (v306);
            }

            else
            {
              do
              {
                uint64_t v307 = (void **)v305[2];
                BOOL v37 = *v307 == v305;
                int64x2_t v305 = v307;
              }

              while (!v37);
            }

            int64x2_t v305 = v307;
            if (v307 == &__p[4]) {
              goto LABEL_633;
            }
          }

LABEL_610:
          *(_DWORD *)(v246 + 20std::iostream::~basic_iostream(v2, v5 + 8) = 2;
          *(_BYTE *)(v246 + 212) = 1;
        }
      }

LABEL_633:
      sub_32C8C((void *)__p[4]);
      sub_32C8C((void *)__p[1]);
LABEL_634:
      if (!*(_BYTE *)(v246 + 212))
      {
        v442 = (os_log_t *)sub_138E8(13);
        v443 = *v442;
        if (*v442 && os_log_type_enabled(*v442, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3318;
          _os_log_impl( &dword_0,  v443,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Route reconfiguration context must be valid at this point.",  (uint8_t *)__p,  0x12u);
        }

        v444 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v444, "Route reconfiguration context must be valid at this point.");
      }

      int v316 = *(_DWORD *)(v246 + 208);
LABEL_636:
      if (v272) {
        BOOL v317 = v316 == 4;
      }
      else {
        BOOL v317 = 0;
      }
      char v247 = v317;
      uint64_t v318 = sub_138E8(8);
      if ((*(_BYTE *)(v318 + 8) & 1) != 0)
      {
        v319 = *(os_log_s **)v318;
        if (*(void *)v318)
        {
          if (os_log_type_enabled(*(os_log_t *)v318, OS_LOG_TYPE_DEBUG))
          {
            sub_33464((std::string *)v532, *(unsigned int **)v246);
            uint64_t v320 = *(unsigned int *)(v246 + 208);
            unint64_t v321 = "????";
            int v322 = v532[23];
            v323 = *(_BYTE **)v532;
            sub_7D084(buf, v321);
            unint64_t v324 = v532;
            if (v322 < 0) {
              unint64_t v324 = v323;
            }
            v325 = buf;
            if (buf[23] < 0) {
              v325 = *(_BYTE **)buf;
            }
            LODWORD(__p[0]) = 136315906;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3324;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v324;
            WORD2(__p[3]) = 2080;
            *(void **)((char *)&__p[3] + 6) = v325;
            _os_log_impl( &dword_0,  v319,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Completed determination of base reconfiguration context for %s. Inserting %s into the multirouteprocessinginfo.",  (uint8_t *)__p,  0x26u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if ((v532[23] & 0x80000000) != 0) {
              operator delete(*(void **)v532);
            }
          }
        }
      }

      uint64_t v326 = *(void *)&v569[8];
      if (*(void *)&v569[8] >= *(void *)&v569[16])
      {
        unint64_t v328 = 0x84BDA12F684BDA13LL * ((uint64_t)(*(void *)&v569[8] - *(void *)v569) >> 3);
        unint64_t v329 = v328 + 1;
        if (v328 + 1 > 0x12F684BDA12F684LL) {
          sub_7A87C();
        }
        else {
          unint64_t v330 = v329;
        }
        __p[4] = &v569[16];
        if (v330)
        {
          unint64_t v332 = (char *)sub_119BDC(v330);
        }

        else
        {
          unint64_t v332 = 0LL;
          uint64_t v331 = 0LL;
        }

        __p[0] = v332;
        __p[1] = &v332[216 * v328];
        __p[2] = __p[1];
        __p[3] = &v332[216 * v331];
        sub_1199C0((uint64_t)__p[1], v246);
        *(void *)&v332[216 * v328 + 208] = *(void *)(v246 + 208);
        __p[2] = (char *)__p[2] + 216;
        sub_119DB8((uint64_t *)v569, __p);
        uint64_t v327 = *(void *)&v569[8];
        sub_119E90((uint64_t)__p);
      }

      else
      {
        sub_1199C0(*(uint64_t *)&v569[8], v246);
        *(void *)(v326 + 20std::iostream::~basic_iostream(v2, v5 + 8) = *(void *)(v246 + 208);
        uint64_t v327 = v326 + 216;
      }

      *(void *)&v569[8] = v327;
      v246 += 216LL;
      if (v246 == v489) {
        goto LABEL_673;
      }
    }
  }

  char v247 = 1;
LABEL_673:
  memset(v532, 0, 24);
  v333 = (uint64_t *)v529[0];
  uint64_t v334 = (uint64_t *)v529[1];
  if (v529[0] != v529[1])
  {
    uint64_t v335 = sub_138E8(8);
    if ((*(_BYTE *)(v335 + 8) & 1) != 0)
    {
      v336 = *(os_log_s **)v335;
      if (*(void *)v335)
      {
        if (os_log_type_enabled(*(os_log_t *)v335, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3332;
          _os_log_impl( &dword_0,  v336,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Beginning to prune obsolete snapshots.",  (uint8_t *)__p,  0x12u);
        }
      }
    }

    v337 = v333;
    do
    {
      if (!*v337)
      {
        v439 = (os_log_t *)sub_138E8(13);
        v440 = *v439;
        if (*v439 && os_log_type_enabled(*v439, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3335;
          _os_log_impl( &dword_0,  v440,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
        }

        v441 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v441, "Precondition failure.");
      }

      uint64_t v338 = sub_138E8(8);
      if ((*(_BYTE *)(v338 + 8) & 1) != 0)
      {
        __int128 v339 = *(os_log_s **)v338;
        if (*(void *)v338)
        {
          if (os_log_type_enabled(*(os_log_t *)v338, OS_LOG_TYPE_DEBUG))
          {
            sub_DDB64((std::string *)buf, *v337);
            int64x2_t v340 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            LODWORD(__p[0]) = 136315650;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3336;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v340;
            _os_log_impl( &dword_0,  v339,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Destroying obsolete snapshot %s.",  (uint8_t *)__p,  0x1Cu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
      }

      if (sub_7051C())
      {
        sub_DD588((uint64_t *)buf, *v337);
      }

      else
      {
        *(void *)AudioObjectPropertyAddress buf = buf;
        *(void *)&buf[8] = buf;
        *(void *)&_DWORD buf[16] = 0LL;
      }

      uint64_t v341 = *v337;
      sub_119D68((uint64_t *)__p, *v337 + 32);
      sub_119D68((uint64_t *)&__p[3], v341 + 56);
      sub_85A90((uint64_t *)&__dst, buf);
      sub_1188BC(0LL, __p, &__dst, (uint64_t *)v569);
      sub_85B80((uint64_t *)&__dst);
      sub_32C8C((void *)__p[4]);
      sub_32C8C((void *)__p[1]);
      v342 = *(void **)*v337;
      v547[1] = 0LL;
      uint64_t cf = 0LL;
      memset((char *)&__p[1] + 4, 0, 52);
      v547[0] = (std::__shared_weak_count *)&v547[1];
      memset(cf_8, 0, 28);
      __p[0] = v342;
      LODWORD(__p[1]) = 1;
      sub_119A94((uint64_t)v532, (__int128 *)__p);
      if (*(void *)cf_8)
      {
        *(void *)&cf_8[8] = *(void *)cf_8;
        operator delete(*(void **)cf_8);
      }

      sub_32C8C(&v547[1]->__vftable);
      sub_85B80((uint64_t *)buf);
      ++v337;
    }

    while (v337 != v334);
    uint64_t v343 = sub_138E8(8);
    if ((*(_BYTE *)(v343 + 8) & 1) != 0)
    {
      v344 = *(os_log_s **)v343;
      if (*(void *)v343)
      {
        if (os_log_type_enabled(*(os_log_t *)v343, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3344;
          _os_log_impl( &dword_0,  v344,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Completed pruning obsolete snapshots.",  (uint8_t *)__p,  0x12u);
        }
      }
    }

    char v247 = 0;
  }

  LOBYTE(v502) = v247;
  v504 = 0LL;
  __int128 v503 = 0uLL;
  uint64_t v345 = *(void *)v569;
  uint64_t v346 = *(void *)&v569[8];
  __p[0] = &v503;
  LOBYTE(__p[1]) = 0;
  if (*(void *)&v569[8] != *(void *)v569)
  {
    unint64_t v347 = 0x84BDA12F684BDA13LL * ((uint64_t)(*(void *)&v569[8] - *(void *)v569) >> 3);
    if (v347 > 0x12F684BDA12F684LL) {
      sub_7A87C();
    }
    v348 = (char *)sub_119BDC(v347);
    uint64_t v349 = 0LL;
    *(void *)&__int128 v503 = v348;
    *((void *)&v503 + 1) = v348;
    v504 = &v348[216 * v350];
    do
    {
      sub_1199C0((uint64_t)&v348[v349], v345 + v349);
      *(void *)&v348[v349 + 208] = *(void *)(v345 + v349 + 208);
      v349 += 216LL;
    }

    while (v345 + v349 != v346);
    *((void *)&v503 + 1) = &v348[v349];
  }

  v506 = 0LL;
  __int128 v505 = 0uLL;
  uint64_t v351 = *(void *)v532;
  uint64_t v352 = *(void *)&v532[8];
  __p[0] = &v505;
  LOBYTE(__p[1]) = 0;
  if (*(void *)&v532[8] != *(void *)v532)
  {
    unint64_t v353 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)&v532[8] - *(void *)v532) >> 3);
    if (v353 >= 0x222222222222223LL) {
      sub_7A87C();
    }
    int v354 = (char *)sub_119B98(v353);
    uint64_t v355 = 0LL;
    *(void *)&__int128 v505 = v354;
    *((void *)&v505 + 1) = v354;
    v506 = &v354[120 * v356];
    do
    {
      uint64_t v357 = v351 + v355;
      uint64_t v358 = &v354[v355];
      __int128 v359 = *(_OWORD *)(v351 + v355);
      __int128 v360 = *(_OWORD *)(v351 + v355 + 16);
      __int128 v361 = *(_OWORD *)(v351 + v355 + 48);
      *((_OWORD *)v358 + 2) = *(_OWORD *)(v351 + v355 + 32);
      *((_OWORD *)v358 + 3) = v361;
      *(_OWORD *)uint64_t v358 = v359;
      *((_OWORD *)v358 + 1) = v360;
      sub_1167B0((uint64_t)&v354[v355 + 64], (void *)(v351 + v355 + 64));
      *((void *)v358 + 11) = 0LL;
      *((void *)v358 + 12) = 0LL;
      *((void *)v358 + 13) = 0LL;
      sub_116930( &v354[v355 + 88],  *(__int128 **)(v357 + 88),  *(__int128 **)(v357 + 96),  (uint64_t)(*(void *)(v357 + 96) - *(void *)(v357 + 88)) >> 4);
      *(_DWORD *)&v354[v355 + 112] = *(_DWORD *)(v351 + v355 + 112);
      v355 += 120LL;
    }

    while (v357 + 120 != v352);
    v333 = (uint64_t *)v529[0];
    *((void *)&v505 + 1) = &v354[v355];
  }

  __p[0] = v532;
  sub_110D60((void ***)__p);
  if (v333)
  {
    v529[1] = v333;
    operator delete(v333);
  }

  __p[0] = v569;
  sub_110DD0((void ***)__p);
  int v362 = v502;
  v363 = (char *)v509[0];
  if (v509[0])
  {
    v364 = (char *)v509[1];
    uint64_t v365 = v509[0];
    if (v509[1] != v509[0])
    {
      do
      {
        v364 -= 216;
        sub_1184F0((uint64_t)v364);
      }

      while (v364 != v363);
      uint64_t v365 = v509[0];
    }

    v509[1] = v363;
    operator delete(v365);
  }

  *(_OWORD *)v509 = v503;
  v510 = v504;
  v504 = 0LL;
  __int128 v503 = 0uLL;
  __int128 v366 = (char *)v507[0];
  if (v507[0])
  {
    v367 = (char *)v507[1];
    char v368 = v507[0];
    if (v507[1] != v507[0])
    {
      do
      {
        v367 -= 120;
        sub_118540((uint64_t)v367);
      }

      while (v367 != v366);
      char v368 = v507[0];
    }

    v507[1] = v366;
    operator delete(v368);
  }

  *(_OWORD *)v507 = v505;
  v508 = v506;
  v506 = 0LL;
  __int128 v505 = 0uLL;
  __p[0] = &v505;
  sub_110D60((void ***)__p);
  __p[0] = &v503;
  sub_110DD0((void ***)__p);
  __p[0] = &v499;
  sub_110DD0((void ***)__p);
  if (!v362)
  {
    uint64_t v377 = sub_138E8(8);
    if ((*(_BYTE *)(v377 + 8) & 1) != 0)
    {
      v378 = *(os_log_s **)v377;
      if (*(void *)v377)
      {
        if (os_log_type_enabled(*(os_log_t *)v377, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 2898;
          _os_log_impl( &dword_0,  v378,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Route change was NOT redundant, performing full activation",  (uint8_t *)__p,  0x12u);
        }
      }
    }

    uint64_t v379 = (_DWORD **)v509[0];
    if (v509[0] != v509[1])
    {
      while (**v379 != 1986291046)
      {
        v379 += 27;
        if (v379 == v509[1]) {
          goto LABEL_733;
        }
      }
    }

    if (v379 == v509[1])
    {
LABEL_733:
      v380 = (os_log_t *)sub_138E8(13);
      v381 = *v380;
      if (*v380 && os_log_type_enabled(*v380, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 2904;
        _os_log_impl( &dword_0,  v381,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
      }

      v382 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v382, "Precondition failure.");
    }

    uint64_t v383 = 1918989155LL;
    if (a14 != 1918989155)
    {
      if (*((_DWORD *)v379 + 52) != 4 || *((_BYTE *)v379 + 212) == 0) {
        uint64_t v383 = a14;
      }
      else {
        uint64_t v383 = 1919181936LL;
      }
    }

    __int16 v385 = (os_log_t *)sub_138E8(8);
    v386 = *v385;
    if (*v385 && os_log_type_enabled(*v385, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v532, v383);
      v387 = v532[23] >= 0 ? v532 : *(_BYTE **)v532;
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2921;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v387;
      _os_log_impl(&dword_0, v386, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route change reason: %s", (uint8_t *)__p, 0x1Cu);
      if ((v532[23] & 0x80000000) != 0) {
        operator delete(*(void **)v532);
      }
    }

    sub_11173C( (uint64_t)__p,  a2,  (uint64_t *)v509,  (unsigned int **)v507,  (uint64_t)a5,  v473,  (uint64_t)v474,  v472,  a9,  (unsigned int *)a10,  a11,  a12,  a13,  v383,  (const std::string *)a15);
    sub_725DC(a1, (uint64_t)__p);
    goto LABEL_835;
  }

  uint64_t v369 = a1;
  uint64_t v370 = sub_138E8(8);
  uint64_t v371 = sub_138E8(34);
  char v372 = 0;
  uint64_t v373 = 0LL;
  __p[0] = (void *)0x100000002LL;
  uint64_t v374 = *(void *)(v370 + 8);
  while (1)
  {
    uint64_t v375 = *((int *)__p + v373);
    char v376 = v372;
    if (((v374 & v375) != 0) != ((*(void *)(v371 + 8) & v375) != 0)) {
      break;
    }
    char v372 = 1;
    uint64_t v373 = 1LL;
    if ((v376 & 1) != 0) {
      goto LABEL_755;
    }
  }

  if ((v374 & v375) == 0) {
    uint64_t v370 = v371;
  }
LABEL_755:
  std::string v388 = *(os_log_s **)v370;
  if (v388 && os_log_type_enabled(v388, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2860;
    _os_log_impl( &dword_0,  v388,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Redundant concrete route(s) encountered. Bypassing full activation.",  (uint8_t *)__p,  0x12u);
  }

  sub_72210((uint64_t)__p, 1920099684LL);
  sub_725DC(a1, (uint64_t)__p);
  __p[0] = off_4709D0;
  v389 = __p[2];
  if (__p[2])
  {
    sub_10AF78((uint64_t *)__p[2] + 2);
    operator delete(v389);
  }

  if ((void **)(a2 + 48) != a5) {
    sub_52A24(a2 + 48, *a5, a5 + 1);
  }
  v390 = (os_log_t *)sub_138E8(8);
  v391 = *v390;
  if (*v390 && os_log_type_enabled(*v390, OS_LOG_TYPE_DEBUG))
  {
    sub_110E40((std::string *)v532, *(void **)(a2 + 48), (void *)(a2 + 56));
    int v392 = v532[23];
    v393 = *(_BYTE **)v532;
    sub_110E40((std::string *)buf, *a5, a5 + 1);
    v394 = v532;
    if (v392 < 0) {
      v394 = v393;
    }
    if (buf[23] >= 0) {
      v395 = buf;
    }
    else {
      v395 = *(_BYTE **)buf;
    }
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2865;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v394;
    WORD2(__p[3]) = 2080;
    *(void **)((char *)&__p[3] + 6) = v395;
    _os_log_impl( &dword_0,  v391,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mDisallowedPortTypes. Old: %s; new: %s.",
      (uint8_t *)__p,
      0x26u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v369 = a1;
    if ((v532[23] & 0x80000000) != 0) {
      operator delete(*(void **)v532);
    }
  }

  if ((void **)(a2 + 120) != v474) {
    sub_52A24(a2 + 120, *v474, v474 + 1);
  }
  v396 = (os_log_t *)sub_138E8(8);
  v397 = *v396;
  if (*v396 && os_log_type_enabled(*v396, OS_LOG_TYPE_DEBUG))
  {
    sub_110E40((std::string *)v532, *(void **)(a2 + 120), (void *)(a2 + 128));
    int v398 = v532[23];
    v399 = *(_BYTE **)v532;
    sub_110E40((std::string *)buf, *v474, v474 + 1);
    v400 = v532;
    if (v398 < 0) {
      v400 = v399;
    }
    if (buf[23] >= 0) {
      v401 = buf;
    }
    else {
      v401 = *(_BYTE **)buf;
    }
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2868;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v400;
    WORD2(__p[3]) = 2080;
    *(void **)((char *)&__p[3] + 6) = v401;
    _os_log_impl( &dword_0,  v397,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mAllowedPortTypes. Old: %s; new: %s.",
      (uint8_t *)__p,
      0x26u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v369 = a1;
    if ((v532[23] & 0x80000000) != 0) {
      operator delete(*(void **)v532);
    }
  }

  v402 = (os_log_t *)sub_138E8(8);
  v403 = *v402;
  if (*v402 && os_log_type_enabled(*v402, OS_LOG_TYPE_DEBUG))
  {
    sub_173AF4((std::string *)v532, (void *)(a2 + 216));
    int v404 = v532[23];
    v405 = *(_BYTE **)v532;
    sub_173AF4((std::string *)buf, (void *)a11);
    v406 = v532;
    if (v404 < 0) {
      v406 = v405;
    }
    if (buf[23] >= 0) {
      v407 = buf;
    }
    else {
      v407 = *(_BYTE **)buf;
    }
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2870;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v406;
    WORD2(__p[3]) = 2080;
    *(void **)((char *)&__p[3] + 6) = v407;
    _os_log_impl( &dword_0,  v403,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mPreferredPersistentRoute. Old: %s; new: %s.",
      (uint8_t *)__p,
      0x26u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v369 = a1;
    if ((v532[23] & 0x80000000) != 0) {
      operator delete(*(void **)v532);
    }
  }

  if (a2 + 216 != a11)
  {
    sub_8D094( a2 + 216,  *(const void ***)a11,  *(const void ***)(a11 + 8),  (uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 3);
    sub_8D094( a2 + 240,  *(const void ***)(a11 + 24),  *(const void ***)(a11 + 32),  (uint64_t)(*(void *)(a11 + 32) - *(void *)(a11 + 24)) >> 3);
    *(_DWORD *)(a2 + 2sub_19DFC(v32 - 96) = *(_DWORD *)(a11 + 80);
    sub_52360((void *)(a2 + 264), *(char **)(a11 + 64));
    *(_DWORD *)(a2 + 336) = *(_DWORD *)(a11 + 120);
    sub_52360((void *)(a2 + 304), *(char **)(a11 + 104));
    *(_DWORD *)(a2 + 376) = *(_DWORD *)(a11 + 160);
    sub_52360((void *)(a2 + 344), *(char **)(a11 + 144));
  }

  *(_BYTE *)(a2 + 384) = a12;
  if (a12)
  {
    sub_111034((uint64_t ***)__p, v473);
    uint64_t v408 = a2 + 80;
    sub_1112B0(*(void **)(a2 + 80));
    v409 = __p[1];
    *(void **)(a2 + 72) = __p[0];
    v410 = (uint64_t *)(a2 + 72);
    *(void *)(a2 + (*(void (**)(uint64_t))(*(void *)(v4 + 80) + 24LL))(v4 + 80) = v409;
    v411 = __p[2];
    *(void **)(a2 + 8std::iostream::~basic_iostream(v2, v5 + 8) = __p[2];
    if (v411)
    {
      v409[2] = v408;
      __p[0] = &__p[1];
      __p[1] = 0LL;
      __p[2] = 0LL;
    }

    else
    {
      uint64_t *v410 = v408;
    }

    uint64_t v412 = a2 + 104;
    sub_1112F0(*(void **)(a2 + 104));
    v413 = __p[4];
    *(void **)(a2 + sub_19DFC(v32 - 96) = __p[3];
    *(void *)(a2 + 104) = v413;
    v414 = __p[5];
    *(void **)(a2 + sub_19DFC(v32 - 112) = __p[5];
    if (v414)
    {
      v413[2] = v412;
      __p[3] = &__p[4];
      *(_OWORD *)&__p[4] = 0uLL;
      v413 = 0LL;
    }

    else
    {
      *(void *)(a2 + sub_19DFC(v32 - 96) = v412;
    }

    sub_1112F0(v413);
    sub_1112B0((void *)__p[1]);
    v415 = (os_log_t *)sub_138E8(8);
    v416 = *v415;
    if (*v415)
    {
      if (os_log_type_enabled(*v415, OS_LOG_TYPE_DEBUG))
      {
        sub_111330((std::string *)v532, (uint64_t)v410);
        v417 = v532[23] >= 0 ? v532 : *(_BYTE **)v532;
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 2877;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v417;
        _os_log_impl( &dword_0,  v416,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mDisallowedPorts to : %s.",  (uint8_t *)__p,  0x1Cu);
        if ((v532[23] & 0x80000000) != 0) {
          operator delete(*(void **)v532);
        }
      }
    }
  }

  if (!sub_1116D0((uint64_t)v480, (uint64_t)v476))
  {
    v418 = (os_log_t *)sub_138E8(8);
    v419 = *v418;
    if (*v418 && os_log_type_enabled(*v418, OS_LOG_TYPE_DEBUG))
    {
      sub_2DB6FC((std::string *)v532, v480);
      int v420 = v532[23];
      v421 = *(_BYTE **)v532;
      sub_2DB6FC((std::string *)buf, v476);
      v422 = v532;
      if (v420 < 0) {
        v422 = v421;
      }
      if (buf[23] >= 0) {
        v423 = buf;
      }
      else {
        v423 = *(_BYTE **)buf;
      }
      LODWORD(__p[0]) = 136315906;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2882;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v422;
      WORD2(__p[3]) = 2080;
      *(void **)((char *)&__p[3] + 6) = v423;
      _os_log_impl( &dword_0,  v419,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting current category and mode. old: %s; new: '%s'",
        (uint8_t *)__p,
        0x26u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v369 = a1;
      if ((v532[23] & 0x80000000) != 0) {
        operator delete(*(void **)v532);
      }
    }

    *(_OWORD *)v480 = *(_OWORD *)v476;
    if (*(_DWORD *)a10 != 1635087471)
    {
      *(_DWORD *)(a2 + sub_19DFC(v35 - 176) = *(_DWORD *)a10;
      std::string::operator=((std::string *)(a2 + 184), (const std::string *)(a10 + 8));
      *(void *)(a2 + 20std::iostream::~basic_iostream(v2, v5 + 8) = *(void *)(a10 + 32);
      uint64_t v424 = sub_138E8(8);
      if ((*(_BYTE *)(v424 + 8) & 1) != 0)
      {
        v425 = *(os_log_s **)v424;
        if (*(void *)v424)
        {
          if (os_log_type_enabled(*(os_log_t *)v424, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(v532, *(unsigned int *)(a2 + 176));
            v426 = v532[23] >= 0 ? v532 : *(_BYTE **)v532;
            LODWORD(__p[0]) = 136315650;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 2889;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v426;
            _os_log_impl( &dword_0,  v425,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Set RouteInitiationInfo to %s.",  (uint8_t *)__p,  0x1Cu);
            if ((v532[23] & 0x80000000) != 0) {
              operator delete(*(void **)v532);
            }
          }
        }
      }
    }

    sub_72210((uint64_t)__p, 1919186544LL);
    sub_725DC(v369, (uint64_t)__p);
LABEL_835:
    __p[0] = off_4709D0;
    v427 = __p[2];
    if (__p[2])
    {
      sub_10AF78((uint64_t *)__p[2] + 2);
      operator delete(v427);
    }
  }

  if (v483) {
    std::__shared_weak_count::__release_weak(v483);
  }
  __p[0] = v507;
  sub_110D60((void ***)__p);
  __p[0] = v509;
  sub_110DD0((void ***)__p);
  sub_85D64(v512);
  __p[0] = &v514;
  sub_116320((void ***)__p);
}

void sub_110344( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t *a63)
{
  a72 = (uint64_t)&STACK[0x230];
  sub_110D60((void ***)&a72);
  a72 = (uint64_t)&STACK[0x250];
  sub_110DD0((void ***)&a72);
  sub_7058C(a28);
  sub_85D64((void *)STACK[0x278]);
  a72 = (uint64_t)&STACK[0x288];
  sub_116320((void ***)&a72);
  _Unwind_Resume(a1);
}

uint64_t sub_110A78(int64x2_t *a1, __n128 *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555LL) {
    sub_7A87C();
  }
  if (0x5555555555555556LL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556LL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555LL;
  }
  else {
    unint64_t v6 = v3;
  }
  BOOL v29 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555LL) {
      sub_7A8C4();
    }
    uint64_t v7 = operator new(48 * v6);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  uint64_t v8 = (char *)&v7[6 * v2];
  std::string::size_type v26 = v7;
  v27.i64[0] = (uint64_t)v8;
  v27.i64[1] = (uint64_t)v8;
  unsigned int v28 = (char *)&v7[6 * v6];
  *(void *)uint64_t v8 = a2->n128_u64[0];
  *((_DWORD *)v8 + 2) = a2->n128_u32[2];
  sub_719C8((__n128 **)v8 + 2, a2 + 1);
  v7[6 * v2 + 5] = a2[2].n128_u64[1];
  uint64_t v9 = v27.i64[0];
  uint64_t v10 = v27.i64[1] + 48;
  v27.i64[1] += 48LL;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v23 = vdupq_n_s64(v11);
  }

  else
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = v11 + v13;
      uint64_t v16 = *(void *)(v11 + v13 - 48);
      *(_DWORD *)(v14 - 40) = *(_DWORD *)(v11 + v13 - 40);
      *(void *)(v14 - 4std::iostream::~basic_iostream(v2, v5 + 8) = v16;
      uint64_t v17 = (uint64_t *)(v9 + v13 - 32);
      *(void *)(v14 - sub_7A768(v2 - 32) = v17;
      *(void *)(v14 - 24) = v17;
      *(void *)(v14 - 16) = 0LL;
      uint64_t v18 = *(void *)(v11 + v13 - 16);
      if (v18)
      {
        uint64_t v20 = *(void *)(v15 - 32);
        BOOL v19 = *(uint64_t **)(v15 - 24);
        uint64_t v21 = *v19;
        *(void *)(v21 + std::iostream::~basic_iostream(v2, v5 + 8) = *(void *)(v20 + 8);
        **(void **)(v20 + std::iostream::~basic_iostream(v2, v5 + 8) = v21;
        uint64_t v22 = *v17;
        *(void *)(v22 + std::iostream::~basic_iostream(v2, v5 + 8) = v19;
        *BOOL v19 = v22;
        uint64_t *v17 = v20;
        *(void *)(v20 + std::iostream::~basic_iostream(v2, v5 + 8) = v17;
        *(void *)(v14 - 16) = v18;
        *(void *)(v15 - 16) = 0LL;
      }

      *(void *)(v14 - std::iostream::~basic_iostream(v2, v5 + 8) = *(void *)(v15 - 8);
      v13 -= 48LL;
    }

    while (v11 + v13 != v12);
    v9 += v13;
    int64x2_t v23 = *a1;
    uint64_t v10 = v27.i64[1];
  }

  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v27 = v23;
  __int128 v24 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v28;
  unsigned int v28 = v24;
  std::string::size_type v26 = (void *)v23.i64[0];
  sub_721C0((uint64_t)&v26);
  return v10;
}

void sub_110C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_110C60(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v9 = operator new(0x48uLL);
  uint64_t v10 = v9;
  v16[0] = v9;
  v16[1] = v8;
  char v17 = 0;
  v9[4] = a2;
  unint64_t v11 = v9 + 4;
  double v9[5] = a3;
  if (a3)
  {
    uint64_t v12 = (unint64_t *)(a3 + 16);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  v9[6] = 0LL;
  v9[7] = 0LL;
  v9[8] = 0LL;
  sub_7A5B8(v9 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  char v17 = 1;
  uint64_t v14 = (uint64_t **)sub_103C68((uint64_t)a1, &v15, v11);
  if (!*v14)
  {
    sub_32C38(a1, v15, v14, v10);
    v16[0] = 0LL;
  }

  sub_862A0((uint64_t)v16);
}

void sub_110D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_110D60(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120LL;
        sub_118540(v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_110DD0(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216LL;
        sub_1184F0(v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

std::string *sub_110E40(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2CA1C(&v16, *((unsigned int *)a2 + 7));
      unint64_t v6 = std::string::insert(&v16, 0LL, "'", 1uLL);
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v8 = std::string::append(&v17, "'", 1uLL);
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      int64_t cap = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v11 = HIBYTE(cap);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          unint64_t v13 = (void *)a2[2];
          BOOL v14 = *v13 == (void)a2;
          a2 = v13;
        }

        while (!v14);
      }

      if (v13 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v13;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_110FC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

void sub_111034(uint64_t ***a1, void *a2)
{
  a1[1] = 0LL;
  uint64_t v4 = (uint64_t **)(a1 + 1);
  a1[2] = 0LL;
  *a1 = (uint64_t **)(a1 + 1);
  a1[4] = 0LL;
  a1[3] = (uint64_t **)(a1 + 4);
  uint64_t v5 = (uint64_t **)(a1 + 3);
  a1[5] = 0LL;
  sub_11801C((uint64_t)&v28, a2);
  sub_1112B0(a1[1]);
  unint64_t v6 = v29;
  *a1 = v28;
  a1[1] = (uint64_t **)v6;
  __int128 v7 = v30;
  a1[2] = (uint64_t **)v30;
  if (v7)
  {
    v6[2] = (uint64_t)v4;
    uint64_t v28 = &v29;
    BOOL v29 = 0LL;
    unint64_t v30 = 0LL;
    unint64_t v6 = 0LL;
  }

  else
  {
    *a1 = v4;
  }

  sub_1112B0(v6);
  uint64_t v8 = (void *)a2[3];
  int64x2_t v23 = a2 + 4;
  if (v8 != a2 + 4)
  {
    __int128 v9 = *v5;
    do
    {
      sub_11801C((uint64_t)&v32, v8 + 5);
      unsigned int v24 = *((_DWORD *)v8 + 8);
      uint64_t v10 = v33;
      unint64_t v25 = v32;
      std::string::size_type v26 = v33;
      uint64_t v27 = v34;
      if (v34)
      {
        v33[2] = &v26;
        uint64_t v32 = (uint64_t *)&v33;
        unsigned int v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v10 = 0LL;
      }

      else
      {
        unint64_t v25 = (uint64_t *)&v26;
      }

      sub_1112B0(v10);
      LODWORD(v2std::iostream::~basic_iostream(v2, v5 + 8) = v24;
      std::string::size_type v11 = v25;
      BOOL v29 = v25;
      unint64_t v30 = v26;
      uint64_t v31 = v27;
      if (v27)
      {
        v26[2] = &v30;
        std::string::size_type v26 = 0LL;
        uint64_t v27 = 0LL;
      }

      else
      {
        BOOL v29 = (uint64_t *)&v30;
        std::string::size_type v11 = (uint64_t *)&v30;
      }

      uint64_t v12 = sub_1181CC(v5, v9, &v32, &v35, v24);
      unint64_t v13 = (void *)*v12;
      if (!*v12)
      {
        BOOL v14 = (uint64_t **)v12;
        uint64_t v15 = operator new(0x40uLL);
        unint64_t v13 = v15;
        std::string v16 = v30;
        uint64_t v17 = v31;
        v15[6] = v30;
        uint64_t v18 = (char *)(v15 + 6);
        *((_DWORD *)v15 + std::iostream::~basic_iostream(v2, v5 + 8) = v24;
        v15[5] = v11;
        v15[7] = v17;
        if (v17)
        {
          void v16[2] = v18;
          BOOL v29 = (uint64_t *)&v30;
          unint64_t v30 = 0LL;
          uint64_t v31 = 0LL;
        }

        else
        {
          v15[5] = v18;
        }

        sub_32C38(v5, (uint64_t)v32, v14, v15);
      }

      BOOL v19 = (uint64_t *)v13[1];
      if (v19)
      {
        do
        {
          __int128 v9 = v19;
          BOOL v19 = (uint64_t *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          __int128 v9 = (uint64_t *)v13[2];
          BOOL v20 = *v9 == (void)v13;
          unint64_t v13 = v9;
        }

        while (!v20);
      }

      sub_1112B0(v30);
      sub_1112B0(v26);
      uint64_t v21 = (void *)v8[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          uint64_t v22 = (void *)v8[2];
          BOOL v20 = *v22 == (void)v8;
          uint64_t v8 = v22;
        }

        while (!v20);
      }

      uint64_t v8 = v22;
    }

    while (v22 != v23);
  }

void sub_111280( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1112B0(void *a1)
{
  if (a1)
  {
    sub_1112B0(*a1);
    sub_1112B0(a1[1]);
    sub_19DFC((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_1112F0(void *a1)
{
  if (a1)
  {
    sub_1112F0(*a1);
    sub_1112F0(a1[1]);
    sub_1112B0((void *)a1[6]);
    operator delete(a1);
  }

void sub_111330(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::string::insert(&v31, 0LL, " { Global : ", 0xCuLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  sub_7D084(&v24, " [ ");
  unint64_t v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    while (1)
    {
      sub_2CA1C(&v29, *((unsigned int *)v6 + 8));
      __int128 v7 = std::string::append(&v29, " : ", 3uLL);
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_117EDC(&__p, (void *)v6[5], v6 + 6);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::size_type v11 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v13 = &v31;
      }
      else {
        unint64_t v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v14 = v31.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v14 = v31.__r_.__value_.__l.__size_;
      }
      std::string::append(&v24, (const std::string::value_type *)v13, v14);
      uint64_t v15 = (void *)v6[1];
      if (v15)
      {
        do
        {
          std::string v16 = v15;
          uint64_t v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          std::string v16 = (void *)v6[2];
          BOOL v17 = *v16 == (void)v6;
          unint64_t v6 = v16;
        }

        while (!v17);
      }

      if (v16 == (void *)(a2 + 32)) {
        break;
      }
      std::string::append(&v24, "; ", 2uLL);
      unint64_t v6 = v16;
    }
  }

  std::string::append(&v24, " ]", 2uLL);
  uint64_t v18 = std::string::insert(&v24, 0LL, " VAD Specific Ports :", 0x15uLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v20 = std::string::append(&v25, " }", 2uLL);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t cap = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string::size_type v26 = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v22 = v26;
  }
  else {
    uint64_t v22 = (void **)v26[0];
  }
  if (cap >= 0) {
    std::string::size_type v23 = HIBYTE(cap);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v26[1];
  }
  std::string::append(a1, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(cap) < 0) {
    operator delete(v26[0]);
  }
}