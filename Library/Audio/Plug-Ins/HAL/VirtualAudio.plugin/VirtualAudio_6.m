void sub_2A4E90(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        sub_7A768((uint64_t)(v4 - 24));
        v4 = v6;
      }

      while (v6 != v2);
      v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_2A4F04(uint64_t a1)
{
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }

  v4 = (void **)(a1 + 72);
  sub_2A4E90(&v4);
  v4 = (void **)(a1 + 48);
  sub_2A4E90(&v4);
  v4 = (void **)(a1 + 24);
  sub_7A668(&v4);
  v4 = (void **)a1;
  sub_7A668(&v4);
  return a1;
}

void sub_2A4F7C(std::__shared_weak_count *a1)
{
}

void sub_2A4F90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    v2 = (void *)sub_28020C(v1);
    operator delete(v2);
  }

uint64_t sub_2A4FB8(uint64_t a1)
{
  return a1;
}

void sub_2A501C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2A716C(a1);
  operator delete(v1);
}

void sub_2A5030(uint64_t a1)
{
  v2 = v10;
  uint64_t v1 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }

    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  v8 = (dispatch_queue_s *)sub_869B4();
  v9 = operator new(0x10uLL);
  void *v9 = v2;
  v9[1] = v1;
  v10 = 0LL;
  dispatch_async_f(v8, v9, (dispatch_function_t)sub_2A5BCC);
  sub_ADC0C(&v10);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_2A5104(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  _Unwind_Resume(exception_object);
}

void sub_2A5124(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 1) {
    goto LABEL_12;
  }
  uint64_t v2 = sub_138E8(16);
  uint64_t v3 = sub_138E8(24);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)v18 = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = (int)v18[v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_8:
  v9 = *(os_log_s **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v18[0] = 136315394;
    *(void *)&v18[1] = "OrientationIODelegate.cpp";
    LOWORD(v18[3]) = 1024;
    *(_DWORD *)((char *)&v18[3] + 2) = 114;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unregistered from Device Orientation unexpectedly",  (uint8_t *)v18,  0x12u);
  }

  if (*(_DWORD *)(a1 + 80) == 1)
  {
LABEL_12:
    sub_195658(v18, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    uint64_t v11 = *(void *)v18;
    v10 = *(std::__shared_weak_count **)&v18[2];
    if (*(void *)&v18[2])
    {
      v12 = (unint64_t *)(*(void *)&v18[2] + 16LL);
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }

      do
        unint64_t v16 = __ldxr(v12);
      while (__stxr(v16 + 1, v12));
    }

    sub_92104();
    uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16LL))( caulk::alloc::realtime_safe_resource,  48LL,  8LL);
    *(_DWORD *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = v11;
    *(void *)(v17 + 32) = v10;
    *(void *)uint64_t v17 = off_47A888;
    *(void *)(v17 + 8) = 0LL;
    caulk::concurrent::messenger::enqueue( (caulk::concurrent::messenger *)&unk_4A9D88,  (caulk::concurrent::message *)v17);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }

void sub_2A5320(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A5354(caulk::concurrent::message *this)
{
  *(void *)this = off_47A8B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_2A538C(caulk::concurrent::message *this)
{
  *(void *)this = off_47A8B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

caulk::concurrent::message **sub_2A53C8(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_2A540C((uint64_t)a1);
  return sub_2A5984(&v2);
}

void sub_2A53F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_2A540C(uint64_t a1)
{
  uint64_t v1 = v26;
  if (v26)
  {
    uint64_t v2 = sub_138E8(16);
    uint64_t v3 = sub_138E8(24);
    char v4 = 0;
    uint64_t v5 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v6 = *(void *)(v2 + 8);
    while (1)
    {
      uint64_t v7 = *(int *)&buf[4 * v5];
      char v8 = v4;
      if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
        break;
      }
      char v4 = 1;
      uint64_t v5 = 1LL;
      if ((v8 & 1) != 0)
      {
        if ((v6 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_10;
      }
    }

    if ((v6 & v7) == 0) {
      uint64_t v2 = v3;
    }
    if ((*(void *)(v2 + 8) & 1) != 0)
    {
LABEL_10:
      v9 = *(os_log_s **)v2;
      if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = (void *)(v1 + 24);
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 85;
        __int16 v29 = 2080;
        v30[0] = v10;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Unregistering %s for Device Orientation Updates",  buf,  0x1Cu);
      }
    }

void sub_2A56D4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (a2)
  {
    sub_39FD8(&buf);
    if (a10)
    {
      p_shared_owners = (unint64_t *)&a10->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
        std::__shared_weak_count::__release_weak(a10);
      }
    }

    if (a2 == 3)
    {
      uint64_t v20 = __cxa_begin_catch(a1);
      char v21 = (os_log_t *)sub_138E8(13);
      v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        int v23 = v20[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a12) = 1024;
        DWORD1(a12) = v23;
        WORD4(a12) = 2080;
        *(void *)((char *)&a12 + 10) = "";
        a14 = 1024;
        a15 = 127;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).",  (uint8_t *)&buf,  0x28u);
      }
    }

    else
    {
      v24 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        unint64_t v25 = v24;
        uint64_t v26 = (os_log_t *)sub_138E8(13);
        v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v28;
          WORD6(a12) = 2080;
          *(void *)((char *)&a12 + 14) = "";
          HIWORD(a15) = 1024;
          a16 = 127;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).",  (uint8_t *)&buf,  0x2Cu);
        }
      }

      else
      {
        __int16 v29 = (os_log_t *)sub_138E8(13);
        v30 = *v29;
        if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = "";
          WORD6(a12) = 1024;
          *(_DWORD *)((char *)&a12 + 14) = 127;
          _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).",  (uint8_t *)&buf,  0x22u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2A56A0LL);
  }

  _Unwind_Resume(a1);
}

caulk::concurrent::message **sub_2A5984(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_47A8B0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24LL))( caulk::alloc::realtime_safe_resource,  v2,  48LL,  8LL);
  return a1;
}

void sub_2A59F0(caulk::concurrent::message *this)
{
  *(void *)this = off_47A8B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_2A5A28(caulk::concurrent::message *this)
{
  *(void *)this = off_47A8B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

std::__shared_weak_count *sub_2A5A64(uint64_t *a1, uint64_t *a2, int a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (!v5
    || (result = std::__shared_weak_count::lock(v5), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v8 = *a2, *a1 = *a2, !v8))
  {
    v9 = (os_log_t *)sub_138E8(13);
    v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315906;
        unint64_t v13 = "StandardUtilities.h";
        __int16 v14 = 1024;
        int v15 = 267;
        __int16 v16 = 2080;
        char v17 = "";
        __int16 v18 = 1024;
        int v19 = a3;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not lock weak ptr (%s:%d).",  (uint8_t *)&v12,  0x22u);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }

  return result;
}

void sub_2A5BA4(_Unwind_Exception *a1)
{
}

void **sub_2A5BCC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  v43 = a1;
  uint64_t v44 = v2;
  v45 = v1;
  if (v1)
  {
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }

  sub_2A5A64(&v46, &v44, 53);
  uint64_t v5 = v46;
  if (v46)
  {
    if (*(_DWORD *)(v46 + 80))
    {
      v40 = (os_log_t *)sub_138E8(13);
      v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 63;
        _os_log_impl(&dword_0, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    sub_195658(buf, *(void *)(v46 + 8), *(std::__shared_weak_count **)(v46 + 16));
    uint64_t v7 = *(void *)buf;
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v8 = (unint64_t *)(*(void *)&buf[8] + 16LL);
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    uint64_t v12 = sub_138E8(16);
    uint64_t v13 = sub_138E8(24);
    char v14 = 0;
    uint64_t v15 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&buf[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1LL;
      if ((v18 & 1) != 0)
      {
        if ((v16 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_21;
      }
    }

    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
    if ((*(void *)(v12 + 8) & 1) != 0)
    {
LABEL_21:
      int v19 = *(os_log_s **)v12;
      if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = (void *)(v5 + 24);
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 67;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v20;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Registering %s for Device Orientation Updates",  buf,  0x1Cu);
      }
    }

void sub_2A6040( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v20);
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  if (a2 == 3)
  {
    unint64_t v25 = __cxa_begin_catch(exception_object);
    unint64_t v26 = (os_log_t *)sub_138E8(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v28 = v25[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v28;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 57;
      uint64_t v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v30 = v27;
      uint32_t v31 = 40;
LABEL_18:
      _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
    }
  }

  else
  {
    uint64_t v32 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v33 = v32;
      char v34 = (os_log_t *)sub_138E8(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16LL))(v33);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v36;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 57;
        uint64_t v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v30 = v35;
        uint32_t v31 = 44;
        goto LABEL_18;
      }
    }

    else
    {
      v37 = (os_log_t *)sub_138E8(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 57;
        uint64_t v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v30 = v38;
        uint32_t v31 = 34;
        goto LABEL_18;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2A5F54LL);
}

void sub_2A6594(uint64_t a1, int a2)
{
  uint64_t v3 = v24;
  if (v24)
  {
    uint64_t v4 = sub_138E8(16);
    uint64_t v5 = sub_138E8(24);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0)
      {
        if ((v8 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_10;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
    if ((*(void *)(v4 + 8) & 1) != 0)
    {
LABEL_10:
      unint64_t v11 = *(os_log_s **)v4;
      if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "OrientationIODelegate.cpp";
        __int16 v29 = 1024;
        int v30 = 94;
        __int16 v31 = 1024;
        int v32 = a2;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Received Device Orientation [%d] Update", buf, 0x18u);
      }
    }

void sub_2A67CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_2A67E4( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (a2)
  {
    if (v18)
    {
      std::__shared_weak_count::__release_weak(v18);
      std::__shared_weak_count::__release_weak(v18);
    }

    if (a10)
    {
      p_shared_owners = (unint64_t *)&a10->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
        std::__shared_weak_count::__release_weak(a10);
      }
    }

    if (a2 == 3)
    {
      unint64_t v23 = __cxa_begin_catch(a1);
      uint64_t v24 = (os_log_t *)sub_138E8(13);
      unint64_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        int v26 = v23[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a14) = 1024;
        DWORD1(a14) = v26;
        WORD4(a14) = 2080;
        *(void *)((char *)&a14 + 10) = "";
        a16 = 1024;
        a17 = 76;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).",  (uint8_t *)&buf,  0x28u);
      }
    }

    else
    {
      os_log_t v27 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        int v28 = v27;
        __int16 v29 = (os_log_t *)sub_138E8(13);
        int v30 = *v29;
        if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
        {
          uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16LL))(v28);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = v31;
          WORD6(a14) = 2080;
          *(void *)((char *)&a14 + 14) = "";
          HIWORD(a17) = 1024;
          a18 = 76;
          _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).",  (uint8_t *)&buf,  0x2Cu);
        }
      }

      else
      {
        int v32 = (os_log_t *)sub_138E8(13);
        uint64_t v33 = *v32;
        if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = "";
          WORD6(a14) = 1024;
          *(_DWORD *)((char *)&a14 + 14) = 76;
          _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).",  (uint8_t *)&buf,  0x22u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2A679CLL);
  }

  JUMPOUT(0x2A67D4LL);
}

void sub_2A6A60()
{
}

void sub_2A6A6C()
{
}

void sub_2A6A78()
{
}

void sub_2A6A88()
{
}

uint64_t sub_2A6A90(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_2A6AB4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void **sub_2A6AC4(uint64_t *a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *a1;
      if (*a1)
      {
        uint64_t v6 = sub_138E8(16);
        uint64_t v7 = sub_138E8(24);
        char v8 = 0;
        uint64_t v9 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v10 = *(void *)(v6 + 8);
        while (1)
        {
          uint64_t v11 = *(int *)&buf[4 * v9];
          char v12 = v8;
          if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
            break;
          }
          char v8 = 1;
          uint64_t v9 = 1LL;
          if ((v12 & 1) != 0)
          {
            if ((v10 & 1) == 0) {
              goto LABEL_17;
            }
            goto LABEL_12;
          }
        }

        if ((v10 & v11) == 0) {
          uint64_t v6 = v7;
        }
        if ((*(void *)(v6 + 8) & 1) != 0)
        {
LABEL_12:
          uint64_t v13 = *(os_log_s **)v6;
          if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            char v14 = (void *)(v5 + 24);
            int v15 = *((_DWORD *)a1 + 4);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = "OrientationIODelegate.cpp";
            __int16 v23 = 1024;
            int v24 = 105;
            __int16 v25 = 2080;
            int v26 = v14;
            __int16 v27 = 1024;
            int v28 = v15;
            _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Notifying %s about Device Orientation %d",  buf,  0x22u);
          }
        }

void sub_2A6CA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    unint64_t v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  if (a2 == 3)
  {
    int v21 = __cxa_begin_catch(exception_object);
    unint64_t v22 = (os_log_t *)sub_138E8(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v24;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 108;
      __int16 v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v26 = v23;
      uint32_t v27 = 40;
LABEL_17:
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }

  else
  {
    int v28 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v29 = v28;
      int v30 = (os_log_t *)sub_138E8(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16LL))(v29);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v32;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 108;
        __int16 v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 108;
        __int16 v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_17;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2A6C60LL);
}

uint64_t sub_2A716C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    uint64_t v2 = sub_138E8(16);
    uint64_t v3 = sub_138E8(24);
    char v4 = 0;
    uint64_t v5 = 0LL;
    *(void *)int v26 = 0x100000002LL;
    uint64_t v6 = *(void *)(v2 + 8);
    while (1)
    {
      uint64_t v7 = *(int *)&v26[4 * v5];
      char v8 = v4;
      if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
        break;
      }
      char v4 = 1;
      uint64_t v5 = 1LL;
      if ((v8 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v6 & v7) == 0) {
      uint64_t v2 = v3;
    }
LABEL_8:
    uint64_t v9 = *(os_log_s **)v2;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v26 = 136315394;
      *(void *)&v26[4] = "OrientationIODelegate.cpp";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 36;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unexpectedly deleted while still registered for Device Orientatino Updates, unregistering",  v26,  0x12u);
    }

    uint64_t v10 = *(uint64_t (**)(void))(a1 + 104);
    uint64_t v11 = (void *)(a1 + 24);
    else {
      char v12 = *(char **)(a1 + 24);
    }
    sub_195860(v26, v12);
    int v13 = v10(*(void *)&v26[8]);
    sub_39FD8(v26);
    if (v13)
    {
      uint64_t v14 = sub_138E8(16);
      uint64_t v15 = sub_138E8(24);
      char v16 = 0;
      uint64_t v17 = 0LL;
      *(void *)int v26 = 0x100000002LL;
      uint64_t v18 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v19 = *(int *)&v26[4 * v17];
        char v20 = v16;
        if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
          break;
        }
        char v16 = 1;
        uint64_t v17 = 1LL;
        if ((v20 & 1) != 0) {
          goto LABEL_21;
        }
      }

      if ((v18 & v19) == 0) {
        uint64_t v14 = v15;
      }
LABEL_21:
      int v21 = *(os_log_s **)v14;
      if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v26 = 136315906;
        *(void *)&v26[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&v26[12] = 1024;
        *(_DWORD *)&v26[14] = 38;
        __int16 v27 = 1024;
        int v28 = v13;
        __int16 v29 = 2080;
        int v30 = v11;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed [%d] to unregister %s for Device Orientation Updates",  v26,  0x22u);
      }
    }
  }

  unint64_t v22 = *(void **)(a1 + 72);
  if (v22 == (void *)(a1 + 48))
  {
    uint64_t v23 = 4LL;
    unint64_t v22 = (void *)(a1 + 48);
  }

  else
  {
    if (!v22) {
      goto LABEL_31;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_31:
  int v24 = *(std::__shared_weak_count **)(a1 + 16);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  return a1;
}

void sub_2A7418(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_2A7424(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47A850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2A7434(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47A850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2A7454(uint64_t a1)
{
  return sub_2A716C(a1 + 24);
}

void sub_2A7464(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2A8118(a1);
  operator delete(v1);
}

uint64_t sub_2A7478(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_2A7480(uint64_t a1)
{
  uint64_t v71 = 0LL;
  v72 = 0LL;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2) {
    goto LABEL_51;
  }
  v72 = std::__shared_weak_count::lock(v2);
  if (!v72) {
    goto LABEL_51;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v71 = v3;
  if (!v3) {
    goto LABEL_51;
  }
  int v4 = sub_28BEC(v3, a1 + 80);
  if (v4)
  {
    v60 = (os_log_t *)sub_138E8(13);
    v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 177;
      v62 = "%25s:%-5d EXCEPTION (result) [error result is an error]: Stream::GetCurrentHALIOProcFormat() returned an error.";
LABEL_63:
      _os_log_impl(&dword_0, v61, OS_LOG_TYPE_ERROR, v62, buf, 0x12u);
    }

void sub_2A7B6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26)
{
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_7A768((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_2A7C28(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL sub_2A7C30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1
      && (*(_BYTE *)(v1 + 448) || *(void *)(v1 + 584) || *(void *)(v1 + 672))
      && *(_DWORD *)(a1 + 48) == 1819304813;
}

uint64_t sub_2A7C70(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_2A7C78(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_2A7C80(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_2A7C88(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t sub_2A7C90(uint64_t a1)
{
  return a1 + 152;
}

uint64_t sub_2A7C98(uint64_t a1)
{
  return a1 + 192;
}

uint64_t sub_2A7CA0(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 104);
}

uint64_t sub_2A7CAC(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 104) * a2);
}

uint64_t sub_2A7CB8(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 64);
}

uint64_t sub_2A7CC4(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 64) * a2);
}

std::string *sub_2A7CD0@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
  sub_2CC00(&v27, v4);
  uint64_t v5 = std::string::insert(&v27, 0LL, "virtual fmt: ", 0xDuLL);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v7 = std::string::append(&v28, "; ", 2uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t cap = v7->__r_.__value_.__l.__cap_;
  __int128 v29 = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    double v9 = (const std::string::value_type *)&v29;
  }
  else {
    double v9 = (const std::string::value_type *)v29;
  }
  if (cap >= 0) {
    std::string::size_type v10 = HIBYTE(cap);
  }
  else {
    std::string::size_type v10 = *((void *)&v29 + 1);
  }
  std::string::append(a2, v9, v10);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v29);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  sub_2CC00(&v27, v11);
  double v12 = std::string::insert(&v27, 0LL, "nonvirt fmt: ", 0xDuLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v28, "; ", 2uLL);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t cap = v14->__r_.__value_.__l.__cap_;
  __int128 v29 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v16 = (const std::string::value_type *)&v29;
  }
  else {
    __int128 v16 = (const std::string::value_type *)v29;
  }
  if (cap >= 0) {
    std::string::size_type v17 = HIBYTE(cap);
  }
  else {
    std::string::size_type v17 = *((void *)&v29 + 1);
  }
  std::string::append(a2, v16, v17);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v29);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)a1 + 136LL))(&v29, a1);
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
  if (!*((void *)&v29 + 1)) {
    goto LABEL_33;
  }
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(*((std::__shared_weak_count **)&v29
                                                                                         + 1));
  if (v27.__r_.__value_.__l.__size_)
  {
    uint64_t v18 = (os_unfair_lock_s *)v29;
    v27.__r_.__value_.__r.__words[0] = v29;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v29 + 1));
  }
  if (v18) {
    sub_23FE8((uint64_t)&v28, v18 + 2);
  }
  else {
LABEL_33:
  }
    sub_7D084(&v28, "null");
  __int128 v19 = std::string::insert(&v28, 0LL, "virtual stream: ", 0x10uLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t cap = v19->__r_.__value_.__l.__cap_;
  __int128 v29 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v21 = (const std::string::value_type *)&v29;
  }
  else {
    int v21 = (const std::string::value_type *)v29;
  }
  if (cap >= 0) {
    std::string::size_type v22 = HIBYTE(cap);
  }
  else {
    std::string::size_type v22 = *((void *)&v29 + 1);
  }
  std::string::append(a2, v21, v22);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v29);
  }
  size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
  if (v27.__r_.__value_.__l.__size_)
  {
    int v24 = (unint64_t *)(v27.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  return std::string::append(a2, " ]", 2uLL);
}

void sub_2A7FD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2A8094@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 24);
  *a2 = *(void *)(result + 16);
  a2[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_2A80B8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

BOOL sub_2A80C0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1819304813;
}

uint64_t sub_2A80D8(uint64_t a1)
{
  return *(void *)(a1 + 280);
}

uint64_t sub_2A80E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

uint64_t sub_2A80E8(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 176);
}

uint64_t sub_2A80F4(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 176) * a2);
}

uint64_t sub_2A8100(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 216);
}

uint64_t sub_2A810C(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 216) * a2);
}

uint64_t sub_2A8118(uint64_t a1)
{
  *(void *)a1 = off_47A8D8;
  sub_2DBF4((unsigned int **)(a1 + 136));
  sub_2DBF4((unsigned int **)(a1 + 120));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_2A8164(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A8178(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A8188(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A8198(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A81A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A81B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A81C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A81D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A81E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A81F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A8208(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A8218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24));
}

uint64_t sub_2A8228(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
}

void sub_2A8238(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  std::string::append(a2, "type: Pointer; ", 0xFuLL);
  else {
    unint64_t v4 = "no";
  }
  sub_7D084(&v42, v4);
  uint64_t v5 = std::string::insert(&v42, 0LL, "on: ", 4uLL);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v7 = std::string::append(&v43, "; ", 2uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    double v9 = &v44;
  }
  else {
    double v9 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v9, size);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
  sub_2CC00(&v42, v11);
  double v12 = std::string::insert(&v42, 0LL, "virtual fmt: ", 0xDuLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v43, "; ", 2uLL);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v16 = &v44;
  }
  else {
    __int128 v16 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v17 = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v17 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  sub_2CC00(&v42, v18);
  __int128 v19 = std::string::insert(&v42, 0LL, "nonvirt fmt: ", 0xDuLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v21 = std::string::append(&v43, "; ", 2uLL);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v23 = &v44;
  }
  else {
    uint64_t v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v24 = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v24 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v23, v24);
  int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
  std::to_string(&v42, v25);
  int v26 = std::string::insert(&v42, 0LL, "client idx: ", 0xCuLL);
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  std::string v28 = std::string::append(&v43, "; ", 2uLL);
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v30 = &v44;
  }
  else {
    __int128 v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v31 = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v31 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v30, v31);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168LL))(a1))
  {
    unsigned int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
    std::to_string(&v44, v32);
  }

  else
  {
    sub_7D084(&v44, "(none)");
  }

  std::operator+<char>("chan idx: ", &v44);
  int v33 = std::string::append(&v42, "; ", 2uLL);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    os_log_t v35 = &v43;
  }
  else {
    os_log_t v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v36 = v43.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v35, v36);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1))
  {
    __int128 v37 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1);
    sub_23FE8((uint64_t)&v42, v37 + 2);
  }

  else
  {
    sub_7D084(&v42, "null");
  }

  int v38 = std::string::insert(&v42, 0LL, "physical device: ", 0x11uLL);
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v40 = &v43;
  }
  else {
    uint64_t v40 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v41 = v43.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v41 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v40, v41);
  std::string::append(a2, " ]", 2uLL);
}

void sub_2A8770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_2A8860()
{
  return 1LL;
}

uint64_t sub_2A8868()
{
  return 0LL;
}

uint64_t sub_2A8870()
{
  return 0LL;
}

uint64_t sub_2A8878(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2A8880(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_2A8888(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16)) {
    sub_8DEEC();
  }
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_2A88A8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_2A88BC()
{
  return 0LL;
}

uint64_t sub_2A88C4()
{
  return 0LL;
}

uint64_t sub_2A88CC()
{
  return 0LL;
}

uint64_t sub_2A88D4()
{
  return 0LL;
}

uint64_t sub_2A88DC()
{
  return 0LL;
}

uint64_t sub_2A88E4()
{
  return 0LL;
}

uint64_t sub_2A88EC()
{
  return 0LL;
}

uint64_t sub_2A88F4()
{
  return 0LL;
}

uint64_t sub_2A88FC()
{
  return 0LL;
}

uint64_t sub_2A8904()
{
  return 0LL;
}

uint64_t sub_2A890C()
{
  return 0LL;
}

uint64_t sub_2A8914()
{
  return 0LL;
}

std::string *sub_2A891C@<X0>(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  std::string::append(a2, "type: Hidden; ", 0xEuLL);
  else {
    unint64_t v4 = "no";
  }
  sub_7D084(&v24, v4);
  uint64_t v5 = std::string::insert(&v24, 0LL, "on: ", 4uLL);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v7 = std::string::append(&v25, "; ", 2uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t cap = v7->__r_.__value_.__l.__cap_;
  __int128 v26 = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    double v9 = (const std::string::value_type *)&v26;
  }
  else {
    double v9 = (const std::string::value_type *)v26;
  }
  if (cap >= 0) {
    std::string::size_type v10 = HIBYTE(cap);
  }
  else {
    std::string::size_type v10 = *((void *)&v26 + 1);
  }
  std::string::append(a2, v9, v10);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v26);
  }
  int v11 = (*(uint64_t (**)(void *))(*a1 + 160LL))(a1);
  std::to_string(&v24, v11);
  double v12 = std::string::insert(&v24, 0LL, "client idx: ", 0xCuLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v25, "; ", 2uLL);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t cap = v14->__r_.__value_.__l.__cap_;
  __int128 v26 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v16 = (const std::string::value_type *)&v26;
  }
  else {
    __int128 v16 = (const std::string::value_type *)v26;
  }
  if (cap >= 0) {
    std::string::size_type v17 = HIBYTE(cap);
  }
  else {
    std::string::size_type v17 = *((void *)&v26 + 1);
  }
  std::string::append(a2, v16, v17);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v26);
  }
  if ((*(uint64_t (**)(void *))(*a1 + 184LL))(a1))
  {
    uint64_t v18 = (os_unfair_lock_s *)(*(uint64_t (**)(void *))(*a1 + 184LL))(a1);
    sub_23FE8((uint64_t)&v25, v18 + 2);
  }

  else
  {
    sub_7D084(&v25, "null");
  }

  __int128 v19 = std::string::insert(&v25, 0LL, "physical device: ", 0x11uLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t cap = v19->__r_.__value_.__l.__cap_;
  __int128 v26 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v21 = (const std::string::value_type *)&v26;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)v26;
  }
  if (cap >= 0) {
    std::string::size_type v22 = HIBYTE(cap);
  }
  else {
    std::string::size_type v22 = *((void *)&v26 + 1);
  }
  std::string::append(a2, v21, v22);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v26);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_2A8BF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2A8C98()
{
  return 0LL;
}

uint64_t sub_2A8CA0()
{
  return 1LL;
}

uint64_t sub_2A8CA8()
{
  return 0LL;
}

uint64_t sub_2A8CB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_2A8CBC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2A98E4(a1);
  operator delete(v1);
}

void sub_2A8CD0(uint64_t a1)
{
  uint64_t v46 = 0LL;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    goto LABEL_34;
  }
  uint64_t v46 = std::__shared_weak_count::lock(v2);
  if (!v46) {
    goto LABEL_34;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v45 = v3;
  if (!v3) {
    goto LABEL_34;
  }
  int v4 = sub_28BEC(v3, a1 + 104);
  if (v4)
  {
    uint64_t v40 = (os_log_t *)sub_138E8(13);
    std::string::size_type v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 530;
      std::string v42 = "%25s:%-5d EXCEPTION (result) [error result is an error]: Stream::GetCurrentHALIOProcFormat() returned an error.";
LABEL_46:
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_ERROR, v42, __p, 0x12u);
    }

void sub_2A9150( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_7A768((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2A91C4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

BOOL sub_2A91CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  return v1
      && (*(_BYTE *)(v1 + 448) || *(void *)(v1 + 584) || *(void *)(v1 + 672))
      && *(_DWORD *)(a1 + 72) == 1819304813;
}

uint64_t sub_2A920C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_2A9214(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_2A921C(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t sub_2A9224(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t sub_2A922C(uint64_t a1)
{
  return a1 + 176;
}

uint64_t sub_2A9234(uint64_t a1)
{
  return a1 + 216;
}

uint64_t sub_2A923C(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 128);
}

uint64_t sub_2A9248(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 128) * a2);
}

uint64_t sub_2A9254(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 88);
}

uint64_t sub_2A9260(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 88) * a2);
}

void sub_2A926C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  std::string::append(a2, "type: Full; ", 0xCuLL);
  else {
    int v4 = "yes";
  }
  sub_7D084(&v42, v4);
  uint64_t v5 = std::string::insert(&v42, 0LL, "on: ", 4uLL);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v7 = std::string::append(&v43, "; ", 2uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    double v9 = &v44;
  }
  else {
    double v9 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v9, size);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
  sub_2CC00(&v42, v11);
  char v12 = std::string::insert(&v42, 0LL, "virtual fmt: ", 0xDuLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v43, "; ", 2uLL);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v16 = &v44;
  }
  else {
    __int128 v16 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v17 = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v17 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  sub_2CC00(&v42, v18);
  __int128 v19 = std::string::insert(&v42, 0LL, "nonvirt fmt: ", 0xDuLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v21 = std::string::append(&v43, "; ", 2uLL);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v23 = &v44;
  }
  else {
    uint64_t v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v24 = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v24 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v23, v24);
  int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
  std::to_string(&v42, v25);
  __int128 v26 = std::string::insert(&v42, 0LL, "client idx: ", 0xCuLL);
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v28 = std::string::append(&v43, "; ", 2uLL);
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v30 = &v44;
  }
  else {
    uint64_t v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v31 = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v31 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v30, v31);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168LL))(a1))
  {
    unsigned int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
    std::to_string(&v44, v32);
  }

  else
  {
    sub_7D084(&v44, "(none)");
  }

  std::operator+<char>("chan idx: ", &v44);
  __int128 v33 = std::string::append(&v42, "; ", 2uLL);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v35 = &v43;
  }
  else {
    uint64_t v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v36 = v43.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v35, v36);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1))
  {
    __int128 v37 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1);
    sub_23FE8((uint64_t)&v42, v37 + 2);
  }

  else
  {
    sub_7D084(&v42, "null");
  }

  int v38 = std::string::insert(&v42, 0LL, "physical device: ", 0x11uLL);
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v40 = &v43;
  }
  else {
    uint64_t v40 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v41 = v43.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v41 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v40, v41);
  std::string::append(a2, " ]", 2uLL);
}

void sub_2A97A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_2A9894()
{
  return 0LL;
}

uint64_t sub_2A989C()
{
  return 0LL;
}

uint64_t sub_2A98A4()
{
  return 1LL;
}

uint64_t sub_2A98AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2A98B4(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 200);
}

uint64_t sub_2A98C0(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 200) * a2);
}

uint64_t sub_2A98CC(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 240);
}

uint64_t sub_2A98D8(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 240) * a2);
}

uint64_t sub_2A98E4(uint64_t a1)
{
  *(void *)a1 = off_47AC28;
  sub_2DBF4((unsigned int **)(a1 + 160));
  sub_2DBF4((unsigned int **)(a1 + 144));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_2A992C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2B1D68(a1);
  operator delete(v1);
}

uint64_t sub_2A9940(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if (a2->mSelector == 1937077093 || mSelector == 1937009955) {
    return 0LL;
  }
  if (mSelector != 1936482681) {
    return sub_1A9D4(a1, a2);
  }
  AudioObjectPropertyScope mScope = a2->mScope;
  return mScope == 1869968496 || mScope == 1768845428;
}

uint64_t sub_2A99D0(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1936482681) {
    return 0LL;
  }
  else {
    return sub_93F50(a1, a2);
  }
}

uint64_t sub_2A9A20(uint64_t a1, AudioObjectPropertyAddress *a2, uint64_t a3, void *a4)
{
  if (((*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16LL))(a1, a2) & 1) == 0)
  {
    char v12 = (os_log_t *)sub_138E8(13);
    __int128 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v20);
      uint64_t v14 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      int v25 = "AggregateDevice_Common2.cpp";
      __int16 v26 = 1024;
      int v27 = 2447;
      __int16 v28 = 2080;
      __int128 v29 = v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    __int128 v16 = (os_log_t *)sub_138E8(13);
    std::string::size_type v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v20);
      uint64_t v18 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      int v25 = "AggregateDevice_Common2.cpp";
      __int16 v26 = 1024;
      int v27 = 2448;
      __int16 v28 = 2080;
      __int128 v29 = v18;
      __int16 v30 = 1024;
      int v31 = a3;
      __int16 v32 = 2048;
      __int128 v33 = a4;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v19 = &off_4865A0;
    v19[2] = 561211770;
  }

  if (a2->mSelector != 1936482681) {
    return sub_207BC(a1, a2, a3, a4);
  }
  uint64_t v8 = 776LL;
  if (a2->mScope == 1768845428) {
    uint64_t v8 = 760LL;
  }
  double v9 = *(int **)(a1 + v8);
  if (v9 && (int v10 = *v9) != 0) {
    return (16 * v10) | 8u;
  }
  else {
    return 0LL;
  }
}

void sub_2A9D3C(AudioObjectID *a1, uint64_t a2, uint64_t a3, __CFString *a4, int *a5, int *a6)
{
  if (((*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 16LL))(a1, a2) & 1) == 0)
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v41);
      char v23 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v46 = "AggregateDevice_Common2.cpp";
      __int16 v47 = 1024;
      int v48 = 2476;
      __int16 v49 = 2080;
      int v50 = (const char *)v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v25 = (os_log_t *)sub_138E8(13);
    __int16 v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v41);
      int v27 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      uint64_t v46 = "AggregateDevice_Common2.cpp";
      __int16 v47 = 1024;
      int v48 = 2477;
      __int16 v49 = 2080;
      int v50 = (const char *)v27;
      __int16 v51 = 1024;
      LODWORD(v52[0]) = a3;
      WORD2(v52[0]) = 2048;
      *(void *)((char *)v52 + 6) = a4;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v28 = &off_4865A0;
    v28[2] = 561211770;
  }

  if (!a6)
  {
    __int128 v29 = (os_log_t *)sub_138E8(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v41);
      int v31 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      uint64_t v46 = "AggregateDevice_Common2.cpp";
      __int16 v47 = 1024;
      int v48 = 2478;
      __int16 v49 = 2080;
      int v50 = "outData";
      __int16 v51 = 2080;
      v52[0] = v31;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v32 = &off_4865A0;
    v32[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 1936482681)
  {
    unsigned int v12 = *a5;
    if (v12 < (*(unsigned int (**)(AudioObjectID *, uint64_t, uint64_t, __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      __int128 v33 = (os_log_t *)sub_138E8(13);
      __int128 v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *(void *)a2;
        int v42 = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)__p, (unsigned int *)&v41);
        int v35 = v44;
        std::string::size_type v36 = (void **)__p[0];
        int v37 = *a5;
        int v38 = (*(uint64_t (**)(AudioObjectID *, uint64_t, uint64_t, __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        __int128 v39 = __p;
        *(_DWORD *)buf = 136316162;
        uint64_t v46 = "AggregateDevice_Common2.cpp";
        if (v35 < 0) {
          __int128 v39 = v36;
        }
        __int16 v47 = 1024;
        int v48 = 2484;
        __int16 v49 = 2080;
        int v50 = (const char *)v39;
        __int16 v51 = 1024;
        LODWORD(v52[0]) = v37;
        WORD2(v52[0]) = 1024;
        *(_DWORD *)((char *)v52 + 6) = v38;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
          buf,
          0x28u);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v40 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v40 = &off_4865A0;
      v40[2] = 561211770;
    }

    uint64_t v13 = 194LL;
    if (*(_DWORD *)(a2 + 4) == 1768845428) {
      uint64_t v13 = 190LL;
    }
    uint64_t v14 = *(int **)&a1[v13];
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        *a6 = v15;
        uint64_t v16 = *v14;
        if ((_DWORD)v16)
        {
          std::string::size_type v17 = a6 + 4;
          uint64_t v18 = (unsigned int *)(v14 + 2);
          uint64_t v19 = v16;
          do
          {
            unsigned int v20 = *v18;
            v18 += 4;
            *(v17 - 1) = v20;
            *std::string::size_type v17 = 0LL;
            v17 += 2;
            --v19;
          }

          while (v19);
          int v15 = (16 * v16) | 8;
        }

        else
        {
          int v15 = 8;
        }
      }
    }

    else
    {
      int v15 = 0;
    }

    *a5 = v15;
  }

  else
  {
    sub_21808(a1, a2, a3, a4, a5, a6);
  }

void sub_2AA300( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2AA324(uint64_t a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16LL))(a1, a2) & 1) == 0)
  {
    unsigned int v12 = (os_log_t *)sub_138E8(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      uint64_t v14 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int128 v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2521;
      __int16 v36 = 2080;
      int v37 = (const char *)v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    std::string::size_type v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      uint64_t v18 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      __int128 v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2522;
      __int16 v36 = 2080;
      int v37 = (const char *)v18;
      __int16 v38 = 1024;
      LODWORD(v39[0]) = a3;
      WORD2(v39[0]) = 2048;
      *(void *)((char *)v39 + 6) = a4;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_4865A0;
    v19[2] = 561211770;
  }

  if (!a6)
  {
    unsigned int v20 = (os_log_t *)sub_138E8(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      uint64_t v22 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      __int128 v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2523;
      __int16 v36 = 2080;
      int v37 = "inData";
      __int16 v38 = 2080;
      v39[0] = v22;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    char v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v23 = &off_4865A0;
    v23[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    std::string::size_type v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v28);
      if (v31 >= 0) {
        __int16 v26 = __p;
      }
      else {
        __int16 v26 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      __int128 v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2524;
      __int16 v36 = 2080;
      int v37 = (const char *)v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    int v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v27 = &off_4865A0;
    v27[2] = 1852797029;
  }

  sub_948E0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_2AA7E8(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 664;
  uint64_t v3 = 664LL;
  if (a2)
  {
    uint64_t v3 = 688LL;
    uint64_t v2 = a1 + 688;
  }

  return (*(void *)(v2 + 8) - *(void *)(a1 + v3)) >> 3;
}

uint64_t sub_2AA818(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 688;
  uint64_t v4 = 664LL;
  if (a2) {
    uint64_t v4 = 688LL;
  }
  else {
    uint64_t v3 = a1 + 664;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(a1 + v4);
  if (a3 >= (unint64_t)((v5 - v6) >> 3))
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)&v16[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 2381;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v16, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  (*(void (**)(_BYTE *__return_ptr))(**(void **)(v6 + 8LL * a3) + 136LL))(v16);
  if (!*(void *)&v16[8]) {
    return 0LL;
  }
  uint64_t v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&v16[8]);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v16;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  if (*(void *)&v16[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v16[8]);
  }
  return v9;
}

void sub_2AA9B4(_Unwind_Exception *a1)
{
}

uint64_t sub_2AA9D0(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 728788340;
  }
  else {
    int v2 = 762342772;
  }
  *(_DWORD *)(result + 792) = v2;
  return result;
}

BOOL sub_2AA9F0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 792) != 0;
}

void sub_2AAA00(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = 0LL;
  __int16 v20 = 256;
  uint64_t v4 = a1 + 664;
  uint64_t v5 = a1 + 688;
  do
  {
    char v6 = v2;
    if (*((_BYTE *)&v20 + v3)) {
      uint64_t v7 = 688LL;
    }
    else {
      uint64_t v7 = 664LL;
    }
    if (*((_BYTE *)&v20 + v3)) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v9 = *(void **)(a1 + v7);
    int v10 = *(void **)(v8 + 8);
    while (v9 != v10)
    {
      uint64_t v11 = *v9;
      int v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 40LL))(*v9);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 136LL))(&v18, v11);
      if (v19)
      {
        uint64_t v13 = std::__shared_weak_count::lock(v19);
        if (v13)
        {
          uint64_t v14 = v13;
          if (v18) {
            int v15 = v12;
          }
          else {
            int v15 = 0;
          }
          if (v15 == 1) {
            sub_2E060(*(_BYTE **)(v18 + 136));
          }
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }

        if (v19) {
          std::__shared_weak_count::__release_weak(v19);
        }
      }

      ++v9;
    }

    char v2 = 1;
    uint64_t v3 = 1LL;
  }

  while ((v6 & 1) == 0);
}

void sub_2AAB40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  _Unwind_Resume(a1);
}

void sub_2AAB60(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 456))
  {
    int v50 = (os_log_t *)sub_138E8(13);
    __int16 v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v86 = 1024;
      int v87 = 1973;
      _os_log_impl(&dword_0, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_2AF570(a1);
  char v4 = sub_25D14((unsigned int *)a1, a2, 1);
  if ((v4 & 3) != 0)
  {
    char v5 = v4;
    uint64_t v6 = sub_138E8(16);
    uint64_t v7 = sub_138E8(31);
    if ((_DWORD)a2 == 1 && (v5 & 1) != 0)
    {
      char v8 = 0;
      uint64_t v9 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v10 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v11 = *(int *)&buf[4 * v9];
        char v12 = v8;
        if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
          break;
        }
        char v8 = 1;
        uint64_t v9 = 1LL;
        if ((v12 & 1) != 0) {
          goto LABEL_55;
        }
      }

      if ((v10 & v11) == 0) {
        uint64_t v6 = v7;
      }
LABEL_55:
      __int16 v47 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEFAULT))
        {
          int v48 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v86 = 1024;
          int v87 = 2037;
          __int16 v88 = 1024;
          LODWORD(v89) = v48;
          _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.",  buf,  0x18u);
        }
      }
    }

    else
    {
      char v25 = 0;
      uint64_t v26 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v27 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v28 = *(int *)&buf[4 * v26];
        char v29 = v25;
        if (((v27 & v28) != 0) != ((*(void *)(v7 + 8) & v28) != 0)) {
          break;
        }
        char v25 = 1;
        uint64_t v26 = 1LL;
        if ((v29 & 1) != 0) {
          goto LABEL_44;
        }
      }

      if ((v27 & v28) == 0) {
        uint64_t v6 = v7;
      }
LABEL_44:
      uint64_t v41 = *(os_log_s **)v6;
      if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, a2);
        int v42 = v84;
        std::string v43 = (void **)__p[0];
        int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        uint64_t v45 = v42 >= 0 ? __p : v43;
        __int16 v86 = 1024;
        int v87 = 2042;
        __int16 v88 = 2080;
        v89 = v45;
        __int16 v90 = 1024;
        LODWORD(v91) = v44;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  buf,  0x22u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
      }

      kdebug_trace(553912341LL, (int)a2, 0LL, 0LL, 0LL);
      if ((_DWORD)a2 == 1) {
        uint64_t v46 = 0LL;
      }
      else {
        uint64_t v46 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
      }
      uint64_t v49 = AudioDeviceStart(*(_DWORD *)(a1 + 128), v46);
      kdebug_trace(553912342LL, (int)a2, 0LL, 0LL, 0LL);
      if ((_DWORD)v49)
      {
        sub_25D14((unsigned int *)a1, a2, 0);
        v69 = (os_log_t *)sub_138E8(16);
        v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v49);
          int v71 = v84;
          v72 = (void **)__p[0];
          sub_23FE8((uint64_t)v81, (os_unfair_lock_t)(a1 + 8));
          __int128 v73 = __p;
          if (v71 < 0) {
            __int128 v73 = v72;
          }
          if (v82 >= 0) {
            __int128 v74 = v81;
          }
          else {
            __int128 v74 = (void **)v81[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v86 = 1024;
          int v87 = 2050;
          __int16 v88 = 2080;
          v89 = v73;
          __int16 v90 = 2080;
          v91 = v74;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  buf,  0x26u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          if (v84 < 0) {
            operator delete(__p[0]);
          }
        }

        v75 = (os_log_t *)sub_138E8(13);
        v76 = *v75;
        if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v86 = 1024;
          int v87 = 2051;
          _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  buf,  0x12u);
        }

        v77 = __cxa_allocate_exception(0x10uLL);
        *(void *)v77 = &off_4865A0;
        v77[2] = v49;
      }
    }
  }

  else
  {
    uint64_t v13 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v13) {
      caulk::concurrent::messenger::drain(v13);
    }
    sub_2AFE84(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232LL))(a1);
    sub_2B058C((void *)a1);
    sub_2B11D8((void *)a1);
    sub_2B1B28(a1);
    uint64_t v14 = *(void *)(a1 + 96);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
    }
    int v15 = sub_326DC(a1);
    if (v15)
    {
      int v53 = v15;
      uint64_t v54 = (os_log_t *)sub_138E8(13);
      __int128 v55 = *v54;
      if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        __int16 v86 = 1024;
        int v87 = 1996;
        _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (willStartResult): Error calling WillStartIO on physical devices.",  buf,  0x12u);
      }

      __int128 v56 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int128 v56 = &off_4865A0;
      v56[2] = v53;
    }

    sub_3280C(a1);
    uint64_t v16 = *(double **)(a1 + 136);
    if (v16)
    {
      double v17 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
      sub_1C8B9C(v16, v17);
    }

    uint64_t v18 = sub_138E8(16);
    uint64_t v19 = sub_138E8(31);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&buf[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_26;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_26:
    __int16 v30 = *(os_log_s **)v18;
    if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, a2);
      int v31 = v84;
      __int16 v32 = (void **)__p[0];
      int v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v34 = v31 >= 0 ? __p : v32;
      __int16 v86 = 1024;
      int v87 = 2002;
      __int16 v88 = 2080;
      v89 = v34;
      __int16 v90 = 1024;
      LODWORD(v91) = v33;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  buf,  0x22u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
    }

    kdebug_trace(553912341LL, (int)a2, 0LL, 0LL, 0LL);
    if ((_DWORD)a2 == 1) {
      int v35 = 0LL;
    }
    else {
      int v35 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    uint64_t v36 = AudioDeviceStart(*(_DWORD *)(a1 + 128), v35);
    kdebug_trace(553912342LL, (int)a2, 0LL, 0LL, 0LL);
    if ((_DWORD)v36)
    {
      sub_25D14((unsigned int *)a1, a2, 0);
      v57 = (os_log_t *)sub_138E8(16);
      v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v36);
        int v59 = v84;
        v60 = (void **)__p[0];
        sub_23FE8((uint64_t)v81, (os_unfair_lock_t)(a1 + 8));
        v61 = __p;
        if (v59 < 0) {
          v61 = v60;
        }
        if (v82 >= 0) {
          v62 = v81;
        }
        else {
          v62 = (void **)v81[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        __int16 v86 = 1024;
        int v87 = 2011;
        __int16 v88 = 2080;
        v89 = v61;
        __int16 v90 = 2080;
        v91 = v62;
        _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  buf,  0x26u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        if (v84 < 0) {
          operator delete(__p[0]);
        }
      }

      v63 = *(uint64_t ***)(a1 + 136);
      if (v63) {
        sub_1C9B20(v63);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 552LL))(a1);
      v64 = *(void **)(a1 + 240);
      v65 = *(void **)(a1 + 248);
      while (v64 != v65)
      {
        (*(void (**)(void, uint64_t))(*(void *)*v64 + 40LL))(*v64, 1LL);
        v64 += 2;
      }

      sub_3C684(a1);
      v78 = (os_log_t *)sub_138E8(13);
      v79 = *v78;
      if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        __int16 v86 = 1024;
        int v87 = 2018;
        _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  buf,  0x12u);
      }

      v80 = __cxa_allocate_exception(0x10uLL);
      *(void *)v80 = &off_4865A0;
      v80[2] = v36;
    }

    int v37 = sub_3359C(a1);
    uint64_t v38 = *(void *)a1;
    if (v37)
    {
      (*(void (**)(uint64_t, uint64_t))(v38 + 256))(a1, a2);
      v66 = (os_log_t *)sub_138E8(13);
      v67 = *v66;
      if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        __int16 v86 = 1024;
        int v87 = 2025;
        _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (didStartResult): Error calling DidStartIO on physical devices.",  buf,  0x12u);
      }

      v68 = __cxa_allocate_exception(0x10uLL);
      *(void *)v68 = &off_4865A0;
      v68[2] = v37;
    }

    (*(void (**)(uint64_t))(v38 + 544))(a1);
    __int128 v39 = *(void **)(a1 + 240);
    uint64_t v40 = *(void **)(a1 + 248);
    while (v39 != v40)
    {
      (*(void (**)(void))(*(void *)*v39 + 24LL))(*v39);
      v39 += 2;
    }

    *(_DWORD *)(a1 + 792) = *(_DWORD *)(a1 + 796);
  }

void sub_2AB608( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_2AB654(uint64_t a1, _OWORD *a2, UInt32 a3, uint64_t a4)
{
  if (!*(void *)(a1 + 456))
  {
    v58 = (os_log_t *)sub_138E8(13);
    int v59 = *v58;
    if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 2059;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_2AF570(a1);
  char v8 = sub_25D14((unsigned int *)a1, a4, 1);
  if ((v8 & 3) != 0)
  {
    char v9 = v8;
    uint64_t v10 = sub_138E8(16);
    uint64_t v11 = sub_138E8(31);
    if ((_DWORD)a4 == 1 && (v9 & 1) != 0)
    {
      char v12 = 0;
      uint64_t v13 = 0LL;
      *(void *)&buf.mSampleTime = 0x100000002LL;
      uint64_t v14 = *(void *)(v10 + 8);
      while (1)
      {
        uint64_t v15 = *((int *)&buf.mSampleTime + v13);
        char v16 = v12;
        if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
          break;
        }
        char v12 = 1;
        uint64_t v13 = 1LL;
        if ((v16 & 1) != 0) {
          goto LABEL_55;
        }
      }

      if ((v14 & v15) == 0) {
        uint64_t v10 = v11;
      }
LABEL_55:
      __int128 v55 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEFAULT))
        {
          int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
          LODWORD(buf.mSampleTime) = 136315650;
          *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 2121;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v56;
          _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.",  (uint8_t *)&buf,  0x18u);
        }
      }
    }

    else
    {
      char v29 = 0;
      uint64_t v30 = 0LL;
      *(void *)&buf.mSampleTime = 0x100000002LL;
      uint64_t v31 = *(void *)(v10 + 8);
      while (1)
      {
        uint64_t v32 = *((int *)&buf.mSampleTime + v30);
        char v33 = v29;
        if (((v31 & v32) != 0) != ((*(void *)(v11 + 8) & v32) != 0)) {
          break;
        }
        char v29 = 1;
        uint64_t v30 = 1LL;
        if ((v33 & 1) != 0) {
          goto LABEL_44;
        }
      }

      if ((v31 & v32) == 0) {
        uint64_t v10 = v11;
      }
LABEL_44:
      __int16 v47 = *(os_log_s **)v10;
      if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, a4);
        int v48 = SBYTE3(v97);
        uint64_t v49 = *(_BYTE **)__p;
        int v50 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
        __int16 v51 = v48 >= 0 ? __p : v49;
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 2126;
        WORD1(buf.mRateScalar) = 2080;
        *(void *)((char *)&buf.mRateScalar + 4) = v51;
        WORD2(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v50;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  (uint8_t *)&buf,  0x22u);
        if (SBYTE3(v97) < 0) {
          operator delete(*(void **)__p);
        }
      }

      __int128 v52 = a2[1];
      *(_OWORD *)&buf.mSampleTime = *a2;
      *(_OWORD *)&buf.mRateScalar = v52;
      __int128 v53 = a2[3];
      *(_OWORD *)&buf.mSMPTETime.mSubframes = a2[2];
      *(_OWORD *)&buf.mSMPTETime.mHours = v53;
      if ((_DWORD)a4 == 1) {
        uint64_t v54 = 0LL;
      }
      else {
        uint64_t v54 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
      }
      uint64_t v57 = AudioDeviceStartAtTime(*(_DWORD *)(a1 + 128), v54, &buf, a3);
      if ((_DWORD)v57)
      {
        sub_25D14((unsigned int *)a1, a4, 0);
        v77 = (os_log_t *)sub_138E8(16);
        v78 = *v77;
        if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v91, v57);
          int v79 = v92;
          v80 = (void **)v91[0];
          sub_23FE8((uint64_t)v89, (os_unfair_lock_t)(a1 + 8));
          v81 = v91;
          if (v79 < 0) {
            v81 = v80;
          }
          if (v90 >= 0) {
            char v82 = v89;
          }
          else {
            char v82 = (void **)v89[0];
          }
          *(_DWORD *)__p = 136315906;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          __int16 v94 = 1024;
          int v95 = 2132;
          __int16 v96 = 2080;
          v97 = v81;
          __int16 v98 = 2080;
          v99 = v82;
          _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  __p,  0x26u);
          if (v90 < 0) {
            operator delete(v89[0]);
          }
          if (v92 < 0) {
            operator delete(v91[0]);
          }
        }

        v83 = (os_log_t *)sub_138E8(13);
        char v84 = *v83;
        if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          __int16 v94 = 1024;
          int v95 = 2133;
          _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  __p,  0x12u);
        }

        v85 = __cxa_allocate_exception(0x10uLL);
        *(void *)v85 = &off_4865A0;
        v85[2] = v57;
      }
    }
  }

  else
  {
    double v17 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v17) {
      caulk::concurrent::messenger::drain(v17);
    }
    sub_2AFE84(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232LL))(a1);
    sub_2B058C((void *)a1);
    sub_2B11D8((void *)a1);
    sub_2B1B28(a1);
    uint64_t v18 = *(void *)(a1 + 96);
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 24LL))(v18);
    }
    int v19 = sub_326DC(a1);
    if (v19)
    {
      int v61 = v19;
      v62 = (os_log_t *)sub_138E8(13);
      v63 = *v62;
      if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 2082;
        _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (willStartResult): Error calling WillStartIO on physical devices.",  (uint8_t *)&buf,  0x12u);
      }

      v64 = __cxa_allocate_exception(0x10uLL);
      *(void *)v64 = &off_4865A0;
      v64[2] = v61;
    }

    sub_3280C(a1);
    char v20 = *(double **)(a1 + 136);
    if (v20)
    {
      double v21 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
      sub_1C8B9C(v20, v21);
    }

    uint64_t v22 = sub_138E8(16);
    uint64_t v23 = sub_138E8(31);
    char v24 = 0;
    uint64_t v25 = 0LL;
    *(void *)&buf.mSampleTime = 0x100000002LL;
    uint64_t v26 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v27 = *((int *)&buf.mSampleTime + v25);
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1LL;
      if ((v28 & 1) != 0) {
        goto LABEL_26;
      }
    }

    if ((v26 & v27) == 0) {
      uint64_t v22 = v23;
    }
LABEL_26:
    __int16 v34 = *(os_log_s **)v22;
    if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, a4);
      int v35 = SBYTE3(v97);
      uint64_t v36 = *(_BYTE **)__p;
      int v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
      uint64_t v38 = v35 >= 0 ? __p : v36;
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 2088;
      WORD1(buf.mRateScalar) = 2080;
      *(void *)((char *)&buf.mRateScalar + 4) = v38;
      WORD2(buf.mWordClockTime) = 1024;
      *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v37;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  (uint8_t *)&buf,  0x22u);
      if (SBYTE3(v97) < 0) {
        operator delete(*(void **)__p);
      }
    }

    __int128 v39 = a2[1];
    *(_OWORD *)&buf.mSampleTime = *a2;
    *(_OWORD *)&buf.mRateScalar = v39;
    __int128 v40 = a2[3];
    *(_OWORD *)&buf.mSMPTETime.mSubframes = a2[2];
    *(_OWORD *)&buf.mSMPTETime.mHours = v40;
    if ((_DWORD)a4 == 1) {
      uint64_t v41 = 0LL;
    }
    else {
      uint64_t v41 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    uint64_t v42 = AudioDeviceStartAtTime(*(_DWORD *)(a1 + 128), v41, &buf, a3);
    if ((_DWORD)v42)
    {
      sub_25D14((unsigned int *)a1, a4, 0);
      v65 = (os_log_t *)sub_138E8(16);
      v66 = *v65;
      if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v91, v42);
        int v67 = v92;
        v68 = (void **)v91[0];
        sub_23FE8((uint64_t)v89, (os_unfair_lock_t)(a1 + 8));
        v69 = v91;
        if (v67 < 0) {
          v69 = v68;
        }
        if (v90 >= 0) {
          v70 = v89;
        }
        else {
          v70 = (void **)v89[0];
        }
        *(_DWORD *)__p = 136315906;
        *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
        __int16 v94 = 1024;
        int v95 = 2095;
        __int16 v96 = 2080;
        v97 = v69;
        __int16 v98 = 2080;
        v99 = v70;
        _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  __p,  0x26u);
        if (v90 < 0) {
          operator delete(v89[0]);
        }
        if (v92 < 0) {
          operator delete(v91[0]);
        }
      }

      int v71 = *(uint64_t ***)(a1 + 136);
      if (v71) {
        sub_1C9B20(v71);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 552LL))(a1);
      v72 = *(void **)(a1 + 240);
      __int128 v73 = *(void **)(a1 + 248);
      while (v72 != v73)
      {
        (*(void (**)(void, uint64_t))(*(void *)*v72 + 40LL))(*v72, 1LL);
        v72 += 2;
      }

      sub_3C684(a1);
      __int16 v86 = (os_log_t *)sub_138E8(13);
      int v87 = *v86;
      if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
        __int16 v94 = 1024;
        int v95 = 2102;
        _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  __p,  0x12u);
      }

      __int16 v88 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v88 = &off_4865A0;
      v88[2] = v42;
    }

    int v43 = sub_3359C(a1);
    uint64_t v44 = *(void *)a1;
    if (v43)
    {
      (*(void (**)(uint64_t, uint64_t))(v44 + 256))(a1, a4);
      __int128 v74 = (os_log_t *)sub_138E8(13);
      v75 = *v74;
      if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
        __int16 v94 = 1024;
        int v95 = 2109;
        _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (didStartResult): Error calling DidStartIO on physical devices.",  __p,  0x12u);
      }

      v76 = __cxa_allocate_exception(0x10uLL);
      *(void *)v76 = &off_4865A0;
      v76[2] = v43;
    }

    (*(void (**)(uint64_t))(v44 + 544))(a1);
    uint64_t v45 = *(void **)(a1 + 240);
    uint64_t v46 = *(void **)(a1 + 248);
    while (v45 != v46)
    {
      (*(void (**)(void))(*(void *)*v45 + 24LL))(*v45);
      v45 += 2;
    }

    *(_DWORD *)(a1 + 792) = *(_DWORD *)(a1 + 796);
  }

void sub_2AC0B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2AC10C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 456))
  {
    char v82 = (os_log_t *)sub_138E8(13);
    v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 2141;
      _os_log_impl(&dword_0, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_2AF570(a1);
  uint64_t result = sub_25D14((unsigned int *)a1, a2, 0);
  if ((result & 3) != 3)
  {
    char v5 = result;
    if ((result & 3) == 0)
    {
      uint64_t v6 = sub_138E8(16);
      uint64_t result = sub_1D71E4(2, v6, (uint64_t)"", 2153, (uint64_t)"", "Stop is called on an already stopped device");
    }

    if ((_DWORD)a2 == 1)
    {
      if ((v5 & 1) == 0) {
        return result;
      }
    }

    else if ((_DWORD)a2 || (v5 & 2) == 0)
    {
      return result;
    }

    int v14 = sub_3C558(a1);
    uint64_t v15 = *(uint64_t **)(a1 + 240);
    char v16 = *(uint64_t **)(a1 + 248);
    while (v15 != v16)
    {
      uint64_t v17 = *v15;
      v15 += 2;
      (*(void (**)(uint64_t))(*(void *)v17 + 32LL))(v17);
    }

    uint64_t v18 = sub_138E8(16);
    uint64_t v19 = sub_138E8(31);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)__p = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&__p[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_46;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_46:
    sub_2CA1C(__p, a2);
    int v39 = v111[3];
    __int128 v40 = *(const char **)__p;
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    uint64_t v42 = __p;
    if (v39 < 0) {
      uint64_t v42 = v40;
    }
    sub_1D71E4(3, v18, (uint64_t)"", 2172, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v42, v41);
    if ((v111[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    kdebug_trace(553912349LL, (int)a2, 0LL, 0LL, 0LL);
    if ((_DWORD)a2 == 1) {
      int v43 = 0LL;
    }
    else {
      int v43 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    uint64_t v44 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v43);
    kdebug_trace(553912350LL, (int)a2, 0LL, 0LL, 0LL);
    if ((_DWORD)v44)
    {
      uint64_t v45 = sub_138E8(16);
      sub_2CA1C(__p, v44);
      int v46 = v111[3];
      __int16 v47 = *(const char **)__p;
      sub_23FE8((uint64_t)&v121, (os_unfair_lock_t)(a1 + 8));
      int v48 = __p;
      if (v46 < 0) {
        int v48 = v47;
      }
      if (v121.__m_.__opaque[15] >= 0) {
        sig = (const char *)&v121;
      }
      else {
        sig = (const char *)v121.__m_.__sig;
      }
      sub_1D71E4(1, v45, (uint64_t)"", 2180, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v48, sig);
      if (v121.__m_.__opaque[15] < 0) {
        operator delete((void *)v121.__m_.__sig);
      }
      if ((v111[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    int v50 = *(uint64_t ***)(a1 + 136);
    if (v50) {
      sub_1C9B20(v50);
    }
    int v51 = sub_3C684(a1);
    if (sub_3C7AC(a1))
    {
      BOOL v52 = 0LL;
      __int128 v53 = 0LL;
      goto LABEL_129;
    }

    AudioObjectID v54 = *(_DWORD *)(a1 + 128);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    uint64_t v55 = sub_138E8(13);
    if ((*(_BYTE *)(v55 + 8) & 1) != 0)
    {
      int v56 = *(os_log_s **)v55;
      if (*(void *)v55)
      {
        if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
        {
          v120.__cv_.__sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v120.__cv_.__opaque = inAddress.mElement;
          sub_613AC((uint64_t)&v121, (unsigned int *)&v120);
          uint64_t v57 = v121.__m_.__opaque[15] >= 0 ? &v121 : (std::mutex *)v121.__m_.__sig;
          *(_DWORD *)__p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 166;
          *(_WORD *)&__p[18] = 2080;
          *(void *)v111 = v57;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)&v111[10] = v54;
          _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  __p,  0x22u);
          if (v121.__m_.__opaque[15] < 0) {
            operator delete((void *)v121.__m_.__sig);
          }
        }
      }
    }

    AudioObjectID v106 = v54;
    AudioObjectPropertyAddress v107 = inAddress;
    int v108 = 0;
    uint64_t v109 = 0LL;
    if (sub_2AFCBC((uint64_t)&v106))
    {
      int v98 = v44;
      int v99 = v14;
      memset(v121.__m_.__opaque, 0, sizeof(v121.__m_.__opaque));
      v121.__m_.__sig = 850045863LL;
      memset(v120.__cv_.__opaque, 0, sizeof(v120.__cv_.__opaque));
      v120.__cv_.__sig = 1018212795LL;
      char v105 = 0;
      sub_7D684(inClientData, v54, &inAddress, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v105);
      for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v60.__d_.__rep_) / -1000)
      {
        unint64_t v59 = sub_2AFCBC((uint64_t)&v106);
        __int128 v53 = (os_log_s *)HIDWORD(v59);
        if (HIDWORD(v59)) {
          goto LABEL_127;
        }
        if (!(_DWORD)v59) {
          break;
        }
        if (i <= 0)
        {
          v72 = (os_log_t *)sub_138E8(13);
          __int128 v53 = (os_log_s *)2003329396;
          __int128 v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            AudioObjectPropertyAddress v101 = inAddress;
            sub_613AC((uint64_t)&__lk, &v101.mSelector);
            __int128 v74 = v103 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            *(_DWORD *)__p = 136316930;
            *(void *)&__p[4] = "HALPropertySynchronizer.h";
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = 248;
            *(_WORD *)&__p[18] = 2080;
            *(void *)v111 = "updated";
            *(_WORD *)&v111[8] = 2080;
            *(void *)&v111[10] = v74;
            __int16 v112 = 2080;
            v113 = "updated";
            __int16 v114 = 1024;
            int v115 = 0;
            __int16 v116 = 1024;
            int v117 = 0;
            __int16 v118 = 1024;
            AudioObjectID v119 = v54;
            _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  __p,  0x42u);
            if (v103 < 0) {
              operator delete(__lk.__m_);
            }
          }

          goto LABEL_127;
        }

        v60.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        uint64_t v61 = sub_138E8(13);
        if ((*(_BYTE *)(v61 + 8) & 1) != 0)
        {
          v62 = *(os_log_s **)v61;
          if (*(void *)v61)
          {
            if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__p = 136315906;
              *(void *)&__p[4] = "HALPropertySynchronizer.h";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 257;
              *(_WORD *)&__p[18] = 2080;
              *(void *)v111 = "with timeout";
              *(_WORD *)&v111[8] = 1024;
              *(_DWORD *)&v111[10] = v54;
              _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  __p,  0x22u);
            }
          }
        }

        sub_6DD4();
        *(void *)__p = &qword_48F828;
        __p[8] = 0;
        __p[8] = sub_1A30E4();
        __lk.__m_ = &v121;
        __lk.__owns_ = 1;
        std::mutex::lock(&v121);
        v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (!v105)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v63.__d_.__rep_ + 1000000 * i;
          while (1)
          {
            if (v64 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_85;
            }
            v65.__d_.__rep_ = v64 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v65.__d_.__rep_ >= 1) {
              break;
            }
LABEL_103:
            if (std::chrono::steady_clock::now().__d_.__rep_ >= v64 || v105) {
              goto LABEL_85;
            }
          }

          std::chrono::steady_clock::now();
          v66.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          if (!v66.__d_.__rep_)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0LL;
            goto LABEL_99;
          }

          if (v66.__d_.__rep_ < 1)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x8000000000000000LL;
          }

          else
          {
            if ((unint64_t)v66.__d_.__rep_ > 0x20C49BA5E353F7LL)
            {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_99;
            }

void sub_2AD0C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

void sub_2AD184(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(a1 + 456))
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v42 = "AggregateDevice_Common2.cpp";
      __int16 v43 = 1024;
      int v44 = 2244;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v6 = a1 + 664;
  if ((_DWORD)a2) {
    uint64_t v7 = 688LL;
  }
  else {
    uint64_t v7 = 664LL;
  }
  if ((_DWORD)a2) {
    uint64_t v6 = a1 + 688;
  }
  if ((uint64_t)(a3[1] - *a3) >> 2 != (uint64_t)(*(void *)(v6 + 8) - *(void *)(a1 + v7)) >> 3)
  {
    uint64_t v26 = (os_log_t *)sub_138E8(13);
    int v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v42 = "AggregateDevice_Common2.cpp";
      __int16 v43 = 1024;
      int v44 = 2246;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    char v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "Precondition failure.");
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2))
  {
    unint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + v7) + 8 * v8);
      (*(void (**)(uint64_t, BOOL))(*(void *)v9 + 144LL))(v9, *(_DWORD *)(*a3 + 4 * v8++) != 0);
    }

    while (v8 < (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2));
  }

  uint64_t inAddress_8 = 0LL;
  if ((_DWORD)a2) {
    unsigned int v10 = 1869968496;
  }
  else {
    unsigned int v10 = 1768845428;
  }
  inAddress[0] = 1937077093;
  inAddress[1] = v10;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize( *(_DWORD *)(a1 + 128),  (const AudioObjectPropertyAddress *)inAddress,  0,  0LL,  (UInt32 *)&inAddress_8 + 1);
  if (PropertyDataSize)
  {
    char v29 = (os_log_t *)sub_138E8(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      sub_613AC((uint64_t)__p, inAddress);
      uint64_t v31 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v42 = "AggregateDevice_Common2.cpp";
      __int16 v43 = 1024;
      int v44 = 2258;
      __int16 v45 = 2080;
      int v46 = v31;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Failed to get data size for property %s.",  buf,  0x1Cu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }

    int v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v32 = &off_4865A0;
    v32[2] = PropertyDataSize;
  }

  UInt32 v12 = HIDWORD(inAddress_8);
  char v13 = malloc(HIDWORD(inAddress_8));
  BOOL v14 = (_DWORD)a2 == 0;
  if ((_DWORD)a2) {
    uint64_t v15 = 736LL;
  }
  else {
    uint64_t v15 = 712LL;
  }
  if (v14) {
    uint64_t v16 = a1 + 712;
  }
  else {
    uint64_t v16 = a1 + 736;
  }
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v18 = *(void *)(a1 + v15);
  if (v17 != v18)
  {
    unint64_t v19 = 0LL;
    unsigned int v20 = 1;
    do
    {
      uint64_t v21 = *(void *)(v18 + 8 * v19);
      if (v21)
      {
        LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16LL))(v21);
        uint64_t v17 = *(void *)(v16 + 8);
        uint64_t v18 = *(void *)(a1 + v15);
      }

      v13[v19 + 3] = v21;
      unint64_t v19 = v20++;
    }

    while (v19 < (v17 - v18) >> 3);
    UInt32 v12 = HIDWORD(inAddress_8);
  }

  OSStatus v22 = AudioObjectSetPropertyData( *(_DWORD *)(a1 + 128),  (const AudioObjectPropertyAddress *)inAddress,  0,  0LL,  v12,  v13);
  if (v22)
  {
    char v33 = (os_log_t *)sub_138E8(13);
    __int16 v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      sub_613AC((uint64_t)__p, inAddress);
      int v35 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v42 = "AggregateDevice_Common2.cpp";
      __int16 v43 = 1024;
      int v44 = 2268;
      __int16 v45 = 2080;
      int v46 = v35;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Failed to set property property %s.",  buf,  0x1Cu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v36 = &off_4865A0;
    v36[2] = v22;
  }

  if (v13) {
    free(v13);
  }
}

void sub_2AD678(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2AD6B8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = 664LL;
  if (a2)
  {
    uint64_t v6 = 688LL;
    uint64_t v7 = a1 + 688;
  }

  else
  {
    uint64_t v7 = a1 + 664;
  }

  for (uint64_t i = *(uint64_t **)(a1 + v6); i != *(uint64_t **)(v7 + 8); ++i)
  {
    uint64_t v9 = *i;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32LL))(v9);
    sub_197A20(v10, a3);
  }

  uint64_t v11 = 712LL;
  if (a2)
  {
    uint64_t v11 = 736LL;
    uint64_t v12 = a1 + 736;
  }

  else
  {
    uint64_t v12 = a1 + 712;
  }

  for (j = *(void **)(a1 + v11); j != *(void **)(v12 + 8); ++j)
  {
    if (*j)
    {
      if ((*(unsigned int (**)(void))(*(void *)*j + 152LL))(*j))
      {
        uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*j + 32LL))(*j);
        sub_197A20(v14, a3);
      }
    }
  }

  return 0LL;
}

uint64_t sub_2AD7A0(uint64_t a1, int a2)
{
  uint64_t v4 = 664LL;
  if (a2)
  {
    uint64_t v4 = 688LL;
    uint64_t v5 = a1 + 688;
  }

  else
  {
    uint64_t v5 = a1 + 664;
  }

  for (uint64_t i = *(void **)(a1 + v4); i != *(void **)(v5 + 8); ++i)
  {
  }

  uint64_t v7 = 712LL;
  if (a2)
  {
    uint64_t v7 = 736LL;
    uint64_t v8 = a1 + 736;
  }

  else
  {
    uint64_t v8 = a1 + 712;
  }

  for (j = *(void **)(a1 + v7); j != *(void **)(v8 + 8); ++j)
  {
    if (*j
      && (*(unsigned int (**)(void))(*(void *)*j + 152LL))(*j)
      && *(_BYTE *)((*(uint64_t (**)(void))(*(void *)*j + 32LL))(*j) + 449))
    {
      return 1LL;
    }
  }

  return 0LL;
}

BOOL sub_2AD888(uint64_t a1)
{
  return *(void *)(a1 + 640) != *(void *)(a1 + 648);
}

uint64_t sub_2AD8B8(void **a1)
{
  if ((((uint64_t (*)(void **))(*a1)[42])(a1) & 1) == 0)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "AggregateDevice_Common2.cpp";
      __int16 v8 = 1024;
      int v9 = 2333;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v6,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return *a1[80];
}

void sub_2AD9C8(_Unwind_Exception *exception_object)
{
}

void sub_2AD9E4(uint64_t a1)
{
  unint64_t v14 = sub_1D7A74(a1 + 264);
  char v2 = (unint64_t *)(a1 + 80);
  if ((sub_230674(&v14, 0, (uint64_t)&v14, 8u, (void *)(a1 + 80)) & 1) == 0)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(16);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = 0LL;
      char v13 = 8;
      strcpy((char *)__p, "00000000");
      uint64_t v6 = 7LL;
      do
      {
        if (((v14 >> v5) & 1) != 0)
        {
          if (v13 >= 0) {
            uint64_t v7 = __p;
          }
          else {
            uint64_t v7 = (void **)__p[0];
          }
          *((_BYTE *)v7 + v6) = 49;
        }

        ++v5;
        --v6;
      }

      while (v5 != 8);
      __int16 v8 = __p;
      if (v13 < 0) {
        __int16 v8 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v16 = 1024;
      int v17 = 2348;
      __int16 v18 = 2080;
      unint64_t v19 = v8;
      __int16 v20 = 2080;
      uint64_t v21 = "anc|tel|sec|pri|hal";
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags have changed to %s (%s)", buf, 0x26u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_2AEFDC((char **)buf, (void *)a1, &v14);
    uint64_t v9 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = *(void *)buf;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    unint64_t v10 = v14;
    unint64_t v11 = *v2;
    if (((v14 ^ *v2) & 1) != 0
      || ((v14 >> 5) & 1) != ((v11 >> 5) & 1)
      || ((v14 >> 6) & 1) != ((v11 >> 6) & 1)
      || ((v14 >> 7) & 1) != ((v11 >> 7) & 1))
    {
      sub_3228C(a1, v14);
      unint64_t v10 = v14;
    }

    *(void *)(a1 + 80) = v10;
    *(_BYTE *)(a1 + 104) = 1;
  }

void sub_2ADBF4(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = 0LL;
  __int16 v12 = 256;
  uint64_t v4 = a1 + 520;
  uint64_t v5 = a1 + 544;
  do
  {
    char v6 = v2;
    if (*((_BYTE *)&v12 + v3)) {
      uint64_t v7 = 544LL;
    }
    else {
      uint64_t v7 = 520LL;
    }
    if (*((_BYTE *)&v12 + v3)) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v9 = *(uint64_t **)(a1 + v7);
    unint64_t v10 = *(uint64_t **)(v8 + 8);
    while (v9 != v10)
    {
      uint64_t v11 = *v9;
      v9 += 2;
      sub_33D60(v11);
    }

    char v2 = 1;
    uint64_t v3 = 1LL;
  }

  while ((v6 & 1) == 0);
}

uint64_t sub_2ADC98(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = 0LL;
  __int16 v13 = 256;
  uint64_t v4 = result + 520;
  uint64_t v5 = result + 544;
  do
  {
    char v6 = v2;
    if (*((_BYTE *)&v13 + v3)) {
      uint64_t v7 = 544LL;
    }
    else {
      uint64_t v7 = 520LL;
    }
    if (*((_BYTE *)&v13 + v3)) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v9 = *(void *)(v1 + v7);
    uint64_t v10 = *(void *)(v8 + 8);
    while (v9 != v10)
    {
      uint64_t v11 = *(void *)(*(void *)v9 + 136LL);
      unsigned __int8 v12 = atomic_load((unsigned __int8 *)(*(void *)(v11 + 360) + 16LL));
      if ((v12 & 1) != 0) {
        uint64_t result = sub_AE118(*(void *)(v11 + 360));
      }
      v9 += 16LL;
    }

    char v2 = 1;
    uint64_t v3 = 1LL;
  }

  while ((v6 & 1) == 0);
  return result;
}

uint64_t sub_2ADD58(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v4 = 688LL;
  }
  else {
    uint64_t v4 = 664LL;
  }
  if (a2) {
    uint64_t v5 = a1 + 688;
  }
  else {
    uint64_t v5 = a1 + 664;
  }
  uint64_t v6 = *(void *)(a1 + v4);
  if (*(void *)(v5 + 8) == v6)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v7 = 0LL;
    LODWORD(v8) = 0;
    unsigned int v9 = 1;
    do
    {
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v6 + 8 * v7) + 32LL))(*(void *)(v6 + 8 * v7));
      unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 128LL))(v10);
      else {
        uint64_t v8 = v11;
      }
      unint64_t v7 = v9;
      uint64_t v6 = *(void *)(a1 + v4);
      ++v9;
    }

    while (v7 < (*(void *)(v5 + 8) - v6) >> 3);
  }

  BOOL v12 = a2 == 0;
  if (a2) {
    uint64_t v13 = 736LL;
  }
  else {
    uint64_t v13 = 712LL;
  }
  if (v12) {
    uint64_t v14 = a1 + 712;
  }
  else {
    uint64_t v14 = a1 + 736;
  }
  uint64_t v15 = *(void *)(a1 + v13);
  if (*(void *)(v14 + 8) != v15)
  {
    unint64_t v16 = 0LL;
    unsigned int v17 = 1;
    do
    {
      uint64_t v18 = *(void *)(v15 + 8 * v16);
      if (v18)
      {
        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 152LL))(v18);
        uint64_t v15 = *(void *)(a1 + v13);
        if (v19)
        {
          uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v15 + 8 * v16) + 32LL))(*(void *)(v15 + 8 * v16));
          unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 128LL))(v20);
          else {
            uint64_t v8 = v21;
          }
          uint64_t v15 = *(void *)(a1 + v13);
        }
      }

      unint64_t v16 = v17++;
    }

    while (v16 < (*(void *)(v14 + 8) - v15) >> 3);
  }

  return v8;
}

uint64_t sub_2ADE9C( uint64_t a1, AudioBuffer *a2, _DWORD *a3, double *a4, unsigned int *a5, double *a6, uint64_t a7, __n128 a8)
{
  uint64_t v165 = a7;
  v170 = a6;
  v173 = a4;
  v164 = a2;
  uint64_t v10 = a1;
  if (!*(void *)(a1 + 456))
  {
    a1 = sub_138E8(13);
    int v46 = *(os_log_s **)a1;
    if (*(void *)a1)
    {
      a1 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
      if ((_DWORD)a1)
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 985;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The client IO proc must exist for IO to run.",  (uint8_t *)&buf,  0x12u);
      }
    }
  }

  uint64_t v11 = *(void *)(v10 + 664);
  uint64_t v12 = *(void *)(v10 + 672);
  v172 = a5;
  uint64_t v174 = v10;
  if (v11 != v12 && !*a3)
  {
    a1 = sub_138E8(13);
    __int16 v47 = *(os_log_s **)a1;
    a5 = v172;
    uint64_t v10 = v174;
    if (*(void *)a1)
    {
      a1 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
      if ((_DWORD)a1)
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 986;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Input ClientStreamCache exists, but the IO proc claims it has no buffers.",  (uint8_t *)&buf,  0x12u);
      }
    }
  }

  if (*(void *)(v10 + 688) != *(void *)(v10 + 696) && !*a5)
  {
    a1 = sub_138E8(13);
    int v48 = *(os_log_s **)a1;
    uint64_t v10 = v174;
    if (*(void *)a1)
    {
      a1 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
      if ((_DWORD)a1)
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 987;
        _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Output ClientStreamCache exists, but the IO proc claims it has no buffers.",  (uint8_t *)&buf,  0x12u);
      }
    }
  }

  uint64_t v13 = *(void *)(v10 + 664);
  uint64_t v14 = *(void *)(v10 + 672);
  if (*(_BYTE *)(v10 + 104))
  {
    a8 = (__n128)vextq_s8(*(int8x16_t *)(v10 + 88), *(int8x16_t *)(v10 + 88), 8uLL);
    *(__n128 *)(v10 + 88) = a8;
    *(_BYTE *)(v10 + 104) = 0;
  }

  if (v13 == v14)
  {
    UInt32 v171 = 0;
    int v169 = 0;
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = *(_DWORD **)(v10 + 760);
    if (*a3)
    {
      unint64_t v16 = 0LL;
      int v169 = 0;
      UInt32 v171 = 0;
      uint64_t v167 = v10 + 144;
      mBuffers = buf.mBuffers;
      while (1)
      {
        unsigned int v17 = &a3[4 * v16];
        uint64_t v19 = *((void *)v17 + 2);
        uint64_t v18 = v17 + 4;
        if (!v19)
        {
          if (v16 < *v15)
          {
            uint64_t v26 = &v15[4 * v16];
            v26[3] = 0;
            *((void *)v26 + 2) = 0LL;
          }

          goto LABEL_41;
        }

        uint64_t v20 = *(void *)(*(void *)(v10 + 712) + 8 * v16);
        if (v20)
        {
          signed int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 160LL))(v20);
          UInt32 v22 = v21;
          if (v21 == -2)
          {
            int v23 = sub_7531C();
            UInt32 v24 = v171;
            if (!v23) {
              UInt32 v24 = v16;
            }
            UInt32 v171 = v24;
            int v25 = v169;
            if (!v23) {
              int v25 = 1;
            }
            int v169 = v25;
            a1 = sub_7531C();
            if ((_DWORD)a1)
            {
              uint64_t v10 = v174;
              if (*(_BYTE *)(v174 + 632))
              {
                v153 = (os_log_t *)sub_138E8(13);
                v154 = *v153;
                if (*v153)
                {
                  if (os_log_type_enabled(*v153, OS_LOG_TYPE_ERROR))
                  {
                    buf.uint64_t mNumberBuffers = 136315394;
                    *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
                    LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
                    *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 1107;
                    _os_log_impl( &dword_0,  v154,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Siri ducking for speaker supported. Should not process telemetry in aggregate device",  (uint8_t *)&buf,  0x12u);
                  }
                }

                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error( exception,  "Siri ducking for speaker supported. Should not process telemetry in aggregate device");
              }

              goto LABEL_41;
            }
          }

          else
          {
            int v27 = *(unsigned int **)(*(void *)(v174 + 664) + 8LL * v21);
            v176 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v27 + 64LL))(v27);
            v175 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v27 + 72LL))(v27);
            uint64_t v28 = v27[72];
            char v29 = &a3[4 * v16];
            unsigned int v31 = v29[3];
            uint64_t v30 = v29 + 3;
            uint64_t v32 = (*(uint64_t (**)(uint64_t, void))(*(void *)v20 + 96LL))(v20, v31);
            char v33 = (AudioBuffer *)(v18 - 1);
            if ((*(unsigned int (**)(unsigned int *))(*(void *)v27 + 152LL))(v27))
            {
              HIDWORD(p_buf) = v22;
              buf.uint64_t mNumberBuffers = 1;
              AudioBuffer *mBuffers = *v33;
              uint64_t v34 = *(void *)(v174 + 88);
              v177 = 0LL;
              LODWORD(p_buf) = 1;
              if (v34) {
                sub_4784(v34, &v177, (uint64_t)(v18 - 1));
              }
              sub_4974(v167, v27[73], (uint64_t)&buf, v32, (uint64_t)v173);
            }

            if ((*(unsigned int (**)(unsigned int *))(*(void *)v27 + 40LL))(v27))
            {
              UInt32 v35 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v27 + 184LL))(v27, v32);
              int v36 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v27 + 120LL))(v27, v32);
              uint64_t mNumberBuffers = v176->mNumberBuffers;
              if ((_DWORD)mNumberBuffers)
              {
                p_mDataByteSize = &v176->mBuffers[0].mDataByteSize;
                do
                {
                  UInt32 *p_mDataByteSize = v35;
                  p_mDataByteSize += 4;
                  --mNumberBuffers;
                }

                while (mNumberBuffers);
              }

              UInt32 v39 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v27 + 200LL))(v27, v32);
              uint64_t v40 = v175->mNumberBuffers;
              if ((_DWORD)v40)
              {
                int v41 = &v175->mBuffers[0].mDataByteSize;
                do
                {
                  UInt32 *v41 = v39;
                  v41 += 4;
                  v15[4 * v28 + 3] = v36;
                  LODWORD(v28) = v28 + 1;
                  --v40;
                }

                while (v40);
              }

              uint64_t v42 = (OpaqueAudioConverter **)(*(uint64_t (**)(unsigned int *))(*(void *)v27 + 32LL))(v27);
              buf.uint64_t mNumberBuffers = 1;
              AudioBuffer *mBuffers = *v33;
              sub_3014C(v42[73], v32, &buf, v176);
              (*((void (**)(OpaqueAudioConverter **, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v42
               + 18))( v42,  v173,  v32,  1LL,  &v176,  1LL,  &v175);
              __int16 v43 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v27 + 160LL))(v27);
              sub_3014C(v42[84], v32, v175, v43);
              uint64_t v44 = *(void *)(v174 + 88);
              v177 = 0LL;
              LODWORD(p_buf) = 2;
              HIDWORD(p_buf) = v22;
              if (v44) {
                sub_75260(v44, &v177, (uint64_t)v43, v32, (uint64_t)*v173);
              }
              sub_4974(v167, v27[74], (uint64_t)v43, v32, (uint64_t)v173);
            }

            else
            {
              __int16 v45 = &v15[4 * v28];
              v45[3] = *v30;
              *((void *)v45 + 2) = *v18;
              a1 = (*(uint64_t (**)(unsigned int *))(*(void *)v27 + 152LL))(v27);
              uint64_t v10 = v174;
              if (!(_DWORD)a1) {
                goto LABEL_41;
              }
              a1 = *(void *)(v174 + 88);
              *(void *)&buf.uint64_t mNumberBuffers = 0LL;
              buf.mBuffers[0].mNumberChannels = 2;
              buf.mBuffers[0].mDataByteSize = v22;
              if (!a1) {
                goto LABEL_41;
              }
              sub_4784(a1, &buf, (uint64_t)&v15[4 * v28 + 2]);
            }
          }

          uint64_t v10 = v174;
        }

void sub_2AEFB8(_Unwind_Exception *a1)
{
}

void sub_2AEFDC(char **a1, void *a2, unint64_t *a3)
{
  uint64_t v6 = a2[84];
  uint64_t v7 = a2[83];
  uint64_t v8 = sub_138E8(16);
  uint64_t v9 = sub_138E8(40);
  char v10 = 0;
  uint64_t v11 = 0LL;
  unint64_t v12 = v6 - v7;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v13 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v11];
    char v15 = v10;
    if (((v13 & v14) != 0) != ((*(void *)(v9 + 8) & v14) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1LL;
    if ((v15 & 1) != 0)
    {
      if ((v13 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
  }

  if ((v13 & v14) == 0) {
    uint64_t v8 = v9;
  }
  if ((*(void *)(v8 + 8) & 1) != 0)
  {
LABEL_9:
    unint64_t v16 = *(os_log_s **)v8;
    if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1623;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12 >> 3;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitors for %d input client streams",  buf,  0x18u);
    }
  }

void sub_2AF510( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v15 = *v13;
  *uint64_t v13 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2AF570(uint64_t result)
{
  if (!*(_DWORD *)(result + 128))
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      int v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1911;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  uint64_t v1 = (void *)result;
  if (!*(void *)(result + 416))
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    UInt32 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      int v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1912;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
    }

    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Invariant failure.");
  }

  for (unint64_t i = *(void **)(result + 520); i != *(void **)(result + 528); i += 2)
  {
    if (!*i)
    {
      uint64_t v9 = (os_log_t *)sub_138E8(13);
      char v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          int v36 = 136315394;
          int v37 = "AggregateDevice_Common2.cpp";
          __int16 v38 = 1024;
          int v39 = 1918;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
        }
      }

      uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v11, "Invariant failure.");
    }
  }

  for (j = *(void **)(result + 544); j != *(void **)(result + 552); j += 2)
  {
    if (!*j)
    {
      unint64_t v12 = (os_log_t *)sub_138E8(13);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        int v36 = 136315394;
        int v37 = "AggregateDevice_Common2.cpp";
        __int16 v38 = 1024;
        int v39 = 1919;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
      }

      uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "Invariant failure.");
    }
  }

  uint64_t v4 = *(void *)(result + 648) - *(void *)(result + 640);
  if (v4) {
    BOOL v5 = v4 == 8;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      int v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1920;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
    }

    unint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v26, "Invariant failure.");
  }

  if (*(void *)(result + 664) == *(void *)(result + 672) && *(void *)(result + 688) == *(void *)(result + 696))
  {
    uint64_t v30 = (os_log_t *)sub_138E8(13);
    char v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      int v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1921;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
    }

    uint64_t v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "Invariant failure.");
  }

  uint64_t v6 = *(void *)(result + 712);
  if (v6 == *(void *)(result + 720))
  {
    if (*(void *)(result + 736) == *(void *)(result + 744))
    {
      unint64_t v33 = (os_log_t *)sub_138E8(13);
      uint64_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        int v36 = 136315394;
        int v37 = "AggregateDevice_Common2.cpp";
        __int16 v38 = 1024;
        int v39 = 1922;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
      }

      uint64_t v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v35, "Invariant failure.");
    }
  }

  else
  {
    unint64_t v7 = 0LL;
    unsigned int v8 = 1;
    do
    {
      uint64_t result = *(void *)(v6 + 8 * v7);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136LL))(result);
        uint64_t v6 = v1[89];
        if ((result & 1) == 0)
        {
          uint64_t result = (*(uint64_t (**)(void))(**(void **)(v6 + 8 * v7) + 144LL))(*(void *)(v6 + 8 * v7));
          if (!(_DWORD)result)
          {
            uint64_t v15 = (os_log_t *)sub_138E8(13);
            unint64_t v16 = *v15;
            if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
            {
              int v36 = 136315394;
              int v37 = "AggregateDevice_Common2.cpp";
              __int16 v38 = 1024;
              int v39 = 1930;
              _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
            }

            uint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v17, "Invariant failure.");
          }

          uint64_t v6 = v1[89];
        }
      }

      unint64_t v7 = v8++;
    }

    while (v7 < (v1[90] - v6) >> 3);
  }

  if ((v1[57] != 0LL) == (v1[58] == 0LL))
  {
    uint64_t v27 = (os_log_t *)sub_138E8(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      int v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1933;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v36,  0x12u);
    }

    uint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Invariant failure.");
  }

  return result;
}

void sub_2AFC80(_Unwind_Exception *a1)
{
}

unint64_t sub_2AFCBC(uint64_t a1)
{
  char v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_3C9B8((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    unint64_t v7 = (os_log_t *)sub_138E8(13);
    unsigned int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        char v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          unint64_t v12 = __p;
        }
        else {
          unint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        uint64_t v28 = v11;
        __int16 v29 = 2080;
        uint64_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_2AFE64(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2AFE84(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = 0LL;
  uint64_t v89 = 0LL;
  LOWORD(v72[0]) = 256;
  int v64 = (uint64_t **)(a1 + 688);
  unsigned int v65 = (uint64_t **)(a1 + 664);
  uint64_t v3 = a1 + 712;
  uint64_t v4 = a1 + 736;
  do
  {
    char v5 = v1;
    int v6 = *((unsigned __int8 *)v72 + v2);
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    unint64_t v7 = (char *)&v89;
    if (!v6) {
      unint64_t v7 = (char *)&v89 + 4;
    }
    *(void *)&_BYTE buf[24] = v7;
    unsigned int v8 = v65;
    if (v6) {
      unsigned int v8 = v64;
    }
    int v9 = *v8;
    char v10 = v8[1];
    v85[0] = _NSConcreteStackBlock;
    v85[1] = 0x40000000LL;
    int v86 = sub_2B1CFC;
    int v87 = &unk_47AF68;
    unint64_t v88 = buf;
    while (v9 != v10)
      v86((uint64_t)v85, *v9++);
    if (v6) {
      uint64_t v11 = 736LL;
    }
    else {
      uint64_t v11 = 712LL;
    }
    if (v6) {
      uint64_t v12 = v4;
    }
    else {
      uint64_t v12 = v3;
    }
    AudioObjectID v13 = *(void **)(a1 + v11);
    unint64_t v14 = *(void **)(v12 + 8);
    while (v13 != v14)
    {
      if (*v13) {
        (*(void (**)(void))(*(void *)*v13 + 24LL))(*v13);
      }
      ++v13;
    }

    _Block_object_dispose(buf, 8);
    char v1 = 1;
    uint64_t v2 = 1LL;
  }

  while ((v5 & 1) == 0);
  int v15 = HIDWORD(v89);
  if (HIDWORD(v89))
  {
    uint64_t v16 = calloc(1uLL, (16 * HIDWORD(v89)) | 8u);
    uint64_t v17 = a1;
    if (v16) {
      *uint64_t v16 = v15;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = a1;
  }

  *(void *)AudioObjectPropertyAddress buf = v16;
  *(_DWORD *)&buf[8] = 2 * (v16 != 0LL);
  unint64_t v61 = (void *)(v17 + 760);
  sub_2DB30(v17 + 760, (unsigned int **)buf);
  sub_2DBF4((unsigned int **)buf);
  int v18 = v89;
  if ((_DWORD)v89)
  {
    char v19 = calloc(1uLL, (16 * (_DWORD)v89) | 8u);
    uint64_t v17 = a1;
    if (v19) {
      *char v19 = v18;
    }
  }

  else
  {
    char v19 = 0LL;
  }

  *(void *)AudioObjectPropertyAddress buf = v19;
  *(_DWORD *)&buf[8] = 2 * (v19 != 0LL);
  std::chrono::system_clock::time_point v60 = (void *)(v17 + 776);
  sub_2DB30(v17 + 776, (unsigned int **)buf);
  sub_2DBF4((unsigned int **)buf);
  char v20 = 0;
  uint64_t v21 = 0LL;
  __int16 v84 = 256;
  uint64_t v67 = v17 + 144;
  uint64_t v22 = 1LL;
  do
  {
    char v63 = v20;
    int v23 = *((unsigned __int8 *)&v84 + v21);
    if (*((_BYTE *)&v84 + v21)) {
      int v24 = v60;
    }
    else {
      int v24 = v61;
    }
    __int16 v25 = v64;
    if (!v23) {
      __int16 v25 = v65;
    }
    uint64_t v70 = v25;
    uint64_t v26 = (char *)v25[1] - (char *)*v25;
    if (v26)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0LL;
      unint64_t v29 = v26 >> 3;
      if (v29 <= 1) {
        uint64_t v30 = 1LL;
      }
      else {
        uint64_t v30 = v29;
      }
      int v66 = v23;
      uint64_t v31 = 8LL;
      if (!v23) {
        uint64_t v31 = 9LL;
      }
      uint64_t v68 = v30;
      uint64_t v69 = v31;
      while (1)
      {
        AudioObjectID v32 = (_DWORD *)(*v70)[v28];
        uint64_t v33 = (*(uint64_t (**)(_DWORD *))(*(void *)v32 + 48LL))(v32);
        uint64_t v34 = (*(uint64_t (**)(_DWORD *))(*(void *)v32 + 56LL))(v32);
        int v35 = (*(uint64_t (**)(_DWORD *))(*(void *)v32 + 40LL))(v32);
        if ((v35 & 1) == 0)
        {
          uint64_t v36 = sub_138E8(16);
          uint64_t v37 = sub_138E8(24);
          char v38 = 0;
          uint64_t v39 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v40 = *(void *)(v36 + 8);
          while (1)
          {
            uint64_t v41 = *(int *)&buf[4 * v39];
            char v42 = v38;
            if (((v40 & v41) != 0) != ((*(void *)(v37 + 8) & v41) != 0)) {
              break;
            }
            char v38 = 1;
            uint64_t v39 = 1LL;
            if ((v42 & 1) != 0) {
              goto LABEL_49;
            }
          }

          if ((v40 & v41) == 0) {
            uint64_t v36 = v37;
          }
LABEL_49:
          __int16 v43 = *(os_log_s **)v36;
          if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1765;
            _os_log_impl(&dword_0, v43, OS_LOG_TYPE_INFO, "%25s:%-5d DSP is disabled", buf, 0x12u);
          }
        }

        (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(void *)v32 + 136LL))(&v82, v32);
        uint64_t v80 = 0LL;
        uint64_t v81 = 0LL;
        if (v83)
        {
          uint64_t v44 = std::__shared_weak_count::lock(v83);
          uint64_t v81 = v44;
          if (v44)
          {
            uint64_t v80 = v82;
            if (v82)
            {
              sub_85A90(v79, (void *)(v82 + 112));
              if (sub_22F49C(v79))
              {
                sub_2D9BB0(&v78, (uint64_t)v79, 0);
                std::operator+<char>("PreDSP - ", &v78);
                if (v66) {
                  uint64_t v45 = v33;
                }
                else {
                  uint64_t v45 = v34;
                }
                __int128 v46 = *(_OWORD *)v45;
                __int128 v47 = *(_OWORD *)(v45 + 16);
                uint64_t v91 = *(void *)(v45 + 32);
                *(_OWORD *)AudioObjectPropertyAddress buf = v46;
                *(_OWORD *)&buf[16] = v47;
                v32[73] = v22;
                sub_2D5D4(v67, v22, (uint64_t *)&v76, (uint64_t)buf, v66 == 0);
                uint64_t v48 = (v22 + 1);
                if (v35)
                {
                  std::operator+<char>("PostDSP - ", &v78);
                  if (v66) {
                    uint64_t v49 = v34;
                  }
                  else {
                    uint64_t v49 = v33;
                  }
                  __int128 v50 = *(_OWORD *)v49;
                  __int128 v51 = *(_OWORD *)(v49 + 16);
                  uint64_t v73 = *(void *)(v49 + 32);
                  v72[0] = v50;
                  v72[1] = v51;
                  v32[74] = v48;
                  sub_2D5D4(v67, (v22 + 1), (uint64_t *)&__p, (uint64_t)v72, v66 == 0);
                  if (v75 < 0) {
                    operator delete(__p);
                  }
                  uint64_t v48 = (v22 + 2);
                }

                sub_2D840(v67);
                if (v77 < 0) {
                  operator delete(v76);
                }
                uint64_t v22 = v48;
              }

              sub_85B80(v79);
            }
          }
        }

        else
        {
          uint64_t v44 = 0LL;
        }

        v32[72] = v27;
        uint64_t v52 = (*(uint64_t (**)(_DWORD *))(*(void *)v32 + 8 * v69))(v32);
        uint64_t v71 = v28;
        __int128 v53 = v44;
        if ((*(_BYTE *)(v33 + 12) & 0x20) == 0) {
          break;
        }
        uint64_t v54 = v22;
        uint64_t v55 = *(unsigned int *)(v33 + 28);
        if ((_DWORD)v55) {
          goto LABEL_76;
        }
LABEL_84:
        uint64_t v22 = v54;
        if (v53)
        {
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          do
            unint64_t v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }

        if (v83) {
          std::__shared_weak_count::__release_weak(v83);
        }
        uint64_t v28 = v71 + 1;
        if (v71 + 1 == v68) {
          goto LABEL_92;
        }
      }

      uint64_t v54 = v22;
      uint64_t v55 = 1LL;
LABEL_76:
      uint64_t v56 = 8LL;
      do
      {
        if (v35)
        {
          *(_OWORD *)(*v24 + 16LL * v27 + 8) = *(_OWORD *)(v52 + v56);
          (*(void (**)(_DWORD *, uint64_t))(*(void *)v32 + 168LL))(v32, v52);
        }

        else
        {
          if ((*(_BYTE *)(v33 + 12) & 0x20) != 0) {
            int v57 = 1;
          }
          else {
            int v57 = *(_DWORD *)(v33 + 28);
          }
          *(_DWORD *)(*v24 + 16LL * v27 + 8) = v57;
        }

        ++v27;
        v56 += 16LL;
        --v55;
      }

      while (v55);
      goto LABEL_84;
    }

void sub_2B04D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, char a46, uint64_t a47, uint64_t a48, char a49)
{
}

void sub_2B058C(void *a1)
{
  if (*(void *)sub_138E8(16))
  {
    uint64_t v2 = (os_log_t *)sub_138E8(16);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1438;
      __int16 v83 = 2048;
      v84[0] = a1;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AggregateDevice_Common2 instance %p stream formats",  buf,  0x1Cu);
    }

    uint64_t v4 = (os_log_t *)sub_138E8(16);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1440;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client input stream cache data:", buf, 0x12u);
    }

    uint64_t v6 = a1[83];
    if (a1[84] != v6)
    {
      unint64_t v7 = 0LL;
      unsigned int v8 = 1;
      do
      {
        uint64_t v9 = *(void *)(v6 + 8 * v7);
        char v10 = (os_log_t *)sub_138E8(16);
        uint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48LL))(v9);
          sub_2CC00(&__p, v12);
          AudioObjectID v13 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1444;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v8 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v13;
          _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
        }

        unint64_t v14 = (os_log_t *)sub_138E8(16);
        int v15 = *v14;
        if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56LL))(v9);
          sub_2CC00(&__p, v16);
          uint64_t v17 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1445;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v8 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v17;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
        }

        unint64_t v7 = v8;
        uint64_t v6 = a1[83];
        ++v8;
      }

      while (v7 < (a1[84] - v6) >> 3);
    }

    int v18 = (os_log_t *)sub_138E8(16);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1448;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client output stream cache data:", buf, 0x12u);
    }

    uint64_t v20 = a1[86];
    if (a1[87] != v20)
    {
      unint64_t v21 = 0LL;
      unsigned int v22 = 1;
      do
      {
        uint64_t v23 = *(void *)(v20 + 8 * v21);
        int v24 = (os_log_t *)sub_138E8(16);
        __int16 v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48LL))(v23);
          sub_2CC00(&__p, v26);
          unsigned int v27 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1452;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v22 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v27;
          _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
        }

        uint64_t v28 = (os_log_t *)sub_138E8(16);
        unint64_t v29 = *v28;
        if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 56LL))(v23);
          sub_2CC00(&__p, v30);
          uint64_t v31 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1453;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v22 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v31;
          _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
        }

        unint64_t v21 = v22;
        uint64_t v20 = a1[86];
        ++v22;
      }

      while (v21 < (a1[87] - v20) >> 3);
    }

    AudioObjectID v32 = (os_log_t *)sub_138E8(16);
    uint64_t v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1456;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Underlying input stream cache data:", buf, 0x12u);
    }

    uint64_t v34 = a1[89];
    if (a1[90] != v34)
    {
      unint64_t v35 = 0LL;
      unsigned int v36 = 1;
      while (1)
      {
        uint64_t v37 = *(void *)(v34 + 8 * v35);
        if (!v37) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 136LL))(v37))
        {
          char v38 = (os_log_t *)sub_138E8(16);
          os_log_t v39 = *v38;
          if (!*v38 || !os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_64;
          }
          int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 160LL))(v37);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1466;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v36 - 1;
          WORD2(v84[0]) = 1024;
          *(_DWORD *)((char *)v84 + 6) = v40;
          uint64_t v41 = v39;
          char v42 = "%25s:%-5d     stream %u > see input client stream %d";
          uint32_t v43 = 30;
          goto LABEL_63;
        }

        int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 144LL))(v37);
        __int128 v47 = (os_log_t *)sub_138E8(16);
        uint64_t v48 = *v47;
        if (!v46)
        {
          if (v48 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48LL))(v37);
            sub_2CC00(&__p, v49);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v80 = "AggregateDevice_Common2.cpp";
            __int16 v81 = 1024;
            int v82 = 1474;
            __int16 v83 = 1024;
            LODWORD(v84[0]) = v36 - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = p_p;
            _os_log_impl(&dword_0, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
          }

          __int128 v51 = (os_log_t *)sub_138E8(16);
          uint64_t v52 = *v51;
          if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 56LL))(v37);
            sub_2CC00(&__p, v53);
            uint64_t v54 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v80 = "AggregateDevice_Common2.cpp";
            __int16 v81 = 1024;
            int v82 = 1475;
            __int16 v83 = 1024;
            LODWORD(v84[0]) = v36 - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = v54;
            _os_log_impl(&dword_0, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
          }

          goto LABEL_64;
        }

        if (v48 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1470;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v36 - 1;
          uint64_t v41 = v48;
          char v42 = "%25s:%-5d     stream %u > hidden";
          goto LABEL_62;
        }

void sub_2B11D8(void *a1)
{
  uint64_t v2 = (void *)sub_138E8(16);
  uint64_t v3 = sub_138E8(24);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v6 = v2[1];
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = (void *)v3;
  }
LABEL_7:
  if (*v2)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(16);
    char v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v62 = 1024;
      int v63 = 1509;
      __int16 v64 = 2048;
      v65[0] = a1;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "%25s:%-5d AggregateDevice_Common2 instance %p DSPChain descriptions",  buf,  0x1Cu);
    }

    uint64_t v11 = a1[83];
    if (a1[84] != v11)
    {
      unint64_t v12 = 0LL;
      unsigned int v13 = 1;
      do
      {
        uint64_t v14 = *(void *)(v11 + 8 * v12);
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 40LL))(v14);
        uint64_t v16 = (os_log_t *)sub_138E8(16);
        uint64_t v17 = *v16;
        if (v15)
        {
          if (v17 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32LL))(v14);
            sub_2BE2C(__p, v18);
            char v19 = __p;
            if (v60 < 0) {
              char v19 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            __int16 v62 = 1024;
            int v63 = 1516;
            __int16 v64 = 1024;
            LODWORD(v65[0]) = v13 - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v19;
            _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client input stream [%u] DSP Chain:\n%s",  buf,  0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        else if (v17 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1520;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v13 - 1;
          _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client input stream [%u] DSP Chain: disabled.",  buf,  0x18u);
        }

        unint64_t v12 = v13;
        uint64_t v11 = a1[83];
        ++v13;
      }

      while (v12 < (a1[84] - v11) >> 3);
    }

    uint64_t v20 = a1[86];
    if (a1[87] != v20)
    {
      unint64_t v21 = 0LL;
      unsigned int v22 = 1;
      do
      {
        uint64_t v23 = *(void *)(v20 + 8 * v21);
        int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40LL))(v23);
        __int16 v25 = (os_log_t *)sub_138E8(16);
        uint64_t v26 = *v25;
        if (v24)
        {
          if (v26 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 32LL))(v23);
            sub_2BE2C(__p, v27);
            uint64_t v28 = __p;
            if (v60 < 0) {
              uint64_t v28 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            __int16 v62 = 1024;
            int v63 = 1528;
            __int16 v64 = 1024;
            LODWORD(v65[0]) = v22 - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v28;
            _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client output stream [%u] DSP Chain:\n%s",  buf,  0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        else if (v26 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1532;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v22 - 1;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client output stream [%u] DSP Chain: disabled.",  buf,  0x18u);
        }

        unint64_t v21 = v22;
        uint64_t v20 = a1[86];
        ++v22;
      }

      while (v21 < (a1[87] - v20) >> 3);
    }

    uint64_t v29 = a1[89];
    if (a1[90] != v29)
    {
      unint64_t v30 = 0LL;
      unsigned int v31 = 1;
      while (1)
      {
        uint64_t v32 = *(void *)(v29 + 8 * v30);
        if (!v32) {
          break;
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)v32 + 136LL))(v32) & 1) != 0
          || (*(unsigned int (**)(uint64_t))(*(void *)v32 + 144LL))(v32))
        {
          uint64_t v33 = (os_log_t *)sub_138E8(16);
          os_log_t v34 = *v33;
          if (!*v33 || !os_log_type_enabled(*v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_49;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1544;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v31 - 1;
          unint64_t v35 = v34;
          unsigned int v36 = "%25s:%-5d Underlying input stream [%u] maintains no DSP chain (it is a pass through).";
          goto LABEL_48;
        }

        int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 40LL))(v32);
        int v40 = (os_log_t *)sub_138E8(16);
        uint64_t v41 = *v40;
        if (v39)
        {
          if (v41 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 32LL))(v32);
            sub_2BE2C(__p, v42);
            uint32_t v43 = __p;
            if (v60 < 0) {
              uint32_t v43 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            __int16 v62 = 1024;
            int v63 = 1548;
            __int16 v64 = 1024;
            LODWORD(v65[0]) = v31 - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v43;
            _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Underlying input stream [%u] DSP Chain:\n%s",  buf,  0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }

          goto LABEL_49;
        }

        if (v41 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1552;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v31 - 1;
          unint64_t v35 = v41;
          unsigned int v36 = "%25s:%-5d Underlying input stream [%u] DSP Chain: disabled.";
LABEL_48:
          _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEBUG, v36, buf, 0x18u);
        }

void sub_2B1B28(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = 0LL;
    char v13 = 8;
    strcpy((char *)__p, "00000000");
    uint64_t v5 = 7LL;
    do
    {
      if (((*(void *)(a1 + 80) >> v4) & 1) != 0)
      {
        if (v13 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *((_BYTE *)v6 + v5) = 49;
      }

      ++v4;
      --v5;
    }

    while (v4 != 8);
    uint64_t v7 = __p;
    if (v13 < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
    __int16 v15 = 1024;
    int v16 = 1607;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2080;
    uint64_t v20 = "anc|tel|sec|pri|hal";
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags : %s (%s)", buf, 0x26u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  char v8 = operator new(0x20uLL);
  v8[4] = 0;
  *(void *)char v8 = off_47AFC0;
  *((void *)v8 + 1) = 0LL;
  *((void *)v8 + 3) = 0LL;
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  sub_2AEFDC((char **)buf, (void *)a1, (unint64_t *)(a1 + 80));
  uint64_t v10 = *(void *)buf;
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)buf;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    uint64_t v10 = *(void *)(a1 + 96);
  }

  *(_BYTE *)(a1 + 104) = v10 != 0;
  sub_3228C(a1, *(void *)(a1 + 80));
}

uint64_t sub_2B1CFC(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48LL))(a2);
  if ((*(_BYTE *)(result + 12) & 0x20) != 0) {
    int v5 = *(_DWORD *)(result + 28);
  }
  else {
    int v5 = 1;
  }
  uint64_t v6 = *(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  *v6 += v5;
  return result;
}

uint64_t sub_2B1D68(uint64_t a1)
{
  *(void *)a1 = off_47AD18;
  uint64_t v2 = *(void **)(a1 + 664);
  uint64_t v3 = *(void **)(a1 + 672);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8LL))(*v2);
    }
    ++v2;
  }

  uint64_t v4 = *(void **)(a1 + 688);
  int v5 = *(void **)(a1 + 696);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8LL))(*v4);
    }
    ++v4;
  }

  uint64_t v6 = *(void **)(a1 + 712);
  uint64_t v7 = *(void **)(a1 + 720);
  while (v6 != v7)
  {
    if (*v6) {
      (*(void (**)(void))(*(void *)*v6 + 8LL))(*v6);
    }
    ++v6;
  }

  char v8 = *(void **)(a1 + 736);
  uint64_t v9 = *(void **)(a1 + 744);
  while (v8 != v9)
  {
    if (*v8) {
      (*(void (**)(void))(*(void *)*v8 + 8LL))(*v8);
    }
    ++v8;
  }

  sub_2DBF4((unsigned int **)(a1 + 776));
  sub_2DBF4((unsigned int **)(a1 + 760));
  uint64_t v10 = *(void **)(a1 + 736);
  if (v10)
  {
    *(void *)(a1 + 744) = v10;
    operator delete(v10);
  }

  uint64_t v11 = *(void **)(a1 + 712);
  if (v11)
  {
    *(void *)(a1 + 720) = v11;
    operator delete(v11);
  }

  unint64_t v12 = *(void **)(a1 + 688);
  if (v12)
  {
    *(void *)(a1 + 696) = v12;
    operator delete(v12);
  }

  char v13 = *(void **)(a1 + 664);
  if (v13)
  {
    *(void *)(a1 + 672) = v13;
    operator delete(v13);
  }

  uint64_t v14 = *(void **)(a1 + 640);
  if (v14)
  {
    *(void *)(a1 + 648) = v14;
    operator delete(v14);
  }

  return sub_AB51C(a1);
}

uint64_t sub_2B1EAC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = -1;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  if (!a2)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "AggregateDevice_Common2.cpp";
        __int16 v7 = 1024;
        int v8 = 135;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return result;
}

void sub_2B1FB8(_Unwind_Exception *a1)
{
}

uint64_t sub_2B1FE0(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)uint64_t result = a3;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  if (!a2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        __int16 v7 = "AggregateDevice_Common2.cpp";
        __int16 v8 = 1024;
        int v9 = 143;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v6,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return result;
}

void sub_2B20E8(_Unwind_Exception *a1)
{
}

uint64_t sub_2B2110(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_47A9B8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  if (!a4)
  {
    uint64_t v48 = (os_log_t *)sub_138E8(13);
    os_log_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v62 = "AggregateDevice_Common2.cpp";
      __int16 v63 = 1024;
      int v64 = 299;
      _os_log_impl(&dword_0, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = a1;
  if (a3)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 136LL))(&v53, a3);
    if (v54)
    {
      int v5 = std::__shared_weak_count::lock(v54);
      int v6 = v5;
      if (v5)
      {
        uint64_t v7 = v53;
        if (v53)
        {
          uint64_t v52 = v5;
          uint64_t v8 = *(void *)(v4 + 32);
          uint64_t v9 = sub_6ADEC(v53);
          int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 88LL))(v8, v9);
          uint64_t v51 = v4;
          if (v10)
          {
            int v11 = 0;
            uint64_t v12 = 0LL;
            if ((_DWORD)v9) {
              int v13 = 1869968496;
            }
            else {
              int v13 = 1768845428;
            }
            while (1)
            {
              uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 96LL))(v8, v9, v12);
              if (!v14) {
                break;
              }
              __int16 v15 = *(std::__shared_weak_count **)(v7 + 88);
              if (v15)
              {
                int v16 = std::__shared_weak_count::lock(v15);
                if (v16)
                {
                  __int16 v17 = v16;
                  uint64_t v18 = *(void *)(v7 + 80);
                  if (v18) {
                    BOOL v19 = v18 == v14;
                  }
                  else {
                    BOOL v19 = 0;
                  }
                  int v20 = v19;
                  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                  do
                    unint64_t v22 = __ldaxr(p_shared_owners);
                  while (__stlxr(v22 - 1, p_shared_owners));
                  if (v22)
                  {
                    if (v20) {
                      goto LABEL_47;
                    }
                  }

                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                    std::__shared_weak_count::__release_weak(v17);
                    if ((v20 & 1) != 0)
                    {
LABEL_47:
                      uint64_t v34 = sub_138E8(16);
                      uint64_t v4 = v51;
                      if ((*(_BYTE *)(v34 + 8) & 1) != 0)
                      {
                        unint64_t v35 = *(os_log_s **)v34;
                        if (*(void *)v34)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
                          {
                            if ((_DWORD)v9) {
                              unsigned int v36 = "output";
                            }
                            else {
                              unsigned int v36 = "input";
                            }
                            p_p = &__p;
                            sub_7D084(&__p, v36);
                            if (v60 < 0) {
                              p_p = (void **)__p;
                            }
                            os_log_t v38 = v56;
                            sub_23FE8((uint64_t)v56, (os_unfair_lock_t)(v7 + 8));
                            if (v57 < 0) {
                              os_log_t v38 = (void **)v56[0];
                            }
                            int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120LL))(v8);
                            (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v8 + 128LL))(v55, v8);
                            *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
                            __int16 v62 = "AggregateDevice_Common2.cpp";
                            __int16 v63 = 1024;
                            int v64 = 109;
                            __int16 v65 = 2080;
                            uint32_t v66 = p_p;
                            *(_WORD *)uint64_t v67 = 2080;
                            *(void *)&v67[2] = v38;
                            *(_WORD *)&v67[10] = 1024;
                            *(_DWORD *)&v67[12] = v11;
                            *(_WORD *)&v67[16] = 1024;
                            *(_DWORD *)&v67[18] = v39;
                            __int16 v68 = 2112;
                            uint64_t v69 = v55[0];
                            _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %s channels for stream %s begin at index %u within the AudioChannelLayouts of Ph ysicalDevice ID %u (uid: %@).",  buf,  0x3Cu);
                            sub_19DFC((uint64_t)v55);
                            if (v57 < 0) {
                              operator delete(v56[0]);
                            }
                            if (v60 < 0) {
                              operator delete(__p);
                            }
                          }
                        }
                      }

                      *(_DWORD *)(v51 + 12) = v11;
                      *(_BYTE *)(v51 + 16) = 1;
                      int v6 = v52;
                      goto LABEL_62;
                    }
                  }
                }
              }

              LODWORD(__p) = 1885762592;
              HIDWORD(__p) = v13;
              int v59 = 0;
              LODWORD(v56[0]) = 40;
              (*(void (**)(uint64_t, void **, void, void, void **, uint8_t *))(*(void *)v14 + 40LL))( v14,  &__p,  0LL,  0LL,  v56,  buf);
              v11 += *(_DWORD *)v67;
              uint64_t v12 = (v12 + 1);
              if ((_DWORD)v12 == v10) {
                goto LABEL_26;
              }
            }

            uint32_t v43 = (os_log_t *)sub_138E8(13);
            uint64_t v44 = *v43;
            if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
            {
              unint64_t v45 = (_DWORD)v9 ? "output" : "input";
              sub_7D084(&__p, v45);
              int v46 = v60 >= 0 ? &__p : (void **)__p;
              int v47 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120LL))(v8);
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 128LL))(v56, v8);
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
              __int16 v62 = "AggregateDevice_Common2.cpp";
              __int16 v63 = 1024;
              int v64 = 103;
              __int16 v65 = 2080;
              uint32_t v66 = v46;
              *(_WORD *)uint64_t v67 = 1024;
              *(_DWORD *)&v67[2] = v12;
              *(_WORD *)&v67[6] = 1024;
              *(_DWORD *)&v67[8] = v47;
              *(_WORD *)&v67[12] = 2112;
              *(void **)&v67[14] = v56[0];
              _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [curStreamPtr is NULL]: Encountered a NULL %s stream at index % u in PhysicalDevice ID %u (uid: \\%@\\).",  buf,  0x32u);
              sub_19DFC((uint64_t)v56);
              if (v60 < 0) {
                operator delete(__p);
              }
            }

            uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error( v27,  "Encountered a NULL %s stream at index %u in PhysicalDevice ID %u (uid: %@).");
          }

          else
          {
LABEL_26:
            uint64_t v23 = (os_log_t *)sub_138E8(13);
            int v24 = *v23;
            if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
            {
              sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(v7 + 8));
              __int16 v25 = v60 >= 0 ? &__p : (void **)__p;
              int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120LL))(v8);
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 128LL))(v56, v8);
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              __int16 v62 = "AggregateDevice_Common2.cpp";
              __int16 v63 = 1024;
              int v64 = 124;
              __int16 v65 = 2080;
              uint32_t v66 = v25;
              *(_WORD *)uint64_t v67 = 1024;
              *(_DWORD *)&v67[2] = v26;
              *(_WORD *)&v67[6] = 2112;
              *(void **)&v67[8] = v56[0];
              _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not find stream %s in PhysicalDevice ID %u (uid: \\%@\\).",  buf,  0x2Cu);
              sub_19DFC((uint64_t)v56);
              if (v60 < 0) {
                operator delete(__p);
              }
            }

            uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v27, "Could not find stream %s in PhysicalDevice ID %u (uid: %@).");
          }
        }
      }
    }

    else
    {
      int v6 = 0LL;
    }

    if (!*(_BYTE *)(v4 + 16))
    {
      uint64_t v28 = (os_log_t *)sub_138E8(16);
      uint64_t v29 = *v28;
      if (*v28)
      {
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
        {
          sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)&dword_8);
          int v30 = v60;
          unsigned int v31 = (void **)__p;
          sub_23FE8((uint64_t)v56, (os_unfair_lock_t)(*(void *)(v4 + 32) + 8LL));
          uint64_t v32 = &__p;
          if (v30 < 0) {
            uint64_t v32 = v31;
          }
          if (v57 >= 0) {
            uint64_t v33 = v56;
          }
          else {
            uint64_t v33 = (void **)v56[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          __int16 v62 = "AggregateDevice_Common2.cpp";
          __int16 v63 = 1024;
          int v64 = 311;
          __int16 v65 = 2080;
          uint32_t v66 = v32;
          *(_WORD *)uint64_t v67 = 2080;
          *(void *)&v67[2] = v33;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not find underlying stream channel index for stream %s of device %s",  buf,  0x26u);
          if (v57 < 0) {
            operator delete(v56[0]);
          }
          if (v60 < 0) {
            operator delete(__p);
          }
        }
      }
    }

LABEL_62:
    if (v6)
    {
      int v40 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    if (v54) {
      std::__shared_weak_count::__release_weak(v54);
    }
  }

  return v4;
}

      uint64_t v28 = (__int128 *)sub_2B8B8(v16);
      uint64_t v29 = (__int128 *)sub_2B940(v16);
      sub_2DA74((uint64_t)buf, &v82, &v79, &v77, &v75, v28, v29, v16);
      int v30 = sub_138E8(16);
      if ((*(_BYTE *)(v30 + 8) & 1) != 0)
      {
        unsigned int v31 = *(os_log_s **)v30;
        if (*(void *)v30)
        {
          if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
          {
            sub_2CC00(&v87, (uint64_t)&v82);
            std::string::size_type size = (char)v87.__r_.__value_.__s.__size_;
            uint64_t v33 = v87.__r_.__value_.__r.__words[0];
            sub_2CC00(&v74, (uint64_t)&v79);
            uint64_t v34 = &v87;
            if (size < 0) {
              uint64_t v34 = (std::string *)v33;
            }
            unint64_t v35 = &v74;
            if ((v74.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              unint64_t v35 = (std::string *)v74.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = 459;
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&_BYTE __p[20] = 0;
            *(_WORD *)&_BYTE __p[24] = 2080;
            *(void *)&__p[26] = v34;
            *(_WORD *)&__p[34] = 2080;
            *(void *)&__p[36] = v35;
            _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Cached output stream %u data. mVirtualizedStreamFormat: %s; mNonVirtualizedStreamFormat: %s",
              __p,
              0x2Cu);
          }
        }
      }

      sub_85A90((uint64_t *)&v74, (void *)(*(void *)(v14 + 16) + 112LL));
      if (v18 && sub_22F49C(&v74))
      {
        sub_2D9BB0((std::string *)__p, (uint64_t)&v74, 0);
        std::operator+<char>("PostDSP - ", __p);
        HIDWORD(v109) = v5;
        sub_2D5D4(v68, v5, (uint64_t *)&v87, (uint64_t)&v79, 0);
        sub_2D840(v68);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      v92[2] = v103;
      v92[3] = v104;
      v92[4] = v105;
      v92[5] = v106;
      *(_OWORD *)&__p[32] = v99;
      uint64_t v91 = v100;
      v92[0] = v101;
      v92[1] = v102;
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      *(_OWORD *)&__p[16] = *(_OWORD *)&buf[16];
      v93 = 0LL;
      int v94 = 0;
      sub_2DB30((uint64_t)&v93, v107);
      int v95 = 0LL;
      uint64_t v96 = 0;
      sub_2DB30((uint64_t)&v95, v108);
      uint64_t v97 = v109;
      uint64_t v72 = 0LL;
      uint64_t v73 = 0LL;
      uint64_t v71 = 0LL;
      BOOL v85 = &v71;
      LOBYTE(v86) = 0;
      uint64_t v71 = (unsigned int *)operator new(0xD0uLL);
      uint64_t v72 = v71;
      uint64_t v73 = v71 + 52;
      uint64_t v69 = (std::string *)v71;
      uint64_t v89 = (void **)v71;
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      v87.__r_.__value_.__l.__size_ = (std::string::size_type)&v89;
      v87.__r_.__value_.__l.__cap_ = (std::string::size_type)&v69;
      unint64_t v88 = 0;
      sub_22F5C4((uint64_t)v71, (uint64_t)__p);
      uint64_t v69 = (std::string *)((char *)v69 + 208);
      unsigned int v36 = (unsigned int *)v69;
      unint64_t v88 = 1;
      sub_22FA68((uint64_t)&v87);
      uint64_t v72 = v36;
      sub_2DBF4(&v95);
      sub_2DBF4(&v93);
      if (v107[0] && (uint64_t v37 = *v107[0], (_DWORD)v37))
      {
        os_log_t v38 = (unsigned int *)calloc(1uLL, (16 * (_DWORD)v37) | 8u);
        int v39 = 0LL;
        *os_log_t v38 = v37;
        BOOL v85 = (unsigned int **)v38;
        int v86 = 2;
        do
        {
          *(_OWORD *)&v38[v39 + 2] = *(_OWORD *)&v107[0][v39 + 2];
          v39 += 4LL;
        }

        while (4 * v37 != v39);
      }

      else
      {
        if ((BYTE12(v82) & 0x20) == 0)
        {
          int v40 = (unsigned int *)calloc(1uLL, 0x18uLL);
          unint64_t v41 = 1;
          if (!v40) {
            goto LABEL_89;
          }
          goto LABEL_86;
        }

        unint64_t v41 = HIDWORD(v83);
        if (HIDWORD(v83))
        {
          int v40 = (unsigned int *)calloc(1uLL, (16 * HIDWORD(v83)) | 8u);
          if (!v40)
          {
LABEL_89:
            uint64_t v42 = 0;
LABEL_90:
            BOOL v85 = (unsigned int **)v40;
            int v86 = v42;
            uint32_t v43 = v41;
            uint64_t v44 = (int *)(v40 + 2);
            unint64_t v45 = BYTE12(v82);
            do
            {
              int v46 = HIDWORD(v83);
              if ((v45 & 0x20) != 0) {
                int v46 = 1;
              }
              *uint64_t v44 = v46;
              v44 += 4;
              --v43;
            }

            while (v43);
            goto LABEL_94;
          }

  if (v40)
  {
    int v47 = (unint64_t *)&v40->__shared_owners_;
    do
      uint64_t v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  os_log_t v49 = 0LL;
  if (v44) {
    __int128 v50 = v27;
  }
  else {
    __int128 v50 = 0LL;
  }
  if (v26 && v44)
  {
    uint64_t v51 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      uint64_t v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    os_log_t v49 = v26;
    __int128 v50 = v27;
  }

  if ((v41 & 1) == 0) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v53 = a1[3];
  int v54 = *(std::__shared_weak_count **)(v53 + 96);
  if (v54)
  {
    uint64_t v55 = *(void *)(v53 + 88);
    uint64_t v56 = (unint64_t *)&v54->__shared_weak_owners_;
    do
      char v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    unint64_t v58 = std::__shared_weak_count::lock(v54);
    int v59 = v58;
    if (v58)
    {
      char v60 = (unint64_t *)&v58->__shared_weak_owners_;
      do
        unint64_t v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      __int16 v62 = (unint64_t *)&v58->__shared_owners_;
      do
        __int16 v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v59);
      }

      int v64 = std::__shared_weak_count::lock(v59);
      __int16 v65 = 0;
      if (!v64) {
        uint64_t v55 = 0LL;
      }
      if (!v26) {
        goto LABEL_100;
      }
      goto LABEL_95;
    }
  }

  else
  {
    int v59 = 0LL;
  }

  uint64_t v55 = 0LL;
  int v64 = 0LL;
  __int16 v65 = 1;
  if (!v26)
  {
LABEL_100:
    __int16 v68 = v55 == 0;
    goto LABEL_101;
  }

void sub_2B2894( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_7A768((uint64_t)&a11);
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2B294C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 688;
  uint64_t v4 = 664LL;
  if (a2) {
    uint64_t v4 = 688LL;
  }
  else {
    uint64_t v3 = a1 + 664;
  }
  uint64_t v5 = *(void *)(a1 + v4);
  if (a3 >= (unint64_t)((*(void *)(v3 + 8) - v5) >> 3))
  {
    uint64_t v14 = v3;
    uint64_t v16 = v4;
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      if (a2) {
        int v10 = "output";
      }
      else {
        int v10 = "input";
      }
      sub_7D084(__p, v10);
      if (v19 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      uint64_t v12 = (uint64_t)(*(void *)(v14 + 8) - *(void *)(a1 + v16)) >> 3;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      unint64_t v21 = "AggregateDevice_Common2.cpp";
      __int16 v22 = 1024;
      int v23 = 937;
      __int16 v24 = 2080;
      __int16 v25 = v11;
      __int16 v26 = 2048;
      uint64_t v27 = v12;
      __int16 v28 = 1024;
      unsigned int v29 = a3;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): %s cache has %lu items (requested index %u).",  buf,  0x2Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(exception, "%s cache has %lu items (requested index %u).");
  }

  return *(void *)(v5 + 8LL * a3);
}

void sub_2B2B00(_Unwind_Exception *a1)
{
}

std::string *sub_2B2B1C(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::string::insert(&v22, 0LL, "Client Stream Index: ", 0x15uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  int v6 = std::string::append(&v23, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  __int128 v24 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v8 = (const std::string::value_type *)&v24;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)v24;
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = *((void *)&v24 + 1);
  }
  std::string::append(a1, v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v24);
  }
  int v10 = *(os_unfair_lock_s **)(a2 + 8);
  if (v10)
  {
    sub_23FE8((uint64_t)&v22, v10 + 2);
    int v11 = std::string::insert(&v22, 0LL, "Underlying Stream: ", 0x13uLL);
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    int v13 = std::string::append(&v23, "; ", 2uLL);
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    int64_t cap = v13->__r_.__value_.__l.__cap_;
    __int128 v24 = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int16 v15 = (const std::string::value_type *)&v24;
    }
    else {
      __int16 v15 = (const std::string::value_type *)v24;
    }
    if (cap >= 0) {
      std::string::size_type v16 = HIBYTE(cap);
    }
    else {
      std::string::size_type v16 = *((void *)&v24 + 1);
    }
    std::string::append(a1, v15, v16);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v24);
    }
  }

  sub_23FE8((uint64_t)&v23, (os_unfair_lock_t)(*(void *)(a2 + 24) + 8LL));
  __int16 v17 = std::string::insert(&v23, 0LL, "Physical Device: ", 0x11uLL);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t cap = v17->__r_.__value_.__l.__cap_;
  __int128 v24 = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    char v19 = (const std::string::value_type *)&v24;
  }
  else {
    char v19 = (const std::string::value_type *)v24;
  }
  if (cap >= 0) {
    std::string::size_type v20 = HIBYTE(cap);
  }
  else {
    std::string::size_type v20 = *((void *)&v24 + 1);
  }
  std::string::append(a1, v19, v20);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v24);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_2B2D68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B2E10(uint64_t a1, __int128 *a2, void **a3)
{
  *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)a2 + 13);
  *(void *)&v20[4] = *((void *)a2 + 7);
  sub_AB3D8((uint64_t *)&v20[12], (uint64_t)(a2 + 4));
  memset(v21, 0, sizeof(v21));
  sub_7F2E0(v21, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  __int128 v6 = a2[1];
  __int128 v22 = *a2;
  __int128 v23 = v6;
  __int128 v24 = a2[2];
  uint64_t v7 = *((void *)a2 + 12);
  v25[2] = 0LL;
  v25[3] = v7;
  v25[0] = v25;
  v25[1] = v25;
  sub_86550(v26, (uint64_t)a2 + 104);
  sub_C590C(&v27, a2 + 8);
  sub_C590C(&__p, a2 + 10);
  sub_AAE78(a1, (uint64_t)buf);
  if (v32 && v31 < 0) {
    operator delete(__p);
  }
  if (v29 && v28 < 0) {
    operator delete(v27);
  }
  sub_32C8C((void *)v26[1]);
  sub_68314(v25);
  __int128 v18 = (void **)v21;
  sub_7A668(&v18);
  sub_AB45C((uint64_t *)&v20[12]);
  *(void *)a1 = off_47AD18;
  *(_WORD *)(a1 + 632) = *((_WORD *)a2 + 44);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  uint64_t v8 = operator new(8uLL);
  *(void *)(a1 + 664) = v8;
  *v8++ = 0LL;
  *(void *)(a1 + 680) = v8;
  *(void *)(a1 + 672) = v8;
  *(void *)(a1 + 688) = 0LL;
  *(void *)(a1 + 704) = 0LL;
  *(void *)(a1 + 696) = 0LL;
  std::string::size_type v9 = operator new(8uLL);
  *(void *)(a1 + 688) = v9;
  *v9++ = 0LL;
  *(void *)(a1 + 704) = v9;
  *(void *)(a1 + 696) = v9;
  *(void *)(a1 + 712) = 0LL;
  *(void *)(a1 + 728) = 0LL;
  *(void *)(a1 + 720) = 0LL;
  int v10 = operator new(8uLL);
  *(void *)(a1 + 712) = v10;
  *v10++ = 0LL;
  *(void *)(a1 + 728) = v10;
  *(void *)(a1 + 720) = v10;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 752) = 0LL;
  *(void *)(a1 + 744) = 0LL;
  int v11 = operator new(8uLL);
  *(void *)(a1 + 736) = v11;
  *v11++ = 0LL;
  *(void *)(a1 + 752) = v11;
  *(void *)(a1 + 744) = v11;
  *(void *)(a1 + 760) = 0LL;
  *(_DWORD *)(a1 + 768) = 0;
  *(void *)(a1 + 776) = 0LL;
  *(_DWORD *)(a1 + 784) = 0;
  *(int32x2_t *)(a1 + 792) = vdup_n_s32(0x2D706D74u);
  *(_DWORD *)(a1 + 800) = 0;
  if (!*((_DWORD *)a2 + 13))
  {
    int v13 = (os_log_t *)sub_138E8(13);
    __int128 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)std::string::size_type v20 = "AggregateDevice_Common2.cpp";
      *(_WORD *)&v20[8] = 1024;
      *(_DWORD *)&v20[10] = 765;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_2B3174( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, char a38)
{
  unint64_t v41 = *(void **)(v38 + 736);
  if (v41)
  {
    *(void *)(v38 + 744) = v41;
    operator delete(v41);
  }

  uint64_t v42 = *(void **)(v38 + 712);
  if (v42)
  {
    *(void *)(v38 + 720) = v42;
    operator delete(v42);
  }

  uint32_t v43 = *(void **)(v38 + 688);
  if (v43)
  {
    *(void *)(v38 + 696) = v43;
    operator delete(v43);
  }

  uint64_t v44 = (void **)(v38 + 640);
  unint64_t v45 = *(void **)(v38 + 664);
  if (v45)
  {
    *(void *)(v38 + 672) = v45;
    operator delete(v45);
  }

  int v46 = *v44;
  if (*v44)
  {
    *(void *)(v38 + 648) = v46;
    operator delete(v46);
  }

  sub_AB51C(v38);
  _Unwind_Resume(a1);
}

void *sub_2B32AC(uint64_t a1, uint64_t a2)
{
  *((void *)&v172 + 1) = 0LL;
  *(void *)&v173[0] = 0LL;
  *(void *)&__int128 v172 = (char *)&v172 + 8;
  sub_2B4734(buf, a2, 0);
  sub_2B4734(&v175, a2, 1);
  for (uint64_t i = *(void *)&buf[8]; (_BYTE *)i != buf; uint64_t i = *(void *)(i + 8))
    sub_2B4894((uint64_t *)&v172, (uint64_t *)&v172 + 1, *(void *)(i + 16), *(void *)(i + 16));
  sub_2B4A4C(v174, (void *)v172, (void *)&v172 + 1);
  sub_68314(&v175);
  sub_68314(buf);
  sub_32C8C(*((void **)&v172 + 1));
  sub_1D83C0((uint64_t *)&v172, (uint64_t)v174);
  sub_85B80((uint64_t *)(a1 + 184));
  uint64_t v6 = *(void *)&v173[0];
  if (*(void *)&v173[0])
  {
    __int128 v7 = v172;
    uint64_t v8 = **((void **)&v172 + 1);
    *(void *)(v8 + 8) = *(void *)(v172 + 8);
    **(void **)(v7 + 8) = v8;
    uint64_t v9 = *(void *)(a1 + 184);
    *(void *)(v9 + 8) = *((void *)&v7 + 1);
    **((void **)&v7 + 1) = v9;
    *(void *)(a1 + 184) = v7;
    *(void *)(v7 + 8) = a1 + 184;
    *(void *)(a1 + 200) += v6;
    *(void *)&v173[0] = 0LL;
  }

  sub_85B80((uint64_t *)&v172);
  sub_2B4734(&v172, a2, 0);
  sub_68314((void *)(a1 + 472));
  uint64_t v10 = *(void *)&v173[0];
  if (*(void *)&v173[0])
  {
    __int128 v11 = v172;
    uint64_t v12 = **((void **)&v172 + 1);
    *(void *)(v12 + 8) = *(void *)(v172 + 8);
    **(void **)(v11 + 8) = v12;
    uint64_t v13 = *(void *)(a1 + 472);
    *(void *)(v13 + 8) = *((void *)&v11 + 1);
    **((void **)&v11 + 1) = v13;
    *(void *)(a1 + 472) = v11;
    *(void *)(v11 + 8) = a1 + 472;
    *(void *)(a1 + 488) += v10;
    *(void *)&v173[0] = 0LL;
  }

  sub_68314(&v172);
  sub_2B4734(&v172, a2, 1);
  sub_68314((void *)(a1 + 496));
  uint64_t v14 = *(void *)&v173[0];
  if (*(void *)&v173[0])
  {
    __int128 v15 = v172;
    uint64_t v16 = **((void **)&v172 + 1);
    *(void *)(v16 + 8) = *(void *)(v172 + 8);
    **(void **)(v15 + 8) = v16;
    uint64_t v17 = *(void *)(a1 + 496);
    *(void *)(v17 + 8) = *((void *)&v15 + 1);
    **((void **)&v15 + 1) = v17;
    *(void *)(a1 + 496) = v15;
    *(void *)(v15 + 8) = a1 + 496;
    *(void *)(a1 + 512) += v14;
    *(void *)&v173[0] = 0LL;
  }

  sub_68314(&v172);
  if (a1 + 640 != a2 + 96) {
    sub_7E6D4( (char *)(a1 + 640),  *(char **)(a2 + 96),  *(void *)(a2 + 104),  (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2);
  }
  sub_2B4B10((char **)&v172, (void *)a2, (uint64_t)v174, a1, *(unsigned __int8 *)(a1 + 632));
  __int128 v18 = (void *)(a1 + 664);
  char v19 = *(void **)(a1 + 664);
  if (v19)
  {
    *(void *)(a1 + 672) = v19;
    operator delete(v19);
    *__int128 v18 = 0LL;
    *(void *)(a1 + 672) = 0LL;
    *(void *)(a1 + 680) = 0LL;
  }

  *(_OWORD *)__int128 v18 = v172;
  *(void *)(a1 + 680) = *(void *)&v173[0];
  sub_2B4B10((char **)&v172, (void *)(a2 + 24), (uint64_t)v174, a1, *(unsigned __int8 *)(a1 + 632));
  std::string::size_type v20 = *(void **)(a1 + 688);
  if (v20)
  {
    *(void *)(a1 + 696) = v20;
    operator delete(v20);
    *(void *)(a1 + 688) = 0LL;
    *(void *)(a1 + 696) = 0LL;
    *(void *)(a1 + 704) = 0LL;
  }

  *(_OWORD *)(a1 + 688) = v172;
  *(void *)(a1 + 704) = *(void *)&v173[0];
  sub_2B4F48((char ***)&v172, 0, (uint64_t *)(a2 + 48), a1);
  __int128 v22 = (void *)(a1 + 712);
  uint64_t v21 = *(void **)(a1 + 712);
  if (v21)
  {
    *(void *)(a1 + 720) = v21;
    operator delete(v21);
    void *v22 = 0LL;
    *(void *)(a1 + 720) = 0LL;
    *(void *)(a1 + 728) = 0LL;
  }

  *(_OWORD *)__int128 v22 = v172;
  *(void *)(a1 + 728) = *(void *)&v173[0];
  sub_2B4F48((char ***)&v172, 1, (uint64_t *)(a2 + 72), a1);
  __int128 v23 = *(void **)(a1 + 736);
  if (v23)
  {
    *(void *)(a1 + 744) = v23;
    operator delete(v23);
    *(void *)(a1 + 736) = 0LL;
    *(void *)(a1 + 744) = 0LL;
    *(void *)(a1 + 752) = 0LL;
  }

  *(_OWORD *)(a1 + 736) = v172;
  *(void *)(a1 + 752) = *(void *)&v173[0];
  v176 = 0LL;
  v177 = 0LL;
  v175 = &v176;
  uint64_t v24 = *(void *)a2;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    unint64_t v25 = 0LL;
    unsigned int v26 = 1;
    do
    {
      sub_2B56C8((uint64_t *)&v175, *(void *)(v24 + 16 * v25), v24 + 16 * v25);
      unint64_t v25 = v26;
      uint64_t v24 = *(void *)a2;
      ++v26;
    }

    while (v25 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }

  uint64_t v27 = *(void *)(a2 + 24);
  if (*(void *)(a2 + 32) != v27)
  {
    unint64_t v28 = 0LL;
    unsigned int v29 = 1;
    do
    {
      sub_2B56C8((uint64_t *)&v175, *(void *)(v27 + 16 * v28), v27 + 16 * v28);
      unint64_t v28 = v29;
      uint64_t v27 = *(void *)(a2 + 24);
      ++v29;
    }

    while (v28 < (*(void *)(a2 + 32) - v27) >> 4);
  }

  uint64_t v30 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) != v30)
  {
    unint64_t v31 = 0LL;
    unsigned int v32 = 1;
    do
    {
      sub_2B56C8((uint64_t *)&v175, *(void *)(v30 + 32 * v31 + 8), v30 + 32 * v31 + 8);
      unint64_t v31 = v32;
      uint64_t v30 = *(void *)(a2 + 48);
      ++v32;
    }

    while (v31 < (*(void *)(a2 + 56) - v30) >> 5);
  }

  uint64_t v33 = *(void *)(a2 + 72);
  if (*(void *)(a2 + 80) != v33)
  {
    unint64_t v34 = 0LL;
    unsigned int v35 = 1;
    do
    {
      sub_2B56C8((uint64_t *)&v175, *(void *)(v33 + 32 * v34 + 8), v33 + 32 * v34 + 8);
      unint64_t v34 = v35;
      uint64_t v33 = *(void *)(a2 + 72);
      ++v35;
    }

    while (v34 < (*(void *)(a2 + 80) - v33) >> 5);
  }

  if (v176)
  {
    unsigned int v36 = v176;
    do
    {
      uint64_t v37 = v36;
      unsigned int v36 = (uint64_t *)*v36;
    }

    while (v36);
    if (v37 != (uint64_t *)&v176 && !v37[4])
    {
      uint64_t v38 = (uint64_t *)v37[1];
      if (v38)
      {
        do
        {
          int v39 = (uint64_t **)v38;
          uint64_t v38 = (uint64_t *)*v38;
        }

        while (v38);
      }

      else
      {
        int v40 = v37;
        do
        {
          int v39 = (uint64_t **)v40[2];
          BOOL v41 = *v39 == v40;
          int v40 = (uint64_t *)v39;
        }

        while (!v41);
      }

      --v177;
      sub_911E8(v176, v37);
      sub_7A768((uint64_t)(v37 + 4));
      operator delete(v37);
    }
  }

  uint64_t v42 = sub_138E8(16);
  BOOL v161 = (uint64_t **)(a1 + 736);
  int v162 = (void *)(a1 + 184);
  int v163 = (void *)(a1 + 712);
  v164 = (unint64_t *)a1;
  if ((*(_BYTE *)(v42 + 8) & 1) != 0)
  {
    uint32_t v43 = *(os_log_s **)v42;
    if (*(void *)v42)
    {
      if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 740;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v177;
        _os_log_impl(&dword_0, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added %lu streams to the delete list.", buf, 0x1Cu);
      }
    }
  }

  __int128 v172 = 0u;
  memset(v173, 0, sizeof(v173));
  uint64_t v44 = (uint64_t *)v175;
  if (v175 != &v176)
  {
    do
    {
      int v45 = sub_6ADEC(v44[4]);
      if (v45) {
        uint64_t v46 = 32LL;
      }
      else {
        uint64_t v46 = 8LL;
      }
      int v47 = *(void **)((char *)&v173[-1] + v46);
      if (v45) {
        uint64_t v48 = 24LL;
      }
      else {
        uint64_t v48 = 0LL;
      }
      if (v45) {
        uint64_t v49 = 40LL;
      }
      else {
        uint64_t v49 = 16LL;
      }
      if (v45) {
        __int128 v50 = (char *)&v173[1] + 8;
      }
      else {
        __int128 v50 = (char *)v173;
      }
      unint64_t v51 = *(void *)((char *)&v173[-1] + v49);
      if ((unint64_t)v47 >= v51)
      {
        uint64_t v56 = *(void *)((char *)&v173[-1] + v48);
        uint64_t v57 = ((uint64_t)v47 - v56) >> 4;
        unint64_t v58 = v57 + 1;
        uint64_t v59 = v51 - v56;
        if (v59 >> 3 > v58) {
          unint64_t v58 = v59 >> 3;
        }
        else {
          unint64_t v60 = v58;
        }
        *(void *)&_BYTE buf[32] = v50;
        unint64_t v61 = (char *)sub_7BE90(v60);
        __int16 v63 = &v61[16 * v57];
        __int128 v64 = *((_OWORD *)v44 + 2);
        *(_OWORD *)__int16 v63 = v64;
        if (*((void *)&v64 + 1))
        {
          __int16 v65 = (unint64_t *)(*((void *)&v64 + 1) + 8LL);
          do
            unint64_t v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }

        uint64_t v67 = *(void **)((char *)&v173[-1] + v46);
        __int16 v68 = *(void **)((char *)&v173[-1] + v48);
        if (v67 == v68)
        {
          int64x2_t v71 = vdupq_n_s64((unint64_t)v67);
          uint64_t v69 = &v61[16 * v57];
        }

        else
        {
          uint64_t v69 = &v61[16 * v57];
          do
          {
            __int128 v70 = *((_OWORD *)v67 - 1);
            v67 -= 2;
            *((_OWORD *)v69 - 1) = v70;
            v69 -= 16;
            void *v67 = 0LL;
            v67[1] = 0LL;
          }

          while (v67 != v68);
          int64x2_t v71 = *(int64x2_t *)((char *)&v173[-1] + v48);
        }

        uint64_t v55 = v63 + 16;
        *(void *)((char *)&v173[-1] + v48) = v69;
        *(void *)((char *)&v173[-1] + v46) = v63 + 16;
        uint64_t v72 = *(void *)((char *)&v173[-1] + v49);
        *(int64x2_t *)&buf[8] = v71;
        *(void *)((char *)&v173[-1] + v49) = &v61[16 * v62];
        *(void *)&_BYTE buf[24] = v72;
        *(void *)AudioObjectPropertyAddress buf = v71.i64[0];
        sub_A0D64((uint64_t)buf);
      }

      else
      {
        void *v47 = v44[4];
        uint64_t v52 = v44[5];
        v47[1] = v52;
        if (v52)
        {
          uint64_t v53 = (unint64_t *)(v52 + 8);
          do
            unint64_t v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }

        uint64_t v55 = v47 + 2;
      }

      *(void *)((char *)&v173[-1] + v46) = v55;
      uint64_t v73 = (uint64_t *)v44[1];
      if (v73)
      {
        do
        {
          uint64_t v74 = (uint64_t **)v73;
          uint64_t v73 = (uint64_t *)*v73;
        }

        while (v73);
      }

      else
      {
        do
        {
          uint64_t v74 = (uint64_t **)v44[2];
          BOOL v41 = *v74 == v44;
          uint64_t v44 = (uint64_t *)v74;
        }

        while (!v41);
      }

      uint64_t v44 = (uint64_t *)v74;
    }

    while (v74 != &v176);
  }

  uint64_t v75 = a1;
  sub_132DF8(v176);
  sub_1664F0((void **)(a1 + 520));
  *(_OWORD *)(a1 + 520) = v172;
  *(void *)(a1 + 536) = *(void *)&v173[0];
  *(void *)&v173[0] = 0LL;
  __int128 v172 = 0uLL;
  sub_1664F0((void **)(a1 + 544));
  *(_OWORD *)(a1 + 544) = *(_OWORD *)((char *)v173 + 8);
  *(void *)(a1 + 560) = *((void *)&v173[1] + 1);
  memset((char *)v173 + 8, 0, 24);
  sub_155918((uint64_t)&v175, 0, *(_DWORD *)(v75 + 128), *(void *)(v75 + 416));
  sub_155918((uint64_t)v170, 1, *(_DWORD *)(v75 + 128), *(void *)(v75 + 416));
  if (*((_DWORD *)v171 + 2) != (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5)
  {
    v151 = (os_log_t *)sub_138E8(13);
    v152 = *v151;
    if (*v151 && os_log_type_enabled(*v151, OS_LOG_TYPE_ERROR))
    {
      int v153 = *((_DWORD *)v171 + 2);
      uint64_t v154 = (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 808;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v153;
      *(_WORD *)&_BYTE buf[24] = 2048;
      *(void *)&buf[26] = v154;
      _os_log_impl( &dword_0,  v152,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): The number of output streams in the aggregate device's actual AudioHar dwareIOProcStreamUsage structure (count: %u) does not match the number of streams in the UnderlyingStreamInfo ve ctor (count: %lu).",  buf,  0x22u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "The number of output streams in the aggregate device's actual AudioHardwareIOProcStreamUsage structure (count: %u) does not match the number of streams in the UnderlyingStreamInfo vector (count: %lu).");
  }

  BOOL v160 = (uint64_t *)(a1 + 268);
  uint64_t v77 = *(void *)(a2 + 48);
  uint64_t v76 = *(void *)(a2 + 56);
  if (v76 == v77)
  {
    std::string v78 = 0LL;
    __int16 v81 = 0LL;
  }

  else
  {
    std::string v78 = 0LL;
    unint64_t v79 = 0LL;
    unint64_t v80 = 0LL;
    __int16 v81 = 0LL;
    uint64_t v82 = 0LL;
    unsigned int v83 = 0;
    do
    {
      __int16 v84 = (int *)(v77 + 32 * v82);
      int v85 = *v84;
      if (*v84 != -1)
      {
        if ((unint64_t)v81 >= v80)
        {
          uint64_t v86 = (v81 - v78) >> 2;
          unint64_t v87 = v86 + 1;
          else {
            unint64_t v88 = v87;
          }
          if (v88)
          {
            unint64_t v88 = (unint64_t)sub_7A890(v88);
            uint64_t v90 = v89;
            int v85 = *v84;
            __int16 v81 = v79;
          }

          else
          {
            uint64_t v90 = 0LL;
          }

          uint64_t v91 = (char *)(v88 + 4 * v86);
          *(_DWORD *)uint64_t v91 = v85;
          unint64_t v79 = v91 + 4;
          while (v81 != v78)
          {
            int v92 = *((_DWORD *)v81 - 1);
            v81 -= 4;
            *((_DWORD *)v91 - 1) = v92;
            v91 -= 4;
          }

          unint64_t v80 = v88 + 4 * v90;
          if (v78) {
            operator delete(v78);
          }
          std::string v78 = v91;
        }

        else
        {
          *(_DWORD *)__int16 v81 = v85;
          unint64_t v79 = v81 + 4;
        }

        uint64_t v77 = *(void *)(a2 + 48);
        uint64_t v76 = *(void *)(a2 + 56);
        __int16 v81 = v79;
      }

      uint64_t v82 = ++v83;
    }

    while (v83 < (unint64_t)((v76 - v77) >> 5));
  }

  std::__sort<std::__less<int,int> &,int *>(v78, v81, buf);
  uint64_t v94 = *(void *)(a2 + 72);
  uint64_t v93 = *(void *)(a2 + 80);
  if (v93 == v94)
  {
    int v95 = 0LL;
    uint64_t v96 = 0LL;
    uint64_t v98 = 0LL;
  }

  else
  {
    int v95 = 0LL;
    uint64_t v96 = 0LL;
    unint64_t v97 = 0LL;
    uint64_t v98 = 0LL;
    uint64_t v99 = 0LL;
    unsigned int v100 = 0;
    do
    {
      unsigned int v101 = (int *)(v94 + 32 * v99);
      int v102 = *v101;
      if (*v101 != -1)
      {
        if ((unint64_t)v98 >= v97)
        {
          uint64_t v103 = (v98 - v95) >> 2;
          unint64_t v104 = v103 + 1;
          else {
            unint64_t v105 = v104;
          }
          if (v105)
          {
            unint64_t v105 = (unint64_t)sub_7A890(v105);
            uint64_t v107 = v106;
            int v102 = *v101;
            uint64_t v98 = v96;
          }

          else
          {
            uint64_t v107 = 0LL;
          }

          BOOL v108 = (char *)(v105 + 4 * v103);
          *(_DWORD *)BOOL v108 = v102;
          uint64_t v96 = v108 + 4;
          while (v98 != v95)
          {
            int v109 = *((_DWORD *)v98 - 1);
            v98 -= 4;
            *((_DWORD *)v108 - 1) = v109;
            v108 -= 4;
          }

          unint64_t v97 = v105 + 4 * v107;
          if (v95) {
            operator delete(v95);
          }
          int v95 = v108;
        }

        else
        {
          *(_DWORD *)uint64_t v98 = v102;
          uint64_t v96 = v98 + 4;
        }

        uint64_t v94 = *(void *)(a2 + 72);
        uint64_t v93 = *(void *)(a2 + 80);
        uint64_t v98 = v96;
      }

      uint64_t v99 = ++v100;
    }

    while (v100 < (unint64_t)((v93 - v94) >> 5));
  }

  std::__sort<std::__less<int,int> &,int *>(v95, v98, buf);
  unint64_t v110 = (v96 - v95) >> 2;
  if (v110 != (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)
  {
    v156 = (os_log_t *)sub_138E8(13);
    v157 = *v156;
    if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR))
    {
      uint64_t v158 = (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 841;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&buf[20] = (v96 - v95) >> 2;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v158;
      _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): The number of valid output streams (indexed as not kDisabledStreamInde x) in the UnderlyingStreamInfo vector (count: %lu) does not match the size of the number in the client stream vector (%lu).",  buf,  0x26u);
    }

    v159 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v159,  "The number of valid output streams (indexed as not kDisabledStreamIndex) in the UnderlyingStreamInfo vector (count : %lu) does not match the size of the number in the client stream vector (%lu).");
  }

  if (v96 != v95)
  {
    uint64_t v111 = 0LL;
    unsigned int v112 = 0;
    do
    {
      if ((*(_DWORD *)&v95[4 * v111] & 0x80000000) != 0)
      {
        BOOL v113 = (os_log_t *)sub_138E8(13);
        __int16 v114 = *v113;
        if (*v113)
        {
          if (os_log_type_enabled(*v113, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 844;
            _os_log_impl( &dword_0,  v114,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Allowed a negative value into usedOutputClientStreamIndexes.",  buf,  0x12u);
          }
        }
      }

      if (v112 != *(_DWORD *)&v95[4 * v111])
      {
        uint64_t v148 = (os_log_t *)sub_138E8(13);
        uint64_t v149 = *v148;
        if (*v148 && os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 845;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v112;
          _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): There is no indexed client stream %u in the output UnderlyingStreamInfo vector.",  buf,  0x18u);
        }

        unint64_t v150 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error( v150,  "There is no indexed client stream %u in the output UnderlyingStreamInfo vector.");
      }

      uint64_t v111 = ++v112;
    }

    while (v110 > v112);
  }

  if (*((_DWORD *)v177 + 2) != (uint64_t)(v164[90] - v164[89]) >> 3)
  {
    int v115 = (os_log_t *)sub_138E8(16);
    uint64_t v116 = *v115;
    if (*v115)
    {
      if (os_log_type_enabled(*v115, OS_LOG_TYPE_ERROR))
      {
        int v117 = *((_DWORD *)v177 + 2);
        uint64_t v118 = (uint64_t)(v164[90] - v164[89]) >> 3;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 855;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v117;
        *(_WORD *)&_BYTE buf[24] = 2048;
        *(void *)&buf[26] = v118;
        _os_log_impl( &dword_0,  v116,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Number of Streams in input stream usage (%u) does not match number of streams in stream cache (%zu)",  buf,  0x22u);
      }
    }
  }

  AudioObjectID v119 = v177;
  if (*((_DWORD *)v177 + 2))
  {
    unint64_t v120 = 0LL;
    while (1)
    {
      uint64_t v121 = *(void *)(*v163 + 8 * v120);
      if (!v121) {
        goto LABEL_162;
      }
      if ((sub_7531C() & 1) == 0) {
        break;
      }
      int v122 = (*(uint64_t (**)(void))(**(void **)(*v163 + 8 * v120) + 160LL))(*(void *)(*v163 + 8 * v120));
      AudioObjectID v119 = v177;
      if (v122 != -2) {
        goto LABEL_162;
      }
      int v123 = 2;
LABEL_163:
      *(_DWORD *)&v119[4 * v120++ + 12] = v123;
    }

    AudioObjectID v119 = v177;
LABEL_162:
    int v123 = v121 != 0;
    goto LABEL_163;
  }

LABEL_164:
  sub_155D1C((uint64_t)&v175);
  if (*((_DWORD *)v171 + 2) != (uint64_t)(v164[93] - v164[92]) >> 3)
  {
    unsigned int v124 = (os_log_t *)sub_138E8(16);
    int v125 = *v124;
    if (*v124)
    {
      if (os_log_type_enabled(*v124, OS_LOG_TYPE_ERROR))
      {
        int v126 = *((_DWORD *)v171 + 2);
        uint64_t v127 = (uint64_t)(v164[93] - v164[92]) >> 3;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 876;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v126;
        *(_WORD *)&_BYTE buf[24] = 2048;
        *(void *)&buf[26] = v127;
        _os_log_impl( &dword_0,  v125,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Number of Streams in output stream usage (%u) does not match number of streams in stream cache (%zu)",  buf,  0x22u);
      }
    }
  }

  uint64_t v128 = *((unsigned int *)v171 + 2);
  if ((_DWORD)v128)
  {
    uint64_t v129 = *v161;
    uint64_t v130 = (char *)v171 + 12;
    do
    {
      uint64_t v131 = *v129++;
      *v130++ = v131 != 0;
      --v128;
    }

    while (v128);
  }

  sub_155D1C((uint64_t)v170);
  int v132 = (os_log_t *)sub_138E8(16);
  uint64_t v133 = *v132;
  if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v168 = *v160;
    uint64_t v134 = &v169;
    sub_33464(&v169, (unsigned int *)&v168);
    if ((v169.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v134 = (std::string *)v169.__r_.__value_.__r.__words[0];
    }
    sub_155E78(&v167, (uint64_t)&v175);
    int size = (char)v167.__r_.__value_.__s.__size_;
    std::string::size_type v136 = v167.__r_.__value_.__r.__words[0];
    sub_155E78(__p, (uint64_t)v170);
    unint64_t v137 = &v167;
    if (size < 0) {
      unint64_t v137 = (std::string *)v136;
    }
    if (v166 >= 0) {
      v138 = __p;
    }
    else {
      v138 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 882;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v134;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v137;
    *(_WORD *)&buf[38] = 2080;
    *(void *)&buf[40] = v138;
    _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VA stream usage for %s. Input: %s, Output: %s",  buf,  0x30u);
    if (v166 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_7531C())
  {
    (*(void (**)(_BYTE *__return_ptr, unint64_t *))(*v164 + 472))(buf, v164);
    sub_AB8E4(v164, (uint64_t)(v164 + 53), (uint64_t)&v175, (uint64_t)buf);
    sub_32C8C(*(void **)&buf[8]);
  }

  unint64_t v139 = v164[65];
  for (unint64_t k = v164[66]; v139 != k; v139 += 16LL)
  {
    (*(void (**)(_BYTE *__return_ptr))(**(void **)(*(void *)v139 + 136LL) + 168LL))(buf);
    sub_231BEC( v164 + 30,  v164[31],  *(void **)buf,  *(void **)&buf[8],  (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4);
    v169.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_7A668((void ***)&v169);
  }

  unint64_t v141 = v164[68];
  for (unint64_t m = v164[69]; v141 != m; v141 += 16LL)
  {
    (*(void (**)(_BYTE *__return_ptr))(**(void **)(*(void *)v141 + 136LL) + 168LL))(buf);
    sub_231BEC( v164 + 30,  v164[31],  *(void **)buf,  *(void **)&buf[8],  (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4);
    v169.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_7A668((void ***)&v169);
  }

  sub_2AFE84((uint64_t)v164);
  sub_9D988((uint64_t *)&v169, v162, "", 905);
  v143 = (os_log_t *)sub_138E8(16);
  v144 = *v143;
  if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_DEBUG))
  {
    int v145 = *((_DWORD *)v164 + 32);
    sub_EA5AC(&v167, (void *)v169.__r_.__value_.__l.__size_, &v169);
    v146 = (v167.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v167 : (std::string *)v167.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 907;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = v145;
    *(_WORD *)&_BYTE buf[24] = 2048;
    *(void *)&buf[26] = v164;
    *(_WORD *)&buf[34] = 2080;
    *(void *)&buf[36] = v146;
    _os_log_impl( &dword_0,  v144,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created aggregate device [ id: %u; addr: %p ] based on physical devices: %s",
      buf,
      0x2Cu);
  }

  sub_2AF570((uint64_t)v164);
  sub_1BB88((uint64_t *)&v169);
  if (v95) {
    operator delete(v95);
  }
  if (v78) {
    operator delete(v78);
  }
  free(v171);
  free(v177);
  *(void *)AudioObjectPropertyAddress buf = (char *)v173 + 8;
  sub_7A668((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v172;
  sub_7A668((void ***)buf);
  return sub_68314(v174);
}

                          unint64_t v88 = 1;
                          if (v87) {
                            goto LABEL_165;
                          }
LABEL_166:
                          if (v88)
                          {
                            if (v88 == 12)
                            {
                              int v109 = sub_138E8(13);
                              if ((*(_BYTE *)(v109 + 8) & 1) != 0)
                              {
                                unint64_t v110 = *(os_log_s **)v109;
                                if (*(void *)v109)
                                {
                                  if (os_log_type_enabled(*(os_log_t *)v109, OS_LOG_TYPE_DEBUG))
                                  {
                                    __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
                                    *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
                                    sub_613AC((uint64_t)&v181, (unsigned int *)&__lk);
                                    uint64_t v111 = v183 >= 0 ? &v181 : (void **)v181;
                                    buf.AudioObjectPropertySelector mSelector = 136315906;
                                    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                                    v208 = 1024;
                                    v209 = 288;
                                    v210 = 2080;
                                    *(void *)v211 = v111;
                                    *(_WORD *)&v211[8] = 1024;
                                    *(_DWORD *)&v211[10] = v63;
                                    _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                                    if (v183 < 0) {
                                      operator delete(v181);
                                    }
                                  }
                                }
                              }
                            }

                            sub_7D898((uint64_t)&__p);
                            std::condition_variable::~condition_variable(&v217);
                            std::mutex::~mutex(&v218);
                            unsigned int v112 = v194;
LABEL_230:
                            if (v112) {
                              operator delete(v112);
                            }
LABEL_232:
                            if (v163)
                            {
                              v164 = (unsigned int *)v163;
                              operator delete(v163);
                            }

                            goto LABEL_234;
                          }
                        }

                        uint64_t v93 = memcmp(v178, v175, v179 - v178) == 0;
                        if (!v92) {
                          goto LABEL_173;
                        }
LABEL_172:
                        v176 = v92;
                        operator delete(v92);
                        goto LABEL_173;
                      }
                    }

                    else if (v83)
                    {
                      goto LABEL_153;
                    }

void sub_2B454C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, void *a36, void *a37, uint64_t a38)
{
  if (v40) {
    operator delete(v40);
  }
  if (v39) {
    operator delete(v39);
  }
  free(a36);
  free(*(void **)(v41 - 168));
  sub_2B5784(&a37);
  sub_68314((void *)(v41 - 208));
  _Unwind_Resume(a1);
}

void sub_2B4734(void *a1, uint64_t a2, int a3)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  __int128 v15 = &v16;
  uint64_t v4 = a2 + 48;
  uint64_t v5 = 48LL;
  if (a3)
  {
    uint64_t v5 = 72LL;
    uint64_t v4 = a2 + 72;
  }

  uint64_t v6 = *(void *)(a2 + v5);
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v8 = &v16;
  if (v6 != v7)
  {
    do
    {
      if (*(_DWORD *)v6 != -1)
      {
        uint64_t v9 = &v16;
        uint64_t v10 = &v16;
        if (v16)
        {
          unint64_t v11 = *(void *)(v6 + 24);
          uint64_t v12 = v16;
          while (1)
          {
            while (1)
            {
              uint64_t v10 = (uint64_t **)v12;
              unint64_t v13 = v12[4];
              if (v11 >= v13) {
                break;
              }
              uint64_t v12 = *v10;
              uint64_t v9 = v10;
              if (!*v10) {
                goto LABEL_13;
              }
            }

            if (v13 >= v11) {
              break;
            }
            uint64_t v12 = v10[1];
            if (!v12)
            {
              uint64_t v9 = v10 + 1;
              goto LABEL_13;
            }
          }
        }

        else
        {
LABEL_13:
          uint64_t v14 = (uint64_t *)operator new(0x28uLL);
          v14[4] = *(void *)(v6 + 24);
          *uint64_t v14 = 0LL;
          v14[1] = 0LL;
          v14[2] = (uint64_t)v10;
          void *v9 = v14;
          if (*v15)
          {
            __int128 v15 = (uint64_t **)*v15;
            uint64_t v14 = *v9;
          }

          sub_7A420(v16, v14);
          ++v17;
        }
      }

      v6 += 32LL;
    }

    while (v6 != v7);
    uint64_t v8 = v15;
  }

  sub_2B4A4C(a1, v8, &v16);
  sub_32C8C(v16);
}

void sub_2B4874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t *sub_2B4894(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unint64_t v7 = a2[4], v7 > a3))
  {
    uint64_t v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v10 = (uint64_t **)a2;
LABEL_16:
      if (v8) {
        unint64_t v13 = v10;
      }
      else {
        unint64_t v13 = (uint64_t **)a2;
      }
      if (v8) {
        unint64_t v11 = v10 + 1;
      }
      else {
        unint64_t v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }

    if (v8)
    {
      uint64_t v9 = (uint64_t **)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t **)v9[1];
      }

      while (v9);
    }

    else
    {
      __int128 v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t **)v15[2];
        BOOL v16 = *v10 == v15;
        __int128 v15 = (uint64_t *)v10;
      }

      while (v16);
    }

    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v13 = (uint64_t **)v17;
          unint64_t v18 = v17[4];
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }

void *sub_2B4A4C(void *a1, void *a2, void *a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0LL;
    unint64_t v7 = a1;
    do
    {
      uint64_t v8 = operator new(0x18uLL);
      uint64_t v9 = v5[4];
      v8[1] = a1;
      v8[2] = v9;
      void *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v6;
      uint64_t v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          unint64_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          uint64_t v5 = v11;
        }

        while (!v12);
      }

      unint64_t v7 = v8;
      uint64_t v5 = v11;
    }

    while (v11 != a3);
  }

  return a1;
}

void sub_2B4AFC(_Unwind_Exception *a1)
{
}

void sub_2B4B10(char **a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6 == a3)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    do
    {
      if (a5)
      {
        if (sub_2C7B94(*(void *)(v6 + 16)))
        {
          memset(v48, 0, sizeof(v48));
          uint64_t v12 = (*(uint64_t (**)(void, void, void))(**(void **)(v6 + 16) + 96LL))( *(void *)(v6 + 16),  0LL,  0LL);
          if (!(*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v12 + 112LL))(v12, v48))
          {
            *(void *)uint64_t v48 = (*(double (**)(uint64_t))(*(void *)a4 + 104LL))(a4);
            uint64_t v10 = *(void *)v48;
            __int128 v50 = *(_OWORD *)&v48[1];
            *(_OWORD *)unint64_t v51 = *(_OWORD *)&v48[17];
            *(void *)&v51[15] = *(void *)&v48[32];
            uint64_t v11 = 1LL;
          }
        }
      }

      uint64_t v6 = *(void *)(v6 + 8);
    }

    while (v6 != a3);
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v13 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v14 = 0LL;
    unsigned int v15 = 0;
    do
    {
      BOOL v16 = (char *)operator new(0x130uLL);
      uint64_t v17 = v16;
      __int128 v18 = *(_OWORD *)(v13 + 16 * v14);
      char v19 = *(std::__shared_weak_count **)(v13 + 16 * v14 + 8);
      if (v19)
      {
        p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
        do
          unint64_t v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        *(void *)BOOL v16 = off_47A8D8;
        v16[8] = 1;
        *((_OWORD *)v16 + 1) = v18;
        __int128 v22 = v16 + 16;
        __int128 v23 = (unint64_t *)&v19->__shared_weak_owners_;
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        unint64_t v25 = (std::__shared_weak_count *)*((void *)v16 + 3);
      }

      else
      {
        unint64_t v25 = 0LL;
        *(void *)uint64_t v17 = off_47A8D8;
        v17[8] = 1;
        *((_OWORD *)v17 + 1) = v18;
        __int128 v22 = v17 + 16;
      }

      *((_OWORD *)v17 + 2) = 0u;
      *((void *)v17 + 17) = 0LL;
      *((_DWORD *)v17 + 36) = 0;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 5) = 0u;
      *((_OWORD *)v17 + 6) = 0u;
      *((_OWORD *)v17 + 7) = 0u;
      *((_DWORD *)v17 + 32) = 0;
      *(_OWORD *)(v17 + 152) = 0u;
      *(_OWORD *)(v17 + 168) = 0u;
      *(_OWORD *)(v17 + 184) = 0u;
      *(_OWORD *)(v17 + 200) = 0u;
      *(_OWORD *)(v17 + 216) = 0u;
      v17[232] = v10;
      __int128 v26 = v50;
      __int128 v27 = *(_OWORD *)v51;
      *((void *)v17 + 33) = *(void *)&v51[15];
      *(_OWORD *)(v17 + 249) = v27;
      *(_OWORD *)(v17 + 233) = v26;
      v17[272] = v11;
      *((_DWORD *)v17 + 69) = *(_DWORD *)&v49[3];
      *(_DWORD *)(v17 + 273) = *(_DWORD *)v49;
      *((void *)v17 + 35) = 0LL;
      *((void *)v17 + 36) = 0xFFFFFFFFLL;
      *((_DWORD *)v17 + 74) = 0;
      if (v25)
      {
        unint64_t v28 = std::__shared_weak_count::lock(v25);
        if (v28)
        {
          unsigned int v29 = v28;
          if (*(void *)v22) {
            *((void *)v17 + 4) = *(void *)(*(void *)v22 + 136LL);
          }
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            unint64_t v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }

      (*(void (**)(char *))(*(void *)v17 + 24LL))(v17);
      unsigned int v32 = a1;
      unint64_t v34 = (char **)a1[1];
      unint64_t v33 = (unint64_t)a1[2];
      if ((unint64_t)v34 >= v33)
      {
        unsigned int v36 = (char **)*a1;
        uint64_t v37 = ((char *)v34 - *a1) >> 3;
        unint64_t v38 = v37 + 1;
        int v39 = a2;
        uint64_t v40 = v11;
        uint64_t v41 = v10;
        uint64_t v42 = v33 - (void)v36;
        if (v42 >> 2 > v38) {
          unint64_t v38 = v42 >> 2;
        }
        else {
          unint64_t v43 = v38;
        }
        if (v43)
        {
          if (v43 >> 61) {
            sub_7A8C4();
          }
          uint64_t v44 = (char *)operator new(8 * v43);
        }

        else
        {
          uint64_t v44 = 0LL;
        }

        int v45 = &v44[8 * v37];
        *(void *)int v45 = v17;
        unsigned int v35 = v45 + 8;
        if (v34 == v36)
        {
          unsigned int v32 = a1;
        }

        else
        {
          do
          {
            uint64_t v46 = (uint64_t)*--v34;
            *((void *)v45 - 1) = v46;
            v45 -= 8;
          }

          while (v34 != v36);
          unsigned int v32 = a1;
          unint64_t v34 = (char **)*a1;
        }

        *unsigned int v32 = v45;
        v32[1] = v35;
        v32[2] = &v44[8 * v43];
        if (v34) {
          operator delete(v34);
        }
        uint64_t v10 = v41;
        uint64_t v11 = v40;
        a2 = v39;
      }

      else
      {
        *unint64_t v34 = v17;
        unsigned int v35 = (char *)(v34 + 1);
      }

      v32[1] = v35;
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      uint64_t v13 = *a2;
      uint64_t v14 = ++v15;
    }

    while (v15 < (unint64_t)((uint64_t)(a2[1] - *a2) >> 4));
  }

void sub_2B4EC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v12 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(exception_object);
}

void sub_2B4F48(char ***a1, int a2, uint64_t *a3, uint64_t a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v4 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    unsigned int v10 = 0;
    while (1)
    {
      uint64_t v11 = (unsigned int *)(v4 + 32 * v9);
      unsigned int v12 = *v11;
      if (*v11 == -2) {
        break;
      }
      if (v12 == -1)
      {
        unint64_t v13 = (unint64_t)a1[2];
        if ((unint64_t)v8 < v13)
        {
          void *v8 = 0LL;
          uint64_t v14 = v8 + 1;
LABEL_22:
          uint64_t v30 = v14;
          goto LABEL_76;
        }

        unint64_t v31 = *a1;
        uint64_t v32 = v8 - *a1;
        unint64_t v33 = v32 + 1;
        uint64_t v34 = v13 - (void)v31;
        if (v34 >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        else {
          unint64_t v21 = v33;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_7DC90(v21);
        }
        else {
          uint64_t v22 = 0LL;
        }
        unint64_t v60 = (char **)(v21 + 8 * v32);
        void *v60 = 0LL;
        uint64_t v30 = v60 + 1;
        if (v8 != v31)
        {
          do
          {
            unint64_t v61 = *--v8;
            *--unint64_t v60 = v61;
          }

          while (v8 != v31);
          goto LABEL_72;
        }

        goto LABEL_73;
      }

      uint64_t v23 = v4 + 32 * v9;
      uint64_t v26 = *(void *)(v23 + 8);
      unint64_t v25 = (void *)(v23 + 8);
      uint64_t v24 = v26;
      if ((v12 & 0x80000000) == 0 && !v24)
      {
        unsigned int v15 = (char *)operator new(0x28uLL);
        int v27 = *v11;
        uint64_t v28 = sub_2B294C(a4, a2, *v11);
        sub_2B2110((uint64_t)v15, v27, v28, *(void *)(v4 + 32 * v9 + 24));
        *(void *)unsigned int v15 = &off_47AA88;
        if ((*v11 & 0x80000000) != 0)
        {
          uint64_t v73 = (os_log_t *)sub_138E8(13);
          uint64_t v74 = *v73;
          if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            std::string v78 = "AggregateDevice_Common2.cpp";
            __int16 v79 = 1024;
            int v80 = 357;
            _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }

        unint64_t v29 = (unint64_t)a1[2];
        __int128 v50 = *a1;
        uint64_t v51 = v8 - *a1;
        unint64_t v52 = v51 + 1;
        uint64_t v53 = v29 - (void)v50;
        if (v53 >> 2 > v52) {
          unint64_t v52 = v53 >> 2;
        }
        else {
          unint64_t v21 = v52;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_7DC90(v21);
        }
        else {
          uint64_t v22 = 0LL;
        }
        unint64_t v60 = (char **)(v21 + 8 * v51);
        void *v60 = v15;
        uint64_t v30 = v60 + 1;
        if (v8 != v50)
        {
          do
          {
            __int16 v63 = *--v8;
            *--unint64_t v60 = v63;
          }

          while (v8 != v50);
          goto LABEL_72;
        }

        goto LABEL_73;
      }

      unsigned int v35 = (char *)operator new(0x100uLL);
      int v36 = *v11;
      uint64_t v37 = sub_2B294C(a4, a2, *v11);
      uint64_t v38 = v4 + 32 * v9;
      sub_2B2110((uint64_t)v35, v36, v37, *(void *)(v38 + 24));
      *(void *)unsigned int v35 = off_47AC28;
      *((void *)v35 + 5) = *v25;
      uint64_t v39 = *(void *)(v38 + 16);
      *((void *)v35 + 6) = v39;
      if (v39)
      {
        uint64_t v40 = (unint64_t *)(v39 + 16);
        do
          unint64_t v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }

      *(_OWORD *)(v35 + 56) = 0u;
      *((void *)v35 + 20) = 0LL;
      *((_DWORD *)v35 + 42) = 0;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *((_DWORD *)v35 + 38) = 0;
      *((_OWORD *)v35 + 11) = 0u;
      *((_OWORD *)v35 + 12) = 0u;
      *((_OWORD *)v35 + 13) = 0u;
      *((_OWORD *)v35 + 14) = 0u;
      *((_OWORD *)v35 + 15) = 0u;
      if ((*v11 & 0x80000000) != 0)
      {
        __int128 v70 = (os_log_t *)sub_138E8(13);
        int64x2_t v71 = *v70;
        if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          std::string v78 = "AggregateDevice_Common2.cpp";
          __int16 v79 = 1024;
          int v80 = 515;
          _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        uint64_t v72 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v72, "Precondition failure.");
      }

      uint64_t v42 = (std::__shared_weak_count *)*((void *)v35 + 6);
      if (v42)
      {
        unint64_t v43 = std::__shared_weak_count::lock(v42);
        if (v43)
        {
          uint64_t v44 = v43;
          uint64_t v45 = *((void *)v35 + 5);
          if (v45) {
            *((void *)v35 + 7) = *(void *)(v45 + 136);
          }
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            unint64_t v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }

      (*(void (**)(char *))(*(void *)v35 + 24LL))(v35);
      uint64_t v49 = a1[1];
      unint64_t v48 = (unint64_t)a1[2];
      if ((unint64_t)v49 >= v48)
      {
        unint64_t v54 = *a1;
        uint64_t v55 = v49 - *a1;
        unint64_t v56 = v55 + 1;
        uint64_t v57 = v48 - (void)v54;
        if (v57 >> 2 > v56) {
          unint64_t v56 = v57 >> 2;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58) {
          unint64_t v58 = (unint64_t)sub_7DC90(v58);
        }
        else {
          uint64_t v59 = 0LL;
        }
        __int16 v65 = (char **)(v58 + 8 * v55);
        unint64_t *v65 = v35;
        uint64_t v30 = v65 + 1;
        if (v49 != v54)
        {
          do
          {
            unint64_t v66 = *--v49;
            *--__int16 v65 = v66;
          }

          while (v49 != v54);
          uint64_t v49 = *a1;
        }

        *a1 = v65;
        a1[1] = v30;
        a1[2] = (char **)(v58 + 8 * v59);
        if (!v49) {
          goto LABEL_76;
        }
        __int128 v64 = v49;
        goto LABEL_75;
      }

      *uint64_t v49 = v35;
      uint64_t v30 = v49 + 1;
LABEL_76:
      a1[1] = v30;
      uint64_t v4 = *a3;
      uint64_t v8 = v30;
      uint64_t v9 = ++v10;
    }

    unsigned int v15 = (char *)operator new(0x28uLL);
    sub_2B2110((uint64_t)v15, *v11, 0LL, *(void *)(v4 + 32 * v9 + 24));
    *(void *)unsigned int v15 = &off_47AB58;
    if (*v11 != -2)
    {
      uint64_t v67 = (os_log_t *)sub_138E8(13);
      __int16 v68 = *v67;
      if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        std::string v78 = "AggregateDevice_Common2.cpp";
        __int16 v79 = 1024;
        int v80 = 434;
        _os_log_impl(&dword_0, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      uint64_t v69 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v69, "Precondition failure.");
    }

    unint64_t v16 = (unint64_t)a1[2];
    if ((unint64_t)v8 < v16)
    {
LABEL_21:
      void *v8 = v15;
      uint64_t v14 = v8 + 1;
      goto LABEL_22;
    }

    uint64_t v17 = *a1;
    uint64_t v18 = v8 - *a1;
    unint64_t v19 = v18 + 1;
    uint64_t v20 = v16 - (void)v17;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21) {
      unint64_t v21 = (unint64_t)sub_7DC90(v21);
    }
    else {
      uint64_t v22 = 0LL;
    }
    unint64_t v60 = (char **)(v21 + 8 * v18);
    void *v60 = v15;
    uint64_t v30 = v60 + 1;
    if (v8 != v17)
    {
      do
      {
        uint64_t v62 = *--v8;
        *--unint64_t v60 = v62;
      }

      while (v8 != v17);
LABEL_72:
      uint64_t v8 = *a1;
    }

void sub_2B560C(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_2B56C8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    unint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = operator new(0x30uLL);
    v9[2] = *(_OWORD *)a3;
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0LL;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      uint64_t v11 = *v6;
    }

    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }

    uint64_t result = sub_7A420((uint64_t *)v4[1], v11);
    ++v4[2];
  }

  return result;
}

void **sub_2B5784(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_7A668(&v3);
  uint64_t v3 = a1;
  sub_7A668(&v3);
  return a1;
}

uint64_t sub_2B57C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    unint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1409;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: inNow is NULL.", buf, 0x12u);
      }
    }
  }

  if (!a3)
  {
    unsigned int v15 = (os_log_t *)sub_138E8(13);
    unint64_t v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1410;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: inInputData is NULL.",  buf,  0x12u);
      }
    }
  }

  if (!a4)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1411;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: inInputTime is NULL.",  buf,  0x12u);
      }
    }
  }

  if (!a5)
  {
    unint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1412;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: outOutputData is NULL.",  buf,  0x12u);
      }
    }
  }

  if (!a6)
  {
    unint64_t v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21)
    {
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1413;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: inOutputTime is NULL.",  buf,  0x12u);
      }
    }
  }

  if (a7)
  {
    uint64_t v27 = a7;
    *(void *)(a7 + 328) = pthread_self();
    *(_BYTE *)(a7 + 320) = 1;
    if (*(void *)(a7 + 456)) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 576LL))( a7,  a2,  a3,  a4,  a5,  a6,  a7);
    }
  }

  else
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v29 = "AggregateDevice_Common2.cpp";
      __int16 v30 = 1024;
      int v31 = 1414;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: inClientData is NULL.",  buf,  0x12u);
    }

    sub_3284(&v27, 0LL);
  }

  uint64_t v25 = v27;
  if (v27)
  {
    *(_BYTE *)(v27 + 320) = 0;
    *(void *)(v25 + 328) = 0LL;
  }

  return 0LL;
}

void sub_2B5B60( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12)
{
  if (a2)
  {
    if (a2 == 3)
    {
      unint64_t v13 = __cxa_begin_catch(a1);
      uint64_t v14 = (os_log_t *)sub_138E8(16);
      unsigned int v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = v13[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AggregateDevice_Common2.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1425;
        WORD1(a12) = 1024;
        DWORD1(a12) = v16;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException thrown during HandleHALIOProc(): %d.",  (uint8_t *)&buf,  0x18u);
      }
    }

    else
    {
      uint64_t v17 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v18 = v17;
        unint64_t v19 = (os_log_t *)sub_138E8(16);
        uint64_t v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16LL))(v18);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common2.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1426;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception thrown HandleHALIOProc(): %s.",  (uint8_t *)&buf,  0x1Cu);
        }
      }

      else
      {
        uint64_t v22 = (os_log_t *)sub_138E8(16);
        uint64_t v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common2.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1427;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception thrown HandleHALIOProc().",  (uint8_t *)&buf,  0x12u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2B5B14LL);
  }

  _Unwind_Resume(a1);
}

void sub_2B5D74(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 16LL))(a1 + 40);
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = &v26;
  uint64_t v4 = *(void **)(v2 - 24);
  if (v4 != (void *)(v2 - 16))
  {
    do
    {
      uint64_t v5 = &v26;
      if (v25 == &v26) {
        goto LABEL_11;
      }
      uint64_t v6 = v26;
      unint64_t v7 = &v26;
      if (v26)
      {
        do
        {
          uint64_t v5 = (uint64_t **)v6;
          uint64_t v6 = (uint64_t *)v6[1];
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v5 = (uint64_t **)v7[2];
          BOOL v8 = *v5 == (uint64_t *)v7;
          unint64_t v7 = v5;
        }

        while (v8);
      }

      uint64_t v9 = v5[4];
      unint64_t v10 = v4[4];
      unint64_t v11 = v4[5];
      if ((uint64_t *)v10 == v9 ? (unint64_t)v5[5] < v11 : (unint64_t)v9 < v10)
      {
LABEL_11:
        if (v26)
        {
          uint64_t v23 = v5;
          unint64_t v13 = v5 + 1;
        }

        else
        {
          uint64_t v23 = &v26;
          unint64_t v13 = &v26;
        }
      }

      else
      {
        unint64_t v13 = (uint64_t **)sub_1D21EC((uint64_t)&v25, &v23, v10, v11);
      }

      if (!*v13)
      {
        uint64_t v14 = operator new(0x30uLL);
        v14[2] = *((_OWORD *)v4 + 2);
        unsigned int v15 = v23;
        *(void *)uint64_t v14 = 0LL;
        *((void *)v14 + 1) = 0LL;
        *((void *)v14 + 2) = v15;
        *unint64_t v13 = (uint64_t *)v14;
        if (*v25)
        {
          uint64_t v25 = (uint64_t **)*v25;
          uint64_t v14 = *v13;
        }

        sub_7A420(v26, (uint64_t *)v14);
        ++v27;
      }

      int v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (void *)v4[2];
          BOOL v8 = *v17 == (void)v4;
          uint64_t v4 = v17;
        }

        while (!v8);
      }

      uint64_t v4 = v17;
    }

    while (v17 != (void *)(v2 - 16));
  }

  sub_34AA0(&v23, v2);
  int v21 = *(_DWORD *)(a1 + 8);
  uint64_t v22 = 1735159650LL;
  uint64_t v18 = v25;
  if (v25 != &v26)
  {
    do
    {
      ((void (*)(void, uint64_t, int *, uint64_t *))v18[4])(0LL, 1LL, &v21, v18[5]);
      unint64_t v19 = v18[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = (uint64_t **)v19;
          unint64_t v19 = (uint64_t *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          uint64_t v20 = (uint64_t **)v18[2];
          BOOL v8 = *v20 == (uint64_t *)v18;
          uint64_t v18 = v20;
        }

        while (!v8);
      }

      uint64_t v18 = v20;
    }

    while (v20 != &v26);
  }

  if (v24) {
    ((void (*)(uint64_t **))(*v23)[2])(v23);
  }
  sub_32C8C(v26);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
}

void sub_2B5FC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
  }
  _Unwind_Resume(a1);
}

void sub_2B6018(unint64_t a1)
{
  uint64_t v1 = (void *)sub_2B7B20(a1);
  operator delete(v1);
}

uint64_t sub_2B602C(uint64_t a1, void *a2)
{
  return 1LL;
}

uint64_t sub_2B6044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_D1820(a2, a3);
  if (HIDWORD(v8))
  {
    uint64_t v16 = v8;
    if (sub_D17C8(v8))
    {
      uint64_t v17 = *(void *)(a1 + 1160);
      if (!v17)
      {
        uint64_t v18 = (os_log_t *)sub_138E8(13);
        unint64_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_24054(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a1 + 712);
            uint64_t v25 = *(void *)(a1 + 728);
          }

          uint64_t v20 = __dst;
          if (v25 < 0) {
            uint64_t v20 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v28 = 1024;
          int v29 = 71;
          __int16 v30 = 2080;
          int v31 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
          if (SHIBYTE(v25) < 0) {
            operator delete(__dst[0]);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }

      return sub_7F678(v17, v16);
    }

    else
    {
      return sub_7FEB0(a1, 1685287015LL, v16, a4);
    }
  }

  else
  {
    uint64_t v9 = (os_log_t *)sub_138E8(24);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, a2);
      int v11 = SHIBYTE(v25);
      unsigned int v12 = (void **)__dst[0];
      sub_2CA1C(__p, a3);
      unint64_t v13 = __dst;
      if (v11 < 0) {
        unint64_t v13 = v12;
      }
      if (v23 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v28 = 1024;
      int v29 = 82;
      __int16 v30 = 2080;
      int v31 = v13;
      __int16 v32 = 2080;
      unint64_t v33 = v14;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TranslateToDSPGraphParameter failure for AU subtype %s as graph parameter %s",  buf,  0x26u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__dst[0]);
      }
    }

    return 0LL;
  }

void sub_2B6334(_Unwind_Exception *a1)
{
}

uint64_t sub_2B6364(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v10 = sub_D1820(a2, a3);
  if (HIDWORD(v10))
  {
    uint64_t v18 = v10;
    if (sub_D17C8(v10))
    {
      uint64_t v19 = *(void *)(a1 + 1160);
      if (!v19)
      {
        uint64_t v20 = (os_log_t *)sub_138E8(13);
        int v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_24054(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a1 + 712);
            uint64_t v27 = *(void *)(a1 + 728);
          }

          uint64_t v22 = __dst;
          if (v27 < 0) {
            uint64_t v22 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v29 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v30 = 1024;
          int v31 = 97;
          __int16 v32 = 2080;
          unint64_t v33 = v22;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
          if (SHIBYTE(v27) < 0) {
            operator delete(__dst[0]);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }

      return sub_7F7F4(*(void *)(v19 + 16), *(_BYTE *)(v19 + 148), v18, a4);
    }

    else
    {
      return sub_801D8(a1, 0x64737067u, v18, (uint64_t)a4, a5);
    }
  }

  else
  {
    int v11 = (os_log_t *)sub_138E8(24);
    unsigned int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, a2);
      int v13 = SHIBYTE(v27);
      uint64_t v14 = (void **)__dst[0];
      sub_2CA1C(__p, a3);
      uint64_t v15 = __dst;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v25 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v29 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v30 = 1024;
      int v31 = 108;
      __int16 v32 = 2080;
      unint64_t v33 = v15;
      __int16 v34 = 2080;
      unsigned int v35 = v16;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TranslateToDSPGraphParameter failure for AU subtype %s as graph parameter %s",  buf,  0x26u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(__dst[0]);
      }
    }

    return 4294967246LL;
  }

void sub_2B6668(_Unwind_Exception *a1)
{
}

uint64_t sub_2B6698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v10 = sub_D1820(a2, a3);
  if (HIDWORD(v10))
  {
    uint64_t v18 = v10;
    if (sub_D17C8(v10))
    {
      uint64_t v19 = *(void *)(a1 + 1160);
      if (!v19)
      {
        uint64_t v20 = (os_log_t *)sub_138E8(13);
        int v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_24054(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a1 + 712);
            uint64_t v27 = *(void *)(a1 + 728);
          }

          uint64_t v22 = __dst;
          if (v27 < 0) {
            uint64_t v22 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v29 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v30 = 1024;
          int v31 = 123;
          __int16 v32 = 2080;
          unint64_t v33 = v22;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
          if (SHIBYTE(v27) < 0) {
            operator delete(__dst[0]);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }

      return sub_7F86C(*(void *)(v19 + 16), *(_BYTE *)(v19 + 148), v18, a5);
    }

    else
    {
      return sub_80250(a1, 1685287015LL, v18, a4, a5);
    }
  }

  else
  {
    int v11 = (os_log_t *)sub_138E8(24);
    unsigned int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, a2);
      int v13 = SHIBYTE(v27);
      uint64_t v14 = (void **)__dst[0];
      sub_2CA1C(__p, a3);
      uint64_t v15 = __dst;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v25 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v29 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v30 = 1024;
      int v31 = 134;
      __int16 v32 = 2080;
      unint64_t v33 = v15;
      __int16 v34 = 2080;
      unsigned int v35 = v16;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TranslateToDSPGraphParameter failure for AU subtype %s as graph parameter %s",  buf,  0x26u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(__dst[0]);
      }
    }

    return 4294967246LL;
  }

void sub_2B69AC(_Unwind_Exception *a1)
{
}

uint64_t sub_2B69DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_34A20(a2, a3);
  if (HIDWORD(v8))
  {
    uint64_t v16 = v8;
    if (sub_D1760(v8))
    {
      uint64_t v17 = *(void *)(a1 + 1160);
      if (!v17)
      {
        uint64_t v18 = (os_log_t *)sub_138E8(13);
        uint64_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_24054(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a1 + 712);
            uint64_t v25 = *(void *)(a1 + 728);
          }

          uint64_t v20 = __dst;
          if (v25 < 0) {
            uint64_t v20 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v28 = 1024;
          int v29 = 160;
          __int16 v30 = 2080;
          int v31 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
          if (SHIBYTE(v25) < 0) {
            operator delete(__dst[0]);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }

      return sub_7F4FC(v17, v16);
    }

    else
    {
      return sub_805A4(a1, 1685287015LL, v16, a4);
    }
  }

  else
  {
    uint64_t v9 = (os_log_t *)sub_138E8(24);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, a2);
      int v11 = SHIBYTE(v25);
      unsigned int v12 = (void **)__dst[0];
      sub_2CA1C(__p, a3);
      int v13 = __dst;
      if (v11 < 0) {
        int v13 = v12;
      }
      if (v23 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v28 = 1024;
      int v29 = 171;
      __int16 v30 = 2080;
      int v31 = v13;
      __int16 v32 = 2080;
      unint64_t v33 = v14;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph property %s",  buf,  0x26u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__dst[0]);
      }
    }

    return 0LL;
  }

void sub_2B6CCC(_Unwind_Exception *a1)
{
}

uint64_t sub_2B6CFC(uint64_t a1, uint64_t a2, uint64_t a3, UInt32 *a4, _BYTE *a5, uint64_t a6)
{
  unint64_t v12 = sub_34A20(a2, a3);
  if (HIDWORD(v12))
  {
    uint64_t v20 = v12;
    if (sub_D1760(v12))
    {
      uint64_t v21 = *(void *)(a1 + 1160);
      if (!v21)
      {
        uint64_t v22 = (os_log_t *)sub_138E8(13);
        char v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_24054(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a1 + 712);
            uint64_t v29 = *(void *)(a1 + 728);
          }

          char v24 = __dst;
          if (v29 < 0) {
            char v24 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v32 = 1024;
          int v33 = 186;
          __int16 v34 = 2080;
          unsigned int v35 = v24;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
          if (SHIBYTE(v29) < 0) {
            operator delete(__dst[0]);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }

      return sub_7F480(*(void *)(v21 + 16), *(_BYTE *)(v21 + 148), v20, a4, a5);
    }

    else
    {
      return sub_807B8(a1, 1685287015LL, v20, (uint64_t)a4, (uint64_t)a5, a6);
    }
  }

  else
  {
    int v13 = (os_log_t *)sub_138E8(24);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, a2);
      int v15 = SHIBYTE(v29);
      uint64_t v16 = (void **)__dst[0];
      sub_2CA1C(__p, a3);
      uint64_t v17 = __dst;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v27 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v32 = 1024;
      int v33 = 197;
      __int16 v34 = 2080;
      unsigned int v35 = v17;
      __int16 v36 = 2080;
      uint64_t v37 = v18;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph parameter %s",  buf,  0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(__dst[0]);
      }
    }

    return 0LL;
  }

void sub_2B701C(_Unwind_Exception *a1)
{
}

uint64_t sub_2B704C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, UInt32 *a5, uint64_t a6)
{
  unint64_t v12 = sub_34A20(a2, a3);
  if (HIDWORD(v12))
  {
    uint64_t v20 = v12;
    if (sub_D1760(v12))
    {
      uint64_t v21 = *(void *)(a1 + 1160);
      if (!v21)
      {
        uint64_t v22 = (os_log_t *)sub_138E8(13);
        char v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_24054(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a1 + 712);
            uint64_t v29 = *(void *)(a1 + 728);
          }

          char v24 = __dst;
          if (v29 < 0) {
            char v24 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v32 = 1024;
          int v33 = 213;
          __int16 v34 = 2080;
          unsigned int v35 = v24;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
          if (SHIBYTE(v29) < 0) {
            operator delete(__dst[0]);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }

      return sub_7F40C(*(void *)(v21 + 16), *(_BYTE *)(v21 + 148), v20, a5, a4);
    }

    else
    {
      return sub_346CC(a1, 1685287015LL, v20, (uint64_t)a4, (uint64_t)a5, a6);
    }
  }

  else
  {
    int v13 = (os_log_t *)sub_138E8(24);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, a2);
      int v15 = SHIBYTE(v29);
      uint64_t v16 = (void **)__dst[0];
      sub_2CA1C(__p, a3);
      uint64_t v17 = __dst;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v27 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v32 = 1024;
      int v33 = 224;
      __int16 v34 = 2080;
      unsigned int v35 = v17;
      __int16 v36 = 2080;
      uint64_t v37 = v18;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph parameter %s",  buf,  0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(__dst[0]);
      }
    }

    return 4294967246LL;
  }

void sub_2B7374(_Unwind_Exception *a1)
{
}

uint64_t sub_2B73A4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_34A20(a2, a3);
  if (HIDWORD(v12))
  {
    uint64_t v20 = v12;
    if (sub_D1760(v12))
    {
      uint64_t v21 = *(void *)(a1 + 1160);
      if (!v21)
      {
        uint64_t v22 = (os_log_t *)sub_138E8(13);
        char v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_24054(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a1 + 712);
            uint64_t v29 = *(void *)(a1 + 728);
          }

          char v24 = __dst;
          if (v29 < 0) {
            char v24 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v32 = 1024;
          int v33 = 239;
          __int16 v34 = 2080;
          unsigned int v35 = v24;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
          if (SHIBYTE(v29) < 0) {
            operator delete(__dst[0]);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }

      return sub_7F398(*(void *)(v21 + 16), *(_BYTE *)(v21 + 148), v20, a5, a4);
    }

    else
    {
      return sub_80AC8(a1, 1685287015LL, v20, (uint64_t)a4, a5, a6);
    }
  }

  else
  {
    int v13 = (os_log_t *)sub_138E8(24);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__dst, a2);
      int v15 = SHIBYTE(v29);
      uint64_t v16 = (void **)__dst[0];
      sub_2CA1C(__p, a3);
      uint64_t v17 = __dst;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v27 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v32 = 1024;
      int v33 = 250;
      __int16 v34 = 2080;
      unsigned int v35 = v17;
      __int16 v36 = 2080;
      uint64_t v37 = v18;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph parameter %s",  buf,  0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(__dst[0]);
      }
    }

    return 4294967246LL;
  }

void sub_2B76C4(_Unwind_Exception *a1)
{
}

BOOL sub_2B76F4(uint64_t a1, int a2)
{
  return a2 == 1685287015 || a2 == 1936748595 || sub_3467C(a1, a2);
}

void sub_2B771C( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int **a7)
{
  if (*(void *)(a1 + 1160))
  {
    if (sub_7531C())
    {
      sub_302C4(a1, a2, a3, a4, (unsigned int **)a5, a6, a7);
    }

    else if (*(_BYTE *)(a1 + 448))
    {
      uint64_t v19 = (unsigned int *)(a1 + 680);
      *(_WORD *)&buf[2] = *(_WORD *)(a1 + 682);
      *(_WORD *)AudioObjectPropertyAddress buf = *(_WORD *)(a1 + 682);
      WORD1(__p[0]) = *(_WORD *)(a1 + 682) == 0;
      LOWORD(__p[0]) = *(_WORD *)(a1 + 682);
      while (1)
      {
        unsigned int v20 = __ldaxr(v19);
        if (v20 != *(_DWORD *)buf) {
          break;
        }
      }

      __clrex();
LABEL_22:
      uint64_t v21 = 424LL;
      if (*(_WORD *)(a1 + 682))
      {
        uint64_t v21 = 400LL;
        uint64_t v22 = a1 + 400;
      }

      else
      {
        uint64_t v22 = a1 + 424;
      }

      uint64_t v36 = v21;
      uint64_t v23 = *(void *)(v22 + 8) - *(void *)(a1 + v21);
      if (v23)
      {
        uint64_t v24 = 0LL;
        unint64_t v25 = v23 / 24;
        unint64_t v26 = v25 - 1;
        if (v25 <= 1) {
          uint64_t v27 = 1LL;
        }
        else {
          uint64_t v27 = v25;
        }
        uint64_t v28 = 8LL;
        uint64_t v29 = 16LL;
        do
        {
          __int16 v30 = (uint64_t *)a5;
          if (v24) {
            __int16 v30 = (uint64_t *)(*(void *)(a1 + 976) + v29 - 16);
          }
          int v31 = (void **)a7;
          if (v26 != v24) {
            int v31 = (void **)(*(void *)(a1 + 976) + v29);
          }
          uint64_t v32 = *v30;
          __p[0] = *v31;
          uint64_t v33 = *(void *)(a1 + v36);
          if ((*(unsigned int (**)(void))(**(void **)(v33 + v28) + 216LL))(*(void *)(v33 + v28)))
          {
            *(void *)AudioObjectPropertyAddress buf = v32;
            *(void *)&buf[8] = 0LL;
            if (a4 >= 2) {
              *(void *)&buf[8] = *(void *)(a5 + 8);
            }
            (*(void (**)(void, uint64_t, void))(**(void **)(v33 + v28) + 112LL))( *(void *)(v33 + v28),  a2,  a3);
          }

          else if (__p[0])
          {
            (*(void (**)(void, uint64_t, void))(**(void **)(v33 + v28) + 104LL))( *(void *)(v33 + v28),  a2,  a3);
          }

          ++v24;
          v28 += 24LL;
          v29 += 32LL;
        }

        while (v27 != v24);
      }
    }
  }

  else
  {
    if (a6)
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = a6;
      do
      {
        int v13 = a7[v11];
        unint64_t v14 = *v13;
        if ((_DWORD)v14)
        {
          unint64_t v15 = 0LL;
          uint64_t v16 = (void **)(v13 + 4);
          do
          {
            if (*v16)
            {
              bzero(*v16, *((unsigned int *)v16 - 1));
              unint64_t v14 = *v13;
            }

            ++v15;
            v16 += 2;
          }

          while (v15 < v14);
        }

        ++v11;
      }

      while (v11 != v12);
    }

    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 735) < 0)
      {
        sub_24054(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
        uint64_t v40 = *(void *)(a1 + 728);
      }

      __int16 v34 = __p;
      if (v40 < 0) {
        __int16 v34 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 270;
      __int16 v42 = 2080;
      unint64_t v43 = v34;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ERROR: HAL Speaker Protection is not available for DSP chain %s",  buf,  0x1Cu);
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_2B7AB4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 1168);
  *(_OWORD *)(a1 + 1160) = 0u;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

uint64_t sub_2B7B18()
{
  return 1LL;
}

unint64_t sub_2B7B20(unint64_t a1)
{
  *(void *)a1 = off_47B020;
  uint64_t v2 = (os_log_t *)sub_138E8(24);
  unint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_24054(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
      uint64_t v7 = *(void *)(a1 + 728);
    }

    uint64_t v4 = __p;
    if (v7 < 0) {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v9 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
    __int16 v10 = 1024;
    int v11 = 258;
    __int16 v12 = 2080;
    int v13 = v4;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Deleting DSPGraphChain_SpeakerProtectionHAL %s",  buf,  0x1Cu);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_7A768(a1 + 1160);
  sub_81770(a1);
  return a1;
}

void sub_2B7C5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_2B7C68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47C108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2B7C78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47C108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2B7C98(uint64_t a1)
{
  unint64_t v8 = (void **)(a1 + 104);
  sub_7A668(&v8);
  uint64_t v2 = *(const void **)(a1 + 96);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 88);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 72);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
  }

  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t sub_2B7D4C(uint64_t a1)
{
  *(void *)a1 = off_47B0F8;
  return sub_2B1D68(a1);
}

void sub_2B7D5C(void *a1)
{
  *a1 = off_47B0F8;
  uint64_t v1 = (void *)sub_2B1D68((uint64_t)a1);
  operator delete(v1);
}

void *sub_2B7D7C( uint64_t **a1, uint64_t a2, __int128 *a3, uint64_t a4, void **a5, uint64_t a6, _DWORD *a7, void **a8, __int128 *a9)
{
  v201.i64[0] = *(void *)(a6 + 4);
  sub_2899B8((uint64_t)v198, v201.i64);
  int v13 = operator new(0x328uLL);
  *int v13 = off_47B0F8;
  v181 = v13;
  char v14 = sub_7531C();
  if (a7[1]) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  v185 = a7;
  v186 = a5;
  BOOL v188 = (v15 & 1) == 0 && (*a7 & 0xFFFFFFFD) == 1;
  if (*a1 == a1[1])
  {
    v173 = (os_log_t *)sub_138E8(13);
    uint64_t v174 = *v173;
    if (*v173 && os_log_type_enabled(*v173, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 231;
      _os_log_impl(&dword_0, v174, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __int128 v16 = *(_OWORD *)(a6 + 16);
  int64x2_t v201 = *(int64x2_t *)a6;
  v202[0] = v16;
  v202[1] = *(_OWORD *)(a6 + 32);
  __int128 v203 = *(unsigned int *)(a6 + 16);
  *(void *)&__int128 v204 = &v204;
  *((void *)&v204 + 1) = &v204;
  *(void *)&__int128 v205 = 0LL;
  v206[1] = v207;
  v207[0] = 0LL;
  v207[1] = 0LL;
  sub_C590C(&v208, (__int128 *)__dst);
  sub_C590C(&__p, (__int128 *)v198);
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  if (*a1 != v18)
  {
    do
    {
      sub_85EA4(buf, v17);
      sub_10AA94(&v217, (uint64_t *)buf);
      sub_10AAF4((uint64_t *)&v204, &v217);
      sub_68314(&v217);
      sub_85D64(v220);
      sub_85D64(v219);
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[32];
      sub_85DA4((void ***)&v217);
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[8];
      sub_85DA4((void ***)&v217);
      v17 += 13;
    }

    while (v17 != v18);
  }

  for (uint64_t i = *((void *)&v204 + 1); (__int128 *)i != &v204; uint64_t i = *(void *)(i + 8))
  {
    if (((*(uint64_t (**)(void))(**(void **)(*(void *)(i + 24) + 16LL) + 352LL))(*(void *)(*(void *)(i + 24) + 16LL)) & 1) != 0)
    {
      break;
    }
  }

  uint64_t i = *((void *)&v204 + 1);
LABEL_16:
  v206[0] = *(void **)(*(void *)(i + 24) + 16LL);
  unsigned int v20 = *a1;
  uint64_t v21 = 0x4EC4EC4EC4EC4EC5LL * (a1[1] - *a1);
  if (v21 == 1)
  {
    uint64_t v24 = *v20;
    if (*v20)
    {
      unsigned int v184 = (*(uint64_t (**)(uint64_t, void))(*(void *)v24 + 88LL))(v24, 0LL);
      uint64_t v183 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 88LL))(v24, 1LL);
      goto LABEL_29;
    }
  }

  else if (v21 == 2)
  {
    uint64_t v22 = v20[13];
    if (*v20) {
      BOOL v23 = v22 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23)
    {
      unsigned int v184 = (*(uint64_t (**)(uint64_t, void))(*(void *)*v20 + 88LL))(*v20, 0LL);
      uint64_t v183 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 88LL))(v22, 1LL);
      goto LABEL_29;
    }
  }

  else
  {
    unint64_t v25 = (os_log_t *)sub_138E8(16);
    unint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = 0x4EC4EC4EC4EC4EC5LL * (a1[1] - *a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 211;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&buf[20] = v27;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Incorrect # (%lu) of PhysicalDevices in list",  buf,  0x1Cu);
    }
  }

  unsigned int v184 = 0;
  uint64_t v183 = 0LL;
LABEL_29:
  v182 = (os_unfair_lock_s *)v206[0];
  uint64_t v28 = *(void *)(a2 + 40);
  if (!v28)
  {
    unsigned int v30 = 0;
LABEL_38:
    unsigned int v33 = 64;
    goto LABEL_39;
  }

  uint64_t v29 = sub_2D10E8(v28, *(unsigned int *)(a6 + 16));
  if ((v29 & 0xFF00000000LL) != 0) {
    unsigned int v30 = v29;
  }
  else {
    unsigned int v30 = 0;
  }
  uint64_t v31 = *(void *)(a2 + 40);
  if (!v31) {
    goto LABEL_38;
  }
  uint64_t v32 = sub_2D129C(v31, *(unsigned int *)(a6 + 16));
  if ((v32 & 0xFF00000000LL) != 0) {
    unsigned int v33 = v32;
  }
  else {
    unsigned int v33 = 64;
  }
LABEL_39:
  int v34 = *(_DWORD *)(a6 + 16);
  int v35 = 1;
  if (v34 <= 1987077986)
  {
    if (v34 != 1768057203)
    {
      int v36 = 1919776355;
LABEL_45:
      if (v34 != v36) {
        int v35 = 0;
      }
    }
  }

  else if (v34 != 1987077987 && v34 != 1987081833)
  {
    int v36 = 1987081839;
    goto LABEL_45;
  }

  char v37 = 1;
  if (v34 != 1986556788 && v34 != 1987208039) {
    char v37 = v34 == 1987211117;
  }
  uint64_t v38 = *(void *)(a6 + 28);
  int v39 = sub_1FEC80((_DWORD *)a2, v37);
  DWORD1(v203) = sub_2877F0( (uint64_t)&v204,  (int *)a2,  v184 | (unint64_t)(v183 << 32),  v182,  v30,  v33,  1,  v35,  (uint64_t)__dst,  v38,  v39);
  *((void *)&v203 + 1) = sub_2895AC( DWORD1(v203),  (OSStatus (__cdecl *)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))sub_2B57C8,  v13);
  WORD4(v205) = v188;
  if (&v206[1] != a8) {
    sub_52A24((uint64_t)&v206[1], *a8, a8 + 1);
  }
  sub_2B2E10((uint64_t)v13, (__int128 *)v201.i8, v186);
  if (v213 && v212 < 0) {
    operator delete(__p);
  }
  if (v210 && v209 < 0) {
    operator delete(v208);
  }
  sub_32C8C(v207[0]);
  sub_AB45C((uint64_t *)&v204);
  *int v13 = off_47B0F8;
  unsigned int v189 = *(_DWORD *)(a6 + 16);
  uint64_t v40 = *(void *)(a6 + 20);
  v207[0] = 0LL;
  __int128 v205 = 0u;
  *(_OWORD *)v206 = 0u;
  __int128 v203 = 0u;
  __int128 v204 = 0u;
  memset(v202, 0, sizeof(v202));
  int64x2_t v201 = 0u;
  unint64_t v41 = *a1;
  v179 = a1[1];
  if (*a1 == v179)
  {
    v176 = (os_log_t *)sub_138E8(13);
    v177 = *v176;
    if (*v176 && os_log_type_enabled(*v176, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 97;
      _os_log_impl(&dword_0, v177, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    v178 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v178, "Precondition failure.");
  }

  uint64_t v187 = v40;
  uint64_t v192 = v40 & 0xFF00000000LL;
  BOOL v180 = (v40 & 0xFF00000000LL) != 0;
  do
  {
    uint64_t v42 = sub_138E8(16);
    if ((*(_BYTE *)(v42 + 8) & 1) != 0)
    {
      unint64_t v43 = *(os_log_s **)v42;
      if (*(void *)v42)
      {
        if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
        {
          sub_1D4C48(&v217, (uint64_t)v41);
          uint64_t v44 = &v217;
          if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v44 = (std::string *)v217.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 100;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v44;
          _os_log_impl(&dword_0, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Streams for %s", buf, 0x1Cu);
        }
      }
    }

    if (v41[2] != v41[1])
    {
      unint64_t v45 = 0LL;
      uint64_t v46 = 0LL;
      while (1)
      {
        uint64_t v47 = sub_138E8(16);
        if ((*(_BYTE *)(v47 + 8) & 1) != 0)
        {
          unint64_t v48 = *(os_log_s **)v47;
          if (*(void *)v47)
          {
            if (os_log_type_enabled(*(os_log_t *)v47, OS_LOG_TYPE_DEBUG))
            {
              sub_1840C0(&v217, *(void *)(v41[1] + 24 * v45 + 8), v41[1] + 24 * v45);
              uint64_t v49 = &v217;
              if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v49 = (std::string *)v217.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 104;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v49;
              _os_log_impl(&dword_0, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Associated Input Ports %s", buf, 0x1Cu);
            }
          }
        }

        if (0xAAAAAAAAAAAAAAABLL * ((v41[5] - v41[4]) >> 3) > v45)
        {
          uint64_t v50 = sub_138E8(16);
          if ((*(_BYTE *)(v50 + 8) & 1) != 0)
          {
            uint64_t v51 = *(os_log_s **)v50;
            if (*(void *)v50)
            {
              if (os_log_type_enabled(*(os_log_t *)v50, OS_LOG_TYPE_DEBUG))
              {
                sub_1840C0(&v217, *(void *)(v41[4] + 24 * v45 + 8), v41[4] + 24 * v45);
                unint64_t v52 = &v217;
                if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  unint64_t v52 = (std::string *)v217.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 107;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v52;
                _os_log_impl(&dword_0, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Associated Output Ports %s", buf, 0x1Cu);
              }
            }
          }
        }

        uint64_t v53 = *v41;
        if (!*(void *)(v41[1] + 24 * v45 + 16)) {
          break;
        }
        if (!sub_1D5354(v53) || (*v185 & 0xFFFFFFFD) != 1 || (_DWORD)v46)
        {
          uint64_t v64 = sub_28153C((uint64_t)v13, v189, a3, 0LL, v46, v41, (unsigned int *)a2);
          sub_2A4CCC(&v216, v64);
          uint64_t v65 = v201.i64[1];
          if (v201.i64[1] >= *(void *)&v202[0])
          {
            uint64_t v84 = (v201.i64[1] - v201.i64[0]) >> 4;
            unint64_t v85 = v84 + 1;
            uint64_t v86 = *(void *)&v202[0] - v201.i64[0];
            if ((*(void *)&v202[0] - v201.i64[0]) >> 3 > v85) {
              unint64_t v85 = v86 >> 3;
            }
            else {
              unint64_t v87 = v85;
            }
            *(void *)&_BYTE buf[32] = v202;
            unint64_t v88 = (char *)sub_7BE90(v87);
            uint64_t v90 = &v88[16 * v84];
            uint64_t v91 = *((void *)&v216 + 1);
            *(_OWORD *)uint64_t v90 = v216;
            if (v91)
            {
              int v92 = (unint64_t *)(v91 + 8);
              do
                unint64_t v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }

            uint64_t v94 = (void *)v201.i64[1];
            int v95 = (void *)v201.i64[0];
            if (v201.i64[1] == v201.i64[0])
            {
              int64x2_t v98 = vdupq_n_s64(v201.u64[1]);
              uint64_t v96 = &v88[16 * v84];
            }

            else
            {
              uint64_t v96 = &v88[16 * v84];
              do
              {
                __int128 v97 = *((_OWORD *)v94 - 1);
                v94 -= 2;
                *((_OWORD *)v96 - 1) = v97;
                v96 -= 16;
                *uint64_t v94 = 0LL;
                v94[1] = 0LL;
              }

              while (v94 != v95);
              int64x2_t v98 = v201;
            }

            uint64_t v69 = v90 + 16;
            v201.i64[0] = (uint64_t)v96;
            v201.i64[1] = (uint64_t)(v90 + 16);
            *(int64x2_t *)&buf[8] = v98;
            uint64_t v105 = *(void *)&v202[0];
            *(void *)&v202[0] = &v88[16 * v89];
            *(void *)&_BYTE buf[24] = v105;
            *(void *)AudioObjectPropertyAddress buf = v98.i64[0];
            sub_A0D64((uint64_t)buf);
          }

          else
          {
            *(void *)v201.i64[1] = v216;
            uint64_t v66 = *((void *)&v216 + 1);
            *(void *)(v65 + 8) = *((void *)&v216 + 1);
            if (v66)
            {
              uint64_t v67 = (unint64_t *)(v66 + 8);
              do
                unint64_t v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }

            uint64_t v69 = (_OWORD *)(v65 + 16);
          }

          v201.i64[1] = (uint64_t)v69;
          sub_2B1FE0((uint64_t)buf, *v41, (((unint64_t)v69 - v201.i64[0]) >> 4) - 1);
          sub_2A4D2C((void **)&v203, (uint64_t)buf);
          uint64_t v106 = *(std::__shared_weak_count **)&buf[16];
          if (*(void *)&buf[16])
          {
            uint64_t v107 = (unint64_t *)(*(void *)&buf[16] + 8LL);
            do
              unint64_t v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }

          uint64_t v109 = sub_138E8(16);
          if ((*(_BYTE *)(v109 + 8) & 1) != 0)
          {
            unint64_t v110 = *(os_log_s **)v109;
            if (*(void *)v109)
            {
              if (os_log_type_enabled(*(os_log_t *)v109, OS_LOG_TYPE_DEBUG))
              {
                sub_23FE8((uint64_t)&v217, (os_unfair_lock_t)(*(void *)(v201.i64[1] - 16) + 8LL));
                int size = (char)v217.__r_.__value_.__s.__size_;
                std::string::size_type v112 = v217.__r_.__value_.__r.__words[0];
                sub_2B2B1C(&v215, *((void *)&v203 + 1) - 32LL);
                BOOL v113 = &v217;
                if (size < 0) {
                  BOOL v113 = (std::string *)v112;
                }
                __int16 v114 = &v215;
                if ((v215.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  __int16 v114 = (std::string *)v215.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 129;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = v113;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v114;
                _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created Client Input Stream: %s with Underlying Stream: %s",  buf,  0x26u);
                int v13 = v181;
              }
            }
          }

          int v115 = (std::__shared_weak_count *)*((void *)&v216 + 1);
          if (*((void *)&v216 + 1))
          {
            uint64_t v116 = (unint64_t *)(*((void *)&v216 + 1) + 8LL);
            do
              unint64_t v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }

          goto LABEL_185;
        }

        uint64_t v54 = *v41;
        if (!(*(unsigned int (**)(uint64_t, void))(*(void *)*v41 + 88LL))(*v41, 0LL))
        {
          v170 = (os_log_t *)sub_138E8(13);
          UInt32 v171 = *v170;
          if (*v170 && os_log_type_enabled(*v170, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 116;
            _os_log_impl( &dword_0,  v171,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          __int128 v172 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v172, "Precondition failure.");
        }

        *(_DWORD *)AudioObjectPropertyAddress buf = -2;
        *(void *)&buf[8] = 0LL;
        *(void *)&buf[16] = 0LL;
        *(void *)&_BYTE buf[24] = v54;
        sub_2A4D2C((void **)&v203, (uint64_t)buf);
        uint64_t v55 = *(std::__shared_weak_count **)&buf[16];
        if (*(void *)&buf[16])
        {
          unint64_t v56 = (unint64_t *)(*(void *)&buf[16] + 8LL);
          do
            unint64_t v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }

        uint64_t v58 = sub_138E8(16);
        if ((*(_BYTE *)(v58 + 8) & 1) != 0)
        {
          os_log_t v59 = *(os_log_t *)v58;
          if (*(void *)v58)
          {
            if (os_log_type_enabled(*(os_log_t *)v58, OS_LOG_TYPE_DEBUG))
            {
              sub_2B2B1C(&v217, *((void *)&v203 + 1) - 32LL);
              unint64_t v60 = &v217;
              if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                unint64_t v60 = (std::string *)v217.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 119;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v60;
              unint64_t v61 = v59;
              uint64_t v62 = "%25s:%-5d Created hidden input stream: %s";
              uint32_t v63 = 28;
LABEL_160:
              _os_log_impl(&dword_0, v61, OS_LOG_TYPE_DEBUG, v62, buf, v63);
            }
          }
        }

void sub_2B9524( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
}

void sub_2B9534()
{
}

void sub_2B9540( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a61 && a60 < 0) {
    operator delete(__p);
  }
  sub_32C8C(a53);
  sub_AB45C(v61);
  operator delete(a16);
  JUMPOUT(0x2B9824LL);
}

void sub_2B9578()
{
}

void sub_2B9580( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, char a37)
{
  if (a37)
  {
    if (a36 < 0) {
      operator delete(__p);
    }
  }

  JUMPOUT(0x2B982CLL);
}

void sub_2B95A0()
{
}

void sub_2B95AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_2B95B8( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, int a45, unsigned int a46, OSStatus (__cdecl *a47)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a46)
    {
      sub_28976C(a46, a47);
    }

    else if (!a47)
    {
      uint64_t v49 = (os_log_t *)sub_138E8(13);
      uint64_t v50 = *v49;
      if (*v49)
      {
        if (os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)(v48 - 208) = 136315394;
          *(void *)(v47 + 4) = "AggregateDevice_Simple2.cpp";
          *(_WORD *)(v48 - 196) = 1024;
          *(_DWORD *)(v47 + 14) = 272;
          _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Somehow, we have a valid IO proc ID, but not a valid aggregate device ID.",  (uint8_t *)(v48 - 208),  0x12u);
        }
      }
    }

    sub_2893F4(a46);
    __cxa_rethrow();
  }

  JUMPOUT(0x2B982CLL);
}

void sub_2B9668()
{
}

void sub_2B9678(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0x2B982CLL);
}

void sub_2B968C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_2B96CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_2B9834(uint64_t a1, unsigned int *a2, unsigned int a3, double *a4, int a5)
{
  if (!a3)
  {
    int v77 = (os_log_t *)sub_138E8(13);
    std::string v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v105 = "PolicyMute.cpp";
      __int16 v106 = 1024;
      int v107 = 65;
      _os_log_impl(&dword_0, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((a5 - 1) >= 2)
  {
    if (a5)
    {
      if (a5 == 3)
      {
        unint64_t v7 = *a2;
        if ((_DWORD)v7)
        {
          unint64_t v8 = 0LL;
          uint64_t v9 = (void **)(a2 + 4);
          do
          {
            if (*v9)
            {
              bzero(*v9, *((unsigned int *)v9 - 1));
              unint64_t v7 = *a2;
            }

            ++v8;
            v9 += 2;
          }

          while (v8 < v7);
        }
      }

      else
      {
        unint64_t v25 = (os_log_t *)sub_138E8(13);
        unint64_t v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v105 = "PolicyMute.cpp";
          __int16 v106 = 1024;
          int v107 = 124;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected policy mute action",  buf,  0x12u);
        }
      }
    }

    return;
  }

  int v103 = 0;
  BOOL v102 = 0;
  if (v103 != 1)
  {
    if (v103 == 3)
    {
      int v27 = *((_DWORD *)a4 + 7);
      if (v102 || v27 == 1)
      {
        uint64_t v28 = *((void *)a2 + 2);
        if (!v28)
        {
          unsigned int v83 = (os_log_t *)sub_138E8(13);
          uint64_t v84 = *v83;
          if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 164;
            _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          unint64_t v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v85, "Precondition failure.");
        }

        if (!v27)
        {
          int v92 = (os_log_t *)sub_138E8(13);
          unint64_t v93 = *v92;
          if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 166;
            _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          uint64_t v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v94, "Precondition failure.");
        }

        double v29 = *a4;
        if (*a4 <= 0.0)
        {
          int v95 = (os_log_t *)sub_138E8(13);
          uint64_t v96 = *v95;
          if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 167;
            _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          __int128 v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v97, "Precondition failure.");
        }

        int v16 = 762342772;
        unsigned int v30 = (v29 * 0.03);
        if (v30 >= a3) {
          unsigned int v31 = a3;
        }
        else {
          unsigned int v31 = (v29 * 0.03);
        }
        signed int v32 = 0x1000000 / v31;
        int v33 = *(_DWORD *)(a1 + 4);
        if (v33 == 762342772) {
          signed int v32 = -v32;
        }
        unsigned int v34 = (v33 == 762342772) << 24;
        if (v27 == 1)
        {
          unint64_t v65 = v32 + (unint64_t)v34;
          unsigned int v66 = v31;
          uint64_t v67 = (int *)*((void *)a2 + 2);
          do
          {
            int *v67 = (v65 * *v67) >> 24;
            ++v67;
            v65 += v32;
            --v66;
          }

          while (v66);
        }

        else if (v27 == 2)
        {
          unint64_t v35 = v32 + (unint64_t)v34;
          unsigned int v36 = v31;
          char v37 = (int *)*((void *)a2 + 2);
          do
          {
            unint64_t v38 = (v35 * v37[1]) >> 24;
            int *v37 = (v35 * *v37) >> 24;
            v37[1] = v38;
            v37 += 2;
            v35 += v32;
            --v36;
          }

          while (v36);
        }

        else
        {
          int64x2_t v71 = (os_log_t *)sub_138E8(13);
          unint64_t v72 = *v71;
          if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 227;
            _os_log_impl( &dword_0,  v72,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected number of channels",  buf,  0x12u);
          }
        }

        if (v33 != 762342772) {
          goto LABEL_115;
        }
        int v16 = 728788340;
        if (v30 >= a3) {
          goto LABEL_115;
        }
        size_t v73 = 4 * v27 * (a3 - v31);
        os_log_t v74 = (void *)(v28 + 4LL * v31 * v27);
        goto LABEL_114;
      }
    }

    else if (v103 == 2)
    {
      int v13 = *((_DWORD *)a4 + 7);
      if (v102 || v13 == 1)
      {
        uint64_t v14 = *((void *)a2 + 2);
        if (!v14)
        {
          unint64_t v80 = (os_log_t *)sub_138E8(13);
          uint64_t v81 = *v80;
          if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 164;
            _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          os_log_t v82 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v82, "Precondition failure.");
        }

        if (!v13)
        {
          uint64_t v89 = (os_log_t *)sub_138E8(13);
          uint64_t v90 = *v89;
          if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 166;
            _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          uint64_t v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v91, "Precondition failure.");
        }

        double v15 = *a4;
        if (*a4 <= 0.0)
        {
          int64x2_t v98 = (os_log_t *)sub_138E8(13);
          uint64_t v99 = *v98;
          if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 167;
            _os_log_impl( &dword_0,  v99,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          unsigned int v100 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v100, "Precondition failure.");
        }

        int v16 = 762342772;
        unsigned int v17 = (v15 * 0.03);
        if (v17 >= a3) {
          unsigned int v18 = a3;
        }
        else {
          unsigned int v18 = (v15 * 0.03);
        }
        LODWORD(v19) = 0x8000 / v18;
        int v20 = *(_DWORD *)(a1 + 4);
        if (v20 == 762342772) {
          uint64_t v19 = -(int)v19;
        }
        else {
          uint64_t v19 = v19;
        }
        uint64_t v21 = (v20 == 762342772) << 15;
        if (v13 == 1)
        {
          uint64_t v68 = v21 + v19;
          unsigned int v69 = v18;
          __int128 v70 = (__int16 *)*((void *)a2 + 2);
          do
          {
            __int16 *v70 = (v68 * *v70) >> 15;
            ++v70;
            v68 += v19;
            --v69;
          }

          while (v69);
        }

        else if (v13 == 2)
        {
          uint64_t v22 = v21 + v19;
          unsigned int v23 = v18;
          uint64_t v24 = (__int16 *)*((void *)a2 + 2);
          do
          {
            __int16 *v24 = (v22 * *v24) >> 15;
            v24[1] = (v22 * v24[1]) >> 15;
            v22 += v19;
            v24 += 2;
            --v23;
          }

          while (v23);
        }

        else
        {
          uint64_t v75 = (os_log_t *)sub_138E8(13);
          uint64_t v76 = *v75;
          if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 227;
            _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected number of channels",  buf,  0x12u);
          }
        }

        if (v20 != 762342772) {
          goto LABEL_115;
        }
        int v16 = 728788340;
        if (v17 >= a3) {
          goto LABEL_115;
        }
        size_t v73 = 2 * v13 * (a3 - v18);
        os_log_t v74 = (void *)(v14 + 2LL * v18 * v13);
LABEL_114:
        bzero(v74, v73);
LABEL_115:
        *(_DWORD *)(a1 + 4) = v16;
        return;
      }
    }

    goto LABEL_51;
  }

  if (v102 && *((_DWORD *)a4 + 7) != 1)
  {
LABEL_51:
    int v39 = (os_log_t *)sub_138E8(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CC00(&__p, (uint64_t)a4);
      unint64_t v41 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v105 = "PolicyMute.cpp";
      __int16 v106 = 1024;
      int v107 = 98;
      __int16 v108 = 2080;
      uint64_t v109 = v41;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Policy mute ramping unsupported for given stream format: %s",  buf,  0x1Cu);
    }

void sub_2BA430(_Unwind_Exception *a1)
{
}

std::string *sub_2BA470@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_7D084(&v11, __str);
  uint64_t v4 = std::string::insert(&v11, 0LL, "addr: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v12, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_2BA5C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

float sub_2BA640(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  float result = 0.0;
  if (v1 != 1935895666)
  {
    if (v1 != 1684234860)
    {
      uint64_t v4 = (os_log_t *)sub_138E8(13);
      __int128 v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v6 = *(_DWORD *)(a1 + 96);
          int v8 = 136315650;
          std::string::size_type v9 = "VolumeControl.cpp";
          __int16 v10 = 1024;
          int v11 = 158;
          __int16 v12 = 1024;
          int v13 = v6;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered an invalid volume unit type: %d",  (uint8_t *)&v8,  0x18u);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }

    return -90.0;
  }

  return result;
}

void sub_2BA76C(_Unwind_Exception *exception_object)
{
}

float sub_2BA788(uint64_t a1, int a2)
{
  float result = 0.0;
  if (a2 != 1935895666)
  {
    if (a2 != 1684234860)
    {
      uint64_t v4 = (os_log_t *)sub_138E8(13);
      __int128 v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v7 = 136315650;
          int v8 = "VolumeControl.cpp";
          __int16 v9 = 1024;
          int v10 = 178;
          __int16 v11 = 1024;
          int v12 = a2;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered an invalid volume unit type: %d",  (uint8_t *)&v7,  0x18u);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }

    return -120.0;
  }

  return result;
}

void sub_2BA8AC(_Unwind_Exception *exception_object)
{
}

void sub_2BA8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 104);
  unint64_t v3 = (void *)(a1 + 112);
  if ((void *)(a1 + 112) != v2)
  {
    uint64_t v4 = a2;
    if ((_DWORD)a2) {
      __int128 v5 = "Enabling";
    }
    else {
      __int128 v5 = "Disabling";
    }
    int v52 = a2 ^ 1;
    int v51 = v5;
    unsigned int v50 = a2;
    do
    {
      unsigned int v63 = 0;
      sub_654FC();
      (*(void (**)(uint64_t *, void, unsigned int *))(qword_4913D0 + 48))( &qword_4913D0,  *((unsigned int *)v2 + 14),  &v63);
      if (v63 != 1685287015 || !v2[6])
      {
        uint64_t v13 = sub_138E8(18);
        uint64_t v14 = sub_138E8(38);
        char v15 = 0;
        uint64_t v16 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v17 = *(void *)(v13 + 8);
        while (1)
        {
          uint64_t v18 = *(int *)&buf[4 * v16];
          char v19 = v15;
          if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
            break;
          }
          char v15 = 1;
          uint64_t v16 = 1LL;
          if ((v19 & 1) != 0) {
            goto LABEL_18;
          }
        }

        if ((v17 & v18) == 0) {
          uint64_t v13 = v14;
        }
LABEL_18:
        int v20 = *(os_log_s **)v13;
        if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *((_DWORD *)v2 + 14);
          sub_2CA1C(&__dst, v63);
          int v22 = SHIBYTE(v62);
          unsigned int v23 = (void **)__dst;
          sub_665BC((uint64_t)__p, a1);
          p_dst = &__dst;
          if (v22 < 0) {
            p_dst = v23;
          }
          unint64_t v25 = __p;
          if (v59 < 0) {
            unint64_t v25 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
          *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 218;
          __int16 v65 = 2080;
          unsigned int v66 = v51;
          __int16 v67 = 1024;
          int v68 = v21;
          __int16 v69 = 2080;
          __int128 v70 = p_dst;
          __int16 v71 = 2080;
          unint64_t v72 = v25;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d %s software volume processor with ID %u and type %s on chain '%s'.",  buf,  0x36u);
          if (v59 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v62) < 0) {
            operator delete(__dst);
          }
        }

        sub_654FC();
        (*(void (**)(uint64_t *, void, uint64_t))(qword_4913D0 + 88))( &qword_4913D0,  *((unsigned int *)v2 + 14),  v4);
        goto LABEL_68;
      }

      uint64_t v6 = sub_138E8(18);
      uint64_t v7 = sub_138E8(38);
      char v8 = 0;
      uint64_t v9 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v10 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v11 = *(int *)&buf[4 * v9];
        char v12 = v8;
        if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
          break;
        }
        char v8 = 1;
        uint64_t v9 = 1LL;
        if ((v12 & 1) != 0) {
          goto LABEL_31;
        }
      }

      if ((v10 & v11) == 0) {
        uint64_t v6 = v7;
      }
LABEL_31:
      unint64_t v26 = *(os_log_s **)v6;
      if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = *((_DWORD *)v2 + 14);
        sub_2CA1C(&__dst, v63);
        int v28 = SHIBYTE(v62);
        double v29 = (void **)__dst;
        unsigned int v30 = (void **)v2[5];
        sub_665BC((uint64_t)__p, a1);
        unsigned int v31 = &__dst;
        if (v28 < 0) {
          unsigned int v31 = v29;
        }
        signed int v32 = __p;
        if (v59 < 0) {
          signed int v32 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 199;
        __int16 v65 = 2080;
        unsigned int v66 = v51;
        __int16 v67 = 1024;
        int v68 = v27;
        __int16 v69 = 2080;
        __int128 v70 = v31;
        __int16 v71 = 2080;
        unint64_t v72 = v30;
        __int16 v73 = 2080;
        os_log_t v74 = v32;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d %s software volume processor with ID %u and type %s (box name %s) on chain '%s'.",  buf,  0x40u);
        if (v59 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v4 = v50;
        if (SHIBYTE(v62) < 0) {
          operator delete(__dst);
        }
      }

      *(_DWORD *)bytes = v52;
      size_t v33 = v2[6];
      if (v33 >= 0x7FFFFFFFFFFFFFF8LL) {
        sub_7D1D4();
      }
      unsigned int v34 = (const void *)v2[5];
      if (v33 >= 0x17)
      {
        uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8LL) + 8;
        if ((v33 | 7) != 0x17) {
          uint64_t v36 = v33 | 7;
        }
        uint64_t v37 = v36 + 1;
        unint64_t v35 = operator new(v36 + 1);
        size_t v61 = v33;
        int64_t v62 = v37 | 0x8000000000000000LL;
        __dst = v35;
        uint64_t v4 = v50;
      }

      else
      {
        HIBYTE(v62) = v2[6];
        unint64_t v35 = &__dst;
        if (!v33) {
          goto LABEL_49;
        }
      }

      memmove(v35, v34, v33);
LABEL_49:
      *((_BYTE *)v35 + v33) = 0;
      sub_59370((CFStringRef *)buf, "AUName");
      if (v62 >= 0) {
        unint64_t v38 = (const UInt8 *)&__dst;
      }
      else {
        unint64_t v38 = (const UInt8 *)__dst;
      }
      if (v62 >= 0) {
        CFIndex v39 = HIBYTE(v62);
      }
      else {
        CFIndex v39 = v61;
      }
      *(void *)&buf[8] = CFStringCreateWithBytes(0LL, v38, v39, 0x8000100u, 0);
      if (!*(void *)&buf[8])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }

      int v55 = 21;
      sub_145854((uint64_t)&buf[16], "ID", &v55);
      CFDataRef v40 = CFDataCreate(0LL, bytes, 4LL);
      if (!v40)
      {
        uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v48, "Could not construct");
      }

      sub_14591C(&cf, v40);
      sub_1459C8((uint64_t)&v68 + 2, "data", &cf);
      __p[0] = buf;
      __p[1] = &dword_0 + 3;
      CFDictionaryRef v41 = sub_5A950((uint64_t)__p);
      uint64_t v42 = 0LL;
      CFDictionaryRef v56 = v41;
      do
      {
        unint64_t v43 = *(void ***)((char *)&(&v70)[v42] + 4);
        if (v43) {
          CFRelease(v43);
        }
        unint64_t v44 = *(const void **)((char *)&v68 + v42 * 8 + 2);
        if (v44) {
          CFRelease(v44);
        }
        v42 -= 2LL;
      }

      while (v42 != -6);
      if (cf) {
        CFRelease(cf);
      }
      if (SHIBYTE(v62) < 0) {
        operator delete(__dst);
      }
      *(void *)AudioObjectPropertyAddress buf = v41;
      sub_654FC();
      (*(void (**)(uint64_t *, void, uint64_t, _BYTE *, uint64_t))(qword_4913D0 + 72))( &qword_4913D0,  *((unsigned int *)v2 + 14),  1652060274LL,  buf,  8LL);
      CFRelease(v41);
LABEL_68:
      unint64_t v45 = (void *)v2[1];
      if (v45)
      {
        do
        {
          int v46 = v45;
          unint64_t v45 = (void *)*v45;
        }

        while (v45);
      }

      else
      {
        do
        {
          int v46 = (void *)v2[2];
          BOOL v47 = *v46 == (void)v2;
          uint64_t v2 = v46;
        }

        while (!v47);
      }

      uint64_t v2 = v46;
    }

    while (v3 != v46);
  }

void sub_2BAF14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32, CFTypeRef cf)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BB064(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
}

uint64_t *sub_2BB070(uint64_t *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v11 = result + 14;
  uint64_t v10 = result[14];
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t *)v10;
        unsigned int v12 = *(_DWORD *)(v10 + 32);
        if (v12 <= a2) {
          break;
        }
LABEL_5:
        uint64_t v10 = *v11;
        uint64_t v13 = (uint64_t **)v11;
        if (!*v11) {
          goto LABEL_11;
        }
      }

      if (v12 == a2)
      {
        if (!*((_DWORD *)v11 + 9)) {
          return result;
        }
        goto LABEL_5;
      }

      if (v12 >= a2) {
        return result;
      }
      uint64_t v13 = (uint64_t **)(v11 + 1);
      uint64_t v10 = v11[1];
      if (!v10) {
        goto LABEL_11;
      }
    }
  }

  uint64_t v13 = (uint64_t **)(result + 14);
LABEL_11:
  uint64_t v14 = operator new(0x40uLL);
  v14[8] = a2;
  v14[9] = 0;
  *((void *)v14 + 5) = a4;
  *((void *)v14 + 6) = a5;
  v14[14] = a3;
  *(void *)uint64_t v14 = 0LL;
  *((void *)v14 + 1) = 0LL;
  *((void *)v14 + 2) = v11;
  *uint64_t v13 = (uint64_t *)v14;
  uint64_t v15 = *(void *)v9[13];
  if (v15)
  {
    v9[13] = v15;
    uint64_t v16 = *v13;
  }

  else
  {
    uint64_t v16 = (uint64_t *)v14;
  }

  float result = sub_7A420((uint64_t *)v9[14], v16);
  ++v9[15];
  return result;
}

void sub_2BB158(uint64_t a1)
{
  int v1 = (void *)(a1 + 112);
  sub_32C8C(*(void **)(a1 + 112));
  *(v1 - 1) = v1;
  void *v1 = 0LL;
  v1[1] = 0LL;
}

void sub_2BB184(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        uint64_t v6 = (os_log_s *)*(id *)sub_138E8(24);
        uint64_t v7 = v6;
        if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(unsigned __int8 *)(v5 + 392);
          uint64_t v9 = "Y";
          int v20 = "DSPChain.mm";
          int v10 = *(unsigned __int8 *)(v5 + 796);
          if (v8) {
            uint64_t v11 = "Y";
          }
          else {
            uint64_t v11 = "N";
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          __int16 v21 = 1024;
          if (!v10) {
            uint64_t v9 = "N";
          }
          int v22 = 2955;
          __int16 v23 = 2080;
          uint64_t v24 = v11;
          __int16 v25 = 2080;
          unint64_t v26 = v9;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : reconfiguring volume: initialized %s, hasAUSPL %s",  buf,  0x26u);
        }

        if (*(_BYTE *)(v5 + 392) && *(_BYTE *)(v5 + 796))
        {
          CFTypeRef cf = 0LL;
          float v17 = 0.0;
          sub_19273C(v5, &cf, &v17);
          if (*(void *)(v5 + 736) != 561211748LL) {
            sub_192A74((void *)v5, (const __CFDictionary *)cf, v17);
          }
          if (cf) {
            CFRelease(cf);
          }
          unsigned int v12 = (os_log_s *)*(id *)sub_138E8(24);
          uint64_t v13 = v12;
          if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = *(const char **)(v5 + 736);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v20 = "DSPChain.mm";
            __int16 v21 = 1024;
            int v22 = 2974;
            __int16 v23 = 2048;
            uint64_t v24 = v14;
            _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Volume Reconfigured for ADAM session: %llu",  buf,  0x1Cu);
          }
        }
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_2BB3EC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2BB408(uint64_t a1)
{
  *(void *)a1 = off_47B570;
  unint64_t v3 = (void **)(a1 + 128);
  sub_D7DB0(&v3);
  return sub_2BC604(a1);
}

void sub_2BB44C(uint64_t a1)
{
  *(void *)a1 = off_47B570;
  unint64_t v3 = (void **)(a1 + 128);
  sub_D7DB0(&v3);
  uint64_t v2 = (void *)sub_2BC604(a1);
  operator delete(v2);
}

void sub_2BB494(uint64_t a1, float a2)
{
  uint64_t v4 = (os_log_t *)sub_138E8(18);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3;
    int v10 = 136315906;
    uint64_t v11 = "VolumeControl.cpp";
    __int16 v12 = 1024;
    int v13 = 464;
    __int16 v14 = 2048;
    double v15 = a2;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set volume: %.2f, %lu", (uint8_t *)&v10, 0x26u);
  }

  int v8 = *(uint64_t **)(a1 + 128);
  uint64_t v7 = *(uint64_t **)(a1 + 136);
  while (v8 != v7)
  {
    uint64_t v9 = *v8++;
    (*(void (**)(uint64_t, float))(*(void *)v9 + 16LL))(v9, a2);
  }

uint64_t sub_2BB5A4(uint64_t result, float a2, float a3)
{
  unint64_t v3 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v3 != i;
        float result = (*(uint64_t (**)(uint64_t, float, float))(*(void *)v7 + 24LL))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }

  return result;
}

uint64_t sub_2BB5F8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        float result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BB644(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "VolumeControl.cpp";
      __int16 v11 = 1024;
      int v12 = 477;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 40LL))(*(void *)(v3 - 8));
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8LL;
  }

  while (!v5);
  return result;
}

void sub_2BB764(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2BB780(uint64_t a1, float a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  uint64_t v3 = *(void **)(a1 + 136);
  if (v2 == v3)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        int v10 = "VolumeControl.cpp";
        __int16 v11 = 1024;
        int v12 = 487;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v2 + 40LL))(*v2);
    if ((_DWORD)result) {
      break;
    }
    if (++v2 == v3) {
      return result;
    }
  }

  return (*(uint64_t (**)(float))(*(void *)*v2 + 48LL))(a2);
}

void sub_2BB8E4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2BB900(uint64_t a1, float a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  uint64_t v3 = *(void **)(a1 + 136);
  if (v2 == v3)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        int v10 = "VolumeControl.cpp";
        __int16 v11 = 1024;
        int v12 = 500;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v2 + 40LL))(*v2);
    if ((_DWORD)result) {
      break;
    }
    if (++v2 == v3) {
      return result;
    }
  }

  return (*(uint64_t (**)(float))(*(void *)*v2 + 56LL))(a2);
}

void sub_2BBA64(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2BBA80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 80LL))(*(void *)(v3 - 8));
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8LL;
  }

  while (!v5);
  return result;
}

uint64_t sub_2BBAD4(uint64_t result, float a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)v5 + 88LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BBB20(uint64_t result, float a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)v5 + 96LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BBB6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1 == *(void *)(a1 + 136))
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "VolumeControl.cpp";
      __int16 v11 = 1024;
      int v12 = 589;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_BYTE *)(a1 + 160))
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "VolumeControl.cpp";
      __int16 v11 = 1024;
      int v12 = 590;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): AggregateVolumeCommand has mixed volume unit types, min volume cannot be queried",  (uint8_t *)&v9,  0x12u);
    }

    int v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v8,  "AggregateVolumeCommand has mixed volume unit types, min volume cannot be queried");
  }

  return (*(uint64_t (**)(void))(**(void **)v1 + 120LL))();
}

void sub_2BBD18(_Unwind_Exception *a1)
{
}

uint64_t sub_2BBD38(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 144LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BBD84(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 152LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BBDD0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 160LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BBE1C(uint64_t a1)
{
  if (*(void *)(a1 + 128) == *(void *)(a1 + 136))
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "VolumeControl.cpp";
      __int16 v7 = 1024;
      int v8 = 629;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return *(unsigned __int8 *)(a1 + 160);
}

void sub_2BBF18(_Unwind_Exception *exception_object)
{
}

void sub_2BBF34(void *a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(18);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    int v8 = "VolumeControl.cpp";
    __int16 v9 = 1024;
    int v10 = 620;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d unMapping processors", (uint8_t *)&v7, 0x12u);
  }

  a1[19] = 0LL;
  int v5 = (uint64_t *)a1[16];
  uint64_t v4 = (uint64_t *)a1[17];
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    (*(void (**)(uint64_t))(*(void *)v6 + 184LL))(v6);
  }

uint64_t sub_2BC014(uint64_t result, float a2, float a3)
{
  uint64_t v3 = *(void **)(result + 128);
  uint64_t v4 = *(void **)(result + 136);
  if (v3 != v4)
  {
    while (1)
    {
      int v7 = (*(uint64_t (**)(void))(*(void *)*v3 + 136LL))(*v3);
      uint64_t v9 = *v3;
      if (v7 == 1935895666) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 136LL))(v9);
      if ((_DWORD)result == 1684234860)
      {
        uint64_t v9 = *v3;
        v8.n128_f32[0] = a2;
        goto LABEL_6;
      }

uint64_t sub_2BC0BC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 128);
  uint64_t v2 = *(void **)(a1 + 136);
  if (v1 == v2) {
    return 0LL;
  }
  while (1)
  {
    (*(void (**)(void))(*(void *)*v1 + 216LL))(*v1);
    if (v4) {
      break;
    }
    if (++v1 == v2)
    {
      uint64_t v1 = v2;
      break;
    }
  }

  if (v1 == *(void **)(a1 + 136)) {
    return 0LL;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)*v1 + 216LL))(*v1);
  }
}

uint64_t sub_2BC13C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 224LL))(*(void *)(v3 - 8));
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8LL;
  }

  while (!v5);
  return result;
}

uint64_t sub_2BC190(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 232LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BC1DC(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 128);
  uint64_t v2 = *(uint64_t **)(result + 136);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 240LL))(v3);
  }

  return result;
}

uint64_t sub_2BC214(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 248LL))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }

  return result;
}

uint64_t sub_2BC260(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v7 + 256LL))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }

  return result;
}

uint64_t sub_2BC2BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 264LL))(*(void *)(v3 - 8));
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8LL;
  }

  while (!v5);
  return result;
}

uint64_t sub_2BC310(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 272LL))(*(void *)(v3 - 8));
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8LL;
  }

  while (!v5);
  return result;
}

float sub_2BC364(uint64_t a1, float a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  uint64_t v3 = *(void **)(a1 + 136);
  if (v2 == v3) {
    goto LABEL_7;
  }
  while (((*(uint64_t (**)(void))(*(void *)*v2 + 272LL))(*v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }

  if (v2 == *(void **)(a1 + 136))
  {
LABEL_7:
    uint64_t v7 = (os_log_t *)sub_138E8(18);
    __n128 v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        int v10 = "VolumeControl.cpp";
        __int16 v11 = 1024;
        int v12 = 703;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d No volume command supports dB to Scalar convertion.",  (uint8_t *)&v9,  0x12u);
      }
    }

    return 0.0;
  }

  else
  {
    (*(void (**)(float))(*(void *)*v2 + 280LL))(a2);
  }

  return result;
}

float sub_2BC4B4(uint64_t a1, float a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  uint64_t v3 = *(void **)(a1 + 136);
  if (v2 == v3) {
    goto LABEL_7;
  }
  while (((*(uint64_t (**)(void))(*(void *)*v2 + 272LL))(*v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }

  if (v2 == *(void **)(a1 + 136))
  {
LABEL_7:
    uint64_t v7 = (os_log_t *)sub_138E8(18);
    __n128 v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        int v10 = "VolumeControl.cpp";
        __int16 v11 = 1024;
        int v12 = 716;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d No volume command supports Scalar to dB convertion.",  (uint8_t *)&v9,  0x12u);
      }
    }

    return 0.0;
  }

  else
  {
    (*(void (**)(float))(*(void *)*v2 + 288LL))(a2);
  }

  return result;
}

uint64_t sub_2BC604(uint64_t a1)
{
  *(void *)a1 = off_47B438;
  sub_32C8C(*(void **)(a1 + 112));
  if (*(_BYTE *)(a1 + 88)) {
    sub_32C8C(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_2BC660(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_47B350;
  *(void *)(a1 + 80) = off_47B400;
  sub_CC160(a1);
  return a1;
}

void sub_2BC6B4(_Unwind_Exception *a1)
{
}

void **sub_2BC6C8(void *a1)
{
  __int16 v11 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      char v4 = (void *)*a1;
      if (*a1)
      {
        BOOL v5 = (unsigned int *)(a1 + 2);
LABEL_11:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          unint64_t v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }

        return sub_ADC0C(&v11);
      }
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  uint64_t v6 = (os_log_t *)sub_138E8(18);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    int v13 = "VolumeControl.cpp";
    __int16 v14 = 1024;
    int v15 = 59;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Skipped notifying audio object property listener relay, since it may be destructed.",  buf,  0x12u);
  }

  if (v3) {
    goto LABEL_11;
  }
  return sub_ADC0C(&v11);
}

void sub_2BC810( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    unint64_t v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  if (a2 == 3)
  {
    __int16 v21 = __cxa_begin_catch(a1);
    int v22 = (os_log_t *)sub_138E8(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v24;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 98;
      __int16 v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v26 = v23;
      uint32_t v27 = 40;
LABEL_17:
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }

  else
  {
    int v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      double v29 = v28;
      unsigned int v30 = (os_log_t *)sub_138E8(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16LL))(v29);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v32;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 98;
        __int16 v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_17;
      }
    }

    else
    {
      size_t v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 98;
        __int16 v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_17;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2BC7D8LL);
}

uint64_t sub_2BCA9C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1986290211;
  double v29 = (const char *)__PAIR64__(a3, a2);
  if ((*(unsigned int (**)(uint64_t, uint8_t *))(*(void *)a1 + 16LL))(a1, buf))
  {
    v24[2] = a3;
    int v25 = 16;
    v24[0] = 1986290211;
    v24[1] = a2;
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, void ***))(*(void *)a1 + 40LL))( a1,  v24,  0LL,  0LL,  &v25,  &v26);
    uint64_t result = sub_138E8(20);
    uint64_t v7 = *(os_log_s **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)result)
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
        sub_48E98(v22, theString[0]);
        int v8 = v23;
        unint64_t v9 = (void **)v22[0];
        __int16 v11 = v26;
        uint64_t v10 = v27;
        sub_2CA1C(__p, a2);
        int v12 = v22;
        if (v8 < 0) {
          int v12 = v9;
        }
        int v13 = (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        if (v20 >= 0) {
          int v13 = __p;
        }
        double v29 = "VolumeControl.cpp";
        __int16 v30 = 1024;
        int v31 = 96;
        __int16 v32 = 2080;
        size_t v33 = v12;
        __int16 v34 = 2048;
        unint64_t v35 = v11;
        __int16 v36 = 2048;
        uint64_t v37 = v10;
        __int16 v38 = 2080;
        CFIndex v39 = v13;
        __int16 v40 = 1024;
        unsigned int v41 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device %s, hardware volume range: %f %f [%s/%u]",  buf,  0x40u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        return sub_19DFC((uint64_t)theString);
      }
    }
  }

  else
  {
    uint64_t result = sub_138E8(20);
    __int16 v14 = *(os_log_s **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)result)
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
        sub_48E98(v22, theString[0]);
        int v15 = v23;
        __int16 v16 = (void **)v22[0];
        sub_2CA1C(__p, a2);
        uint64_t v17 = v22;
        if (v15 < 0) {
          uint64_t v17 = v16;
        }
        if (v20 >= 0) {
          uint64_t v18 = __p;
        }
        else {
          uint64_t v18 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        double v29 = "VolumeControl.cpp";
        __int16 v30 = 1024;
        int v31 = 101;
        __int16 v32 = 2080;
        size_t v33 = v17;
        __int16 v34 = 2080;
        unint64_t v35 = v18;
        __int16 v36 = 1024;
        LODWORD(v37) = a3;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device %s does not support hardware volume range property [%s/%u]",  buf,  0x2Cu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        return sub_19DFC((uint64_t)theString);
      }
    }
  }

  return result;
}

void sub_2BCDA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2BCDE4(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_47B438;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 24) = *a3;
  *(void *)(a1 + 32) = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 16);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_14285C(a1 + 40, a4);
  *(_DWORD *)(a1 + 96) = a2;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 104) = a1 + 112;
  return a1;
}

void sub_2BCE58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  char v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BCE7C(uint64_t a1, int a2, uint64_t a3, std::__shared_weak_count *a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  v9[0] = 0;
  char v11 = 0;
  sub_2BCDE4(a1, a2, v12, (uint64_t)v9);
  if (v11) {
    sub_32C8C(v10);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  return a1;
}

void sub_2BCEF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_32C8C(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2BCF20(uint64_t a1, unsigned int a2, unsigned int a3)
{
  BOOL v5 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  char v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *((_DWORD *)v4 + 8);
    if (v7 >= a2)
    {
      if (v7 == a2)
      {
        if (*((_DWORD *)v4 + 9) < a3) {
          ++v4;
        }
        else {
          uint64_t v6 = v4;
        }
      }

      else
      {
        uint64_t v6 = v4;
      }
    }

    else
    {
      ++v4;
    }

    char v4 = (uint64_t *)*v4;
  }

  while (v4);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v8 = *((_DWORD *)v6 + 8);
  if (v8 > a2 || v8 == a2 && *((_DWORD *)v6 + 9) > a3) {
    return v3;
  }
  return v6;
}

BOOL sub_2BCFA0(void *a1)
{
  if (a1 + 14 == sub_2BCF20((uint64_t)(a1 + 13), 0x64737067u, 0))
  {
    unint64_t v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, 1685287015LL);
      char v11 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 304;
      __int16 v16 = 2080;
      uint64_t v17 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): VolumeCommand: Software volume processor of type '%s' does not exist",  buf,  0x1Cu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }

  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  *(void *)&buf[8] = v3;
  if (!v3) {
    return 0LL;
  }
  char v4 = v3;
  *(void *)AudioObjectPropertyAddress buf = a1[3];
  if (*(void *)buf)
  {
    sub_654FC();
    BOOL v5 = (*(unsigned int (**)(void))(qword_4913D0 + 64))() == 0;
  }

  else
  {
    BOOL v5 = 0LL;
  }

  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    unint64_t v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

  return v5;
}

void sub_2BD19C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

BOOL sub_2BD1C8(void *a1, uint64_t a2)
{
  if (a1 + 14 == sub_2BCF20((uint64_t)(a1 + 13), a2, 0))
  {
    char v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      int v13 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 376;
      __int16 v18 = 2080;
      char v19 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): VolumeCommand: Software volume processor of type '%s' does not exist",  buf,  0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }

  char v4 = (std::__shared_weak_count *)a1[4];
  if (!v4) {
    return 0LL;
  }
  BOOL v5 = std::__shared_weak_count::lock(v4);
  *(void *)&buf[8] = v5;
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = v5;
  *(void *)AudioObjectPropertyAddress buf = a1[3];
  if (*(void *)buf)
  {
    sub_654FC();
    BOOL v7 = (*(unsigned int (**)(void))(qword_4913D0 + 80))() == 0;
  }

  else
  {
    BOOL v7 = 0LL;
  }

  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

  return v7;
}

void sub_2BD3C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_2BD3EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v65 = a4;
  uint64_t v6 = sub_2BCF20(a1 + 104, 0x64737067u, 0);
  if ((uint64_t *)(a1 + 112) == v6)
  {
    int v51 = (os_log_t *)sub_138E8(13);
    int v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v63, 1685287015LL);
      uint64_t v53 = v64 >= 0 ? v63 : (void **)v63[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v67 = 1024;
      int v68 = 394;
      __int16 v69 = 2080;
      __int128 v70 = v53;
      _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): VolumeCommand: Software volume processor of type '%s' does not exist",  buf,  0x1Cu);
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }

  BOOL v7 = v6;
  uint64_t v8 = sub_138E8(18);
  uint64_t v9 = sub_138E8(38);
  char v10 = 0;
  uint64_t v11 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1LL;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
LABEL_8:
  int v15 = *(os_log_s **)v8;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(v63, a2);
    uint64_t v16 = a2;
    if (v64 >= 0) {
      uint64_t v17 = v63;
    }
    else {
      uint64_t v17 = (void **)v63[0];
    }
    sub_2CA1C(v61, 1685287015LL);
    int v18 = v62;
    char v19 = (void **)v61[0];
    int v20 = *((_DWORD *)v7 + 14);
    sub_665BC((uint64_t)__p, a1);
    __int16 v21 = v61;
    if (v18 < 0) {
      __int16 v21 = v19;
    }
    if (v60 >= 0) {
      int v22 = __p;
    }
    else {
      int v22 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    __int16 v67 = 1024;
    int v68 = 398;
    __int16 v69 = 2080;
    __int128 v70 = v17;
    __int16 v71 = 2080;
    unint64_t v72 = v21;
    __int16 v73 = 1024;
    int v74 = v20;
    __int16 v75 = 2080;
    uint64_t v76 = v22;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VolumeCommand: Getting property '%s' on processor type '%s' index %u on chain '%s'.",  buf,  0x36u);
    if (v60 < 0) {
      operator delete(__p[0]);
    }
    a2 = v16;
    if (v62 < 0) {
      operator delete(v61[0]);
    }
    if (v64 < 0) {
      operator delete(v63[0]);
    }
  }

  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  char v23 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v23)
  {
    int v24 = 0LL;
    goto LABEL_33;
  }

  int v24 = std::__shared_weak_count::lock(v23);
  uint64_t v58 = v24;
  if (!v24 || (uint64_t v57 = *(void *)(a1 + 24)) == 0)
  {
LABEL_33:
    uint64_t v33 = sub_138E8(18);
    uint64_t v34 = sub_138E8(38);
    char v35 = 0;
    uint64_t v36 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v37 = *(void *)(v33 + 8);
    while (1)
    {
      uint64_t v38 = *(int *)&buf[4 * v36];
      char v39 = v35;
      if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
        break;
      }
      char v35 = 1;
      uint64_t v36 = 1LL;
      if ((v39 & 1) != 0) {
        goto LABEL_39;
      }
    }

    if ((v37 & v38) == 0) {
      uint64_t v33 = v34;
    }
LABEL_39:
    __int16 v40 = *(os_log_s **)v33;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v67 = 1024;
      int v68 = 414;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter",  buf,  0x12u);
    }

void sub_2BDA30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (v30 < 0) {
    operator delete(v29);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  sub_7A768((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2BDADC(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v2 = (void *)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }

  *(void *)(a1 + 40) = _D0;
  sub_32C8C(0LL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0LL;
  void *v2 = 0LL;
  LODWORD(v8) = -1032323072;
  sub_886F8(a1, 0, 858993458, v8, -21.0);
  LODWORD(v9) = -21.0;
  sub_886F8(a1, 858993458, 0x7FFFFFFF, v9, 0.0);
}

void sub_2BDB6C(_Unwind_Exception *a1)
{
}

uint64_t sub_2BDB80(float a1, float a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_49C9C0);
  if ((v3 & 1) == 0)
  {
    float v8 = a1;
    int v6 = __cxa_guard_acquire(&qword_49C9C0);
    a1 = v8;
    if (v6)
    {
      int v14 = 0;
      __int128 v10 = xmmword_402460;
      __int128 v11 = unk_402470;
      __int128 v12 = xmmword_402480;
      __int128 v13 = unk_402490;
      sub_2BDD20(&qword_49C9A8, &v10, 0x11uLL);
      __cxa_guard_release(&qword_49C9C0);
      a1 = v8;
    }
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_49C9E0);
  if ((v4 & 1) == 0)
  {
    float v9 = a1;
    int v7 = __cxa_guard_acquire(&qword_49C9E0);
    a1 = v9;
    if (v7)
    {
      int v14 = 1117782016;
      __int128 v10 = xmmword_4024A4;
      __int128 v11 = unk_4024B4;
      __int128 v12 = xmmword_4024C4;
      __int128 v13 = unk_4024D4;
      sub_2BDD20(&qword_49C9C8, &v10, 0x11uLL);
      __cxa_guard_release(&qword_49C9E0);
      a1 = v9;
    }
  }

  sub_2BDDA0(qword_49C9A8, *(uint64_t *)algn_49C9B0, a1);
  return sub_2BDDA0(qword_49C9C8, *(uint64_t *)algn_49C9D0, a2);
}

void sub_2BDCF0(_Unwind_Exception *a1)
{
}

void *sub_2BDD20(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_7A840(a1, a3);
    int v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }

  return a1;
}

void sub_2BDD84(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2BDDA0(uint64_t a1, uint64_t a2, float a3)
{
  if (a1 == a2)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int128 v10 = "StandardUtilities.h";
      __int16 v11 = 1024;
      int v12 = 1409;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unint64_t v3 = 0LL;
  unint64_t v4 = ((a2 - a1) >> 2) - 1;
  do
  {
    ++v3;
  }

  while (v3 <= v4);
  if (v3 >= v4) {
    return ((a2 - a1) >> 2) - 1;
  }
  else {
    return v3;
  }
}

void sub_2BDEC4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2BDEE0(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  return sub_F9108(a1);
}

void sub_2BDF14(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  uint64_t v2 = (void *)sub_F9108(a1);
  operator delete(v2);
}

uint64_t sub_2BDF4C()
{
  return 1LL;
}

BOOL sub_2BDF54(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = *a2;
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 144);
    BOOL v2 = v8 != 1885892706 && v8 != 1886216820;
  }

  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return v2;
    }
    return 0;
  }

  if (!v7) {
    return 0;
  }
  return v2;
}

BOOL sub_2BDFFC(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&__int128 v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000LL) != 0 && (_DWORD)v3 != 0;
}

uint64_t sub_2BE054(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  uint64_t v16 = 0x676C6F626C6E616DLL;
  int v17 = 0;
  CFStringRef theString = 0LL;
  int v14 = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56LL))( a1,  &v16,  0LL,  0LL,  &v14,  &theString);
  buffer[0] = 0;
  if (theString)
  {
    CFIndex usedBufLen = 0LL;
    v19.length = CFStringGetLength(theString);
    v19.location = 0LL;
    CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, buffer, 255LL, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }

  uint64_t v3 = *(uint64_t **)(a1 + 496);
  __int128 v4 = *(uint64_t **)(a1 + 504);
  if (v3 == v4)
  {
    int v5 = 0;
  }

  else
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = *v3++;
      v5 += *(_DWORD *)(*(void *)(v6 + 104) + 44LL);
    }

    while (v3 != v4);
  }

  uint64_t v7 = *(uint64_t **)(a1 + 520);
  int v8 = *(uint64_t **)(a1 + 528);
  if (v7 == v8)
  {
    int v9 = 0;
  }

  else
  {
    int v9 = 0;
    do
    {
      uint64_t v10 = *v7++;
      v9 += *(_DWORD *)(*(void *)(v10 + 104) + 44LL);
    }

    while (v7 != v8);
  }

  unint64_t v11 = "Audio Device";
  if (v2 == 1633773415) {
    unint64_t v11 = "Aggregate Device";
  }
  return printf( "AudioObjectID:\t\t\t0x%X\n \tClass:\t\t\t\t%s\n \tName:\t\t\t\t%s\n \tInput Channels:\t\t%u\n \tOutput Channels:\t%u\n",  *(_DWORD *)(a1 + 8),  v11,  (const char *)buffer,  v5,  v9);
}

void sub_2BE1E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2BE0BCLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2BE200()
{
  return 1LL;
}

uint64_t sub_2BE208()
{
  return 0LL;
}

uint64_t sub_2BE210()
{
  return 0LL;
}

uint64_t sub_2BE218()
{
  return 0LL;
}

uint64_t sub_2BE220()
{
  return 0LL;
}

uint64_t sub_2BE228()
{
  return 0LL;
}

uint64_t sub_2BE230()
{
  return 0LL;
}

uint64_t sub_2BE238()
{
  return 0LL;
}

CFTypeRef sub_2BE240()
{
  return CFRetain(@"com.apple.audio.AudioMIDISetup");
}

uint64_t sub_2BE24C()
{
  return 0LL;
}

uint64_t sub_2BE254()
{
  return 0LL;
}

BOOL sub_2BE25C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 192LL))(a1) == 1970496032;
}

uint64_t sub_2BE288()
{
  return 0LL;
}

uint64_t sub_2BE290(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = result + 496;
  uint64_t v4 = 520LL;
  if (a2) {
    uint64_t v4 = 496LL;
  }
  else {
    uint64_t v3 = result + 520;
  }
  int v5 = *(uint64_t **)(result + v4);
  uint64_t v6 = *(uint64_t **)(v3 + 8);
  if (v5 == v6)
  {
    *(void *)a3 = 0LL;
    *(_DWORD *)(a3 + 8) = 0;
  }

  else
  {
    LODWORD(v7) = 0;
    do
    {
      uint64_t v8 = *v5++;
      uint64_t v7 = (*(_DWORD *)(*(void *)(v8 + 104) + 44LL) + v7);
    }

    while (v5 != v6);
    *(void *)a3 = 0LL;
    *(_DWORD *)(a3 + 8) = v7;
    if ((_DWORD)v7)
    {
      int v9 = (void *)(a3 + 16);
      do
      {
        *((_DWORD *)v9 - 1) = -1;
        void *v9 = 0LL;
        v9[1] = 0LL;
        int v9 = (void *)((char *)v9 + 20);
        --v7;
      }

      while (v7);
    }
  }

  return result;
}

uint64_t sub_2BE310(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 72LL))(*(void *)(a1 + 424));
}

uint64_t sub_2BE320(void *a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 256LL))(a1);
  if ((_DWORD)result)
  {
    uint64_t v45 = 0LL;
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t *))(*a1 + 264LL))(a1, *a2, &v45);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t, void *))(*(void *)*a2 + 16LL))(*a2, a1);
      return (*(uint64_t (**)(void *, uint64_t))(*a1 + 272LL))(a1, v45);
    }

    return result;
  }

  uint64_t v6 = (uint64_t *)a1[55];
  unint64_t v5 = a1[56];
  unint64_t v7 = a1[57];
  if (v5 < v7)
  {
    if (v6 == (uint64_t *)v5)
    {
      uint64_t v19 = *a2;
      *a2 = 0LL;
      *uint64_t v6 = v19;
      a1[56] = v6 + 1;
    }

    else
    {
      uint64_t v8 = v6 + 1;
      int v9 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        unint64_t v11 = (void *)a1[56];
      }

      else
      {
        uint64_t v10 = (uint64_t *)(v5 - 8);
        unint64_t v11 = (void *)a1[56];
        do
        {
          uint64_t v12 = *v10;
          *v10++ = 0LL;
          *v11++ = v12;
        }

        while ((unint64_t)v10 < v5);
      }

      a1[56] = v11;
      if ((void *)v5 != v8)
      {
        uint64_t v30 = (uint64_t)(v5 - (void)v8) >> 3;
        uint64_t v31 = v6 - 1;
        do
        {
          uint64_t v32 = v31[v30];
          v31[v30] = 0LL;
          uint64_t v33 = *v9;
          uint64_t *v9 = v32;
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
          }
          --v9;
          --v30;
        }

        while (v30 * 8);
      }

      uint64_t v34 = *a2;
      *a2 = 0LL;
      uint64_t result = *v6;
      *uint64_t v6 = v34;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
      }
    }

    return result;
  }

  unint64_t v13 = ((uint64_t)(v5 - (void)v6) >> 3) + 1;
  if (v13 >> 61) {
    sub_7A87C();
  }
  uint64_t v14 = v7 - (void)v6;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  else {
    unint64_t v15 = v13;
  }
  __p[4] = a1 + 57;
  if (!v15)
  {
    memset(__p, 0, 32);
LABEL_21:
    unsigned int v50 = a1 + 57;
    int v20 = (char *)sub_7DC90(1uLL);
    int v22 = (uint64_t *)__p[1];
    int64_t v23 = (char *)__p[2] - (char *)__p[1];
    if (__p[2] == __p[1])
    {
      int64x2_t v29 = vdupq_n_s64((unint64_t)__p[1]);
      uint64_t v25 = v20;
    }

    else
    {
      uint64_t v24 = v23 >> 3;
      uint64_t v25 = &v20[v23 & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v26 = 8 * v24;
      uint64_t v27 = v20;
      do
      {
        uint64_t v28 = *v22;
        *v22++ = 0LL;
        *v27++ = v28;
        v26 -= 8LL;
      }

      while (v26);
      int64x2_t v29 = *(int64x2_t *)&__p[1];
    }

    char v35 = __p[3];
    *(void **)AudioObjectPropertyAddress buf = __p[0];
    __p[0] = v20;
    __p[1] = v20;
    int64x2_t v48 = v29;
    __p[2] = v25;
    __p[3] = &v20[8 * v21];
    float v49 = v35;
    sub_2C2100((uint64_t)buf);
    uint64_t v16 = (char *)__p[1];
    int v18 = __p[2];
    goto LABEL_35;
  }

  uint64_t v16 = (char *)sub_7DC90(v15);
  __p[0] = v16;
  __p[1] = v16;
  __p[2] = v16;
  __p[3] = &v16[8 * v17];
  int v18 = v16;
  if (!v17) {
    goto LABEL_21;
  }
LABEL_35:
  uint64_t v36 = *a2;
  *a2 = 0LL;
  *int v18 = v36;
  __p[2] = (char *)__p[2] + 8;
  uint64_t v37 = (uint64_t *)a1[55];
  if (v37 != v6)
  {
    uint64_t v38 = v6;
    do
    {
      uint64_t v39 = *--v38;
      *uint64_t v38 = 0LL;
      *((void *)v16 - 1) = v39;
      v16 -= 8;
    }

    while (v38 != v37);
  }

  __p[1] = v16;
  __int16 v40 = (uint64_t *)a1[56];
  unsigned int v41 = (uint64_t *)__p[2];
  if (v40 != v6)
  {
    do
    {
      uint64_t v42 = *v6;
      *v6++ = 0LL;
      *v41++ = v42;
    }

    while (v6 != v40);
    uint64_t v16 = (char *)__p[1];
    uint64_t v6 = (uint64_t *)a1[56];
  }

  unint64_t v43 = (void *)a1[55];
  a1[55] = v16;
  a1[56] = v41;
  unint64_t v44 = (void *)a1[57];
  a1[57] = __p[3];
  __p[2] = v6;
  __p[3] = v44;
  __p[0] = v43;
  __p[1] = v43;
  return sub_2C2100((uint64_t)__p);
}

void sub_2BE724( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17, int a18)
{
}

void *sub_2BE7A0(void *result)
{
  unint64_t v1 = result;
  int v2 = (void *)result[55];
  uint64_t v3 = (void *)result[56];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0LL;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  v1[56] = v2;
  return result;
}

uint64_t sub_2BE7F0()
{
  return 1LL;
}

uint64_t sub_2BE7F8()
{
  return 1LL;
}

uint64_t sub_2BE804(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[58];
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(void *)(v6 + 16);
  while (v7 != v8)
  {
    uint64_t v9 = *(void *)(*(void *)v7 + 8LL);
    BOOL v10 = v9 == a2;
    if (*(_BYTE *)(*(void *)v7 + 24LL))
    {
      if (v9 != a2) {
        goto LABEL_7;
      }
      BOOL v10 = *(void *)(*(void *)v7 + 16LL) == a3;
    }

    if (v10)
    {
      unint64_t v13 = (os_log_t *)sub_138E8(13);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v21 = "HP_Device.cpp";
          __int16 v22 = 1024;
          int v23 = 1132;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): An IOProc ID has already been created for the given IOProc",  buf,  0x12u);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 1852797029;
    }

void sub_2BEB30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, int a14)
{
  if (a2)
  {
    if (a2 == 2)
    {
      exception_ptr = __cxa_get_exception_ptr(exception_object);
      a13.__vftable = (std::exception_vtbl *)&off_4865A0;
      a14 = exception_ptr[2];
      __cxa_begin_catch(exception_object);
      std::exception::~exception(&a13);
    }

    else
    {
      __cxa_begin_catch(exception_object);
    }

    __cxa_end_catch();
    JUMPOUT(0x2BE8C0LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2BEBA4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[59];
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(void *)(v6 + 16);
  while (v7 != v8)
  {
    uint64_t v9 = *(void *)(*(void *)v7 + 8LL);
    BOOL v10 = v9 == a2;
    if (*(_BYTE *)(*(void *)v7 + 24LL))
    {
      if (v9 != a2) {
        goto LABEL_7;
      }
      BOOL v10 = *(void *)(*(void *)v7 + 16LL) == a3;
    }

    if (v10)
    {
      char v35 = (os_log_t *)sub_138E8(13);
      uint64_t v36 = *v35;
      if (*v35)
      {
        if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unint64_t v43 = "HP_Device.cpp";
          __int16 v44 = 1024;
          int v45 = 1174;
          _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): An IOProc ID has already been created for the given IOProc",  buf,  0x12u);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 1852797029;
    }

void sub_2BF01C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, int a14)
{
  if (a2)
  {
    if (a2 == 2)
    {
      exception_ptr = __cxa_get_exception_ptr(exception_object);
      a13.__vftable = (std::exception_vtbl *)&off_4865A0;
      a14 = exception_ptr[2];
      __cxa_begin_catch(exception_object);
      std::exception::~exception(&a13);
    }

    else
    {
      __cxa_begin_catch(exception_object);
    }

    __cxa_end_catch();
    JUMPOUT(0x2BED9CLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2BF0B0(void *a1, dispatch_object_s *a2, const void *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a1[58];
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(void *)(v6 + 16);
  while (v7 != v8)
  {
    if (*(const void **)(*(void *)v7 + 40LL) == a3 && *(dispatch_object_s **)(*(void *)v7 + 32LL) == a2)
    {
      uint64_t v32 = (os_log_t *)sub_138E8(13);
      uint64_t v33 = *v32;
      if (*v32)
      {
        if (os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HP_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1218;
          _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): An IOProc ID has already been created for the given IOBlock",  buf,  0x12u);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 1852797029;
    }

    v7 += 8LL;
  }

  if (!(*(unsigned int (**)(void *))(*a1 + 256LL))(a1))
  {
    char v35 = (os_log_t *)sub_138E8(13);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1251;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Can't create the IOProc ID in the current thread context",  buf,  0x12u);
    }

    uint64_t v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v37 = &off_4865A0;
    v37[2] = 1852797029;
  }

  uint64_t v38 = 0LL;
  uint64_t v9 = (uint64_t *)a1[58];
  BOOL v10 = (char *)operator new(0xF0uLL);
  uint64_t v11 = *v9;
  int v12 = *((_DWORD *)v9 + 8);
  char v13 = *((_BYTE *)v9 + 36);
  *((void *)v10 + 1) = 0LL;
  *((void *)v10 + 2) = 0LL;
  *(void *)BOOL v10 = v11;
  v10[24] = 0;
  *((void *)v10 + 4) = a2;
  *((void *)v10 + 5) = v3;
  *((_DWORD *)v10 + 12) = v12;
  v10[52] = 1;
  v10[53] = v13;
  *((_OWORD *)v10 + 8) = 0u;
  v10[54] = 0;
  *((_OWORD *)v10 + 9) = 0u;
  *((_OWORD *)v10 + 10) = 0u;
  *((_OWORD *)v10 + 11) = 0u;
  *((_OWORD *)v10 + 12) = 0u;
  *((_OWORD *)v10 + 13) = 0u;
  *((_OWORD *)v10 + 14) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  if (a2)
  {
    dispatch_retain(a2);
    uint64_t v3 = (const void *)*((void *)v10 + 5);
  }

  if (v3) {
    *((void *)v10 + 5) = _Block_copy(v3);
  }
  unint64_t v14 = v9[3];
  unsigned __int8 v15 = (void *)v9[2];
  if ((unint64_t)v15 >= v14)
  {
    uint64_t v18 = v9[1];
    uint64_t v19 = ((uint64_t)v15 - v18) >> 3;
    uint64_t v20 = v14 - v18;
    uint64_t v21 = v20 >> 2;
    else {
      unint64_t v22 = v21;
    }
    uint64_t v41 = v9 + 3;
    if (v22) {
      unint64_t v22 = (unint64_t)sub_7DC90(v22);
    }
    else {
      uint64_t v23 = 0LL;
    }
    unint64_t v24 = (void *)(v22 + 8 * v19);
    unint64_t v25 = v22 + 8 * v23;
    unint64_t v40 = v25;
    void *v24 = v10;
    unint64_t v16 = v24 + 1;
    *(void *)&buf[16] = v24 + 1;
    uint64_t v27 = (void *)v9[1];
    uint64_t v26 = (void *)v9[2];
    if (v26 == v27)
    {
      int64x2_t v29 = vdupq_n_s64((unint64_t)v26);
    }

    else
    {
      do
      {
        uint64_t v28 = *--v26;
        *uint64_t v26 = 0LL;
        *--unint64_t v24 = v28;
      }

      while (v26 != v27);
      int64x2_t v29 = *(int64x2_t *)(v9 + 1);
      unint64_t v16 = *(void **)&buf[16];
      unint64_t v25 = v40;
    }

    v9[1] = (uint64_t)v24;
    v9[2] = (uint64_t)v16;
    *(int64x2_t *)&uint8_t buf[8] = v29;
    unint64_t v30 = v9[3];
    v9[3] = v25;
    unint64_t v40 = v30;
    *(void *)AudioObjectPropertyAddress buf = v29.i64[0];
    sub_2C20B0((uint64_t)buf);
  }

  else
  {
    *unsigned __int8 v15 = v10;
    unint64_t v16 = v15 + 1;
  }

  v9[2] = (uint64_t)v16;
  uint64_t v17 = *(v16 - 1);
  (*(void (**)(void *, uint64_t))(*a1 + 272LL))(a1, v38);
  return v17;
}

void sub_2BF534( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, int a14)
{
  if (a2)
  {
    uint64_t v18 = (void *)v14[26];
    if (v18)
    {
      v14[27] = v18;
      operator delete(v18);
    }

    uint64_t v19 = (void *)v14[22];
    if (v19)
    {
      v14[23] = v19;
      operator delete(v19);
    }

    uint64_t v20 = (void *)v14[19];
    if (v20) {
      operator delete(v20);
    }
    if (*v15) {
      operator delete(*v15);
    }
    operator delete(v14);
    if (a2 == 2)
    {
      exception_ptr = __cxa_get_exception_ptr(exception_object);
      a13.__vftable = (std::exception_vtbl *)&off_4865A0;
      a14 = exception_ptr[2];
      __cxa_begin_catch(exception_object);
      std::exception::~exception(&a13);
    }

    else
    {
      __cxa_begin_catch(exception_object);
    }

    __cxa_end_catch();
    JUMPOUT(0x2BF2BCLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2BF614(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_746F0(a1, a2);
  if ((result & 1) != 0)
  {
    unint64_t v5 = operator new(0x18uLL);
    v5[2] = 761884528;
    *(void *)unint64_t v5 = &off_46E3F8;
    *((void *)v5 + 2) = a2;
    uint64_t v6 = (uint64_t)v5;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 232LL))(a1, &v6);
    uint64_t result = v6;
    uint64_t v6 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_2BF698( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BF6BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[58];
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(void *)(v6 + 16);
  while (v7 != v8)
  {
    if (*(void *)(*(void *)v7 + 8LL) == a2)
    {
      uint64_t v11 = (os_log_t *)sub_138E8(13);
      int v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unint64_t v16 = "HP_Device.cpp";
          __int16 v17 = 1024;
          int v18 = 1269;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): IOProc was already added",  buf,  0x12u);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 1852797029;
    }

    v7 += 8LL;
  }

  uint64_t v9 = operator new(0x20uLL);
  v9[2] = 728330096;
  *(void *)uint64_t v9 = &off_46E3D0;
  *((void *)v9 + 2) = a2;
  *((void *)v9 + 3) = a3;
  uint64_t v14 = (uint64_t)v9;
  (*(void (**)(void *, uint64_t *))(*a1 + 232LL))(a1, &v14);
  uint64_t result = v14;
  uint64_t v14 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_2BF83C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BF868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2C1F0C(*(void *)(a1 + 464), a2, a3, 0);
}

void *sub_2BF874(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[59];
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  while (v5 != v6)
  {
    if (*(void *)v5 == a2)
    {
      if (a2)
      {
LABEL_16:
        uint64_t v11 = (os_log_t *)sub_138E8(13);
        int v12 = *v11;
        if (*v11)
        {
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            unint64_t v16 = "HP_Device.cpp";
            __int16 v17 = 1024;
            int v18 = 1281;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): IOProc was present in the clocked IO proc lis t; Do_RemoveIOProc is not supported for clocked IO procs",
              buf,
              0x12u);
          }
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 1852797029;
      }

      break;
    }

    if (*(void *)(*(void *)v5 + 8LL) == a2) {
      goto LABEL_16;
    }
    v5 += 8LL;
  }

  uint64_t v7 = result[58];
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v9 = *(void *)(v7 + 16);
  while (v8 != v9)
  {
    if (*(void *)v8 == a2)
    {
      if (!a2) {
        return result;
      }
LABEL_13:
      BOOL v10 = operator new(0x18uLL);
      v10[2] = 761884528;
      *(void *)BOOL v10 = &off_46E3F8;
      *((void *)v10 + 2) = a2;
      uint64_t v14 = v10;
      (*(void (**)(void *, void **))(*v3 + 232LL))(v3, &v14);
      uint64_t result = v14;
      uint64_t v14 = 0LL;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
      }
      return result;
    }

    if (*(void *)(*(void *)v8 + 8LL) == a2) {
      goto LABEL_13;
    }
    v8 += 8LL;
  }

  return result;
}

void sub_2BFA28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2BFA54(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[58];
  for (uint64_t i = *(uint64_t **)(v4 + 8); i != *(uint64_t **)(v4 + 16); ++i)
  {
    uint64_t v6 = *i;
    if (*i == a2)
    {
      uint64_t v6 = a2;
LABEL_7:
      sub_3ACA0(v4, v6);
      uint64_t v7 = i + 1;
      uint64_t v8 = *(uint64_t **)(v4 + 16);
      if (i + 1 != v8)
      {
        do
        {
          uint64_t i = v7;
          uint64_t v9 = v7 - 1;
          uint64_t v10 = *v7;
          *v7++ = 0LL;
          sub_2C1CBC(v9, v10);
        }

        while (v7 != v8);
        uint64_t v7 = *(uint64_t **)(v4 + 16);
      }

      while (v7 != i)
        sub_2C1CBC(--v7, 0LL);
      *(void *)(v4 + 16) = i;
      return;
    }

    if (*(void *)(v6 + 8) == a2) {
      goto LABEL_7;
    }
  }

void sub_2BFB14(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[59];
  for (uint64_t i = *(void *)(v4 + 8); ; i += 8LL)
  {
    if (i == *(void *)(v4 + 16)) {
      goto LABEL_10;
    }
    if (*(void *)i == a2) {
      break;
    }
    if (*(void *)(*(void *)i + 8LL) == a2) {
      goto LABEL_7;
    }
  }

  if (!a2)
  {
LABEL_10:
    uint64_t v9 = a1[58];
    for (uint64_t j = *(void *)(v9 + 8); ; j += 8LL)
    {
      if (j == *(void *)(v9 + 16))
      {
        uint64_t v11 = 0LL;
        goto LABEL_17;
      }

      if (*(void *)j == a2) {
        break;
      }
      if (*(void *)(*(void *)j + 8LL) == a2)
      {
        BOOL v12 = a2 == 0;
        goto LABEL_21;
      }
    }

    uint64_t v11 = a2;
LABEL_17:
    BOOL v12 = a2 == 0;
    if (a2 && !v11) {
      return;
    }
LABEL_21:
    sub_24894(v9, a2);
    uint64_t v13 = a1[58];
    int v14 = *(_DWORD *)(v13 + 112);
    if (v14 == 1)
    {
      int v15 = 0;
    }

    else
    {
      if (v14) {
        return;
      }
      int v15 = 1;
    }

    if (*(_DWORD *)(v13 + 116) == v15) {
      (*(void (**)(void *, BOOL))(*a1 + 560LL))(a1, v12);
    }
    return;
  }

void sub_2BFC94( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    BOOL v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0x2BFC64LL);
      }
    }

    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }

    sub_B45F4(*(void *)(v10 + 472), v9);
    int v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(sub_C590C(__dst, a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "HP_Device.cpp";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 1331;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error starting the io engine",  (uint8_t *)&a9,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v13;
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2BFE48(uint64_t a1, uint64_t a2, _OWORD *a3, int a4)
{
  if (!a2) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 344LL))(a1, 0LL);
  }
  if ((sub_746F0(a1, a2) & 1) == 0)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v22 = "HP_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 1372;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): IOProc wasn't previously added",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  uint64_t v8 = 504LL;
  if ((a4 & 1) == 0) {
    uint64_t v8 = 528LL;
  }
  uint64_t v9 = 496LL;
  if ((a4 & 1) == 0) {
    uint64_t v9 = 520LL;
  }
  if (((*(void *)(a1 + v8) - *(void *)(a1 + v9)) & 0x7FFFFFFF8LL) == 0)
  {
    __int16 v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v22 = "HP_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 1373;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Device doesn't have the given section",  buf,  0x12u);
    }

    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_4865A0;
    v19[2] = 1852797029;
  }

  uint64_t v10 = (char *)operator new(0x60uLL);
  __int128 v11 = a3[1];
  *(_OWORD *)(v10 + 24) = *a3;
  *(_OWORD *)(v10 + 40) = v11;
  __int128 v12 = a3[3];
  *(_OWORD *)(v10 + 56) = a3[2];
  *((_DWORD *)v10 + 2) = 1047097200;
  *(void *)uint64_t v10 = &off_46E448;
  *((void *)v10 + 2) = a2;
  *(_OWORD *)(v10 + 72) = v12;
  *((_DWORD *)v10 + 22) = a4;
  v10[92] = 1;
  uint64_t v20 = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 232LL))(a1, &v20);
  uint64_t result = v20;
  uint64_t v20 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_2C00E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2C0114(void *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8 = a1[59];
  for (uint64_t i = *(void *)(v8 + 8); i != *(void *)(v8 + 16); i += 8LL)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B4538(v8, a2, a3, a4);
        if (*(_DWORD *)(a1[59] + 112LL) == 1) {
          (*(void (**)(void *, __int128 *, uint64_t, BOOL))(*a1 + 568LL))(a1, a3, a4, a2 == 0);
        }
        return;
      }

      break;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      goto LABEL_7;
    }
  }

  uint64_t v10 = a1[58];
  for (uint64_t j = *(void *)(v10 + 8); ; j += 8LL)
  {
    if (j == *(void *)(v10 + 16))
    {
      uint64_t v12 = 0LL;
      goto LABEL_16;
    }

    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8LL) == a2)
    {
      BOOL v13 = a2 == 0;
      goto LABEL_20;
    }
  }

  uint64_t v12 = a2;
LABEL_16:
  BOOL v13 = a2 == 0;
  if (a2 && !v12) {
    return;
  }
LABEL_20:
  sub_B4644(v10, a2, a3, a4);
  if (*(_DWORD *)(a1[58] + 112LL) == 1) {
    (*(void (**)(void *, __int128 *, uint64_t, BOOL))(*a1 + 568LL))(a1, a3, a4, v13);
  }
}

void sub_2C028C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0x2C0258LL);
      }
    }

    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }

    sub_B45F4(*(void *)(v10 + 472), v9);
    int v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(sub_C590C(__dst, a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "HP_Device.cpp";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 1407;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error starting the io engine",  (uint8_t *)&a9,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v13;
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2C0440(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  v2[2] = 1935763823;
  *(void *)int v2 = &off_46E498;
  uint64_t v4 = (uint64_t)v2;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 232LL))(a1, &v4);
  uint64_t result = v4;
  uint64_t v4 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_2C04B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2C04D8(void *a1)
{
  uint64_t v2 = a1[58];
  int v3 = *(_DWORD *)(v2 + 112);
  int v4 = *(_DWORD *)(v2 + 116);
  if (v3)
  {
    sub_2C1EA8(v2);
    if (v4) {
      (*(void (**)(void *, uint64_t))(*a1 + 576LL))(a1, 1LL);
    }
    uint64_t v5 = 0LL;
    goto LABEL_7;
  }

  if (v4)
  {
    sub_2C1EA8(v2);
    uint64_t v5 = 1LL;
LABEL_7:
    (*(void (**)(void *, uint64_t))(*a1 + 576LL))(a1, v5);
  }

  uint64_t v6 = a1[59];
  if (*(_DWORD *)(v6 + 112) || *(_DWORD *)(v6 + 116))
  {
    uint64_t v8 = *(uint64_t **)(v6 + 8);
    int v7 = *(uint64_t **)(v6 + 16);
    while (v8 != v7)
    {
      uint64_t v9 = *v8;
      if (*(_BYTE *)(*v8 + 54))
      {
        *(_BYTE *)(v9 + 54) = 0;
        --*(_DWORD *)(v6 + 112);
        sub_B47C8(v6, v9);
        int v7 = *(uint64_t **)(v6 + 16);
      }

      ++v8;
    }

    sub_B4860((_DWORD **)v6);
    *(_DWORD *)(v6 + 116) = 0;
    if (v4) {
      (*(void (**)(void *, uint64_t))(*a1 + 576LL))(a1, 1LL);
    }
    if (v3) {
      (*(void (**)(void *, void))(*a1 + 576LL))(a1, 0LL);
    }
  }

uint64_t sub_2C05EC(uint64_t a1, uint64_t a2, char a3, unsigned int a4, int *a5)
{
  if ((sub_746F0(a1, a2) & 1) == 0)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v20 = "HP_Device.cpp";
      __int16 v21 = 1024;
      int v22 = 1518;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): IOProc wasn't previously added",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  uint64_t v10 = operator new(0x28uLL);
  v10[2] = 1937077093;
  *(void *)uint64_t v10 = &off_46E420;
  *((void *)v10 + 2) = a2;
  *((_BYTE *)v10 + 24) = a3;
  v10[7] = a4;
  *((void *)v10 + 4) = 0LL;
  uint64_t v11 = a4;
  uint64_t v12 = (BOOL *)operator new[](a4);
  bzero(v12, a4);
  *((void *)v10 + 4) = v12;
  if (a4)
  {
    do
    {
      int v13 = *a5++;
      *v12++ = v13 != 0;
      --v11;
    }

    while (v11);
  }

  uint64_t v18 = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 232LL))(a1, &v18);
  uint64_t result = v18;
  uint64_t v18 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_2C07A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2C07E0(uint64_t a1, uint64_t a2, int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5 = *(void *)(a1 + 464);
  for (uint64_t i = *(void *)(v5 + 8); i != *(void *)(v5 + 16); i += 8LL)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_C5C00(*(void *)(a1 + 464), a2, a3, a4, a5);
        return;
      }

      break;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      goto LABEL_7;
    }
  }

  uint64_t v7 = *(void *)(a1 + 472);
  for (uint64_t j = *(void *)(v7 + 8); j != *(void *)(v7 + 16); j += 8LL)
  {
    if (*(void *)j == a2)
    {
      if (!a2) {
        return;
      }
LABEL_14:
      sub_2C1DAC(v7, a2, a3, a4, a5);
      return;
    }

    if (*(void *)(*(void *)j + 8LL) == a2) {
      goto LABEL_14;
    }
  }

void sub_2C0858(uint64_t a1)
{
  if (!*(void *)(a1 + 464))
  {
    uint64_t v2 = operator new(0x78uLL);
    int v3 = *(_DWORD *)(a1 + 480);
    char v4 = *(_BYTE *)(a1 + 484);
    void *v2 = a1;
    v2[1] = 0LL;
    v2[2] = 0LL;
    v2[3] = 0LL;
    *((_DWORD *)v2 + 8) = v3;
    *((_BYTE *)v2 + 36) = v4;
    v2[5] = 0x200000001LL;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    v2[14] = 0LL;
    sub_2C1940((uint64_t *)(a1 + 464), (uint64_t)v2);
  }

  if (!*(void *)(a1 + 472))
  {
    uint64_t v5 = operator new(0x78uLL);
    int v6 = *(_DWORD *)(a1 + 480);
    char v7 = *(_BYTE *)(a1 + 484);
    *uint64_t v5 = a1;
    v5[1] = 0LL;
    v5[2] = 0LL;
    v5[3] = 0LL;
    *((_DWORD *)v5 + 8) = v6;
    *((_BYTE *)v5 + 36) = v7;
    v5[5] = 0x200000001LL;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    v5[14] = 0LL;
    sub_2C1A8C((uint64_t *)(a1 + 472), (uint64_t)v5);
  }

void sub_2C0924(uint64_t a1)
{
}

uint64_t sub_2C0954()
{
  return 0LL;
}

uint64_t sub_2C095C()
{
  return 0LL;
}

BOOL sub_2C0964(uint64_t a1, unsigned int a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 464LL))(a1) <= a2
      && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 472LL))(a1) >= a2;
}

unsigned int sub_2C09B8(_DWORD *a1)
{
  if (sub_2C18A8(a1)) {
    return a1[122];
  }
  else {
    return vcvtpd_u64_f64((*(double (**)(_DWORD *))(*(void *)a1 + 632LL))(a1) * 0.0003);
  }
}

unsigned int sub_2C0A04(_DWORD *a1)
{
  if (sub_2C18A8(a1)) {
    return a1[122];
  }
  else {
    return vcvtpd_u64_f64((*(double (**)(_DWORD *))(*(void *)a1 + 632LL))(a1) * 0.25);
  }
}

uint64_t sub_2C0A4C(_DWORD *a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 456LL))(a1);
  if ((result & 1) == 0)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    char v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v11 = "HP_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 1655;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): buffer size isn't valid",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (a1[122] != a2)
  {
    uint64_t v5 = operator new(0x18uLL);
    *(void *)uint64_t v5 = &off_46E4C0;
    v5[2] = 1651861107;
    v5[3] = a2;
    *((_BYTE *)v5 + 16) = 1;
    uint64_t v9 = (uint64_t)v5;
    (*(void (**)(_DWORD *, uint64_t *))(*(void *)a1 + 232LL))(a1, &v9);
    uint64_t result = v9;
    uint64_t v9 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_2C0BB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C0BE4(_DWORD *a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 456LL))(a1);
  if ((result & 1) == 0)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    char v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v11 = "HP_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 1664;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): buffer size isn't valid",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (a1[122] != a2)
  {
    uint64_t v5 = operator new(0x18uLL);
    *(void *)uint64_t v5 = &off_46E4C0;
    v5[2] = 1651861107;
    v5[3] = a2;
    *((_BYTE *)v5 + 16) = 0;
    uint64_t v9 = (uint64_t)v5;
    (*(void (**)(_DWORD *, uint64_t *))(*(void *)a1 + 232LL))(a1, &v9);
    uint64_t result = v9;
    uint64_t v9 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_2C0D4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2C0D78(_DWORD *a1, unint64_t *a2, unsigned int *a3, double a4)
{
  if (!dword_49CA78)
  {
    dword_49CA78 = 12000;
    dword_49CA7C = 7200;
    byte_49CA80 = 1;
  }

  LODWORD(a4) = a1[122];
  unint64_t v6 = (unint64_t)((double)*(unint64_t *)&a4
  *a2 = v6;
  unint64_t result = __udivti3(125 * v6, (v6 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
  if (byte_49CA80) {
    unsigned int v8 = 2400;
  }
  else {
    unsigned int v8 = 0;
  }
  *a3 = v8;
  if (result >= 0x16E360)
  {
    if (result > 0x43CF5F) {
      goto LABEL_11;
    }
    uint64_t v9 = &dword_49CA7C;
  }

  else
  {
    uint64_t v9 = &dword_49CA78;
  }

  unsigned int v8 = *v9;
  *a3 = v8;
LABEL_11:
  if (result < v8) {
    *a3 = v6;
  }
  return result;
}

uint64_t sub_2C0E74()
{
  return 0LL;
}

void sub_2C0E7C()
{
  v0 = (os_log_t *)sub_138E8(13);
  unint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      char v4 = "HP_Device.cpp";
      __int16 v5 = 1024;
      int v6 = 1787;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Not supported by this device",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_4865A0;
  exception[2] = 1852797029;
}

uint64_t sub_2C0F3C()
{
  return 1LL;
}

uint64_t sub_2C0F48(double a1)
{
  if (a1 < 32000.0) {
    return 256LL;
  }
  if (a1 < 64000.0) {
    return 512LL;
  }
  if (a1 < 128000.0) {
    return 1024LL;
  }
  if (a1 >= 256000.0) {
    return 4096LL;
  }
  return 2048LL;
}

uint64_t sub_2C0FB0()
{
  return 0LL;
}

double sub_2C0FC8(void *a1)
{
  unint64_t v1 = (char *)a1[62];
  uint64_t v2 = (char *)a1[63];
  if (((v2 - v1) & 0x7FFFFFFF8LL) != 0)
  {
    if (v2 == v1) {
      return 0.0;
    }
  }

  else
  {
    int v3 = (char *)a1[66];
    unint64_t v1 = (char *)a1[65];
    double result = 0.0;
    if (((v3 - v1) & 0x7FFFFFFF8LL) == 0 || v3 == v1) {
      return result;
    }
  }

  uint64_t v6 = *(void *)v1;
  if (!v6) {
    return 0.0;
  }
  return *(double *)(*(void *)(v6 + 104) + 16LL);
}

double sub_2C1020(uint64_t a1)
{
  return result;
}

uint64_t sub_2C106C(uint64_t a1, uint64_t a2)
{
  if ((~*(_DWORD *)(a2 + 56) & 3) != 0)
  {
    char v4 = (os_log_t *)sub_138E8(13);
    __int16 v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        unsigned int v8 = "HP_Device.cpp";
        __int16 v9 = 1024;
        int v10 = 1897;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: both the sample time and the host time need to be valid for return value",  (uint8_t *)&v7,  0x12u);
      }
    }
  }

  return 1LL;
}

uint64_t sub_2C1168()
{
  return 0LL;
}

uint64_t sub_2C1174(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (v2 == 1986817381) {
    int v3 = 1987013741;
  }
  else {
    int v3 = 0;
  }
  if (v2 == 1937072758) {
    int v4 = 1937140845;
  }
  else {
    int v4 = v3;
  }
  if (v2 == 1937072749) {
    int v5 = 1936553332;
  }
  else {
    int v5 = v4;
  }
  if (v2 == 1936744814) {
    int v6 = 1936744814;
  }
  else {
    int v6 = 0;
  }
  if (v2 == 1936682095) {
    int v7 = 1936682095;
  }
  else {
    int v7 = v6;
  }
  if (v2 == 1852601964) {
    int v8 = 1852601964;
  }
  else {
    int v8 = v7;
  }
  if (v2 <= 1937072748) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v5;
  }
  if (v2 == 1836414053) {
    int v10 = 1836414053;
  }
  else {
    int v10 = 0;
  }
  if (v2 == 1784767339) {
    int v11 = 1784767339;
  }
  else {
    int v11 = v10;
  }
  if (v2 == 1685287523) {
    int v12 = 1936945763;
  }
  else {
    int v12 = v11;
  }
  if (v2 == 1684370292) {
    int v13 = 1835295859;
  }
  else {
    int v13 = 0;
  }
  if (v2 == 1668047723) {
    int v14 = 1668510307;
  }
  else {
    int v14 = v13;
  }
  if (v2 <= 1685287522) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v12;
  }
  if (v2 <= 1852601963) {
    return v15;
  }
  else {
    return v9;
  }
}

uint64_t sub_2C128C(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0LL;
  int v3 = a2[3];
  if (v3 <= 1936744813)
  {
    if (v3 == 1836414053)
    {
      int v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128LL))(a2);
      unsigned int v5 = 1953002101;
      BOOL v4 = v6 == 1886679669;
    }

    else
    {
      if (v3 != 1936682095) {
        return result;
      }
      BOOL v4 = (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128LL))(a2) == 1886679669;
      unsigned int v5 = 1953002099;
    }
  }

  else
  {
    if (v3 == 1986817381) {
      return 1987013732LL;
    }
    if (v3 == 1937072758) {
      return 1937140836LL;
    }
    if (v3 != 1936744814) {
      return result;
    }
    BOOL v4 = (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128LL))(a2) == 1886679669;
    unsigned int v5 = 1836281966;
  }

  if (v4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_2C1398(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0LL;
  }
  return 0LL;
}

uint64_t sub_2C13EC(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0LL;
  }
  return 0LL;
}

uint64_t sub_2C1440(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 <= 1852601963)
  {
    if (v2 <= 1685287522)
    {
      BOOL v3 = v2 == 1668047723;
      int v4 = 1684370292;
    }

    else
    {
      BOOL v3 = v2 == 1685287523 || v2 == 1784767339;
      int v4 = 1836414053;
    }
  }

  else if (v2 > 1937072748)
  {
    BOOL v3 = v2 == 1937072749 || v2 == 1986817381;
    int v4 = 1937072758;
  }

  else
  {
    BOOL v3 = v2 == 1852601964 || v2 == 1936682095;
    int v4 = 1936744814;
  }

  if (v3 || v2 == v4) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128LL))(a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_2C1514(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0LL;
  int v3 = a2[3];
  if (v3 > 1936744813)
  {
    if (v3 == 1986817381 || v3 == 1937072758) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128LL))(a2);
    }
    int v4 = 1936744814;
LABEL_7:
    if (v3 != v4) {
      return result;
    }
    goto LABEL_8;
  }

  if (v3 != 1836414053)
  {
    int v4 = 1936682095;
    goto LABEL_7;
  }

uint64_t sub_2C15C4(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0LL;
  }
  return 0LL;
}

uint64_t sub_2C1618(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0LL;
  }
  return 0LL;
}

uint64_t sub_2C166C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (v2 == 1986817381) {
    int v3 = 1986290211;
  }
  else {
    int v3 = 0;
  }
  if (v2 == 1937072758) {
    int v4 = 1937138723;
  }
  else {
    int v4 = v3;
  }
  if (v2 == 1936744814) {
    int v5 = 1936748067;
  }
  else {
    int v5 = 0;
  }
  if (v2 == 1852601964) {
    int v6 = 1852601891;
  }
  else {
    int v6 = v5;
  }
  if (v2 <= 1937072757) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = v4;
  }
  if (v2 == 1685287523) {
    int v8 = 1936941859;
  }
  else {
    int v8 = 0;
  }
  if (v2 == 1684370292) {
    int v9 = 1835295779;
  }
  else {
    int v9 = v8;
  }
  if (v2 == 1668047723) {
    unsigned int v10 = 1668506403;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v2 <= 1852601963) {
    return v10;
  }
  else {
    return v7;
  }
}

uint64_t sub_2C173C(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 == 1936744814)
  {
    unsigned int v3 = 1836281891;
  }

  else
  {
    if (v2 != 1986817381) {
      return 0LL;
    }
    unsigned int v3 = 1836475427;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_2C17B4(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 <= 1852601963)
  {
    BOOL v3 = v2 == 1668047723 || v2 == 1684370292;
    int v4 = 1685287523;
  }

  else if (v2 > 1937072757)
  {
    BOOL v3 = v2 == 1986817381;
    int v4 = 1937072758;
  }

  else
  {
    BOOL v3 = v2 == 1852601964;
    int v4 = 1936744814;
  }

  if (v3 || v2 == v4) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128LL))(a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_2C1848(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 != 1986817381 && v2 != 1936744814) {
    return 0LL;
  }
  return 0LL;
}

BOOL sub_2C18A8(void *a1)
{
  uint64_t v1 = a1[62];
  unint64_t v2 = a1[63] - v1;
  if ((v2 & 0x7FFFFFFF8LL) != 0)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = (v2 >> 3);
    do
      int v5 = *(_DWORD *)(*(void *)(*(void *)(v1 + 8 * v3++) + 104LL) + 24LL);
    while (v5 == 1819304813 && v3 < v4);
    if (v5 != 1819304813) {
      return 1LL;
    }
  }

  uint64_t v7 = a1[65];
  unint64_t v8 = a1[66] - v7;
  if ((v8 & 0x7FFFFFFF8LL) == 0) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  unint64_t v10 = (v8 >> 3);
  do
    int v11 = *(_DWORD *)(*(void *)(*(void *)(v7 + 8 * v9++) + 104LL) + 24LL);
  while (v11 == 1819304813 && v9 < v10);
  return v11 != 1819304813;
}

void sub_2C1940(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(v2 + 8);
    if (v3 != *(uint64_t **)(v2 + 16))
    {
      do
      {
        sub_3ACA0(v2, *v3);
        sub_2C1CBC(v3++, 0LL);
      }

      while (v3 != *(uint64_t **)(v2 + 16));
      unint64_t v4 = *(uint64_t **)(v2 + 8);
      if (v3 != v4)
      {
        do
          sub_2C1CBC(--v3, 0LL);
        while (v3 != v4);
        unint64_t v3 = v4;
      }
    }

    *(void *)(v2 + 16) = v3;
    int v5 = *(void **)(v2 + 72);
    if (v5)
    {
      sub_74954( *(void *)v2,  1,  *(unsigned int *)(v2 + 32),  v5,  (vm_address_t **)(v2 + 48),  *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 72) = 0LL;
    }

    int v6 = *(void **)(v2 + 104);
    if (v6)
    {
      sub_74954( *(void *)v2,  0,  *(unsigned int *)(v2 + 32),  v6,  (vm_address_t **)(v2 + 80),  *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 104) = 0LL;
    }

    uint64_t v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(void *)(v2 + 88) = v7;
      operator delete(v7);
    }

    unint64_t v8 = *(void **)(v2 + 48);
    if (v8)
    {
      *(void *)(v2 + 56) = v8;
      operator delete(v8);
    }

    unint64_t v9 = *(uint64_t **)(v2 + 8);
    if (v9)
    {
      unint64_t v10 = *(uint64_t **)(v2 + 16);
      int v11 = *(void **)(v2 + 8);
      if (v10 != v9)
      {
        do
          sub_2C1CBC(--v10, 0LL);
        while (v10 != v9);
        int v11 = *(void **)(v2 + 8);
      }

      *(void *)(v2 + 16) = v9;
      operator delete(v11);
    }

    operator delete((void *)v2);
  }

void sub_2C1A8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(v2 + 8);
    if (v3 != *(uint64_t **)(v2 + 16))
    {
      do
      {
        sub_B4780(v2, *v3);
        sub_2C1BCC(v3++);
      }

      while (v3 != *(uint64_t **)(v2 + 16));
      unint64_t v4 = *(uint64_t **)(v2 + 8);
      if (v3 != v4)
      {
        do
          sub_2C1BCC(--v3);
        while (v3 != v4);
        unint64_t v3 = v4;
      }
    }

    *(void *)(v2 + 16) = v3;
    int v5 = *(void **)(v2 + 72);
    if (v5)
    {
      sub_74954( *(void *)v2,  1,  *(unsigned int *)(v2 + 32),  v5,  (vm_address_t **)(v2 + 48),  *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 72) = 0LL;
    }

    int v6 = *(void **)(v2 + 104);
    if (v6)
    {
      sub_74954( *(void *)v2,  0,  *(unsigned int *)(v2 + 32),  v6,  (vm_address_t **)(v2 + 80),  *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 104) = 0LL;
    }

    uint64_t v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(void *)(v2 + 88) = v7;
      operator delete(v7);
    }

    unint64_t v8 = *(void **)(v2 + 48);
    if (v8)
    {
      *(void *)(v2 + 56) = v8;
      operator delete(v8);
    }

    unint64_t v9 = *(uint64_t **)(v2 + 8);
    if (v9)
    {
      unint64_t v10 = *(uint64_t **)(v2 + 16);
      int v11 = *(void **)(v2 + 8);
      if (v10 != v9)
      {
        do
          sub_2C1BCC(--v10);
        while (v10 != v9);
        int v11 = *(void **)(v2 + 8);
      }

      *(void *)(v2 + 16) = v9;
      operator delete(v11);
    }

    operator delete((void *)v2);
  }

void sub_2C1BCC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    unint64_t v3 = (void *)sub_2C1BF8(v2);
    operator delete(v3);
  }

uint64_t sub_2C1BF8(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 176);
  sub_74954( *(void *)a1,  1,  *(unsigned int *)(a1 + 48),  *(void **)(a1 + 200),  (vm_address_t **)(a1 + 176),  *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 200) = 0LL;
  unint64_t v3 = (void **)(a1 + 208);
  sub_74954( *(void *)a1,  0,  *(unsigned int *)(a1 + 48),  *(void **)(a1 + 232),  (vm_address_t **)(a1 + 208),  *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 232) = 0LL;
  unint64_t v4 = *(dispatch_object_s **)(a1 + 32);
  if (v4) {
    dispatch_release(v4);
  }
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    _Block_release(v5);
  }
  int v6 = *v3;
  if (*v3)
  {
    *(void *)(a1 + 216) = v6;
    operator delete(v6);
  }

  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 184) = v7;
    operator delete(v7);
  }

  unint64_t v8 = *(void **)(a1 + 152);
  if (v8) {
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(a1 + 128);
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

void sub_2C1CBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    unint64_t v4 = (void *)sub_2C1CE8(v3);
    operator delete(v4);
  }

uint64_t sub_2C1CE8(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 176);
  sub_74954( *(void *)a1,  1,  *(unsigned int *)(a1 + 48),  *(void **)(a1 + 200),  (vm_address_t **)(a1 + 176),  *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 200) = 0LL;
  uint64_t v3 = (void **)(a1 + 208);
  sub_74954( *(void *)a1,  0,  *(unsigned int *)(a1 + 48),  *(void **)(a1 + 232),  (vm_address_t **)(a1 + 208),  *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 232) = 0LL;
  unint64_t v4 = *(dispatch_object_s **)(a1 + 32);
  if (v4) {
    dispatch_release(v4);
  }
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    _Block_release(v5);
  }
  int v6 = *v3;
  if (*v3)
  {
    *(void *)(a1 + 216) = v6;
    operator delete(v6);
  }

  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 184) = v7;
    operator delete(v7);
  }

  unint64_t v8 = *(void **)(a1 + 152);
  if (v8) {
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(a1 + 128);
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

void sub_2C1DAC(uint64_t a1, uint64_t a2, int a3, unsigned int a4, _BYTE *a5)
{
  int v5 = *(uint64_t **)(a1 + 8);
  int v6 = *(uint64_t **)(a1 + 16);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v9 = *v5;
      if (*v5 == a2) {
        break;
      }
      if (*(void *)(v9 + 8) == a2) {
        goto LABEL_7;
      }
      if (++v5 == v6) {
        return;
      }
    }

    uint64_t v9 = a2;
    if (!a2) {
      return;
    }
LABEL_7:
    uint64_t v10 = *(void *)v9;
    if (a3) {
      uint64_t v11 = v9 + 128;
    }
    else {
      uint64_t v11 = v9 + 152;
    }
    *(void *)(v11 + 8) = 0LL;
    uint64_t v12 = 528LL;
    if (a3) {
      uint64_t v12 = 504LL;
    }
    uint64_t v13 = 520LL;
    if (a3) {
      uint64_t v13 = 496LL;
    }
    uint64_t v14 = (*(void *)(v10 + v12) - *(void *)(v10 + v13)) >> 3;
    else {
      uint64_t v15 = v14;
    }
    if ((_DWORD)v15)
    {
      do
      {
        sub_74FB0(v11, a5++);
        --v15;
      }

      while (v15);
    }

    if (*(_BYTE *)(v9 + 54))
    {
      sub_B47C8(a1, v9);
      sub_B4860((_DWORD **)a1);
    }
  }

void sub_2C1EA8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v4 = *v3;
    if (*(_BYTE *)(*v3 + 54))
    {
      *(_BYTE *)(v4 + 54) = 0;
      --*(_DWORD *)(a1 + 112);
      sub_74774(a1, v4);
      uint64_t v2 = *(uint64_t **)(a1 + 16);
    }

    ++v3;
  }

  sub_7480C((_DWORD **)a1);
  *(_DWORD *)(a1 + 116) = 0;
}

uint64_t sub_2C1F0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8 = (char *)operator new(0xF0uLL);
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(a1 + 32);
  unsigned __int8 v11 = *(_BYTE *)(a1 + 36);
  *(void *)unint64_t v8 = *(void *)a1;
  *((void *)v8 + 1) = a2;
  *((void *)v8 + 2) = a3;
  v8[24] = a4;
  *((void *)v8 + 4) = 0LL;
  *((void *)v8 + 5) = 0LL;
  *((_DWORD *)v8 + 12) = v10;
  v8[52] = 1;
  *(_WORD *)(v8 + 53) = v11;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  *((_DWORD *)v8 + 30) = 0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  unint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void **)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = ((uint64_t)v13 - v15) >> 3;
    uint64_t v17 = v12 - v15;
    uint64_t v18 = v17 >> 2;
    else {
      unint64_t v19 = v18;
    }
    uint64_t v32 = a1 + 24;
    if (v19) {
      unint64_t v19 = (unint64_t)sub_7DC90(v19);
    }
    else {
      uint64_t v20 = 0LL;
    }
    __int16 v21 = (void *)(v19 + 8 * v16);
    unint64_t v22 = v19 + 8 * v20;
    unint64_t v31 = v22;
    *__int16 v21 = v9;
    uint64_t v14 = v21 + 1;
    v30.i64[1] = (uint64_t)(v21 + 1);
    int v24 = *(void **)(a1 + 8);
    __int16 v23 = *(void **)(a1 + 16);
    if (v23 == v24)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v23);
    }

    else
    {
      do
      {
        uint64_t v25 = *--v23;
        void *v23 = 0LL;
        *--__int16 v21 = v25;
      }

      while (v23 != v24);
      int64x2_t v26 = *(int64x2_t *)(a1 + 8);
      uint64_t v14 = (void *)v30.i64[1];
      unint64_t v22 = v31;
    }

    *(void *)(a1 + 8) = v21;
    *(void *)(a1 + 16) = v14;
    int64x2_t v30 = v26;
    unint64_t v27 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v22;
    unint64_t v31 = v27;
    uint64_t v29 = v26.i64[0];
    sub_2C20B0((uint64_t)&v29);
  }

  else
  {
    *uint64_t v13 = v8;
    uint64_t v14 = v13 + 1;
  }

  *(void *)(a1 + 16) = v14;
  if (a4) {
    return *(v14 - 1);
  }
  return a2;
}

void sub_2C2098(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_2C1CE8(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2C20B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_2C1CBC((uint64_t *)(i - 8), 0LL);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2C2100(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2C2160(void **a1, void **a2, void *a3, int a4, unsigned int a5, uint64_t a6)
{
  while (a1 != a2)
  {
    int v6 = *a1;
    if (*a1 == a3)
    {
      int v6 = a3;
      if (!a3) {
        return;
      }
LABEL_6:
      uint64_t v7 = 19LL;
      if (a4)
      {
        uint64_t v7 = 16LL;
        unint64_t v8 = v6 + 16;
      }

      else
      {
        unint64_t v8 = v6 + 19;
      }

      uint64_t v9 = 528LL;
      if (a4) {
        uint64_t v9 = 504LL;
      }
      uint64_t v10 = 520LL;
      if (a4) {
        uint64_t v10 = 496LL;
      }
      uint64_t v11 = (*(void *)(*v6 + v9) - *(void *)(*v6 + v10)) >> 3;
      else {
        uint64_t v12 = v11;
      }
      if ((_DWORD)v12)
      {
        unint64_t v13 = 0LL;
        unint64_t v14 = v8[1];
        do
        {
          if (v14 <= v13) {
            LOBYTE(v15) = 1;
          }
          else {
            uint64_t v15 = (*(void *)(v6[v7] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v13) & 1LL;
          }
          *(_BYTE *)(a6 + v13++) = v15;
        }

        while (v12 != v13);
      }

      return;
    }

    if ((void *)v6[1] == a3) {
      goto LABEL_6;
    }
    ++a1;
  }

uint64_t sub_2C2244(uint64_t a1)
{
  *(void *)a1 = off_47B908;
  sub_2F534C(a1, *(void *)(a1 + 432));
  uint64_t v2 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_2F534C(a1, *(void *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 432LL))(a1);
  uint64_t v4 = *(void **)(a1 + 544);
  if (v4)
  {
    *(void *)(a1 + 552) = v4;
    operator delete(v4);
  }

  int v5 = *(void **)(a1 + 520);
  if (v5)
  {
    *(void *)(a1 + 528) = v5;
    operator delete(v5);
  }

  int v6 = *(void **)(a1 + 496);
  if (v6)
  {
    *(void *)(a1 + 504) = v6;
    operator delete(v6);
  }

  sub_2C1A8C((uint64_t *)(a1 + 472), 0LL);
  sub_2C1940((uint64_t *)(a1 + 464), 0LL);
  uint64_t v10 = (void **)(a1 + 440);
  sub_D7DB0(&v10);
  uint64_t v7 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  *(void *)(a1 + 336) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 360));
  return sub_2F4E00(a1);
}

char *sub_2C2370(char *result, uint64_t a2)
{
  uint64_t v2 = 496LL;
  if (*(_BYTE *)(a2 + 88))
  {
    uint64_t v3 = result + 496;
  }

  else
  {
    uint64_t v2 = 520LL;
    uint64_t v3 = result + 520;
  }

  uint64_t v4 = *(char **)&result[v2];
  int v5 = (char *)*((void *)v3 + 1);
  if (v4 != v5)
  {
    while (*(void *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v5)
      {
        uint64_t v4 = (char *)*((void *)v3 + 1);
        break;
      }
    }
  }

  if (v4 != v5)
  {
    int64_t v6 = v5 - (v4 + 8);
    if (v5 != v4 + 8) {
      uint64_t result = (char *)memmove(v4, v4 + 8, v5 - (v4 + 8));
    }
    *((void *)v3 + 1) = &v4[v6];
  }

  return result;
}

uint64_t sub_2C2404()
{
  v0 = (void *)sub_EAD14();
  CFStringRef v3 = CFStringCreateWithCString(0LL, "Speaker", 0x600u);
  char v4 = 1;
  uint64_t v1 = sub_EAE28(v0, &v3);
  sub_19DFC((uint64_t)&v3);
  return v1;
}

void sub_2C2468( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2C247C(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v6 = (*(double (**)(uint64_t))(*(void *)a2 + 104LL))(a2);
  std::to_string(&v22, v6);
  sub_7D084(&__p, "sampleRate");
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v7 = sub_2C27F4(a1, (unsigned __int8 *)&__p, (__int128 **)&v21);
  uint64_t v8 = (void **)(v7 + 40);
  *(std::string *)uint64_t v8 = v22;
  v22.__r_.__value_.__s.__size_ = 0;
  v22.__r_.__value_.__s.__data_[0] = 0;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 96LL))(a2, 1LL, 0LL);
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 112LL))(v9, &v22);
  std::to_string(&__p, v23);
  sub_7D084(&v21, "numChannelsIn");
  v17[0] = &v21;
  uint64_t v10 = sub_2C27F4(a1, (unsigned __int8 *)&v21, (__int128 **)v17);
  uint64_t v11 = (void **)(v10 + 40);
  *(std::string *)uint64_t v11 = __p;
  __p.__r_.__value_.__s.__size_ = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if ((char)v21.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
  }

  std::to_string(&__p, v23);
  sub_7D084(&v21, "numChannelsOut");
  v17[0] = &v21;
  uint64_t v12 = sub_2C27F4(a1, (unsigned __int8 *)&v21, (__int128 **)v17);
  unint64_t v13 = (void **)(v12 + 40);
  *(std::string *)unint64_t v13 = __p;
  __p.__r_.__value_.__s.__size_ = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if ((char)v21.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
  }

  if (a3 == 1668049011)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 96LL))(a2, 0LL, 0LL);
    if (v14)
    {
      (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 112LL))(v14, &__p);
      std::to_string(&v21, __val);
      sub_7D084(v17, "numChannelsTelemetry");
      int v24 = v17;
      uint64_t v15 = sub_2C27F4(a1, (unsigned __int8 *)v17, (__int128 **)&v24);
      uint64_t v16 = (void **)(v15 + 40);
      *(std::string *)uint64_t v16 = v21;
      v21.__r_.__value_.__s.__size_ = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      if (v18 < 0)
      {
        operator delete(v17[0]);
      }
    }
  }

void sub_2C2734( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  sub_7A630(v29);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2C27F4(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v7 = sub_7ED44((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }

    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_7F194(i + 16, a2)) {
            return i;
          }
        }

        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }

          else
          {
            v14 &= v9 - 1;
          }

          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v16 = operator new(0x40uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *uint64_t v16 = 0LL;
  v16[1] = v8;
  uint64_t v17 = *a3;
  __int128 v18 = **a3;
  v16[4] = *((void *)*a3 + 2);
  *((_OWORD *)v16 + 1) = v18;
  *((void *)v17 + 1) = 0LL;
  *((void *)v17 + 2) = 0LL;
  *(void *)uint64_t v17 = 0LL;
  v16[6] = 0LL;
  v16[7] = 0LL;
  v16[5] = 0LL;
  char v41 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1LL;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }

    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }

      else
      {
        uint64_t v33 = 1LL << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }

      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }

      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          uint64_t v25 = operator new(8LL * *(void *)&prime);
          int64x2_t v26 = *(void **)a1;
          *(void *)a1 = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0LL;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v27++) = 0LL;
          while (*(void *)&prime != v27);
          uint64_t v28 = (void *)*v15;
          if (*v15)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }

            else
            {
              v29 &= *(void *)&prime - 1LL;
            }

            *(void *)(*(void *)a1 + 8 * v29) = v15;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }

                else
                {
                  v35 &= *(void *)&prime - 1LL;
                }

                if (v35 != v29)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v35))
                  {
                    *(void *)(*(void *)a1 + 8 * v35) = v28;
                    goto LABEL_55;
                  }

                  *uint64_t v28 = *v34;
                  *uint64_t v34 = **(void **)(*(void *)a1 + 8 * v35);
                  **(void **)(*(void *)a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }

                unint64_t v35 = v29;
LABEL_55:
                uint64_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }

              while (v34);
            }
          }

          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }

        uint64_t v39 = *(void **)a1;
        *(void *)a1 = 0LL;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v9 = 0LL;
        *(void *)(a1 + 8) = 0LL;
      }
    }

void sub_2C2C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2C2C38(uint64_t a1, void **a2, int a3)
{
  uint64_t v6 = sub_2C2404();
  if (a3 == 1668049011)
  {
    unint64_t v7 = operator new(4uLL);
    *unint64_t v7 = 0;
    float v20 = v7 + 1;
    BOOL v21 = v7 + 1;
    float v19 = v7;
  }

  else
  {
    float v19 = 0LL;
    float v20 = 0LL;
    BOOL v21 = 0LL;
  }

  sub_D03C0(&v18, *a2, a2[1]);
  unint64_t v8 = sub_D0268(*a2, a2[1]);
  sub_D0B40(&v17, v8, 1635087216LL);
  unint64_t v9 = sub_D0268(*a2, a2[1]);
  sub_D0B40(&v16, v9, 1886548848LL);
  sub_D0C88((CFArrayRef *)&cf, a2);
  uint64_t v10 = sub_2C2404();
  sub_2C247C((uint64_t)__p, v10, a3);
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  CFTypeRef v11 = cf;
  *(void *)(a1 + 72) = cf;
  if (v11) {
    CFRetain(v11);
  }
  sub_7A960(a1, (uint64_t)&v19, &v18, &v17, &v16, (uint64_t)__p);
  sub_7AC78(a1);
  sub_7A7C0((void *)__p[2]);
  uint64_t v12 = __p[0];
  __p[0] = 0LL;
  if (v12) {
    operator delete(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19)
  {
    float v20 = v19;
    operator delete(v19);
  }

  *(void *)(a1 + 160) = a2;
  *(_BYTE *)(a1 + 168) = 1;
  *(void *)(a1 + 176) = 0LL;
  return a1;
}

void sub_2C2E20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, CFTypeRef a17, CFTypeRef a18, void *__p, uint64_t a20)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a17) {
    CFRelease(a17);
  }
  if (a18) {
    CFRelease(a18);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2C2F34(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (*(_BYTE *)(v1 + 168))
  {
    uint64_t v2 = *(void *)(v1 + 160);
    unint64_t v3 = *(void ****)v2;
    char v4 = *(void ****)(v2 + 8);
    if (*(void ****)v2 != v4)
    {
      char v5 = 0;
      do
      {
        uint64_t v6 = sub_D01B4(**v3, 1634625388);
        if (v6) {
          char v5 = sub_2DC888((int *)v6 + 6);
        }
        v3 += 3;
      }

      while (v3 != v4);
      if ((v5 & 1) != 0)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v1 + 8);
        if (v7)
        {
          p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
          do
            unint64_t v9 = __ldxr(p_shared_weak_owners);
          while (__stxr(v9 + 1, p_shared_weak_owners));
        }

        unint64_t v10 = *(void *)(v1 + 96);
        CFTypeRef v11 = *(void **)(v1 + 88);
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v13 = *(void *)(v1 + 80);
          uint64_t v14 = ((uint64_t)v11 - v13) >> 4;
          unint64_t v15 = v14 + 1;
          uint64_t v16 = v10 - v13;
          if (v16 >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          else {
            unint64_t v17 = v15;
          }
          uint64_t v30 = v1 + 96;
          CFTypeRef v18 = (char *)sub_7BE90(v17);
          float v20 = &v18[16 * v14];
          *(void *)float v20 = 0LL;
          *((void *)v20 + 1) = 0LL;
          unint64_t v22 = *(void **)(v1 + 80);
          BOOL v21 = *(void **)(v1 + 88);
          if (v21 == v22)
          {
            int64x2_t v25 = vdupq_n_s64((unint64_t)v21);
            unint64_t v23 = &v18[16 * v14];
          }

          else
          {
            unint64_t v23 = &v18[16 * v14];
            do
            {
              __int128 v24 = *((_OWORD *)v21 - 1);
              v21 -= 2;
              *((_OWORD *)v23 - 1) = v24;
              v23 -= 16;
              *BOOL v21 = 0LL;
              v21[1] = 0LL;
            }

            while (v21 != v22);
            int64x2_t v25 = *(int64x2_t *)(v1 + 80);
          }

          uint64_t v12 = v20 + 16;
          *(void *)(v1 + 80) = v23;
          *(void *)(v1 + 88) = v20 + 16;
          int64x2_t v28 = v25;
          uint64_t v26 = *(void *)(v1 + 96);
          *(void *)(v1 + 96) = &v18[16 * v19];
          uint64_t v29 = v26;
          uint64_t v27 = v25.i64[0];
          sub_A0D64((uint64_t)&v27);
        }

        else
        {
          uint64_t v12 = v11 + 2;
          void *v11 = 0LL;
          v11[1] = 0LL;
        }

        *(void *)(v1 + 88) = v12;
        if (v7) {
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }

void sub_2C30B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2C30CC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

BOOL sub_2C30E0(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  char v5 = &dword_0 + 1;
  if ((int)a2->mSelector > 1835103843)
  {
    if (mSelector != 1835103844 && mSelector != 1937208176)
    {
      if (mSelector != 1986164323)
      {
LABEL_29:
        sub_1BB60((std::mutex *)a1);
        return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
      }

      unint64_t v8 = operator new(4uLL);
      std::string __p = v8;
      _DWORD *v8 = 1886613611;
      CFTypeRef v18 = v8 + 1;
      uint64_t v19 = v8 + 1;
      strcpy(v20, "cwdv");
      v20[8] = 0;
      int v21 = 3;
      v23[0] = 0LL;
      v23[1] = 0LL;
      unint64_t v22 = v23;
      int v24 = 44739242;
      CFTypeRef cf = 0LL;
      sub_3710DC(&v26, a1, (uint64_t)&__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_32C8C(v23[0]);
      if (__p)
      {
        CFTypeRef v18 = __p;
        operator delete(__p);
      }

      if (v28 == 1 && (unint64_t v9 = *(std::__shared_weak_count **)(v27 + 24)) != 0LL)
      {
        char v5 = *(void **)(v27 + 16);
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          unint64_t v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        uint64_t v12 = std::__shared_weak_count::lock(v9);
        CFTypeRef v18 = v12;
        if (v12)
        {
          uint64_t v13 = v12;
          std::string __p = v5;
          if (v5) {
            char v5 = (void *)(*(uint64_t (**)(void *, const AudioObjectPropertyAddress *))(*(void *)v5 + 16LL))( v5,  a2);
          }
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }

        else
        {
          char v5 = 0LL;
        }

        std::__shared_weak_count::__release_weak(v9);
      }

      else
      {
        char v5 = 0LL;
      }

      sub_85B80(&v26);
    }
  }

  else if (mSelector == 1064725619)
  {
    return a2->mScope == 1869968496;
  }

  else if (mSelector != 1668049764 && mSelector != 1684435056)
  {
    goto LABEL_29;
  }

  return (BOOL)v5;
}

void sub_2C3300( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_2C3338(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  char v4 = 0LL;
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1835103843)
  {
    if (mSelector != 1835103844 && mSelector != 1937208176)
    {
      if (mSelector != 1986164323) {
        return sub_36854C(a1, a2);
      }
      unint64_t v9 = operator new(4uLL);
      std::string __p = v9;
      _DWORD *v9 = 1886613611;
      uint64_t v19 = v9 + 1;
      float v20 = v9 + 1;
      strcpy(v21, "cwdv");
      v21[8] = 0;
      int v22 = 3;
      v24[0] = 0LL;
      v24[1] = 0LL;
      unint64_t v23 = v24;
      int v25 = 44739242;
      CFTypeRef cf = 0LL;
      sub_3710DC(&v27, a1, (uint64_t)&__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_32C8C(v24[0]);
      if (__p)
      {
        uint64_t v19 = __p;
        operator delete(__p);
      }

      if (v29 == 1 && (uint64_t v10 = *(std::__shared_weak_count **)(v28 + 24)) != 0LL)
      {
        char v4 = *(void **)(v28 + 16);
        p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
        do
          unint64_t v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
        uint64_t v13 = std::__shared_weak_count::lock(v10);
        uint64_t v19 = v13;
        if (v13)
        {
          uint64_t v14 = v13;
          std::string __p = v4;
          if (v4) {
            char v4 = (void *)(*(uint64_t (**)(void *, const AudioObjectPropertyAddress *))(*(void *)v4 + 24LL))( v4,  a2);
          }
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }

        else
        {
          char v4 = 0LL;
        }

        std::__shared_weak_count::__release_weak(v10);
      }

      else
      {
        char v4 = 0LL;
      }

      sub_85B80(&v27);
    }
  }

  else if (mSelector != 1064725619 && mSelector != 1668049764 && mSelector != 1684435056)
  {
    return sub_36854C(a1, a2);
  }

  return (BOOL)v4;
}

void sub_2C3538( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2C3570(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, _DWORD *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    float v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&v29, (unsigned int *)&v27);
      int v21 = v31 >= 0 ? &v29 : (void **)v29;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 302;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = v21;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  __p,  0x1Cu);
      if (SHIBYTE(v31) < 0) {
        operator delete(v29);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    unint64_t v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&v29, (unsigned int *)&v27);
      int v25 = v31 >= 0 ? &v29 : (void **)v29;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 303;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = v25;
      *(_WORD *)&__p[28] = 1024;
      int v33 = a3;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (SHIBYTE(v31) < 0) {
        operator delete(v29);
      }
    }

    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v26 = &off_4865A0;
    v26[2] = 561211770;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  unint64_t v9 = (const __CFData *)&dword_4;
  if ((int)a2->mSelector > 1835103843)
  {
    if (mSelector != 1835103844 && mSelector != 1937208176)
    {
      if (mSelector == 1986164323)
      {
        uint64_t v10 = operator new(4uLL);
        *(void *)std::string __p = v10;
        _DWORD *v10 = 1886613611;
        *(void *)&__p[8] = v10 + 1;
        *(void *)&__p[16] = v10 + 1;
        strcpy(&__p[24], "cwdv");
        BYTE2(v33) = 0;
        HIDWORD(v35) = 3;
        v37[0] = 0LL;
        v37[1] = 0LL;
        uint64_t v36 = v37;
        int v38 = 44739242;
        CFTypeRef cf = 0LL;
        sub_3710DC((uint64_t *)&v29, a1, (uint64_t)__p);
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v37[0]);
        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }

        if (v31 == 1 && (unint64_t v11 = *(std::__shared_weak_count **)(v30 + 24)) != 0LL)
        {
          unint64_t v9 = *(const __CFData **)(v30 + 16);
          p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
          do
            unint64_t v13 = __ldxr(p_shared_weak_owners);
          while (__stxr(v13 + 1, p_shared_weak_owners));
          uint64_t v14 = std::__shared_weak_count::lock(v11);
          *(void *)&__p[8] = v14;
          if (v14)
          {
            unint64_t v15 = v14;
            *(void *)std::string __p = v9;
            if (v9) {
              unint64_t v9 = (const __CFData *)(*(uint64_t (**)(const __CFData *, const AudioObjectPropertyAddress *, uint64_t, _DWORD *))(*(void *)v9 + 32LL))( v9,  a2,  a3,  a4);
            }
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              unint64_t v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }

          else
          {
            unint64_t v9 = 0LL;
          }

          std::__shared_weak_count::__release_weak(v11);
        }

        else
        {
          unint64_t v9 = 0LL;
        }

        sub_85B80((uint64_t *)&v29);
        return (uint64_t)v9;
      }

      return sub_21524(a1, a2, a3, a4);
    }
  }

  else if (mSelector != 1064725619 && mSelector != 1668049764)
  {
    if (mSelector == 1684435056)
    {
      if ((_DWORD)a3 != 8) {
        return 0LL;
      }
      unint64_t v9 = 0LL;
      if (*a4 == 1936748595 && a4[1] == 64001)
      {
        sub_2C74C4(__p, a1);
        unint64_t v9 = sub_2C7AE8(*(const __CFData **)&__p[8]);
        sub_39FD8(__p);
      }

      return (uint64_t)v9;
    }

    return sub_21524(a1, a2, a3, a4);
  }

  return (uint64_t)v9;
}

void sub_2C3A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  std::__shared_weak_count::__release_weak(v4);
  sub_85B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2C3AA4(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v29 = (os_log_t *)sub_138E8(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = *a2;
      int v66 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)&v67, (unsigned int *)&v65);
      uint64_t v31 = v68 >= 0 ? &v67 : (__int128 *)v67;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 352;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = v31;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  __p,  0x1Cu);
      if (SHIBYTE(v68) < 0) {
        operator delete((void *)v67);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v33 = (os_log_t *)sub_138E8(13);
    __int16 v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = *a2;
      int v66 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)&v67, (unsigned int *)&v65);
      unint64_t v35 = v68 >= 0 ? &v67 : (__int128 *)v67;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 353;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = v35;
      *(_WORD *)&__p[28] = 1024;
      *(_DWORD *)__int128 v70 = a3;
      *(_WORD *)&v70[4] = 2048;
      *(void *)&v70[6] = a4;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (SHIBYTE(v68) < 0) {
        operator delete((void *)v67);
      }
    }

    uint64_t v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v36 = &off_4865A0;
    v36[2] = 561211770;
  }

  if (!a6)
  {
    unint64_t v37 = (os_log_t *)sub_138E8(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = *a2;
      int v66 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)&v67, (unsigned int *)&v65);
      uint64_t v39 = v68 >= 0 ? &v67 : (__int128 *)v67;
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 354;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = "outData";
      *(_WORD *)&__p[28] = 2080;
      *(void *)__int128 v70 = v39;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  __p,  0x26u);
      if (SHIBYTE(v68) < 0) {
        operator delete((void *)v67);
      }
    }

    unint64_t v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v40 = &off_4865A0;
    void v40[2] = 561211770;
  }

  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 > 1835103843)
  {
    switch(v12)
    {
      case 1986164323:
        CFTypeRef v18 = operator new(4uLL);
        *(void *)std::string __p = v18;
        *CFTypeRef v18 = 1886613611;
        *(void *)&__p[8] = v18 + 1;
        *(void *)&__p[16] = v18 + 1;
        strcpy(&__p[24], "cwdv");
        v70[2] = 0;
        *(_DWORD *)&v70[10] = 3;
        v72[0] = 0LL;
        v72[1] = 0LL;
        __int16 v71 = v72;
        int v73 = 44739242;
        CFTypeRef cf = 0LL;
        sub_3710DC((uint64_t *)&v67, a1, (uint64_t)__p);
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v72[0]);
        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }

        if (v68 == 1)
        {
          uint64_t v19 = *(std::__shared_weak_count **)(*((void *)&v67 + 1) + 24LL);
          if (v19)
          {
            uint64_t v20 = *(void *)(*((void *)&v67 + 1) + 16LL);
            p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
            do
              unint64_t v22 = __ldxr(p_shared_weak_owners);
            while (__stxr(v22 + 1, p_shared_weak_owners));
            unint64_t v23 = std::__shared_weak_count::lock(v19);
            *(void *)&__p[8] = v23;
            if (v23)
            {
              int v24 = v23;
              *(void *)std::string __p = v20;
              if (v20) {
                (*(void (**)(uint64_t, uint64_t *, uint64_t, _DWORD *, UInt32 *, float *))(*(void *)v20 + 40LL))( v20,  a2,  a3,  a4,  a5,  a6);
              }
              p_shared_owners = (unint64_t *)&v24->__shared_owners_;
              do
                unint64_t v26 = __ldaxr(p_shared_owners);
              while (__stlxr(v26 - 1, p_shared_owners));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }

            std::__shared_weak_count::__release_weak(v19);
          }
        }

        sub_85B80((uint64_t *)&v67);
        break;
      case 1937208176:
        UInt32 v27 = *a5;
        if (v27 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          uint64_t v57 = (os_log_t *)sub_138E8(13);
          uint64_t v58 = *v57;
          if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
          {
            uint64_t v65 = *a2;
            int v66 = *((_DWORD *)a2 + 2);
            sub_613AC((uint64_t)&v67, (unsigned int *)&v65);
            int v59 = SHIBYTE(v68);
            char v60 = (__int128 *)v67;
            UInt32 v61 = *a5;
            int v62 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            unsigned int v63 = &v67;
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
            if (v59 < 0) {
              unsigned int v63 = v60;
            }
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = 390;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&_BYTE __p[20] = v63;
            *(_WORD *)&__p[28] = 1024;
            *(_DWORD *)__int128 v70 = v61;
            *(_WORD *)&v70[4] = 1024;
            *(_DWORD *)&v70[6] = v62;
            _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              __p,
              0x28u);
            if (SHIBYTE(v68) < 0) {
              operator delete((void *)v67);
            }
          }

          char v64 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v64 = &off_4865A0;
          v64[2] = 561211770;
        }

        *(_DWORD *)a6 = sub_7531C();
        break;
      case 1835103844:
        UInt32 v15 = *a5;
        if (v15 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          float v49 = (os_log_t *)sub_138E8(13);
          unsigned int v50 = *v49;
          if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
          {
            uint64_t v65 = *a2;
            int v66 = *((_DWORD *)a2 + 2);
            sub_613AC((uint64_t)&v67, (unsigned int *)&v65);
            int v51 = SHIBYTE(v68);
            int v52 = (__int128 *)v67;
            UInt32 v53 = *a5;
            int v54 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            int v55 = &v67;
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
            if (v51 < 0) {
              int v55 = v52;
            }
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = 361;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&_BYTE __p[20] = v55;
            *(_WORD *)&__p[28] = 1024;
            *(_DWORD *)__int128 v70 = v53;
            *(_WORD *)&v70[4] = 1024;
            *(_DWORD *)&v70[6] = v54;
            _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              __p,
              0x28u);
            if (SHIBYTE(v68) < 0) {
              operator delete((void *)v67);
            }
          }

          char v56 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v56 = &off_4865A0;
          v56[2] = 561211770;
        }

        LODWORD(v67) = 1986290211;
        *(void *)((char *)&v67 + 4) = *(uint64_t *)((char *)a2 + 4);
        LODWORD(v65) = 16;
        sub_232A4(a1, (const AudioObjectPropertyAddress *)&v67, 0, 0LL, (UInt32 *)&v65, (float *)__p);
        float v16 = *(double *)__p;
        *a6 = v16;
        break;
      default:
        goto LABEL_37;
    }
  }

  else
  {
    if (v12 != 1064725619)
    {
      if (v12 == 1668049764)
      {
        sub_372174(a1, a5, a6);
        return;
      }

      if (v12 == 1684435056)
      {
        if ((_DWORD)a3 == 8 && *a4 == 1936748595 && a4[1] == 64001)
        {
          sub_2C74C4(__p, a1);
          unint64_t v13 = *(const __CFData **)&__p[8];
          if (*(void *)&__p[8])
          {
            BytePtr = CFDataGetBytePtr(*(CFDataRef *)&__p[8]);
            unint64_t v13 = *(const __CFData **)&__p[8];
          }

          else
          {
            BytePtr = 0LL;
          }

          uint64_t v28 = sub_2C7AE8(v13);
          memcpy(a6, BytePtr, (size_t)v28);
          sub_39FD8(__p);
        }

        return;
      }

void sub_2C4528( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2C4598( uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, uint64_t a5, void *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v25 = (os_log_t *)sub_138E8(13);
    unint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&v43, (unsigned int *)&v41);
      UInt32 v27 = v45 >= 0 ? &v43 : (void **)v43;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 414;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = v27;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  __p,  0x1Cu);
      if (SHIBYTE(v45) < 0) {
        operator delete(v43);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    uint64_t v29 = (os_log_t *)sub_138E8(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&v43, (unsigned int *)&v41);
      uint64_t v31 = v45 >= 0 ? &v43 : (void **)v43;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 415;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = v31;
      *(_WORD *)&__p[28] = 1024;
      *(_DWORD *)int v47 = a3;
      *(_WORD *)&v47[4] = 2048;
      *(void *)&v47[6] = a4;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (SHIBYTE(v45) < 0) {
        operator delete(v43);
      }
    }

    uint8x8_t v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint8x8_t v32 = &off_4865A0;
    v32[2] = 561211770;
  }

  if (!a6)
  {
    int v33 = (os_log_t *)sub_138E8(13);
    __int16 v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&v43, (unsigned int *)&v41);
      unint64_t v35 = v45 >= 0 ? &v43 : (void **)v43;
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 416;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = "inData";
      *(_WORD *)&__p[28] = 2080;
      *(void *)int v47 = v35;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  __p,  0x26u);
      if (SHIBYTE(v45) < 0) {
        operator delete(v43);
      }
    }

    uint64_t v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v36 = &off_4865A0;
    v36[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    unint64_t v37 = (os_log_t *)sub_138E8(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&v43, (unsigned int *)&v41);
      uint64_t v39 = v45 >= 0 ? &v43 : (void **)v43;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 417;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = v39;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  __p,  0x1Cu);
      if (SHIBYTE(v45) < 0) {
        operator delete(v43);
      }
    }

    unint64_t v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v40 = &off_4865A0;
    void v40[2] = 1852797029;
  }

  if (a2->mSelector == 1986164323)
  {
    float v16 = operator new(4uLL);
    *(void *)std::string __p = v16;
    *float v16 = 1886613611;
    *(void *)&__p[8] = v16 + 1;
    *(void *)&__p[16] = v16 + 1;
    strcpy(&__p[24], "cwdv");
    v47[2] = 0;
    *(_DWORD *)&v47[10] = 3;
    v49[0] = 0LL;
    v49[1] = 0LL;
    int64x2_t v48 = v49;
    int v50 = 44739242;
    CFTypeRef cf = 0LL;
    sub_3710DC((uint64_t *)&v43, a1, (uint64_t)__p);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v49[0]);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }

    if (v45 == 1)
    {
      UInt32 v17 = *(std::__shared_weak_count **)(v44 + 24);
      if (v17)
      {
        uint64_t v18 = *(void *)(v44 + 16);
        p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
        do
          unint64_t v20 = __ldxr(p_shared_weak_owners);
        while (__stxr(v20 + 1, p_shared_weak_owners));
        int v21 = std::__shared_weak_count::lock(v17);
        *(void *)&__p[8] = v21;
        if (v21)
        {
          unint64_t v22 = v21;
          *(void *)std::string __p = v18;
          if (v18) {
            (*(void (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, void *))(*(void *)v18 + 48LL))( v18,  a2,  a3,  a4,  a5,  a6);
          }
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            unint64_t v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }

        std::__shared_weak_count::__release_weak(v17);
      }
    }

    sub_85B80((uint64_t *)&v43);
  }

  else if (a2->mSelector == 1396926579)
  {
    memset(__p, 0, 24);
    sub_B7A8C(__p, a6, (uint64_t)a6 + 4 * (a5 >> 2), a5 >> 2);
    int v12 = sub_2C63E0(a1, (unsigned int **)__p);
    if (*(void *)__p) {
      operator delete(*(void **)__p);
    }
    if (v12)
    {
      unint64_t v13 = (os_log_t *)sub_138E8(13);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 426;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result): Error setting output data sources",  __p,  0x12u);
        }
      }

      UInt32 v15 = __cxa_allocate_exception(0x10uLL);
      *(void *)UInt32 v15 = &off_4865A0;
      v15[2] = v12;
    }
  }

  else
  {
    sub_3686A0(a1, a2, a3, a4, a5, (float *)a6);
  }

void sub_2C4CC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
}

uint64_t sub_2C4D20(os_unfair_lock_s *a1)
{
  if (!dword_49DAC8
    && ((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312LL))(a1) & 0xFF00000000LL) == 0)
  {
    unsigned int v83 = (os_log_t *)sub_138E8(13);
    uint64_t v84 = *v83;
    if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 653;
      _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): TapStream is enabled by policy but not found",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "TapStream is enabled by policy but not found");
  }

  sub_31821C();
  if (dword_49DAC8
    && ((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312LL))(a1) & 0xFF00000000LL) != 0)
  {
    __int16 v77 = (os_log_t *)sub_138E8(13);
    std::string v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 654;
      _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): TapStream is disabled by policy but found",  (uint8_t *)buf,  0x12u);
    }

    __int16 v79 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v79, "TapStream is disabled by policy but found");
  }

  AudioObjectID v2 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  double v100 = 0.0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"#bdvptuo";
  inAddress.AudioObjectPropertyElement mElement = 0;
  double outData = 0.0;
  if (AudioObjectHasProperty(v2, &inAddress))
  {
    LODWORD(ioDataSize[0].__r_.__value_.__l.__data_) = 16;
    if (AudioObjectGetPropertyData(v2, &inAddress, 0, 0LL, (UInt32 *)ioDataSize, &outData))
    {
      unint64_t v80 = (os_log_t *)sub_138E8(13);
      uint64_t v81 = *v80;
      if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 465;
        _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not retrieve hardware volume range",  (uint8_t *)buf,  0x12u);
      }

      os_log_t v82 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v82, "Could not retrieve hardware volume range");
    }

    double v3 = outData;
    if (outData < -58.0) {
      double v3 = -58.0;
    }
    double outData = v3;
  }

  uint64_t v97 = 0x676C6F626D757465LL;
  int v98 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v97))
  {
    LODWORD(buf[0]) = 1;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, _OWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                             + 48LL))( a1,  &v97,  0LL,  0LL,  4LL,  buf);
  }

  char v4 = operator new(0x1E0uLL);
  sub_1C8600((uint64_t)v4, (uint64_t)a1, 0, 74, outData, v100);
  sub_1D5AE0(a1, (uint64_t)v4);
  sub_1D55D4((uint64_t *)a1, 1u, 1886613611LL, (uint64_t)v4);
  sub_1D580C((uint64_t)a1, 1u, 1886613611LL, (uint64_t)v4);
  sub_31821C();
  char v5 = (os_log_t *)sub_138E8(17);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 495;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a speaker port", (uint8_t *)buf, 0x12u);
  }

  unint64_t v7 = (std::__shared_weak_count *)operator new(0x258uLL);
  *(_OWORD *)&v7->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_47BE40;
  uint64_t v9 = &v7[1].__vftable;
  memset(ioDataSize, 0, 24);
  sub_F9530((uint64_t)buf, qword_4A0A60);
  CFStringRef v105 = CFStringCreateWithCString(0LL, "Speaker", 0x600u);
  char v106 = 1;
  int v107 = 0LL;
  uint64_t v108 = 0LL;
  uint64_t v109 = 0LL;
  sub_7D084(__p, "");
  sub_F9638( (uint64_t)&v7[1],  &qword_4A0A60,  (uint64_t)a1,  (uint64_t)ioDataSize,  (uint64_t)buf,  (uint64_t)&v105,  &v107,  (__int128 *)__p);
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
  LOWORD(v7[22].__shared_weak_owners_) = 0;
  if (v103 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = &v107;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)&v105);
  sub_19DFC((uint64_t)&v112);
  sub_19DFC((uint64_t)&buf[1]);
  sub_19DFC((uint64_t)buf);
  void *v9 = off_481B68;
  sub_31821C();
  LODWORD(v7[23].__vftable) = dword_49DAD0;
  sub_142EF4((uint64_t)&v7[23].__shared_owners_, qword_49DAD8);
  *(_OWORD *)&v7[24].__shared_owners_ = xmmword_49DAF0;
  *(void *)&__int128 v104 = v7 + 1;
  *((void *)&v104 + 1) = v7;
  shared_weak_owners = (std::__shared_weak_count *)v7[4].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_30;
    }
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v7[4].__shared_owners_ = (uint64_t)v9;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  else
  {
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    UInt32 v15 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v7[4].__shared_owners_ = (uint64_t)v9;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
  }

  do
    unint64_t v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }

void sub_2C5DA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, char a36)
{
}

uint64_t sub_2C5F84(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886613618 && a2 != 1886613611)
  {
    char v4 = (os_log_t *)sub_138E8(17);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v14 = "Device_Speaker_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 546;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v14 = "Device_Speaker_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 547;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_2C613C(_Unwind_Exception *a1)
{
}

void sub_2C6158(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  if (*(_DWORD *)(a2 + 144) != 1886613611)
  {
    int v16 = (os_log_t *)sub_138E8(13);
    __int16 v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Speaker_Aspen.cpp";
      __int16 v22 = 1024;
      int v23 = 555;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to get trim gains on non-speaker port",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to get trim gains on non-speaker port");
  }

  char v5 = 0LL;
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x6F75747061747363LL;
  for (int i = 1; i != 5; ++i)
  {
    *(_DWORD *)&uint8_t buf[8] = i;
    int v19 = 4;
    int v20 = 0;
    (*(void (**)(uint64_t, _BYTE *, void, void, int *, int *))(*(void *)a1 + 40LL))( a1,  buf,  0LL,  0LL,  &v19,  &v20);
    if (v5 >= v7)
    {
      uint64_t v10 = (v5 - v6) >> 2;
      unint64_t v11 = v10 + 1;
      if ((v7 - v6) >> 1 > v11) {
        unint64_t v11 = (v7 - v6) >> 1;
      }
      char v12 = (char *)((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v11);
      if (v12) {
        char v12 = (char *)sub_7A890((unint64_t)v12);
      }
      else {
        uint64_t v13 = 0LL;
      }
      unint64_t v14 = &v12[4 * v10];
      *(_DWORD *)unint64_t v14 = v20;
      uint64_t v9 = v14 + 4;
      while (v5 != v6)
      {
        int v15 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v14 - 1) = v15;
        v14 -= 4;
      }

      unint64_t v7 = &v12[4 * v13];
      *a3 = v14;
      a3[1] = v9;
      a3[2] = v7;
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = v14;
    }

    else
    {
      *(_DWORD *)char v5 = v20;
      uint64_t v9 = v5 + 4;
    }

    a3[1] = v9;
    char v5 = v9;
  }

void sub_2C63A4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2C63E0(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = sub_138E8(17);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    char v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_8F640(&__p, *a2, a2[1]);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v10 = "Device_Speaker_Aspen.cpp";
        __int16 v11 = 1024;
        int v12 = 679;
        __int16 v13 = 2080;
        unint64_t v14 = p_p;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting output data sources: [%s]", buf, 0x1Cu);
      }
    }
  }

  return sub_2C6504(*(_DWORD *)(a1 + 268), (uint64_t)&qword_49CC00, (uint64_t)a2);
}

uint64_t sub_2C6504(AudioObjectID a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(13);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    unint64_t v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        v114.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v114.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v115, (unsigned int *)&v114);
        uint64_t v8 = v115.__m_.__opaque[15] >= 0 ? &v115 : (std::mutex *)v115.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v105 = 1024;
        int v106 = 166;
        __int16 v107 = 2080;
        *(void *)uint64_t v108 = v8;
        *(_WORD *)&v108[8] = 1024;
        *(_DWORD *)&v108[10] = a1;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v115.__m_.__opaque[15] < 0) {
          operator delete((void *)v115.__m_.__sig);
        }
      }
    }
  }

  uint64_t v100 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  AudioObjectID v99 = a1;
  int v101 = v9;
  int v102 = 0;
  uint64_t v103 = 0LL;
  sub_2C7218((uint64_t)&v115, (uint64_t)&v99);
  if (*(_DWORD *)&v115.__m_.__opaque[16]) {
    goto LABEL_10;
  }
  __int128 v96 = 0LL;
  uint64_t v97 = 0LL;
  uint64_t v98 = 0LL;
  sub_7A5B8( &v96,  (const void *)v115.__m_.__sig,  *(uint64_t *)v115.__m_.__opaque,  (*(void *)v115.__m_.__opaque - v115.__m_.__sig) >> 2);
  unint64_t v93 = 0LL;
  __int128 v94 = 0LL;
  uint64_t v95 = 0LL;
  sub_7A5B8(&v93, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  int v21 = v96;
  __int16 v22 = v93;
  if (v97 - v96 != v94 - v93)
  {
    BOOL v23 = 0;
    if (!v93) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

  BOOL v23 = memcmp(v96, v93, v97 - v96) == 0;
  if (v22)
  {
LABEL_35:
    __int128 v94 = v22;
    operator delete(v22);
  }

void sub_2C70F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2C7218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v21;
  if (v21)
  {
    unint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v15);
        __int16 v11 = v19;
        if (v9 < 0) {
          __int16 v11 = v10;
        }
        int v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          int v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        int v27 = v11;
        __int16 v28 = 2080;
        unint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
  }

void sub_2C740C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_2C7448(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47BE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2C7458(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47BE78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2C7478(uint64_t a1)
{
  return sub_F8158(a1 + 24);
}

void sub_2C7484(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47BE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2C7494(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47BE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2C74B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2C74C4(void *a1, uint64_t a2)
{
  *a1 = &off_47BE20;
  a1[1] = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a2 + 16LL))(a2, &qword_49CC10))
  {
    strcpy((char *)v27, "tDCSptuo");
    BYTE1(v27[1]) = 0;
    WORD1(v27[1]) = 0;
    if ((sub_5C3C4(a2) & 1) != 0)
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
      v35[4] = 0;
      LOBYTE(v36) = 0;
      *(_DWORD *)__int16 v28 = sub_5C41C(a2);
      if (*(_DWORD *)v28)
      {
        v26[0] = 0LL;
        *(_DWORD *)AudioObjectPropertyAddress buf = sub_5C474(a2);
        if (!*(_DWORD *)buf)
        {
          LOBYTE(v36) = 1;
          *(void *)&v35[4] = &off_47BE20;
          *(void *)&v35[12] = v26[0];
          std::string __p = &off_47BE20;
          CFDictionaryRef theDict = 0LL;
          sub_39FD8(&__p);
        }
      }

      if (!*(_DWORD *)buf && (_BYTE)v36)
      {
        bytes[0] = (UInt8 *)off_485B28;
        uint64_t v4 = *(void *)&v35[12];
        if (*(void *)&v35[12])
        {
          CFRetain(*(CFTypeRef *)&v35[12]);
          bytes[0] = (UInt8 *)&off_47BE20;
          if (!(_BYTE)v36) {
            goto LABEL_19;
          }
        }

        else
        {
          bytes[0] = (UInt8 *)&off_47BE20;
        }

        sub_39FD8(&v35[4]);
LABEL_19:
        a1[1] = v4;
        bytes[1] = 0LL;
        sub_39FD8(bytes);
        return;
      }
    }

    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 2003332927;
      v35[4] = 0;
      LOBYTE(v36) = 0;
    }

    exception = __cxa_allocate_exception(0x10uLL);
    int v21 = *(_DWORD *)buf;
    *(void *)exception = &off_4865A0;
    exception[2] = v21;
  }

  strcpy((char *)bytes, "eDCSptuo");
  BYTE1(bytes[1]) = 0;
  WORD1(bytes[1]) = 0;
  sub_1EF338((uint64_t)buf, a2);
  if (*(_DWORD *)buf || !(_BYTE)v36)
  {
    __int16 v22 = __cxa_allocate_exception(0x10uLL);
    int v23 = *(_DWORD *)buf;
    *(void *)__int16 v22 = &off_4865A0;
    v22[2] = v23;
  }

  std::string __p = off_485B28;
  UInt32 v5 = *(const __CFDictionary **)&v35[12];
  if (!*(void *)&v35[12])
  {
    std::string __p = &off_486378;
    CFDictionaryRef theDict = 0LL;
    goto LABEL_22;
  }

  CFRetain(*(CFTypeRef *)&v35[12]);
  std::string __p = &off_486378;
  CFDictionaryRef theDict = v5;
  if ((_BYTE)v36)
  {
LABEL_22:
    sub_39FD8(&v35[4]);
    UInt32 v5 = theDict;
  }

  sub_78300((uint64_t)buf, v5, @"Version");
  unsigned int v6 = sub_3A030(*(const __CFNumber **)&v35[4]);
  sub_39FD8(buf);
  sub_78300((uint64_t)buf, theDict, @"NumSpkCalibs");
  unsigned int v7 = sub_3A030(*(const __CFNumber **)&v35[4]);
  sub_39FD8(buf);
  sub_78300((uint64_t)buf, theDict, @"BytesPerSpkCalib");
  unsigned int v8 = sub_3A030(*(const __CFNumber **)&v35[4]);
  sub_39FD8(buf);
  if (v7)
  {
    if (v6 == 2) {
      unsigned int v9 = 12;
    }
    else {
      unsigned int v9 = v8 * v7 + 4;
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  uint64_t v10 = (os_log_t *)sub_138E8(17);
  __int16 v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)unint64_t v35 = "Device_Speaker_Aspen.cpp";
    *(_WORD *)&v35[8] = 1024;
    *(_DWORD *)&v35[10] = 135;
    *(_WORD *)&v35[14] = 1024;
    *(_DWORD *)&v35[16] = v6;
    LOWORD(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 2) = v7;
    HIWORD(v36) = 1024;
    unsigned int v37 = v8;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d version: %u, NumSpkCalibs: %u, BytesPerSpkCalib: %u",  buf,  0x24u);
  }

  sub_39FD8(&__p);
  if (v9)
  {
    uint64_t v12 = 2003329396LL;
    strcpy(v28, "aDCSptuo");
    char v29 = 0;
    __int16 v30 = 0;
    if ((sub_5C3C4(a2) & 1) != 0)
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
      v35[4] = 0;
      LOBYTE(v37) = 0;
      unsigned int v13 = sub_5C41C(a2);
      unsigned int v33 = v13;
      if (!v13)
      {
        uint64_t v12 = 0LL;
        v27[0] = 0LL;
        v27[1] = 0LL;
LABEL_45:
        memset(bytes, 0, sizeof(bytes));
        sub_2C7B04(bytes, v27[0], v12, v12 - (unint64_t)v27[0]);
        if (v27[0]) {
          operator delete(v27[0]);
        }
        int v19 = bytes[0];
        a1[1] = CFDataCreate(0LL, bytes[0], v9);
        v26[0] = &off_47BE20;
        v26[1] = 0LL;
        sub_39FD8(v26);
        if (v19) {
          operator delete(v19);
        }
        return;
      }

      sub_D09A4(&__p, v13);
      int v14 = sub_5C474(a2);
      int v15 = v14;
      *(_DWORD *)AudioObjectPropertyAddress buf = v14;
      if (v14)
      {
        int v16 = 0;
        LOBYTE(v27[0]) = 0;
        int v17 = v14;
      }

      else
      {
        *(void *)&v35[4] = 0LL;
        *(void *)&v35[12] = 0LL;
        uint64_t v36 = 0LL;
        sub_2C7B04(&v35[4], __p, (uint64_t)theDict, theDict - (CFDictionaryRef)__p);
        int v16 = 1;
        LOBYTE(v37) = 1;
        int v17 = *(_DWORD *)buf;
        uint64_t v18 = *(void *)&v35[12];
        *(_OWORD *)int v27 = *(_OWORD *)&v35[4];
        *(void *)&v35[12] = 0LL;
        uint64_t v36 = 0LL;
        *(void *)&v35[4] = 0LL;
        uint64_t v12 = v18;
      }

      if (__p)
      {
        CFDictionaryRef theDict = (CFDictionaryRef)__p;
        operator delete(__p);
      }

      if (!v15 && *(void *)&v35[4]) {
        operator delete(*(void **)&v35[4]);
      }
      if (!v17)
      {
        if (v16) {
          goto LABEL_45;
        }
        int v17 = 0;
      }
    }

    else
    {
      LOBYTE(v27[0]) = 0;
      int v17 = 2003332927;
    }

    char v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v24 = &off_4865A0;
    v24[2] = v17;
  }

void sub_2C7A5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, char a26)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFDataRef sub_2C7AE8(const __CFData *result)
{
  if (result) {
    return (const __CFData *)CFDataGetLength(result);
  }
  return result;
}

void *sub_2C7B04(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unsigned int v6 = result;
    uint64_t result = sub_D0AA0(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_2C7B60(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_2C7B80(void *a1)
{
  uint64_t v1 = sub_39FD8(a1);
  operator delete(v1);
}

BOOL sub_2C7B94(uint64_t a1)
{
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1 + 128LL))(theString1);
  BOOL v1 = CFStringCompare(theString1[0], @"Speaker", 0LL) == kCFCompareEqualTo;
  sub_19DFC((uint64_t)theString1);
  return v1;
}

void sub_2C7BEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2C7C00(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_49CC40);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_49CC40))
  {
    byte_49CC3C = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &qword_49CC00);
    __cxa_guard_release(&qword_49CC40);
  }

  return byte_49CC3C;
}

void sub_2C7C80(_Unwind_Exception *a1)
{
}

void sub_2C7C98(uint64_t a1, int a2, uint64_t a3)
{
  if ((sub_2C7C00(a1) & 1) == 0)
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&void v25[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&v25[12] = 1024;
      *(_DWORD *)&v25[14] = 188;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v25, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_31821C();
  *(void *)&v25[8] = 0LL;
  *(void *)&v25[16] = 0LL;
  *(void *)uint64_t v25 = &v25[8];
  uint64_t v6 = qword_49DA98;
  do
  {
    sub_2C8040((uint64_t ***)v25, (uint64_t **)&v25[8], *(_DWORD *)(v6 + 32), v6 + 32);
    uint64_t v7 = *(uint64_t **)(v6 + 8);
    if (v7)
    {
      do
      {
        size_t v8 = v7;
        uint64_t v7 = (uint64_t *)*v7;
      }

      while (v7);
    }

    else
    {
      do
      {
        size_t v8 = *(uint64_t **)(v6 + 16);
        BOOL v9 = *v8 == v6;
        uint64_t v6 = (uint64_t)v8;
      }

      while (!v9);
    }

    uint64_t v6 = (uint64_t)v8;
  }

  while (v8 != &qword_49DAA0);
  uint64_t v10 = *(uint64_t **)&v25[8];
  if (!*(void *)&v25[8])
  {
LABEL_15:
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    unsigned int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)char v24 = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = 190;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Precondition failure.");
  }

  while (1)
  {
    int v11 = *((_DWORD *)v10 + 8);
    if (v11 <= a2) {
      break;
    }
LABEL_14:
    uint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_15;
    }
  }

  if (v11 < a2)
  {
    ++v10;
    goto LABEL_14;
  }

  *(_DWORD *)(a1 + 492) = a2;
  int v15 = (os_log_t *)sub_138E8(17);
  int v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)char v24 = "Device_Speaker_Aspen.cpp";
    *(_WORD *)&v24[8] = 1024;
    *(_DWORD *)&v24[10] = 206;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "%25s:%-5d Notifying listeners about speaker channel configuration change",  buf,  0x12u);
  }

  uint64_t v17 = sub_32918();
  unsigned int v22 = 1886613611;
  sub_7A22C((uint64_t)buf, &v22, 1LL);
  unsigned int v21 = 0;
  sub_395F90(v17, a3, (uint64_t)buf, &v21);
  sub_32C8C(*(void **)&v24[4]);
  sub_2C8000(*(void **)&v25[8]);
}

void sub_2C7FA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_2C8000(void *a1)
{
  if (a1)
  {
    sub_2C8000(*a1);
    sub_2C8000(a1[1]);
    sub_E3790(a1 + 4);
    operator delete(a1);
  }

void sub_2C8040(uint64_t ***a1, uint64_t **a2, int a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  if (a1 + 1 != (uint64_t ***)a2)
  {
    int v7 = *((_DWORD *)a2 + 8);
    if (v7 <= a3)
    {
      if (v7 >= a3) {
        return;
      }
      uint64_t v12 = a2 + 1;
      int v11 = a2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (uint64_t **)v11;
          int v11 = (uint64_t *)*v11;
          unsigned int v13 = v12;
          int v14 = (uint64_t *)v12;
        }

        while (v11);
      }

      else
      {
        int v14 = (uint64_t *)a2;
        do
        {
          int v19 = v14;
          int v14 = (uint64_t *)v14[2];
        }

        while ((uint64_t *)*v14 != v19);
        unsigned int v13 = a2;
      }

      if (v14 != v6 && *((_DWORD *)v14 + 8) <= a3)
      {
        char v20 = (uint64_t *)*v6;
        uint64_t v12 = (uint64_t **)(a1 + 1);
        unsigned int v13 = (uint64_t **)(a1 + 1);
        if (!*v6) {
          goto LABEL_44;
        }
        uint64_t v12 = (uint64_t **)(a1 + 1);
        while (1)
        {
          while (1)
          {
            unsigned int v13 = (uint64_t **)v20;
            int v21 = *((_DWORD *)v20 + 8);
            if (v21 <= a3) {
              break;
            }
            char v20 = *v13;
            uint64_t v12 = v13;
            if (!*v13) {
              goto LABEL_44;
            }
          }

          if (v21 >= a3) {
            break;
          }
          uint64_t v12 = v13 + 1;
          char v20 = v13[1];
          if (!v20) {
            goto LABEL_44;
          }
        }
      }

void sub_2C8288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  UInt32 v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }

  sub_2C82B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2C82B4(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_E3790(v1 + 4);
    }
    operator delete(v1);
  }

void sub_2C82FC(uint64_t a1)
{
  unsigned __int8 v1 = (void *)sub_2C8BA8(a1);
  operator delete(v1);
}

BOOL sub_2C8310(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v22 = 1024;
      *(_DWORD *)int v23 = 610;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (*a2 == 1987013741) {
    goto LABEL_5;
  }
  if (*a2 == 1986817377)
  {
    size_t v8 = (void *)a1[29];
    *(_DWORD *)std::string __p = 1986817377;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&uint8_t buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_1885D4(v8, (unsigned int *)__p, (unsigned int *)buf);
LABEL_5:
    *(_DWORD *)std::string __p = 1987013732;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    BOOL v9 = (void *)a1[29];
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&uint8_t buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_1885D4(v9, (unsigned int *)__p, (unsigned int *)buf);
    return 1LL;
  }

  int v11 = (os_log_t *)sub_138E8(17);
  uint64_t v12 = *v11;
  if (*v11)
  {
    BOOL result = os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v17 = *(void *)a2;
    int v18 = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)&v17);
    if (v20 >= 0) {
      unsigned int v13 = __p;
    }
    else {
      unsigned int v13 = *(_BYTE **)__p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v22 = 1024;
    *(_DWORD *)int v23 = 636;
    *(_WORD *)&v23[4] = 2080;
    *(void *)&v23[6] = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported address: %s", buf, 0x1Cu);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }

  return 0LL;
}

BOOL sub_2C857C(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v22 = 1024;
      *(_DWORD *)int v23 = 649;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (*a2 == 1987013741) {
    goto LABEL_5;
  }
  if (*a2 == 1986817377)
  {
    size_t v8 = (uint64_t **)a1[29];
    *(_DWORD *)std::string __p = 1986817377;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&uint8_t buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_18803C(v8, (unsigned int *)__p, (unsigned int *)buf);
LABEL_5:
    *(_DWORD *)std::string __p = 1987013732;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    BOOL v9 = (uint64_t **)a1[29];
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&uint8_t buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_18803C(v9, (unsigned int *)__p, (unsigned int *)buf);
    return 1LL;
  }

  int v11 = (os_log_t *)sub_138E8(17);
  uint64_t v12 = *v11;
  if (*v11)
  {
    BOOL result = os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v17 = *(void *)a2;
    int v18 = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)&v17);
    if (v20 >= 0) {
      unsigned int v13 = __p;
    }
    else {
      unsigned int v13 = *(_BYTE **)__p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v22 = 1024;
    *(_DWORD *)int v23 = 670;
    *(_WORD *)&v23[4] = 2080;
    *(void *)&v23[6] = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown address: %s", buf, 0x1Cu);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }

  return 0LL;
}

void sub_2C87E8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFF00000000LL) == 0) {
    LODWORD(a3) = 0;
  }
  sub_2C8BF8(a1, a2, a3, a4);
  *(_BYTE *)(a1 + 202) = 0;
}

void sub_2C8814()
{
  v0 = (os_log_t *)sub_138E8(13);
  unsigned __int8 v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v5 = 1024;
      int v6 = 382;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Not implemented for Software only volume control",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented for Software only volume control");
}

void sub_2C88D4(_Unwind_Exception *exception_object)
{
}

double sub_2C88F0(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

double sub_2C88F8()
{
  return 0.0;
}

void sub_2C8904(uint64_t a1)
{
  uint64_t v2 = sub_138E8(18);
  uint64_t v3 = sub_138E8(38);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  BOOL v9 = *(os_log_s **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v24 = 1024;
    int v25 = 391;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling software mute", buf, 0x12u);
  }

  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 184);
  if (v10)
  {
    int v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 176);
      if (v12)
      {
        (*(void (**)(uint64_t, void))(*(void *)v12 + 104LL))(v12, 0LL);
LABEL_25:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }

        return;
      }
    }
  }

  else
  {
    int v11 = 0LL;
  }

  uint64_t v13 = sub_138E8(18);
  uint64_t v14 = sub_138E8(38);
  char v15 = 0;
  uint64_t v16 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&buf[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1LL;
    if ((v19 & 1) != 0) {
      goto LABEL_21;
    }
  }

  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
LABEL_21:
  char v20 = *(os_log_s **)v13;
  if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v24 = 1024;
    int v25 = 398;
    _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software command expired", buf, 0x12u);
  }

  if (v11) {
    goto LABEL_25;
  }
}

void sub_2C8B68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2C8B80(uint64_t a1)
{
  return sub_2C8BA8(a1 - 80);
}

void sub_2C8B88(uint64_t a1)
{
  unsigned __int8 v1 = (void *)sub_2C8BA8(a1 - 80);
  operator delete(v1);
}

void sub_2C8BA0(uint64_t a1)
{
}

uint64_t sub_2C8BA8(uint64_t a1)
{
  *(void *)a1 = off_47BEB0;
  *(void *)(a1 + 80) = off_47BF78;
  sub_7A768(a1 + 232);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 184);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_32C8C(*(void **)(a1 + 136));
  return sub_F3008(a1);
}

void sub_2C8BF8(uint64_t a1, double *a2, unsigned int a3, uint64_t a4)
{
  if (a2[1] < *a2)
  {
    unint64_t v35 = (os_log_t *)sub_138E8(13);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      double v38 = *a2;
      uint64_t v37 = *((void *)a2 + 1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)int v41 = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = 437;
      *(_WORD *)&v41[14] = 2048;
      *(void *)&v41[16] = v37;
      *(_WORD *)&v41[24] = 2048;
      *(double *)&v41[26] = v38;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)",  buf,  0x26u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)");
  }

  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 32);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  int v11 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v8;
  *(void *)(a1 + 184) = v7;
  if (v11)
  {
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 184);
  }

  *(_BYTE *)(a1 + 200) = 0;
  if (v7)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v7);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 176);
      if (v13)
      {
        (*(void (**)(uint64_t, BOOL))(*(void *)v13 + 144LL))(v13, *(void *)(a1 + 208) == 0LL);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 72LL))(v13)) {
          (*(void (**)(uint64_t, uint64_t, void, float, float))(*(void *)v13 + 64LL))( v13,  1LL,  0LL,  1.0,  0.5);
        }
        goto LABEL_14;
      }
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  if (!*(void *)(a1 + 208))
  {
    uint64_t v18 = (os_log_t *)sub_138E8(18);
    char v19 = *v18;
    if (*v18)
    {
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)int v41 = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&v41[8] = 1024;
        *(_DWORD *)&v41[10] = 445;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Requested software only volume, but given software volume command (and external volume handler proc) are null. This may be expected if waiting for the external volume handler proc for telephony",  buf,  0x12u);
      }
    }
  }

void sub_2C8FA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2C8FE4(uint64_t a1)
{
  uint64_t v2 = sub_2BC660(a1);
  *(void *)uint64_t v2 = off_47BEB0;
  *(void *)(v2 + 80) = off_47BF78;
  uint64_t v3 = v2 + 80;
  *(void *)(v2 + 92) = 1869968496LL;
  *(_OWORD *)(v2 + 104) = xmmword_403310;
  sub_157A88(v2 + 120, 0, -55.0, 0.0);
  *(void *)(a1 + 232) = 0LL;
  *(_DWORD *)(a1 + 168) = 2;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 1065353216LL;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(_DWORD *)(a1 + 199) = 0;
  *(void *)(a1 + 224) = v3;
  *(void *)(a1 + 240) = 0LL;
  sub_1C8538((uint64_t *)&v8);
  sub_127660(a1 + 232, &v8);
  char v4 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_2C90D8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  sub_7A768(v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 184);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_32C8C(*(void **)(v1 + 136));
  sub_F3008(v1);
  _Unwind_Resume(a1);
}

void sub_2C9114(CFArrayRef *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1;
  if (a2 == a3)
  {
    *a1 = 0LL;
  }

  else
  {
    char v4 = a2;
    __int128 v44 = 0uLL;
    unint64_t v45 = 0LL;
    unsigned int v43 = *(_DWORD *)a2;
    unint64_t v5 = v43;
    sub_2C9658((unsigned __int16 *)&v43);
    unsigned __int16 v6 = 0;
    unint64_t v7 = v5 >> 24;
    __int128 v8 = v4 + 4;
    unint64_t v9 = (v5 >> 24) * (unint64_t)BYTE2(v5);
    unint64_t v10 = -4LL - v9;
    do
    {
      __int16 v11 = *v4++;
      v6 += v11;
      ++v10;
    }

    while (v10);
    if (0x10000 - v6 == *(unsigned __int16 *)&v8[v9])
    {
      BOOL v42 = v3;
      if (v7 > (uint64_t)(*((void *)&v44 + 1) - v44) >> 3)
      {
        do
        {
          __int16 v12 = *(_WORD *)v8;
          int v13 = *(_DWORD *)(v8 + 2);
          CFStringRef v14 = CFStringCreateWithBytes(0LL, (const UInt8 *)"trim_gain_data_source_id", 24LL, 0x8000100u, 0);
          if (!v14)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }

          LODWORD(valuePtr[0]) = v13;
          CFNumberRef v15 = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
          CFNumberRef v47 = v15;
          if (!v15)
          {
            int v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v41, "Could not construct");
          }

          sub_2C983C(buf, v14, (const void **)&v47);
          CFStringRef v16 = CFStringCreateWithBytes(0LL, (const UInt8 *)"trim_gain_db", 12LL, 0x8000100u, 0);
          if (!v16)
          {
            double v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v38, "Could not construct");
          }

          *(float *)valuePtr = (float)v12 * 0.1;
          CFNumberRef v17 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v46 = v17;
          if (!v17)
          {
            uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v39, "Could not construct");
          }

          sub_2C983C(&buf[16], v16, (const void **)&v46);
          valuePtr[0] = buf;
          valuePtr[1] = 2LL;
          CFDictionaryRef v18 = sub_5A950((uint64_t)valuePtr);
          for (uint64_t i = 0LL; i != -32; i -= 16LL)
          {
            double v20 = *(const void **)&buf[i + 24];
            if (v20) {
              CFRelease(v20);
            }
            double v21 = *(const void **)&buf[i + 16];
            if (v21) {
              CFRelease(v21);
            }
          }

          CFRelease(v17);
          CFRelease(v16);
          CFRelease(v15);
          CFRelease(v14);
          uint64_t v22 = (void *)*((void *)&v44 + 1);
          if (*((void *)&v44 + 1) >= v45)
          {
            float v24 = (void *)v44;
            uint64_t v25 = (uint64_t)(*((void *)&v44 + 1) - v44) >> 3;
            unint64_t v26 = v25 + 1;
            uint64_t v27 = v45 - v44;
            else {
              unint64_t v28 = v26;
            }
            uint64_t v51 = &v45;
            if (v28)
            {
              unint64_t v28 = (unint64_t)sub_7DC90(v28);
              uint64_t v22 = (void *)*((void *)&v44 + 1);
              float v24 = (void *)v44;
            }

            else
            {
              uint64_t v29 = 0LL;
            }

            __int16 v30 = (CFDictionaryRef *)(v28 + 8 * v25);
            unint64_t v31 = v28 + 8 * v29;
            unint64_t v50 = v31;
            CFDictionaryRef *v30 = v18;
            *(void *)&buf[16] = v30 + 1;
            if (v22 == v24)
            {
              char v23 = v30 + 1;
            }

            else
            {
              do
              {
                double v32 = (const __CFDictionary *)*--v22;
                *--__int16 v30 = v32;
                void *v22 = 0LL;
              }

              while (v22 != v24);
              char v23 = *(void **)&buf[16];
              unint64_t v31 = v50;
            }

            __int128 v33 = v44;
            *(void *)&__int128 v44 = v30;
            *((void *)&v44 + 1) = v23;
            *(_OWORD *)&uint8_t buf[8] = v33;
            unint64_t v34 = v45;
            unint64_t v45 = v31;
            unint64_t v50 = v34;
            *(void *)AudioObjectPropertyAddress buf = v33;
            sub_AD86C((uint64_t)buf);
            *((void *)&v44 + 1) = v23;
          }

          else
          {
            **((void **)&v44 + 1) = v18;
            char v23 = v22 + 1;
            *((void *)&v44 + 1) = v23;
          }

          v8 += 6;
        }

        while (v7 > (uint64_t)((uint64_t)v23 - v44) >> 3);
      }

      CFArrayRef v35 = sub_2C97A8((uint64_t **)&v44);
      uint64_t v3 = v42;
    }

    else
    {
      uint64_t v36 = (os_log_t *)sub_138E8(13);
      uint64_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 390;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef",  buf,  0x12u);
      }

      CFArrayRef v35 = 0LL;
      *uint64_t v3 = 0LL;
    }

    *uint64_t v3 = v35;
    *(void *)AudioObjectPropertyAddress buf = &v44;
    sub_AD8B8((void ***)buf);
  }

void sub_2C95C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void **a21)
{
  a21 = (void **)&a15;
  sub_AD8B8(&a21);
  _Unwind_Resume(a1);
}

void sub_2C9658(unsigned __int16 *a1)
{
  if (*a1 - 1 >= 3)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = *a1;
        int v7 = 136315650;
        __int128 v8 = "FDRDataImpl.cpp";
        __int16 v9 = 1024;
        int v10 = 133;
        __int16 v11 = 1024;
        int v12 = v4;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: FDRData accessor returned version: %d",  (uint8_t *)&v7,  0x18u);
      }
    }
  }

  if (!*((_BYTE *)a1 + 2))
  {
    unint64_t v5 = (os_log_t *)sub_138E8(13);
    unsigned __int16 v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        __int128 v8 = "FDRDataImpl.cpp";
        __int16 v9 = 1024;
        int v10 = 134;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: FDRData accessor for TrimGains has a size of zero!",  (uint8_t *)&v7,  0x12u);
      }
    }
  }

CFArrayRef sub_2C97A8(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    int v4 = __p;
    do
    {
      uint64_t v5 = *v2++;
      *v4++ = v5;
    }

    while (v2 != v3);
  }

  CFArrayRef v6 = sub_7E39C((const void **)__p, (uint64_t)v9);
  if (__p)
  {
    __int16 v9 = __p;
    operator delete(__p);
  }

  return v6;
}

void sub_2C9820( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2C983C(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  CFArrayRef v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

void sub_2C9898(CFArrayRef *a1, const __CFArray **a2, const __CFArray **a3)
{
  int v4 = *a2;
  if (*a2)
  {
    int64x2_t v44 = 0uLL;
    v45[0] = 0LL;
    CFIndex Count = CFArrayGetCount(v4);
    CFIndex v7 = Count;
    __int128 v8 = *a2;
    if (v8)
    {
      CFIndex v9 = CFArrayGetCount(v8);
      if (!v7) {
        goto LABEL_30;
      }
    }

    else
    {
      CFIndex v9 = 0LL;
      if (!Count) {
        goto LABEL_30;
      }
    }

    unint64_t v11 = 0LL;
    do
    {
      if (v4 == v8 && v11 == v9) {
        break;
      }
      sub_2C9C4C(&cf, v4, v11);
      if (v44.i64[1] >= v45[0])
      {
        uint64_t v13 = (v44.i64[1] - v44.i64[0]) >> 3;
        unint64_t v14 = (v45[0] - v44.i64[0]) >> 2;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        unint64_t v15 = v45[0] - v44.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v14;
        unint64_t v50 = v45;
        if (v15)
        {
          CFNumberRef v17 = sub_7DC90(v15);
        }

        else
        {
          CFNumberRef v17 = 0LL;
          uint64_t v16 = 0LL;
        }

        CFDictionaryRef v18 = (char *)&v17[v16];
        float v49 = v18;
        char v19 = sub_2C9CF4(&v17[v13], cf);
        int v12 = v19 + 1;
        v48.i64[1] = (uint64_t)(v19 + 1);
        double v20 = (void *)v44.i64[1];
        double v21 = (void *)v44.i64[0];
        if (v44.i64[1] == v44.i64[0])
        {
          int64x2_t v23 = vdupq_n_s64(v44.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v22 = *--v20;
            *--char v19 = v22;
            *double v20 = 0LL;
          }

          while (v20 != v21);
          int64x2_t v23 = v44;
          int v12 = (void *)v48.i64[1];
          CFDictionaryRef v18 = v49;
        }

        v44.i64[0] = (uint64_t)v19;
        v44.i64[1] = (uint64_t)v12;
        int64x2_t v48 = v23;
        float v24 = (char *)v45[0];
        v45[0] = v18;
        float v49 = v24;
        CFNumberRef v47 = (int64x2_t *)v23.i64[0];
        sub_AD86C((uint64_t)&v47);
      }

      else
      {
        int v12 = sub_2C9CF4((void *)v44.i64[1], cf) + 1;
      }

      v44.i64[1] = (uint64_t)v12;
      if (cf) {
        CFRelease(cf);
      }
      ++v11;
    }

    while (v11 != v7);
LABEL_30:
    int v10 = *a3;
    if (!*a3) {
      goto LABEL_57;
    }
    goto LABEL_31;
  }

  int v10 = *a3;
  if (*a3)
  {
    int64x2_t v44 = 0uLL;
    v45[0] = 0LL;
LABEL_31:
    CFIndex v25 = CFArrayGetCount(v10);
    CFIndex v26 = v25;
    uint64_t v27 = *a3;
    if (v27)
    {
      CFIndex v28 = CFArrayGetCount(v27);
      if (!v26) {
        goto LABEL_57;
      }
LABEL_35:
      unint64_t v29 = 0LL;
      do
      {
        if (v10 == v27 && v29 == v28) {
          break;
        }
        sub_2C9C4C(&cf, v10, v29);
        if (v44.i64[1] >= v45[0])
        {
          uint64_t v31 = (v44.i64[1] - v44.i64[0]) >> 3;
          unint64_t v32 = (v45[0] - v44.i64[0]) >> 2;
          if (v32 <= v31 + 1) {
            unint64_t v32 = v31 + 1;
          }
          unint64_t v33 = v45[0] - v44.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v32;
          unint64_t v50 = v45;
          if (v33)
          {
            CFArrayRef v35 = sub_7DC90(v33);
          }

          else
          {
            CFArrayRef v35 = 0LL;
            uint64_t v34 = 0LL;
          }

          uint64_t v36 = (char *)&v35[v34];
          float v49 = v36;
          uint64_t v37 = sub_2C9CF4(&v35[v31], cf);
          __int16 v30 = v37 + 1;
          v48.i64[1] = (uint64_t)(v37 + 1);
          double v38 = (void *)v44.i64[1];
          uint64_t v39 = (void *)v44.i64[0];
          if (v44.i64[1] == v44.i64[0])
          {
            int64x2_t v41 = vdupq_n_s64(v44.u64[1]);
          }

          else
          {
            do
            {
              uint64_t v40 = *--v38;
              *--uint64_t v37 = v40;
              *double v38 = 0LL;
            }

            while (v38 != v39);
            int64x2_t v41 = v44;
            __int16 v30 = (void *)v48.i64[1];
            uint64_t v36 = v49;
          }

          v44.i64[0] = (uint64_t)v37;
          v44.i64[1] = (uint64_t)v30;
          int64x2_t v48 = v41;
          BOOL v42 = (char *)v45[0];
          v45[0] = v36;
          float v49 = v42;
          CFNumberRef v47 = (int64x2_t *)v41.i64[0];
          sub_AD86C((uint64_t)&v47);
        }

        else
        {
          __int16 v30 = sub_2C9CF4((void *)v44.i64[1], cf) + 1;
        }

        v44.i64[1] = (uint64_t)v30;
        if (cf) {
          CFRelease(cf);
        }
        ++v29;
      }

      while (v29 != v26);
      goto LABEL_57;
    }

    CFIndex v28 = 0LL;
    if (v25) {
      goto LABEL_35;
    }
LABEL_57:
    *a1 = sub_2C97A8((uint64_t **)&v44);
    CFNumberRef v47 = &v44;
    sub_AD8B8((void ***)&v47);
    return;
  }

  *a1 = 0LL;
}

void sub_2C9C04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_AD8B8(&a15);
  _Unwind_Resume(a1);
}

void *sub_2C9C4C(void *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (CFIndex v7 = ValueAtIndex) == 0LL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  CFRetain(ValueAtIndex);
  return sub_3617C(a1, v7);
}

void sub_2C9CD4(_Unwind_Exception *a1)
{
}

void *sub_2C9CF4(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

void sub_2C9D2C(CFArrayRef *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    int v10 = (os_log_t *)sub_138E8(13);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  uint64_t v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-thiele-small-0", 22LL, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v3;
  if (!v3)
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_14591C(&cf, CFProperty);
  if (!cf)
  {
    unint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }

  sub_15676C(v170, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  IOObjectRelease(v2);
  uint64_t v5 = (void *)v170[0];
  if (v170[0] == v170[1])
  {
    CFTypeRef v164 = 0LL;
  }

  else
  {
    sub_2CC1A8((CFArrayRef *)&v164, (unsigned __int8 *)v170[0], (unsigned __int8 *)v170[1]);
    uint64_t v6 = sub_138E8(17);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      CFIndex v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          __int128 v8 = CFCopyDescription(v164);
          sub_48188((uint64_t)&cf, v8);
          if (v8) {
            CFRelease(v8);
          }
          p_CFTypeRef cf = &cf;
          if (v167 < 0) {
            p_CFTypeRef cf = (CFTypeRef *)cf;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 285;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "IODeviceTree:/product/audio";
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = "speaker-thiele-small-0";
          *(_WORD *)&buf[38] = 2080;
          BOOL v188 = p_cf;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
          if (SHIBYTE(v167) < 0) {
            operator delete((void *)cf);
          }
        }
      }
    }
  }

  if (v5) {
    operator delete(v5);
  }
  CFTypeRef v163 = 0LL;
  io_registry_entry_t v15 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v15)
  {
    uint64_t v84 = (os_log_t *)sub_138E8(13);
    unint64_t v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    uint64_t v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v86, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  uint64_t v16 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-thiele-small-1", 22LL, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v16;
  if (!v16)
  {
    unint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
  }

  CFTypeRef v17 = IORegistryEntryCreateCFProperty(v15, v16, kCFAllocatorDefault, 0);
  sub_14591C(valuePtr, v17);
  if (!valuePtr[0])
  {
    unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v88, "Could not construct");
  }

  sub_15676C(v170, valuePtr[0]);
  if (valuePtr[0]) {
    CFRelease(valuePtr[0]);
  }
  CFRelease(v16);
  IOObjectRelease(v15);
  CFDictionaryRef v18 = (void *)v170[0];
  char v166 = 0LL;
  uint64_t v167 = 0LL;
  CFTypeRef cf = 0LL;
  if (v170[0] != v170[1]) {
    sub_2C7B04(&cf, v170[0], (uint64_t)v170[1], (char *)v170[1] - (char *)v170[0]);
  }
  if (v18) {
    operator delete(v18);
  }
  if (v166 == cf || (unint64_t)(v166 - (_BYTE *)cf) <= 3)
  {
    if (cf) {
      operator delete((void *)cf);
    }
  }

  else
  {
    int v19 = *(unsigned __int16 *)cf;
    operator delete((void *)cf);
    if (v19)
    {
      if (v19 == 2)
      {
        io_registry_entry_t v70 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
        if (!v70)
        {
          int v123 = (os_log_t *)sub_138E8(13);
          unsigned int v124 = *v123;
          if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 47;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = "IODeviceTree:/product/audio";
            _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
          }

          int v125 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v125, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
        }

        __int16 v71 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-thiele-small-1", 22LL, 0x8000100u, 0);
        *(void *)AudioObjectPropertyAddress buf = v71;
        if (!v71)
        {
          unint64_t v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v127, "Could not construct");
        }

        CFTypeRef v72 = IORegistryEntryCreateCFProperty(v70, v71, kCFAllocatorDefault, 0);
        sub_14591C(&cf, v72);
        if (!cf)
        {
          uint64_t v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v129, "Could not construct");
        }

        sub_15676C(v170, cf);
        if (cf) {
          CFRelease(cf);
        }
        CFRelease(v71);
        IOObjectRelease(v70);
        unint64_t v73 = (void *)v170[0];
        if (v170[0] == v170[1])
        {
          valuePtr[0] = 0LL;
        }

        else
        {
          sub_2CC1A8((CFArrayRef *)valuePtr, (unsigned __int8 *)v170[0], (unsigned __int8 *)v170[1]);
          uint64_t v74 = sub_138E8(17);
          if ((*(_BYTE *)(v74 + 8) & 1) != 0)
          {
            uint64_t v75 = *(os_log_s **)v74;
            if (*(void *)v74)
            {
              if (os_log_type_enabled(*(os_log_t *)v74, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v76 = CFCopyDescription(valuePtr[0]);
                sub_48188((uint64_t)&cf, v76);
                if (v76) {
                  CFRelease(v76);
                }
                uint64_t v77 = &cf;
                if (v167 < 0) {
                  uint64_t v77 = (CFTypeRef *)cf;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 285;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = "IODeviceTree:/product/audio";
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = "speaker-thiele-small-1";
                *(_WORD *)&buf[38] = 2080;
                BOOL v188 = v77;
                _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
                if (SHIBYTE(v167) < 0) {
                  operator delete((void *)cf);
                }
              }
            }
          }
        }

        if (v73) {
          operator delete(v73);
        }
        CFTypeRef v130 = v163;
        CFTypeRef v163 = valuePtr[0];
        valuePtr[0] = v130;
      }

      else
      {
        if (v19 != 3)
        {
          int v117 = (os_log_t *)sub_138E8(13);
          CFTypeRef v118 = *v117;
          if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 354;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = v19;
            *(_WORD *)&_BYTE buf[24] = 2080;
            *(void *)&buf[26] = "speaker-thiele-small-1";
            _os_log_impl( &dword_0,  v118,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unrecognized FDRVersion: %u using key %s",  buf,  0x22u);
          }

          unint64_t v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v119, "Unrecognized FDRVersion: %u using key %s");
        }

        io_registry_entry_t v20 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
        if (!v20)
        {
          uint64_t v120 = (os_log_t *)sub_138E8(13);
          uint64_t v121 = *v120;
          if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 47;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = "IODeviceTree:/product/audio";
            _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
          }

          int v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v122, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
        }

        double v21 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-thiele-small-1", 22LL, 0x8000100u, 0);
        *(void *)AudioObjectPropertyAddress buf = v21;
        if (!v21)
        {
          int v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v126, "Could not construct");
        }

        CFTypeRef v22 = IORegistryEntryCreateCFProperty(v20, v21, kCFAllocatorDefault, 0);
        sub_14591C(v170, v22);
        if (!v170[0])
        {
          uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v128, "Could not construct");
        }

        sub_15676C(&cf, v170[0]);
        if (v170[0]) {
          CFRelease(v170[0]);
        }
        CFRelease(v21);
        IOObjectRelease(v20);
        int64x2_t v23 = (unsigned __int8 *)cf;
        if (cf == v166)
        {
          CFArrayRef v161 = 0LL;
        }

        else
        {
          v170[0] = 0LL;
          v170[1] = 0LL;
          UInt32 v171 = 0LL;
          unsigned int v169 = *(_DWORD *)cf;
          unint64_t v24 = v169;
          sub_2C9658((unsigned __int16 *)&v169);
          unsigned __int16 v25 = 0;
          CFIndex v26 = (unsigned __int16 *)(v23 + 4);
          unint64_t v27 = (v24 >> 24) * (unint64_t)BYTE2(v24);
          unint64_t v134 = v24 >> 24;
          unint64_t v28 = -4LL - v27;
          do
          {
            __int16 v29 = *v23++;
            v25 += v29;
            ++v28;
          }

          while (v28);
          if (0x10000 - v25 == *(unsigned __int16 *)((char *)v26 + v27))
          {
            if (v134 > ((char *)v170[1] - (char *)v170[0]) >> 3)
            {
              int v133 = a1;
              do
              {
                unsigned int v30 = *v26;
                unsigned int v31 = v26[1];
                unsigned int v32 = v26[2];
                unsigned int v33 = v26[3];
                unsigned int v34 = v26[4];
                unsigned int v35 = v26[5];
                unsigned int v36 = v26[6];
                uint64_t v37 = v26;
                unsigned int v38 = v26[7];
                unsigned int v39 = v37[8];
                unsigned int v140 = v37[9];
                unsigned int v137 = v37[11];
                unsigned int v138 = v37[10];
                unsigned int v136 = v37[12];
                uint64_t v135 = v37;
                int v40 = *(_DWORD *)(v37 + 13);
                CFStringRef v160 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_data_source_id", 27LL, 0x8000100u, 0);
                if (!v160)
                {
                  uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v91, "Could not construct");
                }

                LODWORD(valuePtr[0]) = v40;
                CFNumberRef v150 = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
                CFNumberRef v185 = v150;
                if (!v150)
                {
                  int v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v92, "Could not construct");
                }

                sub_2C983C(buf, v160, (const void **)&v185);
                CFStringRef v159 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_fs", 15LL, 0x8000100u, 0);
                if (!v159)
                {
                  uint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v90, "Could not construct");
                }

                *(float *)valuePtr = (float)v30 * 0.1;
                CFNumberRef v149 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v184 = v149;
                if (!v149)
                {
                  unint64_t v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v93, "Could not construct");
                }

                sub_2C983C(&buf[16], v159, (const void **)&v184);
                CFStringRef v158 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_qts", 16LL, 0x8000100u, 0);
                if (!v158)
                {
                  uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v89, "Could not construct");
                }

                *(float *)valuePtr = (float)v31 * 0.001;
                CFNumberRef v148 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v183 = v148;
                if (!v148)
                {
                  __int128 v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v94, "Could not construct");
                }

                sub_2C983C(&buf[32], v158, (const void **)&v183);
                CFStringRef v157 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_re", 15LL, 0x8000100u, 0);
                if (!v157)
                {
                  __int128 v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v96, "Could not construct");
                }

                *(float *)valuePtr = (float)v32 * 0.001;
                CFNumberRef v147 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v182 = v147;
                if (!v147)
                {
                  uint64_t v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v95, "Could not construct");
                }

                sub_2C983C(&v189, v157, (const void **)&v182);
                CFStringRef v156 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_t", 14LL, 0x8000100u, 0);
                if (!v156)
                {
                  AudioObjectID v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v99, "Could not construct");
                }

                *(float *)valuePtr = (float)v33 * 0.01;
                CFNumberRef v146 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v181 = v146;
                if (!v146)
                {
                  uint64_t v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v103, "Could not construct");
                }

                sub_2C983C(&v190, v156, (const void **)&v181);
                CFStringRef v155 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_le", 15LL, 0x8000100u, 0);
                if (!v155)
                {
                  uint64_t v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v108, "Could not construct");
                }

                *(float *)valuePtr = (float)v34 * 0.01;
                CFNumberRef v145 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v180 = v145;
                if (!v145)
                {
                  uint64_t v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v100, "Could not construct");
                }

                sub_2C983C(&v191, v155, (const void **)&v180);
                CFStringRef v154 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_kms", 16LL, 0x8000100u, 0);
                if (!v154)
                {
                  uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v97, "Could not construct");
                }

                *(float *)valuePtr = (float)v35;
                CFNumberRef v144 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v179 = v144;
                if (!v144)
                {
                  int v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v106, "Could not construct");
                }

                sub_2C983C(&v192, v154, (const void **)&v179);
                CFStringRef v153 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_mms", 16LL, 0x8000100u, 0);
                if (!v153)
                {
                  int v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v111, "Could not construct");
                }

                *(float *)valuePtr = (float)v36 * 0.0001;
                CFNumberRef v143 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v178 = v143;
                if (!v143)
                {
                  __int128 v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v104, "Could not construct");
                }

                sub_2C983C(&v193, v153, (const void **)&v178);
                CFStringRef v152 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_bi", 15LL, 0x8000100u, 0);
                if (!v152)
                {
                  __int16 v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v112, "Could not construct");
                }

                *(float *)valuePtr = (float)v38 * 0.0001;
                CFNumberRef v41 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v177 = v41;
                if (!v41)
                {
                  __int16 v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v105, "Could not construct");
                }

                sub_2C983C(&v194, v152, (const void **)&v177);
                CFStringRef v151 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_rms", 16LL, 0x8000100u, 0);
                if (!v151)
                {
                  int v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v101, "Could not construct");
                }

                *(float *)valuePtr = (float)v39 * 0.001;
                CFNumberRef v142 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v176 = v142;
                if (!v142)
                {
                  uint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v98, "Could not construct");
                }

                sub_2C983C(&v195, v151, (const void **)&v176);
                CFStringRef v42 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_crest", 18LL, 0x8000100u, 0);
                if (!v42)
                {
                  BOOL v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v109, "Could not construct");
                }

                *(float *)valuePtr = (float)v140 * 0.001;
                CFNumberRef v43 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v175 = v43;
                if (!v43)
                {
                  int v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v102, "Could not construct");
                }

                sub_2C983C(&v196, v42, (const void **)&v175);
                CFStringRef v44 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_coffset", 20LL, 0x8000100u, 0);
                if (!v44)
                {
                  __int16 v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v110, "Could not construct");
                }

                *(float *)valuePtr = (float)v138 * 0.001;
                CFNumberRef v45 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v174 = v45;
                if (!v45)
                {
                  __int16 v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v107, "Could not construct");
                }

                sub_2C983C(&v197, v44, (const void **)&v174);
                CFStringRef v46 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_cmin", 17LL, 0x8000100u, 0);
                if (!v46)
                {
                  uint64_t v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v116, "Could not construct");
                }

                *(float *)valuePtr = (float)v137 * 0.001;
                CFNumberRef v47 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v173 = v47;
                if (!v47)
                {
                  std::condition_variable v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v114, "Could not construct");
                }

                sub_2C983C(&v198, v46, (const void **)&v173);
                CFStringRef v48 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_cmax", 17LL, 0x8000100u, 0);
                if (!v48)
                {
                  std::mutex v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v115, "Could not construct");
                }

                *(float *)valuePtr = (float)v136 * 0.001;
                CFNumberRef v49 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
                CFNumberRef v172 = v49;
                if (!v49)
                {
                  AudioObjectID v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v113, "Could not construct");
                }

                sub_2C983C(v199, v48, (const void **)&v172);
                valuePtr[0] = buf;
                valuePtr[1] = &dword_C + 2;
                CFDictionaryRef v139 = sub_5A950((uint64_t)valuePtr);
                CFNumberRef v141 = v41;
                uint64_t v50 = 0LL;
                CFDictionaryRef v168 = v139;
                do
                {
                  uint64_t v51 = (const void *)v199[v50 + 1];
                  if (v51) {
                    CFRelease(v51);
                  }
                  int v52 = (const void *)v199[v50];
                  if (v52) {
                    CFRelease(v52);
                  }
                  v50 -= 2LL;
                }

                while (v50 != -28);
                CFRelease(v49);
                a1 = v133;
                CFRelease(v48);
                CFRelease(v47);
                CFRelease(v46);
                CFRelease(v45);
                CFRelease(v44);
                CFRelease(v43);
                CFRelease(v42);
                CFRelease(v142);
                CFRelease(v151);
                CFRelease(v141);
                CFRelease(v152);
                CFRelease(v143);
                CFRelease(v153);
                CFRelease(v144);
                CFRelease(v154);
                CFRelease(v145);
                CFRelease(v155);
                CFRelease(v146);
                CFRelease(v156);
                CFRelease(v147);
                CFRelease(v157);
                CFRelease(v148);
                CFRelease(v158);
                CFRelease(v149);
                CFRelease(v159);
                CFRelease(v150);
                CFRelease(v160);
                AudioObjectID v53 = v170[1];
                if (v170[1] >= v171)
                {
                  int v55 = v170[0];
                  int64_t v56 = ((char *)v170[1] - (char *)v170[0]) >> 3;
                  unint64_t v57 = v56 + 1;
                  uint64_t v58 = v171 - (char *)v170[0];
                  else {
                    unint64_t v59 = v57;
                  }
                  *(void *)&_BYTE buf[32] = &v171;
                  if (v59)
                  {
                    unint64_t v59 = (unint64_t)sub_7DC90(v59);
                    int v55 = v170[0];
                    AudioObjectID v53 = v170[1];
                  }

                  else
                  {
                    uint64_t v60 = 0LL;
                  }

                  UInt32 v61 = (CFDictionaryRef *)(v59 + 8 * v56);
                  uint64_t v62 = (_BYTE *)(v59 + 8 * v60);
                  *(void *)&_BYTE buf[24] = v62;
                  CFDictionaryRef *v61 = v139;
                  CFDictionaryRef v168 = 0LL;
                  *(void *)&buf[16] = v61 + 1;
                  if (v53 == v55)
                  {
                    CFDictionaryRef v64 = 0LL;
                    CFTypeRef v54 = v61 + 1;
                  }

                  else
                  {
                    do
                    {
                      unint64_t v63 = (const __CFDictionary *)*--v53;
                      *--UInt32 v61 = v63;
                      *AudioObjectID v53 = 0LL;
                    }

                    while (v53 != v55);
                    CFTypeRef v54 = *(CFTypeRef *)&buf[16];
                    uint64_t v62 = *(_BYTE **)&buf[24];
                    CFDictionaryRef v64 = v168;
                  }

                  __int128 v65 = *(_OWORD *)v170;
                  v170[0] = v61;
                  v170[1] = v54;
                  *(_OWORD *)&uint8_t buf[8] = v65;
                  uint64_t v66 = v171;
                  UInt32 v171 = v62;
                  *(void *)&_BYTE buf[24] = v66;
                  *(void *)AudioObjectPropertyAddress buf = v65;
                  sub_AD86C((uint64_t)buf);
                  v170[1] = v54;
                  if (v64)
                  {
                    CFRelease(v64);
                    CFTypeRef v54 = v170[1];
                  }
                }

                else
                {
                  *(void *)v170[1] = v139;
                  CFTypeRef v54 = v53 + 1;
                  v170[1] = v54;
                }

                CFIndex v26 = v135 + 15;
              }

              while (v134 > (int64_t)((uint64_t)v54 - (unint64_t)v170[0]) >> 3);
            }

            CFArrayRef v67 = sub_2C97A8((uint64_t **)v170);
          }

          else
          {
            char v78 = (os_log_t *)sub_138E8(13);
            unsigned int v79 = *v78;
            if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 390;
              _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef",  buf,  0x12u);
            }

            CFArrayRef v67 = 0LL;
          }

          CFArrayRef v161 = v67;
          *(void *)AudioObjectPropertyAddress buf = v170;
          sub_AD8B8((void ***)buf);
          uint64_t v80 = sub_138E8(17);
          if ((*(_BYTE *)(v80 + 8) & 1) != 0)
          {
            int v81 = *(os_log_s **)v80;
            if (*(void *)v80)
            {
              if (os_log_type_enabled(*(os_log_t *)v80, OS_LOG_TYPE_DEBUG))
              {
                char v82 = CFCopyDescription(v67);
                sub_48188((uint64_t)v170, v82);
                if (v82) {
                  CFRelease(v82);
                }
                char v83 = v170;
                if (SHIBYTE(v171) < 0) {
                  char v83 = (CFTypeRef *)v170[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 285;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&buf[20] = "IODeviceTree:/product/audio";
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = "speaker-thiele-small-1";
                *(_WORD *)&buf[38] = 2080;
                BOOL v188 = v83;
                _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
                if (SHIBYTE(v171) < 0) {
                  operator delete((void *)v170[0]);
                }
              }
            }
          }
        }

        if (cf) {
          operator delete((void *)cf);
        }
        CFArrayRef v132 = v161;
        CFTypeRef v131 = v163;
        CFTypeRef v162 = v163;
        CFTypeRef v163 = v132;
        if (v162) {
          CFRelease(v131);
        }
      }

      goto LABEL_196;
    }
  }

  uint64_t v68 = (os_log_t *)sub_138E8(17);
  char v69 = *v68;
  if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 344;
    _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Speaker_SpPT version is returning kVersionUnknown",  buf,  0x12u);
  }

LABEL_196:
  sub_2C9898(a1, (const __CFArray **)&v164, (const __CFArray **)&v163);
  if (v163) {
    CFRelease(v163);
  }
  if (v164) {
    CFRelease(v164);
  }
}

  *(void *)AudioObjectPropertyAddress buf = &v211;
  sub_2FC8E8((void ***)buf);
}

void sub_2CBE54()
{
}

void sub_2CBE94(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    JUMPOUT(0x2CC1A0LL);
  }

  JUMPOUT(0x2CC198LL);
}

void sub_2CBF80()
{
}

void sub_2CBF98()
{
}

void sub_2CBFB4()
{
  if (v0) {
    JUMPOUT(0x2CBFC0LL);
  }
  JUMPOUT(0x2CC058LL);
}

void sub_2CC048()
{
}

void sub_2CC054( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, const void *a50,const void *a51)
{
}

void sub_2CC06C()
{
}

void sub_2CC080(void *a1, int a2)
{
  if (a2 == 1)
  {
    io_registry_entry_t v2 = __cxa_begin_catch(a1);
    uint64_t v3 = (os_log_t *)sub_138E8(17LL);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v2 + 16LL))(v2);
      int v6 = 136316162;
      CFIndex v7 = "EDTUtilsImpl.h";
      __int16 v8 = 1024;
      int v9 = 74;
      __int16 v10 = 2080;
      uint64_t v11 = v5;
      __int16 v12 = 2080;
      __int16 v13 = 2080;
      unint64_t v14 = "speaker-thiele-small-1";
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&v6,
        0x30u);
    }

    __cxa_end_catch();
    JUMPOUT(0x2CA2A4LL);
  }

  JUMPOUT(0x2CC058LL);
}

void sub_2CC08C()
{
}

void sub_2CC178()
{
}

void sub_2CC190(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_2CC1A8(CFArrayRef *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3)
  {
    *a1 = 0LL;
  }

  else
  {
    uint64_t v3 = a2;
    __int128 v85 = 0uLL;
    unint64_t v86 = 0LL;
    unsigned int v84 = *(_DWORD *)a2;
    unint64_t v4 = v84;
    sub_2C9658((unsigned __int16 *)&v84);
    unsigned __int16 v5 = 0;
    int v6 = (unsigned __int16 *)(v3 + 4);
    unint64_t v7 = (v4 >> 24) * (unint64_t)BYTE2(v4);
    unint64_t v68 = v4 >> 24;
    unint64_t v8 = -4LL - v7;
    do
    {
      __int16 v9 = *v3++;
      v5 += v9;
      ++v8;
    }

    while (v8);
    if (0x10000 - v5 == *(unsigned __int16 *)((char *)v6 + v7))
    {
      if (v68 > (uint64_t)(*((void *)&v85 + 1) - v85) >> 3)
      {
        do
        {
          unsigned int v10 = *v6;
          unsigned int v11 = v6[1];
          unsigned int v12 = v6[2];
          unsigned int v13 = v6[3];
          unsigned int v14 = v6[4];
          unsigned int v15 = v6[5];
          unsigned int v16 = v6[6];
          unsigned int v17 = v6[7];
          unsigned int v69 = v6[8];
          int v18 = *(_DWORD *)(v6 + 9);
          CFStringRef v83 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_data_source_id", 27LL, 0x8000100u, 0);
          if (!v83)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }

          LODWORD(valuePtr[0]) = v18;
          CFNumberRef v76 = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
          CFNumberRef v96 = v76;
          if (!v76)
          {
            uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v50, "Could not construct");
          }

          sub_2C983C(buf, v83, (const void **)&v96);
          CFStringRef v82 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_fs", 15LL, 0x8000100u, 0);
          if (!v82)
          {
            CFStringRef v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v48, "Could not construct");
          }

          *(float *)valuePtr = (float)v10 * 0.1;
          CFNumberRef v75 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v95 = v75;
          if (!v75)
          {
            uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v51, "Could not construct");
          }

          sub_2C983C(&buf[16], v82, (const void **)&v95);
          CFStringRef v81 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_qts", 16LL, 0x8000100u, 0);
          if (!v81)
          {
            CFNumberRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v47, "Could not construct");
          }

          *(float *)valuePtr = (float)v11 * 0.001;
          CFNumberRef v74 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v94 = v74;
          if (!v74)
          {
            AudioObjectID v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v53, "Could not construct");
          }

          sub_2C983C(&v100, v81, (const void **)&v94);
          CFStringRef v80 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_re", 15LL, 0x8000100u, 0);
          if (!v80)
          {
            CFTypeRef v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v54, "Could not construct");
          }

          *(float *)valuePtr = (float)v12 * 0.001;
          CFNumberRef v73 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v93 = v73;
          if (!v73)
          {
            int v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v52, "Could not construct");
          }

          sub_2C983C(&v101, v80, (const void **)&v93);
          CFStringRef v79 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_t", 14LL, 0x8000100u, 0);
          if (!v79)
          {
            unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v57, "Could not construct");
          }

          *(float *)valuePtr = (float)v13 * 0.01;
          CFNumberRef v72 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v92 = v72;
          if (!v72)
          {
            uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v60, "Could not construct");
          }

          sub_2C983C(&v102, v79, (const void **)&v92);
          CFStringRef v78 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_le", 15LL, 0x8000100u, 0);
          if (!v78)
          {
            unint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v63, "Could not construct");
          }

          *(float *)valuePtr = (float)v14 * 0.01;
          CFNumberRef v19 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v91 = v19;
          if (!v19)
          {
            uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v58, "Could not construct");
          }

          sub_2C983C(&v103, v78, (const void **)&v91);
          CFStringRef v77 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_kms", 16LL, 0x8000100u, 0);
          if (!v77)
          {
            int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v55, "Could not construct");
          }

          *(float *)valuePtr = (float)v15;
          CFNumberRef cf = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v90 = cf;
          if (!cf)
          {
            CFDictionaryRef v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v64, "Could not construct");
          }

          sub_2C983C(&v104, v77, (const void **)&v90);
          CFStringRef v20 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_mms", 16LL, 0x8000100u, 0);
          if (!v20)
          {
            __int128 v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v65, "Could not construct");
          }

          *(float *)valuePtr = (float)v16 * 0.0001;
          CFNumberRef v21 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v89 = v21;
          if (!v21)
          {
            UInt32 v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v61, "Could not construct");
          }

          sub_2C983C(&v105, v20, (const void **)&v89);
          CFStringRef v22 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_bi", 15LL, 0x8000100u, 0);
          if (!v22)
          {
            uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v66, "Could not construct");
          }

          *(float *)valuePtr = (float)v17 * 0.0001;
          CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v88 = v23;
          if (!v23)
          {
            uint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v62, "Could not construct");
          }

          sub_2C983C(&v106, v22, (const void **)&v88);
          CFStringRef v24 = CFStringCreateWithBytes(0LL, (const UInt8 *)"thiele_small_rms", 16LL, 0x8000100u, 0);
          if (!v24)
          {
            unint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v59, "Could not construct");
          }

          *(float *)valuePtr = (float)v69 * 0.001;
          CFNumberRef v25 = CFNumberCreate(0LL, kCFNumberFloatType, valuePtr);
          CFNumberRef v87 = v25;
          if (!v25)
          {
            int64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v56, "Could not construct");
          }

          sub_2C983C(v107, v24, (const void **)&v87);
          valuePtr[0] = buf;
          valuePtr[1] = 10LL;
          CFNumberRef v26 = v19;
          uint64_t v27 = 0LL;
          CFDictionaryRef v70 = sub_5A950((uint64_t)valuePtr);
          do
          {
            unint64_t v28 = (const void *)v107[v27 + 1];
            if (v28) {
              CFRelease(v28);
            }
            __int16 v29 = (const void *)v107[v27];
            if (v29) {
              CFRelease(v29);
            }
            v27 -= 2LL;
          }

          while (v27 != -20);
          CFRelease(v25);
          CFRelease(v24);
          CFRelease(v23);
          CFRelease(v22);
          CFRelease(v21);
          CFRelease(v20);
          CFRelease(cf);
          CFRelease(v77);
          CFRelease(v26);
          CFRelease(v78);
          CFRelease(v72);
          CFRelease(v79);
          CFRelease(v73);
          CFRelease(v80);
          CFRelease(v74);
          CFRelease(v81);
          CFRelease(v75);
          CFRelease(v82);
          CFRelease(v76);
          CFRelease(v83);
          unsigned int v30 = (void *)*((void *)&v85 + 1);
          if (*((void *)&v85 + 1) >= v86)
          {
            unsigned int v32 = (void *)v85;
            uint64_t v33 = (uint64_t)(*((void *)&v85 + 1) - v85) >> 3;
            unint64_t v34 = v33 + 1;
            uint64_t v35 = v86 - v85;
            else {
              unint64_t v36 = v34;
            }
            uint64_t v100 = &v86;
            if (v36)
            {
              unint64_t v36 = (unint64_t)sub_7DC90(v36);
              unsigned int v30 = (void *)*((void *)&v85 + 1);
              unsigned int v32 = (void *)v85;
            }

            else
            {
              uint64_t v37 = 0LL;
            }

            unsigned int v38 = (CFDictionaryRef *)(v36 + 8 * v33);
            unint64_t v39 = v36 + 8 * v37;
            unint64_t v99 = v39;
            *unsigned int v38 = v70;
            *(void *)&buf[16] = v38 + 1;
            if (v30 == v32)
            {
              unsigned int v31 = v38 + 1;
            }

            else
            {
              do
              {
                int v40 = (const __CFDictionary *)*--v30;
                *--unsigned int v38 = v40;
                void *v30 = 0LL;
              }

              while (v30 != v32);
              unsigned int v31 = *(void **)&buf[16];
              unint64_t v39 = v99;
            }

            __int128 v41 = v85;
            *(void *)&__int128 v85 = v38;
            *((void *)&v85 + 1) = v31;
            *(_OWORD *)&uint8_t buf[8] = v41;
            unint64_t v42 = v86;
            unint64_t v86 = v39;
            unint64_t v99 = v42;
            *(void *)AudioObjectPropertyAddress buf = v41;
            sub_AD86C((uint64_t)buf);
            *((void *)&v85 + 1) = v31;
          }

          else
          {
            **((void **)&v85 + 1) = v70;
            unsigned int v31 = v30 + 1;
            *((void *)&v85 + 1) = v31;
          }

          v6 += 11;
        }

        while (v68 > (uint64_t)((uint64_t)v31 - v85) >> 3);
      }

      CFArrayRef v43 = sub_2C97A8((uint64_t **)&v85);
      CFStringRef v44 = a1;
    }

    else
    {
      CFNumberRef v45 = (os_log_t *)sub_138E8(13);
      CFStringRef v44 = a1;
      CFStringRef v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 390;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef",  buf,  0x12u);
      }

      CFArrayRef v43 = 0LL;
      *a1 = 0LL;
    }

    *CFStringRef v44 = v43;
    *(void *)AudioObjectPropertyAddress buf = &v85;
    sub_AD8B8((void ***)buf);
  }

void sub_2CCDF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void **a51)
{
  a51 = (void **)&a37;
  sub_AD8B8(&a51);
  _Unwind_Resume(a1);
}

void sub_2CCF44(int64x2_t *a1, _DWORD *a2, _DWORD *a3)
{
  if (a2 == a3)
  {
    a1->i64[0] = 0LL;
    a1->i64[1] = 0LL;
    a1[1].i64[0] = 0LL;
  }

  else
  {
    int v6 = (unsigned __int8 *)a2;
    int64x2_t v56 = 0uLL;
    unint64_t v57 = 0LL;
    *(_DWORD *)uint64_t v58 = *a2;
    *(_DWORD *)&v58[3] = *(_DWORD *)((char *)a2 + 3);
    sub_2C9658((unsigned __int16 *)v58);
    unint64_t v8 = (__int16 *)(v6 + 7);
    __int16 v9 = (unsigned __int16 *)&v6[v58[3] * (unint64_t)v58[2] + 7];
    unsigned __int16 v10 = 0;
    unint64_t v11 = v58[3] * (unint64_t)v58[2] + 7;
    do
    {
      __int16 v12 = *v6++;
      v10 += v12;
      --v11;
    }

    while (v11);
    if (0x10000 - v10 == *v9)
    {
      if (v58[3])
      {
        uint64_t v13 = 0LL;
        uint64_t v14 = v58[4];
        int v15 = v58[5] - 1;
        uint64_t v53 = v58[3];
        do
        {
          uint64_t v54 = v13;
          int v17 = *v8;
          unsigned int v16 = v8 + 1;
          int v55 = v17;
          if ((_DWORD)v14)
          {
            int v18 = 0LL;
            unint64_t v19 = 0LL;
            CFStringRef v20 = 0LL;
            for (uint64_t i = 0LL; i != v14; ++i)
            {
              uint64_t v22 = 0LL;
              switch(v15)
              {
                case 0:
                  LOBYTE(v7) = *(_BYTE *)v16;
                  float v3 = (float)LODWORD(v7);
                  float v4 = (float)*((char *)v16 + 1) * 0.01;
                  LOBYTE(v7) = *((_BYTE *)v16 + 2);
                  float v7 = (float)LODWORD(v7);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 3LL;
                  break;
                case 1:
                  LOWORD(v7) = *v16;
                  float v3 = (float)LODWORD(v7);
                  float v4 = (float)v16[1] * 0.01;
                  LOWORD(v7) = v16[2];
                  float v7 = (float)LODWORD(v7);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 6LL;
                  break;
                case 3:
                  float v3 = (float)*(unsigned int *)v16;
                  float v4 = (float)*((int *)v16 + 1) * 0.01;
                  float v7 = (float)*((unsigned int *)v16 + 2);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 12LL;
                  break;
                case 7:
                  float v3 = (float)*(unint64_t *)v16;
                  float v4 = (float)*((uint64_t *)v16 + 1) * 0.01;
                  float v7 = (float)*((unint64_t *)v16 + 2);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 24LL;
                  break;
                default:
                  break;
              }

              if ((unint64_t)v18 >= v19)
              {
                unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v18 - v20) + 1;
                if (v24 > 0x1555555555555555LL) {
                  sub_7A87C();
                }
                else {
                  unint64_t v25 = v24;
                }
                if (v25) {
                  unint64_t v25 = (unint64_t)sub_87E70(v25);
                }
                else {
                  uint64_t v26 = 0LL;
                }
                uint64_t v27 = (float *)(v25 + 4 * (v18 - v20));
                float *v27 = v3;
                v27[1] = v4;
                v27[2] = v5;
                if (v18 == v20)
                {
                  CFStringRef v20 = (float *)(v25 + 4 * (v18 - v20));
                }

                else
                {
                  unint64_t v28 = (float *)(v25 + 4 * (v18 - v20));
                  do
                  {
                    uint64_t v29 = *(void *)(v18 - 3);
                    v18 -= 3;
                    int v30 = *((_DWORD *)v18 + 2);
                    *(void *)(v28 - 3) = v29;
                    v28 -= 3;
                    *((_DWORD *)v28 + 2) = v30;
                  }

                  while (v18 != v20);
                  int v18 = v20;
                  CFStringRef v20 = v28;
                }

                unint64_t v19 = v25 + 12 * v26;
                uint64_t v23 = (uint64_t)(v27 + 3);
                if (v18) {
                  operator delete(v18);
                }
              }

              else
              {
                *int v18 = v3;
                v18[1] = v4;
                uint64_t v23 = (uint64_t)(v18 + 3);
                v18[2] = v5;
              }

              unsigned int v16 = (__int16 *)((char *)v16 + v22);
              int v18 = (float *)v23;
            }
          }

          else
          {
            uint64_t v23 = 0LL;
            CFStringRef v20 = 0LL;
          }

          float v3 = (float)v55 * 0.01;
          int v32 = *(_DWORD *)v16;
          unint64_t v8 = v16 + 2;
          int v31 = v32;
          uint64_t v33 = v56.i64[1];
          if (v56.i64[1] >= (unint64_t)v57)
          {
            uint64_t v37 = (v56.i64[1] - v56.i64[0]) >> 5;
            unint64_t v38 = (uint64_t)&v57[-v56.i64[0]] >> 4;
            if (v38 <= v37 + 1) {
              unint64_t v38 = v37 + 1;
            }
            else {
              unint64_t v39 = v38;
            }
            UInt32 v61 = &v57;
            if (v39)
            {
              if (v39 >> 59) {
                sub_7A8C4();
              }
              int v40 = (char *)operator new(32 * v39);
            }

            else
            {
              int v40 = 0LL;
            }

            __int128 v41 = &v40[32 * v37];
            *(void *)AudioObjectPropertyAddress buf = v40;
            *(void *)&uint8_t buf[8] = v41;
            *(void *)&buf[16] = v41;
            uint64_t v60 = &v40[32 * v39];
            *(float *)__int128 v41 = v3;
            *((_DWORD *)v41 + 1) = v31;
            *((void *)v41 + 2) = 0LL;
            *((void *)v41 + 3) = 0LL;
            *((void *)v41 + 1) = 0LL;
            sub_2CD514((void *)v41 + 1, v20, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v20) >> 2));
            uint64_t v42 = *(void *)&buf[8];
            uint64_t v34 = *(void *)&buf[16] + 32LL;
            *(void *)&buf[16] += 32LL;
            int64x2_t v43 = v56;
            uint64_t v35 = v53;
            uint64_t v36 = v54;
            if (v56.i64[1] == v56.i64[0])
            {
              int64x2_t v47 = vdupq_n_s64(v56.u64[1]);
            }

            else
            {
              uint64_t v44 = 0LL;
              do
              {
                uint64_t v45 = v42 + v44;
                uint64_t v46 = v43.i64[1] + v44;
                *(void *)(v45 - 32) = *(void *)(v43.i64[1] + v44 - 32);
                *(void *)(v45 - 24) = 0LL;
                *(void *)(v45 - 16) = 0LL;
                *(void *)(v45 - 8) = 0LL;
                *(_OWORD *)(v45 - 24) = *(_OWORD *)(v43.i64[1] + v44 - 24);
                *(void *)(v45 - 8) = *(void *)(v43.i64[1] + v44 - 8);
                *(void *)(v46 - 24) = 0LL;
                *(void *)(v46 - 16) = 0LL;
                *(void *)(v46 - 8) = 0LL;
                v44 -= 32LL;
              }

              while (v43.i64[1] + v44 != v43.i64[0]);
              v42 += v44;
              int64x2_t v47 = v56;
              uint64_t v34 = *(void *)&buf[16];
            }

            v56.i64[0] = v42;
            v56.i64[1] = v34;
            *(int64x2_t *)&uint8_t buf[8] = v47;
            CFStringRef v48 = v57;
            unint64_t v57 = v60;
            uint64_t v60 = v48;
            *(void *)AudioObjectPropertyAddress buf = v47.i64[0];
            sub_2CD630((uint64_t)buf);
          }

          else
          {
            *(float *)v56.i64[1] = v3;
            *(_DWORD *)(v33 + 4) = v31;
            *(void *)(v33 + 16) = 0LL;
            *(void *)(v33 + 24) = 0LL;
            *(void *)(v33 + 8) = 0LL;
            sub_2CD514((void *)(v33 + 8), v20, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v20) >> 2));
            uint64_t v34 = v33 + 32;
            uint64_t v35 = v53;
            uint64_t v36 = v54;
          }

          v56.i64[1] = v34;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v13 = v36 + 1;
        }

        while (v13 != v35);
      }

      *a1 = v56;
      a1[1].i64[0] = (uint64_t)v57;
      CFNumberRef v49 = &v56;
    }

    else
    {
LABEL_58:
      uint64_t v50 = (os_log_t *)sub_138E8(13);
      uint64_t v51 = *v50;
      CFNumberRef v49 = a1;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 421;
        _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef",  buf,  0x12u);
      }
    }

    v49->i64[0] = 0LL;
    v49->i64[1] = 0LL;
    v49[1].i64[0] = 0LL;
    *(void *)AudioObjectPropertyAddress buf = &v56;
    sub_2CD5B8((void ***)buf);
  }

void sub_2CD4B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a15;
  sub_2CD5B8(&a18);
  _Unwind_Resume(a1);
}

void *sub_2CD514(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v4 = result;
    if (a4 >= 0x1555555555555556LL) {
      sub_7A87C();
    }
    BOOL result = sub_87E70(a4);
    float v7 = result;
    *float v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      BOOL result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }

  return result;
}

void sub_2CD59C(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_2CD5B8(void ***a1)
{
  uint64_t v1 = *a1;
  io_registry_entry_t v2 = (char *)**a1;
  if (v2)
  {
    float v4 = (char *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }

        v4 -= 32;
      }

      while (v4 != v2);
      float v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_2CD630(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    float v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 32LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2CD690(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    do
    {
      CFDictionaryRef v64 = a2;
      uint64_t v4 = *(void *)(a1 + 24);
      float v5 = *(__int32 **)(v4 + 8);
      int v6 = wmemchr(*(const __int32 **)v4, a2[1], ((uint64_t)v5 - *(void *)v4) >> 2);
      if (v6) {
        float v7 = v6;
      }
      else {
        float v7 = v5;
      }
      uint64_t v8 = *(void **)(a1 + 24);
      else {
        uint64_t v9 = (((uint64_t)v7 - *v8) >> 2) + 1;
      }
      **(void **)(a1 + 8) = v9;
      CFDictionaryRef v70 = 0LL;
      uint64_t v71 = 0LL;
      unsigned int v69 = &v70;
      if (**(void **)(a1 + 16))
      {
        unint64_t v10 = 1LL;
        do
        {
          v74.__r_.__value_.__s.__size_ = 2;
          strcpy((char *)&v74, "ch");
          std::to_string(&v72, v10);
          if ((v72.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t v11 = &v72;
          }
          else {
            unint64_t v11 = (std::string *)v72.__r_.__value_.__r.__words[0];
          }
          if ((v72.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v72.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v72.__r_.__value_.__l.__size_;
          }
          uint64_t v13 = std::string::append(&v74, (const std::string::value_type *)v11, size);
          __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          std::string::size_type cap = v13->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string __p = v14;
          v13->__r_.__value_.__l.__size_ = 0LL;
          v13->__r_.__value_.__l.__cap_ = 0LL;
          v13->__r_.__value_.__r.__words[0] = 0LL;
          uint64_t v15 = **(void **)(a1 + 8);
          sub_59370((CFStringRef *)&v74, "Filter");
          CFBooleanRef v16 = kCFBooleanTrue;
          if (v10 != v15) {
            CFBooleanRef v16 = kCFBooleanFalse;
          }
          v74.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
          sub_59370((CFStringRef *)&v74.__r_.__value_.__l.__cap_, "PhaseCompensate");
          CFBooleanRef v75 = kCFBooleanFalse;
          v65[0] = &v74;
          v65[1] = 2LL;
          CFDictionaryRef v17 = sub_5A950((uint64_t)v65);
          CFDictionaryRef v66 = v17;
          int v18 = (uint64_t **)sub_845D8((uint64_t)&v69, &v73, __p);
          if (*v18)
          {
            if (v17) {
              CFRelease(v17);
            }
          }

          else
          {
            unint64_t v19 = v18;
            CFStringRef v20 = (uint64_t *)operator new(0x40uLL);
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
            v72.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
            v72.__r_.__value_.__s.__data_[16] = 0;
            CFNumberRef v21 = v20 + 4;
            if (SHIBYTE(cap) < 0)
            {
              sub_24054(v21, __p[0], (unint64_t)__p[1]);
            }

            else
            {
              *(_OWORD *)CFNumberRef v21 = *(_OWORD *)__p;
              v20[6] = cap;
            }

            v20[7] = (uint64_t)v17;
            CFDictionaryRef v66 = 0LL;
            v72.__r_.__value_.__s.__data_[16] = 1;
            uint64_t v22 = v73;
            *CFStringRef v20 = 0LL;
            v20[1] = 0LL;
            v20[2] = v22;
            *unint64_t v19 = v20;
            if (*v69)
            {
              unsigned int v69 = (uint64_t **)*v69;
              CFStringRef v20 = *v19;
            }

            sub_7A420(v70, v20);
            ++v71;
            v72.__r_.__value_.__r.__words[0] = 0LL;
            sub_2CDFB8((uint64_t)&v72);
          }

          for (uint64_t i = 0LL; i != -32; i -= 16LL)
          {
            unint64_t v24 = *(const void **)((char *)&v74 + i + 24);
            if (v24) {
              CFRelease(v24);
            }
            unint64_t v25 = *(const void **)((char *)&v74.__r_.__value_.__l.__cap_ + i);
            if (v25) {
              CFRelease(v25);
            }
          }

          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
          ++v10;
        }

        while (v10 <= **(void **)(a1 + 16));
      }

      uint64_t v26 = *(std::string::size_type **)a1;
      LODWORD(v72.__r_.__value_.__l.__data_) = 0;
      uint64_t v27 = v64;
      *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = *v64;
      sub_2CDFFC((CFDictionaryRef *)__p, &v69, "Gain", 4LL, &v72);
      unint64_t v28 = v26[2];
      uint64_t v29 = (void *)v26[1];
      if ((unint64_t)v29 >= v28)
      {
        int v30 = (void *)*v26;
        uint64_t v31 = (uint64_t)((uint64_t)v29 - *v26) >> 3;
        unint64_t v32 = v31 + 1;
        uint64_t v33 = v28 - (void)v30;
        if (v33 >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        else {
          unint64_t v34 = v32;
        }
        CFNumberRef v76 = v26 + 2;
        if (v34)
        {
          unint64_t v34 = (unint64_t)sub_7DC90(v34);
          int v30 = (void *)*v26;
          uint64_t v29 = (void *)v26[1];
        }

        else
        {
          uint64_t v35 = 0LL;
        }

        uint64_t v36 = (void **)(v34 + 8 * v31);
        uint64_t v37 = (const __CFBoolean *)(v34 + 8 * v35);
        CFBooleanRef v75 = v37;
        char *v36 = __p[0];
        std::string::size_type v38 = (std::string::size_type)(v36 + 1);
        __p[0] = 0LL;
        v74.__r_.__value_.__l.__cap_ = (std::string::size_type)(v36 + 1);
        if (v29 == v30)
        {
          int v40 = 0LL;
        }

        else
        {
          do
          {
            unint64_t v39 = (void *)*--v29;
            *--uint64_t v36 = v39;
            *uint64_t v29 = 0LL;
          }

          while (v29 != v30);
          std::string::size_type v38 = v74.__r_.__value_.__l.__cap_;
          uint64_t v37 = v75;
          int v40 = __p[0];
        }

        std::string::size_type v41 = *v26;
        *uint64_t v26 = (std::string::size_type)v36;
        v74.__r_.__value_.__r.__words[0] = v41;
        v74.__r_.__value_.__l.__size_ = v41;
        std::string::size_type v42 = v26[1];
        v26[1] = v38;
        v74.__r_.__value_.__l.__cap_ = v42;
        int64x2_t v43 = (const __CFBoolean *)v26[2];
        void v26[2] = (std::string::size_type)v37;
        CFBooleanRef v75 = v43;
        sub_AD86C((uint64_t)&v74);
        v26[1] = v38;
        uint64_t v27 = v64;
        if (v40) {
          CFRelease(v40);
        }
      }

      else
      {
        *uint64_t v29 = __p[0];
        v26[1] = (std::string::size_type)(v29 + 1);
      }

      uint64_t v45 = (_DWORD *)*((void *)v27 + 1);
      uint64_t v44 = (_DWORD *)*((void *)v27 + 2);
      while (v45 != v44)
      {
        uint64_t v46 = *(std::string::size_type **)a1;
        sub_2CDFFC((CFDictionaryRef *)&v72, &v69, "Bell", 4LL, v45);
        unint64_t v47 = v46[2];
        CFStringRef v48 = (void *)v46[1];
        if ((unint64_t)v48 >= v47)
        {
          CFNumberRef v49 = (void *)*v46;
          uint64_t v50 = (uint64_t)((uint64_t)v48 - *v46) >> 3;
          unint64_t v51 = v50 + 1;
          uint64_t v52 = v47 - (void)v49;
          if (v52 >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          else {
            unint64_t v53 = v51;
          }
          CFNumberRef v76 = v46 + 2;
          if (v53)
          {
            unint64_t v53 = (unint64_t)sub_7DC90(v53);
            CFNumberRef v49 = (void *)*v46;
            CFStringRef v48 = (void *)v46[1];
          }

          else
          {
            uint64_t v54 = 0LL;
          }

          int v55 = (void *)(v53 + 8 * v50);
          int64x2_t v56 = (const __CFBoolean *)(v53 + 8 * v54);
          CFBooleanRef v75 = v56;
          void *v55 = v72.__r_.__value_.__r.__words[0];
          std::string::size_type v57 = (std::string::size_type)(v55 + 1);
          v72.__r_.__value_.__r.__words[0] = 0LL;
          v74.__r_.__value_.__l.__cap_ = (std::string::size_type)(v55 + 1);
          if (v48 == v49)
          {
            unint64_t v59 = 0LL;
          }

          else
          {
            do
            {
              uint64_t v58 = *--v48;
              *--int v55 = v58;
              *CFStringRef v48 = 0LL;
            }

            while (v48 != v49);
            std::string::size_type v57 = v74.__r_.__value_.__l.__cap_;
            int64x2_t v56 = v75;
            unint64_t v59 = (const void *)v72.__r_.__value_.__r.__words[0];
          }

          std::string::size_type v60 = *v46;
          *uint64_t v46 = (std::string::size_type)v55;
          v74.__r_.__value_.__r.__words[0] = v60;
          v74.__r_.__value_.__l.__size_ = v60;
          std::string::size_type v61 = v46[1];
          v46[1] = v57;
          v74.__r_.__value_.__l.__cap_ = v61;
          uint64_t v62 = (const __CFBoolean *)v46[2];
          v46[2] = (std::string::size_type)v56;
          CFBooleanRef v75 = v62;
          sub_AD86C((uint64_t)&v74);
          v46[1] = v57;
          if (v59) {
            CFRelease(v59);
          }
        }

        else
        {
          *CFStringRef v48 = v72.__r_.__value_.__r.__words[0];
          v46[1] = (std::string::size_type)(v48 + 1);
        }

        v45 += 3;
      }

      sub_2CDD40(v70);
      a2 = v64 + 8;
    }

    while (v64 + 8 != a3);
  }

void sub_2CDC14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_2CDD40(void *a1)
{
  if (a1)
  {
    sub_2CDD40(*a1);
    sub_2CDD40(a1[1]);
    sub_2CDD80((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_2CDD80(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t sub_2CDDC4(void *a1, const UInt8 *a2, const void **a3)
{
  int v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    else {
      unint64_t v14 = v13;
    }
    CFStringRef v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_7BE90(v14);
    }
    else {
      uint64_t v15 = 0LL;
    }
    unint64_t v16 = v14;
    CFDictionaryRef v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_2CDEE0(v17, a2, a3);
    int v18 = v17 + 2;
    sub_7DFF0(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_7BEC4((uint64_t)&v16);
  }

  else
  {
    uint64_t result = (uint64_t)sub_2CDEE0((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }

  a1[1] = v10;
  return result;
}

void sub_2CDEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

CFStringRef *sub_2CDEE0(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }

  CFStringRef v7 = CFStringCreateWithBytes(0LL, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  unint64_t v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_2CDF88(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2CDFB8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_2CDD80((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

void sub_2CDFFC(CFDictionaryRef *a1, void *a2, char *a3, uint64_t a4, _DWORD *a5)
{
  LODWORD(valuePtr[0]) = *a5;
  if (!CFNumberCreate(0LL, kCFNumberFloatType, valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_59370(&v27, "Quality");
  LODWORD(valuePtr[0]) = a5[2];
  if (!CFNumberCreate(0LL, kCFNumberFloatType, valuePtr))
  {
    CFStringRef v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
  }

  sub_59370(&v29, "Gain");
  LODWORD(valuePtr[0]) = a5[1];
  if (!CFNumberCreate(0LL, kCFNumberFloatType, valuePtr))
  {
    CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
  }

  sub_59370(v31, "Active");
  v31[1] = (CFStringRef)kCFBooleanTrue;
  sub_59370(&v32, "Type");
  sub_59370(&v33, a3);
  sub_59370(&v34, "Channels");
  memset(valuePtr, 0, sizeof(valuePtr));
  sub_7DCF4(valuePtr, a2[2]);
  uint64_t v11 = (void *)*a2;
  uint64_t v9 = a2 + 1;
  unint64_t v10 = v11;
  if (v11 != v9)
  {
    do
    {
      sub_2CDDC4(valuePtr, (const UInt8 *)v10 + 32, (const void **)v10 + 7);
      uint64_t v12 = (void *)v10[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          unint64_t v10 = v13;
        }

        while (!v14);
      }

      unint64_t v10 = v13;
    }

    while (v13 != v9);
  }

  CFDictionaryRef v15 = sub_7C1F4(valuePtr);
  unint64_t v24 = valuePtr;
  sub_7CFCC((void ***)&v24);
  CFDictionaryRef v35 = v15;
  v22[0] = &v25;
  v22[1] = 6LL;
  uint64_t v16 = 0LL;
  *a1 = sub_5A950((uint64_t)v22);
  do
  {
    CFDictionaryRef v17 = *(CFDictionaryRef *)((char *)&v35 + v16);
    if (v17) {
      CFRelease(v17);
    }
    int v18 = *(CFStringRef *)((char *)&v34 + v16);
    if (v18) {
      CFRelease(v18);
    }
    v16 -= 16LL;
  }

  while (v16 != -96);
}

void sub_2CE2D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, CFTypeRef a17, uint64_t a18, CFTypeRef a19, uint64_t a20, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_7DCC4(v21);
  while (v21 != (const void **)&a16)
  {
    v21 -= 2;
    sub_7BFE0((uint64_t)v21);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2CE400( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = *a5;
  if (*((_BYTE *)a6 + 8))
  {
    uint64_t v11 = *a6;
    uint64_t v12 = operator new(8uLL);
    *(void *)(a1 + 32) = v12;
    *v12++ = v11;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = 1;
  }

  else
  {
    sub_DA6C8(a1 + 32, (uint64_t)&unk_402AF0);
  }

  *(_OWORD *)(a1 + 64) = *a7;
  sub_DA7BC((_BYTE *)(a1 + 80), a8);
  sub_2CE4F0(a1);
  return a1;
}

void sub_2CE4B4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 120)) {
    sub_D0C14(v3);
  }
  if (*(_BYTE *)(v1 + 56))
  {
    CFIndex v5 = *v2;
    if (*v2)
    {
      *(void *)(v1 + 40) = v5;
      operator delete(v5);
    }
  }

  _Unwind_Resume(exception_object);
}

float sub_2CE4F0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 12))
  {
    if (!*(_BYTE *)(a1 + 28) || !*(_BYTE *)(a1 + 20)) {
      return result;
    }
    goto LABEL_10;
  }

  if (*(_BYTE *)(a1 + 20))
  {
    float result = *(float *)(a1 + 8);
    if (result > *(float *)(a1 + 16))
    {
      uint64_t v2 = (os_log_t *)sub_138E8(13);
      uint64_t v3 = *v2;
      if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "RoutingTypes.cpp";
        __int16 v13 = 1024;
        int v14 = 1143;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v11,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Invariant failure.");
    }
  }

  if (*(_BYTE *)(a1 + 28))
  {
    float result = *(float *)(a1 + 24);
    if (result < *(float *)(a1 + 8))
    {
      CFIndex v5 = (os_log_t *)sub_138E8(13);
      CFIndex v6 = *v5;
      if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "RoutingTypes.cpp";
        __int16 v13 = 1024;
        int v14 = 1150;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v11,  0x12u);
      }

      CFStringRef v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v7, "Invariant failure.");
    }

    if (*(_BYTE *)(a1 + 20))
    {
LABEL_10:
      float result = *(float *)(a1 + 24);
      if (result > *(float *)(a1 + 16))
      {
        unint64_t v8 = (os_log_t *)sub_138E8(13);
        uint64_t v9 = *v8;
        if (*v8)
        {
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
          {
            int v11 = 136315394;
            uint64_t v12 = "RoutingTypes.cpp";
            __int16 v13 = 1024;
            int v14 = 1154;
            _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v11,  0x12u);
          }
        }

        unint64_t v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v10, "Invariant failure.");
      }
    }
  }

  return result;
}

void sub_2CE77C(_Unwind_Exception *a1)
{
}

_DWORD *sub_2CE7A0(_DWORD *result)
{
  int v1 = result[6];
  if (v1 > 1647718501)
  {
    if (v1 > 1781740086)
    {
      if (v1 <= 1970496067)
      {
        BOOL v3 = v1 == 1781740087;
        int v4 = 1836412020;
      }

      else
      {
        BOOL v3 = v1 == 1970496068 || v1 == 2003068262;
        int v4 = 2004367664;
      }
    }

    else
    {
      if (v1 <= 1751410291)
      {
        goto LABEL_99;
      }

      BOOL v3 = v1 == 1751410292 || v1 == 1752709424;
      int v4 = 1768513904;
    }

void sub_2CEDFC(_Unwind_Exception *a1)
{
}

std::string *sub_2CEE1C(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  std::string::append(a1, "SWVolumeMode:", 0xDuLL);
  if (*((_BYTE *)a2 + 4))
  {
    uint64_t v4 = *a2;
    else {
      CFIndex v5 = off_47B698[v4];
    }
  }

  else
  {
    CFIndex v5 = "no value assigned";
  }

  sub_7D084(&__p, v5);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  std::string::append(a1, ", minVolume(dB):", 0x10uLL);
  if (*((_BYTE *)a2 + 12)) {
    std::to_string(&__p, *((float *)a2 + 2));
  }
  else {
    sub_7D084(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned __int16 v8 = &__p;
  }
  else {
    unsigned __int16 v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  std::string::append(a1, ", maxVolume(dB):", 0x10uLL);
  if (*((_BYTE *)a2 + 20)) {
    std::to_string(&__p, *((float *)a2 + 4));
  }
  else {
    sub_7D084(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v10 = &__p;
  }
  else {
    unint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v11 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v10, v11);
  if (*((_BYTE *)a2 + 40))
  {
    std::string::append(a1, ", override(dB): minimum:", 0x18uLL);
    std::to_string(&__p, *((double *)a2 + 3));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v13 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v12, v13);
    std::string::append(a1, ", maximum:", 0xAuLL);
    std::to_string(&__p, *((double *)a2 + 4));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v14 = &__p;
    }
    else {
      int v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v15 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v14, v15);
  }

  return std::string::append(a1, "} ", 2uLL);
}

void sub_2CF090( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2CF0E8(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ DSPChainConfig:", 0x11uLL);
  int v4 = *(char *)(a2 + 47);
  if (v4 >= 0) {
    CFIndex v5 = (const std::string::value_type *)(a2 + 24);
  }
  else {
    CFIndex v5 = *(const std::string::value_type **)(a2 + 24);
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 32);
  }
  std::string::append(a1, v5, v6);
  std::string::append(a1, "; Device Type:", 0xEuLL);
  sub_2CA1C(&v26, *(unsigned int *)(a2 + 48));
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v7 = &v26;
  }
  else {
    int v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v26.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v7, size);
  std::string::append(a1, "; Should Cache:", 0xFuLL);
  if (*(_BYTE *)(a2 + 52)) {
    std::string::size_type v9 = "true";
  }
  else {
    std::string::size_type v9 = "false";
  }
  if (*(_BYTE *)(a2 + 52)) {
    std::string::size_type v10 = 4LL;
  }
  else {
    std::string::size_type v10 = 5LL;
  }
  std::string::append(a1, v9, v10);
  std::string::size_type v11 = *(uint64_t ***)a2;
  uint64_t v12 = *(uint64_t ***)(a2 + 8);
  if (*(uint64_t ***)a2 != v12)
  {
    do
    {
      std::string::size_type v13 = *v11;
      int v14 = v11[1];
      while (v13 != v14)
      {
        sub_153340(v25, *v13);
        uint64_t v15 = v25[1];
        sub_7D084(&__p, " [ DSPBlockConfig: ");
        while ((uint64_t *)v15 != v25)
        {
          sub_14A9A0((uint64_t)&v26, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(v15 + 16));
          std::string __p = v26;
          uint64_t v15 = *(void *)(v15 + 8);
        }

        std::string v24 = __p;
        memset(&__p, 0, sizeof(__p));
        int v16 = std::string::append(&v24, " ]", 2uLL);
        __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        int64_t cap = v16->__r_.__value_.__l.__cap_;
        *(_OWORD *)CFNumberRef v21 = v17;
        v16->__r_.__value_.__l.__size_ = 0LL;
        v16->__r_.__value_.__l.__cap_ = 0LL;
        v16->__r_.__value_.__r.__words[0] = 0LL;
        sub_1532B4(v25);
        if (cap >= 0) {
          __int16 v18 = v21;
        }
        else {
          __int16 v18 = (void **)v21[0];
        }
        if (cap >= 0) {
          std::string::size_type v19 = HIBYTE(cap);
        }
        else {
          std::string::size_type v19 = (std::string::size_type)v21[1];
        }
        std::string::append(a1, (const std::string::value_type *)v18, v19);
        if (SHIBYTE(cap) < 0) {
          operator delete(v21[0]);
        }
        ++v13;
      }

      v11 += 3;
    }

    while (v11 != v12);
  }

  return std::string::append(a1, " ]", 2uLL);
}

void sub_2CF350( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, char a30)
{
}

void sub_2CF3E4(void **a1, void *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (*a2 == a2[1])
  {
    if (sub_7531C())
    {
      std::string::size_type v11 = a2 + 27;
      if (a2[27] != a2[28])
      {
        uint64_t v12 = sub_7DC90(1uLL);
        int v14 = v12;
        void *v12 = a2;
        *a1 = v12;
        a1[1] = v12 + 1;
        a1[2] = &v12[v13];
        if (v13 >= 2)
        {
          v12[1] = v11;
          unsigned __int16 v8 = v12 + 2;
          goto LABEL_6;
        }

        uint64_t v15 = 2LL;
        uint64_t v16 = 8 * v13;
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_7DC90(v17);
        }
        else {
          uint64_t v18 = 0LL;
        }
        uint64_t v19 = 0LL;
        unint64_t v20 = v17 + 8;
        unint64_t v21 = v17 + 8 * v18;
        *(void *)(v17 + 8) = v11;
        unsigned __int16 v8 = (void *)(v17 + 16);
        do
        {
          *(void *)(v17 + v19 * 8) = v14[v19];
          --v19;
        }

        while (v19 != -1);
        std::string::size_type v10 = *a1;
        *a1 = (void *)(v20 - 8);
        a1[1] = v8;
        a1[2] = (void *)v21;
        if (!v10) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
  }

  else
  {
    int v4 = operator new(8uLL);
    *int v4 = a2;
    *a1 = v4;
    a1[1] = v4 + 1;
    a1[2] = v4 + 1;
    if (a2[27] != a2[28])
    {
      CFIndex v5 = v4;
      std::string::size_type v6 = sub_7DC90(2uLL);
      v6[1] = a2 + 27;
      unsigned __int16 v8 = v6 + 2;
      *std::string::size_type v6 = *v5;
      std::string::size_type v9 = *a1;
      *a1 = v6;
      a1[1] = v6 + 2;
      a1[2] = &v6[v7];
      if (!v9)
      {
LABEL_6:
        a1[1] = v8;
        return;
      }

      std::string::size_type v10 = v9;
LABEL_5:
      operator delete(v10);
      goto LABEL_6;
    }
  }

void sub_2CF568(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2CF584(unsigned int a1, uint64_t a2)
{
  unsigned int v11 = a1;
  if (!a2)
  {
    CFIndex v5 = (os_log_t *)sub_138E8(13);
    std::string::size_type v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 269;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*((_BYTE *)sub_2CF768(a1, &v11) + 48))
  {
    unsigned __int16 v8 = (os_log_t *)sub_138E8(13);
    std::string::size_type v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 270;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    std::string::size_type v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v10, "Precondition failure.");
  }

  float result = sub_2CF768(a1, &v11);
  result[5] = a2;
  *((_BYTE *)result + 48) = 1;
  return result;
}

void sub_2CF748(_Unwind_Exception *a1)
{
}

uint64_t *sub_2CF768(unsigned int a1, _DWORD *a2)
{
  uint64_t v3 = qword_48F0E0;
  if (qword_48F0E0)
  {
    while (1)
    {
      while (1)
      {
        int v4 = (uint64_t *)v3;
        unsigned int v5 = *(_DWORD *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        std::string::size_type v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }

      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        std::string::size_type v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    std::string::size_type v6 = &qword_48F0E0;
    int v4 = &qword_48F0E0;
LABEL_9:
    uint64_t v7 = v4;
    int v4 = (uint64_t *)operator new(0x78uLL);
    *((_DWORD *)v4 + 8) = *a2;
    *(_OWORD *)(v4 + 5) = 0u;
    *(_OWORD *)(v4 + 7) = 0u;
    *(_OWORD *)(v4 + 9) = 0u;
    *(_OWORD *)(v4 + 11) = 0u;
    *(_OWORD *)(v4 + 13) = 0u;
    *int v4 = 0LL;
    v4[1] = 0LL;
    v4[2] = (uint64_t)v7;
    *std::string::size_type v6 = (uint64_t)v4;
    unsigned __int16 v8 = v4;
    if (*(void *)qword_48F0D8)
    {
      qword_48F0D8 = *(void *)qword_48F0D8;
      unsigned __int16 v8 = (uint64_t *)*v6;
    }

    sub_7A420((uint64_t *)qword_48F0E0, v8);
    ++qword_48F0E8;
  }

  return v4;
}

void sub_2CF850(unsigned int a1)
{
  unsigned int v8 = a1;
  if (*((_BYTE *)sub_2CF768(a1, &v8) + 112))
  {
    unsigned int v5 = (os_log_t *)sub_138E8(13);
    std::string::size_type v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      std::string::size_type v10 = "RoutingTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 298;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_9005C();
  if (byte_48CC70)
  {
    uint64_t v2 = sub_2CF768(a1, &v8);
    v2[13] = (uint64_t)&qword_4A8D08;
    *((_BYTE *)v2 + 112) = 1;
  }

  else
  {
    uint64_t v3 = (os_log_t *)sub_138E8(20);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        std::string::size_type v10 = "RoutingTypes.cpp";
        __int16 v11 = 1024;
        int v12 = 308;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Codec wind filter usage not allowed on this device. Ignoring request.",  buf,  0x12u);
      }
    }
  }

void sub_2CF9F4(_Unwind_Exception *a1)
{
}

void sub_2CFA10(unsigned int a1, int a2, float a3)
{
  std::string::size_type v6 = (float *)qword_48F0C0;
  uint64_t v7 = qword_48F0C8;
  unsigned int v8 = &qword_48F000;
  if (qword_48F0C0 != qword_48F0C8)
  {
    do
    {
      if (*((_DWORD *)v6 + 1) == a1 && *((_DWORD *)v6 + 2) == a2)
      {
        std::string::size_type v10 = (os_log_t *)sub_138E8(20);
        __int16 v11 = *v10;
        if (*v10)
        {
          if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
          {
            int v12 = "unknown";
            if (a1 <= 6) {
              int v12 = off_471298[a1];
            }
            sub_7D084(__p, v12);
            uint64_t v13 = __p;
            if (v25 < 0) {
              uint64_t v13 = (void **)__p[0];
            }
            double v14 = *v6;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            CFStringRef v27 = "RoutingTypes.cpp";
            __int16 v28 = 1024;
            int v29 = 318;
            __int16 v30 = 2080;
            uint64_t v31 = v13;
            __int16 v32 = 2048;
            double v33 = v14;
            _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d SystemSoundVolumeCap entry already exists for this port type %s : %f dB",  buf,  0x26u);
            if (v25 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      v6 += 3;
    }

    while (v6 != (float *)v7);
    unsigned int v8 = &qword_48F000;
    std::string::size_type v6 = (float *)qword_48F0C8;
  }

  if ((unint64_t)v6 >= qword_48F0D0)
  {
    uint64_t v16 = qword_48F0C0;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - qword_48F0C0) >> 2);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x1555555555555555LL) {
      sub_7A87C();
    }
    if (0x5555555555555556LL * ((qword_48F0D0 - qword_48F0C0) >> 2) > v18) {
      unint64_t v18 = 0x5555555555555556LL * ((qword_48F0D0 - qword_48F0C0) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((qword_48F0D0 - qword_48F0C0) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v19 = 0x1555555555555555LL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      if (v19 > 0x1555555555555555LL) {
        sub_7A8C4();
      }
      unint64_t v20 = operator new(12 * v19);
    }

    else
    {
      unint64_t v20 = 0LL;
    }

    uint64_t v21 = (uint64_t)v20 + 12 * v17;
    *(float *)uint64_t v21 = a3;
    *(_DWORD *)(v21 + 4) = a1;
    *(_DWORD *)(v21 + 8) = a2;
    uint64_t v15 = v21 + 12;
    if (v6 != (float *)v16)
    {
      do
      {
        uint64_t v22 = *(void *)(v6 - 3);
        v6 -= 3;
        int v23 = *((_DWORD *)v6 + 2);
        *(void *)(v21 - 12) = v22;
        v21 -= 12LL;
        *(_DWORD *)(v21 + 8) = v23;
      }

      while (v6 != (float *)v16);
      std::string::size_type v6 = (float *)qword_48F0C0;
    }

    qword_48F0C0 = v21;
    qword_48F0C8 = v15;
    qword_48F0D0 = (uint64_t)v20 + 12 * v19;
    if (v6) {
      operator delete(v6);
    }
  }

  else
  {
    *std::string::size_type v6 = a3;
    uint64_t v15 = (uint64_t)(v6 + 3);
    *((_DWORD *)v6 + 1) = a1;
    *((_DWORD *)v6 + 2) = a2;
  }

  v8[25] = v15;
}

unint64_t sub_2CFCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 48))
    {
      uint64_t v9 = *(void *)(v5 + 40);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00LL;
      return v10 | v9;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v16 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 477;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2CFCBC(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  return v10 | v9;
}

unint64_t sub_2CFE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 64))
    {
      uint64_t v9 = *(void *)(v5 + 56);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00LL;
      return v10 | v9;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v16 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 501;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2CFE58(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  return v10 | v9;
}

unint64_t sub_2CFFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 80))
    {
      uint64_t v9 = *(void *)(v5 + 72);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00LL;
      return v10 | v9;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v16 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 525;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2CFFF4(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  return v10 | v9;
}

unint64_t sub_2D0190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 96))
    {
      uint64_t v9 = *(void *)(v5 + 88);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00LL;
      return v10 | v9;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v16 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 549;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2D0190(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  return v10 | v9;
}

uint64_t sub_2D032C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v4 = sub_2D03B0(a1, a2);
  if (v5)
  {
    unint64_t v8 = *(void *)(v4 + 8);
    unint64_t v6 = v4 + 8;
    unint64_t v7 = v8;
    if (!v8)
    {
      unsigned int v13 = 0;
      return v13 | ((_DWORD)v7 << 8);
    }

    unint64_t v9 = v6;
    do
    {
      unsigned int v10 = *(_DWORD *)(v7 + 28);
      BOOL v11 = v10 >= a3;
      if (v10 >= a3) {
        int v12 = (unint64_t *)v7;
      }
      else {
        int v12 = (unint64_t *)(v7 + 8);
      }
      if (v11) {
        unint64_t v9 = v7;
      }
      unint64_t v7 = *v12;
    }

    while (*v12);
    if (v9 != v6 && *(_DWORD *)(v9 + 28) <= a3)
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      LODWORD(v7) = 1;
      return v13 | ((_DWORD)v7 << 8);
    }
  }

  unsigned int v13 = 0;
  LODWORD(v7) = 0;
  return v13 | ((_DWORD)v7 << 8);
}

unint64_t sub_2D03B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unint64_t v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 112))
    {
      uint64_t v9 = *(void *)(v5 + 104);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00LL;
      return v10 | v9;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v16 >= 0) {
            unsigned int v13 = __p;
          }
          else {
            unsigned int v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 573;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2D03B0(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  return v10 | v9;
}

void sub_2D054C()
{
}

uint64_t **sub_2D05D0(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  BOOL v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        BOOL v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        BOOL v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    unint64_t v10 = (char *)operator new(0xB0uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *((void *)v10 + 21) = 0LL;
    *(_OWORD *)(v10 + 120) = 0u;
    *((void *)v10 + 14) = v10 + 120;
    *((void *)v10 + 19) = 0LL;
    *((void *)v10 + 18) = 0LL;
    *((void *)v10 + 17) = v10 + 144;
    char v13 = 1;
    sub_32C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0LL;
    sub_F2A20((uint64_t)v12);
    return (uint64_t **)v10;
  }

  return v8;
}

uint64_t **sub_2D06D4(uint64_t **a1, unsigned int a2)
{
  unsigned int v8 = a2;
  if (*((_BYTE *)sub_2D05D0(a1, a2, &v8) + 108))
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    unsigned int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v10 = "RoutingTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 681;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  float result = sub_2D05D0(a1, a2, &v8);
  *((_DWORD *)result + 26) = 32;
  *((_BYTE *)result + 108) = 1;
  return result;
}

void sub_2D07FC(_Unwind_Exception *a1)
{
}

uint64_t **sub_2D0818(uint64_t **a1, unsigned int a2)
{
  int v10 = 1986291046;
  unsigned int v11 = a2;
  uint64_t v4 = sub_2D05D0(a1, a2, &v11);
  if (*((_BYTE *)sub_2D0988(v4 + 14, 0x76646566u, &v10) + 36))
  {
    BOOL v7 = (os_log_t *)sub_138E8(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 692;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v5 = sub_2D05D0(a1, a2, &v11);
  float result = sub_2D0988(v5 + 14, 0x76646566u, &v10);
  *((_DWORD *)result + 8) = 1;
  *((_BYTE *)result + 36) = 1;
  return result;
}

void sub_2D096C(_Unwind_Exception *a1)
{
}

uint64_t **sub_2D0988(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((_BYTE *)v9 + 32) = 0;
    *((_BYTE *)v9 + 36) = 0;
    sub_32C38(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }

  return v7;
}

uint64_t **sub_2D0A34(uint64_t **a1)
{
  uint64_t v2 = sub_2D05D0(a1, 0x696D6466u, &v8[1]);
  if (*((_BYTE *)sub_2D0988(v2 + 17, 0x76646566u, v8) + 36))
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    unsigned int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v10 = "RoutingTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 699;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v3 = sub_2D05D0(a1, 0x696D6466u, &v8[1]);
  float result = sub_2D0988(v3 + 17, 0x76646566u, v8);
  *((_DWORD *)result + 8) = 1;
  *((_BYTE *)result + 36) = 1;
  return result;
}

void sub_2D0B98(_Unwind_Exception *a1)
{
}

uint64_t sub_2D0BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 84))
    {
      uint64_t v9 = *(void *)(v5 + 80);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000LL;
      unint64_t v11 = v9 & 0xFFFFFF0000000000LL;
      return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v13 = sub_138E8(20);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      __int16 v14 = *(os_log_s **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v18 >= 0) {
            int v15 = __p;
          }
          else {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 754;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2D0BB4(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  int v12 = 0;
  return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
}

uint64_t sub_2D0D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 92))
    {
      uint64_t v9 = *(void *)(v5 + 88);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000LL;
      unint64_t v11 = v9 & 0xFFFFFF0000000000LL;
      return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v13 = sub_138E8(20);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      __int16 v14 = *(os_log_s **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v18 >= 0) {
            int v15 = __p;
          }
          else {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 778;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2D0D68(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  int v12 = 0;
  return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
}

_BYTE *sub_2D0F1C(_BYTE *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = a2 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a3;
      else {
        unint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }

    while (*v10);
  }

  if ((_DWORD)a3 == 1768776806)
  {
    uint64_t *result = 0;
    result[24] = 0;
  }

  else
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a3);
          if (v15 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v17 = "RoutingTypes.cpp";
          __int16 v18 = 1024;
          int v19 = 802;
          __int16 v20 = 2080;
          __int16 v21 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    return (_BYTE *)sub_2D0F1C(v5, a2, 1768776806LL);
  }

  return result;
}

uint64_t sub_2D10E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 100))
    {
      uint64_t v9 = *(void *)(v5 + 96);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000LL;
      unint64_t v11 = v9 & 0xFFFFFF0000000000LL;
      return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v13 = sub_138E8(20);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      __int16 v14 = *(os_log_s **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v18 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 826;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2D10E8(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  int v12 = 0;
  return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
}

uint64_t sub_2D129C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 108))
    {
      uint64_t v9 = *(void *)(v5 + 104);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000LL;
      unint64_t v11 = v9 & 0xFFFFFF0000000000LL;
      return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v13 = sub_138E8(20);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      __int16 v14 = *(os_log_s **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v18 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 850;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2D129C(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  int v12 = 0;
  return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
}

uint64_t sub_2D1450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = a1 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a2;
      else {
        unint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }

    while (*v10);
    if (v7 != a1 + 8 && *(_DWORD *)(v7 + 32) <= a2)
    {
      uint64_t v13 = *(void *)(v7 + 120);
      uint64_t v11 = v7 + 120;
      uint64_t v12 = v13;
      if (v13)
      {
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *(_DWORD *)(v12 + 28);
          BOOL v16 = v15 >= a3;
          else {
            unint64_t v17 = (uint64_t *)(v12 + 8);
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          uint64_t v12 = *v17;
        }

        while (*v17);
        if (v14 != v11 && *(_DWORD *)(v14 + 28) <= a3 && *(_BYTE *)(v14 + 36))
        {
          uint64_t v18 = sub_138E8(20);
          if ((*(_BYTE *)(v18 + 8) & 1) != 0)
          {
            int v19 = *(os_log_s **)v18;
            if (*(void *)v18)
            {
              if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
              {
                if (!*(_BYTE *)(v14 + 36)) {
                  sub_8DEEC();
                }
                int v20 = *(_DWORD *)(v14 + 32);
                __int16 v21 = "????";
                if (v20 == 1) {
                  __int16 v21 = "Cull > 16bit";
                }
                if (v20) {
                  int v22 = (char *)v21;
                }
                else {
                  int v22 = "Cull < 24bit";
                }
                __int16 v23 = v43;
                sub_7D084(v43, v22);
                if (v44 < 0) {
                  __int16 v23 = (void **)v43[0];
                }
                sub_2CA1C(v41, a2);
                int v24 = v42;
                char v25 = (void **)v41[0];
                sub_2CA1C(__p, a3);
                std::string v26 = v41;
                if (v24 < 0) {
                  std::string v26 = v25;
                }
                if (v40 >= 0) {
                  CFStringRef v27 = __p;
                }
                else {
                  CFStringRef v27 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                uint64_t v46 = "RoutingTypes.cpp";
                __int16 v47 = 1024;
                int v48 = 871;
                __int16 v49 = 2080;
                uint64_t v50 = v23;
                __int16 v51 = 2080;
                uint64_t v52 = v26;
                __int16 v53 = 2080;
                uint64_t v54 = v27;
                _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found a stream culling policy:%s for mode:%s, device type:%s",  buf,  0x30u);
                if (v40 < 0) {
                  operator delete(__p[0]);
                }
                if (v42 < 0) {
                  operator delete(v41[0]);
                }
                if (v44 < 0) {
                  operator delete(v43[0]);
                }
              }
            }
          }

          uint64_t v28 = *(void *)(v14 + 32);
LABEL_62:
          int v31 = v28 & 0xFFFFFF00;
          unint64_t v29 = v28 & 0xFFFFFFFF00000000LL;
          unint64_t v30 = v28 & 0xFFFFFF0000000000LL;
          return v29 & 0xFF00000000LL | v28 | v30 | v31 & 0xFFFFFF00;
        }
      }
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v32 = sub_138E8(20);
    if ((*(_BYTE *)(v32 + 8) & 1) != 0)
    {
      double v33 = *(os_log_s **)v32;
      if (*(void *)v32)
      {
        if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v43, a2);
          int v34 = v44;
          CFDictionaryRef v35 = (void **)v43[0];
          sub_2CA1C(v41, a3);
          uint64_t v36 = v43;
          if (v34 < 0) {
            uint64_t v36 = v35;
          }
          if (v42 >= 0) {
            uint64_t v37 = v41;
          }
          else {
            uint64_t v37 = (void **)v41[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v46 = "RoutingTypes.cpp";
          __int16 v47 = 1024;
          int v48 = 879;
          __int16 v49 = 2080;
          uint64_t v50 = v36;
          __int16 v51 = 2080;
          uint64_t v52 = v37;
          _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s and device type: %s, looking in default mode instead.",  buf,  0x26u);
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          if (v44 < 0) {
            operator delete(v43[0]);
          }
        }
      }
    }

    uint64_t v28 = sub_2D1450(a1, 1768776806LL, a3);
    goto LABEL_62;
  }

  LOBYTE(v28) = 0;
  unint64_t v29 = 0LL;
  unint64_t v30 = 0LL;
  int v31 = 0;
  return v29 & 0xFF00000000LL | v28 | v30 | v31 & 0xFFFFFF00;
}

void sub_2D17E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D1828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = a1 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a2;
      else {
        unint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }

    while (*v10);
    if (v7 != a1 + 8 && *(_DWORD *)(v7 + 32) <= a2)
    {
      uint64_t v13 = *(void *)(v7 + 144);
      uint64_t v11 = v7 + 144;
      uint64_t v12 = v13;
      if (v13)
      {
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *(_DWORD *)(v12 + 28);
          BOOL v16 = v15 >= a3;
          else {
            unint64_t v17 = (uint64_t *)(v12 + 8);
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          uint64_t v12 = *v17;
        }

        while (*v17);
        if (v14 != v11 && *(_DWORD *)(v14 + 28) <= a3 && *(_BYTE *)(v14 + 36))
        {
          uint64_t v18 = sub_138E8(20);
          if ((*(_BYTE *)(v18 + 8) & 1) != 0)
          {
            int v19 = *(os_log_s **)v18;
            if (*(void *)v18)
            {
              if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
              {
                if (!*(_BYTE *)(v14 + 36)) {
                  sub_8DEEC();
                }
                uint64_t v20 = *(unsigned int *)(v14 + 32);
                else {
                  __int16 v21 = off_47BFF0[v20];
                }
                double v33 = v42;
                sub_7D084(v42, v21);
                if (v43 < 0) {
                  double v33 = (void **)v42[0];
                }
                sub_2CA1C(__p, a2);
                int v34 = v41;
                CFDictionaryRef v35 = (void **)__p[0];
                sub_2CA1C(v38, a3);
                uint64_t v36 = __p;
                if (v34 < 0) {
                  uint64_t v36 = v35;
                }
                if (v39 >= 0) {
                  uint64_t v37 = v38;
                }
                else {
                  uint64_t v37 = (void **)v38[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                uint64_t v45 = "RoutingTypes.cpp";
                __int16 v46 = 1024;
                int v47 = 900;
                __int16 v48 = 2080;
                __int16 v49 = v33;
                __int16 v50 = 2080;
                __int16 v51 = v36;
                __int16 v52 = 2080;
                __int16 v53 = v37;
                _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found a sample rate culling policy:%s for mode:%s, device type:%s",  buf,  0x30u);
                if (v39 < 0) {
                  operator delete(v38[0]);
                }
                if (v41 < 0) {
                  operator delete(__p[0]);
                }
                if (v43 < 0) {
                  operator delete(v42[0]);
                }
              }
            }
          }

          uint64_t v22 = *(void *)(v14 + 32);
LABEL_45:
          int v25 = v22 & 0xFFFFFF00;
          unint64_t v23 = v22 & 0xFFFFFFFF00000000LL;
          unint64_t v24 = v22 & 0xFFFFFF0000000000LL;
          return v23 & 0xFF00000000LL | v22 | v24 | v25 & 0xFFFFFF00;
        }
      }
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v26 = sub_138E8(20);
    if ((*(_BYTE *)(v26 + 8) & 1) != 0)
    {
      CFStringRef v27 = *(os_log_s **)v26;
      if (*(void *)v26)
      {
        if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v42, a2);
          int v28 = v43;
          unint64_t v29 = (void **)v42[0];
          sub_2CA1C(__p, a3);
          unint64_t v30 = v42;
          if (v28 < 0) {
            unint64_t v30 = v29;
          }
          if (v41 >= 0) {
            int v31 = __p;
          }
          else {
            int v31 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v45 = "RoutingTypes.cpp";
          __int16 v46 = 1024;
          int v47 = 908;
          __int16 v48 = 2080;
          __int16 v49 = v30;
          __int16 v50 = 2080;
          __int16 v51 = v31;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s and device type: %s, looking in default mode instead.",  buf,  0x26u);
          if (v41 < 0) {
            operator delete(__p[0]);
          }
          if (v43 < 0) {
            operator delete(v42[0]);
          }
        }
      }
    }

    uint64_t v22 = sub_2D1828(a1, 1768776806LL, a3);
    goto LABEL_45;
  }

  LOBYTE(v22) = 0;
  unint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
  int v25 = 0;
  return v23 & 0xFF00000000LL | v22 | v24 | v25 & 0xFFFFFF00;
}

void sub_2D1BB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D1BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 168))
    {
      uint64_t v9 = *(void *)(v5 + 164);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000LL;
      unint64_t v11 = v9 & 0xFFFFFF0000000000LL;
      return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }

  if ((_DWORD)a2 != 1768776806)
  {
    uint64_t v13 = sub_138E8(20);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      uint64_t v14 = *(os_log_s **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          if (v18 >= 0) {
            unsigned int v15 = __p;
          }
          else {
            unsigned int v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 957;
          __int16 v23 = 2080;
          unint64_t v24 = v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v9 = sub_2D1BF8(a1, 1768776806LL);
    goto LABEL_25;
  }

  LOBYTE(v9) = 0;
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  int v12 = 0;
  return v10 & 0xFF00000000LL | v9 | v11 | v12 & 0xFFFFFF00;
}

std::string *sub_2D1DAC(std::string *a1, uint64_t **a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unsigned int v6 = *a2;
    do
    {
      if (*v6++)
      {
        std::string::append(a1, "[ ", 2uLL);
        sub_2CF0E8(&v16, *v5);
        unsigned int v8 = a2[1];
        if (v6 == v8) {
          uint64_t v9 = " ]";
        }
        else {
          uint64_t v9 = " ], ";
        }
        if (v6 == v8) {
          std::string::size_type v10 = 2LL;
        }
        else {
          std::string::size_type v10 = 4LL;
        }
        unint64_t v11 = std::string::append(&v16, v9, v10);
        __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        int64_t cap = v11->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v12;
        v11->__r_.__value_.__l.__size_ = 0LL;
        v11->__r_.__value_.__l.__cap_ = 0LL;
        v11->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        if (cap >= 0) {
          std::string::size_type v14 = HIBYTE(cap);
        }
        else {
          std::string::size_type v14 = (std::string::size_type)__p[1];
        }
        std::string::append(a1, (const std::string::value_type *)v13, v14);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v4 = a2[1];
      }

      uint64_t v5 = v6;
    }

    while (v6 != v4);
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_2D1EEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_2D1F40( uint64_t a1, uint64_t a2, void *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  BOOL v16 = a7 != 0;
  unint64_t v17 = sub_2954FC((uint64_t *)a1, a2);
  *((_BYTE *)v17 + 24) = (a6 != 0) | (2 * v16) | v17[3] & 0xFC;
  *((_DWORD *)v17 + 8) = a4;
  *((_BYTE *)v17 + 36) = a5 != 0;
  *((_BYTE *)v17 + 37) = a8 != 0;
  *((_BYTE *)v17 + 38) = a9 != 0;
  sub_249A14(v17 + 5, a3);
  sub_249D04((uint64_t *)(a1 + 64), a3 + 3);
  *(_BYTE *)(a1 + 88) = a10 == 1;
  return a1;
}

void sub_2D2008(_Unwind_Exception *a1)
{
}

uint64_t sub_2D202C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  unint64_t v11 = v12;
  v12[0] = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  v12[1] = 0LL;
  void v12[2] = v13;
  sub_2D1F40(a1, a2, &v11, a3, a4, a5, a6, a7, a8, a9);
  sub_F16A4(v13[0]);
  sub_F16E4(v12[0]);
  return a1;
}

void sub_2D20A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t sub_2D20C0( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = *a5;
  if (*(_BYTE *)(a6 + 8))
  {
    sub_2CF3E4((void **)&v12, *(void **)a6);
    *(_OWORD *)(a1 + 32) = v12;
    *(void *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = 1;
  }

  else
  {
    sub_DA6C8(a1 + 32, (uint64_t)&unk_402AF0);
  }

  *(_OWORD *)(a1 + 64) = *a7;
  sub_DA7BC((_BYTE *)(a1 + 80), a8);
  sub_2CE4F0(a1);
  return a1;
}

void sub_2D2178(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 120)) {
    sub_D0C14(v3);
  }
  if (*(_BYTE *)(v1 + 56))
  {
    uint64_t v5 = *v2;
    if (*v2)
    {
      *(void *)(v1 + 40) = v5;
      operator delete(v5);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2D21B4(uint64_t result, uint64_t a2)
{
  if (result == a2)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        unsigned int v6 = "RoutingTypes.cpp";
        __int16 v7 = 1024;
        int v8 = 1460;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  return result;
}

void sub_2D22A8(_Unwind_Exception *exception_object)
{
}

void *sub_2D22C4(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_7A5B8(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0LL;
  sub_2493B0(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  a1[7] = 0LL;
  a1[8] = 0LL;
  a1[6] = a1 + 7;
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    __int16 v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 1167;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v12,  0x12u);
    }

void sub_2D24C4(_Unwind_Exception *a1)
{
  unsigned int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }

  __int16 v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2D251C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = a1 + 56;
  if (!a2)
  {
    int v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      __int16 v23 = "RoutingTypes.cpp";
      __int16 v24 = 1024;
      int v25 = 1176;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v22,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_BYTE *)(a2 + 4))
  {
    sub_8598C(a1, (__int32 *)a2);
    int v5 = *(void **)(a1 + 32);
    unint64_t v4 = *(void *)(a1 + 40);
    if ((unint64_t)v5 < v4)
    {
      *int v5 = a2;
      uint64_t v6 = (uint64_t)(v5 + 1);
      goto LABEL_21;
    }

    uint64_t v7 = *(void *)(a1 + 24);
  }

  else
  {
    uint64_t v7 = 0LL;
    int v5 = 0LL;
    unint64_t v4 = 0LL;
  }

  uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
  uint64_t v9 = v4 - v7;
  uint64_t v10 = v9 >> 2;
  else {
    unint64_t v11 = v10;
  }
  if (v11) {
    unint64_t v11 = (unint64_t)sub_7DC90(v11);
  }
  else {
    uint64_t v12 = 0LL;
  }
  uint64_t v13 = (void *)(v11 + 8 * v8);
  unint64_t v14 = v11 + 8 * v12;
  *uint64_t v13 = a2;
  uint64_t v6 = (uint64_t)(v13 + 1);
  BOOL v16 = *(char **)(a1 + 24);
  int v15 = *(char **)(a1 + 32);
  if (v15 != v16)
  {
    do
    {
      uint64_t v17 = *((void *)v15 - 1);
      v15 -= 8;
      *--uint64_t v13 = v17;
    }

    while (v15 != v16);
    int v15 = *(char **)(a1 + 24);
  }

  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v14;
  if (v15) {
    operator delete(v15);
  }
LABEL_21:
  *(void *)(a1 + 32) = v6;
  sub_2D21B4(*(void *)(a1 + 24), v6);
  return a1;
}

void sub_2D2714(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }

  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

__n128 sub_2D275C(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v6 = **(void **)(a2 + 24);
  if (!*(_BYTE *)(v6 + 4))
  {
    uint64_t v35 = sub_138E8(20);
    if ((*(_BYTE *)(v35 + 8) & 1) != 0)
    {
      uint64_t v36 = *(os_log_s **)v35;
      if (*(void *)v35)
      {
        if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          char v44 = "RoutingTypes.cpp";
          __int16 v45 = 1024;
          int v46 = 1422;
          _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returned the first SubPortConfiguration entry using the rule that if the first entry has no sub-po rt ID, it is the default for the SubPortConfigurationGroup.",  buf,  0x12u);
        }
      }
    }

    goto LABEL_64;
  }

  uint64_t v7 = *a3;
  if (*a3 == a3[1])
  {
LABEL_64:
    if (*a3 != a3[1])
    {
      uint64_t v37 = sub_138E8(20);
      if ((*(_BYTE *)(v37 + 8) & 1) != 0)
      {
        std::string::size_type v38 = *(os_log_s **)v37;
        if (*(void *)v37)
        {
          if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            char v44 = "RoutingTypes.cpp";
            __int16 v45 = 1024;
            int v46 = 1423;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returned the first SubPortConfiguration entry using the rule that if requested SubPortGroup is e mpty, use the first entry.",  buf,  0x12u);
          }
        }
      }
    }

    char v39 = operator new(8uLL);
    void *v39 = v6;
    result.n128_u64[0] = (unint64_t)v39;
    result.n128_u64[1] = (unint64_t)(v39 + 1);
    *(_BYTE *)a1 = 1;
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a1 + 24) = v39 + 1;
    return result;
  }

  unint64_t v8 = 0LL;
  __n128 v40 = 0u;
LABEL_4:
  for (uint64_t i = *(void *)(a2 + 24); i != *(void *)(a2 + 32); i += 8LL)
  {
    uint64_t v10 = *(_DWORD **)i;
    if (*(_BYTE *)(*(void *)i + 4LL) && *v10 == *v7)
    {
      unint64_t v11 = (char *)v40.n128_u64[1];
      if (v40.n128_u64[1] >= v8)
      {
        uint64_t v14 = (uint64_t)(v40.n128_u64[1] - v40.n128_u64[0]) >> 3;
        unint64_t v15 = v14 + 1;
        if (v8 - v40.n128_u64[0] >= 0x7FFFFFFFFFFFFFF8LL) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          unint64_t v16 = (unint64_t)sub_7DC90(v16);
          uint64_t v10 = *(_DWORD **)i;
        }

        else
        {
          uint64_t v17 = 0LL;
        }

        char v18 = (void *)(v16 + 8 * v14);
        *char v18 = v10;
        uint64_t v13 = (uint64_t)(v18 + 1);
        if (v40.n128_u64[1] != v40.n128_u64[0])
        {
          do
          {
            uint64_t v19 = *((void *)v11 - 1);
            v11 -= 8;
            *--char v18 = v19;
          }

          while (v11 != (char *)v40.n128_u64[0]);
          unint64_t v11 = (char *)v40.n128_u64[0];
        }

        unint64_t v8 = v16 + 8 * v17;
        uint64_t v12 = v18;
        if (v11)
        {
          char v41 = v18;
          operator delete(v11);
          uint64_t v12 = v41;
        }
      }

      else
      {
        *(void *)v40.n128_u64[1] = v10;
        uint64_t v12 = (void *)v40.n128_u64[0];
        uint64_t v13 = v40.n128_u64[1] + 8;
      }

      v20.n128_u64[0] = (unint64_t)v12;
      v20.n128_u64[1] = v13;
      __n128 v40 = v20;
      if (++v7 == a3[1])
      {
        uint64_t v21 = (v13 - (uint64_t)v12) >> 3;
        if (v21 != v7 - *a3)
        {
          int v22 = (os_log_t *)sub_138E8(13);
          __int16 v23 = *v22;
          if (*v22)
          {
            if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              char v44 = "RoutingTypes.cpp";
              __int16 v45 = 1024;
              int v46 = 1453;
              _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Failed to properly build the result value.",  buf,  0x12u);
            }
          }
        }

        if (v21 == a3[1] - *a3)
        {
          uint64_t v24 = sub_138E8(20);
          if ((*(_BYTE *)(v24 + 8) & 1) != 0)
          {
            int v25 = *(os_log_s **)v24;
            if (*(void *)v24)
            {
              if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
              {
                sub_8F640(&__p, *a3, a3[1]);
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                char v44 = "RoutingTypes.cpp";
                __int16 v45 = 1024;
                int v46 = 1454;
                __int16 v47 = 2080;
                __int16 v48 = p_p;
                _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returned all SubPortConfiguration entries for the SubPortGroup %s.",  buf,  0x1Cu);
              }
            }
          }
        }

        *(_BYTE *)a1 = 1;
        __n128 result = v40;
        *(__n128 *)(a1 + 8) = v40;
        *(void *)(a1 + 24) = v8;
        return result;
      }

      goto LABEL_4;
    }
  }

  int v28 = (os_log_t *)sub_138E8(20);
  unint64_t v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(&__p, *v7);
    unint64_t v30 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    char v44 = "RoutingTypes.cpp";
    __int16 v45 = 1024;
    int v46 = 1444;
    __int16 v47 = 2080;
    __int16 v48 = v30;
    _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unable to locate a SubPortConfiguration for sub-port '%s'. Returning failure. Is this an error in the database?",  buf,  0x1Cu);
  }

  for (uint64_t j = *(unsigned int ***)(a2 + 24); j != *(unsigned int ***)(a2 + 32); ++j)
  {
    if (*((_BYTE *)*j + 4))
    {
      uint64_t v32 = sub_138E8(20);
      if ((*(_BYTE *)(v32 + 8) & 1) != 0)
      {
        double v33 = *(os_log_s **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            if (!*((_BYTE *)*j + 4)) {
              sub_8DEEC();
            }
            sub_2CA1C(&__p, **j);
            int v34 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            char v44 = "RoutingTypes.cpp";
            __int16 v45 = 1024;
            int v46 = 1447;
            __int16 v47 = 2080;
            __int16 v48 = v34;
            _os_log_impl(&dword_0, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d SubPortID: %s", buf, 0x1Cu);
          }
        }
      }
    }
  }

  *(_BYTE *)a1 = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  __n128 result = v40;
  *(void *)(a1 + 8) = 0LL;
  if (v40.n128_u64[0]) {
    operator delete((void *)v40.n128_u64[0]);
  }
  return result;
}

void sub_2D2D5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  if ((void)a13) {
    operator delete((void *)a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_2D2DA4(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  uint64_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        int v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      if (v9 >= a2) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    uint64_t v10 = (char *)operator new(0x70uLL);
    v17[1] = v6;
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *((_OWORD *)v10 + 4) = *(_OWORD *)(a3 + 32);
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 32) = 0LL;
    uint64_t v11 = *(void *)(a3 + 48);
    uint64_t v12 = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0LL;
    *(void *)(a3 + 48) = 0LL;
    uint64_t v13 = (void *)(a3 + 64);
    uint64_t v14 = *(void *)(a3 + 64);
    *((void *)v10 + 10) = v11;
    *((void *)v10 + 11) = v12;
    *((void *)v10 + 12) = v14;
    unint64_t v15 = v10 + 96;
    uint64_t v16 = *(void *)(a3 + 72);
    *((void *)v10 + 13) = v16;
    if (v16)
    {
      *(void *)(v14 + 16) = v15;
      *(void *)(a3 + 56) = v13;
      *uint64_t v13 = 0LL;
      *(void *)(a3 + 72) = 0LL;
    }

    else
    {
      *((void *)v10 + 11) = v15;
    }

    char v18 = 1;
    sub_32C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v17[0] = 0LL;
    sub_2D2F00((uint64_t)v17);
  }

uint64_t sub_2D2EB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_2D2F00(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_F2B2C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

uint64_t sub_2D2F44(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v15 = v7 + 40;
  sub_2D21B4(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_2D275C((uint64_t)v28, v15, a3);
  if (v28[0])
  {
    uint64_t v16 = v29;
    if (v30 != v29)
    {
      uint64_t v17 = 0LL;
      unsigned int v18 = 1;
      while (1)
      {
        uint64_t v19 = *(void *)&v29[8 * v17];
        if (*(_BYTE *)(v19 + 20)) {
          break;
        }
        uint64_t v17 = v18;
      }

      uint64_t v25 = *(void *)(v19 + 16);
      unint64_t v23 = v25 & 0xFFFFFF0000000000LL;
      uint64_t v22 = v25 & 0xFF00000000LL;
      uint64_t v24 = v25 & 0xFFFFFF00;
      char v21 = v25;
      goto LABEL_27;
    }

    uint64_t v16 = v30;
  }

  else
  {
    uint64_t v16 = v29;
  }

  if (!v16)
  {
LABEL_12:
    unint64_t v11 = 0LL;
    LODWORD(v12) = 0;
    goto LABEL_13;
  }

uint64_t sub_2D30CC(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v15 = v7 + 40;
  sub_2D21B4(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_2D275C((uint64_t)v28, v15, a3);
  if (v28[0])
  {
    uint64_t v16 = v29;
    if (v30 != v29)
    {
      uint64_t v17 = 0LL;
      unsigned int v18 = 1;
      while (1)
      {
        uint64_t v19 = *(void *)&v29[8 * v17];
        if (*(_BYTE *)(v19 + 12)) {
          break;
        }
        uint64_t v17 = v18;
      }

      uint64_t v25 = *(void *)(v19 + 8);
      unint64_t v23 = v25 & 0xFFFFFF0000000000LL;
      uint64_t v22 = v25 & 0xFF00000000LL;
      uint64_t v24 = v25 & 0xFFFFFF00;
      char v21 = v25;
      goto LABEL_27;
    }

    uint64_t v16 = v30;
  }

  else
  {
    uint64_t v16 = v29;
  }

  if (!v16)
  {
LABEL_12:
    unint64_t v11 = 0LL;
    LODWORD(v12) = 0;
    goto LABEL_13;
  }

uint64_t sub_2D3254(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v15 = v7 + 40;
  sub_2D21B4(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_2D275C((uint64_t)v28, v15, a3);
  if (v28[0])
  {
    uint64_t v16 = v29;
    if (v30 != v29)
    {
      uint64_t v17 = 0LL;
      unsigned int v18 = 1;
      while (1)
      {
        uint64_t v19 = *(void *)&v29[8 * v17];
        if (*(_BYTE *)(v19 + 28)) {
          break;
        }
        uint64_t v17 = v18;
      }

      uint64_t v25 = *(void *)(v19 + 24);
      unint64_t v23 = v25 & 0xFFFFFF0000000000LL;
      uint64_t v22 = v25 & 0xFF00000000LL;
      uint64_t v24 = v25 & 0xFFFFFF00;
      char v21 = v25;
      goto LABEL_27;
    }

    uint64_t v16 = v30;
  }

  else
  {
    uint64_t v16 = v29;
  }

  if (!v16)
  {
LABEL_12:
    unint64_t v11 = 0LL;
    LODWORD(v12) = 0;
    goto LABEL_13;
  }

unint64_t sub_2D33DC(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v13 = v7 + 40;
  sub_2D21B4(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_2D275C((uint64_t)v23, v13, a3);
  if (v23[0])
  {
    unint64_t v14 = v24;
    if (v25 != v24)
    {
      uint64_t v15 = 0LL;
      unsigned int v16 = 1;
      while (1)
      {
        uint64_t v17 = *(void *)&v24[8 * v15];
        if (*(_BYTE *)(v17 + 72)) {
          break;
        }
        uint64_t v15 = v16;
      }

      uint64_t v19 = *(void *)(v17 + 72);
      unint64_t v21 = *(void *)(v17 + 64) & 0xFFFFFFFFFFFFFF00LL;
      char v20 = *(void *)(v17 + 64);
      goto LABEL_27;
    }

    unint64_t v14 = v25;
  }

  else
  {
    unint64_t v14 = v24;
  }

  if (!v14)
  {
LABEL_12:
    unint64_t v11 = 0LL;
    goto LABEL_13;
  }

unint64_t sub_2D353C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned int v8 = (uint64_t *)v4;
    }
    else {
      unsigned int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 == a1 + 8) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(v5 + 32) > a2) {
    goto LABEL_32;
  }
  uint64_t v11 = *(void *)(v5 + 96);
  uint64_t v9 = v5 + 96;
  uint64_t v10 = v11;
  if (!v11) {
    goto LABEL_32;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *(_DWORD *)(v10 + 32);
    BOOL v14 = v13 < a3;
    if (v13 >= a3) {
      uint64_t v15 = (uint64_t *)v10;
    }
    else {
      uint64_t v15 = (uint64_t *)(v10 + 8);
    }
    if (!v14) {
      uint64_t v12 = v10;
    }
    uint64_t v10 = *v15;
  }

  while (*v15);
  if (v12 != v9 && *(_DWORD *)(v12 + 32) <= a3 && *(_BYTE *)(v12 + 48))
  {
    unsigned int v16 = (os_log_t *)sub_138E8(20);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(v12 + 48)) {
        sub_8DEEC();
      }
      sub_2CEE1C(&__p, *(unsigned int **)(v12 + 40));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v24 = "RoutingTypes.cpp";
      __int16 v25 = 1024;
      int v26 = 1686;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 2080;
      unint64_t v30 = p_p;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Extended volume description of type %u present: %s",  buf,  0x22u);
    }

    uint64_t v19 = *(void *)(v12 + 40);
  }

  else
  {
LABEL_32:
    if (!a2)
    {
      LOBYTE(v19) = 0;
      unint64_t v20 = 0LL;
      return v20 | v19;
    }

    uint64_t v19 = sub_2D353C();
  }

  unint64_t v20 = v19 & 0xFFFFFFFFFFFFFF00LL;
  return v20 | v19;
}

void sub_2D370C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 != a1 + 8 && *(_DWORD *)(v7 + 32) <= a2)
  {
    int v13 = *(uint64_t **)(v7 + 72);
    unint64_t v12 = *(void *)(v7 + 80);
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = *(void *)(v7 + 64);
      uint64_t v16 = ((uint64_t)v13 - v15) >> 3;
      uint64_t v17 = v12 - v15;
      uint64_t v18 = v17 >> 2;
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        unint64_t v19 = (unint64_t)sub_7DC90(v19);
      }
      else {
        uint64_t v20 = 0LL;
      }
      unint64_t v21 = (uint64_t *)(v19 + 8 * v16);
      unint64_t v22 = v19 + 8 * v20;
      *unint64_t v21 = a3;
      uint64_t v14 = (uint64_t)(v21 + 1);
      uint64_t v24 = *(char **)(v7 + 64);
      unint64_t v23 = *(char **)(v7 + 72);
      if (v23 != v24)
      {
        do
        {
          uint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *--unint64_t v21 = v25;
        }

        while (v23 != v24);
        unint64_t v23 = *(char **)(v7 + 64);
      }

      *(void *)(v7 + 64) = v21;
      *(void *)(v7 + 72) = v14;
      *(void *)(v7 + 80) = v22;
      if (v23) {
        operator delete(v23);
      }
    }

    else
    {
      *int v13 = a3;
      uint64_t v14 = (uint64_t)(v13 + 1);
    }

    *(void *)(v7 + 72) = v14;
    sub_2D21B4(*(void *)(v7 + 64), v14);
  }

  else
  {
LABEL_12:
    sub_2D251C((uint64_t)v26, a3);
    unsigned int v33 = a2;
    *(_OWORD *)int v34 = *(_OWORD *)v26;
    uint64_t v35 = v27;
    v26[0] = 0LL;
    v26[1] = 0LL;
    *(_OWORD *)std::string __p = *(_OWORD *)v28;
    uint64_t v27 = 0LL;
    v28[0] = 0LL;
    uint64_t v11 = v29;
    v28[1] = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v37 = v11;
    std::string::size_type v38 = v30;
    v39[0] = v31;
    v39[1] = v32;
    if (v32)
    {
      CFStringRef v31[2] = v39;
      unint64_t v30 = &v31;
      int v31 = 0LL;
      uint64_t v32 = 0LL;
    }

    else
    {
      std::string::size_type v38 = v39;
    }

    sub_2D2DA4((uint64_t **)a1, a2, (uint64_t)&v33);
    sub_32C8C(v39[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (v34[0])
    {
      v34[1] = v34[0];
      operator delete(v34[0]);
    }

    sub_32C8C(v31);
    if (v28[0])
    {
      v28[1] = v28[0];
      operator delete(v28[0]);
    }

    if (v26[0])
    {
      v26[1] = v26[0];
      operator delete(v26[0]);
    }
  }

void sub_2D390C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_2D3928(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    unint64_t v21 = (os_log_t *)sub_138E8(13);
    unint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v32 = "RoutingTypes.cpp";
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&v32[10] = 1769;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = a1 + 1;
    do
    {
      unsigned int v9 = *((_DWORD *)v6 + 8);
      BOOL v10 = v9 >= a2;
      else {
        uint64_t v11 = (uint64_t **)(v6 + 1);
      }
      if (v10) {
        unsigned int v8 = (uint64_t **)v6;
      }
      uint64_t v6 = *v11;
    }

    while (*v11);
    if (v8 != v7 && *((_DWORD *)v8 + 8) <= a2)
    {
      uint64_t v24 = (os_log_t *)sub_138E8(13);
      uint64_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v28, a2);
        int v26 = v30 >= 0 ? &v28 : (void **)v28;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)uint64_t v32 = "RoutingTypes.cpp";
        *(_WORD *)&v32[8] = 1024;
        *(_DWORD *)&v32[10] = 1772;
        *(_WORD *)&v32[14] = 2080;
        *(void *)&v32[16] = v26;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempting to insert a SubPortConfigurationGroup for an existing mode \\%s\\",  buf,  0x1Cu);
        if (SHIBYTE(v30) < 0) {
          operator delete(v28);
        }
      }

      uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v27, "Attempting to insert a SubPortConfigurationGroup for an existing mode %s");
    }
  }

  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  int v28 = &v29;
  *(_DWORD *)AudioObjectPropertyAddress buf = 0;
  memset(&v32[4], 0, 24);
  sub_7A5B8(&v32[4], *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  std::string __p = 0LL;
  int v34 = 0LL;
  uint64_t v35 = 0LL;
  sub_2493B0( &__p,  *(const void **)(a3 + 24),  *(void *)(a3 + 32),  (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3);
  sub_249428(v36, (void *)(a3 + 48));
  sub_2D2DA4((uint64_t **)&v28, *(unsigned int *)buf, (uint64_t)buf);
  sub_32C8C((void *)v36[1]);
  if (__p)
  {
    int v34 = __p;
    operator delete(__p);
  }

  if (*(void *)&v32[4])
  {
    *(void *)&v32[12] = *(void *)&v32[4];
    operator delete(*(void **)&v32[4]);
  }

  unint64_t v12 = *v7;
  int v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        int v13 = (uint64_t **)v12;
        unsigned int v14 = *((_DWORD *)v12 + 8);
        unint64_t v12 = *v13;
        uint64_t v7 = v13;
        if (!*v13) {
          goto LABEL_24;
        }
      }

      unint64_t v12 = v13[1];
      if (!v12)
      {
        uint64_t v7 = v13 + 1;
        goto LABEL_24;
      }
    }

    uint64_t v15 = v13;
  }

  else
  {
LABEL_24:
    uint64_t v15 = operator new(0x40uLL);
    v15[8] = a2;
    *((void *)v15 + 7) = 0LL;
    *((void *)v15 + 6) = 0LL;
    *((void *)v15 + 5) = v15 + 12;
    *(void *)uint64_t v15 = 0LL;
    *((void *)v15 + 1) = 0LL;
    *((void *)v15 + 2) = v13;
    *uint64_t v7 = (uint64_t *)v15;
    uint64_t v16 = (uint64_t *)**a1;
    uint64_t v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      uint64_t v17 = *v7;
    }

    sub_7A420(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  uint64_t v18 = (char *)(v15 + 12);
  sub_F2AEC(*((void **)v15 + 6));
  unint64_t v19 = v29;
  *((void *)v15 + 5) = v28;
  *((void *)v15 + 6) = v19;
  uint64_t v20 = v30;
  *((void *)v15 + 7) = v30;
  if (v20)
  {
    v19[2] = v18;
    int v28 = &v29;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    unint64_t v19 = 0LL;
  }

  else
  {
    *((void *)v15 + 5) = v18;
  }

  sub_F2AEC(v19);
}

void sub_2D3CC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

char *sub_2D3D34(uint64_t **a1, uint64_t a2)
{
  int v9 = 1768776806;
  if (*((_BYTE *)sub_2D3EC8(a1, 0x696D6466u, &v9) + 64))
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 1791;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = sub_2D3EC8(a1, 0x696D6466u, &v9);
  __n128 result = (char *)(v4 + 5);
  if (*((_BYTE *)v4 + 64))
  {
  }

  else
  {
    *(void *)__n128 result = 0LL;
    v4[6] = 0LL;
    v4[7] = 0LL;
    __n128 result = (char *)sub_7A5B8( result,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *((_BYTE *)v4 + 64) = 1;
  }

  return result;
}

void sub_2D3EAC(_Unwind_Exception *a1)
{
}

uint64_t **sub_2D3EC8(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  unsigned int v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    BOOL v10 = (char *)operator new(0xB8uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *((void *)v10 + 15) = v10 + 128;
    *((_WORD *)v10 + 90) = 0;
    *((_DWORD *)v10 + 44) = 0;
    char v13 = 1;
    sub_32C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0LL;
    sub_24A368((uint64_t)v12);
    return (uint64_t **)v10;
  }

  return v8;
}

uint64_t **sub_2D3FC4(uint64_t **a1, unsigned int a2, __int16 a3)
{
  unsigned int v10 = a2;
  if (*((_BYTE *)sub_2D3EC8(a1, a2, &v10) + 73))
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 1797;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __n128 result = sub_2D3EC8(a1, a2, &v10);
  *((_WORD *)result + 36) = a3 | 0x100;
  return result;
}

void sub_2D40F0(_Unwind_Exception *a1)
{
}

uint64_t **sub_2D410C(uint64_t **a1, unsigned int a2, __int16 a3)
{
  unsigned int v10 = a2;
  if (*((_BYTE *)sub_2D3EC8(a1, a2, &v10) + 75))
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 1803;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __n128 result = sub_2D3EC8(a1, a2, &v10);
  *((_WORD *)result + 37) = a3 | 0x100;
  return result;
}

void sub_2D4238(_Unwind_Exception *a1)
{
}

uint64_t **sub_2D4254(uint64_t **a1, unsigned int a2, __int16 a3)
{
  unsigned int v10 = a2;
  if (*((_BYTE *)sub_2D3EC8(a1, a2, &v10) + 77))
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 1809;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __n128 result = sub_2D3EC8(a1, a2, &v10);
  *((_WORD *)result + 38) = a3 | 0x100;
  return result;
}

void sub_2D4380(_Unwind_Exception *a1)
{
}

uint64_t **sub_2D439C(uint64_t **a1, __int16 a2)
{
  int v8 = 1768776806;
  if (*((_BYTE *)sub_2D3EC8(a1, 0x696D6466u, &v8) + 79))
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v10 = "RoutingTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 1815;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __n128 result = sub_2D3EC8(a1, 0x696D6466u, &v8);
  *((_WORD *)result + 39) = a2 | 0x100;
  return result;
}

void sub_2D44D0(_Unwind_Exception *a1)
{
}

void sub_2D44EC(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  unsigned int v11 = a2;
  if (*((_BYTE *)sub_2D3EC8(a1, a2, &v11) + 112))
  {
    int v8 = (os_log_t *)sub_138E8(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 1844;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v6 = sub_2D3EC8(a1, a2, &v11);
  uint64_t v7 = (uint64_t *)(v6 + 11);
  if (*((_BYTE *)v6 + 112))
  {
  }

  else
  {
    sub_86550(v7, a3);
    *((_BYTE *)v6 + 112) = 1;
  }

void sub_2D4648(_Unwind_Exception *a1)
{
}

void sub_2D4664(uint64_t **a1, uint64_t a2)
{
  int v30 = 1768776806;
  if (*((_BYTE *)sub_2D3EC8(a1, 0x696D6466u, &v30) + 168))
  {
    uint64_t v4 = sub_2D3EC8(a1, 0x696D6466u, &v30);
    unsigned int v31 = 1919705967;
    sub_86550((uint64_t *)&v32, a2);
    uint64_t v6 = v4 + 19;
    uint64_t v5 = v4[19];
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v7 = (uint64_t **)v5;
          unsigned int v8 = *((_DWORD *)v5 + 8);
          if (v31 >= v8) {
            break;
          }
          uint64_t v5 = *v7;
          uint64_t v6 = v7;
          if (!*v7) {
            goto LABEL_12;
          }
        }

        if (v8 >= v31) {
          break;
        }
        uint64_t v5 = v7[1];
        if (!v5)
        {
          uint64_t v6 = v7 + 1;
          goto LABEL_12;
        }
      }
    }

    else
    {
      uint64_t v7 = v4 + 19;
LABEL_12:
      unsigned int v9 = operator new(0x40uLL);
      unsigned int v10 = v31;
      uint64_t v12 = (uint64_t)v32;
      unsigned int v11 = v33;
      v9[6] = v33;
      __int16 v13 = (char *)(v9 + 6);
      *((_DWORD *)v9 + 8) = v10;
      v9[5] = v12;
      uint64_t v14 = v34;
      v9[7] = v34;
      if (v14)
      {
        v11[2] = v13;
        uint64_t v32 = &v33;
        unsigned int v33 = 0LL;
        uint64_t v34 = 0LL;
      }

      else
      {
        v9[5] = v13;
      }

      sub_32C38(v4 + 18, (uint64_t)v7, v6, v9);
    }

    int v15 = v33;
  }

  else
  {
    sub_86550((uint64_t *)&v24, a2);
    unsigned int v31 = 1919705967;
    uint64_t v32 = v24;
    unsigned int v33 = v25;
    uint64_t v34 = v26;
    if (v26)
    {
      v25[2] = &v33;
      uint64_t v24 = &v25;
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v32 = &v33;
    }

    int v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v27 = (uint64_t *)&v28;
    sub_24A484((uint64_t *)&v27, (uint64_t *)&v28, v31, &v31);
    uint64_t v16 = sub_2D3EC8(a1, 0x696D6466u, &v30);
    uint64_t v17 = v16;
    if (*((_BYTE *)v16 + 168))
    {
      uint64_t v18 = (uint64_t *)(v16 + 19);
      sub_F16A4(v16[19]);
      unint64_t v19 = v28;
      v17[18] = v27;
      *uint64_t v18 = (uint64_t)v19;
      uint64_t v20 = v29;
      v17[20] = v29;
      if (v20)
      {
        v19[2] = v18;
        uint64_t v27 = (uint64_t *)&v28;
        int v28 = 0LL;
        uint64_t v29 = 0LL;
        unint64_t v19 = 0LL;
      }

      else
      {
        v17[18] = v18;
      }
    }

    else
    {
      uint64_t v21 = (uint64_t)v27;
      unint64_t v19 = v28;
      v17[19] = v28;
      unint64_t v22 = (uint64_t *)(v17 + 19);
      v17[18] = (uint64_t *)v21;
      unint64_t v23 = v29;
      v17[20] = v29;
      if (v23)
      {
        v19[2] = v22;
        uint64_t v27 = (uint64_t *)&v28;
        int v28 = 0LL;
        uint64_t v29 = 0LL;
        unint64_t v19 = 0LL;
      }

      else
      {
        v17[18] = v22;
      }

      *((_BYTE *)v17 + 168) = 1;
    }

    sub_F16A4(v19);
    sub_32C8C(v33);
    int v15 = v25;
  }

  sub_32C8C(v15);
}

void sub_2D48E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

_BYTE *sub_2D4928(_BYTE *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = a2 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a3;
      else {
        unsigned int v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }

    while (*v10);
  }

  if ((_DWORD)a3 == 1768776806)
  {
    char *result = 0;
    result[24] = 0;
  }

  else
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      uint64_t v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a3);
          if (v15 >= 0) {
            __int16 v13 = __p;
          }
          else {
            __int16 v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v17 = "RoutingTypes.cpp";
          __int16 v18 = 1024;
          int v19 = 1898;
          __int16 v20 = 2080;
          uint64_t v21 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    return (_BYTE *)sub_2D4928(v5, a2, 1768776806LL);
  }

  return result;
}

uint64_t sub_2D4AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    else {
      unsigned int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 73))
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 72);
    unsigned int v10 = v9 >> 8;
  }

  else
  {
LABEL_14:
    if ((_DWORD)a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }

    else
    {
      uint64_t v11 = sub_138E8(20);
      if ((*(_BYTE *)(v11 + 8) & 1) != 0)
      {
        uint64_t v12 = *(os_log_s **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, a2);
            if (v16 >= 0) {
              __int16 v13 = __p;
            }
            else {
              __int16 v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 1922;
            __int16 v21 = 2080;
            unint64_t v22 = v13;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      LOWORD(v9) = sub_2D4AF4(a1, 1768776806LL);
      unsigned int v10 = BYTE1(v9);
    }
  }

  return v9 | (v10 << 8);
}

uint64_t sub_2D4C90(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = _os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities");
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 32);
      BOOL v8 = v7 >= a2;
      else {
        unsigned int v9 = (uint64_t *)(v5 + 8);
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 8 && *(_DWORD *)(v6 + 32) <= a2 && *(_BYTE *)(v6 + 75))
    {
      unsigned int v4 = *(unsigned __int16 *)(v6 + 74);
      unsigned int v10 = v4 >> 8;
      return v4 | (v10 << 8);
    }
  }

  if ((_DWORD)a2 == 1768776806)
  {
    LOBYTE(v4) = 0;
LABEL_17:
    unsigned int v10 = 0;
    return v4 | (v10 << 8);
  }

  uint64_t v11 = sub_138E8(20);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
  {
    uint64_t v12 = *(os_log_s **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(__p, a2);
        if (v16 >= 0) {
          __int16 v13 = __p;
        }
        else {
          __int16 v13 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __int16 v18 = "RoutingTypes.cpp";
        __int16 v19 = 1024;
        int v20 = 1950;
        __int16 v21 = 2080;
        unint64_t v22 = v13;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  LOWORD(v4) = sub_2D4C90(a1, 1768776806LL);
  unsigned int v10 = BYTE1(v4);
  return v4 | (v10 << 8);
}

uint64_t sub_2D4E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 77))
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 76);
    unsigned int v10 = v9 >> 8;
  }

  else
  {
LABEL_14:
    if ((_DWORD)a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }

    else
    {
      uint64_t v11 = sub_138E8(20);
      if ((*(_BYTE *)(v11 + 8) & 1) != 0)
      {
        uint64_t v12 = *(os_log_s **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, a2);
            if (v16 >= 0) {
              __int16 v13 = __p;
            }
            else {
              __int16 v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 1972;
            __int16 v21 = 2080;
            unint64_t v22 = v13;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      LOWORD(v9) = sub_2D4E44(a1, 1768776806LL);
      unsigned int v10 = BYTE1(v9);
    }
  }

  return v9 | (v10 << 8);
}

uint64_t *sub_2D4FE0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_24;
  }
  uint64_t v7 = a2 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a3;
    else {
      unsigned int v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 == a2 + 8) {
    goto LABEL_24;
  }
  if (!*(_BYTE *)(v7 + 168)) {
    goto LABEL_24;
  }
  uint64_t v13 = *(void *)(v7 + 152);
  uint64_t v11 = v7 + 152;
  uint64_t v12 = v13;
  if (!v13) {
    goto LABEL_24;
  }
  uint64_t v14 = v11;
  do
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 >= 0x726C636F;
    if (v15 >= 0x726C636F) {
      uint64_t v17 = (uint64_t *)v12;
    }
    else {
      uint64_t v17 = (uint64_t *)(v12 + 8);
    }
    if (v16) {
      uint64_t v14 = v12;
    }
    uint64_t v12 = *v17;
  }

  while (*v17);
  if (v14 != v11 && *(_DWORD *)(v14 + 32) <= 0x726C636Fu)
  {
    __n128 result = sub_86550(result, v14 + 40);
    *((_BYTE *)v5 + 24) = 1;
  }

  else
  {
LABEL_24:
    if ((_DWORD)a3 == 1768776806)
    {
      *(_BYTE *)__n128 result = 0;
      *((_BYTE *)result + 24) = 0;
    }

    else
    {
      uint64_t v18 = sub_138E8(20);
      if ((*(_BYTE *)(v18 + 8) & 1) != 0)
      {
        __int16 v19 = *(os_log_s **)v18;
        if (*(void *)v18)
        {
          if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(v26, a3);
            int v20 = v27;
            __int16 v21 = (void **)v26[0];
            sub_2CA1C(__p, 1919705967LL);
            unint64_t v22 = v26;
            if (v20 < 0) {
              unint64_t v22 = v21;
            }
            if (v25 >= 0) {
              unint64_t v23 = __p;
            }
            else {
              unint64_t v23 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v29 = "RoutingTypes.cpp";
            __int16 v30 = 1024;
            int v31 = 2071;
            __int16 v32 = 2080;
            unsigned int v33 = v22;
            __int16 v34 = 2080;
            uint64_t v35 = v23;
            _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: (%s, %s), Looking in default mode instead.",  buf,  0x26u);
            if (v25 < 0) {
              operator delete(__p[0]);
            }
            if (v27 < 0) {
              operator delete(v26[0]);
            }
          }
        }
      }

      return (uint64_t *)sub_2D4FE0(v5, a2, 1768776806LL);
    }
  }

  return result;
}

void sub_2D5208(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D5228(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    unsigned int v8 = (os_log_t *)sub_138E8(13);
    BOOL v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      *(void *)uint64_t v18 = "RoutingTypes.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 2431;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v17,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(void *)(a2 + 40) - *(void *)(a2 + 32) >= 8uLL)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      *(void *)uint64_t v18 = "RoutingTypes.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 2432;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v17,  0x12u);
    }

    uint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }

  if (sub_2D5520(a2))
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    unsigned int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      *(void *)uint64_t v18 = "RoutingTypes.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 2433;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v17,  0x12u);
    }

    BOOL v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }

  if (*(_DWORD *)a2)
  {
    unsigned int v17 = *(_DWORD *)(a2 + 4);
    *(_OWORD *)&v18[4] = *(_OWORD *)(a2 + 8);
    uint64_t v6 = sub_2D5594(a1 + 3, v17, *(unint64_t *)&v18[4], (uint64_t)&v17);
  }

  else
  {
    unsigned int v17 = *(_DWORD *)(a2 + 4);
    *(_OWORD *)&v18[4] = *(_OWORD *)(a2 + 8);
    uint64_t v6 = sub_2D5594(a1, v17, *(unint64_t *)&v18[4], (uint64_t)&v17);
  }

  sub_2D370C((uint64_t)(v6 + 96), *(_DWORD *)(a2 + 24), a3);
  return sub_55C64((uint64_t)a1);
}

void sub_2D54FC(_Unwind_Exception *a1)
{
}

BOOL sub_2D5520(uint64_t a1)
{
  return dword_4A91C8 == *(_DWORD *)a1
      && dword_4A91CC == *(_DWORD *)(a1 + 4)
      && ((xmmword_4A91D0 ^ *(_DWORD *)(a1 + 8)) & 7LL) == 0
      && dword_4A91E0 == *(_DWORD *)(a1 + 24)
      && sub_DA92C((void *)qword_4A91E8, *(uint64_t *)algn_4A91F0, *(void **)(a1 + 32), *(void *)(a1 + 40));
}

char *sub_2D5594(uint64_t **a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)(a1 + 1);
  uint64_t v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v6;
      unsigned int v8 = *((_DWORD *)v6 + 8);
      if (v8 > a2) {
        goto LABEL_6;
      }
      if (v8 == a2)
      {
        unint64_t v9 = *((void *)v7 + 5);
        BOOL v11 = v9 >= a3;
        if (v9 <= a3) {
          goto LABEL_8;
        }
LABEL_6:
        uint64_t v6 = *(char **)v7;
        unsigned int v10 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_12;
        }
      }

      else
      {
        BOOL v11 = v8 >= a2;
LABEL_8:
        if (v11) {
          return v7;
        }
        unsigned int v10 = (uint64_t **)(v7 + 8);
        uint64_t v6 = (char *)*((void *)v7 + 1);
        if (!v6) {
          goto LABEL_12;
        }
      }
    }
  }

  unsigned int v10 = a1 + 1;
LABEL_12:
  uint64_t v12 = v7;
  uint64_t v7 = (char *)operator new(0x78uLL);
  *((_OWORD *)v7 + 2) = *(_OWORD *)a4;
  *((void *)v7 + 6) = *(void *)(a4 + 16);
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *((void *)v7 + 12) = v7 + 104;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  *((void *)v7 + 2) = v12;
  uint64_t *v10 = (uint64_t *)v7;
  uint64_t v13 = (uint64_t *)**a1;
  uint64_t v14 = (uint64_t *)v7;
  if (v13)
  {
    *a1 = v13;
    uint64_t v14 = *v10;
  }

  sub_7A420(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

uint64_t sub_2D5694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = a1 + 56;
  sub_2D5228((uint64_t **)a1, a2, a3);
  sub_55C64(a1);
  return a1;
}

void sub_2D56F0(_Unwind_Exception *a1)
{
}

uint64_t sub_2D5714(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_F2AEC(v2);
  }

  return a1;
}

uint64_t **sub_2D5760(uint64_t **a1, void *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t *)(a1 + 1);
  a1[4] = 0LL;
  a1[3] = (uint64_t *)(a1 + 4);
  uint64_t v3 = a1 + 3;
  a1[7] = 0LL;
  a1[8] = 0LL;
  a1[5] = 0LL;
  a1[6] = (uint64_t *)(a1 + 7);
  if (!sub_2D5520((uint64_t)&unk_49CCD8) && !sub_2D5520((uint64_t)&dword_4A91C8))
  {
    unint64_t v68 = (os_log_t *)sub_138E8(13);
    unsigned int v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2456;
      _os_log_impl(&dword_0, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v4 = dword_4A91C8;
  sub_55C64((uint64_t)a1);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t i = (void *)*a2;
  uint64_t v73 = a2 + 1;
  std::string v74 = v5;
  uint64_t v7 = (uint64_t)a1;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unsigned int v79 = *((_DWORD *)i + 8);
      __int128 v80 = xmmword_4A91D0;
      unsigned int v8 = sub_2D5594(v74, v79, xmmword_4A91D0, (uint64_t)&v79);
      unint64_t v9 = (uint64_t **)(v8 + 96);
      if (v8 + 96 != (char *)(i + 5))
      {
        unsigned int v10 = (void *)i[5];
        CFStringRef v78 = i + 6;
        if (*((void *)v8 + 14))
        {
          std::string v72 = v8;
          uint64_t v12 = *((void *)v8 + 13);
          BOOL v11 = (uint64_t **)(v8 + 104);
          uint64_t v13 = (uint64_t)*(v11 - 1);
          *(v11 - 1) = (uint64_t *)v11;
          *(void *)(v12 + 16) = 0LL;
          os_log_t *v11 = 0LL;
          v11[1] = 0LL;
          CFStringRef v77 = v11;
          if (*(void *)(v13 + 8)) {
            uint64_t v14 = *(void *)(v13 + 8);
          }
          else {
            uint64_t v14 = v13;
          }
          *(void *)AudioObjectPropertyAddress buf = v9;
          *(void *)&uint8_t buf[8] = v14;
          *(void *)&buf[16] = v14;
          if (v14)
          {
            *(void *)&uint8_t buf[8] = sub_68080(v14);
            if (v10 != v78)
            {
              CFBooleanRef v75 = i;
              CFNumberRef v76 = v9;
              while (1)
              {
                *(_DWORD *)(v14 + 32) = *((_DWORD *)v10 + 8);
                if ((void *)v14 != v10) {
                  break;
                }
LABEL_81:
                __int16 v52 = v77;
                __int16 v53 = *v77;
                uint64_t v54 = v77;
                if (*v77)
                {
                  do
                  {
                    while (1)
                    {
                      uint64_t v54 = (uint64_t **)v53;
                      if (*(_DWORD *)(*(void *)&buf[16] + 32LL) >= *((_DWORD *)v53 + 8)) {
                        break;
                      }
                      __int16 v53 = (uint64_t *)*v53;
                      __int16 v52 = v54;
                      if (!*v54) {
                        goto LABEL_87;
                      }
                    }

                    __int16 v53 = (uint64_t *)v53[1];
                  }

                  while (v53);
                  __int16 v52 = v54 + 1;
                }

void sub_2D5EE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
}

uint64_t sub_2D5F80(uint64_t **a1, _DWORD *a2, uint64_t a3)
{
  if (!a3)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      BOOL v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 2448;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v10,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a2 != 1)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      BOOL v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 2449;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v10,  0x12u);
    }

    unint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "Precondition failure.");
  }

  return sub_2D5228(a1, (uint64_t)a2, a3);
}

void sub_2D611C(_Unwind_Exception *a1)
{
}

uint64_t sub_2D613C(uint64_t a1)
{
  if ((_DWORD)qword_4A9190 != 1)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      *(void *)uint64_t v14 = "RoutingTypes.cpp";
      *(_WORD *)&v14[8] = 1024;
      *(_DWORD *)&v14[10] = 2490;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (dword_4A91A8)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      *(void *)uint64_t v14 = "RoutingTypes.cpp";
      *(_WORD *)&v14[8] = 1024;
      *(_DWORD *)&v14[10] = 2491;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    unint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "Precondition failure.");
  }

  if (qword_4A91B0 != qword_4A91B8)
  {
    int v10 = (os_log_t *)sub_138E8(13);
    BOOL v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      *(void *)uint64_t v14 = "RoutingTypes.cpp";
      *(_WORD *)&v14[8] = 1024;
      *(_DWORD *)&v14[10] = 2492;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    __int16 v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Precondition failure.");
  }

  int v13 = HIDWORD(qword_4A9190);
  *(_OWORD *)&v14[4] = xmmword_4A9198;
  int v2 = sub_2D5594((uint64_t **)(a1 + 24), HIDWORD(qword_4A9190), xmmword_4A9198, (uint64_t)&v13);
  *((_DWORD *)v2 + 20) = 6;
  v2[84] = 1;
  return sub_55C64(a1);
}

void sub_2D63DC(_Unwind_Exception *a1)
{
}

uint64_t sub_2D6400(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (!a3)
  {
    unint64_t v24 = (os_log_t *)sub_138E8(13);
    char v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v38 = "RoutingTypes.cpp";
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)&v38[10] = 2500;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    char v27 = (os_log_t *)sub_138E8(13);
    int v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v38 = "RoutingTypes.cpp";
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)&v38[10] = 2501;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Precondition failure.");
  }

  int v8 = *a2;
  sub_55C64(a1);
  if (v8) {
    unint64_t v9 = (uint64_t **)(a1 + 24);
  }
  else {
    unint64_t v9 = (uint64_t **)a1;
  }
  unsigned int v30 = a2[1];
  __int128 v31 = *(_OWORD *)(a2 + 2);
  int v10 = sub_2D5594(v9, v30, v31, (uint64_t)&v30);
  __int16 v12 = v10 + 104;
  uint64_t v11 = *((void *)v10 + 13);
  unsigned int v13 = a2[6];
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v14 = v10 + 104;
  do
  {
    unsigned int v15 = *(_DWORD *)(v11 + 32);
    BOOL v16 = v15 >= v13;
    if (v15 >= v13) {
      unsigned int v17 = (uint64_t *)v11;
    }
    else {
      unsigned int v17 = (uint64_t *)(v11 + 8);
    }
    if (v16) {
      uint64_t v14 = (char *)v11;
    }
    uint64_t v11 = *v17;
  }

  while (*v17);
  if (v14 != v12 && *((_DWORD *)v14 + 8) <= v13)
  {
    uint64_t v18 = *((void *)v14 + 12);
    if (v18)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v19 = v18;
          int v20 = *(_DWORD *)(v18 + 32);
          if (v20 <= a4) {
            break;
          }
          uint64_t v18 = *(void *)v19;
          uint64_t v21 = (uint64_t **)v19;
          if (!*(void *)v19) {
            goto LABEL_36;
          }
        }

        if (v20 >= a4) {
          break;
        }
        uint64_t v18 = *(void *)(v19 + 8);
        if (!v18)
        {
          uint64_t v21 = (uint64_t **)(v19 + 8);
          goto LABEL_36;
        }
      }
    }

    else
    {
      uint64_t v21 = (uint64_t **)(v14 + 96);
      uint64_t v19 = (uint64_t)(v14 + 96);
LABEL_36:
      unint64_t v22 = operator new(0x38uLL);
      v22[8] = a4;
      *((_BYTE *)v22 + 40) = 0;
      *((_BYTE *)v22 + 48) = 0;
      sub_32C38((uint64_t **)v14 + 11, v19, v21, (uint64_t *)v22);
      uint64_t v19 = (uint64_t)v22;
    }

    *(void *)(v19 + 40) = a3;
    *(_BYTE *)(v19 + 48) = 1;
    sub_2D21B4(*((void *)v14 + 8), *((void *)v14 + 9));
  }

  else
  {
LABEL_17:
    memset(v33, 0, sizeof(v33));
    *(_OWORD *)uint64_t v32 = 0u;
    int v44 = 0;
    uint64_t v45 = a3;
    char v46 = 1;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    __int16 v34 = &v35;
    sub_24AB28((uint64_t *)&v34, (uint64_t *)&v35, 0, (uint64_t)&v44);
    *(_DWORD *)AudioObjectPropertyAddress buf = v13;
    *(_OWORD *)&v38[4] = *(_OWORD *)v32;
    char v39 = v33[0];
    v32[0] = 0LL;
    v32[1] = 0LL;
    *(_OWORD *)std::string __p = *(_OWORD *)&v33[1];
    memset(v33, 0, sizeof(v33));
    char v41 = v33[3];
    char v42 = v34;
    v43[0] = v35;
    v43[1] = v36;
    if (v36)
    {
      v35[2] = v43;
      __int16 v34 = &v35;
      uint64_t v35 = 0LL;
      uint64_t v36 = 0LL;
    }

    else
    {
      char v42 = v43;
    }

    sub_2D2DA4((uint64_t **)v12 - 1, v13, (uint64_t)buf);
    sub_32C8C(v43[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (*(void *)&v38[4])
    {
      *(void *)&v38[12] = *(void *)&v38[4];
      operator delete(*(void **)&v38[4]);
    }

    sub_32C8C(v35);
    if (v33[1])
    {
      v33[2] = v33[1];
      operator delete(v33[1]);
    }

    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
  }

  return sub_55C64(a1);
}

void sub_2D67D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_2D6838(uint64_t a1, int a2)
{
  if (dword_4A91A8)
  {
    int v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      *(void *)unsigned int v15 = "RoutingTypes.cpp";
      *(_WORD *)&v15[8] = 1024;
      *(_DWORD *)&v15[10] = 2512;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (qword_4A91B0 != qword_4A91B8)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      *(void *)unsigned int v15 = "RoutingTypes.cpp";
      *(_WORD *)&v15[8] = 1024;
      *(_DWORD *)&v15[10] = 2513;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    unsigned int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }

  int v4 = qword_4A9190;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = (uint64_t **)(a1 + 24);
  }
  else {
    uint64_t v5 = (uint64_t **)a1;
  }
  int v14 = HIDWORD(qword_4A9190);
  *(_OWORD *)&v15[4] = xmmword_4A9198;
  uint64_t v6 = sub_2D5594(v5, HIDWORD(qword_4A9190), xmmword_4A9198, (uint64_t)&v14);
  *((_DWORD *)v6 + 14) = a2;
  v6[60] = 1;
  return sub_55C64(a1);
}

void sub_2D6A40(_Unwind_Exception *a1)
{
}

uint64_t sub_2D6A60(uint64_t a1, int *a2, int a3)
{
  if (a2[6])
  {
    unsigned int v15 = (os_log_t *)sub_138E8(13);
    BOOL v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      unsigned int v24 = 136315394;
      *(void *)char v25 = "RoutingTypes.cpp";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = 2522;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      unsigned int v24 = 136315394;
      *(void *)char v25 = "RoutingTypes.cpp";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = 2523;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    int v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Precondition failure.");
  }

  int v6 = *a2;
  sub_55C64(a1);
  if (v6) {
    uint64_t v7 = (uint64_t **)(a1 + 24);
  }
  else {
    uint64_t v7 = (uint64_t **)a1;
  }
  unsigned int v9 = a2[1];
  int v8 = a2 + 1;
  unsigned int v24 = v9;
  *(_OWORD *)&void v25[4] = *(_OWORD *)(v8 + 1);
  int v10 = sub_2D5594(v7, v9, *(unint64_t *)&v25[4], (uint64_t)&v24);
  *((_DWORD *)v10 + 16) = a3;
  v10[68] = 1;
  unsigned int v24 = *v8;
  *(_OWORD *)&void v25[4] = *(_OWORD *)(v8 + 1);
  uint64_t v11 = sub_2D6D70((uint64_t)v7, (int *)&v24);
  if (v7 + 1 != (uint64_t **)v11)
  {
    __int16 v12 = *(unsigned __int16 **)(v11 + 72);
    if (v12)
    {
      int v13 = *v12;
      if (v13 != a3)
      {
        uint64_t v21 = (os_log_t *)sub_138E8(13);
        unint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          unsigned int v24 = 136315906;
          *(void *)char v25 = "RoutingTypes.cpp";
          *(_WORD *)&v25[8] = 1024;
          *(_DWORD *)&v25[10] = 2535;
          *(_WORD *)&v25[14] = 1024;
          *(_DWORD *)&v25[16] = a3;
          __int16 v26 = 1024;
          int v27 = v13;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempting to InsertForcedNumVirtualChannels %u which doesn't matc h the ForcedChannelLayout channel count %u",  (uint8_t *)&v24,  0x1Eu);
        }

        unint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error( v23,  "Attempting to InsertForcedNumVirtualChannels %u which doesn't match the ForcedChannelLayout channel count %u");
      }
    }
  }

  return sub_55C64(a1);
}

void sub_2D6D4C(_Unwind_Exception *a1)
{
}

uint64_t sub_2D6D70(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_15;
  }
  unsigned int v6 = *a2;
  unint64_t v7 = *((void *)a2 + 1);
  uint64_t result = a1 + 8;
  do
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32);
    if (v9 >= v6)
    {
      if (v9 == v6)
      {
        if (*(void *)(v4 + 40) < v7) {
          v4 += 8LL;
        }
        else {
          uint64_t result = v4;
        }
      }

      else
      {
        uint64_t result = v4;
      }
    }

    else
    {
      v4 += 8LL;
    }

    uint64_t v4 = *(void *)v4;
  }

  while (v4);
  if (result == v5 || (unsigned int v10 = *(_DWORD *)(result + 32), v6 < v10) || v6 == v10 && v7 < *(void *)(result + 40))
  {
LABEL_15:
    if (((a2[2] ^ *(_DWORD *)sub_2FC95C()) & 7LL) != 0)
    {
      unsigned int v11 = *a2;
      __int128 v12 = *(_OWORD *)sub_2FC95C();
      return sub_2D6D70(a1, &v11);
    }

    else
    {
      return v5;
    }
  }

  return result;
}

uint64_t sub_2D6E60(uint64_t a1, int *a2)
{
  int inSpecifier = 12713992;
  if (a2[6])
  {
    unint64_t v23 = (os_log_t *)sub_138E8(13);
    unsigned int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v35 = "RoutingTypes.cpp";
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)&v35[10] = 2543;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    __int16 v26 = (os_log_t *)sub_138E8(13);
    int v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v35 = "RoutingTypes.cpp";
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)&v35[10] = 2544;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "Precondition failure.");
  }

  int v4 = *a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = (uint64_t **)(a1 + 24);
  }
  else {
    uint64_t v5 = (uint64_t **)a1;
  }
  ioOSStatus PropertyDataSize = 172;
  unsigned int v6 = sub_335D30(8u);
  *(_DWORD *)unsigned int v6 = 0;
  OSStatus Property = AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, &ioPropertyDataSize, v6);
  OSStatus v8 = Property;
  if (Property)
  {
    if (Property != 560360820)
    {
      uint64_t v29 = (os_log_t *)sub_138E8(13);
      unsigned int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)uint64_t v35 = "RoutingTypes.cpp";
        *(_WORD *)&v35[8] = 1024;
        *(_DWORD *)&v35[10] = 2560;
        *(_WORD *)&v35[14] = 1024;
        *(_DWORD *)&v35[16] = v8;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): AudioFormatGetProperty(kAudioFormatProperty_ChannelLayoutForTag,..,) returned error %d",  buf,  0x18u);
      }

      __int128 v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error( v31,  "AudioFormatGetProperty(kAudioFormatProperty_ChannelLayoutForTag,..,) returned error %d");
    }

    uint64_t v9 = sub_138E8(20);
    if ((*(_BYTE *)(v9 + 8) & 1) != 0)
    {
      unsigned int v10 = *(os_log_s **)v9;
      if (*(void *)v9)
      {
        if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)uint64_t v35 = "RoutingTypes.cpp";
          *(_WORD *)&v35[8] = 1024;
          *(_DWORD *)&v35[10] = 2556;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AudioFormatGetProperty(kAudioFormatProperty_ChannelLayoutForTag,..,) returned kAudioFormatUnknownFormatError.",  buf,  0x12u);
        }
      }
    }

    *(_DWORD *)unsigned int v6 = inSpecifier;
  }

  *(_DWORD *)AudioObjectPropertyAddress buf = a2[1];
  *(_OWORD *)&v35[4] = *(_OWORD *)(a2 + 2);
  unsigned int v11 = sub_2D5594(v5, *(unsigned int *)buf, *(unint64_t *)&v35[4], (uint64_t)buf);
  __int128 v12 = a2 + 2;
  int v13 = (void *)*((void *)v11 + 9);
  *((void *)v11 + 9) = v6;
  if (v13) {
    free(v13);
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = a2[1];
  *(_OWORD *)&v35[4] = *v12;
  uint64_t v14 = sub_2D6D70((uint64_t)v5, (int *)buf);
  if (v5 + 1 != (uint64_t **)v14)
  {
    int v15 = (unsigned __int16)inSpecifier;
    if (*(_BYTE *)(v14 + 68) && (int v16 = *(_DWORD *)(v14 + 64)) != 0)
    {
      if (v16 != (unsigned __int16)inSpecifier)
      {
        int v17 = *(_DWORD *)(v14 + 64);
        uint64_t v18 = (os_log_t *)sub_138E8(13);
        uint64_t v19 = *v18;
        if (*v18)
        {
          if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)uint64_t v35 = "RoutingTypes.cpp";
            *(_WORD *)&v35[8] = 1024;
            *(_DWORD *)&v35[10] = 2571;
            *(_WORD *)&v35[14] = 1024;
            *(_DWORD *)&v35[16] = v15;
            __int16 v36 = 1024;
            int v37 = v17;
            _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempting to InsertForcedChannelLayoutForTag with %u channels w hich doesn't match the ForcedNumVirtualChannels channel count %u",  buf,  0x1Eu);
          }
        }

        int v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error( v20,  "Attempting to InsertForcedChannelLayoutForTag with %u channels which doesn't match the ForcedNumVirtualChannel s channel count %u");
      }
    }

    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = a2[1];
      *(_OWORD *)&v35[4] = *v12;
      uint64_t v21 = sub_2D5594(v5, *(unsigned int *)buf, *(unint64_t *)&v35[4], (uint64_t)buf);
      *((_DWORD *)v21 + 16) = v15;
      v21[68] = 1;
    }
  }

  return sub_55C64(a1);
}

void sub_2D730C(_Unwind_Exception *exception_object)
{
}

unint64_t sub_2D7370(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 1)
  {
    int v16 = (os_log_t *)sub_138E8(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)unsigned int v24 = "RoutingTypes.cpp";
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = 2593;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v3 = a1;
  sub_55C64(a1);
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v4 = sub_2D6D70(v3 + 24, (int *)buf);
  if (v3 + 32 == v4 || !*(_BYTE *)(v4 + 84))
  {
    if (*(_DWORD *)(a2 + 4) == 1768776806)
    {
      unint64_t v6 = 0LL;
      LOBYTE(v3) = 0;
      unint64_t v7 = 0LL;
      int v5 = 0;
    }

    else
    {
      uint64_t v8 = sub_138E8(20);
      if ((*(_BYTE *)(v8 + 8) & 1) != 0)
      {
        uint64_t v9 = *(os_log_s **)v8;
        if (*(void *)v8)
        {
          if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(v21, *(unsigned int *)(a2 + 4));
            int v10 = v22;
            unsigned int v11 = (void **)v21[0];
            sub_2CA1C(__p, 1768776806LL);
            __int128 v12 = v21;
            if (v10 < 0) {
              __int128 v12 = v11;
            }
            if (v20 >= 0) {
              int v13 = __p;
            }
            else {
              int v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)unsigned int v24 = "RoutingTypes.cpp";
            *(_WORD *)&v24[8] = 1024;
            *(_DWORD *)&v24[10] = 2608;
            *(_WORD *)&_BYTE v24[14] = 2080;
            *(void *)&v24[16] = v12;
            __int16 v25 = 2080;
            v26[0] = v13;
            _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find volume curve transfer function in %s mode.  Looking in %s mode instead",  buf,  0x26u);
            if (v20 < 0) {
              operator delete(__p[0]);
            }
            if (v22 < 0) {
              operator delete(v21[0]);
            }
          }
        }
      }

      sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
      uint64_t v14 = sub_2D7370(v3, buf);
      LOBYTE(v3) = v14;
      int v5 = v14 & 0xFFFFFF00;
      unint64_t v6 = v14 & 0xFFFFFFFF00000000LL;
      unint64_t v7 = v14 & 0xFFFFFF0000000000LL;
      if (*(void *)((char *)v26 + 2))
      {
        *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
        operator delete(*(void **)((char *)v26 + 2));
      }
    }
  }

  else
  {
    uint64_t v3 = *(void *)(v4 + 80);
    int v5 = v3 & 0xFFFFFF00;
    unint64_t v6 = v3 & 0xFFFFFFFF00000000LL;
    unint64_t v7 = v3 & 0xFFFFFF0000000000LL;
  }

  return v7 | v6 & 0xFF00000000LL | v3 | (unint64_t)(v5 & 0xFFFFFF00);
}

void sub_2D7640( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D7684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v6) {
    uint64_t v7 = a1 + 24;
  }
  else {
    uint64_t v7 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 8);
  uint64_t v8 = sub_2D6D70(v7, (int *)buf);
  if (v7 + 8 == v8 || !*(void *)(v8 + 112))
  {
    unint64_t v11 = 0LL;
  }

  else
  {
    unint64_t v9 = sub_2D353C(v8 + 96, *(_DWORD *)(a2 + 24), a3);
    unsigned __int8 v10 = v9;
    unint64_t v11 = v9 >> 8;
    if (v12) {
      return v10 | (v11 << 8);
    }
  }

  if (*(_DWORD *)(a2 + 4) == 1768776806)
  {
    unsigned __int8 v10 = 0;
  }

  else
  {
    uint64_t v13 = sub_138E8(20);
    uint64_t v14 = sub_138E8(38);
    char v15 = 0;
    uint64_t v16 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&buf[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1LL;
      if ((v19 & 1) != 0)
      {
        if ((v17 & 1) == 0) {
          goto LABEL_30;
        }
        goto LABEL_19;
      }
    }

    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
    if ((*(void *)(v13 + 8) & 1) != 0)
    {
LABEL_19:
      char v20 = *(os_log_s **)v13;
      if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v29, *(unsigned int *)(a2 + 4));
        int v21 = v30;
        char v22 = (void **)v29[0];
        sub_2CA1C(__p, 1768776806LL);
        unint64_t v23 = v29;
        if (v21 < 0) {
          unint64_t v23 = v22;
        }
        if (v28 >= 0) {
          unsigned int v24 = __p;
        }
        else {
          unsigned int v24 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2640;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v23;
        __int16 v32 = 2080;
        v33[0] = v24;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  buf,  0x26u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v30 < 0) {
          operator delete(v29[0]);
        }
      }
    }

void sub_2D794C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D7980(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v23[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    LOBYTE(v8) = 0;
    uint64_t v7 = 0LL;
    LODWORD(v9) = 0;
  }

  else
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 60);
    unint64_t v8 = *(unsigned int *)(v6 + 56) | (unint64_t)(v7 << 32);
    unint64_t v9 = v8 >> 8;
    if (*(_BYTE *)(v6 + 60)) {
      return ((_DWORD)v9 << 8) | (unint64_t)(v7 << 32) | v8;
    }
  }

  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v10 = sub_138E8(20);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      unint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v20, *(unsigned int *)(a2 + 4));
          int v12 = v21;
          uint64_t v13 = (void **)v20[0];
          sub_2CA1C(__p, 1768776806LL);
          uint64_t v14 = v20;
          if (v12 < 0) {
            uint64_t v14 = v13;
          }
          if (v19 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unint64_t v23 = "RoutingTypes.cpp";
          *(_WORD *)&char v23[8] = 1024;
          *(_DWORD *)&v23[10] = 2664;
          *(_WORD *)&v23[14] = 2080;
          *(void *)&v23[16] = v14;
          __int16 v24 = 2080;
          v25[0] = v15;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find preferred number of virtual channels in %s mode.  Looking in %s mode instead",  buf,  0x26u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    unint64_t v16 = sub_2D7980(a1, buf);
    LOBYTE(v8) = v16;
    unint64_t v9 = v16 >> 8;
    uint64_t v7 = BYTE4(v16);
    if (*(void *)((char *)v25 + 2))
    {
      *(void *)((char *)&v25[1] + 2) = *(void *)((char *)v25 + 2);
      operator delete(*(void **)((char *)v25 + 2));
    }
  }

  return ((_DWORD)v9 << 8) | (unint64_t)(v7 << 32) | v8;
}

void sub_2D7BA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D7BD8(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v23[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    LOBYTE(v8) = 0;
    uint64_t v7 = 0LL;
    LODWORD(v9) = 0;
  }

  else
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 68);
    unint64_t v8 = *(unsigned int *)(v6 + 64) | (unint64_t)(v7 << 32);
    unint64_t v9 = v8 >> 8;
    if (*(_BYTE *)(v6 + 68)) {
      return ((_DWORD)v9 << 8) | (unint64_t)(v7 << 32) | v8;
    }
  }

  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v10 = sub_138E8(20);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      unint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v20, *(unsigned int *)(a2 + 4));
          int v12 = v21;
          uint64_t v13 = (void **)v20[0];
          sub_2CA1C(__p, 1768776806LL);
          uint64_t v14 = v20;
          if (v12 < 0) {
            uint64_t v14 = v13;
          }
          if (v19 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unint64_t v23 = "RoutingTypes.cpp";
          *(_WORD *)&char v23[8] = 1024;
          *(_DWORD *)&v23[10] = 2686;
          *(_WORD *)&v23[14] = 2080;
          *(void *)&v23[16] = v14;
          __int16 v24 = 2080;
          v25[0] = v15;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find forced number of virtual channels in %s mode.  Looking in %s mode instead",  buf,  0x26u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    unint64_t v16 = sub_2D7BD8(a1, buf);
    LOBYTE(v8) = v16;
    unint64_t v9 = v16 >> 8;
    uint64_t v7 = BYTE4(v16);
    if (*(void *)((char *)v25 + 2))
    {
      *(void *)((char *)&v25[1] + 2) = *(void *)((char *)v25 + 2);
      operator delete(*(void **)((char *)v25 + 2));
    }
  }

  return ((_DWORD)v9 << 8) | (unint64_t)(v7 << 32) | v8;
}

void sub_2D7DFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D7E30(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v23[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    LOBYTE(v8) = 0;
    uint64_t v7 = 0LL;
    LODWORD(v9) = 0;
  }

  else
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 92);
    unint64_t v8 = *(unsigned int *)(v6 + 88) | (unint64_t)(v7 << 32);
    unint64_t v9 = v8 >> 8;
    if (*(_BYTE *)(v6 + 92)) {
      return ((_DWORD)v9 << 8) | (unint64_t)(v7 << 32) | v8;
    }
  }

  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v10 = sub_138E8(20);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      unint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v20, *(unsigned int *)(a2 + 4));
          int v12 = v21;
          uint64_t v13 = (void **)v20[0];
          sub_2CA1C(__p, 1768776806LL);
          uint64_t v14 = v20;
          if (v12 < 0) {
            uint64_t v14 = v13;
          }
          if (v19 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unint64_t v23 = "RoutingTypes.cpp";
          *(_WORD *)&char v23[8] = 1024;
          *(_DWORD *)&v23[10] = 2708;
          *(_WORD *)&v23[14] = 2080;
          *(void *)&v23[16] = v14;
          __int16 v24 = 2080;
          v25[0] = v15;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find fixed block size in %s mode.  Looking in %s mode instead",  buf,  0x26u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    unint64_t v16 = sub_2D7E30(a1, buf);
    LOBYTE(v8) = v16;
    unint64_t v9 = v16 >> 8;
    uint64_t v7 = BYTE4(v16);
    if (*(void *)((char *)v25 + 2))
    {
      *(void *)((char *)&v25[1] + 2) = *(void *)((char *)v25 + 2);
      operator delete(*(void **)((char *)v25 + 2));
    }
  }

  return ((_DWORD)v9 << 8) | (unint64_t)(v7 << 32) | v8;
}

void sub_2D8054( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D8088(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v20[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6 || (uint64_t v7 = *(void *)(v6 + 72)) == 0)
  {
    if (*(_DWORD *)(a2 + 4) == 1768776806)
    {
      return 0LL;
    }

    else
    {
      uint64_t v8 = sub_138E8(20);
      if ((*(_BYTE *)(v8 + 8) & 1) != 0)
      {
        unint64_t v9 = *(os_log_s **)v8;
        if (*(void *)v8)
        {
          if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(v17, *(unsigned int *)(a2 + 4));
            int v10 = v18;
            unint64_t v11 = (void **)v17[0];
            sub_2CA1C(__p, 1768776806LL);
            int v12 = v17;
            if (v10 < 0) {
              int v12 = v11;
            }
            if (v16 >= 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)char v20 = "RoutingTypes.cpp";
            *(_WORD *)&v20[8] = 1024;
            *(_DWORD *)&v20[10] = 2735;
            *(_WORD *)&v20[14] = 2080;
            *(void *)&char v20[16] = v12;
            __int16 v21 = 2080;
            v22[0] = v13;
            _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find forced channel layout in %s mode.  Looking in %s mode instead",  buf,  0x26u);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
            if (v18 < 0) {
              operator delete(v17[0]);
            }
          }
        }
      }

      sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
      uint64_t v7 = sub_2D8088(a1, buf);
      if (*(void *)((char *)v22 + 2))
      {
        *(void *)((char *)&v22[1] + 2) = *(void *)((char *)v22 + 2);
        operator delete(*(void **)((char *)v22 + 2));
      }
    }
  }

  return v7;
}

void sub_2D8298( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D82CC(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    uint64_t v10 = 0LL;
    int v9 = 0;
  }

  else
  {
    uint64_t v7 = sub_2D3254(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    int v9 = v7 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v7);
    if (BYTE4(v7)) {
      return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
    }
  }

  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v21, *(unsigned int *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2CA1C(__p, 1768776806LL);
          char v15 = v21;
          if (v13 < 0) {
            char v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)__int16 v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&v24[10] = 2758;
          *(_WORD *)&_BYTE v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  buf,  0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_2D82CC(a1, buf);
    unsigned __int8 v8 = v17;
    int v9 = v17 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v17);
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }

  return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
}

void sub_2D84FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D8530(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    uint64_t v10 = 0LL;
    int v9 = 0;
  }

  else
  {
    uint64_t v7 = sub_2D30CC(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    int v9 = v7 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v7);
    if (BYTE4(v7)) {
      return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
    }
  }

  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v21, *(unsigned int *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2CA1C(__p, 1768776806LL);
          char v15 = v21;
          if (v13 < 0) {
            char v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)__int16 v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&v24[10] = 2780;
          *(_WORD *)&_BYTE v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  buf,  0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_2D8530(a1, buf);
    unsigned __int8 v8 = v17;
    int v9 = v17 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v17);
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }

  return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
}

void sub_2D8760( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D8794(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    uint64_t v10 = 0LL;
    int v9 = 0;
  }

  else
  {
    uint64_t v7 = sub_2D2F44(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    int v9 = v7 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v7);
    if (BYTE4(v7)) {
      return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
    }
  }

  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v21, *(unsigned int *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2CA1C(__p, 1768776806LL);
          char v15 = v21;
          if (v13 < 0) {
            char v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)__int16 v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&v24[10] = 2802;
          *(_WORD *)&_BYTE v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  buf,  0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_2D8794(a1, buf);
    unsigned __int8 v8 = v17;
    int v9 = v17 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v17);
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }

  return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
}

void sub_2D89C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_2D89F8(_BYTE *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_138E8(20);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    uint64_t v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        memset(&v40, 0, sizeof(v40));
        std::string::append(&v40, "[ ", 2uLL);
        if (*a3) {
          unsigned __int8 v8 = "dst; ";
        }
        else {
          unsigned __int8 v8 = "src; ";
        }
        std::string::append(&v40, v8, 5uLL);
        sub_2CA1C(__p, a3[1]);
        if (__p[23] >= 0) {
          int v9 = __p;
        }
        else {
          int v9 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v10 = __p[23];
        }
        else {
          std::string::size_type v10 = *(void *)&__p[8];
        }
        std::string::append(&v40, v9, v10);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, "; ", 2uLL);
        sub_2FCA4C((std::string *)__p, (void *)a3 + 1);
        if (__p[23] >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v12 = __p[23];
        }
        else {
          std::string::size_type v12 = *(void *)&__p[8];
        }
        std::string::append(&v40, v11, v12);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, "; ", 2uLL);
        uint64_t v13 = a3[6];
        if ((_DWORD)v13) {
          sub_2CA1C(__p, v13);
        }
        else {
          sub_7D084(__p, "None");
        }
        if (__p[23] >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v15 = __p[23];
        }
        else {
          std::string::size_type v15 = *(void *)&__p[8];
        }
        std::string::append(&v40, v14, v15);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, "; ", 2uLL);
        sub_8F640((std::string *)__p, *((unsigned int **)a3 + 4), *((unsigned int **)a3 + 5));
        if (__p[23] >= 0) {
          char v16 = __p;
        }
        else {
          char v16 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v17 = __p[23];
        }
        else {
          std::string::size_type v17 = *(void *)&__p[8];
        }
        std::string::append(&v40, v16, v17);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, " ]", 2uLL);
        if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v18 = &v40;
        }
        else {
          char v18 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "RoutingTypes.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 2811;
        *(_WORD *)&__p[18] = 2080;
        *(void *)&_BYTE __p[20] = v18;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Looking up DSP list vector for %s", __p, 0x1Cu);
      }
    }
  }

  sub_55C64(a2);
  *a1 = 0;
  a1[24] = 0;
  int v19 = *a3;
  sub_55C64(a2);
  if (v19) {
    uint64_t v20 = a2 + 24;
  }
  else {
    uint64_t v20 = a2;
  }
  *(_DWORD *)std::string __p = a3[1];
  *(_OWORD *)&__p[8] = *(_OWORD *)(a3 + 2);
  uint64_t v21 = sub_2D6D70(v20, (int *)__p);
  if (v20 + 8 == v21) {
    goto LABEL_79;
  }
  unsigned int v22 = a3[6];
  unint64_t v23 = (void *)(v21 + 104);
  do
  {
    unsigned int v24 = v22;
    uint64_t v25 = *v23;
    if (!*v23) {
      goto LABEL_73;
    }
    __int16 v26 = v23;
    do
    {
      unsigned int v27 = *(_DWORD *)(v25 + 32);
      BOOL v28 = v27 >= v24;
      if (v27 >= v24) {
        uint64_t v29 = (uint64_t *)v25;
      }
      else {
        uint64_t v29 = (uint64_t *)(v25 + 8);
      }
      if (v28) {
        __int16 v26 = (void *)v25;
      }
      uint64_t v25 = *v29;
    }

    while (*v29);
    if (v26 == v23 || *((_DWORD *)v26 + 8) > v24) {
      goto LABEL_73;
    }
    sub_2D21B4(v26[8], v26[9]);
    sub_2D275C((uint64_t)__p, (uint64_t)(v26 + 5), (unsigned int **)a3 + 4);
    if (!__p[0])
    {
      char v30 = *(void **)&__p[8];
      goto LABEL_69;
    }

    char v30 = *(void **)&__p[8];
    if (*(void *)&__p[16] == *(void *)&__p[8])
    {
      char v30 = *(void **)&__p[16];
LABEL_69:
      v40.__r_.__value_.__s.__data_[0] = 0;
      char v41 = 0;
      if (!v30) {
        goto LABEL_73;
      }
      goto LABEL_72;
    }

    if (*(_BYTE *)(**(void **)&__p[8] + 56LL))
    {
      sub_DA6C8((uint64_t)&v40, **(void **)&__p[8] + 32LL);
    }

    else
    {
      __int128 v31 = operator new(8uLL);
      *__int128 v31 = 0LL;
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      v40.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 1);
      v40.__r_.__value_.__l.__cap_ = (std::string::size_type)(v31 + 1);
      char v41 = 1;
    }

void sub_2D8F90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (v29 < 0) {
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2D9044(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      int v4 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v4;
        operator delete(v4);
        *(void *)a1 = 0LL;
        *(void *)(a1 + 8) = 0LL;
        *(void *)(a1 + 16) = 0LL;
      }

      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0LL;
      a2->n128_u64[1] = 0LL;
      a2[1].n128_u64[0] = 0LL;
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }

    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return result;
}

unint64_t sub_2D90F0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  sub_55C64(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_2D6D70(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    unint64_t v9 = 0LL;
  }

  else
  {
    unint64_t v7 = sub_2D33DC(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFF00LL;
    if (v10) {
      return v9 & 0xFFFFFFFFFFFFFF00LL | v8;
    }
  }

  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      std::string::size_type v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v21, *(unsigned int *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2CA1C(__p, 1768776806LL);
          std::string::size_type v15 = v21;
          if (v13 < 0) {
            std::string::size_type v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unsigned int v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&v24[10] = 2848;
          *(_WORD *)&_BYTE v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  buf,  0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_2D90F0(a1, buf);
    unsigned __int8 v8 = v17;
    unint64_t v9 = v17 & 0xFFFFFFFFFFFFFF00LL;
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }

  return v9 & 0xFFFFFFFFFFFFFF00LL | v8;
}

void sub_2D9320( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_2D9354(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[40] = 0;
  int v6 = *(_DWORD *)a3;
  sub_55C64(a2);
  if (v6) {
    uint64_t v7 = a2 + 24;
  }
  else {
    uint64_t v7 = a2;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a3 + 4);
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a3 + 8);
  uint64_t v8 = sub_2D6D70(v7, (int *)buf);
  if (v7 + 8 == v8) {
    goto LABEL_30;
  }
  uint64_t v11 = *(void *)(v8 + 104);
  uint64_t v9 = v8 + 104;
  uint64_t v10 = v11;
  if (!v11) {
    goto LABEL_26;
  }
  unsigned int v12 = *(_DWORD *)(a3 + 24);
  uint64_t v13 = v9;
  do
  {
    unsigned int v14 = *(_DWORD *)(v10 + 32);
    BOOL v15 = v14 >= v12;
    if (v14 >= v12) {
      char v16 = (uint64_t *)v10;
    }
    else {
      char v16 = (uint64_t *)(v10 + 8);
    }
    if (v15) {
      uint64_t v13 = v10;
    }
    uint64_t v10 = *v16;
  }

  while (*v16);
  if (v13 == v9 || *(_DWORD *)(v13 + 32) > v12) {
    goto LABEL_26;
  }
  sub_2D21B4(*(void *)(v13 + 64), *(void *)(v13 + 72));
  sub_2D275C((uint64_t)&v30, v13 + 40, (unsigned int **)(a3 + 32));
  if ((_BYTE)v30)
  {
    uint64_t v17 = __p;
    if (v32 != __p)
    {
      uint64_t v18 = 0LL;
      unsigned int v19 = 1;
      while (1)
      {
        uint64_t v20 = *((void *)__p + v18);
        if (*(_BYTE *)(v20 + 120)) {
          break;
        }
        uint64_t v18 = v19;
      }

      sub_DA7BC(buf, v20 + 80);
      goto LABEL_24;
    }
  }

void sub_2D9694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (*(_BYTE *)(v24 + 40)) {
    sub_D0C14(v24);
  }
  _Unwind_Resume(a1);
}

void sub_2D9708(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      sub_2D97E8(a1);
      uint64_t v4 = *(void *)a2;
      *(void *)a2 = 0LL;
      uint64_t v5 = *(void **)a1;
      *(void *)a1 = v4;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = a2 + 16;
      uint64_t v6 = v8;
      uint64_t v9 = *(void *)(v7 - 8);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(v7 - 8) = 0LL;
      uint64_t v10 = *(void *)(v7 + 8);
      *(void *)(a1 + 24) = v10;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 + 16);
      if (v10)
      {
        unint64_t v11 = *(void *)(v6 + 8);
        unint64_t v12 = *(void *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            v11 %= v12;
          }
        }

        else
        {
          v11 &= v12 - 1;
        }

        *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
        *(void *)uint64_t v7 = 0LL;
        *(void *)(v7 + 8) = 0LL;
      }
    }
  }

  else if (*(_BYTE *)(a1 + 40))
  {
    sub_D0C14(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }

  else
  {
    sub_520F8(a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 40) = 1;
  }

void sub_2D97E8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_D0C4C(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void sub_2D983C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 32;
  if (*(void *)(a3 + 32) != *(void *)(a3 + 40))
  {
    __int16 v26 = (os_log_t *)sub_138E8(13);
    unsigned int v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)__int16 v34 = "RoutingTypes.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 2882;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_55C64(a2);
  int v7 = *(_DWORD *)a3;
  sub_55C64(a2);
  if (v7) {
    uint64_t v8 = a2 + 24;
  }
  else {
    uint64_t v8 = a2;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a3 + 4);
  *(_OWORD *)&v34[4] = *(_OWORD *)(a3 + 8);
  uint64_t v9 = sub_2D6D70(v8, (int *)buf);
  if (v8 + 8 == v9 || !*(void *)(v9 + 112))
  {
    if (*(_DWORD *)(a3 + 4) == 1768776806)
    {
LABEL_22:
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    else
    {
      uint64_t v20 = sub_138E8(20);
      if ((*(_BYTE *)(v20 + 8) & 1) != 0)
      {
        int v21 = *(os_log_s **)v20;
        if (*(void *)v20)
        {
          if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(v31, *(unsigned int *)(a3 + 4));
            int v22 = v32;
            uint64_t v23 = (void **)v31[0];
            sub_2CA1C(__p, 1768776806LL);
            uint64_t v24 = v31;
            if (v22 < 0) {
              uint64_t v24 = v23;
            }
            if (v30 >= 0) {
              int v25 = __p;
            }
            else {
              int v25 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)__int16 v34 = "RoutingTypes.cpp";
            *(_WORD *)&v34[8] = 1024;
            *(_DWORD *)&v34[10] = 2900;
            *(_WORD *)&v34[14] = 2080;
            *(void *)&v34[16] = v24;
            __int16 v35 = 2080;
            v36[0] = v25;
            _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  buf,  0x26u);
            if (v30 < 0) {
              operator delete(__p[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }
        }
      }

      sub_1FEC04((uint64_t)buf, *(_DWORD *)a3, 1768776806, (_OWORD *)(a3 + 8), *(_DWORD *)(a3 + 24), v3);
      sub_2D983C(a1, a2, buf);
      if (*(void *)((char *)v36 + 2))
      {
        *(void *)((char *)&v36[1] + 2) = *(void *)((char *)v36 + 2);
        operator delete(*(void **)((char *)v36 + 2));
      }
    }
  }

  else
  {
    unsigned int v10 = *(_DWORD *)(a3 + 24);
    uint64_t v13 = *(void *)(v9 + 104);
    uint64_t v11 = v9 + 104;
    uint64_t v12 = v13;
    while (1)
    {
      unsigned int v14 = v10;
      if (v12)
      {
        uint64_t v15 = v11;
        uint64_t v16 = v12;
        do
        {
          unsigned int v17 = *(_DWORD *)(v16 + 32);
          BOOL v18 = v17 >= v14;
          if (v17 >= v14) {
            unsigned int v19 = (uint64_t *)v16;
          }
          else {
            unsigned int v19 = (uint64_t *)(v16 + 8);
          }
          if (v18) {
            uint64_t v15 = v16;
          }
          uint64_t v16 = *v19;
        }

        while (*v19);
        if (v15 != v11 && *(_DWORD *)(v15 + 32) <= v14) {
          break;
        }
      }

      unsigned int v10 = 0;
      if (!v14) {
        goto LABEL_22;
      }
    }

    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    sub_7A5B8( a1,  *(const void **)(v15 + 40),  *(void *)(v15 + 48),  (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  }

void sub_2D9B6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2D9BB0(std::string *a1, uint64_t a2, int a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 != a2)
  {
    while (1)
    {
      int v7 = (os_unfair_lock_s **)(v6 + 16);
      if (a3)
      {
        sub_1263EC(__p, v7);
        uint64_t v8 = v21 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        uint64_t v9 = v21 >= 0 ? (void *)HIBYTE(v21) : __p[1];
        std::string::append(a1, v8, (std::string::size_type)v9);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        sub_B8F68((uint64_t *)&v18, (uint64_t *)v7, "", 3079);
        unsigned int v10 = v18;
        uint64_t v11 = v18 + 116;
        os_unfair_lock_lock(v18 + 116);
        if (SHIBYTE(v10[129]._os_unfair_lock_opaque) < 0)
        {
          sub_24054(__p, *(void **)&v10[124]._os_unfair_lock_opaque, *(void *)&v10[126]._os_unfair_lock_opaque);
        }

        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)&v10[124]._os_unfair_lock_opaque;
          uint64_t v21 = *(void *)&v10[128]._os_unfair_lock_opaque;
        }

        os_unfair_lock_unlock(v11);
        if (v21 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        if (v21 >= 0) {
          std::string::size_type v13 = HIBYTE(v21);
        }
        else {
          std::string::size_type v13 = (std::string::size_type)__p[1];
        }
        std::string::append(a1, (const std::string::value_type *)v12, v13);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
        unsigned int v14 = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            unint64_t v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }

      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_2D9D68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

std::string *sub_2D9DD8(std::string *a1, os_unfair_lock_s ***a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v6 = *a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != (os_unfair_lock_s **)v4)
  {
    while (1)
    {
      sub_1263EC(__p, v5 + 4);
      if ((v14 & 0x80u) == 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        std::string::size_type v8 = v14;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      uint64_t v9 = v5[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = (os_unfair_lock_s ***)v9;
          uint64_t v9 = *(os_unfair_lock_s **)&v9->_os_unfair_lock_opaque;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned int v10 = (os_unfair_lock_s ***)v5[2];
          BOOL v11 = *v10 == v5;
          uint64_t v5 = (os_unfair_lock_s **)v10;
        }

        while (!v11);
      }

      if (v10 == v4) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      uint64_t v5 = (os_unfair_lock_s **)v10;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_2D9EDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_2D9F18(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      sub_D3ECC(__p, (os_unfair_lock_s **)(v4 + 16));
      uint64_t v5 = (v9 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v6 = (v9 & 0x80u) == 0 ? (void *)v9 : __p[1];
      std::string::append(a1, v5, (std::string::size_type)v6);
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_2D9FF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_2DA02C(void *a1, uint64_t *a2)
{
  if (v35 >= 0) {
    uint64_t v4 = v34;
  }
  else {
    uint64_t v4 = (void **)v34[0];
  }
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)v38 + 144LL))(theString);
  sub_48E98(v32, theString[0]);
  if (v33 >= 0) {
    uint64_t v5 = v32;
  }
  else {
    uint64_t v5 = (void **)v32[0];
  }
  uint64_t v6 = *(const __CFString **)(v38 + 248);
  CFStringRef v27 = v6;
  char v28 = *(_BYTE *)(v38 + 256);
  if (v28 && v6)
  {
    CFRetain(v6);
    uint64_t v6 = v27;
  }

  sub_48E98(v29, v6);
  if (v30 >= 0) {
    int v7 = v29;
  }
  else {
    int v7 = (void **)v29[0];
  }
  std::string::size_type v8 = v25;
  sub_2CA1C(v25, *(unsigned int *)(v36 + 144));
  if (v26 < 0) {
    std::string::size_type v8 = (void **)v25[0];
  }
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)v36 + 144LL))(v22);
  unsigned __int8 v9 = v23;
  sub_48E98(v23, v22[0]);
  if (v24 < 0) {
    unsigned __int8 v9 = (void **)v23[0];
  }
  unsigned int v10 = *(const __CFString **)(v36 + 248);
  CFStringRef v18 = v10;
  char v19 = *(_BYTE *)(v36 + 256);
  if (v19 && v10)
  {
    CFRetain(v10);
    unsigned int v10 = v18;
  }

  sub_48E98(__p, v10);
  if (v21 >= 0) {
    BOOL v11 = __p;
  }
  else {
    BOOL v11 = (void **)__p[0];
  }
  snprintf( __str,  0x400uLL,  "[ source: '%s'; %s; %s / destination: '%s'; %s; %s ]",
    (const char *)v4,
    (const char *)v5,
    (const char *)v7,
    (const char *)v8,
    (const char *)v9,
    (const char *)v11);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  sub_19DFC((uint64_t)&v18);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  sub_19DFC((uint64_t)v22);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  sub_19DFC((uint64_t)&v27);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  sub_19DFC((uint64_t)theString);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  sub_7D084(a1, __str);
  uint64_t v12 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v15 = v39;
  if (v39)
  {
    uint64_t v16 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_2DA324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a23);
  if (v57 < 0) {
    operator delete(v56);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  sub_19DFC((uint64_t)&a34);
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_19DFC((uint64_t)&a42);
  if (a17 < 0) {
    operator delete(v55);
  }
  sub_7A768((uint64_t)&a53);
  sub_7A768((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_2DA3F8()
{
}

void sub_2DA400()
{
}

std::string *sub_2DA408(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      sub_2DA02C(__p, (uint64_t *)(v4 + 16));
      uint64_t v5 = (v9 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v6 = (v9 & 0x80u) == 0 ? (void *)v9 : __p[1];
      std::string::append(a1, v5, (std::string::size_type)v6);
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_2DA4E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_2DA51C(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Device Type: ", 0xDuLL);
  sub_2CA1C(&__p, *a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  std::string::append(a1, "; ", 2uLL);
  std::string::append(a1, "Context ID: ", 0xCuLL);
  std::to_string(&__p, a2[1]);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v6, v7);
  std::string::append(a1, "; ", 2uLL);
  sub_2DA408(&__p, (uint64_t)(a2 + 4));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v8 = &__p;
  }
  else {
    std::string::size_type v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  return std::string::append(a1, " ]", 2uLL);
}

void sub_2DA688( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2DA6D0(std::string *a1, unsigned int ***a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{", 1uLL);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      sub_2DA51C(&__p, *v4);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      if (*v4 != *(a2[1] - 1)) {
        std::string::append(a1, ", ", 2uLL);
      }
      ++v4;
    }

    while (v4 != v5);
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_2DA7B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_2DA7F4(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      sub_2CA1C(__p, *((unsigned int *)v5 + 7));
      if ((v14 & 0x80u) == 0) {
        std::string::size_type v7 = __p;
      }
      else {
        std::string::size_type v7 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        std::string::size_type v8 = v14;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      std::string::append(a1, " ", 1uLL);
      std::string::size_type v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = v9;
          std::string::size_type v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned int v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }

        while (!v11);
      }

      uint64_t v5 = v10;
    }

    while (v10 != v4);
  }

  return std::string::append(a1, "}", 1uLL);
}

void sub_2DA8F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_2DA930(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      (*(void (**)(CFStringRef *__return_ptr))(*(void *)v5[4] + 128LL))(theString);
      sub_48E98(__p, theString[0]);
      if (v15 >= 0) {
        std::string::size_type v7 = __p;
      }
      else {
        std::string::size_type v7 = (void **)__p[0];
      }
      size_t v8 = strlen((const char *)v7);
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)theString);
      std::string::append(a1, " ", 1uLL);
      std::string::size_type v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = v9;
          std::string::size_type v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned int v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }

        while (!v11);
      }

      uint64_t v5 = v10;
    }

    while (v10 != v4);
  }

  return std::string::append(a1, "}", 1uLL);
}

void sub_2DAA54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void *sub_2DAAA0(void *a1, unsigned int *a2)
{
  int v4 = v12;
  uint64_t v5 = (void **)v11[0];
  sub_2CA1C(__p, a2[1]);
  uint64_t v6 = v11;
  if (v4 < 0) {
    uint64_t v6 = v5;
  }
  if (v10 >= 0) {
    std::string::size_type v7 = __p;
  }
  else {
    std::string::size_type v7 = (void **)__p[0];
  }
  snprintf(__str, 0x400uLL, "[ %s / %s ]", (const char *)v6, (const char *)v7);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return sub_7D084(a1, __str);
}

void sub_2DAB88(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2DABA8(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    while (1)
    {
      sub_2DAAA0(__p, (unsigned int *)(v2 + 16));
      uint64_t v5 = (v8 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v6 = (v8 & 0x80u) == 0 ? (void *)v8 : __p[1];
      std::string::append(a1, v5, (std::string::size_type)v6);
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

void sub_2DAC5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_2DAC94(std::string *a1, unsigned int **a2, int a3)
{
  int v4 = a1;
  int v33 = a3;
  sub_7D084(a1, "[ ");
  uint64_t v5 = *a2;
  int v25 = a2[1];
  if (*a2 != v25)
  {
    char v6 = 0;
    char v24 = v4;
    do
    {
      if ((v6 & 1) != 0) {
        std::string::append(v4, ", ", 2uLL);
      }
      std::string::append(v4, "{ ", 2uLL);
      sub_2CA1C(&v30, *v5);
      std::string::size_type v7 = std::string::append(&v30, ", ", 2uLL);
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      int64_t cap = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v10 = HIBYTE(cap);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(v4, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      __p[0] = __p;
      __p[1] = __p;
      int64_t cap = 0LL;
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      *(_OWORD *)&v30.__r_.__value_.__r.__words[1] = (unint64_t)&v30;
      sub_9DCB8((uint64_t *)&v28, (void *)v5 + 1);
      BOOL v11 = v29;
      if (v29 != (uint64_t *)&v28)
      {
        std::string::size_type v12 = v30.__r_.__value_.__r.__words[0];
        std::string::size_type v13 = __p[0];
        do
        {
          uint64_t v14 = v11[2];
          if (*(_DWORD *)(v14 + 144) != 1885433888)
          {
            uint64_t v15 = v11[3];
            if ((*(_WORD *)(v14 + 184) & 1) != 0)
            {
              if (v15)
              {
                uint64_t v20 = (unint64_t *)(v15 + 16);
                do
                  unint64_t v21 = __ldxr(v20);
                while (__stxr(v21 + 1, v20));
              }

              int v22 = operator new(0x20uLL);
              CFStringRef v22[2] = v14;
              void v22[3] = v15;
              void *v22 = v13;
              v22[1] = __p;
              v13[1] = v22;
              p_int64_t cap = (std::string::size_type *)&cap;
              std::string::size_type v13 = v22;
              __p[0] = v22;
            }

            else
            {
              if (v15)
              {
                uint64_t v16 = (unint64_t *)(v15 + 16);
                do
                  unint64_t v17 = __ldxr(v16);
                while (__stxr(v17 + 1, v16));
              }

              CFStringRef v18 = operator new(0x20uLL);
              v18[2] = v14;
              v18[3] = v15;
              *CFStringRef v18 = v12;
              v18[1] = &v30;
              *(void *)(v12 + 8) = v18;
              p_int64_t cap = &v30.__r_.__value_.__l.__cap_;
              std::string::size_type v12 = (std::string::size_type)v18;
              v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
            }

            ++*p_cap;
          }

          BOOL v11 = (uint64_t *)v11[1];
        }

        while (v11 != (uint64_t *)&v28);
      }

      sub_1BB88((uint64_t *)&v28);
      int v4 = v24;
      char v28 = v24;
      int v29 = (uint64_t *)&v33;
      sub_85A90(v27, __p);
      sub_2DB02C((uint64_t)&v28, v27);
      sub_85B80(v27);
      std::string::append(v24, ", ", 2uLL);
      sub_85A90(v26, &v30);
      sub_2DB02C((uint64_t)&v28, v26);
      sub_85B80(v26);
      std::string::append(v24, " }", 2uLL);
      sub_85B80((uint64_t *)&v30);
      sub_85B80((uint64_t *)__p);
      v5 += 8;
      char v6 = 1;
    }

    while (v5 != v25);
  }

  return std::string::append(v4, " ]", 2uLL);
}

void sub_2DAF6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
}

std::string *sub_2DB02C(uint64_t a1, void *a2)
{
  int v4 = v44;
  if (v44 != &v43)
  {
    char v5 = 0;
    while (1)
    {
      if ((v5 & 1) != 0) {
        std::string::append(*(std::string **)a1, ", ", 2uLL);
      }
      sub_2CA1C(__p, *(unsigned int *)(v4[2] + 144));
      if (__p[23] >= 0) {
        char v6 = __p;
      }
      else {
        char v6 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v7 = __p[23];
      }
      else {
        std::string::size_type v7 = *(void *)&__p[8];
      }
      std::string::append(*(std::string **)a1, v6, v7);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::append(*(std::string **)a1, "(", 3uLL);
      sub_2CA1C(__p, *(unsigned int *)(v4[2] + 264));
      if (__p[23] >= 0) {
        __int128 v8 = __p;
      }
      else {
        __int128 v8 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v9 = __p[23];
      }
      else {
        std::string::size_type v9 = *(void *)&__p[8];
      }
      std::string::append(*(std::string **)a1, v8, v9);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::append(*(std::string **)a1, ")", 2uLL);
      uint64_t v10 = v4[2];
      uint64_t v11 = *(void *)(v10 + 192);
      LODWORD(outData.__r_.__value_.__l.__data_) = 0;
      strcpy(__p, "nartbolg");
      __p[9] = 0;
      *(_WORD *)&__p[10] = 0;
      AudioObjectID v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 120LL))(v11);
      if (!AudioObjectHasProperty(v12, (const AudioObjectPropertyAddress *)__p))
      {
LABEL_26:
        BOOL v15 = 0;
        int v14 = 0;
        goto LABEL_38;
      }

      LODWORD(ioDataSize.__r_.__value_.__l.__data_) = 4;
      AudioObjectID v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 120LL))(v11);
      AudioObjectGetPropertyData(v13, (const AudioObjectPropertyAddress *)__p, 0, 0LL, (UInt32 *)&ioDataSize, &outData);
      if (LODWORD(outData.__r_.__value_.__l.__data_) != 1970496032) {
        break;
      }
      uint64_t v16 = *(void *)(v11 + 484);
      if (v16 != 0x110A000005ACLL)
      {
        if (v16 != 0x1710000005ACLL)
        {
          BOOL v15 = v16 == 0x110B000005ACLL;
          if (v16 == 0x110B000005ACLL) {
            int v14 = 5;
          }
          else {
            int v14 = 0;
          }
          goto LABEL_38;
        }

        int v14 = 2;
LABEL_30:
        BOOL v15 = 1;
        goto LABEL_38;
      }

      BOOL v15 = 1;
      int v14 = 1;
LABEL_38:
      unint64_t v17 = (os_log_t *)sub_138E8(23);
      CFStringRef v18 = *v17;
      if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_INFO)) {
        goto LABEL_50;
      }
      sub_2CA1C(&outData, *(unsigned int *)(v10 + 144));
      int size = (char)outData.__r_.__value_.__s.__size_;
      std::string::size_type v20 = outData.__r_.__value_.__r.__words[0];
      if (v15) {
        int v21 = v14;
      }
      else {
        int v21 = 0;
      }
      sub_2047E8(&ioDataSize, v21);
      p_std::string outData = &outData;
      if (size < 0) {
        p_std::string outData = (std::string *)v20;
      }
      p_std::string ioDataSize = &ioDataSize;
      if ((ioDataSize.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_std::string ioDataSize = (std::string *)ioDataSize.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "PortUtilities.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 1275;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&_BYTE __p[20] = p_outData;
      __int16 v48 = 2080;
      __int16 v49 = p_ioDataSize;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "%25s:%-5d Headset type for port '%s': %s", __p, 0x26u);
      if ((char)outData.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(outData.__r_.__value_.__l.__data_);
        if (v15)
        {
LABEL_51:
          sub_2047E8(&ioDataSize, v14);
          char v24 = std::string::insert(&ioDataSize, 0LL, "(", 3uLL);
          __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          outData.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
          *(_OWORD *)&outData.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0LL;
          v24->__r_.__value_.__l.__cap_ = 0LL;
          v24->__r_.__value_.__r.__words[0] = 0LL;
          char v26 = std::string::append(&outData, ")", 2uLL);
          __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = v26->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string __p = v27;
          v26->__r_.__value_.__l.__size_ = 0LL;
          v26->__r_.__value_.__l.__cap_ = 0LL;
          v26->__r_.__value_.__r.__words[0] = 0LL;
          if (__p[23] >= 0) {
            char v28 = __p;
          }
          else {
            char v28 = *(const std::string::value_type **)__p;
          }
          if (__p[23] >= 0) {
            std::string::size_type v29 = __p[23];
          }
          else {
            std::string::size_type v29 = *(void *)&__p[8];
          }
          std::string::append(*(std::string **)a1, v28, v29);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }

      else
      {
LABEL_50:
        if (v15) {
          goto LABEL_51;
        }
      }

      if (sub_59468(v4[2]))
      {
        std::string::append(*(std::string **)a1, "(", 3uLL);
        unsigned int v30 = sub_59468(v4[2]);
        std::to_string((std::string *)__p, v30);
        if (__p[23] >= 0) {
          __int128 v31 = __p;
        }
        else {
          __int128 v31 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v32 = __p[23];
        }
        else {
          std::string::size_type v32 = *(void *)&__p[8];
        }
        std::string::append(*(std::string **)a1, v31, v32);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(*(std::string **)a1, ")", 2uLL);
      }

      uint64_t v33 = (void *)v4[2];
      if (v33[12] != v33[13])
      {
        uint64_t v34 = (*(uint64_t (**)(void *, void))(*v33 + 184LL))(v33, **(unsigned int **)(a1 + 8));
        uint64_t v35 = v34;
        if ((v34 & 0xFF00000000LL) != 0)
        {
          if ((_DWORD)v34)
          {
            std::string::append(*(std::string **)a1, "(", 3uLL);
            sub_2CA1C(__p, v35);
            if (__p[23] >= 0) {
              uint64_t v36 = __p;
            }
            else {
              uint64_t v36 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v37 = __p[23];
            }
            else {
              std::string::size_type v37 = *(void *)&__p[8];
            }
            std::string::append(*(std::string **)a1, v36, v37);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            std::string::append(*(std::string **)a1, ")", 2uLL);
            if (sub_F7070(v4[2], v35))
            {
              uint64_t v38 = v4[2];
              __p[0] = 0;
              __p[4] = 0;
              uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(void *)v38 + 248LL))(v38, v35, __p);
              std::string::append(*(std::string **)a1, "(", 3uLL);
              sub_2CA1C(__p, v39);
              if (__p[23] >= 0) {
                std::string v40 = __p;
              }
              else {
                std::string v40 = *(const std::string::value_type **)__p;
              }
              if (__p[23] >= 0) {
                std::string::size_type v41 = __p[23];
              }
              else {
                std::string::size_type v41 = *(void *)&__p[8];
              }
              std::string::append(*(std::string **)a1, v40, v41);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              std::string::append(*(std::string **)a1, ")", 2uLL);
            }
          }
        }
      }

      int v4 = (uint64_t *)v4[1];
      char v5 = 1;
      if (v4 == &v43) {
        goto LABEL_96;
      }
    }

    if (LODWORD(outData.__r_.__value_.__l.__data_) != 1835169139) {
      goto LABEL_26;
    }
    if (!sub_204570(*(_DWORD *)(v10 + 144), *(void *)(v10 + 192)))
    {
      BOOL v15 = sub_15A154(v11);
      if (v15) {
        int v14 = 4;
      }
      else {
        int v14 = 0;
      }
      goto LABEL_38;
    }

    int v14 = 3;
    goto LABEL_30;
  }

void sub_2DB634( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
}

std::string *sub_2DB6FC(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Category: '", 0xBuLL);
  sub_2CA1C(&__p, *a2);
  if ((v13 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v5 = v13;
  }
  else {
    std::string::size_type v5 = v12;
  }
  std::string::append(a1, p_p, v5);
  std::string::append(a1, "'; Mode: '", 0xAuLL);
  sub_2CA1C(&__p, a2[1]);
  if ((v13 & 0x80u) == 0) {
    char v6 = (const std::string::value_type *)&__p;
  }
  else {
    char v6 = (const std::string::value_type *)__p;
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v7 = v13;
  }
  else {
    std::string::size_type v7 = v12;
  }
  std::string::append(a1, v6, v7);
  if (*((_BYTE *)a2 + 12))
  {
    std::string::append(a1, "'; OutputMode: '", 0x10uLL);
    sub_2CA1C(&__p, a2[2]);
    if ((v13 & 0x80u) == 0) {
      __int128 v8 = (const std::string::value_type *)&__p;
    }
    else {
      __int128 v8 = (const std::string::value_type *)__p;
    }
    if ((v13 & 0x80u) == 0) {
      std::string::size_type v9 = v13;
    }
    else {
      std::string::size_type v9 = v12;
    }
    std::string::append(a1, v8, v9);
  }

  return std::string::append(a1, "' ]", 3uLL);
}

void sub_2DB85C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2DB8A4(std::string *this, uint64_t a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  if (*(_BYTE *)(a2 + 20)) {
    std::string::append(this, "[ ", 2uLL);
  }
  sub_2DB6FC(&__p, (unsigned int *)a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(this, (const std::string::value_type *)p_p, size);
  if (*(_BYTE *)(a2 + 20))
  {
    std::string::append(this, "'; IsolatedUseCaseID: '", 0x17uLL);
    if (!*(_BYTE *)(a2 + 20)) {
      sub_8DEEC();
    }
    sub_2CA1C(&__p, *(unsigned int *)(a2 + 16));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v6 = &__p;
    }
    else {
      char v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(this, (const std::string::value_type *)v6, v7);
    if (*(_BYTE *)(a2 + 20)) {
      std::string::append(this, "' ]", 3uLL);
    }
  }

void sub_2DB9C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2DBA00(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  sub_2DB6FC(&__p, (unsigned int *)a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (*(void *)(a2 + 32))
  {
    std::string::append(a1, "; Override Ports: { ", 0x14uLL);
    sub_132B90((uint64_t ***)&__p, (void *)(a2 + 16));
    char v6 = (std::string::__raw *)__p.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
    {
      while (1)
      {
        sub_2CA1C(v33, *(unsigned int *)(v6[1].__words[1] + 144));
        if ((v34 & 0x80u) == 0) {
          std::string::size_type v7 = v33;
        }
        else {
          std::string::size_type v7 = (void **)v33[0];
        }
        if ((v34 & 0x80u) == 0) {
          std::string::size_type v8 = v34;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v33[1];
        }
        std::string::append(a1, (const std::string::value_type *)v7, v8);
        std::string::size_type v9 = (std::string *)v6->__words[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            std::string::size_type v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
          }

          while (v9);
        }

        else
        {
          do
          {
            uint64_t v10 = (std::string *)v6->__words[2];
            BOOL v11 = v10->__r_.__value_.__r.__words[0] == (void)v6;
            char v6 = (std::string::__raw *)v10;
          }

          while (!v11);
        }

        if (v10 == (std::string *)&__p.__r_.__value_.__r.__words[1]) {
          break;
        }
        std::string::append(a1, ", ", 2uLL);
        char v6 = (std::string::__raw *)v10;
      }
    }

    std::string::append(a1, " }", 2uLL);
    sub_132DF8((void *)__p.__r_.__value_.__l.__size_);
  }

  if (*(void *)(a2 + 56) | *(void *)(a2 + 80))
  {
    std::string::append(a1, "; Disallowed Ports: { ", 0x16uLL);
    sub_1245C0(&__p, a2 + 40);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v12 = &__p;
    }
    else {
      std::string::size_type v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v13 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v12, v13);
    std::string::append(a1, " }", 2uLL);
  }

  if (*(void *)(a2 + 104))
  {
    std::string::append(a1, "; Disallowed Port Types: ", 0x19uLL);
    sub_110E40(&__p, *(void **)(a2 + 88), (void *)(a2 + 96));
    int v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v15 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v14, v15);
  }

  if (*(void *)(a2 + 128))
  {
    std::string::append(a1, "; Default Allowed Port Types: ", 0x1EuLL);
    sub_110E40(&__p, *(void **)(a2 + 112), (void *)(a2 + 120));
    uint64_t v16 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v17 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v16, v17);
  }

  std::string::append(a1, "; Screen Dark Policy: ", 0x16uLL);
  if (*(_BYTE *)(a2 + 140)) {
    unsigned int v18 = *(_DWORD *)(a2 + 136);
  }
  else {
    unsigned int v18 = 0;
  }
  char v19 = &__p;
  std::to_string(&__p, v18);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    char v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v20 = strlen((const char *)v19);
  std::string::append(a1, (const std::string::value_type *)v19, v20);
  std::string::append(a1, "; Stream Coupling Policy: ", 0x1AuLL);
  int v21 = *(_DWORD *)(a2 + 144);
  if (v21 == 1668248944) {
    int v22 = "couple";
  }
  else {
    int v22 = "decouple";
  }
  if (v21 == 1668248944) {
    std::string::size_type v23 = 6LL;
  }
  else {
    std::string::size_type v23 = 8LL;
  }
  std::string::append(a1, v22, v23);
  if (*(_DWORD *)(a2 + 152) != 1852796517)
  {
    std::string::append(a1, "; Initiation Trigger: ", 0x16uLL);
    sub_2CA1C(&__p, *(unsigned int *)(a2 + 152));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v24 = &__p;
    }
    else {
      char v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v24, v25);
    uint64_t v26 = *(unsigned __int8 *)(a2 + 183);
    if ((v26 & 0x80u) != 0LL) {
      uint64_t v26 = *(void *)(a2 + 168);
    }
    if (v26)
    {
      std::string::append(a1, "; Initiating Device UID: ", 0x19uLL);
      int v27 = *(char *)(a2 + 183);
      if (v27 >= 0) {
        char v28 = (const std::string::value_type *)(a2 + 160);
      }
      else {
        char v28 = *(const std::string::value_type **)(a2 + 160);
      }
      if (v27 >= 0) {
        std::string::size_type v29 = *(unsigned __int8 *)(a2 + 183);
      }
      else {
        std::string::size_type v29 = *(void *)(a2 + 168);
      }
      std::string::append(a1, v28, v29);
    }
  }

  if (*(_BYTE *)(a2 + 400)) {
    std::operator+<char>("; AggregateDevice ClockDevice UID: ", a2 + 376);
  }
  else {
    sub_7D084(&__p, "");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v30 = &__p;
  }
  else {
    unsigned int v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v31 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v30, v31);
  if (*(_BYTE *)(a2 + 370)) {
    std::string::append(a1, "; Colistening: Active", 0x15uLL);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_2DBEC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2DBF5C(uint64_t a1)
{
  switch(*(_DWORD *)a1)
  {
    case 0xC:
    case 0xD:
    case 0xE:
      CFRelease(*(CFTypeRef *)(a1 + 8));
      return a1;
    case 0xF:
      uint64_t v2 = *(void **)(a1 + 8);
      if (v2)
      {
        sub_D0C14(*(void *)(a1 + 8));
        goto LABEL_15;
      }

      return a1;
    case 0x10:
      uint64_t v2 = *(void **)(a1 + 8);
      if (v2)
      {
        sub_149990(*(uint64_t **)(a1 + 8));
        goto LABEL_15;
      }

      return a1;
    case 0x11:
      uint64_t v2 = *(void **)(a1 + 8);
      if (v2)
      {
        sub_2DBF5C(v2 + 2);
        sub_2DBF5C(v2);
        goto LABEL_15;
      }

      return a1;
    case 0x12:
      uint64_t v2 = *(void **)(a1 + 8);
      if (!v2) {
        return a1;
      }
      uint64_t v3 = (void *)v2[3];
      if (v3 == v2)
      {
        uint64_t v4 = 4LL;
        uint64_t v3 = *(void **)(a1 + 8);
      }

      else
      {
        if (!v3) {
          goto LABEL_15;
        }
        uint64_t v4 = 5LL;
      }

      (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_15:
      operator delete(v2);
      return a1;
    default:
      return a1;
  }

CFTypeRef sub_2DC034(uint64_t a1, CFTypeRef cf)
{
  *(_DWORD *)a1 = 13;
  *(void *)(a1 + 8) = cf;
  return CFRetain(cf);
}

void sub_2DC064(_Unwind_Exception *a1)
{
}

CFTypeRef sub_2DC078(uint64_t a1, CFTypeRef cf)
{
  *(_DWORD *)a1 = 14;
  *(void *)(a1 + 8) = cf;
  return CFRetain(cf);
}

void sub_2DC0A8(_Unwind_Exception *a1)
{
}

CFStringRef sub_2DC0BC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 14;
  *(void *)(a1 + 8) = 0LL;
  char v3 = *(_BYTE *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (const UInt8 *)a2;
  }
  else {
    uint64_t v4 = *(const UInt8 **)a2;
  }
  if (v4)
  {
    if (v3 >= 0) {
      CFIndex v5 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      CFIndex v5 = *(void *)(a2 + 8);
    }
    CFStringRef result = CFStringCreateWithBytes(0LL, v4, v5, 0x8000100u, 0);
    if (!result)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  else
  {
    CFStringRef result = 0LL;
  }

  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2DC16C(_Unwind_Exception *a1)
{
}

uint64_t sub_2DC194(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 15;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = operator new(0x28uLL);
  uint64_t result = sub_D1274((uint64_t)v4, a2);
  *(void *)(a1 + 8) = v4;
  return result;
}

void sub_2DC1E0(_Unwind_Exception *a1)
{
}

uint64_t *sub_2DC204(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 16;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)operator new(0x18uLL);
  uint64_t result = sub_1FE1EC(v4, a2);
  *(void *)(a1 + 8) = v4;
  return result;
}

void sub_2DC250(_Unwind_Exception *a1)
{
}

uint64_t sub_2DC274(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 17;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t result = sub_1FDD64((uint64_t)v4, a2);
  *(void *)(a1 + 8) = v4;
  return result;
}

void sub_2DC2C0(_Unwind_Exception *a1)
{
}

uint64_t sub_2DC2E4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 18;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t result = sub_82AF0((uint64_t)v4, a2);
  *(void *)(a1 + 8) = v4;
  return result;
}

void sub_2DC330(_Unwind_Exception *a1)
{
}

uint64_t sub_2DC354(int *a1)
{
  if (*a1 != 18)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    char v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 488;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    char v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

uint64_t sub_2DC450(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v4 = *(const void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  switch(v3)
  {
    case 12:
    case 13:
    case 14:
      CFRetain(v4);
      return a1;
    case 15:
      char v6 = (uint64_t *)operator new(0x28uLL);
      sub_D1274((uint64_t)v6, *(void *)(a2 + 8));
      goto LABEL_7;
    case 16:
      char v6 = (uint64_t *)operator new(0x18uLL);
      sub_1FE1EC(v6, *(void *)(a2 + 8));
      goto LABEL_7;
    case 17:
      char v6 = (uint64_t *)operator new(0x20uLL);
      sub_1FDD64((uint64_t)v6, *(void *)(a2 + 8));
      goto LABEL_7;
    case 18:
      char v6 = (uint64_t *)operator new(0x20uLL);
      uint64_t v7 = sub_2DC354((int *)a2);
      sub_82AF0((uint64_t)v6, v7);
LABEL_7:
      *(void *)(a1 + 8) = v6;
      break;
    default:
      return a1;
  }

  return a1;
}

void sub_2DC524(_Unwind_Exception *a1)
{
}

CFTypeRef *sub_2DC544(CFTypeRef *a1, CFTypeRef *a2)
{
  if (a2 != a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0xC:
      case 0xD:
      case 0xE:
        CFRelease(a1[1]);
        break;
      case 0xF:
        uint64_t v4 = (uint64_t)a1[1];
        if (v4)
        {
          CFIndex v5 = (void *)sub_D0C14(v4);
          goto LABEL_8;
        }

        break;
      case 0x10:
        CFTypeRef v6 = a1[1];
        if (v6)
        {
          sub_149990((uint64_t *)a1[1]);
          CFIndex v5 = (void *)v6;
LABEL_8:
          operator delete(v5);
        }

        break;
      default:
        break;
    }

    int v7 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 13) <= 1)
    {
      CFRetain(a2[1]);
      int v7 = *(_DWORD *)a2;
    }

    switch(v7)
    {
      case 18:
        std::string::size_type v8 = (uint64_t *)operator new(0x20uLL);
        sub_82AF0((uint64_t)v8, (uint64_t)a2[1]);
        break;
      case 16:
        std::string::size_type v8 = (uint64_t *)operator new(0x18uLL);
        sub_1FE1EC(v8, (uint64_t)a2[1]);
        break;
      case 15:
        std::string::size_type v8 = (uint64_t *)operator new(0x28uLL);
        sub_D1274((uint64_t)v8, (uint64_t)a2[1]);
        break;
      default:
        a1[1] = a2[1];
        goto LABEL_19;
    }

    a1[1] = v8;
LABEL_19:
    *(_DWORD *)a1 = *(_DWORD *)a2;
  }

  return a1;
}

void sub_2DC664(_Unwind_Exception *a1)
{
}

uint64_t sub_2DC680(uint64_t a1, int *a2)
{
  float v2 = *(float *)a2;
  if (*a2 != *(_DWORD *)a1) {
    return 0LL;
  }
  switch(LODWORD(v2))
  {
    case 0:
    case 1:
    case 5:
      int v5 = *((unsigned __int8 *)a2 + 8);
      int v6 = *(unsigned __int8 *)(a1 + 8);
      goto LABEL_6;
    case 2:
    case 6:
      int v5 = *((unsigned __int16 *)a2 + 4);
      int v6 = *(unsigned __int16 *)(a1 + 8);
      goto LABEL_6;
    case 3:
    case 7:
      int v5 = a2[2];
      int v6 = *(_DWORD *)(a1 + 8);
LABEL_6:
      if (v5 == v6) {
        goto LABEL_32;
      }
      return 0LL;
    case 4:
    case 8:
    case 0xB:
      goto LABEL_30;
    case 9:
      goto LABEL_32;
    case 0xA:
      goto LABEL_32;
    case 0xC:
      if (CFEqual(*((CFTypeRef *)a2 + 1), *(CFTypeRef *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_14:
      if (LODWORD(v2) != 13) {
        goto LABEL_17;
      }
      if (CFEqual(*((CFTypeRef *)a2 + 1), *(CFTypeRef *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_17:
      if (LODWORD(v2) != 14) {
        goto LABEL_20;
      }
      if (CFEqual(*((CFTypeRef *)a2 + 1), *(CFTypeRef *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_20:
      if (LODWORD(v2) != 15) {
        goto LABEL_23;
      }
      if ((sub_DA600(*((void *)a2 + 1), *(void *)(a1 + 8)) & 1) != 0) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_23:
      if (LODWORD(v2) != 16) {
        goto LABEL_26;
      }
      if (sub_2DC7E8(*((void *)a2 + 1), *(void *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_26:
      if (LODWORD(v2) != 17) {
        goto LABEL_29;
      }
      if ((sub_2DC84C(*((void *)a2 + 1), *(void *)(a1 + 8)) & 1) != 0) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_29:
      if (LODWORD(v2) != 18) {
        return 0LL;
      }
LABEL_30:
      if (*((void *)a2 + 1) != *(void *)(a1 + 8)) {
        return 0LL;
      }
LABEL_32:
      uint64_t result = 1LL;
      break;
    default:
      goto LABEL_14;
  }

  return result;
}

BOOL sub_2DC7E8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v2 = a2;
  uint64_t v4 = a1;
  while (1)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    BOOL result = v4 == a1;
    if (v4 == a1) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if ((sub_2DC680(v4 + 16, v2 + 16) & 1) == 0) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_2DC84C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_2DC680(a1, a2);
  if ((_DWORD)result) {
    return sub_2DC680(a1 + 16, a2 + 16);
  }
  return result;
}

uint64_t sub_2DC888(int *a1)
{
  if (*a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 222;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((unsigned __int8 *)a1 + 8);
}

uint64_t sub_2DC980(int *a1)
{
  if (*a1 != 3)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 264;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return a1[2];
}

uint64_t sub_2DCA7C(int *a1)
{
  if (*a1 != 7)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 320;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return a1[2];
}

float sub_2DCB78(float *a1)
{
  if (*(_DWORD *)a1 != 9)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      float v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 348;
      __int16 v12 = 1024;
      float v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return a1[2];
}

double sub_2DCC74(double *a1)
{
  if (*(_DWORD *)a1 != 10)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(_DWORD *)a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 362;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return a1[1];
}

uint64_t sub_2DCD70(int *a1)
{
  if (*a1 != 11)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 376;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

uint64_t sub_2DCE6C(int *a1)
{
  if (*a1 != 13)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 404;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

uint64_t sub_2DCF68(int *a1)
{
  if (*a1 != 14)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 418;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

uint64_t sub_2DD064(int *a1)
{
  if (*a1 != 15)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 432;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

uint64_t sub_2DD160(int *a1)
{
  if (*a1 != 15)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 446;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

uint64_t sub_2DD25C(int *a1)
{
  if (*a1 != 16)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 460;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

uint64_t sub_2DD358(int *a1)
{
  if (*a1 != 17)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 474;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }

    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }

  return *((void *)a1 + 1);
}

void sub_2DD458(unint64_t a1)
{
  uint64_t v1 = (void *)sub_2DDEB4(a1);
  operator delete(v1);
}

uint64_t sub_2DD46C(uint64_t a1, void *a2)
{
  return 1LL;
}

uint64_t sub_2DD484(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_2DDD14(a2, a3);
  if (HIDWORD(v8)) {
    return sub_7F678(*(void *)(a1 + 1136), v8);
  }
  else {
    return sub_1903A4(a1, a2, a3, a4) != 0;
  }
}

uint64_t sub_2DD4FC(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v10 = sub_2DDD14(a2, a3);
  if (HIDWORD(v10)) {
    return sub_7F7F4(*(void *)(*(void *)(a1 + 1136) + 16LL), *(_BYTE *)(*(void *)(a1 + 1136) + 148LL), v10, a4);
  }
  else {
    return sub_18F2F4(a1, a2, a3, (uint64_t)a4, a5);
  }
}

uint64_t sub_2DD588(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v10 = sub_2DDD14(a2, a3);
  if (HIDWORD(v10)) {
    return sub_7F86C(*(void *)(*(void *)(a1 + 1136) + 16LL), *(_BYTE *)(*(void *)(a1 + 1136) + 148LL), v10, a5);
  }
  uint64_t v11 = sub_1903A4(a1, a2, a3, a4);
  if (v11) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v11 + 72LL))( v11,  a3,  a4,  0LL,  a5);
  }
  else {
    return 4294967246LL;
  }
}

uint64_t sub_2DD648(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_2DDB74(a2, a3);
  if (HIDWORD(v8)) {
    return sub_7F4FC(*(void *)(a1 + 1136), v8);
  }
  else {
    return sub_35A88(a1, a2, a3, a4) != 0;
  }
}

uint64_t sub_2DD6C0(uint64_t a1, int a2, uint64_t a3, UInt32 *a4, _BYTE *a5, uint64_t a6)
{
  unint64_t v12 = sub_2DDB74(a2, a3);
  if (HIDWORD(v12)) {
    return sub_7F480( *(void *)(*(void *)(a1 + 1136) + 16LL),  *(_BYTE *)(*(void *)(a1 + 1136) + 148LL),  v12,  a4,  a5);
  }
  else {
    return sub_18F3D4(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  }
}

uint64_t sub_2DD758(uint64_t a1, int a2, uint64_t a3, void *a4, UInt32 *a5, uint64_t a6)
{
  unint64_t v12 = sub_2DDB74(a2, a3);
  if (HIDWORD(v12)) {
    return sub_7F40C( *(void *)(*(void *)(a1 + 1136) + 16LL),  *(_BYTE *)(*(void *)(a1 + 1136) + 148LL),  v12,  a5,  a4);
  }
  uint64_t v13 = sub_35A88(a1, a2, a3, a6);
  if (v13) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, UInt32 *, void, void))(*(void *)v13 + 48LL))( v13,  a3,  a4,  a5,  0LL,  0LL);
  }
  else {
    return 1685220966LL;
  }
}

uint64_t sub_2DD828(uint64_t a1, int a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_2DDB74(a2, a3);
  if (HIDWORD(v12)) {
    return sub_7F398( *(void *)(*(void *)(a1 + 1136) + 16LL),  *(_BYTE *)(*(void *)(a1 + 1136) + 148LL),  v12,  a5,  a4);
  }
  uint64_t v13 = sub_35A88(a1, a2, a3, a6);
  if (v13) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, void))(*(void *)v13 + 56LL))( v13,  a3,  a4,  a5,  a6,  0LL);
  }
  else {
    return 4294967246LL;
  }
}

BOOL sub_2DD8F4(uint64_t a1, int a2)
{
  return a2 == 1936748595 || sub_18F4A4(a1, a2);
}

uint64_t sub_2DD910( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int **a5, unsigned int a6, unsigned int **a7)
{
  uint64_t result = sub_7531C();
  if ((_DWORD)result) {
    return sub_302C4(a1, a2, a3, a4, a5, a6, a7);
  }
  if (*(_BYTE *)(a1 + 448))
  {
    unint64_t v10 = (unsigned int *)(a1 + 680);
    HIWORD(v30) = *(_WORD *)(a1 + 682);
    LOWORD(v30) = HIWORD(v30);
    HIWORD(v28) = HIWORD(v30) == 0;
    LOWORD(v28) = HIWORD(v30);
    while (1)
    {
      unsigned int v11 = __ldaxr(v10);
      if (v11 != v30) {
        break;
      }
      if (!__stlxr(v28, v10)) {
        goto LABEL_9;
      }
    }

    __clrex();
LABEL_9:
    if (*(_WORD *)(a1 + 682)) {
      uint64_t v12 = 400LL;
    }
    else {
      uint64_t v12 = 424LL;
    }
    if (*(_WORD *)(a1 + 682)) {
      uint64_t v13 = a1 + 400;
    }
    else {
      uint64_t v13 = a1 + 424;
    }
    uint64_t v14 = *(void *)(v13 + 8) - *(void *)(a1 + v12);
    if (v14)
    {
      uint64_t v15 = 0LL;
      unint64_t v16 = v14 / 24;
      unint64_t v17 = v16 - 1;
      if (v16 <= 1) {
        uint64_t v18 = 1LL;
      }
      else {
        uint64_t v18 = v16;
      }
      uint64_t v19 = 8LL;
      uint64_t v20 = 16LL;
      do
      {
        int v21 = a7;
        if (v17 != v15) {
          int v21 = (unsigned int **)(*(void *)(a1 + 976) + v20);
        }
        std::string::size_type v29 = *v21;
        uint64_t v22 = *(void *)(a1 + v12);
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v22 + v19) + 216LL))(*(void *)(v22 + v19));
        if ((_DWORD)result)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v22 + v19) + 112LL))( *(void *)(v22 + v19),  a2,  a3);
        }

        else if (v29)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v22 + v19) + 104LL))( *(void *)(v22 + v19),  a2,  a3);
        }

        ++v15;
        v19 += 24LL;
        v20 += 32LL;
      }

      while (v18 != v15);
    }
  }

  return result;
}

uint64_t sub_2DDB6C()
{
  return 1LL;
}

uint64_t sub_2DDB74(int a1, unsigned int a2)
{
  LODWORD(v4) = sub_7531C();
  if (!(_DWORD)v4)
  {
    uint64_t v6 = 0LL;
    goto LABEL_14;
  }

  if (a1 != 1685287015)
  {
    if (a1 == 1936748595)
    {
      unint64_t v4 = sub_34A20(0x73707033u, a2);
      if (!HIDWORD(v4))
      {
        unint64_t v10 = (os_log_t *)sub_138E8(13);
        unsigned int v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
          __int16 v15 = 1024;
          int v16 = 53;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Postcondition failure.");
      }

      unsigned int v5 = v4 & 0xFFFFFF00;
      uint64_t v6 = 0x100000000LL;
      return v6 | v5 | v4;
    }

    uint64_t v6 = 0LL;
    LOBYTE(v4) = 0;
LABEL_14:
    unsigned int v5 = 0;
    return v6 | v5 | v4;
  }

  int v7 = sub_D1760(a2);
  unsigned int v5 = a2 & 0xFFFFFF00;
  uint64_t v6 = 0x100000000LL;
  BOOL v8 = v7 == 0;
  if (v7)
  {
    LOBYTE(v4) = a2;
  }

  else
  {
    uint64_t v6 = 0LL;
    LOBYTE(v4) = 0;
  }

  if (v8) {
    unsigned int v5 = 0;
  }
  return v6 | v5 | v4;
}

void sub_2DDCF8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2DDD14(int a1, unsigned int a2)
{
  LODWORD(v4) = sub_7531C();
  if (!(_DWORD)v4)
  {
    uint64_t v6 = 0LL;
    goto LABEL_14;
  }

  if (a1 != 1685287015)
  {
    if (a1 == 1936748595)
    {
      unint64_t v4 = sub_D1820(0x73707033u, a2);
      if (!HIDWORD(v4))
      {
        unint64_t v10 = (os_log_t *)sub_138E8(13);
        unsigned int v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
          __int16 v15 = 1024;
          int v16 = 79;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Postcondition failure.");
      }

      unsigned int v5 = v4 & 0xFFFFFF00;
      uint64_t v6 = 0x100000000LL;
      return v6 | v5 | v4;
    }

    uint64_t v6 = 0LL;
    LOBYTE(v4) = 0;
LABEL_14:
    unsigned int v5 = 0;
    return v6 | v5 | v4;
  }

  int v7 = sub_D17C8(a2);
  unsigned int v5 = a2 & 0xFFFFFF00;
  uint64_t v6 = 0x100000000LL;
  BOOL v8 = v7 == 0;
  if (v7)
  {
    LOBYTE(v4) = a2;
  }

  else
  {
    uint64_t v6 = 0LL;
    LOBYTE(v4) = 0;
  }

  if (v8) {
    unsigned int v5 = 0;
  }
  return v6 | v5 | v4;
}

void sub_2DDE98(_Unwind_Exception *exception_object)
{
}

unint64_t sub_2DDEB4(unint64_t a1)
{
  *(void *)a1 = off_47C030;
  uint64_t v2 = (os_log_t *)sub_138E8(24);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_24054(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
      uint64_t v7 = *(void *)(a1 + 728);
    }

    unint64_t v4 = __p;
    if (v7 < 0) {
      unint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    std::string::size_type v9 = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
    __int16 v10 = 1024;
    int v11 = 214;
    __int16 v12 = 2080;
    int v13 = v4;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Deleting DSPChain_HAL_ClosedLoopSpeakerProtection %s",  buf,  0x1Cu);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_7A768(a1 + 1136);
  sub_1958B8(a1);
  return a1;
}

void sub_2DDFF0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_2DE000(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2DE014(a1);
  operator delete(v1);
}

uint64_t sub_2DE014(uint64_t a1)
{
  *(void *)a1 = off_47C140;
  sub_2DE074(*(unsigned int *)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

  sub_8DF20(*(void **)(a1 + 72));
  sub_8DF20(*(void **)(a1 + 40));
  sub_8DF20(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_2DE074(uint64_t result)
{
  if (!(_DWORD)result)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        unsigned int v5 = "SubPortPolicy.cpp";
        __int16 v6 = 1024;
        int v7 = 278;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  return result;
}

void sub_2DE164(_Unwind_Exception *exception_object)
{
}

void sub_2DE180(uint64_t *a1, unsigned int a2, __int32 a3)
{
  __int32 v16 = a3;
  uint64_t v5 = a1[1];
  if (!v5) {
    goto LABEL_12;
  }
  __int16 v6 = a1 + 1;
  do
  {
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      std::string::size_type v9 = (uint64_t *)v5;
    }
    else {
      std::string::size_type v9 = (uint64_t *)(v5 + 8);
    }
    if (v8) {
      __int16 v6 = (uint64_t *)v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 1 && *((_DWORD *)v6 + 8) <= a2)
  {
    sub_8598C((uint64_t)(v6 + 5), &v16);
  }

  else
  {
LABEL_12:
    __int32 v10 = a3;
    sub_852D0(v11, &v10, 1LL);
    unsigned int v13 = a2;
    *(_OWORD *)std::string __p = *(_OWORD *)v11;
    uint64_t v15 = v12;
    v11[0] = 0LL;
    v11[1] = 0LL;
    uint64_t v12 = 0LL;
    sub_2DE280(a1, a2, (uint64_t)&v13);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }

void sub_2DE258( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2DE280(uint64_t *result, unsigned int a2, uint64_t a3)
{
  int v4 = (uint64_t **)result;
  __int16 v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        __int16 v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        __int16 v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    unsigned int v7 = (uint64_t **)(result + 1);
LABEL_9:
    std::string::size_type v9 = (char *)operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v9 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    return sub_32C38(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }

  return result;
}

void sub_2DE334(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 32);
  __int16 v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = a1 + 32;
    uint64_t v8 = *(void *)(a1 + 32);
    do
    {
      unsigned int v9 = *(_DWORD *)(v8 + 32);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        int v11 = (uint64_t *)v8;
      }
      else {
        int v11 = (uint64_t *)(v8 + 8);
      }
      if (v10) {
        uint64_t v7 = v8;
      }
      uint64_t v8 = *v11;
    }

    while (*v11);
    if ((uint64_t **)v7 != v5 && *(_DWORD *)(v7 + 32) <= a2)
    {
      uint64_t v19 = *(char **)(v7 + 48);
      unint64_t v18 = *(void *)(v7 + 56);
      if ((unint64_t)v19 >= v18)
      {
        int v21 = *(char **)(v7 + 40);
        uint64_t v22 = (v19 - v21) >> 2;
        unint64_t v23 = v22 + 1;
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        BOOL v10 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v10) {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          unint64_t v25 = (unint64_t)sub_7A890(v25);
          int v21 = *(char **)(v7 + 40);
          uint64_t v19 = *(char **)(v7 + 48);
        }

        else
        {
          uint64_t v26 = 0LL;
        }

        unsigned int v28 = (_DWORD *)(v25 + 4 * v22);
        unint64_t v29 = v25 + 4 * v26;
        *unsigned int v28 = a3;
        uint64_t v20 = v28 + 1;
        while (v19 != v21)
        {
          int v30 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *--unsigned int v28 = v30;
        }

        *(void *)(v7 + 40) = v28;
        *(void *)(v7 + 48) = v20;
        *(void *)(v7 + 56) = v29;
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v19 = a3;
        uint64_t v20 = v19 + 4;
      }

      *(void *)(v7 + 48) = v20;
      return;
    }

    *(void *)&__int128 v13 = operator new(4uLL);
    *(_DWORD *)__int128 v13 = a3;
    uint64_t v12 = v13 + 4;
    *((void *)&v13 + 1) = v13 + 4;
    __int128 v31 = v13;
    do
    {
      while (1)
      {
        uint64_t v14 = (uint64_t **)v6;
        unsigned int v15 = *((_DWORD *)v6 + 8);
        if (v15 <= a2) {
          break;
        }
        __int16 v6 = (uint64_t *)*v6;
        if (!*v14)
        {
          int v27 = v14;
          goto LABEL_20;
        }
      }

      if (v15 >= a2) {
        goto LABEL_21;
      }
      __int16 v6 = (uint64_t *)v6[1];
    }

    while (v6);
    int v27 = v14 + 1;
  }

  else
  {
    *(void *)&__int128 v16 = operator new(4uLL);
    *(_DWORD *)__int128 v16 = a3;
    uint64_t v12 = v16 + 4;
    *((void *)&v16 + 1) = v16 + 4;
    __int128 v31 = v16;
    int v27 = v5;
    uint64_t v14 = v5;
  }

void sub_2DE534(_Unwind_Exception *a1)
{
}

void sub_2DE548(uint64_t *a1, AudioObjectID inObjectID, uint64_t a3)
{
  AudioObjectID v4 = inObjectID;
  uint64_t v5 = a1;
  a1[1] = 0LL;
  __int16 v6 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473736323LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if (AudioObjectHasProperty(inObjectID, &inAddress))
  {
    UInt32 outDataSize = 0;
    uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v4, &inAddress, 0, 0LL, &outDataSize);
    uint64_t v8 = PropertyDataSize;
    if ((_DWORD)PropertyDataSize)
    {
      unsigned int v9 = (os_log_t *)sub_138E8(17);
      BOOL v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&v80, v8);
        int v11 = v82 >= 0 ? (void **)&v80 : v80;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)CFNumberRef v87 = "SubPortPolicy.cpp";
        *(_WORD *)&v87[8] = 1024;
        *(_DWORD *)&v87[10] = 252;
        *(_WORD *)&v87[14] = 2080;
        *(void *)&v87[16] = v11;
        *(_WORD *)&v87[24] = 1024;
        *(_DWORD *)&v87[26] = v4;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AudioObjectGetPropertyDataSize(kAudioDevicePropertyDataSources) returned error %s for device %u.",  buf,  0x22u);
        if (SHIBYTE(v82) < 0) {
          operator delete(v80);
        }
      }
    }

    else if (outDataSize)
    {
      __chkstk_darwin(PropertyDataSize);
      uint64_t v73 = (char *)v69 - ((v12 + 15) & 0x1FFFFFFF0LL);
      uint64_t PropertyData = AudioObjectGetPropertyData(v4, &inAddress, 0, 0LL, &outDataSize, v73);
      AudioObjectID v71 = v4;
      v69[1] = v69;
      if ((_DWORD)PropertyData)
      {
        unsigned int v15 = (os_log_t *)sub_138E8(17);
        __int128 v16 = *v15;
        if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&v80, PropertyData);
          unint64_t v17 = v82 >= 0 ? (void **)&v80 : v80;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)CFNumberRef v87 = "SubPortPolicy.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 242;
          *(_WORD *)&v87[14] = 2080;
          *(void *)&v87[16] = v17;
          *(_WORD *)&v87[24] = 1024;
          *(_DWORD *)&v87[26] = v71;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectGetPropertyData(kAudioDevicePropertyDataSources) returned error %s for device %u.",  buf,  0x22u);
          if (SHIBYTE(v82) < 0) {
            operator delete(v80);
          }
        }
      }

      else
      {
        uint64_t v20 = v73;
        if (outDataSize >= 4)
        {
          uint64_t v37 = 0LL;
          unint64_t v75 = (unint64_t)outDataSize >> 2;
          std::string v74 = (void *)(a3 + 32);
          *(void *)&__int128 v14 = 136315906LL;
          __int128 v72 = v14;
          CFDictionaryRef v70 = v6;
          do
          {
            uint64_t v38 = *(unsigned int *)&v20[4 * v37];
            if ((_DWORD)v38)
            {
              uint64_t v39 = sub_138E8(17);
              std::string v40 = v74;
              if ((*(_BYTE *)(v39 + 8) & 1) != 0)
              {
                std::string::size_type v41 = *(os_log_s **)v39;
                if (*(void *)v39)
                {
                  if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
                  {
                    sub_2CA1C(&v80, v38);
                    char v42 = &v80;
                    if (v82 < 0) {
                      char v42 = (void ***)v80;
                    }
                    *(_DWORD *)AudioObjectPropertyAddress buf = v72;
                    *(void *)CFNumberRef v87 = "SubPortPolicy.cpp";
                    *(_WORD *)&v87[8] = 1024;
                    *(_DWORD *)&v87[10] = 222;
                    *(_WORD *)&v87[14] = 2080;
                    *(void *)&v87[16] = v42;
                    *(_WORD *)&v87[24] = 1024;
                    *(_DWORD *)&v87[26] = v71;
                    _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found input data source %s on device with ID %u.",  buf,  0x22u);
                    if (SHIBYTE(v82) < 0) {
                      operator delete(v80);
                    }
                  }
                }
              }

              uint64_t v43 = *v40;
              if (!*v40) {
                goto LABEL_73;
              }
              int v44 = v40;
              do
              {
                unsigned int v45 = *(_DWORD *)(v43 + 32);
                BOOL v46 = v45 >= v38;
                else {
                  __int16 v47 = (uint64_t *)(v43 + 8);
                }
                if (v46) {
                  int v44 = (void *)v43;
                }
                uint64_t v43 = *v47;
              }

              while (*v47);
              if (v44 != v40 && v38 >= *((_DWORD *)v44 + 8))
              {
                for (uint64_t i = (unsigned int *)v44[5]; i != (unsigned int *)v44[6]; ++i)
                {
                  uint64_t v52 = *i;
                  __int32 v83 = v38;
                  if (!(_DWORD)v52)
                  {
                    CFDictionaryRef v66 = (os_log_t *)sub_138E8(13);
                    CFArrayRef v67 = *v66;
                    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                      *(void *)CFNumberRef v87 = "SubPortPolicy.cpp";
                      *(_WORD *)&v87[8] = 1024;
                      *(_DWORD *)&v87[10] = 73;
                      _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
                    }

                    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(exception, "Precondition failure.");
                  }

                  uint64_t v53 = sub_138E8(17);
                  if ((*(_BYTE *)(v53 + 8) & 1) != 0)
                  {
                    uint64_t v54 = *(os_log_s **)v53;
                    if (*(void *)v53)
                    {
                      if (os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG))
                      {
                        sub_2CA1C(&v80, v38);
                        int v55 = v5;
                        int v56 = SHIBYTE(v82);
                        int v57 = v80;
                        sub_2CA1C(v78, v52);
                        uint64_t v58 = &v80;
                        if (v56 < 0) {
                          uint64_t v58 = (void ***)v57;
                        }
                        unint64_t v59 = v78;
                        if (v79 < 0) {
                          unint64_t v59 = (void **)v78[0];
                        }
                        *(_DWORD *)AudioObjectPropertyAddress buf = v72;
                        *(void *)CFNumberRef v87 = "SubPortPolicy.cpp";
                        *(_WORD *)&v87[8] = 1024;
                        *(_DWORD *)&v87[10] = 76;
                        *(_WORD *)&v87[14] = 2080;
                        *(void *)&v87[16] = v58;
                        *(_WORD *)&v87[24] = 2080;
                        *(void *)&v87[26] = v59;
                        _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Adding sub-port ID for data source %s for port type %s",  buf,  0x26u);
                        if (v79 < 0) {
                          operator delete(v78[0]);
                        }
                        uint64_t v5 = v55;
                        uint64_t v20 = v73;
                        if (SHIBYTE(v82) < 0) {
                          operator delete(v80);
                        }
                        __int16 v6 = v70;
                      }
                    }
                  }

                  uint64_t v60 = *v6;
                  if (!*v6) {
                    goto LABEL_108;
                  }
                  std::string::size_type v61 = v6;
                  do
                  {
                    unsigned int v62 = *(_DWORD *)(v60 + 32);
                    BOOL v63 = v62 >= v52;
                    else {
                      CFDictionaryRef v64 = (uint64_t *)(v60 + 8);
                    }
                    if (v63) {
                      std::string::size_type v61 = (void *)v60;
                    }
                    uint64_t v60 = *v64;
                  }

                  while (*v64);
                  if (v61 != v6 && *((_DWORD *)v61 + 8) <= v52)
                  {
                    sub_8598C((uint64_t)(v61 + 5), &v83);
                  }

                  else
                  {
LABEL_108:
                    __int128 v80 = 0LL;
                    uint64_t v81 = 0LL;
                    uint64_t v82 = 0LL;
                    sub_8598C((uint64_t)&v80, &v83);
                    *(_DWORD *)AudioObjectPropertyAddress buf = v52;
                    memset(&v87[4], 0, 24);
                    __int128 v65 = v80;
                    sub_7A5B8(&v87[4], v80, v81, (v81 - (uint64_t)v80) >> 2);
                    sub_2DE280(v5, *(unsigned int *)buf, (uint64_t)buf);
                    if (*(void *)&v87[4]) {
                      operator delete(*(void **)&v87[4]);
                    }
                    if (v65) {
                      operator delete(v65);
                    }
                  }
                }
              }

              else
              {
LABEL_73:
                uint64_t v48 = sub_138E8(17);
                if ((*(_BYTE *)(v48 + 8) & 1) != 0)
                {
                  __int16 v49 = *(os_log_s **)v48;
                  if (*(void *)v48)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
                    {
                      sub_2CA1C(&v80, v38);
                      __int16 v50 = &v80;
                      if (v82 < 0) {
                        __int16 v50 = (void ***)v80;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = v72;
                      *(void *)CFNumberRef v87 = "SubPortPolicy.cpp";
                      *(_WORD *)&v87[8] = 1024;
                      *(_DWORD *)&v87[10] = 235;
                      *(_WORD *)&v87[14] = 2080;
                      *(void *)&v87[16] = v50;
                      *(_WORD *)&v87[24] = 1024;
                      *(_DWORD *)&v87[26] = v71;
                      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Unknown input data source %s on device with ID %u.",  buf,  0x22u);
                      if (SHIBYTE(v82) < 0) {
                        operator delete(v80);
                      }
                    }
                  }
                }
              }
            }

            ++v37;
          }

          while (v37 != v75);
        }
      }

      AudioObjectID v4 = v71;
    }

    else
    {
      unint64_t v18 = (os_log_t *)sub_138E8(17);
      uint64_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)CFNumberRef v87 = "SubPortPolicy.cpp";
        *(_WORD *)&v87[8] = 1024;
        *(_DWORD *)&v87[10] = 247;
        *(_WORD *)&v87[14] = 1024;
        *(_DWORD *)&v87[16] = v4;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "%25s:%-5d AudioObjectGetPropertyData(kAudioDevicePropertyDataSources) return no input data sources for device %u.",  buf,  0x18u);
      }
    }
  }

  uint64_t v21 = *v6;
  if (!*v6) {
    goto LABEL_48;
  }
  uint64_t v22 = v6;
  do
  {
    unsigned int v23 = *(_DWORD *)(v21 + 32);
    BOOL v24 = v23 >= 0x706D6269;
    if (v23 >= 0x706D6269) {
      unint64_t v25 = (uint64_t *)v21;
    }
    else {
      unint64_t v25 = (uint64_t *)(v21 + 8);
    }
    if (v24) {
      uint64_t v22 = (void *)v21;
    }
    uint64_t v21 = *v25;
  }

  while (*v25);
  if (v22 == v6 || *((_DWORD *)v22 + 8) >= 0x706D626Au) {
    goto LABEL_48;
  }
  uint64_t v26 = v22[5];
  int v27 = (int *)v22[6];
  uint64_t v28 = sub_33341C();
  unint64_t v29 = 126 - 2 * __clz(((uint64_t)v27 - v26) >> 2);
  v84[0] = &off_46DC40;
  v84[1] = v28;
  __int128 v85 = v84;
  *(void *)&v87[20] = buf;
  else {
    uint64_t v30 = v29;
  }
  sub_8FFD4((uint64_t)v84, buf);
  sub_2DEFE0(v26, v27, (uint64_t)buf, v30, 1);
  __int128 v31 = *(uint8_t **)&v87[20];
  if (*(uint8_t **)&v87[20] == buf)
  {
    uint64_t v32 = 4LL;
    __int128 v31 = buf;
    goto LABEL_42;
  }

  if (*(void *)&v87[20])
  {
    uint64_t v32 = 5LL;
LABEL_42:
    (*(void (**)(void))(*(void *)v31 + 8 * v32))();
  }

  uint64_t v33 = v85;
  if (v85 == v84)
  {
    uint64_t v34 = 4LL;
    uint64_t v33 = v84;
    goto LABEL_47;
  }

  if (v85)
  {
    uint64_t v34 = 5LL;
LABEL_47:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }

void sub_2DEEC0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 320) = v1;
  sub_8DF20(**(void ***)(v2 - 320));
  _Unwind_Resume(a1);
}

uint64_t sub_2DEFE0(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v9 = (int *)result;
LABEL_2:
  __int128 v85 = a2 - 2;
  unint64_t v86 = a2 - 1;
  unsigned int v84 = a2 - 3;
  BOOL v10 = v9;
  while (2)
  {
    unsigned int v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = v11 >> 2;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v39 = *(void *)(a3 + 24);
        if (!v39) {
          goto LABEL_142;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v39 + 48LL))(v39, v86, v9);
        if ((_DWORD)result)
        {
          int v40 = *v9;
          int *v9 = *v86;
          *unint64_t v86 = v40;
        }

        return result;
      case 3uLL:
        return sub_2DF8C0(v9, v9 + 1, v86, a3);
      case 4uLL:
        return sub_2DF9E0(v9, v9 + 1, v9 + 2, v86, a3);
      case 5uLL:
        return sub_2DFAB8(v9, v9 + 1, v9 + 2, v9 + 3, v86, a3);
      default:
        if (v11 <= 95)
        {
          std::string::size_type v41 = v9 + 1;
          BOOL v43 = v9 == a2 || v41 == a2;
          if ((a5 & 1) != 0)
          {
            if (v43) {
              return result;
            }
            uint64_t v44 = 0LL;
            unsigned int v45 = v9;
            while (1)
            {
              uint64_t v46 = *(void *)(a3 + 24);
              if (!v46) {
                break;
              }
              __int16 v47 = v41;
              uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v46 + 48LL))(v46, v41, v45);
              if ((_DWORD)result)
              {
                int v89 = *v47;
                uint64_t v48 = v44;
                while (1)
                {
                  *(int *)((char *)v9 + v48 + 4) = *(int *)((char *)v9 + v48);
                  if (!v48) {
                    break;
                  }
                  uint64_t v49 = *(void *)(a3 + 24);
                  if (!v49) {
                    goto LABEL_142;
                  }
                  v48 -= 4LL;
                  uint64_t result = (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v49 + 48LL))( v49,  &v89,  (char *)v9 + v48);
                  if ((result & 1) == 0)
                  {
                    __int16 v50 = (int *)((char *)v9 + v48 + 4);
                    goto LABEL_87;
                  }
                }

                __int16 v50 = v9;
LABEL_87:
                *__int16 v50 = v89;
              }

              std::string::size_type v41 = v47 + 1;
              v44 += 4LL;
              unsigned int v45 = v47;
              if (v47 + 1 == a2) {
                return result;
              }
            }
          }

          else
          {
            if (v43) {
              return result;
            }
            while (1)
            {
              uint64_t v79 = *(void *)(a3 + 24);
              if (!v79) {
                break;
              }
              __int128 v80 = v41;
              uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v79 + 48LL))(v79, v41, v9);
              if ((_DWORD)result)
              {
                int v89 = *v80;
                uint64_t v81 = v80;
                do
                {
                  *uint64_t v81 = *(v81 - 1);
                  uint64_t v82 = *(void *)(a3 + 24);
                  if (!v82) {
                    goto LABEL_142;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v82 + 48LL))( v82,  &v89,  v81 - 2);
                  --v81;
                }

                while ((result & 1) != 0);
                *uint64_t v81 = v89;
              }

              std::string::size_type v41 = v80 + 1;
              unsigned int v9 = v80;
              if (v80 + 1 == a2) {
                return result;
              }
            }
          }

LABEL_142:
          sub_82CEC();
        }

        if (a4)
        {
          __int128 v13 = &v9[v12 >> 1];
          if ((unint64_t)v11 < 0x201)
          {
            sub_2DF8C0(&v9[v12 >> 1], v9, v86, a3);
          }

          else
          {
            sub_2DF8C0(v9, &v9[v12 >> 1], v86, a3);
            sub_2DF8C0(v9 + 1, v13 - 1, v85, a3);
            sub_2DF8C0(v9 + 2, &v9[(v12 >> 1) + 1], v84, a3);
            sub_2DF8C0(v13 - 1, &v9[v12 >> 1], &v9[(v12 >> 1) + 1], a3);
            int v14 = *v9;
            int *v9 = *v13;
            *__int128 v13 = v14;
          }

          --a4;
          if ((a5 & 1) == 0)
          {
            uint64_t v15 = *(void *)(a3 + 24);
            if (!v15) {
              goto LABEL_142;
            }
            if (((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v15 + 48LL))(v15, v9 - 1, v9) & 1) == 0)
            {
              int v89 = *v9;
              uint64_t v29 = *(void *)(a3 + 24);
              if (!v29) {
                goto LABEL_142;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v29 + 48LL))(v29, &v89, v86);
              if ((result & 1) != 0)
              {
                BOOL v10 = v9;
                while (1)
                {
                  uint64_t v30 = *(void *)(a3 + 24);
                  if (!v30) {
                    goto LABEL_142;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v30 + 48LL))(v30, &v89, ++v10);
                  if ((result & 1) != 0) {
                    goto LABEL_47;
                  }
                }
              }

              __int128 v31 = v9 + 1;
              do
              {
                BOOL v10 = v31;
                if (v31 >= a2) {
                  break;
                }
                uint64_t v32 = *(void *)(a3 + 24);
                if (!v32) {
                  goto LABEL_142;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v32 + 48LL))(v32, &v89, v31);
                __int128 v31 = v10 + 1;
              }

              while (!(_DWORD)result);
LABEL_47:
              uint64_t v33 = a2;
              if (v10 < a2)
              {
                uint64_t v33 = a2;
                do
                {
                  uint64_t v34 = *(void *)(a3 + 24);
                  if (!v34) {
                    goto LABEL_142;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v34 + 48LL))(v34, &v89, --v33);
                }

                while ((result & 1) != 0);
              }

uint64_t sub_2DF8C0(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 24);
  if (!v5) {
    goto LABEL_16;
  }
  char v9 = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v5 + 48LL))(v5, a2, a1);
  uint64_t v10 = *(void *)(a4 + 24);
  if ((v9 & 1) != 0)
  {
    if (v10)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48LL))(v10, a3, a2);
      int v12 = *a1;
      if ((_DWORD)result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v12;
        return result;
      }

      *a1 = *a2;
      *a2 = v12;
      uint64_t v16 = *(void *)(a4 + 24);
      if (v16)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v16 + 48LL))(v16, a3, a2);
        if (!(_DWORD)result) {
          return result;
        }
        int v12 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }

uint64_t sub_2DF9E0(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 24);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48LL))(v10, a4, a3);
  if (!(_DWORD)result) {
    return result;
  }
  int v12 = *a3;
  *a3 = *a4;
  *a4 = v12;
  uint64_t v13 = *(void *)(a5 + 24);
  if (!v13) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v13 + 48LL))(v13, a3, a2);
  if (!(_DWORD)result) {
    return result;
  }
  int v14 = *a2;
  *a2 = *a3;
  *a3 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
LABEL_9:
  }
    sub_82CEC();
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v15 + 48LL))(v15, a2, a1);
  if ((_DWORD)result)
  {
    int v16 = *a1;
    *a1 = *a2;
    *a2 = v16;
  }

  return result;
}

uint64_t sub_2DFAB8(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 + 24);
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v12 + 48LL))(v12, a5, a4);
  if (!(_DWORD)result) {
    return result;
  }
  int v14 = *a4;
  *a4 = *a5;
  *a5 = v14;
  uint64_t v15 = *(void *)(a6 + 24);
  if (!v15) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v15 + 48LL))(v15, a4, a3);
  if (!(_DWORD)result) {
    return result;
  }
  int v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v17 + 48LL))(v17, a3, a2);
  if (!(_DWORD)result) {
    return result;
  }
  int v18 = *a2;
  *a2 = *a3;
  *a3 = v18;
  uint64_t v19 = *(void *)(a6 + 24);
  if (!v19) {
LABEL_11:
  }
    sub_82CEC();
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v19 + 48LL))(v19, a2, a1);
  if ((_DWORD)result)
  {
    int v20 = *a1;
    *a1 = *a2;
    *a2 = v20;
  }

  return result;
}

BOOL sub_2DFBC4(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        goto LABEL_24;
      }
      char v9 = a2 - 1;
      if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v8 + 48LL))(v8, a2 - 1, a1))
      {
        int v10 = *a1;
        *a1 = *v9;
        int *v9 = v10;
      }

      return 1LL;
    case 3LL:
      sub_2DF8C0(a1, a1 + 1, a2 - 1, a3);
      return 1LL;
    case 4LL:
      sub_2DF9E0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1LL;
    case 5LL:
      sub_2DFAB8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1LL;
    default:
      uint64_t v11 = a1 + 2;
      sub_2DF8C0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      uint64_t v13 = 0LL;
      int v14 = 0;
      break;
  }

  while (1)
  {
    uint64_t v15 = *(void *)(a3 + 24);
    if (!v15) {
LABEL_24:
    }
      sub_82CEC();
    if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v15 + 48LL))(v15, v12, v11))
    {
      int v20 = *v12;
      uint64_t v16 = v13;
      while (1)
      {
        *(int *)((char *)a1 + v16 + 12) = *(int *)((char *)a1 + v16 + 8);
        if (v16 == -8) {
          break;
        }
        uint64_t v17 = *(void *)(a3 + 24);
        if (!v17) {
          goto LABEL_24;
        }
        char v18 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v17 + 48LL))( v17,  &v20,  (uint64_t)a1 + v16 + 4);
        v16 -= 4LL;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (int *)((char *)a1 + v16 + 12);
          goto LABEL_15;
        }
      }

      uint64_t v19 = a1;
LABEL_15:
      *uint64_t v19 = v20;
      if (++v14 == 8) {
        return v12 + 1 == a2;
      }
    }

    uint64_t v11 = v12;
    v13 += 4LL;
    if (++v12 == a2) {
      return 1LL;
    }
  }

uint64_t sub_2DFDA8(uint64_t a1, AudioObjectID a2, void *a3)
{
  *(void *)(a1 + 16) = 0LL;
  uint64_t v6 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 8) = a1 + 16;
  uint64_t v7 = (uint64_t **)(a1 + 8);
  *(void *)a1 = off_47C140;
  *(void *)(a1 + 24) = 0LL;
  char v9 = a3 + 1;
  uint64_t v8 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      int v10 = (uint64_t *)*v6;
      uint64_t v11 = v6;
      if (*v7 == v6) {
        goto LABEL_8;
      }
      uint64_t v12 = (uint64_t *)*v6;
      uint64_t v13 = v6;
      if (v10)
      {
        do
        {
          uint64_t v11 = v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v11 = (uint64_t *)v13[2];
          BOOL v14 = *v11 == (void)v13;
          uint64_t v13 = v11;
        }

        while (v14);
      }

      unsigned int v15 = *((_DWORD *)v8 + 8);
      if (*((_DWORD *)v11 + 8) < v15)
      {
LABEL_8:
        if (v10) {
          uint64_t v16 = (uint64_t **)v11;
        }
        else {
          uint64_t v16 = (uint64_t **)v6;
        }
        if (v10) {
          uint64_t v17 = (uint64_t **)(v11 + 1);
        }
        else {
          uint64_t v17 = (uint64_t **)v6;
        }
      }

      else
      {
        uint64_t v16 = (uint64_t **)v6;
        uint64_t v17 = (uint64_t **)v6;
        if (v10)
        {
          uint64_t v17 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v10;
              unsigned int v22 = *((_DWORD *)v10 + 8);
              if (v15 >= v22) {
                break;
              }
              int v10 = *v16;
              uint64_t v17 = v16;
              if (!*v16) {
                goto LABEL_15;
              }
            }

            if (v22 >= v15) {
              break;
            }
            uint64_t v17 = v16 + 1;
            int v10 = v16[1];
            if (!v10) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v17)
      {
LABEL_15:
        char v18 = operator new(0x40uLL);
        int v19 = *((_DWORD *)v8 + 8);
        v18[5] = 0LL;
        *((_DWORD *)v18 + 8) = v19;
        _DWORD v18[6] = 0LL;
        v18[7] = 0LL;
        sub_7A5B8(v18 + 5, (const void *)v8[5], v8[6], (uint64_t)(v8[6] - v8[5]) >> 2);
        sub_32C38(v7, (uint64_t)v16, v17, v18);
      }

      int v20 = (void *)v8[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          int v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          uint64_t v21 = (void *)v8[2];
          BOOL v14 = *v21 == (void)v8;
          uint64_t v8 = v21;
        }

        while (!v14);
      }

      uint64_t v8 = v21;
    }

    while (v21 != v9);
  }

  *(void *)(a1 + 40) = 0LL;
  unsigned int v23 = (uint64_t **)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0LL;
  BOOL v24 = (void *)a3[3];
  if (v24 != a3 + 4)
  {
    do
    {
      int v25 = *v23;
      uint64_t v26 = (uint64_t *)(a1 + 40);
      uint64_t v27 = *v23;
      BOOL v28 = (uint64_t *)(a1 + 40);
      if (v25)
      {
        do
        {
          uint64_t v26 = v27;
          uint64_t v27 = (uint64_t *)v27[1];
        }

        while (v27);
      }

      else
      {
        do
        {
          uint64_t v26 = (uint64_t *)v28[2];
          BOOL v14 = *v26 == (void)v28;
          BOOL v28 = v26;
        }

        while (v14);
      }

      unsigned int v29 = *((_DWORD *)v24 + 8);
      if (*((_DWORD *)v26 + 8) < v29)
      {
LABEL_38:
        if (v25) {
          uint64_t v30 = (uint64_t **)v26;
        }
        else {
          uint64_t v30 = (uint64_t **)(a1 + 40);
        }
        if (v25) {
          __int128 v31 = (uint64_t **)(v26 + 1);
        }
        else {
          __int128 v31 = (uint64_t **)(a1 + 40);
        }
      }

      else
      {
        uint64_t v30 = (uint64_t **)(a1 + 40);
        __int128 v31 = (uint64_t **)(a1 + 40);
        if (v25)
        {
          __int128 v31 = (uint64_t **)(a1 + 40);
          while (1)
          {
            while (1)
            {
              uint64_t v30 = (uint64_t **)v25;
              unsigned int v36 = *((_DWORD *)v25 + 8);
              if (v29 >= v36) {
                break;
              }
              int v25 = *v30;
              __int128 v31 = v30;
              if (!*v30) {
                goto LABEL_45;
              }
            }

            if (v36 >= v29) {
              break;
            }
            __int128 v31 = v30 + 1;
            int v25 = v30[1];
            if (!v25) {
              goto LABEL_45;
            }
          }
        }
      }

      if (!*v31)
      {
LABEL_45:
        uint64_t v32 = operator new(0x40uLL);
        int v33 = *((_DWORD *)v24 + 8);
        v32[5] = 0LL;
        *((_DWORD *)v32 + 8) = v33;
        v32[6] = 0LL;
        v32[7] = 0LL;
        sub_7A5B8(v32 + 5, (const void *)v24[5], v24[6], (uint64_t)(v24[6] - v24[5]) >> 2);
        sub_32C38((uint64_t **)(a1 + 32), (uint64_t)v30, v31, v32);
      }

      uint64_t v34 = (void *)v24[1];
      if (v34)
      {
        do
        {
          int v35 = v34;
          uint64_t v34 = (void *)*v34;
        }

        while (v34);
      }

      else
      {
        do
        {
          int v35 = (void *)v24[2];
          BOOL v14 = *v35 == (void)v24;
          BOOL v24 = v35;
        }

        while (!v14);
      }

      BOOL v24 = v35;
    }

    while (v35 != a3 + 4);
  }

  *(_DWORD *)(a1 + 56) = a2;
  sub_2DE548((uint64_t *)(a1 + 64), a2, (uint64_t)a3);
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = sub_33341C();
  if (!a2)
  {
    uint64_t v38 = (os_log_t *)sub_138E8(13);
    uint64_t v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v46 = "SubPortPolicy.cpp";
      __int16 v47 = 1024;
      int v48 = 118;
      _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_2E02D4(_Unwind_Exception *a1)
{
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v7;
    operator delete(v7);
  }

  sub_8DF20(*(void **)(v1 + 72));
  sub_8DF20(*v5);
  sub_8DF20(*v4);
  _Unwind_Resume(a1);
}

void sub_2E0360(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v6 = (os_log_t *)sub_138E8(17);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 56);
    sub_8F640((std::string *)&v162, *a2, a2[1]);
    char v9 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
    buf.AudioObjectPropertySelector mSelector = 136315906;
    *(void *)&buf.AudioObjectPropertyScope mScope = "SubPortPolicy.cpp";
    __int16 v152 = 1024;
    int v153 = 133;
    __int16 v154 = 1024;
    *(_DWORD *)CFStringRef v155 = v8;
    *(_WORD *)&v155[4] = 2080;
    *(void *)&v155[6] = v9;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting sub-ports active on device %u: %s",  (uint8_t *)&buf,  0x22u);
    if (v162.__m_.__opaque[15] < 0) {
      operator delete((void *)v162.__m_.__sig);
    }
  }

  if (a3) {
    AudioObjectPropertyScope v10 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v10 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1936945763;
  inAddress.AudioObjectPropertyScope mScope = v10;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 outDataSize = 0;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(*(_DWORD *)(a1 + 56), &inAddress, 0, 0LL, &outDataSize);
  uint64_t v105 = a1;
  if (PropertyDataSize)
  {
    CFNumberRef v94 = (os_log_t *)sub_138E8(13);
    CFNumberRef v95 = *v94;
    if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
    {
      sub_613AC((uint64_t)&v162, &inAddress.mSelector);
      CFNumberRef v96 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
      int v97 = *(_DWORD *)(a1 + 56);
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SubPortPolicy.cpp";
      __int16 v152 = 1024;
      int v153 = 139;
      __int16 v154 = 2080;
      *(void *)CFStringRef v155 = v96;
      *(_WORD *)&v155[8] = 1024;
      *(_DWORD *)&v155[10] = v97;
      _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error getting data size of property %s on device %u.",  (uint8_t *)&buf,  0x22u);
      if (v162.__m_.__opaque[15] < 0) {
        operator delete((void *)v162.__m_.__sig);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = PropertyDataSize;
  }

  sub_8683C(&outData, (unint64_t)outDataSize >> 2);
  if (outDataSize)
  {
    OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 56), &inAddress, 0, 0LL, &outDataSize, outData);
    if (PropertyData)
    {
      unint64_t v99 = (os_log_t *)sub_138E8(13);
      uint64_t v100 = *v99;
      if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)&v162, &inAddress.mSelector);
        uint64_t v101 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
        int v102 = *(_DWORD *)(a1 + 56);
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "SubPortPolicy.cpp";
        __int16 v152 = 1024;
        int v153 = 144;
        __int16 v154 = 2080;
        *(void *)CFStringRef v155 = v101;
        *(_WORD *)&v155[8] = 1024;
        *(_DWORD *)&v155[10] = v102;
        _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error getting property %s on device %u.",  (uint8_t *)&buf,  0x22u);
        if (v162.__m_.__opaque[15] < 0) {
          operator delete((void *)v162.__m_.__sig);
        }
      }

      uint64_t v103 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v103 = &off_4865A0;
      v103[2] = PropertyData;
    }
  }

  uint64_t v13 = outData;
  if (v108 - (_BYTE *)outData != (char *)a2[1] - (char *)*a2 || memcmp(outData, *a2, v108 - (_BYTE *)outData))
  {
    uint64_t v14 = sub_138E8(17);
    if ((*(_BYTE *)(v14 + 8) & 1) != 0)
    {
      unsigned int v15 = *(os_log_s **)v14;
      if (*(void *)v14)
      {
        if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
        {
          int v16 = *(_DWORD *)(a1 + 56);
          sub_8F640((std::string *)&v162, *a2, a2[1]);
          uint64_t v17 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "SubPortPolicy.cpp";
          __int16 v152 = 1024;
          int v153 = 150;
          __int16 v154 = 1024;
          *(_DWORD *)CFStringRef v155 = v16;
          *(_WORD *)&v155[4] = 2080;
          *(void *)&v155[6] = v17;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting input data sources on device %u to %s.",  (uint8_t *)&buf,  0x22u);
          if (v162.__m_.__opaque[15] < 0) {
            operator delete((void *)v162.__m_.__sig);
          }
        }
      }
    }

    AudioObjectID v18 = *(_DWORD *)(a1 + 56);
    uint64_t v19 = sub_138E8(13);
    if ((*(_BYTE *)(v19 + 8) & 1) != 0)
    {
      int v20 = *(os_log_s **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          v163.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v163.__cv_.__opaque = inAddress.mElement;
          sub_613AC((uint64_t)&v162, (unsigned int *)&v163);
          uint64_t v21 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v152 = 1024;
          int v153 = 166;
          __int16 v154 = 2080;
          *(void *)CFStringRef v155 = v21;
          *(_WORD *)&v155[8] = 1024;
          *(_DWORD *)&v155[10] = v18;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v162.__m_.__opaque[15] < 0) {
            operator delete((void *)v162.__m_.__sig);
          }
        }
      }
    }

    *(AudioObjectPropertyAddress *)((char *)&v130.__m_ + 4) = inAddress;
    LODWORD(v130.__m_) = v18;
    LODWORD(v131) = 0;
    *((void *)&v131 + 1) = 0LL;
    sub_2E1C14((uint64_t)&v162, (uint64_t)&v130);
    if (*(_DWORD *)&v162.__m_.__opaque[16]) {
      goto LABEL_33;
    }
    inClientData = 0LL;
    uint64_t v135 = 0LL;
    uint64_t v136 = 0LL;
    sub_7A5B8( &inClientData,  (const void *)v162.__m_.__sig,  *(uint64_t *)v162.__m_.__opaque,  (*(void *)v162.__m_.__opaque - v162.__m_.__sig) >> 2);
    std::unique_lock<std::mutex> v127 = (std::unique_lock<std::mutex>)0LL;
    *(void *)&__int128 v128 = 0LL;
    sub_7A5B8(&v127, *a2, (uint64_t)a2[1], a2[1] - *a2);
    uint64_t v32 = inClientData;
    unint64_t m = v127.__m_;
    if (v135 - inClientData == *(void *)&v127.__owns_ - (unint64_t)v127.__m_)
    {
      BOOL v34 = memcmp(inClientData, v127.__m_, v135 - inClientData) == 0;
      if (!m)
      {
LABEL_59:
        if (v32)
        {
          uint64_t v135 = v32;
          operator delete(v32);
          if (v34)
          {
LABEL_63:
            uint64_t v36 = sub_138E8(13);
            if ((*(_BYTE *)(v36 + 8) & 1) != 0)
            {
              int v25 = *(os_log_s **)v36;
              if (!*(void *)v36)
              {
LABEL_68:
                char v35 = 0;
LABEL_69:
                if (v162.__m_.__sig) {
                  operator delete((void *)v162.__m_.__sig);
                }
                if ((v35 & 1) == 0)
                {
LABEL_147:
                  if (!(_DWORD)v25)
                  {
                    unint64_t v63 = (char *)a2[1] - (char *)*a2;
                    if (v108 - (_BYTE *)outData != v63)
                    {
                      memset(__lk, 0, 28);
                      uint64_t v106 = 0LL;
                      AudioObjectID v64 = sub_2E1E44(*(_DWORD *)(a1 + 56));
                      *(void *)&v114.AudioObjectPropertySelector mSelector = 0x676C6F6273666D74LL;
                      v114.AudioObjectPropertyElement mElement = 0;
                      uint64_t v65 = sub_138E8(13);
                      if ((*(_BYTE *)(v65 + 8) & 1) != 0)
                      {
                        uint64_t v66 = *(os_log_s **)v65;
                        if (*(void *)v65)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v65, OS_LOG_TYPE_DEBUG))
                          {
                            v163.__cv_.__uint64_t sig = *(void *)&v114.mSelector;
                            *(_DWORD *)v163.__cv_.__opaque = v114.mElement;
                            sub_613AC((uint64_t)&v162, (unsigned int *)&v163);
                            CFArrayRef v67 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
                            buf.AudioObjectPropertySelector mSelector = 136315906;
                            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 166;
                            __int16 v154 = 2080;
                            *(void *)CFStringRef v155 = v67;
                            *(_WORD *)&v155[8] = 1024;
                            *(_DWORD *)&v155[10] = v64;
                            _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                            if (v162.__m_.__opaque[15] < 0) {
                              operator delete((void *)v162.__m_.__sig);
                            }
                          }
                        }
                      }

                      *(AudioObjectPropertyAddress *)((char *)&__s2 + 4) = v114;
                      LODWORD(__s2) = v64;
                      LODWORD(v148) = 0;
                      uint64_t v149 = 0LL;
                      sub_2E20CC((uint64_t)&v163, (uint64_t)&__s2);
                      unint64_t v68 = v63 >> 2;
                      if (!*(_DWORD *)&v163.__cv_.__opaque[32])
                      {
                        __int128 v144 = *(_OWORD *)&v163.__cv_.__sig;
                        __int128 v145 = *(_OWORD *)&v163.__cv_.__opaque[8];
                        uint64_t v146 = *(void *)&v163.__cv_.__opaque[24];
                        uint64_t v139 = 0LL;
                        uint64_t v140 = 0LL;
                        unsigned int v138 = 0LL;
                        int v141 = 0;
                        int v142 = v63 >> 2;
                        uint64_t v143 = 0LL;
                        if (sub_177744((uint64_t)&v144, (uint64_t)&v138))
                        {
                          uint64_t v69 = sub_138E8(13);
                          if ((*(_BYTE *)(v69 + 8) & 1) != 0)
                          {
                            uint64_t v70 = *(os_log_s **)v69;
                            if (*(void *)v69)
                            {
                              if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
                              {
                                buf.AudioObjectPropertySelector mSelector = 136315650;
                                *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                                __int16 v152 = 1024;
                                int v153 = 219;
                                __int16 v154 = 1024;
                                *(_DWORD *)CFStringRef v155 = v64;
                                _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
                              }
                            }
                          }

                          goto LABEL_223;
                        }
                      }

                      memset(v162.__m_.__opaque, 0, sizeof(v162.__m_.__opaque));
                      v162.__m_.__uint64_t sig = 850045863LL;
                      memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
                      __p.__cv_.__uint64_t sig = 1018212795LL;
                      char v137 = 0;
                      AudioObjectID v104 = v64;
                      sub_7D684(&inClientData, v64, &v114, (uint64_t)&__p, (uint64_t)&v162, (uint64_t)&v137);
                      uint64_t v74 = v106;
                      uint64_t v75 = 2000LL;
                      while (1)
                      {
                        sub_2E20CC((uint64_t)&v130, (uint64_t)&__s2);
                        if (v133) {
                          goto LABEL_222;
                        }
                        std::unique_lock<std::mutex> v127 = v130;
                        __int128 v128 = v131;
                        uint64_t v129 = v132;
                        *(std::unique_lock<std::mutex> *)unsigned int v124 = __lk[0];
                        *(std::unique_lock<std::mutex> *)&v124[12] = *(std::unique_lock<std::mutex> *)(&__lk[0].__owns_ + 4);
                        int v125 = v63 >> 2;
                        uint64_t v126 = v74;
                        if (v75 <= 0)
                        {
                          CFNumberRef v90 = (os_log_t *)sub_138E8(13);
                          CFNumberRef v91 = *v90;
                          if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
                          {
                            int v111 = *(_BYTE **)&v114.mSelector;
                            LODWORD(v112) = v114.mElement;
                            CFNumberRef v92 = &v121;
                            sub_613AC((uint64_t)&v121, (unsigned int *)&v111);
                            if (v123 < 0) {
                              CFNumberRef v92 = v121;
                            }
                            std::unique_lock<std::mutex> v118 = v130;
                            __int128 v119 = v131;
                            uint64_t v120 = v132;
                            *(std::unique_lock<std::mutex> *)std::mutex v115 = __lk[0];
                            *(std::unique_lock<std::mutex> *)&v115[12] = *(std::unique_lock<std::mutex> *)(&__lk[0].__owns_ + 4);
                            int v116 = v68;
                            uint64_t v117 = v106;
                            int v93 = sub_177744((uint64_t)&v118, (uint64_t)v115);
                            buf.AudioObjectPropertySelector mSelector = 136316930;
                            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 248;
                            __int16 v154 = 2080;
                            *(void *)CFStringRef v155 = "updated";
                            *(_WORD *)&v155[8] = 2080;
                            *(void *)&v155[10] = v92;
                            *(_WORD *)&v155[18] = 2080;
                            *(void *)&v155[20] = "updated";
                            *(_WORD *)&v155[28] = 1024;
                            BOOL v156 = v93;
                            __int16 v157 = 1024;
                            int v158 = 0;
                            __int16 v159 = 1024;
                            AudioObjectID v160 = v104;
                            _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
                            if (SHIBYTE(v123) < 0)
                            {
                              int v89 = v121;
LABEL_221:
                              operator delete(v89);
                            }
                          }

                          goto LABEL_222;
                        }

                        v76.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                        uint64_t v77 = sub_138E8(13);
                        if ((*(_BYTE *)(v77 + 8) & 1) != 0)
                        {
                          CFStringRef v78 = *(os_log_s **)v77;
                          if (*(void *)v77)
                          {
                            if (os_log_type_enabled(*(os_log_t *)v77, OS_LOG_TYPE_DEBUG))
                            {
                              buf.AudioObjectPropertySelector mSelector = 136315906;
                              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                              __int16 v152 = 1024;
                              int v153 = 257;
                              __int16 v154 = 2080;
                              *(void *)CFStringRef v155 = "with timeout";
                              *(_WORD *)&v155[8] = 1024;
                              *(_DWORD *)&v155[10] = v104;
                              _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
                            }
                          }
                        }

                        sub_6DD4();
                        *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_48F828;
                        LOBYTE(buf.mElement) = 0;
                        LOBYTE(buf.mElement) = sub_1A30E4();
                        v118.__m_ = &v162;
                        v118.__owns_ = 1;
                        std::mutex::lock(&v162);
                        v79.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                        if (!v137)
                        {
                          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v80 = v79.__d_.__rep_ + 1000000 * v75;
                          while (1)
                          {
                            if (v80 <= std::chrono::steady_clock::now().__d_.__rep_) {
                              goto LABEL_175;
                            }
                            v81.__d_.__rep_ = v80 - std::chrono::steady_clock::now().__d_.__rep_;
                            if (v81.__d_.__rep_ >= 1) {
                              break;
                            }
LABEL_193:
                            if (std::chrono::steady_clock::now().__d_.__rep_ >= v80 || v137) {
                              goto LABEL_175;
                            }
                          }

                          std::chrono::steady_clock::now();
                          v82.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                          if (!v82.__d_.__rep_)
                          {
                            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 0LL;
                            goto LABEL_189;
                          }

                          if (v82.__d_.__rep_ < 1)
                          {
                            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 0x8000000000000000LL;
                          }

                          else
                          {
                            if ((unint64_t)v82.__d_.__rep_ > 0x20C49BA5E353F7LL)
                            {
                              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 0x7FFFFFFFFFFFFFFFLL;
                              goto LABEL_189;
                            }

LABEL_188:
                            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 1000 * v82.__d_.__rep_;
LABEL_189:
                            if (v83 > (v81.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                            {
                              v84.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_192:
                              std::condition_variable::__do_timed_wait(&__p, &v118, v84);
                              std::chrono::steady_clock::now();
                              goto LABEL_193;
                            }
                          }

                          v84.__d_.__rep_ = v83 + v81.__d_.__rep_;
                          goto LABEL_192;
                        }

LABEL_222:
                      sub_7D898((uint64_t)&inClientData);
                      std::condition_variable::~condition_variable(&__p);
                      std::mutex::~mutex(&v162);
                    }
                  }

LABEL_116:
                              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = 1000 * v57.__d_.__rep_;
LABEL_117:
                              if (v58 > (v56.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                              {
                                v59.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                                goto LABEL_120;
                              }
                            }

                            v59.__d_.__rep_ = v58 + v56.__d_.__rep_;
LABEL_120:
                            std::condition_variable::__do_timed_wait(&v163, __lk, v59);
                            std::chrono::steady_clock::now();
                          }

                          if (std::chrono::steady_clock::now().__d_.__rep_ >= v55 || (_BYTE)v106) {
                            goto LABEL_93;
                          }
                          continue;
                        }
                      }

                      uint64_t v49 = (os_log_t *)sub_138E8(13);
                      __int16 v50 = *v49;
                      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
                      {
                        AudioObjectPropertyAddress v114 = inAddress;
                        sub_613AC((uint64_t)__lk, &v114.mSelector);
                        if (SHIBYTE(__lk[1].__m_) >= 0) {
                          int64_t v51 = __lk;
                        }
                        else {
                          int64_t v51 = __lk[0].__m_;
                        }
                        int v122 = 0LL;
                        uint64_t v123 = 0LL;
                        uint64_t v121 = 0LL;
                        sub_7A5B8(&v121, v38, v40, v41);
                        int v111 = 0LL;
                        __int16 v112 = 0LL;
                        uint64_t v113 = 0LL;
                        sub_7A5B8(&v111, *a2, (uint64_t)a2[1], a2[1] - *a2);
                        int64_t v52 = v121;
                        uint64_t v53 = v111;
                        BOOL v54 = v122 - (_BYTE *)v121 == v112 - v111 && memcmp(v121, v111, v122 - (_BYTE *)v121) == 0;
                        buf.AudioObjectPropertySelector mSelector = 136316930;
                        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                        __int16 v152 = 1024;
                        int v153 = 248;
                        __int16 v154 = 2080;
                        *(void *)CFStringRef v155 = "set";
                        *(_WORD *)&v155[8] = 2080;
                        *(void *)&v155[10] = v51;
                        *(_WORD *)&v155[18] = 2080;
                        *(void *)&v155[20] = "set";
                        *(_WORD *)&v155[28] = 1024;
                        BOOL v156 = v54;
                        __int16 v157 = 1024;
                        int v158 = 0;
                        __int16 v159 = 1024;
                        AudioObjectID v160 = v18;
                        _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
                        if (v53)
                        {
                          __int16 v112 = v53;
                          operator delete(v53);
                        }

                        if (v52)
                        {
                          int v122 = v52;
                          operator delete(v52);
                        }

                        if (SHIBYTE(__lk[1].__m_) < 0) {
                          operator delete(__lk[0].__m_);
                        }
                      }

                      int v39 = 1;
                      LODWORD(v25) = 2003329396;
                      if (!v38) {
                        goto LABEL_97;
                      }
LABEL_96:
                      operator delete(v38);
LABEL_97:
                      if (v39)
                      {
                        if (v39 != 12)
                        {
                          a1 = v105;
                          goto LABEL_144;
                        }

                        uint64_t v60 = sub_138E8(13);
                        a1 = v105;
                        if ((*(_BYTE *)(v60 + 8) & 1) != 0)
                        {
                          int v25 = *(os_log_s **)v60;
                          if (!*(void *)v60)
                          {
LABEL_144:
                            sub_7D898((uint64_t)&__p);
                            std::condition_variable::~condition_variable(&v163);
                            std::mutex::~mutex(&v162);
                            uint64_t v62 = (void *)v144;
                            goto LABEL_145;
                          }

                          if (os_log_type_enabled(*(os_log_t *)v60, OS_LOG_TYPE_DEBUG))
                          {
                            *(AudioObjectPropertyAddress *)&__lk[0].__m_ = inAddress;
                            sub_613AC((uint64_t)&v138, (unsigned int *)__lk);
                            uint64_t v61 = v140 >= 0 ? &v138 : (void **)v138;
                            buf.AudioObjectPropertySelector mSelector = 136315906;
                            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 288;
                            __int16 v154 = 2080;
                            *(void *)CFStringRef v155 = v61;
                            *(_WORD *)&v155[8] = 1024;
                            *(_DWORD *)&v155[10] = v18;
                            _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                            if (SHIBYTE(v140) < 0) {
                              operator delete(v138);
                            }
                          }
                        }

                        LODWORD(v25) = 0;
                        goto LABEL_144;
                      }
                    }

                    BOOL v44 = 0;
                    if (!(void)__s2) {
                      goto LABEL_82;
                    }
LABEL_81:
                    *((void *)&__s2 + 1) = v43;
                    operator delete(v43);
                    goto LABEL_82;
                  }
                }

                else
                {
                  BOOL v73 = 0;
                  if (!v118.__m_) {
                    goto LABEL_198;
                  }
                }

                *(void *)&v118.__owns_ = v72;
                operator delete(v72);
                goto LABEL_198;
              }

              if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
              {
                buf.AudioObjectPropertySelector mSelector = 136315650;
                *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                __int16 v152 = 1024;
                int v153 = 191;
                __int16 v154 = 1024;
                *(_DWORD *)CFStringRef v155 = v18;
                _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primit ive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
              }
            }

            char v35 = 0;
            LODWORD(v25) = 0;
            goto LABEL_69;
          }
        }

        else if (v34)
        {
          goto LABEL_63;
        }

            int v8 = &v25[v24];
            int *v68 = v36;
            v68[1] = v18;
            v68[2] = v8;
            if (v10) {
              operator delete((void *)v10);
            }
            uint64_t v13 = 0;
LABEL_119:
            uint64_t v66 = (unint64_t)v8;
            char v9 = (unint64_t)v8;
            AudioObjectPropertyScope v10 = (unint64_t)v36;
            uint64_t v11 = (unint64_t)v8;
            goto LABEL_120;
          }

          uint64_t v13 = 0;
          uint64_t *v12 = 0;
          uint64_t v19 = v12 + 1;
          uint64_t v11 = v9;
        }

        else
        {
          if ((unint64_t)v12 >= v66)
          {
            int v39 = &v12[-v10];
            uint64_t v40 = (uint64_t)&v12[-v10 + 1];
            if (v40 < 0) {
              sub_7A87C();
            }
            unint64_t v41 = v66 - v10;
            if (2 * (v66 - v10) > v40) {
              uint64_t v40 = 2 * v41;
            }
            if (v41 >= 0x3FFFFFFFFFFFFFFFLL) {
              BOOL v24 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              BOOL v24 = v40;
            }
            if (v24) {
              int v25 = (char *)operator new(v24);
            }
            else {
              int v25 = 0LL;
            }
            uint64_t v36 = &v39[(void)v25];
            v39[(void)v25] = 2;
            AudioObjectID v18 = &v39[(void)v25 + 1];
            uint64_t v49 = &v12[~v10];
            do
            {
              __int16 v50 = *--v12;
              (v49--)[(void)v25] = v50;
            }

            while (v12 != (char *)v10);
            goto LABEL_115;
          }

          uint64_t v13 = 0;
          uint64_t *v12 = 2;
          uint64_t v19 = v12 + 1;
          char v9 = v66;
          uint64_t v11 = v66;
        }
      }

      else if (v13)
      {
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v26 = &v12[-v10];
          uint64_t v27 = (uint64_t)&v12[-v10 + 1];
          if (v27 < 0) {
            sub_7A87C();
          }
          if (2 * (v11 - v10) > v27) {
            uint64_t v27 = 2 * (v11 - v10);
          }
          if (v11 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
            int v28 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            int v28 = v27;
          }
          if (v28) {
            unsigned int v29 = (char *)operator new(v28);
          }
          else {
            unsigned int v29 = 0LL;
          }
          uint64_t v36 = &v26[(void)v29];
          v26[(void)v29] = 2;
          AudioObjectID v18 = &v26[(void)v29 + 1];
          if (v12 != (char *)v10)
          {
            uint64_t v37 = &v12[~v10];
            do
            {
              uint64_t v38 = *--v12;
              (v37--)[(void)v29] = v38;
            }

            while (v12 != (char *)v10);
            uint64_t v36 = v29;
          }

          int v8 = &v29[v28];
          int *v68 = v36;
          v68[1] = v18;
          v68[2] = v8;
          if (v10) {
            operator delete((void *)v10);
          }
          uint64_t v13 = 1;
          goto LABEL_119;
        }

        uint64_t *v12 = 2;
        uint64_t v19 = v12 + 1;
        uint64_t v13 = 1;
      }

      else
      {
        if ((unint64_t)v12 >= v11)
        {
          BOOL v34 = &v12[-v10];
          char v35 = (uint64_t)&v12[-v10 + 1];
          if (v35 < 0) {
            sub_7A87C();
          }
          if (2 * (v11 - v10) > v35) {
            char v35 = 2 * (v11 - v10);
          }
          if (v11 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
            BOOL v24 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            BOOL v24 = v35;
          }
          if (v24) {
            int v25 = (char *)operator new(v24);
          }
          else {
            int v25 = 0LL;
          }
          uint64_t v36 = &v34[(void)v25];
          v34[(void)v25] = 0;
          AudioObjectID v18 = &v34[(void)v25 + 1];
          __int16 v47 = &v12[~v10];
          do
          {
            std::chrono::steady_clock::time_point v48 = *--v12;
            (v47--)[(void)v25] = v48;
          }

          while (v12 != (char *)v10);
LABEL_115:
          uint64_t v36 = v25;
          goto LABEL_116;
        }

        uint64_t v13 = 0;
        uint64_t *v12 = 0;
        uint64_t v19 = v12 + 1;
      }

      AudioObjectID v18 = v19;
LABEL_120:
      v68[1] = v18;
      ++v17;
      uint64_t v12 = v18;
      if (v17 == v16) {
        goto LABEL_123;
      }
    }
  }

  AudioObjectID v18 = 0LL;
LABEL_129:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v55 = (os_log_t *)sub_138E8(16);
  std::chrono::steady_clock::time_point v56 = *v55;
  if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
  {
    if (a2) {
      std::chrono::system_clock::time_point v57 = "output";
    }
    else {
      std::chrono::system_clock::time_point v57 = "input";
    }
    sub_7D084(v70, v57);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = v71;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v59 = (void **)v70[0];
    sub_2314E4(&__p, *v68, v18);
    uint64_t v60 = v70;
    if (v58 < 0) {
      uint64_t v60 = v59;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    BOOL v73 = "AggregateDevice_BroadcastFanout.cpp";
    uint64_t v74 = 1024;
    uint64_t v75 = 110;
    std::chrono::system_clock::time_point v76 = 2080;
    uint64_t v77 = v60;
    CFStringRef v78 = 2080;
    std::chrono::steady_clock::time_point v79 = p_p;
    _os_log_impl(&dword_0, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built StreamUsageMask for %s: %s.", buf, 0x26u);
    if (v71 < 0) {
      operator delete(v70[0]);
    }
  }

LABEL_226:
  if (v13)
  {
    uint64_t v108 = v13;
    operator delete(v13);
  }

void sub_2E1A70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2E1C14(uint64_t a1, uint64_t a2)
{
  AudioObjectID v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v21;
  if (v21)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        AudioObjectPropertyScope v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v15);
        uint64_t v11 = v19;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        uint64_t v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          uint64_t v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        uint64_t v27 = v11;
        __int16 v28 = 2080;
        unsigned int v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
  }

void sub_2E1E08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2E1E44(AudioObjectID a1)
{
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473746D23LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 outDataSize = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(a1, &inAddress, 0, 0LL, &outDataSize);
  if (!outDataSize)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v19 = "SubPortPolicy.cpp";
      __int16 v20 = 1024;
      int v21 = 97;
      __int16 v22 = 1024;
      LODWORD(v23) = outDataSize;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned input stream size of %u",  buf,  0x18u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL returned input stream size of %u");
  }

  __chkstk_darwin(PropertyDataSize);
  AudioObjectID v4 = (unsigned int *)((char *)v14 - ((v3 + 15) & 0x1FFFFFFF0LL));
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0LL, &outDataSize, v4);
  if (PropertyData)
  {
    AudioObjectPropertyScope v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_613AC((uint64_t)v14, &inAddress.mSelector);
      if (v15 >= 0) {
        uint64_t v12 = v14;
      }
      else {
        uint64_t v12 = (void **)v14[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v19 = "SubPortPolicy.cpp";
      __int16 v20 = 1024;
      int v21 = 102;
      __int16 v22 = 2080;
      int v23 = v12;
      __int16 v24 = 1024;
      AudioObjectID v25 = a1;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: Error getting property %s on device %u.",  buf,  0x22u);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }

    AudioObjectID v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectID v13 = &off_4865A0;
    v13[2] = PropertyData;
  }

  return *v4;
}

void sub_2E20B0(_Unwind_Exception *a1)
{
}

__n128 sub_2E20CC(uint64_t a1, uint64_t a2)
{
  AudioObjectID v4 = (uint64_t *)(a2 + 4);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 12);
  sub_177A00((uint64_t)&v23, (AudioObjectID *)a2, (AudioObjectPropertyAddress *)buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v23;
  if (v23)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v21, v6);
        int v9 = v22;
        AudioObjectPropertyScope v10 = (void **)v21[0];
        uint64_t v17 = *v4;
        int v18 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v17);
        uint64_t v11 = v21;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v20 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a2;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 176;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v6;
        *(_WORD *)&_BYTE buf[24] = 2080;
        *(void *)&buf[26] = v11;
        *(_WORD *)&buf[34] = 2080;
        *(void *)&buf[36] = v12;
        __int16 v26 = 1024;
        AudioObjectID v27 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  buf,  0x32u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
    }
  }

  uint64_t v14 = v24;
  memset(buf, 0, 40);
  if (!v24[40]) {
    uint64_t v14 = buf;
  }
  __n128 result = *(__n128 *)v14;
  __int128 v16 = *((_OWORD *)v14 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 16) = v16;
  *(void *)(a1 + 32) = *((void *)v14 + 4);
  *(_DWORD *)(a1 + 40) = v6;
  return result;
}

void sub_2E22B0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2E22D0(void *a1, uint64_t a2, unsigned int a3)
{
  if (!a3)
  {
    char v15 = (os_log_t *)sub_138E8(13);
    __int128 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v22 = "SubPortPolicy.cpp";
      __int16 v23 = 1024;
      int v24 = 168;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v3 = a2 + 16;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }

  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
  {
LABEL_14:
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a3);
      if (v20 >= 0) {
        AudioObjectID v13 = __p;
      }
      else {
        AudioObjectID v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v22 = "SubPortPolicy.cpp";
      __int16 v23 = 1024;
      int v24 = 176;
      __int16 v25 = 2080;
      __int16 v26 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported port type: %s.",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Unsupported port type: %s.");
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return sub_7A5B8( a1,  *(const void **)(v6 + 40),  *(void *)(v6 + 48),  (uint64_t)(*(void *)(v6 + 48) - *(void *)(v6 + 40)) >> 2);
}

void sub_2E24F0(_Unwind_Exception *a1)
{
}

BOOL sub_2E2510(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 64);
  uint64_t v4 = (void *)(a1 + 72);
  if (v3 == (void *)(a1 + 72))
  {
LABEL_12:
    uint64_t v11 = sub_138E8(17);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      uint64_t v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        BOOL result = os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        sub_2CA1C(__p, a2);
        if (v19 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        int v21 = "SubPortPolicy.cpp";
        __int16 v22 = 1024;
        int v23 = 189;
        __int16 v24 = 2080;
        __int16 v25 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Data source %s is not supported.", buf, 0x1Cu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    return 0LL;
  }

  else
  {
    while (1)
    {
      uint64_t v5 = (__int32 *)v3[6];
      uint64_t v6 = wmemchr((const __int32 *)v3[5], a2, ((uint64_t)v5 - v3[5]) >> 2);
      unsigned int v7 = v6 ? v6 : v5;
      BOOL v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          BOOL v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }

        while (!v10);
      }

      uint64_t v3 = v9;
      if (v9 == v4) {
        goto LABEL_12;
      }
    }

    uint64_t v15 = sub_138E8(17);
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      __int128 v16 = *(os_log_s **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          uint64_t v17 = v19 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v21 = "SubPortPolicy.cpp";
          __int16 v22 = 1024;
          int v23 = 185;
          __int16 v24 = 2080;
          __int16 v25 = v17;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Data source %s is supported.", buf, 0x1Cu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    return 1LL;
  }

void sub_2E274C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2E2800(a1);
  operator delete(v1);
}

_BYTE *sub_2E2760(uint64_t a1, unsigned int a2)
{
  BOOL result = sub_28ADC4(a1);
  *(_DWORD *)(a1 + 8) = a2;
  if (a2)
  {
    sub_92EF8();
    return sub_28A860(a2, a1);
  }

  return result;
}

uint64_t sub_2E27B0(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 104) + 1);
  *(_DWORD *)(a1 + 104) = v1;
  return v1;
}

uint64_t sub_2E27C4(_DWORD *a1)
{
  uint64_t v1 = (a1[26] - 1);
  a1[26] = v1;
  if (a1 && !(_DWORD)v1) {
    (*(void (**)(_DWORD *))(*(void *)a1 + 8LL))(a1);
  }
  return v1;
}

uint64_t sub_2E2800(uint64_t a1)
{
  *(void *)a1 = off_47C160;
  if (byte_493FB0 == 1)
  {
    strcpy((char *)&inAddress, "resubolg");
    BYTE1(inAddress.mElement) = 0;
    HIWORD(inAddress.mElement) = 0;
    AudioObjectRemovePropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_289F64, 0LL);
    inAddress.AudioObjectPropertySelector mSelector = 1886221684;
    AudioObjectRemovePropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_289F64, 0LL);
    byte_493FB0 = 0;
  }

  CFPlugInRemoveInstanceForFactory(*(CFUUIDRef *)(a1 + 88));
  sub_287158(a1 + 88);
  return sub_2F4E00(a1);
}

void sub_2E28B8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2EAA80(a1);
  operator delete(v1);
}

uint64_t sub_2E28CC(uint64_t a1, __int32 *a2)
{
  if (*a2 != 1651794290)
  {
    uint64_t v2 = a1;
    unsigned int v4 = atomic_load((unsigned int *)(a1 + 536));
    sub_2E573C(&v33, a1, v4);
    if (v33)
    {
      char v5 = (*(uint64_t (**)(uint64_t, __int32 *))(*(void *)v33 + 32LL))(v33, a2);
    }

    else
    {
      uint64_t v6 = wmemchr(dword_402B1C, *a2, 0x14uLL);
      unsigned int v7 = byte_402B6C;
      if (v6) {
        unsigned int v7 = (UInt8 *)v6;
      }
      if (v7 - (UInt8 *)dword_402B1C == 80)
      {
        int v8 = 1;
LABEL_24:
        int v18 = v34;
        if (!v34) {
          goto LABEL_28;
        }
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          unint64_t v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if (!v8) {
            return v2 & 1;
          }
        }

        else
        {
LABEL_28:
          if (!v8) {
            return v2 & 1;
          }
        }

        uint64_t v2 = sub_138E8(17);
        uint64_t v21 = sub_138E8(28);
        char v22 = 0;
        uint64_t v23 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v24 = *(void *)(v2 + 8);
        while (1)
        {
          uint64_t v25 = *(int *)&buf[4 * v23];
          char v26 = v22;
          if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
            break;
          }
          char v22 = 1;
          uint64_t v23 = 1LL;
          if ((v26 & 1) != 0) {
            goto LABEL_35;
          }
        }

        if ((v24 & v25) == 0) {
          uint64_t v2 = v21;
        }
LABEL_35:
        AudioObjectID v27 = *(os_log_s **)v2;
        if (*(void *)v2)
        {
          BOOL v28 = os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEFAULT);
          LOBYTE(v2) = 0;
          if (!v28) {
            return v2 & 1;
          }
          sub_2CA1C(__p, *a2);
          if (v32 >= 0) {
            unsigned int v29 = __p;
          }
          else {
            unsigned int v29 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          __int16 v36 = 1024;
          int v37 = 404;
          __int16 v38 = 2080;
          int v39 = v29;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d No active Bluetooth profile: HasProperty(%s) = false",  buf,  0x1Cu);
          if (v32 < 0) {
            operator delete(__p[0]);
          }
        }

        LOBYTE(v2) = 0;
        return v2 & 1;
      }

      uint64_t v9 = sub_138E8(17);
      uint64_t v10 = sub_138E8(28);
      char v11 = 0;
      uint64_t v12 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v13 = *(void *)(v9 + 8);
      while (1)
      {
        uint64_t v14 = *(int *)&buf[4 * v12];
        char v15 = v11;
        if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
          break;
        }
        char v11 = 1;
        uint64_t v12 = 1LL;
        if ((v15 & 1) != 0) {
          goto LABEL_15;
        }
      }

      if ((v13 & v14) == 0) {
        uint64_t v9 = v10;
      }
LABEL_15:
      __int128 v16 = *(os_log_s **)v9;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, *a2);
        uint64_t v17 = v32 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        __int16 v36 = 1024;
        int v37 = 397;
        __int16 v38 = 2080;
        int v39 = v17;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d No active Bluetooth profile: calling Device::HasProperty(%s)",  buf,  0x1Cu);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }

      char v5 = sub_1A4264((unsigned int *)v2, a2);
    }

    LOBYTE(v2) = v5;
    int v8 = 0;
    goto LABEL_24;
  }

  LOBYTE(v2) = 1;
  return v2 & 1;
}

void sub_2E2C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_2E2C4C(unsigned int *a1, int *a2)
{
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    char v2 = 0;
  }

  else
  {
    unsigned int v6 = atomic_load(a1 + 134);
    sub_2E573C(v20, (uint64_t)a1, v6);
    uint64_t v7 = *(void *)v20;
    if (*(void *)v20) {
      char v2 = (*(uint64_t (**)(void, int *))(**(void **)v20 + 40LL))(*(void *)v20, a2);
    }
    int v8 = *(std::__shared_weak_count **)&v20[2];
    if (!*(void *)&v20[2]) {
      goto LABEL_13;
    }
    uint64_t v9 = (unint64_t *)(*(void *)&v20[2] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v7) {
        return v2 & 1;
      }
    }

    else
    {
LABEL_13:
      if (v7) {
        return v2 & 1;
      }
    }

    uint64_t v11 = sub_138E8(17);
    uint64_t v12 = sub_138E8(28);
    char v13 = 0;
    uint64_t v14 = 0LL;
    *(void *)unint64_t v20 = 0x100000002LL;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = (int)v20[v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1LL;
      if ((v17 & 1) != 0) {
        goto LABEL_22;
      }
    }

    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_22:
    int v18 = *(os_log_s **)v11;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v20[0] = 136315394;
      *(void *)&v20[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(v20[3]) = 1024;
      *(_DWORD *)((char *)&v20[3] + 2) = 426;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", (uint8_t *)v20, 0x12u);
    }

    char v2 = sub_1A4528((uint64_t)a1, a2);
  }

  return v2 & 1;
}

void sub_2E2E3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2E2E58(unsigned int *a1, int *a2, uint64_t a3, const void *a4)
{
  if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      v26[0] = 136315394;
      *(void *)&v26[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(v26[3]) = 1024;
      *(_DWORD *)((char *)&v26[3] + 2) = 433;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)v26,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a2 == 1651794290) {
    return 4LL;
  }
  unsigned int v9 = atomic_load(a1 + 134);
  sub_2E573C(v26, (uint64_t)a1, v9);
  uint64_t v10 = *(void *)v26;
  if (*(void *)v26) {
    uint64_t v4 = (*(uint64_t (**)(void, int *, uint64_t, const void *))(**(void **)v26 + 48LL))( *(void *)v26,  a2,  a3,  a4);
  }
  uint64_t v11 = *(std::__shared_weak_count **)&v26[2];
  if (!*(void *)&v26[2]) {
    goto LABEL_10;
  }
  uint64_t v12 = (unint64_t *)(*(void *)&v26[2] + 8LL);
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v10) {
      return v4;
    }
  }

  else
  {
LABEL_10:
    if (v10) {
      return v4;
    }
  }

  uint64_t v14 = sub_138E8(17);
  uint64_t v15 = sub_138E8(28);
  char v16 = 0;
  uint64_t v17 = 0LL;
  *(void *)char v26 = 0x100000002LL;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = (int)v26[v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1LL;
    if ((v20 & 1) != 0) {
      goto LABEL_19;
    }
  }

  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
LABEL_19:
  uint64_t v21 = *(os_log_s **)v14;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v26[0] = 136315394;
    *(void *)&v26[1] = "Device_BluetoothUnified_Aspen.cpp";
    LOWORD(v26[3]) = 1024;
    *(_DWORD *)((char *)&v26[3] + 2) = 444;
    _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", (uint8_t *)v26, 0x12u);
  }

  return sub_1A45C0((uint64_t)a1, a2, a3, a4);
}

void sub_2E3108( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2E3134(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, UInt32 *a5, int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v25 = (os_log_t *)sub_138E8(13);
    char v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)a2;
      int v38 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v37);
      AudioObjectID v27 = v40 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 451;
      __int16 v42 = 2080;
      BOOL v43 = (const char *)v27;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    unsigned int v29 = (os_log_t *)sub_138E8(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)a2;
      int v38 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v37);
      AudioObjectID v31 = v40 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 452;
      __int16 v42 = 2080;
      BOOL v43 = (const char *)v31;
      __int16 v44 = 1024;
      LODWORD(v45[0]) = a3;
      WORD2(v45[0]) = 2048;
      *(void *)((char *)v45 + 6) = a4;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }

    char v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v32 = &off_4865A0;
    v32[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v33 = (os_log_t *)sub_138E8(13);
    BOOL v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)a2;
      int v38 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v37);
      char v35 = v40 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 453;
      __int16 v42 = 2080;
      BOOL v43 = "outData";
      __int16 v44 = 2080;
      v45[0] = v35;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v36 = &off_4865A0;
    v36[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 1651794290)
  {
    sub_5CABC(*(_DWORD *)(a1 + 844), a5, a6);
    return;
  }

  unsigned int v12 = atomic_load((unsigned int *)(a1 + 536));
  sub_2E573C(buf, a1, v12);
  uint64_t v13 = *(void *)buf;
  if (*(void *)buf) {
    (*(void (**)(void, uint64_t, uint64_t, const void *, UInt32 *, int *))(**(void **)buf + 56LL))( *(void *)buf,  a2,  a3,  a4,  a5,  a6);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_12;
  }
  uint64_t v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v13) {
      return;
    }
  }

  else
  {
LABEL_12:
    if (v13) {
      return;
    }
  }

  uint64_t v17 = sub_138E8(17);
  uint64_t v18 = sub_138E8(28);
  char v19 = 0;
  uint64_t v20 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v21 = *(void *)(v17 + 8);
  while (1)
  {
    uint64_t v22 = *(int *)&buf[4 * v20];
    char v23 = v19;
    if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
      break;
    }
    char v19 = 1;
    uint64_t v20 = 1LL;
    if ((v23 & 1) != 0) {
      goto LABEL_21;
    }
  }

  if ((v21 & v22) == 0) {
    uint64_t v17 = v18;
  }
LABEL_21:
  uint64_t v24 = *(os_log_s **)v17;
  if (v24)
  {
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 465;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", buf, 0x12u);
    }
  }

  sub_1A48C8(a1, a2, a3, a4, a5, a6);
}

void sub_2E3694( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_2E36B0(unsigned int *a1, int *a2, uint64_t a3, const void *a4, uint64_t a5, float *a6)
{
  if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v25 = (os_log_t *)sub_138E8(13);
    char v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v41);
      AudioObjectID v27 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 472;
      __int16 v46 = 2080;
      __int16 v47 = (const char *)v27;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    unsigned int v29 = (os_log_t *)sub_138E8(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v41);
      AudioObjectID v31 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 473;
      __int16 v46 = 2080;
      __int16 v47 = (const char *)v31;
      __int16 v48 = 1024;
      LODWORD(v49[0]) = a3;
      WORD2(v49[0]) = 2048;
      *(void *)((char *)v49 + 6) = a4;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }

    char v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v32 = &off_4865A0;
    v32[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v33 = (os_log_t *)sub_138E8(13);
    BOOL v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v41);
      char v35 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 474;
      __int16 v46 = 2080;
      __int16 v47 = "inData";
      __int16 v48 = 2080;
      v49[0] = v35;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v36 = &off_4865A0;
    v36[2] = 561211770;
  }

  if (((*(uint64_t (**)(unsigned int *, int *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    uint64_t v37 = (os_log_t *)sub_138E8(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v41);
      int v39 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 475;
      __int16 v46 = 2080;
      __int16 v47 = (const char *)v39;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }

    char v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v40 = &off_4865A0;
    void v40[2] = 1852797029;
  }

  unsigned int v12 = atomic_load(a1 + 134);
  sub_2E573C(buf, (uint64_t)a1, v12);
  uint64_t v13 = *(void *)buf;
  if (*(void *)buf) {
    (*(void (**)(void, int *, uint64_t, const void *, uint64_t, float *))(**(void **)buf + 64LL))( *(void *)buf,  a2,  a3,  a4,  a5,  a6);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_11;
  }
  uint64_t v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v13) {
      return;
    }
  }

  else
  {
LABEL_11:
    if (v13) {
      return;
    }
  }

  uint64_t v17 = sub_138E8(17);
  uint64_t v18 = sub_138E8(28);
  char v19 = 0;
  uint64_t v20 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v21 = *(void *)(v17 + 8);
  while (1)
  {
    uint64_t v22 = *(int *)&buf[4 * v20];
    char v23 = v19;
    if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
      break;
    }
    char v19 = 1;
    uint64_t v20 = 1LL;
    if ((v23 & 1) != 0) {
      goto LABEL_20;
    }
  }

  if ((v21 & v22) == 0) {
    uint64_t v17 = v18;
  }
LABEL_20:
  uint64_t v24 = *(os_log_s **)v17;
  if (v24)
  {
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 482;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", buf, 0x12u);
    }
  }

  sub_1A5054((uint64_t)a1, a2, a3, a4, a5, a6);
}

void sub_2E3CC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_2E3CE0( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector != qword_49CF30 || a2->mElement != dword_49CF38) {
    return sub_368FB0(a1, a2, a3, a4);
  }
  uint64_t v5 = *(void *)&a2->mSelector;
  AudioObjectPropertyElement mElement = a2->mElement;
  uint64_t v7 = a3;
  int v8 = a4;
  sub_1885D4((void *)(a1 + 632), (unsigned int *)&qword_49CF40, (unsigned int *)&v5);
  return 1LL;
}

BOOL sub_2E3D6C( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_49CF30 && a2->mElement == dword_49CF38)
  {
    uint64_t v9 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v11 = a3;
    unsigned int v12 = a4;
    sub_18803C((uint64_t **)(a1 + 632), (unsigned int *)&qword_49CF40, (unsigned int *)&v9);
    return 1LL;
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

unsigned __int8 *sub_2E3E34(uint64_t a1)
{
  uint64_t v2 = sub_32918();
  sub_395DD4(v2, a1 + 776);
  AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  AudioObjectRemovePropertyListener( v3,  (const AudioObjectPropertyAddress *)&qword_49CF40,  (AudioObjectPropertyListenerProc)sub_2E8E1C,  (void *)a1);
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  AudioObjectRemovePropertyListener( v4,  (const AudioObjectPropertyAddress *)&qword_49CF10,  (AudioObjectPropertyListenerProc)sub_2E8758,  (void *)a1);
  if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
  {
    uint64_t v5 = (dispatch_queue_t *)operator new(0x10uLL);
    unsigned int v6 = *(dispatch_queue_s **)(a1 + 848);
    *uint64_t v5 = v6;
    uint64_t v7 = sub_869B4();
    *((_BYTE *)v5 + 8) = v7 != (void)v6;
    if ((dispatch_queue_s *)v7 != v6) {
      dispatch_queue_set_specific(*v5, "VirtualAudioQueueKey", "VirtualAudioQueueKey", 0LL);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  atomic_store(0, (unsigned int *)(a1 + 536));
  uint64_t v14 = a1;
  if (dispatch_get_specific("ProfileChangeQueueKey") == "ProfileChangeQueueKey")
  {
    std::mutex::lock((std::mutex *)(a1 + 568));
    uint64_t v9 = *(void **)(a1 + 544);
    if (v9 != (void *)(a1 + 552))
    {
      do
      {
        (*(void (**)(void))(*(void *)v9[5] + 24LL))(v9[5]);
        uint64_t v10 = (void *)v9[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            uint64_t v10 = (void *)*v10;
          }

          while (v10);
        }

        else
        {
          do
          {
            uint64_t v11 = (void *)v9[2];
            BOOL v12 = *v11 == (void)v9;
            uint64_t v9 = v11;
          }

          while (!v12);
        }

        uint64_t v9 = v11;
      }

      while (v11 != (void *)(a1 + 552));
    }

    std::mutex::unlock((std::mutex *)(a1 + 568));
  }

  else
  {
    int v8 = *(dispatch_queue_s **)(a1 + 848);
    uint64_t v15 = &v14;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_2EA6E8;
    block[3] = &unk_47C3D8;
    block[4] = &v15;
    dispatch_sync(v8, block);
  }

  if (v5) {
    sub_2EAA40(v5);
  }
  return sub_1A5F4C((void *)a1);
}

void sub_2E4040( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      uint64_t v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }

  else
  {
    uint64_t v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v25 = v24;
      char v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        uint64_t v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      unsigned int v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        uint64_t v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2E3FF8LL);
}

void sub_2E4274()
{
  if (v0) {
    sub_2EAA40(v0);
  }
  JUMPOUT(0x2E4064LL);
}

uint64_t sub_2E42BC(os_unfair_lock_s *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  AudioObjectAddPropertyListener( v2,  (const AudioObjectPropertyAddress *)&qword_49CF10,  (AudioObjectPropertyListenerProc)sub_2E8758,  a1);
  AudioObjectID v3 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  AudioObjectAddPropertyListener( v3,  (const AudioObjectPropertyAddress *)&qword_49CF20,  (AudioObjectPropertyListenerProc)sub_2E8758,  a1);
  AudioObjectID v4 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  uint64_t v5 = AudioObjectAddPropertyListener( v4,  (const AudioObjectPropertyAddress *)&qword_49CF40,  (AudioObjectPropertyListenerProc)sub_2E8E1C,  a1);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_138E8(17);
    uint64_t v8 = sub_138E8(28);
    char v9 = 0;
    uint64_t v10 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v11 = *(void *)(v7 + 8);
    while (1)
    {
      uint64_t v12 = *(int *)&buf[4 * v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 1LL;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v11 & v12) == 0) {
      uint64_t v7 = v8;
    }
LABEL_8:
    uint64_t v14 = *(os_log_s **)v7;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, v6);
      int v15 = v22;
      unint64_t v16 = (void **)__p[0];
      (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v20,  a1);
      uint64_t v17 = __p;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 306;
      __int16 v26 = 1024;
      int v27 = v6;
      __int16 v28 = 2080;
      unsigned int v29 = v17;
      __int16 v30 = 2112;
      uint64_t v31 = v20[0];
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') adding kAudioDevicePropertyVolumeDecibels property listener to bluetooth SCO device with UID %@",  buf,  0x2Cu);
      sub_19DFC((uint64_t)v20);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  uint64_t v18 = sub_32918();
  sub_395880(v18, (uint64_t)&a1[194]);
  sub_2E9678((uint64_t)a1);
  return 1LL;
}

void sub_2E44F8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2E4518(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(a1 + 536));
  sub_2E573C(&v18, a1, v1);
  if (v18)
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 88LL))(v18);
    unint64_t v3 = v2 & 0xFFFFFF0000000000LL;
    uint64_t v4 = v2 & 0xFF00000000LL;
    uint64_t v5 = v2;
  }

  else
  {
    uint64_t v6 = sub_138E8(17);
    uint64_t v7 = sub_138E8(28);
    char v8 = 0;
    uint64_t v9 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1LL;
      if ((v12 & 1) != 0) {
        goto LABEL_9;
      }
    }

    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_9:
    char v13 = *(os_log_s **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 685;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", buf, 0x12u);
    }

    uint64_t v5 = 0LL;
    unint64_t v3 = 0LL;
    uint64_t v4 = 0x100000000LL;
  }

  uint64_t v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  return v5 | v4 | v3;
}

void sub_2E46C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2E46E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (_os_feature_enabled_impl("MediaExperience", "HangsEarlyeSCO"))
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a1;
    if (dispatch_get_specific("ProfileChangeQueueKey") == "ProfileChangeQueueKey")
    {
      sub_2E7398((uint64_t)v7);
    }

    else
    {
      uint64_t v6 = *(dispatch_queue_s **)(a1 + 848);
      char v8 = v7;
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000LL;
      block[2] = sub_2E8400;
      block[3] = &unk_47C460;
      block[4] = &v8;
      dispatch_sync(v6, block);
    }
  }

void sub_2E47CC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    os_log_t v19 = __cxa_begin_catch(a1);
    int v20 = (os_log_t *)sub_138E8(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v22;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 35;
      uint32_t v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }

  else
  {
    __int16 v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v27 = v26;
      __int16 v28 = (os_log_t *)sub_138E8(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16LL))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v30;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 35;
        uint32_t v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v31 = (os_log_t *)sub_138E8(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 35;
        uint32_t v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2E479CLL);
}

uint64_t sub_2E4A0C(uint64_t a1, int a2)
{
  if (a2 <= 1886152040)
  {
    if (a2 == 1885892674) {
      return 0LL;
    }
    int v2 = 1885892706;
  }

  else
  {
    if (a2 == 1886152041 || a2 == 1886216820) {
      return 0LL;
    }
    int v2 = 1886152047;
  }

  if (a2 != v2)
  {
    uint64_t v4 = sub_138E8(17);
    uint64_t v5 = sub_138E8(28);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_15;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_15:
    uint64_t v11 = *(os_log_s **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      char v12 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 538;
      __int16 v22 = 2080;
      uint32_t v23 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }

    char v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 539;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_2E4C68(_Unwind_Exception *a1)
{
}

void sub_2E4C84(std::string::size_type a1, uint64_t a2, int a3, int a4)
{
  LODWORD(v54.__r_.__value_.__l.__data_) = a4;
  strcpy((char *)buf, "spxebolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v5 = sub_F2FAC(a1);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_138E8(17);
    uint64_t v8 = sub_138E8(28);
    char v9 = 0;
    uint64_t v10 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v11 = *(void *)(v7 + 8);
    while (1)
    {
      uint64_t v12 = (int)buf[v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 1LL;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v11 & v12) == 0) {
      uint64_t v7 = v8;
    }
LABEL_8:
    uint64_t v14 = *(os_log_s **)v7;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(&v54, 1702391923LL);
      int size = (char)v54.__r_.__value_.__s.__size_;
      std::string::size_type v16 = v54.__r_.__value_.__r.__words[0];
      sub_2CA1C(__p, v6);
      uint64_t v17 = &v54;
      if (size < 0) {
        uint64_t v17 = (std::string *)v16;
      }
      if (v53 >= 0) {
        char v18 = __p;
      }
      else {
        char v18 = (void **)__p[0];
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 554;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v17;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v18;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to set prop %s on BT. Error: %s",  (uint8_t *)buf,  0x26u);
      if (v53 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  uint64_t v19 = *(void *)(a2 + 8);
  if (v19 == a2)
  {
    LOBYTE(v26) = 0;
    BOOL v24 = 0;
  }

  else
  {
    do
    {
      sub_B8F68((uint64_t *)buf, (uint64_t *)(v19 + 16), "", 557);
      __int16 v20 = *(std::__shared_weak_count **)&buf[2];
      int v21 = *(_DWORD *)(*(void *)buf + 144LL);
      if (*(void *)&buf[2])
      {
        __int16 v22 = (unint64_t *)(*(void *)&buf[2] + 8LL);
        do
          unint64_t v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }

      BOOL v24 = v21 == 1885892674;
      if (v21 == 1885892674) {
        break;
      }
      uint64_t v19 = *(void *)(v19 + 8);
    }

    while (v19 != a2);
    uint64_t v25 = *(void *)(a2 + 8);
    if (v25 == a2)
    {
      LOBYTE(v26) = 0;
    }

    else
    {
      int v26 = 1;
      while (1)
      {
        sub_B8F68((uint64_t *)buf, (uint64_t *)(v25 + 16), "", 560);
        int v27 = *(std::__shared_weak_count **)&buf[2];
        int v28 = *(_DWORD *)(*(void *)buf + 144LL);
        if (*(void *)&buf[2])
        {
          os_log_t v29 = (unint64_t *)(*(void *)&buf[2] + 8LL);
          do
            unint64_t v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }

        if (v28 == 1885892706 || v28 == 1886216820) {
          break;
        }
        uint64_t v25 = *(void *)(v25 + 8);
        if (v25 == a2)
        {
          int v26 = 0;
          break;
        }
      }

      uint64_t v31 = *(void *)(a2 + 8);
      if (v31 != a2)
      {
        while (1)
        {
          sub_B8F68((uint64_t *)buf, (uint64_t *)(v31 + 16), "", 564);
          os_log_t v32 = *(std::__shared_weak_count **)&buf[2];
          int v33 = *(_DWORD *)(*(void *)buf + 144LL);
          if (*(void *)&buf[2])
          {
            BOOL v34 = (unint64_t *)(*(void *)&buf[2] + 8LL);
            do
              unint64_t v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }

          if (v33 == 1886152041 || v33 == 1886152047) {
            break;
          }
          uint64_t v31 = *(void *)(v31 + 8);
          if (v31 == a2) {
            goto LABEL_50;
          }
        }

        BOOL v24 = v21 == 1885892674;
        if (*(void *)(a2 + 16))
        {
          if (v26)
          {
            std::string::value_type v37 = 1;
            LOBYTE(v26) = 1;
            goto LABEL_55;
          }

          if (a3 == 1919115628) {
            goto LABEL_78;
          }
          if (a3 != 1936090482 && a3 != 1919117428)
          {
            LOBYTE(v26) = 0;
            std::string::value_type v37 = 1;
            int v40 = 1;
            goto LABEL_80;
          }

          if (!a4 || sub_1FF038(1886152041, a2))
          {
LABEL_78:
            LOBYTE(v26) = 0;
            int v40 = 2;
          }

          else
          {
            LOBYTE(v26) = 0;
            int v40 = 3;
          }
        }

        else
        {
          int v40 = 1919183219;
        }

        std::string::value_type v37 = 1;
        goto LABEL_80;
      }
    }
  }

void sub_2E5328(_Unwind_Exception *a1)
{
}

void sub_2E5590(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 72LL))(v14);
  }

  else
  {
    uint64_t v3 = sub_138E8(17);
    uint64_t v4 = sub_138E8(28);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&buf[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_9;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_9:
    uint64_t v10 = *(os_log_s **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 693;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching Bluetooth profile", buf, 0x12u);
    }

    *a2 = 0LL;
  }

  uint64_t v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_2E571C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2E573C(void *a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v6 = (std::mutex *)(a2 + 568);
    std::mutex::lock((std::mutex *)(a2 + 568));
    uint64_t v7 = *(void *)(a2 + 552);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = a2 + 552;
    do
    {
      unsigned int v9 = *(_DWORD *)(v7 + 32);
      BOOL v10 = v9 >= a3;
      if (v9 >= a3) {
        uint64_t v11 = (uint64_t *)v7;
      }
      else {
        uint64_t v11 = (uint64_t *)(v7 + 8);
      }
      if (v10) {
        uint64_t v8 = v7;
      }
      uint64_t v7 = *v11;
    }

    while (*v11);
    if (v8 != a2 + 552 && *(_DWORD *)(v8 + 32) <= a3)
    {
      uint64_t v13 = *(void *)(v8 + 40);
      uint64_t v12 = *(void *)(v8 + 48);
      *a1 = v13;
      a1[1] = v12;
      if (v12)
      {
        uint64_t v14 = (unint64_t *)(v12 + 8);
        do
          unint64_t v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }

    else
    {
LABEL_13:
      *a1 = 0LL;
      a1[1] = 0LL;
    }

    std::mutex::unlock(v6);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = 0LL;
  }

void sub_2E57F8(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 8);
  if (*(_BYTE *)a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = 1952539500LL;
LABEL_13:
    sub_2E5CA0(v4, v5, v3);
    goto LABEL_14;
  }

  if (*(_BYTE *)(a1 + 1))
  {
    unsigned int v6 = atomic_load(v2 + 210);
    if (v6 && v2[211] != 1919183219 && (unsigned int v7 = atomic_load(v2 + 134), v7 == 1953719151))
    {
      unsigned int v3 = *(_DWORD *)(a1 + 4);
      if (v3 == 1920364387) {
        goto LABEL_14;
      }
    }

    else
    {
      unsigned int v3 = *(_DWORD *)(a1 + 4);
    }

    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = 1953719151LL;
    goto LABEL_13;
  }

  if (*(_BYTE *)(a1 + 2))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = 1953260897LL;
    goto LABEL_13;
  }

void sub_2E5A00(uint64_t a1)
{
}

void sub_2E5A60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    unsigned int v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(sub_C590C(__dst, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(sub_C590C(__dst, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      uint64_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v23 = v22;
      BOOL v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(sub_C590C(__dst, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        uint64_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      int v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(sub_C590C(__dst, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        uint64_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2E5A30LL);
}

void sub_2E5CA0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v63 = a3;
  unsigned int inData = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 848));
  uint64_t v5 = (os_log_t *)sub_138E8(17);
  unsigned int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 268);
    sub_2CA1C(v68, a2);
    int v8 = v69;
    unsigned int v9 = (void **)v68[0];
    sub_2CA1C(&__p, v63);
    BOOL v10 = v68;
    if (v8 < 0) {
      BOOL v10 = v9;
    }
    if (v73 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 124;
    __int16 v81 = 1024;
    *(_DWORD *)std::chrono::system_clock::time_point v82 = v7;
    *(_WORD *)&v82[4] = 2080;
    *(void *)&v82[6] = v10;
    *(_WORD *)&v82[14] = 2080;
    *(void *)&v82[16] = p_p;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting profile for %u to %s (%s)", buf, 0x2Cu);
    if (SHIBYTE(v73) < 0) {
      operator delete(__p);
    }
    if (v69 < 0) {
      operator delete(v68[0]);
    }
  }

  AudioObjectID v12 = *(_DWORD *)(a1 + 268);
  strcpy(buf, "pcvabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (AudioObjectSetPropertyData(v12, (const AudioObjectPropertyAddress *)buf, 4u, &v63, 4u, &inData)) {
    return;
  }
  AudioObjectID v13 = *(_DWORD *)(a1 + 268);
  strcpy(buf, "pcvabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v14 = sub_2E6834(1, v13, (uint64_t *)buf, 4u, &v63, (int *)&inData, 3200LL);
  if ((_DWORD)v14)
  {
    uint64_t v15 = sub_138E8(17);
    uint64_t v16 = sub_138E8(28);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0) {
        goto LABEL_47;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
LABEL_47:
    char v44 = *(os_log_s **)v15;
    if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      std::chrono::system_clock::time_point v45 = v68;
      sub_2CA1C(v68, v14);
      if (v69 < 0) {
        std::chrono::system_clock::time_point v45 = (void **)v68[0];
      }
      sub_2CA1C(&__p, 1635148656LL);
      int v46 = SHIBYTE(v73);
      __int16 v47 = (void **)__p;
      sub_2CA1C(&v65, inData);
      __int16 v48 = &__p;
      if (v46 < 0) {
        __int16 v48 = v47;
      }
      if (v67 >= 0) {
        uint64_t v49 = &v65;
      }
      else {
        uint64_t v49 = v65;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 167;
      __int16 v81 = 1024;
      *(_DWORD *)std::chrono::system_clock::time_point v82 = v14;
      *(_WORD *)&v82[4] = 2080;
      *(void *)&v82[6] = v45;
      *(_WORD *)&v82[14] = 2080;
      *(void *)&v82[16] = v48;
      __int16 v83 = 2080;
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v84 = v49;
      _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Error %d ('%s'), while synchronizing on %s property setting it to %s.",  buf,  0x36u);
      if (v67 < 0) {
        operator delete(v65);
      }
      if (SHIBYTE(v73) < 0) {
        operator delete(__p);
      }
      if (v69 < 0) {
        operator delete(v68[0]);
      }
    }

    sub_2E573C(&v65, a1, inData);
    __int16 v50 = v65;
    if (v65)
    {
      uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v65 + 104LL))(v65);
      sub_2433A0((uint64_t)buf, v51);
      uint64_t v52 = v50[1];
      std::condition_variable __p = 0LL;
      uint64_t v72 = 0LL;
      uint64_t v73 = 0LL;
      strcpy(v74, "cwdv");
      v74[8] = 0;
      int v75 = 3;
      v77[0] = 0LL;
      v77[1] = 0LL;
      std::chrono::system_clock::time_point v76 = v77;
      CFTypeRef cf = 0LL;
      int v78 = 44731050;
      sub_3710DC((uint64_t *)v68, v52, (uint64_t)&__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_32C8C(v77[0]);
      if (__p)
      {
        uint64_t v72 = __p;
        operator delete(__p);
      }

      if (v86) {
        CFRelease(v86);
      }
      sub_32C8C(v85);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      uint64_t v53 = sub_546E0();
      sub_103CF8(v53, (uint64_t)v68, 0LL, 0);
      sub_85B80((uint64_t *)v68);
    }

    std::string v54 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        unint64_t v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
LABEL_92:
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }

  else
  {
    atomic_store(inData, (unsigned int *)(a1 + 536));
    *(_DWORD *)(a1 + 844) = v63;
    int v22 = (os_log_t *)sub_138E8(17);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(_DWORD *)(a1 + 268);
      sub_2CA1C(v68, inData);
      int v25 = v69;
      uint64_t v26 = (void **)v68[0];
      sub_2CA1C(&__p, v63);
      int v27 = v68;
      if (v25 < 0) {
        int v27 = v26;
      }
      if (v73 >= 0) {
        os_log_t v28 = &__p;
      }
      else {
        os_log_t v28 = __p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 146;
      __int16 v81 = 1024;
      *(_DWORD *)std::chrono::system_clock::time_point v82 = v24;
      *(_WORD *)&v82[4] = 2080;
      *(void *)&v82[6] = v27;
      *(_WORD *)&v82[14] = 2080;
      *(void *)&v82[16] = v28;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Done setting %u to %s (%s)", buf, 0x2Cu);
      if (SHIBYTE(v73) < 0) {
        operator delete(__p);
      }
      if (v69 < 0) {
        operator delete(v68[0]);
      }
    }

    unsigned int v29 = atomic_load((unsigned int *)(a1 + 536));
    sub_2E573C(&v65, a1, v29);
    if (v65) {
      (*(void (**)(void *))(*(void *)v65 + 96LL))(v65);
    }
    unsigned int v30 = atomic_load((unsigned int *)(a1 + 536));
    if (v30 == 1953260897)
    {
      unsigned int v31 = v63;
      unsigned int v70 = v63;
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 848));
      os_log_t v32 = (os_log_t *)sub_138E8(20);
      int v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
      {
        sub_23FE8((uint64_t)v68, (os_unfair_lock_t)(a1 + 8));
        BOOL v34 = v69 >= 0 ? v68 : (void **)v68[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 272;
        __int16 v81 = 1024;
        *(_DWORD *)std::chrono::system_clock::time_point v82 = v31;
        *(_WORD *)&v82[4] = 2080;
        *(void *)&v82[6] = v34;
        _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting BTLE content type %u on device %s",  buf,  0x22u);
        if (v69 < 0) {
          operator delete(v68[0]);
        }
      }

      strcpy(buf, "tcabbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      uint64_t v35 = sub_F2FAC(a1);
      if ((_DWORD)v35)
      {
        uint64_t v36 = v35;
        uint64_t v37 = sub_138E8(17);
        uint64_t v38 = sub_138E8(28);
        char v39 = 0;
        uint64_t v40 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v41 = *(void *)(v37 + 8);
        while (1)
        {
          uint64_t v42 = *(int *)&buf[4 * v40];
          char v43 = v39;
          if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
            break;
          }
          char v39 = 1;
          uint64_t v40 = 1LL;
          if ((v43 & 1) != 0) {
            goto LABEL_78;
          }
        }

        if ((v41 & v42) == 0) {
          uint64_t v37 = v38;
        }
LABEL_78:
        std::chrono::system_clock::time_point v57 = *(os_log_s **)v37;
        if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(v68, 1650549620LL);
          int v58 = v69;
          std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v59 = (void **)v68[0];
          sub_2CA1C(&__p, v36);
          uint64_t v60 = v68;
          if (v58 < 0) {
            uint64_t v60 = v59;
          }
          if (v73 >= 0) {
            uint64_t v61 = &__p;
          }
          else {
            uint64_t v61 = __p;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 279;
          __int16 v81 = 2080;
          *(void *)std::chrono::system_clock::time_point v82 = v60;
          *(_WORD *)&v82[8] = 2080;
          *(void *)&v82[10] = v61;
          _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to set property %s on BT. Error: %s",  buf,  0x26u);
          if (SHIBYTE(v73) < 0) {
            operator delete(__p);
          }
          if (v69 < 0) {
            operator delete(v68[0]);
          }
        }
      }
    }

    std::string v54 = v66;
    if (v66)
    {
      uint64_t v62 = (unint64_t *)&v66->__shared_owners_;
      do
        unint64_t v56 = __ldaxr(v62);
      while (__stlxr(v56 - 1, v62));
      goto LABEL_92;
    }
  }

void sub_2E64C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, __int128 buf, __int128 a21, __int16 a22, __int16 a23, int a24, uint64_t a25)
{
  if (a2)
  {
    if (v26 < 0) {
      operator delete(v25);
    }
    if (a11)
    {
      p_shared_owners = (unint64_t *)&a11->__shared_owners_;
      do
        unint64_t v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
        std::__shared_weak_count::__release_weak(a11);
      }
    }

    if (a2 == 3)
    {
      unsigned int v31 = __cxa_begin_catch(a1);
      os_log_t v32 = (os_log_t *)sub_138E8(13);
      int v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        int v34 = v31[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a21) = 1024;
        DWORD1(a21) = v34;
        WORD4(a21) = 2080;
        *(void *)((char *)&a21 + 10) = "";
        a23 = 1024;
        a24 = 176;
        _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).",  (uint8_t *)&buf,  0x28u);
      }
    }

    else
    {
      uint64_t v35 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v36 = v35;
        uint64_t v37 = (os_log_t *)sub_138E8(13);
        uint64_t v38 = *v37;
        if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
        {
          uint64_t v39 = (*(uint64_t (**)(void *))(*(void *)v36 + 16LL))(v36);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a21) = 2080;
          *(void *)((char *)&a21 + 4) = v39;
          WORD6(a21) = 2080;
          *(void *)((char *)&a21 + 14) = "";
          HIWORD(a24) = 1024;
          LODWORD(a25) = 176;
          _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).",  (uint8_t *)&buf,  0x2Cu);
        }
      }

      else
      {
        uint64_t v40 = (os_log_t *)sub_138E8(13);
        uint64_t v41 = *v40;
        if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a21) = 2080;
          *(void *)((char *)&a21 + 4) = "";
          WORD6(a21) = 1024;
          *(_DWORD *)((char *)&a21 + 14) = 176;
          _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).",  (uint8_t *)&buf,  0x22u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2E5E08LL);
  }

  _Unwind_Resume(a1);
}

void sub_2E6804()
{
}

void sub_2E6810()
{
}

void sub_2E681C()
{
}

void sub_2E682C()
{
}

uint64_t sub_2E6834(int a1, AudioObjectID a2, uint64_t *a3, UInt32 a4, const void *a5, int *a6, uint64_t a7)
{
  uint64_t v14 = sub_138E8(13);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
  {
    uint64_t v15 = *(os_log_s **)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        v78.__cv_.__uint64_t sig = *a3;
        *(_DWORD *)v78.__cv_.__opaque = *((_DWORD *)a3 + 2);
        sub_613AC((uint64_t)&v79, (unsigned int *)&v78);
        uint64_t v16 = v79.__m_.__opaque[15] >= 0 ? &v79 : (std::mutex *)v79.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v69 = 1024;
        int v70 = 166;
        __int16 v71 = 2080;
        *(void *)uint64_t v72 = v16;
        *(_WORD *)&v72[8] = 1024;
        *(_DWORD *)&v72[10] = a2;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v79.__m_.__opaque[15] < 0) {
          operator delete((void *)v79.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v63 = a2;
  uint64_t v64 = *a3;
  int v65 = *((_DWORD *)a3 + 2);
  UInt32 v66 = a4;
  char v67 = a5;
  if (a1) {
    goto LABEL_10;
  }
  unint64_t v20 = sub_2E71D0((uint64_t)&v63);
  if (HIDWORD(v20)) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = *a6 == (_DWORD)v20;
  }
  int v22 = v21;
  uint64_t v23 = sub_138E8(13);
  uint64_t v24 = *(void *)(v23 + 8);
  if (v22)
  {
    if ((v24 & 1) == 0) {
      return 0LL;
    }
    uint64_t v19 = *(os_log_s **)v23;
    if (!*(void *)v23 || !os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v69 = 1024;
    int v70 = 191;
    __int16 v71 = 1024;
    *(_DWORD *)uint64_t v72 = a2;
    goto LABEL_27;
  }

  if ((v24 & 1) != 0)
  {
    uint64_t v37 = *(os_log_s **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        v78.__cv_.__uint64_t sig = *a3;
        *(_DWORD *)v78.__cv_.__opaque = *((_DWORD *)a3 + 2);
        sub_613AC((uint64_t)&v79, (unsigned int *)&v78);
        uint64_t v38 = v79.__m_.__opaque[15] >= 0 ? &v79 : (std::mutex *)v79.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v69 = 1024;
        int v70 = 199;
        __int16 v71 = 2080;
        *(void *)uint64_t v72 = v38;
        *(_WORD *)&v72[8] = 1024;
        *(_DWORD *)&v72[10] = a2;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v79.__m_.__opaque[15] < 0) {
          operator delete((void *)v79.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a3;
  uint64_t v25 = AudioObjectSetPropertyData(a2, &buf, a4, a5, 4u, a6);
  if (!(_DWORD)v25)
  {
LABEL_10:
    unint64_t v17 = sub_2E71D0((uint64_t)&v63);
    if (!HIDWORD(v17) && *a6 == (_DWORD)v17)
    {
      uint64_t v18 = sub_138E8(13);
      if ((*(_BYTE *)(v18 + 8) & 1) == 0) {
        return 0LL;
      }
      uint64_t v19 = *(os_log_s **)v18;
      if (!*(void *)v18 || !os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v69 = 1024;
      int v70 = 219;
      __int16 v71 = 1024;
      *(_DWORD *)uint64_t v72 = a2;
LABEL_27:
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
      return 0LL;
    }

    memset(v79.__m_.__opaque, 0, sizeof(v79.__m_.__opaque));
    v79.__m_.__uint64_t sig = 850045863LL;
    memset(v78.__cv_.__opaque, 0, sizeof(v78.__cv_.__opaque));
    v78.__cv_.__uint64_t sig = 1018212795LL;
    char v62 = 0;
    AudioObjectID v55 = a2;
    sub_7D684(&inClientData, a2, (AudioObjectPropertyAddress *)a3, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v62);
    while (1)
    {
      unint64_t v26 = sub_2E71D0((uint64_t)&v63);
      int v27 = v26;
      uint64_t v25 = HIDWORD(v26);
      if (HIDWORD(v26)) {
        goto LABEL_97;
      }
      if (*a6 == (_DWORD)v26) {
        break;
      }
      if (a7 <= 0)
      {
        uint64_t v49 = (os_log_t *)sub_138E8(13);
        uint64_t v25 = 2003329396LL;
        __int16 v50 = *v49;
        if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = *a3;
          int v57 = *((_DWORD *)a3 + 2);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v56);
          uint64_t v51 = "updated";
          if (!a1) {
            uint64_t v51 = "set";
          }
          int v52 = *a6;
          if (v59 >= 0) {
            p_lunint64_t k = &__lk;
          }
          else {
            p_lunint64_t k = __lk.__m_;
          }
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 248;
          __int16 v71 = 2080;
          *(void *)uint64_t v72 = v51;
          *(_WORD *)&v72[8] = 2080;
          *(void *)&v72[10] = p_lk;
          *(_WORD *)&v72[18] = 2080;
          *(void *)&v72[20] = v51;
          *(_WORD *)&v72[28] = 1024;
          BOOL v73 = v52 == v27;
          __int16 v74 = 1024;
          int v75 = 0;
          __int16 v76 = 1024;
          AudioObjectID v77 = v55;
          _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v59 < 0) {
            operator delete(__lk.__m_);
          }
        }

void sub_2E7150( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

unint64_t sub_2E71D0(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_36EF4((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        BOOL v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          AudioObjectID v12 = __p;
        }
        else {
          AudioObjectID v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        std::chrono::system_clock::time_point v28 = v11;
        __int16 v29 = 2080;
        unint64_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_2E7378(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E7398(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  UInt32 v3 = (void *)(**(void **)(a1 + 8) + 16LL);
  v99[0] = &off_47C428;
  uint64_t v100 = v99;
  sub_1F6154((uint64_t)v90, v3, (uint64_t)v99);
  unint64_t v4 = v100;
  if (v100 == v99)
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = v99;
    goto LABEL_5;
  }

  if (v100)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  char v6 = *(uint64_t **)a1;
  int v7 = *(int **)(a1 + 8);
  int v8 = (os_log_t *)sub_138E8(2);
  int v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = atomic_load((unsigned int *)(v2 + 536));
    sub_2CA1C(&v101, v10);
    int v11 = SHIBYTE(v103);
    AudioObjectID v12 = (void **)v101;
    sub_2CA1C(&__p, *(unsigned int *)(v2 + 844));
    AudioObjectID v13 = &v101;
    if (v11 < 0) {
      AudioObjectID v13 = v12;
    }
    if (v98 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 219;
    __int16 v105 = 2080;
    *(void *)uint64_t v106 = v13;
    *(_WORD *)&v106[8] = 2080;
    *(void *)&v106[10] = p_p;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Current profile: %s, current activation reason: %s",  buf,  0x26u);
    if (v98 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v103) < 0) {
      operator delete(v101);
    }
  }

  uint64_t v15 = (void *)(*(void *)v7 + 16LL);
  *(void *)AudioObjectPropertyAddress buf = &off_47C638;
  *(void *)&v106[4] = buf;
  sub_1F6154((uint64_t)&v101, v15, (uint64_t)buf);
  uint64_t v16 = *(uint8_t **)&v106[4];
  if (*(uint8_t **)&v106[4] == buf)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = buf;
  }

  else
  {
    if (!*(void *)&v106[4]) {
      goto LABEL_22;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_22:
  sub_370F60((uint64_t *)&__p, v2);
  uint64_t v18 = v97;
  CFNumberRef v94 = 0LL;
  uint64_t v95 = 0LL;
  int v93 = &v94;
  if (v97 == &__p)
  {
    char v19 = (unint64_t *)&v94;
  }

  else
  {
    do
    {
      sub_1039A8((uint64_t **)&v93, &v94, (unint64_t *)v18 + 2, (uint64_t *)v18 + 2);
      uint64_t v18 = (void **)v18[1];
    }

    while (v18 != &__p);
    char v19 = (unint64_t *)v93;
  }

  v91[0] = (uint64_t)v91;
  v91[1] = (uint64_t)v91;
  uint64_t v92 = 0LL;
  unint64_t v20 = (void **)v101;
  BOOL v21 = v101 == &v102 || v19 == (unint64_t *)&v94;
  if (!v21)
  {
    do
    {
      if (sub_D7370((unint64_t *)v20 + 4, v19 + 4))
      {
        int v22 = v20[1];
        if (v22)
        {
          do
          {
            unint64_t v20 = (void **)v22;
            int v22 = (void *)*v22;
          }

          while (v22);
        }

        else
        {
          do
          {
            __int16 v23 = v20;
            unint64_t v20 = (void **)v20[2];
          }

          while (*v20 != v23);
        }
      }

      else
      {
        if (sub_D7370(v19 + 4, (unint64_t *)v20 + 4))
        {
          int v24 = v20;
        }

        else
        {
          sub_85C34(v91, (uint64_t)v20[4], (uint64_t)v20[5]);
          __int16 v25 = v20[1];
          if (v25)
          {
            do
            {
              int v24 = v25;
              __int16 v25 = (void *)*v25;
            }

            while (v25);
          }

          else
          {
            do
            {
              int v24 = v20[2];
              BOOL v21 = *v24 == (void)v20;
              unint64_t v20 = (void **)v24;
            }

            while (!v21);
          }
        }

        int v26 = (unint64_t *)v19[1];
        if (v26)
        {
          do
          {
            char v19 = v26;
            int v26 = (unint64_t *)*v26;
          }

          while (v26);
        }

        else
        {
          do
          {
            __int16 v27 = v19;
            char v19 = (unint64_t *)v19[2];
          }

          while ((unint64_t *)*v19 != v27);
        }

        unint64_t v20 = (void **)v24;
      }
    }

    while (v20 != &v102 && v19 != (unint64_t *)&v94);
  }

  LODWORD(v28) = 0;
  int v29 = v7[2];
  if (v29 > 1668313714)
  {
    if (v29 == 1668703084 || v29 == 1668576377) {
      goto LABEL_77;
    }
    if (v29 != 1668313715) {
      goto LABEL_98;
    }
  }

  else if (v29 != 1668301427 && v29 != 1668309362 && v29 != 1668313666)
  {
    goto LABEL_98;
  }

  LODWORD(v28) = 0;
  int v33 = v7[3];
  if (v33 > 1919776354)
  {
    if (v33 > 1987081832)
    {
      if (v33 == 1987081839) {
        goto LABEL_77;
      }
      unsigned __int16 v35 = 30313;
    }

    else
    {
      if (v33 == 1919776355) {
        goto LABEL_77;
      }
      unsigned __int16 v35 = 26467;
    }

    int v34 = v35 | 0x76700000;
LABEL_76:
    if (v33 != v34) {
      goto LABEL_98;
    }
    goto LABEL_77;
  }

  if (v33 > 1768779618)
  {
    if (v33 == 1768779619) {
      goto LABEL_77;
    }
    int v34 = 1768781411;
    goto LABEL_76;
  }

  if (v33 != 1735222132)
  {
    int v34 = 1768057203;
    goto LABEL_76;
  }

LABEL_121:
    uint64_t v46 = 1918989668LL;
  }

  *(void *)AudioObjectPropertyAddress buf = &v91;
  sub_7A668((void ***)buf);
}

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v76 = v72;
  while (*((_DWORD *)v76 + 8) != 1869442665)
  {
    v76 += 64;
    if (v76 == v73) {
      goto LABEL_90;
    }
  }

void sub_2E7F30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, __int128 __p, __int128 a29, __int16 a30, __int16 a31, int a32, int a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (SBYTE7(a29) < 0) {
    operator delete((void *)__p);
  }
  CFRelease(v33);
  if (a2 == 3)
  {
    uint64_t v38 = __cxa_begin_catch(exception_object);
    uint64_t v39 = (os_log_t *)sub_138E8(13);
    os_log_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      int v41 = v38[2];
      LODWORD(__p) = 136316162;
      *(void *)((char *)&__p + 4) = "StandardUtilities.h";
      WORD6(__p) = 1024;
      *(_DWORD *)((char *)&__p + 14) = 429;
      WORD1(a29) = 1024;
      DWORD1(a29) = v41;
      WORD4(a29) = 2080;
      *(void *)((char *)&a29 + 10) = "";
      a31 = 1024;
      a32 = 210;
      int v42 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v43 = v40;
      uint32_t v44 = 40;
LABEL_17:
      _os_log_impl(&dword_0, v43, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&__p, v44);
    }
  }

  else
  {
    uint64_t v45 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v46 = v45;
      uint64_t v47 = (os_log_t *)sub_138E8(13);
      os_log_t v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = (*(uint64_t (**)(void *))(*(void *)v46 + 16LL))(v46);
        LODWORD(__p) = 136316162;
        *(void *)((char *)&__p + 4) = "StandardUtilities.h";
        WORD6(__p) = 1024;
        *(_DWORD *)((char *)&__p + 14) = 430;
        WORD1(a29) = 2080;
        *(void *)((char *)&a29 + 4) = v49;
        WORD6(a29) = 2080;
        *(void *)((char *)&a29 + 14) = "";
        HIWORD(a32) = 1024;
        a33 = 210;
        int v42 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v43 = v48;
        uint32_t v44 = 44;
        goto LABEL_17;
      }
    }

    else
    {
      __int16 v50 = (os_log_t *)sub_138E8(13);
      os_log_t v51 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p) = 136315906;
        *(void *)((char *)&__p + 4) = "StandardUtilities.h";
        WORD6(__p) = 1024;
        *(_DWORD *)((char *)&__p + 14) = 431;
        WORD1(a29) = 2080;
        *(void *)((char *)&a29 + 4) = "";
        WORD6(a29) = 1024;
        *(_DWORD *)((char *)&a29 + 14) = 210;
        int v42 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v43 = v51;
        uint32_t v44 = 34;
        goto LABEL_17;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2E7E84LL);
}

void sub_2E8400(uint64_t a1)
{
}

void sub_2E8460( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(sub_C590C(__dst, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(sub_C590C(__dst, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      char v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(sub_C590C(__dst, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        char v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      __int16 v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(sub_C590C(__dst, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        char v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2E8430LL);
}

void *sub_2E86A8()
{
  BOOL result = operator new(0x10uLL);
  void *result = &off_47C638;
  return result;
}

void sub_2E86CC(uint64_t a1, void *a2)
{
  *a2 = &off_47C638;
}

BOOL sub_2E86E4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 144) == 1885892706;
}

void *sub_2E8704()
{
  BOOL result = operator new(0x10uLL);
  void *result = &off_47C428;
  return result;
}

void sub_2E8728(uint64_t a1, void *a2)
{
  *a2 = &off_47C428;
}

BOOL sub_2E8740(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 144) == 1885892706;
}

uint64_t sub_2E8758(uint64_t a1, unsigned int a2, uint64_t a3, os_unfair_lock_s *a4)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)a4;
    uint64_t v6 = 0LL;
    uint64_t v7 = a2;
    locunint64_t k = a4 + 2;
    do
    {
      uint64_t v8 = sub_138E8(17);
      uint64_t v9 = sub_138E8(28);
      char v10 = 0;
      uint64_t v11 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1LL;
        if ((v14 & 1) != 0) {
          goto LABEL_9;
        }
      }

      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_9:
      uint64_t v15 = *(os_log_s **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(v58, *(unsigned int *)(a3 + 12 * v6));
        uint64_t v16 = a3;
        uint64_t v17 = v4;
        uint64_t v18 = v7;
        int v19 = v59;
        unint64_t v20 = (void **)v58[0];
        sub_23FE8((uint64_t)__p, lock);
        uint32_t v21 = v58;
        if (v19 < 0) {
          uint32_t v21 = v20;
        }
        if (v54 >= 0) {
          int v22 = __p;
        }
        else {
          int v22 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 850;
        *(_WORD *)&uint8_t buf[18] = 2080;
        *(void *)&buf[20] = v21;
        *(_WORD *)&_BYTE buf[28] = 2080;
        AudioObjectID v63 = v22;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Received notification (%s) from bluetooth audio device with UID %s",  buf,  0x26u);
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v7 = v18;
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        uint64_t v4 = v17;
        a3 = v16;
      }

      __int16 v23 = (_DWORD *)(a3 + 12 * v6);
      if (*v23 == 2004050279)
      {
        sub_2E573C(&v55, v4, 0x7461636Cu);
        if (v55)
        {
          (*(void (**)(uint64_t))(*(void *)v55 + 80LL))(v55);
          int v24 = operator new(4uLL);
          _DWORD *v24 = 1885892674;
          *(void *)AudioObjectPropertyAddress buf = v24;
          *(void *)&uint8_t buf[8] = v24 + 1;
          *(void *)&buf[16] = v24 + 1;
          strcpy(&buf[24], "cwdv");
          BYTE2(v63) = 0;
          int v64 = 3;
          v66[0] = 0LL;
          v66[1] = 0LL;
          int v65 = v66;
          int v67 = 44739242;
          CFTypeRef cf = 0LL;
          sub_3710DC((uint64_t *)__p, v4, (uint64_t)buf);
          for (uint64_t i = (void **)__p[1]; i != __p; uint64_t i = (void **)i[1])
          {
            sub_B8CBC((uint64_t *)&theString, (uint64_t *)i + 2, "", 826);
            CFStringRef v26 = theString;
            int v57 = 2004050279;
            sub_8ED70(v58, (uint64_t)&v57, 1LL);
            (*((void (**)(CFStringRef, void **))v26->isa + 56))(v26, v58);
            sub_68314(v58);
            __int16 v27 = v61;
            if (v61)
            {
              p_shared_owners = (unint64_t *)&v61->__shared_owners_;
              do
                unint64_t v29 = __ldaxr(p_shared_owners);
              while (__stlxr(v29 - 1, p_shared_owners));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }

          sub_85B80((uint64_t *)__p);
          if (cf) {
            CFRelease(cf);
          }
          sub_32C8C(v66[0]);
          if (*(void *)buf)
          {
            *(void *)&uint8_t buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
        }

        else
        {
          uint64_t v40 = sub_138E8(17);
          uint64_t v41 = sub_138E8(28);
          char v42 = 0;
          uint64_t v43 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v44 = *(void *)(v40 + 8);
          while (1)
          {
            uint64_t v45 = *(int *)&buf[4 * v43];
            char v46 = v42;
            if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
              break;
            }
            char v42 = 1;
            uint64_t v43 = 1LL;
            if ((v46 & 1) != 0) {
              goto LABEL_61;
            }
          }

          if ((v44 & v45) == 0) {
            uint64_t v40 = v41;
          }
LABEL_61:
          uint64_t v47 = *(os_log_s **)v40;
          if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 818;
            _os_log_impl(&dword_0, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching Bluetooth profile", buf, 0x12u);
          }
        }

        os_log_t v48 = v56;
        if (v56)
        {
          uint64_t v49 = (unint64_t *)&v56->__shared_owners_;
          do
            unint64_t v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }

      else if (*v23 == 1635148144)
      {
        sub_2E9678(v4);
      }

      else
      {
        uint64_t v30 = sub_138E8(17);
        uint64_t v31 = sub_138E8(28);
        char v32 = 0;
        uint64_t v33 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v34 = *(void *)(v30 + 8);
        while (1)
        {
          uint64_t v35 = *(int *)&buf[4 * v33];
          char v36 = v32;
          if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
            break;
          }
          char v32 = 1;
          uint64_t v33 = 1LL;
          if ((v36 & 1) != 0) {
            goto LABEL_43;
          }
        }

        if ((v34 & v35) == 0) {
          uint64_t v30 = v31;
        }
LABEL_43:
        uint64_t v37 = *(os_log_s **)v30;
        if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(v58, *v23);
          if (v59 >= 0) {
            uint64_t v38 = v58;
          }
          else {
            uint64_t v38 = (void **)v58[0];
          }
          (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v4 + 128LL))(&theString, v4);
          sub_48E98(__p, theString);
          if (v54 >= 0) {
            uint64_t v39 = __p;
          }
          else {
            uint64_t v39 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 865;
          *(_WORD *)&uint8_t buf[18] = 2080;
          *(void *)&buf[20] = v38;
          *(_WORD *)&_BYTE buf[28] = 2080;
          AudioObjectID v63 = v39;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unhandled notification (%s) from bluetooth audio device with UID %s",  buf,  0x26u);
          if (v54 < 0) {
            operator delete(__p[0]);
          }
          sub_19DFC((uint64_t)&theString);
          if (v59 < 0) {
            operator delete(v58[0]);
          }
        }
      }

      ++v6;
    }

    while (v6 != v7);
  }

  return 0LL;
}

void sub_2E8D4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, char a30)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2E8E1C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v27 = sub_138E8(17);
    uint64_t v28 = sub_138E8(28);
    char v29 = 0;
    uint64_t v30 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = *(int *)&buf[4 * v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1LL;
      if ((v33 & 1) != 0) {
        goto LABEL_43;
      }
    }

    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_43:
    os_log_t v48 = *(os_log_s **)v27;
    if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 876;
      _os_log_impl(&dword_0, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d inNumberAddresses is 0.", buf, 0x12u);
    }
  }

  if (!a4)
  {
    uint64_t v34 = sub_138E8(17);
    uint64_t v35 = sub_138E8(28);
    char v36 = 0;
    uint64_t v37 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v38 = *(void *)(v34 + 8);
    while (1)
    {
      uint64_t v39 = *(int *)&buf[4 * v37];
      char v40 = v36;
      if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
        break;
      }
      char v36 = 1;
      uint64_t v37 = 1LL;
      if ((v40 & 1) != 0) {
        goto LABEL_48;
      }
    }

    if ((v38 & v39) == 0) {
      uint64_t v34 = v35;
    }
LABEL_48:
    uint64_t v49 = *(os_log_s **)v34;
    if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 877;
      _os_log_impl(&dword_0, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d inClientData is NULL.", buf, 0x12u);
    }
  }

  if (!a3)
  {
    uint64_t v41 = sub_138E8(17);
    uint64_t v42 = sub_138E8(28);
    char v43 = 0;
    uint64_t v44 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v45 = *(void *)(v41 + 8);
    while (1)
    {
      uint64_t v46 = *(int *)&buf[4 * v44];
      char v47 = v43;
      if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
        break;
      }
      char v43 = 1;
      uint64_t v44 = 1LL;
      if ((v47 & 1) != 0) {
        goto LABEL_53;
      }
    }

    if ((v45 & v46) == 0) {
      uint64_t v41 = v42;
    }
LABEL_53:
    unint64_t v50 = *(os_log_s **)v41;
    if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 878;
      _os_log_impl(&dword_0, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d inAddresses is NULL.", buf, 0x12u);
    }
  }

  if (a3 && a2 && a4)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = (void *)(a4 + 632);
    uint64_t v9 = a2;
    uint64_t v51 = a3;
    do
    {
      uint64_t v10 = a3 + 12 * v7;
      *(void *)AudioObjectPropertyAddress buf = *(void *)v10;
      *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v10 + 8);
      if (sub_67420(v8, (uint64_t)buf))
      {
        if (*(_DWORD *)v10 == 1987013732)
        {
          uint64_t v11 = sub_138E8(17);
          uint64_t v12 = sub_138E8(28);
          char v13 = 0;
          uint64_t v14 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v15 = *(void *)(v11 + 8);
          while (1)
          {
            uint64_t v16 = *(int *)&buf[4 * v14];
            char v17 = v13;
            if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
              break;
            }
            char v13 = 1;
            uint64_t v14 = 1LL;
            if ((v17 & 1) != 0) {
              goto LABEL_16;
            }
          }

          if ((v15 & v16) == 0) {
            uint64_t v11 = v12;
          }
LABEL_16:
          uint64_t v18 = *(os_log_s **)v11;
          if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v19 = a3 + 12 * v7;
            sub_2CA1C(v54, *(unsigned int *)(v19 + 4));
            int v20 = v55;
            uint32_t v21 = (void **)v54[0];
            int v22 = *(_DWORD *)(v19 + 4);
            int v23 = *(_DWORD *)(a3 + 12 * v7 + 8);
            sub_2CA1C(__p, HIDWORD(qword_49CF30));
            int v24 = v54;
            if (v20 < 0) {
              int v24 = v21;
            }
            os_log_t v25 = __p;
            if (v53 < 0) {
              os_log_t v25 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316930;
            *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
            __int16 v57 = 1024;
            int v58 = 892;
            __int16 v59 = 2080;
            uint64_t v60 = v24;
            __int16 v61 = 1024;
            int v62 = v22;
            __int16 v63 = 1024;
            int v64 = v23;
            __int16 v65 = 2080;
            UInt32 v66 = v25;
            __int16 v67 = 1024;
            int v68 = HIDWORD(qword_49CF30);
            __int16 v69 = 1024;
            int v70 = dword_49CF38;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Received callback from HAL. (selector: kAudioDevicePropertyVolumeDecibels; scope: '%s' (%u); ele"
              "ment: %u) translated to (selector: kRegistrationDeviceInitiatedVolumeChangeAddress; scope: '%s' (%u); element: %u).",
              buf,
              0x3Eu);
            if (v53 < 0) {
              operator delete(__p[0]);
            }
            a3 = v51;
            if (v55 < 0) {
              operator delete(v54[0]);
            }
          }
        }

        *(void *)AudioObjectPropertyAddress buf = *(void *)v10;
        *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v10 + 8);
        sub_67564(v8, (unsigned int *)buf);
      }

      ++v7;
    }

    while (v7 != v9);
  }

  return 0LL;
}

void sub_2E9348( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, __int128 buf, __int128 a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a2 == 3)
  {
    CFStringRef v26 = __cxa_begin_catch(exception_object);
    uint64_t v27 = sub_138E8(17);
    uint64_t v28 = sub_138E8(28);
    char v29 = 0;
    uint64_t v30 = 0LL;
    *(void *)&AudioObjectPropertyAddress buf = v23;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = *((int *)&buf + v30);
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1LL;
      if ((v33 & 1) != 0) {
        goto LABEL_16;
      }
    }

    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_16:
    char v43 = *(os_log_s **)v27;
    if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      int v44 = v26[2];
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "Device_BluetoothUnified_Aspen.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 899;
      WORD1(a23) = 1024;
      DWORD1(a23) = v44;
      uint64_t v45 = "%25s:%-5d CAException thrown during notification: %d.";
      uint64_t v46 = v43;
      uint32_t v47 = 24;
LABEL_33:
      _os_log_impl(&dword_0, v46, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, v47);
    }
  }

  else
  {
    uint64_t v34 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v35 = v34;
      uint64_t v36 = sub_138E8(17);
      uint64_t v37 = sub_138E8(28);
      char v38 = 0;
      uint64_t v39 = 0LL;
      *(void *)&AudioObjectPropertyAddress buf = v23;
      uint64_t v40 = *(void *)(v36 + 8);
      while (1)
      {
        uint64_t v41 = *((int *)&buf + v39);
        char v42 = v38;
        if (((v40 & v41) != 0) != ((*(void *)(v37 + 8) & v41) != 0)) {
          break;
        }
        char v38 = 1;
        uint64_t v39 = 1LL;
        if ((v42 & 1) != 0) {
          goto LABEL_25;
        }
      }

      if ((v40 & v41) == 0) {
        uint64_t v36 = v37;
      }
LABEL_25:
      char v55 = *(os_log_s **)v36;
      if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        uint64_t v56 = (*(uint64_t (**)(void *))(*(void *)v35 + 16LL))(v35);
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "Device_BluetoothUnified_Aspen.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 903;
        WORD1(a23) = 2080;
        *(void *)((char *)&a23 + 4) = v56;
        uint64_t v45 = "%25s:%-5d Standard Library exception thrown during notification: %s.";
        uint64_t v46 = v55;
        uint32_t v47 = 28;
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t v48 = sub_138E8(17);
      uint64_t v49 = sub_138E8(28);
      char v50 = 0;
      uint64_t v51 = 0LL;
      *(void *)&AudioObjectPropertyAddress buf = v23;
      uint64_t v52 = *(void *)(v48 + 8);
      while (1)
      {
        uint64_t v53 = *((int *)&buf + v51);
        char v54 = v50;
        if (((v52 & v53) != 0) != ((*(void *)(v49 + 8) & v53) != 0)) {
          break;
        }
        char v50 = 1;
        uint64_t v51 = 1LL;
        if ((v54 & 1) != 0) {
          goto LABEL_30;
        }
      }

      if ((v52 & v53) == 0) {
        uint64_t v48 = v49;
      }
LABEL_30:
      __int16 v57 = *(os_log_s **)v48;
      if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "Device_BluetoothUnified_Aspen.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 907;
        uint64_t v45 = "%25s:%-5d Unknown exception thrown during notification.";
        uint64_t v46 = v57;
        uint32_t v47 = 18;
        goto LABEL_33;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2E9088LL);
}

void sub_2E9678(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 848);
  UInt32 v3 = operator new(8uLL);
  *UInt32 v3 = a1;
  dispatch_async_f(v2, v3, (dispatch_function_t)sub_2E96B8);
}

void sub_2E96B8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  AudioObjectID v2 = *(_DWORD *)(*a1 + 268);
  uint64_t inAddress = 0x676C6F6261766170LL;
  LODWORD(inAddress_8) = 0;
  if (AudioObjectHasProperty(v2, (const AudioObjectPropertyAddress *)&inAddress))
  {
    LOBYTE(outData) = 0;
    char v118 = 0;
    *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
    uint8_t buf[8] = 0;
    buf[16] = 0;
    sub_8D840((uint64_t)&outData);
    UInt32 ioDataSize = sub_37408(v2, (const AudioObjectPropertyAddress *)&inAddress, 0, 0LL);
    if (ioDataSize)
    {
      std::string outData = 0LL;
      *(_DWORD *)AudioObjectPropertyAddress buf = AudioObjectGetPropertyData( v2,  (const AudioObjectPropertyAddress *)&inAddress,  0,  0LL,  &ioDataSize,  &outData);
      if (!*(_DWORD *)buf)
      {
        UInt32 v3 = outData;
        std::mutex v115 = outData;
        sub_158524(&v114, (CFTypeRef *)&v115);
        buf[16] = 1;
        *(void *)&uint8_t buf[8] = v114;
        if (v3) {
          CFRelease(v3);
        }
      }
    }
  }

  else
  {
    LOBYTE(outData) = 0;
    char v118 = 0;
    *(_DWORD *)AudioObjectPropertyAddress buf = 2003332927;
    uint8_t buf[8] = 0;
    buf[16] = 0;
    sub_8D840((uint64_t)&outData);
  }

  __p.__r_.__value_.__s.__data_[0] = 0;
  __p.__r_.__value_.__s.__data_[8] = 0;
  if (buf[16])
  {
    __p.__r_.__value_.__r.__words[0] = *(void *)&buf[8];
    *(void *)&uint8_t buf[8] = 0LL;
    __p.__r_.__value_.__s.__data_[8] = 1;
  }

  sub_8D840((uint64_t)&buf[8]);
  if (!__p.__r_.__value_.__s.__data_[8])
  {
    sub_8D840((uint64_t)&__p);
    goto LABEL_13;
  }

  uint64_t v4 = (const void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0LL;
  sub_8D840((uint64_t)&__p);
  if (!v4)
  {
LABEL_13:
    int v111 = 0LL;
    __int16 v112 = 0LL;
    uint64_t v113 = 0LL;
    goto LABEL_14;
  }

  sub_2EA480((uint64_t)&v111, v4);
  CFRelease(v4);
LABEL_14:
  uint64_t v5 = sub_138E8(17);
  uint64_t v6 = sub_138E8(28);
  char v7 = 0;
  uint64_t v8 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1LL;
    if ((v11 & 1) != 0) {
      goto LABEL_20;
    }
  }

  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_20:
  uint64_t v12 = *(os_log_s **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_23FE8((uint64_t)&outData, (os_unfair_lock_t)(v1 + 8));
    int v13 = v119;
    uint64_t v14 = outData;
    sub_8F640(&__p, v111, v112);
    p_std::string outData = &outData;
    if (v13 < 0) {
      p_std::string outData = (void ***)v14;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 708;
    __int16 v123 = 2080;
    unsigned int v124 = p_outData;
    __int16 v125 = 2080;
    uint64_t v126 = p_p;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device (%s), new profiles: %s", buf, 0x26u);
    if (v119 < 0) {
      operator delete(outData);
    }
  }

  char v17 = v111;
  BOOL v109 = v112;
  if (v111 != v112)
  {
    uint64_t v18 = (void *)(v1 + 552);
    uint64_t v19 = (std::mutex *)(v1 + 568);
    uint64_t v108 = v1;
    while (1)
    {
      uint64_t v20 = *v18;
      if (*v18)
      {
        unsigned int v21 = *v17;
        int v22 = v18;
        do
        {
          unsigned int v23 = *(_DWORD *)(v20 + 32);
          BOOL v24 = v23 >= v21;
          if (v23 >= v21) {
            os_log_t v25 = (uint64_t *)v20;
          }
          else {
            os_log_t v25 = (uint64_t *)(v20 + 8);
          }
          if (v24) {
            int v22 = (void *)v20;
          }
          uint64_t v20 = *v25;
        }

        while (*v25);
        if (v22 != v18 && v21 >= *((_DWORD *)v22 + 8)) {
          goto LABEL_107;
        }
      }

      uint64_t v26 = sub_138E8(17);
      uint64_t v27 = sub_138E8(28);
      char v28 = 0;
      uint64_t v29 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v30 = *(void *)(v26 + 8);
      while (1)
      {
        uint64_t v31 = *(int *)&buf[4 * v29];
        char v32 = v28;
        if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
          break;
        }
        char v28 = 1;
        uint64_t v29 = 1LL;
        if ((v32 & 1) != 0) {
          goto LABEL_50;
        }
      }

      if ((v30 & v31) == 0) {
        uint64_t v26 = v27;
      }
LABEL_50:
      char v33 = *(os_log_s **)v26;
      if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&outData, *v17);
        uint64_t v34 = &outData;
        if (v119 < 0) {
          uint64_t v34 = (void ***)outData;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 720;
        __int16 v123 = 2080;
        unsigned int v124 = v34;
        _os_log_impl(&dword_0, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Profile added: %s", buf, 0x1Cu);
        if (v119 < 0) {
          operator delete(outData);
        }
      }

      uint64_t v35 = *v17;
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 848));
      switch((_DWORD)v35)
      {
        case 0x7473636F:
          std::string::size_type size = (std::string::size_type)operator new(0x38uLL);
          *(void *)(size + 8) = 0LL;
          *(void *)(size + 16) = 0LL;
          *(void *)std::string::size_type size = off_47C548;
          *(void *)(size + 24) = &off_478810;
          std::string::size_type v37 = size + 24;
          *(void *)(size + 32) = v1;
          *(void *)(size + 40) = 0LL;
          LODWORD(outData) = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120LL))(v1);
          strcpy(buf, "psllbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          unint64_t v38 = sub_36EF4((AudioObjectID *)&outData, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
          *((void *)&v41 + 1) = v39;
          *(void *)&__int128 v41 = v38;
          uint64_t v40 = v41 >> 32;
          BOOL v42 = (v40 & 0xFF00000000LL) == 0 || (_DWORD)v40 == 0;
          char v43 = !v42;
          *(_BYTE *)(size + 48) = v43;
          break;
        case 0x746C6561:
          std::string::size_type size = (std::string::size_type)operator new(0x30uLL);
          *(void *)(size + 8) = 0LL;
          *(void *)(size + 16) = 0LL;
          *(void *)std::string::size_type size = off_47C580;
          *(void *)(size + 24) = &off_47C5B8;
          std::string::size_type v37 = size + 24;
          *(void *)(size + 32) = v1;
          *(void *)(size + 40) = 0LL;
          break;
        case 0x7461636C:
          std::string::size_type size = (std::string::size_type)operator new(0xE8uLL);
          *(void *)(size + 8) = 0LL;
          *(void *)(size + 16) = 0LL;
          *(void *)std::string::size_type size = off_47C490;
          *(void *)(size + 24) = off_47C4C8;
          std::string::size_type v37 = size + 24;
          *(void *)(size + 32) = v1;
          *(void *)(size + 40) = 0LL;
          *(void *)(size + 48) = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
          *(_WORD *)(size + 56) = 257;
          std::shared_timed_mutex::shared_timed_mutex((std::shared_timed_mutex *)(size + 64));
          break;
        default:
          uint64_t v52 = sub_138E8(17);
          uint64_t v53 = sub_138E8(28);
          char v54 = 0;
          uint64_t v55 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v56 = *(void *)(v52 + 8);
          while (1)
          {
            uint64_t v57 = *(int *)&buf[4 * v55];
            char v58 = v54;
            if (((v56 & v57) != 0) != ((*(void *)(v53 + 8) & v57) != 0)) {
              break;
            }
            char v54 = 1;
            uint64_t v55 = 1LL;
            if ((v58 & 1) != 0) {
              goto LABEL_101;
            }
          }

          if ((v56 & v57) == 0) {
            uint64_t v52 = v53;
          }
LABEL_101:
          __int16 v69 = *(os_log_s **)v52;
          if (v69 && os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(&outData, v35);
            int v70 = &outData;
            if (v119 < 0) {
              int v70 = (void ***)outData;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 763;
            __int16 v123 = 2080;
            unsigned int v124 = v70;
            _os_log_impl(&dword_0, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unsupported Bluetooth profile %s", buf, 0x1Cu);
            if (v119 < 0) {
              operator delete(outData);
            }
          }

          goto LABEL_107;
      }

      __p.__r_.__value_.__r.__words[0] = v37;
      __p.__r_.__value_.__l.__size_ = size;
      int v44 = v19;
      std::mutex::lock(v19);
      uint64_t v45 = (uint64_t *)*v18;
      uint64_t v46 = (uint64_t **)v18;
      uint32_t v47 = (uint64_t **)v18;
      if (*v18)
      {
        while (1)
        {
          while (1)
          {
            uint32_t v47 = (uint64_t **)v45;
            unsigned int v48 = *((_DWORD *)v45 + 8);
            uint64_t v45 = *v47;
            uint64_t v46 = v47;
            if (!*v47) {
              goto LABEL_75;
            }
          }

          uint64_t v45 = v47[1];
          if (!v45)
          {
            uint64_t v46 = v47 + 1;
            goto LABEL_75;
          }
        }

        uint64_t v49 = v47;
        uint64_t v19 = v44;
        uint64_t v1 = v108;
      }

      else
      {
LABEL_75:
        uint64_t v49 = operator new(0x38uLL);
        *((_DWORD *)v49 + 8) = v35;
        *((void *)v49 + 5) = 0LL;
        *((void *)v49 + 6) = 0LL;
        *(void *)uint64_t v49 = 0LL;
        *((void *)v49 + 1) = 0LL;
        *((void *)v49 + 2) = v47;
        *uint64_t v46 = (uint64_t *)v49;
        uint64_t v50 = **(void **)(v108 + 544);
        uint64_t v51 = (uint64_t *)v49;
        if (v50)
        {
          *(void *)(v108 + 544) = v50;
          uint64_t v51 = *v46;
        }

        sub_7A420(*(uint64_t **)(v108 + 552), v51);
        ++*(void *)(v108 + 560);
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        std::string::size_type v37 = __p.__r_.__value_.__r.__words[0];
        uint64_t v19 = v44;
        uint64_t v1 = v108;
        if (!__p.__r_.__value_.__l.__size_) {
          goto LABEL_86;
        }
      }

      __int16 v59 = (unint64_t *)(size + 8);
      do
        unint64_t v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
LABEL_86:
      __int16 v61 = (std::__shared_weak_count *)*((void *)v49 + 6);
      *((void *)v49 + 5) = v37;
      *((void *)v49 + 6) = size;
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          unint64_t v63 = __ldaxr(p_shared_owners);
        while (__stlxr(v63 - 1, p_shared_owners));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }

      std::mutex::unlock(v19);
      buf[0] = 0;
      *(void *)&uint8_t buf[8] = 0LL;
      __int16 v65 = (_DWORD *)sub_546E0();
      sub_1008E4(v65);
      (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 16LL))(__p.__r_.__value_.__r.__words[0]);
      sub_E9064(buf);
      UInt32 v66 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        __int16 v67 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }

void sub_2EA358( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2EA480(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  int Count = CFArrayGetCount((CFArrayRef)a2);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = 0LL;
  sub_14A1F0((void **)a1, Count);
  if (Count >= 1)
  {
    CFIndex v6 = 0LL;
    uint64_t v7 = Count;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a2, v6);
      unsigned int v9 = sub_8D7E0(ValueAtIndex);
      unsigned int v10 = v9;
      uint64_t v12 = *(unsigned int **)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = *(unsigned int **)a1;
        uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 2;
        unint64_t v16 = v15 + 1;
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_7A890(v18);
        }
        else {
          uint64_t v19 = 0LL;
        }
        uint64_t v20 = (unsigned int *)(v18 + 4 * v15);
        *uint64_t v20 = v10;
        int v13 = v20 + 1;
        while (v12 != v14)
        {
          unsigned int v21 = *--v12;
          *--uint64_t v20 = v21;
        }

        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = v18 + 4 * v19;
        if (v14) {
          operator delete(v14);
        }
      }

      else
      {
        unsigned int *v12 = v9;
        int v13 = v12 + 1;
      }

      *(void *)(a1 + 8) = v13;
      ++v6;
    }

    while (v6 != v7);
  }

void sub_2EA5F4(_Unwind_Exception *a1)
{
}

void sub_2EA628(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47C580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2EA638(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47C580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2EA658(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2EA668(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47C548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2EA678(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47C548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2EA698(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2EA6A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47C490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2EA6B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47C490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2EA6D8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2EA6E8(uint64_t a1)
{
  uint64_t v1 = ***(void ***)(a1 + 32);
  AudioObjectID v2 = (std::mutex *)(v1 + 568);
  std::mutex::lock((std::mutex *)(v1 + 568));
  UInt32 v3 = *(void **)(v1 + 544);
  uint64_t v4 = (void *)(v1 + 552);
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(void))(*(void *)v3[5] + 24LL))(v3[5]);
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          CFIndex v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          CFIndex v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          UInt32 v3 = v6;
        }

        while (!v7);
      }

      UInt32 v3 = v6;
    }

    while (v6 != v4);
  }

  std::mutex::unlock(v2);
}

void sub_2EAA00(_Unwind_Exception *a1)
{
}

void sub_2EAA0C(_Unwind_Exception *a1)
{
}

void sub_2EAA18(_Unwind_Exception *a1)
{
}

void sub_2EAA24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2EAA40(dispatch_queue_t *__p)
{
  if (*((_BYTE *)__p + 8)) {
    dispatch_queue_set_specific(*__p, "VirtualAudioQueueKey", 0LL, 0LL);
  }
  operator delete(__p);
}

uint64_t sub_2EAA80(uint64_t a1)
{
  *(void *)a1 = off_47C1F8;
  AudioObjectID v2 = *(dispatch_object_s **)(a1 + 848);
  if (v2) {
    dispatch_release(v2);
  }
  sub_32C8C(*(void **)(a1 + 808));
  sub_32C8C(*(void **)(a1 + 784));
  sub_67FE8(a1 + 720);
  *(void *)(a1 + 632) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 656));
  std::mutex::~mutex((std::mutex *)(a1 + 568));
  sub_6600C(*(void **)(a1 + 552));
  return sub_36F1E0(a1);
}

void **sub_2EAAF8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (!a4)
  {
    unint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v17 = 136315394;
      *(void *)&v17[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v18 = 1024;
      int v19 = 952;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v17, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 != 3)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v17 = 136315394;
      *(void *)&v17[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v18 = 1024;
      int v19 = 953;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v17, 0x12u);
    }

    unint64_t v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }

  uint64_t v4 = a4[10];
  uint64_t v5 = a4[11];
  if (v5)
  {
    CFIndex v6 = (unint64_t *)(v5 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = (dispatch_queue_s *)a4[106];
  unsigned int v9 = operator new(0x10uLL);
  void *v9 = v4;
  v9[1] = v5;
  *(void *)uint64_t v17 = 0LL;
  dispatch_async_f(v8, v9, (dispatch_function_t)sub_2EAD14);
  return sub_ADC0C((void **)v17);
}

void sub_2EACE4(_Unwind_Exception *a1)
{
}

void **sub_2EAD14(void *a1)
{
  uint64_t v27 = a1;
  AudioObjectID v2 = (std::__shared_weak_count *)a1[1];
  if (!v2) {
    return sub_ADC0C(&v27);
  }
  UInt32 v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return sub_ADC0C(&v27);
  }
  uint64_t v4 = v3;
  uint64_t v5 = *a1;
  if (v5)
  {
    CFIndex v6 = (os_log_t *)sub_138E8(17);
    unint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = atomic_load((unsigned int *)(v5 + 536));
      sub_2CA1C(__p, v8);
      unsigned int v9 = v29 >= 0 ? __p : (void **)__p[0];
      unsigned int v10 = atomic_load((unsigned int *)(v5 + 840));
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v31 = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 966;
      __int16 v34 = 2080;
      uint64_t v35 = v9;
      __int16 v36 = 1024;
      unsigned int v37 = v10;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Changing %s route, active count: %u", buf, 0x22u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    if (!atomic_load((unsigned int *)(v5 + 840)))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v5 + 848));
      unsigned int v12 = 1952539500;
      uint64_t v13 = v5 + 552;
      uint64_t v14 = *(void *)(v5 + 552);
      if (!v14) {
        goto LABEL_23;
      }
      uint64_t v15 = v5 + 552;
      uint64_t v16 = *(void *)(v5 + 552);
      do
      {
        unsigned int v17 = *(_DWORD *)(v16 + 32);
        BOOL v18 = v17 >= 0x7461636C;
        if (v17 >= 0x7461636C) {
          int v19 = (uint64_t *)v16;
        }
        else {
          int v19 = (uint64_t *)(v16 + 8);
        }
        if (v18) {
          uint64_t v15 = v16;
        }
        uint64_t v16 = *v19;
      }

      while (*v19);
      if (v15 == v13 || *(_DWORD *)(v15 + 32) > 0x7461636Cu) {
LABEL_23:
      }
        uint64_t v15 = v5 + 552;
      if (!v14) {
        goto LABEL_35;
      }
      uint64_t v20 = v5 + 552;
      do
      {
        unsigned int v21 = *(_DWORD *)(v14 + 32);
        BOOL v22 = v21 >= 0x7473636F;
        if (v21 >= 0x7473636F) {
          unsigned int v23 = (uint64_t *)v14;
        }
        else {
          unsigned int v23 = (uint64_t *)(v14 + 8);
        }
        if (v22) {
          uint64_t v20 = v14;
        }
        uint64_t v14 = *v23;
      }

      while (*v23);
      if (v20 == v13 || *(_DWORD *)(v20 + 32) > 0x7473636Fu) {
LABEL_35:
      }
        uint64_t v20 = v5 + 552;
      if (v15 != v13)
      {
        sub_2E5CA0(v5, 1952539500LL, 0x72646973u);
LABEL_40:
        atomic_store(v12, (unsigned int *)(v5 + 536));
        goto LABEL_41;
      }

      if (v20 != v13)
      {
        unsigned int v12 = 1953719151;
        sub_2E5CA0(v5, 1953719151LL, 0x72646973u);
        goto LABEL_40;
      }
    }
  }

void sub_2EAF7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }

  sub_ADC0C(&a9);
  _Unwind_Resume(a1);
}

void *sub_2EAFC8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFIndex v6 = result;
    BOOL result = sub_7DC44(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_2EB024(_Unwind_Exception *exception_object)
{
  UInt32 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void **sub_2EB040(uint64_t a1)
{
  unsigned int v9 = (void *)a1;
  sub_339C0();
  sub_33A2C(&v12, *(void *)a1);
  if (v12)
  {
    sub_33AE4(v12, -1431655765 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2), *(void *)(a1 + 8));
  }

  else
  {
    CFIndex v6 = (os_log_t *)sub_138E8(14);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
    {
      sub_613AC((uint64_t)__p, (unsigned int *)(a1 + 32));
      size_t v8 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v15 = "ListenerRelayManager.cpp";
      __int16 v16 = 1024;
      int v17 = 31;
      __int16 v18 = 2080;
      int v19 = v8;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "%25s:%-5d Asynchronous listener callback fired for expired relay for property '%s'. Ignoring.",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  AudioObjectID v2 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return sub_91C10(&v9);
}

void sub_2EB1BC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  if (a2 == 3)
  {
    BOOL v24 = __cxa_begin_catch(a1);
    unint64_t v25 = (os_log_t *)sub_138E8(13);
    os_log_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v27 = v24[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v27;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      char v28 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v29 = v26;
      uint32_t v30 = 40;
LABEL_18:
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
    }
  }

  else
  {
    uint64_t v31 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v32 = v31;
      int v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v32 + 16LL))(v32);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v35;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        char v28 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v29 = v34;
        uint32_t v30 = 44;
        goto LABEL_18;
      }
    }

    else
    {
      __int16 v36 = (os_log_t *)sub_138E8(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        char v28 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v29 = v37;
        uint32_t v30 = 34;
        goto LABEL_18;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2EB0D8LL);
}

uint64_t sub_2EB454()
{
  qword_49CF50 = (uint64_t)&qword_49CF50;
  qword_49CF58 = (uint64_t)&qword_49CF50;
  qword_49CF60 = 0LL;
  uint64_t result = sub_B1F7C((uint64_t)&qword_49CF68, (uint64_t)"ObjectListenerRelayMutex");
  qword_49CFC0 = 1LL;
  return result;
}

void sub_2EB498(_Unwind_Exception *a1)
{
}

uint64_t sub_2EB4B0(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(qword_49CF68 + 16))(&qword_49CF68);
  for (uint64_t i = (uint64_t *)qword_49CF58; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == &qword_49CF50)
    {
      *a1 = 0LL;
      a1[1] = 0LL;
      goto LABEL_12;
    }

    unsigned __int8 v12 = atomic_load((unsigned __int8 *)(i[2] + 60));
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = i[2];
      if (*(void *)(v13 + 16) == a2
        && *(_DWORD *)(v13 + 28) == a3[1]
        && *(_DWORD *)(v13 + 24) == *a3
        && *(_DWORD *)(v13 + 32) == a3[2]
        && *(void *)(v13 + 40) == a4
        && *(void *)(v13 + 48) == a5)
      {
        break;
      }
    }
  }

  uint64_t v14 = i[3];
  *a1 = v13;
  a1[1] = v14;
  if (v14)
  {
    uint64_t v15 = (unint64_t *)(v14 + 8);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

void sub_2EB5C8(std::__shared_weak_count *a1)
{
}

void sub_2EB5DC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_2EB5F0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v10 = (*(uint64_t (**)(uint64_t *))(qword_49CF68 + 16))(&qword_49CF68);
  sub_2EB4B0((uint64_t *)&v23, a1, a2, a3, a4);
  uint64_t v11 = (uint64_t)v23;
  if (v23)
  {
    *a5 = *v23;
    int v12 = *(_DWORD *)(v11 + 8);
    int v13 = v12 - 1;
    *(_DWORD *)(v11 + 8) = v12 - 1;
    if (v12 == 1)
    {
      sub_2EB784(v11);
      unsigned int v14 = 0;
    }

    else
    {
      unsigned int v14 = v13 & 0xFFFFFF00;
    }

    int v19 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    int v13 = v13;
    uint64_t v18 = 0x100000000LL;
    if (v10) {
LABEL_18:
    }
      (*(void (**)(uint64_t *))(qword_49CF68 + 24))(&qword_49CF68);
  }

  else
  {
    uint64_t v15 = v24;
    if (v24)
    {
      unint64_t v16 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    uint64_t v18 = 0LL;
    int v13 = 0;
    unsigned int v14 = 0;
    if (v10) {
      goto LABEL_18;
    }
  }

  return v18 | v14 & 0xFFFFFF00 | v13;
}

void sub_2EB74C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  }
  _Unwind_Resume(a1);
}

void sub_2EB784(uint64_t a1)
{
  AudioObjectID v2 = pthread_self();
  UInt32 v3 = (_opaque_pthread_t *)atomic_load(qword_49CF78);
  if (!pthread_equal(v2, v3))
  {
    CFIndex v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ListenerRelayManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 178;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: relayListMutex is not held by current thread.",  buf,  0x12u);
      }
    }
  }

  if (*(_DWORD *)(a1 + 56))
  {
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0LL;
    unint64_t v4 = (uint64_t *)qword_49CF58;
    if ((uint64_t *)qword_49CF58 != &qword_49CF50)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t *)v4[1];
        if (v4[2] == a1) {
          break;
        }
LABEL_10:
        unint64_t v4 = v5;
        if (v5 == &qword_49CF50) {
          goto LABEL_18;
        }
      }

      while (v5 != &qword_49CF50)
      {
        if (v5[2] != a1)
        {
          sub_1176BC((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_49CF50, v4, v5);
          uint64_t v5 = (uint64_t *)v5[1];
          goto LABEL_10;
        }

        uint64_t v5 = (uint64_t *)v5[1];
      }

      sub_1176BC((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_49CF50, v4, &qword_49CF50);
    }

void sub_2EBAD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_2EBD68(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 32);
  AudioObjectID v2 = *(void **)v1;
  uint64_t v3 = *(void *)v1 + 24LL;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  uint64_t v5 = *(void *)(v1 + 8);
  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  _DWORD v8[2] = 0LL;
  CFIndex v6 = (void *)v2[1];
  if (v6 != v2)
  {
    while (1)
    {
      uint64_t v7 = (void *)v6[1];
      if (v6[2] == v5) {
        break;
      }
LABEL_8:
      CFIndex v6 = v7;
      if (v7 == v2) {
        goto LABEL_11;
      }
    }

    while (v7 != v2)
    {
      if (v7[2] != v5)
      {
        sub_1176BC((uint64_t)v8, v8, (uint64_t)v2, v6, v7);
        uint64_t v7 = (void *)v7[1];
        goto LABEL_8;
      }

      uint64_t v7 = (void *)v7[1];
    }

    sub_1176BC((uint64_t)v8, v8, (uint64_t)v2, v6, v2);
  }

void sub_2EBE84(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_2EBE9C( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    JUMPOUT(0x2EBE8CLL);
  }
  if (a2 == 3)
  {
    char v15 = __cxa_begin_catch(a1);
    unint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(sub_C590C(__dst, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(sub_C590C(__dst, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      int v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    BOOL v22 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      unint64_t v23 = v22;
      BOOL v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(sub_C590C(__dst, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        int v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      int v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(sub_C590C(__dst, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        int v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2EBE50LL);
}

void sub_2EC09C()
{
}

void sub_2EC0A8()
{
}

void sub_2EC0B4()
{
}

void sub_2EC0C4()
{
}

void sub_2EC0D0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_86630(a1);
  operator delete(v1);
}

void sub_2EC0E4(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a2[36];
  uint64_t v7 = (os_log_t *)sub_138E8(16);
  size_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, v6);
    uint64_t v9 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)int v27 = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = 575;
    __int16 v28 = 2080;
    char v29 = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Looking for Software command for port %s", buf, 0x1Cu);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_9B2E0((os_unfair_lock_s *)a1, (uint64_t)a2, a3);
  int v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      return;
    }
    std::__shared_weak_count::__release_weak(v10);
  }

  uint64_t v11 = (os_log_t *)sub_138E8(16);
  int v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 864);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)int v27 = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = 583;
    __int16 v28 = 1024;
    LODWORD(v29) = v13;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Looking for software command in secondary streams (%u)",  buf,  0x18u);
  }

  uint64_t v14 = a1 + 848;
  uint64_t v15 = *(void *)(a1 + 856);
  if (v15 == v14)
  {
LABEL_17:
    unint64_t v16 = (os_log_t *)sub_138E8(16);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, v6);
      if (v25 >= 0) {
        int v18 = __p;
      }
      else {
        int v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)int v27 = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&v27[8] = 1024;
      *(_DWORD *)&v27[10] = 595;
      __int16 v28 = 2080;
      char v29 = v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Software command for port %s not found in primary or secondary streams",  buf,  0x1Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }

    *a3 = 0LL;
    a3[1] = 0LL;
  }

  else
  {
    while (1)
    {
      sub_85A90((uint64_t *)__p, (void *)(*(void *)(v15 + 16) + 112LL));
      sub_9DCB8((uint64_t *)buf, __p);
      sub_85B80((uint64_t *)__p);
      __p[0] = a2;
      sub_1BB88((uint64_t *)buf);
      uint64_t v15 = *(void *)(v15 + 8);
      if (v15 == v14) {
        goto LABEL_17;
      }
    }

    uint64_t v19 = *(void *)(v15 + 16);
    uint64_t v21 = *(void *)(v19 + 152);
    uint64_t v20 = *(void *)(v19 + 160);
    *a3 = v21;
    a3[1] = v20;
    if (v20)
    {
      BOOL v22 = (unint64_t *)(v20 + 16);
      do
        unint64_t v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }

    sub_1BB88((uint64_t *)buf);
  }

void sub_2EC3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

unint64_t sub_2EC408(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = a2[36];
  uint64_t v5 = (os_log_t *)sub_138E8(16);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, v4);
    uint64_t v7 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)uint64_t v19 = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = 604;
    __int16 v20 = 2080;
    uint64_t v21 = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Looking for stream for port %s", buf, 0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v8 = sub_9B58C(a1, (uint64_t)a2);
  if (!v9)
  {
    uint64_t v10 = a1 + 848;
    uint64_t v11 = *(void *)(a1 + 856);
    if (v11 == v10)
    {
LABEL_12:
      int v12 = (os_log_t *)sub_138E8(16);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, v4);
        if (v17 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)uint64_t v19 = "AggregateDevice_BroadcastFanout.cpp";
        *(_WORD *)&v19[8] = 1024;
        *(_DWORD *)&v19[10] = 621;
        __int16 v20 = 2080;
        uint64_t v21 = v14;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d stream for port %s not found in primary or secondary streams",  buf,  0x1Cu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }

      return v8 & 0xFFFFFFFFFFFFFF00LL;
    }

    else
    {
      while (1)
      {
        sub_85A90((uint64_t *)__p, (void *)(*(void *)(v11 + 16) + 112LL));
        sub_9DCB8((uint64_t *)buf, __p);
        sub_85B80((uint64_t *)__p);
        __p[0] = a2;
        sub_1BB88((uint64_t *)buf);
        uint64_t v11 = *(void *)(v11 + 8);
        if (v11 == v10) {
          goto LABEL_12;
        }
      }

      uint64_t v8 = *(void *)(v11 + 16);
      sub_1BB88((uint64_t *)buf);
    }
  }

  return v8;
}

void sub_2EC67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_2EC6A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, double *a7, uint64_t a8)
{
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 456);
  if (!v14)
  {
    os_log_t v34 = (os_log_t *)sub_138E8(13);
    uint64_t v35 = *v34;
    if (*v34)
    {
      if (os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_BroadcastFanout.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 643;
        _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The client IO proc must exist for IO to run.",  (uint8_t *)&buf,  0x12u);
      }
    }
  }

  uint64_t v15 = sub_45C8(a1 + 688, 1, 0);
  uint64_t v84 = v15;
  unsigned int v16 = a6[3];
  unsigned int v17 = *(_DWORD *)(v15 + 64);
  int v18 = *(unsigned int **)(a1 + 896);
  uint64_t v19 = *(void *)(a1 + 712);
  __int16 v20 = *(AudioBufferList **)(v19 + 160);
  uint64_t v21 = *(AudioBufferList **)(v19 + 176);
  int v89 = v21;
  outOutputData = v20;
  uint64_t v22 = *(void *)(v15 + 192);
  uint64_t v23 = v16 / v17;
  if (!*(_BYTE *)(v22 + 448) && !*(void *)(v22 + 584))
  {
    if (*(void *)(v22 + 672)) {
      BOOL v36 = *(_DWORD *)(v15 + 8) == 1819304813;
    }
    else {
      BOOL v36 = 0;
    }
    if (v36) {
      goto LABEL_5;
    }
LABEL_22:
    int v33 = 0;
    *((void *)v18 + 2) = *((void *)a6 + 2);
    v18[3] = v16;
    goto LABEL_23;
  }

  if (*(_DWORD *)(v15 + 8) != 1819304813) {
    goto LABEL_22;
  }
LABEL_5:
  uint64_t v24 = *v18;
  if ((_DWORD)v24)
  {
    int v25 = *(_DWORD *)(v15 + 24) * v23;
    uint64_t v26 = v18 + 3;
    do
    {
      *uint64_t v26 = v25;
      v26 += 4;
      --v24;
    }

    while (v24);
  }

  uint64_t mNumberBuffers = v20->mNumberBuffers;
  if ((_DWORD)mNumberBuffers)
  {
    UInt32 v28 = *(_DWORD *)(v15 + 104) * v23;
    p_mDataByteSize = &v20->mBuffers[0].mDataByteSize;
    do
    {
      UInt32 *p_mDataByteSize = v28;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }

    while (mNumberBuffers);
  }

  uint64_t v30 = v21->mNumberBuffers;
  if ((_DWORD)v30)
  {
    UInt32 v31 = *(_DWORD *)(v15 + 144) * v23;
    __int16 v32 = &v21->mBuffers[0].mDataByteSize;
    do
    {
      *__int16 v32 = v31;
      v32 += 4;
      --v30;
    }

    while (v30);
  }

  int v33 = 1;
LABEL_23:
  if (*(_BYTE *)(a1 + 104))
  {
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    *(_BYTE *)(a1 + 104) = 0;
  }

  UInt32 v37 = v18[3];
  inInputData = (AudioBufferList *)v18;
  v14(a8, a3, 0LL, a5);
  BOOL v38 = *(void *)(a1 + 864) != 0LL;
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 448LL))(a1) & 1) == 0)
  {
    if (*a6)
    {
      unint64_t v39 = 0LL;
      uint64_t v40 = (void **)(a6 + 4);
      do
      {
        bzero(*v40, *((unsigned int *)v40 - 1));
        ++v39;
        v40 += 2;
      }

      while (v39 < *a6);
    }

    BOOL v38 = 0;
    int v33 = 0;
  }

  uint64_t v41 = *(void *)(v84 + 192);
  if (v41) {
    char v42 = (*(uint64_t (**)(void))(*(void *)v41 + 80LL))(*(void *)(v84 + 192));
  }
  else {
    char v42 = 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 448LL))(a1) || inInputData->mBuffers[0].mDataByteSize)
  {
    *(_DWORD *)(a1 + 632) = 0;
    goto LABEL_36;
  }

  unsigned int v69 = *(_DWORD *)(a1 + 632);
  if (v69 >> 6 < 0x177) {
    char v70 = 1;
  }
  else {
    char v70 = v42;
  }
  if ((v70 & 1) != 0)
  {
    int v71 = v69 + v23;
LABEL_89:
    *(_DWORD *)(a1 + 632) = v71;
    goto LABEL_90;
  }

  if (v69 <= (int)v23 + 24000)
  {
    sub_3057C(v41);
    for (uint64_t i = *(void *)(a1 + 880); i != a1 + 872; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v73 = sub_45C8(i + 16, 1, 0);
      sub_3057C(*(void *)(v73 + 192));
    }

    BOOL v38 = 0;
    int v33 = 0;
    int v71 = *(_DWORD *)(a1 + 632) + 2 * v23;
    goto LABEL_89;
  }

  BOOL v38 = 0;
  int v33 = 0;
LABEL_90:
  if ((v33 & 1) != 0 || v38)
  {
    unint64_t v80 = inInputData->mNumberBuffers;
    if ((_DWORD)v80)
    {
      for (uint64_t j = 0LL; j != v80; ++j)
        inInputData->mBuffers[j].mDataByteSize = v37;
      unint64_t v82 = 0LL;
      p_mData = &inInputData->mBuffers[0].mData;
      do
      {
        if (*p_mData)
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          unint64_t v80 = inInputData->mNumberBuffers;
        }

        ++v82;
        p_mData += 2;
      }

      while (v82 < v80);
    }
  }

  else
  {
    if ((*(_BYTE *)(a1 + 80) & 4) != 0)
    {
      unint64_t v74 = inInputData->mNumberBuffers;
      if ((_DWORD)v74)
      {
        for (uint64_t k = 0LL; k != v74; ++k)
          inInputData->mBuffers[k].mDataByteSize = v37;
        unint64_t v76 = 0LL;
        char v77 = &inInputData->mBuffers[0].mData;
        do
        {
          if (*v77)
          {
            bzero(*v77, *((unsigned int *)v77 - 1));
            unint64_t v74 = inInputData->mNumberBuffers;
          }

          ++v76;
          v77 += 2;
        }

        while (v76 < v74);
      }
    }

    if (*a6)
    {
      unint64_t v78 = 0LL;
      uint64_t v79 = (void **)(a6 + 4);
      do
      {
        bzero(*v79, *((unsigned int *)v79 - 1));
        ++v78;
        v79 += 2;
      }

      while (v78 < *a6);
    }

    BOOL v38 = 0;
    int v33 = 0;
  }

void sub_2ECFC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_2ED028(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = sub_138E8(16);
  uint64_t v8 = sub_138E8(22);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_7:
  uint64_t v14 = *(os_log_s **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = a4 ? "En" : "Dis";
    unsigned int v16 = (_DWORD)a2 ? "output" : "input";
    sub_7D084(__p, v16);
    unsigned int v17 = SHIBYTE(v72) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
    __int16 v74 = 1024;
    int v75 = 350;
    __int16 v76 = 2080;
    char v77 = v15;
    __int16 v78 = 2080;
    uint64_t v79 = v17;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d %sabling %s stream on aggregate.", buf, 0x26u);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v18 = sub_138E8(16);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
  {
    uint64_t v19 = *(os_log_s **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        __int16 v20 = (_DWORD)a2 ? "output" : "input";
        sub_7D084(__p, v20);
        uint64_t v21 = SHIBYTE(v72) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 351;
        __int16 v76 = 2080;
        char v77 = v21;
        __int16 v78 = 1024;
        LODWORD(v79) = a4;
        _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d inDirection: %s; inIsUsed: %u.", buf, 0x22u);
        if (SHIBYTE(v72) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  AudioObjectID v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_155918((uint64_t)__p, a2, v22, a1[52]);
  if ((_DWORD)a2) {
    uint64_t v23 = 103LL;
  }
  else {
    uint64_t v23 = 100LL;
  }
  if ((_DWORD)a2) {
    uint64_t v24 = a1 + 103;
  }
  else {
    uint64_t v24 = a1 + 100;
  }
  if (v24[1] - a1[v23] != *((_DWORD *)v72 + 2))
  {
    int v25 = (os_log_t *)sub_138E8(16);
    uint64_t v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        sub_155E78(&v70, (uint64_t)__p);
        int v27 = (v70.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v70 : (std::string *)v70.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 356;
        __int16 v76 = 2080;
        char v77 = v27;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d streamUsage: %s.", buf, 0x1Cu);
      }
    }
  }

  if (v24[1] - a1[v23] != *((_DWORD *)v72 + 2))
  {
    UInt32 v28 = (os_log_t *)sub_138E8(16);
    char v29 = *v28;
    if (*v28)
    {
      if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        sub_22FD80(&v70, (char *)a1[v23], (char *)v24[1]);
        uint64_t v30 = (v70.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v70 : (std::string *)v70.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 357;
        __int16 v76 = 2080;
        char v77 = v30;
        _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d usageMask: %s.", buf, 0x1Cu);
      }
    }
  }

  uint64_t v31 = *((unsigned int *)v72 + 2);
  if (v24[1] - a1[v23] != v31)
  {
    uint64_t v54 = (os_log_t *)sub_138E8(13);
    UInt32 v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v74 = 1024;
      int v75 = 358;
      _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL aggregate device reported a different number of streams than our internal usage template.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "The HAL aggregate device reported a different number of streams than our internal usage template.");
LABEL_118:
  }

  if ((_DWORD)v31) {
    goto LABEL_58;
  }
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 88))(a1, a2))
  {
    uint64_t v60 = (os_log_t *)sub_138E8(13);
    BOOL v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v74 = 1024;
      int v75 = 359;
      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL aggregate device reported no streams, yet we have one.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL aggregate device reported no streams, yet we have one.");
    goto LABEL_118;
  }

  if (!*((_DWORD *)v72 + 2) && a4)
  {
    unint64_t v62 = (os_log_t *)sub_138E8(13);
    unint64_t v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v74 = 1024;
      int v75 = 360;
      _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Attempt to enable stream when there aren't any.",  buf,  0x12u);
    }

    uint64_t v64 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v64 = &off_4865A0;
    v64[2] = 1852797029;
  }

void sub_2EDA50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, void *a25)
{
}

uint64_t sub_2EDAE8(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, 0LL);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
  if (v2)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315650;
      uint64_t v12 = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v13 = 1024;
      int v14 = 338;
      __int16 v15 = 1024;
      int v16 = v2;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): The helper function InitializeStreamUsage() handles only zero-stream A ggregateDevice_BroadcastFanout instances, and this one has %u input streams.",  (uint8_t *)&v11,  0x18u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C( exception,  "The helper function InitializeStreamUsage() handles only zero-stream AggregateDevice_BroadcastFanout instances, an d this one has %u input streams.");
  }

  if (!v3)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    char v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v13 = 1024;
      int v14 = 339;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): The helper function InitializeStreamUsage() requires at least one output stream.",  (uint8_t *)&v11,  0x12u);
    }

    uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C(v10, "The helper function InitializeStreamUsage() requires at least one output stream.");
  }

  (*(void (**)(uint64_t, void, void, void))(*(void *)a1 + 584LL))(a1, 0LL, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 584LL))(a1, 1LL, 0LL, 1LL);
}

void sub_2EDCE4(_Unwind_Exception *a1)
{
}

void sub_2EDD04(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8 || byte_48CDA9)
  {
    sub_31158((char **)v15, (uint64_t)a1, a2);
    *a3 = *(void *)&v15[0];
    int v17 = 0;
    uint64_t v6 = sub_45C8((uint64_t)(a1 + 86), 1, 0);
    __int128 v7 = *(_OWORD *)(v6 + 16);
    v15[0] = *(_OWORD *)v6;
    v15[1] = v7;
    uint64_t v16 = *(void *)(v6 + 32);
    v14[0] = a3;
    v14[1] = (uint64_t *)a2;
    v14[2] = (uint64_t *)v15;
    uint64_t v8 = (uint64_t *)a1[68];
    if ((uint64_t *)a1[69] == v8)
    {
      int v11 = (os_log_t *)sub_138E8(13);
      uint64_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v19 = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v20 = 1024;
        int v21 = 556;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Expected at least one output stream.  Found 0.",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Expected at least one output stream.  Found 0.");
    }

    sub_2EED2C(v14, *v8, &v17);
    char v9 = a1 + 106;
    for (uint64_t i = (void *)a1[107]; i != v9; uint64_t i = (void *)i[1])
      sub_2EED2C(v14, i[2], &v17);
  }

void sub_2EDED8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2EDF30(uint64_t a1)
{
  uint64_t v2 = sub_45C8(a1 + 688, 1, 0);
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v82 = *(_OWORD *)v2;
  __int128 v83 = v3;
  uint64_t v84 = *(void *)(v2 + 32);
  if (!*(void *)(a1 + 864))
  {
    sub_2D9D4((uint64_t)buf, *(_DWORD **)(v2 + 160), 0);
    sub_2DB30(a1 + 896, (unsigned int **)buf);
    sub_2DBF4((unsigned int **)buf);
    return;
  }

  uint64_t v4 = *(void *)(v2 + 192);
  if (!*(_BYTE *)(v4 + 448) && !*(void *)(v4 + 584))
  {
    if (*(void *)(v4 + 672)) {
      BOOL v6 = *(_DWORD *)(v2 + 8) == 1819304813;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      goto LABEL_5;
    }
LABEL_11:
    uint64_t v5 = 2LL;
    goto LABEL_12;
  }

  if (*(_DWORD *)(v2 + 8) != 1819304813) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v5 = 3LL;
LABEL_12:
  __int128 v7 = *(_DWORD **)(v2 + 160);
  if (v7 && *v7)
  {
    sub_2F114((unsigned int **)buf, (uint64_t)&v82, v7[3]);
    sub_2DB30(a1 + 896, (unsigned int **)buf);
    goto LABEL_26;
  }

  char v8 = BYTE12(v82);
  if ((BYTE12(v82) & 0x20) != 0)
  {
    unsigned int v9 = HIDWORD(v83);
    if (!HIDWORD(v83)) {
      goto LABEL_24;
    }
  }

  else
  {
    unsigned int v9 = 1;
  }

  uint64_t v10 = calloc(1uLL, (16 * v9) | 8);
  if (v10)
  {
    _DWORD *v10 = v9;
    int v11 = v10 + 2;
    *(void *)AudioBufferList buf = v10;
    *(_DWORD *)&uint8_t buf[8] = 2;
    int v12 = HIDWORD(v83);
    if ((v8 & 0x20) != 0) {
      int v12 = 1;
    }
    uint64_t v13 = v9;
    do
    {
      int *v11 = v12;
      v11 += 4;
      --v13;
    }

    while (v13);
    goto LABEL_25;
  }

void sub_2EEB70(_Unwind_Exception *a1)
{
}

void sub_2EED2C(uint64_t **a1, uint64_t a2, int *a3)
{
  if (v27[2])
  {
    uint64_t v6 = *a1[1];
    if ((v6 & 4) != 0)
    {
      uint64_t v7 = sub_138E8(16);
      uint64_t v8 = sub_138E8(40);
      char v9 = 0;
      uint64_t v10 = 0LL;
      *(void *)AudioBufferList buf = 0x100000002LL;
      uint64_t v11 = *(void *)(v7 + 8);
      while (1)
      {
        uint64_t v12 = (int)buf[v10];
        char v13 = v9;
        if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
          break;
        }
        char v9 = 1;
        uint64_t v10 = 1LL;
        if ((v13 & 1) != 0)
        {
          if ((v11 & 1) == 0) {
            goto LABEL_14;
          }
          goto LABEL_11;
        }
      }

      if ((v11 & v12) == 0) {
        uint64_t v7 = v8;
      }
      if ((*(void *)(v7 + 8) & 1) != 0)
      {
LABEL_11:
        uint64_t v14 = *(os_log_s **)v7;
        if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_BroadcastFanout.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 536;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitor for secondary ouput streams",  (uint8_t *)buf,  0x12u);
        }
      }

void sub_2EF014(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2EF040(uint64_t a1, void *a2, uint64_t a3, __int128 *a4, void **a5, int a6, uint64_t a7)
{
  if (!a2[2])
  {
    uint64_t v43 = (os_log_t *)sub_138E8(13);
    UInt32 v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 211;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1;
      _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): AggregateDevice_BroadcastFanout has fewer than %u output devices",  buf,  0x18u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "AggregateDevice_BroadcastFanout has fewer than %u output devices");
  }

  uint64_t v7 = (uint64_t)a2;
  uint64_t v53 = &v53;
  uint64_t v54 = (uint64_t *)&v53;
  uint64_t v55 = 0LL;
  char v9 = (void *)a2[1];
  if (v9 != a2)
  {
    do
    {
      uint64_t v10 = v9 + 2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[7] - v9[6]) >> 3) >= 2)
      {
        uint64_t v11 = (os_log_t *)sub_138E8(13);
        uint64_t v12 = *v11;
        if (*v11)
        {
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
          {
            sub_1D4C48(&v57, (uint64_t)(v9 + 2));
            char v13 = &v57;
            if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              char v13 = (std::string *)v57.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioBufferList buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 217;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v13;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: AggregateDevice_BroadcastFanout does not support multiple ports: %s",  buf,  0x1Cu);
          }
        }
      }

      std::string::size_type v14 = *v10;
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)*v10 + 192LL))(*v10))
      {
        v57.__r_.__value_.__r.__words[0] = v14;
        sub_2EF79C(buf, (uint64_t)&v57, 1LL);
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        *uint64_t v15 = 0LL;
        v15[1] = 0LL;
        _OWORD v15[2] = (uint64_t)(v15 + 2);
        v15[3] = (uint64_t)(v15 + 2);
        v15[4] = 0LL;
        uint64_t v16 = *(void *)&buf[16];
        if (*(void *)&buf[16])
        {
          uint64_t v18 = *(void *)buf;
          uint64_t v17 = *(uint64_t **)&buf[8];
          uint64_t v19 = **(void **)&buf[8];
          *(void *)(v19 + 8) = *(void *)(*(void *)buf + 8LL);
          **(void **)(v18 + 8) = v19;
          uint64_t v20 = v15[2];
          *(void *)(v20 + 8) = v17;
          *uint64_t v17 = v20;
          _OWORD v15[2] = v18;
          *(void *)(v18 + 8) = v15 + 2;
          v15[4] = v16;
          *(void *)&buf[16] = 0LL;
        }

        uint64_t v21 = v54;
        *uint64_t v15 = (uint64_t)&v53;
        v15[1] = (uint64_t)v21;
        *uint64_t v21 = (uint64_t)v15;
        uint64_t v22 = v55 + 1;
        uint64_t v54 = v15;
      }

      else
      {
        v57.__r_.__value_.__r.__words[0] = v14;
        sub_2EF79C(buf, (uint64_t)&v57, 1LL);
        char v23 = operator new(0x28uLL);
        void *v23 = 0LL;
        v23[1] = 0LL;
        v23[2] = v23 + 2;
        v23[3] = v23 + 2;
        v23[4] = 0LL;
        uint64_t v24 = *(void *)&buf[16];
        if (*(void *)&buf[16])
        {
          uint64_t v26 = *(void *)buf;
          uint64_t v25 = *(void **)&buf[8];
          uint64_t v27 = **(void **)&buf[8];
          *(void *)(v27 + 8) = *(void *)(*(void *)buf + 8LL);
          **(void **)(v26 + 8) = v27;
          uint64_t v28 = v23[2];
          *(void *)(v28 + 8) = v25;
          *uint64_t v25 = v28;
          v23[2] = v26;
          *(void *)(v26 + 8) = v23 + 2;
          v23[4] = v24;
          *(void *)&buf[16] = 0LL;
        }

        uint64_t v29 = (uint64_t)v53;
        void *v23 = v53;
        v23[1] = &v53;
        *(void *)(v29 + 8) = v23;
        uint64_t v22 = v55 + 1;
        uint64_t v53 = v23;
      }

      uint64_t v55 = v22;
      sub_68314(buf);
      char v9 = (void *)v9[1];
    }

    while (v9 != (void *)v7);
  }

  uint64_t v30 = (os_log_t *)sub_138E8(16);
  uint64_t v31 = *v30;
  if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 232;
    _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Built topology for broadcast fanout aggregate device:",  buf,  0x12u);
  }

  uint64_t v32 = v54;
  uint64_t v52 = a1;
  if (v54 != (uint64_t *)&v53)
  {
    int v33 = 0;
    uint64_t v51 = v7;
    do
    {
      os_log_t v34 = (os_log_t *)sub_138E8(16);
      uint64_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 238;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v33;
        _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Stack %u:", buf, 0x18u);
      }

      for (uint64_t i = v32[3]; (uint64_t *)i != v32 + 2; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v37 = *(os_unfair_lock_s **)(i + 16);
        BOOL v38 = (os_log_t *)sub_138E8(16);
        uint64_t v39 = *v38;
        if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
        {
          int v40 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v37->_os_unfair_lock_opaque + 120LL))(v37);
          sub_23FE8((uint64_t)&v57, v37 + 2);
          unsigned int v41 = &v57;
          if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unsigned int v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 243;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v40;
          *(_WORD *)&_BYTE buf[24] = 2080;
          *(void *)&buf[26] = v41;
          _os_log_impl(&dword_0, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d   - PhysicalDevice ID %u: %s", buf, 0x22u);
        }
      }

      ++v33;
      uint64_t v32 = (uint64_t *)v32[1];
      uint64_t v7 = v51;
      a1 = v52;
    }

    while (v32 != (uint64_t *)&v53);
  }

  sub_22A9D0(a1, (uint64_t)&v53, v7, a3, a4, a5, a6, a7);
  sub_AB45C((uint64_t *)&v53);
  *(void *)a1 = off_47C6D8;
  sub_2EF82C((char **)(a1 + 800), 0, a1 + 424);
  sub_2EF82C((char **)(a1 + 824), 1, a1 + 424);
  *(void *)(a1 + 848) = a1 + 848;
  *(void *)(a1 + 856) = a1 + 848;
  *(void *)(a1 + 864) = 0LL;
  *(void *)(a1 + 872) = a1 + 872;
  *(void *)(a1 + 880) = a1 + 872;
  *(void *)(a1 + 896) = 0LL;
  *(void *)(a1 + 888) = 0LL;
  *(_DWORD *)(a1 + 904) = 0;
  return a1;
}

void sub_2EF62C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char a25)
{
}

void *sub_2EF6E0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_47C960;
  return result;
}

void sub_2EF704(uint64_t a1, void *a2)
{
  *a2 = &off_47C960;
}

BOOL sub_2EF71C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = v8;
  int v3 = *(_DWORD *)(v7 + 144);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return v3 == 1886613611;
}

void *sub_2EF79C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 8 * a3;
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = operator new(0x18uLL);
      uint64_t v9 = *(void *)(a2 + 8 * v5);
      v8[1] = a1;
      _DWORD v8[2] = v9;
      void *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      uint64_t v7 = v8;
      v6 -= 8LL;
    }

    while (v6);
  }

  return a1;
}

void sub_2EF818(_Unwind_Exception *a1)
{
}

void sub_2EF82C(char **a1, int a2, uint64_t a3)
{
  uint64_t v4 = (os_log_t *)sub_138E8(16);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = "input";
    uint64_t v73 = "AggregateDevice_BroadcastFanout.cpp";
    *(_DWORD *)AudioBufferList buf = 136315650;
    if (a2) {
      uint64_t v6 = "output";
    }
    __int16 v74 = 1024;
    int v75 = 64;
    __int16 v76 = 2080;
    char v77 = (void *)v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Building StreamUsageMask for %s.", buf, 0x1Cu);
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v68 = a1;
  a1[2] = 0LL;
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7 != a3)
  {
    uint64_t v8 = 0LL;
    unint64_t v66 = 0LL;
    unint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    char v13 = a2;
    while (1)
    {
      uint64_t v63 = v7;
      uint64_t v64 = v7 + 16;
      uint64_t v14 = *(void *)(v7 + 24);
      if (v14 != v7 + 16) {
        break;
      }
      uint64_t v18 = v12;
LABEL_126:
      uint64_t v7 = *(void *)(v63 + 8);
      uint64_t v12 = v18;
      if (v7 == a3) {
        goto LABEL_129;
      }
    }

    while (1)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      int v16 = (*(uint64_t (**)(uint64_t, BOOL))(*(void *)v15 + 88LL))(v15, v13 != 0);
      uint64_t v65 = v14;
      if (v16) {
        break;
      }
      uint64_t v18 = v12;
LABEL_123:
      uint64_t v14 = *(void *)(v65 + 8);
      uint64_t v12 = v18;
      if (v14 == v64) {
        goto LABEL_126;
      }
    }

    int v17 = 0;
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 192LL))(v15))
      {
        if ((a2 & 1) != 0)
        {
          if (v12 >= v8)
          {
            uint64_t v30 = &v12[-v10];
            uint64_t v31 = (uint64_t)&v12[-v10 + 1];
            if (v31 < 0) {
              sub_7A87C();
            }
            else {
              size_t v32 = v31;
            }
            if (v32) {
              int v33 = (char *)operator new(v32);
            }
            else {
              int v33 = 0LL;
            }
            int v42 = &v30[(void)v33];
            v30[(void)v33] = 1;
            uint64_t v18 = &v30[(void)v33 + 1];
            if (v12 != (char *)v10)
            {
              uint64_t v43 = &v12[~v10];
              do
              {
                char v44 = *--v12;
                (v43--)[(void)v33] = v44;
              }

              while (v12 != (char *)v10);
              int v42 = v33;
            }

            uint64_t v8 = &v33[v32];
            void *v68 = v42;
            v68[1] = v18;
            v68[2] = v8;
            if (v10) {
              operator delete((void *)v10);
            }
            unint64_t v66 = (unint64_t)v8;
            unint64_t v9 = (unint64_t)v8;
            unint64_t v10 = (unint64_t)v42;
            unint64_t v11 = (unint64_t)v8;
          }

          else
          {
            char *v12 = 1;
            unint64_t v66 = (unint64_t)v8;
            unint64_t v9 = (unint64_t)v8;
            unint64_t v11 = (unint64_t)v8;
            uint64_t v18 = v12 + 1;
          }

          char v13 = a2;
          goto LABEL_120;
        }

        if (v17)
        {
          uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 312LL))(v15);
          if ((v20 & 0xFF00000000LL) != 0) {
            int v21 = v20;
          }
          else {
            int v21 = -1;
          }
          if (v17 == v21)
          {
            if ((unint64_t)v12 >= v9)
            {
              uint64_t v22 = &v12[-v10];
              uint64_t v23 = (uint64_t)&v12[-v10 + 1];
              if (v23 < 0) {
                sub_7A87C();
              }
              if (2 * (v9 - v10) > v23) {
                uint64_t v23 = 2 * (v9 - v10);
              }
              if (v9 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v24 = v23;
              }
              if (v24) {
                uint64_t v25 = (char *)operator new(v24);
              }
              else {
                uint64_t v25 = 0LL;
              }
              unint64_t v36 = &v22[(void)v25];
              v22[(void)v25] = 0;
              uint64_t v18 = &v22[(void)v25 + 1];
              if (v12 != (char *)v10)
              {
                uint64_t v51 = &v12[~v10];
                do
                {
                  char v52 = *--v12;
                  (v51--)[(void)v25] = v52;
                }

                while (v12 != (char *)v10);
                goto LABEL_115;
              }

              goto LABEL_116;
            }
          }

          else if ((unint64_t)v12 >= v9)
          {
            char v45 = &v12[-v10];
            uint64_t v46 = (uint64_t)&v12[-v10 + 1];
            if (v46 < 0) {
              sub_7A87C();
            }
            if (2 * (v9 - v10) > v46) {
              uint64_t v46 = 2 * (v9 - v10);
            }
            if (v9 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v24 = v46;
            }
            if (v24) {
              uint64_t v25 = (char *)operator new(v24);
            }
            else {
              uint64_t v25 = 0LL;
            }
            unint64_t v36 = &v45[(void)v25];
            v45[(void)v25] = 0;
            uint64_t v18 = &v45[(void)v25 + 1];
            if (v12 != (char *)v10)
            {
              uint64_t v53 = &v12[~v10];
              do
              {
                char v54 = *--v12;
                (v53--)[(void)v25] = v54;
              }

              while (v12 != (char *)v10);
              goto LABEL_115;
            }

void sub_2EFF68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v26;
    operator delete(v26);
  }

  _Unwind_Resume(exception_object);
}

CFPropertyListRef sub_2EFFE4(CFStringRef key)
{
  if (byte_49D0D0)
  {
    CFPreferencesSynchronize(kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    byte_49D0D0 = 0;
  }

  return CFPreferencesCopyValue(key, kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
}

const void *sub_2F0064(const __CFString *a1)
{
  CFPropertyListRef v1 = sub_2EFFE4(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFArrayGetTypeID())
    {
      CFRelease(v2);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315394;
        uint64_t v6 = "CACFPreferences.cpp";
        __int16 v7 = 1024;
        int v8 = 101;
        _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d  CACFPreferences::CopyArrayValue: not a CFArray",  (uint8_t *)&v5,  0x12u);
      }

      return 0LL;
    }
  }

  return v2;
}

const void *sub_2F0148(const __CFString *a1)
{
  CFPropertyListRef v1 = sub_2EFFE4(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFDictionaryGetTypeID())
    {
      CFRelease(v2);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315394;
        uint64_t v6 = "CACFPreferences.cpp";
        __int16 v7 = 1024;
        int v8 = 127;
        _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d  CACFPreferences::CopyDictionaryValue: not a CFDictionary",  (uint8_t *)&v5,  0x12u);
      }

      return 0LL;
    }
  }

  return v2;
}

uint64_t sub_2F022C(const __CFString *a1, const void *a2)
{
  uint64_t result = CFPreferencesSynchronize(kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  byte_49D0D0 = 0;
  return result;
}

uint64_t sub_2F0298(const __CFString *a1)
{
  if (kCFPreferencesAnyUser) {
    CFPropertyListRef v1 = kCFPreferencesCurrentUser;
  }
  else {
    CFPropertyListRef v1 = 0LL;
  }
  if (kCFPreferencesAnyUser) {
    uint64_t v2 = (char *)&unk_49D0D1;
  }
  else {
    uint64_t v2 = &byte_49D0D0;
  }
  uint64_t result = CFPreferencesSynchronize(kCFPreferencesAnyApplication, v1, kCFPreferencesCurrentHost);
  char *v2 = 0;
  return result;
}

void sub_2F032C(uint64_t a1)
{
  CFPropertyListRef v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_2F0340(os_unfair_lock_s *a1)
{
  uint64_t v4 = 0LL;
  uint64_t v3 = 0x707472755354656ELL;
  (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, char *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                         + 48LL))( a1,  &v3,  0LL,  0LL,  4LL,  (char *)&v4 + 4);
  return 1LL;
}

void sub_2F03A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (os_log_t *)sub_138E8(17);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(__p, a2);
    int v5 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v12 = "Device_Sidetone_Aspen.cpp";
    __int16 v13 = 1024;
    int v14 = 61;
    __int16 v15 = 2080;
    int v16 = v5;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v6 = (os_log_t *)sub_138E8(13);
  __int16 v7 = *v6;
  if (*v6)
  {
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v12 = "Device_Sidetone_Aspen.cpp";
      __int16 v13 = 1024;
      int v14 = 62;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
}

void sub_2F0510(_Unwind_Exception *a1)
{
}

uint64_t sub_2F052C(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  return sub_F9108(a1);
}

void sub_2F0560(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  uint64_t v2 = (void *)sub_F9108(a1);
  operator delete(v2);
}

BOOL sub_2F0598(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *a2;
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 144);
    BOOL v2 = v8 != 1885892674 && v8 != 1886152041 && v8 != 1886152047;
  }

  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return v2;
    }
    return 0;
  }

  if (!v7) {
    return 0;
  }
  return v2;
}

BOOL sub_2F0650(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&__int128 v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000LL) != 0 && (_DWORD)v3 != 0;
}

uint64_t sub_2F069C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  uint64_t v3 = 0x676C6F6262647370LL;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 16LL))(v1, &v3);
}

void *sub_2F06D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[0] = &off_486378;
  v12[1] = 0LL;
  int v3 = v15;
  int v4 = v12;
  if (v15) {
    int v4 = &v13;
  }
  int v5 = (const __CFDictionary *)v4[1];
  v4[1] = 0LL;
  int v16 = &off_486378;
  CFDictionaryRef theDict = v5;
  sub_39FD8(v12);
  if (v3) {
    sub_39FD8(&v13);
  }
  Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a2 = Mutable;
  *(_WORD *)(a2 + 8) = 257;
  if (sub_782DC(theDict, @"BT_GainUplink"))
  {
    sub_78300((uint64_t)&v13, theDict, @"BT_GainUplink");
    float v7 = sub_783E0(v14);
    sub_39FD8(&v13);
    sub_1A3138(a2, @"gain", v7);
  }

  if (sub_782DC(theDict, @"BT_AGCUplink"))
  {
    sub_78300((uint64_t)&v13, theDict, @"BT_AGCUplink");
    int v8 = sub_20479C(v14);
    sub_39FD8(&v13);
    sub_13408(a2, @"agc", v8);
  }

  if (sub_782DC(theDict, @"BT_NSdBUplink"))
  {
    sub_78300((uint64_t)&v13, theDict, @"BT_NSdBUplink");
    float v9 = sub_783E0(v14);
    sub_39FD8(&v13);
    sub_1A3138(a2, @"noise suppression", v9);
  }

  if (sub_782DC(theDict, @"BT_EQValuesUplink"))
  {
    sub_2703D8((uint64_t)&v13, theDict, @"BT_EQValuesUplink");
    char v10 = v14;
    sub_39FD8(&v13);
    if (v10)
    {
      if (Mutable) {
        CFDictionarySetValue(Mutable, @"eq", v10);
      }
    }
  }

  return sub_39FD8(&v16);
}

void sub_2F08D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_2F08F8(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  if ((v2 & 0xFF00000000LL) == 0) {
    return 0LL;
  }
  if ((_DWORD)v2 == 1701869160) {
    return 1667982960LL;
  }
  if ((_DWORD)v2 != 1701865584) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 392LL))(a1);
  if ((_DWORD)result) {
    return 1634231920LL;
  }
  return result;
}

void *sub_2F0978(uint64_t a1, uint64_t a2, double a3)
{
  int v10 = 1650750320;
  double v11 = a3;
  uint64_t result = (void *)sub_1EF338((uint64_t)&v6, a2);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0LL;
    *(void *)a1 = &off_486378;
    *(void *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = 1;
    return sub_39FD8(&v7);
  }

  return result;
}

uint64_t sub_2F09F8(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  return sub_F9108(a1);
}

void sub_2F0A2C(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  uint64_t v2 = (void *)sub_F9108(a1);
  operator delete(v2);
}

uint64_t sub_2F0A64(void **a1, int *a2)
{
  if (*a2 == 1952609377) {
    return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
  }
  else {
    return sub_22223C(a1, a2);
  }
}

uint64_t sub_2F0A8C(uint64_t a1, int *a2)
{
  if (*a2 == 1952609377) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24LL))(*(void *)(a1 + 192));
  }
  else {
    return sub_22257C(a1, a2);
  }
}

uint64_t sub_2F0AB4(void **a1, int *a2, uint64_t a3, uint64_t a4)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    char v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)a2;
      int v18 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      double v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v22 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 216;
      __int16 v25 = 2080;
      uint64_t v26 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)a2;
      int v18 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      unsigned __int8 v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      uint64_t v22 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 217;
      __int16 v25 = 2080;
      uint64_t v26 = v15;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = a4;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    int v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v16 = &off_4865A0;
    v16[2] = 561211770;
  }

  if (*a2 == 1952609377) {
    return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
  }
  else {
    return sub_222754(a1, a2, a3, a4);
  }
}

uint64_t sub_2F0DA0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      unsigned __int8 v15 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v30 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 237;
      __int16 v33 = 2080;
      os_log_t v34 = (const char *)v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      uint64_t v19 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      uint64_t v30 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 238;
      __int16 v33 = 2080;
      os_log_t v34 = (const char *)v19;
      __int16 v35 = 1024;
      LODWORD(v36[0]) = a3;
      WORD2(v36[0]) = 2048;
      *(void *)((char *)v36 + 6) = a4;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    char v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v20 = &off_4865A0;
    void v20[2] = 561211770;
  }

  if (!a6)
  {
    int v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      __int16 v23 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      uint64_t v30 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 239;
      __int16 v33 = 2080;
      os_log_t v34 = "outData";
      __int16 v35 = 2080;
      v36[0] = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_4865A0;
    void v24[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 1952609377) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
  }
  else {
    return sub_222CE8(a1, a2, a3, a4, a5, a6);
  }
}

void sub_2F11B4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    unint64_t v36 = (os_log_t *)sub_138E8(13);
    uint64_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)a2;
      LODWORD(v54) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v53);
      char v38 = v57 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 255;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v38;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)buf,  0x1Cu);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v40 = (os_log_t *)sub_138E8(13);
    unint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)a2;
      LODWORD(v54) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v53);
      int v42 = v57 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136316162;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 256;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v42;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = a3;
      HIWORD(buf[8]) = 2048;
      *(void *)&buf[9] = a4;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v43 = &off_4865A0;
    v43[2] = 561211770;
  }

  if (!a6)
  {
    char v44 = (os_log_t *)sub_138E8(13);
    char v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)a2;
      LODWORD(v54) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v53);
      uint64_t v46 = v57 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136315906;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 257;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v46;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)buf,  0x26u);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }

    uint32_t v47 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint32_t v47 = &off_4865A0;
    v47[2] = 561211770;
  }

  if ((((uint64_t (*)(void **, uint64_t))(*a1)[3])(a1, a2) & 1) == 0)
  {
    char v48 = (os_log_t *)sub_138E8(13);
    uint64_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)a2;
      LODWORD(v54) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v53);
      char v50 = v57 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 258;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v50;
      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  (uint8_t *)buf,  0x1Cu);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v51 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v51 = &off_4865A0;
    v51[2] = 1852797029;
  }

  if (*(_DWORD *)a2 == 1952609377)
  {
    uint64_t v12 = (uint64_t)a1[24];
    strcpy((char *)buf, "atbtbolg");
    BYTE1(buf[2]) = 0;
    HIWORD(buf[2]) = 0;
    unint64_t v13 = sub_5C2F8(v12);
    int v15 = v13;
    if ((_DWORD)v13 || !v14)
    {
      char v52 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v52 = &off_4865A0;
      v52[2] = v15;
    }

    unint64_t v16 = HIDWORD(v13);
    if (*a6 != HIDWORD(v13))
    {
      uint64_t v17 = sub_138E8(23);
      uint64_t v18 = sub_138E8(28);
      char v19 = 0;
      uint64_t v20 = 0LL;
      *(void *)AudioBufferList buf = 0x100000002LL;
      uint64_t v21 = *(void *)(v17 + 8);
      while (1)
      {
        uint64_t v22 = (int)buf[v20];
        char v23 = v19;
        if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
          break;
        }
        char v19 = 1;
        uint64_t v20 = 1LL;
        if ((v23 & 1) != 0)
        {
          if ((v21 & 1) == 0) {
            goto LABEL_21;
          }
          goto LABEL_18;
        }
      }

      if ((v21 & v22) == 0) {
        uint64_t v17 = v18;
      }
      if ((*(void *)(v17 + 8) & 1) != 0)
      {
LABEL_18:
        int v24 = *(os_log_s **)v17;
        if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          int v25 = *a6;
          buf[0] = 136315906;
          *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 267;
          HIWORD(buf[4]) = 1024;
          buf[5] = v16;
          LOWORD(buf[6]) = 1024;
          *(_DWORD *)((char *)&buf[6] + 2) = v25;
          _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d oldPropertyValue: %u; newValue: %u.",
            (uint8_t *)buf,
            0x1Eu);
        }
      }

void sub_2F191C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2F1964(uint64_t a1, uint64_t *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *a2;
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 144);
    BOOL v2 = v8 != 1885892674 && v8 != 1886152041 && v8 != 1886152047;
  }

  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return v2;
    }
    return 0;
  }

  if (!v7) {
    return 0;
  }
  return v2;
}

BOOL sub_2F1A1C(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&__int128 v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000LL) != 0 && (_DWORD)v3 != 0;
}

uint64_t sub_2F1A68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  uint64_t v3 = 0x676C6F6262647370LL;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 16LL))(v1, &v3);
}

void *sub_2F1AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v10[0] = &off_486378;
  v10[1] = 0LL;
  int v3 = v13;
  int v4 = v10;
  if (v13) {
    int v4 = &v11;
  }
  uint64_t v5 = (const __CFDictionary *)v4[1];
  v4[1] = 0LL;
  char v14 = &off_486378;
  CFDictionaryRef theDict = v5;
  sub_39FD8(v10);
  if (v3) {
    sub_39FD8(&v11);
  }
  Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a2 = Mutable;
  *(_WORD *)(a2 + 8) = 257;
  if (sub_782DC(theDict, @"BT_GainDownlink"))
  {
    sub_78300((uint64_t)&v11, theDict, @"BT_GainDownlink");
    float v7 = sub_783E0(v12);
    sub_39FD8(&v11);
    sub_1A3138(a2, @"gain", v7);
  }

  if (sub_782DC(theDict, @"BT_EQValuesDownlink"))
  {
    sub_2703D8((uint64_t)&v11, theDict, @"BT_EQValuesDownlink");
    int v8 = v12;
    sub_39FD8(&v11);
    if (v8)
    {
      if (Mutable) {
        CFDictionarySetValue(Mutable, @"eq", v8);
      }
    }
  }

  return sub_39FD8(&v14);
}

void sub_2F1C00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_2F1C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 1LL;
  if ((int)a2 > 1987208038)
  {
    if ((_DWORD)a2 == 1987208039 || (_DWORD)a2 == 1987211117)
    {
      int v8 = sub_20371C(a1);
      if (v8)
      {
        uint64_t v9 = sub_138E8(28);
        uint64_t v10 = sub_138E8(23);
        char v11 = 0;
        uint64_t v12 = 0LL;
        *(void *)AudioBufferList buf = 0x100000002LL;
        uint64_t v13 = *(void *)(v9 + 8);
        while (1)
        {
          uint64_t v14 = (int)buf[v12];
          char v15 = v11;
          if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
            break;
          }
          char v11 = 1;
          uint64_t v12 = 1LL;
          if ((v15 & 1) != 0) {
            goto LABEL_24;
          }
        }

        if ((v13 & v14) == 0) {
          uint64_t v9 = v10;
        }
LABEL_24:
        char v23 = *(os_log_s **)v9;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          int v24 = *(__CFString **)(a1 + 248);
          unint64_t v62 = v24;
          char v63 = *(_BYTE *)(a1 + 256);
          if (v63 && v24) {
            CFRetain(v24);
          }
          sub_48E98(v69, v24);
          int v25 = v70;
          int v26 = (void **)v69[0];
          sub_2CA1C(__p, a2);
          __int16 v27 = v69;
          if (v25 < 0) {
            __int16 v27 = v26;
          }
          if (v66 >= 0) {
            char v28 = __p;
          }
          else {
            char v28 = (void **)__p[0];
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
          __int16 v72 = 1024;
          int v73 = 168;
          __int16 v74 = 2080;
          int v75 = v27;
          __int16 v76 = 2080;
          char v77 = v28;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Port %s is not allowed for mode %s.",  (uint8_t *)buf,  0x26u);
          if (v66 < 0) {
            operator delete(__p[0]);
          }
          if (v70 < 0) {
            operator delete(v69[0]);
          }
          sub_19DFC((uint64_t)&v62);
        }
      }

      return v8 ^ 1u;
    }
  }

  else
  {
    if ((_DWORD)a2 == 1751212899)
    {
      int v16 = sub_2034B8(a1);
      uint64_t v17 = *(void *)(a1 + 192);
      strcpy((char *)buf, "psllbolg");
      BYTE1(buf[2]) = 0;
      HIWORD(buf[2]) = 0;
      unint64_t v18 = sub_5C2F8(v17);
      *((void *)&v21 + 1) = v19;
      *(void *)&__int128 v21 = v18;
      uint64_t v20 = v21 >> 32;
      if ((v20 & 0xFF00000000LL) != 0) {
        unint64_t v22 = v20;
      }
      else {
        unint64_t v22 = 0LL;
      }
      if ((_DWORD)v22) {
        uint64_t v4 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1) & (v16 != 2);
      }
      else {
        uint64_t v4 = 0LL;
      }
      uint64_t v46 = sub_138E8(28);
      uint64_t v47 = sub_138E8(23);
      char v48 = 0;
      uint64_t v49 = 0LL;
      *(void *)AudioBufferList buf = 0x100000002LL;
      uint64_t v50 = *(void *)(v46 + 8);
      while (1)
      {
        uint64_t v51 = (int)buf[v49];
        char v52 = v48;
        if (((v50 & v51) != 0) != ((*(void *)(v47 + 8) & v51) != 0)) {
          break;
        }
        char v48 = 1;
        uint64_t v49 = 1LL;
        if ((v52 & 1) != 0)
        {
          if ((v50 & 1) == 0) {
            return v4;
          }
          goto LABEL_76;
        }
      }

      if ((v50 & v51) == 0) {
        uint64_t v46 = v47;
      }
      if ((*(void *)(v46 + 8) & 1) == 0) {
        return v4;
      }
LABEL_76:
      uint64_t v53 = *(os_log_s **)v46;
      if (!v53 || !os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG)) {
        return v4;
      }
      char v54 = *(__CFString **)(a1 + 248);
      unint64_t v62 = v54;
      char v63 = *(_BYTE *)(a1 + 256);
      if (v63 && v54) {
        CFRetain(v54);
      }
      sub_48E98(v69, v54);
      int v55 = v70;
      char v56 = (void **)v69[0];
      sub_2CA1C(__p, 1751212899LL);
      char v57 = v69;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      if (v55 < 0) {
        char v57 = v56;
      }
      int v58 = "is not";
      if ((_DWORD)v4) {
        int v58 = "is";
      }
      __int16 v72 = 1024;
      int v73 = 162;
      __int16 v59 = (void **)__p[0];
      buf[0] = 136316418;
      __int16 v74 = 2080;
      if (v66 >= 0) {
        __int16 v59 = __p;
      }
      int v75 = v57;
      __int16 v76 = 2080;
      char v77 = (void *)v58;
      __int16 v78 = 2048;
      unint64_t v79 = v22;
      __int16 v80 = 2080;
      uint64_t v81 = v59;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Port %s %s allowed (%lu) for mode %s",  (uint8_t *)buf,  0x3Au);
      if (v66 < 0) {
        operator delete(__p[0]);
      }
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      uint64_t v60 = &v62;
      goto LABEL_104;
    }

    if ((_DWORD)a2 == 1987080813)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
      int v6 = BYTE4(v5);
      if ((_DWORD)v5 != 1701869160 || BYTE4(v5) == 0)
      {
        uint64_t v4 = 0LL;
      }

      else
      {
        strcpy((char *)buf, "atbtbolg");
        BYTE1(buf[2]) = 0;
        HIWORD(buf[2]) = 0;
        unint64_t v30 = sub_5C2F8(a1);
        *((void *)&v33 + 1) = v31;
        *(void *)&__int128 v33 = v30;
        uint64_t v32 = v33 >> 32;
        uint64_t v4 = (v32 & 0xFF00000000LL) != 0 && (_DWORD)v32 != 0;
      }

      uint64_t v35 = sub_138E8(28);
      uint64_t v36 = sub_138E8(23);
      char v37 = 0;
      uint64_t v38 = 0LL;
      *(void *)AudioBufferList buf = 0x100000002LL;
      uint64_t v39 = *(void *)(v35 + 8);
      while (1)
      {
        uint64_t v40 = (int)buf[v38];
        char v41 = v37;
        if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
          break;
        }
        char v37 = 1;
        uint64_t v38 = 1LL;
        if ((v41 & 1) != 0)
        {
          if ((v39 & 1) == 0) {
            return v4;
          }
          goto LABEL_55;
        }
      }

      if ((v39 & v40) == 0) {
        uint64_t v35 = v36;
      }
      if ((*(void *)(v35 + 8) & 1) == 0) {
        return v4;
      }
LABEL_55:
      int v42 = *(os_log_s **)v35;
      if (!v42 || !os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
        return v4;
      }
      uint64_t v43 = *(const __CFString **)(a1 + 248);
      __int16 v67 = v43;
      char v68 = *(_BYTE *)(a1 + 256);
      if (v68 && v43) {
        CFRetain(v43);
      }
      sub_48E98(v69, v43);
      if (v70 >= 0) {
        char v44 = v69;
      }
      else {
        char v44 = (void **)v69[0];
      }
      if (BYTE4(v5))
      {
        sub_2CA1C(__p, v5);
        if (v66 >= 0) {
          char v45 = __p;
        }
        else {
          char v45 = (void **)__p[0];
        }
      }

      else
      {
        char v45 = (void **)"none";
      }

      sub_2CA1C(&v62, 1987080813LL);
      if (v64 >= 0) {
        BOOL v61 = &v62;
      }
      else {
        BOOL v61 = v62;
      }
      buf[0] = 136316418;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v72 = 1024;
      int v73 = 151;
      __int16 v74 = 2080;
      int v75 = v44;
      __int16 v76 = 2080;
      char v77 = v45;
      __int16 v78 = 2080;
      unint64_t v79 = (unint64_t)v61;
      __int16 v80 = 1024;
      LODWORD(v81) = v4;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Port %s (endpoint type %s) allowed for mode %s: %u",  (uint8_t *)buf,  0x36u);
      if (v64 < 0) {
        operator delete(v62);
      }
      if (v6 && v66 < 0) {
        operator delete(__p[0]);
      }
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      uint64_t v60 = (void **)&v67;
LABEL_104:
      sub_19DFC((uint64_t)v60);
    }
  }

  return v4;
}

void sub_2F22C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2F2338(uint64_t a1)
{
  uint64_t v2 = 2003068262LL;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  if ((v3 & 0xFF00000000LL) != 0)
  {
    if ((_DWORD)v3 == 1701869160)
    {
      return 1667982960LL;
    }

    else if ((_DWORD)v3 == 1701865584 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 392LL))(a1))
    {
      return 1634231920LL;
    }
  }

  return v2;
}

uint64_t sub_2F23BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if ((sub_105B8C(*(uint64_t **)(a5 + 8), 1) & 1) == 0)
  {
    CFStringRef v155 = (os_log_t *)sub_138E8(13);
    BOOL v156 = *v155;
    if (*v155 && os_log_type_enabled(*v155, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 58;
      _os_log_impl(&dword_0, v156, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((sub_105B8C(*(uint64_t **)(a5 + 8), 0) & 1) == 0)
  {
    int v158 = (os_log_t *)sub_138E8(13);
    __int16 v159 = *v158;
    if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 59;
      _os_log_impl(&dword_0, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    AudioObjectID v160 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v160, "Precondition failure.");
  }

  uint64_t v10 = (uint64_t *)sub_105C24(a5, 0);
  uint64_t v11 = sub_105C24(a5, 1);
  sub_B8CBC((uint64_t *)&v223, (uint64_t *)(v11 + 16), "", 64);
  sub_B8CBC(&v221, v10, "", 65);
  uint64_t v12 = *(os_unfair_lock_s **)(v221 + 192);
  if (!v12)
  {
    CFArrayRef v161 = (os_log_t *)sub_138E8(13);
    std::mutex v162 = *v161;
    if (*v161 && os_log_type_enabled(*v161, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v221 + 144LL))(v226);
      uint64_t v163 = *(void *)v226;
      sub_2CA1C(v198, *(unsigned int *)(v221 + 144));
      if (SHIBYTE(v199) >= 0) {
        CFTypeRef v164 = v198;
      }
      else {
        CFTypeRef v164 = (void **)v198[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 75;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&buf[20] = v163;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&_BYTE buf[30] = v164;
      _os_log_impl( &dword_0,  v162,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputIODevice is NULL]: \"could not get device for port \\" "\"%@\\\" (type: '%s').\""",  buf,  0x26u);
      if (SHIBYTE(v199) < 0) {
        operator delete(v198[0]);
      }
      sub_19DFC((uint64_t)v226);
    }

    uint64_t v165 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v165 = &off_4865A0;
    v165[2] = 2003329396;
  }

  uint64_t v177 = a1;
  uint64_t v13 = v223[36];
  sub_1B6AD4((uint64_t)v220, (uint64_t)v12, v221, a2, v10[7], *(_DWORD *)(a2 + 12));
  uint64_t v14 = v222;
  *(void *)AudioBufferList buf = v221;
  *(void *)&_DWORD buf[8] = v222;
  if (v222)
  {
    p_shared_weak_owners = (unint64_t *)&v222->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }

  sub_1BB524((unsigned int **)v220, (uint64_t *)buf, v12);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v17 = (os_unfair_lock_s *)*((void *)v223 + 24);
  if (!v17)
  {
    char v166 = (os_log_t *)sub_138E8(13);
    uint64_t v167 = *v166;
    if (*v166 && os_log_type_enabled(*v166, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v223 + 144LL))(v226);
      uint64_t v168 = *(void *)v226;
      sub_2CA1C(v198, v223[36]);
      if (SHIBYTE(v199) >= 0) {
        unsigned int v169 = v198;
      }
      else {
        unsigned int v169 = (void **)v198[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 87;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&buf[20] = v168;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&_BYTE buf[30] = v169;
      _os_log_impl( &dword_0,  v167,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [outputIODevice is NULL]: \"could not get device for port \\" "\"%@\\\" (type: '%s').\""",  buf,  0x26u);
      if (SHIBYTE(v199) < 0) {
        operator delete(v198[0]);
      }
      sub_19DFC((uint64_t)v226);
    }

    v170 = __cxa_allocate_exception(0x10uLL);
    *(void *)v170 = &off_4865A0;
    CFTypeRef v170[2] = 2003329396;
  }

  int v18 = (*(uint64_t (**)(void, uint64_t))(*(void *)&v17->_os_unfair_lock_opaque + 240LL))( *((void *)v223 + 24),  v13);
  uint64_t v218 = 0x6F7574706D757465LL;
  int v219 = v18;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&v17->_os_unfair_lock_opaque + 24LL))( v17,  &v218))
  {
    uint64_t v19 = operator new(0x28uLL);
    *uint64_t v19 = &off_4842A0;
    v19[1] = v17;
    v19[2] = v218;
    *((_DWORD *)v19 + 6) = v219;
    *(void *)((char *)v19 + 28) = 0x100000000LL;
    uint64_t v20 = operator new(0x18uLL);
    __int128 v21 = *(void **)(a3 + 8);
    *uint64_t v20 = a3;
    v20[1] = v21;
    void v20[2] = v19;
    *__int128 v21 = v20;
    uint64_t v22 = *(void *)(a3 + 16) + 1LL;
    *(void *)(a3 + 8) = v20;
    *(void *)(a3 + 16) = v22;
    sub_1BCA18((uint64_t)v19);
  }

  sub_1B6C7C(v17, 1, *(_DWORD *)(a2 + 12), *(void *)(v11 + 56), a3);
  sub_1B5F60(v217, (uint64_t)v223, a2, *(void *)(v11 + 56), *(_DWORD *)(a2 + 12), 0);
  char v23 = v224;
  *(void *)AudioBufferList buf = v223;
  *(void *)&_DWORD buf[8] = v224;
  if (v224)
  {
    int v24 = (unint64_t *)&v224->__shared_weak_owners_;
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  sub_1BB524((unsigned int **)v217, (uint64_t *)buf, v17);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))(*(void *)&v17->_os_unfair_lock_opaque
                                                                                      + 248LL))( &v215,  v17,  1LL,  v13);
  (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))(*(void *)&v17->_os_unfair_lock_opaque
                                                                                      + 256LL))( &v213,  v17,  1LL,  v13);
  (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, void, void))(*(void *)&v12->_os_unfair_lock_opaque
                                                                                    + 256LL))( &v211,  v12,  0LL,  *(unsigned int *)(v221 + 144));
  if (!v216 || v216->__shared_owners_ == -1)
  {
    __int16 v152 = (os_log_t *)sub_138E8(13);
    int v153 = *v152;
    if (*v152 && os_log_type_enabled(*v152, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 105;
      _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control.",  buf,  0x12u);
    }

    __int16 v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v154, "Unable to locate mute control.");
  }

  CFNumberRef v176 = v10;
  if (v12 != v17)
  {
    int v26 = (char *)operator new(0x30uLL);
    int v27 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v12->_os_unfair_lock_opaque + 120LL))(v12);
    *(void *)AudioBufferList buf = v221;
    *(void *)&_DWORD buf[8] = v222;
    if (v222)
    {
      char v28 = (unint64_t *)&v222->__shared_weak_owners_;
      do
        unint64_t v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }

    sub_CAE54(&v191, (uint64_t *)buf, 1LL);
    *(void *)int v26 = off_484140;
    *((_DWORD *)v26 + 2) = v27;
    *((void *)v26 + 2) = v26 + 16;
    *((void *)v26 + 3) = v26 + 16;
    *((void *)v26 + 4) = 0LL;
    uint64_t v30 = v193;
    if (v193)
    {
      uint64_t v32 = v191;
      uint64_t v31 = v192;
      uint64_t v33 = *v192;
      *(void *)(v33 + 8) = *(void *)(v191 + 8);
      **(void **)(v32 + 8) = v33;
      uint64_t v34 = *((void *)v26 + 2);
      *(void *)(v34 + 8) = v31;
      *uint64_t v31 = v34;
      *((void *)v26 + 2) = v32;
      *(void *)(v32 + 8) = v26 + 16;
      *((void *)v26 + 4) = v30;
      uint64_t v193 = 0LL;
    }

    strcpy(v26 + 40, "duar");
    uint64_t v35 = operator new(0x18uLL);
    uint64_t v36 = *(void **)(a3 + 8);
    void *v35 = a3;
    v35[1] = v36;
    v35[2] = v26;
    void *v36 = v35;
    uint64_t v37 = *(void *)(a3 + 16) + 1LL;
    *(void *)(a3 + 8) = v35;
    *(void *)(a3 + 16) = v37;
    sub_CCAB4((uint64_t)v26);
    sub_85B80(&v191);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
    int v38 = *(_DWORD *)(v221 + 144);
    *(_DWORD *)AudioBufferList buf = v223[36];
    *(_DWORD *)&uint8_t buf[4] = v38;
    sub_7A22C((uint64_t)&v206, (unsigned int *)buf, 2LL);
    uint64_t v39 = v223;
    uint64_t v40 = v224;
    if (v224)
    {
      char v41 = (unint64_t *)&v224->__shared_weak_owners_;
      do
        unint64_t v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }

    __int128 v203 = (void **)&v203;
    __int128 v204 = (uint64_t **)&v203;
    uint64_t v205 = 0LL;
    uint64_t v43 = (uint64_t *)operator new(0x20uLL);
    v43[2] = (uint64_t)v39;
    v43[3] = (uint64_t)v40;
    if (v40)
    {
      char v44 = (unint64_t *)&v40->__shared_weak_owners_;
      do
        unint64_t v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      uint64_t v46 = v205;
      uint64_t *v43 = (uint64_t)&v203;
      v43[1] = (uint64_t)&v203;
      __int128 v203 = (void **)v43;
      __int128 v204 = (uint64_t **)v43;
      uint64_t v205 = v46 + 1;
      std::__shared_weak_count::__release_weak(v40);
    }

    else
    {
      uint64_t *v43 = (uint64_t)&v203;
      v43[1] = (uint64_t)&v203;
      __int128 v203 = (void **)v43;
      __int128 v204 = (uint64_t **)v43;
      uint64_t v205 = 1LL;
    }

    if (sub_105B8C(*(uint64_t **)(a5 + 8), 3))
    {
      uint64_t v71 = sub_105C24(a5, 3);
      sub_B8CBC((uint64_t *)buf, (uint64_t *)(v71 + 16), "", 160);
      uint64_t v73 = *(void *)buf;
      uint64_t v72 = *(void *)&buf[8];
      if (*(void *)&buf[8])
      {
        __int16 v74 = (unint64_t *)(*(void *)&buf[8] + 16LL);
        do
          unint64_t v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }

      __int16 v76 = (uint64_t *)operator new(0x20uLL);
      v76[2] = v73;
      v76[3] = v72;
      char v77 = (uint64_t *)v203;
      uint64_t *v76 = (uint64_t)v203;
      v76[1] = (uint64_t)&v203;
      v77[1] = (uint64_t)v76;
      __int128 v203 = (void **)v76;
      ++v205;
      sub_57ADC((uint64_t *)&v206, *(_DWORD *)(v73 + 144), *(_DWORD *)(v73 + 144));
      __int16 v78 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        unint64_t v79 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
    }

    uint64_t v81 = (char *)operator new(0x30uLL);
    int v82 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v17->_os_unfair_lock_opaque + 120LL))(v17);
    sub_85A90(&v188, &v203);
    *(void *)uint64_t v81 = off_484140;
    *((_DWORD *)v81 + 2) = v82;
    *((void *)v81 + 2) = v81 + 16;
    *((void *)v81 + 3) = v81 + 16;
    *((void *)v81 + 4) = 0LL;
    uint64_t v83 = v190;
    if (v190)
    {
      uint64_t v85 = v188;
      uint64_t v84 = v189;
      uint64_t v86 = *v189;
      *(void *)(v86 + 8) = *(void *)(v188 + 8);
      **(void **)(v85 + 8) = v86;
      uint64_t v87 = *((void *)v81 + 2);
      *(void *)(v87 + 8) = v84;
      *uint64_t v84 = v87;
      *((void *)v81 + 2) = v85;
      *(void *)(v85 + 8) = v81 + 16;
      *((void *)v81 + 4) = v83;
      uint64_t v190 = 0LL;
    }

    strcpy(v81 + 40, "duar");
    char v88 = operator new(0x18uLL);
    int v89 = *(void **)(a3 + 8);
    *char v88 = a3;
    v88[1] = v89;
    v88[2] = v81;
    void *v89 = v88;
    uint64_t v90 = *(void *)(a3 + 16) + 1LL;
    *(void *)(a3 + 8) = v88;
    *(void *)(a3 + 16) = v90;
    sub_CCAB4((uint64_t)v81);
    sub_85B80(&v188);
    if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v17->_os_unfair_lock_opaque + 88LL))( v17,  1LL) == 1 && (*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&v12->_os_unfair_lock_opaque + 88LL))( v12,  0LL) == 1)
    {
      double v91 = sub_1D2530(buf, (uint64_t)v17, (uint64_t)v223);
      uint64_t v92 = v221;
      if ((*(_WORD *)(v221 + 184) & 1) != 0)
      {
        if ((*(unsigned int (**)(os_unfair_lock_s *, void, double))(*(void *)&v12->_os_unfair_lock_opaque
                                                                                + 88LL))( v12,  0LL,  v91) == 1)
        {
          sub_1D273C(v198, (uint64_t)v12);
          sub_1D2E0C((uint64_t **)v198, v92, (uint64_t)v220, 0);
          unsigned int v93 = *(unsigned int **)a2;
          uint64_t v194 = 0LL;
          uint64_t v195 = 0LL;
          uint64_t v196 = 0LL;
          sub_105E0C((char **)v197, *(_DWORD *)(v177 + 8), (_DWORD *)a2, &v194);
          v225 = 0LL;
          v226[0] = 0;
          v226[24] = 0;
          uint64_t v69 = sub_217730( (uint64_t *)v198,  (uint64_t *)buf,  v93,  a2 + 120,  (__int128 *)(a2 + 24),  a2 + 40,  v197,  (uint64_t *)&v225,  (uint64_t)&v206,  (__int128 *)v226);
          *(void *)v226 = v197;
          sub_7A668((void ***)v226);
          sub_85D64(v202);
          sub_85D64(v201);
          *(void *)v226 = v200;
          sub_85DA4((void ***)v226);
          *(void *)v226 = &v198[1];
          sub_85DA4((void ***)v226);
          sub_85D64(v229);
          sub_85D64(v228);
LABEL_65:
          v198[0] = &buf[32];
          sub_85DA4((void ***)v198);
          v198[0] = &buf[8];
          sub_85DA4((void ***)v198);
          sub_85B80((uint64_t *)&v203);
          sub_32C8C(v207);
          goto LABEL_66;
        }

        CFNumberRef v173 = (os_log_t *)sub_138E8(13);
        CFNumberRef v174 = *v173;
        if (*v173 && os_log_type_enabled(*v173, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v226 = 136315394;
          *(void *)&v226[4] = "PhysicalDevice.cpp";
          *(_WORD *)&v226[12] = 1024;
          *(_DWORD *)&v226[14] = 87;
          _os_log_impl( &dword_0,  v174,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v226,  0x12u);
        }
      }

      else
      {
        UInt32 v171 = (os_log_t *)sub_138E8(13);
        CFNumberRef v172 = *v171;
        if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v226 = 136315394;
          *(void *)&v226[4] = "PhysicalDevice.cpp";
          *(_WORD *)&v226[12] = 1024;
          *(_DWORD *)&v226[14] = 86;
          _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v226,  0x12u);
        }
      }

      CFNumberRef v175 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v175, "Precondition failure.");
    }

    sub_1D2BD4((uint64_t *)buf, (uint64_t)v17, (uint64_t)v223);
    sub_1D3A30((uint64_t *)v198, (uint64_t)v12, v221);
    memset(v226, 0, 24);
    sub_2F40AC(v226, (uint64_t)v198, (uint64_t)buf, 0x4EC4EC4EC4EC4EC5LL * ((buf - (_BYTE *)v198) >> 3));
    uint64_t v94 = *(void *)a2;
    uint64_t v194 = 0LL;
    uint64_t v195 = 0LL;
    uint64_t v196 = 0LL;
    sub_105E0C((char **)v197, *(_DWORD *)(v177 + 8), (_DWORD *)a2, &v194);
    v225 = 0LL;
    uint64_t v69 = sub_2B7D7C( (uint64_t **)v226,  v94,  (__int128 *)(a2 + 24),  a2 + 40,  v197,  a2 + 120,  &v225,  &v206,  (__int128 *)(a2 + 176));
    v225 = (void **)v197;
    sub_7A668(&v225);
    v197[0] = v226;
    sub_10A52C((void ***)v197);
    sub_85D64(v202);
    sub_85D64(v201);
    *(void *)v226 = v200;
    sub_85DA4((void ***)v226);
    *(void *)v226 = &v198[1];
    sub_85DA4((void ***)v226);
    sub_85D64(v229);
    sub_85D64(v228);
    goto LABEL_65;
  }

  *(void *)v226 = v226;
  *(void *)&v226[8] = v226;
  *(void *)&v226[16] = 0LL;
  uint64_t v47 = v221;
  char v48 = v222;
  if (v222)
  {
    uint64_t v49 = (unint64_t *)&v222->__shared_weak_owners_;
    do
      unint64_t v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }

  uint64_t v51 = operator new(0x20uLL);
  v51[2] = v47;
  v51[3] = v48;
  *uint64_t v51 = v226;
  v51[1] = v226;
  *(void *)v226 = v51;
  *(void *)&v226[8] = v51;
  ++*(void *)&v226[16];
  char v52 = v223;
  uint64_t v53 = v224;
  if (v224)
  {
    char v54 = (unint64_t *)&v224->__shared_weak_owners_;
    do
      unint64_t v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }

  char v56 = operator new(0x20uLL);
  v56[2] = v52;
  v56[3] = v53;
  *char v56 = v51;
  v56[1] = v226;
  v51[1] = v56;
  *(void *)v226 = v56;
  ++*(void *)&v226[16];
  char v57 = (char *)operator new(0x30uLL);
  int v58 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v12->_os_unfair_lock_opaque + 120LL))(v12);
  sub_85A90(&v208, v226);
  *(void *)char v57 = off_484140;
  *((_DWORD *)v57 + 2) = v58;
  *((void *)v57 + 2) = v57 + 16;
  *((void *)v57 + 3) = v57 + 16;
  *((void *)v57 + 4) = 0LL;
  uint64_t v59 = v210;
  if (v210)
  {
    uint64_t v61 = v208;
    uint64_t v60 = v209;
    uint64_t v62 = *v209;
    *(void *)(v62 + 8) = *(void *)(v208 + 8);
    **(void **)(v61 + 8) = v62;
    uint64_t v63 = *((void *)v57 + 2);
    *(void *)(v63 + 8) = v60;
    void *v60 = v63;
    *((void *)v57 + 2) = v61;
    *(void *)(v61 + 8) = v57 + 16;
    *((void *)v57 + 4) = v59;
    uint64_t v210 = 0LL;
  }

  strcpy(v57 + 40, "duar");
  char v64 = operator new(0x18uLL);
  uint64_t v65 = *(void **)(a3 + 8);
  void *v64 = a3;
  v64[1] = v65;
  v64[2] = v57;
  void *v65 = v64;
  uint64_t v66 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v64;
  *(void *)(a3 + 16) = v66;
  sub_CCAB4((uint64_t)v57);
  sub_85B80(&v208);
  int v67 = *(_DWORD *)(v221 + 144);
  *(_DWORD *)AudioBufferList buf = v223[36];
  *(_DWORD *)&uint8_t buf[4] = v67;
  sub_7A22C((uint64_t)&v206, (unsigned int *)buf, 2LL);
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v12->_os_unfair_lock_opaque + 88LL))( v12,  1LL) > 1 || (*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&v12->_os_unfair_lock_opaque + 88LL))( v12,  0LL) > 1)
  {
    sub_1D2BD4((uint64_t *)buf, (uint64_t)v12, (uint64_t)v223);
    sub_1D3C68((uint64_t *)v198, (uint64_t)v12, v221, (uint64_t)v220);
    __int128 v203 = 0LL;
    __int128 v204 = 0LL;
    uint64_t v205 = 0LL;
    sub_2F40AC(&v203, (uint64_t)v198, (uint64_t)buf, 0x4EC4EC4EC4EC4EC5LL * ((buf - (_BYTE *)v198) >> 3));
    uint64_t v70 = *(void *)a2;
    uint64_t v194 = 0LL;
    uint64_t v195 = 0LL;
    uint64_t v196 = 0LL;
    sub_105E0C((char **)v197, *(_DWORD *)(v177 + 8), (_DWORD *)a2, &v194);
    v225 = 0LL;
    uint64_t v69 = sub_2B7D7C( (uint64_t **)&v203,  v70,  (__int128 *)(a2 + 24),  a2 + 40,  v197,  a2 + 120,  &v225,  &v206,  (__int128 *)(a2 + 176));
    v225 = (void **)v197;
    sub_7A668(&v225);
    v197[0] = &v203;
    sub_10A52C((void ***)v197);
    sub_85D64(v202);
    sub_85D64(v201);
    __int128 v203 = (void **)v200;
    sub_85DA4(&v203);
    __int128 v203 = &v198[1];
    sub_85DA4(&v203);
    sub_85D64(v229);
    sub_85D64(v228);
  }

  else
  {
    sub_1D4510((uint64_t *)buf, (uint64_t)v12, v221, (uint64_t)v223, (uint64_t)v220);
    char v68 = *(unsigned int **)a2;
    __int128 v203 = 0LL;
    __int128 v204 = 0LL;
    uint64_t v205 = 0LL;
    sub_105E0C((char **)v198, *(_DWORD *)(v177 + 8), (_DWORD *)a2, (unsigned int **)&v203);
    uint64_t v69 = sub_10A5F4( (uint64_t *)buf,  1,  1,  v68,  a2 + 120,  (__int128 *)(a2 + 24),  a2 + 40,  (void **)v198,  0LL,  (uint64_t)&v206,  (__int128 *)(a2 + 176));
    v197[0] = v198;
    sub_7A668((void ***)v197);
    sub_85D64(v229);
    sub_85D64(v228);
  }

  v198[0] = &buf[32];
  sub_85DA4((void ***)v198);
  v198[0] = &buf[8];
  sub_85DA4((void ***)v198);
  sub_32C8C(v207);
  sub_85B80((uint64_t *)v226);
LABEL_66:
  sub_1BCA68(a2, a3);
  v198[0] = 0LL;
  v198[1] = 0LL;
  char v199 = 0LL;
  *(void *)v226 = 0LL;
  *(void *)&v226[8] = 0LL;
  if (!v214 || (*(void *)&v226[8] = std::__shared_weak_count::lock(v214)) == 0LL || (*(void *)v226 = v213) == 0LL)
  {
    uint64_t v146 = (os_log_t *)sub_138E8(13);
    CFNumberRef v147 = *v146;
    if (*v146 && os_log_type_enabled(*v146, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 206;
      _os_log_impl( &dword_0,  v147,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control.",  buf,  0x12u);
    }

    uint64_t v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v148, "Unable to locate volume control.");
  }

  uint64_t v95 = *(void *)(v11 + 56);
  LOBYTE(__p[0]) = 0;
  char v187 = 0;
  sub_1B1E64(v213, (uint64_t)v69, v223, v95, a2, 0LL, (uint64_t)__p);
  if (v187 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  int v96 = *(std::__shared_weak_count **)&v226[8];
  if (*(void *)&v226[8])
  {
    __int128 v97 = (unint64_t *)(*(void *)&v226[8] + 8LL);
    do
      unint64_t v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }

  sub_CB19C(v226, v213, v214);
  __int128 v99 = (char *)v198[1];
  if (v198[1] >= v199)
  {
    int64_t v101 = ((char *)v198[1] - (char *)v198[0]) >> 4;
    unint64_t v102 = (v199 - (char *)v198[0]) >> 3;
    if (v102 <= v101 + 1) {
      unint64_t v102 = v101 + 1;
    }
    else {
      unint64_t v103 = v102;
    }
    *(void *)&_BYTE buf[32] = &v199;
    __int128 v104 = (char *)sub_7BE90(v103);
    __int128 v106 = &v104[16 * v101];
    *(_OWORD *)__int128 v106 = *(_OWORD *)v226;
    *(void *)v226 = 0LL;
    *(void *)&v226[8] = 0LL;
    uint64_t v108 = v198[0];
    __int16 v107 = v198[1];
    if (v198[1] == v198[0])
    {
      int64x2_t v111 = vdupq_n_s64((unint64_t)v198[1]);
      __int128 v109 = &v104[16 * v101];
    }

    else
    {
      __int128 v109 = &v104[16 * v101];
      do
      {
        __int128 v110 = *((_OWORD *)v107 - 1);
        v107 -= 2;
        *((_OWORD *)v109 - 1) = v110;
        v109 -= 16;
        *__int16 v107 = 0LL;
        v107[1] = 0LL;
      }

      while (v107 != v108);
      int64x2_t v111 = *(int64x2_t *)v198;
    }

    __int128 v100 = v106 + 16;
    v198[0] = v109;
    v198[1] = v106 + 16;
    *(int64x2_t *)&_DWORD buf[8] = v111;
    __int16 v112 = v199;
    char v199 = &v104[16 * v105];
    *(void *)&_BYTE buf[24] = v112;
    *(void *)AudioBufferList buf = v111.i64[0];
    sub_A0D64((uint64_t)buf);
  }

  else
  {
    *(_OWORD *)v198[1] = *(_OWORD *)v226;
    __int128 v100 = v99 + 16;
  }

  v198[1] = v100;
  *(void *)v226 = 0LL;
  *(void *)&v226[8] = 0LL;
  if (!v212 || (*(void *)&v226[8] = std::__shared_weak_count::lock(v212)) == 0LL || (*(void *)v226 = v211) == 0LL)
  {
    uint64_t v149 = (os_log_t *)sub_138E8(13);
    CFNumberRef v150 = *v149;
    if (*v149 && os_log_type_enabled(*v149, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 216;
      _os_log_impl( &dword_0,  v150,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate input volume control.",  buf,  0x12u);
    }

    CFStringRef v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v151, "Unable to locate input volume control.");
  }

  sub_1B4C60( v211,  (uint64_t)v69,  v221,  v223[36],  (uint64_t)v220,  v176[7],  *(unsigned int *)(a2 + 12),  *(void *)(a2 + 104));
  uint64_t v113 = *(std::__shared_weak_count **)&v226[8];
  if (*(void *)&v226[8])
  {
    uint64_t v114 = (unint64_t *)(*(void *)&v226[8] + 8LL);
    do
      unint64_t v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }

  a4[2] = v69;
  a4[3] = v12;
  int v116 = operator new(0x68uLL);
  sub_20D0B4((uint64_t)v116, (char **)v198);
  a4[4] = v116;
  uint64_t v117 = operator new(0x68uLL);
  sub_150BF4(buf, v215, v216);
  CFNumberRef v178 = *(std::__shared_weak_count **)&buf[8];
  __int128 v185 = *(_OWORD *)buf;
  *(void *)AudioBufferList buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v117, &v185);
  a4[5] = v117;
  if (v178)
  {
    p_shared_owners = (unint64_t *)&v178->__shared_owners_;
    do
      unint64_t v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }

  uint64_t v120 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v121 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }

  if (sub_1B5BF0(*(unsigned int *)(a2 + 12)))
  {
    __int16 v123 = operator new(0x68uLL);
    sub_CB19C(buf, v211, v212);
    CFNumberRef v179 = *(std::__shared_weak_count **)&buf[8];
    __int128 v184 = *(_OWORD *)buf;
    *(void *)AudioBufferList buf = 0LL;
    *(void *)&_DWORD buf[8] = 0LL;
    sub_CAF18((uint64_t)v123, &v184);
    a4[6] = v123;
    if (v179)
    {
      unsigned int v124 = (unint64_t *)&v179->__shared_owners_;
      do
        unint64_t v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }

    uint64_t v126 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      std::unique_lock<std::mutex> v127 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      goto LABEL_127;
    }
  }

  else
  {
    uint64_t v129 = operator new(0x68uLL);
    sub_CAEBC((uint64_t *)buf);
    CFNumberRef v180 = *(std::__shared_weak_count **)&buf[8];
    __int128 v183 = *(_OWORD *)buf;
    *(void *)AudioBufferList buf = 0LL;
    *(void *)&_DWORD buf[8] = 0LL;
    sub_CAF18((uint64_t)v129, &v183);
    a4[6] = v129;
    if (v180)
    {
      std::unique_lock<std::mutex> v130 = (unint64_t *)&v180->__shared_owners_;
      do
        unint64_t v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }

    uint64_t v126 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v132 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v128 = __ldaxr(v132);
      while (__stlxr(v128 - 1, v132));
LABEL_127:
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }

  int v133 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  CFNumberRef v181 = *(std::__shared_weak_count **)&buf[8];
  __int128 v182 = *(_OWORD *)buf;
  *(void *)AudioBufferList buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v133, &v182);
  a4[7] = v133;
  if (v181)
  {
    unint64_t v134 = (unint64_t *)&v181->__shared_owners_;
    do
      unint64_t v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }

  uint64_t v136 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    char v137 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }

  *(void *)AudioBufferList buf = v198;
  sub_7A668((void ***)buf);
  if (v212) {
    std::__shared_weak_count::__release_weak(v212);
  }
  if (v214) {
    std::__shared_weak_count::__release_weak(v214);
  }
  if (v216) {
    std::__shared_weak_count::__release_weak(v216);
  }
  if (v217[0])
  {
    v217[1] = v217[0];
    operator delete(v217[0]);
  }

  if (v220[0])
  {
    v220[1] = v220[0];
    operator delete(v220[0]);
  }

  uint64_t v139 = v222;
  if (v222)
  {
    uint64_t v140 = (unint64_t *)&v222->__shared_owners_;
    do
      unint64_t v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }

  int v142 = v224;
  if (v224)
  {
    uint64_t v143 = (unint64_t *)&v224->__shared_owners_;
    do
      unint64_t v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }

  return 0LL;
}

void sub_2F3C4C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v3;
    operator delete(v3);
  }

  sub_7A768((uint64_t)&STACK[0x218]);
  sub_7A768((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void *sub_2F40AC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x276276276276277LL) {
      sub_7A87C();
    }
    int v6 = result;
    uint64_t result = sub_2194C8(a4);
    uint64_t v7 = result;
    *int v6 = result;
    v6[1] = result;
    v6[2] = &result[13 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0LL;
      do
      {
        uint64_t result = sub_85EA4(&v7[v9 / 8], (void *)(a2 + v9));
        v9 += 104LL;
      }

      while (a2 + v9 != a3);
      uint64_t v7 = (void *)((char *)v7 + v9);
    }

    v6[1] = v7;
  }

  return result;
}

void sub_2F4164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_2F41B0(uint64_t result)
{
  if (atomic_load((unint64_t *)(result + 8)))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v16.__sig) = 136315394;
      *(uint64_t *)((char *)&v16.__sig + 4) = (uint64_t)"CAPThread.cpp";
      *(_WORD *)&v16.__opaque[4] = 1024;
      *(_DWORD *)&v16.__opaque[6] = 248;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAPThread::Start: can't start because the thread is already running",  (uint8_t *)&v16,  0x12u);
    }

    __break(1u);
  }

  if (!atomic_load((unint64_t *)(result + 8)))
  {
    uint64_t v3 = result;
    int v4 = pthread_attr_init(&v16);
    if (v4)
    {
      int v7 = v4;
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v13 = "CAPThread.cpp";
      __int16 v14 = 1024;
      int v15 = 255;
      uint64_t v8 = "%25s:%-5d  CAPThread::Start: Thread attributes could not be created.";
    }

    else
    {
      int v5 = pthread_attr_setdetachstate(&v16, 2);
      if (v5)
      {
        int v7 = v5;
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_21;
        }
        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v13 = "CAPThread.cpp";
        __int16 v14 = 1024;
        int v15 = 258;
        uint64_t v8 = "%25s:%-5d  CAPThread::Start: A thread could not be created in the detached state.";
      }

      else
      {
        pthread_attr_getschedparam(&v16, &v11);
        v11.sched_priority = *(_DWORD *)(v3 + 104);
        pthread_attr_setschedparam(&v16, &v11);
        if (*(_BYTE *)(v3 + 122)) {
          pthread_attr_setschedpolicy(&v16, 4);
        }
        unint64_t v10 = 0LL;
        int v6 = pthread_create((pthread_t *)&v10, &v16, (void *(__cdecl *)(void *))sub_2F4450, (void *)v3);
        if (!v6 && v10)
        {
          atomic_store(v10, (unint64_t *)(v3 + 8));
          return pthread_attr_destroy(&v16);
        }

        int v7 = v6;
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
LABEL_21:
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_4865A0;
          exception[2] = v7;
        }

        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v13 = "CAPThread.cpp";
        __int16 v14 = 1024;
        int v15 = 272;
        uint64_t v8 = "%25s:%-5d  CAPThread::Start: Could not create a thread.";
      }
    }

    _os_log_impl(&dword_0, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, v8, buf, 0x12u);
    goto LABEL_21;
  }

  return result;
}

uint64_t sub_2F4450(uint64_t a1)
{
  kern_return_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  kern_return_t v9;
  _BYTE v11[5];
  integer_t policy_info[2];
  int v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  kern_return_t v20;
  __int16 v21;
  _BYTE *v22;
  atomic_store((unint64_t)pthread_self(), (unint64_t *)(a1 + 8));
  if (*(_BYTE *)(a1 + 40)) {
    pthread_setname_np((const char *)(a1 + 40));
  }
  if (*(_BYTE *)(a1 + 121))
  {
    *(_BYTE *)(a1 + 121) = 1;
    if (atomic_load((unint64_t *)(a1 + 8)))
    {
      *(void *)policy_info = *(void *)(a1 + 108);
      int v3 = *(unsigned __int8 *)(a1 + 120);
      uint64_t v13 = *(_DWORD *)(a1 + 116);
      __int16 v14 = v3;
      int v4 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 8));
      thread_act_t v5 = pthread_mach_thread_np(v4);
      int v6 = thread_policy_set(v5, 2u, policy_info, 4u);
      if (v6)
      {
        v11[0] = HIBYTE(v6);
        v11[1] = BYTE2(v6);
        v11[2] = BYTE1(v6);
        unint64_t v9 = v6;
        v11[3] = v6;
        v11[4] = 0;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315906;
          pthread_attr_t v16 = "CAPThread.cpp";
          uint64_t v17 = 1024;
          int v18 = 219;
          uint64_t v19 = 1024;
          uint64_t v20 = v9;
          __int128 v21 = 2080;
          uint64_t v22 = v11;
          _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAPThread::SetTimeConstraints: thread_policy_set failed, Error: %d (%s)",  buf,  0x22u);
        }

        __break(1u);
        JUMPOUT(0x2F4598LL);
      }
    }
  }

  int v7 = *(uint64_t (**)(void))(a1 + 24);
  if (v7) {
    uint64_t v8 = v7(*(void *)(a1 + 32));
  }
  else {
    uint64_t v8 = 0LL;
  }
  atomic_store(0LL, (unint64_t *)(a1 + 8));
  if (*(_BYTE *)(a1 + 123)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
  }
  return v8;
}

_opaque_pthread_t *sub_2F45FC(_opaque_pthread_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    mach_msg_type_number_t thread_info_outCnt = 10;
    thread_inspect_t v2 = pthread_mach_thread_np(result);
    thread_info(v2, 3u, thread_info_out, &thread_info_outCnt);
    switch(v11)
    {
      case 4:
        mach_msg_type_number_t thread_info_outCnt = 4;
        thread_inspect_t v4 = pthread_mach_thread_np(v1);
        thread_info(v4, 0xCu, v9, &thread_info_outCnt);
        return (_opaque_pthread_t *)v9[1];
      case 2:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v5 = pthread_mach_thread_np(v1);
        thread_info(v5, 0xBu, v8, &thread_info_outCnt);
        return (_opaque_pthread_t *)v8[1];
      case 1:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v3 = pthread_mach_thread_np(v1);
        thread_info(v3, 0xAu, v7, &thread_info_outCnt);
        return (_opaque_pthread_t *)v7[1];
      default:
        return 0LL;
    }
  }

  return result;
}

void sub_2F46E0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2F4E00(a1);
  operator delete(v1);
}

uint64_t sub_2F46F4()
{
  return 0LL;
}

uint64_t sub_2F46FC(_DWORD *a1, uint8x8_t a2)
{
  a2.i32[0] = a1[3];
  int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
  *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
  unsigned __int32 v10 = vmovn_s16(v3).u32[0];
  char v11 = 0;
  uint64_t v8 = 0x676C6F626C6E616DLL;
  int v9 = 0;
  CFStringRef theString = 0LL;
  int v6 = 8;
  (*(void (**)(_DWORD *, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56LL))( a1,  &v8,  0LL,  0LL,  &v6,  &theString);
  buffer[0] = 0;
  if (theString)
  {
    CFIndex usedBufLen = 0LL;
    v13.length = CFStringGetLength(theString);
    v13.location = 0LL;
    CFStringGetBytes(theString, v13, 0x8000100u, 0, 0, buffer, 255LL, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }

  return printf( "AudioObjectID:\t\t0x%X\n\tAudioClassID:\t'%s'\n\tName:\t\t\t%s\n",  a1[2],  (const char *)&v10,  (const char *)buffer);
}

void sub_2F4820(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2F4778LL);
  }

  _Unwind_Resume(a1);
}

BOOL sub_2F4838(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1818850145 || *a2 == 1818850162 || sub_5CC60(a1, a2) != 0;
}

void sub_2F4884(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  thread_inspect_t v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  int v5 = *(char *)(a1 + 55);
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 55);
  }
  if (!v6)
  {
    snprintf(__str, 0x13uLL, "%p", (const void *)a1);
    sub_7D084(&v11, __str);
    int v7 = std::string::insert(&v11, 0LL, "[ addr: ", 8uLL);
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    int v9 = std::string::append(&v12, " ]", 2uLL);
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    std::string::operator=((std::string *)(a1 + 32), &v13);
    if ((*(_BYTE *)(a1 + 55) & 0x80) == 0) {
      goto LABEL_6;
    }
LABEL_14:
    sub_24054((_BYTE *)a2, *(void **)(a1 + 32), *(void *)(a1 + 40));
    goto LABEL_15;
  }

  if ((v5 & 0x80) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 16) = *(void *)(a1 + 48);
LABEL_15:
  os_unfair_lock_unlock(v4);
}

void sub_2F49F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

void ***sub_2F4A58(void **a1)
{
  thread_inspect_t v4 = a1;
  if (AudioObjectPropertiesChanged( (char *)a1[2] + 80,  *((unsigned int *)a1 + 2),  -1431655765 * ((*((void *)*a1 + 1) - *(void *)*a1) >> 2),  *(void *)*a1))
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    thread_inspect_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v6 = "HP_Object.cpp";
        __int16 v7 = 1024;
        int v8 = 308;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theError): got an error calling the listeners",  buf,  0x12u);
      }
    }
  }

  return sub_2F4DA0(&v4);
}

void sub_2F4B58( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    int v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 309;
      __int128 v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }

  else
  {
    int v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      unint64_t v25 = v24;
      int v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 309;
        __int128 v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unint64_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 309;
        __int128 v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2F4B20LL);
}

void ***sub_2F4DA0(void ***a1)
{
  thread_inspect_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    int16x8_t v3 = (void **)*v2;
    os_log_s *v2 = 0LL;
    if (v3)
    {
      thread_inspect_t v4 = *v3;
      if (*v3)
      {
        v3[1] = v4;
        operator delete(v4);
      }

      operator delete(v3);
    }

    operator delete(v2);
  }

  return a1;
}

uint64_t sub_2F4E00(uint64_t a1)
{
  *(void *)a1 = off_47D5E8;
  sub_92EF8();
  sub_28ADC4(a1);
  thread_inspect_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_2F4E5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
}

void sub_2F4E80(void *a1)
{
}

uint64_t sub_2F4EB4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
}

void sub_2F4ED8(void *a1)
{
}

uint64_t sub_2F4F0C(uint64_t a1)
{
  return 0LL;
}

void sub_2F4F34(void *a1)
{
}

uint64_t sub_2F4F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return 0LL;
}

void sub_2F4F94(void *a1)
{
}

uint64_t sub_2F4FC8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  *(void *)a1 = off_47D5E8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (a2)
  {
    sub_92EF8();
    sub_28A860(a2, a1);
  }

  return a1;
}

void sub_2F5030(_Unwind_Exception *exception_object)
{
  thread_inspect_t v4 = *(void **)(v1 + 56);
  if (v4)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_2F505C(void *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56LL))(a2);
  if (v4)
  {
    int v5 = v4;
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v23 = 0x676C6F6200000000LL;
      int v24 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 64LL))(a2, v6, &v23);
      __int16 v7 = (int *)a1[7];
      unint64_t v8 = a1[8];
      if ((int *)v8 != sub_2F52EC(v7, (int *)v8, &v23))
      {
        int v20 = (os_log_t *)sub_138E8(13);
        __int128 v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          int v26 = "HP_Object.cpp";
          __int16 v27 = 1024;
          int v28 = 336;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): redefined address",  buf,  0x12u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 1852797029;
      }

      unint64_t v9 = a1[9];
      if (v9 <= v8)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v7) >> 3) + 1;
        if (v12 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A87C();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555LL) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A8C4();
        }
        int v15 = (char *)operator new(24 * v14);
        pthread_attr_t v16 = &v15[8 * ((uint64_t)(v8 - (void)v7) >> 3)];
        *(void *)pthread_attr_t v16 = v23;
        *((_DWORD *)v16 + 2) = v24;
        *((void *)v16 + 2) = a2;
        uint64_t v17 = v16;
        while ((int *)v8 != v7)
        {
          uint64_t v18 = *(void *)(v8 - 24);
          v8 -= 24LL;
          int v19 = *(_DWORD *)(v8 + 8);
          *((void *)v17 - 3) = v18;
          v17 -= 24;
          *((_DWORD *)v17 + 2) = v19;
          *((void *)v17 + 2) = *(void *)(v8 + 16);
        }

        std::string v11 = v16 + 24;
        a1[7] = v17;
        a1[8] = v16 + 24;
        a1[9] = &v15[24 * v14];
        if (v7) {
          operator delete(v7);
        }
      }

      else
      {
        uint64_t v10 = v23;
        *(_DWORD *)(v8 + 8) = v24;
        *(void *)unint64_t v8 = v10;
        *(void *)(v8 + 16) = a2;
        std::string v11 = (char *)(v8 + 24);
      }

      a1[8] = v11;
      uint64_t v6 = (v6 + 1);
    }

    while ((_DWORD)v6 != v5);
  }

int *sub_2F52EC(int *a1, int *a2, _DWORD *a3)
{
  int16x8_t v3 = a1;
  if (a1 != a2)
  {
    do
    {
      if (sub_5CCDC(v3, a3)) {
        uint64_t v6 = v3;
      }
      else {
        uint64_t v6 = a2;
      }
      v3 += 6;
    }

    while (v6 == a2 && v3 != a2);
    return v6;
  }

  return v3;
}

int *sub_2F534C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56LL))(a2);
  if ((_DWORD)result)
  {
    int v5 = (int)result;
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v11 = 0x676C6F6200000000LL;
      int v12 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 64LL))(a2, v6, &v11);
      __int16 v7 = *(int **)(a1 + 64);
      uint64_t result = sub_2F52EC(*(int **)(a1 + 56), v7, &v11);
      if (v7 != result)
      {
        if (result + 6 != v7)
        {
          unint64_t v8 = result;
          do
          {
            uint64_t v9 = *((void *)v8 + 3);
            v8 += 6;
            *(void *)uint64_t result = v9;
            result[2] = result[8];
            *((void *)result + 2) = *((void *)result + 5);
            uint64_t v10 = result + 12;
            uint64_t result = v8;
          }

          while (v10 != v7);
          uint64_t result = v8;
        }

        *(void *)(a1 + 64) = result;
      }

      uint64_t v6 = (v6 + 1);
    }

    while ((_DWORD)v6 != v5);
  }

  return result;
}

uint64_t sub_2F5434(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v535 = &v535;
  v536 = (uint64_t *)&v535;
  std::string::size_type v537 = 0LL;
  v534[1] = 0LL;
  v533 = v534;
  v534[0] = 0LL;
  memset(v532, 0, sizeof(v532));
  uint64_t v6 = sub_138E8(19);
  uint64_t v511 = a1;
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    __int16 v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(*(void *)a2 + 32LL);
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 94;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v8;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Connection list size %lu.", buf, 0x1Cu);
      }
    }
  }

  for (uint64_t i = *(void **)(*(void *)a2 + 24LL); i != (void *)(*(void *)a2 + 16LL); uint64_t i = (void *)i[1])
  {
    sub_B8CBC((uint64_t *)&v527, i + 2, "", 97);
    sub_B8CBC((uint64_t *)&v541, i + 4, "", 98);
    uint32_t os_unfair_lock_opaque = v527[36]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque == 1885433888)
    {
      uint64_t v11 = (os_unfair_lock_s **)&v541;
    }

    else
    {
      if (*(_DWORD *)(v541 + 144) != 1885433888)
      {
        v480 = (os_log_t *)sub_138E8(13);
        v481 = *v480;
        if (*v480 && os_log_type_enabled(*v480, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v554, v527[36]._os_unfair_lock_opaque);
          int size = (char)v554[0].__r_.__value_.__s.__size_;
          std::string::size_type v483 = v554[0].__r_.__value_.__r.__words[0];
          sub_2CA1C(__src, *(unsigned int *)(v541 + 144));
          v484 = v554;
          if (size < 0) {
            v484 = (std::string *)v483;
          }
          if (__src[5] >= 0) {
            v485 = __src;
          }
          else {
            v485 = *(_DWORD **)__src;
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 105;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v484;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&_BYTE buf[30] = v485;
          _os_log_impl( &dword_0,  v481,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Database error: encountered a connection for which neither sourc e nor destination is kVirtualAudioPortTypeAP (src:  %s; dst: %s).",
            buf,
            0x26u);
          if (SHIBYTE(__src[5]) < 0) {
            operator delete(*(void **)__src);
          }
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( exception,  "Database error: encountered a connection for which neither source nor destination is kVirtualAudioPortTypeAP(src: %s; dst: %s).");
      }

      uint64_t v11 = &v527;
    }

    unsigned int v518 = (*v11)[36]._os_unfair_lock_opaque;
    sub_57ADC((uint64_t *)&v533, v518, v518);
    uint64_t v12 = sub_138E8(19);
    if ((*(_BYTE *)(v12 + 8) & 1) != 0)
    {
      unint64_t v13 = *(os_log_s **)v12;
      if (*(void *)v12)
      {
        if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
        {
          sub_2DA02C(v554, i + 2);
          unint64_t v14 = v554;
          if ((v554[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unint64_t v14 = (std::string *)v554[0].__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 114;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v14;
          _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Processing connection %s.", buf, 0x1Cu);
        }
      }
    }

    int v15 = *(os_unfair_lock_s **)&(*v11)[48]._os_unfair_lock_opaque;
    if (!v15)
    {
      v462 = (os_log_t *)sub_138E8(13);
      v463 = *v462;
      if (*v462 && os_log_type_enabled(*v462, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(_DWORD *__return_ptr))(*(void *)&(*v11)->_os_unfair_lock_opaque + 144LL))(__src);
        uint64_t v464 = *(void *)__src;
        sub_2CA1C(v554, (*v11)[36]._os_unfair_lock_opaque);
        if ((v554[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v465 = v554;
        }
        else {
          v465 = (std::string *)v554[0].__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 123;
        *(_WORD *)&_BYTE buf[18] = 2112;
        *(void *)&buf[20] = v464;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = v465;
        _os_log_impl( &dword_0,  v463,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: \"could not get device for port \\" "\"%@\\\" (type: %s).\""",  buf,  0x26u);
        sub_19DFC((uint64_t)__src);
      }

      v466 = __cxa_allocate_exception(0x10uLL);
      *(void *)v466 = &off_4865A0;
      v466[2] = 2003329396;
    }

    if ((*v11)[66]._os_unfair_lock_opaque == 1752709424) {
      sub_1BAC98(*(_DWORD *)(a2 + 12), *(void *)&(*v11)[48]._os_unfair_lock_opaque);
    }
    if (os_unfair_lock_opaque == 1885433888)
    {
      sub_1B5F60(v554, v541, a2, i[9], *(_DWORD *)(a2 + 12), 0);
    }

    else
    {
      sub_9005C();
      if (byte_48CC70)
      {
        BOOL v16 = (unsigned __int16)sub_2D032C(*(void *)(a2 + 104), *(unsigned int *)(a2 + 12), v518) > 0x100u;
        sub_1BADEC(v16, *(void *)&v527[48]._os_unfair_lock_opaque);
      }

      sub_1B6AD4((uint64_t)v554, (uint64_t)v15, (uint64_t)v527, a2, i[9], *(_DWORD *)(a2 + 12));
      *(void *)__src = 0LL;
      *(void *)&__src[2] = 0LL;
      uint64_t v17 = (std::__shared_weak_count *)i[3];
      if (v17)
      {
        uint64_t v18 = std::__shared_weak_count::lock(v17);
        if (v18)
        {
          int v19 = v18;
          uint64_t v20 = i[2];
          p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
          do
            unint64_t v22 = __ldxr(p_shared_weak_owners);
          while (__stxr(v22 + 1, p_shared_weak_owners));
          *(void *)__src = v20;
          *(void *)&__src[2] = v18;
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            unint64_t v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v19);
          }
        }

        else
        {
          *(void *)__src = 0LL;
          *(void *)&__src[2] = 0LL;
        }
      }

      sub_1BC5DC((uint64_t)buf, &v554[0].__r_.__value_.__l.__data_, (uint64_t *)__src);
      if (*(void *)&__src[2]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__src[2]);
      }
      unint64_t v25 = *(__int32 **)buf;
      int v26 = *(__int32 **)&buf[8];
      if (*(void *)buf != *(void *)&buf[8])
      {
        do
          sub_8598C((uint64_t)v532, v25++);
        while (v25 != v26);
        unint64_t v25 = *(__int32 **)buf;
      }

      if (v25)
      {
        *(void *)&_DWORD buf[8] = v25;
        operator delete(v25);
      }
    }

    __int16 v27 = v536;
    do
    {
      int v28 = v27;
      os_log_t v30 = v27 + 1;
      __int16 v27 = (uint64_t *)v27[1];
      unint64_t v29 = (os_unfair_lock_s *)v30[1];
    }

    while (v29 != v15 && v27 != (uint64_t *)&v535);
    if (v29 == v15)
    {
      uint64_t v47 = sub_138E8(19);
      if ((*(_BYTE *)(v47 + 8) & 1) != 0)
      {
        char v48 = *(os_log_s **)v47;
        if (*(void *)v47)
        {
          if (os_log_type_enabled(*(os_log_t *)v47, OS_LOG_TYPE_DEBUG))
          {
            sub_23FE8((uint64_t)__src, v15 + 2);
            if (__src[5] >= 0) {
              uint64_t v49 = __src;
            }
            else {
              uint64_t v49 = *(_DWORD **)__src;
            }
            sub_23FE8((uint64_t)__p, *v11 + 2);
            int v50 = SHIBYTE(v540);
            uint64_t v51 = (void **)__p[0];
            sub_91FF0( &v538,  (unsigned int *)v554[0].__r_.__value_.__l.__data_,  (unsigned int *)v554[0].__r_.__value_.__l.__size_);
            char v52 = __p;
            if (v50 < 0) {
              char v52 = v51;
            }
            uint64_t v53 = &v538;
            if ((v538.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v53 = (std::string *)v538.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioBufferList buf = 136316162;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 159;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v49;
            *(_WORD *)&_BYTE buf[28] = 2080;
            *(void *)&_BYTE buf[30] = v52;
            *(_WORD *)&buf[38] = 2080;
            *(void *)&_BYTE buf[40] = v53;
            _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Located device description for device %s. Adding support for port %s and sub-ports %s.",  buf,  0x30u);
            if (SHIBYTE(v540) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(__src[5]) < 0) {
              operator delete(*(void **)__src);
            }
          }
        }
      }

      unint64_t v54 = 0LL;
      if (os_unfair_lock_opaque == 1885433888) {
        uint64_t v55 = 6LL;
      }
      else {
        uint64_t v55 = 3LL;
      }
      while (v54 < (*(unsigned int (**)(os_unfair_lock_s *, BOOL))(*(void *)&v15->_os_unfair_lock_opaque
                                                                             + 88LL))( v15,  os_unfair_lock_opaque == 1885433888))
      {
        uint64_t v56 = v28[v55];
        char v57 = *v11;
        int v58 = (uint64_t *)&v541 + 1;
        if (os_unfair_lock_opaque != 1885433888) {
          int v58 = (uint64_t *)&v528;
        }
        uint64_t v59 = *v58;
        if (*v58)
        {
          uint64_t v60 = (unint64_t *)(v59 + 16);
          do
            unint64_t v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }

        uint64_t v62 = operator new(0x20uLL);
        uint64_t v63 = (uint64_t *)(v56 + 24 * v54);
        v62[2] = v57;
        v62[3] = v59;
        v62[1] = v63;
        uint64_t v64 = *v63;
        void *v62 = *v63;
        *(void *)(v64 + 8) = v62;
        uint64_t *v63 = (uint64_t)v62;
        ++v63[2];
        ++v54;
      }

      if (os_unfair_lock_opaque != 1885433888)
      {
        sub_2F98DC(buf, (uint64_t)v527, (uint64_t)v528, (uint64_t)v554);
        sub_1D372C((uint64_t **)v28 + 9, (uint64_t)buf);
        if (*(void *)&buf[16])
        {
          *(void *)&_BYTE buf[24] = *(void *)&buf[16];
          operator delete(*(void **)&buf[16]);
        }

        __int16 v76 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          char v77 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }

        goto LABEL_125;
      }

      sub_2F98DC(buf, v541, *((uint64_t *)&v541 + 1), (uint64_t)v554);
      sub_1D372C((uint64_t **)v28 + 12, (uint64_t)buf);
      if (*(void *)&buf[16])
      {
        *(void *)&_BYTE buf[24] = *(void *)&buf[16];
        operator delete(*(void **)&buf[16]);
      }

      uint64_t v65 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v66 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
    }

    else
    {
LABEL_44:
      if (os_unfair_lock_opaque != 1885433888)
      {
        uint64_t v38 = sub_138E8(19);
        if ((*(_BYTE *)(v38 + 8) & 1) != 0)
        {
          uint64_t v39 = *(os_log_s **)v38;
          if (*(void *)v38)
          {
            if (os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG))
            {
              sub_23FE8((uint64_t)__src, v15 + 2);
              if (__src[5] >= 0) {
                uint64_t v40 = __src;
              }
              else {
                uint64_t v40 = *(_DWORD **)__src;
              }
              sub_23FE8((uint64_t)__p, v527 + 2);
              int v41 = SHIBYTE(v540);
              unint64_t v42 = (void **)__p[0];
              sub_91FF0( &v538,  (unsigned int *)v554[0].__r_.__value_.__l.__data_,  (unsigned int *)v554[0].__r_.__value_.__l.__size_);
              uint64_t v43 = __p;
              if (v41 < 0) {
                uint64_t v43 = v42;
              }
              char v44 = &v538;
              if ((v538.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                char v44 = (std::string *)v538.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioBufferList buf = 136316162;
              *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 179;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v40;
              *(_WORD *)&_BYTE buf[28] = 2080;
              *(void *)&_BYTE buf[30] = v43;
              *(_WORD *)&buf[38] = 2080;
              *(void *)&_BYTE buf[40] = v44;
              _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Adding device description for device %s using port %s and sub-ports %s.",  buf,  0x30u);
              if (SHIBYTE(v540) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(__src[5]) < 0) {
                operator delete(*(void **)__src);
              }
            }
          }
        }

        sub_1D3C68((uint64_t *)buf, (uint64_t)v15, (uint64_t)v527, (uint64_t)v554);
        unint64_t v45 = sub_85E54(buf);
        uint64_t v46 = (uint64_t)v535;
        void *v45 = v535;
        v45[1] = &v535;
        *(void *)(v46 + 8) = v45;
        v535 = v45;
        ++v537;
        sub_85D64(*((void **)&v545 + 1));
        sub_85D64((void *)v544);
        *(void *)__src = &buf[32];
        sub_85DA4((void ***)__src);
        *(void *)__src = &buf[8];
        sub_85DA4((void ***)__src);
        goto LABEL_125;
      }

      uint64_t v31 = sub_138E8(19);
      if ((*(_BYTE *)(v31 + 8) & 1) != 0)
      {
        uint64_t v32 = *(os_log_s **)v31;
        if (*(void *)v31)
        {
          if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
          {
            sub_23FE8((uint64_t)__src, v15 + 2);
            int v33 = SHIBYTE(__src[5]);
            uint64_t v34 = *(_DWORD **)__src;
            sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(v541 + 8));
            uint64_t v35 = __src;
            if (v33 < 0) {
              uint64_t v35 = v34;
            }
            uint64_t v36 = __p;
            if (SHIBYTE(v540) < 0) {
              uint64_t v36 = (void **)__p[0];
            }
            *(_DWORD *)AudioBufferList buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 185;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v35;
            *(_WORD *)&_BYTE buf[28] = 2080;
            *(void *)&_BYTE buf[30] = v36;
            _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Adding device description for device %s using port %s.",  buf,  0x26u);
            if (SHIBYTE(v540) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(__src[5]) < 0) {
              operator delete(*(void **)__src);
            }
          }
        }
      }

      if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v15->_os_unfair_lock_opaque + 88LL))( v15,  1LL) == 1)
      {
        sub_1D2530(buf, (uint64_t)v15, v541);
        uint64_t v37 = operator new(0x78uLL);
      }

      else
      {
        if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v15->_os_unfair_lock_opaque + 88LL))( v15,  1LL) < 2) {
          goto LABEL_112;
        }
        sub_1D2BD4((uint64_t *)buf, (uint64_t)v15, v541);
        uint64_t v37 = operator new(0x78uLL);
      }

      char v68 = v37;
      void *v37 = 0LL;
      v37[1] = 0LL;
      sub_20DEC4(v37 + 2, (uint64_t)buf);
      uint64_t v69 = (uint64_t)v535;
      void *v68 = v535;
      v68[1] = &v535;
      *(void *)(v69 + 8) = v68;
      v535 = v68;
      ++v537;
      sub_85D64(*((void **)&v545 + 1));
      sub_85D64((void *)v544);
      *(void *)__src = &buf[32];
      sub_85DA4((void ***)__src);
      *(void *)__src = &buf[8];
      sub_85DA4((void ***)__src);
    }

LABEL_257:
  sub_2B2E10((uint64_t)v508, (__int128 *)buf, (void **)&v527);
  if (v553 && v552 < 0) {
    operator delete(v551);
  }
  if (v550 && v549 < 0) {
    operator delete(v548);
  }
  sub_32C8C(v547[0]);
  sub_AB45C((uint64_t *)&v544);
  char v190 = 0;
  uint64_t v191 = 0LL;
  void *v508 = &off_47D730;
  v547[0] = 0LL;
  __int128 v545 = 0u;
  *(_OWORD *)v546 = 0u;
  __int128 v543 = 0u;
  __int128 v544 = 0u;
  unsigned int v501 = v513 & 0xFFFFFFFD;
  memset(buf, 0, sizeof(buf));
  LOWORD(v526) = 256;
  do
  {
    char v500 = v190;
    v516 = v536;
    uint64_t v192 = 0LL;
    int v193 = *((unsigned __int8 *)&v526 + v191);
    uint64_t v194 = 24LL;
    if (!v193) {
      uint64_t v194 = 0LL;
    }
    uint64_t v507 = v194;
    if (v193) {
      uint64_t v195 = (void **)&v544 + 1;
    }
    else {
      uint64_t v195 = (void **)&v543;
    }
    uint64_t v196 = 32LL;
    if (!v193) {
      uint64_t v196 = 8LL;
    }
    uint64_t v517 = v196;
    uint64_t v197 = 40LL;
    if (!v193) {
      uint64_t v197 = 16LL;
    }
    uint64_t v510 = v197;
    v512 = v195;
    uint64_t v198 = &buf[16];
    if (v193) {
      uint64_t v198 = &buf[40];
    }
    std::string::size_type v503 = (std::string::size_type)v198;
    char v199 = "output";
    if (!v193) {
      char v199 = "input";
    }
    __s = (char *)v199;
    int v509 = 1;
    int v506 = v193;
    do
    {
      uint64_t v200 = sub_138E8(16);
      uint64_t v201 = sub_138E8(33);
      char v202 = 0;
      uint64_t v203 = 0LL;
      v519 = v516 + 2;
      v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
      uint64_t v204 = *(void *)(v200 + 8);
      while (1)
      {
        uint64_t v205 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v203);
        char v206 = v202;
        if (((v204 & v205) != 0) != ((*(void *)(v201 + 8) & v205) != 0)) {
          break;
        }
        char v202 = 1;
        uint64_t v203 = 1LL;
        if ((v206 & 1) != 0)
        {
          if ((v204 & 1) == 0) {
            goto LABEL_290;
          }
          goto LABEL_287;
        }
      }

      if ((v204 & v205) == 0) {
        uint64_t v200 = v201;
      }
      if ((*(void *)(v200 + 8) & 1) != 0)
      {
LABEL_287:
        v207 = *(os_log_s **)v200;
        if (*(void *)v200 && os_log_type_enabled(*(os_log_t *)v200, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
          WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 187;
          _os_log_impl( &dword_0,  v207,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d inPhysicalDeviceDescription:",  (uint8_t *)v554,  0x12u);
        }
      }

LABEL_324:
      uint64_t v228 = sub_138E8(16);
      uint64_t v229 = sub_138E8(33);
      char v230 = 0;
      uint64_t v231 = 0LL;
      v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
      uint64_t v232 = *(void *)(v228 + 8);
      while (1)
      {
        uint64_t v233 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v231);
        char v234 = v230;
        if (((v232 & v233) != 0) != ((*(void *)(v229 + 8) & v233) != 0)) {
          break;
        }
        char v230 = 1;
        uint64_t v231 = 1LL;
        if ((v234 & 1) != 0)
        {
          if ((v232 & 1) == 0) {
            goto LABEL_335;
          }
          goto LABEL_332;
        }
      }

      if ((v232 & v233) == 0) {
        uint64_t v228 = v229;
      }
      if ((*(void *)(v228 + 8) & 1) != 0)
      {
LABEL_332:
        v235 = *(os_log_s **)v228;
        if (*(void *)v228 && os_log_type_enabled(*(os_log_t *)v228, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v236 = 0xAAAAAAAAAAAAAAABLL * ((v514[1] - *(uint64_t *)((char *)v516 + v515)) >> 3);
          LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
          WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 194;
          WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2048;
          *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = v236;
          _os_log_impl( &dword_0,  v235,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - associatedPorts.size(): %lu",  (uint8_t *)v554,  0x1Cu);
        }
      }

LABEL_335:
      if (v501 == 1)
      {
        BOOL v237 = !sub_1D5354(*v519);
        if (v193) {
          LOBYTE(v237) = 1;
        }
        if (!v237)
        {
          std::string::size_type v238 = *v519;
          if (!*v519 || !(*(unsigned int (**)(uint64_t, void))(*(void *)v238 + 88LL))(*v519, 0LL))
          {
            v453 = (os_log_t *)sub_138E8(13);
            v454 = *v453;
            if (*v453 && os_log_type_enabled(*v453, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
              WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 201;
              _os_log_impl( &dword_0,  v454,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)v554,  0x12u);
            }

            v455 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v455, "Precondition failure.");
          }

          LODWORD(v554[0].__r_.__value_.__l.__data_) = -2;
          *(_OWORD *)&v554[0].__r_.__value_.__r.__words[1] = 0uLL;
          v554[1].__r_.__value_.__r.__words[0] = v238;
          sub_2A4D2C((void **)&v543, (uint64_t)v554);
          v239 = (std::__shared_weak_count *)v554[0].__r_.__value_.__l.__cap_;
          if (v554[0].__r_.__value_.__l.__cap_)
          {
            v240 = (unint64_t *)(v554[0].__r_.__value_.__l.__cap_ + 8);
            do
              unint64_t v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }

          if ((*(unsigned int (**)(std::string::size_type, void))(*(void *)v238 + 88LL))(v238, 0LL) >= 2)
          {
            LODWORD(v554[0].__r_.__value_.__l.__data_) = -1;
            *(_OWORD *)&v554[0].__r_.__value_.__r.__words[1] = 0uLL;
            v554[1].__r_.__value_.__r.__words[0] = v238;
            sub_2A4D2C((void **)&v543, (uint64_t)v554);
            v242 = (std::__shared_weak_count *)v554[0].__r_.__value_.__l.__cap_;
            if (v554[0].__r_.__value_.__l.__cap_)
            {
              v243 = (unint64_t *)(v554[0].__r_.__value_.__l.__cap_ + 8);
              do
                unint64_t v244 = __ldaxr(v243);
              while (__stlxr(v244 - 1, v243));
              if (!v244)
              {
                ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                std::__shared_weak_count::__release_weak(v242);
              }
            }
          }
        }
      }

      uint64_t v245 = *(uint64_t *)((char *)v516 + v515);
      if (v514[1] == v245) {
        goto LABEL_539;
      }
      uint64_t v246 = 0LL;
      uint64_t v247 = 0LL;
      do
      {
        uint64_t v248 = v192;
        v249 = (void *)(v245 + 24 * v246);
        if (!v249[2])
        {
          sub_2B1EAC((uint64_t)v554, *v519);
          sub_2A4D2C(v512, (uint64_t)v554);
          v258 = (std::__shared_weak_count *)v554[0].__r_.__value_.__l.__cap_;
          uint64_t v192 = v248;
          if (v554[0].__r_.__value_.__l.__cap_)
          {
            v259 = (unint64_t *)(v554[0].__r_.__value_.__l.__cap_ + 8);
            do
              unint64_t v260 = __ldaxr(v259);
            while (__stlxr(v260 - 1, v259));
            if (!v260)
            {
              ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
              std::__shared_weak_count::__release_weak(v258);
            }
          }

          uint64_t v261 = sub_138E8(16);
          uint64_t v262 = sub_138E8(33);
          char v263 = 0;
          uint64_t v264 = 0LL;
          v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
          uint64_t v265 = *(void *)(v261 + 8);
          while (1)
          {
            uint64_t v266 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v264);
            char v267 = v263;
            if (((v265 & v266) != 0) != ((*(void *)(v262 + 8) & v266) != 0)) {
              break;
            }
            char v263 = 1;
            uint64_t v264 = 1LL;
            if ((v267 & 1) != 0)
            {
              if ((v265 & 1) == 0) {
                goto LABEL_520;
              }
              goto LABEL_424;
            }
          }

          if ((v265 & v266) == 0) {
            uint64_t v261 = v262;
          }
          if ((*(void *)(v261 + 8) & 1) == 0) {
            goto LABEL_520;
          }
LABEL_424:
          v297 = *(os_log_s **)v261;
          if (*(void *)v261 && os_log_type_enabled(*(os_log_t *)v261, OS_LOG_TYPE_DEBUG))
          {
            v298 = (uint64_t *)&v543 + 1;
            if (v193) {
              v298 = (uint64_t *)&v545;
            }
            uint64_t v299 = *v298;
            LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
            WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 280;
            WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2048;
            *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = v299 - 32;
            _os_log_impl( &dword_0,  v297,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - created disabled underlying stream %p.",  (uint8_t *)v554,  0x1Cu);
          }

          goto LABEL_520;
        }

        uint64_t v250 = sub_28153C((uint64_t)v508, v505, (_OWORD *)(a2 + 24), v193 != 0, v247, v519, v186);
        sub_2A4CCC(&v541, v250);
        if (!(void)v541)
        {
          v449 = (os_log_t *)sub_138E8(13);
          v450 = *v449;
          if (*v449 && os_log_type_enabled(*v449, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315906;
            v451 = "output";
            if (!v506) {
              v451 = "input";
            }
            *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
            WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 215;
            WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v451;
            WORD2(v554[1].__r_.__value_.__r.__words[0]) = 1024;
            *(_DWORD *)((char *)v554[1].__r_.__value_.__r.__words + 6) = v247;
            _os_log_impl( &dword_0,  v450,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [clientStream is NULL]: Failed to create a virtual stream for %s port %u.",  (uint8_t *)v554,  0x22u);
          }

          v452 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v452, "Failed to create a virtual stream for %s port %u.");
        }

        uint64_t v251 = sub_138E8(16);
        uint64_t v252 = sub_138E8(33);
        char v253 = 0;
        uint64_t v254 = 0LL;
        v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
        uint64_t v255 = *(void *)(v251 + 8);
        do
        {
          uint64_t v256 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v254);
          char v257 = v253;
          if (((v255 & v256) != 0) != ((*(void *)(v252 + 8) & v256) != 0))
          {
            if ((v255 & v256) == 0) {
              uint64_t v251 = v252;
            }
            if ((*(void *)(v251 + 8) & 1) != 0) {
              goto LABEL_374;
            }
            goto LABEL_380;
          }

          char v253 = 1;
          uint64_t v254 = 1LL;
        }

        while ((v257 & 1) == 0);
        if ((v255 & 1) == 0) {
          goto LABEL_380;
        }
LABEL_374:
        v268 = *(os_log_s **)v251;
        if (!*(void *)v251 || !os_log_type_enabled(*(os_log_t *)v251, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_380;
        }
        sub_7D084(__src, __s);
        v269 = __src[5] >= 0 ? __src : *(_DWORD **)__src;
        LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
        WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 216;
        WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v269;
        WORD2(v554[1].__r_.__value_.__r.__words[0]) = 2048;
        *(std::string::size_type *)((char *)v554[1].__r_.__value_.__r.__words + 6) = v541;
        _os_log_impl( &dword_0,  v268,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - created virtual %s stream at %p",  (uint8_t *)v554,  0x26u);
        if (SHIBYTE(__src[5]) < 0)
        {
          operator delete(*(void **)__src);
          if (!v193)
          {
LABEL_470:
            int v315 = v248;
            uint64_t v316 = v517;
            goto LABEL_471;
          }
        }

        else
        {
LABEL_380:
          if (!v193) {
            goto LABEL_470;
          }
        }

        __p[1] = 0LL;
        __p[0] = 0LL;
        v540 = 0LL;
        sub_27A974(v541, __p);
        v270 = (char *)__p[0];
        *(_OWORD *)&v554[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p[0];
        *(_OWORD *)&v554[0].__r_.__value_.__r.__words[2] = *((_OWORD *)__p[0] + 1);
        v554[1].__r_.__value_.__l.__size_ = *((void *)__p[0] + 4);
        v271 = (char *)__p[0] + 56;
        if ((char *)__p[0] + 56 != __p[1])
        {
          std::string::pointer data = v554[0].__r_.__value_.__l.__data_;
          do
          {
            v273 = (double *)(v271 + 48);
            double v274 = *v273;
            BOOL v275 = *v273 > 48000.0 || v274 <= *(double *)&data;
            if (!v275 && *((_DWORD *)v271 + 2) == 1819304813)
            {
              *(_OWORD *)&v554[0].__r_.__value_.__l.__data_ = *(_OWORD *)v271;
              *(_OWORD *)&v554[0].__r_.__value_.__r.__words[2] = *((_OWORD *)v271 + 1);
              v554[1].__r_.__value_.__l.__size_ = *((void *)v271 + 4);
              *(double *)&v554[0].__r_.__value_.__l.__data_ = v274;
              *(double *)&std::string::pointer data = v274;
            }

            v271 += 56;
          }

          while (v271 != __p[1]);
        }

        if (__p[0] != __p[1])
        {
          std::string::pointer v276 = v554[0].__r_.__value_.__l.__data_;
          do
          {
            v277 = (double *)(v270 + 48);
            double v278 = *v277;
            BOOL v279 = *((_DWORD *)v270 + 7) > HIDWORD(v554[1].__r_.__value_.__r.__words[0]) && *(double *)&v276 == v278;
            if (v279 && *((_DWORD *)v270 + 2) == 1819304813)
            {
              *(_OWORD *)&v554[0].__r_.__value_.__l.__data_ = *(_OWORD *)v270;
              *(_OWORD *)&v554[0].__r_.__value_.__r.__words[2] = *((_OWORD *)v270 + 1);
              v554[1].__r_.__value_.__l.__size_ = *((void *)v270 + 4);
              *(double *)&v554[0].__r_.__value_.__l.__data_ = v278;
              *(double *)&std::string::pointer v276 = v278;
            }

            v270 += 56;
          }

          while (v270 != __p[1]);
        }

        uint64_t v280 = sub_138E8(16);
        uint64_t v281 = sub_138E8(33);
        char v282 = 0;
        uint64_t v283 = 0LL;
        *(void *)__src = 0x100000002LL;
        uint64_t v284 = *(void *)(v280 + 8);
        while (1)
        {
          uint64_t v285 = (int)__src[v283];
          char v286 = v282;
          if (((v284 & v285) != 0) != ((*(void *)(v281 + 8) & v285) != 0)) {
            break;
          }
          char v282 = 1;
          uint64_t v283 = 1LL;
          if ((v286 & 1) != 0) {
            goto LABEL_410;
          }
        }

        if ((v284 & v285) == 0) {
          uint64_t v280 = v281;
        }
LABEL_410:
        v287 = *(os_log_s **)v280;
        if (*(void *)v280 && os_log_type_enabled(*(os_log_t *)v280, OS_LOG_TYPE_DEBUG))
        {
          sub_2CC00(&v538, (uint64_t)v554);
          v288 = &v538;
          if ((v538.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v288 = (std::string *)v538.__r_.__value_.__r.__words[0];
          }
          __src[0] = 136315650;
          *(void *)&__src[1] = "AggregateDevice_Multi.cpp";
          LOWORD(__src[3]) = 1024;
          *(_DWORD *)((char *)&__src[3] + 2) = 248;
          HIWORD(__src[4]) = 2080;
          *(void *)&__src[5] = v288;
          _os_log_impl( &dword_0,  v287,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting desired format: %s",  (uint8_t *)__src,  0x1Cu);
        }

        uint64_t v289 = sub_27F0CC(v541, (__int128 *)v554, 1);
        if ((_DWORD)v289)
        {
          uint64_t v290 = sub_138E8(16);
          uint64_t v291 = sub_138E8(33);
          char v292 = 0;
          uint64_t v293 = 0LL;
          *(void *)__src = 0x100000002LL;
          uint64_t v294 = *(void *)(v290 + 8);
          while (1)
          {
            uint64_t v295 = (int)__src[v293];
            char v296 = v292;
            if (((v294 & v295) != 0) != ((*(void *)(v291 + 8) & v295) != 0)) {
              break;
            }
            char v292 = 1;
            uint64_t v293 = 1LL;
            if ((v296 & 1) != 0) {
              goto LABEL_431;
            }
          }

          if ((v294 & v295) == 0) {
            uint64_t v290 = v291;
          }
LABEL_431:
          v300 = *(os_log_s **)v290;
          if (v300 && os_log_type_enabled(v300, OS_LOG_TYPE_ERROR))
          {
            sub_1548D4(&v538, v289);
            v301 = &v538;
            if ((v538.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              v301 = (std::string *)v538.__r_.__value_.__r.__words[0];
            }
            __src[0] = 136315650;
            *(void *)&__src[1] = "AggregateDevice_Multi.cpp";
            LOWORD(__src[3]) = 1024;
            *(_DWORD *)((char *)&__src[3] + 2) = 250;
            HIWORD(__src[4]) = 2080;
            *(void *)&__src[5] = v301;
            _os_log_impl( &dword_0,  v300,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Call to set stream format failed: %s.",  (uint8_t *)__src,  0x1Cu);
          }
        }

        for (n = (void *)v249[1]; ; n = (void *)n[1])
        {
          if (n == v249)
          {
            unsigned int v314 = HIDWORD(v554[1].__r_.__value_.__r.__words[0]);
LABEL_459:
            v186 = (unsigned int *)v504;
            int v315 = v248;
            uint64_t v316 = v517;
            goto LABEL_460;
          }

          v303 = (std::__shared_weak_count *)n[3];
          if (v303)
          {
            v304 = std::__shared_weak_count::lock(v303);
            uint64_t v305 = v304 ? n[2] : 0LL;
          }

          else
          {
            uint64_t v305 = 0LL;
            v304 = 0LL;
          }

          v306 = *(std::__shared_weak_count **)(a2 + 72);
          if (v306 && (v307 = std::__shared_weak_count::lock(v306)) != 0LL)
          {
            v308 = v307;
            BOOL v309 = v305 == *(void *)(a2 + 64);
            v310 = (unint64_t *)&v307->__shared_owners_;
            do
              unint64_t v311 = __ldaxr(v310);
            while (__stlxr(v311 - 1, v310));
            if (!v311)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v308);
            }
          }

          else
          {
            BOOL v309 = v305 == 0;
          }

          if (v304)
          {
            v312 = (unint64_t *)&v304->__shared_owners_;
            do
              unint64_t v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }

          if (v309) {
            break;
          }
        }

        unsigned int v314 = HIDWORD(v554[1].__r_.__value_.__r.__words[0]);
        if (v249 == n) {
          goto LABEL_459;
        }
        v186 = (unsigned int *)v504;
        int v315 = v248;
        uint64_t v316 = v517;
        if (HIDWORD(v554[1].__r_.__value_.__r.__words[0]) >= 3)
        {
          uint64_t v317 = sub_138E8(16);
          uint64_t v318 = sub_138E8(33);
          char v319 = 0;
          uint64_t v320 = 0LL;
          *(void *)__src = 0x100000002LL;
          uint64_t v321 = *(void *)(v317 + 8);
          while (1)
          {
            uint64_t v322 = (int)__src[v320];
            char v323 = v319;
            if (((v321 & v322) != 0) != ((*(void *)(v318 + 8) & v322) != 0)) {
              break;
            }
            char v319 = 1;
            uint64_t v320 = 1LL;
            if ((v323 & 1) != 0) {
              goto LABEL_524;
            }
          }

          if ((v321 & v322) == 0) {
            uint64_t v317 = v318;
          }
LABEL_524:
          v367 = *(os_log_s **)v317;
          if (v367 && os_log_type_enabled(v367, OS_LOG_TYPE_INFO))
          {
            __src[0] = 136315650;
            *(void *)&__src[1] = "AggregateDevice_Multi.cpp";
            LOWORD(__src[3]) = 1024;
            *(_DWORD *)((char *)&__src[3] + 2) = 256;
            HIWORD(__src[4]) = 1024;
            __src[5] = v314;
            _os_log_impl( &dword_0,  v367,  OS_LOG_TYPE_INFO,  "%25s:%-5d Returning the first two channels of a %u channel device as the default stereo pair. This may lea d to odd results.",  (uint8_t *)__src,  0x18u);
          }
        }

        if (v314 == 1)
        {
          uint64_t v368 = sub_138E8(16);
          uint64_t v369 = sub_138E8(33);
          char v370 = 0;
          uint64_t v371 = 0LL;
          *(void *)__src = 0x100000002LL;
          uint64_t v372 = *(void *)(v368 + 8);
          while (1)
          {
            uint64_t v373 = (int)__src[v371];
            char v374 = v370;
            if (((v372 & v373) != 0) != ((*(void *)(v369 + 8) & v373) != 0)) {
              break;
            }
            char v370 = 1;
            uint64_t v371 = 1LL;
            if ((v374 & 1) != 0) {
              goto LABEL_534;
            }
          }

          if ((v372 & v373) == 0) {
            uint64_t v368 = v369;
          }
LABEL_534:
          v375 = *(os_log_s **)v368;
          if (v375 && os_log_type_enabled(v375, OS_LOG_TYPE_INFO))
          {
            __src[0] = 136315394;
            *(void *)&__src[1] = "AggregateDevice_Multi.cpp";
            LOWORD(__src[3]) = 1024;
            *(_DWORD *)((char *)&__src[3] + 2) = 257;
            _os_log_impl( &dword_0,  v375,  OS_LOG_TYPE_INFO,  "%25s:%-5d Encountered a mono default device. It is not possible to set return preferred channels for stere o for this device.",  (uint8_t *)__src,  0x12u);
          }
        }

        if (v314 >= 2)
        {
          __src[0] = v509;
          __src[1] = v509 + 1;
          sub_909D8((char *)v546, (char *)__src, (uint64_t)&__src[2], 2uLL);
        }

LABEL_460:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        v509 += v314;
LABEL_471:
        v324 = *(_OWORD **)&buf[v316];
        unint64_t v325 = *(void *)&buf[v510];
        if ((unint64_t)v324 >= v325)
        {
          uint64_t v328 = *(void *)&buf[v507];
          uint64_t v329 = ((uint64_t)v324 - v328) >> 4;
          uint64_t v330 = v325 - v328;
          uint64_t v331 = v330 >> 3;
          else {
            unint64_t v332 = v331;
          }
          v554[1].__r_.__value_.__l.__size_ = v503;
          v333 = (char *)sub_7BE90(v332);
          v335 = &v333[16 * v329];
          *(_OWORD *)v335 = v541;
          __int128 v541 = 0uLL;
          v336 = *(void **)&buf[v517];
          v337 = *(void **)&buf[v507];
          if (v336 == v337)
          {
            std::string::size_type v340 = *(void *)&buf[v517];
            v338 = &v333[16 * v329];
          }

          else
          {
            v338 = &v333[16 * v329];
            do
            {
              __int128 v339 = *((_OWORD *)v336 - 1);
              v336 -= 2;
              *((_OWORD *)v338 - 1) = v339;
              v338 -= 16;
              void *v336 = 0LL;
              v336[1] = 0LL;
            }

            while (v336 != v337);
            std::string::size_type v340 = *(void *)&buf[v507];
            v336 = *(void **)&buf[v517];
          }

          uint64_t v327 = v517;
          *(void *)&buf[v507] = v338;
          v326 = v335 + 16;
          *(void *)&buf[v517] = v335 + 16;
          std::string::size_type v341 = *(void *)&buf[v510];
          *(void *)&buf[v510] = &v333[16 * v334];
          v554[0].__r_.__value_.__l.__cap_ = (std::string::size_type)v336;
          v554[1].__r_.__value_.__r.__words[0] = v341;
          v554[0].__r_.__value_.__r.__words[0] = v340;
          v554[0].__r_.__value_.__l.__size_ = v340;
          sub_A0D64((uint64_t)v554);
        }

        else
        {
          _OWORD *v324 = v541;
          v326 = v324 + 1;
          __int128 v541 = 0uLL;
          uint64_t v327 = v517;
        }

        *(void *)&buf[v327] = v326;
        uint64_t v342 = sub_138E8(16);
        uint64_t v343 = sub_138E8(33);
        char v344 = 0;
        uint64_t v345 = 0LL;
        v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
        uint64_t v346 = *(void *)(v342 + 8);
        int v193 = v506;
        while (1)
        {
          uint64_t v347 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v345);
          char v348 = v344;
          if (((v346 & v347) != 0) != ((*(void *)(v343 + 8) & v347) != 0)) {
            break;
          }
          char v344 = 1;
          uint64_t v345 = 1LL;
          if ((v348 & 1) != 0)
          {
            if ((v346 & 1) == 0) {
              goto LABEL_496;
            }
            goto LABEL_493;
          }
        }

        if ((v346 & v347) == 0) {
          uint64_t v342 = v343;
        }
        if ((*(void *)(v342 + 8) & 1) != 0)
        {
LABEL_493:
          v349 = *(os_log_s **)v342;
          if (*(void *)v342 && os_log_type_enabled(*(os_log_t *)v342, OS_LOG_TYPE_DEBUG))
          {
            std::string::size_type v350 = *(void *)(*(void *)&buf[v517] - 16LL);
            LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
            WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 270;
            WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2048;
            *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = v350;
            WORD2(v554[1].__r_.__value_.__r.__words[0]) = 1024;
            *(_DWORD *)((char *)v554[1].__r_.__value_.__r.__words + 6) = v315;
            _os_log_impl( &dword_0,  v349,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - added client stream %p at index %u.",  (uint8_t *)v554,  0x22u);
          }
        }

LABEL_514:
        v364 = (std::__shared_weak_count *)*((void *)&v541 + 1);
        if (*((void *)&v541 + 1))
        {
          v365 = (unint64_t *)(*((void *)&v541 + 1) + 8LL);
          do
            unint64_t v366 = __ldaxr(v365);
          while (__stlxr(v366 - 1, v365));
          if (!v366)
          {
            ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
            std::__shared_weak_count::__release_weak(v364);
          }
        }

        uint64_t v192 = (v315 + 1);
LABEL_520:
        uint64_t v246 = (v247 + 1);
        uint64_t v245 = *(uint64_t *)((char *)v516 + v515);
        uint64_t v247 = v246;
      }

      while (0xAAAAAAAAAAAAAAABLL * ((v514[1] - v245) >> 3) != v246);
LABEL_539:
      v516 = (uint64_t *)v516[1];
    }

    while (v516 != (uint64_t *)&v535);
LABEL_540:
    char v190 = 1;
    uint64_t v191 = 1LL;
  }

  while ((v500 & 1) == 0);
  sub_2B32AC((uint64_t)v508, (uint64_t)buf);
  if (v546[0])
  {
    v546[1] = v546[0];
    operator delete(v546[0]);
  }

  v554[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v544 + 8;
  sub_2A4E90((void ***)v554);
  v554[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v543;
  sub_2A4E90((void ***)v554);
  v554[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[24];
  sub_7A668((void ***)v554);
  v554[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_7A668((void ***)v554);
  *(void *)AudioBufferList buf = &v527;
  sub_7A668((void ***)buf);
  sub_1BCA68(a2, a3);
  memset(v554, 0, 24);
  memset(__src, 0, 24);
  __p[1] = 0LL;
  __p[0] = 0LL;
  v540 = 0LL;
  v376 = *(void **)(*(void *)a2 + 24LL);
  if (v376 == (void *)(*(void *)a2 + 16LL))
  {
LABEL_713:
    v487 = (os_log_t *)sub_138E8(13);
    v488 = *v487;
    if (*v487 && os_log_type_enabled(*v487, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 347;
      _os_log_impl( &dword_0,  v488,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): muteControlList is empty.",  buf,  0x12u);
    }

    v489 = __cxa_allocate_exception(0x10uLL);
    *(void *)v489 = &off_4865A0;
    v489[2] = 2003329396;
  }

  while (2)
  {
    sub_B8CBC((uint64_t *)&v527, v376 + 2, "", 292);
    sub_B8CBC((uint64_t *)&v541, v376 + 4, "", 293);
    uint64_t v377 = *(unsigned int *)(v541 + 144);
    if ((_DWORD)v377 == 1885433888)
    {
      uint64_t v378 = *(void *)&v527[48]._os_unfair_lock_opaque;
      if (!v378)
      {
        v467 = (os_log_t *)sub_138E8(13);
        v468 = *v467;
        if (*v467 && os_log_type_enabled(*v467, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(__int128 *__return_ptr))(*(void *)&v527->_os_unfair_lock_opaque + 144LL))(&v526);
          uint64_t v469 = v526;
          sub_2CA1C(&v538, v527[36]._os_unfair_lock_opaque);
          if ((v538.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v470 = &v538;
          }
          else {
            v470 = (std::string *)v538.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 326;
          *(_WORD *)&_BYTE buf[18] = 2112;
          *(void *)&buf[20] = v469;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&_BYTE buf[30] = v470;
          _os_log_impl( &dword_0,  v468,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [controlDevice is NULL]: could not get device for por t \\%@\\ (type: '%s').",  buf,  0x26u);
          sub_19DFC((uint64_t)&v526);
        }

        v471 = __cxa_allocate_exception(0x10uLL);
        *(void *)v471 = &off_4865A0;
        v471[2] = 2003329396;
      }

      (*(void (**)(uint8_t *__return_ptr, void, void, void))(*(void *)v378 + 256LL))( buf,  *(void *)&v527[48]._os_unfair_lock_opaque,  0LL,  v527[36]._os_unfair_lock_opaque);
      __int128 v526 = 0uLL;
      if (!*(void *)&buf[8]) {
        goto LABEL_663;
      }
      v379 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
      *((void *)&v526 + 1) = v379;
      if (v379)
      {
        uint64_t v380 = *(void *)buf;
        *(void *)&__int128 v526 = *(void *)buf;
      }

      else
      {
        uint64_t v380 = 0LL;
      }

      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
      }
      if (!v380)
      {
LABEL_663:
        v459 = (os_log_t *)sub_138E8(13);
        v460 = *v459;
        if (*v459 && os_log_type_enabled(*v459, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 329;
          _os_log_impl( &dword_0,  v460,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate input volume control",  buf,  0x12u);
        }

        v461 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v461, "Unable to locate input volume control");
      }

      sub_1B6AD4((uint64_t)&v538, v378, (uint64_t)v527, a2, v376[9], *(_DWORD *)(a2 + 12));
      sub_1B4C60( v380,  (uint64_t)v508,  (uint64_t)v527,  *(unsigned int *)(v541 + 144),  (uint64_t)&v538,  v376[9],  *(unsigned int *)(a2 + 12),  *(void *)(a2 + 104));
      sub_216D88(&v523, v380, v379);
      v396 = (char *)__p[1];
      if (__p[1] >= v540)
      {
        int64_t v398 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        unint64_t v399 = (v540 - (char *)__p[0]) >> 3;
        if (v399 <= v398 + 1) {
          unint64_t v399 = v398 + 1;
        }
        else {
          unint64_t v400 = v399;
        }
        *(void *)&_BYTE buf[32] = &v540;
        v401 = (char *)sub_7BE90(v400);
        v403 = &v401[16 * v398];
        *(_OWORD *)v403 = v523;
        __int128 v523 = 0uLL;
        v404 = __p[1];
        v405 = __p[0];
        if (__p[1] == __p[0])
        {
          int64x2_t v408 = vdupq_n_s64((unint64_t)__p[1]);
          v406 = &v401[16 * v398];
        }

        else
        {
          v406 = &v401[16 * v398];
          do
          {
            __int128 v407 = *((_OWORD *)v404 - 1);
            v404 -= 2;
            *((_OWORD *)v406 - 1) = v407;
            v406 -= 16;
            void *v404 = 0LL;
            v404[1] = 0LL;
          }

          while (v404 != v405);
          int64x2_t v408 = *(int64x2_t *)__p;
        }

        v397 = v403 + 16;
        __p[0] = v406;
        __p[1] = v403 + 16;
        *(int64x2_t *)&_DWORD buf[8] = v408;
        v426 = v540;
        v540 = &v401[16 * v402];
        *(void *)&_BYTE buf[24] = v426;
        *(void *)AudioBufferList buf = v408.i64[0];
        sub_A0D64((uint64_t)buf);
      }

      else
      {
        *(_OWORD *)__p[1] = v523;
        v397 = v396 + 16;
      }

      __p[1] = v397;
      if (v538.__r_.__value_.__r.__words[0])
      {
        v538.__r_.__value_.__l.__size_ = v538.__r_.__value_.__r.__words[0];
        operator delete(v538.__r_.__value_.__l.__data_);
      }

      if (v379)
      {
        v427 = (unint64_t *)&v379->__shared_owners_;
        do
          unint64_t v428 = __ldaxr(v427);
        while (__stlxr(v428 - 1, v427));
        if (!v428)
        {
          ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
          v429 = v379;
          goto LABEL_622;
        }
      }
    }

    else
    {
      uint64_t v381 = *(void *)(v541 + 192);
      if (!v381)
      {
        v472 = (os_log_t *)sub_138E8(13);
        v473 = *v472;
        if (*v472 && os_log_type_enabled(*v472, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(__int128 *__return_ptr))(*(void *)v541 + 144LL))(&v526);
          uint64_t v474 = v526;
          sub_2CA1C(&v538, *(unsigned int *)(v541 + 144));
          if ((v538.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v475 = &v538;
          }
          else {
            v475 = (std::string *)v538.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 304;
          *(_WORD *)&_BYTE buf[18] = 2112;
          *(void *)&buf[20] = v474;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&_BYTE buf[30] = v475;
          _os_log_impl( &dword_0,  v473,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [controlDevice is NULL]: could not get device for por t \\%@\\ (type: '%s').",  buf,  0x26u);
          sub_19DFC((uint64_t)&v526);
        }

        v476 = __cxa_allocate_exception(0x10uLL);
        *(void *)v476 = &off_4865A0;
        v476[2] = 2003329396;
      }

      int v382 = *(_DWORD *)(v541 + 264);
      (*(void (**)(std::string *__return_ptr, void, uint64_t, void))(*(void *)v381 + 248LL))( &v538,  *(void *)(v541 + 192),  1LL,  *(unsigned int *)(v541 + 144));
      if (!v538.__r_.__value_.__l.__size_ || *(void *)(v538.__r_.__value_.__l.__size_ + 8) == -1LL)
      {
        v456 = (os_log_t *)sub_138E8(13);
        v457 = *v456;
        if (*v456 && os_log_type_enabled(*v456, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 307;
          _os_log_impl( &dword_0,  v457,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control.",  buf,  0x12u);
        }

        v458 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v458, "Unable to locate mute control.");
      }

      sub_150BF4( &v526,  (uint64_t)v538.__r_.__value_.__l.__data_,  (std::__shared_weak_count *)v538.__r_.__value_.__l.__size_);
      std::string::size_type v383 = v554[0].__r_.__value_.__l.__size_;
      if (v554[0].__r_.__value_.__l.__size_ >= v554[0].__r_.__value_.__l.__cap_)
      {
        uint64_t v385 = (uint64_t)(v554[0].__r_.__value_.__l.__size_ - v554[0].__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v386 = (uint64_t)(v554[0].__r_.__value_.__l.__cap_ - v554[0].__r_.__value_.__r.__words[0]) >> 3;
        if (v386 <= v385 + 1) {
          unint64_t v386 = v385 + 1;
        }
        if (v554[0].__r_.__value_.__l.__cap_ - v554[0].__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF0LL) {
          unint64_t v387 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v387 = v386;
        }
        *(void *)&_BYTE buf[32] = &v554[0].__r_.__value_.__l.__cap_;
        v388 = (char *)sub_7BE90(v387);
        v390 = &v388[16 * v385];
        *(_OWORD *)v390 = v526;
        __int128 v526 = 0uLL;
        v391 = (void *)v554[0].__r_.__value_.__l.__size_;
        std::string::size_type v392 = v554[0].__r_.__value_.__r.__words[0];
        if (v554[0].__r_.__value_.__l.__size_ == v554[0].__r_.__value_.__r.__words[0])
        {
          int64x2_t v395 = vdupq_n_s64(v554[0].__r_.__value_.__l.__size_);
          std::string::size_type v393 = (std::string::size_type)&v388[16 * v385];
        }

        else
        {
          std::string::size_type v393 = (std::string::size_type)&v388[16 * v385];
          do
          {
            __int128 v394 = *((_OWORD *)v391 - 1);
            v391 -= 2;
            *(_OWORD *)(v393 - 16) = v394;
            v393 -= 16LL;
            void *v391 = 0LL;
            v391[1] = 0LL;
          }

          while (v391 != (void *)v392);
          int64x2_t v395 = *(int64x2_t *)&v554[0].__r_.__value_.__l.__data_;
        }

        std::string::size_type v384 = (std::string::size_type)(v390 + 16);
        v554[0].__r_.__value_.__r.__words[0] = v393;
        v554[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v390 + 16);
        *(int64x2_t *)&_DWORD buf[8] = v395;
        std::string::size_type v409 = v554[0].__r_.__value_.__l.__cap_;
        v554[0].__r_.__value_.__l.__cap_ = (std::string::size_type)&v388[16 * v389];
        *(void *)&_BYTE buf[24] = v409;
        *(void *)AudioBufferList buf = v395.i64[0];
        sub_A0D64((uint64_t)buf);
      }

      else
      {
        *(_OWORD *)v554[0].__r_.__value_.__l.__size_ = v526;
        std::string::size_type v384 = v383 + 16;
      }

      v554[0].__r_.__value_.__l.__size_ = v384;
      if (sub_1B5B3C(*(void *)(a2 + 112), *(unsigned int *)(a2 + 12), v377, v382))
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v381 + 256LL))( buf,  v381,  1LL,  v377);
        __int128 v526 = 0uLL;
        if (!*(void *)&buf[8]) {
          goto LABEL_694;
        }
        v410 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
        *((void *)&v526 + 1) = v410;
        if (v410)
        {
          uint64_t v411 = *(void *)buf;
          *(void *)&__int128 v526 = *(void *)buf;
        }

        else
        {
          uint64_t v411 = 0LL;
        }

        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
        if (!v411)
        {
LABEL_694:
          v477 = (os_log_t *)sub_138E8(13);
          v478 = *v477;
          if (*v477 && os_log_type_enabled(*v477, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioBufferList buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 313;
            _os_log_impl( &dword_0,  v478,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control",  buf,  0x12u);
          }

          v479 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v479, "Unable to locate volume control");
        }

        uint64_t v412 = v376[9];
        LOBYTE(v524[0]) = 0;
        char v525 = 0;
        sub_1B1E64(v411, (uint64_t)v508, (unsigned int *)v541, v412, a2, 0LL, (uint64_t)v524);
        if (v525 && v524[0])
        {
          v524[1] = v524[0];
          operator delete(v524[0]);
        }

        sub_216D88(&v523, v411, v410);
        uint64_t v413 = *(void *)&__src[2];
        if (*(void *)&__src[2] >= *(void *)&__src[4])
        {
          uint64_t v415 = (uint64_t)(*(void *)&__src[2] - *(void *)__src) >> 4;
          unint64_t v416 = (uint64_t)(*(void *)&__src[4] - *(void *)__src) >> 3;
          if (v416 <= v415 + 1) {
            unint64_t v416 = v415 + 1;
          }
          if (*(void *)&__src[4] - *(void *)__src >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v417 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v417 = v416;
          }
          *(void *)&_BYTE buf[32] = &__src[4];
          v418 = (char *)sub_7BE90(v417);
          v420 = &v418[16 * v415];
          *(_OWORD *)v420 = v523;
          __int128 v523 = 0uLL;
          v422 = *(void **)__src;
          v421 = *(void **)&__src[2];
          if (*(void *)&__src[2] == *(void *)__src)
          {
            int64x2_t v425 = vdupq_n_s64(*(unint64_t *)&__src[2]);
            v423 = &v418[16 * v415];
          }

          else
          {
            v423 = &v418[16 * v415];
            do
            {
              __int128 v424 = *((_OWORD *)v421 - 1);
              v421 -= 2;
              *((_OWORD *)v423 - 1) = v424;
              v423 -= 16;
              void *v421 = 0LL;
              v421[1] = 0LL;
            }

            while (v421 != v422);
            int64x2_t v425 = *(int64x2_t *)__src;
          }

          v414 = v420 + 16;
          *(void *)__src = v423;
          *(void *)&__src[2] = v420 + 16;
          *(int64x2_t *)&_DWORD buf[8] = v425;
          uint64_t v430 = *(void *)&__src[4];
          *(void *)&__src[4] = &v418[16 * v419];
          *(void *)&_BYTE buf[24] = v430;
          *(void *)AudioBufferList buf = v425.i64[0];
          sub_A0D64((uint64_t)buf);
        }

        else
        {
          **(_OWORD **)&__src[2] = v523;
          v414 = (_OWORD *)(v413 + 16);
        }

        *(void *)&__src[2] = v414;
        if (v410)
        {
          v431 = (unint64_t *)&v410->__shared_owners_;
          do
            unint64_t v432 = __ldaxr(v431);
          while (__stlxr(v432 - 1, v431));
          if (!v432)
          {
            ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
            std::__shared_weak_count::__release_weak(v410);
          }
        }
      }

      v429 = (std::__shared_weak_count *)v538.__r_.__value_.__l.__size_;
      if (v538.__r_.__value_.__l.__size_) {
LABEL_622:
      }
        std::__shared_weak_count::__release_weak(v429);
    }

    v433 = (std::__shared_weak_count *)*((void *)&v541 + 1);
    if (*((void *)&v541 + 1))
    {
      v434 = (unint64_t *)(*((void *)&v541 + 1) + 8LL);
      do
        unint64_t v435 = __ldaxr(v434);
      while (__stlxr(v435 - 1, v434));
      if (!v435)
      {
        ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
        std::__shared_weak_count::__release_weak(v433);
      }
    }

    v436 = v528;
    if (v528)
    {
      v437 = (unint64_t *)&v528->__shared_owners_;
      do
        unint64_t v438 = __ldaxr(v437);
      while (__stlxr(v438 - 1, v437));
      if (!v438)
      {
        ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
        std::__shared_weak_count::__release_weak(v436);
      }
    }

    v376 = (void *)v376[1];
    if (v376 != (void *)(*(void *)a2 + 16LL)) {
      continue;
    }
    break;
  }

  if (v554[0].__r_.__value_.__r.__words[0] == v554[0].__r_.__value_.__l.__size_) {
    goto LABEL_713;
  }
  sub_1BCF60((uint64_t)v508, a3, a5, v496);
  a4[2] = v508;
  a4[3] = 0LL;
  v439 = operator new(0x68uLL);
  sub_20D0B4((uint64_t)v439, (char **)__src);
  a4[4] = v439;
  v440 = operator new(0x68uLL);
  sub_20D2F0((uint64_t)v440, &v554[0].__r_.__value_.__l.__data_);
  a4[5] = v440;
  v441 = operator new(0x68uLL);
  sub_20D0B4((uint64_t)v441, (char **)__p);
  a4[6] = v441;
  v442 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  v521 = *(std::__shared_weak_count **)&buf[8];
  __int128 v522 = *(_OWORD *)buf;
  *(void *)&_DWORD buf[8] = 0LL;
  *(void *)AudioBufferList buf = 0LL;
  sub_CAF18((uint64_t)v442, &v522);
  a4[7] = v442;
  if (v521)
  {
    v443 = (unint64_t *)&v521->__shared_owners_;
    do
      unint64_t v444 = __ldaxr(v443);
    while (__stlxr(v444 - 1, v443));
    if (!v444)
    {
      ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
      std::__shared_weak_count::__release_weak(v521);
    }
  }

  v445 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v446 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v447 = __ldaxr(v446);
    while (__stlxr(v447 - 1, v446));
    if (!v447)
    {
      ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
      std::__shared_weak_count::__release_weak(v445);
    }
  }

  *(void *)AudioBufferList buf = __p;
  sub_7A668((void ***)buf);
  *(void *)AudioBufferList buf = __src;
  sub_7A668((void ***)buf);
  *(void *)AudioBufferList buf = v554;
  sub_7A668((void ***)buf);
  if (v532[0]) {
    operator delete(v532[0]);
  }
  sub_32C8C(v534[0]);
  sub_85CA0((uint64_t *)&v535);
  return 0LL;
}

void sub_2F9200( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  *(void *)(v70 - 160) = &a63;
  sub_7A668((void ***)(v70 - 160));
  if (a69) {
    operator delete(a69);
  }
  sub_32C8C((void *)STACK[0x200]);
  sub_85CA0((uint64_t *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_2F9664( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    sub_7A768(a20);
    JUMPOUT(0x2F9808LL);
  }

  _Unwind_Resume(a1);
}

void sub_2F969C()
{
  if (v0) {
    JUMPOUT(0x2F96A8LL);
  }
  JUMPOUT(0x2F96CCLL);
}

void sub_2F96B8()
{
  if (STACK[0x270])
  {
    STACK[0x278] = STACK[0x270];
    JUMPOUT(0x2F96C8LL);
  }

  JUMPOUT(0x2F96CCLL);
}

void sub_2F9720(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    int16x8_t v3 = (std::__shared_weak_count *)STACK[0x268];
    if (STACK[0x268])
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    JUMPOUT(0x2F9808LL);
  }

  _Unwind_Resume(a1);
}

void sub_2F973C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x2F974CLL);
  }
  _Unwind_Resume(a1);
}

void sub_2F9768(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    sub_7A768(v2 - 216);
    int16x8_t v3 = (std::__shared_weak_count *)STACK[0x268];
    if (STACK[0x268])
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    JUMPOUT(0x2F9808LL);
  }

  _Unwind_Resume(a1);
}

void sub_2F9788(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)STACK[0x240];
    if (STACK[0x240])
    {
      STACK[0x248] = (unint64_t)v2;
      operator delete(v2);
    }

    int16x8_t v3 = (std::__shared_weak_count *)STACK[0x268];
    if (STACK[0x268])
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    JUMPOUT(0x2F9808LL);
  }

  _Unwind_Resume(a1);
}

void sub_2F97BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x2F97C4LL);
  }
  _Unwind_Resume(a1);
}

void sub_2F9800( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a38 + 120LL))(a38);
    sub_2893F4(v38);
    __cxa_rethrow();
  }

  _Unwind_Resume(a1);
}

void sub_2F982C()
{
}

void sub_2F98C4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x2F98CCLL);
  }
  sub_7A0E8(a1);
}

void *sub_2F98DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    unint64_t v5 = (unint64_t *)(a3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  sub_7A5B8(a1 + 2, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_2F9934(_Unwind_Exception *a1)
{
}

void sub_2F9954(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2B1D68(a1);
  operator delete(v1);
}

uint64_t sub_2F9968(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector != 1936879204 && a2->mSelector != 1936876644) {
    return sub_2A9940(a1, a2);
  }
  BOOL v5 = sub_2FC850(a2);
  sub_9D988(&v39, (void *)(a1 + 184), "", 328);
  unint64_t v6 = v40;
  if (v40 == &v39)
  {
    unsigned int v7 = 0;
    if (v5) {
      goto LABEL_31;
    }
LABEL_12:
    uint64_t v9 = sub_138E8(16);
    uint64_t v10 = sub_138E8(33);
    char v11 = 0;
    uint64_t v12 = 0LL;
    *(void *)AudioBufferList buf = 0x100000002LL;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *(int *)&buf[4 * v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1LL;
      if ((v15 & 1) != 0)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_31;
        }
        goto LABEL_20;
      }
    }

    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
    if ((*(void *)(v9 + 8) & 1) != 0)
    {
LABEL_20:
      BOOL v16 = *(os_log_s **)v9;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        sub_23FE8((uint64_t)v37, (os_unfair_lock_t)(a1 + 8));
        int v17 = v38;
        uint64_t v18 = (void **)v37[0];
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v33);
        int v19 = v37;
        if (v17 < 0) {
          int v19 = v18;
        }
        if (v36 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v42 = 1024;
        int v43 = 335;
        __int16 v44 = 2080;
        unint64_t v45 = v19;
        __int16 v46 = 2080;
        uint64_t v47 = v20;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Multi-Route aggregate %s does not support property %s",  buf,  0x26u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
      }

      goto LABEL_31;
    }

    goto LABEL_31;
  }

  do
  {
    unsigned int v7 = (*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v6[2] + 16LL))(v6[2], a2);
    if ((v7 & 1) != 0) {
      break;
    }
    unint64_t v6 = (uint64_t *)v6[1];
  }

  while (v6 != &v39);
  if (!v5) {
    goto LABEL_12;
  }
LABEL_31:
  if ((v7 & 1) == 0)
  {
    uint64_t v21 = sub_138E8(16);
    uint64_t v22 = sub_138E8(33);
    char v23 = 0;
    uint64_t v24 = 0LL;
    *(void *)AudioBufferList buf = 0x100000002LL;
    uint64_t v25 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v26 = *(int *)&buf[4 * v24];
      char v27 = v23;
      if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
        break;
      }
      char v23 = 1;
      uint64_t v24 = 1LL;
      if ((v27 & 1) != 0)
      {
        if ((v25 & 1) == 0) {
          goto LABEL_51;
        }
        goto LABEL_40;
      }
    }

    if ((v25 & v26) == 0) {
      uint64_t v21 = v22;
    }
    if ((*(void *)(v21 + 8) & 1) != 0)
    {
LABEL_40:
      int v28 = *(os_log_s **)v21;
      if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        sub_23FE8((uint64_t)v37, (os_unfair_lock_t)(a1 + 8));
        int v29 = v38;
        os_log_t v30 = (void **)v37[0];
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v33);
        uint64_t v31 = v37;
        if (v29 < 0) {
          uint64_t v31 = v30;
        }
        if (v36 >= 0) {
          uint64_t v32 = __p;
        }
        else {
          uint64_t v32 = (void **)__p[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v42 = 1024;
        int v43 = 336;
        __int16 v44 = 2080;
        unint64_t v45 = v31;
        __int16 v46 = 2080;
        uint64_t v47 = v32;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Multi-Route aggregate %s does not support property %s; none of the aggregated physical devices suppo"
          "rt this property",
          buf,
          0x26u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
      }
    }
  }

void sub_2F9D70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v19 < 0) {
    operator delete(v18);
  }
  sub_1BB88(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_2F9DC0(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1936876644 || a2->mSelector == 1936879204) {
    return 0LL;
  }
  else {
    return sub_2A99D0(a1, a2);
  }
}

uint64_t sub_2F9DEC(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))(a1) & 1) == 0)
  {
    char v15 = (os_log_t *)sub_138E8(13);
    BOOL v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      os_log_t v30 = *(void **)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v30);
      int v17 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v39 = 1024;
      int v40 = 374;
      __int16 v41 = 2080;
      __int16 v42 = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      os_log_t v30 = *(void **)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v30);
      uint64_t v21 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v39 = 1024;
      int v40 = 375;
      __int16 v41 = 2080;
      __int16 v42 = v21;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v22 = &off_4865A0;
    CFStringRef v22[2] = 561211770;
  }

  if (*(_DWORD *)a2 != 1936879204 && *(_DWORD *)a2 != 1936876644) {
    return sub_2A9A20((uint64_t)a1, (AudioObjectPropertyAddress *)a2, a3, a4);
  }
  if (!*(void *)&a1[50]._os_unfair_lock_opaque)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v39 = 1024;
        int v40 = 384;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty should have blocked this code path because there are no physical de vices in the aggregate.",  buf,  0x12u);
      }
    }
  }

  *(void *)AudioBufferList buf = *(void *)a2;
  *(_DWORD *)&_DWORD buf[8] = *(_DWORD *)(a2 + 8);
  sub_2FAC2C(&v35, a1, (unsigned int *)buf);
  uint64_t v9 = v35;
  if (!v35)
  {
    char v23 = (os_log_t *)sub_138E8(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void **)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v33);
      int v25 = v37;
      uint64_t v26 = (void **)__p[0];
      sub_23FE8((uint64_t)&v30, a1 + 2);
      char v27 = __p;
      if (v25 < 0) {
        char v27 = v26;
      }
      if (v32 >= 0) {
        int v28 = &v30;
      }
      else {
        int v28 = v30;
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v39 = 1024;
      int v40 = 387;
      __int16 v41 = 2080;
      __int16 v42 = v27;
      __int16 v43 = 2080;
      v44[0] = v28;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Could not create AudioChannelLayout for address %s on mu lti-Route aggregate %s",  buf,  0x26u);
      if (v32 < 0) {
        operator delete(v30);
      }
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    int v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v29 = &off_4865A0;
    v29[2] = 2003329396;
  }

  int v10 = sub_A9B7C(*((_DWORD *)v35 + 2));
  uint64_t v11 = sub_A9BE8(v10);
  free(v9);
  return v11;
}

void sub_2FA2BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2FA2F4(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, __CFString *a4, int *a5, void *a6)
{
  if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))(a1) & 1) == 0)
  {
    os_log_t v30 = (os_log_t *)sub_138E8(13);
    int v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      char v57 = *(void **)a2;
      int v58 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v57);
      char v32 = v64 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v66 = 1024;
      int v67 = 404;
      __int16 v68 = 2080;
      uint64_t v69 = (const char *)v32;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v64 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v34 = (os_log_t *)sub_138E8(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      char v57 = *(void **)a2;
      int v58 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v57);
      char v36 = v64 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v66 = 1024;
      int v67 = 405;
      __int16 v68 = 2080;
      uint64_t v69 = (const char *)v36;
      __int16 v70 = 1024;
      *(_DWORD *)int v71 = a3;
      *(_WORD *)&v71[4] = 2048;
      *(void *)&v71[6] = a4;
      _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v64 < 0) {
        operator delete(__p[0]);
      }
    }

    char v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v37 = &off_4865A0;
    v37[2] = 561211770;
  }

  if (!a6)
  {
    char v38 = (os_log_t *)sub_138E8(13);
    __int16 v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      char v57 = *(void **)a2;
      int v58 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v57);
      int v40 = v64 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v66 = 1024;
      int v67 = 406;
      __int16 v68 = 2080;
      uint64_t v69 = "outData";
      __int16 v70 = 2080;
      *(void *)int v71 = v40;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v64 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v41 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v41 = &off_4865A0;
    v41[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 1936879204 || *(_DWORD *)a2 == 1936876644)
  {
    if (!*(void *)&a1[50]._os_unfair_lock_opaque)
    {
      int v28 = (os_log_t *)sub_138E8(13);
      int v29 = *v28;
      if (*v28)
      {
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
          __int16 v66 = 1024;
          int v67 = 413;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty should have blocked this code path because there are no physical devices in the aggregate.",  buf,  0x12u);
        }
      }
    }

    *(void *)AudioBufferList buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = *(_DWORD *)(a2 + 8);
    sub_2FAC2C(&v62, a1, (unsigned int *)buf);
    uint64_t v12 = v62;
    if (!v62)
    {
      __int16 v42 = (os_log_t *)sub_138E8(13);
      __int16 v43 = *v42;
      if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        uint64_t v60 = *(void **)a2;
        int v61 = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)__p, (unsigned int *)&v60);
        int v44 = v64;
        unint64_t v45 = (void **)__p[0];
        sub_23FE8((uint64_t)&v57, a1 + 2);
        __int16 v46 = __p;
        if (v44 < 0) {
          __int16 v46 = v45;
        }
        if (v59 >= 0) {
          uint64_t v47 = &v57;
        }
        else {
          uint64_t v47 = v57;
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v66 = 1024;
        int v67 = 417;
        __int16 v68 = 2080;
        uint64_t v69 = (const char *)v46;
        __int16 v70 = 2080;
        *(void *)int v71 = v47;
        _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Could not create AudioChannelLayout for address %s on multi-Route aggregate %s",  buf,  0x26u);
        if (v59 < 0) {
          operator delete(v57);
        }
        if (v64 < 0) {
          operator delete(__p[0]);
        }
      }

      char v48 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v48 = &off_4865A0;
      v48[2] = 2003329396;
    }

    if (*(_DWORD *)v62)
    {
      uint64_t v49 = (os_log_t *)sub_138E8(13);
      int v50 = *v49;
      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v66 = 1024;
        int v67 = 420;
        _os_log_impl(&dword_0, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      uint64_t v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v51, "Precondition failure.");
    }

    int v13 = sub_A9B7C(*((_DWORD *)v62 + 2));
    unsigned int v14 = sub_A9BE8(v13);
    unsigned int v15 = v14;
    if (v14 > *a5)
    {
      char v52 = (os_log_t *)sub_138E8(13);
      uint64_t v53 = *v52;
      if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
      {
        char v57 = *(void **)a2;
        int v58 = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)__p, (unsigned int *)&v57);
        unint64_t v54 = v64 >= 0 ? __p : (void **)__p[0];
        int v55 = *a5;
        *(_DWORD *)AudioBufferList buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v66 = 1024;
        int v67 = 422;
        __int16 v68 = 2080;
        uint64_t v69 = (const char *)v54;
        __int16 v70 = 1024;
        *(_DWORD *)int v71 = v55;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = v15;
        _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): HAL Precondition failure: Provided data size for p roperty %s was too small (passed: %u; minimum: %u).",
          buf,
          0x28u);
        if (v64 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v56 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v56 = &off_4865A0;
      v56[2] = 561211770;
    }

    *a5 = v14;
    memcpy(a6, v12, v14);
    free(v12);
  }

  else
  {
    sub_2A9D3C(&a1->_os_unfair_lock_opaque, a2, a3, a4, a5, (int *)a6);
  }

  if (*(_DWORD *)a2 == 1853059700)
  {
    uint64_t v16 = sub_138E8(16);
    uint64_t v17 = sub_138E8(36);
    char v18 = 0;
    uint64_t v19 = 0LL;
    *(void *)AudioBufferList buf = 0x100000002LL;
    uint64_t v20 = *(void *)(v16 + 8);
    while (1)
    {
      uint64_t v21 = *(int *)&buf[4 * v19];
      char v22 = v18;
      if (((v20 & v21) != 0) != ((*(void *)(v17 + 8) & v21) != 0)) {
        break;
      }
      char v18 = 1;
      uint64_t v19 = 1LL;
      if ((v22 & 1) != 0)
      {
        if ((v20 & 1) == 0) {
          return;
        }
        goto LABEL_21;
      }
    }

    if ((v20 & v21) == 0) {
      uint64_t v16 = v17;
    }
    if ((*(void *)(v16 + 8) & 1) != 0)
    {
LABEL_21:
      char v23 = *(os_log_s **)v16;
      if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = (const char *)*a6;
        sub_2CA1C(__p, *(unsigned int *)(a2 + 4));
        if (v64 >= 0) {
          int v25 = __p;
        }
        else {
          int v25 = (void **)__p[0];
        }
        int v26 = *(_DWORD *)(a2 + 4);
        int v27 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)AudioBufferList buf = 136316418;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v66 = 1024;
        int v67 = 435;
        __int16 v68 = 2048;
        uint64_t v69 = v24;
        __int16 v70 = 2080;
        *(void *)int v71 = v25;
        *(_WORD *)&v71[8] = 1024;
        *(_DWORD *)&v71[10] = v26;
        __int16 v72 = 1024;
        int v73 = v27;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Get sample rate value of %f from AggregateDevice_Common (selector: kAudioDevicePropertyNominalSample Rate; scope: '%s' (%u); element: %u).",
          buf,
          0x32u);
        if (v64 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

void sub_2FABD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2FAC2C(char **a1, os_unfair_lock_s *a2, unsigned int *a3)
{
  if (!sub_2FC850(a3))
  {
    char v179 = (os_log_t *)sub_138E8(13);
    int v180 = *v179;
    if (*v179 && os_log_type_enabled(*v179, OS_LOG_TYPE_ERROR))
    {
      sub_613AC((uint64_t)&v211, a3);
      uint64_t v181 = SHIBYTE(v213) >= 0 ? (void **)&v211 : v211;
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v215 = 1024;
      int v216 = 531;
      __int16 v217 = 2080;
      *(void *)uint64_t v218 = v181;
      _os_log_impl( &dword_0,  v180,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Property %s is not a valid AudioChannelLayout property",  buf,  0x1Cu);
      if (SHIBYTE(v213) < 0) {
        operator delete(v211);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1970171760;
  }

  uint64_t v195 = a2;
  if (((*(uint64_t (**)(os_unfair_lock_s *, unsigned int *))(*(void *)&a2->_os_unfair_lock_opaque + 16LL))( a2,  a3) & 1) == 0)
  {
    char v183 = (os_log_t *)sub_138E8(13);
    uint64_t v184 = *v183;
    if (*v183 && os_log_type_enabled(*v183, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)&v211, a2 + 2);
      int v185 = SHIBYTE(v213);
      v186 = v211;
      sub_613AC((uint64_t)&__p, a3);
      uint64_t v187 = &v211;
      if (v185 < 0) {
        uint64_t v187 = (void ***)v186;
      }
      if (v210 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v215 = 1024;
      int v216 = 532;
      __int16 v217 = 2080;
      *(void *)uint64_t v218 = v187;
      *(_WORD *)&v218[8] = 2080;
      *(void *)&v218[10] = p_p;
      _os_log_impl( &dword_0,  v184,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Multi-route aggregate %s does not support property %s",  buf,  0x26u);
      if (v210 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v213) < 0) {
        operator delete(v211);
      }
    }

    uint64_t v189 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v189 = &off_4865A0;
    v189[2] = 1970171760;
  }

  uint64_t v6 = sub_138E8(16);
  uint64_t v7 = sub_138E8(33);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_11;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
  if ((*(void *)(v6 + 8) & 1) != 0)
  {
LABEL_11:
    int v13 = *(os_log_s **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      sub_613AC((uint64_t)&v211, a3);
      int v14 = SHIBYTE(v213);
      unsigned int v15 = v211;
      sub_23FE8((uint64_t)&__p, a2 + 2);
      uint64_t v16 = &v211;
      if (v14 < 0) {
        uint64_t v16 = (void ***)v15;
      }
      if (v210 >= 0) {
        uint64_t v17 = &__p;
      }
      else {
        uint64_t v17 = __p;
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v215 = 1024;
      int v216 = 534;
      __int16 v217 = 2080;
      *(void *)uint64_t v218 = v16;
      *(_WORD *)&v218[8] = 2080;
      *(void *)&v218[10] = v17;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Building an AudioChannelLayout for address %s on multi-route aggregate %s",  buf,  0x26u);
      if (v210 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v213) < 0) {
        operator delete(v211);
      }
    }
  }

void sub_2FC5FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, std::__shared_weak_count *a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  std::string __p = (void *)(v43 - 200);
  sub_2FC8E8((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_2FC850(_DWORD *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_49D438);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_49D438))
  {
    xmmword_49D420 = xmmword_403320;
    qword_49D430 = 1869968496LL;
    __cxa_guard_release(&qword_49D438);
  }

  uint64_t v3 = 0LL;
  do
  {
    BOOL result = sub_5CCDC((int *)((char *)&xmmword_49D420 + v3), a1);
    if (result) {
      break;
    }
    BOOL v5 = v3 == 12;
    v3 += 12LL;
  }

  while (!v5);
  return result;
}

void sub_2FC8E8(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (void *)*(v4 - 2);
        v4 -= 2;
        uint64_t v6 = v7;
        *int v4 = 0LL;
        if (v7) {
          free(v6);
        }
      }

      while (v4 != v2);
      BOOL v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_2FC95C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49D460);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_49D460))
  {
    unsigned __int8 v2 = operator new(0x10uLL);
    void *v2 = 0LL;
    v2[1] = 0LL;
    qword_49D458 = (uint64_t)v2;
    __cxa_guard_release(&qword_49D460);
  }

  return qword_49D458;
}

void sub_2FC9BC(_Unwind_Exception *a1)
{
}

uint64_t sub_2FC9D4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49D470);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_49D470))
  {
    unsigned __int8 v2 = operator new(0x10uLL);
    void *v2 = 0LL;
    v2[1] = 0LL;
    qword_49D468 = (uint64_t)v2;
    __cxa_guard_release(&qword_49D470);
  }

  return qword_49D468;
}

void sub_2FCA34(_Unwind_Exception *a1)
{
}

std::string *sub_2FCA4C(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "LateNightMode: ", 0xFuLL);
  if ((*a2 & 1LL) != 0) {
    uint64_t v4 = 543977069LL;
  }
  else {
    uint64_t v4 = 560754285LL;
  }
  sub_2CA1C(&__p, v4);
  if ((v16 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v6 = v16;
  }
  else {
    std::string::size_type v6 = v15;
  }
  std::string::append(a1, p_p, v6);
  if ((*a2 & 2LL) != 0) {
    uint64_t v7 = 544631924LL;
  }
  else {
    uint64_t v7 = 561409140LL;
  }
  sub_2CA1C(&__p, v7);
  if ((v16 & 0x80u) == 0) {
    char v8 = (const std::string::value_type *)&__p;
  }
  else {
    char v8 = (const std::string::value_type *)__p;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v9 = v16;
  }
  else {
    std::string::size_type v9 = v15;
  }
  std::string::append(a1, v8, v9);
  if ((*a2 & 4LL) != 0) {
    uint64_t v10 = 543515751LL;
  }
  else {
    uint64_t v10 = 560292967LL;
  }
  sub_2CA1C(&__p, v10);
  if ((v16 & 0x80u) == 0) {
    uint64_t v11 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v11 = (const std::string::value_type *)__p;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v12 = v16;
  }
  else {
    std::string::size_type v12 = v15;
  }
  std::string::append(a1, v11, v12);
  return std::string::append(a1, " ]", 2uLL);
}

void sub_2FCBC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2FCC0C(void *a1, _OWORD *a2, uint64_t a3)
{
  std::string::size_type v6 = (char *)operator new(0x98uLL);
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 2) = 0LL;
  *((void *)v6 + 3) = &off_47DB90;
  *(void *)std::string::size_type v6 = off_47DB18;
  *((void *)v6 + 4) = -2307755726LL;
  *((_DWORD *)v6 + 10) = 0;
  *(void *)(v6 + 60) = 0x100000001LL;
  *(_OWORD *)(v6 + 44) = xmmword_402D48;
  *(_OWORD *)(v6 + 72) = *a2;
  *((_DWORD *)v6 + 22) = *(_DWORD *)a3;
  sub_142EF4((uint64_t)(v6 + 96), (void *)(a3 + 8));
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a3 + 32);
  v6[136] = 1;
  *(void *)&double result = 0x500000007LL;
  *((void *)v6 + 18) = 0x500000007LL;
  *((void *)v6 + 3) = off_47DB50;
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_2FCCDC(_Unwind_Exception *a1)
{
}

uint64_t sub_2FCCF4()
{
  return 1987211570LL;
}

uint64_t sub_2FCD00(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_2FCD08(uint64_t a1)
{
  *(void *)a1 = &off_47DB90;
  if (*(_BYTE *)(a1 + 112)) {
    sub_32C8C(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_2FCD44(void **__p)
{
  void *__p = &off_47DB90;
  if (*((_BYTE *)__p + 112)) {
    sub_32C8C(__p[10]);
  }
  operator delete(__p);
}

void sub_2FCD88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2FCD98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2FCDB8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

uint64_t *sub_2FCDC8(uint64_t *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_57ADC(a1, 0x696D7663u, 1768781411);
  sub_57ADC(a1, 0x696D6F63u, 1768779619);
  sub_57ADC(a1, 0x676D6374u, 1735222132);
  sub_57ADC(a1, 0x76707669u, 1987081833);
  sub_57ADC(a1, 0x7670766Fu, 1987081839);
  sub_57ADC(a1, 0x76706763u, 1987077987);
  sub_57ADC(a1, 0x726D7663u, 1919776355);
  sub_57ADC(a1, 0x6D63616Du, 1835229549);
  sub_57ADC(a1, 0x76687374u, 1986556788);
  sub_57ADC(a1, 0x6D736D74u, 1836281204);
  sub_57ADC(a1, 0x72617720u, 1918990112);
  return sub_57ADC(a1, 0x766D7367u, 1986884455);
}

void sub_2FCF10(_Unwind_Exception *a1)
{
}

os_log_s *sub_2FCF50(uint64_t a1, const char *a2)
{
  unsigned __int8 v2 = (os_log_s *)a1;
  if (a1)
  {
    if (sub_2FD058(a1, "VAD", a2, 0))
    {
      uint64_t v4 = (os_log_t *)sub_138E8(20);
      unsigned __int8 v2 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = 136315906;
          uint64_t v7 = "RoutingSettings_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 686;
          __int16 v10 = 2080;
          uint64_t v11 = "VAD";
          __int16 v12 = 2080;
          int v13 = a2;
          _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Cannot find strips file Generic/%s/%s",  (uint8_t *)&v6,  0x26u);
        }

        return 0LL;
      }
    }
  }

  return v2;
}

uint64_t sub_2FD058(uint64_t a1, const char *a2, const char *a3, unsigned int a4)
{
  CFStringRef v14 = CFStringCreateWithCString(0LL, "Generic", 0x600u);
  char v15 = 1;
  CFStringRef v12 = CFStringCreateWithCString(0LL, a2, 0x600u);
  char v13 = 1;
  CFStringRef v10 = CFStringCreateWithCString(0LL, a3, 0x600u);
  char v11 = 1;
  v16[0] = &v14;
  v16[1] = &v12;
  v16[2] = &v10;
  uint64_t v8 = sub_33EBEC(a1, (uint64_t)v16, a4);
  sub_19DFC((uint64_t)&v10);
  sub_19DFC((uint64_t)&v12);
  sub_19DFC((uint64_t)&v14);
  return v8;
}

void sub_2FD15C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

os_log_s *sub_2FD190(os_log_s *a1, const char *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    CFStringRef v12 = CFStringCreateWithCString(0LL, "VAD", 0x600u);
    char v13 = 1;
    CFStringRef v10 = CFStringCreateWithCString(0LL, a2, 0x600u);
    char v11 = 1;
    *(void *)AudioBufferList buf = a3;
    *(void *)&_DWORD buf[8] = &v12;
    *(void *)&buf[16] = &v10;
    int v6 = sub_33EBEC((uint64_t)v3, (uint64_t)buf, 0);
    sub_19DFC((uint64_t)&v10);
    sub_19DFC((uint64_t)&v12);
    if (v6)
    {
      uint64_t v7 = (os_log_t *)sub_138E8(20);
      uint64_t v3 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *a3;
          *(_DWORD *)AudioBufferList buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 701;
          *(_WORD *)&_BYTE buf[18] = 2112;
          *(void *)&buf[20] = v8;
          __int16 v15 = 2080;
          unsigned __int8 v16 = "VAD";
          __int16 v17 = 2080;
          int v18 = a2;
          _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find strips file %@/%s/%s", buf, 0x30u);
        }

        return 0LL;
      }
    }
  }

  return v3;
}

void sub_2FD308( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

os_log_s *sub_2FD334(uint64_t a1, const char *a2)
{
  unsigned __int8 v2 = (os_log_s *)a1;
  if (a1)
  {
    if (sub_2FD058(a1, "Headphones", a2, 1u))
    {
      uint64_t v4 = (os_log_t *)sub_138E8(20);
      unsigned __int8 v2 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = 136316162;
          uint64_t v7 = "RoutingSettings_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 750;
          __int16 v10 = 2080;
          char v11 = "Generic";
          __int16 v12 = 2080;
          char v13 = "Headphones";
          __int16 v14 = 2080;
          __int16 v15 = a2;
          _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Cannot find preset file %s/%s/%s",  (uint8_t *)&v6,  0x30u);
        }

        return 0LL;
      }
    }
  }

  return v2;
}

os_log_s *sub_2FD44C(os_log_s *a1, const char *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4 = a1;
  if (a1)
  {
    CFStringRef v14 = CFStringCreateWithCString(0LL, "AU", 0x600u);
    char v15 = 1;
    CFStringRef v12 = CFStringCreateWithCString(0LL, a2, 0x600u);
    char v13 = 1;
    *(void *)AudioBufferList buf = a3;
    *(void *)&_DWORD buf[8] = &v14;
    *(void *)&buf[16] = &v12;
    int v8 = sub_33EBEC((uint64_t)v4, (uint64_t)buf, a4);
    sub_19DFC((uint64_t)&v12);
    sub_19DFC((uint64_t)&v14);
    if (v8)
    {
      int v9 = (os_log_t *)sub_138E8(20);
      uint64_t v4 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *a3;
          *(_DWORD *)AudioBufferList buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 765;
          *(_WORD *)&_BYTE buf[18] = 2112;
          *(void *)&buf[20] = v10;
          __int16 v17 = 2080;
          int v18 = "AU";
          __int16 v19 = 2080;
          uint64_t v20 = a2;
          _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find preset file %@/%s/%s", buf, 0x30u);
        }

        return 0LL;
      }
    }
  }

  return v4;
}

void sub_2FD5C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

os_log_s *sub_2FD5F4(os_log_s *a1, const char *a2)
{
  unsigned __int8 v2 = a1;
  if (a1)
  {
    CFStringRef v11 = CFStringCreateWithCString(0LL, "Generic", 0x600u);
    char v12 = 1;
    CFStringRef v9 = CFStringCreateWithCString(0LL, "VAD", 0x600u);
    char v10 = 1;
    CFStringRef v7 = CFStringCreateWithCString(0LL, a2, 0x600u);
    char v8 = 1;
    *(void *)AudioBufferList buf = &v11;
    *(void *)&_DWORD buf[8] = &v9;
    *(void *)&buf[16] = &v7;
    int v4 = sub_33EBEC((uint64_t)v2, (uint64_t)buf, 1u);
    sub_19DFC((uint64_t)&v7);
    sub_19DFC((uint64_t)&v9);
    sub_19DFC((uint64_t)&v11);
    if (v4)
    {
      BOOL v5 = (os_log_t *)sub_138E8(20);
      unsigned __int8 v2 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioBufferList buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 793;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "Generic";
          __int16 v14 = 2080;
          char v15 = "VAD";
          __int16 v16 = 2080;
          __int16 v17 = a2;
          _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find preset file %s/%s/%s", buf, 0x30u);
        }

        return 0LL;
      }
    }
  }

  return v2;
}

void sub_2FD790( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_2FD7CC(uint64_t a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  unsigned int v16 = a4;
  int v12 = 7;
  uint64_t v13 = a6;
  int v14 = 1685090932;
  sub_2DC450((uint64_t)v15, (uint64_t)&v12);
  sub_148DB8(a1, v14, &v14);
  sub_2DBF5C((uint64_t)v15);
  sub_2DBF5C((uint64_t)&v12);
  int v12 = 7;
  uint64_t v13 = 1LL;
  int v14 = 1684171107;
  sub_2DC450((uint64_t)v15, (uint64_t)&v12);
  sub_148DB8(a1, v14, &v14);
  sub_2DBF5C((uint64_t)v15);
  sub_2DBF5C((uint64_t)&v12);
  sub_2FD930(a1, (int *)&v16, a2, a3, a5, a6);
  return sub_2FDCC0(a1, v16);
}

void sub_2FD8F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFDictionaryRef sub_2FD930(uint64_t a1, int *a2, const char *a3, int a4, uint64_t a5, int a6)
{
  if (!a5) {
    return 0LL;
  }
  double result = sub_33F6A4(a5, a3, 0);
  if (result)
  {
    CFStringRef v11 = result;
    Value = (const __CFArray *)CFDictionaryGetValue(result, @"strips");
    if (Value && (uint64_t v13 = Value, TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v13)))
    {
      CFIndex Count = CFArrayGetCount(v13);
      CFIndex v16 = Count - 1;
      if (Count < 1) {
        return 0LL;
      }
      int v48 = a6;
      int v49 = a4;
      __int16 v46 = a2;
      uint64_t v47 = a1;
    }

    else
    {
      int v48 = a6;
      int v49 = a4;
      __int16 v46 = a2;
      uint64_t v47 = a1;
      CFIndex v16 = 0LL;
    }

    CFIndex v17 = 0LL;
    int v18 = @"unit";
    while (1)
    {
      __int16 v19 = (const __CFArray *)CFDictionaryGetValue(v11, @"strips");
      if (v19)
      {
        uint64_t v20 = v19;
        CFTypeID v21 = CFArrayGetTypeID();
        if (v21 == CFGetTypeID(v20) && CFArrayGetCount(v20) > v17)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v17);
          if (ValueAtIndex)
          {
            uint64_t v23 = ValueAtIndex;
            CFTypeID v24 = CFDictionaryGetTypeID();
            if (v24 == CFGetTypeID(v23))
            {
              int v25 = (const __CFArray *)CFDictionaryGetValue(v23, @"effects");
              if (v25)
              {
                int v26 = v25;
                CFTypeID v27 = CFArrayGetTypeID();
                if (v27 == CFGetTypeID(v26))
                {
                  CFIndex v50 = CFArrayGetCount(v26);
                  if (v50 >= 1) {
                    break;
                  }
                }
              }
            }
          }
        }
      }

void sub_2FDC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_2FDCC0(uint64_t result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    int v4 = 7;
    uint64_t v5 = a2;
    int v7 = 21;
    sub_2DC450((uint64_t)v8, (uint64_t)&v4);
    sub_149710((uint64_t)__p, &v7, 1LL);
    sub_2FDDB8(v2, (uint64_t)__p);
    sub_D0C4C((void *)__p[2]);
    uint64_t v3 = __p[0];
    __p[0] = 0LL;
    if (v3) {
      operator delete(v3);
    }
    sub_2DBF5C((uint64_t)v8);
    return sub_2DBF5C((uint64_t)&v4);
  }

  return result;
}

void sub_2FDD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_D0C14((uint64_t)va1);
  sub_2DBF5C(v2);
  sub_2DBF5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2FDDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_149814(*(void *)a1, *(void *)(a1 + 8), 1685090928);
  if (v3)
  {
    uint64_t v4 = v3;
    sub_2FDF90((uint64_t)buf, (void *)a1, v4);
    sub_D171C((uint64_t)buf);
  }

  sub_2DC194((uint64_t)v10, (uint64_t)__p);
  *(_DWORD *)AudioBufferList buf = 1685090928;
  sub_2DC450((uint64_t)&v13 + 4, (uint64_t)v10);
  char v6 = sub_148DB8(a1, *(int *)buf, buf);
  sub_2DBF5C((uint64_t)&v13 + 4);
  sub_2DBF5C((uint64_t)v10);
  if ((v6 & 1) == 0)
  {
    int v7 = (os_log_t *)sub_138E8(20);
    char v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v13 = "RoutingSettings_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 135;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error inserting DSP property key kDSP_Processor_Properties into DSP info map",  buf,  0x12u);
      }
    }
  }

  sub_D0C4C((void *)__p[2]);
  uint64_t v9 = __p[0];
  __p[0] = 0LL;
  if (v9) {
    operator delete(v9);
  }
}

void sub_2FDF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_2FDF90(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  char v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    int v7 = v6;
    char v6 = (void *)*v6;
  }

  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }

  *int v7 = v10;
  *a3 = 0LL;
  --a2[3];
  *(void *)double result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void sub_2FE0C4(char **a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  int v7 = sub_2FE168((uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  unint64_t v8 = __p[0];
  __p[0] = 0LL;
  if (v8) {
    operator delete(v8);
  }
  sub_2FE1F0(a1, (uint64_t)v7);
  sub_D0C4C((void *)v10[2]);
  unint64_t v9 = v10[0];
  v10[0] = 0LL;
  if (v9) {
    operator delete(v9);
  }
}

void sub_2FE144( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void *sub_2FE168(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  sub_D1274((uint64_t)__p, a1);
  sub_D1274((uint64_t)v2, (uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  int8x8_t v3 = __p[0];
  __p[0] = 0LL;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void sub_2FE1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_2FE1F0(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(8uLL);
  *unint64_t v4 = a2;
  uint8x8_t v5 = v4 + 1;
  *(void *)&__int128 v6 = v4;
  *((void *)&v6 + 1) = v4 + 1;
  unint64_t v8 = (unint64_t)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if (v8 < v7)
  {
    *(_OWORD *)unint64_t v8 = v6;
    *(void *)(v8 + 16) = v5;
    unint64_t v9 = (char *)(v8 + 24);
    a1[1] = (char *)(v8 + 24);
    goto LABEL_19;
  }

  __int128 v25 = v6;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_7A87C();
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x555555555555555LL) {
    unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v13 = v11;
  }
  __int16 v14 = (char *)sub_8D44C(v13);
  int v15 = &v14[24 * v10];
  CFIndex v17 = &v14[24 * v16];
  *(_OWORD *)int v15 = v25;
  *((void *)v15 + 2) = v5;
  unint64_t v9 = v15 + 24;
  __int16 v19 = *a1;
  int v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v17;
    if (!v18) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  do
  {
    *((void *)v15 - 3) = 0LL;
    *((void *)v15 - 2) = 0LL;
    v15 -= 24;
    *((void *)v15 + 2) = 0LL;
    __int128 v20 = *(_OWORD *)(v18 - 24);
    v18 -= 24;
    *(_OWORD *)int v15 = v20;
    *((void *)v15 + 2) = *((void *)v18 + 2);
    *(void *)int v18 = 0LL;
    *((void *)v18 + 1) = 0LL;
    *((void *)v18 + 2) = 0LL;
  }

  while (v18 != v19);
  CFTypeID v21 = *a1;
  int v18 = a1[1];
  *a1 = v15;
  a1[1] = v9;
  a1[2] = v17;
  if (v18 != v21)
  {
    uint64_t v22 = v18;
    do
    {
      CFTypeID v24 = (void *)*((void *)v22 - 3);
      v22 -= 24;
      uint64_t v23 = v24;
      if (v24)
      {
        *((void *)v18 - 2) = v23;
        operator delete(v23);
      }

      int v18 = v22;
    }

    while (v22 != v21);
    int v18 = v21;
  }

  if (v18) {
LABEL_18:
  }
    operator delete(v18);
LABEL_19:
  a1[1] = v9;
}

void sub_2FE368(_Unwind_Exception *a1)
{
}

void sub_2FE37C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_OWORD *)std::string __p = 0u;
  __int128 v11 = 0u;
  int v12 = 1065353216;
  v13[0] = 7;
  uint64_t v14 = a2;
  int v15 = 7;
  uint64_t v16 = a3;
  sub_149910(v6, (uint64_t)v13, 2LL);
  sub_2DC204((uint64_t)v7, (uint64_t)v6);
  int v8 = 0;
  sub_2DC450((uint64_t)v9, (uint64_t)v7);
  sub_148DB8((uint64_t)__p, v8, &v8);
  sub_2DBF5C((uint64_t)v9);
  sub_2DBF5C((uint64_t)v7);
  sub_149990(v6);
  for (uint64_t i = 4LL; i != -4; i -= 4LL)
    sub_2DBF5C((uint64_t)&v13[i]);
  sub_2DC194((uint64_t)&v8, (uint64_t)__p);
  v13[0] = 1685088623;
  sub_2DC450((uint64_t)&v14, (uint64_t)&v8);
  sub_148DB8(a1, v13[0], v13);
  sub_2DBF5C((uint64_t)&v14);
  sub_2DBF5C((uint64_t)&v8);
  sub_D0C4C((void *)v11);
  uint8x8_t v5 = __p[0];
  __p[0] = 0LL;
  if (v5) {
    operator delete(v5);
  }
}

void sub_2FE4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2DBF5C(v6);
  sub_2DBF5C((uint64_t)va);
  sub_D0C14((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2FE564(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1)
  {
    uint64_t v2 = **(void **)(a1 + 8);
    if (v2)
    {
      int8x8_t v3 = (void *)sub_D0C14(v2);
      operator delete(v3);
    }
  }

  return a1;
}

void sub_2FE5A8(char **a1, int **a2, unsigned int a3)
{
  *(_OWORD *)CFTypeID v21 = 0u;
  __int128 v22 = 0u;
  int v23 = 1065353216;
  v19[0] = (uint64_t)v19;
  v19[1] = (uint64_t)v19;
  uint64_t v20 = 0LL;
  int v24 = 7;
  v25[0] = 1668051820LL;
  *(_DWORD *)std::string __p = 1685090932;
  sub_2DC450((uint64_t)&__p[8], (uint64_t)&v24);
  sub_148DB8((uint64_t)v21, *(int *)__p, __p);
  sub_2DBF5C((uint64_t)&__p[8]);
  sub_2DBF5C((uint64_t)&v24);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      int v8 = *v6;
      if (!*v6)
      {
        int v15 = (os_log_t *)sub_138E8(13);
        uint64_t v16 = *v15;
        if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 865;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): LoadChannelSelector() - Invalid channel configuration for Channel Selector",  __p,  0x12u);
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( exception,  "LoadChannelSelector() - Invalid channel configuration for Channel Selector");
      }

      *(_DWORD *)std::string __p = 7;
      *(void *)&__p[8] = (v8 - 1);
      unint64_t v9 = sub_1498C0((uint64_t)__p);
      uint64_t v10 = v19[0];
      void *v9 = v19[0];
      v9[1] = v19;
      *(void *)(v10 + 8) = v9;
      v19[0] = (uint64_t)v9;
      ++v20;
      sub_2DBF5C((uint64_t)__p);
      ++v6;
    }

    while (v6 != v7);
  }

  sub_2DC204((uint64_t)v18, (uint64_t)v19);
  int v24 = 1936483181;
  sub_2DC450((uint64_t)v25, (uint64_t)v18);
  sub_149710((uint64_t)__p, &v24, 1LL);
  sub_2FDDB8((uint64_t)v21, (uint64_t)__p);
  sub_D0C4C(*(void **)&__p[16]);
  uint64_t v11 = *(void **)__p;
  *(void *)std::string __p = 0LL;
  if (v11) {
    operator delete(v11);
  }
  sub_2DBF5C((uint64_t)v25);
  sub_2DBF5C((uint64_t)v18);
  sub_2FE37C((uint64_t)v21, a3, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2);
  sub_D1274((uint64_t)__p, (uint64_t)v21);
  int v12 = sub_2FE168((uint64_t)__p);
  sub_D0C4C(*(void **)&__p[16]);
  unint64_t v13 = *(void **)__p;
  *(void *)std::string __p = 0LL;
  if (v13) {
    operator delete(v13);
  }
  sub_2FE1F0(a1, (uint64_t)v12);
  sub_149990(v19);
  sub_D0C4C((void *)v22);
  uint64_t v14 = v21[0];
  v21[0] = 0LL;
  if (v14) {
    operator delete(v14);
  }
}

void sub_2FE870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  sub_D0C14((uint64_t)va2);
  sub_149990((uint64_t *)va);
  sub_D0C14((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2FE910(char **a1, const char *a2, const char *a3, os_log_s *a4, uint64_t *a5, uint64_t a6)
{
  if ((a6 & 0xFF00000000LL) != 0) {
    sub_2FE37C((uint64_t)v17, a6, a6);
  }
  int v15 = 7;
  uint64_t v16 = 0LL;
  int v20 = 3700;
  sub_2DC450((uint64_t)v21, (uint64_t)&v15);
  sub_149710((uint64_t)__p, &v20, 1LL);
  sub_2FDDB8((uint64_t)v17, (uint64_t)__p);
  sub_D0C4C(v19);
  uint64_t v11 = __p[0];
  __p[0] = 0LL;
  if (v11) {
    operator delete(v11);
  }
  sub_2DBF5C((uint64_t)v21);
  sub_2DBF5C((uint64_t)&v15);
  sub_2FEAE8((uint64_t)v17, a3, a5, a4, 1000);
  sub_D1274((uint64_t)__p, (uint64_t)v17);
  uint64_t v12 = sub_2FE168((uint64_t)__p);
  sub_D0C4C(v19);
  uint64_t v13 = __p[0];
  __p[0] = 0LL;
  if (v13) {
    operator delete(v13);
  }
  sub_2FE1F0(a1, (uint64_t)v12);
  sub_D0C4C((void *)v17[2]);
  uint64_t v14 = v17[0];
  v17[0] = 0LL;
  if (v14) {
    operator delete(v14);
  }
}

void sub_2FEA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_D0C14((uint64_t)va1);
  sub_D0C14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2FEAE8(uint64_t a1, const char *a2, uint64_t *a3, os_log_s *a4, int a5)
{
  if (!a2) {
    return;
  }
  uint64_t v9 = sub_2FD44C(a4, a2, a3, 2u);
  if (!v9)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(20);
    int v15 = *v14;
    if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v16 = *a3;
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v23 = 1024;
    *(_DWORD *)int v24 = 266;
    *(_WORD *)&v24[4] = 2112;
    *(void *)&v24[6] = v16;
    __int16 v25 = 2080;
    int v26 = (void *)a2;
    uint64_t v17 = "%25s:%-5d Could not load disk tunings for %@ using plist file %s";
LABEL_17:
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, v17, buf, 0x26u);
    return;
  }

  uint64_t v10 = sub_33F6A4((uint64_t)v9, a2, 2u);
  uint64_t v11 = sub_138E8(20);
  if (!v10)
  {
    int v15 = *(os_log_s **)v11;
    if (!*(void *)v11 || !os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v18 = *a3;
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v23 = 1024;
    *(_DWORD *)int v24 = 272;
    *(_WORD *)&v24[4] = 2112;
    *(void *)&v24[6] = v18;
    __int16 v25 = 2080;
    int v26 = (void *)a2;
    uint64_t v17 = "%25s:%-5d Could not load AU plist by name for %@: %s";
    goto LABEL_17;
  }

  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
  {
    uint64_t v12 = *(os_log_s **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        __int16 v23 = 1024;
        *(_DWORD *)int v24 = 275;
        *(_WORD *)&v24[4] = 2080;
        *(void *)&v24[6] = a2;
        __int16 v25 = 2112;
        int v26 = v10;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Inserting plist (%s): (%@)", buf, 0x26u);
      }
    }
  }

  sub_2DC034((uint64_t)v19, v10);
  int v20 = a5;
  sub_2DC450((uint64_t)v21, (uint64_t)v19);
  sub_149710((uint64_t)buf, &v20, 1LL);
  sub_2FDDB8(a1, (uint64_t)buf);
  sub_D0C4C(*(void **)&v24[2]);
  uint64_t v13 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v13) {
    operator delete(v13);
  }
  sub_2DBF5C((uint64_t)v21);
  sub_2DBF5C((uint64_t)v19);
}

void sub_2FED6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_D0C14((uint64_t)va1);
  sub_2DBF5C(v2);
  sub_2DBF5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2FEDA8(char **a1, const char *a2, int a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  *(_OWORD *)__int16 v25 = 0u;
  __int128 v26 = 0u;
  int v27 = 1065353216;
  unsigned int v24 = 0;
  BOOL v14 = a5 == 1835298866 && a6 == 0;
  int v31 = 7;
  v32[0] = a5;
  LODWORD(__p) = 1685090932;
  sub_2DC450((uint64_t)&v29, (uint64_t)&v31);
  sub_148DB8((uint64_t)v25, 1685090932, &__p);
  sub_2DBF5C((uint64_t)&v29);
  sub_2DBF5C((uint64_t)&v31);
  int v31 = 7;
  v32[0] = 1LL;
  LODWORD(__p) = 1684171107;
  sub_2DC450((uint64_t)&v29, (uint64_t)&v31);
  sub_148DB8((uint64_t)v25, (int)__p, &__p);
  sub_2DBF5C((uint64_t)&v29);
  sub_2DBF5C((uint64_t)&v31);
  if (a5 == 1836282987 && *(_BYTE *)(a7 + 8))
  {
    if ((*(void *)a7 & 1) != 0)
    {
      int v22 = 7;
      uint64_t v23 = 1LL;
      int v31 = 6602;
      sub_2DC450((uint64_t)v32, (uint64_t)&v22);
      sub_149710((uint64_t)&__p, &v31, 1LL);
      sub_2FDDB8((uint64_t)v25, (uint64_t)&__p);
    }

    else
    {
      if ((*(void *)a7 & 2) == 0) {
        goto LABEL_16;
      }
      int v22 = 7;
      uint64_t v23 = 0LL;
      int v31 = 6602;
      sub_2DC450((uint64_t)v32, (uint64_t)&v22);
      sub_149710((uint64_t)&__p, &v31, 1LL);
      sub_2FDDB8((uint64_t)v25, (uint64_t)&__p);
    }

    sub_D0C4C(v30);
    int v15 = __p;
    std::string __p = 0LL;
    if (v15) {
      operator delete(v15);
    }
    sub_2DBF5C((uint64_t)v32);
    sub_2DBF5C((uint64_t)&v22);
  }

void sub_2FF0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_D0C14((uint64_t)va2);
  sub_2DBF5C(v2);
  sub_2DBF5C((uint64_t)va);
  sub_D0C14((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2FF19C(char **a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = sub_2FE168((uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  uint64_t v5 = __p[0];
  __p[0] = 0LL;
  if (v5) {
    operator delete(v5);
  }
  sub_2FE1F0(a1, (uint64_t)v4);
  sub_D0C4C((void *)v7[2]);
  uint64_t v6 = v7[0];
  v7[0] = 0LL;
  if (v6) {
    operator delete(v6);
  }
}

void sub_2FF230( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_2FF254(char **a1, const char *a2, int a3, uint64_t a4, uint64_t a5)
{
  if ((a5 & 0xFF00000000LL) != 0) {
    sub_2FE37C((uint64_t)v10, a5, a5);
  }
  sub_D1274((uint64_t)__p, (uint64_t)v10);
  uint64_t v7 = sub_2FE168((uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  uint64_t v8 = __p[0];
  __p[0] = 0LL;
  if (v8) {
    operator delete(v8);
  }
  sub_2FE1F0(a1, (uint64_t)v7);
  sub_D0C4C((void *)v10[2]);
  uint64_t v9 = v10[0];
  v10[0] = 0LL;
  if (v9) {
    operator delete(v9);
  }
}

void sub_2FF300( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_2FF324(char **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0xFF00000000LL) != 0) {
    sub_2FE37C((uint64_t)v9, a4, a4);
  }
  sub_D1274((uint64_t)__p, (uint64_t)v9);
  uint64_t v6 = sub_2FE168((uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  uint64_t v7 = __p[0];
  __p[0] = 0LL;
  if (v7) {
    operator delete(v7);
  }
  sub_2FE1F0(a1, (uint64_t)v6);
  sub_D0C4C((void *)v9[2]);
  uint64_t v8 = v9[0];
  v9[0] = 0LL;
  if (v8) {
    operator delete(v8);
  }
}

void sub_2FF3D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_2FF3F8(char **a1, unsigned int a2, float a3)
{
  LODWORD(__p[0]) = 9;
  __p[1] = (void *)LODWORD(a3);
  sub_2FF5F8(v11, a2, (uint64_t)__p);
  sub_2DBF5C((uint64_t)__p);
  sub_2DC204((uint64_t)v10, (uint64_t)v11);
  int v15 = 64002;
  sub_2DC450((uint64_t)v16, (uint64_t)v10);
  sub_149710((uint64_t)__p, &v15, 1LL);
  sub_2FDDB8((uint64_t)v12, (uint64_t)__p);
  sub_D0C4C(v14);
  uint64_t v6 = __p[0];
  __p[0] = 0LL;
  if (v6) {
    operator delete(v6);
  }
  sub_2DBF5C((uint64_t)v16);
  sub_2DBF5C((uint64_t)v10);
  sub_2FE37C((uint64_t)v12, a2, a2);
  sub_D1274((uint64_t)__p, (uint64_t)v12);
  uint64_t v7 = sub_2FE168((uint64_t)__p);
  sub_D0C4C(v14);
  uint64_t v8 = __p[0];
  __p[0] = 0LL;
  if (v8) {
    operator delete(v8);
  }
  sub_2FE1F0(a1, (uint64_t)v7);
  sub_149990(v11);
  sub_D0C4C((void *)v12[2]);
  uint64_t v9 = v12[0];
  v12[0] = 0LL;
  if (v9) {
    operator delete(v9);
  }
}

void sub_2FF580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_D0C14((uint64_t)va2);
  sub_149990((uint64_t *)va);
  sub_D0C14((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2FF5F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  uint64_t v5 = a2 - 1;
  do
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_1498C0(a3);
    uint64_t v5 = 0LL;
    uint64_t v8 = *a1;
    *uint64_t v7 = *a1;
    v7[1] = a1;
    *(void *)(v8 + 8) = v7;
    *a1 = (uint64_t)v7;
    ++a1[2];
  }

  while (v6);
  return a1;
}

void sub_2FF660(_Unwind_Exception *a1)
{
}

uint64_t sub_2FF674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2DC450(a1, a2);
  sub_2DC450(v5 + 16, a3);
  return a1;
}

void sub_2FF6A8(_Unwind_Exception *a1)
{
}

void sub_2FF6BC(uint64_t a1, const char *a2, os_log_s *a3, uint64_t *a4, const char *a5, int a6, uint64_t a7)
{
  *(_OWORD *)uint64_t v23 = 0u;
  __int128 v24 = 0u;
  int v25 = 1065353216;
  unsigned int v22 = 0;
  if (*(_DWORD *)(a1 + 48) != 1668049011 || (sub_7531C() & 1) == 0)
  {
    LODWORD(v31) = 7;
    uint64_t v32 = 1936748595LL;
    LODWORD(__p) = 1685090932;
    sub_2DC450((uint64_t)&v27, (uint64_t)&v31);
    sub_148DB8((uint64_t)v23, 1685090932, &__p);
    sub_2DBF5C((uint64_t)&v27);
    sub_2DBF5C((uint64_t)&v31);
    int v31 = &v31;
    uint64_t v32 = (uint64_t)&v31;
    uint64_t v33 = 0LL;
    int v29 = 7;
    uint64_t v30 = 64001LL;
    uint64_t v14 = sub_149ED8((uint64_t)&v29);
    uint64_t v15 = (uint64_t)v31;
    *uint64_t v14 = v31;
    v14[1] = &v31;
    *(void *)(v15 + 8) = v14;
    int v31 = v14;
    ++v33;
    sub_2DBF5C((uint64_t)&v29);
    sub_2DC204((uint64_t)v21, (uint64_t)&v31);
    LODWORD(__p) = 1684303986;
    sub_2DC450((uint64_t)&v27, (uint64_t)v21);
    sub_148DB8((uint64_t)v23, (int)__p, &__p);
    sub_2DBF5C((uint64_t)&v27);
    sub_2DBF5C((uint64_t)v21);
    sub_149990((uint64_t *)&v31);
    sub_2FD930((uint64_t)v23, (int *)&v22, a2, 0, (uint64_t)a3, 1936748595);
    sub_2FDCC0((uint64_t)v23, v22);
    sub_2FEAE8((uint64_t)v23, a5, a4, a3, 64003);
    int v29 = 7;
    uint64_t v30 = a6 == 2;
    LODWORD(v31) = 64004;
    sub_2DC450((uint64_t)&v32, (uint64_t)&v29);
    sub_149710((uint64_t)&__p, (int *)&v31, 1LL);
    sub_2FDDB8((uint64_t)v23, (uint64_t)&__p);
    sub_D0C4C(v28);
    uint64_t v16 = __p;
    std::string __p = 0LL;
    if (v16) {
      operator delete(v16);
    }
    sub_2DBF5C((uint64_t)&v32);
    sub_2DBF5C((uint64_t)&v29);
    int v29 = 7;
    uint64_t v30 = 0LL;
    LODWORD(v31) = 64002;
    sub_2DC450((uint64_t)&v32, (uint64_t)&v29);
    sub_149710((uint64_t)&__p, (int *)&v31, 1LL);
    sub_2FDDB8((uint64_t)v23, (uint64_t)&__p);
    sub_D0C4C(v28);
    uint64_t v17 = __p;
    std::string __p = 0LL;
    if (v17) {
      operator delete(v17);
    }
    sub_2DBF5C((uint64_t)&v32);
    sub_2DBF5C((uint64_t)&v29);
    if ((a7 & 0xFF00000000LL) != 0) {
      sub_2FE37C((uint64_t)v23, a7, a7);
    }
    sub_D1274((uint64_t)&__p, (uint64_t)v23);
    uint64_t v18 = sub_2FE168((uint64_t)&__p);
    sub_D0C4C(v28);
    __int16 v19 = __p;
    std::string __p = 0LL;
    if (v19) {
      operator delete(v19);
    }
    sub_2FE1F0((char **)a1, (uint64_t)v18);
  }

  sub_D0C4C((void *)v24);
  int v20 = v23[0];
  v23[0] = 0LL;
  if (v20) {
    operator delete(v20);
  }
}

void sub_2FF9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_D0C14((uint64_t)va1);
  sub_D0C14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2FFAA8(char **a1, const char *a2, uint64_t a3, char *__s)
{
  if (!__s) {
    goto LABEL_31;
  }
  sub_7D084(v19, __s);
  if (v20 < 0)
  {
    if (!v19[1])
    {
LABEL_26:
      BOOL v10 = 1;
      goto LABEL_27;
    }

    uint64_t v7 = (void **)v19[0];
  }

  else
  {
    if (!v20) {
      goto LABEL_31;
    }
    uint64_t v7 = v19;
  }

  if (!sub_2FD334(a3, (const char *)v7))
  {
    uint64_t v16 = (os_log_t *)sub_138E8(20);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = v19;
      if (v20 < 0) {
        uint64_t v18 = (void **)v19[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
      __int16 v27 = 1024;
      *(_DWORD *)CFIndex v28 = 488;
      *(_WORD *)&v28[4] = 2080;
      *(void *)&v28[6] = v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not load a tuning preset file with name %s",  __p,  0x1Cu);
    }

    goto LABEL_26;
  }

  *(_OWORD *)uint64_t v23 = 0u;
  __int128 v24 = 0u;
  int v25 = 1065353216;
  if (v20 >= 0) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = (void **)v19[0];
  }
  uint64_t v9 = sub_33F6A4(a3, (const char *)v8, 1u);
  BOOL v10 = v9 == 0LL;
  if (v9)
  {
    int v21 = 7;
    uint64_t v22 = 1851942257LL;
    *(_DWORD *)std::string __p = 1685090932;
    sub_2DC450((uint64_t)&__p[8], (uint64_t)&v21);
    sub_148DB8((uint64_t)v23, *(int *)__p, __p);
    sub_2DBF5C((uint64_t)&__p[8]);
    sub_2DBF5C((uint64_t)&v21);
    sub_2DC034((uint64_t)&v21, v9);
    *(_DWORD *)std::string __p = 1685086576;
    sub_2DC450((uint64_t)&__p[8], (uint64_t)&v21);
    sub_148DB8((uint64_t)v23, *(int *)__p, __p);
    sub_2DBF5C((uint64_t)&__p[8]);
    sub_2DBF5C((uint64_t)&v21);
    sub_D1274((uint64_t)__p, (uint64_t)v23);
    uint64_t v11 = sub_2FE168((uint64_t)__p);
    sub_D0C4C(*(void **)&v28[2]);
    uint64_t v12 = *(void **)__p;
    *(void *)std::string __p = 0LL;
    if (v12) {
      operator delete(v12);
    }
    sub_2FE1F0(a1, (uint64_t)v11);
    if (*((void *)&v24 + 1))
    {
      sub_D0C4C((void *)v24);
      *(void *)&__int128 v24 = 0LL;
      uint64_t v13 = (char *)v23[1];
      if (v23[1])
      {
        uint64_t v14 = 0LL;
        do
          *((void *)v23[0] + (void)v14++) = 0LL;
        while (v13 != v14);
      }

      *((void *)&v24 + 1) = 0LL;
    }
  }

  sub_D0C4C((void *)v24);
  uint64_t v15 = v23[0];
  v23[0] = 0LL;
  if (v15) {
    operator delete(v15);
  }
LABEL_27:
  if (v20 < 0)
  {
    operator delete(v19[0]);
    if (!v10) {
      return;
    }
    goto LABEL_31;
  }

  if (v10) {
LABEL_31:
  }
    sub_2FF254(a1, a2, 0, a3, 0LL);
}

void sub_2FFD80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2FFDF8(char **a1, const char *a2, uint64_t a3, unsigned int a4, uint64_t a5, CFStringRef *a6)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) != 0LL) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (!v7)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      __int16 v30 = 1024;
      *(_DWORD *)int v31 = 1138;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!a2)
  {
    char v20 = (os_log_t *)sub_138E8(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      __int16 v30 = 1024;
      *(_DWORD *)int v31 = 1139;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Precondition failure.");
  }

  sub_2FD7CC((uint64_t)v26, a2, 0, 0, a3, 0x66697266u);
  sub_3001CC(&__p, a6, a5);
  sub_2DC0BC((uint64_t)&v23, (uint64_t)&__p);
  int v27 = 4504;
  sub_2DC450((uint64_t)v28, (uint64_t)&v23);
  sub_149710((uint64_t)buf, &v27, 1LL);
  sub_2FDDB8((uint64_t)v26, (uint64_t)buf);
  sub_D0C4C(*(void **)&v31[2]);
  uint64_t v11 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v11) {
    operator delete(v11);
  }
  sub_2DBF5C((uint64_t)v28);
  sub_2DBF5C((uint64_t)&v23);
  int v23 = 7;
  uint64_t v24 = a4;
  int v27 = 4505;
  sub_2DC450((uint64_t)v28, (uint64_t)&v23);
  sub_149710((uint64_t)buf, &v27, 1LL);
  sub_2FDDB8((uint64_t)v26, (uint64_t)buf);
  sub_D0C4C(*(void **)&v31[2]);
  uint64_t v12 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v12) {
    operator delete(v12);
  }
  sub_2DBF5C((uint64_t)v28);
  sub_2DBF5C((uint64_t)&v23);
  uint64_t v13 = sub_D1274((uint64_t)buf, (uint64_t)v26);
  uint64_t v14 = sub_2FE168(v13);
  sub_D0C4C(*(void **)&v31[2]);
  uint64_t v15 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v15) {
    operator delete(v15);
  }
  sub_2FE1F0(a1, (uint64_t)v14);
  sub_D0C4C((void *)v26[2]);
  uint64_t v16 = v26[0];
  v26[0] = 0LL;
  if (v16) {
    operator delete(v16);
  }
}

void sub_300120( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_3001C4()
{
}

void sub_3001CC(std::string *a1, CFStringRef *a2, uint64_t a3)
{
  uint64_t v6 = std::string::append(&v26, "/", 1uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_48E98(__p, *a2);
  if ((v25 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v9 = v25;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  BOOL v10 = std::string::append(&v27, (const std::string::value_type *)v8, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v12 = std::string::append(&v28, "/", 1uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v29, "AU", 2uLL);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v16 = std::string::append(&v30, "/", 1uLL);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  int v18 = *(char *)(a3 + 23);
  if (v18 >= 0) {
    __int16 v19 = (const std::string::value_type *)a3;
  }
  else {
    __int16 v19 = *(const std::string::value_type **)a3;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a3 + 8);
  }
  int v21 = std::string::append(&v31, v19, v20);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  int v23 = std::string::append(&v32, ".plist", 6uLL);
  *a1 = *v23;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_3003EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_3004B0(char **a1, const char *a2, os_log_s *a3, std::string *a4, uint64_t *a5)
{
  if (!a2)
  {
    uint64_t v33 = (os_log_t *)sub_138E8(13);
    int v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
      __int16 v44 = 1024;
      *(_DWORD *)int v45 = 1154;
      _os_log_impl(&dword_0, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  std::string::size_type size = a4->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    CFTypeID v36 = (os_log_t *)sub_138E8(13);
    signed int v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
      __int16 v44 = 1024;
      *(_DWORD *)int v45 = 1155;
      _os_log_impl(&dword_0, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    int v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v38, "Precondition failure.");
  }

  sub_2FD7CC((uint64_t)v41, a2, 0, 0, (uint64_t)a3, 0x6F636E73u);
  int v39 = 7;
  uint64_t v40 = 1LL;
  LODWORD(v42.__r_.__value_.__l.__data_) = 4521;
  sub_2DC450((uint64_t)&v42.__r_.__value_.__l.__size_, (uint64_t)&v39);
  sub_149710((uint64_t)__p, (int *)&v42, 1LL);
  sub_2FDDB8((uint64_t)v41, (uint64_t)__p);
  sub_D0C4C(*(void **)&v45[2]);
  BOOL v10 = *(void **)__p;
  *(void *)std::string __p = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_2DBF5C((uint64_t)&v42.__r_.__value_.__l.__size_);
  sub_2DBF5C((uint64_t)&v39);
  if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v11 = (const char *)a4;
  }
  else {
    __int128 v11 = (const char *)a4->__r_.__value_.__r.__words[0];
  }
  uint64_t v12 = sub_2FD44C(a3, v11, a5, 2u);
  if (!v12)
  {
    __int128 v22 = (os_log_t *)sub_138E8(20);
    int v23 = *v22;
    if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    uint64_t v24 = *a5;
    if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned __int8 v25 = a4;
    }
    else {
      unsigned __int8 v25 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136315906;
    *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
    __int16 v44 = 1024;
    *(_DWORD *)int v45 = 1170;
    *(_WORD *)&v45[4] = 2112;
    *(void *)&v45[6] = v24;
    __int16 v46 = 2080;
    uint64_t v47 = v25;
    std::string v26 = "%25s:%-5d Could not load disk tunings for %@ using plist file %s";
LABEL_41:
    _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEFAULT, v26, __p, 0x26u);
    goto LABEL_42;
  }

  if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v13 = (const char *)a4;
  }
  else {
    __int128 v13 = (const char *)a4->__r_.__value_.__r.__words[0];
  }
  uint64_t v14 = sub_33F6A4((uint64_t)v12, v13, 2u);
  if (!v14)
  {
    std::string v27 = (os_log_t *)sub_138E8(20);
    int v23 = *v27;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    uint64_t v28 = *a5;
    if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v29 = a4;
    }
    else {
      std::string v29 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136315906;
    *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
    __int16 v44 = 1024;
    *(_DWORD *)int v45 = 1177;
    *(_WORD *)&v45[4] = 2112;
    *(void *)&v45[6] = v28;
    __int16 v46 = 2080;
    uint64_t v47 = v29;
    std::string v26 = "%25s:%-5d Could not load AU plist by name for %@: %s";
    goto LABEL_41;
  }

  uint64_t v15 = sub_138E8(20);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    uint64_t v16 = *(os_log_s **)v15;
    if (*(void *)v15)
    {
      if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
      {
        int v17 = (char)a4->__r_.__value_.__s.__size_;
        int v18 = (std::string *)a4->__r_.__value_.__r.__words[0];
        sub_151D60(&v42, v14);
        uint64_t v19 = (uint64_t)(v17 >= 0 ? a4 : v18);
        std::string::size_type v20 = (v42.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v42 : (std::string *)v42.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
        __int16 v44 = 1024;
        *(_DWORD *)int v45 = 1181;
        *(_WORD *)&v45[4] = 2080;
        *(void *)&v45[6] = v19;
        __int16 v46 = 2080;
        uint64_t v47 = v20;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Inserting plist (%s): (%s)", __p, 0x26u);
      }
    }
  }

  sub_2DC034((uint64_t)&v39, v14);
  LODWORD(v42.__r_.__value_.__l.__data_) = 4520;
  sub_2DC450((uint64_t)&v42.__r_.__value_.__l.__size_, (uint64_t)&v39);
  sub_149710((uint64_t)__p, (int *)&v42, 1LL);
  sub_2FDDB8((uint64_t)v41, (uint64_t)__p);
  sub_D0C4C(*(void **)&v45[2]);
  int v21 = *(void **)__p;
  *(void *)std::string __p = 0LL;
  if (v21) {
    operator delete(v21);
  }
  sub_2DBF5C((uint64_t)&v42.__r_.__value_.__l.__size_);
  sub_2DBF5C((uint64_t)&v39);
LABEL_42:
  sub_D1274((uint64_t)__p, (uint64_t)v41);
  std::string v30 = sub_2FE168((uint64_t)__p);
  sub_D0C4C(*(void **)&v45[2]);
  std::string v31 = *(void **)__p;
  *(void *)std::string __p = 0LL;
  if (v31) {
    operator delete(v31);
  }
  sub_2FE1F0(a1, (uint64_t)v30);
  sub_D0C4C((void *)v41[2]);
  std::string v32 = v41[0];
  v41[0] = 0LL;
  if (v32) {
    operator delete(v32);
  }
}

void sub_3009FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_300AA4(char **a1, os_log_s *a2)
{
  if (sub_2FD5F4(a2, "internal_mic_dc_removal_hpf"))
  {
    *(_OWORD *)uint64_t v14 = 0u;
    __int128 v15 = 0u;
    int v16 = 1065353216;
    uint64_t v4 = sub_33F6A4((uint64_t)a2, "internal_mic_dc_removal_hpf", 1u);
    if (v4)
    {
      int v12 = 7;
      uint64_t v13 = 1851942257LL;
      *(_DWORD *)std::string __p = 1685090932;
      sub_2DC450((uint64_t)&__p[8], (uint64_t)&v12);
      sub_148DB8((uint64_t)v14, *(int *)__p, __p);
      sub_2DBF5C((uint64_t)&__p[8]);
      sub_2DBF5C((uint64_t)&v12);
      sub_2DC034((uint64_t)&v12, v4);
      *(_DWORD *)std::string __p = 1685086576;
      sub_2DC450((uint64_t)&__p[8], (uint64_t)&v12);
      sub_148DB8((uint64_t)v14, *(int *)__p, __p);
      sub_2DBF5C((uint64_t)&__p[8]);
      sub_2DBF5C((uint64_t)&v12);
      sub_D1274((uint64_t)__p, (uint64_t)v14);
      uint64_t v5 = sub_2FE168((uint64_t)__p);
      sub_D0C4C(*(void **)&v19[2]);
      uint64_t v6 = *(void **)__p;
      *(void *)std::string __p = 0LL;
      if (v6) {
        operator delete(v6);
      }
      sub_2FE1F0(a1, (uint64_t)v5);
      if (*((void *)&v15 + 1))
      {
        sub_D0C4C((void *)v15);
        *(void *)&__int128 v15 = 0LL;
        __int128 v7 = (char *)v14[1];
        if (v14[1])
        {
          uint64_t v8 = 0LL;
          do
            *((void *)v14[0] + (void)v8++) = 0LL;
          while (v7 != v8);
        }

        *((void *)&v15 + 1) = 0LL;
      }
    }

    else
    {
      std::string::size_type v9 = (os_log_t *)sub_138E8(20);
      BOOL v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
        __int16 v18 = 1024;
        *(_DWORD *)uint64_t v19 = 519;
        *(_WORD *)&v19[4] = 2080;
        *(void *)&v19[6] = "internal_mic_dc_removal_hpf";
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not load a tuning preset file with name %s",  __p,  0x1Cu);
      }
    }

    sub_D0C4C((void *)v15);
    __int128 v11 = v14[0];
    v14[0] = 0LL;
    if (v11) {
      operator delete(v11);
    }
  }

void sub_300CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_300D48(std::string *a1, CFStringRef *a2)
{
  uint64_t v4 = std::string::append(&v17, "/", 1uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  sub_48E98(__p, *a2);
  if ((v16 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v7 = v16;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v18, (const std::string::value_type *)v6, v7);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v10 = std::string::append(&v19, "/", 1uLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  int v12 = std::string::append(&v20, "VAD", 3uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v21, "/", 1uLL);
  *a1 = *v14;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_300ED8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_300F6C()
{
  unsigned __int8 v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)unsigned __int8 v0 = off_47DC90;
  *((void *)v0 + 4) = -2307755726LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  *(_OWORD *)(v0 + 44) = xmmword_402D48;
  *(_OWORD *)(v0 + 72) = xmmword_49D658;
  v0[88] = 0;
  v0[136] = 0;
  *((void *)v0 + 18) = 0x500000007LL;
  qword_49D648 = (uint64_t)v0;
  *((void *)v0 + 3) = off_47DCC8;
  uint64_t result = (uint64_t)(v0 + 24);
  qword_49D640 = result;
  return result;
}

void sub_300FFC(char **a1, const char *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_2FD7CC((uint64_t)v10, a2, a3, 0, a4, 0x6366726Bu);
  if ((a5 & 0xFF00000000LL) != 0) {
    sub_2FE37C((uint64_t)v10, a5, a5);
  }
  sub_D1274((uint64_t)__p, (uint64_t)v10);
  std::string::size_type v7 = sub_2FE168((uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  uint64_t v8 = __p[0];
  __p[0] = 0LL;
  if (v8) {
    operator delete(v8);
  }
  sub_2FE1F0(a1, (uint64_t)v7);
  sub_D0C4C((void *)v10[2]);
  __int128 v9 = v10[0];
  v10[0] = 0LL;
  if (v9) {
    operator delete(v9);
  }
}

void sub_3010B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_3010DC(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __int128 v5 = (_OWORD *)(a1 + 48);
  uint64_t v6 = operator new(0xB8uLL);
  std::string::size_type v7 = v6;
  uint64_t v8 = *a2;
  __int128 v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_3012A0((uint64_t)v6, v5, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = v7;
}

void sub_301150(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_301170(uint64_t *a1@<X1>, void *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(double *)&__int128 v12 = a3;
  *((double *)&v12 + 1) = a4;
  uint64_t v6 = operator new(0xB8uLL);
  std::string::size_type v7 = v6;
  uint64_t v8 = *a1;
  __int128 v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_3012A0((uint64_t)v6, &v12, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *a2 = v7;
}

void sub_3011EC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_30120C()
{
  return 1987211570LL;
}

uint64_t sub_301218(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_301220(uint64_t a1)
{
  *(void *)a1 = &off_47DD08;
  if (*(_BYTE *)(a1 + 112)) {
    sub_32C8C(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_30125C(void **__p)
{
  void *__p = &off_47DD08;
  if (*((_BYTE *)__p + 112)) {
    sub_32C8C(__p[10]);
  }
  operator delete(__p);
}

uint64_t sub_3012A0(uint64_t a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v24[0] = 0;
    char v26 = 0;
    BOOL v10 = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  else
  {
    v24[0] = 0;
    char v26 = 0;
  }

  sub_14285C((uint64_t)v27, (uint64_t)v24);
  sub_301614((void *)a1, 1684234860, a3, a4, (uint64_t)v27);
  if (v29) {
    sub_32C8C(v28);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)a1 = &off_47F790;
  *(_OWORD *)(a1 + 128) = *a2;
  *(float *)(a1 + 144) = sub_3016E0((double *)a1);
  *(_DWORD *)(a1 + 156) = 5;
  *(void *)(a1 + 176) = 0x100000001LL;
  *(void *)(a1 + 148) = 0x700000001LL;
  *(_OWORD *)(a1 + 160) = xmmword_402D48;
  if (*(double *)(a1 + 136) < *(double *)(a1 + 128))
  {
    __int128 v12 = (os_log_t *)sub_138E8(13);
    __int128 v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        double v14 = *(double *)(a1 + 128);
        double v15 = *(double *)(a1 + 136);
        *(_DWORD *)AudioBufferList buf = 136315906;
        std::string v31 = "VolumeControl.h";
        __int16 v32 = 1024;
        int v33 = 1336;
        __int16 v34 = 2048;
        double v35 = v14;
        __int16 v36 = 2048;
        double v37 = v15;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Encountered an invalid range for the variable EQ's current gain parameter: [%f, %f]",  buf,  0x26u);
      }
    }
  }

  if (*(_BYTE *)(a1 + 88))
  {
    double v16 = *(void *)(a1 + 64) ? *(float *)(*(void *)(a1 + 48) + 36LL) : 0.0;
    if (*(double *)(a1 + 128) != v16 || *(double *)(a1 + 136) != sub_6461C(a1 + 40))
    {
      std::string v17 = (os_log_t *)sub_138E8(13);
      std::string v18 = *v17;
      if (*v17)
      {
        if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          if (*(void *)(a1 + 64)) {
            double v19 = *(float *)(*(void *)(a1 + 48) + 36LL);
          }
          else {
            double v19 = 0.0;
          }
          float v20 = sub_6461C(a1 + 40);
          uint64_t v21 = *(void *)(a1 + 128);
          uint64_t v22 = *(void *)(a1 + 136);
          *(_DWORD *)AudioBufferList buf = 136316418;
          std::string v31 = "VolumeControl.h";
          __int16 v32 = 1024;
          int v33 = 1341;
          __int16 v34 = 2048;
          double v35 = v19;
          __int16 v36 = 2048;
          double v37 = v20;
          __int16 v38 = 2048;
          uint64_t v39 = v21;
          __int16 v40 = 2048;
          uint64_t v41 = v22;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: VolumeCurve's range [%f, %f] doesn't match volume range of command [%f, %f]",  buf,  0x3Au);
        }
      }
    }
  }

  if (v26) {
    sub_32C8C(v25);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)(a1 + 152) = 0x500000007LL;
  return a1;
}

void sub_3015B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    sub_32C8C(a11);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

void *sub_301614(void *a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }

  sub_14285C((uint64_t)v11, a5);
  sub_2BCDE4((uint64_t)a1, a2, v14, (uint64_t)v11);
  if (v13) {
    sub_32C8C(v12);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *a1 = off_47F8C8;
  return a1;
}

void sub_3016B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_32C8C(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

float sub_3016E0(double *a1)
{
  int v2 = (*(uint64_t (**)(double *))(*(void *)a1 + 136LL))(a1);
  float result = 0.0;
  if (v2 != 1935895666)
  {
    if (v2 != 1684234860)
    {
      int v4 = v2;
      __int128 v5 = (os_log_t *)sub_138E8(13);
      uint64_t v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315650;
          unint64_t v9 = "VolumeControl.h";
          __int16 v10 = 1024;
          int v11 = 1397;
          __int16 v12 = 1024;
          int v13 = v4;
          _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered an invalid volume unit type: %d",  (uint8_t *)&v8,  0x18u);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }

    return a1[16];
  }

  return result;
}

void sub_301814(_Unwind_Exception *exception_object)
{
}

void sub_301834(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_301848(uint64_t a1, float a2)
{
  float v2 = a2;
  *(float *)(a1 + 144) = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 136LL))(a1) == 1935895666)
  {
    sub_64424(a1 + 40, v2);
    float v2 = v4;
  }

  double v6 = *(double *)(a1 + 128);
  double v5 = *(double *)(a1 + 136);
  float v7 = v5 - v6;
  float v8 = v2 - v6;
  float v9 = fminf(fmaxf(v8 / v7, 0.0), 1.0);
  BOOL v10 = v6 <= v2;
  double v11 = 0.5;
  if (!v10) {
    double v11 = 0.0;
  }
  float v12 = v11;
  if (v5 >= v2) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  if (v7 == 0.0) {
    float v14 = v13;
  }
  else {
    float v14 = v9;
  }
  uint64_t v15 = sub_138E8(18);
  uint64_t v16 = sub_138E8(38);
  char v17 = 0;
  uint64_t v18 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1LL;
    if ((v21 & 1) != 0) {
      goto LABEL_17;
    }
  }

  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_17:
  uint64_t v22 = *(os_log_s **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v25 >= 0) {
      int v23 = __p;
    }
    else {
      int v23 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v27 = 1024;
    int v28 = 1426;
    __int16 v29 = 2048;
    double v30 = v2;
    __int16 v31 = 2048;
    double v32 = v14;
    __int16 v33 = 2080;
    __int16 v34 = v23;
    _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting Volume (VEQv2) with preGain %f dB, currentGain %f on chain '%s'.",  buf,  0x30u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1987211570LL, *(unsigned int *)(a1 + 152), v2);
  sub_666C4(a1, 1987211570LL, *(unsigned int *)(a1 + 156), v14);
}

void sub_301A8C(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  int v50 = a3;
  if (*(_DWORD *)(a1 + 160))
  {
    BOOL v10 = (os_log_t *)sub_138E8(38);
    double v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        float v12 = "enabled";
      }
      else {
        float v12 = "disabled";
      }
      float v13 = v48;
      sub_2CA1C(v48, *(unsigned int *)(a1 + 160));
      if (v49 < 0) {
        float v13 = (void **)v48[0];
      }
      sub_2CA1C(v46, a2);
      int v14 = v47;
      uint64_t v15 = (void **)v46[0];
      sub_665BC((uint64_t)__p, a1);
      uint64_t v16 = v46;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      *(_DWORD *)AudioBufferList buf = 136316930;
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      if (v45 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      __int16 v52 = 1024;
      int v53 = 1461;
      __int16 v54 = 2080;
      unint64_t v55 = (void *)v12;
      __int16 v56 = 2080;
      *(void *)char v57 = v13;
      *(_WORD *)&v57[8] = 2080;
      int v58 = v16;
      __int16 v59 = 2048;
      double v60 = a4;
      __int16 v61 = 2048;
      double v62 = a5;
      __int16 v63 = 2080;
      unint64_t v64 = v17;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f on chain '%s'.",  buf,  0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
    }

    if ((_DWORD)a2 != 1)
    {
      uint64_t v18 = (os_log_t *)sub_138E8(13);
      uint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v48, a2);
          uint64_t v20 = v49 >= 0 ? v48 : (void **)v48[0];
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v52 = 1024;
          int v53 = 1463;
          __int16 v54 = 2080;
          unint64_t v55 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: duck type: '%s' not supported!",  buf,  0x1Cu);
          if (v49 < 0) {
            operator delete(v48[0]);
          }
        }
      }
    }

    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 164);
    CFNumberRef v21 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    v46[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 168);
    CFNumberRef v22 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
    }

    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 172);
    CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    CFNumberRef v43 = v23;
    if (!v23)
    {
      __int16 v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }

    float v24 = a5 * 1000.0;
    int v25 = *(_DWORD *)(a1 + 176);
    if (*(_DWORD *)(a1 + 180) != 1) {
      float v24 = a5;
    }
    float v42 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v41 = a4;
    sub_78C54(buf, v21, &v50);
    sub_78D30((int *)((char *)&v53 + 2), v22, (int *)&v41);
    sub_78D30(&v57[2], v23, (int *)&v42);
    v48[0] = buf;
    v48[1] = &dword_0 + 3;
    CFDictionaryRef v26 = sub_5A950((uint64_t)v48);
    for (uint64_t i = 0LL; i != -6; i -= 2LL)
    {
      int v28 = (&v58)[i];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = *(const void **)&v57[i * 8 + 2];
      if (v29) {
        CFRelease(v29);
      }
    }

    *(void *)AudioBufferList buf = v26;
    sub_78E0C(a1, 1987211570LL, *(unsigned int *)(a1 + 160));
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }

  if (sub_1CCDF8() && sub_2BD1C8((void *)a1, 1987211570LL))
  {
    uint64_t v30 = sub_5954C();
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 288LL))(v30);
    int v32 = v31;
    if (a3) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v31 == 0;
    }
    int v34 = v33;
    LODWORD(v48[0]) = v34;
    double v35 = (os_log_t *)sub_138E8(38);
    __int16 v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      int v53 = 1507;
      double v37 = "enabled";
      __int16 v54 = 2080;
      *(_DWORD *)AudioBufferList buf = 136316162;
      __int16 v52 = 1024;
      if (!a3) {
        double v37 = "disabled";
      }
      unint64_t v55 = (void *)v37;
      __int16 v56 = 1024;
      *(_DWORD *)char v57 = v32;
      *(_WORD *)&v57[4] = 1024;
      *(_DWORD *)&v57[6] = v34;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Duck %s, enhance dialog level %u, Set AUSI bypass %u",  buf,  0x28u);
    }

    sub_78E0C(a1, 1987211570LL, 1936289907LL);
  }

void sub_302030( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_302150(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) != 0;
}

void sub_302160(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(uint64_t, float))(*(void *)a1 + 16LL))(a1, *(float *)(a1 + 144));
    int v3 = 1;
  }

  else
  {
    float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128LL))(a1, 1684234860LL);
    float v5 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128LL))(a1, 1935895666LL);
    sub_666C4(a1, 1987211570LL, *(unsigned int *)(a1 + 152), v4);
    sub_666C4(a1, 1987211570LL, *(unsigned int *)(a1 + 156), v5);
    int v3 = 0;
  }

  *(_DWORD *)(a1 + 148) = v3;
}

uint64_t sub_302214(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

uint64_t sub_30221C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ((v16 & 0x80u) == 0) {
    float v4 = __p;
  }
  else {
    float v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  double v6 = sub_826EC(&v18, (uint64_t)v4, v5);
  float v7 = sub_826EC(v6, (uint64_t)" ", 1LL);
  if (a1[15]) {
    uint64_t v8 = *(unsigned int *)(a1[13] + 56LL);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  float v9 = (void *)std::ostream::operator<<(v7, v8);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  int v10 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (v10 == 1684234860) {
    double v11 = "dB";
  }
  else {
    double v11 = "Scalar";
  }
  if (v10 == 1684234860) {
    uint64_t v12 = 2LL;
  }
  else {
    uint64_t v12 = 6LL;
  }
  sub_826EC(v9, (uint64_t)v11, v12);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  std::ostream::operator<<(v9, a1);
  sub_82924(a2, (uint64_t)v19);
  *(void *)((char *)v17
  uint64_t v18 = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_3023B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3023E8()
{
  return 0LL;
}

void sub_3023F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_302408(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_302428(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_302438( char **a1, char *a2, std::string *a3, std::string *a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, char a11, uint64_t a12)
{
  unsigned __int8 v16 = a3;
  uint64_t v18 = 0LL;
  __int16 v27 = 0LL;
  int v28 = 0LL;
  __int16 v29 = 0LL;
  if ((a7 & 0xFF00000000LL) != 0)
  {
    unsigned int v19 = a8;
    if ((a8 & 0xFF00000000LL) != 0)
    {
      CFDictionaryRef v26 = a1;
      uint64_t v20 = a6;
      uint64_t v21 = a5;
      CFNumberRef v22 = a4;
      float v24 = a2;
      int v25 = (int *)operator new(8uLL);
      a2 = v24;
      unsigned __int8 v16 = a3;
      a4 = v22;
      a5 = v21;
      a6 = v20;
      uint64_t v18 = v25;
      a1 = v26;
      *(void *)uint64_t v18 = a7 | ((unint64_t)v19 << 32);
      int v28 = v18 + 2;
      __int16 v29 = v18 + 2;
      __int16 v27 = v18;
    }
  }

  sub_302600(a1, a2, 1684434036, v16, a4, a5, a6, &v27, a9, a10, a11, a12);
  if (v18) {
    operator delete(v18);
  }
}

void sub_302558(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_302570()
{
  unsigned __int8 v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)unsigned __int8 v0 = off_47DE00;
  *((void *)v0 + 4) = -2609680281LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  *(_OWORD *)(v0 + 44) = xmmword_402D48;
  *(_OWORD *)(v0 + 72) = xmmword_49D658;
  v0[88] = 0;
  v0[136] = 0;
  *((void *)v0 + 18) = 0x76657167766F6C75LL;
  qword_49D670 = (uint64_t)v0;
  *((void *)v0 + 3) = off_47DE38;
  uint64_t result = (uint64_t)(v0 + 24);
  qword_49D668 = result;
  return result;
}

void sub_302600( char **a1, char *a2, int a3, std::string *a4, std::string *a5, std::string *a6, uint64_t a7, int **a8, float a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v20 = (const std::__fs::filesystem::path *)sub_83A3C(buf, a4);
  std::__fs::filesystem::__status(v20, 0LL);
  if (LOBYTE(v94[0]) == 255 || LOBYTE(v94[0]) == 0)
  {
    CFNumberRef v22 = (os_log_t *)sub_138E8(20);
    CFNumberRef v23 = *v22;
    if (*v22)
    {
      if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v24 = (std::string::size_type)a4;
        }
        else {
          std::string::size_type v24 = a4->__r_.__value_.__r.__words[0];
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3606;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v24;
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not find graph file %s", (uint8_t *)buf, 0x1Cu);
      }
    }
  }

  if (a2[23] >= 0) {
    int v25 = a2;
  }
  else {
    int v25 = *(char **)a2;
  }
  sub_2490E8((uint64_t)a1, v25, a3);
  if (a7 || !a5[1].__r_.__value_.__s.__data_[0])
  {
    CFDictionaryRef v26 = (const std::__fs::filesystem::path *)sub_83A3C(buf, a4);
    std::__fs::filesystem::__status(v26, 0LL);
    if (LOBYTE(v94[0]) == 255 || !LOBYTE(v94[0]))
    {
      __int16 v27 = (os_log_t *)sub_138E8(20);
      int v28 = *v27;
      if (*v27)
      {
        if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v29 = (std::string::size_type)a4;
          }
          else {
            std::string::size_type v29 = a4->__r_.__value_.__r.__words[0];
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1794;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v29;
          _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Could not find graph file %s",  (uint8_t *)buf,  0x1Cu);
        }
      }
    }

    *(_OWORD *)uint64_t v94 = 0u;
    __int128 v95 = 0u;
    int v96 = 1065353216;
    LODWORD(v91[0]) = 7;
    v91[1] = (void *)1685287015;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 1685090932;
    sub_2DC450((uint64_t)&buf[0].__r_.__value_.__l.__size_, (uint64_t)v91);
    sub_148DB8((uint64_t)v94, (int)buf[0].__r_.__value_.__l.__data_, buf);
    sub_2DBF5C((uint64_t)&buf[0].__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)v91);
    *(_OWORD *)char v91 = 0u;
    __int128 v92 = 0u;
    int v93 = 1065353216;
    if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v30 = (const char *)a4;
    }
    else {
      uint64_t v30 = (const char *)a4->__r_.__value_.__r.__words[0];
    }
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0LL, v30, 0x600u);
    buf[0].__r_.__value_.__s.__data_[8] = 1;
    sub_2DC078((uint64_t)v90, buf[0].__r_.__value_.__l.__data_);
    sub_19DFC((uint64_t)buf);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 1685287015;
    sub_2DC450((uint64_t)&buf[0].__r_.__value_.__l.__size_, (uint64_t)v90);
    sub_148DB8((uint64_t)v91, (int)buf[0].__r_.__value_.__l.__data_, buf);
    sub_2DBF5C((uint64_t)&buf[0].__r_.__value_.__l.__size_);
    int v31 = operator new(0x28uLL);
    sub_8427C((uint64_t)v31, a12);
    LODWORD(__p.__r_.__value_.__l.__data_) = 11;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 1970496883;
    sub_2DC450((uint64_t)&buf[0].__r_.__value_.__l.__size_, (uint64_t)&__p);
    sub_148DB8((uint64_t)v94, (int)buf[0].__r_.__value_.__l.__data_, buf);
    sub_2DBF5C((uint64_t)&buf[0].__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&__p);
    if (!a5[1].__r_.__value_.__s.__data_[0]) {
      goto LABEL_57;
    }
    if ((a5->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v32 = (const char *)a5;
    }
    else {
      int v32 = (const char *)a5->__r_.__value_.__r.__words[0];
    }
    CFStringRef v99 = CFStringCreateWithCString(0LL, v32, 0x600u);
    LOBYTE(v100[0]) = 1;
    sub_2DC078((uint64_t)&__p, v99);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 1735287149;
    sub_2DC450((uint64_t)&buf[0].__r_.__value_.__l.__size_, (uint64_t)&__p);
    sub_148DB8((uint64_t)v91, (int)buf[0].__r_.__value_.__l.__data_, buf);
    sub_2DBF5C((uint64_t)&buf[0].__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&__p);
    sub_19DFC((uint64_t)&v99);
    sub_7D084(buf, ".austrip");
    sub_30372C((std::__fs::filesystem::path *)&__p, a4, a5, (char *)buf);
    BOOL v33 = (const std::__fs::filesystem::path *)sub_83A3C(buf, &__p);
    std::__fs::filesystem::__status(v33, 0LL);
    unsigned __int8 v34 = v99;
    if (v34 != 255 && v34)
    {
      sub_303A2C((uint64_t)buf, (__int128 *)&__p, 1635087216);
      sub_2DC2E4((uint64_t)v97, (uint64_t)buf);
      LODWORD(v99) = 1635087216;
      sub_2DC450((uint64_t)v100, (uint64_t)v97);
      sub_148DB8((uint64_t)v91, (int)v99, &v99);
      sub_2DBF5C((uint64_t)v100);
      sub_2DBF5C((uint64_t)v97);
      std::string::pointer data = (std::string *)buf[1].__r_.__value_.__l.__data_;
      if ((std::string *)buf[1].__r_.__value_.__l.__data_ == buf)
      {
        uint64_t v39 = 4LL;
        std::string::pointer data = buf;
      }

      else
      {
        if (!buf[1].__r_.__value_.__r.__words[0]) {
          goto LABEL_53;
        }
        uint64_t v39 = 5LL;
      }

      (*(void (**)(void))(data->__r_.__value_.__r.__words[0] + 8 * v39))();
    }

    else
    {
      double v35 = (os_log_t *)sub_138E8(20);
      __int16 v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v37 = (std::string::size_type)a4;
        }
        else {
          std::string::size_type v37 = a4->__r_.__value_.__r.__words[0];
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1812;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v32;
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v37;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to load AUStrip %s for AUDSPGraph %s",  (uint8_t *)buf,  0x26u);
      }
    }

void sub_303434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
}

void sub_30372C(std::__fs::filesystem::path *a1, std::string *a2, std::string *a3, char *a4)
{
  std::__fs::filesystem::path::__string_view v7 = std::__fs::filesystem::path::__filename(&v24);
  if (v7.__size)
  {
    uint64_t v8 = (std::__fs::filesystem::path *)v24.__pn_.__r_.__value_.__r.__words[0];
    std::string::size_type v9 = (std::string::size_type)&v24;
    if ((v24.__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v9 = v24.__pn_.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v10 = (std::string::size_type)&v7.__data[-v9];
    if ((char)v24.__pn_.__r_.__value_.__s.__size_ < 0)
    {
      if (v24.__pn_.__r_.__value_.__l.__size_ >= v10)
      {
        v24.__pn_.__r_.__value_.__l.__size_ = v10;
        goto LABEL_9;
      }
    }

    else if (v10 <= v24.__pn_.__r_.__value_.__s.__size_)
    {
      v24.__pn_.__r_.__value_.__s.__size_ = v10 & 0x7F;
      uint64_t v8 = &v24;
LABEL_9:
      v8->__pn_.__r_.__value_.__s.__data_[v10] = 0;
      goto LABEL_10;
    }

    sub_8F990();
  }

void sub_3039A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_303A2C(uint64_t a1, __int128 *a2, int a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(&v8, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v8 = *a2;
    uint64_t v9 = *((void *)a2 + 2);
  }

  *(void *)(a1 + 24) = 0LL;
  uint64_t v5 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v5 = &off_47DA20;
  double v6 = v5 + 8;
  if (SHIBYTE(v9) < 0)
  {
    std::__fs::filesystem::path::__string_view v7 = (void *)v8;
    sub_24054(v6, (void *)v8, *((unint64_t *)&v8 + 1));
    *((_DWORD *)v5 + 8) = a3;
    *(void *)(a1 + 24) = v5;
    operator delete(v7);
  }

  else
  {
    *(_OWORD *)double v6 = v8;
    *((void *)v5 + 3) = v9;
    *((_DWORD *)v5 + 8) = a3;
    *(void *)(a1 + 24) = v5;
  }

void sub_303AF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

__n128 sub_303B1C(void *a1, _OWORD *a2, __n128 *a3, int a4, int a5)
{
  std::string::size_type v10 = (char *)operator new(0x98uLL);
  *((void *)v10 + 1) = 0LL;
  *((void *)v10 + 2) = 0LL;
  *((void *)v10 + 3) = &off_4818B8;
  *(void *)std::string::size_type v10 = off_47DD48;
  *((void *)v10 + 4) = -2609680281LL;
  *((_DWORD *)v10 + 10) = 0;
  *(void *)(v10 + 60) = 0x100000001LL;
  *(_OWORD *)(v10 + 44) = xmmword_402D48;
  *(_OWORD *)(v10 + 72) = *a2;
  *((_DWORD *)v10 + 22) = a3->n128_u32[0];
  sub_142EF4((uint64_t)(v10 + 96), &a3->n128_u64[1]);
  __n128 result = a3[2];
  *(__n128 *)(v10 + 120) = result;
  v10[136] = 1;
  *((_DWORD *)v10 + 36) = a4;
  *((_DWORD *)v10 + 37) = a5;
  *((void *)v10 + 3) = off_47DD80;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_303BF4(_Unwind_Exception *a1)
{
}

uint64_t sub_303C0C(uint64_t a1)
{
  *(void *)a1 = &off_47DA20;
  return a1;
}

void sub_303C48(void **__p)
{
  void *__p = &off_47DA20;
  operator delete(__p);
}

char *sub_303C84(uint64_t a1)
{
  float v2 = (char *)operator new(0x28uLL);
  *(void *)float v2 = &off_47DA20;
  int v3 = v2 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_24054(v3, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    *(_OWORD *)int v3 = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }

  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_303CEC(_Unwind_Exception *a1)
{
}

_BYTE *sub_303D00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_47DA20;
  __n128 result = (_BYTE *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    __n128 result = sub_24054(result, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)__n128 result = v5;
  }

  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void sub_303D60(uint64_t a1)
{
}

void sub_303D74(void **__p)
{
}

double sub_303DA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  __int128 v5 = (os_log_t *)sub_138E8(24);
  double v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(__p, *(unsigned int *)(a1 + 32));
    std::__fs::filesystem::path::__string_view v7 = v13 >= 0 ? __p : (void **)__p[0];
    uint64_t v8 = *(char *)(a1 + 31) >= 0 ? v4 : *(void *)(a1 + 8);
    *(_DWORD *)AudioBufferList buf = 136315906;
    int64_t v15 = "RoutingSettings_Aspen.cpp";
    __int16 v16 = 1024;
    int v17 = 1761;
    __int16 v18 = 2080;
    int64_t v19 = v7;
    __int16 v20 = 2080;
    uint64_t v21 = v8;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading plist for property %s from path %s", buf, 0x26u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_155560(&cf, v4);
  CFTypeRef v9 = cf;
  if (cf)
  {
    sub_2DC034((uint64_t)__p, cf);
    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 32);
    sub_2DC450((uint64_t)&v15 + 4, (uint64_t)__p);
    sub_149710(a2, (int *)buf, 1LL);
    sub_2DBF5C((uint64_t)&v15 + 4);
    sub_2DBF5C((uint64_t)__p);
    CFRelease(v9);
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }

  return result;
}

void sub_303F44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_303F98()
{
  xmmword_4A20F8 = 0u;
  unk_4A2108 = 0u;
  xmmword_4A20E8 = 0u;
  strcpy((char *)&dword_4A2118, "tlfd");
  byte_4A2120 = 0;
  byte_4A2168 = 0;
  xmmword_4A2178 = 0u;
  unk_4A2188 = 0u;
  xmmword_4A2198 = 0u;
  unk_4A21A8 = 0u;
  qword_4A21B8 = 0LL;
  sub_157A88((uint64_t)v7, 0, -6.0, 32.0);
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49D690);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_49D690))
  {
    sub_2FCC0C(&qword_49D680, &xmmword_402EB8, (uint64_t)v7);
    __cxa_guard_release(&qword_49D690);
  }

  sub_2FE0C4((char **)&xmmword_4A20E8, 0LL, 0, 0, 0LL, 0x76727132u);
  uint64_t v1 = qword_49D680;
  float v2 = *(std::__shared_weak_count **)algn_49D688;
  if (*(void *)algn_49D688)
  {
    int v3 = (unint64_t *)(*(void *)algn_49D688 + 8LL);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  sub_143208(&xmmword_4A20E8, v1, (uint64_t)v2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  sub_32C8C(v8);
}

void sub_3040E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_304134(char **a1, float *a2)
{
  float v4 = *a2;
  __int128 v5 = (os_log_t *)sub_138E8(20);
  unint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = 598;
    WORD3(v18) = 2048;
    *((double *)&v18 + 1) = v4;
    __int16 v19 = 1024;
    int v20 = 64003;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Instantiating FixedGain AU. Gain value: %f, Gain type: %u",  buf,  0x22u);
  }

  sub_2FD7CC((uint64_t)__p, 0LL, 0, 0, 0LL, 0x6678676Eu);
  *(_DWORD *)AudioBufferList buf = 9;
  LODWORD(v18) = 0;
  *(float *)&_DWORD buf[8] = v4;
  sub_2FF5F8(v13, 2LL, (uint64_t)buf);
  sub_2DBF5C((uint64_t)buf);
  sub_2DC204((uint64_t)v12, (uint64_t)v13);
  int v15 = 64003;
  sub_2DC450((uint64_t)v16, (uint64_t)v12);
  sub_149710((uint64_t)buf, &v15, 1LL);
  sub_2FDDB8((uint64_t)__p, (uint64_t)buf);
  sub_D0C4C(*(void **)((char *)&v18 + 4));
  std::__fs::filesystem::path::__string_view v7 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v7) {
    operator delete(v7);
  }
  sub_2DBF5C((uint64_t)v16);
  sub_2DBF5C((uint64_t)v12);
  sub_2FE37C((uint64_t)__p, 2u, 2u);
  uint64_t v8 = sub_D1274((uint64_t)buf, (uint64_t)__p);
  CFTypeRef v9 = sub_2FE168(v8);
  sub_D0C4C(*(void **)((char *)&v18 + 4));
  std::string::size_type v10 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_2FE1F0(a1, (uint64_t)v9);
  sub_149990(v13);
  sub_D0C4C((void *)__p[2]);
  double v11 = __p[0];
  __p[0] = 0LL;
  if (v11) {
    operator delete(v11);
  }
}

void sub_30434C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_D0C14(v5 - 96);
  sub_149990((uint64_t *)va);
  sub_D0C14((uint64_t)va1);
  sub_239798(v4);
  _Unwind_Resume(a1);
}

void sub_3043CC(char **a1, float *a2)
{
  float v4 = *a2;
  uint64_t v5 = (os_log_t *)sub_138E8(20);
  unint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = 598;
    WORD3(v18) = 2048;
    *((double *)&v18 + 1) = v4;
    __int16 v19 = 1024;
    int v20 = 64002;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Instantiating FixedGain AU. Gain value: %f, Gain type: %u",  buf,  0x22u);
  }

  sub_2FD7CC((uint64_t)__p, 0LL, 0, 0, 0LL, 0x6678676Eu);
  *(_DWORD *)AudioBufferList buf = 9;
  LODWORD(v18) = 0;
  *(float *)&_DWORD buf[8] = v4;
  sub_2FF5F8(v13, 1LL, (uint64_t)buf);
  sub_2DBF5C((uint64_t)buf);
  sub_2DC204((uint64_t)v12, (uint64_t)v13);
  int v15 = 64002;
  sub_2DC450((uint64_t)v16, (uint64_t)v12);
  sub_149710((uint64_t)buf, &v15, 1LL);
  sub_2FDDB8((uint64_t)__p, (uint64_t)buf);
  sub_D0C4C(*(void **)((char *)&v18 + 4));
  uint64_t v7 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v7) {
    operator delete(v7);
  }
  sub_2DBF5C((uint64_t)v16);
  sub_2DBF5C((uint64_t)v12);
  sub_2FE37C((uint64_t)__p, 1u, 1u);
  uint64_t v8 = sub_D1274((uint64_t)buf, (uint64_t)__p);
  uint64_t v9 = sub_2FE168(v8);
  sub_D0C4C(*(void **)((char *)&v18 + 4));
  uint64_t v10 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_2FE1F0(a1, (uint64_t)v9);
  sub_149990(v13);
  sub_D0C4C((void *)__p[2]);
  double v11 = __p[0];
  __p[0] = 0LL;
  if (v11) {
    operator delete(v11);
  }
}

void sub_3045E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_D0C14(v5 - 96);
  sub_149990((uint64_t *)va);
  sub_D0C14((uint64_t)va1);
  sub_239798(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_304664(uint64_t a1)
{
  uint64_t v2 = qword_4A99B8;
  if (!qword_4A99B8)
  {
LABEL_7:
    if ((int)a1 > 1635085419)
    {
      if ((_DWORD)a1 == 2003068262) {
        goto LABEL_19;
      }
      int v5 = 1635085420;
    }

    else
    {
      if ((_DWORD)a1 == 1633759844) {
        goto LABEL_19;
      }
      int v5 = 1634231920;
    }

    if ((_DWORD)a1 != v5)
    {
      int v14 = (os_log_t *)sub_138E8(20);
      os_log_t v15 = *v14;
      if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
        return 0LL;
      }
      sub_2CA1C(__p, a1);
      if (v18 >= 0) {
        __int16 v16 = __p;
      }
      else {
        __int16 v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315650;
      int v20 = "RoutingSettings_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 456;
      __int16 v23 = 2080;
      std::__fs::filesystem::path v24 = v16;
      double v11 = "%25s:%-5d Invalid headset sub-type: '%s' not found in kDSPTuningHeadsetFilenames";
      uint64_t v12 = v15;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      goto LABEL_31;
    }

void sub_3048B0(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v14 = (os_log_t *)sub_138E8(20);
  os_log_t v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1319;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    *(_WORD *)&_BYTE buf[24] = 2080;
    *(void *)&buf[26] = a3;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "%25s:%-5d GetHeadsetPlaybackDSPChain: ChainType: %d, strip: %s",  buf,  0x22u);
  }

  __int16 v16 = (char *)sub_304664(a5);
  sub_239480(a1, a3);
  int v17 = sub_2FCF50(a4, a3);
  switch(a2)
  {
    case 0:
      break;
    case 1:
    case 3:
      buf[0] = 0;
      _DWORD buf[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v17, 0x6D73746Bu, 1, (uint64_t)buf);
      sub_7D084(buf, a3);
      sub_300FFC((char **)a1, (const char *)buf, 0, (uint64_t)v17, 0LL);
      goto LABEL_14;
    case 2:
      sub_7D084(buf, a3);
      sub_300FFC((char **)a1, (const char *)buf, 0, (uint64_t)v17, 0LL);
      sub_7D084(buf, a3);
      if ((buf[23] & 0x80u) == 0) {
        char v18 = buf;
      }
      else {
        char v18 = *(uint8_t **)buf;
      }
      sub_2FE0C4((char **)a1, (const char *)v18, 0, 0, (uint64_t)v17, 0x6D6F7A73u);
      sub_7D084(buf, a3);
      sub_300FFC((char **)a1, (const char *)buf, 1, (uint64_t)v17, 0LL);
LABEL_14:
      sub_2FF254((char **)a1, a3, 0, (uint64_t)v17, 0LL);
      break;
    default:
      __int16 v36 = (os_log_t *)sub_138E8(20);
      std::string::size_type v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1329;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = a2;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d GetHeadsetPlaybackDSPChain: Ignoring invalid HeadsetPlaybackDSPChainType: %d",  buf,  0x18u);
      }

      break;
  }

  if ((_DWORD)a5 && (_DWORD)a5 != 1752709424) {
    sub_2FFAA8((char **)a1, a3, (uint64_t)v17, v16);
  }
  if (a6 && a7)
  {
    __int16 v19 = (os_log_t *)sub_138E8(20);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, a5);
      __int16 v21 = SHIBYTE(v78) >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 1361;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v21;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)&_BYTE buf[30] = 1;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Adding Volume AU (bypassed) for wireless headset %s for volume strategy %d",  buf,  0x22u);
      if (SHIBYTE(v78) < 0) {
        operator delete(__p[0]);
      }
    }

    sub_2FE0C4((char **)a1, a3, 0, 1u, (uint64_t)v17, 0x766F6C69u);
    uint64_t v22 = qword_49D510;
    __int16 v23 = *(std::__shared_weak_count **)algn_49D518;
    *(void *)AudioBufferList buf = qword_49D510;
    *(void *)&_DWORD buf[8] = *(void *)algn_49D518;
    if (*(void *)algn_49D518)
    {
      std::__fs::filesystem::path v24 = (unint64_t *)(*(void *)algn_49D518 + 8LL);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }

    sub_143208((void *)a1, v22, (uint64_t)v23);
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }

  else if (a6)
  {
    if (a6 == 1)
    {
      int v28 = (os_log_t *)sub_138E8(20);
      std::string::size_type v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 315;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Using AggregateVolumeCommand with direct mode for SW volume control on headphones",  buf,  0x12u);
      }

      uint64_t v30 = qword_49D510;
      int v31 = *(std::__shared_weak_count **)algn_49D518;
      *(void *)AudioBufferList buf = qword_49D510;
      *(void *)&_DWORD buf[8] = *(void *)algn_49D518;
      if (*(void *)algn_49D518)
      {
        int v32 = (unint64_t *)(*(void *)algn_49D518 + 8LL);
        do
          unint64_t v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }

      sub_143208((void *)a1, v30, (uint64_t)v31);
      if (v31)
      {
        unsigned __int8 v34 = (unint64_t *)&v31->__shared_owners_;
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }

      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v17, 0x766F6C69u);
    }

    else
    {
      __int16 v38 = (os_log_t *)sub_138E8(20);
      uint64_t v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 342;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = a6;
        _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring invalid volume strategy: %d", buf, 0x18u);
      }
    }
  }

  unsigned __int8 v40 = atomic_load((unsigned __int8 *)&qword_48E860);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_48E860))
  {
    byte_48E858 = sub_14E35C();
    __cxa_guard_release(&qword_48E860);
  }

  if (byte_48E858)
  {
    sub_7D084(v72, a3);
    if (v73 >= 0) {
      float v41 = v72;
    }
    else {
      float v41 = (void **)v72[0];
    }
    sub_2FD7CC((uint64_t)v75, (const char *)v41, 0, 0, (uint64_t)v17, 0x73706C6Du);
    unsigned __int8 v42 = atomic_load((unsigned __int8 *)&qword_49D5A8);
    if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_49D5A8))
    {
      *(_DWORD *)AudioBufferList buf = 7;
      *(void *)&_DWORD buf[8] = 1885892727LL;
      *(_DWORD *)&buf[16] = 7;
      *(void *)&_BYTE buf[24] = 1885892706LL;
      *(_DWORD *)&_BYTE buf[32] = 7;
      uint64_t v80 = 1885892674LL;
      sub_149910(qword_49D590, (uint64_t)buf, 3LL);
      for (uint64_t i = 32LL; i != -16; i -= 16LL)
        sub_2DBF5C((uint64_t)&buf[i]);
      __cxa_guard_release(&qword_49D5A8);
    }

    unsigned __int8 v43 = atomic_load((unsigned __int8 *)&qword_49D5C0);
    if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_49D5C0))
    {
      sub_2DC204((uint64_t)&unk_49D5B0, (uint64_t)qword_49D590);
      __cxa_guard_release(&qword_49D5C0);
    }

    unsigned __int8 v44 = atomic_load((unsigned __int8 *)&qword_49D5E8);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_49D5E8))
    {
      *(_DWORD *)AudioBufferList buf = 7;
      *(void *)&_DWORD buf[8] = 1LL;
      sub_2FF674((uint64_t)&unk_49D5C8, (uint64_t)&unk_49D5B0, (uint64_t)buf);
      sub_2DBF5C((uint64_t)buf);
      __cxa_guard_release(&qword_49D5E8);
    }

    unsigned __int8 v45 = atomic_load((unsigned __int8 *)&qword_49D610);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_49D610))
    {
      *(_DWORD *)AudioBufferList buf = 7;
      *(void *)&_DWORD buf[8] = 64001LL;
      sub_2FF674((uint64_t)&unk_49D5F0, (uint64_t)&unk_49D5B0, (uint64_t)buf);
      sub_2DBF5C((uint64_t)buf);
      __cxa_guard_release(&qword_49D610);
    }

    unsigned __int8 v46 = atomic_load((unsigned __int8 *)&qword_49D638);
    if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_49D638))
    {
      *(_DWORD *)AudioBufferList buf = 7;
      *(void *)&_DWORD buf[8] = 64003LL;
      sub_2FF674((uint64_t)&unk_49D618, (uint64_t)&unk_49D5B0, (uint64_t)buf);
      sub_2DBF5C((uint64_t)buf);
      __cxa_guard_release(&qword_49D638);
    }

    sub_2DC274((uint64_t)buf, (uint64_t)&unk_49D5C8);
    sub_2DC274((uint64_t)&buf[16], (uint64_t)&unk_49D5F0);
    sub_2DC274((uint64_t)&buf[32], (uint64_t)&unk_49D618);
    sub_149910(v74, (uint64_t)buf, 3LL);
    for (uint64_t j = 32LL; j != -16; j -= 16LL)
      sub_2DBF5C((uint64_t)&buf[j]);
    sub_2DC204((uint64_t)__p, (uint64_t)v74);
    *(_DWORD *)AudioBufferList buf = 1684303986;
    sub_2DC450((uint64_t)&buf[8], (uint64_t)__p);
    sub_148DB8((uint64_t)v75, *(int *)buf, buf);
    sub_2DBF5C((uint64_t)&buf[8]);
    sub_2DBF5C((uint64_t)__p);
    if (sub_2FD334((uint64_t)v17, "auspl_loudness_compensation"))
    {
      memset(buf, 0, 32);
      *(_DWORD *)&_BYTE buf[32] = 1065353216;
      int v48 = sub_33F6A4((uint64_t)v17, "auspl_loudness_compensation", 1u);
      if (v48)
      {
        sub_2DC034((uint64_t)v76, v48);
        int v81 = 64002;
        sub_2DC450((uint64_t)v82, (uint64_t)v76);
        sub_149710((uint64_t)__p, &v81, 1LL);
        sub_2FDDB8((uint64_t)v75, (uint64_t)__p);
        sub_D0C4C(v78);
        char v49 = __p[0];
        __p[0] = 0LL;
        if (v49) {
          operator delete(v49);
        }
        sub_2DBF5C((uint64_t)v82);
        sub_2DBF5C((uint64_t)v76);
      }

      sub_D0C4C(0LL);
    }

    else
    {
      int v54 = (os_log_t *)sub_138E8(20);
      unsigned int v55 = *v54;
      if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 255;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = "auspl_loudness_compensation";
        _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not load a tuning preset file with name %s",  buf,  0x1Cu);
      }
    }

    sub_D1274((uint64_t)buf, (uint64_t)v75);
    int v50 = sub_2FE168((uint64_t)buf);
    sub_D0C4C(*(void **)&buf[16]);
    uint64_t v51 = *(void **)buf;
    *(void *)AudioBufferList buf = 0LL;
    if (v51) {
      operator delete(v51);
    }
    sub_2FE1F0((char **)a1, (uint64_t)v50);
    if ((int)a5 > 1647522095)
    {
      if ((int)a5 > 1752709423)
      {
        if ((_DWORD)a5 != 1752709424 && (_DWORD)a5 != 2004367664) {
          goto LABEL_98;
        }
        unsigned int v52 = "MFi";
      }

      else
      {
        if ((a5 - 1647718502) >= 2)
        {
          unsigned __int16 v53 = 12592;
          goto LABEL_95;
        }

        unsigned int v52 = "EarPods";
      }
    }

    else
    {
      unsigned int v52 = "AirPods";
      if ((int)a5 > 1634231919)
      {
        if ((_DWORD)a5 == 1634231920 || (_DWORD)a5 == 1635085420) {
          goto LABEL_99;
        }
        unsigned __int16 v53 = 12338;
LABEL_95:
        if ((_DWORD)a5 == (v53 | 0x62330000))
        {
          unsigned int v52 = "Beats";
          goto LABEL_99;
        }

void sub_305668( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
}

uint64_t sub_305874()
{
  return 1936747629LL;
}

uint64_t sub_305880(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void sub_305890(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3058A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_3058C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_3058D0( char **a1, int a2, char *a3, char *a4, std::string::size_type a5, uint64_t a6, int a7, int a8, char *__s, void *a10)
{
  __int16 v16 = (os_log_t *)sub_138E8(20);
  int v17 = *v16;
  if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1416;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    *(_WORD *)&_BYTE buf[24] = 2080;
    *(void *)&buf[26] = a3;
    *(_WORD *)&_BYTE buf[34] = 2080;
    *(void *)char v143 = a4;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "%25s:%-5d GetHeadsetPlaybackDSPGraph: ChainType: %d, graph: %s, strip: %s",  buf,  0x2Cu);
  }

  char v18 = (const char *)sub_304664(a6);
  __int128 v139 = 0u;
  __int128 v140 = 0u;
  int v141 = 1065353216;
  if ((a6 - 1647718502) < 2 || (_DWORD)a6 == 1214394677 || (_DWORD)a6 == 1214329654)
  {
    if (!v18)
    {
      uint64_t v110 = (os_log_t *)sub_138E8(13);
      unsigned int v111 = *v110;
      if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1444;
        _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_47D9D8;
    __dst.__r_.__value_.__l.__size_ = a5;
    __dst.__r_.__value_.__l.__cap_ = (std::string::size_type)v18;
    p_dst = &__dst;
    sub_3074D8(buf, v18, "AUNBandEQ", (uint64_t)&__dst);
    __int16 v19 = p_dst;
    if (p_dst == &__dst)
    {
      uint64_t v20 = 4LL;
      __int16 v19 = &__dst;
    }

    else
    {
      if (!p_dst)
      {
LABEL_13:
        if (v143[4])
        {
          sub_2FDDB8((uint64_t)&v139, (uint64_t)buf);
          if (v143[4])
          {
            sub_D0C4C(*(void **)&buf[16]);
            __int16 v21 = *(void **)buf;
            *(void *)AudioBufferList buf = 0LL;
            if (v21) {
              operator delete(v21);
            }
          }
        }

        goto LABEL_17;
      }

      uint64_t v20 = 5LL;
    }

    (*(void (**)(void))(v19->__r_.__value_.__r.__words[0] + 8 * v20))();
    goto LABEL_13;
  }

LABEL_208:
  sub_149990((uint64_t *)&v133);
  sub_D0C4C((void *)v140);
  __int128 v109 = (void *)v139;
  *(void *)&__int128 v139 = 0LL;
  if (v109) {
    operator delete(v109);
  }
}

void sub_306F0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, char a50,int a51,__int16 a52)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a50)
  {
    if (a49 < 0) {
      operator delete(a44);
    }
  }

  sub_D0C14((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_3074D8(_BYTE *a1, const char *a2, char *a3, uint64_t a4)
{
  if (!a4) {
    sub_82CEC();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 48LL))(a4);
  if (!v7)
  {
    os_log_type_t v13 = (os_log_t *)sub_138E8(20);
    os_log_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)AudioBufferList buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v24 = 1024;
    *(_DWORD *)unint64_t v25 = 529;
    *(_WORD *)&void v25[4] = 2080;
    *(void *)&v25[6] = a2;
    os_log_t v15 = "%25s:%-5d Could not load disk tunings using preset file %s";
    __int16 v16 = v14;
    uint32_t v17 = 28;
    goto LABEL_19;
  }

  uint64_t v8 = sub_33F6A4(v7, a2, 1u);
  os_log_t v9 = (os_log_t *)sub_138E8(20);
  uint64_t v10 = *v9;
  if (!v8)
  {
    if (!v10 || !os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v24 = 1024;
    *(_DWORD *)unint64_t v25 = 534;
    *(_WORD *)&void v25[4] = 2080;
    *(void *)&v25[6] = a3;
    __int16 v26 = 2080;
    unint64_t v27 = (void *)a2;
    os_log_t v15 = "%25s:%-5d Could not load AU preset by name for %s: %s";
    __int16 v16 = v10;
    uint32_t v17 = 38;
LABEL_19:
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
LABEL_20:
    *a1 = 0;
    a1[40] = 0;
    return;
  }

  if (v10 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v24 = 1024;
    *(_DWORD *)unint64_t v25 = 538;
    *(_WORD *)&void v25[4] = 2080;
    *(void *)&v25[6] = a2;
    __int16 v26 = 2112;
    unint64_t v27 = v8;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding supplementary preset  %s (%@)", buf, 0x26u);
  }

  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v20 = 257;
  sub_1A3240((uint64_t)&theDict, @"BoxName", a3);
  CFMutableDictionaryRef v11 = theDict;
  if (HIBYTE(v20) && theDict)
  {
    CFDictionarySetValue(theDict, @"Preset", v8);
    CFMutableDictionaryRef v11 = theDict;
  }

  sub_2DC034((uint64_t)v18, v11);
  int v21 = 1652060275;
  sub_2DC450((uint64_t)v22, (uint64_t)v18);
  sub_149710((uint64_t)buf, &v21, 1LL);
  sub_2DBF5C((uint64_t)v22);
  sub_2DBF5C((uint64_t)v18);
  sub_520F8((uint64_t)a1, (uint64_t *)buf);
  a1[40] = 1;
  sub_D0C4C(*(void **)&v25[2]);
  uint64_t v12 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v12) {
    operator delete(v12);
  }
  sub_13850((uint64_t)&theDict);
}

void sub_3077D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_2DBF5C(v2);
  sub_2DBF5C((uint64_t)va);
  sub_13850((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_307810(uint64_t a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_3078A4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_3078E0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)__int16 v19 = 0u;
  __int128 v20 = 0u;
  int v21 = 1065353216;
  uint64_t v3 = sub_149814(*(void *)a1, *(void *)(a1 + 8), 1685090928);
  if (v3)
  {
    uint64_t v4 = sub_2DD064((int *)v3 + 6);
    sub_D1274((uint64_t)&__p, v4);
    int v5 = sub_D01B4(&__p, 1735553138);
    if (v5)
    {
      sub_2DC450((uint64_t)v14, (uint64_t)(v5 + 3));
      if (v14[0] == 16)
      {
        uint64_t v8 = sub_2DD25C(v14);
        for (uint64_t i = *(void *)(v8 + 8); i != v8; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v10 = sub_1498C0(i + 16);
          uint64_t v11 = v17[0];
          void *v10 = v17[0];
          v10[1] = v17;
          *(void *)(v11 + 8) = v10;
          v17[0] = (uint64_t)v10;
          ++v18;
        }
      }

      else if (v14[0] == 15)
      {
        uint64_t v6 = sub_1498C0((uint64_t)v14);
        uint64_t v7 = v17[0];
        *uint64_t v6 = v17[0];
        v6[1] = v17;
        *(void *)(v7 + 8) = v6;
        v17[0] = (uint64_t)v6;
        ++v18;
      }

      sub_2DBF5C((uint64_t)v14);
    }

    sub_D0C4C(v16[1]);
    uint64_t v12 = __p;
    std::string __p = 0LL;
    if (v12) {
      operator delete(v12);
    }
  }

  sub_2DC204((uint64_t)v14, (uint64_t)v17);
  LODWORD(__p) = 1735553138;
  sub_2DC450((uint64_t)v16, (uint64_t)v14);
  sub_148DB8((uint64_t)v19, (int)__p, &__p);
  sub_2DBF5C((uint64_t)v16);
  sub_2DBF5C((uint64_t)v14);
  sub_2FDDB8(a1, (uint64_t)v19);
  sub_D0C4C((void *)v20);
  os_log_type_t v13 = v19[0];
  v19[0] = 0LL;
  if (v13) {
    operator delete(v13);
  }
  sub_149990(v17);
}

void sub_307ADC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_307B60(char *a1)
{
  uint64_t v1 = a1[23];
  BOOL v2 = (v1 & 0x80u) != 0LL;
  if ((v1 & 0x80u) != 0LL) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v2) {
    uint64_t v3 = *(char **)a1;
  }
  else {
    uint64_t v3 = a1;
  }
  uint64_t v4 = &v3[v1];
  if (v1 >= 4)
  {
    int v5 = v3;
    do
    {
      uint64_t v6 = (char *)memchr(v5, 115, v1 - 3);
      if (!v6) {
        break;
      }
      if (*(_DWORD *)v6 == 1769105779) {
        return v6 == v4 || v6 - v3 == -1;
      }
      int v5 = v6 + 1;
      uint64_t v1 = v4 - (_BYTE *)v5;
    }

    while (v4 - (_BYTE *)v5 > 3);
  }

  uint64_t v6 = v4;
  return v6 == v4 || v6 - v3 == -1;
}

BOOL sub_307BF0(char *a1)
{
  uint64_t v1 = a1[23];
  BOOL v2 = (v1 & 0x80u) != 0LL;
  if ((v1 & 0x80u) != 0LL) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v2) {
    uint64_t v3 = *(char **)a1;
  }
  else {
    uint64_t v3 = a1;
  }
  uint64_t v4 = &v3[v1];
  if (v1 >= 11)
  {
    int v5 = v3;
    do
    {
      uint64_t v6 = (char *)memchr(v5, 118, v1 - 10);
      if (!v6) {
        break;
      }
      if (*(void *)v6 == 0x696C656D756C6F76LL && *(void *)(v6 + 3) == 0x74696D696C656D75LL) {
        return v6 != v4 && v6 - v3 != -1;
      }
      int v5 = v6 + 1;
      uint64_t v1 = v4 - (_BYTE *)v5;
    }

    while (v4 - (_BYTE *)v5 > 10);
  }

  uint64_t v6 = v4;
  return v6 != v4 && v6 - v3 != -1;
}

void sub_307CA0(std::string *a1, const void **a2, int a3, uint64_t a4, uint64_t a5)
{
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = &v33;
  sub_D0924((uint64_t)&v33, v10 + 4);
  if ((v33.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    else {
      uint64_t v12 = *a2;
    }
    memmove(v11, v12, v10);
  }

  strcpy((char *)v11 + v10, "_off");
  int v13 = *(char *)(a5 + 23);
  if (v13 >= 0) {
    os_log_t v14 = (const std::string::value_type *)a5;
  }
  else {
    os_log_t v14 = *(const std::string::value_type **)a5;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a5 + 8);
  }
  __int16 v16 = std::string::append(&v33, v14, v15);
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v16->__r_.__value_.__s.__size_;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v17;
  __p.__pn_.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
  __p.__pn_.__r_.__value_.__s.__size_ = size;
  sub_83AA0(&v35, (uint64_t)buf, &__p);
  sub_83A3C(buf, a1);
  else {
    size_t v19 = (size_t)a2[1];
  }
  p_dst = &__dst;
  sub_D0924((uint64_t)&__dst, v19 + 3);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v19)
  {
    else {
      int v21 = *a2;
    }
    memmove(p_dst, v21, v19);
  }

  *(_DWORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v19) = 7237471;
  int v22 = *(char *)(a5 + 23);
  if (v22 >= 0) {
    __int16 v23 = (const std::string::value_type *)a5;
  }
  else {
    __int16 v23 = *(const std::string::value_type **)a5;
  }
  if (v22 >= 0) {
    std::string::size_type v24 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v24 = *(void *)(a5 + 8);
  }
  unint64_t v25 = std::string::append(&__dst, v23, v24);
  std::string::size_type v26 = v25->__r_.__value_.__r.__words[0];
  *(void *)__int16 v36 = v25->__r_.__value_.__l.__size_;
  *(void *)&v36[7] = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v27 = v25->__r_.__value_.__s.__size_;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  *(std::string::size_type *)((char *)&v33.__r_.__value_.__r.__words[1] + 7) = *(void *)&v36[7];
  v33.__r_.__value_.__r.__words[0] = v26;
  v33.__r_.__value_.__l.__size_ = *(void *)v36;
  v33.__r_.__value_.__s.__size_ = v27;
  sub_83AA0(&__p, (uint64_t)buf, (std::__fs::filesystem::path *)&v33);
  std::__fs::filesystem::__status(&v35, 0LL);
  if (buf[0].__r_.__value_.__s.__data_[0]
    && buf[0].__r_.__value_.__s.__data_[0] != 255
    && (std::__fs::filesystem::__status(&__p, 0LL), buf[0].__r_.__value_.__s.__data_[0] != 255)
    && buf[0].__r_.__value_.__s.__data_[0])
  {
    memset(buf, 0, 32);
    LODWORD(buf[1].__r_.__value_.__r.__words[1]) = 1065353216;
    else {
      std::string __dst = v35.__pn_;
    }
    sub_2DC0BC((uint64_t)v36, (uint64_t)&__dst);
    LODWORD(v33.__r_.__value_.__l.__data_) = 0;
    sub_2DC450((uint64_t)&v33.__r_.__value_.__l.__size_, (uint64_t)v36);
    sub_148DB8((uint64_t)buf, (int)v33.__r_.__value_.__l.__data_, &v33);
    sub_2DBF5C((uint64_t)&v33.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)v36);
    else {
      std::string __dst = __p.__pn_;
    }
    sub_2DC0BC((uint64_t)v36, (uint64_t)&__dst);
    LODWORD(v33.__r_.__value_.__l.__data_) = 1;
    sub_2DC450((uint64_t)&v33.__r_.__value_.__l.__size_, (uint64_t)v36);
    sub_148DB8((uint64_t)buf, (int)v33.__r_.__value_.__l.__data_, &v33);
    sub_2DBF5C((uint64_t)&v33.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)v36);
    sub_2DC194((uint64_t)&__dst, (uint64_t)buf);
    LODWORD(v33.__r_.__value_.__l.__data_) = a3;
    sub_2DC450((uint64_t)&v33.__r_.__value_.__l.__size_, (uint64_t)&__dst);
    sub_148DB8(a4, (int)v33.__r_.__value_.__l.__data_, &v33);
    sub_2DBF5C((uint64_t)&v33.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&__dst);
    sub_D0C4C((void *)buf[0].__r_.__value_.__l.__cap_);
    int v32 = (void *)buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v32) {
      operator delete(v32);
    }
  }

  else
  {
    size_t v28 = (os_log_t *)sub_138E8(1);
    std::string::size_type v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      int v30 = &v35;
      if ((v35.__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v30 = (std::__fs::filesystem::path *)v35.__pn_.__r_.__value_.__r.__words[0];
      }
      p_p = &__p;
      if ((__p.__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1894;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v30;
      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)p_p;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Could not find binary tuning files: %s, %s",  (uint8_t *)buf,  0x26u);
    }
  }

void sub_308190( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3082D4()
{
  unsigned __int8 v0 = (char *)operator new(0x48uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)unsigned __int8 v0 = off_47DF30;
  *((void *)v0 + 4) = -2609680281LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  *(_OWORD *)(v0 + 44) = xmmword_402D48;
  qword_49D6B8 = (uint64_t)v0;
  *((void *)v0 + 3) = off_47DF68;
  uint64_t result = (uint64_t)(v0 + 24);
  qword_49D6B0 = result;
  return result;
}

uint64_t sub_308340()
{
  unsigned __int8 v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)unsigned __int8 v0 = off_47E0E0;
  *((void *)v0 + 4) = -2609680281LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  *(_OWORD *)(v0 + 44) = xmmword_402D48;
  *(_OWORD *)(v0 + 72) = xmmword_49D658;
  v0[88] = 0;
  v0[136] = 0;
  *((void *)v0 + 18) = 0x76657167766F6C75LL;
  qword_49D6D0 = (uint64_t)v0;
  *((void *)v0 + 3) = off_47E118;
  uint64_t result = (uint64_t)(v0 + 24);
  qword_49D6C8 = result;
  return result;
}

void sub_3083D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47E2C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3083E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47E2C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_308400(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_308410(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v5 = (_OWORD *)(a1 + 48);
  uint64_t v6 = operator new(0xB8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *a2;
  os_log_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_3085B8(v6, v5, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = v7;
}

void sub_308484(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3084A4(uint64_t *a1@<X1>, void *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(double *)&__int128 v12 = a3;
  *((double *)&v12 + 1) = a4;
  uint64_t v6 = operator new(0xB8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *a1;
  os_log_t v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_3085B8(v6, &v12, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *a2 = v7;
}

void sub_308520(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_308540(uint64_t a1)
{
  *(void *)a1 = &off_47DE78;
  if (*(_BYTE *)(a1 + 112)) {
    sub_32C8C(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_30857C(void **__p)
{
  void *__p = &off_47DE78;
  if (*((_BYTE *)__p + 112)) {
    sub_32C8C(__p[10]);
  }
  operator delete(__p);
}

void *sub_3085B8(void *a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  v10[0] = 0;
  char v12 = 0;
  sub_142544((uint64_t)a1, a2, a3, a4, (uint64_t)v10);
  if (v12) {
    sub_32C8C(v11);
  }
  if (a4)
  {
    std::__shared_weak_count::__release_weak(a4);
    a1[19] = 0x76657167766F6C75LL;
    std::__shared_weak_count::__release_weak(a4);
  }

  else
  {
    a1[19] = 0x76657167766F6C75LL;
  }

  *a1 = &off_47E158;
  return a1;
}

void sub_308670( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_32C8C(a12);
  }
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  _Unwind_Resume(exception_object);
}

void sub_3086A4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_3086B8(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (!v4 || (int v5 = std::__shared_weak_count::lock(v4), (v14 = v5) == 0LL))
  {
LABEL_13:
    (*(void (**)(void *, uint64_t))(*a1 + 144LL))(a1, a2);
    return;
  }

  uint64_t v6 = v5;
  uint64_t v7 = a1[3];
  uint64_t v13 = v7;
  if (!v7
    || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v7 + 88LL))( v7,  1685287015LL,  1652127340LL,  0LL))
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }

    goto LABEL_13;
  }

  int v12 = a2 ^ 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t, void))(*(void *)v7 + 112LL))( v7,  1685287015LL,  1652127340LL,  &v12,  4LL,  0LL);
  unint64_t v8 = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

void sub_3087E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_3087F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47E0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_308808(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47E0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_308828(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_308838(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xF8uLL);
  int v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }

  sub_143F60((uint64_t)v4, v6, v7, 0, 1);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *a2 = v5;
}

void sub_3088AC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3088D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3088E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_308904(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

__n128 sub_30891C(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x18uLL);
  *(void *)BOOL v2 = &off_47D9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_308954(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_47D9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

os_log_s *sub_308974(uint64_t a1)
{
  return sub_2FD334(*(void *)(a1 + 8), *(const char **)(a1 + 16));
}

void sub_308980(char **a1, const char *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_2FD7CC((uint64_t)v16, a2, 0, 0, a3, 0x726F7368u);
  sub_308B68((uint64_t)v16, 1919906664LL, 1u);
  int v14 = 7;
  uint64_t v15 = a4;
  int v19 = 64002;
  sub_2DC450((uint64_t)v20, (uint64_t)&v14);
  sub_149710((uint64_t)__p, &v19, 1LL);
  sub_2FDDB8((uint64_t)v16, (uint64_t)__p);
  sub_D0C4C(v18);
  size_t v10 = __p[0];
  __p[0] = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_2DBF5C((uint64_t)v20);
  sub_2DBF5C((uint64_t)&v14);
  if ((a5 & 0xFF00000000LL) != 0 && (a6 & 0xFF00000000LL) != 0) {
    sub_2FE37C((uint64_t)v16, a5, a6);
  }
  sub_D1274((uint64_t)__p, (uint64_t)v16);
  unint64_t v11 = sub_2FE168((uint64_t)__p);
  sub_D0C4C(v18);
  int v12 = __p[0];
  __p[0] = 0LL;
  if (v12) {
    operator delete(v12);
  }
  sub_2FE1F0(a1, (uint64_t)v11);
  sub_D0C4C((void *)v16[2]);
  uint64_t v13 = v16[0];
  v16[0] = 0LL;
  if (v13) {
    operator delete(v13);
  }
}

void sub_308B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_D0C14((uint64_t)va1);
  sub_D0C14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_308B68(uint64_t a1, uint64_t a2, unsigned int a3)
{
  LODWORD(v16[0]) = 7;
  v16[1] = a2;
  int v13 = 7;
  v14[0] = HIDWORD(a2);
  sub_149F28((uint64_t)v18, (uint64_t)v16, (uint64_t)&v13);
  sub_2DC274((uint64_t)v17, (uint64_t)v18);
  sub_2DBF5C((uint64_t)v19);
  sub_2DBF5C((uint64_t)v18);
  sub_2DBF5C((uint64_t)&v13);
  sub_2DBF5C((uint64_t)v16);
  int v5 = sub_149814(*(void *)a1, *(void *)(a1 + 8), 1768907891);
  if (v5)
  {
    LODWORD(v18[0]) = 7;
    v18[1] = (CFTypeRef)a3;
    uint64_t v6 = (int *)(v5 + 3);
    uint64_t v7 = (CFTypeRef *)sub_2DD358((int *)v5 + 6);
    sub_2DC544(v7, v18);
    sub_2DBF5C((uint64_t)v18);
    uint64_t v8 = sub_2DD358(v6);
    uint64_t v9 = (uint64_t *)sub_2DD25C((int *)(v8 + 16));
    size_t v10 = sub_1498C0((uint64_t)v17);
    v10[1] = v9;
    uint64_t v11 = *v9;
    void *v10 = *v9;
    *(void *)(v11 + 8) = v10;
    uint64_t *v9 = (uint64_t)v10;
    ++v9[2];
  }

  else
  {
    sub_2DC450((uint64_t)v18, (uint64_t)v17);
    sub_149910(v16, (uint64_t)v18, 1LL);
    sub_2DBF5C((uint64_t)v18);
    int v13 = 7;
    v14[0] = a3;
    sub_2DC204((uint64_t)v15, (uint64_t)v16);
    sub_149F28((uint64_t)v18, (uint64_t)&v13, (uint64_t)v15);
    sub_2DBF5C((uint64_t)v15);
    sub_2DBF5C((uint64_t)&v13);
    sub_2DC274((uint64_t)v15, (uint64_t)v18);
    int v13 = 1768907891;
    sub_2DC450((uint64_t)v14, (uint64_t)v15);
    sub_148DB8(a1, v13, &v13);
    sub_2DBF5C((uint64_t)v14);
    sub_2DBF5C((uint64_t)v15);
    sub_2DBF5C((uint64_t)v19);
    sub_2DBF5C((uint64_t)v18);
    sub_149990(v16);
  }

  return sub_2DBF5C((uint64_t)v17);
}

void sub_308D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_2DBF5C(v5);
  sub_2DBF5C((uint64_t)va);
  sub_2DBF5C(v6 - 56);
  sub_2DBF5C(v6 - 72);
  sub_149990((uint64_t *)va1);
  sub_2DBF5C((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_308E2C(char **a1, const char *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_2FD7CC((uint64_t)v10, a2, a3, 0, a4, 0x6D626571u);
  if ((a5 & 0xFF00000000LL) != 0) {
    sub_2FE37C((uint64_t)v10, a5, a5);
  }
  sub_D1274((uint64_t)__p, (uint64_t)v10);
  uint64_t v7 = sub_2FE168((uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  uint64_t v8 = __p[0];
  __p[0] = 0LL;
  if (v8) {
    operator delete(v8);
  }
  sub_2FE1F0(a1, (uint64_t)v7);
  sub_D0C4C((void *)v10[2]);
  uint64_t v9 = v10[0];
  v10[0] = 0LL;
  if (v9) {
    operator delete(v9);
  }
}

void sub_308EE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_308F0C(char **a1, const char *a2, uint64_t a3, int a4)
{
  if (a4 == 2)
  {
    sub_2FE0C4(a1, a2, 0, 0, a3, 0x76727132u);
    uint64_t v12 = qword_49D570;
    uint64_t v7 = *(std::__shared_weak_count **)algn_49D578;
    *(void *)uint64_t v18 = qword_49D570;
    *(void *)&v18[8] = *(void *)algn_49D578;
    if (*(void *)algn_49D578)
    {
      uint64_t v13 = (unint64_t *)(*(void *)algn_49D578 + 8LL);
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    sub_143208(a1, v12, (uint64_t)v7);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      goto LABEL_16;
    }
  }

  else if (a4 == 1)
  {
    sub_2FE0C4(a1, a2, 0, 0, a3, 0x766F6C69u);
    uint64_t v6 = qword_49D510;
    uint64_t v7 = *(std::__shared_weak_count **)algn_49D518;
    *(void *)uint64_t v18 = qword_49D510;
    *(void *)&v18[8] = *(void *)algn_49D518;
    if (*(void *)algn_49D518)
    {
      uint64_t v8 = (unint64_t *)(*(void *)algn_49D518 + 8LL);
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    sub_143208(a1, v6, (uint64_t)v7);
    if (v7)
    {
      uint64_t v10 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
LABEL_16:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

  else
  {
    __int16 v16 = (os_log_t *)sub_138E8(20);
    std::string::size_type v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v18 = 136315650;
      *(void *)&v18[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&v18[12] = 1024;
      *(_DWORD *)&v18[14] = 366;
      __int16 v19 = 1024;
      int v20 = a4;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring invalid volume strategy: %d", v18, 0x18u);
    }
  }

void sub_3090D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3090EC(char **a1, const char *a2, int a3, uint64_t a4)
{
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_49D978);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_49D978))
  {
    __int16 v19 = operator new(0x28uLL);
    v19[1] = 0LL;
    uint64_t v19[2] = 0LL;
    *__int16 v19 = off_47DA68;
    v19[3] = off_47DAA0;
    *((_DWORD *)v19 + 8) = 1601402742;
    qword_49D968 = (uint64_t)(v19 + 3);
    unk_49D970 = v19;
    __cxa_guard_release(&qword_49D978);
  }

  *(_OWORD *)__int16 v23 = 0u;
  __int128 v24 = 0u;
  int v25 = 1065353216;
  unsigned int v22 = 0;
  int v29 = 7;
  v30[0] = 1987013737LL;
  LODWORD(__p) = 1685090932;
  sub_2DC450((uint64_t)&v27, (uint64_t)&v29);
  sub_148DB8((uint64_t)v23, 1685090932, &__p);
  sub_2DBF5C((uint64_t)&v27);
  sub_2DBF5C((uint64_t)&v29);
  sub_2FD930((uint64_t)v23, (int *)&v22, a2, a3, a4, 1987013737);
  sub_2FDCC0((uint64_t)v23, v22);
  int v20 = 7;
  uint64_t v21 = 1LL;
  int v29 = 64001;
  sub_2DC450((uint64_t)v30, (uint64_t)&v20);
  sub_149710((uint64_t)&__p, &v29, 1LL);
  sub_2FDDB8((uint64_t)v23, (uint64_t)&__p);
  sub_D0C4C(v28);
  unint64_t v9 = __p;
  std::__fs::filesystem::path __p = 0LL;
  if (v9) {
    operator delete(v9);
  }
  sub_2DBF5C((uint64_t)v30);
  sub_2DBF5C((uint64_t)&v20);
  sub_2FE37C((uint64_t)v23, 0, 0);
  sub_D1274((uint64_t)&__p, (uint64_t)v23);
  uint64_t v10 = sub_2FE168((uint64_t)&__p);
  sub_D0C4C(v28);
  unint64_t v11 = __p;
  std::__fs::filesystem::path __p = 0LL;
  if (v11) {
    operator delete(v11);
  }
  sub_2FE1F0(a1, (uint64_t)v10);
  sub_D0C4C((void *)v24);
  uint64_t v12 = v23[0];
  v23[0] = 0LL;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = qword_49D968;
  unint64_t v14 = (std::__shared_weak_count *)unk_49D970;
  std::__fs::filesystem::path __p = (void *)qword_49D968;
  uint64_t v27 = unk_49D970;
  if (unk_49D970)
  {
    uint64_t v15 = (unint64_t *)(unk_49D970 + 8LL);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  sub_145A88(a1, v13, (uint64_t)v14, a3);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

void sub_30939C(_Unwind_Exception *a1)
{
}

uint64_t sub_309438()
{
  return 1987013737LL;
}

void sub_309444(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_309454(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DA68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_309474(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

void sub_309484( char **a1, int a2, char *a3, uint64_t *a4, os_log_s *a5, unsigned int a6, int a7, const char *a8, unsigned int a9, unsigned int a10)
{
  uint64_t v10 = a8;
  int v11 = a7;
  uint64_t v13 = a5;
  unint64_t v14 = a4;
  int v16 = a2;
  if (a6 >= 5)
  {
    int v18 = 1684434036;
    __int16 v23 = (os_log_t *)sub_138E8(13);
    __int128 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 1996;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = a6;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unsupported speaker protection type: %u",  buf,  0x18u);
    }

    uint64_t v10 = a8;
    unint64_t v14 = a4;
    int v11 = a7;
    uint64_t v13 = a5;
    int v16 = a2;
  }

  else
  {
    int v18 = dword_402B78[a6];
  }

  if (a10 >= 2)
  {
    uint64_t v80 = (os_log_t *)sub_138E8(13);
    int v81 = *v80;
    if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 2011;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = a10;
      _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): unsupported volume unit (%d)",  buf,  0x18u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "unsupported volume unit (%d)");
  }

  sub_30B32C((uint64_t)a1, a3, v18);
  unsigned __int8 v25 = atomic_load((unsigned __int8 *)&qword_49D740);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_49D740))
  {
    *(_OWORD *)AudioBufferList buf = xmmword_403340;
    sub_30B3A0((uint64_t *)buf, 4LL);
    __cxa_guard_release(&qword_49D740);
  }

  uint64_t v26 = qword_49D728;
  if ((uint64_t *)qword_49D728 == &qword_49D730)
  {
LABEL_17:
    uint64_t v13 = sub_2FD190(v13, a3, v14);
  }

  else
  {
    while (*(_DWORD *)(v26 + 28) != v16)
    {
      uint64_t v27 = *(uint64_t **)(v26 + 8);
      if (v27)
      {
        do
        {
          size_t v28 = v27;
          uint64_t v27 = (uint64_t *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          size_t v28 = *(uint64_t **)(v26 + 16);
          BOOL v29 = *v28 == v26;
          uint64_t v26 = (uint64_t)v28;
        }

        while (!v29);
      }

      uint64_t v26 = (uint64_t)v28;
      if (v28 == &qword_49D730) {
        goto LABEL_17;
      }
    }
  }

  switch(v16)
  {
    case 0:
    case 1:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      buf[0] = 0;
      _DWORD buf[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v13, a9, 0, (uint64_t)buf);
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      buf[0] = 0;
      _DWORD buf[8] = 0;
      sub_2FEDA8(a1, a3, 1, (uint64_t)v13, a9, 1, (uint64_t)buf);
      sub_2FF254(a1, a3, 2, (uint64_t)v13, 0LL);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7366636Cu);
      if (v16 != 1) {
        goto LABEL_95;
      }
      goto LABEL_94;
    case 2:
    case 3:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_7D084(buf, a3);
      if (buf[23] >= 0) {
        int v30 = buf;
      }
      else {
        int v30 = *(const char **)buf;
      }
      sub_2FE0C4(a1, v30, 0, 0, (uint64_t)v13, 0x6D6F7A73u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      buf[0] = 0;
      _DWORD buf[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v13, a9, 1, (uint64_t)buf);
      sub_2FF254(a1, a3, 1, (uint64_t)v13, 0LL);
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v16 != 3) {
        goto LABEL_177;
      }
      goto LABEL_101;
    case 4:
      sub_2FF254(a1, a3, 0, (uint64_t)v13, 0LL);
      sub_7D084(buf, a3);
      if (buf[23] >= 0) {
        unsigned __int8 v71 = buf;
      }
      else {
        unsigned __int8 v71 = *(const char **)buf;
      }
      sub_2FE0C4(a1, v71, 0, 0, (uint64_t)v13, 0x6D6F7A73u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0LL, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_308E2C(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      *(void *)AudioBufferList buf = 1LL;
      _DWORD buf[8] = 1;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v13, 0x6D73746Bu, 1, (uint64_t)buf);
      sub_7D084(buf, a3);
      sub_308E2C(a1, buf, 1, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x706C7567u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x63646C79u);
      BOOL v57 = 0;
      goto LABEL_176;
    case 5:
    case 6:
      sub_2FF324(a1, a3, (uint64_t)v13, 0LL);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7662656Eu);
      sub_7D084(buf, a3);
      if (buf[23] >= 0) {
        unsigned __int8 v56 = buf;
      }
      else {
        unsigned __int8 v56 = *(const char **)buf;
      }
      sub_2FE0C4(a1, v56, 0, 0, (uint64_t)v13, 0x6D6F7A73u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0LL, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x746D7374u);
      sub_308F0C(a1, a3, (uint64_t)v13, v11);
      *(void *)AudioBufferList buf = 1LL;
      _DWORD buf[8] = 1;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v13, 0x6D73746Bu, 1, (uint64_t)buf);
      sub_2FE0C4(a1, a3, 1, 0, (uint64_t)v13, 0x746D7374u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x62757A6Bu);
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x706C7567u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x63646C79u);
      if (v16 != 6) {
        goto LABEL_92;
      }
      goto LABEL_177;
    case 7:
    case 8:
      if (v11 != 2)
      {
        uint64_t v83 = (os_log_t *)sub_138E8(13);
        unint64_t v84 = *v83;
        if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 2253;
          _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        uint64_t v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v85, "Precondition failure.");
        goto LABEL_215;
      }

      unsigned __int8 v31 = atomic_load((unsigned __int8 *)&qword_49D770);
      if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_49D770))
      {
        sub_30B5EC();
        __cxa_guard_release(&qword_49D770);
      }

      if (v16 == 8)
      {
        sub_2FF19C(a1, a3, (uint64_t)v13);
        unsigned __int8 v32 = atomic_load((unsigned __int8 *)&qword_49D788);
        if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_49D788))
        {
          sub_30B530(&qword_49D778);
          __cxa_guard_release(&qword_49D788);
        }

        uint64_t v33 = qword_49D778;
        unsigned __int8 v34 = (std::__shared_weak_count *)unk_49D780;
        *(void *)AudioBufferList buf = qword_49D778;
        *(void *)&_DWORD buf[8] = unk_49D780;
        if (unk_49D780)
        {
          std::__fs::filesystem::path v35 = (unint64_t *)(unk_49D780 + 8LL);
          do
            unint64_t v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }

        sub_143208(a1, v33, (uint64_t)v34);
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            unint64_t v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }

      uint64_t v39 = qword_49D760;
      unsigned __int8 v40 = (std::__shared_weak_count *)qword_49D768;
      *(void *)AudioBufferList buf = qword_49D760;
      *(void *)&_DWORD buf[8] = qword_49D768;
      if (qword_49D768)
      {
        float v41 = (unint64_t *)(qword_49D768 + 8);
        do
          unint64_t v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }

      sub_143208(a1, v39, (uint64_t)v40);
      if (v40)
      {
        int v43 = (unint64_t *)&v40->__shared_owners_;
        do
          unint64_t v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      uint64_t v45 = qword_49D570;
      BOOL v46 = *(std::__shared_weak_count **)algn_49D578;
      *(void *)AudioBufferList buf = qword_49D570;
      *(void *)&_DWORD buf[8] = *(void *)algn_49D578;
      if (*(void *)algn_49D578)
      {
        unsigned __int8 v47 = (unint64_t *)(*(void *)algn_49D578 + 8LL);
        do
          unint64_t v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }

      sub_143208(a1, v45, (uint64_t)v46);
      if (v46)
      {
        unsigned __int8 v49 = (unint64_t *)&v46->__shared_owners_;
        do
          unint64_t v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }

      sub_2FF324(a1, a3, (uint64_t)v13, 0LL);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x7662656Eu);
      sub_7D084(buf, a3);
      if (buf[23] >= 0) {
        unsigned __int8 v51 = buf;
      }
      else {
        unsigned __int8 v51 = *(const char **)buf;
      }
      sub_2FE0C4(a1, v51, 0, 0, (uint64_t)v13, 0x6D6F7A73u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(buf, a3);
      sub_308980(a1, buf, (uint64_t)v13, 0, 0LL, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_7D084(v89, a3);
      if (v90 >= 0) {
        unsigned int v52 = v89;
      }
      else {
        unsigned int v52 = (void **)v89[0];
      }
      sub_2FD7CC((uint64_t)__p, (const char *)v52, 0, 0, (uint64_t)v13, 0x61787463u);
      sub_308B68((uint64_t)__p, 0x6F72696561787463LL, 1u);
      sub_D1274((uint64_t)buf, (uint64_t)__p);
      unsigned __int8 v53 = sub_2FE168((uint64_t)buf);
      sub_D0C4C(*(void **)&buf[16]);
      unsigned __int8 v54 = *(void **)buf;
      *(void *)AudioBufferList buf = 0LL;
      if (v54) {
        operator delete(v54);
      }
      sub_2FE1F0(a1, (uint64_t)v53);
      sub_D0C4C((void *)__p[2]);
      unsigned __int8 v55 = __p[0];
      __p[0] = 0LL;
      if (v55) {
        operator delete(v55);
      }
      if (v90 < 0) {
        operator delete(v89[0]);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x746D7374u);
      if (v16 != 8) {
        sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x63646C79u);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x76727132u);
      *(void *)AudioBufferList buf = 1LL;
      _DWORD buf[8] = 1;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v13, 0x6D73746Bu, 1, (uint64_t)buf);
      sub_2FE0C4(a1, a3, 1, 0, (uint64_t)v13, 0x746D7374u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x62757A6Bu);
      sub_7D084(buf, a3);
      sub_300FFC(a1, buf, 0, (uint64_t)v13, 0LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v13, 0x706C7567u);
      if (v16 != 8)
      {
LABEL_92:
        BOOL v57 = 0;
LABEL_176:
        sub_3090EC(a1, a3, v57, (uint64_t)v13);
      }

void sub_30B0B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

uint64_t sub_30B32C(uint64_t a1, char *a2, int a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_7D084((void *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0LL;
  return a1;
}

void sub_30B388(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_30B3A0(uint64_t *result, uint64_t a2)
{
  qword_49D738 = 0LL;
  qword_49D730 = 0LL;
  qword_49D728 = (uint64_t)&qword_49D730;
  if (a2)
  {
    BOOL v2 = result;
    uint64_t v3 = 0LL;
    uint64_t v4 = (uint64_t *)((char *)result + 4 * a2);
    uint64_t v5 = &qword_49D730;
    while (1)
    {
      if (v5 == &qword_49D730)
      {
        uint64_t v7 = &qword_49D730;
      }

      else
      {
        uint64_t v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = (uint64_t *)v6[1];
          }

          while (v6);
        }

        else
        {
          unsigned __int8 v8 = &qword_49D730;
          do
          {
            uint64_t v7 = (uint64_t *)v8[2];
            BOOL v9 = *v7 == (void)v8;
            unsigned __int8 v8 = v7;
          }

          while (v9);
        }

        int v10 = *(_DWORD *)v2;
        if (*((_DWORD *)v7 + 7) >= *(_DWORD *)v2)
        {
          if (v3)
          {
            uint64_t v12 = &qword_49D730;
            while (1)
            {
              while (1)
              {
                int v11 = (uint64_t *)v3;
                int v14 = *(_DWORD *)(v3 + 28);
                if (v10 >= v14) {
                  break;
                }
                uint64_t v3 = *v11;
                uint64_t v12 = v11;
                if (!*v11) {
                  goto LABEL_18;
                }
              }

              if (v14 >= v10) {
                break;
              }
              uint64_t v12 = v11 + 1;
              uint64_t v3 = v11[1];
              if (!v3) {
                goto LABEL_18;
              }
            }
          }

          else
          {
            int v11 = &qword_49D730;
            uint64_t v12 = &qword_49D730;
          }

          goto LABEL_17;
        }
      }

      if (v3) {
        int v11 = v7;
      }
      else {
        int v11 = &qword_49D730;
      }
      if (v3) {
        uint64_t v12 = v7 + 1;
      }
      else {
        uint64_t v12 = &qword_49D730;
      }
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        uint64_t v13 = operator new(0x20uLL);
        v13[7] = *(_DWORD *)v2;
        *(void *)uint64_t v13 = 0LL;
        *((void *)v13 + 1) = 0LL;
        *((void *)v13 + 2) = v11;
        uint64_t *v12 = (uint64_t)v13;
        if (*(void *)qword_49D728)
        {
          qword_49D728 = *(void *)qword_49D728;
          uint64_t v13 = (_DWORD *)*v12;
        }

        __n128 result = sub_7A420((uint64_t *)qword_49D730, (uint64_t *)v13);
        ++qword_49D738;
      }

      BOOL v2 = (uint64_t *)((char *)v2 + 4);
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_49D728;
      uint64_t v3 = qword_49D730;
    }
  }

  return result;
}

void sub_30B518(_Unwind_Exception *a1)
{
}

double sub_30B530(void *a1)
{
  BOOL v2 = (char *)operator new(0x78uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)BOOL v2 = off_47E300;
  *((void *)v2 + 3) = off_47E640;
  *((void *)v2 + 4) = 0x16C646E6DLL;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001LL;
  *(_OWORD *)(v2 + 44) = xmmword_402D48;
  *((_DWORD *)v2 + 18) = dword_49D530;
  sub_142EF4((uint64_t)(v2 + 80), qword_49D538);
  double result = *(double *)&xmmword_49D550;
  *(_OWORD *)(v2 + 104) = xmmword_49D550;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_30B5D4(_Unwind_Exception *a1)
{
}

double sub_30B5EC()
{
  unsigned __int8 v0 = (char *)operator new(0x78uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)unsigned __int8 v0 = off_47E338;
  *((void *)v0 + 3) = off_47E6C0;
  *((void *)v0 + 4) = 0x73766F6C61787463LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  *(_OWORD *)(v0 + 44) = xmmword_402D48;
  *((_DWORD *)v0 + 18) = dword_49D530;
  sub_142EF4((uint64_t)(v0 + 80), qword_49D538);
  double result = *(double *)&xmmword_49D550;
  *(_OWORD *)(v0 + 104) = xmmword_49D550;
  qword_49D760 = (uint64_t)(v0 + 24);
  qword_49D768 = (uint64_t)v0;
  return result;
}

void sub_30B690(_Unwind_Exception *a1)
{
}

void sub_30B6A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47E338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_30B6B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47E338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_30B6D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_30B6E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47E300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_30B6F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47E300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_30B718(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_30B728(char **a1, int a2, char *a3, uint64_t a4)
{
  if (a2 == 38)
  {
    unsigned __int8 v8 = sub_2FCF50(a4, a3);
    sub_7D084(__p, a3);
    sub_300FFC(a1, __p, 0, (uint64_t)v8, 0LL);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)__p);
    }
    sub_7D084(__p, a3);
    if (v17 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = *(const char **)__p;
    }
    sub_2FE0C4(a1, v10, 0, 0, (uint64_t)v8, 0x6D6F7A73u);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_18;
  }

  if (a2 == 37)
  {
    unsigned __int8 v8 = sub_2FCF50(a4, a3);
    sub_7D084(__p, a3);
    sub_300FFC(a1, __p, 0, (uint64_t)v8, 0LL);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)__p);
    }
    sub_7D084(__p, a3);
    if (v17 >= 0) {
      BOOL v9 = __p;
    }
    else {
      BOOL v9 = *(const char **)__p;
    }
    sub_2FE0C4(a1, v9, 0, 0, (uint64_t)v8, 0x6D6F7A73u);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)__p);
    }
LABEL_18:
    sub_7D084(__p, a3);
    sub_300FFC(a1, __p, 1, (uint64_t)v8, 0LL);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)__p);
    }
    sub_2FF254(a1, a3, 0, (uint64_t)v8, 0LL);
    return;
  }

  int v11 = (os_log_t *)sub_138E8(20);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::__fs::filesystem::path __p = 136315650;
    *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 2510;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d GetExternalSpeakerDSPChain: Ignoring invalid SpeakerDSPChainType: %d",  __p,  0x18u);
  }

void sub_30B9B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_30BA14(char **a1, uint64_t a2, const char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0LL, "Generic", 0x600u);
  __p.__r_.__value_.__s.__data_[8] = 1;
  sub_300D48(&v24, (CFStringRef *)&__p);
  size_t v13 = strlen(a3);
  uint64_t v14 = std::string::append(&v24, a3, v13);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(void *)&v29[16] = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)BOOL v29 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v16 = std::string::append((std::string *)v29, ".dspg", 5uLL);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  if ((v29[23] & 0x80000000) != 0) {
    operator delete(*(void **)v29);
  }
  sub_19DFC((uint64_t)&__p);
  uint64_t v18 = sub_138E8(20);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
  {
    __int16 v19 = *(os_log_s **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        int v20 = &v28;
        if ((v28.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v20 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)BOOL v29 = 136315650;
        *(void *)&v29[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 2532;
        *(_WORD *)&v29[18] = 2080;
        *(void *)&v29[20] = v20;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d DSP graph path for external speaker chain: %s",  v29,  0x1Cu);
      }
    }
  }

  sub_7D084(v26, a4);
  sub_7D084(&v23, a4);
  std::string v24 = v23;
  memset(&v23, 0, sizeof(v23));
  char v25 = 1;
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v22 = 0;
  uint64_t v30 = 0LL;
  memset(v29, 0, sizeof(v29));
  uint64_t v32 = 2LL;
  __int128 v31 = *(_OWORD *)&qword_402EFC;
  sub_83660((uint64_t)v29, (int *)&v31, 3LL);
  sub_302438(a1, (char *)v26, &v28, &v24, &__p, a5, a6, a7, 0.0, 0LL, 0, (uint64_t)v29);
  sub_83284((uint64_t)v29);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
}

void sub_30BCE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (a31 && a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

std::string *sub_30BDB8(std::string *this, std::string **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v3 = *a2;
  uint64_t v4 = (std::string *)((char *)v3 - 1);
  do
  {
    int v5 = v4->__r_.__value_.__s.__data_[1];
    uint64_t v4 = (std::string *)((char *)v4 + 1);
  }

  while (v5);
  sub_83B5C(this, v3, v4);
  return this;
}

void sub_30BDF8(_Unwind_Exception *exception_object)
{
}

void sub_30BE14(uint64_t a1, uint64_t a2)
{
  int v12 = 1936749683;
  *(void *)std::string bytes = a2;
  sub_307810((uint64_t)&v13, &v12);
  CFDataRef v3 = CFDataCreate(0LL, bytes, 8LL);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_14591C(&cf, v3);
  sub_1459C8((uint64_t)v15, "data", &cf);
  v10[0] = &v13;
  v10[1] = 2LL;
  CFDictionaryRef v4 = sub_5A950((uint64_t)v10);
  uint64_t v5 = 0LL;
  void v10[2] = v4;
  do
  {
    uint64_t v6 = *(const void **)&v15[v5 + 8];
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = *(const void **)&v15[v5];
    if (v7) {
      CFRelease(v7);
    }
    v5 -= 16LL;
  }

  while (v5 != -32);
  if (cf) {
    CFRelease(cf);
  }
  sub_2DC034((uint64_t)v10, v4);
  int v13 = 1735553138;
  sub_2DC450((uint64_t)&v14, (uint64_t)v10);
  sub_149710(a1, &v13, 1LL);
  sub_2DBF5C((uint64_t)&v14);
  sub_2DBF5C((uint64_t)v10);
  CFRelease(v4);
}

void sub_30BFA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_30C058( char **a1, int a2, uint64_t a3, uint64_t a4, CFStringRef *a5, os_log_s *a6, unsigned int a7, const char *a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, unsigned int a13, unsigned int a14, char a15)
{
  if (a2 == 36)
  {
    unsigned __int8 v21 = atomic_load((unsigned __int8 *)&qword_49D7A0);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_49D7A0))
    {
      sub_303B1C(&qword_49D790, &xmmword_49D580, (__n128 *)&dword_49D530, 1987013749, 1986359655);
      __cxa_guard_release(&qword_49D7A0);
    }

    unsigned __int8 v22 = atomic_load((unsigned __int8 *)&qword_49D7B8);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_49D7B8))
    {
      __int16 v63 = (char *)operator new(0x78uLL);
      *((void *)v63 + 1) = 0LL;
      *((void *)v63 + 2) = 0LL;
      *(void *)__int16 v63 = off_47E370;
      *((void *)v63 + 3) = off_47E680;
      *((void *)v63 + 4) = 0x6C766F6C64737067LL;
      *((_DWORD *)v63 + 10) = 0;
      *(void *)(v63 + 60) = 0x100000001LL;
      *(_OWORD *)(v63 + 44) = xmmword_402D48;
      *((_DWORD *)v63 + 18) = dword_49D530;
      sub_142EF4((uint64_t)(v63 + 80), qword_49D538);
      *(_OWORD *)(v63 + 104) = xmmword_49D550;
      qword_49D7A8 = (uint64_t)(v63 + 24);
      qword_49D7B0 = (uint64_t)v63;
      __cxa_guard_release(&qword_49D7B8);
    }

    unsigned __int8 v23 = atomic_load((unsigned __int8 *)qword_49D7D0);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(qword_49D7D0))
    {
      unint64_t v64 = operator new(0x28uLL);
      v64[1] = 0LL;
      v64[2] = 0LL;
      void *v64 = off_47E3A8;
      v64[3] = off_47E3E0;
      *((_DWORD *)v64 + 8) = 1953918828;
      qword_49D7C0 = (uint64_t)(v64 + 3);
      qword_49D7C8 = (uint64_t)v64;
      __cxa_guard_release(qword_49D7D0);
    }

    if (a7 >= 5) {
      int v24 = 1668051824;
    }
    else {
      int v24 = dword_402B78[a7];
    }
    sub_300D48(&v76, a5);
    sub_14A9A0((uint64_t)v72, (const void **)&v76.__r_.__value_.__l.__data_, (const void **)a3);
    uint64_t v26 = std::string::append((std::string *)v72, ".dspg", 5uLL);
    __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0LL;
    v26->__r_.__value_.__l.__cap_ = 0LL;
    v26->__r_.__value_.__r.__words[0] = 0LL;
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    else {
      size_t v28 = *(void *)(a3 + 8);
    }
    BOOL v29 = &v74;
    sub_D0924((uint64_t)&v74, v28 + 10);
    if ((v74.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      BOOL v29 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    if (v28)
    {
      else {
        uint64_t v30 = *(const void **)a3;
      }
      memmove(v29, v30, v28);
    }

    strcpy((char *)v29 + v28, ".propstrip");
    memset(v72, 0, sizeof(v72));
    int v73 = 1065353216;
    __int128 v31 = operator new(8uLL);
    *__int128 v31 = a9 | ((unint64_t)a10 << 32);
    unint64_t v70 = v31 + 1;
    unsigned __int8 v71 = v31 + 1;
    uint64_t v69 = v31;
    if (v24 != 1668049011)
    {
      if (v24 != 1668051824) {
        goto LABEL_40;
      }
      uint64_t v32 = operator new(0x10uLL);
      uint64_t v33 = v32 + 2;
      *uint64_t v32 = *v31;
      v32[1] = a11;
      uint64_t v69 = v32;
      unsigned __int8 v71 = v32 + 2;
      operator delete(v31);
      unint64_t v70 = v33;
    }

    sub_380024((uint64_t *)&__dst);
    unsigned __int8 v34 = (const void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      std::__fs::filesystem::path v35 = (os_log_t *)sub_138E8(20);
      unint64_t v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_INFO))
      {
        CFDataRef v37 = CFCopyDescription(v34);
        sub_48188((uint64_t)&__p, v37);
        if (v37) {
          CFRelease(v37);
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 2708;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = p_p;
        _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "%25s:%-5d FDR Speaker Thiele-Small data: %s", buf, 0x1Cu);
      }

      __dst.__r_.__value_.__r.__words[0] = 0LL;
      sub_30BE14((uint64_t)buf, (uint64_t)v34);
      sub_3078E0((uint64_t)v72, (uint64_t)buf);
      sub_D0C4C(*(void **)&buf[16]);
      uint64_t v39 = *(void **)buf;
      *(void *)AudioBufferList buf = 0LL;
      if (v39) {
        operator delete(v39);
      }
    }

void sub_30C888( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, void *__p, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
}

void sub_30CADC()
{
}

void sub_30CAE4()
{
}

void sub_30CAEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    JUMPOUT(0x30CAC0LL);
  }
  JUMPOUT(0x30CAC4LL);
}

void sub_30CB00()
{
}

void sub_30CB08()
{
}

void sub_30CB10( char **a1, int a2, uint64_t a3, char *a4, CFStringRef *a5, std::string::size_type a6, int a7, uint64_t a8, double a9, double a10, float a11, char a12, uint64_t a13, void *a14, uint64_t a15)
{
  v87[0] = a9;
  v87[1] = a10;
  int v86 = a7;
  if (!a4)
  {
    unint64_t v60 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 2793;
      _os_log_impl(&dword_0, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __int128 v83 = 0u;
  __int128 v84 = 0u;
  int v85 = 1065353216;
  v81[0] = (uint64_t)v81;
  v81[1] = (uint64_t)v81;
  uint64_t v82 = 0LL;
  v80[0] = a8;
  v80[1] = a5;
  v80[2] = &v86;
  v80[3] = &v83;
  switch(a2)
  {
    case 14:
      sub_30DB60((uint64_t)v80);
      if ((a12 & 1) == 0)
      {
        sub_30E1A4((CFStringRef *)buf);
        LODWORD(v79.__r_.__value_.__l.__data_) = 21;
        sub_30E1F4((uint64_t)&buf[16], (int *)&v79);
        CFDataRef v26 = CFDataCreate(0LL, byte_402B6C, 4LL);
        if (!v26)
        {
          char v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v68, "Could not construct");
        }

        sub_14591C(&cf, v26);
        sub_1459C8((uint64_t)&v89, "data", (const void **)&cf.__r_.__value_.__l.__data_);
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v91.__r_.__value_.__l.__size_ = 3LL;
        uint64_t v27 = 0LL;
        CFDictionaryRef v70 = sub_5A950((uint64_t)&v91);
        *(void *)&__int128 v93 = v70;
        do
        {
          size_t v28 = *(const void **)&v90[v27];
          if (v28) {
            CFRelease(v28);
          }
          BOOL v29 = *(const void **)&buf[v27 + 32];
          if (v29) {
            CFRelease(v29);
          }
          v27 -= 16LL;
        }

        while (v27 != -48);
        if (cf.__r_.__value_.__r.__words[0]) {
          CFRelease(cf.__r_.__value_.__l.__data_);
        }
        sub_2DC034((uint64_t)&cf, v70);
        LODWORD(v91.__r_.__value_.__l.__data_) = 1652060274;
        sub_2DC450((uint64_t)&v91.__r_.__value_.__l.__size_, (uint64_t)&cf);
        sub_149710((uint64_t)buf, (int *)&v91, 1LL);
        sub_3078E0((uint64_t)&v83, (uint64_t)buf);
        sub_D0C4C(*(void **)&buf[16]);
        uint64_t v30 = *(void **)buf;
        *(void *)AudioBufferList buf = 0LL;
        if (v30) {
          operator delete(v30);
        }
        sub_2DBF5C((uint64_t)&v91.__r_.__value_.__l.__size_);
        sub_2DBF5C((uint64_t)&cf);
        CFRelease(v70);
      }

      __int128 v31 = (float *)operator new(4uLL);
      *__int128 v31 = a11;
      v91.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 1);
      v91.__r_.__value_.__l.__cap_ = (std::string::size_type)(v31 + 1);
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      sub_30E2CC((uint64_t)buf, (uint64_t)&v91);
      sub_3078E0((uint64_t)&v83, (uint64_t)buf);
      sub_D0C4C(*(void **)&buf[16]);
      uint64_t v32 = *(void **)buf;
      *(void *)AudioBufferList buf = 0LL;
      if (v32) {
        operator delete(v32);
      }
      unsigned __int8 v22 = v31;
      goto LABEL_34;
    case 15:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 42:
      goto LABEL_65;
    case 16:
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_47DAD0;
      v91.__r_.__value_.__l.__size_ = a6;
      v91.__r_.__value_.__l.__cap_ = (std::string::size_type)"internal_mic_dc_removal_hpf";
      unsigned __int8 v92 = &v91;
      sub_3074D8(buf, "internal_mic_dc_removal_hpf", "AUNBandEQ", (uint64_t)&v91);
      unsigned __int8 v23 = v92;
      if (v92 == &v91)
      {
        uint64_t v24 = 4LL;
        unsigned __int8 v23 = &v91;
      }

      else
      {
        if (!v92) {
          goto LABEL_60;
        }
        uint64_t v24 = 5LL;
      }

      (*(void (**)(void))(v23->__r_.__value_.__r.__words[0] + 8 * v24))();
LABEL_60:
      if (v90[0])
      {
        sub_2FDDB8((uint64_t)&v83, (uint64_t)buf);
        if (v90[0])
        {
          sub_D0C4C(*(void **)&buf[16]);
          uint64_t v44 = *(void **)buf;
          *(void *)AudioBufferList buf = 0LL;
          if (v44) {
            operator delete(v44);
          }
        }
      }

void sub_30D7D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  do
  {
    v59 -= 16LL;
    sub_7BFE0(v59);
  }

  while (v59 != v60 - 224);
  sub_149990(&a55);
  sub_D0C14((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_30DB60(uint64_t a1)
{
  BOOL v2 = sub_105BDC(*(uint64_t **)(*(void *)a1 + 8LL), 1718186598);
  if (*((char *)v2 + 23) < 0)
  {
    sub_24054(__dst, (void *)*v2, v2[1]);
  }

  else
  {
    __int128 v3 = *(_OWORD *)v2;
    uint64_t v34 = v2[2];
    *(_OWORD *)std::string __dst = v3;
  }

  CFDictionaryRef v4 = (void *)HIBYTE(v34);
  if (v34 < 0) {
    CFDictionaryRef v4 = __dst[1];
  }
  if (!v4)
  {
    int v20 = (os_log_t *)sub_138E8(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      unint64_t v36 = "RoutingSettings_Aspen.cpp";
      __int16 v37 = 1024;
      v38[0] = 2800;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_3001CC(&v32, *(CFStringRef **)(a1 + 8), (uint64_t)__dst);
  valuePtr[0] = 4504;
  sub_30ED90((uint64_t)buf, valuePtr);
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v5 = &v32;
  }
  else {
    uint64_t v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex size = v32.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex size = v32.__r_.__value_.__l.__size_;
    }
    cf[0] = CFStringCreateWithBytes(0LL, (const UInt8 *)v5, size, 0x8000100u, 0);
    if (!cf[0])
    {
      uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v7, "Could not construct");
    }
  }

  else
  {
    cf[0] = 0LL;
  }

  sub_59330((uint64_t)v38 + 2, "cfobject", cf);
  std::string __p = buf;
  uint64_t v27 = 2LL;
  CFDictionaryRef v8 = sub_5A950((uint64_t)&__p);
  unint64_t v9 = 0LL;
  CFDictionaryRef v31 = v8;
  do
  {
    int v10 = (const void *)v39[v9 / 2];
    if (v10) {
      CFRelease(v10);
    }
    int v11 = *(const void **)((char *)&v38[v9] + 2);
    if (v11) {
      CFRelease(v11);
    }
    v9 -= 4LL;
  }

  while (v9 != 0x3FFFFFFFFFFFFFF8LL);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  int v29 = 4505;
  sub_30ED90((uint64_t)buf, &v29);
  valuePtr[0] = **(_DWORD **)(a1 + 16);
  cf[0] = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
  if (!cf[0])
  {
    unsigned __int8 v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
  }

  sub_59370((CFStringRef *)((char *)v38 + 2), "cfobject");
  CFTypeRef v12 = cf[0];
  if (cf[0]) {
    CFRetain(cf[0]);
  }
  v39[0] = v12;
  std::string __p = buf;
  uint64_t v27 = 2LL;
  CFDictionaryRef v13 = sub_5A950((uint64_t)&__p);
  unint64_t v14 = 0LL;
  CFDictionaryRef v30 = v13;
  do
  {
    __int128 v15 = (const void *)v39[v14 / 2];
    if (v15) {
      CFRelease(v15);
    }
    __int16 v16 = *(const void **)((char *)&v38[v14] + 2);
    if (v16) {
      CFRelease(v16);
    }
    v14 -= 4LL;
  }

  while (v14 != 0x3FFFFFFFFFFFFFF8LL);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  uint64_t v17 = *(void *)(a1 + 24);
  sub_2DC034((uint64_t)cf, v8);
  *(_DWORD *)AudioBufferList buf = 1652060274;
  sub_2DC450((uint64_t)&v36 + 4, (uint64_t)cf);
  sub_2DC034((uint64_t)valuePtr, v13);
  LODWORD(v39[0]) = 1652060274;
  sub_2DC450((uint64_t)&v40, (uint64_t)valuePtr);
  sub_149710((uint64_t)&__p, (int *)buf, 2LL);
  sub_3078E0(v17, (uint64_t)&__p);
  sub_D0C4C(v28);
  uint64_t v18 = __p;
  std::string __p = 0LL;
  if (v18) {
    operator delete(v18);
  }
  for (uint64_t i = 32LL; i != -16; i -= 24LL)
    sub_2DBF5C((uint64_t)&buf[i]);
  sub_2DBF5C((uint64_t)valuePtr);
  sub_2DBF5C((uint64_t)cf);
  if (v13) {
    CFRelease(v13);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_30DFA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef *sub_30E1A4(CFStringRef *a1)
{
  BOOL v2 = sub_59370(a1, "AUName");
  sub_59370(v2 + 1, "AUVariableEQV2");
  return a1;
}

void sub_30E1E0(_Unwind_Exception *a1)
{
}

uint64_t sub_30E1F4(uint64_t a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_30E288(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_30E2CC(uint64_t a1, uint64_t a2)
{
  int v15 = 1735287906;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    unint64_t v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v17 = "RoutingSettings_Aspen.cpp";
      __int16 v18 = 1024;
      v19[0] = 111;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_307810((uint64_t)buf, &v15);
  CFDataRef v4 = CFDataCreate(0LL, *(const UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  if (!v4)
  {
    CFTypeRef v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }

  sub_14591C(&cf, v4);
  sub_1459C8((uint64_t)v19 + 2, "data", &cf);
  v14[0] = buf;
  v14[1] = 2LL;
  CFDictionaryRef v5 = sub_5A950((uint64_t)v14);
  uint64_t v6 = 0LL;
  void v14[2] = v5;
  do
  {
    uint64_t v7 = *(const void **)((char *)&v19[v6 + 2] + 2);
    if (v7) {
      CFRelease(v7);
    }
    CFDictionaryRef v8 = *(const void **)((char *)&v19[v6] + 2);
    if (v8) {
      CFRelease(v8);
    }
    v6 -= 4LL;
  }

  while (v6 != -8);
  if (cf) {
    CFRelease(cf);
  }
  sub_2DC034((uint64_t)v14, v5);
  *(_DWORD *)AudioBufferList buf = 1735553138;
  sub_2DC450((uint64_t)&v17 + 4, (uint64_t)v14);
  sub_149710(a1, (int *)buf, 1LL);
  sub_2DBF5C((uint64_t)&v17 + 4);
  sub_2DBF5C((uint64_t)v14);
  CFRelease(v5);
}

void sub_30E508( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
}

void sub_30E5D0(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  CFDataRef v4 = *(_DWORD **)a2;
  CFDictionaryRef v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5 || a3 != a4)
  {
    CFDictionaryRef v8 = a3;
    if (a3 == a4)
    {
      int v10 = 0LL;
      int v11 = 0LL;
      unint64_t v12 = 0LL;
    }

    else
    {
      int v10 = 0LL;
      int v11 = 0LL;
      unint64_t v12 = 0LL;
      do
      {
        int v13 = *v8 - 1;
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v14 = v11 - v10;
          unint64_t v15 = v14 + 1;
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)sub_7A890(v16);
          }
          else {
            uint64_t v17 = 0LL;
          }
          __int16 v18 = (int *)(v16 + 4 * v14);
          *__int16 v18 = v13;
          __int16 v19 = v18 + 1;
          while (v11 != v10)
          {
            int v20 = *--v11;
            *--__int16 v18 = v20;
          }

          unint64_t v12 = v16 + 4 * v17;
          if (v10) {
            operator delete(v10);
          }
          int v10 = v18;
          int v11 = v19;
        }

        else
        {
          *v11++ = v13;
        }

        ++v8;
      }

      while (v8 != a4);
      CFDataRef v4 = *(_DWORD **)a2;
      CFDictionaryRef v5 = *(_DWORD **)(a2 + 8);
    }

    if (v4 == v5)
    {
      unsigned __int8 v22 = (unsigned int *)v11;
    }

    else
    {
      do
      {
        int v21 = *v4 - 1;
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v23 = v11 - v10;
          unint64_t v24 = v23 + 1;
          else {
            unint64_t v25 = v24;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)sub_7A890(v25);
          }
          else {
            uint64_t v26 = 0LL;
          }
          uint64_t v27 = (unsigned int *)(v25 + 4 * v23);
          unsigned int *v27 = v21;
          unsigned __int8 v22 = v27 + 1;
          while (v11 != v10)
          {
            unsigned int v28 = *--v11;
            *--uint64_t v27 = v28;
          }

          unint64_t v12 = v25 + 4 * v26;
          if (v10) {
            operator delete(v10);
          }
          int v10 = (int *)v27;
        }

        else
        {
          int *v11 = v21;
          unsigned __int8 v22 = (unsigned int *)(v11 + 1);
        }

        ++v4;
        int v11 = (int *)v22;
      }

      while (v4 != v5);
    }

    int v29 = (os_log_t *)sub_138E8(20);
    CFDictionaryRef v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
    {
      sub_91FF0(&__p, (unsigned int *)v10, v22);
      CFDictionaryRef v31 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      __int16 v48 = 1024;
      v49[0] = 2785;
      LOWORD(v49[1]) = 2080;
      *(void *)((char *)&v49[1] + 2) = v31;
      _os_log_impl(&dword_0, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding channel selector map %s", buf, 0x1Cu);
    }

    int v46 = 1667789676;
    CFIndex v32 = (char *)v22 - (char *)v10;
    if (!v32)
    {
      CFDataRef v39 = (os_log_t *)sub_138E8(13);
      uint64_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 111;
        _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&__p,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    sub_307810((uint64_t)&__p, &v46);
    CFDataRef v33 = CFDataCreate(0LL, (const UInt8 *)v10, v32);
    if (!v33)
    {
      unint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v42, "Could not construct");
    }

    sub_14591C(&cf, v33);
    sub_1459C8((uint64_t)&__p.__r_.__value_.__l.__cap_, "data", &cf);
    v45[0] = &__p;
    v45[1] = 2LL;
    CFDictionaryRef v34 = sub_5A950((uint64_t)v45);
    uint64_t v35 = 0LL;
    void v45[2] = v34;
    do
    {
      unint64_t v36 = *(const void **)((char *)&__p + v35 + 24);
      if (v36) {
        CFRelease(v36);
      }
      __int16 v37 = *(const void **)((char *)&__p.__r_.__value_.__l.__cap_ + v35);
      if (v37) {
        CFRelease(v37);
      }
      v35 -= 16LL;
    }

    while (v35 != -32);
    if (cf) {
      CFRelease(cf);
    }
    sub_2DC034((uint64_t)v45, v34);
    LODWORD(__p.__r_.__value_.__l.__data_) = 1735553138;
    sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)v45);
    sub_149710((uint64_t)buf, (int *)&__p, 1LL);
    sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)v45);
    CFRelease(v34);
    sub_3078E0(a1, (uint64_t)buf);
    sub_D0C4C(*(void **)((char *)v49 + 2));
    uint64_t v38 = *(void **)buf;
    *(void *)AudioBufferList buf = 0LL;
    if (v38) {
      operator delete(v38);
    }
    if (v10) {
      operator delete(v10);
    }
  }

void sub_30EA98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void sub_30EB94(void *a1, double *a2)
{
  double v4 = *a2;
  double v5 = a2[1];
  if (v5 >= 0.0 && (v5 > 0.0 || v5 < 0.0 || v4 >= 0.0) && (v5 <= 0.0 || v4 >= 0.0) && v5 == 0.0 && v4 == 0.0)
  {
    int v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "RoutingSettings_Aspen.cpp";
      __int16 v15 = 1024;
      *(_DWORD *)unint64_t v16 = 2758;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_157A88((uint64_t)&v13, 0, v4, v5);
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_49D990);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_49D990))
  {
    sub_303B1C(&qword_49D980, a2, (__n128 *)&v13, 1987013749, 1986359655);
    __cxa_guard_release(&qword_49D990);
  }

  uint64_t v7 = *(void *)algn_49D988;
  *a1 = qword_49D980;
  a1[1] = v7;
  if (v7)
  {
    CFDictionaryRef v8 = (unint64_t *)(v7 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  sub_32C8C(*(void **)&v16[2]);
}

void sub_30ED58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_30ED90(uint64_t a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_30EE24(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_30EE70(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x18uLL);
  *(void *)BOOL v2 = &off_47DAD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_30EEA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_47DAD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

os_log_s *sub_30EEC8(uint64_t a1)
{
  return sub_2FD5F4(*(os_log_s **)(a1 + 8), *(const char **)(a1 + 16));
}

void sub_30EED4( char **a1, unsigned int a2, char *a3, uint64_t *a4, os_log_s *a5, unsigned int a6, uint64_t a7, int a8, double a9, double a10, int **a11, unsigned int a12)
{
  unsigned __int8 v22 = sub_2FD190(a5, a3, a4);
  if (a2 <= 0x2A)
  {
    if (((1LL << a2) & 0x70402802008LL) != 0)
    {
      sub_2FE5A8(a1, a11, a12);
    }

    else if (a2 == 35LL)
    {
      sub_2FF324(a1, a3, (uint64_t)v22, 0LL);
      unint64_t v24 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v24, (CFStringRef *)a4);
    }
  }

  if (a8) {
    sub_310378(a1, a3, (uint64_t)v22, a9, a10);
  }
  switch(a2)
  {
    case 0u:
      goto LABEL_26;
    case 2u:
    case 3u:
      sub_300AA4(a1, v22);
      sub_2FF254(a1, a3, 1, (uint64_t)v22, 0LL);
      unint64_t v25 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v25, (CFStringRef *)a4);
      return;
    case 4u:
      sub_300AA4(a1, v22);
      sub_2FF254(a1, a3, 1, (uint64_t)v22, 0LL);
      CFDictionaryRef v31 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v31, (CFStringRef *)a4);
      CFIndex v32 = sub_105BDC(*(uint64_t **)(a7 + 8), 1936027251);
      else {
        CFDataRef v33 = (const char *)*v32;
      }
      goto LABEL_24;
    case 8u:
      sub_300AA4(a1, v22);
LABEL_26:
      uint64_t v35 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v35, (CFStringRef *)a4);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D647032u, 0, (uint64_t)__p);
      return;
    case 9u:
      unint64_t v36 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v36, (CFStringRef *)a4);
      return;
    case 0xAu:
      __int16 v37 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v37, (CFStringRef *)a4);
      uint64_t v38 = sub_105BDC(*(uint64_t **)(a7 + 8), 1936027251);
      else {
        CFDataRef v33 = (const char *)*v38;
      }
LABEL_24:
      sub_2FE910(a1, a3, v33, v22, a4, 0LL);
      CFDictionaryRef v34 = (std::string *)sub_105BDC(*(uint64_t **)(a7 + 8), 1868787315);
      sub_3004B0(a1, a3, v22, v34, a4);
      return;
    case 0xBu:
    case 0xFu:
      goto LABEL_32;
    case 0xCu:
    case 0xDu:
      sub_2FF324(a1, a3, (uint64_t)v22, 0LL);
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
      uint64_t v26 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v26, (CFStringRef *)a4);
      return;
    case 0xEu:
      sub_2FF3F8(a1, 1u, 0.0);
      goto LABEL_32;
    case 0x10u:
      sub_2FF324(a1, a3, (uint64_t)v22, 0LL);
LABEL_32:
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
      CFDataRef v39 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v39, (CFStringRef *)a4);
      return;
    case 0x11u:
    case 0x1Eu:
      uint64_t v40 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v40, (CFStringRef *)a4);
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
      float v41 = (std::string *)sub_105BDC(*(uint64_t **)(a7 + 8), 1868787315);
      sub_3004B0(a1, a3, v22, v41, a4);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D647032u, 1, (uint64_t)__p);
      sub_2FF254(a1, a3, 1, (uint64_t)v22, 0LL);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x12u:
      unint64_t v42 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v42, (CFStringRef *)a4);
      unint64_t v43 = sub_105BDC(*(uint64_t **)(a7 + 8), 1936027251);
      else {
        uint64_t v44 = (const char *)*v43;
      }
      goto LABEL_38;
    case 0x14u:
      goto LABEL_44;
    case 0x15u:
      int v46 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v46, (CFStringRef *)a4);
      std::string::size_type v47 = sub_105BDC(*(uint64_t **)(a7 + 8), 1936027251);
      else {
        __int16 v48 = (const char *)*v47;
      }
      sub_2FE910(a1, a3, v48, v22, a4, 0LL);
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
      __int128 v49 = (std::string *)sub_105BDC(*(uint64_t **)(a7 + 8), 1868787315);
      sub_3004B0(a1, a3, v22, v49, a4);
      goto LABEL_45;
    case 0x16u:
      sub_2FF324(a1, a3, (uint64_t)v22, 0LL);
LABEL_44:
      unint64_t v50 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v50, (CFStringRef *)a4);
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
LABEL_45:
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      goto LABEL_50;
    case 0x18u:
    case 0x19u:
      uint64_t v27 = *(uint64_t **)(a7 + 8);
      if (!v27) {
        goto LABEL_64;
      }
      unsigned int v28 = *(uint64_t **)(a7 + 8);
      break;
    case 0x1Au:
      __int128 v51 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v51, (CFStringRef *)a4);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D647032u, 1, (uint64_t)__p);
      goto LABEL_49;
    case 0x1Bu:
      sub_2FF324(a1, a3, (uint64_t)v22, 0LL);
      uint64_t v52 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v52, (CFStringRef *)a4);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D647032u, 1, (uint64_t)__p);
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x1Cu:
      unsigned __int8 v53 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v53, (CFStringRef *)a4);
      unsigned __int8 v54 = (std::string *)sub_105BDC(*(uint64_t **)(a7 + 8), 1868787315);
      sub_3004B0(a1, a3, v22, v54, a4);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D647032u, 1, (uint64_t)__p);
LABEL_49:
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
LABEL_50:
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x7366636Cu);
      return;
    case 0x1Du:
      sub_2FF324(a1, a3, (uint64_t)v22, 0LL);
      unint64_t v55 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v55, (CFStringRef *)a4);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x746D7374u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x1Fu:
      unsigned __int8 v56 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v56, (CFStringRef *)a4);
      unint64_t v57 = sub_105BDC(*(uint64_t **)(a7 + 8), 1936027251);
      else {
        uint64_t v44 = (const char *)*v57;
      }
LABEL_38:
      sub_2FE910(a1, a3, v44, v22, a4, 0LL);
      sub_2FF254(a1, a3, 0, (uint64_t)v22, 0LL);
      int v45 = (std::string *)sub_105BDC(*(uint64_t **)(a7 + 8), 1868787315);
      sub_3004B0(a1, a3, v22, v45, a4);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D647032u, 1, (uint64_t)__p);
      sub_2FF254(a1, a3, 1, (uint64_t)v22, 0LL);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x20u:
      goto LABEL_20;
    case 0x21u:
    case 0x22u:
      sub_2FF324(a1, a3, (uint64_t)v22, 0LL);
LABEL_20:
      CFDictionaryRef v30 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v30, (CFStringRef *)a4);
      sub_300AA4(a1, v22);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D647032u, 1, (uint64_t)__p);
      sub_2FF254(a1, a3, 1, (uint64_t)v22, 0LL);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x23u:
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x746D7374u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x24u:
    case 0x27u:
    case 0x28u:
      uint64_t v23 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v23, (CFStringRef *)a4);
      sub_300AA4(a1, v22);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_2FF254(a1, a3, 1, (uint64_t)v22, 0LL);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x25u:
      unint64_t v58 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v58, (CFStringRef *)a4);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x746D7374u);
      sub_2FF19C(a1, a3, (uint64_t)v22);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x26u:
      uint64_t v59 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v59, (CFStringRef *)a4);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x746D7374u);
      sub_2FF19C(a1, a3, (uint64_t)v22);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x29u:
      uint64_t v60 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v60, (CFStringRef *)a4);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x746D7374u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    case 0x2Au:
      unsigned __int8 v61 = sub_105BDC(*(uint64_t **)(a7 + 8), 1718186598);
      sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v61, (CFStringRef *)a4);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x61676332u);
      sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v22, 0x746D7374u);
      sub_2FF19C(a1, a3, (uint64_t)v22);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8(a1, a3, 0, (uint64_t)v22, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
      goto LABEL_67;
    default:
      unint64_t v62 = (os_log_t *)sub_138E8(20);
      __int16 v63 = *v62;
      if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
        __int16 v66 = 1024;
        int v67 = 3232;
        __int16 v68 = 1024;
        unsigned int v69 = a2;
        _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d GetMicrophoneDSPChain: Ignoring invalid MicrophoneDSPChainType: %d",  __p,  0x18u);
      }

      return;
  }

  while (1)
  {
    int v29 = *((_DWORD *)v28 + 8);
    if (v29 <= 1718186598) {
      break;
    }
LABEL_17:
    unsigned int v28 = (uint64_t *)*v28;
    if (!v28) {
      goto LABEL_64;
    }
  }

  if (v29 != 1718186598)
  {
    ++v28;
    goto LABEL_17;
  }

  unint64_t v64 = sub_105BDC(v27, 1718186598);
  sub_2FFDF8(a1, a3, (uint64_t)v22, a6, (uint64_t)v64, (CFStringRef *)a4);
LABEL_64:
  sub_300AA4(a1, v22);
  sub_7D084(__p, a3);
  sub_300FFC(a1, __p, 0, (uint64_t)v22, 0LL);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  sub_2FF254(a1, a3, 1, (uint64_t)v22, 0LL);
  sub_7D084(__p, a3);
  sub_300FFC(a1, __p, 1, (uint64_t)v22, 0LL);
LABEL_67:
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_3101F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_310378(char **a1, const char *a2, uint64_t a3, double a4, double a5)
{
  *(double *)&__int128 v17 = a4;
  *((double *)&v17 + 1) = a5;
  sub_157A88((uint64_t)v15, 0, a4, a5);
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_49D9A8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_49D9A8))
  {
    sub_3104C4(&v17, (uint64_t)v15);
    __cxa_guard_release(&qword_49D9A8);
  }

  sub_2FE0C4(a1, a2, 0, 0, a3, 0x76727132u);
  uint64_t v9 = qword_49D998;
  int v10 = (std::__shared_weak_count *)qword_49D9A0;
  if (qword_49D9A0)
  {
    int v11 = (unint64_t *)(qword_49D9A0 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  sub_143208(a1, v9, (uint64_t)v10);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  sub_32C8C(v16);
}

void sub_31048C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

double sub_3104C4(_OWORD *a1, uint64_t a2)
{
  CFNumberRef v4 = (char *)operator new(0x98uLL);
  *((void *)v4 + 1) = 0LL;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = &off_47DB90;
  *(void *)CFNumberRef v4 = off_47DB18;
  *((void *)v4 + 4) = -2307755726LL;
  *((_DWORD *)v4 + 10) = 0;
  *(void *)(v4 + 60) = 0x100000001LL;
  *(_OWORD *)(v4 + 44) = xmmword_402D48;
  *(_OWORD *)(v4 + 72) = *a1;
  *((_DWORD *)v4 + 22) = *(_DWORD *)a2;
  sub_142EF4((uint64_t)(v4 + 96), (void *)(a2 + 8));
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 32);
  v4[136] = 1;
  *(void *)&double result = 0x500000007LL;
  *((void *)v4 + 18) = 0x500000007LL;
  *((void *)v4 + 3) = off_47DB50;
  qword_49D998 = (uint64_t)(v4 + 24);
  qword_49D9A0 = (uint64_t)v4;
  return result;
}

void sub_310594(_Unwind_Exception *a1)
{
}

void sub_3105AC( char **a1, unsigned int a2, const std::string::value_type *a3, char *a4, CFStringRef *a5, uint64_t a6, unsigned int a7, const char *a8, double a9, double a10, float a11, char a12, int a13, unsigned int a14, _DWORD **a15)
{
  v76[0] = a9;
  v76[1] = a10;
  unsigned __int8 v22 = (os_log_t *)sub_138E8(20);
  uint64_t v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0) {
      unint64_t v24 = a3;
    }
    else {
      unint64_t v24 = *(const std::string::value_type **)a3;
    }
    CFStringRef v25 = *a5;
    uint64_t v26 = "None";
    if (a8) {
      uint64_t v26 = a8;
    }
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    uint64_t v27 = "false";
    *(_DWORD *)&_DWORD buf[14] = 3247;
    *(_DWORD *)AudioBufferList buf = 136316674;
    if (a12) {
      uint64_t v27 = "true";
    }
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v24;
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&_BYTE buf[30] = a4;
    *(_WORD *)&buf[38] = 2112;
    CFStringRef v81 = v25;
    __int16 v82 = 2080;
    __int128 v83 = v26;
    __int16 v84 = 2080;
    int v85 = v27;
    _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Mic graph: %s, strip: %s, shortname: %@, Beam2 Presetfile: %s SoftwareVolume: %s",  buf,  0x44u);
  }

  *(_OWORD *)int v73 = 0u;
  __int128 v74 = 0u;
  int v75 = 1065353216;
  if (a2 > 0x29 || ((1LL << a2) & 0x2F0009040A0LL) == 0) {
    goto LABEL_55;
  }
  __int128 __p = 0uLL;
  __int128 v78 = 0uLL;
  int v79 = 1065353216;
  LODWORD(v86.__r_.__value_.__l.__data_) = 9;
  HIDWORD(v86.__r_.__value_.__r.__words[1]) = 0;
  *(float *)&v86.__r_.__value_.__r.__words[1] = (float)a7;
  *(_DWORD *)AudioBufferList buf = 1651074168;
  sub_2DC450((uint64_t)&buf[8], (uint64_t)&v86);
  sub_148DB8((uint64_t)&__p, *(int *)buf, buf);
  sub_2DBF5C((uint64_t)&buf[8]);
  uint64_t v28 = sub_2DBF5C((uint64_t)&v86);
  sub_2DC194(v28, (uint64_t)&__p);
  *(_DWORD *)AudioBufferList buf = 1685086576;
  sub_2DC450((uint64_t)&buf[8], (uint64_t)&v86);
  sub_148DB8((uint64_t)v73, *(int *)buf, buf);
  sub_2DBF5C((uint64_t)&buf[8]);
  uint64_t v29 = sub_2DBF5C((uint64_t)&v86);
  LODWORD(v68[0]) = 1920365171;
  LODWORD(bytes.__r_.__value_.__l.__data_) = 1;
  sub_307810(v29, (int *)v68);
  CFDataRef v30 = CFDataCreate(0LL, (const UInt8 *)&bytes, 4LL);
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_14591C(cf, v30);
  sub_1459C8((uint64_t)&v86.__r_.__value_.__l.__cap_, "data", cf);
  *(void *)&__int128 v88 = &v86;
  *((void *)&v88 + 1) = 2LL;
  CFDictionaryRef v31 = sub_5A950((uint64_t)&v88);
  uint64_t v32 = 0LL;
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  do
  {
    CFDataRef v33 = *(const void **)((char *)&v86 + v32 + 24);
    if (v33) {
      CFRelease(v33);
    }
    CFDictionaryRef v34 = *(const void **)((char *)&v86.__r_.__value_.__l.__cap_ + v32);
    if (v34) {
      CFRelease(v34);
    }
    v32 -= 16LL;
  }

  while (v32 != -32);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  sub_2DC034((uint64_t)&v88, v31);
  LODWORD(v86.__r_.__value_.__l.__data_) = 1735553138;
  sub_2DC450((uint64_t)&v86.__r_.__value_.__l.__size_, (uint64_t)&v88);
  sub_149710((uint64_t)buf, (int *)&v86, 1LL);
  sub_2DBF5C((uint64_t)&v86.__r_.__value_.__l.__size_);
  sub_2DBF5C((uint64_t)&v88);
  CFRelease(v31);
  sub_3078E0((uint64_t)v73, (uint64_t)buf);
  sub_D0C4C(*(void **)&buf[16]);
  uint64_t v35 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v35) {
    operator delete(v35);
  }
  unint64_t v36 = (std::string *)operator new(0x20uLL);
  v36->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_47DBD0;
  v36->__r_.__value_.__l.__size_ = a6;
  v36->__r_.__value_.__l.__cap_ = (std::string::size_type)a8;
  v36[1].__r_.__value_.__r.__words[0] = (std::string::size_type)a5;
  char v87 = v36;
  sub_3074D8(buf, a8, "AUBeam2", (uint64_t)v36);
  __int16 v37 = v87;
  if (v87 == &v86)
  {
    uint64_t v38 = 4LL;
    __int16 v37 = &v86;
  }

  else
  {
    if (!v87) {
      goto LABEL_29;
    }
    uint64_t v38 = 5LL;
  }

  (*(void (**)(void))(v37->__r_.__value_.__r.__words[0] + 8 * v38))();
LABEL_29:
  if ((_BYTE)v81)
  {
    sub_2FDDB8((uint64_t)v73, (uint64_t)buf);
    if ((_BYTE)v81)
    {
      sub_D0C4C(*(void **)&buf[16]);
      CFDataRef v39 = *(void **)buf;
      *(void *)AudioBufferList buf = 0LL;
      if (v39) {
        operator delete(v39);
      }
    }
  }

  sub_D0C4C((void *)v78);
  uint64_t v40 = (void *)__p;
  *(void *)&__int128 __p = 0LL;
  if (v40) {
    operator delete(v40);
  }
  if (a2 != 7 && a2 != 14)
  {
    if (a2 != 41) {
      goto LABEL_55;
    }
    goto LABEL_42;
  }

  float v41 = (float *)operator new(8uLL);
  *((void *)&__p + 1) = v41 + 2;
  *(void *)&__int128 v78 = v41 + 2;
  float *v41 = a11;
  v41[1] = a11;
  *(void *)&__int128 __p = v41;
  sub_30E2CC((uint64_t)buf, (uint64_t)&__p);
  sub_3078E0((uint64_t)v73, (uint64_t)buf);
  sub_D0C4C(*(void **)&buf[16]);
  unint64_t v42 = *(void **)buf;
  *(void *)AudioBufferList buf = 0LL;
  if (v42) {
    operator delete(v42);
  }
  operator delete(v41);
  if (a2 == 14)
  {
LABEL_42:
    if ((a12 & 1) == 0)
    {
      sub_30E1A4((CFStringRef *)buf);
      LODWORD(v72.__r_.__value_.__l.__data_) = 21;
      sub_30E1F4((uint64_t)&buf[16], (int *)&v72);
      CFDataRef v43 = CFDataCreate(0LL, byte_402B74, 4LL);
      if (!v43)
      {
        unint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v64, "Could not construct");
      }

      sub_14591C(&v86, v43);
      sub_1459C8((uint64_t)&buf[32], "data", (const void **)&v86.__r_.__value_.__l.__data_);
      *(void *)&__int128 __p = buf;
      *((void *)&__p + 1) = 3LL;
      CFDictionaryRef v44 = sub_5A950((uint64_t)&__p);
      uint64_t v45 = 0LL;
      *(void *)&__int128 v88 = v44;
      do
      {
        int v46 = *(const void **)&buf[v45 + 40];
        if (v46) {
          CFRelease(v46);
        }
        std::string::size_type v47 = *(const void **)&buf[v45 + 32];
        if (v47) {
          CFRelease(v47);
        }
        v45 -= 16LL;
      }

      while (v45 != -48);
      if (v86.__r_.__value_.__r.__words[0]) {
        CFRelease(v86.__r_.__value_.__l.__data_);
      }
      sub_2DC034((uint64_t)&v86, v44);
      LODWORD(__p) = 1652060274;
      sub_2DC450((uint64_t)&__p + 8, (uint64_t)&v86);
      sub_149710((uint64_t)buf, (int *)&__p, 1LL);
      sub_2FDDB8((uint64_t)v73, (uint64_t)buf);
      sub_D0C4C(*(void **)&buf[16]);
      __int16 v48 = *(void **)buf;
      *(void *)AudioBufferList buf = 0LL;
      if (v48) {
        operator delete(v48);
      }
      sub_2DBF5C((uint64_t)&__p + 8);
      sub_2DBF5C((uint64_t)&v86);
      CFRelease(v44);
    }
  }

void sub_310EF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  do
  {
    v56 -= 16LL;
    sub_7BFE0(v56);
  }

  while (v56 != v57 - 256);
  sub_D0C14((uint64_t)&a41);
  _Unwind_Resume(a1);
}

__n128 sub_311228(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x20uLL);
  *(void *)BOOL v2 = &off_47DBD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_311268(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_47DBD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

os_log_s *sub_311290(uint64_t a1)
{
  return sub_2FD44C(*(os_log_s **)(a1 + 8), *(const char **)(a1 + 16), *(uint64_t **)(a1 + 24), 1u);
}

void sub_3112A4( uint64_t a1, int a2, char *a3, uint64_t *a4, os_log_s *a5, unsigned int a6, uint64_t a7, int a8, double a9, double a10, float a11, int **a12, unsigned int a13)
{
  unint64_t v24 = sub_2FD190(a5, a3, a4);
  uint64_t v74 = a7;
  CFStringRef v25 = sub_105BDC(*(uint64_t **)(a7 + 8), 1650814258);
  int v26 = 0;
  switch(a2)
  {
    case 5:
    case 11:
      goto LABEL_11;
    case 6:
      goto LABEL_15;
    case 7:
      sub_2FE5A8((char **)a1, a12, a13);
LABEL_15:
      sub_2FF3F8((char **)a1, 2u, a11);
      goto LABEL_16;
    case 12:
      goto LABEL_10;
    case 13:
      sub_2FE5A8((char **)a1, a12, a13);
LABEL_10:
      sub_2FF324((char **)a1, a3, (uint64_t)v24, 0x100000002LL);
LABEL_11:
      sub_2FF254((char **)a1, a3, 0, (uint64_t)v24, 0x100000002LL);
      goto LABEL_12;
    case 14:
      sub_2FF3F8((char **)a1, 2u, a11);
      sub_2FF254((char **)a1, a3, 0, (uint64_t)v24, 0x100000002LL);
LABEL_12:
      int v26 = 1;
      break;
    case 22:
    case 33:
    case 35:
      goto LABEL_8;
    case 23:
    case 34:
      sub_2FE5A8((char **)a1, a12, a13);
LABEL_8:
      sub_2FF324((char **)a1, a3, (uint64_t)v24, 0x100000002LL);
      goto LABEL_16;
    case 39:
      goto LABEL_3;
    case 40:
    case 41:
    case 42:
      sub_2FE5A8((char **)a1, a12, a13);
LABEL_3:
      uint64_t v27 = sub_105BDC(*(uint64_t **)(v74 + 8), 1936027251);
      else {
        uint64_t v28 = (const char *)*v27;
      }
      sub_2FE910((char **)a1, a3, v28, v24, a4, 0x100000002LL);
LABEL_16:
      int v26 = 0;
      break;
    default:
      break;
  }

  int v75 = a8;
  *(_OWORD *)__int128 v83 = 0u;
  __int128 v84 = 0u;
  int v85 = 1065353216;
  unsigned int v82 = 0;
  LODWORD(v86) = 7;
  v87[0] = 1650814258LL;
  *(_DWORD *)__int128 __p = 1685090932;
  sub_2DC450((uint64_t)&__p[8], (uint64_t)&v86);
  sub_148DB8((uint64_t)v83, *(int *)__p, __p);
  sub_2DBF5C((uint64_t)&__p[8]);
  sub_2DBF5C((uint64_t)&v86);
  if ((sub_2FD930((uint64_t)v83, (int *)&v82, a3, 0, (uint64_t)v24, 1650814258) & 1) == 0)
  {
    memset(__p, 0, 32);
    *(_DWORD *)&__p[32] = 1065353216;
    LODWORD(v78) = 9;
    HIDWORD(v79) = 0;
    *(float *)&uint64_t v79 = (float)a6;
    LODWORD(v86) = 0;
    sub_2DC450((uint64_t)v87, (uint64_t)&v78);
    sub_148DB8((uint64_t)__p, (int)v86, &v86);
    sub_2DBF5C((uint64_t)v87);
    sub_2DBF5C((uint64_t)&v78);
    sub_2DC194((uint64_t)&v78, (uint64_t)__p);
    LODWORD(v86) = 1685086576;
    sub_2DC450((uint64_t)v87, (uint64_t)&v78);
    sub_148DB8((uint64_t)v83, (int)v86, &v86);
    sub_2DBF5C((uint64_t)v87);
    sub_2DBF5C((uint64_t)&v78);
    if (*(void *)&__p[24])
    {
      sub_D0C4C(*(void **)&__p[16]);
      *(void *)&__p[16] = 0LL;
      uint64_t v29 = *(void *)&__p[8];
      if (*(void *)&__p[8])
      {
        uint64_t v30 = 0LL;
        do
          *(void *)(*(void *)__p + 8 * v30++) = 0LL;
        while (v29 != v30);
      }

      *(void *)&_BYTE __p[24] = 0LL;
    }

    sub_D0C4C(*(void **)&__p[16]);
    CFDictionaryRef v31 = *(void **)__p;
    *(void *)__int128 __p = 0LL;
    if (v31) {
      operator delete(v31);
    }
  }

  sub_2FE37C((uint64_t)v83, 2u, 1u);
  sub_2FDCC0((uint64_t)v83, v82);
  LODWORD(v78) = 7;
  uint64_t v79 = 1LL;
  LODWORD(v86) = 3709;
  sub_2DC450((uint64_t)v87, (uint64_t)&v78);
  sub_149710((uint64_t)__p, (int *)&v86, 1LL);
  sub_2FDDB8((uint64_t)v83, (uint64_t)__p);
  sub_D0C4C(*(void **)&__p[16]);
  uint64_t v32 = *(void **)__p;
  *(void *)__int128 __p = 0LL;
  if (v32) {
    operator delete(v32);
  }
  sub_2DBF5C((uint64_t)v87);
  sub_2DBF5C((uint64_t)&v78);
  sub_D1274((uint64_t)&v78, (uint64_t)v83);
  CFDataRef v33 = sub_2FE168((uint64_t)&v78);
  sub_D0C4C(v80);
  CFDictionaryRef v34 = v78;
  __int128 v78 = 0LL;
  if (v34) {
    operator delete(v34);
  }
  uint64_t v81 = (uint64_t)v33;
  int v76 = std::uncaught_exceptions();
  char v77 = &v81;
  sub_2FE1F0((char **)a1, v81);
  if (*((void *)&v84 + 1))
  {
    sub_D0C4C((void *)v84);
    *(void *)&__int128 v84 = 0LL;
    uint64_t v35 = (char *)v83[1];
    if (v83[1])
    {
      unint64_t v36 = 0LL;
      do
        *((void *)v83[0] + (void)v36++) = 0LL;
      while (v35 != v36);
    }

    *((void *)&v84 + 1) = 0LL;
  }

  if (!v25) {
    goto LABEL_78;
  }
  uint64_t v37 = v81;
  uint64_t v38 = sub_2FD44C(v24, (const char *)v25, a4, 1u);
  if (!v38)
  {
    uint64_t v52 = (os_log_t *)sub_138E8(20);
    __int128 v53 = *v52;
    if (!*v52 || !os_log_type_enabled(*v52, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_78;
    }
    uint64_t v54 = *a4;
    *(_DWORD *)__int128 __p = 136315906;
    *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = 290;
    *(_WORD *)&__p[18] = 2112;
    *(void *)&_BYTE __p[20] = v54;
    *(_WORD *)&_BYTE __p[28] = 2080;
    *(void *)&_BYTE __p[30] = v25;
    __int128 v55 = "%25s:%-5d Could not load disk tunings for %@ using preset file %s";
LABEL_59:
    _os_log_impl(&dword_0, v53, OS_LOG_TYPE_DEFAULT, v55, __p, 0x26u);
    goto LABEL_78;
  }

  CFDataRef v39 = sub_33F6A4((uint64_t)v38, (const char *)v25, 1u);
  uint64_t v40 = sub_138E8(20);
  if (!v39)
  {
    __int128 v53 = *(os_log_s **)v40;
    if (!*(void *)v40 || !os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_78;
    }
    uint64_t v56 = *a4;
    *(_DWORD *)__int128 __p = 136315906;
    *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = 297;
    *(_WORD *)&__p[18] = 2112;
    *(void *)&_BYTE __p[20] = v56;
    *(_WORD *)&_BYTE __p[28] = 2080;
    *(void *)&_BYTE __p[30] = v25;
    __int128 v55 = "%25s:%-5d Could not load AU preset by name for %@: %s";
    goto LABEL_59;
  }

  if ((*(_BYTE *)(v40 + 8) & 1) != 0)
  {
    float v41 = *(os_log_s **)v40;
    if (*(void *)v40)
    {
      if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 __p = 136316162;
        *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 301;
        *(_WORD *)&__p[18] = 2048;
        *(void *)&_BYTE __p[20] = v37;
        *(_WORD *)&_BYTE __p[28] = 2080;
        *(void *)&_BYTE __p[30] = v25;
        __int16 v89 = 2112;
        char v90 = v39;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Adding supplementary preset for AU block at %p: %s (%@)",  __p,  0x30u);
      }
    }
  }

  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  sub_2DC034((uint64_t)buf, v39);
  LODWORD(v86) = 1685086576;
  sub_2DC450((uint64_t)v87, (uint64_t)buf);
  sub_148DB8((uint64_t)__p, (int)v86, &v86);
  sub_2DBF5C((uint64_t)v87);
  sub_2DBF5C((uint64_t)buf);
  sub_D1274((uint64_t)&v86, (uint64_t)__p);
  unint64_t v42 = sub_2FE168((uint64_t)&v86);
  CFDataRef v43 = v42;
  uint64_t v45 = *(char **)a1;
  CFDictionaryRef v44 = *(char **)(a1 + 8);
  if (*(char **)a1 != v44)
  {
    while (**(void **)v45 != v37)
    {
      v45 += 24;
      if (v45 == v44) {
        goto LABEL_46;
      }
    }
  }

  if (v44 == v45)
  {
LABEL_46:
    int v46 = (os_log_t *)sub_138E8(13);
    std::string::size_type v47 = *v46;
    if (*v46)
    {
      if (os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        unsigned __int8 v92 = "RoutingTypes.h";
        __int16 v93 = 1024;
        int v94 = 264;
        __int16 v95 = 2048;
        uint64_t v96 = v37;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Master block at %p is not present in this DSP chain",  buf,  0x1Cu);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Master block at %p is not present in this DSP chain");
  }

  unint64_t v50 = (void *)*((void *)v45 + 1);
  unint64_t v49 = *((void *)v45 + 2);
  if ((unint64_t)v50 >= v49)
  {
    uint64_t v57 = ((uint64_t)v50 - *(void *)v45) >> 3;
    uint64_t v58 = v49 - *(void *)v45;
    uint64_t v59 = v58 >> 2;
    else {
      unint64_t v60 = v59;
    }
    if (v60) {
      unint64_t v60 = (unint64_t)sub_7DC90(v60);
    }
    else {
      uint64_t v61 = 0LL;
    }
    unint64_t v62 = (void *)(v60 + 8 * v57);
    unint64_t v63 = v60 + 8 * v61;
    void *v62 = v43;
    std::string::size_type v51 = v62 + 1;
    uint64_t v65 = *(void **)v45;
    unint64_t v64 = (void *)*((void *)v45 + 1);
    if (v64 != *(void **)v45)
    {
      do
      {
        uint64_t v66 = *--v64;
        *--unint64_t v62 = v66;
      }

      while (v64 != v65);
      unint64_t v64 = *(void **)v45;
    }

    *(void *)uint64_t v45 = v62;
    *((void *)v45 + 1) = v51;
    *((void *)v45 + 2) = v63;
    if (v64) {
      operator delete(v64);
    }
  }

  else
  {
    *unint64_t v50 = v42;
    std::string::size_type v51 = v50 + 1;
  }

  *((void *)v45 + 1) = v51;
  sub_D0C4C((void *)v87[1]);
  int v67 = v86;
  std::string v86 = 0LL;
  if (v67) {
    operator delete(v67);
  }
  sub_D0C4C(*(void **)&__p[16]);
  __int16 v68 = *(void **)__p;
  *(void *)__int128 __p = 0LL;
  if (v68) {
    operator delete(v68);
  }
LABEL_78:
  sub_2FE564((uint64_t)&v76);
  sub_D0C4C((void *)v84);
  uint64_t v69 = v83[0];
  v83[0] = 0LL;
  if (v69) {
    operator delete(v69);
  }
  if (v75) {
    sub_310378((char **)a1, a3, (uint64_t)v24, a9, a10);
  }
  switch(a2)
  {
    case 0:
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D647032u, 1, (uint64_t)__p);
      return;
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
      return;
    case 8:
      goto LABEL_93;
    case 17:
      int v73 = (std::string *)sub_105BDC(*(uint64_t **)(v74 + 8), 1868787315);
      sub_3004B0((char **)a1, a3, v24, v73, a4);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D647032u, 1, (uint64_t)__p);
      goto LABEL_95;
    case 19:
      std::string v72 = (std::string *)sub_105BDC(*(uint64_t **)(v74 + 8), 1868787315);
      sub_3004B0((char **)a1, a3, v24, v72, a4);
LABEL_93:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D647032u, 1, (uint64_t)__p);
LABEL_95:
      sub_2FF254((char **)a1, a3, v26, (uint64_t)v24, 0LL);
      goto LABEL_96;
    case 20:
    case 22:
    case 23:
      sub_2FF254((char **)a1, a3, v26, (uint64_t)v24, 0LL);
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x61676332u);
LABEL_96:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x7366636Cu);
      return;
    case 32:
      goto LABEL_86;
    case 33:
    case 34:
      sub_2FF254((char **)a1, a3, v26++, (uint64_t)v24, 0LL);
LABEL_86:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D647032u, 1, (uint64_t)__p);
      sub_2FF254((char **)a1, a3, v26, (uint64_t)v24, 0LL);
      sub_7D084(__p, a3);
      sub_300FFC((char **)a1, __p, 0, (uint64_t)v24, 0LL);
      goto LABEL_100;
    case 35:
    case 41:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x746D7374u);
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC((char **)a1, __p, 0, (uint64_t)v24, 0LL);
      goto LABEL_100;
    case 36:
    case 39:
    case 40:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_2FF254((char **)a1, a3, v26, (uint64_t)v24, 0LL);
      sub_7D084(__p, a3);
      sub_300FFC((char **)a1, __p, 0, (uint64_t)v24, 0LL);
      goto LABEL_100;
    case 37:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x746D7374u);
      sub_2FF19C((char **)a1, a3, (uint64_t)v24);
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x61676332u);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC((char **)a1, __p, 0, (uint64_t)v24, 0LL);
      goto LABEL_100;
    case 38:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x746D7374u);
      sub_2FF19C((char **)a1, a3, (uint64_t)v24);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC((char **)a1, __p, 0, (uint64_t)v24, 0LL);
      goto LABEL_100;
    case 42:
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x61676332u);
      sub_2FE0C4((char **)a1, a3, 0, 0, (uint64_t)v24, 0x746D7374u);
      sub_2FF19C((char **)a1, a3, (uint64_t)v24);
      __p[0] = 0;
      __p[8] = 0;
      sub_2FEDA8((char **)a1, a3, 0, (uint64_t)v24, 0x6D73746Bu, 1, (uint64_t)__p);
      sub_7D084(__p, a3);
      sub_300FFC((char **)a1, __p, 0, (uint64_t)v24, 0LL);
LABEL_100:
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      break;
    default:
      CFDictionaryRef v70 = (os_log_t *)sub_138E8(20);
      char v71 = *v70;
      if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 __p = 136315650;
        *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 3508;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&_BYTE __p[20] = a2;
        _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d GetMicrophoneBeamformedDSPChain: Ignoring invalid MicrophoneDSPChainType: %d",  __p,  0x18u);
      }

      break;
  }

void sub_3121F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_239798(v36);
  _Unwind_Resume(a1);
}

void sub_3123B0(char **a1, int a2, char *a3, uint64_t a4, int a5, float a6)
{
  unint64_t v12 = sub_2FCF50(a4, a3);
  if (a2 > 21)
  {
    sub_2FF324(a1, a3, (uint64_t)v12, 0LL);
    goto LABEL_8;
  }

  if (!a2)
  {
LABEL_13:
    sub_3125B4(a1, a3, (uint64_t)v12, a6);
    return;
  }

  if (a2 == 1)
  {
    sub_2FF324(a1, a3, (uint64_t)v12, 0LL);
    goto LABEL_13;
  }

  if (a2 != 20)
  {
LABEL_15:
    int v13 = (os_log_t *)sub_138E8(20);
    unint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315650;
        unint64_t v16 = "RoutingSettings_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 3552;
        __int16 v19 = 1024;
        int v20 = a2;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Ignoring invalid MicrophoneDSPChainType: %d",  (uint8_t *)&v15,  0x18u);
      }
    }

    return;
  }

void sub_31259C(_Unwind_Exception *a1)
{
}

void sub_3125B4(char **a1, const char *a2, uint64_t a3, float a4)
{
  float64x2_t v16 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(a4), 0), (float64x2_t)xmmword_403330);
  sub_157A88((uint64_t)v14, 0, v16.f64[0], v16.f64[1]);
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_49D9C0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_49D9C0))
  {
    sub_2FCC0C(&qword_49D9B0, &v16, (uint64_t)v14);
    __cxa_guard_release(&qword_49D9C0);
  }

  sub_2FE0C4(a1, a2, 0, 0, a3, 0x76727132u);
  uint64_t v8 = qword_49D9B0;
  uint64_t v9 = *(std::__shared_weak_count **)algn_49D9B8;
  if (*(void *)algn_49D9B8)
  {
    int v10 = (unint64_t *)(*(void *)algn_49D9B8 + 8LL);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  sub_143208(a1, v8, (uint64_t)v9);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  sub_32C8C(v15);
}

void sub_3126E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_31271C(char **a1, char *a2, uint64_t a3, float a4)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0LL, "Generic", 0x600u);
  __p.__r_.__value_.__s.__data_[8] = 1;
  sub_300D48(&v19, (CFStringRef *)&__p);
  size_t v8 = strlen(a2);
  uint64_t v9 = std::string::append(&v19, a2, v8);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)&char v24[16] = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)unint64_t v24 = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v11 = std::string::append((std::string *)v24, ".dspg", 5uLL);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  if ((v24[23] & 0x80000000) != 0) {
    operator delete(*(void **)v24);
  }
  sub_19DFC((uint64_t)&__p);
  unint64_t v13 = (os_log_t *)sub_138E8(20);
  unint64_t v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = &v23;
    if ((v23.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)unint64_t v24 = 136315650;
    *(void *)&v24[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&v24[12] = 1024;
    *(_DWORD *)&_BYTE v24[14] = 3562;
    *(_WORD *)&v24[18] = 2080;
    *(void *)&v24[20] = v15;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configuring headset - mic dsp from %s", v24, 0x1Cu);
  }

  sub_7D084(v21, a2);
  sub_7D084(&v18, a2);
  std::string v19 = v18;
  memset(&v18, 0, sizeof(v18));
  char v20 = 1;
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v17 = 0;
  uint64_t v25 = 0LL;
  memset(v24, 0, sizeof(v24));
  uint64_t v27 = 2LL;
  __int128 v26 = *(_OWORD *)&qword_402EFC;
  sub_83660((uint64_t)v24, (int *)&v26, 3LL);
  sub_302438(a1, (char *)v21, &v23, &v19, &__p, a3, 0LL, 0LL, a4, 0LL, 0, (uint64_t)v24);
  sub_83284((uint64_t)v24);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

void sub_3129E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (a31 && a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_312AB0(uint64_t a1, std::string *a2, uint64_t a3, CFStringRef *a4, int a5, int a6, int a7)
{
  int size = (char)a2->__r_.__value_.__s.__size_;
  if (size >= 0) {
    unint64_t v14 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v14 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= 0) {
    std::string::size_type v15 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v15 = a2->__r_.__value_.__l.__size_;
  }
  float64x2_t v16 = std::string::append(&__dst, v14, v15);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(void *)&v33[16] = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)CFDataRef v33 = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  std::string v18 = std::string::append((std::string *)v33, ".dspg", 5uLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  if ((v33[23] & 0x80000000) != 0) {
    operator delete(*(void **)v33);
  }
  char v20 = (os_log_t *)sub_138E8(20);
  int v21 = *v20;
  if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
  {
    char v22 = &v32;
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)CFDataRef v33 = 136315650;
    *(void *)&v33[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&v33[12] = 1024;
    *(_DWORD *)&v33[14] = 3586;
    *(_WORD *)&v33[18] = 2080;
    *(void *)&v33[20] = v22;
    _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d configuring MicVoiceRecognition dsp from %s",  v33,  0x1Cu);
  }

  std::string v23 = (int *)operator new(0x10uLL);
  v31[1] = v23 + 4;
  CFStringRef v31[2] = v23 + 4;
  int *v23 = a5;
  v23[1] = a6;
  v23[2] = a7;
  v23[3] = 0;
  v31[0] = v23;
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    sub_24054(&__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    int v24 = (char)a2->__r_.__value_.__s.__size_;
    char v30 = 1;
    if (v24 < 0)
    {
      sub_24054(&__p, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      goto LABEL_20;
    }
  }

  else
  {
    std::string __dst = *a2;
    char v30 = 1;
  }

  std::string __p = *a2;
LABEL_20:
  char v28 = 1;
  uint64_t v34 = 0LL;
  memset(v33, 0, sizeof(v33));
  __int128 v35 = *(_OWORD *)&qword_402EFC;
  uint64_t v36 = 2LL;
  sub_83660((uint64_t)v33, (int *)&v35, 3LL);
  sub_302600((char **)a1, (char *)a2, 1684434036, &v32, &__dst, &__p, a3, v31, 0.0, 0LL, 0, (uint64_t)v33);
  sub_83284((uint64_t)v33);
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    if (sub_753A8())
    {
      uint64_t v25 = (os_log_t *)sub_138E8(20);
      __int128 v26 = *v25;
      if (*v25)
      {
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFDataRef v33 = 136315394;
          *(void *)&v33[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 3596;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d GetMicVoiceRecognitionDSPGraph() - config didn't load properly",  v33,  0x12u);
        }
      }
    }
  }

  operator delete(v23);
}

void sub_312E1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a26 && a25 < 0) {
    operator delete(__p);
  }
  operator delete(v43);
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

void sub_312EF4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_312F08(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1936945763) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 16LL))(*(void *)(a1 + 192));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_312F34(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1936945763) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24LL))(*(void *)(a1 + 192));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_312F60(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)a2 == 1936945763) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32LL))(*(void *)(a1 + 192));
  }
  sub_F409C(a1, a2, a3, a4);
  return 0LL;
}

uint64_t sub_312FA0(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)a2 == 1936945763) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 40LL))(*(void *)(a1 + 192));
  }
  else {
    return sub_F4320(a1, a2, a3, a4, a5, a6);
  }
}

void sub_312FC8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v6 = operator new(0x88uLL);
  uint64_t v8 = *a2;
  unsigned __int8 v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  int v14 = *(_DWORD *)(a1 + 48);
  sub_142EF4((uint64_t)v15, (void *)(a1 + 56));
  __int128 v16 = *(_OWORD *)(a1 + 80);
  char v17 = 1;
  v21[0] = v8;
  v21[1] = v7;
  if (v7)
  {
    __int128 v12 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  sub_14285C((uint64_t)v18, (uint64_t)&v14);
  sub_2BCDE4((uint64_t)v6, 1935895666, v21, (uint64_t)v18);
  if (v20) {
    sub_32C8C(v19);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *unsigned __int8 v6 = off_47FEE0;
  if (v17) {
    sub_32C8C(v15[1]);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
    *unsigned __int8 v6 = &off_47FDA8;
    v6[16] = 0x173766F6CLL;
    std::__shared_weak_count::__release_weak(v7);
  }

  else
  {
    *unsigned __int8 v6 = &off_47FDA8;
    v6[16] = 0x173766F6CLL;
  }

  *a3 = v6;
}

void sub_313128( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  if (a22) {
    sub_32C8C(a18);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  if (a15) {
    sub_32C8C(a11);
  }
  if (v23)
  {
    std::__shared_weak_count::__release_weak(v23);
    std::__shared_weak_count::__release_weak(v23);
  }

  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_31318C()
{
  return 1818521197LL;
}

uint64_t sub_313198(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_3131A0(uint64_t a1)
{
  *(void *)a1 = off_47E640;
  sub_32C8C(*(void **)(a1 + 64));
  return a1;
}

void sub_3131D4(void **a1)
{
  *a1 = off_47E640;
  sub_32C8C(a1[8]);
  operator delete(a1);
}

void sub_31320C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_313220(uint64_t a1, float a2)
{
  float v4 = v3;
  uint64_t v5 = sub_138E8(18);
  uint64_t v6 = sub_138E8(38);
  char v7 = 0;
  uint64_t v8 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1LL;
    if ((v11 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  __int128 v12 = *(os_log_s **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v15 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 772;
    __int16 v19 = 2048;
    double v20 = v4;
    __int16 v21 = 2080;
    char v22 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f dB on chain '%s'.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1818521197LL, *(unsigned int *)(a1 + 128), v4);
}

uint64_t sub_3133C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

uint64_t sub_3133CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_3133D4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ((v16 & 0x80u) == 0) {
    float v4 = __p;
  }
  else {
    float v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_826EC(&v18, (uint64_t)v4, v5);
  char v7 = sub_826EC(v6, (uint64_t)" ", 1LL);
  if (a1[15]) {
    uint64_t v8 = *(unsigned int *)(a1[13] + 56LL);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  uint64_t v9 = (void *)std::ostream::operator<<(v7, v8);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  int v10 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (v10 == 1684234860) {
    char v11 = "dB";
  }
  else {
    char v11 = "Scalar";
  }
  if (v10 == 1684234860) {
    uint64_t v12 = 2LL;
  }
  else {
    uint64_t v12 = 6LL;
  }
  sub_826EC(v9, (uint64_t)v11, v12);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  std::ostream::operator<<(v9, a1);
  sub_82924(a2, (uint64_t)v19);
  *(void *)((char *)v17
  uint64_t v18 = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_313570( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3135A0()
{
  return 0LL;
}

void sub_3135B0(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  char v7 = operator new(0x88uLL);
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }

  int v13 = *(_DWORD *)(a1 + 48);
  sub_142EF4((uint64_t)v14, (void *)(a1 + 56));
  __int128 v15 = *(_OWORD *)(a1 + 80);
  char v16 = 1;
  sub_1428CC(v7, 1935895666, v9, v8, (uint64_t)&v13);
  if (v16) {
    sub_32C8C(v14[1]);
  }
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
    *(void *)char v7 = &off_480018;
    v7[32] = v6;
    v7[33] = 1;
    std::__shared_weak_count::__release_weak(v8);
  }

  else
  {
    *(void *)char v7 = &off_480018;
    v7[32] = v6;
    v7[33] = 1;
  }

  *a3 = v7;
}

void sub_3136CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_32C8C(a12);
  }
  if (v17)
  {
    std::__shared_weak_count::__release_weak(v17);
    std::__shared_weak_count::__release_weak(v17);
  }

  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_31370C(uint64_t a1)
{
  *(void *)a1 = off_47E680;
  sub_32C8C(*(void **)(a1 + 64));
  return a1;
}

void sub_313740(void **a1)
{
  *a1 = off_47E680;
  sub_32C8C(a1[8]);
  operator delete(a1);
}

void sub_313778(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_31378C(uint64_t a1, float a2)
{
  float v4 = v3;
  uint64_t v5 = sub_138E8(18);
  uint64_t v6 = sub_138E8(38);
  char v7 = 0;
  uint64_t v8 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1LL;
    if ((v11 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  unint64_t v12 = *(os_log_s **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v15 >= 0) {
      int v13 = __p;
    }
    else {
      int v13 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 772;
    __int16 v19 = 2048;
    double v20 = v4;
    __int16 v21 = 2080;
    char v22 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f dB on chain '%s'.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 128), v4);
}

uint64_t sub_313930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

uint64_t sub_313938(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

void sub_313940(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x88uLL);
  uint64_t v8 = *a2;
  char v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  int v14 = *(_DWORD *)(a1 + 48);
  sub_142EF4((uint64_t)v15, (void *)(a1 + 56));
  __int128 v16 = *(_OWORD *)(a1 + 80);
  char v17 = 1;
  v21[0] = v8;
  v21[1] = v7;
  if (v7)
  {
    unint64_t v12 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  sub_14285C((uint64_t)v18, (uint64_t)&v14);
  sub_2BCDE4((uint64_t)v6, 1935895666, v21, (uint64_t)v18);
  if (v20) {
    sub_32C8C(v19);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *uint64_t v6 = off_47FC70;
  if (v17) {
    sub_32C8C(v15[1]);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
    *uint64_t v6 = &off_47FB38;
    v6[16] = 0x173766F6CLL;
    std::__shared_weak_count::__release_weak(v7);
  }

  else
  {
    *uint64_t v6 = &off_47FB38;
    v6[16] = 0x173766F6CLL;
  }

  *a3 = v6;
}

void sub_313AA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  if (a22) {
    sub_32C8C(a18);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  if (a15) {
    sub_32C8C(a11);
  }
  if (v23)
  {
    std::__shared_weak_count::__release_weak(v23);
    std::__shared_weak_count::__release_weak(v23);
  }

  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_313B04()
{
  return 1635284067LL;
}

uint64_t sub_313B10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_313B18(uint64_t a1)
{
  *(void *)a1 = off_47E6C0;
  sub_32C8C(*(void **)(a1 + 64));
  return a1;
}

void sub_313B4C(void **a1)
{
  *a1 = off_47E6C0;
  sub_32C8C(a1[8]);
  operator delete(a1);
}

void sub_313B84(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_313B98(uint64_t a1, float a2)
{
  float v4 = v3;
  uint64_t v5 = sub_138E8(18);
  uint64_t v6 = sub_138E8(38);
  char v7 = 0;
  uint64_t v8 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1LL;
    if ((v11 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  unint64_t v12 = *(os_log_s **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v15 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 725;
    __int16 v19 = 2048;
    double v20 = v4;
    __int16 v21 = 2080;
    char v22 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f dB on chain '%s'.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1635284067LL, *(unsigned int *)(a1 + 128), v4);
}

uint64_t sub_313D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

uint64_t sub_313D44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_313D4C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ((v16 & 0x80u) == 0) {
    float v4 = __p;
  }
  else {
    float v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_826EC(&v18, (uint64_t)v4, v5);
  char v7 = sub_826EC(v6, (uint64_t)" ", 1LL);
  if (a1[15]) {
    uint64_t v8 = *(unsigned int *)(a1[13] + 56LL);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  uint64_t v9 = (void *)std::ostream::operator<<(v7, v8);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  int v10 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (v10 == 1684234860) {
    char v11 = "dB";
  }
  else {
    char v11 = "Scalar";
  }
  if (v10 == 1684234860) {
    uint64_t v12 = 2LL;
  }
  else {
    uint64_t v12 = 6LL;
  }
  sub_826EC(v9, (uint64_t)v11, v12);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  std::ostream::operator<<(v9, a1);
  sub_82924(a2, (uint64_t)v19);
  *(void *)((char *)v17
  uint64_t v18 = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_313EE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_313F18()
{
  return 0LL;
}

void sub_313F28(uint64_t *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x90uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  char v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }

  sub_313FBC((uint64_t)v4, v6, v7);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *a2 = v5;
}

void sub_313F94(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_313FBC(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3)
  {
    p_shared_weak_owners = (unint64_t *)&a3->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }

  sub_143C1C((void *)a1, 1684234860, a2, a3);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *(void *)a1 = &off_47F4E8;
  *(_BYTE *)(a1 + 128) = 1;
  *(_DWORD *)(a1 + 132) = 1;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  return a1;
}

void sub_31403C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_314058(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_314070(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = sub_138E8(18);
  uint64_t v7 = sub_138E8(38);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  uint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    int v14 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v26 = 1024;
    int v27 = 1001;
    __int16 v28 = 2048;
    double v29 = a2;
    __int16 v30 = 2048;
    double v31 = a3;
    __int16 v32 = 2048;
    uint64_t v33 = a1;
    __int16 v34 = 2080;
    __int128 v35 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "%25s:%-5d HeadsetGraph : Changing Volume : %.2f dB | Scalar : %.2f | %p on chain '%s'.",  buf,  0x3Au);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1685287015LL, 1752659567LL, a2);
  sub_666C4(a1, 1685287015LL, 1935898223LL, a3);
  if (*(_BYTE *)(a1 + 140))
  {
    sub_2BDB80(a2, *(float *)(a1 + 136));
    unsigned __int8 v16 = *(std::__shared_weak_count **)(a1 + 32);
    if (v16)
    {
      unsigned int v17 = v15;
      uint64_t v18 = std::__shared_weak_count::lock(v16);
      if (v18)
      {
        __int16 v19 = v18;
        uint64_t v20 = *(void *)(a1 + 24);
        if (v20) {
          atomic_store(v17, (unsigned int *)(v20 + 792));
        }
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }

void sub_3142B4(uint64_t a1, uint64_t a2)
{
  if (BYTE4(a2) && *(_BYTE *)(a1 + 140))
  {
  }

  else if ((BYTE4(a2) != 0) == (*(_BYTE *)(a1 + 140) != 0))
  {
    return;
  }

  unsigned int v3 = 0;
  *(_DWORD *)(a1 + 136) = a2;
  *(_BYTE *)(a1 + 140) = BYTE4(a2);
  if (BYTE4(a2) && *(float *)&a2 != 0.0)
  {
    float v11 = 0.0;
    sub_64DF8(a1, 1685287015LL, 1752659567LL, &v11);
    sub_2BDB80(v11, *(float *)(a1 + 136));
    unsigned int v3 = v4;
  }

  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8) {
        atomic_store(v3, (unsigned int *)(v8 + 792));
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

uint64_t sub_3143BC()
{
  return 0LL;
}

float sub_3143C4()
{
  return 0.0;
}

float sub_3143CC()
{
  return 0.0;
}

void sub_3143D4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  float v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    char v12 = a2 ? "Unmute" : "Mute";
    sub_665BC((uint64_t)__p, a1);
    uint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 1032;
    __int16 v19 = 2080;
    uint64_t v20 = v12;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 2080;
    char v24 = v13;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d HeadsetGraph : %s %p on chain '%s'.", buf, 0x30u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a2 != 1) {
    sub_666C4(a1, 1685287015LL, 1752659567LL, -3.4028e38);
  }
}

uint64_t sub_31459C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_3145A4(_BYTE *a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 144LL))(a1);
  a1[128] = a2;
  return result;
}

void sub_3145D8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  char v6 = operator new(0xA8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    char v12 = *(_BYTE *)(a1 + 44);
    uint64_t v13 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  else
  {
    char v12 = *(_BYTE *)(a1 + 44);
  }

  sub_313FBC((uint64_t)v6, v8, v9);
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    *(void *)uint64_t v7 = &off_47F620;
    v7[9] = xmmword_403350;
    *((_DWORD *)v7 + 40) = 1065353216;
    *((_BYTE *)v7 + 164) = v12;
    std::__shared_weak_count::__release_weak(v9);
  }

  else
  {
    *(void *)uint64_t v7 = &off_47F620;
    v7[9] = xmmword_403350;
    *((_DWORD *)v7 + 40) = 1065353216;
    *((_BYTE *)v7 + 164) = v12;
  }

  *a3 = v7;
}

void sub_3146BC(_Unwind_Exception *a1)
{
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3146F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

uint64_t sub_314704(float *a1, float a2, float a3)
{
  return (*(uint64_t (**)(float *, float))(*(void *)a1 + 320LL))(a1, a2);
}

uint64_t sub_31478C()
{
  return 1LL;
}

float sub_314794(uint64_t a1, float a2)
{
  *(float *)(a1 + 160) = a2;
  unsigned int v4 = *(_DWORD *)(sub_2FC9D4() + 8);
  if (*(_BYTE *)(a1 + 128)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    char v6 = (os_log_t *)sub_138E8(20);
    os_log_t v7 = *v6;
    float v8 = 0.0;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int16 v23 = "VolumeControl.h";
      __int16 v24 = 1024;
      int v25 = 1138;
      uint64_t v9 = "%25s:%-5d no reduction\n";
      char v10 = v7;
      uint32_t v11 = 18;
LABEL_16:
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    }
  }

  else
  {
    float v21 = 0.0;
    sub_64DF8(a1, 1685287015LL, 1819176045LL, &v21);
    float v12 = (float)((float)v4 - *(float *)(a1 + 144)) - v21;
    float v13 = 2.0;
    if (a2 > 0.89) {
      float v13 = (float)((float)(1.0 - a2) + (float)(1.0 - a2)) / 0.11;
    }
    int v20 = 0;
    sub_2BD3EC(a1, 1652123756LL, (uint64_t)&v20, 4);
    int v14 = v20;
    float v15 = -(float)(sub_3152B4(a1) - (float)((float)(a2 + -1.0) * v12));
    float v16 = 2.5;
    if (!v14) {
      float v16 = 4.0;
    }
    float v8 = v13 + (float)(v15 - (float)(a2 * v16));
    __int16 v17 = (os_log_t *)sub_138E8(20);
    os_log_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v23 = "VolumeControl.h";
      __int16 v24 = 1024;
      int v25 = 1135;
      __int16 v26 = 2048;
      double v27 = v8;
      uint64_t v9 = "%25s:%-5d VLT remapper delta is %f";
      char v10 = v18;
      uint32_t v11 = 28;
      goto LABEL_16;
    }
  }

  return v8;
}

float sub_3149B0(uint64_t a1, float a2)
{
  unsigned int v4 = *(_DWORD *)(sub_2FC9D4() + 8);
  float v5 = 0.0;
  if (v4)
  {
    float v9 = 0.0;
    sub_64DF8(a1, 1685287015LL, 1999795056LL, &v9);
    float v8 = 1.0;
    sub_64DF8(a1, 1685287015LL, 1999790965LL, &v8);
    float v6 = v9 + (float)(a2 * v8);
  }

  return v5;
}

uint64_t sub_314A58(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 164);
}

uint64_t sub_314A60(uint64_t result, float a2)
{
  *(float *)(result + 156) = a2;
  return result;
}

uint64_t sub_314A68(uint64_t result, float a2)
{
  *(float *)(result + 156) = a2;
  return result;
}

void sub_314A70(uint64_t a1)
{
  int v17 = 0;
  sub_2BD3EC(a1, 1652123756LL, (uint64_t)&v17, 4);
  float v2 = 0.0;
  if (!v17) {
    float v2 = (float)(1.0 - *(float *)(a1 + 160)) * 20.0;
  }
  if (*(_DWORD *)(sub_2FC9D4() + 8)) {
    float v3 = v2;
  }
  else {
    float v3 = 0.0;
  }
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_12;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_12:
  uint32_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    float v12 = *(float *)(a1 + 156);
    sub_665BC((uint64_t)__p, a1);
    float v13 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v19 = 1024;
    int v20 = 1153;
    __int16 v21 = 2048;
    double v22 = (float)(v3 + v12);
    __int16 v23 = 2080;
    __int16 v24 = v13;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Total Remap Gain is %f on chain '%s'.", buf, 0x26u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  else {
    float v14 = -20.0;
  }
  sub_666C4(a1, 1685287015LL, 1751606900LL, -1.5 - v3);
  sub_666C4(a1, 1685287015LL, 1751999346LL, v14);
  sub_666C4(a1, 1685287015LL, 1919772516LL, v3 + *(float *)(a1 + 156));
}

void sub_314CAC(uint64_t a1)
{
}

void sub_314CC4(uint64_t a1)
{
  *(float *)(a1 + sub_83284(v44 - 144) = *(float *)(a1 + 144) + 13.0;
  unsigned int v2 = *(_DWORD *)(sub_2FC9D4() + 8);
  if (v2 - 1 >= 0x4F)
  {
    if (v2 - 80 > 4)
    {
      float v7 = -1.5;
      if (v2 - 85 < 5) {
        float v7 = -6.5;
      }
      sub_666C4(a1, 1685287015LL, 1751934580LL, v7);
      float v37 = 0.0;
      if (!v2)
      {
        sub_64DF8(a1, 1685287015LL, 1819160624LL, &v37);
        sub_666C4(a1, 1685287015LL, 1819176295LL, v37);
        *(_DWORD *)(a1 + 152) = 0;
        int v20 = *(std::__shared_weak_count **)(a1 + 32);
        if (v20 && (__int16 v21 = std::__shared_weak_count::lock(v20), (__p[1] = v21) != 0LL))
        {
          double v22 = v21;
          __int16 v23 = *(void **)(a1 + 24);
          __p[0] = v23;
          if (!v23) {
            goto LABEL_52;
          }
          __int16 v24 = (void *)v23[139];
          if (!v24) {
            goto LABEL_52;
          }
          int v25 = v23 + 139;
          __int16 v26 = v23 + 139;
          do
          {
            unint64_t v27 = v24[4];
            BOOL v28 = v27 >= 3;
            if (v27 >= 3) {
              double v29 = v24;
            }
            else {
              double v29 = v24 + 1;
            }
            if (v28) {
              __int16 v26 = v24;
            }
            __int16 v24 = (void *)*v29;
          }

          while (*v29);
          if (v26 == v25 || v26[4] > 3uLL) {
            goto LABEL_52;
          }
          sub_199E0C((uint64_t)&buf[8], (uint64_t)(v26 + 6));
          char v50 = 1;
          if (v49) {
            sub_22BBD4();
          }
          int v30 = buf[8];
          sub_9DBD0((uint64_t)&buf[8]);
          if (v30) {
            int v31 = 0;
          }
          else {
LABEL_52:
          }
            int v31 = 1;
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            unint64_t v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }

        else
        {
          int v31 = 1;
        }

        sub_2BD3EC(a1, 1652124782LL, (uint64_t)buf, 4);
        if (*(_DWORD *)buf != v31)
        {
          *(_DWORD *)AudioBufferList buf = v31;
          sub_78E0C(a1, 1685287015LL, 1652124782LL);
        }

        sub_666C4(a1, 1685287015LL, 1818977907LL, 0.0);
        return;
      }

      unsigned int v4 = 1819162677;
      if (v2 >= 0x60) {
        int v8 = 1819160624;
      }
      else {
        int v8 = 1819162933;
      }
      if (v2 >= 0x5B) {
        unsigned int v5 = v8;
      }
      else {
        unsigned int v5 = 1819162928;
      }
      BOOL v6 = v2 >= 0x56;
      goto LABEL_17;
    }

    sub_666C4(a1, 1685287015LL, 1751934580LL, -11.5);
    float v37 = 0.0;
  }

  else
  {
    sub_666C4(a1, 1685287015LL, 1751934580LL, -16.5);
    float v37 = 0.0;
    if (v2 < 0x4C)
    {
      uint64_t v3 = 1819162421LL;
      goto LABEL_20;
    }
  }

  unsigned int v4 = 1819162672;
  unsigned int v5 = 1819162677;
  BOOL v6 = v2 >= 0x51;
LABEL_17:
  if (v6) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = v4;
  }
LABEL_20:
  sub_64DF8(a1, 1685287015LL, v3, &v37);
  sub_666C4(a1, 1685287015LL, 1819176295LL, v37);
  float v36 = 0.0;
  sub_64DF8(a1, 1685287015LL, 1819176045LL, &v36);
  *(float *)(a1 + 152) = (float)((float)v2 - *(float *)(a1 + 144)) - v36;
  uint64_t v9 = sub_138E8(18);
  uint64_t v10 = sub_138E8(38);
  char v11 = 0;
  uint64_t v12 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1LL;
    if ((v15 & 1) != 0) {
      goto LABEL_26;
    }
  }

  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_26:
  char v16 = *(os_log_s **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    float v17 = *(float *)(a1 + 144);
    float v18 = *(float *)(a1 + 152);
    sub_665BC((uint64_t)__p, a1);
    if (v35 >= 0) {
      __int16 v19 = __p;
    }
    else {
      __int16 v19 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v39 = 1024;
    int v40 = 1205;
    __int16 v41 = 2048;
    double v42 = v17;
    __int16 v43 = 1024;
    unsigned int v44 = v2;
    __int16 v45 = 2048;
    double v46 = v18;
    __int16 v47 = 2080;
    __int16 v48 = v19;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HeadsetGraph : SPL Gain : %.2fdB SPLTarget :  %.2udB LoudnessTarget :  %.2fdB on chain '%s'.",  buf,  0x36u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1685287015LL, 1818977907LL, *(float *)(a1 + 152));
}

void sub_315178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  if (a25) {
    sub_9DBD0(v25);
  }
  sub_7A768((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_3151AC(uint64_t a1, float a2)
{
  float v10 = 0.0;
  sub_64DF8(a1, 1685287015LL, 1919772516LL, &v10);
  float v9 = 0.0;
  sub_64DF8(a1, 1685287015LL, 1919772466LL, &v9);
  int v8 = 0;
  sub_2BD3EC(a1, 1652123756LL, (uint64_t)&v8, 4);
  float v4 = 0.0;
  float v5 = 0.0;
  if (!v8) {
    float v5 = (float)(*(float *)(a1 + 160) + -1.0) * 20.0;
  }
  if (*(_DWORD *)(sub_2FC9D4() + 8)) {
    float v4 = v5;
  }
  float v6 = (float)((float)(v10 + *(float *)(a1 + 152)) + v9) + a2;
  float v7 = sub_3152B4(a1);
  sub_666C4(a1, 1685287015LL, 1751938671LL, v4 + (float)(v7 + v6));
}

float sub_3152B4(uint64_t a1)
{
  uint64_t v3 = 0LL;
  sub_2BD3EC(a1, 1652122993LL, (uint64_t)&v3, 4);
  float result = 0.0;
  if (!(_DWORD)v3)
  {
    sub_64DF8(a1, 1685287015LL, 1734829425LL, (float *)&v3 + 1);
    return *((float *)&v3 + 1);
  }

  return result;
}

void sub_31531C(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  float v6 = operator new(0xA8uLL);
  float v7 = v6;
  int v8 = *(_DWORD *)(a1 + 12);
  int v9 = *(_DWORD *)(a1 + 16);
  __int128 v14 = *(_OWORD *)(a1 + 20);
  uint64_t v15 = *(void *)(a1 + 36);
  uint64_t v10 = *a2;
  char v11 = (std::__shared_weak_count *)a2[1];
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }

  sub_3153CC((uint64_t)v6, v8, v9, &v14, v10, v11);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *a3 = v7;
}

void sub_3153AC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3153CC(uint64_t a1, int a2, int a3, __int128 *a4, uint64_t a5, std::__shared_weak_count *a6)
{
  __int128 v15 = *a4;
  uint64_t v16 = *((void *)a4 + 2);
  if (a6)
  {
    p_shared_weak_owners = (unint64_t *)&a6->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    do
      unint64_t v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }

  sub_2BCE7C(a1, 1684234860, a5, a6);
  if (a6)
  {
    std::__shared_weak_count::__release_weak(a6);
    *(void *)a1 = off_47E9F0;
    std::__shared_weak_count::__release_weak(a6);
    *(void *)a1 = &off_47E8B8;
    *(_DWORD *)(a1 + 128) = a2;
    *(_DWORD *)(a1 + 132) = a3;
    *(_OWORD *)(a1 + 136) = v15;
    *(void *)(a1 + 152) = v16;
    std::__shared_weak_count::__release_weak(a6);
  }

  else
  {
    *(void *)a1 = &off_47E8B8;
    *(_DWORD *)(a1 + 128) = a2;
    *(_DWORD *)(a1 + 132) = a3;
    *(_OWORD *)(a1 + 136) = v15;
    *(void *)(a1 + 152) = v16;
  }

  *(void *)a1 = &off_47E780;
  *(_DWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_3154E4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  _Unwind_Resume(exception_object);
}

void sub_315510(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_315524(uint64_t a1, float a2)
{
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  unint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v14 >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 541;
    __int16 v18 = 2048;
    double v19 = a2;
    __int16 v20 = 2080;
    __int16 v21 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1987013737LL, *(unsigned int *)(a1 + 128), a2);
}

void sub_3156C0(unsigned int *a1, uint64_t a2, int a3, float a4, float a5)
{
  int v42 = a3;
  if (a1[34])
  {
    char v10 = (os_log_t *)sub_138E8(38);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        unint64_t v12 = "enabled";
      }
      else {
        unint64_t v12 = "disabled";
      }
      unint64_t v13 = v40;
      sub_2CA1C(v40, a1[34]);
      if (v41 < 0) {
        unint64_t v13 = (void **)v40[0];
      }
      sub_2CA1C(v38, a2);
      int v14 = v39;
      __int128 v15 = (void **)v38[0];
      sub_665BC((uint64_t)__p, (uint64_t)a1);
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      __int16 v16 = v38;
      if (v14 < 0) {
        __int16 v16 = v15;
      }
      *(_DWORD *)AudioBufferList buf = 136316930;
      __int16 v44 = 1024;
      if (v37 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      int v45 = 576;
      __int16 v46 = 2080;
      __int16 v47 = (void *)v12;
      __int16 v48 = 2080;
      int v49 = v13;
      __int16 v50 = 2080;
      std::string::size_type v51 = v16;
      __int16 v52 = 2048;
      double v53 = a4;
      __int16 v54 = 2048;
      double v55 = a5;
      __int16 v56 = 2080;
      uint64_t v57 = v17;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f, chain: '%s'.",  buf,  0x4Eu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }

    if ((_DWORD)a2 != 1)
    {
      __int16 v18 = (os_log_t *)sub_138E8(13);
      double v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v40, a2);
          __int16 v20 = v41 >= 0 ? v40 : (void **)v40[0];
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v44 = 1024;
          int v45 = 578;
          __int16 v46 = 2080;
          __int16 v47 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: duck type: '%s' not supported!",  buf,  0x1Cu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }
        }
      }
    }

    *(_DWORD *)AudioBufferList buf = a1[35];
    CFNumberRef v21 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    v38[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    *(_DWORD *)AudioBufferList buf = a1[36];
    CFNumberRef v22 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }

    *(_DWORD *)AudioBufferList buf = a1[37];
    CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    CFNumberRef v35 = v23;
    if (!v23)
    {
      __int16 v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
    }

    float v24 = a5 * 1000.0;
    unsigned int v25 = a1[38];
    if (a1[39] != 1) {
      float v24 = a5;
    }
    float v34 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v33 = a4;
    sub_78C54(buf, v21, &v42);
    sub_78D30((int *)((char *)&v45 + 2), v22, (int *)&v33);
    sub_78D30((void ***)((char *)&v49 + 2), v23, (int *)&v34);
    v40[0] = buf;
    v40[1] = &dword_0 + 3;
    CFDictionaryRef v26 = sub_5A950((uint64_t)v40);
    for (uint64_t i = 0LL; i != -6; i -= 2LL)
    {
      BOOL v28 = (&v51)[i];
      if (v28) {
        CFRelease(v28);
      }
      double v29 = *(void ***)((char *)&(&v49)[i] + 2);
      if (v29) {
        CFRelease(v29);
      }
    }

    *(void *)AudioBufferList buf = v26;
    sub_78E0C((uint64_t)a1, 1987013737LL, a1[34]);
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }

void sub_315B64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_315C84(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) != 0;
}

void sub_315C94(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  if (!a2 && v4 == 1)
  {
    sub_64DF8(a1, 1987013737LL, *(unsigned int *)(a1 + 128), (float *)(a1 + 160));
    uint64_t v5 = (os_log_t *)sub_138E8(38);
    char v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      float v7 = *(float *)(a1 + 160);
      sub_665BC((uint64_t)__p, a1);
      if (v15 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136316162;
      int v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 660;
      __int16 v20 = 2048;
      double v21 = -120.0;
      __int16 v22 = 2048;
      double v23 = v7;
      __int16 v24 = 2080;
      unsigned int v25 = v8;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mute with volume %.2f dB, previous volume: %.2f on chain '%s'.",  buf,  0x30u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    float v9 = -120.0;
LABEL_21:
    sub_315524(a1, v9);
    return;
  }

  if (a2 == 1 && !v4)
  {
    char v10 = (os_log_t *)sub_138E8(38);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      float v12 = *(float *)(a1 + 160);
      sub_665BC((uint64_t)__p, a1);
      if (v15 >= 0) {
        *(double *)&unint64_t v13 = COERCE_DOUBLE(__p);
      }
      else {
        unint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      int v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 667;
      __int16 v20 = 2048;
      double v21 = v12;
      __int16 v22 = 2080;
      double v23 = *(double *)&v13;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Unmute with previous volume: %.2f on chain '%s'.",  buf,  0x26u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    float v9 = *(float *)(a1 + 160);
    goto LABEL_21;
  }

BOOL sub_315ED4(uint64_t a1)
{
  float v2 = 0.0;
  sub_64DF8(a1, 1987013737LL, *(unsigned int *)(a1 + 128), &v2);
  return (float)(v2 + 120.0) > 0.00000011921;
}

uint64_t sub_315F20@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ((v16 & 0x80u) == 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  char v6 = sub_826EC(&v18, (uint64_t)v4, v5);
  float v7 = sub_826EC(v6, (uint64_t)" ", 1LL);
  if (a1[15]) {
    uint64_t v8 = *(unsigned int *)(a1[13] + 56LL);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  float v9 = (void *)std::ostream::operator<<(v7, v8);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  int v10 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (v10 == 1684234860) {
    unint64_t v11 = "dB";
  }
  else {
    unint64_t v11 = "Scalar";
  }
  if (v10 == 1684234860) {
    uint64_t v12 = 2LL;
  }
  else {
    uint64_t v12 = 6LL;
  }
  sub_826EC(v9, (uint64_t)v11, v12);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  std::ostream::operator<<(v9, a1);
  sub_82924(a2, (uint64_t)v19);
  *(void *)((char *)v17
  uint64_t v18 = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_3160BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3160EC()
{
  return 0LL;
}

void sub_3160F8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_31610C(uint64_t a1, int a2)
{
  if (a2) {
    float v3 = 0.0;
  }
  else {
    float v3 = 1.0;
  }
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_10:
  unint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v14 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 554;
    __int16 v18 = 2048;
    double v19 = v3;
    __int16 v20 = 2080;
    uint64_t v21 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting mute value: %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1987013737LL, *(unsigned int *)(a1 + 132), v3);
}

BOOL sub_3162B4(uint64_t a1)
{
  float v2 = 0.0;
  sub_64DF8(a1, 1987013737LL, *(unsigned int *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_3162F8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  char v6 = operator new(0xA8uLL);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 12);
  int v9 = *(_DWORD *)(a1 + 16);
  __int128 v14 = *(_OWORD *)(a1 + 20);
  uint64_t v15 = *(void *)(a1 + 36);
  uint64_t v10 = *a2;
  unint64_t v11 = (std::__shared_weak_count *)a2[1];
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }

  sub_3163A8((uint64_t)v6, v8, v9, (uint64_t)&v14, v10, v11);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *a3 = v7;
}

void sub_316388(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3163A8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6)
{
  __int128 v11 = *(_OWORD *)a4;
  uint64_t v12 = *(void *)(a4 + 16);
  if (a6)
  {
    p_shared_weak_owners = (unint64_t *)&a6->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }

  sub_143570(a1, 1684234860, a2, a3, &v11, a5, a6);
  if (a6) {
    std::__shared_weak_count::__release_weak(a6);
  }
  *(void *)a1 = &off_47EB28;
  *(_DWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_316440(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_31645C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_316470(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x88uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_2BCE7C((uint64_t)v4, 1684234860, v6, v7);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
    *(void *)uint64_t v5 = off_47F008;
    std::__shared_weak_count::__release_weak(v7);
    *(void *)uint64_t v5 = &off_47EED0;
    v5[32] = 1;
    std::__shared_weak_count::__release_weak(v7);
  }

  else
  {
    *(void *)uint64_t v5 = &off_47EED0;
    v5[32] = 1;
  }

  *a2 = v5;
}

void sub_31654C(_Unwind_Exception *a1)
{
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_316580(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_316598(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = sub_138E8(18);
  uint64_t v7 = sub_138E8(38);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  unint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v16 >= 0) {
      __int128 v14 = __p;
    }
    else {
      __int128 v14 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v18 = 1024;
    int v19 = 920;
    __int16 v20 = 2048;
    double v21 = a2;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2080;
    unsigned int v25 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : Changing Volume : %.2fdB %p on chain '%s'.",  buf,  0x30u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1936747629LL, 0LL, a2);
  sub_666C4(a1, 1936747629LL, 12LL, a3);
}

uint64_t sub_316758()
{
  return 0LL;
}

float sub_316760()
{
  return 0.0;
}

float sub_316768()
{
  return 0.0;
}

void sub_316770(uint64_t a1, int a2)
{
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    char v12 = a2 ? "Unmute" : "Mute";
    sub_665BC((uint64_t)__p, a1);
    unint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 955;
    __int16 v19 = 2080;
    __int16 v20 = v12;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 2080;
    __int16 v24 = v13;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : %s AUSPL %p on chain '%s'.",  buf,  0x30u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a2 != 1) {
    sub_666C4(a1, 1936747629LL, 0LL, -3.4028e38);
  }
}

uint64_t sub_316934(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_31693C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
}

uint64_t sub_31694C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  char v6 = sub_826EC(&v18, (uint64_t)v4, v5);
  uint64_t v7 = sub_826EC(v6, (uint64_t)" ", 1LL);
  if (a1[15]) {
    uint64_t v8 = *(unsigned int *)(a1[13] + 56LL);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  uint64_t v9 = (void *)std::ostream::operator<<(v7, v8);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  int v10 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (v10 == 1684234860) {
    uint64_t v11 = "dB";
  }
  else {
    uint64_t v11 = "Scalar";
  }
  if (v10 == 1684234860) {
    uint64_t v12 = 2LL;
  }
  else {
    uint64_t v12 = 6LL;
  }
  sub_826EC(v9, (uint64_t)v11, v12);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  std::ostream::operator<<(v9, a1);
  sub_82924(a2, (uint64_t)v19);
  *(void *)((char *)v17
  uint64_t v18 = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_316AE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_316B18()
{
  return 0LL;
}

void sub_316B28(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  char v6 = (char *)operator new(0xA8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 12);
  uint64_t v9 = *a2;
  int v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    do
      unint64_t v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    do
      unint64_t v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    do
      unint64_t v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }

  sub_2BCE7C((uint64_t)v6, 1935895666, v9, v10);
  if (v10)
  {
    std::__shared_weak_count::__release_weak(v10);
    *(void *)uint64_t v7 = off_47F3B0;
    std::__shared_weak_count::__release_weak(v10);
    *(void *)uint64_t v7 = &off_47F278;
    *((void *)v7 + 16) = v8;
    *((void *)v7 + 19) = 0x100000001LL;
    *(_OWORD *)(v7 + 136) = xmmword_402D48;
    std::__shared_weak_count::__release_weak(v10);
    *(void *)uint64_t v7 = &off_47F140;
    *((_DWORD *)v7 + 40) = 1;
    std::__shared_weak_count::__release_weak(v10);
  }

  else
  {
    *((void *)v7 + 16) = v8;
    *((void *)v7 + 19) = 0x100000001LL;
    *(_OWORD *)(v7 + 136) = xmmword_402D48;
    *(void *)uint64_t v7 = &off_47F140;
    *((_DWORD *)v7 + 40) = 1;
  }

  *a3 = v7;
}

void sub_316C70(_Unwind_Exception *a1)
{
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_316CAC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_316CC0(uint64_t a1, float a2)
{
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v14 >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 541;
    __int16 v18 = 2048;
    double v19 = a2;
    __int16 v20 = 2080;
    uint64_t v21 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1668312369LL, *(unsigned int *)(a1 + 128), a2);
}

void sub_316E5C(unsigned int *a1, uint64_t a2, int a3, float a4, float a5)
{
  int v42 = a3;
  if (a1[34])
  {
    char v10 = (os_log_t *)sub_138E8(38);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        unint64_t v12 = "enabled";
      }
      else {
        unint64_t v12 = "disabled";
      }
      unint64_t v13 = v40;
      sub_2CA1C(v40, a1[34]);
      if (v41 < 0) {
        unint64_t v13 = (void **)v40[0];
      }
      sub_2CA1C(v38, a2);
      int v14 = v39;
      unint64_t v15 = (void **)v38[0];
      sub_665BC((uint64_t)__p, (uint64_t)a1);
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      __int16 v16 = v38;
      if (v14 < 0) {
        __int16 v16 = v15;
      }
      *(_DWORD *)AudioBufferList buf = 136316930;
      __int16 v44 = 1024;
      if (v37 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      int v45 = 576;
      __int16 v46 = 2080;
      __int16 v47 = (void *)v12;
      __int16 v48 = 2080;
      int v49 = v13;
      __int16 v50 = 2080;
      std::string::size_type v51 = v16;
      __int16 v52 = 2048;
      double v53 = a4;
      __int16 v54 = 2048;
      double v55 = a5;
      __int16 v56 = 2080;
      uint64_t v57 = v17;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f, chain: '%s'.",  buf,  0x4Eu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }

    if ((_DWORD)a2 != 1)
    {
      __int16 v18 = (os_log_t *)sub_138E8(13);
      double v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v40, a2);
          __int16 v20 = v41 >= 0 ? v40 : (void **)v40[0];
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v44 = 1024;
          int v45 = 578;
          __int16 v46 = 2080;
          __int16 v47 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: duck type: '%s' not supported!",  buf,  0x1Cu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }
        }
      }
    }

    *(_DWORD *)AudioBufferList buf = a1[35];
    CFNumberRef v21 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    v38[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    *(_DWORD *)AudioBufferList buf = a1[36];
    CFNumberRef v22 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }

    *(_DWORD *)AudioBufferList buf = a1[37];
    CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    CFNumberRef v35 = v23;
    if (!v23)
    {
      __int16 v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
    }

    float v24 = a5 * 1000.0;
    unsigned int v25 = a1[38];
    if (a1[39] != 1) {
      float v24 = a5;
    }
    float v34 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v33 = a4;
    sub_78C54(buf, v21, &v42);
    sub_78D30((int *)((char *)&v45 + 2), v22, (int *)&v33);
    sub_78D30((void ***)((char *)&v49 + 2), v23, (int *)&v34);
    v40[0] = buf;
    v40[1] = &dword_0 + 3;
    CFDictionaryRef v26 = sub_5A950((uint64_t)v40);
    for (uint64_t i = 0LL; i != -6; i -= 2LL)
    {
      BOOL v28 = (&v51)[i];
      if (v28) {
        CFRelease(v28);
      }
      double v29 = *(void ***)((char *)&(&v49)[i] + 2);
      if (v29) {
        CFRelease(v29);
      }
    }

    *(void *)AudioBufferList buf = v26;
    sub_78E0C((uint64_t)a1, 1668312369LL, a1[34]);
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }

void sub_317300( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_317420(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) != 0;
}

uint64_t sub_317430(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t sub_317438(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_317440@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  char v6 = sub_826EC(&v18, (uint64_t)v4, v5);
  uint64_t v7 = sub_826EC(v6, (uint64_t)" ", 1LL);
  if (a1[15]) {
    uint64_t v8 = *(unsigned int *)(a1[13] + 56LL);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  uint64_t v9 = (void *)std::ostream::operator<<(v7, v8);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  int v10 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (v10 == 1684234860) {
    uint64_t v11 = "dB";
  }
  else {
    uint64_t v11 = "Scalar";
  }
  if (v10 == 1684234860) {
    uint64_t v12 = 2LL;
  }
  else {
    uint64_t v12 = 6LL;
  }
  sub_826EC(v9, (uint64_t)v11, v12);
  sub_826EC(v9, (uint64_t)" ", 1LL);
  std::ostream::operator<<(v9, a1);
  sub_82924(a2, (uint64_t)v19);
  *(void *)((char *)v17
  uint64_t v18 = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_3175DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_31760C()
{
  return 0LL;
}

void sub_317618(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_31762C(uint64_t a1, int a2)
{
  if (a2) {
    float v3 = 0.0;
  }
  else {
    float v3 = 1.0;
  }
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_10:
  uint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v14 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 554;
    __int16 v18 = 2048;
    double v19 = v3;
    __int16 v20 = 2080;
    uint64_t v21 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting mute value: %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1668312369LL, *(unsigned int *)(a1 + 132), v3);
}

BOOL sub_3177D4(uint64_t a1)
{
  float v2 = 0.0;
  sub_64DF8(a1, 1668312369LL, *(unsigned int *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_317818(uint64_t a1@<X0>, uint64_t *a2@<X1>, float **a3@<X8>)
{
  if (!*(_BYTE *)(a1 + 112)) {
    sub_8DEEC();
  }
  char v6 = (float *)operator new(0xB8uLL);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }

  int v18 = *(_DWORD *)(a1 + 64);
  sub_142EF4((uint64_t)v19, (void *)(a1 + 72));
  __int128 v20 = *(_OWORD *)(a1 + 96);
  char v21 = 1;
  sub_301614(v6, 1935895666, v9, v8, (uint64_t)&v18);
  if (v21) {
    sub_32C8C(v19[1]);
  }
  uint64_t v13 = (_OWORD *)(a1 + 48);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)char v6 = &off_47F790;
  *((_OWORD *)v6 + 8) = *v13;
  v6[36] = sub_3016E0((double *)v6);
  *((_DWORD *)v6 + 37) = 1;
  *((void *)v6 + 19) = v7;
  *((void *)v6 + 22) = 0x100000001LL;
  *((_OWORD *)v6 + 10) = xmmword_402D48;
  if (*((double *)v6 + 17) < *((double *)v6 + 16))
  {
    char v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *((void *)v6 + 16);
        uint64_t v17 = *((void *)v6 + 17);
        *(_DWORD *)AudioBufferList buf = 136315906;
        CFNumberRef v23 = "VolumeControl.h";
        __int16 v24 = 1024;
        int v25 = 1353;
        __int16 v26 = 2048;
        uint64_t v27 = v16;
        __int16 v28 = 2048;
        uint64_t v29 = v17;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Encountered an invalid range for the variable EQ's current gain parameter: [%f, %f]",  buf,  0x26u);
      }
    }
  }

  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *a3 = v6;
}

void sub_317A18(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_317A70(uint64_t a1@<X0>, uint64_t *a2@<X1>, float **a3@<X8>)
{
  if (!*(_BYTE *)(a1 + 112)) {
    sub_8DEEC();
  }
  char v6 = (float *)operator new(0xB8uLL);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }

  int v18 = *(_DWORD *)(a1 + 64);
  sub_142EF4((uint64_t)v19, (void *)(a1 + 72));
  __int128 v20 = *(_OWORD *)(a1 + 96);
  char v21 = 1;
  sub_1428CC(v6, 1935895666, v9, v8, (uint64_t)&v18);
  if (v21) {
    sub_32C8C(v19[1]);
  }
  uint64_t v13 = (_OWORD *)(a1 + 48);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)char v6 = off_47FA00;
  *((_OWORD *)v6 + 8) = *v13;
  v6[36] = sub_142998((double *)v6);
  *((_DWORD *)v6 + 37) = 1;
  *((void *)v6 + 19) = v7;
  *((void *)v6 + 22) = 0x100000001LL;
  *((_OWORD *)v6 + 10) = xmmword_402D48;
  if (*((double *)v6 + 17) < *((double *)v6 + 16))
  {
    char v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *((void *)v6 + 16);
        uint64_t v17 = *((void *)v6 + 17);
        *(_DWORD *)AudioBufferList buf = 136315906;
        CFNumberRef v23 = "VolumeControl.h";
        __int16 v24 = 1024;
        int v25 = 1353;
        __int16 v26 = 2048;
        uint64_t v27 = v16;
        __int16 v28 = 2048;
        uint64_t v29 = v17;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Encountered an invalid range for the variable EQ's current gain parameter: [%f, %f]",  buf,  0x26u);
      }
    }
  }

  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *a3 = v6;
}

void sub_317C70(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_317CC8(uint64_t a1@<X0>, uint64_t *a2@<X1>, float **a3@<X8>)
{
  if (!*(_BYTE *)(a1 + 112)) {
    sub_8DEEC();
  }
  char v6 = (float *)operator new(0xB8uLL);
  uint64_t v7 = *(void *)(a1 + 120);
  __int128 v18 = *(_OWORD *)(a1 + 20);
  uint64_t v19 = *(void *)(a1 + 36);
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }

  int v20 = *(_DWORD *)(a1 + 64);
  sub_142EF4((uint64_t)v21, (void *)(a1 + 72));
  __int128 v22 = *(_OWORD *)(a1 + 96);
  char v23 = 1;
  sub_1428CC(v6, 1935895666, v9, v8, (uint64_t)&v20);
  if (v23) {
    sub_32C8C(v21[1]);
  }
  uint64_t v13 = (_OWORD *)(a1 + 48);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)char v6 = off_47FA00;
  *((_OWORD *)v6 + 8) = *v13;
  v6[36] = sub_142998((double *)v6);
  *((_DWORD *)v6 + 37) = 1;
  *((void *)v6 + 19) = v7;
  *((_OWORD *)v6 + 10) = v18;
  *((void *)v6 + 22) = v19;
  if (*((double *)v6 + 17) < *((double *)v6 + 16))
  {
    char v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *((void *)v6 + 16);
        uint64_t v17 = *((void *)v6 + 17);
        *(_DWORD *)AudioBufferList buf = 136315906;
        int v25 = "VolumeControl.h";
        __int16 v26 = 1024;
        int v27 = 1365;
        __int16 v28 = 2048;
        uint64_t v29 = v16;
        __int16 v30 = 2048;
        uint64_t v31 = v17;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Encountered an invalid range for the variable EQ's current gain parameter: [%f, %f]",  buf,  0x26u);
      }
    }
  }

  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *a3 = v6;
}

void sub_317ED0(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_317F28(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  char v6 = operator new(0xA8uLL);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *a2;
  char v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }

  sub_3153CC((uint64_t)v6, v8, 0, &xmmword_402D48, v9, v10);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  *a3 = v7;
}

void sub_317FA8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_317FC8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  char v6 = operator new(0xA8uLL);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *a2;
  char v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }

  sub_3163A8((uint64_t)v6, v8, 0, (uint64_t)&xmmword_402D48, v9, v10);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  *a3 = v7;
}

void sub_318048(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_318068()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49DA80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_49DA80))
  {
    int v2 = sub_753A8();
    if (v2) {
      LOBYTE(v2) = (MGGetBoolAnswer(@"DeviceSupportsSiriBargeIn") & 1) != 0
    }
                || sub_1CBB74() && (MGGetBoolAnswer(@"DeviceSupportsStereoAudioRecording") & 1) != 0
                || sub_1CBE08();
    byte_49DA78 = v2;
    __cxa_guard_release(&qword_49DA80);
  }

  return byte_49DA78 == 0;
}

void sub_318100(_Unwind_Exception *a1)
{
}

BOOL sub_318118()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49DA90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_49DA90))
  {
    int v2 = sub_7531C();
    int v3 = qword_49DAC0;
    if (v2) {
      int v3 = 0;
    }
    dword_49DA88 = v3;
    __cxa_guard_release(&qword_49DA90);
  }

  return dword_49DA88 == 1;
}

void sub_318188(_Unwind_Exception *a1)
{
}

BOOL sub_3181A0(int a1, int a2)
{
  uint64_t v2 = qword_49DAA0;
  if (!qword_49DAA0) {
    return 0LL;
  }
  while (1)
  {
    int v4 = *(_DWORD *)(v2 + 32);
    if (v4 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      return 0LL;
    }
  }

  if (v4 < a2)
  {
    v2 += 8LL;
    goto LABEL_6;
  }

  uint64_t v6 = sub_149A00(a2);
  uint64_t v7 = (void *)(v6 + 24);
  int v8 = (uint64_t *)(v6 + 32);
  if (!a1) {
    int v8 = (uint64_t *)(v6 + 8);
  }
  uint64_t v9 = *v8;
  if (!a1) {
    uint64_t v7 = (void *)v6;
  }
  return v9 != *v7;
}

void sub_31821C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49DB00);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_49DB00))
    {
      int v1 = sub_753A8();
      sub_318288(v1);
      __cxa_guard_release(&qword_49DB00);
    }
  }

void sub_318270(_Unwind_Exception *a1)
{
}

float sub_318288(int a1)
{
  if (a1 > 2024)
  {
    if (a1 > 4013)
    {
      if ((a1 - 12002) < 2)
      {
        qword_49DAA8 = 0LL;
        qword_49DAA0 = 0LL;
        qword_49DA98 = (uint64_t)&qword_49DAA0;
        *(_OWORD *)&qword_49DAB0 = xmmword_403360;
        qword_49DAC0 = 0LL;
        dword_49DAC8 = sub_318068();
        return sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
      }

      if ((a1 - 4014) <= 1)
      {
LABEL_3:
        qword_49DAA8 = 0LL;
        qword_49DAA0 = 0LL;
        qword_49DA98 = (uint64_t)&qword_49DAA0;
        LODWORD(qword_49DAB0) = 0;
        else {
          int v1 = 1;
        }
        HIDWORD(qword_49DAB0) = v1;
        *(_OWORD *)&qword_49DAB8 = xmmword_403390;
        dword_49DAC8 = sub_318068();
        return sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
      }
    }

    else
    {
      if ((a1 - 2025) < 2)
      {
LABEL_16:
        sub_318EF8();
        return result;
      }

      if ((a1 - 2028) < 2)
      {
LABEL_12:
        int v4 = (char *)operator new(0x40uLL);
        qmemcpy(v4, "0Vps0Ips1Vps1Ips2Vps2Ips3Vps3Ips4Vps4Ips5Vps5Ips6Vps6Ips7Vps7Ips", 64);
        uint64_t v9 = v4;
        char v10 = v4 + 64;
        unint64_t v11 = v4 + 64;
        uint64_t v12 = 0LL;
        uint64_t v13 = 0LL;
        uint64_t v14 = 0LL;
        sub_318AB0((uint64_t)&v15, 1, (uint64_t)&v9);
        sub_318B38(&v15, 1LL);
        LODWORD(qword_49DAB0) = 1;
        else {
          int v5 = 2;
        }
        HIDWORD(qword_49DAB0) = v5;
        *(_OWORD *)&qword_49DAB8 = xmmword_4033A0;
        dword_49DAC8 = 0;
        sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
LABEL_39:
        if (__p)
        {
          uint64_t v19 = __p;
          operator delete(__p);
        }

        if (v16)
        {
          uint64_t v17 = v16;
          operator delete(v16);
        }

        operator delete(v4);
        return result;
      }

      if (a1 == 2027)
      {
LABEL_35:
        int v4 = (char *)operator new(0x20uLL);
        qmemcpy(v4, "0Vps0Ips1Vps1Ips2Vps2Ips3Vps3Ips", 32);
        uint64_t v9 = v4;
        char v10 = v4 + 32;
        unint64_t v11 = v4 + 32;
        uint64_t v12 = 0LL;
        uint64_t v13 = 0LL;
        uint64_t v14 = 0LL;
        sub_318AB0((uint64_t)&v15, 1, (uint64_t)&v9);
        sub_318B38(&v15, 1LL);
        LODWORD(qword_49DAB0) = 1;
        else {
          int v8 = 2;
        }
        HIDWORD(qword_49DAB0) = v8;
        *(_OWORD *)&qword_49DAB8 = xmmword_403390;
        dword_49DAC8 = sub_318068();
        sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
        goto LABEL_39;
      }
    }

    return sub_319198();
  }

  switch(a1)
  {
    case 9:
    case 10:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
    case 27:
    case 28:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 45:
    case 46:
    case 125:
    case 179:
    case 180:
      int v3 = operator new(0x10uLL);
      *(_OWORD *)int v3 = xmmword_403380;
      sub_318BB8(v3, (uint64_t)(v3 + 4));
      goto LABEL_8;
    case 26:
      int v3 = operator new(0x14uLL);
      v3[4] = 1934640177;
      *(_OWORD *)int v3 = *(_OWORD *)"0Vps0Ips1Vps1Ips1DPs0Vps0Ips02vs0res0fis0fvs1Vps1Ips12vs1res1fis1fvs0Vps0Ips1Vps1Ips0DP"
                                 "s0Vps0Ips1Vps1Ips2Vps2Ips3Vps3Ips1Vps1Ips3Vps3Ips5Vps5Ips7Vps7Ips0Vps0Ips1Vps1Ips2Vps2I"
                                 "ps3Vps3Ips4Vps4Ips5Vps5Ips6Vps6Ips7Vps7Ips2hcddnrsddrsapapspapwpaplpaptsaptlaptaaptmap\t";
      sub_318BB8(v3, (uint64_t)(v3 + 5));
      goto LABEL_8;
    case 29:
    case 30:
    case 42:
    case 43:
      int v3 = operator new(0x30uLL);
      qmemcpy(v3, "0Vps0Ips02vs0res0fis0fvs1Vps1Ips12vs1res1fis1fvs", 48);
      sub_318BB8(v3, (uint64_t)(v3 + 12));
      goto LABEL_8;
    case 31:
      int v3 = operator new(0x14uLL);
      v3[4] = 1934640176;
      *(_OWORD *)int v3 = *(_OWORD *)"0Vps0Ips1Vps1Ips0DPs0Vps0Ips1Vps1Ips2Vps2Ips3Vps3Ips1Vps1Ips3Vps3Ips5Vps5Ips7Vps7Ips0Vps0Ips1Vps1Ips2Vps2Ips3Vps3Ips4Vps4Ips5Vps5Ips6Vps6Ips7Vps7Ips2hcddnrsddrsapapspapwpaplpaptsaptlaptaaptmap\t";
      sub_318BB8(v3, (uint64_t)(v3 + 5));
LABEL_8:
      operator delete(v3);
      break;
    case 72:
    case 73:
    case 74:
    case 75:
      qword_49DAA8 = 0LL;
      qword_49DAA0 = 0LL;
      qword_49DA98 = (uint64_t)&qword_49DAA0;
      *(_OWORD *)&qword_49DAB0 = xmmword_4033B0;
      qword_49DAC0 = 0x100000000LL;
      dword_49DAC8 = sub_318068();
      float result = sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
      break;
    case 77:
    case 78:
    case 80:
    case 81:
    case 83:
    case 84:
    case 85:
    case 86:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 98:
    case 99:
      goto LABEL_16;
    case 87:
    case 88:
      sub_319044();
      break;
    case 96:
    case 97:
    case 100:
    case 101:
    case 104:
    case 105:
    case 106:
    case 107:
      goto LABEL_12;
    case 102:
    case 103:
      goto LABEL_35;
    case 134:
    case 135:
    case 138:
    case 139:
    case 140:
    case 141:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 182:
      goto LABEL_3;
    case 160:
    case 169:
      uint64_t v6 = (char *)operator new(8uLL);
      uint64_t v9 = v6;
      *(void *)uint64_t v6 = 0x7370493073705630LL;
      char v10 = v6 + 8;
      unint64_t v11 = v6 + 8;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      sub_318AB0((uint64_t)&v15, 1, (uint64_t)&v9);
      sub_318B38(&v15, 1LL);
      LODWORD(qword_49DAB0) = 1;
      else {
        int v7 = 2;
      }
      HIDWORD(qword_49DAB0) = v7;
      *(_OWORD *)&qword_49DAB8 = xmmword_4033A0;
      dword_49DAC8 = sub_318068();
      sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
      if (__p)
      {
        uint64_t v19 = __p;
        operator delete(__p);
      }

      if (v16)
      {
        uint64_t v17 = v16;
        operator delete(v16);
      }

      sub_E3704((uint64_t)&v9);
      break;
    case 177:
    case 181:
    case 185:
      qword_49DAA8 = 0LL;
      qword_49DAA0 = 0LL;
      qword_49DA98 = (uint64_t)&qword_49DAA0;
      *(_OWORD *)&qword_49DAB0 = xmmword_403390;
      qword_49DAC0 = 0x100000000LL;
      dword_49DAC8 = sub_318068();
      float result = sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
      break;
    case 192:
      qword_49DAA8 = 0LL;
      qword_49DAA0 = 0LL;
      qword_49DA98 = (uint64_t)&qword_49DAA0;
      *(_OWORD *)&qword_49DAB0 = xmmword_403370;
      qword_49DAC0 = 0LL;
      dword_49DAC8 = sub_318068();
      float result = sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
      break;
    case 193:
    case 194:
      sub_318E58();
      break;
    case 196:
      qword_49DAA8 = 0LL;
      qword_49DAA0 = 0LL;
      qword_49DA98 = (uint64_t)&qword_49DAA0;
      *(_OWORD *)&qword_49DAB0 = xmmword_403390;
      qword_49DAC0 = 0x100000000LL;
      dword_49DAC8 = sub_318068();
      float result = sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
      break;
    default:
      return sub_319198();
  }

  return result;
}

void sub_3189DC(_Unwind_Exception *a1)
{
}

uint64_t sub_318AB0(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  sub_7A5B8( (void *)(a1 + 8),  *(const void **)a3,  *(void *)(a3 + 8),  (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  sub_7A5B8( (void *)(a1 + 32),  *(const void **)(a3 + 24),  *(void *)(a3 + 32),  (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
  return a1;
}

void sub_318B1C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_318B38(int *a1, uint64_t a2)
{
  qword_49DAA8 = 0LL;
  qword_49DAA0 = 0LL;
  qword_49DA98 = (uint64_t)&qword_49DAA0;
  if (a2)
  {
    uint64_t v3 = 56 * a2;
    do
    {
      sub_2C8040((uint64_t ***)&qword_49DA98, (uint64_t **)&qword_49DAA0, *a1, (uint64_t)a1);
      a1 += 14;
      v3 -= 56LL;
    }

    while (v3);
  }

void sub_318BA0(_Unwind_Exception *a1)
{
}

void sub_318BB8(const void *a1, uint64_t a2)
{
  unint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  sub_7A5B8(&v11, a1, a2, (a2 - (uint64_t)a1) >> 2);
  uint64_t v2 = operator new(8uLL);
  std::string __p = v2;
  void *v2 = 0x546F7053426F7453LL;
  int v15 = v2 + 1;
  uint64_t v16 = v2 + 1;
  sub_318AB0((uint64_t)v17, 1, (uint64_t)&v11);
  uint64_t v3 = operator new(8uLL);
  *uint64_t v3 = 0x7370493073705630LL;
  v10[1] = v3 + 1;
  void v10[2] = v3 + 1;
  v10[0] = v3;
  int v4 = operator new(4uLL);
  *int v4 = 1114600531;
  v10[4] = v4 + 1;
  v10[5] = v4 + 1;
  void v10[3] = v4;
  sub_318AB0((uint64_t)v18, 0, (uint64_t)v10);
  sub_318B38(v17, 2LL);
  LODWORD(qword_49DAB0) = 1;
  else {
    int v5 = 2;
  }
  HIDWORD(qword_49DAB0) = v5;
  *(_OWORD *)&qword_49DAB8 = xmmword_4033C0;
  dword_49DAC8 = sub_318068();
  sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
  for (uint64_t i = 0LL; i != -28; i -= 14LL)
  {
    int v7 = &v17[i];
    int v8 = *(void **)&v18[i * 4 + 32];
    if (v8)
    {
      *((void *)v7 + 12) = v8;
      operator delete(v8);
    }

    uint64_t v9 = (void *)*((void *)v7 + 8);
    if (v9)
    {
      *(void *)&v18[i * 4 + 16] = v9;
      operator delete(v9);
    }
  }

  operator delete(v4);
  operator delete(v3);
  if (__p)
  {
    int v15 = __p;
    operator delete(__p);
  }

  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }

void sub_318DA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  for (uint64_t i = 56LL; i != -56; i -= 56LL)
    sub_E36C4(&a22 + i);
  sub_E3704((uint64_t)&a10);
  sub_E3704((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_318E58()
{
  qword_49DAA8 = 0LL;
  qword_49DAA0 = 0LL;
  qword_49DA98 = (uint64_t)&qword_49DAA0;
  *(_OWORD *)&qword_49DAB0 = xmmword_4033B0;
  qword_49DAC0 = 0x100000000LL;
  dword_49DAC8 = sub_318068();
  sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
  dword_49DAC8 = 0;
  LODWORD(qword_49DAB0) = 1;
}

void sub_318EDC(_Unwind_Exception *a1)
{
}

void sub_318EF8()
{
  unsigned __int8 v0 = operator new(0x10uLL);
  _OWORD *v0 = xmmword_403380;
  v2[0] = v0;
  v2[1] = v0 + 1;
  v2[2] = v0 + 1;
  memset(&v2[3], 0, 24);
  sub_318AB0((uint64_t)&v3, 0, (uint64_t)v2);
  sub_318B38(&v3, 1LL);
  LODWORD(qword_49DAB0) = 0;
  else {
    int v1 = 2;
  }
  HIDWORD(qword_49DAB0) = v1;
  *(_OWORD *)&qword_49DAB8 = xmmword_403390;
  dword_49DAC8 = sub_318068();
  sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }

  if (v4)
  {
    int v5 = v4;
    operator delete(v4);
  }

  operator delete(v0);
}

void sub_319008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_319044()
{
  unsigned __int8 v0 = (char *)operator new(0x20uLL);
  qmemcpy(v0, "1Vps1Ips3Vps3Ips5Vps5Ips7Vps7Ips", 32);
  v2[0] = v0;
  v2[1] = v0 + 32;
  v2[2] = v0 + 32;
  memset(&v2[3], 0, 24);
  sub_318AB0((uint64_t)&v3, 1, (uint64_t)v2);
  sub_318B38(&v3, 1LL);
  LODWORD(qword_49DAB0) = 1;
  else {
    int v1 = 2;
  }
  HIDWORD(qword_49DAB0) = v1;
  *(_OWORD *)&qword_49DAB8 = xmmword_4033A0;
  dword_49DAC8 = sub_318068();
  sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }

  if (v4)
  {
    int v5 = v4;
    operator delete(v4);
  }

  operator delete(v0);
}

void sub_31915C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

float sub_319198()
{
  qword_49DAA8 = 0LL;
  qword_49DAA0 = 0LL;
  qword_49DA98 = (uint64_t)&qword_49DAA0;
  qword_49DAB0 = 0x100000000LL;
  qword_49DAB8 = 0LL;
  qword_49DAC0 = 0LL;
  dword_49DAC8 = sub_318068();
  return sub_157A88((uint64_t)&dword_49DAD0, 6u, -58.0, 0.0);
}

void sub_319200(_Unwind_Exception *a1)
{
}

void sub_319220(uint64_t a1)
{
  int v1 = (void *)sub_31A564(a1);
  operator delete(v1);
}

uint64_t sub_319234(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1936879204 || v2 == 1936876644)
  {
    int v10 = a2[1];
    if (v10 == 1869968496)
    {
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v12 = *(void *)(v13 + 528);
      uint64_t v11 = *(void *)(v13 + 520);
    }

    else
    {
      if (v10 != 1768845428) {
        return 0LL;
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 496LL);
      uint64_t v12 = *(void *)(*(void *)(a1 + 8) + 504LL);
    }

    return ((v12 - v11) & 0x7FFFFFFF8LL) != 0;
  }

  if (v2 != 1684236338) {
    return 0LL;
  }
  int v3 = a2[1];
  if (v3 != 1869968496)
  {
    if (v3 == 1768845428)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      int v5 = *(uint64_t **)(v4 + 496);
      uint64_t v6 = *(uint64_t **)(v4 + 504);
      if (v5 != v6)
      {
        unsigned int v7 = 0;
        do
        {
          uint64_t v8 = *v5++;
          v7 += *(_DWORD *)(*(void *)(v8 + 104) + 44LL);
        }

        while (v5 != v6);
        if (v7 > 1) {
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  uint64_t v14 = *(void *)(a1 + 8);
  int v15 = *(uint64_t **)(v14 + 520);
  uint64_t v16 = *(uint64_t **)(v14 + 528);
  if (v15 == v16) {
    return 0LL;
  }
  unsigned int v17 = 0;
  do
  {
    uint64_t v18 = *v15++;
    v17 += *(_DWORD *)(*(void *)(v18 + 104) + 44LL);
  }

  while (v15 != v16);
  return v17 > 1;
}

BOOL sub_319368(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1684236338 || *a2 == 1936879204;
}

uint64_t sub_31938C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1936879204)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = v4 + 496;
    uint64_t v6 = 520LL;
    if (a2[1] == 1768845428) {
      uint64_t v6 = 496LL;
    }
    else {
      uint64_t v5 = v4 + 520;
    }
    unsigned int v7 = *(uint64_t **)(v4 + v6);
    uint64_t v8 = *(uint64_t **)(v5 + 8);
    if (v7 != v8)
    {
      unsigned int v9 = 0;
      do
      {
        uint64_t v10 = *v7++;
        v9 += *(_DWORD *)(*(void *)(v10 + 104) + 44LL);
      }

      while (v7 != v8);
      goto LABEL_22;
    }

    goto LABEL_21;
  }

  if (v2 == 1936876644)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = v11 + 496;
    uint64_t v13 = 520LL;
    if (a2[1] == 1768845428) {
      uint64_t v13 = 496LL;
    }
    else {
      uint64_t v12 = v11 + 520;
    }
    uint64_t v14 = *(uint64_t **)(v11 + v13);
    int v15 = *(uint64_t **)(v12 + 8);
    if (v14 != v15)
    {
      unsigned int v9 = 0;
      do
      {
        uint64_t v16 = *v14++;
        v9 += *(_DWORD *)(*(void *)(v16 + 104) + 44LL);
      }

      while (v14 != v15);
      goto LABEL_22;
    }

uint64_t sub_31949C(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int *a5, unsigned int *a6)
{
  uint64_t v7 = result;
  int v8 = *a2;
  int v9 = a2[1];
  if (*a2 == 1936879204)
  {
    int v13 = *a5;
    if (v13 != (*(unsigned int (**)(uint64_t))(*(void *)result + 32LL))(result))
    {
      __int16 v26 = (os_log_t *)sub_138E8(13);
      int v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v43 = 1024;
        int v44 = 323;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyPreferredChannelLayout",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 561211770;
    }

    if (v9 == 1768845428) {
      uint64_t v14 = 80LL;
    }
    else {
      uint64_t v14 = 88LL;
    }
    (*(void (**)(void, BOOL, unsigned int *))(**(void **)(v7 + 8) + 216LL))( *(void *)(v7 + 8),  v9 == 1768845428,  a6);
    int v15 = *(const __CFDictionary **)(v7 + v14);
    __int16 v32 = v15;
    __int16 v33 = 0;
    if (v15)
    {
      sub_51A88(v15, @"channel layout tag", a6);
      sub_51A88(v32, @"channel bitmap", a6 + 1);
      int v41 = 0;
      sub_51A88(v32, @"number channels", &v41);
      if (!*a6)
      {
        if (sub_529CC(v32, @"channel descriptions", &theArray))
        {
          *(void *)AudioBufferList buf = theArray;
          *(_WORD *)&_DWORD buf[8] = 0;
          if (theArray)
          {
            unint64_t Count = CFArrayGetCount(theArray);
            if (Count)
            {
              if (a6[2])
              {
                unint64_t v17 = 0LL;
                uint64_t v18 = a6 + 5;
                do
                {
                  if (sub_1A0F08((CFArrayRef *)buf, v17, &v39))
                  {
                    char v37 = v39;
                    __int16 v38 = 0;
                    sub_51A88(v39, @"channel label", &a6[5 * v17 + 3]);
                    sub_51A88(v37, @"channel flags", &a6[5 * v17 + 4]);
                    if (sub_529CC(v37, @"coordinates", &v36))
                    {
                      unsigned int v19 = v36;
                      CFArrayRef v34 = v36;
                      __int16 v35 = 0;
                      if (v36) {
                        unsigned int v19 = CFArrayGetCount(v36);
                      }
                      if (v19 >= 3) {
                        uint64_t v20 = 3LL;
                      }
                      else {
                        uint64_t v20 = v19;
                      }
                      if ((_DWORD)v20)
                      {
                        uint64_t v21 = 0LL;
                        __int128 v22 = v18;
                        do
                          sub_1A0E8C(&v34, v21++, v22++);
                        while (v20 != v21);
                      }

                      sub_13818((uint64_t)&v34);
                    }

                    sub_13850((uint64_t)&v37);
                  }

                  if (++v17 >= Count) {
                    break;
                  }
                  v18 += 5;
                }

                while (v17 < a6[2]);
              }
            }
          }

          sub_13818((uint64_t)buf);
        }
      }
    }

    return sub_13850((uint64_t)&v32);
  }

  else if (v8 == 1936876644)
  {
    int v12 = *a5;
    if (v12 != (*(unsigned int (**)(uint64_t))(*(void *)result + 32LL))(result))
    {
      char v23 = (os_log_t *)sub_138E8(13);
      __int16 v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v43 = 1024;
        int v44 = 340;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for 'srdd'",  buf,  0x12u);
      }

      int v25 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v25 = &off_4865A0;
      void v25[2] = 561211770;
    }

    return (*(uint64_t (**)(void, BOOL, unsigned int *))(**(void **)(v7 + 8) + 216LL))( *(void *)(v7 + 8),  v9 == 1768845428,  a6);
  }

  else if (v8 == 1684236338)
  {
    int v10 = *a5;
    if (v10 != (*(unsigned int (**)(uint64_t))(*(void *)result + 32LL))(result))
    {
      uint64_t v29 = (os_log_t *)sub_138E8(13);
      __int16 v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v43 = 1024;
        int v44 = 297;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyPreferredC hannelsForStereo",  buf,  0x12u);
      }

      uint64_t v31 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v31 = &off_4865A0;
      CFStringRef v31[2] = 561211770;
    }

    *(void *)a6 = 0x200000001LL;
    uint64_t v11 = 64LL;
    if (v9 == 1768845428) {
      uint64_t v11 = 56LL;
    }
    *(void *)AudioBufferList buf = *(void *)(v7 + v11);
    *(_WORD *)&_DWORD buf[8] = 0;
    if (*(void *)buf)
    {
      sub_1A0E0C((CFArrayRef *)buf, 0, a6);
      sub_1A0E0C((CFArrayRef *)buf, 1u, a6 + 1);
    }

    if (v9 != 1768845428) {
      *(void *)(v7 + 72) = *(void *)a6;
    }
    return sub_13818((uint64_t)buf);
  }

  return result;
}

void sub_319A10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void *sub_319A78(void *result, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  int v8 = result;
  int v9 = a2[1];
  uint64_t v10 = result[1];
  uint64_t v11 = v10 + 496;
  uint64_t v12 = 520LL;
  if (v9 == 1768845428) {
    uint64_t v12 = 496LL;
  }
  else {
    uint64_t v11 = v10 + 520;
  }
  int v13 = *(uint64_t **)(v10 + v12);
  uint64_t v14 = *(uint64_t **)(v11 + 8);
  if (v13 == v14)
  {
    unsigned int v15 = 0;
  }

  else
  {
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = *v13++;
      v15 += *(_DWORD *)(*(void *)(v16 + 104) + 44LL);
    }

    while (v13 != v14);
  }

  if (*a2 == 1936879204)
  {
    if ((*(unsigned int (**)(void *, _DWORD *))(*result + 32LL))(result, a2) != a5)
    {
      __int16 v48 = (os_log_t *)sub_138E8(13);
      int v49 = *v48;
      if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v60 = 1024;
        int v61 = 401;
        _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyPreferredChannelLayout",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 561211770;
    }

    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    __int16 v52 = 257;
    sub_13408((uint64_t)&Mutable, @"channel layout tag", *a6);
    sub_13408((uint64_t)&Mutable, @"channel bitmap", a6[1]);
    sub_13408((uint64_t)&Mutable, @"number channels", a6[2]);
    if (!*a6)
    {
      CFMutableArrayRef v30 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
      if (v30)
      {
        if (a6[2])
        {
          unint64_t v31 = 0LL;
          __int16 v32 = a6 + 5;
          do
          {
            CFMutableDictionaryRef theDict = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            __int16 v57 = 257;
            if (theDict)
            {
              sub_13408((uint64_t)&theDict, @"channel label", a6[5 * v31 + 3]);
              sub_13408((uint64_t)&theDict, @"channel flags", a6[5 * v31 + 4]);
              __int16 v33 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
              CFMutableArrayRef theArray = v33;
              __int16 v55 = 257;
              if (v33)
              {
                for (uint64_t i = 0LL; i != 3; ++i)
                {
                  if (v33 && HIBYTE(v55))
                  {
                    int valuePtr = v32[i];
                    CFNumberRef v35 = CFNumberCreate(0LL, kCFNumberFloat32Type, &valuePtr);
                    *(void *)AudioBufferList buf = v35;
                    _DWORD buf[8] = 1;
                    if (v35 && theArray && HIBYTE(v55)) {
                      CFArrayAppendValue(theArray, v35);
                    }
                    sub_1348C((uint64_t)buf);
                  }

                  __int16 v33 = theArray;
                }

                if (HIBYTE(v57) && theArray && theDict) {
                  CFDictionarySetValue(theDict, @"coordinates", theArray);
                }
              }

              if (__p.__r_.__value_.__r.__words[0] && __p.__r_.__value_.__s.__data_[9]) {
                CFArrayAppendValue((CFMutableArrayRef)__p.__r_.__value_.__l.__data_, theDict);
              }
              sub_13818((uint64_t)&theArray);
            }

            sub_13850((uint64_t)&theDict);
            ++v31;
            v32 += 5;
          }

          while (v31 < a6[2]);
          CFMutableArrayRef v30 = (CFMutableArrayRef)__p.__r_.__value_.__r.__words[0];
        }

        if (HIBYTE(v52) && v30 && Mutable) {
          CFDictionarySetValue(Mutable, @"channel descriptions", v30);
        }
      }

      sub_13818((uint64_t)&__p);
    }

    uint64_t v36 = 6LL;
    if (v9 == 1768845428) {
      uint64_t v36 = 5LL;
    }
    char v37 = (const __CFString *)v8[v36];
    sub_2F022C(v37, Mutable);
    __int16 v38 = (os_log_t *)sub_138E8(5);
    char v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
    {
      sub_151D60(&__p, Mutable);
      int v40 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
      __int16 v60 = 1024;
      int v61 = 414;
      __int16 v62 = 2112;
      unint64_t v63 = v37;
      __int16 v64 = 2080;
      uint64_t v65 = v40;
      _os_log_impl(&dword_0, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set default %@: %s.", buf, 0x26u);
    }

    if (v9 == 1768845428) {
      uint64_t v41 = 10LL;
    }
    else {
      uint64_t v41 = 11LL;
    }
    int v42 = (const void *)v8[v41];
    __int16 v43 = sub_2F0148(v37);
    if (v42) {
      CFRelease(v42);
    }
    v8[v41] = v43;
    (*(void (**)(void, uint64_t, _DWORD *, uint64_t))(*(void *)v8[1] + 72LL))(v8[1], 1LL, a2, 1LL);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotificationWithOptions(DarwinNotifyCenter, v37, 0LL, 0LL, 0LL);
    return (void *)sub_13850((uint64_t)&Mutable);
  }

  else if (*a2 == 1684236338)
  {
    if ((*(unsigned int (**)(void *, _DWORD *))(*result + 32LL))(result, a2) != a5)
    {
      int v45 = (os_log_t *)sub_138E8(13);
      __int16 v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v60 = 1024;
        int v61 = 359;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyPreferredC hannelsForStereo",  buf,  0x12u);
      }

      __int16 v47 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v47 = &off_4865A0;
      v47[2] = 561211770;
    }

    CFMutableDictionaryRef theDict = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    __int16 v57 = 257;
    unsigned int v17 = *a6;
    if (v15 >= v17) {
      int v18 = v17;
    }
    else {
      int v18 = v15;
    }
    sub_1378C((uint64_t)&theDict, v18);
    unsigned int v19 = a6[1];
    if (v19 <= 1) {
      unsigned int v19 = 1;
    }
    if (v15 >= v19) {
      int v20 = v19;
    }
    else {
      int v20 = v15;
    }
    sub_1378C((uint64_t)&theDict, v20);
    uint64_t v21 = 4LL;
    if (v9 == 1768845428) {
      uint64_t v21 = 3LL;
    }
    __int128 v22 = (const __CFString *)v8[v21];
    sub_2F022C(v22, theDict);
    char v23 = (os_log_t *)sub_138E8(5);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
    {
      sub_151A78(&__p, theDict);
      int v25 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
      __int16 v60 = 1024;
      int v61 = 375;
      __int16 v62 = 2112;
      unint64_t v63 = v22;
      __int16 v64 = 2080;
      uint64_t v65 = v25;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set default %@: %s.", buf, 0x26u);
    }

    if (v9 == 1768845428) {
      uint64_t v26 = 7LL;
    }
    else {
      uint64_t v26 = 8LL;
    }
    int v27 = (const void *)v8[v26];
    __int16 v28 = sub_2F0064(v22);
    if (v27) {
      CFRelease(v27);
    }
    v8[v26] = v28;
    (*(void (**)(void, uint64_t, _DWORD *, uint64_t))(*(void *)v8[1] + 72LL))(v8[1], 1LL, a2, 1LL);
    uint64_t v29 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotificationWithOptions(v29, v22, 0LL, 0LL, 0LL);
    return (void *)sub_13818((uint64_t)&theDict);
  }

  return result;
}

void sub_31A20C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_31A2A4()
{
  return 3LL;
}

double sub_31A2AC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 2) {
    *(_DWORD *)a3 = *(_DWORD *)&a0vps0ips1vps1i[4 * a2 + 216];
  }
  double result = NAN;
  *(void *)(a3 + 4) = -3587560918LL;
  return result;
}

uint64_t sub_31A2D4(const __CFString **a1)
{
  int v2 = (os_log_t *)sub_138E8(5);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[3];
    int v15 = 136315650;
    uint64_t v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 444;
    __int16 v19 = 2112;
    int v20 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }

  sub_2F0298(a1[4]);
  uint64_t v5 = (os_log_t *)sub_138E8(5);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[4];
    int v15 = 136315650;
    uint64_t v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 446;
    __int16 v19 = 2112;
    int v20 = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }

  sub_2F0298(a1[5]);
  int v8 = (os_log_t *)sub_138E8(5);
  int v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[5];
    int v15 = 136315650;
    uint64_t v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 448;
    __int16 v19 = 2112;
    int v20 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }

  sub_2F0298(a1[6]);
  uint64_t v11 = (os_log_t *)sub_138E8(5);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = a1[6];
    int v15 = 136315650;
    uint64_t v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 450;
    __int16 v19 = 2112;
    int v20 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }

  uint64_t result = CFPreferencesSynchronize(kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  byte_49D0D0 = 0;
  return result;
}

uint64_t sub_31A564(uint64_t a1)
{
  *(void *)a1 = off_480150;
  int v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 88);
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 24));
  sub_31A6E0();
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  int v7 = (*(uint64_t (**)(uint64_t *))(qword_49DB28 + 16))(&qword_49DB28);
  if (qword_49DB10)
  {
    int v8 = &qword_49DB10;
    uint64_t v9 = qword_49DB10;
    do
    {
      unsigned int v10 = *(_DWORD *)(v9 + 32);
      BOOL v11 = v10 >= v6;
      if (v10 >= v6) {
        uint64_t v12 = (uint64_t *)v9;
      }
      else {
        uint64_t v12 = (uint64_t *)(v9 + 8);
      }
      if (v11) {
        int v8 = (uint64_t *)v9;
      }
      uint64_t v9 = *v12;
    }

    while (*v12);
    if (v8 != &qword_49DB10 && *((_DWORD *)v8 + 8) <= v6)
    {
      int v13 = (uint64_t *)v8[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = (uint64_t *)*v13;
        }

        while (v13);
      }

      else
      {
        int v15 = v8;
        do
        {
          uint64_t v14 = (uint64_t *)v15[2];
          BOOL v16 = *v14 == (void)v15;
          int v15 = v14;
        }

        while (!v16);
      }

      --qword_49DB18;
      sub_911E8((uint64_t *)qword_49DB10, v8);
      operator delete(v8);
    }
  }

  if (v7) {
    (*(void (**)(uint64_t *))(qword_49DB28 + 24))(&qword_49DB28);
  }
  return a1;
}

void sub_31A6E0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49DB80);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_49DB80))
    {
      sub_31A748();
      __cxa_guard_release(&qword_49DB80);
    }
  }

void sub_31A730(_Unwind_Exception *a1)
{
}

uint64_t sub_31A748()
{
  qword_49DB18 = 0LL;
  qword_49DB10 = 0LL;
  qword_49DB08 = (uint64_t)&qword_49DB10;
  dword_49DB20 = 256;
  return sub_B1F7C((uint64_t)&qword_49DB28, (uint64_t)"CATokenMap Mutex");
}

void sub_31A790(_Unwind_Exception *a1)
{
}

void *sub_31A7B0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480360;
  return result;
}

void sub_31A7D4(uint64_t a1, void *a2)
{
  *a2 = &off_480360;
}

BOOL sub_31A7EC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_31A80C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480318;
  return result;
}

void sub_31A830(uint64_t a1, void *a2)
{
  *a2 = &off_480318;
}

BOOL sub_31A848(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_31A868()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4802D0;
  return result;
}

void sub_31A88C(uint64_t a1, void *a2)
{
  *a2 = &off_4802D0;
}

uint64_t sub_31A8A4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_31A904()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480288;
  return result;
}

void sub_31A928(uint64_t a1, void *a2)
{
  *a2 = &off_480288;
}

uint64_t sub_31A940(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_31A958()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480240;
  return result;
}

void sub_31A97C(uint64_t a1, void *a2)
{
  *a2 = &off_480240;
}

uint64_t sub_31A994(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_31A9AC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4801F8;
  return result;
}

void sub_31A9D0(uint64_t a1, void *a2)
{
  *a2 = &off_4801F8;
}

BOOL sub_31A9E8(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_31AA0C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4801B0;
  return result;
}

void sub_31AA30(uint64_t a1, void *a2)
{
  *a2 = &off_4801B0;
}

uint64_t sub_31AA48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

uint64_t sub_31AA58(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &off_46FD40;
  *(_WORD *)(a1 + 520) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &off_4803A8;
  return a1;
}

void sub_31AB0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_31AB2C(uint64_t a1)
{
  int v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_31AB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)v7;
  sub_7A668(v8);
  return a1;
}

void sub_31ABDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13)
{
  a12 = (void **)&a9;
  sub_7A668(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_31AC08(uint64_t a1, uint64_t a2)
{
  if (v9 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  char v11 = 1;
  CFStringRef v12 = CFStringCreateWithCString(0LL, p_p, 0x600u);
  char v13 = 1;
  CFMutableStringRef theString = CFStringCreateMutableCopy(0LL, 0LL, v12);
  sub_19DFC((uint64_t)&v12);
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t v4 = (__CFString *)CFStringCreateWithCString(0LL, "-Injection", 0x600u);
  std::string __p = v4;
  char v8 = 1;
  if (theString) {
    CFStringAppend(theString, v4);
  }
  sub_19DFC((uint64_t)&__p);
  CFMutableStringRef v5 = theString;
  *(void *)a1 = theString;
  *(_BYTE *)(a1 + 8) = 1;
  CFRetain(v5);
  return sub_D9A64((uint64_t)&theString);
}

void sub_31ACDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_31AD38(uint64_t a1)
{
  int v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

void *sub_31AD54()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4809B8;
  return result;
}

void sub_31AD78(uint64_t a1, void *a2)
{
  *a2 = &off_4809B8;
}

BOOL sub_31AD90(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_31ADB0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480970;
  return result;
}

void sub_31ADD4(uint64_t a1, void *a2)
{
  *a2 = &off_480970;
}

BOOL sub_31ADEC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_31AE0C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480928;
  return result;
}

void sub_31AE30(uint64_t a1, void *a2)
{
  *a2 = &off_480928;
}

uint64_t sub_31AE48(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_31AEA8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4808E0;
  return result;
}

void sub_31AECC(uint64_t a1, void *a2)
{
  *a2 = &off_4808E0;
}

uint64_t sub_31AEE4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_31AEFC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480898;
  return result;
}

void sub_31AF20(uint64_t a1, void *a2)
{
  *a2 = &off_480898;
}

uint64_t sub_31AF38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_31AF50()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480850;
  return result;
}

void sub_31AF74(uint64_t a1, void *a2)
{
  *a2 = &off_480850;
}

BOOL sub_31AF8C(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_31AFB0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480808;
  return result;
}

void sub_31AFD4(uint64_t a1, void *a2)
{
  *a2 = &off_480808;
}

uint64_t sub_31AFEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

void *sub_31B004()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480BB0;
  return result;
}

void sub_31B028(uint64_t a1, void *a2)
{
  *a2 = &off_480BB0;
}

BOOL sub_31B040(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_31B060()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480B68;
  return result;
}

void sub_31B084(uint64_t a1, void *a2)
{
  *a2 = &off_480B68;
}

BOOL sub_31B09C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_31B0BC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480B20;
  return result;
}

void sub_31B0E0(uint64_t a1, void *a2)
{
  *a2 = &off_480B20;
}

uint64_t sub_31B0F8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_31B158()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480AD8;
  return result;
}

void sub_31B17C(uint64_t a1, void *a2)
{
  *a2 = &off_480AD8;
}

uint64_t sub_31B194(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_31B1AC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480A90;
  return result;
}

void sub_31B1D0(uint64_t a1, void *a2)
{
  *a2 = &off_480A90;
}

uint64_t sub_31B1E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_31B200()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480A48;
  return result;
}

void sub_31B224(uint64_t a1, void *a2)
{
  *a2 = &off_480A48;
}

BOOL sub_31B23C(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_31B260()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_480A00;
  return result;
}

void sub_31B284(uint64_t a1, void *a2)
{
  *a2 = &off_480A00;
}

uint64_t sub_31B29C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

uint64_t sub_31B2AC(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (v2) {
    sub_2893F4(v2);
  }
  sub_AB45C((uint64_t *)(a1 + 8));
  return a1;
}

void sub_31B31C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v15 = __cxa_begin_catch(exception_object);
    BOOL v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(sub_C590C(__dst, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(sub_C590C(__dst, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 85;
      __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    __int128 v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      char v23 = v22;
      __int16 v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(sub_C590C(__dst, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 85;
        __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      int v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(sub_C590C(__dst, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 85;
        __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x31B2E0LL);
}

uint64_t sub_31B568( AudioObjectID *a1, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v4 = sub_138E8(16);
  uint64_t v5 = sub_138E8(31);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)uint64_t v14 = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v14[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0)
    {
      if ((v8 & 1) == 0) {
        return AudioDeviceStart(*a1, a2);
      }
      goto LABEL_9;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if ((*(void *)(v4 + 8) & 1) != 0)
  {
LABEL_9:
    char v11 = *(os_log_s **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v12 = *a1;
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)&int v14[4] = "Aggregate_HAL_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 112;
      __int16 v17 = 1024;
      AudioObjectID v18 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting IO on Aggregate %u", v14, 0x18u);
    }
  }

  return AudioDeviceStart(*a1, a2);
}

uint64_t sub_31B6B8( AudioObjectID *a1, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v4 = sub_138E8(16);
  uint64_t v5 = sub_138E8(31);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)uint64_t v14 = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v14[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0)
    {
      if ((v8 & 1) == 0) {
        return AudioDeviceStop(*a1, a2);
      }
      goto LABEL_9;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if ((*(void *)(v4 + 8) & 1) != 0)
  {
LABEL_9:
    char v11 = *(os_log_s **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v12 = *a1;
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)&int v14[4] = "Aggregate_HAL_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 126;
      __int16 v17 = 1024;
      AudioObjectID v18 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stopping IO on Aggregate %u", v14, 0x18u);
    }
  }

  return AudioDeviceStop(*a1, a2);
}

uint64_t sub_31B808(uint64_t a1)
{
  *(void *)a1 = off_480BF8;
  sub_19DFC(a1 + 744);
  sub_19DFC(a1 + 728);
  *(void *)(a1 + 640) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 664));
  return sub_F9108(a1);
}

void sub_31B85C(uint64_t a1)
{
  *(void *)a1 = off_480BF8;
  sub_19DFC(a1 + 744);
  sub_19DFC(a1 + 728);
  *(void *)(a1 + 640) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 664));
  int v2 = (void *)sub_F9108(a1);
  operator delete(v2);
}

uint64_t sub_31B8B4(_WORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_WORD *))(*(void *)a1 + 160LL))(a1);
  if ((_DWORD)result) {
    return (a1[92] & 1) == 0;
  }
  return result;
}

uint64_t sub_31B8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  AudioObjectID v12 = wmemchr((const __int32 *)"apapspapwpaplpaptsaptlaptaaptmap\t", a5, 8uLL);
  char v13 = "\t";
  if (v12) {
    char v13 = (char *)v12;
  }
  if (v13 - "apapspapwpaplpaptsaptlaptaaptmap\t" == 32)
  {
    __int16 v33 = (os_log_t *)sub_138E8(13);
    CFArrayRef v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v40 = 136315394;
      *(void *)&v40[4] = "Port_AirPlay_Aspen.cpp";
      __int16 v41 = 1024;
      *(_DWORD *)int v42 = 35;
      _os_log_impl(&dword_0, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v40, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(_DWORD *)AudioBufferList buf = a5;
  *(void *)&uint8_t buf[4] = 0x6570756E70632177LL;
  LOBYTE(v47) = 1;
  sub_86550((uint64_t *)((char *)&v48 + 2), (uint64_t)&unk_49F030);
  __int16 v14 = sub_203D48(a5);
  if ((_DWORD)a5 == 1885433975) {
    __int16 v15 = 12;
  }
  else {
    __int16 v15 = 14;
  }
  LOWORD(v52) = v15 | v14 | (unsigned __int16)v52 & 0xFFF0;
  if (sub_203D48(a5)) {
    __int16 v16 = 1728;
  }
  else {
    __int16 v16 = 1744;
  }
  LOWORD(v52) = (unsigned __int16)v52 & 0xF80F | v16;
  __int16 v17 = operator new(0x10uLL);
  *__int16 v17 = xmmword_4033D0;
  v39[1] = v17 + 1;
  v39[2] = v17 + 1;
  v39[0] = v17;
  AudioObjectID v18 = *(const void **)a3;
  *(void *)int v40 = *(void *)a3;
  v40[8] = *(_BYTE *)(a3 + 8);
  if (v40[8] && v18) {
    CFRetain(v18);
  }
  *(void *)&v42[2] = 0LL;
  char v43 = 1;
  uint64_t v44 = 0LL;
  char v45 = 1;
  memset(v38, 0, sizeof(v38));
  sub_48E98(__p, *(CFStringRef *)a4);
  sub_FABCC(a1, (uint64_t *)buf, a2, (uint64_t)v39, (uint64_t)v40, a4, v38, (__int128 *)__p, a6, 1);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v38;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)&v44);
  sub_19DFC((uint64_t)&v42[2]);
  sub_19DFC((uint64_t)v40);
  operator delete(v17);
  sub_32C8C(*(void **)&v50[4]);
  *(void *)a1 = off_480BF8;
  sub_B1F7C(a1 + 640, (uint64_t)"Port_AirPlay_Aspen mutex");
  *(void *)(a1 + 728) = 0LL;
  *(_BYTE *)(a1 + 736) = 1;
  CFStringRef v19 = *(CFStringRef *)a4;
  *(void *)(a1 + 744) = *(void *)a4;
  int v20 = *(unsigned __int8 *)(a4 + 8);
  *(_BYTE *)(a1 + 752) = v20;
  if (v20 && v19) {
    CFRetain(v19);
  }
  uint64_t v21 = sub_138E8(23);
  uint64_t v22 = sub_138E8(27);
  char v23 = 0;
  uint64_t v24 = 0LL;
  *(void *)AudioBufferList buf = 0x100000002LL;
  uint64_t v25 = *(void *)(v21 + 8);
  while (1)
  {
    uint64_t v26 = *(int *)&buf[4 * v24];
    char v27 = v23;
    if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
      break;
    }
    char v23 = 1;
    uint64_t v24 = 1LL;
    if ((v27 & 1) != 0) {
      goto LABEL_24;
    }
  }

  if ((v25 & v26) == 0) {
    uint64_t v21 = v22;
  }
LABEL_24:
  os_log_t v28 = *(os_log_s **)v21;
  if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(v40, a5);
    if (v42[9] >= 0) {
      uint64_t v29 = v40;
    }
    else {
      uint64_t v29 = *(_BYTE **)v40;
    }
    uint64_t v30 = *(void *)(a1 + 728);
    CFStringRef v31 = *(CFStringRef *)a4;
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "Port_AirPlay_Aspen.cpp";
    __int16 v47 = 1024;
    int v48 = 85;
    __int16 v49 = 2080;
    *(void *)__int16 v50 = v29;
    *(_WORD *)&v50[8] = 2112;
    *(void *)&v50[10] = v30;
    __int16 v51 = 2112;
    CFStringRef v52 = v31;
    _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating an AirPlay port '%s' from AirPlay with audio object id '%@', and AirPlay device UID '%@'.",  buf,  0x30u);
    if ((v42[9] & 0x80000000) != 0) {
      operator delete(*(void **)v40);
    }
  }

  return a1;
}

void sub_31BD2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  *(void *)(v31 + 640) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v31 + 664));
  sub_F9108(v31);
  _Unwind_Resume(a1);
}

void sub_31BE10(unint64_t a1)
{
  int v1 = (void *)sub_1958B8(a1);
  operator delete(v1);
}

uint64_t sub_31BE24(uint64_t a1, void *a2)
{
  int v3 = (unsigned int *)(a1 + 680);
  *(_WORD *)&std::string buf[2] = *(_WORD *)(a1 + 682);
  *(_WORD *)AudioBufferList buf = *(_WORD *)(a1 + 682);
  HIWORD(v12) = *(_WORD *)(a1 + 682) == 0;
  LOWORD(v12) = *(_WORD *)(a1 + 682);
  while (1)
  {
    unsigned int v4 = __ldaxr(v3);
    if (v4 != *(_DWORD *)buf) {
      break;
    }
    if (!__stlxr(v12, v3)) {
      goto LABEL_6;
    }
  }

  __clrex();
LABEL_6:
  uint64_t v5 = a1 + 400;
  uint64_t v6 = 400LL;
  if (!*(_WORD *)(a1 + 682))
  {
    uint64_t v6 = 424LL;
    uint64_t v5 = a1 + 424;
  }

  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(v5 + 8);
  if (v7 == v8)
  {
LABEL_11:
    uint64_t v9 = (os_log_t *)sub_138E8(24);
    char v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int16 v14 = "DSPChain_SpeakerProtection.cpp";
      __int16 v15 = 1024;
      int v16 = 60;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Speaker Protection DSP missing for speaker route. Output will be manually attenuated by -20dB !!",  buf,  0x12u);
    }

    *(_DWORD *)(a1 + 1140) = 1036831949;
  }

  else
  {
    while ((*(unsigned int (**)(void))(**(void **)(v7 + 8) + 152LL))(*(void *)(v7 + 8)) != 1936748595)
    {
      v7 += 24LL;
      if (v7 == v8) {
        goto LABEL_11;
      }
    }
  }

  return 1LL;
}

void sub_31BFA8( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int **a5, unsigned int a6, unsigned int **a7)
{
  unsigned int v9 = a3;
  sub_302C4(a1, a2, a3, a4, a5, a6, a7);
  if (*(float *)(a1 + 1136) != *(float *)(a1 + 1140) && a6 != 0)
  {
    uint64_t v12 = 0LL;
    do
    {
      char v13 = a7[v12];
      if (!v13) {
        break;
      }
      if (*v13)
      {
        unint64_t v14 = 0LL;
        uint64_t v15 = 4LL;
        do
        {
          int v16 = *(float **)&v13[v15];
          float __B = *(float *)(a1 + 1140);
          vDSP_vsmul(v16, 1LL, &__B, v16, 1LL, v9);
          ++v14;
          v15 += 4LL;
        }

        while (v14 < *v13);
      }

      ++v12;
    }

    while (v12 != a6);
  }

void sub_31C074(uint64_t a1)
{
  int v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_31C088(os_unfair_lock_s *a1)
{
  int v2 = (os_log_t *)sub_138E8(17);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_ContinuityScreen_Aspen.cpp";
    __int16 v45 = 1024;
    int v46 = 20;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d initializing Device_HAL_Common", buf, 0x12u);
  }

  sub_36A36C(a1);
  unsigned int v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_ContinuityScreen_Aspen.cpp";
    __int16 v45 = 1024;
    int v46 = 22;
    __int16 v47 = 1024;
    *(_DWORD *)int v48 = 1;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d initialized Device_HAL_Common: %u", buf, 0x18u);
  }

  uint64_t v6 = (os_log_t *)sub_138E8(17);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_ContinuityScreen_Aspen.cpp";
    __int16 v45 = 1024;
    int v46 = 26;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating controls and ports", buf, 0x12u);
  }

  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  1LL))
  {
    uint64_t v8 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v8, 0);
    sub_1D5AE0(a1, (uint64_t)v8);
    unsigned int v9 = operator new(0x50uLL);
    sub_EC558((uint64_t)v9);
    sub_1D5AE0(a1, (uint64_t)v9);
    sub_1D580C((uint64_t)a1, 1u, 1885565807LL, (uint64_t)v8);
    sub_1D55D4((uint64_t *)a1, 1u, 1885565807LL, (uint64_t)v9);
    sub_F9584((uint64_t)v33, 1885565807LL, a1[67]._os_unfair_lock_opaque);
    (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v32,  a1);
    char v10 = (std::__shared_weak_count *)operator new(0x228uLL);
    v10->__shared_owners_ = 0LL;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__shared_weak_owners_ = 0LL;
    v10->__vftable = (std::__shared_weak_count_vtbl *)off_4810E8;
    strcpy(buf, "oscpibcp");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LOBYTE(v45) = 0;
    sub_86550((uint64_t *)((char *)&v46 + 2), (uint64_t)&unk_492F38);
    LOWORD(v50) = (unsigned __int16)v50 & 0xF800 | 0x3C;
    memset(v43, 0, sizeof(v43));
    int v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    sub_7D084(__p, "");
    uint64_t v12 = v10 + 1;
    sub_F9638( (uint64_t)&v10[1],  (uint64_t *)buf,  (uint64_t)a1,  (uint64_t)v43,  (uint64_t)v33,  (uint64_t)v32,  &v40,  (__int128 *)__p);
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
    LOWORD(v10[22].__shared_weak_owners_) = 0;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v40;
    sub_7A668((void ***)__p);
    sub_32C8C(*(void **)&v48[4]);
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_478D90;
    char v13 = (os_log_t *)sub_138E8(17);
    unint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      ((void (*)(void *__return_ptr, std::__shared_weak_count *))v12->__vftable[3].__get_deleter)( v43,  v10 + 1);
      uint64_t v15 = v43[0];
      shared_owners = (char *)v10[11].__shared_owners_;
      int v40 = shared_owners;
      LOBYTE(v41) = v10[11].__shared_weak_owners_;
      if ((_BYTE)v41 && shared_owners) {
        CFRetain(shared_owners);
      }
      (*((void (**)(void **__return_ptr))v10[9].~__shared_weak_count + 57))(__p);
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_ContinuityScreen_Aspen.cpp";
      __int16 v45 = 1024;
      int v46 = 55;
      __int16 v47 = 2112;
      *(void *)int v48 = v15;
      *(_WORD *)&v48[8] = 2112;
      *(void *)&v48[10] = shared_owners;
      __int16 v49 = 2112;
      __int16 v50 = __p[0];
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a port with name %@, uid %@, and model uid %@",  buf,  0x30u);
      if (__p[0]) {
        CFRelease(__p[0]);
      }
      sub_19DFC((uint64_t)&v40);
      sub_19DFC((uint64_t)v43);
    }

    *(void *)&__int128 v36 = v10 + 1;
    *((void *)&v36 + 1) = v10;
    shared_weak_owners = (std::__shared_weak_count *)v10[4].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_34:
        __int128 v37 = v36;
        __int128 v36 = 0uLL;
        sub_3711D4((uint64_t)a1, (void ***)&v37);
        uint64_t v25 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        if (*((void *)&v37 + 1))
        {
          uint64_t v26 = (unint64_t *)(*((void *)&v37 + 1) + 8LL);
          do
            unint64_t v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }

        os_log_t v28 = (std::__shared_weak_count *)*((void *)&v36 + 1);
        if (*((void *)&v36 + 1))
        {
          uint64_t v29 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
          do
            unint64_t v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }

        sub_19DFC((uint64_t)v32);
        sub_19DFC((uint64_t)&v35);
        sub_19DFC((uint64_t)&v34);
        sub_19DFC((uint64_t)v33);
        return 1LL;
      }

      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        unint64_t v20 = __ldxr(p_shared_weak_owners);
      while (__stxr(v20 + 1, p_shared_weak_owners));
      v10[4].__shared_owners_ = (uint64_t)v12;
      v10[4].__shared_weak_owners_ = (uint64_t)v10;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }

    else
    {
      do
        unint64_t v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      uint64_t v22 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        unint64_t v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v10[4].__shared_owners_ = (uint64_t)v12;
      v10[4].__shared_weak_owners_ = (uint64_t)v10;
    }

    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }

    goto LABEL_34;
  }

  return 1LL;
}

void sub_31C628( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_31C718(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885565807)
  {
    int v3 = (os_log_t *)sub_138E8(17);
    unsigned int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      char v13 = "Device_ContinuityScreen_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 53;
      __int16 v16 = 2080;
      __int16 v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      char v13 = "Device_ContinuityScreen_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 54;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_31C8C4(_Unwind_Exception *a1)
{
}

uint64_t sub_31C8E0()
{
  return 0x100000001LL;
}

void sub_31C8E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4810E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_31C8F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4810E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_31C918(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_31C92C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a3 + 8) != 1819304813) {
    return;
  }
  if (!*(void *)(a4 + 16))
  {
    uint64_t v69 = (os_log_t *)sub_138E8(13);
    CFDictionaryRef v70 = *v69;
    if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v79 = 136315394;
      *(void *)&v79[4] = "AudioIOMonitor.cpp";
      *(_WORD *)&v79[12] = 1024;
      *(_DWORD *)&v79[14] = 301;
      _os_log_impl(&dword_0, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v79, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_B8F68(&v75, (uint64_t *)(*(void *)(a4 + 8) + 16LL), "", 302);
  if (*(void *)(a4 + 16) <= 1uLL) {
    uint64_t v8 = *(unsigned int *)(v75 + 144);
  }
  else {
    uint64_t v8 = 1651663971LL;
  }
  __int16 v9 = *(_WORD *)(v75 + 184);
  sub_313F0(v79);
  char v10 = std::string::append((std::string *)v79, "/AudioCapture", 0xDuLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  if ((v79[23] & 0x80000000) != 0) {
    operator delete(*(void **)v79);
  }
  uint64_t v12 = std::string::append(&v78, "/VA", 3uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t cap = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)int v73 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  sub_313F0(v79);
  __int16 v14 = std::string::append((std::string *)v79, "/AudioCapture", 0xDuLL);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if ((v79[23] & 0x80000000) != 0) {
    operator delete(*(void **)v79);
  }
  __int16 v16 = std::string::append(&v78, "/ANC", 4uLL);
  std::string v72 = (void *)v16->__r_.__value_.__r.__words[0];
  int size = (char)v16->__r_.__value_.__s.__size_;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_48E900);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_48E900))
  {
    qword_48E8F0 = 0LL;
    byte_48E8F8 = 1;
    __cxa_guard_release(&qword_48E900);
  }

  if ((byte_48E908 & 1) == 0)
  {
    if (sub_14BA08( @"RingBufferDuration",  @"com.apple.audio.virtualaudio",  (uint64_t)&qword_48E8F0))
    {
      CFStringRef v19 = (os_log_t *)sub_138E8(13);
      unint64_t v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v79 = 136315906;
        *(void *)&v79[4] = "RunTimeDefaults.cpp";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 1917;
        *(_WORD *)&v79[18] = 2080;
        *(void *)&v79[20] = "RingBufferDuration";
        __int16 v80 = 2112;
        uint64_t v81 = qword_48E8F0;
        _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %@", v79, 0x26u);
      }

      *(void *)uint64_t v79 = CFStringCreateWithCString(0LL, "short", 0x600u);
      v79[8] = 1;
      CFComparisonResult v21 = CFStringCompare((CFStringRef)qword_48E8F0, *(CFStringRef *)v79, 0LL);
      sub_19DFC((uint64_t)v79);
      if (v21)
      {
        *(void *)uint64_t v79 = CFStringCreateWithCString(0LL, "normal", 0x600u);
        v79[8] = 1;
        CFComparisonResult v22 = CFStringCompare((CFStringRef)qword_48E8F0, *(CFStringRef *)v79, 0LL);
        sub_19DFC((uint64_t)v79);
        if (v22)
        {
          *(void *)uint64_t v79 = CFStringCreateWithCString(0LL, "long", 0x600u);
          v79[8] = 1;
          CFComparisonResult v23 = CFStringCompare((CFStringRef)qword_48E8F0, *(CFStringRef *)v79, 0LL);
          sub_19DFC((uint64_t)v79);
          if (v23)
          {
LABEL_40:
            byte_48E908 = 1;
            goto LABEL_41;
          }

          uint64_t v24 = 0x400000LL;
        }

        else
        {
          uint64_t v24 = 0x200000LL;
        }

void sub_31D4D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (v34 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_7A768((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_31D5F4()
{
  uint64_t v0 = sub_138E8(40);
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    int v1 = *(os_log_s **)v0;
    if (*(void *)v0)
    {
      if (os_log_type_enabled(*(os_log_t *)v0, OS_LOG_TYPE_DEBUG))
      {
        int v2 = 136315394;
        int v3 = "AudioIOMonitor.cpp";
        __int16 v4 = 1024;
        int v5 = 342;
        _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stopping I/O", (uint8_t *)&v2, 0x12u);
      }
    }
  }

void sub_31D6B4(id a1)
{
  int v1 = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (v1)
  {
    int v2 = dlsym(v1, "NewAudioCapturerImpl");
    if (v2) {
      off_49F0F0 = v2;
    }
  }

void sub_31D6F4(uint64_t a1)
{
  int v1 = (void *)sub_31F71C(a1);
  operator delete(v1);
}

BOOL sub_31D708(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1684103987 || a2->mSelector == 1885434482) {
    return 1LL;
  }
  sub_1BB60((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

BOOL sub_31D768(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1684103987 && a2->mSelector != 1885434482 && sub_36854C(a1, a2);
}

uint64_t sub_31D794(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    __int128 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      uint64_t v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      CFComparisonResult v23 = "Device_HDMI_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 287;
      __int16 v26 = 2080;
      uint64_t v27 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    __int16 v14 = (os_log_t *)sub_138E8(13);
    __int128 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      __int16 v16 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      CFComparisonResult v23 = "Device_HDMI_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 288;
      __int16 v26 = 2080;
      uint64_t v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      uint64_t v31 = a4;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v17 = &off_4865A0;
    void v17[2] = 561211770;
  }

  if (a2->mSelector == 1684103987 || a2->mSelector == 1885434482) {
    return 4LL;
  }
  else {
    return sub_21524(a1, a2, a3, a4);
  }
}

void sub_31DA78( unsigned __int8 *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v14 = (os_log_t *)sub_138E8(13);
    __int128 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v34);
      __int16 v16 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 314;
      __int16 v41 = 2080;
      uint64_t v42 = (const char *)v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    CFStringRef v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v34);
      unint64_t v20 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 315;
      __int16 v41 = 2080;
      uint64_t v42 = (const char *)v20;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    char v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v21 = &off_4865A0;
    void v21[2] = 561211770;
  }

  if (!a6)
  {
    CFComparisonResult v22 = (os_log_t *)sub_138E8(13);
    CFComparisonResult v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v34);
      __int16 v24 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 316;
      __int16 v41 = 2080;
      uint64_t v42 = "outData";
      __int16 v43 = 2080;
      v44[0] = v24;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }

    int v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v25 = &off_4865A0;
    void v25[2] = 561211770;
  }

  if (a2->mSelector == 1885434482)
  {
    int v13 = a1[656];
  }

  else
  {
    if (a2->mSelector != 1684103987)
    {
      sub_232A4((uint64_t)a1, a2, a3, a4, a5, a6);
      return;
    }

    UInt32 v12 = *a5;
    if (v12 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      __int16 v26 = (os_log_t *)sub_138E8(13);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v34);
        int v28 = v37;
        UInt32 v29 = (void **)__p[0];
        UInt32 v30 = *a5;
        int v31 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        uint64_t v32 = __p;
        *(_DWORD *)AudioBufferList buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
        if (v28 < 0) {
          uint64_t v32 = v29;
        }
        __int16 v39 = 1024;
        int v40 = 322;
        __int16 v41 = 2080;
        uint64_t v42 = (const char *)v32;
        __int16 v43 = 1024;
        LODWORD(v44[0]) = v30;
        WORD2(v44[0]) = 1024;
        *(_DWORD *)((char *)v44 + 6) = v31;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }

      __int16 v33 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v33 = &off_4865A0;
      v33[2] = 561211770;
    }

    strcpy(buf, "3CAebolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LODWORD(__p[0]) = 0;
    if ((*(unsigned int (**)(unsigned __int8 *, _BYTE *))(*(void *)a1 + 16LL))(a1, buf))
    {
      (*(void (**)(unsigned __int8 *, _BYTE *, uint64_t, const void *, UInt32 *, void **))(*(void *)a1 + 40LL))( a1,  buf,  a3,  a4,  a5,  __p);
      int v13 = LODWORD(__p[0]) != 1;
    }

    else
    {
      int v13 = 1;
    }
  }

  *(_DWORD *)a6 = v13;
}

void sub_31E03C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31E060( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      __int128 v15 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      UInt32 v30 = "Device_HDMI_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 352;
      __int16 v33 = 2080;
      uint64_t v34 = (const char *)v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    __int16 v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      CFStringRef v19 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      UInt32 v30 = "Device_HDMI_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 353;
      __int16 v33 = 2080;
      uint64_t v34 = (const char *)v19;
      __int16 v35 = 1024;
      LODWORD(v36[0]) = a3;
      WORD2(v36[0]) = 2048;
      *(void *)((char *)v36 + 6) = a4;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v20 = &off_4865A0;
    void v20[2] = 561211770;
  }

  if (!a6)
  {
    char v21 = (os_log_t *)sub_138E8(13);
    CFComparisonResult v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      if (v28 >= 0) {
        CFComparisonResult v23 = __p;
      }
      else {
        CFComparisonResult v23 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      UInt32 v30 = "Device_HDMI_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 354;
      __int16 v33 = 2080;
      uint64_t v34 = "inData";
      __int16 v35 = 2080;
      v36[0] = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v24 = &off_4865A0;
    void v24[2] = 561211770;
  }

  return sub_3686A0(a1, a2, a3, a4, a5, a6);
}

BOOL sub_31E410( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (a2->mScope != 1735159650 || a2->mSelector != 1684103987 || a2->mElement != 0) {
    return sub_368FB0(a1, a2, a3, a4);
  }
  uint64_t v11 = 0x676C6F6265414333LL;
  int v12 = 0;
  uint64_t v7 = *(void *)&a2->mSelector;
  AudioObjectPropertyElement mElement = a2->mElement;
  __int16 v9 = a3;
  char v10 = a4;
  sub_1885D4((void *)(a1 + 496), (unsigned int *)&v11, (unsigned int *)&v7);
  return 1LL;
}

BOOL sub_31E494( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (a2->mScope == 1735159650 && a2->mSelector == 1684103987 && a2->mElement == 0)
  {
    uint64_t v15 = 0x676C6F6265414333LL;
    int v16 = 0;
    uint64_t v11 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    int v13 = a3;
    __int16 v14 = a4;
    sub_18803C((uint64_t **)(a1 + 496), (unsigned int *)&v15, (unsigned int *)&v11);
    return 1LL;
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

unsigned __int8 *sub_31E554(uint64_t a1)
{
  if (*(void *)(a1 + 648) != -1LL) {
    MGCancelNotifications();
  }
  return sub_369228(a1);
}

uint64_t sub_31E584(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 640);
  if (v2 == 1751412073) {
    int v3 = &qword_49F178;
  }
  else {
    int v3 = &qword_49F148;
  }
  __int16 v4 = operator new(0x50uLL);
  sub_EC558((uint64_t)v4);
  sub_1D5AE0((void *)a1, (uint64_t)v4);
  int v5 = operator new(0x68uLL);
  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  sub_EC5B8((uint64_t)v5, byte_48E8E0);
  sub_1D5AE0((void *)a1, (uint64_t)v5);
  sub_1D55D4((uint64_t *)a1, 1u, *(unsigned int *)v3, (uint64_t)v4);
  sub_1D580C(a1, 1u, *(unsigned int *)v3, (uint64_t)v5);
  *(void *)AudioBufferList buf = *v3;
  *(void *)&buf[5] = *(uint64_t *)((char *)v3 + 5);
  if (v2 == 1751412073) {
    uint64_t v6 = &unk_49F188;
  }
  else {
    uint64_t v6 = &unk_49F158;
  }
  sub_86550((uint64_t *)((char *)&v71 + 2), (uint64_t)v6);
  if (v2 == 1751412073) {
    uint64_t v7 = &qword_49F178;
  }
  else {
    uint64_t v7 = &qword_49F148;
  }
  __int16 v74 = *((_WORD *)v7 + 20);
  uint64_t v75 = a1;
  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  if (byte_48E8E0)
  {
    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1)
    {
      CFStringRef v8 = CFStringCreateWithCString(0LL, "iPhone", 0x600u);
      *(void *)&__int128 v66 = v8;
      BYTE8(v66) = 1;
      CFStringRef v60 = v8;
      char v61 = 1;
      if (v8) {
        goto LABEL_32;
      }
      goto LABEL_33;
    }

    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 3)
    {
      CFStringRef v8 = CFStringCreateWithCString(0LL, "iPad", 0x600u);
      *(void *)&__int128 v66 = v8;
      BYTE8(v66) = 1;
      CFStringRef v60 = v8;
      char v61 = 1;
      if (v8) {
        goto LABEL_32;
      }
      goto LABEL_33;
    }

    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 2)
    {
      CFStringRef v8 = CFStringCreateWithCString(0LL, "iPod", 0x600u);
      *(void *)&__int128 v66 = v8;
      BYTE8(v66) = 1;
      CFStringRef v60 = v8;
      char v61 = 1;
      if (v8) {
        goto LABEL_32;
      }
      goto LABEL_33;
    }

    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4)
    {
      CFStringRef v8 = CFStringCreateWithCString(0LL, "Apple TV", 0x600u);
      *(void *)&__int128 v66 = v8;
      BYTE8(v66) = 1;
      CFStringRef v60 = v8;
      char v61 = 1;
      if (v8) {
        goto LABEL_32;
      }
      goto LABEL_33;
    }

    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 6)
    {
      CFStringRef v8 = CFStringCreateWithCString(0LL, "Apple Watch", 0x600u);
      *(void *)&__int128 v66 = v8;
      BYTE8(v66) = 1;
      CFStringRef v60 = v8;
      char v61 = 1;
      if (v8) {
        goto LABEL_32;
      }
      goto LABEL_33;
    }
  }

  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4)
  {
    CFStringRef v8 = (CFStringRef)MGGetStringAnswer(@"UserAssignedDeviceName");
    *(void *)&__int128 v66 = v8;
    BYTE8(v66) = 1;
    CFStringRef v60 = v8;
    char v61 = 1;
    if (v8) {
LABEL_32:
    }
      CFRetain(v8);
LABEL_33:
    uint64_t v62 = 0LL;
    char v63 = 1;
    __int16 v64 = 0LL;
    char v65 = 1;
    sub_19DFC((uint64_t)&v66);
    goto LABEL_34;
  }

  else {
    sub_F9530((uint64_t)&v60, *(unsigned int *)buf);
  }
LABEL_34:
  sub_32C8C(*(void **)&v73[4]);
  __int16 v9 = (os_log_t *)sub_138E8(17);
  char v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = v64;
    int v12 = v62;
    CFStringRef v13 = v60;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(&v66, a1);
    if (v12) {
      CFStringRef v14 = v12;
    }
    else {
      CFStringRef v14 = v13;
    }
    if (v11) {
      CFStringRef v14 = v11;
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    int v71 = 175;
    __int16 v72 = 2112;
    *(void *)int v73 = v14;
    *(_WORD *)&v73[8] = 2112;
    *(void *)&v73[10] = v66;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a HDMI output port with name %@ and UID %@",  buf,  0x26u);
    sub_19DFC((uint64_t)&v66);
  }

  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4)
  {
    uint64_t v15 = (const void **)sub_7DC90(1uLL);
    *uint64_t v15 = @"UserAssignedDeviceName";
    CFArrayRef v16 = sub_7E39C(v15, (uint64_t)(v15 + 1));
    operator delete(v15);
    *(void *)&__int128 v66 = v16;
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 88);
    if (v18)
    {
      p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
      do
        unint64_t v20 = __ldxr(p_shared_weak_owners);
      while (__stxr(v20 + 1, p_shared_weak_owners));
    }

    v58[0] = _NSConcreteStackBlock;
    v58[1] = 1174405120LL;
    v58[2] = sub_31F4A4;
    v58[3] = &unk_4813D8;
    v58[4] = a1;
    v58[5] = v17;
    uint64_t v59 = v18;
    if (v18)
    {
      char v21 = (unint64_t *)&v18->__shared_weak_owners_;
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }

    uint64_t v23 = MGRegisterForUpdates(v16, 0LL, 0LL, v58);
    *(void *)(a1 + 648) = v23;
    if (v23 == -1)
    {
      uint64_t v44 = (os_log_t *)sub_138E8(1);
      __int16 v45 = *v44;
      if (*v44)
      {
        if (os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          int v71 = 193;
          _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to register device name listener.",  buf,  0x12u);
        }
      }
    }

    if (v59) {
      std::__shared_weak_count::__release_weak(v59);
    }
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    CFRelease(v16);
  }

  std::string __p = 0LL;
  uint64_t v56 = 0LL;
  int v57 = 0LL;
  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  if (!byte_48E8E0)
  {
    __int16 v24 = sub_7A890(1uLL);
    _DWORD *v24 = 1986556788;
    uint64_t v56 = v24 + 1;
    int v57 = &v24[v25];
    std::string __p = v24;
  }

  if (sub_1CCD00())
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(&v68, a1);
    __int128 v66 = 0uLL;
    uint64_t v67 = 0LL;
    __int16 v26 = (std::__shared_weak_count *)operator new(0x298uLL);
    v26->__shared_owners_ = 0LL;
    v26->__shared_weak_owners_ = 0LL;
    v26->__vftable = (std::__shared_weak_count_vtbl *)off_481418;
    sub_7D084(buf, "");
    uint64_t v27 = (void **)&v26[1].__vftable;
    sub_FABCC( (uint64_t)&v26[1],  v3,  a1,  (uint64_t)&__p,  (uint64_t)&v60,  (uint64_t)&v68,  (char **)&v66,  (__int128 *)buf,  0,  1);
    if ((v73[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  else
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(&v68, a1);
    __int128 v66 = 0uLL;
    uint64_t v67 = 0LL;
    __int16 v26 = (std::__shared_weak_count *)operator new(0x228uLL);
    v26->__shared_owners_ = 0LL;
    v26->__shared_weak_owners_ = 0LL;
    v26->__vftable = (std::__shared_weak_count_vtbl *)off_485B80;
    sub_7D084(buf, "");
    uint64_t v27 = (void **)&v26[1].__vftable;
    sub_F9638((uint64_t)&v26[1], v3, a1, (uint64_t)&__p, (uint64_t)&v60, (uint64_t)&v68, (char **)&v66, (__int128 *)buf);
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
    LOWORD(v26[22].__shared_weak_owners_) = 0;
    if ((v73[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  int v49 = v26 + 1;
  std::string::size_type v50 = v26;
  sub_AFDAC((uint64_t)&v49, &v26[4].__shared_owners_, (uint64_t)&v26[1]);
  uint64_t v53 = v27;
  __int16 v54 = v26;
  *(void *)AudioBufferList buf = &v66;
  sub_7A668((void ***)buf);
  sub_19DFC((uint64_t)&v68);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312LL))(a1) & 0xFF00000000LL) == 0)
  {
    unint64_t v46 = v27;
    uint64_t v47 = v26;
LABEL_81:
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
    goto LABEL_83;
  }

  sub_F9530((uint64_t)buf, 1885889652LL);
  int v49 = 0LL;
  std::string::size_type v50 = 0LL;
  uint64_t v51 = 0LL;
  char v28 = operator new(0x228uLL);
  v28[1] = 0LL;
  v28[2] = 0LL;
  *char v28 = off_485B80;
  CFStringRef v68 = CFStringCreateWithCString(0LL, "HDMI Tap Stream Input", 0x600u);
  char v69 = 1;
  sub_7D084(&v66, "");
  sub_F9638((uint64_t)(v28 + 3), &qword_49F1A8, a1, (uint64_t)&__p, (uint64_t)buf, (uint64_t)&v68, (char **)&v49, &v66);
  v28[3] = &off_46FD40;
  *((_WORD *)v28 + 272) = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  sub_19DFC((uint64_t)&v68);
  *(void *)&__int128 v52 = v28 + 3;
  *((void *)&v52 + 1) = v28;
  sub_AFDAC((uint64_t)&v52, v28 + 13, (uint64_t)(v28 + 3));
  *(void *)&__int128 v66 = &v49;
  sub_7A668((void ***)&v66);
  sub_19DFC((uint64_t)&v73[12]);
  sub_19DFC((uint64_t)&v71 + 2);
  sub_19DFC((uint64_t)buf);
  sub_204854((uint64_t)v27, (uint64_t)(v28 + 3));
  __int128 v48 = v52;
  __int128 v52 = 0uLL;
  sub_3711D4(a1, (void ***)&v48);
  UInt32 v29 = (std::__shared_weak_count *)*((void *)&v48 + 1);
  if (*((void *)&v48 + 1))
  {
    UInt32 v30 = (unint64_t *)(*((void *)&v48 + 1) + 8LL);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  int v32 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1))
  {
    __int16 v33 = (unint64_t *)(*((void *)&v52 + 1) + 8LL);
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  __int16 v26 = v54;
  unint64_t v46 = v53;
  uint64_t v47 = v54;
  if (v54) {
    goto LABEL_81;
  }
LABEL_83:
  sub_3711D4(a1, &v46);
  char v37 = v47;
  if (v47)
  {
    __int16 v38 = (unint64_t *)&v47->__shared_owners_;
    do
      unint64_t v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  int v40 = v54;
  if (v54)
  {
    __int16 v41 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  if (__p) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&v64);
  sub_19DFC((uint64_t)&v62);
  sub_19DFC((uint64_t)&v60);
  return 1LL;
}

void sub_31EF90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, std::__shared_weak_count *a33, char a34)
{
}

uint64_t sub_31F164(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885889645 && a2 != 1885631344)
  {
    __int16 v4 = (os_log_t *)sub_138E8(17);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      CFStringRef v14 = "Device_HDMI_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 415;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v7 = (os_log_t *)sub_138E8(13);
    CFStringRef v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        CFStringRef v14 = "Device_HDMI_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 416;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_31F31C(_Unwind_Exception *a1)
{
}

__n128 sub_31F338@<Q0>(AudioObjectID a1@<W1>, __n128 *a2@<X8>)
{
  __int16 v4 = (os_log_t *)sub_138E8(17);
  int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315650;
    char v10 = "Device_HDMI_Aspen.cpp";
    __int16 v11 = 1024;
    int v12 = 426;
    __int16 v13 = 1024;
    AudioObjectID v14 = a1;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream ID = %u", (uint8_t *)&v9, 0x18u);
  }

  uint64_t v6 = operator new(0x70uLL);
  v6[1] = 0LL;
  v6[2] = 0LL;
  *uint64_t v6 = off_481450;
  uint64_t v7 = sub_177B28((uint64_t)(v6 + 3), a1);
  uint64_t v6[3] = off_483C38;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a2 = result;
  return result;
}

void sub_31F444(_Unwind_Exception *a1)
{
}

void sub_31F464(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_481450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_31F474(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_481450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_31F494(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_31F4A4(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    __int16 v4 = std::__shared_weak_count::lock(v2);
    uint64_t v27 = v4;
    if (v4)
    {
      int v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = operator new(4uLL);
        *uint64_t v6 = 1885889645;
        std::string __p = v6;
        __int16 v13 = v6 + 1;
        AudioObjectID v14 = v6 + 1;
        strcpy(v15, "cwdv");
        LOBYTE(v16) = 0;
        int v17 = 3;
        v19[0] = 0LL;
        v19[1] = 0LL;
        uint64_t v18 = v19;
        int v20 = 44739242;
        CFTypeRef cf = 0LL;
        sub_3710DC((uint64_t *)&v22, v3, (uint64_t)&__p);
        sub_EDD50(&v24, &v22);
        sub_85B80((uint64_t *)&v22);
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v19[0]);
        if (__p)
        {
          __int16 v13 = __p;
          operator delete(__p);
        }

        for (uint64_t i = v25; i != &v24; uint64_t i = (uint64_t *)i[1])
        {
          uint64_t v8 = i[2];
          int v9 = (void *)MGGetStringAnswer(@"UserAssignedDeviceName");
          unint64_t v22 = v9;
          char v23 = 1;
          std::string __p = v9;
          LOBYTE(v13) = 1;
          if (v9) {
            CFRetain(v9);
          }
          AudioObjectID v14 = 0LL;
          v15[0] = 1;
          uint64_t v16 = 0LL;
          LOBYTE(v17) = 1;
          (*(void (**)(uint64_t, void **))(*(void *)v8 + 128LL))(v8, &__p);
          sub_19DFC((uint64_t)&v16);
          sub_19DFC((uint64_t)&v14);
          sub_19DFC((uint64_t)&__p);
          sub_19DFC((uint64_t)&v22);
        }

        sub_1BB88(&v24);
      }

      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

void sub_31F684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_85B80((uint64_t *)va1);
  sub_A0DB0((uint64_t)va);
  sub_7A768(v2 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_31F6E8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_31F70C(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_31F71C(uint64_t a1)
{
  *(void *)a1 = off_481200;
  sub_67FE8(a1 + 584);
  *(void *)(a1 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 520));
  return sub_36F1E0(a1);
}

uint64_t sub_31F768(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3, int a4)
{
  uint64_t v7 = (void *)sub_36E3FC(a1, a2, a3, a3, 0LL);
  *uint64_t v7 = off_481200;
  sub_189C20((uint64_t)(v7 + 62));
  *(_DWORD *)(a1 + 640) = a4;
  *(void *)(a1 + 648) = -1LL;
  v15.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v16 = a2;
  *(void *)&v15.AudioObjectPropertySelector mSelector = 0x676C6F6270617272LL;
  unint64_t v8 = sub_36EF4(&v16, &v15, 0, 0LL);
  *((void *)&v11 + 1) = v9;
  *(void *)&__int128 v11 = v8;
  uint64_t v10 = v11 >> 32;
  BOOL v13 = (v10 & 0xFF00000000LL) != 0 && (_DWORD)v10 != 0;
  *(_BYTE *)(a1 + 656) = v13;
  sub_371820(a1, 0, 0x6F757470u, 0);
  return a1;
}

void sub_31F81C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 520));
  sub_36F1E0(v1);
  _Unwind_Resume(a1);
}

void sub_31F858(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0LL;
  }

  uint64_t v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0LL;
  }

  unint64_t v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0LL;
  }

uint64_t sub_31F8A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + memset(v7, 0, 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  int v5 = *(const void **)(a2 + 32);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    CFRetain(v5);
  }

  uint64_t v6 = *(const void **)(a2 + 40);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    CFRetain(v6);
  }

  uint64_t v7 = *(const void **)(a2 + 48);
  if (v7)
  {
    *(void *)(a1 + 48) = v7;
    CFRetain(v7);
  }

  return a1;
}

uint64_t sub_31F914()
{
  uint64_t v0 = (os_log_s *)*(id *)sub_138E8(10);
  uint64_t v1 = v0;
  if (v0 && os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315650;
    __int128 v4 = "PersonalAudioInterface.mm";
    __int16 v5 = 1024;
    int v6 = 60;
    __int16 v7 = 2080;
    unint64_t v8 = "OFF";
    _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PME keep VolumeLimit chain: %s", (uint8_t *)&v3, 0x1Cu);
  }

  return 0LL;
}

void sub_31F9F4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49F1D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_49F1D8)) {
      __cxa_guard_release(&qword_49F1D8);
    }
  }

void sub_31FA38(uint64_t a1)
{
  uint64_t v1 = (void *)sub_31FF74(a1);
  operator delete(v1);
}

uint64_t (***sub_31FA4C(uint64_t a1))(void, BOOL)
{
  uint64_t v2 = *(void *)(a1 + 24);
  int v3 = (const char *)(v2 + 8);
  __int128 v4 = *(dispatch_queue_s **)(v2 + 64);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000LL;
  handler[2] = sub_1586E4;
  handler[3] = &unk_471278;
  handler[4] = v2;
  notify_register_dispatch(v3, (int *)v2, v4, handler);
  return sub_31FE0C(a1);
}

void sub_31FAC4(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  sub_92104();
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16LL))( caulk::alloc::realtime_safe_resource,  56LL,  8LL);
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)(v8 + memset(v7, 0, 24) = v4;
  *(void *)(v8 + 32) = v3;
  *(_DWORD *)(v8 + 40) = a2;
  *(void *)uint64_t v8 = off_481548;
  *(void *)(v8 + 8) = 0LL;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_4A9D88, (caulk::concurrent::message *)v8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_31FB78(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_31FBA4(caulk::concurrent::message *this)
{
  *(void *)this = off_481570;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_31FBDC(caulk::concurrent::message *this)
{
  *(void *)this = off_481570;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

caulk::concurrent::message **sub_31FC18(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_31FC5C((uint64_t)a1);
  return sub_31FD2C(&v2);
}

void sub_31FC48(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_31FC5C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        notify_cancel(**(_DWORD **)(v5 + 24));
        unint64_t v6 = *(void (****)(void, void))(v5 + 32);
        if (v6) {
          (**v6)(v6, 0LL);
        }
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_31FCF0(_Unwind_Exception *exception_object)
{
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_31FD2C(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_481570;
  int v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24LL))( caulk::alloc::realtime_safe_resource,  v2,  56LL,  8LL);
  return a1;
}

void sub_31FD98(caulk::concurrent::message *this)
{
  *(void *)this = off_481570;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_31FDD0(caulk::concurrent::message *this)
{
  *(void *)this = off_481570;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

uint64_t (***sub_31FE0C(uint64_t a1))(void, BOOL)
{
  uint64_t v2 = *(int **)(a1 + 24);
  uint64_t state64 = 0LL;
  if (notify_get_state(*v2, &state64))
  {
    unint64_t v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v9 = "StandardUtilities.cpp";
      __int16 v10 = 1024;
      int v11 = 1711;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): notify_get_state() failed.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "notify_get_state() failed.");
  }

  __n128 result = *(uint64_t (****)(void, BOOL))(a1 + 32);
  if (result) {
    return (uint64_t (***)(void, BOOL))(**result)(result, state64 != 0);
  }
  return result;
}

void sub_31FF58(_Unwind_Exception *a1)
{
}

uint64_t sub_31FF74(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 24);
  notify_cancel(**(_DWORD **)(a1 + 24));
  int v3 = *(void (****)(void, void))(a1 + 32);
  if (v3)
  {
    (**v3)(v3, 0LL);
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
    }
  }

  else
  {
    *(void *)(a1 + 32) = 0LL;
  }

  sub_31FFF4(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_31FFF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (!v1) {
    return;
  }
  notify_cancel(*(_DWORD *)v1);

  uint64_t v2 = *(void **)(v1 + 56);
  if (v2 == (void *)(v1 + 32))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(v1 + 32);
    goto LABEL_7;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  operator delete((void *)v1);
}

uint64_t sub_32007C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)*(id *)sub_138E8(17);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = "Acquiring";
    if (!a2) {
      unint64_t v6 = "Releasing";
    }
    unint64_t v7 = (void *)(a1 + 24);
    int v9 = 136315906;
    __int16 v10 = "ReceiverProximityIODelegate.mm";
    __int16 v11 = 1024;
    int v12 = 29;
    __int16 v13 = 2080;
    uint64_t v14 = v6;
    __int16 v15 = 2080;
    AudioObjectID v16 = v7;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s MMAssertion %s", (uint8_t *)&v9, 0x26u);
  }

  return nullsub_9(*(void *)(a1 + 8));
}

void sub_3201A4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_3201B8(a1);
  operator delete(v1);
}

uint64_t sub_3201B8(uint64_t a1)
{
  *(void *)a1 = off_4814D8;
  sub_32007C(a1, 0);
  sub_7A768(a1 + 8);
  return a1;
}

void *sub_320210(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_481500;
  result[1] = v3;
  return result;
}

uint64_t sub_320244(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_481500;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_320260(uint64_t a1))(void, BOOL)
{
  return sub_31FE0C(*(void *)(a1 + 8));
}

void sub_320268(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_481598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_320278(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_481598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_320298(uint64_t a1)
{
  return sub_31FF74(a1 + 24);
}

void *sub_3202AC()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_481780;
  return result;
}

void sub_3202D0(uint64_t a1, void *a2)
{
  *a2 = &off_481780;
}

BOOL sub_3202E8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_320308()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_481738;
  return result;
}

void sub_32032C(uint64_t a1, void *a2)
{
  *a2 = &off_481738;
}

BOOL sub_320344(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_320364()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_4816F0;
  return result;
}

void sub_320388(uint64_t a1, void *a2)
{
  *a2 = &off_4816F0;
}

uint64_t sub_3203A0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_320400()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4816A8;
  return result;
}

void sub_320424(uint64_t a1, void *a2)
{
  *a2 = &off_4816A8;
}

uint64_t sub_32043C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_320454()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_481660;
  return result;
}

void sub_320478(uint64_t a1, void *a2)
{
  *a2 = &off_481660;
}

uint64_t sub_320490(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_3204A8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_481618;
  return result;
}

void sub_3204CC(uint64_t a1, void *a2)
{
  *a2 = &off_481618;
}

BOOL sub_3204E4(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_320508()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4815D0;
  return result;
}

void sub_32052C(uint64_t a1, void *a2)
{
  *a2 = &off_4815D0;
}

uint64_t sub_320544(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

uint64_t sub_320554(uint64_t a1)
{
  CFStringRef theString = sub_28A0D0();
  char v591 = 1;
  sub_248C80((uint64_t)v584, (__int128 *)(a1 + 432));
  *(_OWORD *)v572 = *(_OWORD *)a1;
  *(void *)&v572[13] = *(void *)(a1 + 13);
  uint64_t v575 = 0LL;
  v573 = 0LL;
  v574 = 0LL;
  sub_7A5B8( &v573,  *(const void **)(a1 + 24),  *(void *)(a1 + 32),  (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  v577 = 0LL;
  v576 = 0LL;
  uint64_t v578 = 0LL;
  sub_7A5B8( &v576,  *(const void **)(a1 + 48),  *(void *)(a1 + 56),  (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  __int128 v579 = *(_OWORD *)(a1 + 72);
  int v580 = *(_DWORD *)(a1 + 88);
  sub_86550(v581, a1 + 96);
  __int16 v582 = *(_WORD *)(a1 + 120);
  char v583 = *(_BYTE *)(a1 + 122);
  int v2 = v585;
  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  int v505 = byte_48E8E0;
  if (v2)
  {
    if (!v587) {
      sub_8DEEC();
    }
    sub_7D084(&__p, "speaker_multichannel_music");
    uint64_t v3 = sub_248FF0(v586, (unsigned __int8 *)&__p);
    BOOL v4 = v3 != 0LL;
    BOOL v5 = v3 != 0LL;
    if (!v587) {
      sub_8DEEC();
    }
    sub_7D084(&__p, "speaker_spoken_word");
    BOOL v504 = sub_248FF0(v586, (unsigned __int8 *)&__p) != 0LL;
  }

  else
  {
    BOOL v5 = v583;
    BOOL v4 = v583 != 0;
    if (HIBYTE(v579)) {
      BOOL v6 = BYTE14(v579) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    int v7 = !v6;
    BOOL v504 = v7;
  }

  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_49FA60);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_49FA60))
  {
    xmmword_49F998 = 0u;
    unk_49F9A8 = 0u;
    xmmword_49F988 = 0u;
    strcpy((char *)&dword_49F9B8, "tlfd");
    byte_49F9C0 = 0;
    byte_49FA08 = 0;
    xmmword_49FA18 = 0u;
    unk_49FA28 = 0u;
    xmmword_49FA38 = 0u;
    unk_49FA48 = 0u;
    qword_49FA58 = 0LL;
    __cxa_guard_release(&qword_49FA60);
  }

  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_49FB40);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_49FB40))
  {
    xmmword_49FA78 = 0u;
    unk_49FA88 = 0u;
    xmmword_49FA68 = 0u;
    strcpy((char *)&dword_49FA98, "tlfd");
    byte_49FAA0 = 0;
    byte_49FAE8 = 0;
    xmmword_49FAF8 = 0u;
    unk_49FB08 = 0u;
    xmmword_49FB18 = 0u;
    unk_49FB28 = 0u;
    qword_49FB38 = 0LL;
    __cxa_guard_release(&qword_49FB40);
  }

  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_49FC20);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_49FC20))
  {
    xmmword_49FB58 = 0u;
    unk_49FB68 = 0u;
    xmmword_49FB48 = 0u;
    strcpy((char *)&dword_49FB78, "tlfd");
    byte_49FB80 = 0;
    byte_49FBC8 = 0;
    xmmword_49FBD8 = 0u;
    unk_49FBE8 = 0u;
    xmmword_49FBF8 = 0u;
    unk_49FC08 = 0u;
    qword_49FC18 = 0LL;
    __cxa_guard_release(&qword_49FC20);
  }

  unsigned __int8 v11 = atomic_load((unsigned __int8 *)&qword_49FD00);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_49FD00))
  {
    xmmword_49FC38 = 0u;
    unk_49FC48 = 0u;
    xmmword_49FC28 = 0u;
    strcpy((char *)&dword_49FC58, "tlfd");
    byte_49FC60 = 0;
    byte_49FCA8 = 0;
    xmmword_49FCB8 = 0u;
    unk_49FCC8 = 0u;
    xmmword_49FCD8 = 0u;
    unk_49FCE8 = 0u;
    qword_49FCF8 = 0LL;
    __cxa_guard_release(&qword_49FD00);
  }

  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_49FDE0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_49FDE0))
  {
    xmmword_49FD18 = 0u;
    unk_49FD28 = 0u;
    xmmword_49FD08 = 0u;
    strcpy((char *)&dword_49FD38, "tlfd");
    byte_49FD40 = 0;
    byte_49FD88 = 0;
    xmmword_49FD98 = 0u;
    unk_49FDA8 = 0u;
    xmmword_49FDB8 = 0u;
    unk_49FDC8 = 0u;
    qword_49FDD8 = 0LL;
    __cxa_guard_release(&qword_49FDE0);
  }

  unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_49FEC0);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_49FEC0))
  {
    xmmword_49FDF8 = 0u;
    unk_49FE08 = 0u;
    xmmword_49FDE8 = 0u;
    strcpy((char *)&dword_49FE18, "tlfd");
    byte_49FE20 = 0;
    byte_49FE68 = 0;
    xmmword_49FE78 = 0u;
    unk_49FE88 = 0u;
    xmmword_49FE98 = 0u;
    unk_49FEA8 = 0u;
    qword_49FEB8 = 0LL;
    __cxa_guard_release(&qword_49FEC0);
  }

  unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_49FFA0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_49FFA0))
  {
    xmmword_49FED8 = 0u;
    unk_49FEE8 = 0u;
    xmmword_49FEC8 = 0u;
    strcpy((char *)&dword_49FEF8, "tlfd");
    byte_49FF00 = 0;
    byte_49FF48 = 0;
    xmmword_49FF58 = 0u;
    unk_49FF68 = 0u;
    xmmword_49FF78 = 0u;
    unk_49FF88 = 0u;
    qword_49FF98 = 0LL;
    __cxa_guard_release(&qword_49FFA0);
  }

  unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_4A0080);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_4A0080))
  {
    xmmword_49FFB8 = 0u;
    unk_49FFC8 = 0u;
    xmmword_49FFA8 = 0u;
    strcpy((char *)&dword_49FFD8, "tlfd");
    byte_49FFE0 = 0;
    byte_4A0028 = 0;
    xmmword_4A0038 = 0u;
    unk_4A0048 = 0u;
    xmmword_4A0058 = 0u;
    unk_4A0068 = 0u;
    qword_4A0078 = 0LL;
    __cxa_guard_release(&qword_4A0080);
  }

  unsigned __int8 v16 = atomic_load((unsigned __int8 *)&qword_4A0160);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_4A0160))
  {
    xmmword_4A0098 = 0u;
    unk_4A00A8 = 0u;
    xmmword_4A0088 = 0u;
    strcpy((char *)&dword_4A00B8, "tlfd");
    byte_4A00C0 = 0;
    byte_4A0108 = 0;
    xmmword_4A0118 = 0u;
    unk_4A0128 = 0u;
    xmmword_4A0138 = 0u;
    unk_4A0148 = 0u;
    qword_4A0158 = 0LL;
    __cxa_guard_release(&qword_4A0160);
  }

  unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_4A0240);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_4A0240))
  {
    xmmword_4A0178 = 0u;
    unk_4A0188 = 0u;
    xmmword_4A0168 = 0u;
    strcpy((char *)&dword_4A0198, "tlfd");
    byte_4A01A0 = 0;
    byte_4A01E8 = 0;
    xmmword_4A01F8 = 0u;
    unk_4A0208 = 0u;
    xmmword_4A0218 = 0u;
    unk_4A0228 = 0u;
    qword_4A0238 = 0LL;
    __cxa_guard_release(&qword_4A0240);
  }

  unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_4A0320);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_4A0320))
  {
    xmmword_4A0258 = 0u;
    unk_4A0268 = 0u;
    xmmword_4A0248 = 0u;
    strcpy((char *)&dword_4A0278, "tlfd");
    byte_4A0280 = 0;
    byte_4A02C8 = 0;
    xmmword_4A02D8 = 0u;
    unk_4A02E8 = 0u;
    xmmword_4A02F8 = 0u;
    unk_4A0308 = 0u;
    qword_4A0318 = 0LL;
    __cxa_guard_release(&qword_4A0320);
  }

  unsigned __int8 v19 = atomic_load((unsigned __int8 *)&qword_4A0400);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_4A0400))
  {
    xmmword_4A0338 = 0u;
    unk_4A0348 = 0u;
    xmmword_4A0328 = 0u;
    strcpy((char *)&dword_4A0358, "tlfd");
    byte_4A0360 = 0;
    byte_4A03A8 = 0;
    xmmword_4A03B8 = 0u;
    unk_4A03C8 = 0u;
    xmmword_4A03D8 = 0u;
    unk_4A03E8 = 0u;
    qword_4A03F8 = 0LL;
    __cxa_guard_release(&qword_4A0400);
  }

  if (!v2)
  {
    if (*(_BYTE *)(a1 + 1091)) {
      BOOL v21 = *(_BYTE *)(a1 + 1090) == 0;
    }
    else {
      BOOL v21 = 1;
    }
    int v22 = v21;
    int v501 = v22;
    sub_248E08(&v569, (uint64_t)v588, "");
    sub_7D084(v592, off_48C220);
    char v23 = std::string::append((std::string *)v592, "/", 1uLL);
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v526.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v526.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    sub_48E98(&v522, theString);
    if ((SBYTE7(v523) & 0x80u) == 0) {
      uint64_t v25 = (const std::string::value_type *)&v522;
    }
    else {
      uint64_t v25 = (const std::string::value_type *)v522;
    }
    if ((SBYTE7(v523) & 0x80u) == 0) {
      std::string::size_type v26 = BYTE7(v523);
    }
    else {
      std::string::size_type v26 = *((void *)&v522 + 1);
    }
    uint64_t v27 = std::string::append(&v526, v25, v26);
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v508.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v508.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    UInt32 v29 = std::string::append(&v508, "/", 1uLL);
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v31 = std::string::append(&__p, "VAD", 3uLL);
    __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v568.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v568.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0LL;
    v31->__r_.__value_.__l.__cap_ = 0LL;
    v31->__r_.__value_.__r.__words[0] = 0LL;
    if (SBYTE7(v523) < 0) {
      operator delete((void *)v522);
    }
    if ((v592[23] & 0x80000000) != 0) {
      operator delete(*(void **)v592);
    }
    if ((v568.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = v568.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = v568.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    sub_D0924((uint64_t)&__p, size + 1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v568.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v35 = &v568;
      }
      else {
        __int16 v35 = (std::string *)v568.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v35, size);
    }

    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + size) = 47;
    if ((v571 & 0x80u) == 0) {
      unint64_t v36 = (const std::string::value_type *)&v569;
    }
    else {
      unint64_t v36 = (const std::string::value_type *)v569;
    }
    if ((v571 & 0x80u) == 0) {
      std::string::size_type v37 = v571;
    }
    else {
      std::string::size_type v37 = v570;
    }
    __int16 v38 = std::string::append(&__p, v36, v37);
    std::string v567 = *v38;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v502 = v4;
    sub_2393DC((uint64_t)&v508, off_48C220);
    if (v589) {
      unsigned int v39 = v588[33];
    }
    else {
      unsigned int v39 = 512;
    }
    if (*(_BYTE *)(a1 + 700)) {
      uint64_t v40 = *(unsigned int *)(a1 + 696);
    }
    else {
      uint64_t v40 = 0LL;
    }
    if (*(_BYTE *)(a1 + 708)) {
      uint64_t v41 = *(unsigned int *)(a1 + 704);
    }
    else {
      uint64_t v41 = 0LL;
    }
    if (*(_BYTE *)(a1 + 876)) {
      uint64_t v42 = *(unsigned int *)(a1 + 872);
    }
    else {
      uint64_t v42 = 0LL;
    }
    if (*(_BYTE *)(a1 + 884)) {
      uint64_t v43 = *(unsigned int *)(a1 + 880);
    }
    else {
      uint64_t v43 = 0LL;
    }
    if (*(_BYTE *)(a1 + 900)) {
      uint64_t v44 = *(unsigned int *)(a1 + 896);
    }
    else {
      uint64_t v44 = 0LL;
    }
    if (*(_BYTE *)(a1 + 908)) {
      uint64_t v45 = *(unsigned int *)(a1 + 904);
    }
    else {
      uint64_t v45 = 0LL;
    }
    if (*(_BYTE *)(a1 + 724)) {
      uint64_t v46 = *(unsigned int *)(a1 + 720);
    }
    else {
      uint64_t v46 = 0LL;
    }
    if (!(_DWORD)v40 || !(_DWORD)v41 || !(_DWORD)v42 || !(_DWORD)v43 || !(_DWORD)v46 || !(_DWORD)v44 || !(_DWORD)v45)
    {
      v459 = (os_log_t *)sub_138E8(13);
      v460 = *v459;
      if (*v459 && os_log_type_enabled(*v459, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 184;
        _os_log_impl( &dword_0,  v460,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&__p,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    uint64_t v498 = v45;
    uint64_t v499 = v44;
    uint64_t v496 = v43;
    uint64_t v497 = v42;
    int v47 = (char)v567.__r_.__value_.__s.__size_;
    if ((v567.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v48 = v567.__r_.__value_.__s.__size_;
    }
    else {
      size_t v48 = v567.__r_.__value_.__l.__size_;
    }
    int v49 = &v566;
    sub_D0924((uint64_t)&v566, v48 + 21);
    *(void *)&v500[1] = v46;
    if ((v566.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v49 = (std::string *)v566.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v47 >= 0) {
        std::string::size_type v50 = &v567;
      }
      else {
        std::string::size_type v50 = (std::string *)v567.__r_.__value_.__r.__words[0];
      }
      memmove(v49, v50, v48);
    }

    strcpy((char *)v49 + v48, "_speaker_general.dspg");
    if ((v571 & 0x80u) == 0) {
      size_t v51 = v571;
    }
    else {
      size_t v51 = v570;
    }
    p_src = &__src;
    sub_D0924((uint64_t)&__src, v51 + 16);
    if ((__src.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    }
    if (v51)
    {
      if ((v571 & 0x80u) == 0) {
        uint64_t v53 = &v569;
      }
      else {
        uint64_t v53 = v569;
      }
      memmove(p_src, v53, v51);
    }

    __int128 v506 = *(_OWORD *)"_speaker_general";
    strcpy((char *)p_src + v51, "_speaker_general");
    if ((v571 & 0x80u) == 0) {
      size_t v54 = v571;
    }
    else {
      size_t v54 = v570;
    }
    __int16 v55 = &v564;
    sub_D0924((uint64_t)&v564, v54 + 16);
    if ((v564.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v55 = (std::string *)v564.__r_.__value_.__r.__words[0];
    }
    if (v54)
    {
      if ((v571 & 0x80u) == 0) {
        uint64_t v56 = &v569;
      }
      else {
        uint64_t v56 = v569;
      }
      memmove(v55, v56, v54);
    }

    int v57 = (char *)v55 + v54;
    *(_OWORD *)int v57 = v506;
    v57[16] = 0;
    uint64_t v58 = &v563;
    sub_D0924((uint64_t)&v563, v48 + 24);
    if ((v563.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v58 = (std::string *)v563.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v47 >= 0) {
        uint64_t v59 = &v567;
      }
      else {
        uint64_t v59 = (std::string *)v567.__r_.__value_.__r.__words[0];
      }
      memmove(v58, v59, v48);
    }

    strcpy((char *)v58 + v48, "_speaker_sirioutput.dspg");
    if ((v571 & 0x80u) == 0) {
      size_t v60 = v571;
    }
    else {
      size_t v60 = v570;
    }
    char v61 = &v562;
    sub_D0924((uint64_t)&v562, v60 + 19);
    if ((v562.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v61 = (std::string *)v562.__r_.__value_.__r.__words[0];
    }
    if (v60)
    {
      if ((v571 & 0x80u) == 0) {
        uint64_t v62 = &v569;
      }
      else {
        uint64_t v62 = v569;
      }
      memmove(v61, v62, v60);
    }

    __int128 v506 = *(_OWORD *)"_speaker_sirioutput";
    strcpy((char *)v61 + v60, "_speaker_sirioutput");
    if ((v571 & 0x80u) == 0) {
      size_t v63 = v571;
    }
    else {
      size_t v63 = v570;
    }
    __int16 v64 = &v560;
    sub_D0924((uint64_t)&v560, v63 + 19);
    if (v561 < 0) {
      __int16 v64 = (__int128 *)v560;
    }
    if (v63)
    {
      if ((v571 & 0x80u) == 0) {
        char v65 = &v569;
      }
      else {
        char v65 = v569;
      }
      memmove(v64, v65, v63);
    }

    *(__int128 *)((char *)v64 + v63) = v506;
    strcpy((char *)v64 + v63 + 15, "tput");
    __int128 v66 = &v559;
    sub_D0924((uint64_t)&v559, v48 + 17);
    if ((v559.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v66 = (std::string *)v559.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v47 >= 0) {
        uint64_t v67 = &v567;
      }
      else {
        uint64_t v67 = (std::string *)v567.__r_.__value_.__r.__words[0];
      }
      memmove(v66, v67, v48);
    }

    strcpy((char *)v66 + v48, "_speaker_raw.dspg");
    if ((v571 & 0x80u) == 0) {
      size_t v68 = v571;
    }
    else {
      size_t v68 = v570;
    }
    char v69 = v557;
    sub_D0924((uint64_t)v557, v68 + 12);
    if (v558 < 0) {
      char v69 = (void **)v557[0];
    }
    if (v68)
    {
      if ((v571 & 0x80u) == 0) {
        CFDictionaryRef v70 = &v569;
      }
      else {
        CFDictionaryRef v70 = v569;
      }
      memmove(v69, v70, v68);
    }

    strcpy((char *)v69 + v68, "_speaker_raw");
    int v71 = &v556;
    sub_D0924((uint64_t)&v556, v48 + 27);
    if ((v556.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v71 = (std::string *)v556.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v47 >= 0) {
        __int16 v72 = &v567;
      }
      else {
        __int16 v72 = (std::string *)v567.__r_.__value_.__r.__words[0];
      }
      memmove(v71, v72, v48);
    }

    strcpy((char *)v71 + v48, "_mic_voice_recognition.dspg");
    if ((v571 & 0x80u) == 0) {
      size_t v73 = v571;
    }
    else {
      size_t v73 = v570;
    }
    __int16 v74 = &v555;
    sub_D0924((uint64_t)&v555, v73 + 22);
    if ((v555.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v74 = (std::string *)v555.__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((v571 & 0x80u) == 0) {
        uint64_t v75 = &v569;
      }
      else {
        uint64_t v75 = v569;
      }
      memmove(v74, v75, v73);
    }

    __int128 v506 = *(_OWORD *)"_mic_voice_recognition";
    strcpy((char *)v74 + v73, "_mic_voice_recognition");
    if ((v571 & 0x80u) == 0) {
      size_t v76 = v571;
    }
    else {
      size_t v76 = v570;
    }
    char v77 = &v554;
    sub_D0924((uint64_t)&v554, v76 + 22);
    if ((v554.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v77 = (std::string *)v554.__r_.__value_.__r.__words[0];
    }
    if (v76)
    {
      if ((v571 & 0x80u) == 0) {
        std::string v78 = &v569;
      }
      else {
        std::string v78 = v569;
      }
      memmove(v77, v78, v76);
    }

    *(_OWORD *)((char *)&v77->__r_.__value_.__l.__data_ + v76) = v506;
    strcpy(&v77->__r_.__value_.__s.__data_[v76 + 14], "ognition");
    __int128 v522 = 0u;
    __int128 v523 = 0u;
    LODWORD(v5memset(v7, 0, 24) = 1065353216;
    __int128 v518 = 0u;
    __int128 v519 = 0u;
    LODWORD(v520) = 1065353216;
    LODWORD(v526.__r_.__value_.__l.__data_) = 7;
    v526.__r_.__value_.__l.__size_ = 1LL;
    LODWORD(__p.__r_.__value_.__l.__data_) = 3700;
    sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v526);
    sub_148DB8((uint64_t)&v518, (int)__p.__r_.__value_.__l.__data_, &__p);
    sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v526);
    LODWORD(v526.__r_.__value_.__l.__data_) = 7;
    v526.__r_.__value_.__l.__size_ = 1024LL;
    LODWORD(__p.__r_.__value_.__l.__data_) = 14;
    sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v526);
    sub_148DB8((uint64_t)&v518, (int)__p.__r_.__value_.__l.__data_, &__p);
    sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v526);
    sub_2DC194((uint64_t)&v526, (uint64_t)&v518);
    LODWORD(__p.__r_.__value_.__l.__data_) = 1685090928;
    sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v526);
    BOOL v495 = v5;
    sub_148DB8((uint64_t)&v522, (int)__p.__r_.__value_.__l.__data_, &__p);
    sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v526);
    __int128 v551 = 0u;
    __int128 v552 = 0u;
    int v553 = 1065353216;
    __int128 v599 = 0u;
    __int128 v600 = 0u;
    int v601 = 1065353216;
    LODWORD(v526.__r_.__value_.__l.__data_) = 7;
    v526.__r_.__value_.__l.__size_ = 1LL;
    LODWORD(__p.__r_.__value_.__l.__data_) = 3700;
    sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v526);
    sub_148DB8((uint64_t)&v599, (int)__p.__r_.__value_.__l.__data_, &__p);
    sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v526);
    LODWORD(v526.__r_.__value_.__l.__data_) = 7;
    v526.__r_.__value_.__l.__size_ = v39;
    LODWORD(__p.__r_.__value_.__l.__data_) = 14;
    sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v526);
    sub_148DB8((uint64_t)&v599, (int)__p.__r_.__value_.__l.__data_, &__p);
    sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v526);
    sub_2DC194((uint64_t)&v526, (uint64_t)&v599);
    LODWORD(__p.__r_.__value_.__l.__data_) = 1685090928;
    sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v526);
    sub_148DB8((uint64_t)&v551, (int)__p.__r_.__value_.__l.__data_, &__p);
    char v79 = v501;
    sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v526);
    sub_157A88((uint64_t)&v526, 0, -65.0, 0.0);
    __int16 v80 = operator new(0x48uLL);
    v80[1] = 0LL;
    v80[2] = 0LL;
    void *v80 = off_4817C8;
    *((_DWORD *)v80 + 16) = 1;
    *((_OWORD *)v80 + 2) = xmmword_4033F0;
    *((_OWORD *)v80 + 3) = xmmword_4033E0;
    v80[3] = off_481800;
    *(void *)&__int128 v550 = v80 + 3;
    *((void *)&v550 + 1) = v80;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_403400;
    __p.__r_.__value_.__l.__cap_ = 0x100000001LL;
    sub_328644(&v549, &xmmword_403500, (__n128 *)&v526, 1987013749, 1986359655, (uint64_t)&__p);
    else {
      std::string __dst = __src;
    }
    char v541 = 1;
    else {
      *(std::string *)v530 = v564;
    }
    v530[24] = 1;
    *(void *)&__int128 v593 = 0LL;
    memset(v592, 0, sizeof(v592));
    __int128 v506 = *(_OWORD *)&qword_402EFC;
    *(_OWORD *)&v597.__r_.__value_.__l.__data_ = *(_OWORD *)&qword_402EFC;
    v597.__r_.__value_.__l.__cap_ = 2LL;
    sub_83660((uint64_t)v592, (int *)&v597, 3LL);
    uint64_t v82 = v40 | 0x100000000LL;
    uint64_t v503 = v41 | 0x100000000LL;
    sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&__src,  &v566,  &__dst,  (std::string *)v530,  (uint64_t)&v508,  v40 | 0x100000000LL,  v41 | 0x100000000LL,  0.0,  (uint64_t)&v522,  1,  (uint64_t)v592);
    sub_178254((uint64_t)&xmmword_49F988, (uint64_t)&__p);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
    sub_178454((void ***)&v597);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
    sub_178454((void ***)&v597);
    if (v621 < 0) {
      operator delete(v618);
    }
    sub_830DC((uint64_t)v608);
    if (v606 < 0) {
      operator delete(v603);
    }
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_1784C4((void ***)&v597);
    sub_83284((uint64_t)v592);
    if (v530[24] && (v530[23] & 0x80000000) != 0) {
      operator delete(*(void **)v530);
    }
    if ((v79 & 1) != 0)
    {
      uint64_t v83 = v550;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v550;
      if (*((void *)&v550 + 1))
      {
        uint64_t v84 = (unint64_t *)(*((void *)&v550 + 1) + 8LL);
        do
          unint64_t v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
        std::string::size_type v86 = __p.__r_.__value_.__l.__size_;
      }

      else
      {
        std::string::size_type v86 = 0LL;
      }

      sub_143208(&xmmword_49F988, v83, v86);
      std::string v91 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_321;
      }
      unsigned __int8 v92 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
    }

    else
    {
      uint64_t v87 = v549;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v549;
      if (*((void *)&v549 + 1))
      {
        __int128 v88 = (unint64_t *)(*((void *)&v549 + 1) + 8LL);
        do
          unint64_t v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        std::string::size_type v90 = __p.__r_.__value_.__l.__size_;
      }

      else
      {
        std::string::size_type v90 = 0LL;
      }

      sub_143208(&xmmword_49F988, v87, v90);
      std::string v91 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_321;
      }
      int v94 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v93 = __ldaxr(v94);
      while (__stlxr(v93 - 1, v94));
    }

    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }

LABEL_527:
      if ((void)xmmword_49FA68 == *((void *)&xmmword_49FA68 + 1))
      {
        v473 = (os_log_t *)sub_138E8(13);
        uint64_t v474 = *v473;
        if (*v473 && os_log_type_enabled(*v473, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 279;
          _os_log_impl( &dword_0,  v474,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Movie DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
        }

        v475 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v475, "Speaker Movie DSPChainConfig didn't load properly");
      }

      if (v502)
      {
        int v167 = (char)v546.__r_.__value_.__s.__size_;
        if ((v546.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t v168 = v546.__r_.__value_.__s.__size_;
        }
        else {
          size_t v168 = v546.__r_.__value_.__l.__size_;
        }
        unsigned int v169 = v592;
        sub_D0924((uint64_t)v592, v168 + 1);
        if (v592[23] < 0) {
          unsigned int v169 = *(_BYTE **)v592;
        }
        if (v168)
        {
          if (v167 >= 0) {
            uint64_t v170 = &v546;
          }
          else {
            uint64_t v170 = (std::string *)v546.__r_.__value_.__r.__words[0];
          }
          memmove(v169, v170, v168);
        }

        *(_WORD *)&v169[v168] = 47;
        if ((v571 & 0x80u) == 0) {
          uint64_t v171 = (const std::string::value_type *)&v569;
        }
        else {
          uint64_t v171 = (const std::string::value_type *)v569;
        }
        if ((v571 & 0x80u) == 0) {
          std::string::size_type v172 = v571;
        }
        else {
          std::string::size_type v172 = v570;
        }
        uint64_t v173 = std::string::append((std::string *)v592, v171, v172);
        __int128 v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v173->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v174;
        v173->__r_.__value_.__l.__size_ = 0LL;
        v173->__r_.__value_.__l.__cap_ = 0LL;
        v173->__r_.__value_.__r.__words[0] = 0LL;
        std::string::size_type v175 = std::string::append(&__p, "_speaker_multichannel.dspg", 0x1AuLL);
        uint64_t v96 = v503;
        __int128 v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
        v624.__r_.__value_.__l.__cap_ = v175->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v624.__r_.__value_.__l.__data_ = v176;
        v175->__r_.__value_.__l.__size_ = 0LL;
        v175->__r_.__value_.__l.__cap_ = 0LL;
        v175->__r_.__value_.__r.__words[0] = 0LL;
        if ((v592[23] & 0x80000000) != 0) {
          operator delete(*(void **)v592);
        }
        if ((v571 & 0x80u) == 0) {
          size_t v177 = v571;
        }
        else {
          size_t v177 = v570;
        }
        BOOL v178 = &v539;
        sub_D0924((uint64_t)&v539, v177 + 21);
        if ((v539.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          BOOL v178 = (std::string *)v539.__r_.__value_.__r.__words[0];
        }
        if (v177)
        {
          if ((v571 & 0x80u) == 0) {
            char v179 = &v569;
          }
          else {
            char v179 = v569;
          }
          memmove(v178, v179, v177);
        }

        strcpy((char *)v178 + v177, "_speaker_multichannel");
        if ((v571 & 0x80u) == 0) {
          size_t v180 = v571;
        }
        else {
          size_t v180 = v570;
        }
        uint64_t v181 = &v538;
        sub_D0924((uint64_t)&v538, v180 + 26);
        if ((v538.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v181 = (std::string *)v538.__r_.__value_.__r.__words[0];
        }
        if (v180)
        {
          if ((v571 & 0x80u) == 0) {
            uint64_t v182 = &v569;
          }
          else {
            uint64_t v182 = v569;
          }
          memmove(v181, v182, v180);
        }

        strcpy((char *)v181 + v180, "_speaker_multichannel_solo");
        else {
          *(std::string *)v530 = v539;
        }
        v530[24] = 1;
        else {
          std::string v597 = v538;
        }
        char v598 = 1;
        *(void *)&__int128 v593 = 0LL;
        memset(v592, 0, sizeof(v592));
        *(_OWORD *)&v595.__r_.__value_.__l.__data_ = v506;
        v595.__r_.__value_.__l.__cap_ = 2LL;
        sub_83660((uint64_t)v592, (int *)&v595, 3LL);
        sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v539,  &v624,  (std::string *)v530,  &v597,  (uint64_t)&v508,  0x100000008LL,  v96,  0.0,  (uint64_t)&__dst,  1,  (uint64_t)v592);
        sub_178254((uint64_t)&xmmword_49FEC8, (uint64_t)&__p);
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
        sub_178454((void ***)&v595);
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
        sub_178454((void ***)&v595);
        if (v621 < 0) {
          operator delete(v618);
        }
        sub_830DC((uint64_t)v608);
        if (v606 < 0) {
          operator delete(v603);
        }
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1784C4((void ***)&v595);
        sub_83284((uint64_t)v592);
        if (v530[24] && (v530[23] & 0x80000000) != 0) {
          operator delete(*(void **)v530);
        }
        int v183 = (char)v567.__r_.__value_.__s.__size_;
        if ((v567.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t v184 = v567.__r_.__value_.__s.__size_;
        }
        else {
          size_t v184 = v567.__r_.__value_.__l.__size_;
        }
        int v185 = &v537;
        sub_D0924((uint64_t)&v537, v184 + 32);
        if ((v537.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v185 = (std::string *)v537.__r_.__value_.__r.__words[0];
        }
        if (v184)
        {
          if (v183 >= 0) {
            v186 = &v567;
          }
          else {
            v186 = (std::string *)v567.__r_.__value_.__r.__words[0];
          }
          memmove(v185, v186, v184);
        }

        strcpy((char *)v185 + v184, "_speaker_multichannel_music.dspg");
        if ((v571 & 0x80u) == 0) {
          size_t v187 = v571;
        }
        else {
          size_t v187 = v570;
        }
        char v188 = &v536;
        sub_D0924((uint64_t)&v536, v187 + 27);
        if ((v536.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          char v188 = (std::string *)v536.__r_.__value_.__r.__words[0];
        }
        if (v187)
        {
          if ((v571 & 0x80u) == 0) {
            uint64_t v189 = &v569;
          }
          else {
            uint64_t v189 = v569;
          }
          memmove(v188, v189, v187);
        }

        strcpy((char *)v188 + v187, "_speaker_multichannel_music");
        if ((v571 & 0x80u) == 0) {
          size_t v190 = v571;
        }
        else {
          size_t v190 = v570;
        }
        uint64_t v191 = &v535;
        sub_D0924((uint64_t)&v535, v190 + 32);
        if ((v535.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v191 = (std::string *)v535.__r_.__value_.__r.__words[0];
        }
        if (v190)
        {
          if ((v571 & 0x80u) == 0) {
            uint64_t v192 = &v569;
          }
          else {
            uint64_t v192 = v569;
          }
          memmove(v191, v192, v190);
        }

        strcpy((char *)v191 + v190, "_speaker_multichannel_music_solo");
        else {
          *(std::string *)v530 = v536;
        }
        v530[24] = 1;
        else {
          std::string v597 = v535;
        }
        char v598 = 1;
        *(void *)&__int128 v593 = 0LL;
        memset(v592, 0, sizeof(v592));
        *(_OWORD *)&v595.__r_.__value_.__l.__data_ = v506;
        v595.__r_.__value_.__l.__cap_ = 2LL;
        sub_83660((uint64_t)v592, (int *)&v595, 3LL);
        sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v536,  &v537,  (std::string *)v530,  &v597,  (uint64_t)&v508,  0x100000008LL,  v96,  0.0,  (uint64_t)&v522,  1,  (uint64_t)v592);
        sub_178254((uint64_t)&xmmword_49FDE8, (uint64_t)&__p);
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
        sub_178454((void ***)&v595);
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
        sub_178454((void ***)&v595);
        if (v621 < 0) {
          operator delete(v618);
        }
        sub_830DC((uint64_t)v608);
        if (v606 < 0) {
          operator delete(v603);
        }
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1784C4((void ***)&v595);
        sub_83284((uint64_t)v592);
        if (v530[24] && (v530[23] & 0x80000000) != 0) {
          operator delete(*(void **)v530);
        }
        sub_2BDADC((uint64_t)&__p);
        if (v603) {
          float v193 = *(float *)(__p.__r_.__value_.__l.__size_ + 36);
        }
        else {
          float v193 = 0.0;
        }
        *(double *)v530 = v193;
        *(double *)&v530[8] = sub_6461C((uint64_t)&__p);
        *(_OWORD *)v592 = xmmword_403400;
        *(void *)&v592[16] = 0x100000001LL;
        sub_328644(&v597, v530, (__n128 *)&__p, 1987013749, 1986359655, (uint64_t)v592);
        uint64_t v194 = v597.__r_.__value_.__r.__words[0];
        *(_OWORD *)v592 = *(_OWORD *)&v597.__r_.__value_.__l.__data_;
        if (v597.__r_.__value_.__l.__size_)
        {
          uint64_t v195 = (unint64_t *)(v597.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v196 = __ldxr(v195);
          while (__stxr(v196 + 1, v195));
          uint64_t v197 = *(void *)&v592[8];
        }

        else
        {
          uint64_t v197 = 0LL;
        }

        sub_143208(&xmmword_49FDE8, v194, v197);
        uint64_t v198 = *(std::__shared_weak_count **)&v592[8];
        if (*(void *)&v592[8])
        {
          int v199 = (unint64_t *)(*(void *)&v592[8] + 8LL);
          do
            unint64_t v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
          }
        }

        uint64_t v201 = v550;
        *(_OWORD *)v592 = v550;
        if (*((void *)&v550 + 1))
        {
          unint64_t v202 = (unint64_t *)(*((void *)&v550 + 1) + 8LL);
          do
            unint64_t v203 = __ldxr(v202);
          while (__stxr(v203 + 1, v202));
          uint64_t v204 = *(void *)&v592[8];
        }

        else
        {
          uint64_t v204 = 0LL;
        }

        sub_143208(&xmmword_49FEC8, v201, v204);
        uint64_t v205 = *(std::__shared_weak_count **)&v592[8];
        if (*(void *)&v592[8])
        {
          char v206 = (unint64_t *)(*(void *)&v592[8] + 8LL);
          do
            unint64_t v207 = __ldaxr(v206);
          while (__stlxr(v207 - 1, v206));
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
        }

        if ((void)xmmword_49FDE8 == *((void *)&xmmword_49FDE8 + 1))
        {
          v487 = (os_log_t *)sub_138E8(13);
          v488 = *v487;
          if (*v487 && os_log_type_enabled(*v487, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v592 = 136315394;
            *(void *)&v592[4] = "RoutingSettings_B238.cpp";
            *(_WORD *)&v592[12] = 1024;
            *(_DWORD *)&v592[14] = 306;
            _os_log_impl( &dword_0,  v488,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Spatial DSPChainConfig didn't load properly",  v592,  0x12u);
          }

          v489 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v489, "Speaker Spatial DSPChainConfig didn't load properly");
        }

        else
        {
          if ((void)xmmword_49FEC8 != *((void *)&xmmword_49FEC8 + 1))
          {
            uint64_t v208 = (std::__shared_weak_count *)v597.__r_.__value_.__l.__size_;
            if (v597.__r_.__value_.__l.__size_)
            {
              uint64_t v209 = (unint64_t *)(v597.__r_.__value_.__l.__size_ + 8);
              do
                unint64_t v210 = __ldaxr(v209);
              while (__stlxr(v210 - 1, v209));
              if (!v210)
              {
                ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                std::__shared_weak_count::__release_weak(v208);
              }
            }

            sub_32C8C((void *)__p.__r_.__value_.__l.__cap_);
            goto LABEL_673;
          }

          v490 = (os_log_t *)sub_138E8(13);
          v491 = *v490;
          if (*v490 && os_log_type_enabled(*v490, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v592 = 136315394;
            *(void *)&v592[4] = "RoutingSettings_B238.cpp";
            *(_WORD *)&v592[12] = 1024;
            *(_DWORD *)&v592[14] = 307;
            _os_log_impl( &dword_0,  v491,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Movie Multichannel DSPChainConfig didn't load properly",  v592,  0x12u);
          }

          v489 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v489, "Speaker Movie Multichannel DSPChainConfig didn't load properly");
        }
      }

LABEL_673:
      if (v504)
      {
        if ((v571 & 0x80u) == 0) {
          size_t v211 = v571;
        }
        else {
          size_t v211 = v570;
        }
        uint64_t v212 = &v624;
        sub_D0924((uint64_t)&v624, v211 + 19);
        if ((v624.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v212 = (std::string *)v624.__r_.__value_.__r.__words[0];
        }
        if (v211)
        {
          if ((v571 & 0x80u) == 0) {
            uint64_t v213 = &v569;
          }
          else {
            uint64_t v213 = v569;
          }
          memmove(v212, v213, v211);
        }

        strcpy((char *)v212 + v211, "_speaker_spokenword");
        else {
          *(std::string *)v530 = v624;
        }
        v530[24] = 1;
        else {
          std::string v597 = v564;
        }
        char v598 = 1;
        *(void *)&__int128 v593 = 0LL;
        memset(v592, 0, sizeof(v592));
        *(_OWORD *)&v595.__r_.__value_.__l.__data_ = v506;
        v595.__r_.__value_.__l.__cap_ = 2LL;
        sub_83660((uint64_t)v592, (int *)&v595, 3LL);
        sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v624,  &v566,  (std::string *)v530,  &v597,  (uint64_t)&v508,  v82,  v96,  0.0,  (uint64_t)&v522,  1,  (uint64_t)v592);
        sub_178254((uint64_t)&xmmword_49FB48, (uint64_t)&__p);
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
        sub_178454((void ***)&v595);
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
        sub_178454((void ***)&v595);
        if (v621 < 0) {
          operator delete(v618);
        }
        sub_830DC((uint64_t)v608);
        if (v606 < 0) {
          operator delete(v603);
        }
        v595.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1784C4((void ***)&v595);
        sub_83284((uint64_t)v592);
        if (v530[24] && (v530[23] & 0x80000000) != 0) {
          operator delete(*(void **)v530);
        }
        uint64_t v214 = v550;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v550;
        if (*((void *)&v550 + 1))
        {
          __int16 v215 = (unint64_t *)(*((void *)&v550 + 1) + 8LL);
          do
            unint64_t v216 = __ldxr(v215);
          while (__stxr(v216 + 1, v215));
          std::string::size_type v217 = __p.__r_.__value_.__l.__size_;
        }

        else
        {
          std::string::size_type v217 = 0LL;
        }

        sub_143208(&xmmword_49FB48, v214, v217);
        uint64_t v218 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          uint64_t v219 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }

        if ((void)xmmword_49FB48 == *((void *)&xmmword_49FB48 + 1))
        {
          v484 = (os_log_t *)sub_138E8(13);
          v485 = *v484;
          if (*v484 && os_log_type_enabled(*v484, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
            WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 315;
            _os_log_impl( &dword_0,  v485,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker SpokenWord DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
          }

          v486 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v486, "Speaker SpokenWord DSPChainConfig didn't load properly");
        }
      }

      int v221 = (char)v546.__r_.__value_.__s.__size_;
      if ((v546.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v222 = v546.__r_.__value_.__s.__size_;
      }
      else {
        size_t v222 = v546.__r_.__value_.__l.__size_;
      }
      uint64_t v223 = v592;
      sub_D0924((uint64_t)v592, v222 + 1);
      if (v592[23] < 0) {
        uint64_t v223 = *(_BYTE **)v592;
      }
      if (v222)
      {
        if (v221 >= 0) {
          uint64_t v224 = &v546;
        }
        else {
          uint64_t v224 = (std::string *)v546.__r_.__value_.__r.__words[0];
        }
        memmove(v223, v224, v222);
      }

      *(_WORD *)&v223[v222] = 47;
      if ((v571 & 0x80u) == 0) {
        char v225 = (const std::string::value_type *)&v569;
      }
      else {
        char v225 = (const std::string::value_type *)v569;
      }
      if ((v571 & 0x80u) == 0) {
        std::string::size_type v226 = v571;
      }
      else {
        std::string::size_type v226 = v570;
      }
      v227 = std::string::append((std::string *)v592, v225, v226);
      __int128 v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v227->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v228;
      v227->__r_.__value_.__l.__size_ = 0LL;
      v227->__r_.__value_.__l.__cap_ = 0LL;
      v227->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v229 = std::string::append(&__p, "_speaker_lowlatencystereo.dspg", 0x1EuLL);
      __int128 v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
      v539.__r_.__value_.__l.__cap_ = v229->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v539.__r_.__value_.__l.__data_ = v230;
      v229->__r_.__value_.__l.__size_ = 0LL;
      v229->__r_.__value_.__l.__cap_ = 0LL;
      v229->__r_.__value_.__r.__words[0] = 0LL;
      if ((v592[23] & 0x80000000) != 0) {
        operator delete(*(void **)v592);
      }
      if ((v571 & 0x80u) == 0) {
        size_t v231 = v571;
      }
      else {
        size_t v231 = v570;
      }
      uint64_t v232 = &v538;
      sub_D0924((uint64_t)&v538, v231 + 25);
      if ((v538.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v232 = (std::string *)v538.__r_.__value_.__r.__words[0];
      }
      if (v231)
      {
        if ((v571 & 0x80u) == 0) {
          uint64_t v233 = &v569;
        }
        else {
          uint64_t v233 = v569;
        }
        memmove(v232, v233, v231);
      }

      strcpy((char *)v232 + v231, "_speaker_lowlatencystereo");
      qmemcpy(v500, "lowlatencystereo_speaker_lowlate", sizeof(v500));
      if ((v571 & 0x80u) == 0) {
        size_t v234 = v571;
      }
      else {
        size_t v234 = v570;
      }
      v235 = &v537;
      sub_D0924((uint64_t)&v537, v234 + 25);
      if ((v537.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v235 = (std::string *)v537.__r_.__value_.__r.__words[0];
      }
      if (v234)
      {
        if ((v571 & 0x80u) == 0) {
          unint64_t v236 = &v569;
        }
        else {
          unint64_t v236 = v569;
        }
        memmove(v235, v236, v234);
      }

      BOOL v237 = (char *)v235 + v234;
      *(_OWORD *)BOOL v237 = v500[1];
      *(_OWORD *)(v237 + 9) = v500[0];
      v237[25] = 0;
      else {
        *(std::string *)v530 = v538;
      }
      v530[24] = 1;
      else {
        std::string v597 = v537;
      }
      char v598 = 1;
      *(void *)&__int128 v593 = 0LL;
      memset(v592, 0, sizeof(v592));
      *(_OWORD *)&v595.__r_.__value_.__l.__data_ = v506;
      v595.__r_.__value_.__l.__cap_ = 2LL;
      sub_83660((uint64_t)v592, (int *)&v595, 3LL);
      sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v538,  &v539,  (std::string *)v530,  &v597,  (uint64_t)&v508,  v82,  v96,  0.0,  (uint64_t)&v551,  1,  (uint64_t)v592);
      sub_178254((uint64_t)&xmmword_49FC28, (uint64_t)&__p);
      v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
      sub_178454((void ***)&v595);
      v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
      sub_178454((void ***)&v595);
      if (v621 < 0) {
        operator delete(v618);
      }
      sub_830DC((uint64_t)v608);
      if (v606 < 0) {
        operator delete(v603);
      }
      v595.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_1784C4((void ***)&v595);
      sub_83284((uint64_t)v592);
      if (v530[24] && (v530[23] & 0x80000000) != 0) {
        operator delete(*(void **)v530);
      }
      if ((v79 & 1) != 0)
      {
        uint64_t v238 = v550;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v550;
        if (*((void *)&v550 + 1))
        {
          v239 = (unint64_t *)(*((void *)&v550 + 1) + 8LL);
          do
            unint64_t v240 = __ldxr(v239);
          while (__stxr(v240 + 1, v239));
          std::string::size_type v241 = __p.__r_.__value_.__l.__size_;
        }

        else
        {
          std::string::size_type v241 = 0LL;
        }

        sub_143208(&xmmword_49FC28, v238, v241);
        uint64_t v246 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_) {
          goto LABEL_789;
        }
        uint64_t v247 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v248 = __ldaxr(v247);
        while (__stlxr(v248 - 1, v247));
      }

      else
      {
        uint64_t v242 = v549;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v549;
        if (*((void *)&v549 + 1))
        {
          v243 = (unint64_t *)(*((void *)&v549 + 1) + 8LL);
          do
            unint64_t v244 = __ldxr(v243);
          while (__stxr(v244 + 1, v243));
          std::string::size_type v245 = __p.__r_.__value_.__l.__size_;
        }

        else
        {
          std::string::size_type v245 = 0LL;
        }

        sub_143208(&xmmword_49FC28, v242, v245);
        uint64_t v246 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_) {
          goto LABEL_789;
        }
        v249 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v248 = __ldaxr(v249);
        while (__stlxr(v248 - 1, v249));
      }

      if (!v248)
      {
        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
        std::__shared_weak_count::__release_weak(v246);
      }

LABEL_789:
      sub_2BDADC((uint64_t)v592);
      if (*(void *)&v592[24]) {
        float v250 = *(float *)(*(void *)&v592[8] + 36LL);
      }
      else {
        float v250 = 0.0;
      }
      float v251 = sub_6461C((uint64_t)v592);
      uint64_t v252 = (char *)operator new(0x98uLL);
      *((void *)v252 + 1) = 0LL;
      char v253 = (unint64_t *)(v252 + 8);
      *((void *)v252 + 2) = 0LL;
      *(void *)uint64_t v252 = off_481840;
      *((void *)v252 + 3) = &off_4818B8;
      *((_DWORD *)v252 + 16) = 1;
      *((_OWORD *)v252 + 2) = xmmword_403410;
      *((_OWORD *)v252 + 3) = xmmword_4033E0;
      *((double *)v252 + 9) = v250;
      *((double *)v252 + 10) = v251;
      *((_DWORD *)v252 + 22) = *(_DWORD *)v592;
      sub_142EF4((uint64_t)(v252 + 96), &v592[8]);
      *(_OWORD *)(v252 + 120) = v593;
      v252[136] = 1;
      *((void *)v252 + 18) = 0x76657167766F6C75LL;
      *((void *)v252 + 3) = off_481878;
      v533 = v252 + 24;
      v534 = (std::__shared_weak_count *)v252;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v252 + 24);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v252;
      BOOL v5 = v495;
      do
        unint64_t v254 = __ldxr(v253);
      while (__stxr(v254 + 1, v253));
      sub_143208(&xmmword_49FD08, (uint64_t)(v252 + 24), (uint64_t)v252);
      uint64_t v255 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v256 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
          std::__shared_weak_count::__release_weak(v255);
        }
      }

      if ((void)xmmword_49FC28 == *((void *)&xmmword_49FC28 + 1))
      {
        v476 = (os_log_t *)sub_138E8(13);
        v477 = *v476;
        if (*v476 && os_log_type_enabled(*v476, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 340;
          _os_log_impl( &dword_0,  v477,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Low Latency DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
        }

        v478 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v478, "Speaker Low Latency DSPChainConfig didn't load properly");
      }

      if (v502)
      {
        int v258 = (char)v546.__r_.__value_.__s.__size_;
        if ((v546.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t v259 = v546.__r_.__value_.__s.__size_;
        }
        else {
          size_t v259 = v546.__r_.__value_.__l.__size_;
        }
        unint64_t v260 = v530;
        sub_D0924((uint64_t)v530, v259 + 1);
        if (v530[23] < 0) {
          unint64_t v260 = *(_BYTE **)v530;
        }
        if (v259)
        {
          if (v258 >= 0) {
            uint64_t v261 = &v546;
          }
          else {
            uint64_t v261 = (std::string *)v546.__r_.__value_.__r.__words[0];
          }
          memmove(v260, v261, v259);
        }

        *(_WORD *)&v260[v259] = 47;
        if ((v571 & 0x80u) == 0) {
          uint64_t v262 = (const std::string::value_type *)&v569;
        }
        else {
          uint64_t v262 = (const std::string::value_type *)v569;
        }
        if ((v571 & 0x80u) == 0) {
          std::string::size_type v263 = v571;
        }
        else {
          std::string::size_type v263 = v570;
        }
        uint64_t v264 = std::string::append((std::string *)v530, v262, v263);
        __int128 v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v264->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v265;
        v264->__r_.__value_.__l.__size_ = 0LL;
        v264->__r_.__value_.__l.__cap_ = 0LL;
        v264->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v266 = std::string::append(&__p, "_speaker_lowlatency.dspg", 0x18uLL);
        __int128 v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
        v536.__r_.__value_.__l.__cap_ = v266->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v536.__r_.__value_.__l.__data_ = v267;
        v266->__r_.__value_.__l.__size_ = 0LL;
        v266->__r_.__value_.__l.__cap_ = 0LL;
        v266->__r_.__value_.__r.__words[0] = 0LL;
        if ((v530[23] & 0x80000000) != 0) {
          operator delete(*(void **)v530);
        }
        if ((v571 & 0x80u) == 0) {
          size_t v268 = v571;
        }
        else {
          size_t v268 = v570;
        }
        v269 = &v535;
        sub_D0924((uint64_t)&v535, v268 + 19);
        if ((v535.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          v269 = (std::string *)v535.__r_.__value_.__r.__words[0];
        }
        if (v268)
        {
          if ((v571 & 0x80u) == 0) {
            v270 = &v569;
          }
          else {
            v270 = v569;
          }
          memmove(v269, v270, v268);
        }

        strcpy((char *)v269 + v268, "_speaker_lowlatency");
        if ((v571 & 0x80u) == 0) {
          size_t v271 = v571;
        }
        else {
          size_t v271 = v570;
        }
        v272 = &v532;
        sub_D0924((uint64_t)&v532, v271 + 24);
        if ((v532.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          v272 = (std::string *)v532.__r_.__value_.__r.__words[0];
        }
        if (v271)
        {
          if ((v571 & 0x80u) == 0) {
            v273 = &v569;
          }
          else {
            v273 = v569;
          }
          memmove(v272, v273, v271);
        }

        strcpy((char *)v272 + v271, "_speaker_lowlatency_solo");
        else {
          std::string v597 = v535;
        }
        char v598 = 1;
        else {
          std::string v595 = v532;
        }
        char v596 = 1;
        uint64_t v531 = 0LL;
        memset(v530, 0, sizeof(v530));
        *(_OWORD *)&v624.__r_.__value_.__l.__data_ = v506;
        v624.__r_.__value_.__l.__cap_ = 2LL;
        sub_83660((uint64_t)v530, (int *)&v624, 3LL);
        sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v535,  &v536,  &v597,  &v595,  (uint64_t)&v508,  0x100000008LL,  v503,  0.0,  (uint64_t)&v551,  1,  (uint64_t)v530);
        sub_178254((uint64_t)&xmmword_49FD08, (uint64_t)&__p);
        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
        sub_178454((void ***)&v624);
        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
        sub_178454((void ***)&v624);
        if (v621 < 0) {
          operator delete(v618);
        }
        sub_830DC((uint64_t)v608);
        if (v606 < 0) {
          operator delete(v603);
        }
        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1784C4((void ***)&v624);
        sub_83284((uint64_t)v530);
        uint64_t v274 = v549;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v549;
        if (*((void *)&v549 + 1))
        {
          BOOL v275 = (unint64_t *)(*((void *)&v549 + 1) + 8LL);
          do
            unint64_t v276 = __ldxr(v275);
          while (__stxr(v276 + 1, v275));
          std::string::size_type v277 = __p.__r_.__value_.__l.__size_;
        }

        else
        {
          std::string::size_type v277 = 0LL;
        }

        sub_143208(&xmmword_49FD08, v274, v277);
        double v278 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          BOOL v279 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v280 = __ldaxr(v279);
          while (__stlxr(v280 - 1, v279));
          if (!v280)
          {
            ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
            std::__shared_weak_count::__release_weak(v278);
          }
        }

        if ((void)xmmword_49FD08 == *((void *)&xmmword_49FD08 + 1))
        {
          v492 = (os_log_t *)sub_138E8(13);
          v493 = *v492;
          if (*v492 && os_log_type_enabled(*v492, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
            WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 351;
            _os_log_impl( &dword_0,  v493,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Low Latency DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
          }

          v494 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v494, "Speaker Low Latency DSPChainConfig didn't load properly");
        }
      }

      int v281 = (char)v567.__r_.__value_.__s.__size_;
      if ((v567.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v282 = v567.__r_.__value_.__s.__size_;
      }
      else {
        size_t v282 = v567.__r_.__value_.__l.__size_;
      }
      uint64_t v283 = &v536;
      sub_D0924((uint64_t)&v536, v282 + 19);
      if ((v536.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v283 = (std::string *)v536.__r_.__value_.__r.__words[0];
      }
      if (v282)
      {
        if (v281 >= 0) {
          uint64_t v284 = &v567;
        }
        else {
          uint64_t v284 = (std::string *)v567.__r_.__value_.__r.__words[0];
        }
        memmove(v283, v284, v282);
      }

      strcpy((char *)v283 + v282, "_mic_telephony.dspg");
      if ((v571 & 0x80u) == 0) {
        size_t v285 = v571;
      }
      else {
        size_t v285 = v570;
      }
      char v286 = &v535;
      sub_D0924((uint64_t)&v535, v285 + 14);
      if ((v535.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v286 = (std::string *)v535.__r_.__value_.__r.__words[0];
      }
      if (v285)
      {
        if ((v571 & 0x80u) == 0) {
          v287 = &v569;
        }
        else {
          v287 = v569;
        }
        memmove(v286, v287, v285);
      }

      strcpy((char *)v286 + v285, "_mic_telephony");
      if ((v571 & 0x80u) == 0) {
        size_t v288 = v571;
      }
      else {
        size_t v288 = v570;
      }
      uint64_t v289 = &v532;
      sub_D0924((uint64_t)&v532, v288 + 14);
      if ((v532.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v289 = (std::string *)v532.__r_.__value_.__r.__words[0];
      }
      if (v288)
      {
        if ((v571 & 0x80u) == 0) {
          uint64_t v290 = &v569;
        }
        else {
          uint64_t v290 = v569;
        }
        memmove(v289, v290, v288);
      }

      strcpy((char *)v289 + v288, "_mic_telephony");
      else {
        std::string v597 = v535;
      }
      char v598 = 1;
      else {
        std::string v595 = v532;
      }
      char v596 = 1;
      uint64_t v531 = 0LL;
      memset(v530, 0, sizeof(v530));
      *(_OWORD *)&v624.__r_.__value_.__l.__data_ = v506;
      v624.__r_.__value_.__l.__cap_ = 2LL;
      sub_83660((uint64_t)v530, (int *)&v624, 3LL);
      sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v535,  &v536,  &v597,  &v595,  (uint64_t)&v508,  v499 | 0x100000000LL,  v498 | 0x100000000LL,  0.0,  0LL,  0,  (uint64_t)v530);
      sub_178254((uint64_t)&xmmword_4A0328, (uint64_t)&__p);
      v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
      sub_178454((void ***)&v624);
      v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
      sub_178454((void ***)&v624);
      if (v621 < 0) {
        operator delete(v618);
      }
      sub_830DC((uint64_t)v608);
      if (v606 < 0) {
        operator delete(v603);
      }
      v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_1784C4((void ***)&v624);
      sub_83284((uint64_t)v530);
      if ((void)xmmword_4A0328 == *((void *)&xmmword_4A0328 + 1))
      {
        v479 = (os_log_t *)sub_138E8(13);
        v480 = *v479;
        if (*v479 && os_log_type_enabled(*v479, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 359;
          _os_log_impl( &dword_0,  v480,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Mic Telephony DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
        }

        v481 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v481, "Mic Telephony DSPChainConfig didn't load properly");
      }

      else
      {
        else {
          std::string v597 = v555;
        }
        char v598 = 1;
        else {
          std::string v595 = v554;
        }
        char v596 = 1;
        uint64_t v531 = 0LL;
        memset(v530, 0, sizeof(v530));
        *(_OWORD *)&v624.__r_.__value_.__l.__data_ = v506;
        v624.__r_.__value_.__l.__cap_ = 2LL;
        sub_83660((uint64_t)v530, (int *)&v624, 3LL);
        sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v555,  &v556,  &v597,  &v595,  (uint64_t)&v508,  v497 | 0x100000000LL,  v496 | 0x100000000LL,  0.0,  0LL,  0,  (uint64_t)v530);
        int v20 = v505;
        sub_178254((uint64_t)&xmmword_4A0248, (uint64_t)&__p);
        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
        sub_178454((void ***)&v624);
        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
        sub_178454((void ***)&v624);
        if (v621 < 0) {
          operator delete(v618);
        }
        sub_830DC((uint64_t)v608);
        if (v606 < 0) {
          operator delete(v603);
        }
        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1784C4((void ***)&v624);
        sub_83284((uint64_t)v530);
        if ((void)xmmword_4A0248 != *((void *)&xmmword_4A0248 + 1))
        {
          byte_49F9BC = 1;
          byte_49FA9C = 1;
          byte_49FB7C = 1;
          byte_49FC5C = 1;
          byte_49FE1C = 1;
          byte_49FEFC = 1;
          byte_49FD3C = 1;
          uint64_t v291 = v534;
          if (v534)
          {
            p_shared_owners = (unint64_t *)&v534->__shared_owners_;
            do
              unint64_t v293 = __ldaxr(p_shared_owners);
            while (__stlxr(v293 - 1, p_shared_owners));
            if (!v293)
            {
              ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
              std::__shared_weak_count::__release_weak(v291);
            }
          }

          sub_32C8C(*(void **)&v592[16]);
          sub_D0C4C((void *)__dst.__r_.__value_.__l.__cap_);
          uint64_t v294 = (void *)__dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0LL;
          if (v294) {
            operator delete(v294);
          }
          if (SHIBYTE(v544) < 0) {
            operator delete((void *)v543);
          }
          uint64_t v295 = (std::__shared_weak_count *)*((void *)&v547 + 1);
          if (*((void *)&v547 + 1))
          {
            char v296 = (unint64_t *)(*((void *)&v547 + 1) + 8LL);
            do
              unint64_t v297 = __ldaxr(v296);
            while (__stlxr(v297 - 1, v296));
            if (!v297)
            {
              ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
              std::__shared_weak_count::__release_weak(v295);
            }
          }

          v298 = (std::__shared_weak_count *)*((void *)&v548 + 1);
          if (*((void *)&v548 + 1))
          {
            uint64_t v299 = (unint64_t *)(*((void *)&v548 + 1) + 8LL);
            do
              unint64_t v300 = __ldaxr(v299);
            while (__stlxr(v300 - 1, v299));
            if (!v300)
            {
              ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
              std::__shared_weak_count::__release_weak(v298);
            }
          }

          v301 = (std::__shared_weak_count *)*((void *)&v549 + 1);
          if (*((void *)&v549 + 1))
          {
            v302 = (unint64_t *)(*((void *)&v549 + 1) + 8LL);
            do
              unint64_t v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
              std::__shared_weak_count::__release_weak(v301);
            }
          }

          v304 = (std::__shared_weak_count *)*((void *)&v550 + 1);
          if (*((void *)&v550 + 1))
          {
            uint64_t v305 = (unint64_t *)(*((void *)&v550 + 1) + 8LL);
            do
              unint64_t v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }

          sub_32C8C((void *)v526.__r_.__value_.__l.__cap_);
          sub_D0C4C((void *)v600);
          v307 = (void *)v599;
          *(void *)&__int128 v599 = 0LL;
          if (v307) {
            operator delete(v307);
          }
          sub_D0C4C((void *)v552);
          v308 = (void *)v551;
          *(void *)&__int128 v551 = 0LL;
          if (v308) {
            operator delete(v308);
          }
          sub_D0C4C((void *)v519);
          BOOL v309 = (void *)v518;
          *(void *)&__int128 v518 = 0LL;
          if (v309) {
            operator delete(v309);
          }
          sub_D0C4C((void *)v523);
          uint64_t v317 = (void *)v522;
          *(void *)&__int128 v522 = 0LL;
          if (v317) {
            operator delete(v317);
          }
          if (v558 < 0) {
            operator delete(v557[0]);
          }
          if (SHIBYTE(v561) < 0) {
            operator delete((void *)v560);
          }
          sub_33EACC((uint64_t)&v508, v310, v311, v312, v313, v314, v315, v316);
          uint64_t v81 = v569;
          goto LABEL_1021;
        }

        v482 = (os_log_t *)sub_138E8(13);
        std::string::size_type v483 = *v482;
        if (*v482 && os_log_type_enabled(*v482, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 362;
          _os_log_impl( &dword_0,  v483,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Mic Siri DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
        }

        v481 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v481, "Mic Siri DSPChainConfig didn't load properly");
      }
    }

    v471 = (os_log_t *)sub_138E8(13);
    v472 = *v471;
    if (*v471 && os_log_type_enabled(*v471, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 252;
      _os_log_impl( &dword_0,  v472,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Raw DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
    }

    v470 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v470, "Speaker Raw DSPChainConfig didn't load properly");
LABEL_1246:
  }

  if (!v587) {
    sub_8DEEC();
  }
  int v20 = v505;
  if (!v585) {
    sub_8DEEC();
  }
  sub_7D084(&v508, "speaker_general");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_49F988, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "speaker_spoken_word");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_49FB48, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "speaker_stereo_lowlatency");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_49FC28, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "speaker_raw");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_4A0168, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "speaker_multichannel_music");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_49FDE8, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "speaker_siri");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_49FFA8, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "speaker_local_systemsound");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_4A0088, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "speaker_multichannel_lowlatency");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_49FD08, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "mic_siri");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_4A0248, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  sub_7D084(&v508, "mic_telephony");
  sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  sub_178254((uint64_t)&xmmword_4A0328, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  if (sub_1CCDF8())
  {
    sub_7D084(&v508, "speaker_stereo_movie_mled");
    sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
    sub_178254((uint64_t)&xmmword_49FA68, (uint64_t)&__p);
    v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
    sub_178454((void ***)&v526);
    v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
    sub_178454((void ***)&v526);
    if (v621 < 0) {
      operator delete(v618);
    }
    sub_830DC((uint64_t)v608);
    if (v606 < 0) {
      operator delete(v603);
    }
    v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_1784C4((void ***)&v526);
    sub_7D084(&v508, "speaker_multichannel_movie_mled");
    sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  }

  else
  {
    sub_7D084(&v508, "speaker_stereo_movie");
    sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
    sub_178254((uint64_t)&xmmword_49FA68, (uint64_t)&__p);
    v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
    sub_178454((void ***)&v526);
    v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
    sub_178454((void ***)&v526);
    if (v621 < 0) {
      operator delete(v618);
    }
    sub_830DC((uint64_t)v608);
    if (v606 < 0) {
      operator delete(v603);
    }
    v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_1784C4((void ***)&v526);
    sub_7D084(&v508, "speaker_multichannel_movie");
    sub_395660((uint64_t)&__p, v586, (unsigned __int8 *)&v508, v584);
  }

  sub_178254((uint64_t)&xmmword_49FEC8, (uint64_t)&__p);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
  sub_178454((void ***)&v526);
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
  sub_178454((void ***)&v526);
  if (v621 < 0) {
    operator delete(v618);
  }
  sub_830DC((uint64_t)v608);
  if (v606 < 0) {
    operator delete(v603);
  }
  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1784C4((void ***)&v526);
  uint64_t v81 = (void *)v508.__r_.__value_.__r.__words[0];
LABEL_1021:
  operator delete(v81);
LABEL_1022:
  dword_4A0408 = 2;
  byte_4A040C = 1;
  if (sub_56120() != 195)
  {
    LODWORD(v508.__r_.__value_.__l.__data_) = 1836016741;
    LODWORD(__p.__r_.__value_.__l.__data_) = 7;
    __p.__r_.__value_.__l.__size_ = 1684366945LL;
    v526.__r_.__value_.__s.__data_[0] = 0;
    v592[0] = 1;
    uint64_t v318 = qword_4A0440;
    if ((unint64_t)qword_4A0440 >= *(void *)algn_4A0448)
    {
      uint64_t v319 = sub_328794(&qword_4A0438, (int *)&v508, &__p, (char *)&v526, v592);
    }

    else
    {
      sub_328730((uint64_t)&qword_4A0438, 1836016741, &__p, 0, 1);
      uint64_t v319 = v318 + 40;
    }

    qword_4A0440 = v319;
    sub_2DBF5C((uint64_t)&__p);
    LODWORD(v508.__r_.__value_.__l.__data_) = 1836016741;
    LODWORD(__p.__r_.__value_.__l.__data_) = 7;
    __p.__r_.__value_.__l.__size_ = 1918990199LL;
    v526.__r_.__value_.__s.__data_[0] = 0;
    v592[0] = 1;
    uint64_t v320 = qword_4A0458;
    if ((unint64_t)qword_4A0458 >= unk_4A0460)
    {
      uint64_t v321 = sub_328794(&qword_4A0450, (int *)&v508, &__p, (char *)&v526, v592);
    }

    else
    {
      sub_328730((uint64_t)&qword_4A0450, 1836016741, &__p, 0, 1);
      uint64_t v321 = v320 + 40;
    }

    qword_4A0458 = v321;
    sub_2DBF5C((uint64_t)&__p);
    LODWORD(v508.__r_.__value_.__l.__data_) = 1836016741;
    LODWORD(__p.__r_.__value_.__l.__data_) = 7;
    __p.__r_.__value_.__l.__size_ = 1953523822LL;
    v526.__r_.__value_.__s.__data_[0] = 0;
    v592[0] = 1;
    uint64_t v322 = qword_4A0470;
    if ((unint64_t)qword_4A0470 >= *(void *)algn_4A0478)
    {
      uint64_t v323 = sub_328794(&qword_4A0468, (int *)&v508, &__p, (char *)&v526, v592);
    }

    else
    {
      sub_328730((uint64_t)&qword_4A0468, 1836016741, &__p, 0, 1);
      uint64_t v323 = v322 + 40;
    }

    qword_4A0470 = v323;
    sub_2DBF5C((uint64_t)&__p);
  }

  unsigned __int8 v324 = atomic_load((unsigned __int8 *)&qword_4A0488);
  if ((v324 & 1) == 0 && __cxa_guard_acquire(&qword_4A0488))
  {
    unint64_t v444 = operator new(0x80uLL);
    LODWORD(v508.__r_.__value_.__l.__data_) = 0;
    v508.__r_.__value_.__s.__data_[4] = 1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0438;
    __p.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v444,  0LL,  &qword_402CF0,  &qword_402CF8,  &v508,  (uint64_t *)&unk_402D00,  &__p,  (uint64_t)&unk_402D10);
    qword_4A0480 = (uint64_t)v444;
    __cxa_guard_release(&qword_4A0488);
    int v20 = v505;
  }

  sub_2D251C((uint64_t)&v526, qword_4A0480);
  unsigned __int8 v325 = atomic_load((unsigned __int8 *)&qword_4A0498);
  if ((v325 & 1) == 0 && __cxa_guard_acquire(&qword_4A0498))
  {
    v445 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_4A0328;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0468;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v445,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0490 = (uint64_t)v445;
    __cxa_guard_release(&qword_4A0498);
    int v20 = v505;
  }

  sub_2D251C((uint64_t)v592, qword_4A0490);
  unsigned __int8 v326 = atomic_load((unsigned __int8 *)&qword_4A04A8);
  if ((v326 & 1) == 0 && __cxa_guard_acquire(&qword_4A04A8))
  {
    v446 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_4A0248;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_402CD8;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v446,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A04A0 = (uint64_t)v446;
    __cxa_guard_release(&qword_4A04A8);
    int v20 = v505;
  }

  sub_2D251C((uint64_t)&v522, qword_4A04A0);
  unsigned __int8 v327 = atomic_load((unsigned __int8 *)&qword_4A04B8);
  if ((v327 & 1) == 0 && __cxa_guard_acquire(&qword_4A04B8))
  {
    unint64_t v447 = operator new(0x80uLL);
    LODWORD(v508.__r_.__value_.__l.__data_) = 0;
    v508.__r_.__value_.__s.__data_[4] = 1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0450;
    __p.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v447,  0LL,  &qword_402CF0,  &qword_402CF8,  &v508,  (uint64_t *)&unk_402D00,  &__p,  (uint64_t)&unk_402D10);
    qword_4A04B0 = (uint64_t)v447;
    __cxa_guard_release(&qword_4A04B8);
    int v20 = v505;
  }

  sub_2D251C((uint64_t)&v518, qword_4A04B0);
  unsigned __int8 v328 = atomic_load((unsigned __int8 *)&qword_4A04D8);
  if ((v328 & 1) == 0 && __cxa_guard_acquire(&qword_4A04D8))
  {
    qword_4A04D0 = 0LL;
    qword_4A04C8 = 0LL;
    qword_4A04C0 = (uint64_t)&qword_4A04C8;
    __cxa_guard_release(&qword_4A04D8);
  }

  sub_2D3928((uint64_t **)&qword_4A04C0, 1918990112LL, (uint64_t)&v518);
  sub_2D3928((uint64_t **)&qword_4A04C0, 1768776806LL, (uint64_t)&v526);
  sub_2D3928((uint64_t **)&qword_4A04C0, 1987211117LL, (uint64_t)&v522);
  unsigned __int8 v329 = atomic_load((unsigned __int8 *)&qword_4A04F8);
  if ((v329 & 1) == 0 && __cxa_guard_acquire(&qword_4A04F8))
  {
    qword_4A04F0 = 0LL;
    qword_4A04E8 = 0LL;
    qword_4A04E0 = (uint64_t)&qword_4A04E8;
    __cxa_guard_release(&qword_4A04F8);
  }

  sub_2D3928((uint64_t **)&qword_4A04E0, 1768776806LL, (uint64_t)&v526);
  sub_2D3928((uint64_t **)&qword_4A04E0, 1918990112LL, (uint64_t)&v518);
  for (uint64_t i = 0LL; i != 20; i += 4LL)
    sub_2D3928((uint64_t **)&qword_4A04E0, *(unsigned int *)&aOvpvivpvcgpvcv[i], (uint64_t)v592);
  uint64_t v331 = 0LL;
  qmemcpy(&__p, "comicvmitcmg", 12);
  do
  {
    sub_2D3928( (uint64_t **)&qword_4A04E0,  *(unsigned int *)((char *)&__p.__r_.__value_.__l.__data_ + v331),  (uint64_t)v592);
    v331 += 4LL;
  }

  while (v331 != 12);
  unsigned __int8 v332 = atomic_load((unsigned __int8 *)&qword_4A0508);
  if ((v332 & 1) == 0 && __cxa_guard_acquire(&qword_4A0508))
  {
    v448 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49F988;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0438;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v448,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0500 = (uint64_t)v448;
    __cxa_guard_release(&qword_4A0508);
    int v20 = v505;
  }

  unsigned __int8 v333 = atomic_load((unsigned __int8 *)&qword_4A0518);
  if ((v333 & 1) == 0 && __cxa_guard_acquire(&qword_4A0518))
  {
    v449 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_4A0168;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0450;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v449,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0510 = (uint64_t)v449;
    __cxa_guard_release(&qword_4A0518);
    int v20 = v505;
  }

  unsigned __int8 v334 = atomic_load((unsigned __int8 *)&qword_4A0528);
  if ((v334 & 1) == 0 && __cxa_guard_acquire(&qword_4A0528))
  {
    v450 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_4A0088;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_402CD8;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v450,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0520 = (uint64_t)v450;
    __cxa_guard_release(&qword_4A0528);
    int v20 = v505;
  }

  unsigned __int8 v335 = atomic_load((unsigned __int8 *)&qword_4A0538);
  if ((v335 & 1) == 0 && __cxa_guard_acquire(&qword_4A0538))
  {
    v451 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49FFA8;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_402CD8;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v451,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0530 = (uint64_t)v451;
    __cxa_guard_release(&qword_4A0538);
    int v20 = v505;
  }

  unsigned __int8 v336 = atomic_load((unsigned __int8 *)&qword_4A0548);
  if ((v336 & 1) == 0 && __cxa_guard_acquire(&qword_4A0548))
  {
    v452 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0468;
    __p.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v452,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&unk_402D00,  &__p,  (uint64_t)&unk_402D10);
    qword_4A0540 = (uint64_t)v452;
    __cxa_guard_release(&qword_4A0548);
    int v20 = v505;
  }

  unsigned __int8 v337 = atomic_load((unsigned __int8 *)&qword_4A0558);
  if ((v337 & 1) == 0 && __cxa_guard_acquire(&qword_4A0558))
  {
    v453 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49FA68;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0438;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v453,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0550 = (uint64_t)v453;
    __cxa_guard_release(&qword_4A0558);
    int v20 = v505;
  }

  unsigned __int8 v338 = atomic_load((unsigned __int8 *)&qword_4A0568);
  if ((v338 & 1) == 0 && __cxa_guard_acquire(&qword_4A0568))
  {
    v454 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49FEC8;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0438;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v454,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0560 = (uint64_t)v454;
    __cxa_guard_release(&qword_4A0568);
    int v20 = v505;
  }

  unsigned __int8 v339 = atomic_load((unsigned __int8 *)&qword_4A0578);
  if ((v339 & 1) == 0 && __cxa_guard_acquire(&qword_4A0578))
  {
    v455 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49FDE8;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0438;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v455,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0570 = (uint64_t)v455;
    __cxa_guard_release(&qword_4A0578);
    int v20 = v505;
  }

  unsigned __int8 v340 = atomic_load((unsigned __int8 *)&qword_4A0588);
  if ((v340 & 1) == 0 && __cxa_guard_acquire(&qword_4A0588))
  {
    v456 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49FC28;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_402CD8;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v456,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0580 = (uint64_t)v456;
    __cxa_guard_release(&qword_4A0588);
    int v20 = v505;
  }

  unsigned __int8 v341 = atomic_load((unsigned __int8 *)&qword_4A0598);
  if ((v341 & 1) == 0 && __cxa_guard_acquire(&qword_4A0598))
  {
    v457 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49FD08;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_402CD8;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v457,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A0590 = (uint64_t)v457;
    __cxa_guard_release(&qword_4A0598);
    int v20 = v505;
  }

  unsigned __int8 v342 = atomic_load((unsigned __int8 *)&qword_4A05A8);
  if ((v342 & 1) == 0 && __cxa_guard_acquire(&qword_4A05A8))
  {
    v458 = operator new(0x80uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_49FB48;
    __p.__r_.__value_.__s.__data_[8] = 1;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_4A0438;
    v508.__r_.__value_.__s.__data_[8] = 1;
    sub_2CE400( (uint64_t)v458,  0LL,  &qword_402CF0,  &qword_402CF8,  &qword_402D40,  (uint64_t *)&__p,  &v508,  (uint64_t)&unk_402D10);
    qword_4A05A0 = (uint64_t)v458;
    __cxa_guard_release(&qword_4A05A8);
    int v20 = v505;
  }

  unsigned __int8 v343 = atomic_load((unsigned __int8 *)&qword_4A05F8);
  if ((v343 & 1) == 0 && __cxa_guard_acquire(&qword_4A05F8))
  {
    __p.__r_.__value_.__s.__data_[0] = v504;
    __p.__r_.__value_.__s.__data_[1] = v5;
    sub_3288C8(&__p);
    __cxa_guard_release(&qword_4A05F8);
    int v20 = v505;
  }

  unsigned __int8 v344 = atomic_load((unsigned __int8 *)&qword_4A0648);
  if ((v344 & 1) == 0 && __cxa_guard_acquire(&qword_4A0648))
  {
    sub_328BB0();
    __cxa_guard_release(&qword_4A0648);
    int v20 = v505;
  }

  unsigned __int8 v345 = atomic_load((unsigned __int8 *)&qword_4A0698);
  if ((v345 & 1) == 0 && __cxa_guard_acquire(&qword_4A0698))
  {
    sub_328FF8();
    __cxa_guard_release(&qword_4A0698);
    int v20 = v505;
  }

  unsigned __int8 v346 = atomic_load((unsigned __int8 *)&qword_4A06E8);
  if ((v346 & 1) == 0 && __cxa_guard_acquire(&qword_4A06E8))
  {
    sub_2D5760((uint64_t **)&unk_4A06A0, &qword_4A04C0);
    __cxa_guard_release(&qword_4A06E8);
    int v20 = v505;
  }

  unsigned __int8 v347 = atomic_load((unsigned __int8 *)&qword_4A0738);
  if ((v347 & 1) == 0 && __cxa_guard_acquire(&qword_4A0738))
  {
    sub_2D5760((uint64_t **)&unk_4A06F0, &qword_4A04E0);
    __cxa_guard_release(&qword_4A0738);
    int v20 = v505;
  }

  unsigned __int8 v348 = atomic_load((unsigned __int8 *)&qword_4A0788);
  if ((v348 & 1) == 0 && __cxa_guard_acquire(&qword_4A0788))
  {
    __p.__r_.__value_.__s.__data_[0] = v5;
    sub_3290DC(&__p);
    __cxa_guard_release(&qword_4A0788);
    int v20 = v505;
  }

  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)&v508;
  *(_OWORD *)&v508.__r_.__value_.__r.__words[1] = (unint64_t)&v508;
  int v509 = 3;
  v511[0] = 0LL;
  v511[1] = 0LL;
  uint64_t v510 = v511;
  int v512 = 3;
  v514[1] = 0LL;
  uint64_t v515 = 0LL;
  int v513 = v514;
  v514[0] = 0LL;
  v517[0] = 0LL;
  v517[1] = 0LL;
  v516 = v517;
  v507[0] = 0;
  v507[128] = 0;
  sub_295580(&__p, v507);
  __int128 v551 = 0uLL;
  *(void *)&__int128 v552 = 0LL;
  sub_F10CC( &v551,  __p.__r_.__value_.__l.__data_,  __p.__r_.__value_.__l.__size_,  (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  sub_F1144((uint64_t)v507);
  unsigned __int8 v349 = atomic_load((unsigned __int8 *)&qword_4A07A8);
  if ((v349 & 1) == 0 && __cxa_guard_acquire(&qword_4A07A8))
  {
    __int128 v599 = xmmword_403420;
    sub_F1194(&__p, &v599, 4uLL);
    sub_2971C0(qword_4A0790, (unsigned int **)&v551, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }

    __cxa_guard_release(&qword_4A07A8);
    int v20 = v505;
  }

  unsigned __int8 v350 = atomic_load((unsigned __int8 *)&qword_4A07C8);
  if ((v350 & 1) == 0 && __cxa_guard_acquire(&qword_4A07C8))
  {
    __int128 v599 = xmmword_403430;
    sub_F1194(&__p, &v599, 4uLL);
    sub_2971C0(qword_4A07B0, (unsigned int **)&v551, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }

    __cxa_guard_release(&qword_4A07C8);
    int v20 = v505;
  }

  unsigned __int8 v351 = atomic_load((unsigned __int8 *)&qword_4A07E8);
  if ((v351 & 1) == 0 && __cxa_guard_acquire(&qword_4A07E8))
  {
    __int128 v599 = xmmword_403440;
    sub_F1194(&__p, &v599, 4uLL);
    sub_2971C0(qword_4A07D0, (unsigned int **)&v551, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }

    __cxa_guard_release(&qword_4A07E8);
    int v20 = v505;
  }

  *(void *)&__int128 v599 = &v599;
  *((void *)&v599 + 1) = &v599;
  *(void *)&__int128 v600 = 0LL;
  v352 = (char *)operator new(0x38uLL);
  if (v20)
  {
    strcpy(v352 + 16, " papmdhp");
    *((void *)v352 + 4) = &qword_4A05B0;
    v352[40] = 0;
    v352[48] = 0;
    std::string::size_type v353 = v508.__r_.__value_.__r.__words[0];
    *(void *)v352 = v508.__r_.__value_.__r.__words[0];
    *((void *)v352 + 1) = &v508;
    *(void *)(v353 + 8) = v352;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v352;
    ++v508.__r_.__value_.__l.__cap_;
  }

  else
  {
    strcpy(v352 + 16, " papkpsp");
    *((void *)v352 + 4) = &qword_4A05B0;
    v352[40] = 0;
    v352[48] = 0;
    std::string::size_type v355 = v508.__r_.__value_.__r.__words[0];
    *(void *)v352 = v508.__r_.__value_.__r.__words[0];
    *((void *)v352 + 1) = &v508;
    *(void *)(v355 + 8) = v352;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v352;
    ++v508.__r_.__value_.__l.__cap_;
    uint64_t v515 = qword_4A0790;
  }

  uint64_t v354 = sub_F1214((uint64_t)&v508);
  uint64_t v356 = v599;
  *uint64_t v354 = v599;
  v354[1] = &v599;
  *(void *)(v356 + 8) = v354;
  *(void *)&__int128 v599 = v354;
  *(void *)&__int128 v600 = v600 + 1;
  sub_F12DC((uint64_t)&v508);
  uint64_t v357 = (char *)operator new(0x38uLL);
  strcpy(v357 + 16, " papapap");
  *((void *)v357 + 4) = &qword_4A9200;
  v357[40] = 0;
  v357[48] = 0;
  std::string::size_type v358 = v508.__r_.__value_.__r.__words[0];
  *(void *)uint64_t v357 = v508.__r_.__value_.__r.__words[0];
  *((void *)v357 + 1) = &v508;
  *(void *)(v358 + 8) = v357;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v357;
  ++v508.__r_.__value_.__l.__cap_;
  uint64_t v515 = qword_4A0790;
  uint64_t v359 = sub_F1214((uint64_t)&v508);
  uint64_t v360 = v599;
  *uint64_t v359 = v599;
  v359[1] = &v599;
  *(void *)(v360 + 8) = v359;
  *(void *)&__int128 v599 = v359;
  *(void *)&__int128 v600 = v600 + 1;
  sub_F12DC((uint64_t)&v508);
  v361 = (char *)operator new(0x38uLL);
  strcpy(v361 + 16, " paplunp");
  *((void *)v361 + 4) = &qword_4A9200;
  v361[40] = 0;
  v361[48] = 0;
  std::string::size_type v362 = v508.__r_.__value_.__r.__words[0];
  *(void *)v361 = v508.__r_.__value_.__r.__words[0];
  *((void *)v361 + 1) = &v508;
  *(void *)(v362 + 8) = v361;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v361;
  ++v508.__r_.__value_.__l.__cap_;
  uint64_t v363 = sub_F1214((uint64_t)&v508);
  uint64_t v364 = v599;
  *uint64_t v363 = v599;
  v363[1] = &v599;
  *(void *)(v364 + 8) = v363;
  *(void *)&__int128 v599 = v363;
  *(void *)&__int128 v600 = v600 + 1;
  sub_F12DC((uint64_t)&v508);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = (unint64_t)&__dst;
  v365 = (char *)operator new(0x38uLL);
  strcpy(v365 + 16, "isup pap");
  *((void *)v365 + 4) = &qword_4A9200;
  v365[40] = 0;
  v365[48] = 0;
  std::string::size_type v366 = v508.__r_.__value_.__r.__words[0];
  *(void *)v365 = v508.__r_.__value_.__r.__words[0];
  *((void *)v365 + 1) = &v508;
  *(void *)(v366 + 8) = v365;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
  ++v508.__r_.__value_.__l.__cap_;
  v367 = sub_F1214((uint64_t)&v508);
  std::string::size_type v368 = __dst.__r_.__value_.__r.__words[0];
  void *v367 = __dst.__r_.__value_.__r.__words[0];
  v367[1] = &__dst;
  *(void *)(v368 + 8) = v367;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v367;
  ++__dst.__r_.__value_.__l.__cap_;
  sub_F12DC((uint64_t)&v508);
  uint64_t v369 = (char *)operator new(0x38uLL);
  strcpy(v369 + 16, "ibmp pap");
  *((void *)v369 + 4) = &unk_4A06A0;
  v369[40] = 0;
  v369[48] = 0;
  std::string::size_type v370 = v508.__r_.__value_.__r.__words[0];
  *(void *)uint64_t v369 = v508.__r_.__value_.__r.__words[0];
  *((void *)v369 + 1) = &v508;
  *(void *)(v370 + 8) = v369;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v369;
  ++v508.__r_.__value_.__l.__cap_;
  uint64_t v371 = sub_F1214((uint64_t)&v508);
  std::string::size_type v372 = __dst.__r_.__value_.__r.__words[0];
  *uint64_t v371 = __dst.__r_.__value_.__r.__words[0];
  v371[1] = &__dst;
  *(void *)(v372 + 8) = v371;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v371;
  ++__dst.__r_.__value_.__l.__cap_;
  sub_F12DC((uint64_t)&v508);
  *(void *)v530 = v530;
  *(_OWORD *)&v530[8] = (unint64_t)v530;
  uint64_t v373 = (char *)operator new(0x38uLL);
  if (v20)
  {
    strcpy(v373 + 16, " papmdhp");
    *((void *)v373 + 4) = &qword_4A05B0;
    v373[40] = 0;
    v373[48] = 0;
    std::string::size_type v374 = v508.__r_.__value_.__r.__words[0];
    *(void *)uint64_t v373 = v508.__r_.__value_.__r.__words[0];
    *((void *)v373 + 1) = &v508;
    *(void *)(v374 + 8) = v373;
    std::string::size_type cap = v508.__r_.__value_.__l.__cap_;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v373;
    ++v508.__r_.__value_.__l.__cap_;
    v376 = (char *)operator new(0x38uLL);
    strcpy(v376 + 16, "ibmp pap");
    *((void *)v376 + 4) = &qword_4A9200;
    v376[40] = 0;
    v376[48] = 0;
    *(void *)v376 = v373;
    *((void *)v376 + 1) = &v508;
    *((void *)v373 + 1) = v376;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v376;
    v508.__r_.__value_.__l.__cap_ = cap + 2;
  }

  else
  {
    strcpy(v373 + 16, " papkpsp");
    *((void *)v373 + 4) = &qword_4A05B0;
    v373[40] = 0;
    v373[48] = 0;
    std::string::size_type v378 = v508.__r_.__value_.__r.__words[0];
    *(void *)uint64_t v373 = v508.__r_.__value_.__r.__words[0];
    *((void *)v373 + 1) = &v508;
    *(void *)(v378 + 8) = v373;
    std::string::size_type v379 = v508.__r_.__value_.__l.__cap_;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v373;
    ++v508.__r_.__value_.__l.__cap_;
    uint64_t v380 = (char *)operator new(0x38uLL);
    strcpy(v380 + 16, "isup pap");
    *((void *)v380 + 4) = &qword_4A9200;
    v380[40] = 0;
    v380[48] = 0;
    *(void *)uint64_t v380 = v373;
    *((void *)v380 + 1) = &v508;
    *((void *)v373 + 1) = v380;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v380;
    v508.__r_.__value_.__l.__cap_ = v379 + 2;
    uint64_t v515 = qword_4A07B0;
  }

  uint64_t v377 = sub_F1214((uint64_t)&v508);
  uint64_t v381 = *(void *)v530;
  *uint64_t v377 = *(void *)v530;
  v377[1] = v530;
  *(void *)(v381 + 8) = v377;
  *(void *)v530 = v377;
  ++*(void *)&v530[16];
  sub_F12DC((uint64_t)&v508);
  int v382 = (char *)operator new(0x38uLL);
  strcpy(v382 + 16, " paposup");
  *((void *)v382 + 4) = &qword_4A05B0;
  v382[40] = 0;
  v382[48] = 0;
  std::string::size_type v383 = v508.__r_.__value_.__r.__words[0];
  *(void *)int v382 = v508.__r_.__value_.__r.__words[0];
  *((void *)v382 + 1) = &v508;
  *(void *)(v383 + 8) = v382;
  std::string::size_type v384 = v508.__r_.__value_.__l.__cap_;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v382;
  ++v508.__r_.__value_.__l.__cap_;
  uint64_t v385 = (char *)operator new(0x38uLL);
  strcpy(v385 + 16, "ibmp pap");
  *((void *)v385 + 4) = &qword_4A9200;
  v385[40] = 0;
  v385[48] = 0;
  *(void *)uint64_t v385 = v382;
  *((void *)v385 + 1) = &v508;
  *((void *)v382 + 1) = v385;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v385;
  v508.__r_.__value_.__l.__cap_ = v384 + 2;
  unint64_t v386 = sub_F1214((uint64_t)&v508);
  uint64_t v387 = *(void *)v530;
  *unint64_t v386 = *(void *)v530;
  v386[1] = v530;
  *(void *)(v387 + 8) = v386;
  *(void *)v530 = v386;
  ++*(void *)&v530[16];
  sub_F12DC((uint64_t)&v508);
  v388 = (char *)operator new(0x38uLL);
  strcpy(v388 + 16, " papoiup");
  *((void *)v388 + 4) = &qword_4A05B0;
  v388[40] = 0;
  v388[48] = 0;
  std::string::size_type v389 = v508.__r_.__value_.__r.__words[0];
  *(void *)v388 = v508.__r_.__value_.__r.__words[0];
  *((void *)v388 + 1) = &v508;
  *(void *)(v389 + 8) = v388;
  std::string::size_type v390 = v508.__r_.__value_.__l.__cap_;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v388;
  ++v508.__r_.__value_.__l.__cap_;
  v391 = (char *)operator new(0x38uLL);
  strcpy(v391 + 16, "ibmp pap");
  *((void *)v391 + 4) = &qword_4A9200;
  v391[40] = 0;
  v391[48] = 0;
  *(void *)v391 = v388;
  *((void *)v391 + 1) = &v508;
  *((void *)v388 + 1) = v391;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v391;
  v508.__r_.__value_.__l.__cap_ = v390 + 2;
  std::string::size_type v392 = sub_F1214((uint64_t)&v508);
  uint64_t v393 = *(void *)v530;
  *std::string::size_type v392 = *(void *)v530;
  v392[1] = v530;
  *(void *)(v393 + 8) = v392;
  *(void *)v530 = v392;
  ++*(void *)&v530[16];
  sub_F12DC((uint64_t)&v508);
  __int128 v394 = (char *)operator new(0x38uLL);
  strcpy(v394 + 16, " papkpsp");
  *((void *)v394 + 4) = &qword_4A0600;
  v394[40] = 0;
  v394[48] = 0;
  std::string::size_type v395 = v508.__r_.__value_.__r.__words[0];
  *(void *)__int128 v394 = v508.__r_.__value_.__r.__words[0];
  *((void *)v394 + 1) = &v508;
  *(void *)(v395 + 8) = v394;
  std::string::size_type v396 = v508.__r_.__value_.__l.__cap_;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v394;
  ++v508.__r_.__value_.__l.__cap_;
  v397 = (char *)operator new(0x38uLL);
  strcpy(v397 + 16, "ibmp pap");
  *((void *)v397 + 4) = &unk_4A06F0;
  v397[40] = 0;
  v397[48] = 0;
  *(void *)v397 = v394;
  *((void *)v397 + 1) = &v508;
  *((void *)v394 + 1) = v397;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v397;
  v508.__r_.__value_.__l.__cap_ = v396 + 2;
  uint64_t v515 = qword_4A07B0;
  int64_t v398 = sub_F1214((uint64_t)&v508);
  uint64_t v399 = *(void *)v530;
  *int64_t v398 = *(void *)v530;
  v398[1] = v530;
  *(void *)(v399 + 8) = v398;
  *(void *)v530 = v398;
  ++*(void *)&v530[16];
  sub_F12DC((uint64_t)&v508);
  v597.__r_.__value_.__r.__words[0] = (std::string::size_type)&v597;
  v597.__r_.__value_.__l.__size_ = (std::string::size_type)&v597;
  v597.__r_.__value_.__l.__cap_ = 0LL;
  unint64_t v400 = (char *)operator new(0x38uLL);
  if (v20)
  {
    strcpy(v400 + 16, " papmdhp");
    *((void *)v400 + 4) = &qword_4A05B0;
    v400[40] = 0;
    v400[48] = 0;
    std::string::size_type v401 = v508.__r_.__value_.__r.__words[0];
    *(void *)unint64_t v400 = v508.__r_.__value_.__r.__words[0];
    *((void *)v400 + 1) = &v508;
    *(void *)(v401 + 8) = v400;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
    ++v508.__r_.__value_.__l.__cap_;
  }

  else
  {
    strcpy(v400 + 16, " papkpsp");
    *((void *)v400 + 4) = &qword_4A05B0;
    v400[40] = 0;
    v400[48] = 0;
    std::string::size_type v403 = v508.__r_.__value_.__r.__words[0];
    *(void *)unint64_t v400 = v508.__r_.__value_.__r.__words[0];
    *((void *)v400 + 1) = &v508;
    *(void *)(v403 + 8) = v400;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
    ++v508.__r_.__value_.__l.__cap_;
    uint64_t v515 = qword_4A0790;
  }

  uint64_t v402 = sub_F1214((uint64_t)&v508);
  std::string::size_type v404 = v597.__r_.__value_.__r.__words[0];
  *uint64_t v402 = v597.__r_.__value_.__r.__words[0];
  v402[1] = &v597;
  *(void *)(v404 + 8) = v402;
  v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v402;
  ++v597.__r_.__value_.__l.__cap_;
  sub_F12DC((uint64_t)&v508);
  v405 = (char *)operator new(0x38uLL);
  strcpy(v405 + 16, " paplunp");
  *((void *)v405 + 4) = &qword_4A9200;
  v405[40] = 0;
  v405[48] = 0;
  std::string::size_type v406 = v508.__r_.__value_.__r.__words[0];
  *(void *)v405 = v508.__r_.__value_.__r.__words[0];
  *((void *)v405 + 1) = &v508;
  *(void *)(v406 + 8) = v405;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v405;
  ++v508.__r_.__value_.__l.__cap_;
  __int128 v407 = sub_F1214((uint64_t)&v508);
  std::string::size_type v408 = v597.__r_.__value_.__r.__words[0];
  *__int128 v407 = v597.__r_.__value_.__r.__words[0];
  v407[1] = &v597;
  *(void *)(v408 + 8) = v407;
  v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v407;
  ++v597.__r_.__value_.__l.__cap_;
  sub_F12DC((uint64_t)&v508);
  v595.__r_.__value_.__r.__words[0] = (std::string::size_type)&v595;
  v595.__r_.__value_.__l.__size_ = (std::string::size_type)&v595;
  v595.__r_.__value_.__l.__cap_ = 0LL;
  std::string::size_type v409 = (char *)operator new(0x38uLL);
  if (v20)
  {
    strcpy(v409 + 16, " papmdhp");
    *((void *)v409 + 4) = &qword_4A0650;
    v409[40] = 0;
    v409[48] = 0;
    std::string::size_type v410 = v508.__r_.__value_.__r.__words[0];
    *(void *)std::string::size_type v409 = v508.__r_.__value_.__r.__words[0];
    *((void *)v409 + 1) = &v508;
    *(void *)(v410 + 8) = v409;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v409;
    ++v508.__r_.__value_.__l.__cap_;
    uint64_t v515 = qword_4A07D0;
    uint64_t v411 = sub_F1214((uint64_t)&v508);
    std::string::size_type v412 = v595.__r_.__value_.__r.__words[0];
    *uint64_t v411 = v595.__r_.__value_.__r.__words[0];
    v411[1] = &v595;
    *(void *)(v412 + 8) = v411;
    v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v411;
    ++v595.__r_.__value_.__l.__cap_;
    sub_F12DC((uint64_t)&v508);
    v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&v624;
    v624.__r_.__value_.__l.__size_ = (std::string::size_type)&v624;
    v624.__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v413 = (char *)operator new(0x38uLL);
    strcpy(v413 + 16, " papmdhp");
  }

  else
  {
    strcpy(v409 + 16, " papkpsp");
    *((void *)v409 + 4) = &qword_4A0650;
    v409[40] = 0;
    v409[48] = 0;
    std::string::size_type v416 = v508.__r_.__value_.__r.__words[0];
    *(void *)std::string::size_type v409 = v508.__r_.__value_.__r.__words[0];
    *((void *)v409 + 1) = &v508;
    *(void *)(v416 + 8) = v409;
    v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v409;
    ++v508.__r_.__value_.__l.__cap_;
    uint64_t v515 = qword_4A07D0;
    unint64_t v417 = sub_F1214((uint64_t)&v508);
    std::string::size_type v418 = v595.__r_.__value_.__r.__words[0];
    *unint64_t v417 = v595.__r_.__value_.__r.__words[0];
    v417[1] = &v595;
    *(void *)(v418 + 8) = v417;
    v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v417;
    ++v595.__r_.__value_.__l.__cap_;
    sub_F12DC((uint64_t)&v508);
    v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&v624;
    v624.__r_.__value_.__l.__size_ = (std::string::size_type)&v624;
    v624.__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v413 = (char *)operator new(0x38uLL);
    strcpy(v413 + 16, " papkpsp");
  }

  *((void *)v413 + 4) = &qword_4A0650;
  v413[40] = 0;
  v413[48] = 0;
  std::string::size_type v414 = v508.__r_.__value_.__r.__words[0];
  *(void *)uint64_t v413 = v508.__r_.__value_.__r.__words[0];
  *((void *)v413 + 1) = &v508;
  *(void *)(v414 + 8) = v413;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v413;
  ++v508.__r_.__value_.__l.__cap_;
  uint64_t v415 = sub_F1214((uint64_t)&v508);
  std::string::size_type v419 = v624.__r_.__value_.__r.__words[0];
  *uint64_t v415 = v624.__r_.__value_.__r.__words[0];
  v415[1] = &v624;
  *(void *)(v419 + 8) = v415;
  v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v415;
  ++v624.__r_.__value_.__l.__cap_;
  sub_F12DC((uint64_t)&v508);
  sub_2381A4((uint64_t *)&v569);
  v568.__r_.__value_.__r.__words[0] = (std::string::size_type)&v568;
  v568.__r_.__value_.__l.__size_ = (std::string::size_type)&v568;
  v568.__r_.__value_.__l.__cap_ = 0LL;
  v420 = (char *)operator new(0x38uLL);
  if (v20) {
    strcpy(v420 + 16, " papmdhp");
  }
  else {
    strcpy(v420 + 16, " papkpsp");
  }
  *((void *)v420 + 4) = &qword_4A0740;
  v420[40] = 0;
  v420[48] = 0;
  std::string::size_type v421 = v508.__r_.__value_.__r.__words[0];
  *(void *)v420 = v508.__r_.__value_.__r.__words[0];
  *((void *)v420 + 1) = &v508;
  *(void *)(v421 + 8) = v420;
  v508.__r_.__value_.__r.__words[0] = (std::string::size_type)v420;
  ++v508.__r_.__value_.__l.__cap_;
  v422 = sub_F1214((uint64_t)&v508);
  std::string::size_type v423 = v568.__r_.__value_.__r.__words[0];
  void *v422 = v568.__r_.__value_.__r.__words[0];
  v422[1] = &v568;
  *(void *)(v423 + 8) = v422;
  v568.__r_.__value_.__r.__words[0] = (std::string::size_type)v422;
  ++v568.__r_.__value_.__l.__cap_;
  sub_F12DC((uint64_t)&v508);
  unsigned __int8 v424 = atomic_load((unsigned __int8 *)&qword_4A0808);
  if ((v424 & 1) == 0 && __cxa_guard_acquire(&qword_4A0808))
  {
    __p.__r_.__value_.__r.__words[0] = 1886613611LL;
    sub_F13D0((uint64_t **)&unk_4A07F0, (unsigned int *)&__p, 1LL);
    __cxa_guard_release(&qword_4A0808);
  }

  qword_48F0B0 = 0LL;
  qword_48F0A8 = (uint64_t)&qword_48F0B0;
  qword_48F0B8 = 0LL;
  qword_48F0C0 = 0LL;
  qword_48F0C8 = 0LL;
  qword_48F0D0 = 0LL;
  qword_48F0E0 = 0LL;
  qword_48F0D8 = (uint64_t)&qword_48F0E0;
  qword_48F0F8 = 0LL;
  qword_48F0E8 = 0LL;
  qword_48F0F0 = &qword_48F0F8;
  qword_48F118 = 0LL;
  qword_48F110 = 0LL;
  qword_48F100 = 0LL;
  unk_48F108 = &qword_48F110;
  qword_48F130 = 0LL;
  qword_48F128 = 0LL;
  *(void *)&byte_48F140[8] = 0LL;
  qword_48F120 = &qword_48F128;
  LOBYTE(qword_48F138) = 0;
  BYTE4(qword_48F138) = 0;
  *(void *)&byte_48F140[16] = 0LL;
  *(void *)byte_48F140 = &byte_48F140[8];
  sub_2D202C((uint64_t)&__p, (uint64_t)&v599, 1668510820, 0, 0, 1, 1, 0, 0);
  sub_F1540(0x63736176u, 1668505974, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2D202C((uint64_t)&__p, (uint64_t)&__dst, 1668510820, 0, 1, 0, 1, 1, 0);
  sub_F1540(0x63726563u, 1668441443, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2D202C((uint64_t)&__p, (uint64_t)v530, 1668510820, 0, 1, 1, 1, 0, 0);
  sub_F1540(0x63706172u, 1668309362, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2D202C((uint64_t)&__p, (uint64_t)&v597, 1668510820, 0, 0, 1, 0, 1, 0);
  sub_F1540(0x63616C6Du, 1667329133, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2D202C((uint64_t)&__p, (uint64_t)&v595, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x63737072u, 1668509810, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2D202C((uint64_t)&__p, (uint64_t)&v624, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x6369736Fu, 1667855215, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2D202C((uint64_t)&__p, (uint64_t)&v569, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x636D7573u, 1668117875, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2D202C((uint64_t)&__p, (uint64_t)&v568, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x636C6F77u, 1668050807, (uint64_t)&__p);
  sub_F16A4(v609);
  sub_F16E4(v607);
  sub_F1724((uint64_t *)&__p);
  sub_2CF584(0x696D6466u, (uint64_t)&unk_4A07F0);
  sub_2FCDC8((uint64_t *)&__p);
  sub_52A24((uint64_t)&qword_48F0F0, __p.__r_.__value_.__l.__data_, &__p.__r_.__value_.__l.__size_);
  sub_32C8C((void *)__p.__r_.__value_.__l.__size_);
  std::string::size_type v425 = 0LL;
  uint64_t v426 = 0LL;
  LODWORD(__p.__r_.__value_.__l.__data_) = 1986291046;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  LOBYTE(v607) = 0;
  uint64_t v604 = 0LL;
  __p.__r_.__value_.__l.__cap_ = 0LL;
  v603 = 0LL;
  v605[0] = 0;
  v608[0] = 1987279212;
  v608[2] = 1;
  char v613 = 0;
  uint64_t v611 = 0LL;
  v609 = 0LL;
  uint64_t v610 = 0LL;
  char v612 = 0;
  int v614 = 1987277417;
  int v615 = 1;
  char v620 = 0;
  v618 = 0LL;
  uint64_t v616 = 0LL;
  uint64_t v617 = 0LL;
  char v619 = 0;
  v427 = (std::string *)&v567.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v567.__r_.__value_.__r.__words[1] = 0uLL;
  for (v567.__r_.__value_.__r.__words[0] = (std::string::size_type)&v567.__r_.__value_.__l.__size_;
        ;
        v427 = (std::string *)v567.__r_.__value_.__r.__words[0])
  {
    unint64_t v428 = (unsigned int *)((char *)&__p + 56 * v426);
    p_size_t size = &v567.__r_.__value_.__l.__size_;
    if (v427 == (std::string *)&v567.__r_.__value_.__r.__words[1]) {
      goto LABEL_1088;
    }
    uint64_t v430 = (std::string::size_type *)v425;
    v431 = &v567.__r_.__value_.__l.__size_;
    if (v425)
    {
      do
      {
        p_size_t size = v430;
        uint64_t v430 = (std::string::size_type *)v430[1];
      }

      while (v430);
    }

    else
    {
      do
      {
        p_size_t size = (std::string::size_type *)v431[2];
        BOOL v6 = *p_size == (void)v431;
        v431 = p_size;
      }

      while (v6);
    }

    unsigned int v432 = *v428;
    if (*((_DWORD *)p_size + 8) < *v428)
    {
LABEL_1088:
      v433 = v425 ? p_size : &v567.__r_.__value_.__r.__words[1];
      v434 = v425 ? p_size + 1 : &v567.__r_.__value_.__r.__words[1];
    }

    else
    {
      v433 = &v567.__r_.__value_.__l.__size_;
      v434 = &v567.__r_.__value_.__l.__size_;
      if (v425)
      {
        std::string::size_type v438 = v425;
        v434 = &v567.__r_.__value_.__l.__size_;
        while (1)
        {
          while (1)
          {
            v433 = (std::string::size_type *)v438;
            unsigned int v439 = *(_DWORD *)(v438 + 32);
            if (v432 >= v439) {
              break;
            }
            std::string::size_type v438 = *v433;
            v434 = v433;
            if (!*v433) {
              goto LABEL_1095;
            }
          }

          if (v439 >= v432) {
            break;
          }
          v434 = v433 + 1;
          std::string::size_type v438 = v433[1];
          if (!v438) {
            goto LABEL_1095;
          }
        }
      }
    }

    if (!*v434)
    {
LABEL_1095:
      unint64_t v435 = (char *)operator new(0x58uLL);
      unsigned int v436 = *v428;
      *((void *)v435 + 6) = 0LL;
      *((_DWORD *)v435 + 8) = v436;
      v437 = (char *)&__p + 56 * v426;
      *((_DWORD *)v435 + 10) = *((_DWORD *)v437 + 2);
      *((void *)v435 + 7) = 0LL;
      *((void *)v435 + 8) = 0LL;
      sub_2650A4( (void *)v435 + 6,  *((const void **)v437 + 2),  *((void *)v437 + 3),  (uint64_t)(*((void *)v437 + 3) - *((void *)v437 + 2)) >> 3);
      *(_OWORD *)(v435 + 72) = *(_OWORD *)&v605[56 * v426];
      *(void *)unint64_t v435 = 0LL;
      *((void *)v435 + 1) = 0LL;
      *((void *)v435 + 2) = v433;
      std::string::size_type *v434 = (std::string::size_type)v435;
      if (*(void *)v567.__r_.__value_.__l.__data_)
      {
        v567.__r_.__value_.__r.__words[0] = *(void *)v567.__r_.__value_.__l.__data_;
        unint64_t v435 = (char *)*v434;
      }

      sub_7A420((uint64_t *)v567.__r_.__value_.__l.__size_, (uint64_t *)v435);
      ++v567.__r_.__value_.__l.__cap_;
    }

    if (++v426 == 3) {
      break;
    }
    std::string::size_type v425 = v567.__r_.__value_.__l.__size_;
  }

  sub_F21E4(*(void **)&byte_48F140[8]);
  v440 = (void *)v567.__r_.__value_.__l.__size_;
  *(std::string *)byte_48F140 = v567;
  if (v567.__r_.__value_.__l.__cap_)
  {
    *(void *)(v567.__r_.__value_.__l.__size_ + 16) = &byte_48F140[8];
    v567.__r_.__value_.__r.__words[0] = (std::string::size_type)&v567.__r_.__value_.__l.__size_;
    *(_OWORD *)&v567.__r_.__value_.__r.__words[1] = 0uLL;
    v440 = 0LL;
  }

  else
  {
    *(void *)byte_48F140 = &byte_48F140[8];
  }

  sub_F21E4(v440);
  for (uint64_t j = 0LL; j != -168; j -= 56LL)
  {
    v442 = *(void **)((char *)&v616 + j);
    if (v442)
    {
      *(uint64_t *)((char *)&v617 + j) = (uint64_t)v442;
      operator delete(v442);
    }
  }

  sub_F19DC();
  sub_F1724((uint64_t *)&v568);
  sub_F1724((uint64_t *)&v569);
  sub_F1724((uint64_t *)&v624);
  sub_F1724((uint64_t *)&v595);
  sub_F1724((uint64_t *)&v597);
  sub_F1724((uint64_t *)v530);
  sub_F1724((uint64_t *)&__dst);
  sub_F1724((uint64_t *)&v599);
  if ((void)v551) {
    operator delete((void *)v551);
  }
  sub_F20B8(v517[0]);
  sub_32C8C(v514[0]);
  sub_32C8C(v511[0]);
  sub_68314(&v508);
  sub_32C8C(v521);
  if (*((void *)&v519 + 1))
  {
    uint64_t v520 = *((void *)&v519 + 1);
    operator delete(*((void **)&v519 + 1));
  }

  if ((void)v518)
  {
    *((void *)&v518 + 1) = v518;
    operator delete((void *)v518);
  }

  sub_32C8C(v525);
  if (*((void *)&v523 + 1))
  {
    uint64_t v524 = *((void *)&v523 + 1);
    operator delete(*((void **)&v523 + 1));
  }

  if ((void)v522)
  {
    *((void *)&v522 + 1) = v522;
    operator delete((void *)v522);
  }

  sub_32C8C(v594);
  if (*(void *)&v592[24])
  {
    *(void *)&__int128 v593 = *(void *)&v592[24];
    operator delete(*(void **)&v592[24]);
  }

  if (*(void *)v592)
  {
    *(void *)&v592[8] = *(void *)v592;
    operator delete(*(void **)v592);
  }

  sub_32C8C(v529);
  if (v527)
  {
    v528 = v527;
    operator delete(v527);
  }

  if (v526.__r_.__value_.__r.__words[0])
  {
    v526.__r_.__value_.__l.__size_ = v526.__r_.__value_.__r.__words[0];
    operator delete(v526.__r_.__value_.__l.__data_);
  }

  sub_32C8C((void *)v581[1]);
  if (v576)
  {
    v577 = v576;
    operator delete(v576);
  }

  if (v573)
  {
    v574 = v573;
    operator delete(v573);
  }

  sub_82FFC((uint64_t)v584);
  return sub_19DFC((uint64_t)&theString);
}

void sub_327584( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x480]) {
    operator delete((void *)STACK[0x480]);
  }
  sub_F21A4((uint64_t)&a51);
  sub_F215C((uint64_t)&a67);
  sub_F215C((uint64_t)&STACK[0x220]);
  sub_F215C((uint64_t)&STACK[0x940]);
  sub_F215C((uint64_t)&STACK[0x270]);
  sub_24A0AC((uint64_t)&STACK[0x600]);
  sub_82FFC((uint64_t)&STACK[0x680]);
  sub_19DFC((uint64_t)&STACK[0x930]);
  _Unwind_Resume(a1);
}

__n128 sub_328644(void *a1, _OWORD *a2, __n128 *a3, int a4, int a5, uint64_t a6)
{
  unsigned __int8 v12 = (char *)operator new(0x98uLL);
  *((void *)v12 + 1) = 0LL;
  *((void *)v12 + 2) = 0LL;
  *(void *)unsigned __int8 v12 = off_481840;
  *((void *)v12 + 3) = &off_4818B8;
  *(_OWORD *)(v12 + 44) = *(_OWORD *)a6;
  *(void *)(v12 + 60) = *(void *)(a6 + 16);
  *((void *)v12 + 4) = -2609680281LL;
  *((_DWORD *)v12 + 10) = 0;
  *(_OWORD *)(v12 + 72) = *a2;
  *((_DWORD *)v12 + 22) = a3->n128_u32[0];
  sub_142EF4((uint64_t)(v12 + 96), &a3->n128_u64[1]);
  __n128 result = a3[2];
  *(__n128 *)(v12 + 120) = result;
  v12[136] = 1;
  *((_DWORD *)v12 + 36) = a4;
  *((_DWORD *)v12 + 37) = a5;
  *((void *)v12 + 3) = off_481878;
  *a1 = v12 + 24;
  a1[1] = v12;
  return result;
}

void sub_328718(_Unwind_Exception *a1)
{
}

uint64_t sub_328730(uint64_t a1, int a2, _DWORD *a3, char a4, char a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v8 = a2;
  uint64_t v9 = 1735159650LL;
  uint64_t result = sub_F0C04(v6, (uint64_t *)&v8, a3, a4 != 0, a5 != 0);
  *(void *)(a1 + 8) = v6 + 40;
  return result;
}

void sub_32878C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_328794(uint64_t *a1, int *a2, _DWORD *a3, char *a4, char *a5)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666LL) {
    sub_7A87C();
  }
  unsigned __int8 v12 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333LL) {
    unint64_t v13 = 0x666666666666666LL;
  }
  else {
    unint64_t v13 = v6;
  }
  BOOL v21 = v12;
  if (v13) {
    unint64_t v13 = (unint64_t)sub_F2BEC(v13);
  }
  else {
    uint64_t v14 = 0LL;
  }
  unint64_t v17 = v13;
  uint64_t v18 = v13 + 40 * v5;
  uint64_t v19 = v18;
  unint64_t v20 = v13 + 40 * v14;
  int v22 = *a2;
  uint64_t v23 = 1735159650LL;
  sub_F0C04(v18, (uint64_t *)&v22, a3, *a4, *a5);
  uint64_t v19 = v18 + 40;
  sub_F2C30(a1, &v17);
  uint64_t v15 = a1[1];
  sub_F2D1C((uint64_t)&v17);
  return v15;
}

void sub_3288B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_3288C8(_BYTE *a1)
{
  qword_4A05B8 = 0LL;
  qword_4A05D0 = 0LL;
  qword_4A05B0 = (uint64_t)&qword_4A05B8;
  qword_4A05C0 = 0LL;
  unk_4A05C8 = &qword_4A05D0;
  qword_4A05E8 = 0LL;
  qword_4A05F0 = 0LL;
  qword_4A05D8 = 0LL;
  unk_4A05E0 = &qword_4A05E8;
  uint64_t v3 = 0x696D646600000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A05B0, (uint64_t)&v3, qword_4A0500);
  uint64_t v3 = 0x766C737300000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A05B0, (uint64_t)&v3, qword_4A0520);
  sub_2D6400((uint64_t)&qword_4A05B0, (int *)&qword_4A9190, (uint64_t)&dword_4A0408, 0);
  if (*a1)
  {
    uint64_t v3 = 0x73706B6E00000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    sub_2D5228((uint64_t **)&qword_4A05B0, (uint64_t)&v3, qword_4A05A0);
  }

  uint64_t v3 = 0x6D6F767000000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A05B0, (uint64_t)&v3, qword_4A0550);
  if (a1[1])
  {
    uint64_t v3 = 0x6D63646600000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    sub_2D5228((uint64_t **)&qword_4A05B0, (uint64_t)&v3, qword_4A0570);
    uint64_t v3 = 0x6D63646600000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    sub_2D6E60((uint64_t)&qword_4A05B0, (int *)&v3);
    uint64_t v3 = 0x6D636D7600000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    sub_2D5228((uint64_t **)&qword_4A05B0, (uint64_t)&v3, qword_4A0560);
    uint64_t v3 = 0x6D636D7600000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    return sub_2D6E60((uint64_t)&qword_4A05B0, (int *)&v3);
  }

  else
  {
    uint64_t v3 = 0x6D636D7600000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    return sub_2D5228((uint64_t **)&qword_4A05B0, (uint64_t)&v3, qword_4A0550);
  }

void sub_328B50(_Unwind_Exception *a1)
{
}

uint64_t sub_328BB0()
{
  qword_4A0608 = 0LL;
  qword_4A0600 = (uint64_t)&qword_4A0608;
  qword_4A0620 = 0LL;
  qword_4A0610 = 0LL;
  qword_4A0618 = &qword_4A0620;
  qword_4A0640 = 0LL;
  qword_4A0638 = 0LL;
  qword_4A0628 = 0LL;
  unk_4A0630 = &qword_4A0638;
  if (dword_4A91A8)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 2584;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_328FA4(_Unwind_Exception *a1)
{
}

uint64_t sub_328FF8()
{
  qword_4A0658 = 0LL;
  qword_4A0670 = 0LL;
  qword_4A0650 = (uint64_t)&qword_4A0658;
  qword_4A0660 = 0LL;
  unk_4A0668 = &qword_4A0670;
  qword_4A0688 = 0LL;
  qword_4A0690 = 0LL;
  qword_4A0678 = 0LL;
  unk_4A0680 = &qword_4A0688;
  uint64_t v1 = 0x696D646600000001LL;
  __int128 v2 = *(_OWORD *)sub_2FC95C();
  int v3 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A0650, (uint64_t)&v1, qword_4A0530);
  sub_2D6400((uint64_t)&qword_4A0650, (int *)&qword_4A9190, (uint64_t)&dword_4A0408, 0);
  return sub_2D6A60((uint64_t)&qword_4A0650, (int *)&qword_4A9190, 2);
}

void sub_3290BC(_Unwind_Exception *a1)
{
}

uint64_t sub_3290DC(_BYTE *a1)
{
  qword_4A0748 = 0LL;
  qword_4A0740 = (uint64_t)&qword_4A0748;
  qword_4A0760 = 0LL;
  qword_4A0750 = 0LL;
  unk_4A0758 = &qword_4A0760;
  qword_4A0780 = 0LL;
  qword_4A0778 = 0LL;
  qword_4A0768 = 0LL;
  unk_4A0770 = &qword_4A0778;
  sub_2D6400((uint64_t)&qword_4A0740, (int *)&qword_4A9190, (uint64_t)&dword_4A0408, 0);
  uint64_t v3 = 0x696D646600000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_4A0740, (uint64_t)&v3, qword_4A0580);
  uint64_t result = sub_2D6A60((uint64_t)&qword_4A0740, (int *)&qword_4A9190, 2);
  if (*a1)
  {
    uint64_t v3 = 0x6D63646600000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    sub_2D5228((uint64_t **)&qword_4A0740, (uint64_t)&v3, qword_4A0590);
    uint64_t v3 = 0x6D63646600000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    return sub_2D6E60((uint64_t)&qword_4A0740, (int *)&v3);
  }

  return result;
}

void sub_329214(_Unwind_Exception *a1)
{
}

void sub_329248(uint64_t a1)
{
  uint64_t v1 = (void *)sub_32925C(a1);
  operator delete(v1);
}

uint64_t sub_32925C(uint64_t a1)
{
  *(void *)a1 = off_4818F8;
  __int128 v2 = *(OpaqueAudioComponentInstance **)(a1 + 16);
  if (v2 && !*(_DWORD *)(a1 + 24)) {
    AudioComponentInstanceDispose(v2);
  }
  *(_DWORD *)(a1 + memset(v7, 0, 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

uint64_t sub_3292A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 56);
  __int128 v4 = *(unsigned int **)(a2 + 56);
  if (v3 != v4)
  {
    if (v3)
    {
      uint64_t v6 = v3 + 2;
      do
      {
        unsigned int v7 = __ldaxr(v6);
        unsigned int v8 = v7 - 1;
      }

      while (__stlxr(v8, v6));
      if (!v8) {
        (*(void (**)(unsigned int *))(*(void *)v3 + 16LL))(v3);
      }
      __int128 v4 = *(unsigned int **)(a2 + 56);
    }

    *(void *)(a1 + 56) = v4;
    if (v4)
    {
      uint64_t v9 = v4 + 2;
      do
        unsigned int v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }

    sub_31F8A4(a1, a2);
  }

  return a1;
}

void *sub_329330(void *a1)
{
  __int128 v2 = (unsigned int *)a1[7];
  if (v2)
  {
    uint64_t v3 = v2 + 2;
    do
    {
      unsigned int v4 = __ldaxr(v3);
      unsigned int v5 = v4 - 1;
    }

    while (__stlxr(v5, v3));
    if (!v5) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 16LL))(v2);
    }
    a1[7] = 0LL;
  }

  sub_31F858(a1);
  return a1;
}

uint64_t sub_329390(OpaqueAudioComponentInstance *a1, int a2)
{
  int inData = a2;
  if (a1) {
    a1 = (OpaqueAudioComponentInstance *)*((void *)a1 + 2);
  }
  return AudioUnitSetProperty(a1, 0xEu, 0, 0, &inData, 4u);
}

void *sub_3293CC(void *a1)
{
  *a1 = &off_481950;
  __int128 v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_329404(void *__p)
{
  void *__p = &off_481950;
  __int128 v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void sub_32943C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_329B08(a1[1], a1[2], 1);
  if (!v4)
  {
    uint64_t v42 = (os_log_t *)sub_138E8(13);
    uint64_t v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 104;
      _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - No output port found for default vad",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error routing to partner port - No output port found for default vad");
  }

  uint64_t v5 = v4;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 96);
  std::string __p = *(void **)(v4 + 88);
  int v47 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  sub_B8CBC((uint64_t *)buf, (uint64_t *)&__p, "", 107);
  sub_FAA90(&v49, *(uint64_t *)buf);
  uint64_t v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unsigned int v10 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  unsigned __int8 v12 = v50;
  if (v50 == &v49) {
    goto LABEL_20;
  }
  while (1)
  {
    sub_B8F68((uint64_t *)buf, v12 + 2, "", 109);
    unint64_t v13 = *(std::__shared_weak_count **)&buf[8];
    __int16 v14 = *(_WORD *)(*(void *)buf + 184LL);
    if (*(void *)&buf[8])
    {
      int v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    if ((v14 & 1) == 0) {
      break;
    }
    unsigned __int8 v12 = (uint64_t *)v12[1];
    if (v12 == &v49) {
      goto LABEL_20;
    }
  }

  if (v12 == &v49)
  {
LABEL_20:
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(os_unfair_lock_s **)(v5 + 96);
      v45[0] = *(os_unfair_lock_s **)(v5 + 88);
      v45[1] = v19;
      if (v19)
      {
        p_uint32_t os_unfair_lock_opaque = (unint64_t *)&v19[4]._os_unfair_lock_opaque;
        do
          unint64_t v21 = __ldxr(p_os_unfair_lock_opaque);
        while (__stxr(v21 + 1, p_os_unfair_lock_opaque));
      }

      sub_D3ECC(&__p, v45);
      if (v48 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 113;
      __int16 v52 = 2080;
      uint64_t v53 = p_p;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - No valid partner port available for port %s",  buf,  0x1Cu);
      if (v48 < 0) {
        operator delete(__p);
      }
      if (v19) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
      }
    }

    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( v23,  "Error routing to partner port - No valid partner port available for port %s");
  }

  uint64_t v25 = v12[2];
  uint64_t v24 = v12[3];
  if (v24)
  {
    std::string::size_type v26 = (unint64_t *)(v24 + 16);
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  __int128 v28 = (std::__shared_weak_count *)a1[4];
  a1[3] = v25;
  a1[4] = v24;
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  UInt32 v29 = *(std::__shared_weak_count **)(v5 + 96);
  if (!v29) {
    goto LABEL_49;
  }
  uint64_t v30 = *(void *)(v5 + 88);
  unint64_t v31 = (unint64_t *)&v29->__shared_weak_owners_;
  do
    unint64_t v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
  *a2 = 0LL;
  a2[1] = 0LL;
  __int16 v33 = std::__shared_weak_count::lock(v29);
  if (v33)
  {
    uint64_t v34 = v33;
    __int16 v35 = (unint64_t *)&v33->__shared_weak_owners_;
    do
      unint64_t v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    *a2 = v30;
    a2[1] = v33;
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  else
  {
LABEL_49:
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  uint64_t v39 = a1[4];
  a2[2] = a1[3];
  a2[3] = v39;
  if (v39)
  {
    uint64_t v40 = (unint64_t *)(v39 + 16);
    do
      unint64_t v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }

  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  sub_85B80(&v49);
}

void sub_329858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

BOOL sub_3298D4(uint64_t *a1)
{
  uint64_t v2 = sub_329B08(a1[1], a1[2], 1);
  if (!v2) {
    goto LABEL_35;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 96);
  if (!v3)
  {
    unint64_t v8 = 0LL;
LABEL_16:
    uint64_t v14 = 0LL;
    unint64_t v13 = 0LL;
    goto LABEL_17;
  }

  uint64_t v4 = *(void *)(v2 + 88);
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    unint64_t v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  unsigned int v7 = std::__shared_weak_count::lock(v3);
  unint64_t v8 = v7;
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v9 = (unint64_t *)&v7->__shared_weak_owners_;
  do
    unint64_t v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }

  unint64_t v13 = std::__shared_weak_count::lock(v8);
  if (v13) {
    uint64_t v14 = v4;
  }
  else {
    uint64_t v14 = 0LL;
  }
LABEL_17:
  int v15 = (std::__shared_weak_count *)a1[4];
  if (v15 && (unint64_t v16 = std::__shared_weak_count::lock(v15)) != 0LL)
  {
    uint64_t v17 = v16;
    BOOL v18 = v14 == a1[3];
    uint64_t v19 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  else
  {
    BOOL v18 = v14 == 0;
  }

  if (v13)
  {
    unint64_t v21 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    if (v18) {
      return 1LL;
    }
  }

  else if (v18)
  {
    return 1LL;
  }

uint64_t sub_329B08(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    unint64_t v6 = (os_log_t *)sub_138E8(13);
    unsigned int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unint64_t v10 = "RouteToPartnerHandler.cpp";
      __int16 v11 = 1024;
      int v12 = 18;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid VAD argument",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid VAD argument");
  }

  uint64_t v4 = (void *)sub_135A0(a1, a3);
  if (v4[2]) {
    return sub_6A92C(a2, *(_DWORD *)(*v4 + 28LL));
  }
  else {
    return 0LL;
  }
}

void sub_329C44(_Unwind_Exception *exception_object)
{
}

void sub_329C68(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_329B08(a1[1], a1[2], 1);
  if (!v4)
  {
    uint64_t v82 = (os_log_t *)sub_138E8(13);
    uint64_t v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 55;
      _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - No output port found for default vad",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error routing to partner port - No output port found for default vad");
  }

  uint64_t v5 = v4;
  unint64_t v6 = *(std::__shared_weak_count **)(v4 + 96);
  std::string __p = *(void **)(v4 + 88);
  std::string::size_type v90 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  sub_B8CBC((uint64_t *)buf, (uint64_t *)&__p, "", 57);
  sub_FA368(&v92, *(uint64_t *)buf);
  int v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unint64_t v10 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v90) {
    std::__shared_weak_count::__release_weak(v90);
  }
  int v12 = v93;
  if (v93 == &v92) {
    goto LABEL_20;
  }
  while (1)
  {
    sub_B8F68((uint64_t *)buf, v12 + 2, "", 59);
    unint64_t v13 = *(std::__shared_weak_count **)&buf[8];
    __int16 v14 = *(_WORD *)(*(void *)buf + 184LL);
    if (*(void *)&buf[8])
    {
      int v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    if ((v14 & 1) != 0) {
      break;
    }
    int v12 = (uint64_t *)v12[1];
    if (v12 == &v92) {
      goto LABEL_20;
    }
  }

  if (v12 == &v92)
  {
LABEL_20:
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    BOOL v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(os_unfair_lock_s **)(v5 + 88);
      unint64_t v20 = *(os_unfair_lock_s **)(v5 + 96);
      v88[0] = v19;
      v88[1] = v20;
      if (v20)
      {
        p_uint32_t os_unfair_lock_opaque = (unint64_t *)&v20[4]._os_unfair_lock_opaque;
        do
          unint64_t v22 = __ldxr(p_os_unfair_lock_opaque);
        while (__stxr(v22 + 1, p_os_unfair_lock_opaque));
      }

      sub_D3ECC(&__p, v88);
      if (v91 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 62;
      __int16 v95 = 2080;
      uint64_t v96 = p_p;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - No valid partner port available for port %s",  buf,  0x1Cu);
      if (v91 < 0) {
        operator delete(__p);
      }
      if (v20) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
      }
    }

    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( v24,  "Error routing to partner port - No valid partner port available for port %s");
    goto LABEL_33;
  }

  uint64_t v25 = sub_329B08(a1[1], a1[2], 0);
  a1[3] = v25;
  if (!v25)
  {
    unint64_t v85 = (os_log_t *)sub_138E8(13);
    std::string::size_type v86 = *v85;
    if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 65;
      _os_log_impl( &dword_0,  v86,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Error routing to partner port - No valid input port in route",  buf,  0x12u);
    }

    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Error routing to partner port - No valid input port in route");
LABEL_33:
  }

  uint64_t v27 = v12[2];
  int v26 = (std::__shared_weak_count *)v12[3];
  if (v26)
  {
    __int16 v28 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    uint64_t v25 = a1[3];
  }

  uint64_t v30 = *(std::__shared_weak_count **)(v25 + 96);
  uint64_t v87 = a2;
  if (v30)
  {
    uint64_t v31 = *(void *)(v25 + 88);
    unint64_t v32 = (unint64_t *)&v30->__shared_weak_owners_;
    do
      unint64_t v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    uint64_t v34 = std::__shared_weak_count::lock(v30);
    __int16 v35 = v34;
    if (v34)
    {
      unint64_t v36 = (unint64_t *)&v34->__shared_weak_owners_;
      do
        unint64_t v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        unint64_t v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v35);
      }

      uint64_t v40 = std::__shared_weak_count::lock(v35);
      char v41 = 0;
      if (!v40) {
        uint64_t v31 = 0LL;
      }
      if (!v26) {
        goto LABEL_61;
      }
      goto LABEL_56;
    }
  }

  else
  {
    __int16 v35 = 0LL;
  }

  uint64_t v31 = 0LL;
  uint64_t v40 = 0LL;
  char v41 = 1;
  if (!v26)
  {
LABEL_61:
    BOOL v44 = v31 == 0;
    goto LABEL_62;
  }

void sub_32A3D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_32A454(uint64_t *a1)
{
  uint64_t v2 = sub_329B08(a1[1], a1[2], 0);
  uint64_t v3 = v2;
  if (v2 && v2 != a1[3]) {
    return 1LL;
  }
  uint64_t v5 = (os_log_t *)sub_138E8(2);
  unint64_t v6 = *v5;
  if (*v5)
  {
    BOOL result = os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v7 = a1[3];
    int v8 = 136315906;
    int v9 = "RouteToPartnerHandler.cpp";
    __int16 v10 = 1024;
    int v11 = 80;
    __int16 v12 = 2048;
    uint64_t v13 = v3;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Something went wrong ! Input ports didn't change (current input port: %p, previous input port: %p)",  (uint8_t *)&v8,  0x26u);
  }

  return 0LL;
}

void sub_32A564(uint64_t a1)
{
  uint64_t v1 = (void *)sub_32A578(a1);
  operator delete(v1);
}

uint64_t sub_32A578(uint64_t a1)
{
  *(void *)a1 = off_481980;
  uint64_t v2 = *(void **)(qword_4A08A0 + 72);
  uint64_t v3 = qword_4A08A0 + 80;
  if (v2 != (void *)(qword_4A08A0 + 80))
  {
    do
    {
      (*(void (**)(void, void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), v2[5]);
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }

        while (!v6);
      }

      uint64_t v2 = v5;
    }

    while (v5 != (void *)v3);
  }

  uint64_t v7 = *(dispatch_object_s **)(a1 + 168);
  if (v7) {
    dispatch_release(v7);
  }
  __int16 v12 = (void **)(a1 + 144);
  sub_8CD60(&v12);
  __int16 v12 = (void **)(a1 + 120);
  sub_8CD60(&v12);
  int v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
  }

  sub_32C8C(*(void **)(a1 + 80));
  int v9 = *(void **)(a1 + 64);
  if (v9 == (void *)(a1 + 40))
  {
    uint64_t v10 = 4LL;
    int v9 = (void *)(a1 + 40);
    goto LABEL_16;
  }

  if (v9)
  {
    uint64_t v10 = 5LL;
LABEL_16:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  sub_7A768(a1 + 24);
  sub_7A768(a1 + 8);
  return a1;
}

uint64_t sub_32A6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + memset(v7, 0, 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + memset(v7, 0, 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

uint64_t sub_32A704()
{
  int v0 = (os_log_t *)sub_138E8(6);
  uint64_t v1 = *v0;
  if (*v0 && os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    uint64_t v5 = "TimeSyncClockDeviceManager.cpp";
    __int16 v6 = 1024;
    int v7 = 146;
    _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ClockDeviceList listener activated",  (uint8_t *)&v4,  0x12u);
  }

  uint64_t v2 = sub_32A7C8();
  sub_32A8DC(v2);
  return 0LL;
}

uint64_t sub_32A7C8()
{
  uint64_t result = qword_4A08A0;
  if (!qword_4A08A0)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "TimeSyncClockDeviceManager.cpp";
        __int16 v6 = 1024;
        int v7 = 72;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sTimeSyncClockDeviceManager is NULL]: sTimeSyncClockDeviceManager is NULL!",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sTimeSyncClockDeviceManager is NULL!");
  }

  return result;
}

void sub_32A8C0(_Unwind_Exception *exception_object)
{
}

void sub_32A8DC(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(6);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "TimeSyncClockDeviceManager.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 125;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reading HAL clock list ...", buf, 0x12u);
  }

  uint64_t v4 = 2003329396LL;
  uint64_t v5 = *(void *)(a1 + 8);
  strcpy((char *)v46, "#klcbolg");
  BYTE1(v46[1]) = 0;
  WORD1(v46[1]) = 0;
  if ((sub_AF090(v5) & 1) == 0)
  {
    v51.__r_.__value_.__s.__data_[0] = 0;
    int v8 = 2003332927;
    goto LABEL_72;
  }

  *(_DWORD *)AudioBufferList buf = 2003329396;
  _DWORD buf[8] = 0;
  LOBYTE(v62) = 0;
  unsigned int v6 = sub_AF2A0(v5);
  LODWORD(v52) = v6;
  if (!v6)
  {
    uint64_t v4 = 0LL;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
    goto LABEL_18;
  }

  sub_8683C(&__p, v6 >> 2);
  int v7 = sub_AF2F8(v5);
  *(_DWORD *)AudioBufferList buf = v7;
  if (v7)
  {
    int v8 = v7;
    int v9 = 0;
    v51.__r_.__value_.__s.__data_[0] = 0;
  }

  else
  {
    uint64_t v10 = (void *)sub_908DC((uint64_t)&buf[8], (uint64_t)&__p);
    int v8 = *(_DWORD *)buf;
    v51.__r_.__value_.__s.__data_[0] = 0;
    if ((_BYTE)v62)
    {
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[8];
      uint64_t v11 = *(void *)&buf[16];
      v10[1] = 0LL;
      void v10[2] = 0LL;
      void *v10 = 0LL;
      uint64_t v4 = v11;
      int v9 = 1;
    }

    else
    {
      int v9 = 0;
    }
  }

  int v12 = v9;
  if (__p)
  {
    uint64_t v55 = __p;
    operator delete(__p);
    int v12 = v62;
  }

  if (v12 && *(void *)&buf[8])
  {
    *(void *)&buf[16] = *(void *)&buf[8];
    operator delete(*(void **)&buf[8]);
  }

  if (v8)
  {
LABEL_72:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v8;
  }

  if (!v9)
  {
    int v8 = 0;
    goto LABEL_72;
  }

void sub_32B06C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29, uint64_t a30, uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void ***sub_32B138(void **a1)
{
  uint64_t v1 = a1;
  uint64_t v43 = a1;
  uint64_t v2 = (char *)*a1;
  uint64_t v3 = (void *)*((void *)*a1 + 12);
  if (v3 == *((void **)*a1 + 13)) {
    goto LABEL_65;
  }
  uint64_t v4 = v2 + 80;
  do
  {
    uint64_t v5 = v3[1];
    uint64_t v44 = *v3;
    if (v4 != (char *)sub_32B9E4((uint64_t)(v2 + 72), v44, HIDWORD(v44)))
    {
      unsigned int v6 = (os_log_t *)sub_138E8(6);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        sub_33464(&__p, (unsigned int *)&v44);
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315650;
        std::string v51 = "TimeSyncClockDeviceManager.cpp";
        __int16 v52 = 1024;
        int v53 = 167;
        __int16 v54 = 2080;
        uint64_t v55 = p_p;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d TimeSync clock already present for %s", buf, 0x1Cu);
      }

      int v9 = v3 + 2;
      uint64_t v10 = (void *)*((void *)v2 + 13);
      uint64_t v11 = v3;
      if (v3 + 2 != v10)
      {
        do
        {
          uint64_t v12 = v9[1];
          *(v9 - 2) = *v9;
          *(v9 - 1) = v12;
          v9 += 2;
        }

        while (v9 != v10);
        uint64_t v11 = v9 - 2;
      }

      *((void *)v2 + 13) = v11;
      continue;
    }

    uint64_t v13 = (const void *)(*(uint64_t (**)(void, uint64_t))(**((void **)v2 + 3) + 48LL))( *((void *)v2 + 3),  v5);
    sub_7F234(&cf, v13);
    __int16 v14 = (os_log_t *)sub_138E8(6);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      if (!cf)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }

      sub_48100((uint64_t)&__p, (const __CFString *)cf);
      unint64_t v16 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315650;
      std::string v51 = "TimeSyncClockDeviceManager.cpp";
      __int16 v52 = 1024;
      int v53 = 176;
      __int16 v54 = 2080;
      uint64_t v55 = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Looking for HAL Clock device : %s", buf, 0x1Cu);
    }

    if (!cf)
    {
      unint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Could not construct");
    }

    uint64_t v17 = v1[1];
    BOOL v18 = v1[2];
    sub_48100((uint64_t)&v45, (const __CFString *)cf);
    uint64_t v19 = v47;
    if (v17 == v18)
    {
LABEL_40:
      if ((v19 & 0x80) != 0) {
        operator delete(v45);
      }
      v3 += 2;
      uint64_t v4 = v2 + 80;
      uint64_t v1 = a1;
      goto LABEL_55;
    }

    unint64_t v20 = v45;
    size_t v21 = v46;
    if ((v47 & 0x80u) == 0) {
      size_t v22 = v47;
    }
    else {
      size_t v22 = v46;
    }
    while (1)
    {
      uint64_t v23 = *((unsigned __int8 *)v17 + 23);
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0LL) {
        uint64_t v23 = v17[1];
      }
      if (v22 != v23) {
        goto LABEL_39;
      }
      uint64_t v25 = v24 >= 0 ? (unsigned __int8 *)v17 : (unsigned __int8 *)*v17;
      if ((v19 & 0x80) != 0) {
        break;
      }
      if (!(_DWORD)v19) {
        goto LABEL_44;
      }
      __int128 v26 = &v45;
      uint64_t v27 = v19;
      while (*(unsigned __int8 *)v26 == *v25)
      {
        __int128 v26 = (void **)((char *)v26 + 1);
        ++v25;
        if (!--v27) {
          goto LABEL_44;
        }
      }

void sub_32B944( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void ***sub_32B998(void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v4 = v2 + 1;
    sub_8CD60(&v4);
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_32B9E4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v7 == a2;
    BOOL v8 = v7 < a2;
    if (v9) {
      BOOL v8 = *(_DWORD *)(v4 + 36) < a3;
    }
    BOOL v9 = !v8;
    if (v8) {
      uint64_t v10 = (uint64_t *)(v4 + 8);
    }
    else {
      uint64_t v10 = (uint64_t *)v4;
    }
    if (v9) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v11 = *(_DWORD *)(v6 + 32);
  BOOL v9 = v11 == a2;
  BOOL v12 = v11 > a2;
  if (v9) {
    BOOL v12 = *(_DWORD *)(v6 + 36) > a3;
  }
  if (v12) {
    return v3;
  }
  return v6;
}

char *sub_32BA54(uint64_t **a1, unsigned int a2, unsigned int a3, void *a4)
{
  unsigned int v7 = (char *)(a1 + 1);
  uint64_t v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = v6;
        unsigned int v8 = *((_DWORD *)v6 + 8);
        unsigned int v9 = *((_DWORD *)v7 + 9);
        BOOL v10 = v9 > a3;
        if (v8 != a2) {
          BOOL v10 = v8 > a2;
        }
        if (!v10) {
          break;
        }
        uint64_t v6 = *(char **)v7;
        unsigned int v11 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_13;
        }
      }

      BOOL v12 = v9 < a3;
      BOOL v13 = v8 == a2;
      BOOL v14 = v8 < a2;
      if (v13) {
        BOOL v14 = v12;
      }
      if (!v14) {
        break;
      }
      unsigned int v11 = (uint64_t **)(v7 + 8);
      uint64_t v6 = (char *)*((void *)v7 + 1);
      if (!v6) {
        goto LABEL_13;
      }
    }
  }

  else
  {
    unsigned int v11 = a1 + 1;
LABEL_13:
    uint64_t v15 = v7;
    unsigned int v7 = (char *)operator new(0x30uLL);
    *((void *)v7 + 4) = *a4;
    *((void *)v7 + 5) = 0LL;
    *(void *)unsigned int v7 = 0LL;
    *((void *)v7 + 1) = 0LL;
    *((void *)v7 + 2) = v15;
    void *v11 = (uint64_t *)v7;
    unint64_t v16 = (uint64_t *)**a1;
    uint64_t v17 = (uint64_t *)v7;
    if (v16)
    {
      *a1 = v16;
      uint64_t v17 = *v11;
    }

    sub_7A420(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

void sub_32BB4C(unsigned int *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24LL);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3) == TSNullClockIdentifier)
  {
    unint64_t v20 = (os_log_t *)sub_138E8(13);
    size_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v27 = "TimeSyncClockDeviceManager.cpp";
      __int16 v28 = 1024;
      int v29 = 115;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No gPTP System Domain Clock present ?",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No gPTP System Domain Clock present ?");
LABEL_43:
  }

  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
  if (!v4)
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v27 = "TimeSyncClockDeviceManager.cpp";
      __int16 v28 = 1024;
      int v29 = 118;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [gptpClock is NULL]: Could not create gPTP clock reference",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create gPTP clock reference");
    goto LABEL_43;
  }

  uint64_t v5 = (os_log_t *)sub_138E8(6);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_33464(&__p, a1 + 2);
    unsigned int v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v27 = "TimeSyncClockDeviceManager.cpp";
    __int16 v28 = 1024;
    int v29 = 218;
    __int16 v30 = 2080;
    uint64_t v31 = v7;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Created time sync clock device for %s, Adding to pending requests (to wait for HAL clock)",  buf,  0x1Cu);
  }

  unsigned int v8 = (char *)v2[12];
  unsigned int v9 = (char *)v2[13];
  uint64_t v10 = *((void *)a1 + 1);
  unsigned int v11 = v8;
  if (v8 != v9)
  {
    unsigned int v11 = (char *)v2[12];
    while (*(void *)v11 != v10)
    {
      v11 += 16;
      if (v11 == v9) {
        goto LABEL_16;
      }
    }
  }

  if (v11 == v9)
  {
LABEL_16:
    unint64_t v12 = v2[14];
    if ((unint64_t)v9 >= v12)
    {
      uint64_t v14 = (v9 - v8) >> 4;
      unint64_t v15 = v14 + 1;
      uint64_t v16 = v12 - (void)v8;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 60) {
          sub_7A8C4();
        }
        BOOL v18 = (char *)operator new(16 * v17);
      }

      else
      {
        BOOL v18 = 0LL;
      }

      uint64_t v19 = &v18[16 * v14];
      *(void *)uint64_t v19 = v10;
      *((void *)v19 + 1) = v4;
      BOOL v13 = v19 + 16;
      if (v8 != v9)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v9 - 1);
          v19 -= 16;
          v9 -= 16;
        }

        while (v9 != v8);
        unsigned int v8 = (char *)v2[12];
      }

      v2[12] = v19;
      v2[13] = v13;
      v2[14] = &v18[16 * v17];
      if (v8) {
        operator delete(v8);
      }
    }

    else
    {
      *(void *)unsigned int v9 = v10;
      *((void *)v9 + 1) = v4;
      BOOL v13 = v9 + 16;
    }

    v2[13] = v13;
  }

  sub_32A8DC((uint64_t)v2);
  operator delete(a1);
}

void sub_32BEF0(_Unwind_Exception *a1)
{
}

void sub_32BF18(unsigned int *a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(6);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_33464(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315650;
    unsigned int v11 = "TimeSyncClockDeviceManager.cpp";
    __int16 v12 = 1024;
    int v13 = 106;
    __int16 v14 = 2080;
    unint64_t v15 = p_p;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d gPTP TimeSyncManager is now available. Creating clock %s",  buf,  0x1Cu);
  }

  uint64_t v5 = sub_32A7C8();
  uint64_t v6 = *(void *)a1;
  unsigned int v7 = *(dispatch_queue_s **)(v5 + 168);
  unsigned int v8 = operator new(0x10uLL);
  void *v8 = v5;
  v8[1] = v6;
  dispatch_async_f(v7, v8, (dispatch_function_t)sub_32BB4C);
}

void sub_32C048(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_32C054(uint64_t a1)
{
  uint64_t v2 = **(uint64_t ***)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  _DWORD v8[2] = sub_32C5F0;
  v8[3] = &unk_481990;
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v8[4] = v4;
  integer_t v8[5] = v3;
  sub_32C5F0((uint64_t)v8, &v11);
  uint64_t v5 = v11;
  char v10 = 1;
  uint64_t v9 = 0LL;
  sub_D9A9C((uint64_t)&v9);
  char v12 = 1;
  unsigned int v11 = 0LL;
  sub_D9A9C((uint64_t)&v11);
  uint64_t v6 = *(const void ***)(a1 + 32);
  unsigned int v7 = *v6;
  *uint64_t v6 = v5;
  if (v7) {
    CFRelease(v7);
  }
}

void sub_32C134(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_32C358( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf, __int128 a18, __int16 a19, __int16 a20, int a21, int a22)
{
  if (!a2) {
    JUMPOUT(0x32C150LL);
  }
  __cxa_end_catch();
  if (a2 == 3)
  {
    int v24 = __cxa_begin_catch(a1);
    uint64_t v25 = (os_log_t *)sub_138E8(13);
    os_log_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v27 = v24[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 445;
      WORD1(a18) = 1024;
      DWORD1(a18) = v27;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 52;
      __int16 v28 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v29 = v26;
      uint32_t v30 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
    }
  }

  else
  {
    uint64_t v31 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int128 v32 = v31;
      uint64_t v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v32 + 16LL))(v32);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 446;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v35;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 52;
        __int16 v28 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v29 = v34;
        uint32_t v30 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unint64_t v36 = (os_log_t *)sub_138E8(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 447;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 52;
        __int16 v28 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v29 = v37;
        uint32_t v30 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  LOBYTE(buf) = 0;
  BYTE8(buf) = 0;
  JUMPOUT(0x32C0E8LL);
}

void sub_32C5BC()
{
}

void sub_32C5C8()
{
}

void sub_32C5D4()
{
}

void sub_32C5E8()
{
}

void *sub_32C5F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(unsigned int **)(a1 + 40);
  uint64_t v5 = (uint64_t **)(v4 + 72);
  unsigned int v6 = *v3;
  unsigned int v7 = v3[1];
  uint64_t v8 = sub_32B9E4(v4 + 72, *v3, v7);
  uint64_t v9 = v4 + 80;
  uint64_t v10 = *(void *)(v4 + 24);
  if (v9 == v8)
  {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(unsigned int *), unsigned int *))(*(void *)v10 + 16LL))( v10,  sub_32C6AC,  v3);
    *a2 = 0LL;
  }

  else
  {
    unsigned int v11 = sub_32BA54(v5, v6, v7, v3);
    char v12 = (const void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v10 + 48LL))(v10, *((void *)v11 + 5));
    return sub_7F234(a2, v12);
  }

  return result;
}

uint64_t sub_32C6AC(unsigned int *a1)
{
  uint64_t v2 = sub_32A7C8();
  uint64_t v3 = (os_log_t *)sub_138E8(6);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    sub_33464(&__p, a1);
    uint64_t v5 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioBufferList buf = 136315650;
    char v12 = "TimeSyncClockDeviceManager.cpp";
    __int16 v13 = 1024;
    int v14 = 250;
    __int16 v15 = 2080;
    uint64_t v16 = v5;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d TimeSyncManager is now available. Adding gPTP Timesync manager (%s)",  buf,  0x1Cu);
  }

  if (((*(uint64_t (**)(void))(**(void **)(v2 + 24) + 56LL))(*(void *)(v2 + 24)) & 1) == 0)
  {
    unsigned int v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      char v12 = "TimeSyncClockDeviceManager.cpp";
      __int16 v13 = 1024;
      int v14 = 253;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Adding gPTP timesync manager failed",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Adding gPTP timesync manager failed");
  }

  return (*(uint64_t (**)(void, void (*)(unsigned int *), unsigned int *))(**(void **)(v2 + 24)
                                                                                                + 64LL))( *(void *)(v2 + 24),  sub_32BF18,  a1);
}

void sub_32C884(_Unwind_Exception *a1)
{
}

void sub_32C8A0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 40);
  uint64_t v3 = *v2;
  uint64_t v4 = **v2;
  uint64_t v5 = (unsigned int *)(*v2 + 1);
  unsigned int v6 = *v5;
  unsigned int v7 = *((_DWORD *)*v2 + 3);
  if (v4 + 80 == sub_32B9E4(v4 + 72, *v5, v7))
  {
    int v40 = 0LL;
  }

  else
  {
    uint64_t v8 = *(void *)(v4 + 24);
    uint64_t v9 = sub_32BA54((uint64_t **)(v4 + 72), v6, v7, v5);
    uint64_t v10 = (const void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 48LL))(v8, *((void *)v9 + 5));
    sub_7F234(&v40, v10);
    sub_82600((uint64_t)&v44);
    sub_826EC(&v44, (uint64_t)"Timesync for VAD - ", 19LL);
    sub_33464((std::string *)buf, v5);
    if (buf[23] >= 0) {
      unsigned int v11 = buf;
    }
    else {
      unsigned int v11 = *(_BYTE **)buf;
    }
    if (buf[23] >= 0) {
      uint64_t v12 = buf[23];
    }
    else {
      uint64_t v12 = *(void *)&buf[8];
    }
    sub_826EC(&v44, (uint64_t)v11, v12);
    sub_826EC(&v44, (uint64_t)" - is ", 6LL);
    sub_151A20((uint64_t)&v41, v40);
    __int16 v13 = std::string::insert(&v41, 0LL, "(", 1uLL);
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    int64_t cap = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int16 v15 = __p;
    }
    else {
      __int16 v15 = (void **)__p[0];
    }
    if (cap >= 0) {
      uint64_t v16 = HIBYTE(cap);
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    sub_826EC(&v44, (uint64_t)v15, v16);
    sub_826EC(&v44, (uint64_t)", ", 2LL);
    unint64_t v17 = sub_32BA54((uint64_t **)(v4 + 72), *((_DWORD *)v3 + 2), *((_DWORD *)v3 + 3), v5);
    BOOL v18 = (void *)std::ostream::operator<<(&v44, *((void *)v17 + 5));
    uint64_t v19 = sub_826EC(v18, (uint64_t)"). Caller context is ", 22LL);
    int v20 = *((char *)v3 + 39);
    if (v20 >= 0) {
      uint64_t v21 = (uint64_t)(v3 + 2);
    }
    else {
      uint64_t v21 = v3[2];
    }
    if (v20 >= 0) {
      uint64_t v22 = *((unsigned __int8 *)v3 + 39);
    }
    else {
      uint64_t v22 = v3[3];
    }
    sub_826EC(v19, v21, v22);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v23 = (os_log_t *)sub_138E8(6);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
    {
      sub_82924(__p, (uint64_t)v45);
      uint64_t v25 = cap >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "TimeSyncClockDeviceManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 344;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v25;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    sub_82924(__p, (uint64_t)v45);
    uint64_t v27 = *(void *)(v4 + 144);
    unint64_t v26 = *(void *)(v4 + 152);
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v27) >> 3);
    if (v28 >= 8)
    {
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      unint64_t v29 = *(void *)(v4 + 160);
      if (v26 >= v29)
      {
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v27) >> 3);
        if (2 * v31 <= v28 + 1) {
          uint64_t v32 = v28 + 1;
        }
        else {
          uint64_t v32 = 2 * v31;
        }
        if (v31 >= 0x555555555555555LL) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v32;
        }
        uint64_t v49 = v4 + 160;
        os_log_t v34 = (char *)sub_8D44C(v33);
        uint64_t v35 = &v34[24 * v28];
        *(void *)AudioBufferList buf = v34;
        *(void *)&_DWORD buf[8] = v35;
        *(void *)&_BYTE buf[24] = &v34[24 * v36];
        *(_OWORD *)uint64_t v35 = *(_OWORD *)__p;
        *((void *)v35 + 2) = cap;
        __p[0] = 0LL;
        __p[1] = 0LL;
        int64_t cap = 0LL;
        *(void *)&buf[16] = v35 + 24;
        sub_4802C((uint64_t *)(v4 + 144), buf);
        unint64_t v30 = *(void *)(v4 + 152);
        sub_480A0((uint64_t)buf);
      }

      else
      {
        *(_OWORD *)unint64_t v26 = *(_OWORD *)__p;
        *(void *)(v26 + 16) = cap;
        __p[1] = 0LL;
        int64_t cap = 0LL;
        __p[0] = 0LL;
        unint64_t v30 = v26 + 24;
        *(void *)(v4 + 152) = v26 + 24;
      }

      *(void *)(v4 + 152) = v30;
    }

    if (v46 < 0) {
      operator delete((void *)v45[8]);
    }
    std::streambuf::~streambuf(v45);
    std::ios::~ios(&v47);
  }

  os_log_t v37 = v40;
  LOBYTE(v45[0]) = 1;
  uint64_t v44 = 0LL;
  sub_D9A9C((uint64_t)&v44);
  unint64_t v38 = *(const void ***)(a1 + 32);
  unint64_t v39 = *v38;
  *unint64_t v38 = v37;
  if (v39) {
    CFRelease(v39);
  }
}

void sub_32CD28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, __int128 buf, __int128 a24, __int16 a25, __int16 a26, int a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  std::streambuf::~streambuf((char *)&buf + 8);
  std::ios::~ios(&a40);
  if (cf) {
    CFRelease(cf);
  }
  if (a2 == 3)
  {
    uint64_t v44 = __cxa_begin_catch(exception_object);
    uint64_t v45 = (os_log_t *)sub_138E8(6);
    char v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      sub_33464((std::string *)&a10, v40);
      if (a15 >= 0) {
        uint64_t v47 = (void **)&a10;
      }
      else {
        uint64_t v47 = a10;
      }
      uint64_t v48 = (*(uint64_t (**)(void *))(*(void *)v44 + 16LL))(v44);
      uint64_t v49 = (void *)(v41 + 16);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "TimeSyncClockDeviceManager.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 357;
      WORD1(amemset(v7, 0, 24) = 2080;
      *(void *)((char *)&a24 + 4) = v47;
      WORD6(amemset(v7, 0, 24) = 2080;
      *(void *)((char *)&a24 + 14) = v48;
      HIWORD(a27) = 2080;
      a28 = (uint64_t)v49;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Exception looking up timesync ref for %s: %s. Caller context is %s",  (uint8_t *)&buf,  0x30u);
      if (a15 < 0) {
        operator delete(a10);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x32CCC0LL);
  }

  if (a2 == 2)
  {
    uint64_t v50 = __cxa_begin_catch(exception_object);
    std::string v51 = (os_log_t *)sub_138E8(13);
    os_log_t v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
    {
      int v53 = v50[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 445;
      WORD1(amemset(v7, 0, 24) = 1024;
      DWORD1(amemset(v7, 0, 24) = v53;
      WORD4(amemset(v7, 0, 24) = 2080;
      *(void *)((char *)&a24 + 10) = "";
      a26 = 1024;
      a27 = 52;
      __int16 v54 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v55 = v52;
      uint32_t v56 = 40;
LABEL_27:
      _os_log_impl(&dword_0, v55, OS_LOG_TYPE_ERROR, v54, (uint8_t *)&buf, v56);
    }
  }

  else
  {
    __cxa_begin_catch(exception_object);
    unint64_t v57 = (os_log_t *)sub_138E8(13);
    os_log_t v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 447;
      WORD1(amemset(v7, 0, 24) = 2080;
      *(void *)((char *)&a24 + 4) = "";
      WORD6(amemset(v7, 0, 24) = 1024;
      *(_DWORD *)((char *)&a24 + 14) = 52;
      __int16 v54 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
      uint64_t v55 = v58;
      uint32_t v56 = 34;
      goto LABEL_27;
    }
  }

  __cxa_end_catch();
  LOBYTE(buf) = 0;
  BYTE8(buf) = 0;
  JUMPOUT(0x32CCD0LL);
}

void sub_32D1A8()
{
}

void sub_32D1B4()
{
}

void sub_32D1C0()
{
}

void sub_32D1D0()
{
}

void sub_32D1DC()
{
  qword_4A08A8 = 850045863LL;
  unk_4A08B0 = 0u;
  unk_4A08C0 = 0u;
  unk_4A08D0 = 0u;
  qword_4A08E0 = 0LL;
  qword_4A08E8 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  xmmword_4A08F0 = 0u;
  *(_OWORD *)&qword_4A0900 = 0u;
  qword_4A0908 = (uint64_t)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_signal,  1uLL,  0LL,  global_queue);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000LL;
  handler[2] = sub_32D2C8;
  handler[3] = &unk_4819F0;
  handler[4] = &qword_4A08A8;
  dispatch_source_set_event_handler((dispatch_source_t)qword_4A0908, handler);
  dispatch_resume((dispatch_object_t)qword_4A0908);
}

void sub_32D2B0(_Unwind_Exception *a1)
{
}

void sub_32D2C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::mutex::lock((std::mutex *)v1);
  CFSetApplyFunction(*(CFSetRef *)(v1 + 64), (CFSetApplierFunction)sub_32D340, 0LL);
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 80);
  while (v2 != v3)
  {
    sub_32D35C(v2);
    v2 += 48LL;
  }

  std::mutex::unlock((std::mutex *)v1);
}

void sub_32D328(_Unwind_Exception *a1)
{
}

uint64_t sub_32D340(const __CFString *a1)
{
  return CFPreferencesSynchronize(a1, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
}

CFPropertyListRef sub_32D35C(uint64_t a1)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(*(CFStringRef *)a1, *(CFStringRef *)(a1 + 8));
  if (result)
  {
    CFPropertyListRef v4 = result;
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3) {
      sub_82CEC();
    }
    return (CFPropertyListRef)(*(uint64_t (**)(uint64_t, CFPropertyListRef *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

uint64_t sub_32D3B0(const __CFString *a1, const __CFString *a2, _BYTE *a3)
{
  CFPropertyListRef v4 = (const __CFBoolean *)CFPreferencesCopyAppValue(a1, a2);
  uint64_t v5 = v4;
  int valuePtr = 0;
  if (a3) {
    *a3 = 0;
  }
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      int valuePtr = CFBooleanGetValue(v5);
    }

    else if (v6 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    }

    else if (v6 != CFStringGetTypeID() {
           || (CFStringGetCString((CFStringRef)v5, buffer, 64LL, 0x600u), sscanf(buffer, "%d", &valuePtr) != 1))
    }
    {
LABEL_13:
      uint64_t v7 = valuePtr;
      CFRelease(v5);
      return v7;
    }

    if (a3) {
      *a3 = 1;
    }
    goto LABEL_13;
  }

  return 0LL;
}

BOOL sub_32D4CC(const __CFString *a1, const __CFString *a2, _BYTE *a3)
{
  CFPropertyListRef v4 = (const __CFBoolean *)CFPreferencesCopyAppValue(a1, a2);
  uint64_t v5 = v4;
  int valuePtr = 0;
  if (a3) {
    *a3 = 0;
  }
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(v5);
      if (!a3) {
        goto LABEL_17;
      }
      goto LABEL_10;
    }

    if (v6 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
      int Value = valuePtr != 0;
      if (a3) {
LABEL_10:
      }
        *a3 = 1;
    }

    else
    {
      if (v6 != CFStringGetTypeID())
      {
        int Value = 0;
        goto LABEL_17;
      }

      CFStringGetCString((CFStringRef)v5, buffer, 64LL, 0x600u);
      if (sscanf(buffer, "%d", &valuePtr) == 1)
      {
        if (a3) {
          *a3 = 1;
        }
        int Value = valuePtr != 0;
        goto LABEL_17;
      }

      char v9 = buffer[0];
      if (buffer[0])
      {
        uint64_t v10 = &buffer[1];
        do
        {
          *(v10 - 1) = __tolower(v9);
          int v11 = *v10++;
          char v9 = v11;
        }

        while (v11);
      }

      if (*(unsigned __int16 *)buffer ^ 0x6F6E | buffer[2])
      {
        if (*(_DWORD *)buffer != 1936482662 || v15 != 101)
        {
          if (*(_DWORD *)buffer == 7562617 || !(*(_DWORD *)buffer ^ 0x65757274 | v15))
          {
            int Value = 1;
            if (a3) {
              *a3 = 1;
            }
          }

          else
          {
            int Value = valuePtr;
          }

          goto LABEL_17;
        }
      }

      int Value = 0;
      if (a3) {
        goto LABEL_10;
      }
    }

void *sub_32D6C4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (void *)a4[3];
  if (!v7)
  {
    __int16 v13 = 0LL;
    *a1 = a2;
    a1[1] = a3;
LABEL_9:
    a1[5] = 0LL;
    return a1;
  }

  if (v7 == a4)
  {
    __int16 v13 = v12;
    (*(void (**)(void *, void *))(*a4 + 24LL))(a4, v12);
    uint64_t v8 = v13;
  }

  else
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v7 + 16LL))(v7);
    __int16 v13 = v8;
  }

  *a1 = a2;
  a1[1] = a3;
  if (!v8) {
    goto LABEL_9;
  }
  if (v8 == v12)
  {
    a1[5] = a1 + 2;
    (*(void (**)(void *))(v12[0] + 24LL))(v12);
  }

  else
  {
    a1[5] = (*(uint64_t (**)(void *))(*v8 + 16LL))(v8);
  }

  char v9 = v13;
  if (v13 == v12)
  {
    uint64_t v10 = 4LL;
    char v9 = v12;
    goto LABEL_15;
  }

  if (v13)
  {
    uint64_t v10 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  return a1;
}

void sub_32D7F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t sub_32D838(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 48;
    CFPropertyListRef v4 = *(void **)(v2 - 8);
    if (v4 == (void *)(v2 - 32))
    {
      CFPropertyListRef v4 = (void *)(v2 - 32);
      uint64_t v5 = 4LL;
LABEL_7:
      (*(void (**)(void))(*v4 + 8 * v5))();
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      if (v4)
      {
        uint64_t v5 = 5LL;
        goto LABEL_7;
      }

      v2 -= 48LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_32D8C0(uint64_t a1)
{
  if ((sub_2C7C00(*(void *)(a1 + 8)) & 1) == 0)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      CFTypeID v6 = "RoutingHandlerAction_ChangeSpeakerOutputChannelConfiguration.cpp";
      __int16 v7 = 1024;
      int v8 = 38;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_2C7C98(*(void *)(a1 + 8), *(_DWORD *)(a1 + 16), a1 + 24);
}

void sub_32D9C8(_Unwind_Exception *exception_object)
{
}

void sub_32D9E4(uint64_t a1)
{
  if ((sub_2C7C00(*(void *)(a1 + 8)) & 1) == 0)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      CFTypeID v6 = "RoutingHandlerAction_ChangeSpeakerOutputChannelConfiguration.cpp";
      __int16 v7 = 1024;
      int v8 = 45;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_2C7C98(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20), a1 + 24);
}

void sub_32DAEC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_32DB08(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = &off_481A20;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  if ((sub_2C7C00(a2) & 1) == 0)
  {
    unint64_t v29 = (os_log_t *)sub_138E8(13);
    unint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Device_Speaker_Aspen.cpp";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 213;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&__p,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  strcpy(buf, "crsstpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_1919F8((uint64_t)&__p, a2);
  int data = (int)__p.__r_.__value_.__l.__data_;
  if (LODWORD(__p.__r_.__value_.__l.__data_) || !v42)
  {
    uint64_t v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v32 = &off_4865A0;
    void v32[2] = data;
  }

  os_log_t v37 = 0LL;
  unint64_t v38 = 0LL;
  uint64_t v39 = 0LL;
  size_t size = (void *)__p.__r_.__value_.__l.__size_;
  sub_7A5B8( &v37,  (const void *)__p.__r_.__value_.__l.__size_,  __p.__r_.__value_.__l.__cap_,  (uint64_t)(__p.__r_.__value_.__l.__cap_ - __p.__r_.__value_.__l.__size_) >> 2);
  if (size) {
    operator delete(size);
  }
  strcpy(buf, "shCSptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_1919F8((uint64_t)&__p, a2);
  int v8 = (int)__p.__r_.__value_.__l.__data_;
  if (LODWORD(__p.__r_.__value_.__l.__data_) || !v42)
  {
    unint64_t v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v33 = &off_4865A0;
    v33[2] = v8;
  }

  os_log_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  char v9 = (void *)__p.__r_.__value_.__l.__size_;
  sub_7A5B8( &v34,  (const void *)__p.__r_.__value_.__l.__size_,  __p.__r_.__value_.__l.__cap_,  (uint64_t)(__p.__r_.__value_.__l.__cap_ - __p.__r_.__value_.__l.__size_) >> 2);
  if (v9) {
    operator delete(v9);
  }
  sub_31821C();
  uint64_t v10 = qword_49DA98;
  if ((uint64_t *)qword_49DA98 == &qword_49DAA0)
  {
LABEL_22:
    int v20 = (os_log_t *)sub_138E8(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      sub_F6EB0(&v40, v37, v38);
      int v22 = (char)v40.__r_.__value_.__s.__size_;
      std::string::size_type v23 = v40.__r_.__value_.__r.__words[0];
      sub_8F640(&__p, v34, v35);
      int v24 = &v40;
      if (v22 < 0) {
        int v24 = (std::string *)v23;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Speaker_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 106;
      __int16 v46 = 2080;
      uint64_t v47 = v24;
      __int16 v48 = 2080;
      uint64_t v49 = p_p;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unable to find Channel Configuration for Data Sources: (Telemetry: %s, Output: %s)",  buf,  0x26u);
    }

    unint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v26,  "Unable to find Channel Configuration for Data Sources: (Telemetry: %s, Output: %s)");
  }

  int v11 = v37;
  size_t v12 = (char *)v38 - (char *)v37;
  __int16 v13 = v34;
  size_t v14 = (char *)v35 - (char *)v34;
  while (1)
  {
    __int16 v15 = *(const void **)(v10 + 40);
    if (*(void *)(v10 + 48) - (void)v15 == v12 && !memcmp(v15, v11, v12))
    {
      uint64_t v16 = *(const void **)(v10 + 64);
      if (*(void *)(v10 + 72) - (void)v16 == v14 && !memcmp(v16, v13, v14)) {
        break;
      }
    }

    unint64_t v17 = *(uint64_t **)(v10 + 8);
    if (v17)
    {
      do
      {
        BOOL v18 = v17;
        unint64_t v17 = (uint64_t *)*v17;
      }

      while (v17);
    }

    else
    {
      do
      {
        BOOL v18 = *(uint64_t **)(v10 + 16);
        BOOL v19 = *v18 == v10;
        uint64_t v10 = (uint64_t)v18;
      }

      while (!v19);
    }

    uint64_t v10 = (uint64_t)v18;
    if (v18 == &qword_49DAA0) {
      goto LABEL_22;
    }
  }

  int v27 = *(_DWORD *)(v10 + 32);
  if (v13) {
    operator delete(v13);
  }
  if (v11) {
    operator delete(v11);
  }
  *(_DWORD *)(a1 + 20) = v27;
  *(void *)(a1 + memset(v7, 0, 24) = *a3;
  return a1;
}

void sub_32DF60( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, __int128 buf, __int128 a20, __int16 a21, __int16 a22, int a23, int a24)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  if (a2 == 3)
  {
    int v27 = __cxa_begin_catch(a1);
    unint64_t v28 = (os_log_t *)sub_138E8(13);
    os_log_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      int v30 = v27[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a20) = 1024;
      DWORD1(a20) = v30;
      WORD4(a20) = 2080;
      *(void *)((char *)&a20 + 10) = "";
      a22 = 1024;
      a23 = 21;
      unint64_t v31 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v32 = v29;
      uint32_t v33 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v33);
    }
  }

  else
  {
    os_log_t v34 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v35 = v34;
      uint64_t v36 = (os_log_t *)sub_138E8(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16LL))(v35);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = v38;
        WORD6(a20) = 2080;
        *(void *)((char *)&a20 + 14) = "";
        HIWORD(a23) = 1024;
        a24 = 21;
        unint64_t v31 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v32 = v37;
        uint32_t v33 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v39 = (os_log_t *)sub_138E8(13);
      os_log_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = "";
        WORD6(a20) = 1024;
        *(_DWORD *)((char *)&a20 + 14) = 21;
        unint64_t v31 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v32 = v40;
        uint32_t v33 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x32DE14LL);
}

__n128 sub_32E270(__n128 *a1)
{
  uint64_t v2 = (char *)operator new(0x90uLL);
  *((void *)v2 + 1) = 0LL;
  uint64_t v3 = (unint64_t *)(v2 + 8);
  *(_OWORD *)(v2 + memset(v7, 0, 24) = 0u;
  *((void *)v2 + 2) = 0LL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(void *)uint64_t v2 = off_481B30;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *((void *)v2 + 17) = 0LL;
  *((void *)v2 + 7) = v2 + 56;
  *((void *)v2 + 8) = v2 + 56;
  unsigned int v13 = 1751409257;
  sub_7A22C((uint64_t)(v2 + 80), &v13, 1LL);
  int v12 = 2;
  sub_15FFCC((uint64_t *)v2 + 13, &v12, 1LL);
  *((void *)v2 + 16) = sub_331650;
  *((void *)v2 + 17) = v2 + 24;
  uint64_t v4 = sub_32918();
  sub_395880(v4, (uint64_t)(v2 + 80));
  v11.n128_u64[0] = (unint64_t)(v2 + 24);
  v11.n128_u64[1] = (unint64_t)v2;
  do
    unint64_t v5 = __ldxr(v3);
  while (__stxr(v5 + 1, v3));
  CFTypeID v6 = (std::__shared_weak_count *)qword_4A09B0;
  qword_4A09A8 = (uint64_t)(v2 + 24);
  qword_4A09B0 = (uint64_t)v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  uint64_t v9 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(uint64_t), uint64_t *))(*(void *)v9 + 128LL))( v9,  sub_32ECE0,  &qword_4A09A8);
  __n128 result = v11;
  *a1 = v11;
  return result;
}

void sub_32E3CC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_331358((uint64_t *)(v1 + 32), 0LL);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_32E438(uint64_t **a1, uint64_t a2)
{
  if (!*(void *)(a2 + 48))
  {
    *a1 = 0LL;
    return;
  }

  uint64_t v3 = a2 + 32;
  uint64_t v29 = 1751409255LL;
  sub_90418(&buf, a2 + 32);
  sub_10AD64(v30, (uint64_t)&buf, 1LL);
  uint64_t v4 = v3;
  do
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3)
    {
      int v20 = (os_log_t *)sub_138E8(13);
      uint64_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        int inData = 136315394;
        uint64_t v38 = "HapticDebugManager.cpp";
        __int16 v39 = 1024;
        int v40 = 45;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): No master haptic device is specified",  (uint8_t *)&inData,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "No master haptic device is specified");
    }
  }

  while (((*(uint64_t (**)(void))(**(void **)(v4 + 16) + 472LL))(*(void *)(v4 + 16)) & 1) == 0);
  unint64_t v31 = *(os_unfair_lock_s **)(v4 + 16);
  uint64_t v32 = 0x4000000000LL;
  uint64_t v33 = 2LL;
  LOBYTE(v34) = 0;
  char v36 = 0;
  sub_68314(&buf);
  unint64_t v5 = v31;
  if (!v31)
  {
    std::string::size_type v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Aggregate_HAL_Common.cpp";
      __int16 v42 = 1024;
      int v43 = 47;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

void sub_32E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_32EC30(uint64_t a1)
{
  return a1;
}

void sub_32EC70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_481A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_32EC80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_481A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_32ECA0(uint64_t a1)
{
  *(void *)(a1 + memset(v7, 0, 24) = off_481AE0;
  sub_904DC((uint64_t *)(a1 + 48));
  sub_904B0((uint64_t *)(a1 + 32));
}

void sub_32ECE0(uint64_t a1)
{
  uint64_t v2 = sub_138E8(26);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v18 = 136315394;
        OSStatus v19 = "HapticDebugManager.cpp";
        __int16 v20 = 1024;
        int v21 = 110;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Received Haptic Preference Update",  (uint8_t *)&v18,  0x12u);
      }
    }
  }

  if (!a1)
  {
    int v12 = (os_log_t *)sub_138E8(13);
    unsigned int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      OSStatus v19 = "HapticDebugManager.cpp";
      __int16 v20 = 1024;
      int v21 = 112;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unint64_t v5 = *(int **)a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  if (!v5)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      OSStatus v19 = "HapticDebugManager.cpp";
      __int16 v20 = 1024;
      int v21 = 115;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
    }

    unint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Postcondition failure.");
  }

  uint64_t v8 = sub_5954C();
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120LL))(v8);
  sub_32F234(v5, v9);
  if (v4)
  {
    unsigned int v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_32EF60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    if (a2 == 3)
    {
      __int16 v20 = __cxa_begin_catch(exception_object);
      int v21 = (os_log_t *)sub_138E8(13);
      int v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        int v23 = v20[2];
        LODWORD(sub_C590C(__dst, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(sub_C590C(__dst, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 429;
        WORD1(a10) = 1024;
        DWORD1(a10) = v23;
        WORD4(a10) = 2080;
        *(void *)((char *)&a10 + 10) = "";
        a12 = 1024;
        a13 = 117;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).",  (uint8_t *)&a9,  0x28u);
      }
    }

    else
    {
      int v24 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        uint64_t v25 = v24;
        unint64_t v26 = (os_log_t *)sub_138E8(13);
        int v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
          LODWORD(sub_C590C(__dst, a9) = 136316162;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(sub_C590C(__dst, a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 430;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v28;
          WORD6(a10) = 2080;
          *(void *)((char *)&a10 + 14) = "";
          HIWORD(a13) = 1024;
          a14 = 117;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).",  (uint8_t *)&a9,  0x2Cu);
        }
      }

      else
      {
        uint64_t v29 = (os_log_t *)sub_138E8(13);
        int v30 = *v29;
        if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(sub_C590C(__dst, a9) = 136315906;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(sub_C590C(__dst, a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 431;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = "";
          WORD6(a10) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = 117;
          _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).",  (uint8_t *)&a9,  0x22u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x32EDF0LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_32F234(int *a1, int a2)
{
  uint64_t v4 = (os_log_t *)sub_138E8(26);
  unint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    sub_7D084(&v218, off_47D9B0[*a1]);
    int v6 = v218.__m_.__opaque[15];
    uint64_t sig = v218.__m_.__sig;
    sub_7D084(&v217, off_47D9B0[a2]);
    uint64_t v8 = &v218;
    if (v6 < 0) {
      uint64_t v8 = (std::mutex *)sig;
    }
    if (v217.__cv_.__opaque[15] >= 0) {
      uint64_t v9 = (uint64_t)&v217;
    }
    else {
      uint64_t v9 = v217.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136315906;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
    __int16 v208 = 1024;
    int v209 = 183;
    __int16 v210 = 2080;
    *(void *)size_t v211 = v8;
    *(_WORD *)&v211[8] = 2080;
    *(void *)&v211[10] = v9;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Old State: %s, New State: %s", (uint8_t *)&buf, 0x26u);
    if (v217.__cv_.__opaque[15] < 0) {
      operator delete((void *)v217.__cv_.__sig);
    }
    if (v218.__m_.__opaque[15] < 0) {
      operator delete((void *)v218.__m_.__sig);
    }
  }

  int v10 = *a1;
  if (*a1 == a2)
  {
    unint64_t v11 = (os_log_t *)sub_138E8(26);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      sub_7D084(&v218, off_47D9B0[a2]);
      unsigned int v13 = v218.__m_.__opaque[15] >= 0 ? &v218 : (std::mutex *)v218.__m_.__sig;
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
      __int16 v208 = 1024;
      int v209 = 187;
      __int16 v210 = 2080;
      *(void *)size_t v211 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Redundant update to maggie debug preference state : %s",  (uint8_t *)&buf,  0x1Cu);
      if (v218.__m_.__opaque[15] < 0) {
        operator delete((void *)v218.__m_.__sig);
      }
    }

    int v10 = *a1;
  }

  *a1 = a2;
  if (v10 == 1)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(26);
    unint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
      __int16 v208 = 1024;
      int v209 = 205;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disabling IO Haptic Debug", (uint8_t *)&buf, 0x12u);
    }

    v218.__m_.__uint64_t sig = 0LL;
    *(void *)v218.__m_.__opaque = 0LL;
    int v18 = (std::__shared_weak_count *)*((void *)a1 + 3);
    if (v18)
    {
      unint64_t v19 = std::__shared_weak_count::lock(v18);
      *(void *)v218.__m_.__opaque = v19;
      if (v19)
      {
        uint64_t v20 = *((void *)a1 + 2);
        v218.__m_.__uint64_t sig = v20;
        if (v20)
        {
          sub_1DAAD0(v20, 0);
LABEL_40:
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            unint64_t v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }

          goto LABEL_44;
        }
      }
    }

    else
    {
      unint64_t v19 = 0LL;
    }

    int v21 = (os_log_t *)sub_138E8(26);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
      __int16 v208 = 1024;
      int v209 = 207;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d No IO Delegate to disable", (uint8_t *)&buf, 0x12u);
    }

    if (!v19) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }

  if (v10 != 2) {
    goto LABEL_45;
  }
  int v14 = (os_log_t *)sub_138E8(26);
  int v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
  {
    buf.AudioObjectPropertySelector mSelector = 136315394;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
    __int16 v208 = 1024;
    int v209 = 199;
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disabling kAlways Haptic Debug", (uint8_t *)&buf, 0x12u);
  }

  if (!*((void *)a1 + 1))
  {
    char v130 = (os_log_t *)sub_138E8(13);
    __int128 v131 = *v130;
    if (*v130 && os_log_type_enabled(*v130, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
      __int16 v208 = 1024;
      int v209 = 200;
      _os_log_impl( &dword_0,  v131,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_331358((uint64_t *)a1 + 1, 0LL);
LABEL_44:
  a2 = *a1;
LABEL_45:
  if (a2 == 1)
  {
    int v43 = (os_log_t *)sub_138E8(26);
    __int16 v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
      __int16 v208 = 1024;
      int v209 = 237;
      _os_log_impl(&dword_0, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabling IO Haptic Debug", (uint8_t *)&buf, 0x12u);
    }

    v218.__m_.__uint64_t sig = 0LL;
    *(void *)v218.__m_.__opaque = 0LL;
    int v45 = (std::__shared_weak_count *)*((void *)a1 + 3);
    if (v45)
    {
      char v46 = std::__shared_weak_count::lock(v45);
      *(void *)v218.__m_.__opaque = v46;
      if (v46)
      {
        uint64_t v47 = *((void *)a1 + 2);
        v218.__m_.__uint64_t sig = v47;
        if (v47)
        {
          sub_1DA4F4(v47);
          sub_1DAAD0(v47, 1u);
          goto LABEL_81;
        }
      }
    }

    else
    {
      char v46 = 0LL;
    }

    char v48 = (os_log_t *)sub_138E8(26);
    char v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
      __int16 v208 = 1024;
      int v209 = 239;
      _os_log_impl(&dword_0, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d No IO Delegate to enable", (uint8_t *)&buf, 0x12u);
    }

    if (!v46) {
      return;
    }
LABEL_81:
    uint64_t v50 = (unint64_t *)&v46->__shared_owners_;
    do
      unint64_t v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }

    return;
  }

  if (a2 == 2)
  {
    uint64_t v25 = (os_log_t *)sub_138E8(26);
    unint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
      __int16 v208 = 1024;
      int v209 = 222;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabling kAlways Haptic Debug", (uint8_t *)&buf, 0x12u);
    }

    sub_32E438((uint64_t **)&v162, (uint64_t)a1);
    int v27 = v162;
    if (v162)
    {
      uint64_t v28 = operator new(0x30uLL);
      std::string::size_type v162 = 0LL;
      *uint64_t v28 = v27;
      sub_289538( v28 + 1,  *v27,  (OSStatus (__cdecl *)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))sub_90238,  v28);
      sub_90418(v28 + 2, (uint64_t)(a1 + 8));
      v28[5] = 0LL;
      if (*v28)
      {
        if (v28[1])
        {
          if (v28[4])
          {
            uint64_t v29 = (AudioObjectID ***)(a1 + 2);
            sub_331358((uint64_t *)a1 + 1, (uint64_t)v28);
            uint64_t v30 = *((void *)a1 + 1);
            if (!v30)
            {
              __int128 v140 = (os_log_t *)sub_138E8(13);
              int v141 = *v140;
              if (*v140 && os_log_type_enabled(*v140, OS_LOG_TYPE_ERROR))
              {
                buf.AudioObjectPropertySelector mSelector = 136315394;
                *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugManager.cpp";
                __int16 v208 = 1024;
                int v209 = 228;
                _os_log_impl( &dword_0,  v141,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
              }

              __int128 v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v142, "Postcondition failure.");
              goto LABEL_320;
            }

            if (*(void *)v30)
            {
              if (*(void *)(v30 + 8))
              {
                LODWORD(v218.__m_.__sig) = **(_DWORD **)v30;
                strcpy((char *)&buf, "niogbolg");
                BYTE1(buf.mElement) = 0;
                HIWORD(buf.mElement) = 0;
                unint64_t v31 = sub_36EF4((AudioObjectID *)&v218, &buf, 0, 0LL);
                int v33 = v31;
                if ((_DWORD)v31 || !v32)
                {
                  char v147 = __cxa_allocate_exception(0x10uLL);
                  *(void *)char v147 = &off_4865A0;
                  v147[2] = v33;
                }

                if (HIDWORD(v31) >= 2)
                {
                  uint64_t v148 = (os_log_t *)sub_138E8(13);
                  size_t v149 = *v148;
                  if (*v148 && os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR))
                  {
                    buf.AudioObjectPropertySelector mSelector = 136315394;
                    *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                    __int16 v208 = 1024;
                    int v209 = 139;
                    _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a non-BOOLean value",  (uint8_t *)&buf,  0x12u);
                  }

                  __int128 v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error((std::runtime_error *)v142, "The HAL returned a non-BOOLean value");
                  uint64_t v150 = (void (*)(void *))&std::runtime_error::~runtime_error;
LABEL_321:
                  __cxa_throw(v142, v151, v150);
                }

                if (HIDWORD(v31) == 1)
                {
                  size_t v152 = (os_log_t *)sub_138E8(13);
                  char v153 = *v152;
                  if (*v152 && os_log_type_enabled(*v152, OS_LOG_TYPE_ERROR))
                  {
                    buf.AudioObjectPropertySelector mSelector = 136315394;
                    *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                    __int16 v208 = 1024;
                    int v209 = 55;
                    _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
                  }
                }

                else
                {
                  if (*(void *)(v30 + 32))
                  {
                    uint64_t v34 = *(void *)(*(void *)(v30 + 24) + 16LL);
                    if (!v34)
                    {
                      os_log_t v52 = (os_log_t *)sub_138E8(13);
                      int v53 = *v52;
                      if (*v52)
                      {
                        if (os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
                        {
                          buf.AudioObjectPropertySelector mSelector = 136315394;
                          *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                          __int16 v208 = 1024;
                          int v209 = 59;
                          _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid haptic debug device pinter",  (uint8_t *)&buf,  0x12u);
                        }
                      }
                    }

                    AudioObjectID v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 120LL))(v34);
                    strcpy((char *)&buf, "crsstpni");
                    BYTE1(buf.mElement) = 0;
                    HIWORD(buf.mElement) = 0;
                    if (!AudioObjectHasProperty(v35, &buf))
                    {
LABEL_234:
                      uint64_t v113 = *v29;
                      if (**v29)
                      {
                        if (v113[1])
                        {
                          uint64_t v114 = sub_138E8(26);
                          if ((*(_BYTE *)(v114 + 8) & 1) != 0)
                          {
                            std::string::size_type v115 = *(os_log_s **)v114;
                            if (*(void *)v114)
                            {
                              if (os_log_type_enabled(*(os_log_t *)v114, OS_LOG_TYPE_DEBUG))
                              {
                                buf.AudioObjectPropertySelector mSelector = 136315394;
                                *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                                __int16 v208 = 1024;
                                int v209 = 79;
                                _os_log_impl( &dword_0,  v115,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting kAlways haptic debug instance",  (uint8_t *)&buf,  0x12u);
                              }
                            }
                          }

                          int v116 = sub_90950(**v113, COERCE_DOUBLE(1735159650LL));
                          int v117 = (os_log_t *)sub_138E8(16);
                          unint64_t v118 = *v117;
                          if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_INFO))
                          {
                            buf.AudioObjectPropertySelector mSelector = 136315650;
                            *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                            __int16 v208 = 1024;
                            int v209 = 82;
                            __int16 v210 = 1024;
                            *(_DWORD *)size_t v211 = v116;
                            _os_log_impl( &dword_0,  v118,  OS_LOG_TYPE_INFO,  "%25s:%-5d Buffer Frame Size: %u",  (uint8_t *)&buf,  0x18u);
                          }

                          std::string::size_type v119 = (AudioObjectID *)operator new(0x88uLL);
                          sub_3976A8((uint64_t)v119, v116);
                          int v120 = v113[5];
                          v113[5] = v119;
                          if (!v120
                            || ((*(void (**)(AudioObjectID *))(*(void *)v120 + 8LL))(v120),
                                (std::string::size_type v119 = v113[5]) != 0LL))
                          {
                            (*(void (**)(AudioObjectID *, AudioObjectID **))(*(void *)v119 + 16LL))( v119,  v113 + 2);
                            uint64_t v121 = sub_138E8(16);
                            if ((*(_BYTE *)(v121 + 8) & 1) != 0)
                            {
                              unint64_t v122 = *(os_log_s **)v121;
                              if (*(void *)v121)
                              {
                                if (os_log_type_enabled(*(os_log_t *)v121, OS_LOG_TYPE_DEBUG))
                                {
                                  buf.AudioObjectPropertySelector mSelector = 136315394;
                                  *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                                  __int16 v208 = 1024;
                                  int v209 = 89;
                                  _os_log_impl( &dword_0,  v122,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d enabling VAD capture for kAlways HapticDebug instance",  (uint8_t *)&buf,  0x12u);
                                }
                              }
                            }

                            uint64_t v123 = *((void *)v113[5] + 1);
                            if (v123) {
                              (*(void (**)(uint64_t))(*(void *)v123 + 24LL))(v123);
                            }
                            sub_31B568( *v113,  *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))v113[1]);
                            if (v162)
                            {
                              __int128 v124 = (void *)sub_31B2AC((uint64_t)v162);
                              operator delete(v124);
                            }

                            return;
                          }

                          uint64_t v160 = (os_log_t *)sub_138E8(13);
                          unint64_t v161 = *v160;
                          if (*v160 && os_log_type_enabled(*v160, OS_LOG_TYPE_ERROR))
                          {
                            buf.AudioObjectPropertySelector mSelector = 136315394;
                            *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                            __int16 v208 = 1024;
                            int v209 = 85;
                            _os_log_impl( &dword_0,  v161,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
                          }
                        }

                        else
                        {
                          std::string::size_type v158 = (os_log_t *)sub_138E8(13);
                          uint64_t v159 = *v158;
                          if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
                          {
                            buf.AudioObjectPropertySelector mSelector = 136315394;
                            *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                            __int16 v208 = 1024;
                            int v209 = 78;
                            _os_log_impl( &dword_0,  v159,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
                          }
                        }
                      }

                      else
                      {
                        uint64_t v156 = (os_log_t *)sub_138E8(13);
                        unint64_t v157 = *v156;
                        if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR))
                        {
                          buf.AudioObjectPropertySelector mSelector = 136315394;
                          *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                          __int16 v208 = 1024;
                          int v209 = 77;
                          _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
                        }
                      }

                      goto LABEL_319;
                    }

                    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v34 + 480LL))(&v163, v34);
                    if (v163 == v164)
                    {
                      uint64_t v54 = sub_138E8(16);
                      uint64_t v55 = sub_138E8(26);
                      char v56 = 0;
                      uint64_t v57 = 0LL;
                      *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
                      uint64_t v58 = *(void *)(v54 + 8);
                      while (1)
                      {
                        uint64_t v59 = *((int *)&buf.mSelector + v57);
                        char v60 = v56;
                        if (((v58 & v59) != 0) != ((*(void *)(v55 + 8) & v59) != 0)) {
                          break;
                        }
                        char v56 = 1;
                        uint64_t v57 = 1LL;
                        if ((v60 & 1) != 0) {
                          goto LABEL_142;
                        }
                      }

                      if ((v58 & v59) == 0) {
                        uint64_t v54 = v55;
                      }
LABEL_142:
                      uint64_t v84 = *(os_log_s **)v54;
                      if (v84 && os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
                      {
                        buf.AudioObjectPropertySelector mSelector = 136315394;
                        *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                        __int16 v208 = 1024;
                        int v209 = 65;
                        _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_INFO,  "%25s:%-5d No valid input data sources found for this device",  (uint8_t *)&buf,  0x12u);
                      }

                      goto LABEL_232;
                    }

                    uint64_t v36 = sub_138E8(16);
                    uint64_t v37 = sub_138E8(26);
                    char v38 = 0;
                    uint64_t v39 = 0LL;
                    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
                    uint64_t v40 = *(void *)(v36 + 8);
                    while (1)
                    {
                      uint64_t v41 = *((int *)&buf.mSelector + v39);
                      char v42 = v38;
                      if (((v40 & v41) != 0) != ((*(void *)(v37 + 8) & v41) != 0)) {
                        break;
                      }
                      char v38 = 1;
                      uint64_t v39 = 1LL;
                      if ((v42 & 1) != 0) {
                        goto LABEL_94;
                      }
                    }

                    if ((v40 & v41) == 0) {
                      uint64_t v36 = v37;
                    }
LABEL_94:
                    unint64_t v61 = *(os_log_s **)v36;
                    if (v61 && os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
                    {
                      sub_8F640((std::string *)&v218, (unsigned int *)v163, v164);
                      uint64_t v62 = v218.__m_.__opaque[15] >= 0 ? &v218 : (std::mutex *)v218.__m_.__sig;
                      buf.AudioObjectPropertySelector mSelector = 136315650;
                      *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                      __int16 v208 = 1024;
                      int v209 = 69;
                      __int16 v210 = 2080;
                      *(void *)size_t v211 = v62;
                      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting input data sources: %s",  (uint8_t *)&buf,  0x1Cu);
                      if (v218.__m_.__opaque[15] < 0) {
                        operator delete((void *)v218.__m_.__sig);
                      }
                    }

                    AudioObjectID v63 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 120LL))(v34);
                    uint64_t v64 = sub_138E8(26);
                    if ((*(_BYTE *)(v64 + 8) & 1) != 0)
                    {
                      char v65 = *(os_log_s **)v64;
                      if (*(void *)v64)
                      {
                        if (os_log_type_enabled(*(os_log_t *)v64, OS_LOG_TYPE_DEBUG))
                        {
                          sub_8F640((std::string *)&v218, (unsigned int *)v163, v164);
                          __int128 v66 = v218.__m_.__opaque[15] >= 0 ? &v218 : (std::mutex *)v218.__m_.__sig;
                          buf.AudioObjectPropertySelector mSelector = 136315650;
                          *(void *)&buf.AudioObjectPropertyScope mScope = "AlwaysOnHapticDebug.cpp";
                          __int16 v208 = 1024;
                          int v209 = 22;
                          __int16 v210 = 2080;
                          *(void *)size_t v211 = v66;
                          _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting input data sources: [%s]",  (uint8_t *)&buf,  0x1Cu);
                          if (v218.__m_.__opaque[15] < 0) {
                            operator delete((void *)v218.__m_.__sig);
                          }
                        }
                      }
                    }

                    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473737263LL;
                    inAddress.AudioObjectPropertyElement mElement = 0;
                    uint64_t v67 = sub_138E8(13);
                    if ((*(_BYTE *)(v67 + 8) & 1) != 0)
                    {
                      BOOL v68 = *(os_log_s **)v67;
                      if (*(void *)v67)
                      {
                        if (os_log_type_enabled(*(os_log_t *)v67, OS_LOG_TYPE_DEBUG))
                        {
                          v217.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
                          *(_DWORD *)v217.__cv_.__opaque = inAddress.mElement;
                          sub_613AC((uint64_t)&v218, (unsigned int *)&v217);
                          char v69 = v218.__m_.__opaque[15] >= 0 ? &v218 : (std::mutex *)v218.__m_.__sig;
                          buf.AudioObjectPropertySelector mSelector = 136315906;
                          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                          __int16 v208 = 1024;
                          int v209 = 166;
                          __int16 v210 = 2080;
                          *(void *)size_t v211 = v69;
                          *(_WORD *)&v211[8] = 1024;
                          *(_DWORD *)&v211[10] = v63;
                          _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                          if (v218.__m_.__opaque[15] < 0) {
                            operator delete((void *)v218.__m_.__sig);
                          }
                        }
                      }
                    }

                    AudioObjectPropertyAddress v204 = inAddress;
                    AudioObjectID v203 = v63;
                    int v205 = 0;
                    uint64_t v206 = 0LL;
                    sub_90508((uint64_t)&v218, (uint64_t)&v203);
                    if (*(_DWORD *)&v218.__m_.__opaque[16]) {
                      goto LABEL_118;
                    }
                    unint64_t v200 = 0LL;
                    uint64_t v201 = 0LL;
                    uint64_t v202 = 0LL;
                    sub_7A5B8( &v200,  (const void *)v218.__m_.__sig,  *(uint64_t *)v218.__m_.__opaque,  (*(void *)v218.__m_.__opaque - v218.__m_.__sig) >> 2);
                    uint64_t v197 = 0LL;
                    uint64_t v198 = 0LL;
                    uint64_t v199 = 0LL;
                    sub_7A5B8(&v197, v163, (uint64_t)v164, ((char *)v164 - (_BYTE *)v163) >> 2);
                    unint64_t v81 = v200;
                    uint64_t v82 = v197;
                    BOOL v83 = v201 - v200 == v198 - v197 && memcmp(v200, v197, v201 - v200) == 0;
                    if (v82)
                    {
                      uint64_t v198 = v82;
                      operator delete(v82);
                    }

                    if (v81)
                    {
                      uint64_t v201 = v81;
                      operator delete(v81);
                      if (v83)
                      {
LABEL_153:
                        uint64_t v85 = sub_138E8(13);
                        if ((*(_BYTE *)(v85 + 8) & 1) != 0)
                        {
                          size_t v76 = *(os_log_s **)v85;
                          if (!*(void *)v85) {
                            goto LABEL_158;
                          }
                          if (os_log_type_enabled(*(os_log_t *)v85, OS_LOG_TYPE_DEBUG))
                          {
                            buf.AudioObjectPropertySelector mSelector = 136315650;
                            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                            __int16 v208 = 1024;
                            int v209 = 191;
                            __int16 v210 = 1024;
                            *(_DWORD *)size_t v211 = v63;
                            _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
                          }
                        }

LABEL_157:
                        LOBYTE(v76) = 0;
LABEL_158:
                        if (v218.__m_.__sig) {
                          operator delete((void *)v218.__m_.__sig);
                        }
                        sub_90508((uint64_t)&v194, (uint64_t)&v203);
                        if (v196) {
                          goto LABEL_162;
                        }
                        uint64_t v191 = 0LL;
                        uint64_t v192 = 0LL;
                        uint64_t v193 = 0LL;
                        uint64_t v112 = v194;
                        sub_7A5B8(&v191, v194, v195, (v195 - (uint64_t)v194) >> 2);
                        char v188 = 0LL;
                        uint64_t v189 = 0LL;
                        uint64_t v190 = 0LL;
                        sub_7A5B8(&v188, v163, (uint64_t)v164, ((char *)v164 - (_BYTE *)v163) >> 2);
                        __int128 v125 = v191;
                        std::string v126 = v188;
                        BOOL v127 = v192 - v191 == v189 - v188 && memcmp(v191, v188, v192 - v191) == 0;
                        if (v126)
                        {
                          uint64_t v189 = v126;
                          operator delete(v126);
                        }

                        if (v125)
                        {
                          uint64_t v192 = v125;
                          operator delete(v125);
                          if (v127) {
                            goto LABEL_263;
                          }
                        }

                        else if (v127)
                        {
LABEL_263:
                          uint64_t v128 = sub_138E8(13);
                          if ((*(_BYTE *)(v128 + 8) & 1) != 0)
                          {
                            __int128 v129 = *(os_log_s **)v128;
                            if (*(void *)v128)
                            {
                              if (os_log_type_enabled(*(os_log_t *)v128, OS_LOG_TYPE_DEBUG))
                              {
                                buf.AudioObjectPropertySelector mSelector = 136315650;
                                *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                                __int16 v208 = 1024;
                                int v209 = 219;
                                __int16 v210 = 1024;
                                *(_DWORD *)size_t v211 = v63;
                                _os_log_impl( &dword_0,  v129,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
                              }
                            }
                          }

                          goto LABEL_230;
                        }

void sub_3310E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51,uint64_t a52,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a14)
  {
    uint64_t v55 = (void *)sub_31B2AC(a14);
    operator delete(v55);
  }

  _Unwind_Resume(a1);
}

void sub_331358(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (!v2) {
    return;
  }
  if (!*(void *)v2)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    unint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "AlwaysOnHapticDebug.cpp";
      __int16 v15 = 1024;
      int v16 = 125;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

void sub_33161C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    sub_7A0E8(exception_object);
  }

  _Unwind_Resume(exception_object);
}

void sub_331650(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 147;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 == 2)
  {
    v8[1] = 0LL;
    uint64_t v9 = a4;
    v8[0] = sub_3317B4;
    unint64_t v4 = atomic_load(&qword_4A09B8);
    if (v4 != -1LL)
    {
      *(void *)AudioObjectPropertyAddress buf = v8;
      *(void *)&_DWORD buf[8] = &v9;
      int v10 = buf;
      std::__call_once(&qword_4A09B8, &v10, (void (__cdecl *)(void *))sub_3317E8);
    }
  }

void sub_331798(_Unwind_Exception *a1)
{
}

void sub_3317B4(int *a1)
{
  uint64_t v2 = sub_5954C();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
  sub_32F234(a1, v3);
}

uint64_t sub_3317E8(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(uint64_t (**)(void *))v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = (void *)(*(void *)(*a1)[1] + (v3 >> 1));
  if ((v3 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v4 + v2);
  }
  return v2(v4);
}

void sub_33180C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_481B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_33181C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_481B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_33183C(uint64_t a1)
{
  uint64_t v2 = sub_32918();
  sub_395DD4(v2, a1 + 80);
  uint64_t v3 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(uint64_t)))(*(void *)v3 + 136LL))(v3, sub_32ECE0);
  sub_32C8C(*(void **)(a1 + 112));
  sub_32C8C(*(void **)(a1 + 88));
  sub_68314((void *)(a1 + 56));
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_331358((uint64_t *)(a1 + 32), 0LL);
}

void *sub_3318B0(void *a1, uint64_t a2)
{
  if (!a2)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    unint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "HapticDebugManager.cpp";
      __int16 v11 = 1024;
      int v12 = 170;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  __n128 result = operator new(0x18uLL);
  uint64_t v5 = a1[4];
  a1 += 4;
  result[1] = a1;
  result[2] = a2;
  void *result = v5;
  *(void *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void sub_3319D0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3319EC(uint64_t a1)
{
  *(void *)a1 = off_481B68;
  sub_32C8C(*(void **)(a1 + 544));
  return sub_F8158(a1);
}

void sub_331A20(uint64_t a1)
{
  *(void *)a1 = off_481B68;
  sub_32C8C(*(void **)(a1 + 544));
  uint64_t v2 = (void *)sub_F8158(a1);
  operator delete(v2);
}

uint64_t sub_331A58(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t result = 1LL;
  if (*a2 > 1986164322)
  {
    if (v3 == 1986164323) {
      return result;
    }
    if (v3 == 1986814563)
    {
      uint64_t v5 = *(void *)(a1 + 192);
      uint64_t v6 = 0x6F75747043567323LL;
      int v7 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 16LL))(v5, &v6);
    }

    return 0LL;
  }

  if (v3 == 1886614381) {
    return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 192) + 16LL))( *(void *)(a1 + 192),  &qword_4A0A50);
  }
  if (v3 != 1937204590) {
    return 0LL;
  }
  return result;
}

BOOL sub_331B1C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  return *a2 == 1886614381 || v2 == 1986814563 || v2 == 1986164323;
}

uint64_t sub_331B50(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v10 = (os_log_t *)sub_138E8(13);
    __int16 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *a2;
      int v19 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      int v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v23 = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 151;
      __int16 v26 = 2080;
      int v27 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0))
  {
    int v14 = (os_log_t *)sub_138E8(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *a2;
      int v19 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      if (v21 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v23 = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 152;
      __int16 v26 = 2080;
      int v27 = v16;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 2048;
      uint64_t v31 = a4;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v17 = &off_4865A0;
    void v17[2] = 561211770;
  }

  int v8 = *(_DWORD *)a2;
  uint64_t result = 4LL;
  if (*(int *)a2 > 1986164322)
  {
    if (v8 == 1986814563) {
      return result;
    }
    if (v8 == 1986164323) {
      return 0LL;
    }
    goto LABEL_9;
  }

  if (v8 != 1886614381 && v8 != 1937204590)
  {
LABEL_9:
    sub_F409C(a1, a2, a3, a4);
    return 0LL;
  }

  return result;
}

void sub_331E48(void *a1, int *a2, uint64_t a3, uint64_t a4, int *a5, float *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)a2;
      int v54 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v53);
      __int16 v26 = v56 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v58 = 1024;
      int v59 = 171;
      __int16 v60 = 2080;
      unint64_t v61 = (const char *)v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    __int16 v28 = (os_log_t *)sub_138E8(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)a2;
      int v54 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v53);
      __int16 v30 = v56 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v58 = 1024;
      int v59 = 172;
      __int16 v60 = 2080;
      unint64_t v61 = (const char *)v30;
      __int16 v62 = 1024;
      LODWORD(v63[0]) = a3;
      WORD2(v63[0]) = 2048;
      *(void *)((char *)v63 + 6) = a4;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v31 = &off_4865A0;
    CFStringRef v31[2] = 561211770;
  }

  if (!a6)
  {
    char v32 = (os_log_t *)sub_138E8(13);
    int v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)a2;
      int v54 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v53);
      uint64_t v34 = v56 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v58 = 1024;
      int v59 = 173;
      __int16 v60 = 2080;
      unint64_t v61 = "outData";
      __int16 v62 = 2080;
      v63[0] = v34;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
    }

    AudioObjectID v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectID v35 = &off_4865A0;
    v35[2] = 561211770;
  }

  int v13 = *a2;
  if (*a2 > 1986164322)
  {
    if (v13 != 1986164323)
    {
      if (v13 != 1986814563)
      {
LABEL_19:
        sub_F4320((uint64_t)a1, (uint64_t *)a2, a3, a4, v12, (uint64_t)a6);
        return;
      }

      int v14 = *a5;
      if (v14 != (*(unsigned int (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32LL))(a1, a2, a3, a4))
      {
        uint64_t v36 = (os_log_t *)sub_138E8(13);
        uint64_t v37 = *v36;
        if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
        {
          uint64_t v53 = *(void *)a2;
          int v54 = a2[2];
          sub_613AC((uint64_t)__p, (unsigned int *)&v53);
          int v38 = v56;
          uint64_t v39 = (void **)__p[0];
          int v40 = *a5;
          int v41 = (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32LL))(a1, a2, a3, a4);
          char v42 = __p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
          if (v38 < 0) {
            char v42 = v39;
          }
          __int16 v58 = 1024;
          int v59 = 188;
          __int16 v60 = 2080;
          unint64_t v61 = (const char *)v42;
          __int16 v62 = 1024;
          LODWORD(v63[0]) = v40;
          WORD2(v63[0]) = 1024;
          *(_DWORD *)((char *)v63 + 6) = v41;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v56 < 0) {
            operator delete(__p[0]);
          }
        }

        int v43 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v43 = &off_4865A0;
        v43[2] = 561211770;
      }

      uint64_t v15 = a1[24];
      strcpy(buf, "#sVCptuo");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unint64_t v16 = sub_5C2F8(v15);
      int v18 = v16;
      if ((_DWORD)v16 || !v17)
      {
        os_log_t v52 = __cxa_allocate_exception(0x10uLL);
        *(void *)os_log_t v52 = &off_4865A0;
        v52[2] = v18;
      }

      float v19 = fabsf(*((float *)&v16 + 1));
      float v20 = v19 * 0.00000011921;
      if (v19 < 1.0) {
        float v20 = 0.00000011921;
      }
      float v21 = 0.0;
      if (v19 > v20)
      {
        float v22 = log10f(*((float *)&v16 + 1));
        float v21 = sub_757A4((uint64_t)(a1 + 66), v22 * 20.0);
      }

      *a6 = v21;
    }
  }

  else
  {
    if (v13 != 1886614381)
    {
      if (v13 == 1937204590)
      {
        *(_DWORD *)a6 = sub_7531C();
        return;
      }

      goto LABEL_19;
    }

    int v23 = *a5;
    if (v23 != (*(unsigned int (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32LL))(a1, a2, a3, a4))
    {
      __int16 v44 = (os_log_t *)sub_138E8(13);
      int v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v53 = *(void *)a2;
        int v54 = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)&v53);
        int v46 = v56;
        uint64_t v47 = (void **)__p[0];
        int v48 = *a5;
        int v49 = (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32LL))(a1, a2, a3, a4);
        uint64_t v50 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        if (v46 < 0) {
          uint64_t v50 = v47;
        }
        __int16 v58 = 1024;
        int v59 = 208;
        __int16 v60 = 2080;
        unint64_t v61 = (const char *)v50;
        __int16 v62 = 1024;
        LODWORD(v63[0]) = v48;
        WORD2(v63[0]) = 1024;
        *(_DWORD *)((char *)v63 + 6) = v49;
        _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v56 < 0) {
          operator delete(__p[0]);
        }
      }

      unint64_t v51 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v51 = &off_4865A0;
      v51[2] = 561211770;
    }

    (*(void (**)(void, uint64_t *, uint64_t, uint64_t, int *, float *))(*(void *)a1[24] + 40LL))( a1[24],  &qword_4A0A50,  a3,  a4,  a5,  a6);
  }

void sub_332628( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_332650(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v37 = (os_log_t *)sub_138E8(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *(double **)a2;
      LODWORD(v65) = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v64);
      uint64_t v39 = v69 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 221;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v39;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (SHIBYTE(v69) < 0) {
        operator delete(__p);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    int v41 = (os_log_t *)sub_138E8(13);
    char v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *(double **)a2;
      LODWORD(v65) = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v64);
      int v43 = v69 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 222;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v43;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)&_BYTE buf[30] = a3;
      *(_WORD *)&_BYTE buf[34] = 2048;
      *(void *)&_BYTE buf[36] = a4;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (SHIBYTE(v69) < 0) {
        operator delete(__p);
      }
    }

    __int16 v44 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v44 = &off_4865A0;
    v44[2] = 561211770;
  }

  if (!a6)
  {
    int v45 = (os_log_t *)sub_138E8(13);
    int v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *(double **)a2;
      LODWORD(v65) = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v64);
      uint64_t v47 = v69 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 223;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "inData";
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&_BYTE buf[30] = v47;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (SHIBYTE(v69) < 0) {
        operator delete(__p);
      }
    }

    int v48 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v48 = &off_4865A0;
    v48[2] = 561211770;
  }

  int v13 = *a2;
  if (*a2 == 1886614381)
  {
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) != (_DWORD)a5)
    {
      char v56 = (os_log_t *)sub_138E8(13);
      uint64_t v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        uint64_t v64 = *(double **)a2;
        LODWORD(v65) = a2[2];
        sub_613AC((uint64_t)&__p, (unsigned int *)&v64);
        int v58 = SHIBYTE(v69);
        int v59 = (void **)__p;
        int v60 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
        p_p = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        if (v58 < 0) {
          p_p = v59;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 260;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = p_p;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)&_BYTE buf[30] = a5;
        *(_WORD *)&_BYTE buf[34] = 1024;
        *(_DWORD *)&_BYTE buf[36] = v60;
        _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (SHIBYTE(v69) < 0) {
          operator delete(__p);
        }
      }

      __int16 v62 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v62 = &off_4865A0;
      v62[2] = 561211770;
    }

    (*(void (**)(void, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 192) + 48LL))( *(void *)(a1 + 192),  &qword_4A0A50,  a3,  a4,  a5,  a6);
  }

  else if (v13 == 1986814563)
  {
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) != (_DWORD)a5)
    {
      int v49 = (os_log_t *)sub_138E8(13);
      uint64_t v50 = *v49;
      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
      {
        uint64_t v64 = *(double **)a2;
        LODWORD(v65) = a2[2];
        sub_613AC((uint64_t)&__p, (unsigned int *)&v64);
        int v51 = SHIBYTE(v69);
        os_log_t v52 = (void **)__p;
        int v53 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
        int v54 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        if (v51 < 0) {
          int v54 = v52;
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 250;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v54;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)&_BYTE buf[30] = a5;
        *(_WORD *)&_BYTE buf[34] = 1024;
        *(_DWORD *)&_BYTE buf[36] = v53;
        _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (SHIBYTE(v69) < 0) {
          operator delete(__p);
        }
      }

      uint64_t v55 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v55 = &off_4865A0;
      void v55[2] = 561211770;
    }

    sub_64424(a1 + 528, *(float *)a6);
    LODWORD(__p) = __exp10f(v30 / 20.0);
    uint64_t v31 = *(void *)(a1 + 192);
    strcpy((char *)buf, "#sVCptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    int v32 = sub_F2FAC(v31);
    if (v32)
    {
      int v33 = v32;
      uint64_t v34 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v34 = &off_4865A0;
      v34[2] = v33;
    }
  }

  else if (v13 == 1986164323)
  {
    AudioObjectPropertyAddress __p = 0LL;
    BOOL v68 = 0LL;
    uint64_t v69 = 0LL;
    sub_14A928(&__p, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
    int v14 = (char *)__p;
    if (v68 - (_BYTE *)__p == 68)
    {
      uint64_t v15 = 0LL;
      unint64_t v16 = 0LL;
      unint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v64 = 0LL;
      char v65 = 0LL;
      unint64_t v66 = 0LL;
      do
      {
        float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)&v14[4 * v18]);
        if ((unint64_t)v15 >= v17)
        {
          float64x2_t v63 = v19;
          uint64_t v20 = ((char *)v15 - (char *)v16) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
          {
            char v65 = v15;
            unint64_t v66 = v17;
            uint64_t v64 = v16;
            sub_7A87C();
          }

          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            unint64_t v22 = (unint64_t)sub_7BE90(v22);
          }
          else {
            uint64_t v23 = 0LL;
          }
          __int16 v24 = (float64x2_t *)(v22 + 16 * v20);
          float64x2_t *v24 = v63;
          int v25 = v24 + 1;
          if (v15 == (float64x2_t *)v16)
          {
            f64 = (double *)v24;
          }

          else
          {
            do
            {
              f64 = v24[-1].f64;
              v24[-1] = v15[-1];
              --v15;
              --v24;
            }

            while (v15 != (float64x2_t *)v16);
          }

          unint64_t v17 = v22 + 16 * v23;
          if (v16) {
            operator delete(v16);
          }
          unint64_t v16 = f64;
          uint64_t v15 = v25;
        }

        else
        {
          *v15++ = v19;
        }

        ++v18;
      }

      while (v18 != 16);
      char v65 = v15;
      unint64_t v66 = v17;
      uint64_t v64 = v16;
      uint64_t v27 = a1 + 544;
      sub_32C8C(*(void **)(a1 + 544));
      *(void *)(a1 + 536) = a1 + 544;
      *(void *)(a1 + 552) = 0LL;
      *(void *)(a1 + 544) = 0LL;
      sub_157B38((uint64_t)buf, &v64);
      *(_DWORD *)(a1 + 528) = *(_DWORD *)buf;
      sub_32C8C(*(void **)(a1 + 544));
      __int16 v28 = *(void **)&buf[16];
      *(void *)(a1 + 536) = *(void *)&buf[8];
      *(void *)(a1 + 544) = v28;
      uint64_t v29 = *(void *)&buf[24];
      *(void *)(a1 + 552) = *(void *)&buf[24];
      if (v29)
      {
        v28[2] = v27;
        *(void *)&_DWORD buf[8] = &buf[16];
        *(void *)&buf[16] = 0LL;
        *(void *)&_BYTE buf[24] = 0LL;
        __int16 v28 = 0LL;
      }

      else
      {
        *(void *)(a1 + 536) = v27;
      }

      *(_OWORD *)(a1 + 560) = *(_OWORD *)&buf[32];
      sub_32C8C(v28);
      if (v16)
      {
        char v65 = (float64x2_t *)v16;
        operator delete(v16);
        int v14 = (char *)__p;
      }
    }

    else
    {
      AudioObjectID v35 = (os_log_t *)sub_138E8(23);
      uint64_t v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 233;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Port_DiscreteSpeaker_Aspen::SetPropertyData() - invalid boot chime volume curve size.",  buf,  0x12u);
      }
    }

    if (v14)
    {
      BOOL v68 = v14;
      operator delete(v14);
    }
  }

  else
  {
    sub_F46A8(a1, (uint64_t *)a2, a3, a4, v12, a6);
  }

void sub_333008( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_333074(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v5 = 0x6F75747053526463LL;
  int v6 = 1;
  uint64_t v3 = *(void *)(a1 + 192);
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 16LL))(v3, &qword_49CC10);
  }
}

void sub_33310C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  *(void *)a2 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  *(_WORD *)(a2 + 8) = 257;
  uint64_t v7 = *(void *)(a1 + 192);
  int v8 = 1;
  unsigned __int32 v29 = vdup_n_s32(0x6F757470u).u32[0];
  while (1)
  {
    uint64_t v31 = 0x6F75747053526463LL;
    int v32 = v8;
    LODWORD(value) = 1397908579;
    *(void *)((char *)&value + 4) = __PAIR64__(v8, v29);
    unint64_t v9 = sub_5C2F8(v7);
    if ((_DWORD)v9 || !v10)
    {
      int v25 = v9;
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v25;
    }

    unint64_t v11 = HIDWORD(v9);
    if ((unint64_t)v5 >= v6)
    {
      uint64_t v13 = (v5 - v4) >> 2;
      unint64_t v14 = v13 + 1;
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)sub_7A890(v15);
      }
      else {
        uint64_t v16 = 0LL;
      }
      unint64_t v17 = (char *)(v15 + 4 * v13);
      *(_DWORD *)unint64_t v17 = v11;
      uint64_t v12 = v17 + 4;
      while (v5 != v4)
      {
        int v18 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v17 - 1) = v18;
        v17 -= 4;
      }

      unint64_t v6 = v15 + 4 * v16;
      if (v4) {
        operator delete(v4);
      }
      unint64_t v4 = v17;
    }

    else
    {
      *(_DWORD *)uint64_t v5 = HIDWORD(v9);
      uint64_t v12 = v5 + 4;
    }

    ++v8;
    uint64_t v5 = v12;
    if (v8 == 5) {
      goto LABEL_25;
    }
  }

  uint64_t v12 = v5;
LABEL_25:
  uint64_t v19 = v12 - v4;
  if (v12 != v4)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, ((unint64_t)v19 >> 2), &kCFTypeArrayCallBacks);
    uint64_t v21 = 0LL;
    unint64_t v22 = v19 >> 2;
    *(void *)&__int128 value = Mutable;
    WORD4(value) = 257;
    unsigned int v23 = 1;
    do
    {
      sub_1378C((uint64_t)&value, *(_DWORD *)&v4[4 * v21]);
      uint64_t v21 = v23;
    }

    while (v22 > v23++);
    if (*(_BYTE *)(v28 + 9) && (void)value && *(void *)v28) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)v28, @"impedances", (const void *)value);
    }
    sub_13818((uint64_t)&value);
  }

  sub_2C74C4(&value, *(void *)(v27 + 192));
  if (sub_2C7AE8(*((const __CFData **)&value + 1)) && *(_BYTE *)(v28 + 9) && *((void *)&value + 1) && *(void *)v28) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)v28, @"speaker calibration", *((const void **)&value + 1));
  }
  sub_39FD8(&value);
  if (v4) {
    operator delete(v4);
  }
}