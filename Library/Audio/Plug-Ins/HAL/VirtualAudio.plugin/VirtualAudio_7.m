void sub_3333C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;
  va_start(va, a5);
  sub_13818((uint64_t)va);
  if (v5) {
    operator delete(v5);
  }
  sub_13850(a3);
  _Unwind_Resume(a1);
}

uint64_t sub_33341C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4A0AE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_4A0AE0))
  {
    qword_4A0AD8 = (uint64_t)sub_3336DC();
    __cxa_guard_release(&qword_4A0AE0);
  }

  v1 = (void *)qword_4A0AD8;
  if (*(void *)(qword_4A0AD8 + 24) || *(void *)qword_4A0AD8 == *(void *)(qword_4A0AD8 + 8))
  {
    char v2 = 1;
  }

  else
  {
    v3 = (os_log_t *)sub_138E8(20);
    v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      v13 = "DeviceSettingsFactory.cpp";
      __int16 v14 = 1024;
      int v15 = 230;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The default sub-port for built-in microphone has not been specified",  (uint8_t *)&v12,  0x12u);
    }

    char v2 = 0;
  }

  if (!v1[7] && v1[4] != v1[5])
  {
    v5 = (os_log_t *)sub_138E8(20);
    v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      v13 = "DeviceSettingsFactory.cpp";
      __int16 v14 = 1024;
      int v15 = 236;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The default sub-port for built-in microphone in VP chat use cases has not been specified",  (uint8_t *)&v12,  0x12u);
    }

    char v2 = 0;
  }

  if (v1[4] != v1[5] && *v1 == v1[1])
  {
    v10 = (os_log_t *)sub_138E8(20);
    v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      v13 = "DeviceSettingsFactory.cpp";
      __int16 v14 = 1024;
      int v15 = 242;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Built-in mic sub-port for non-VP chat modes have not been specified",  (uint8_t *)&v12,  0x12u);
    }
  }

  else if ((v2 & 1) != 0)
  {
    return qword_4A0AD8;
  }

  v7 = (os_log_t *)sub_138E8(20);
  v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
  {
    int v12 = 136315394;
    v13 = "DeviceSettings_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 296;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Invariant failure for Transducer Database",  (uint8_t *)&v12,  0x12u);
  }

  return qword_4A0AD8;
}

void sub_3336BC(_Unwind_Exception *a1)
{
}

uint64_t *sub_3336DC()
{
  int v0 = sub_753A8();
  if (v0 <= 180)
  {
    if ((v0 - 2) >= 4
      && ((v0 - 48) > 0x22 || ((1LL << (v0 - 48)) & 0x480100001LL) == 0))
    {
      goto LABEL_41;
    }

    goto LABEL_9;
  }

  char v1 = v0 + 75;
  if ((v0 - 181) <= 0x10)
  {
    if (((1 << v1) & 0x51) != 0)
    {
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_4A0D60);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_4A0D60))
      {
        LODWORD(__p[0]) = 1768778083;
        sub_852D0(&v153, (__int32 *)__p, 1LL);
        sub_8FF00((uint64_t)&qword_4A0CA8, (uint64_t)&v153);
        if (v153)
        {
          v154 = v153;
          operator delete(v153);
        }

        __cxa_guard_release(&qword_4A0D60);
      }

      if (qword_4A0CA8 == qword_4A0CB0)
      {
        LODWORD(v175) = 1768778083;
        sub_852D0(&__src, (__int32 *)&v175, 1LL);
        uint64_t v180 = 0LL;
        v181 = 0LL;
        v182 = 0LL;
        sub_85350((uint64_t)__p, 1768778083, (uint64_t)&__src, 1869442665, -1, (uint64_t)&v180);
        if (__src)
        {
          v187 = __src;
          operator delete(__src);
        }

        unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_4A0DA0);
        if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_4A0DA0))
        {
          sub_853EC((uint64_t)&__src, (uint64_t)__p);
          sub_85484(&v180, (uint64_t)&__src, 1uLL);
          sub_85514((uint64_t)&unk_4A0D68, 1835216945, 1835229803, 1970303090, 1650549611, &v180);
          *(void *)&__int128 v175 = &v180;
          sub_855A4((void ***)&v175);
          sub_85614(&__src);
          __cxa_guard_release(&qword_4A0DA0);
        }

        uint64_t v6 = qword_4A0CB0;
        if (qword_4A0CB0 >= (unint64_t)qword_4A0CB8)
        {
          uint64_t v37 = (qword_4A0CB0 - qword_4A0CA8) >> 3;
          unint64_t v38 = (qword_4A0CB8 - qword_4A0CA8) >> 2;
          if (v38 <= v37 + 1) {
            unint64_t v38 = v37 + 1;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            unint64_t v39 = (unint64_t)sub_7DC90(v39);
          }
          else {
            uint64_t v40 = 0LL;
          }
          v53 = (void *)(v39 + 8 * v37);
          uint64_t v54 = v39 + 8 * v40;
          void *v53 = &unk_4A0D68;
          uint64_t v7 = (uint64_t)(v53 + 1);
          uint64_t v56 = qword_4A0CA8;
          v55 = (char *)qword_4A0CB0;
          if (qword_4A0CB0 != qword_4A0CA8)
          {
            do
            {
              uint64_t v57 = *((void *)v55 - 1);
              v55 -= 8;
              *--v53 = v57;
            }

            while (v55 != (char *)v56);
            v55 = (char *)qword_4A0CA8;
          }

          qword_4A0CA8 = (uint64_t)v53;
          qword_4A0CB0 = v7;
          qword_4A0CB8 = v54;
          if (v55) {
            operator delete(v55);
          }
        }

        else
        {
          *(void *)qword_4A0CB0 = &unk_4A0D68;
          uint64_t v7 = v6 + 8;
        }

        qword_4A0CB0 = v7;
        qword_4A0CC0 = (uint64_t)&unk_4A0D68;
        sub_8CF90(algn_4A0CC8, (char *)qword_4A0CA8, v7, (v7 - qword_4A0CA8) >> 3);
        qword_4A0CE0 = qword_4A0CC0;
        if (v168)
        {
          v169 = v168;
          operator delete(v168);
        }

        if (__p[1])
        {
          __p[2] = __p[1];
          operator delete(__p[1]);
        }
      }

      return &qword_4A0CA8;
    }

    if (((1 << v1) & 0x14000) != 0)
    {
LABEL_9:
      unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_4A0BA0);
      if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_4A0BA0))
      {
        memset(__p, 0, 24);
        sub_8FF00((uint64_t)&unk_4A0AE8, (uint64_t)__p);
        __cxa_guard_release(&qword_4A0BA0);
      }

      return (uint64_t *)&unk_4A0AE8;
    }

    if (v0 == 194)
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_4A0E60);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_4A0E60))
      {
        __p[0] = (void *)0x696D6963736D6963LL;
        sub_852D0(&v163, (__int32 *)__p, 2LL);
        sub_8FF00((uint64_t)&qword_4A0DA8, (uint64_t)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }

        __cxa_guard_release(&qword_4A0E60);
      }

      if (qword_4A0DA8 == qword_4A0DB0)
      {
        v160 = operator new(0x18uLL);
        v162 = (char *)v160 + 24;
        qmemcpy(v160, "ivpvovpvcgpvcvmrgcrvgsmv", 24);
        v161 = (char *)v160 + 24;
        v9 = (char *)operator new(0xCuLL);
        v159[1] = v9 + 12;
        v159[2] = v9 + 12;
        qmemcpy(v9, " wargcrvgsmv", 12);
        v159[0] = v9;
        LODWORD(v153) = 1768778083;
        sub_852D0(__p, (__int32 *)&v153, 1LL);
        sub_85350((uint64_t)&__src, 1953460273, (uint64_t)__p, 1869442665, -1, (uint64_t)&v160);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        LODWORD(v180) = 1936550243;
        sub_852D0(__p, (__int32 *)&v180, 1LL);
        sub_85350((uint64_t)&v153, 1650551601, (uint64_t)__p, 1869442665, -1, (uint64_t)&v160);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        sub_85350((uint64_t)&v180, 1650811245, (uint64_t)&unk_4A0E00, 1935827812, 1, (uint64_t)v159);
        sub_85350((uint64_t)&v175, 1650811245, (uint64_t)&unk_4A0E00, 1668441188, 0, (uint64_t)v159);
        v10 = operator new(8uLL);
        void *v10 = 0x766D736776726367LL;
        __p[1] = v10 + 1;
        __p[2] = v10 + 1;
        __p[0] = v10;
        sub_85350((uint64_t)&v148, 1634495520, (uint64_t)&unk_4A0E00, 1852796517, -1, (uint64_t)__p);
        operator delete(v10);
        LODWORD(__p[0]) = (_DWORD)v153;
        memset(&__p[1], 0, 24);
        sub_7A5B8(&__p[1], v154, (uint64_t)v155, (v155 - (_BYTE *)v154) >> 2);
        __p[4] = v156;
        v168 = 0LL;
        v169 = 0LL;
        uint64_t v170 = 0LL;
        sub_7A5B8(&v168, v157, (uint64_t)v158, (v158 - (_BYTE *)v157) >> 2);
        int v171 = v180;
        v173[0] = 0LL;
        v173[1] = 0LL;
        uint64_t v172 = 0LL;
        sub_7A5B8(&v172, v181, (uint64_t)v182, (v182 - (_BYTE *)v181) >> 2);
        v173[2] = v183;
        memset(v174, 0, sizeof(v174));
        sub_7A5B8(v174, v184, (uint64_t)v185, (v185 - (_BYTE *)v184) >> 2);
        v145 = 0LL;
        v146 = 0LL;
        v147 = 0LL;
        v143 = (void **)&v145;
        char v144 = 0;
        v145 = (char *)operator new(0x80uLL);
        v146 = v145;
        v147 = v145 + 128;
        uint64_t v11 = 0LL;
        v146 = (char *)sub_85654((uint64_t)__p, (uint64_t)&v175, (uint64_t)v145);
        do
        {
          int v12 = &__p[v11];
          v13 = (void *)v174[v11];
          if (v13)
          {
            v12[14] = v13;
            operator delete(v13);
          }

          __int16 v14 = v12[9];
          if (v14)
          {
            v173[v11] = v14;
            operator delete(v14);
          }

          v11 -= 8LL;
        }

        while (v11 != -16);
        unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_4A0EA0);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_4A0EA0))
        {
          sub_853EC((uint64_t)__p, (uint64_t)&__src);
          sub_85484(&v143, (uint64_t)__p, 1uLL);
          sub_85514((uint64_t)&unk_4A0E68, 1835216945, 1835234416, 1970303090, 1953460256, (uint64_t *)&v143);
          v166 = &v143;
          sub_855A4((void ***)&v166);
          sub_85614(__p);
          __cxa_guard_release(&qword_4A0EA0);
        }

        unsigned __int8 v16 = atomic_load((unsigned __int8 *)&qword_4A0EE0);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_4A0EE0))
        {
          sub_85514((uint64_t)&unk_4A0EA8, 1835216946, 1835229803, 1970303090, 1650549611, (uint64_t *)&v145);
          __cxa_guard_release(&qword_4A0EE0);
        }

        unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_4A0F20);
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_4A0F20))
        {
          sub_853EC((uint64_t)__p, (uint64_t)&v175);
          sub_85484(&v143, (uint64_t)__p, 1uLL);
          sub_85514((uint64_t)&unk_4A0EE8, 1835216947, 1835230834, 1970303090, 1718775412, (uint64_t *)&v143);
          v166 = &v143;
          sub_855A4((void ***)&v166);
          sub_85614(__p);
          __cxa_guard_release(&qword_4A0F20);
        }

        unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_4A0F60);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_4A0F60))
        {
          sub_853EC((uint64_t)__p, (uint64_t)&v148);
          sub_85484(&v143, (uint64_t)__p, 1uLL);
          sub_856E4((uint64_t)&unk_4A0F28, 1634495520, 1835229548, 1, (uint64_t *)&v143);
          v166 = &v143;
          sub_855A4((void ***)&v166);
          sub_85614(__p);
          __cxa_guard_release(&qword_4A0F60);
        }

        uint64_t v19 = qword_4A0DB0;
        if (qword_4A0DB0 >= (unint64_t)qword_4A0DB8)
        {
          uint64_t v62 = (qword_4A0DB0 - qword_4A0DA8) >> 3;
          unint64_t v63 = (qword_4A0DB8 - qword_4A0DA8) >> 2;
          if (v63 <= v62 + 1) {
            unint64_t v63 = v62 + 1;
          }
          else {
            unint64_t v64 = v63;
          }
          if (v64) {
            unint64_t v64 = (unint64_t)sub_7DC90(v64);
          }
          else {
            uint64_t v65 = 0LL;
          }
          v71 = (void *)(v64 + 8 * v62);
          uint64_t v72 = v64 + 8 * v65;
          void *v71 = &unk_4A0E68;
          v20 = v71 + 1;
          uint64_t v74 = qword_4A0DA8;
          v73 = (char *)qword_4A0DB0;
          if (qword_4A0DB0 != qword_4A0DA8)
          {
            do
            {
              uint64_t v75 = *((void *)v73 - 1);
              v73 -= 8;
              *--v71 = v75;
            }

            while (v73 != (char *)v74);
            v73 = (char *)qword_4A0DA8;
          }

          qword_4A0DA8 = (uint64_t)v71;
          qword_4A0DB0 = (uint64_t)v20;
          qword_4A0DB8 = v72;
          if (v73) {
            operator delete(v73);
          }
        }

        else
        {
          *(void *)qword_4A0DB0 = &unk_4A0E68;
          v20 = (void *)(v19 + 8);
        }

        qword_4A0DB0 = (uint64_t)v20;
        if ((unint64_t)v20 >= qword_4A0DB8)
        {
          uint64_t v77 = ((uint64_t)v20 - qword_4A0DA8) >> 3;
          unint64_t v78 = (qword_4A0DB8 - qword_4A0DA8) >> 2;
          if (v78 <= v77 + 1) {
            unint64_t v78 = v77 + 1;
          }
          else {
            unint64_t v79 = v78;
          }
          if (v79) {
            unint64_t v79 = (unint64_t)sub_7DC90(v79);
          }
          else {
            uint64_t v80 = 0LL;
          }
          v81 = (void *)(v79 + 8 * v77);
          uint64_t v82 = v79 + 8 * v80;
          void *v81 = &unk_4A0EA8;
          v76 = v81 + 1;
          uint64_t v84 = qword_4A0DA8;
          v83 = (char *)qword_4A0DB0;
          if (qword_4A0DB0 != qword_4A0DA8)
          {
            do
            {
              uint64_t v85 = *((void *)v83 - 1);
              v83 -= 8;
              *--v81 = v85;
            }

            while (v83 != (char *)v84);
            v83 = (char *)qword_4A0DA8;
          }

          qword_4A0DA8 = (uint64_t)v81;
          qword_4A0DB0 = (uint64_t)v76;
          qword_4A0DB8 = v82;
          if (v83) {
            operator delete(v83);
          }
        }

        else
        {
          void *v20 = &unk_4A0EA8;
          v76 = v20 + 1;
        }

        qword_4A0DB0 = (uint64_t)v76;
        if ((unint64_t)v76 >= qword_4A0DB8)
        {
          uint64_t v87 = ((uint64_t)v76 - qword_4A0DA8) >> 3;
          unint64_t v88 = (qword_4A0DB8 - qword_4A0DA8) >> 2;
          if (v88 <= v87 + 1) {
            unint64_t v88 = v87 + 1;
          }
          else {
            unint64_t v89 = v88;
          }
          if (v89) {
            unint64_t v89 = (unint64_t)sub_7DC90(v89);
          }
          else {
            uint64_t v90 = 0LL;
          }
          v91 = (void *)(v89 + 8 * v87);
          uint64_t v92 = v89 + 8 * v90;
          void *v91 = &unk_4A0EE8;
          v86 = v91 + 1;
          uint64_t v94 = qword_4A0DA8;
          v93 = (char *)qword_4A0DB0;
          if (qword_4A0DB0 != qword_4A0DA8)
          {
            do
            {
              uint64_t v95 = *((void *)v93 - 1);
              v93 -= 8;
              *--v91 = v95;
            }

            while (v93 != (char *)v94);
            v93 = (char *)qword_4A0DA8;
          }

          qword_4A0DA8 = (uint64_t)v91;
          qword_4A0DB0 = (uint64_t)v86;
          qword_4A0DB8 = v92;
          if (v93) {
            operator delete(v93);
          }
        }

        else
        {
          void *v76 = &unk_4A0EE8;
          v86 = v76 + 1;
        }

        qword_4A0DB0 = (uint64_t)v86;
        if ((unint64_t)v86 >= qword_4A0DB8)
        {
          uint64_t v97 = ((uint64_t)v86 - qword_4A0DA8) >> 3;
          unint64_t v98 = (qword_4A0DB8 - qword_4A0DA8) >> 2;
          if (v98 <= v97 + 1) {
            unint64_t v98 = v97 + 1;
          }
          else {
            unint64_t v99 = v98;
          }
          if (v99) {
            unint64_t v99 = (unint64_t)sub_7DC90(v99);
          }
          else {
            uint64_t v100 = 0LL;
          }
          v101 = (void *)(v99 + 8 * v97);
          uint64_t v102 = v99 + 8 * v100;
          void *v101 = &unk_4A0F28;
          uint64_t v96 = (uint64_t)(v101 + 1);
          uint64_t v104 = qword_4A0DA8;
          v103 = (char *)qword_4A0DB0;
          if (qword_4A0DB0 != qword_4A0DA8)
          {
            do
            {
              uint64_t v105 = *((void *)v103 - 1);
              v103 -= 8;
              *--v101 = v105;
            }

            while (v103 != (char *)v104);
            v103 = (char *)qword_4A0DA8;
          }

          qword_4A0DA8 = (uint64_t)v101;
          qword_4A0DB0 = v96;
          qword_4A0DB8 = v102;
          if (v103) {
            operator delete(v103);
          }
        }

        else
        {
          void *v86 = &unk_4A0F28;
          uint64_t v96 = (uint64_t)(v86 + 1);
        }

        qword_4A0DB0 = v96;
        qword_4A0DC0 = (uint64_t)&unk_4A0E68;
        __p[0] = &v145;
        sub_855A4((void ***)__p);
        if (v151)
        {
          v152 = v151;
          operator delete(v151);
        }

        if (v149)
        {
          v150 = v149;
          operator delete(v149);
        }

        if (v178)
        {
          v179 = v178;
          operator delete(v178);
        }

        if (*((void *)&v175 + 1))
        {
          v176 = (void *)*((void *)&v175 + 1);
          operator delete(*((void **)&v175 + 1));
        }

        if (v184)
        {
          v185 = v184;
          operator delete(v184);
        }

        if (v181)
        {
          v182 = v181;
          operator delete(v181);
        }

        if (v157)
        {
          v158 = v157;
          operator delete(v157);
        }

        if (v154)
        {
          v155 = v154;
          operator delete(v154);
        }

        if (v189)
        {
          v190 = v189;
          operator delete(v189);
        }

        if (v187)
        {
          v188 = v187;
          operator delete(v187);
        }

        if (v159[0]) {
          operator delete(v159[0]);
        }
        if (v160) {
          operator delete(v160);
        }
        if (qword_4A0DC8 == qword_4A0DD0)
        {
          v106 = operator new(8uLL);
          void *v106 = 0x726D76637670766FLL;
          __src = v106;
          v188 = v106 + 1;
          v187 = v106 + 1;
          sub_85350((uint64_t)__p, 1650811245, (uint64_t)&unk_4A0E00, 1935827812, 1, (uint64_t)&__src);
          operator delete(v106);
          v107 = operator new(8uLL);
          void *v107 = 0x726D76637670766FLL;
          v154 = v107 + 1;
          v155 = v107 + 1;
          v153 = v107;
          sub_85350((uint64_t)&__src, 1650811245, (uint64_t)&unk_4A0E00, 1668441188, 0, (uint64_t)&v153);
          operator delete(v107);
          v108 = (void **)operator new(8uLL);
          *v108 = (void *)0x726D76637670766FLL;
          v181 = v108 + 1;
          v182 = v108 + 1;
          uint64_t v180 = (uint64_t)v108;
          sub_85350((uint64_t)&v153, 1634495520, (uint64_t)&unk_4A0E00, 1852796517, -1, (uint64_t)&v180);
          operator delete(v108);
          unsigned __int8 v109 = atomic_load((unsigned __int8 *)&qword_4A0FA0);
          if ((v109 & 1) == 0 && __cxa_guard_acquire(&qword_4A0FA0))
          {
            sub_853EC((uint64_t)&v180, (uint64_t)__p);
            sub_85484(&v175, (uint64_t)&v180, 1uLL);
            sub_85514((uint64_t)&unk_4A0F68, 1835216946, 1835229803, 1970303090, 1650549611, (uint64_t *)&v175);
            v148 = &v175;
            sub_855A4((void ***)&v148);
            sub_85614(&v180);
            __cxa_guard_release(&qword_4A0FA0);
          }

          unsigned __int8 v110 = atomic_load((unsigned __int8 *)&qword_4A0FE0);
          if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_4A0FE0))
          {
            sub_853EC((uint64_t)&v180, (uint64_t)&__src);
            sub_85484(&v175, (uint64_t)&v180, 1uLL);
            sub_85514((uint64_t)&unk_4A0FA8, 1835216947, 1835230834, 1970303090, 1718775412, (uint64_t *)&v175);
            v148 = &v175;
            sub_855A4((void ***)&v148);
            sub_85614(&v180);
            __cxa_guard_release(&qword_4A0FE0);
          }

          unsigned __int8 v111 = atomic_load((unsigned __int8 *)&qword_4A1020);
          if ((v111 & 1) == 0 && __cxa_guard_acquire(&qword_4A1020))
          {
            sub_853EC((uint64_t)&v180, (uint64_t)&v153);
            sub_85484(&v175, (uint64_t)&v180, 1uLL);
            sub_856E4((uint64_t)&unk_4A0FE8, 1634495520, 1835229548, 2, (uint64_t *)&v175);
            v148 = &v175;
            sub_855A4((void ***)&v148);
            sub_85614(&v180);
            __cxa_guard_release(&qword_4A1020);
          }

          uint64_t v112 = qword_4A0DD0;
          if (qword_4A0DD0 >= (unint64_t)qword_4A0DD8)
          {
            uint64_t v114 = (qword_4A0DD0 - qword_4A0DC8) >> 3;
            unint64_t v115 = (qword_4A0DD8 - qword_4A0DC8) >> 2;
            if (v115 <= v114 + 1) {
              unint64_t v115 = v114 + 1;
            }
            else {
              unint64_t v116 = v115;
            }
            if (v116) {
              unint64_t v116 = (unint64_t)sub_7DC90(v116);
            }
            else {
              uint64_t v117 = 0LL;
            }
            v118 = (void *)(v116 + 8 * v114);
            uint64_t v119 = v116 + 8 * v117;
            void *v118 = &unk_4A0F68;
            v113 = v118 + 1;
            uint64_t v121 = qword_4A0DC8;
            v120 = (char *)qword_4A0DD0;
            if (qword_4A0DD0 != qword_4A0DC8)
            {
              do
              {
                uint64_t v122 = *((void *)v120 - 1);
                v120 -= 8;
                *--v118 = v122;
              }

              while (v120 != (char *)v121);
              v120 = (char *)qword_4A0DC8;
            }

            qword_4A0DC8 = (uint64_t)v118;
            qword_4A0DD0 = (uint64_t)v113;
            qword_4A0DD8 = v119;
            if (v120) {
              operator delete(v120);
            }
          }

          else
          {
            *(void *)qword_4A0DD0 = &unk_4A0F68;
            v113 = (void *)(v112 + 8);
          }

          qword_4A0DD0 = (uint64_t)v113;
          if ((unint64_t)v113 >= qword_4A0DD8)
          {
            uint64_t v124 = ((uint64_t)v113 - qword_4A0DC8) >> 3;
            unint64_t v125 = (qword_4A0DD8 - qword_4A0DC8) >> 2;
            if (v125 <= v124 + 1) {
              unint64_t v125 = v124 + 1;
            }
            else {
              unint64_t v126 = v125;
            }
            if (v126) {
              unint64_t v126 = (unint64_t)sub_7DC90(v126);
            }
            else {
              uint64_t v127 = 0LL;
            }
            v128 = (void *)(v126 + 8 * v124);
            uint64_t v129 = v126 + 8 * v127;
            void *v128 = &unk_4A0FA8;
            v123 = v128 + 1;
            uint64_t v131 = qword_4A0DC8;
            v130 = (char *)qword_4A0DD0;
            if (qword_4A0DD0 != qword_4A0DC8)
            {
              do
              {
                uint64_t v132 = *((void *)v130 - 1);
                v130 -= 8;
                *--v128 = v132;
              }

              while (v130 != (char *)v131);
              v130 = (char *)qword_4A0DC8;
            }

            qword_4A0DC8 = (uint64_t)v128;
            qword_4A0DD0 = (uint64_t)v123;
            qword_4A0DD8 = v129;
            if (v130) {
              operator delete(v130);
            }
          }

          else
          {
            void *v113 = &unk_4A0FA8;
            v123 = v113 + 1;
          }

          qword_4A0DD0 = (uint64_t)v123;
          if ((unint64_t)v123 >= qword_4A0DD8)
          {
            uint64_t v134 = ((uint64_t)v123 - qword_4A0DC8) >> 3;
            unint64_t v135 = (qword_4A0DD8 - qword_4A0DC8) >> 2;
            if (v135 <= v134 + 1) {
              unint64_t v135 = v134 + 1;
            }
            else {
              unint64_t v136 = v135;
            }
            if (v136) {
              unint64_t v136 = (unint64_t)sub_7DC90(v136);
            }
            else {
              uint64_t v137 = 0LL;
            }
            v138 = (void *)(v136 + 8 * v134);
            uint64_t v139 = v136 + 8 * v137;
            void *v138 = &unk_4A0FE8;
            uint64_t v133 = (uint64_t)(v138 + 1);
            uint64_t v141 = qword_4A0DC8;
            v140 = (char *)qword_4A0DD0;
            if (qword_4A0DD0 != qword_4A0DC8)
            {
              do
              {
                uint64_t v142 = *((void *)v140 - 1);
                v140 -= 8;
                *--v138 = v142;
              }

              while (v140 != (char *)v141);
              v140 = (char *)qword_4A0DC8;
            }

            qword_4A0DC8 = (uint64_t)v138;
            qword_4A0DD0 = v133;
            qword_4A0DD8 = v139;
            if (v140) {
              operator delete(v140);
            }
          }

          else
          {
            void *v123 = &unk_4A0FE8;
            uint64_t v133 = (uint64_t)(v123 + 1);
          }

          qword_4A0DD0 = v133;
          qword_4A0DE0 = (uint64_t)&unk_4A0FA8;
          if (v157)
          {
            v158 = v157;
            operator delete(v157);
          }

          if (v154)
          {
            v155 = v154;
            operator delete(v154);
          }

          if (v189)
          {
            v190 = v189;
            operator delete(v189);
          }

          if (v187)
          {
            v188 = v187;
            operator delete(v187);
          }

          if (v168)
          {
            v169 = v168;
            operator delete(v168);
          }

          if (__p[1])
          {
            __p[2] = __p[1];
            operator delete(__p[1]);
          }
        }
      }

      return &qword_4A0DA8;
    }
  }

  if ((v0 - 12002) >= 2)
  {
LABEL_41:
    v24 = (os_log_t *)sub_138E8(20);
    v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "DeviceSettings_Aspen.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 249;
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = sub_753A8();
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown product type %u, returning Unknown Transducer Database",  (uint8_t *)__p,  0x18u);
    }

    unsigned __int8 v26 = atomic_load((unsigned __int8 *)&qword_4A0C60);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_4A0C60))
    {
      LODWORD(__p[0]) = 1768778083;
      sub_852D0(&v153, (__int32 *)__p, 1LL);
      sub_8FF00((uint64_t)&qword_4A0BA8, (uint64_t)&v153);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }

      __cxa_guard_release(&qword_4A0C60);
    }

    if (qword_4A0BA8 == qword_4A0BB0)
    {
      LODWORD(v175) = 1768778083;
      sub_852D0(&__src, (__int32 *)&v175, 1LL);
      uint64_t v180 = 0LL;
      v181 = 0LL;
      v182 = 0LL;
      sub_85350((uint64_t)__p, 1768778083, (uint64_t)&__src, 1869442665, -1, (uint64_t)&v180);
      if (__src)
      {
        v187 = __src;
        operator delete(__src);
      }

      unsigned __int8 v27 = atomic_load((unsigned __int8 *)&qword_4A0CA0);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_4A0CA0))
      {
        sub_853EC((uint64_t)&__src, (uint64_t)__p);
        sub_85484(&v180, (uint64_t)&__src, 1uLL);
        sub_85514((uint64_t)&unk_4A0C68, 1835216945, 1835229812, 1819244402, 1651799149, &v180);
        *(void *)&__int128 v175 = &v180;
        sub_855A4((void ***)&v175);
        sub_85614(&__src);
        __cxa_guard_release(&qword_4A0CA0);
      }

      uint64_t v28 = qword_4A0BB0;
      if (qword_4A0BB0 >= (unint64_t)qword_4A0BB8)
      {
        uint64_t v58 = (qword_4A0BB0 - qword_4A0BA8) >> 3;
        unint64_t v59 = (qword_4A0BB8 - qword_4A0BA8) >> 2;
        if (v59 <= v58 + 1) {
          unint64_t v59 = v58 + 1;
        }
        else {
          unint64_t v60 = v59;
        }
        if (v60) {
          unint64_t v60 = (unint64_t)sub_7DC90(v60);
        }
        else {
          uint64_t v61 = 0LL;
        }
        v66 = (void *)(v60 + 8 * v58);
        uint64_t v67 = v60 + 8 * v61;
        void *v66 = &unk_4A0C68;
        uint64_t v29 = (uint64_t)(v66 + 1);
        uint64_t v69 = qword_4A0BA8;
        v68 = (char *)qword_4A0BB0;
        if (qword_4A0BB0 != qword_4A0BA8)
        {
          do
          {
            uint64_t v70 = *((void *)v68 - 1);
            v68 -= 8;
            *--v66 = v70;
          }

          while (v68 != (char *)v69);
          v68 = (char *)qword_4A0BA8;
        }

        qword_4A0BA8 = (uint64_t)v66;
        qword_4A0BB0 = v29;
        qword_4A0BB8 = v67;
        if (v68) {
          operator delete(v68);
        }
      }

      else
      {
        *(void *)qword_4A0BB0 = &unk_4A0C68;
        uint64_t v29 = v28 + 8;
      }

      qword_4A0BB0 = v29;
      qword_4A0BC0 = (uint64_t)&unk_4A0C68;
      sub_8CF90(algn_4A0BC8, (char *)qword_4A0BA8, v29, (v29 - qword_4A0BA8) >> 3);
      qword_4A0BE0 = qword_4A0BC0;
      if (v168)
      {
        v169 = v168;
        operator delete(v168);
      }

      if (__p[1])
      {
        __p[2] = __p[1];
        operator delete(__p[1]);
      }
    }

    return &qword_4A0BA8;
  }

  unsigned __int8 v21 = atomic_load((unsigned __int8 *)&qword_4A9618);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_4A9618))
  {
    *(_OWORD *)__p = xmmword_403450;
    sub_852D0(&v148, (__int32 *)__p, 4LL);
    sub_8FF00((uint64_t)byte_4A9560, (uint64_t)&v148);
    if (v148)
    {
      v149 = v148;
      operator delete(v148);
    }

    __cxa_guard_release(&qword_4A9618);
  }

  v163 = 0LL;
  v164 = 0LL;
  uint64_t v165 = 0LL;
  sub_7A5B8(&v163, (const void *)qword_4A95B8, qword_4A95C0[0], (qword_4A95C0[0] - qword_4A95B8) >> 2);
  v160 = 0LL;
  v161 = 0LL;
  v162 = 0LL;
  sub_7A5B8(&v160, (const void *)qword_4A9518, qword_4A9520, (qword_4A9520 - qword_4A9518) >> 2);
  v22 = v161;
  if (v161 >= v162)
  {
    v30 = (char *)v160;
    uint64_t v31 = (v161 - (_BYTE *)v160) >> 2;
    unint64_t v32 = v31 + 1;
    uint64_t v33 = v162 - (_BYTE *)v160;
    if ((v162 - (_BYTE *)v160) >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    BOOL v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v34) {
      unint64_t v35 = v32;
    }
    if (v35)
    {
      unint64_t v35 = (unint64_t)sub_7A890(v35);
      v30 = (char *)v160;
      v22 = v161;
    }

    else
    {
      uint64_t v36 = 0LL;
    }

    v41 = (char *)(v35 + 4 * v31);
    v42 = (char *)(v35 + 4 * v36);
    *(_DWORD *)v41 = 1918990112;
    v23 = v41 + 4;
    while (v22 != v30)
    {
      int v43 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v41 - 1) = v43;
      v41 -= 4;
    }

    v160 = v41;
    v161 = v23;
    v162 = v42;
    if (v30) {
      operator delete(v30);
    }
  }

  else
  {
    *(_DWORD *)v161 = 1918990112;
    v23 = v22 + 4;
  }

  v161 = v23;
  v145 = (char *)&v163;
  v146 = (char *)&v160;
  unsigned __int8 v44 = atomic_load((unsigned __int8 *)&qword_4A9658);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_4A9658))
  {
    LODWORD(v175) = 1718514737;
    uint64_t v180 = 0x637264646F6D6E69LL;
    sub_388E44(&__src, (uint64_t)&v180, 2LL);
    sub_388ED4(__p, (uint64_t *)&v145, (int *)&v175, (uint64_t)&__src);
    sub_85514((uint64_t)&unk_4A9620, 1835216945, 1835230834, 1970303090, 1718775412, (uint64_t *)__p);
    v153 = __p;
    sub_855A4((void ***)&v153);
    sub_68314(&__src);
    __cxa_guard_release(&qword_4A9658);
  }

  v45 = operator new(8uLL);
  void *v45 = 0x726D76637670766FLL;
  v187 = v45 + 1;
  v188 = v45 + 1;
  __src = v45;
  sub_85350((uint64_t)__p, 1634495520, (uint64_t)&v163, 1852796517, -1, (uint64_t)&__src);
  operator delete(v45);
  unsigned __int8 v46 = atomic_load((unsigned __int8 *)&qword_4A9698);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_4A9698))
  {
    sub_853EC((uint64_t)&__src, (uint64_t)__p);
    sub_85484(&v153, (uint64_t)&__src, 1uLL);
    sub_856E4((uint64_t)&unk_4A9660, 1634495520, 1835229548, 1, (uint64_t *)&v153);
    uint64_t v180 = (uint64_t)&v153;
    sub_855A4((void ***)&v180);
    sub_85614(&__src);
    __cxa_guard_release(&qword_4A9698);
  }

  __src = &unk_4A9620;
  v187 = &unk_4A9660;
  sub_389084(byte_4A9560, (char *)&__src, (uint64_t)&v188, 2uLL);
  qword_4A9578 = (uint64_t)&unk_4A9620;
  v47 = operator new(8uLL);
  void *v47 = 0x726D76637670766FLL;
  v154 = v47 + 1;
  v155 = v47 + 1;
  v153 = v47;
  sub_85350((uint64_t)&__src, 1634495520, (uint64_t)&v163, 1935827812, 1, (uint64_t)&v153);
  operator delete(v47);
  v48 = (void **)operator new(8uLL);
  *v48 = (void *)0x726D76637670766FLL;
  v181 = v48 + 1;
  v182 = v48 + 1;
  uint64_t v180 = (uint64_t)v48;
  sub_85350((uint64_t)&v153, 1634495520, (uint64_t)&v163, 1668441188, 0, (uint64_t)&v180);
  operator delete(v48);
  v49 = operator new(8uLL);
  void *v49 = 0x726D76637670766FLL;
  *((void *)&v175 + 1) = v49 + 1;
  v176 = v49 + 1;
  *(void *)&__int128 v175 = v49;
  sub_85350((uint64_t)&v180, 1634495520, (uint64_t)&v163, 1852796517, -1, (uint64_t)&v175);
  operator delete(v49);
  unsigned __int8 v50 = atomic_load((unsigned __int8 *)&qword_4A96D8);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_4A96D8))
  {
    sub_853EC((uint64_t)&v175, (uint64_t)&v153);
    sub_85484(v159, (uint64_t)&v175, 1uLL);
    sub_85514((uint64_t)&unk_4A96A0, 1835216946, 1835230834, 1970303090, 1718775412, (uint64_t *)v159);
    v143 = v159;
    sub_855A4(&v143);
    sub_85614(&v175);
    __cxa_guard_release(&qword_4A96D8);
  }

  unsigned __int8 v51 = atomic_load((unsigned __int8 *)&qword_4A9718);
  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_4A9718))
  {
    sub_853EC((uint64_t)&v175, (uint64_t)&__src);
    sub_85484(v159, (uint64_t)&v175, 1uLL);
    sub_85514((uint64_t)&unk_4A96E0, 1835216947, 1835229803, 1970303090, 1650549611, (uint64_t *)v159);
    v143 = v159;
    sub_855A4(&v143);
    sub_85614(&v175);
    __cxa_guard_release(&qword_4A9718);
  }

  unsigned __int8 v52 = atomic_load((unsigned __int8 *)&qword_4A9758);
  if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_4A9758))
  {
    sub_853EC((uint64_t)&v175, (uint64_t)&v180);
    sub_85484(v159, (uint64_t)&v175, 1uLL);
    sub_856E4((uint64_t)&unk_4A9720, 1634495520, 1835229548, 2, (uint64_t *)v159);
    v143 = v159;
    sub_855A4(&v143);
    sub_85614(&v175);
    __cxa_guard_release(&qword_4A9758);
  }

  __int128 v175 = *(_OWORD *)&off_484CA0;
  v176 = &unk_4A9720;
  sub_389084(byte_4A9580, (char *)&v175, (uint64_t)&v177, 3uLL);
  qword_4A9598 = (uint64_t)&unk_4A96A0;
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }

  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }

  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }

  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }

  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }

  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }

  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }

  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }

  if (v160)
  {
    v161 = (char *)v160;
    operator delete(v160);
  }

  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }

  return (uint64_t *)byte_4A9560;
}

void sub_3352C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, void *a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51)
{
}

void sub_3358CC()
{
}

void sub_3358E4()
{
}

void sub_3358EC()
{
}

uint64_t sub_3358F4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = *(_DWORD **)a1;
  unsigned __int8 v5 = *(_DWORD **)a2;
  uint64_t v6 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  uint64_t v7 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  if (v7 >= v6) {
    uint64_t v8 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  }
  else {
    uint64_t v8 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  }
  if (v8 < 1)
  {
LABEL_7:
    if (v6 < v7) {
      char v9 = -1;
    }
    else {
      char v9 = 1;
    }
    if (v6 == v7)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a2 + 24);
      char v9 = v10 < v11 ? -1 : 1;
      if (v10 == v11)
      {
        int v12 = *(unsigned __int8 *)(a1 + 32);
        if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
        {
          unsigned int v13 = *(_DWORD *)(a1 + 28);
          unsigned int v14 = *(_DWORD *)(a2 + 28);
          if (v13 < v14) {
            char v9 = -1;
          }
          else {
            char v9 = 1;
          }
          if (v13 != v14) {
            goto LABEL_25;
          }
        }

        else
        {
          BOOL v16 = *(unsigned __int8 *)(a2 + 32) != 0;
          BOOL v17 = v12 == 0;
          BOOL v18 = v12 != 0;
          int v19 = v17;
          if ((v16 & v19) != 0) {
            char v9 = -1;
          }
          else {
            char v9 = 1;
          }
          if (((v18 ^ v16) & 1) != 0) {
            goto LABEL_25;
          }
        }

        unsigned int v20 = *(_DWORD *)(a1 + 40);
        unsigned int v21 = *(_DWORD *)(a2 + 40);
        if (v20 < v21) {
          char v9 = -1;
        }
        else {
          char v9 = 1;
        }
        if (v20 == v21)
        {
          v22 = *(void **)(a1 + 48);
          v23 = *(void **)(a2 + 48);
          uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))sub_335A6C;
          char v9 = sub_335A88(v22, (void *)(a1 + 56), v23, (void *)(a2 + 56), &v28);
          if (!v9)
          {
            unsigned int v24 = *(_DWORD *)(a1 + 72);
            unsigned int v25 = *(_DWORD *)(a2 + 72);
            char v9 = v24 < v25 ? -1 : 1;
            if (v24 == v25)
            {
              CFComparisonResult v26 = sub_5586C(*(const __CFString **)(a1 + 80), (const __CFString **)(a2 + 80));
              if (v26) {
                char v27 = -1;
              }
              else {
                char v27 = 0;
              }
              if (v26 == kCFCompareGreaterThan) {
                char v9 = 1;
              }
              else {
                char v9 = v27;
              }
            }
          }
        }
      }
    }
  }

  else
  {
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      if (!--v8) {
        goto LABEL_7;
      }
    }

    if (*v4 < *v5) {
      char v9 = -1;
    }
    else {
      char v9 = 1;
    }
  }

uint64_t sub_335A6C(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 1;
  }
  if (*a1 == *a2) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_335A88( void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  BOOL v5 = a3 == a4;
  BOOL v6 = a1 == a2;
  if (a1 == a2 || (uint64_t v8 = a3, a3 == a4))
  {
LABEL_17:
    if (v6) {
      return (v5 - 1);
    }
    else {
      return 1LL;
    }
  }

  else
  {
    unsigned int v11 = a1;
    while (1)
    {
      uint64_t result = (*a5)((uint64_t)v11 + 28, (uint64_t)v8 + 28);
      if ((_BYTE)result) {
        break;
      }
      unsigned int v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          unsigned int v14 = v13;
          unsigned int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          unsigned int v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          unsigned int v11 = v14;
        }

        while (!v15);
      }

      BOOL v16 = (void *)v8[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          BOOL v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          BOOL v17 = (void *)v8[2];
          BOOL v15 = *v17 == (void)v8;
          uint64_t v8 = v17;
        }

        while (!v15);
      }

      BOOL v5 = v17 == a4;
      BOOL v6 = v14 == a2;
      if (v14 != a2)
      {
        unsigned int v11 = v14;
        uint64_t v8 = v17;
        if (v17 != a4) {
          continue;
        }
      }

      goto LABEL_17;
    }
  }

  return result;
}

BOOL sub_335B80(void *a1)
{
  if (*a1 == a1[1]) {
    return 0LL;
  }
  sub_2433A0((uint64_t)__p, (uint64_t)a1);
  BOOL v2 = sub_54978((uint64_t)__p, (uint64_t)a1);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C((void *)__p[7]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v2;
}

void sub_335C00(uint64_t *a1, void *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  unsigned __int8 v4 = (void *)a2[1];
  if (v4 != a2)
  {
    uint64_t v8 = a1;
    do
    {
      char v9 = (std::__shared_weak_count *)v4[3];
      if (v9)
      {
        unsigned int v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          unsigned int v11 = v10;
          uint64_t v12 = v4[2];
          if (v12) {
            unsigned __int8 v3 = sub_54ADC(v4[2], a3);
          }
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            unint64_t v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }

          if (((v12 != 0) & v3) == 1) {
            uint64_t v8 = (uint64_t *)sub_11A2A0((uint64_t)a1, v8, v4[2], v4[3])[1];
          }
        }
      }

      unsigned __int8 v4 = (void *)v4[1];
    }

    while (v4 != a2);
  }

void sub_335CE4(_Unwind_Exception *a1)
{
}

char *sub_335D30(unsigned int a1)
{
  int v2 = sub_A9B7C(a1);
  unsigned int v3 = sub_A9BE8(v2);
  unsigned __int8 v4 = (char *)malloc(v3);
  BOOL v5 = v4;
  if (v3 && !v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v10 = std::bad_alloc::bad_alloc(exception);
  }

  bzero(v4, v3);
  if (v5)
  {
    *(void *)BOOL v5 = 0LL;
    *((_DWORD *)v5 + 2) = a1;
    if (a1)
    {
      uint64_t v6 = a1;
      uint64_t v7 = v5 + 16;
      do
      {
        *((_DWORD *)v7 - 1) = -1;
        void *v7 = 0LL;
        v7[1] = 0LL;
        uint64_t v7 = (void *)((char *)v7 + 20);
        --v6;
      }

      while (v6);
    }
  }

  return v5;
}

void sub_335DDC(unint64_t a1)
{
  char v1 = (void *)sub_336BB4(a1);
  operator delete(v1);
}

uint64_t sub_335DF0(uint64_t *a1, uint64_t a2, __int128 **a3, uint64_t a4, double a5)
{
  unint64_t v6 = sub_2901C((uint64_t)a1, a2, a3, a4, a5);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (os_log_t *)sub_138E8(24);
    char v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__p, v7);
      if (v30 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)buf = 136315650;
      v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
      v34[1] = 0x820000000750400LL;
      v34[2] = p_p;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d DSPChain::SetChainFormat failed with %s", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0) {
        operator delete(__p);
      }
    }
  }

  else
  {
    unsigned int v11 = (_DWORD *)a1[150];
    if (v11)
    {
      if (sub_2C7C00(a1[150]))
      {
        if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 120))(a1, 1936748595LL) & 1) != 0)
        {
          CFComparisonResult v26 = a1 + 6;
          char v27 = 1;
          sub_190270((uint64_t)(a1 + 6));
          AudioObjectID v12 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 120LL))(v11);
          inAddress.mElement = 0;
          AudioObjectID v32 = v12;
          *(void *)&inAddress.mSelector = 0x696E707473737263LL;
          sub_90764((uint64_t)buf, &v32, &inAddress, 0, 0LL);
          int v13 = *(_DWORD *)buf;
          if (*(_DWORD *)buf || !v35)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &off_4865A0;
            exception[2] = v13;
          }

          __p = 0LL;
          uint64_t v29 = 0LL;
          uint64_t v30 = 0LL;
          unint64_t v14 = *(void **)((char *)v34 + 4);
          sub_7A5B8( &__p,  *(const void **)((char *)v34 + 4),  *(void *)((char *)&v34[1] + 4),  (uint64_t)(*(void *)((char *)&v34[1] + 4) - *(void *)((char *)v34 + 4)) >> 2);
          if (v14) {
            operator delete(v14);
          }
          BOOL v15 = __p;
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, void *, void, void))(*a1 + 112))( a1,  1936748595LL,  64005LL,  __p,  ((_DWORD)v29 - (_DWORD)__p) & 0xFFFFFFFC,  0LL))
          {
            BOOL v16 = (os_log_t *)sub_138E8(24);
            BOOL v17 = *v16;
            if (*v16)
            {
              if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
                LOWORD(v34[1]) = 1024;
                *(_DWORD *)((char *)&v34[1] + 2) = 147;
                _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d There was an error setting the input data sources on Speaker Protection V3",  buf,  0x12u);
              }
            }
          }

          *(void *)&inAddress.mSelector = 0LL;
          if (!v11[123]) {
            inAddress.mScope = 1;
          }
          uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, AudioObjectPropertyAddress *, uint64_t, void))(*a1 + 112))( a1,  1936748595LL,  64006LL,  &inAddress,  8LL,  0LL);
          if ((_DWORD)v7)
          {
            BOOL v18 = (os_log_t *)sub_138E8(24);
            int v19 = *v18;
            if (*v18)
            {
              if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
                v34[1] = 0x4000000009D0400LL;
                LODWORD(v34[2]) = v7;
                _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Could not set property to ignore speaker channel telemetry, error:%d",  buf,  0x18u);
              }
            }
          }

          if (v15) {
            operator delete(v15);
          }
          sub_19032C(&v26);
        }

        else
        {
          v23 = (os_log_t *)sub_138E8(24);
          unsigned int v24 = *v23;
          uint64_t v7 = 2003332927LL;
          if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
            LOWORD(v34[1]) = 1024;
            *(_DWORD *)((char *)&v34[1] + 2) = 135;
            _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to find the Speaker Protection Processor.",  buf,  0x12u);
            return 2003332927LL;
          }
        }
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      uint64_t v7 = 2003329396LL;
      unsigned int v20 = (os_log_t *)sub_138E8(24);
      unsigned int v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        LOWORD(v34[1]) = 1024;
        *(_DWORD *)((char *)&v34[1] + 2) = 126;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to find the speaker device to configure input sources for speaker protection",  buf,  0x12u);
      }
    }
  }

  return v7;
}

void sub_33625C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (v21) {
    operator delete(v21);
  }
  sub_19032C(&a10);
  _Unwind_Resume(a1);
}

void sub_3362B0( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, unsigned int a6, uint64_t *a7)
{
  if (*(_BYTE *)(a1 + 448))
  {
    uint64_t v8 = sub_138E8(24);
    if ((*(_BYTE *)(v8 + 8) & 1) != 0)
    {
      char v9 = *(os_log_s **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *a5;
          uint64_t v11 = *a7;
          *(_DWORD *)buf = 136316418;
          *(void *)&uint8_t buf[4] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 168;
          __int16 v46 = 1024;
          unsigned int v47 = a4;
          __int16 v48 = 1024;
          unsigned int v49 = a6;
          __int16 v50 = 2048;
          uint64_t v51 = v10;
          __int16 v52 = 2048;
          uint64_t v53 = v11;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CLSPchain NumInBufList=%u, NumOutBufferList=%d, inBL[0]=%p, outBL[0]=%p",  buf,  0x32u);
        }
      }
    }

    AudioObjectID v12 = (unsigned int *)(a1 + 680);
    *(_WORD *)&buf[2] = *(_WORD *)(a1 + 682);
    *(_WORD *)buf = *(_WORD *)(a1 + 682);
    WORD1(v44) = *(_WORD *)(a1 + 682) == 0;
    LOWORD(v44) = *(_WORD *)(a1 + 682);
    int v13 = *(_DWORD *)buf;
    while (1)
    {
      unsigned int v14 = __ldaxr(v12);
      if (v14 != v13) {
        break;
      }
      if (!__stlxr(v44, v12)) {
        goto LABEL_11;
      }
    }

    __clrex();
LABEL_11:
    if (*(_WORD *)(a1 + 682)) {
      uint64_t v15 = 400LL;
    }
    else {
      uint64_t v15 = 424LL;
    }
    if (*(_WORD *)(a1 + 682)) {
      uint64_t v16 = a1 + 400;
    }
    else {
      uint64_t v16 = a1 + 424;
    }
    uint64_t v17 = *(void *)(a1 + 1200);
    if (v17 && sub_2C7C00(*(void *)(a1 + 1200)) && !*(_DWORD *)(v17 + 492) && a6 != 0)
    {
      uint64_t v19 = a6;
      unsigned int v20 = a7;
      do
      {
        uint64_t v21 = *v20;
        if (!*v20) {
          break;
        }
        if (*(_DWORD *)v21 != 2)
        {
          v22 = (os_log_t *)sub_138E8(13);
          v23 = *v22;
          if (*v22)
          {
            if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 188;
              _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: stereo speaker buffer list does not have 2 buffers",  buf,  0x12u);
            }
          }
        }

        unsigned int v24 = *(float **)(v21 + 32);
        unsigned int v25 = *(float **)(v21 + 16);
        *(_DWORD *)buf = 1056964608;
        vDSP_vasm(v24, 1LL, v25, 1LL, (const float *)buf, v25, 1LL, a3);
        vDSP_vclr(v24, 1LL, a3);
        ++v20;
        --v19;
      }

      while (v19);
    }

    uint64_t v26 = *(void *)(v16 + 8) - *(void *)(a1 + v15);
    if (v26)
    {
      uint64_t v27 = 0LL;
      unint64_t v28 = v26 / 24;
      unint64_t v29 = v28 - 1;
      if (v28 <= 1) {
        uint64_t v30 = 1LL;
      }
      else {
        uint64_t v30 = v28;
      }
      uint64_t v31 = 16LL;
      uint64_t v32 = 8LL;
      do
      {
        uint64_t v33 = a5;
        if (v27) {
          uint64_t v33 = (uint64_t *)(*(void *)(a1 + 976) + v31 - 16);
        }
        BOOL v34 = a7;
        if (v29 != v27) {
          BOOL v34 = (uint64_t *)(*(void *)(a1 + 976) + v31);
        }
        uint64_t v35 = *(void *)(a1 + v15);
        uint64_t v36 = *v33;
        uint64_t v44 = *v34;
        if ((*(unsigned int (**)(void))(**(void **)(v35 + v32) + 216LL))(*(void *)(v35 + v32)))
        {
          *(void *)buf = v36;
          *(void *)&buf[8] = 0LL;
          if (((a4 > 1) & sub_336A9C(*(void *)(v35 + v32))) == 1)
          {
            *(void *)&buf[8] = a5[1];
            uint64_t v37 = a4;
          }

          else
          {
            uint64_t v37 = 1LL;
          }

          (*(void (**)(void, uint64_t, void, uint64_t, _BYTE *, void, uint64_t *))(**(void **)(v35 + v32)
                                                                                               + 112LL))( *(void *)(v35 + v32),  a2,  a3,  v37,  buf,  a6,  &v44);
        }

        else if (v44)
        {
          (*(void (**)(void, uint64_t, void))(**(void **)(v35 + v32) + 104LL))( *(void *)(v35 + v32),  a2,  a3);
        }

        ++v27;
        v31 += 32LL;
        v32 += 24LL;
      }

      while (v30 != v27);
    }
  }

void sub_336688(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v25 = *(void *)(a1 + 32);
  if (v25 == v3)
  {
    v22 = (os_log_t *)sub_138E8(13);
    v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v35 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
      __int16 v36 = 1024;
      int v37 = 257;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    v31[1] = *(_DWORD *)v3;
    uint64_t v5 = *(void *)(v3 + 8);
    unsigned __int8 v4 = *(std::__shared_weak_count **)(v3 + 16);
    uint64_t v32 = v5;
    uint64_t v33 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    v31[0] = 0;
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v5 + 224LL))(v5, 1LL, v31);
    if (v8)
    {
      uint64_t v19 = (os_log_t *)sub_138E8(13);
      unsigned int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v35 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v36 = 1024;
        int v37 = 264;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unexpected error from GetBusCount",  buf,  0x12u);
      }

      uint64_t v21 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v21 = &off_4865A0;
      v21[2] = v8;
    }

    for (unint64_t i = *(void *)(a2 + 40); i < v31[0]; ++i)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 128LL))(v5, 1LL, i);
      __int128 v11 = *(_OWORD *)(v10 + 16);
      v29[0] = *(_OWORD *)v10;
      v29[1] = v11;
      uint64_t v30 = *(void *)(v10 + 32);
      sub_2F6E8((void *)a2, (uint64_t)v29);
      AudioObjectID v12 = (os_log_t *)sub_138E8(24);
      int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CC00(&v28, (uint64_t)v29);
        if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unsigned int v14 = &v28;
        }
        else {
          unsigned int v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152LL))(v5);
        sub_2CA1C(__p, v15);
        uint64_t v16 = __p;
        if (v27 < 0) {
          uint64_t v16 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        uint64_t v35 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v36 = 1024;
        int v37 = 270;
        __int16 v38 = 1024;
        int v39 = i;
        __int16 v40 = 2080;
        v41 = v14;
        __int16 v42 = 2080;
        int v43 = v16;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bus: %d Format: %s AU: %s", buf, 0x2Cu);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    if (v4)
    {
      uint64_t v17 = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    v3 += 24LL;
  }

  while (v3 != v25);
}

void sub_336A3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

BOOL sub_336A9C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  if (v2 != 1936748595 && v2 != 1685287015) {
    return 0LL;
  }
  unsigned int v7 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 224LL))(a1, 1LL, &v7))
  {
    unsigned __int8 v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      BOOL result = os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 136315394;
      char v9 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
      __int16 v10 = 1024;
      int v11 = 52;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
    }

    return 0LL;
  }

  return v7 > 1;
}

unint64_t sub_336BB4(unint64_t a1)
{
  *(void *)a1 = off_481DB0;
  uint64_t v2 = sub_32918();
  sub_395DD4(v2, a1 + 1136);
  sub_32C8C(*(void **)(a1 + 1168));
  sub_32C8C(*(void **)(a1 + 1144));
  return sub_1958B8(a1);
}

void sub_336C00(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  unsigned int v7 = (os_log_t *)sub_138E8(24);
  int v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
  {
    sub_396420(&__p, a3);
    char v9 = v30 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315650;
    uint64_t v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
    __int16 v33 = 1024;
    int v34 = 79;
    __int16 v35 = 2080;
    __int16 v36 = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Speaker device state has changed to '%s'", buf, 0x1Cu);
    if (v30 < 0) {
      operator delete(__p);
    }
  }

  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v11 = a2 + 8;
  uint64_t v10 = v12;
  if (!v12) {
    goto LABEL_37;
  }
  uint64_t v13 = v11;
  do
  {
    unsigned int v14 = *(_DWORD *)(v10 + 28);
    BOOL v15 = v14 >= 0x7073706B;
    if (v14 >= 0x7073706B) {
      uint64_t v16 = (uint64_t *)v10;
    }
    else {
      uint64_t v16 = (uint64_t *)(v10 + 8);
    }
    if (v15) {
      uint64_t v13 = v10;
    }
    uint64_t v10 = *v16;
  }

  while (*v16);
  if (v13 == v11 || (*(_DWORD *)(v13 + 28) < 0x7073706Cu ? (BOOL v17 = a3 == 0) : (BOOL v17 = 0), !v17))
  {
LABEL_37:
    unsigned int v24 = (os_log_t *)sub_138E8(13);
    uint64_t v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v33 = 1024;
        int v34 = 82;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Listener updated but speaker channel configuration was not changed!",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Listener updated but speaker channel configuration was not changed!");
  }

  uint64_t v18 = a4[150];
  if (v18 && sub_2C7C00(a4[150]))
  {
    uint64_t v27 = 0LL;
    if (!*(_DWORD *)(v18 + 492)) {
      HIDWORD(v27) = 1;
    }
    if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a4 + 120))(a4, 1936748595LL) & 1) != 0)
    {
      __p = a4 + 6;
      char v29 = 1;
      sub_190270((uint64_t)(a4 + 6));
      int v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, void))(*a4 + 112))( a4,  1936748595LL,  64006LL,  &v27,  8LL,  0LL);
      if (v19)
      {
        unsigned int v20 = (os_log_t *)sub_138E8(24);
        uint64_t v21 = *v20;
        if (*v20)
        {
          if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
            __int16 v33 = 1024;
            int v34 = 107;
            __int16 v35 = 1024;
            LODWORD(v36) = v19;
            _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Could not set property to ignore speaker channel telemetry, error:%d",  buf,  0x18u);
          }
        }
      }

      sub_19032C(&__p);
    }

    else
    {
      v22 = (os_log_t *)sub_138E8(24);
      v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v33 = 1024;
        int v34 = 98;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to find the Speaker Protection Processor.",  buf,  0x12u);
      }
    }
  }

void sub_336F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_336FA4(uint64_t a1)
{
  char v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_336FB8(os_unfair_lock_s *a1)
{
  uint64_t v2 = operator new(0x50uLL);
  sub_EC558((uint64_t)v2);
  sub_1D5AE0(a1, (uint64_t)v2);
  uint64_t v3 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v3, 0);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D55D4((uint64_t *)a1, 1u, 1886287212LL, (uint64_t)v2);
  sub_1D580C((uint64_t)a1, 1u, 1886287212LL, (uint64_t)v3);
  (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v20,  a1);
  sub_337480((std::__shared_weak_count **)&v21, (uint64_t)a1, 1886287212, (uint64_t)v20);
  __int128 v22 = v21;
  __int128 v21 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v22);
  unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  unsigned int v7 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1))
  {
    int v8 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  sub_19DFC((uint64_t)v20);
  if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  0LL))
  {
    uint64_t v10 = operator new(0x50uLL);
    sub_EC558((uint64_t)v10);
    sub_1D5AE0(a1, (uint64_t)v10);
    sub_1D55D4((uint64_t *)a1, 0, 1886284905LL, (uint64_t)v10);
    uint64_t v11 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v11, 0);
    sub_1D5AE0(a1, (uint64_t)v11);
    sub_1D580C((uint64_t)a1, 0, 1886284905LL, (uint64_t)v11);
    (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v20,  a1);
    sub_337480((std::__shared_weak_count **)&v21, (uint64_t)a1, 1886284905, (uint64_t)v20);
    __int128 v19 = v21;
    __int128 v21 = 0uLL;
    sub_3711D4((uint64_t)a1, (void ***)&v19);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    if (*((void *)&v19 + 1))
    {
      uint64_t v13 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    BOOL v15 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    if (*((void *)&v21 + 1))
    {
      uint64_t v16 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    sub_19DFC((uint64_t)v20);
  }

  return 1LL;
}

void sub_337258( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_3372B8(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886287212)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    unsigned __int8 v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v13 = "Device_Null_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 90;
      __int16 v16 = 2080;
      unint64_t v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v6 = (os_log_t *)sub_138E8(13);
    unsigned int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = "Device_Null_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 91;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_337464(_Unwind_Exception *a1)
{
}

void sub_337480(std::__shared_weak_count **a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8 = (std::__shared_weak_count *)operator new(0x228uLL);
  v8->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0LL;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_482070;
  if (a3 != 1886284905 && a3 != 1886287212)
  {
    v23 = (os_log_t *)sub_138E8(13);
    unsigned int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v32 = 136315394;
      *(void *)&v32[4] = "Port_Null_Aspen.cpp";
      __int16 v33 = 1024;
      int v34 = 37;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v32, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(_DWORD *)buf = a3;
  uint64_t v37 = 1885561449LL;
  LOBYTE(v38) = 0;
  sub_86550((uint64_t *)((char *)&v39 + 2), (uint64_t)&unk_492598);
  __int16 v42 = v42 & 0xF800 | (a3 == 1886284905) | 0x420;
  char v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  sub_F9530((uint64_t)v32, 1886287212LL);
  memset(v28, 0, sizeof(v28));
  sub_7D084(__p, "");
  uint64_t v10 = v8 + 1;
  sub_F9638((uint64_t)&v8[1], (uint64_t *)buf, a2, (uint64_t)&v29, (uint64_t)v32, a4, v28, (__int128 *)__p);
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
  LOWORD(v8[22].__shared_weak_owners_) = 0;
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v28;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)&v35);
  sub_19DFC((uint64_t)&v34 + 2);
  sub_19DFC((uint64_t)v32);
  sub_32C8C(*(void **)&v41[4]);
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_478030;
  char v11 = (os_log_t *)sub_138E8(17);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    ((void (*)(_BYTE *__return_ptr, std::__shared_weak_count *))v10->__vftable[3].__get_deleter)(v32, v8 + 1);
    uint64_t v13 = *(void *)v32;
    shared_owners = (const void *)v8[11].__shared_owners_;
    char v29 = shared_owners;
    LOBYTE(v30) = v8[11].__shared_weak_owners_;
    if ((_BYTE)v30 && shared_owners) {
      CFRetain(shared_owners);
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v37 = (uint64_t)"Port_Null_Aspen.cpp";
    __int16 v38 = 1024;
    int v39 = 81;
    __int16 v40 = 2112;
    *(void *)v41 = v13;
    *(_WORD *)&v41[8] = 2112;
    *(void *)&v41[10] = shared_owners;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a NULL port with name %@, and uid %@",  buf,  0x26u);
    sub_19DFC((uint64_t)&v29);
    sub_19DFC((uint64_t)v32);
  }

  *a1 = v10;
  a1[1] = v8;
  shared_weak_owners = (std::__shared_weak_count *)v8[4].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v8[4].__shared_owners_ = (uint64_t)v10;
    v8[4].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  else
  {
    do
      unint64_t v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    unsigned int v20 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v8[4].__shared_owners_ = (uint64_t)v10;
    v8[4].__shared_weak_owners_ = (uint64_t)v8;
  }

  do
    unint64_t v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

void sub_337880( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

void sub_337928(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_482070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_337938(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_482070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_337958(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL sub_337970(uint64_t a1, _DWORD **a2)
{
  if (sub_1058D4(a1, a2))
  {
    unsigned int v3 = (unsigned __int16)sub_55D7C((uint64_t)(a2[14] + 2), *((unsigned int *)a2 + 3));
    if (v3 <= 0x100) {
      LOBYTE(v3) = 0;
    }
    if ((_BYTE)v3)
    {
      sub_1F6AA0((uint64_t)v36, (void *)*a2 + 2);
      if (v37 < 2)
      {
        BOOL v4 = 0LL;
LABEL_55:
        sub_FF3B8((void *)v36[1]);
        return v4;
      }

      sub_B8F68(&v31, (uint64_t *)(v36[0] + 32LL), "", 53);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v31 + 272LL))(&v33);
      uint64_t v5 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          unint64_t v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }

      if (v35 == v37)
      {
        int v8 = v34;
        if (v34 != &v33)
        {
          unint64_t v9 = (void *)v36[0];
          while (1)
          {
            uint64_t v10 = (std::__shared_weak_count *)v8[3];
            if (!v10) {
              break;
            }
            char v11 = std::__shared_weak_count::lock(v10);
            uint64_t v12 = v11;
            if (!v11) {
              goto LABEL_28;
            }
            uint64_t v13 = v8[2];
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              unint64_t v15 = __ldxr(p_shared_weak_owners);
            while (__stxr(v15 + 1, p_shared_weak_owners));
            unint64_t v16 = (unint64_t *)&v11->__shared_owners_;
            do
              unint64_t v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v12);
            }

            unint64_t v18 = std::__shared_weak_count::lock(v12);
            char v19 = 0;
            if (!v18) {
              uint64_t v13 = 0LL;
            }
LABEL_29:
            unsigned int v20 = (std::__shared_weak_count *)v9[5];
            if (v20 && (unint64_t v21 = std::__shared_weak_count::lock(v20)) != 0LL)
            {
              unint64_t v22 = v21;
              BOOL v4 = v13 == v9[4];
              v23 = (unint64_t *)&v21->__shared_owners_;
              do
                unint64_t v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v22);
              }
            }

            else
            {
              BOOL v4 = v13 == 0;
            }

            if (!v18) {
              goto LABEL_40;
            }
            uint64_t v25 = (unint64_t *)&v18->__shared_owners_;
            do
              unint64_t v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (v26)
            {
LABEL_40:
              if ((v19 & 1) != 0) {
                goto LABEL_42;
              }
LABEL_41:
              std::__shared_weak_count::__release_weak(v12);
              goto LABEL_42;
            }

            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
            if ((v19 & 1) == 0) {
              goto LABEL_41;
            }
LABEL_42:
            if (v4)
            {
              char v27 = (void *)v9[1];
              if (v27)
              {
                do
                {
                  std::string v28 = v27;
                  char v27 = (void *)*v27;
                }

                while (v27);
              }

              else
              {
                do
                {
                  std::string v28 = (void *)v9[2];
                  BOOL v29 = *v28 == (void)v9;
                  unint64_t v9 = v28;
                }

                while (!v29);
              }

              int v8 = (uint64_t *)v8[1];
              unint64_t v9 = v28;
              if (v8 != &v33) {
                continue;
              }
            }

            goto LABEL_54;
          }

          uint64_t v12 = 0LL;
LABEL_28:
          uint64_t v13 = 0LL;
          unint64_t v18 = 0LL;
          char v19 = 1;
          goto LABEL_29;
        }

        BOOL v4 = 1LL;
      }

      else
      {
        BOOL v4 = 0LL;
      }

void sub_337C24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t sub_337C48(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!v26[2])
  {
    unint64_t v21 = (os_log_t *)sub_138E8(13);
    unint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      std::string v28 = "RoutingHandler_SplitterBroadcast_GenericConfig1.cpp";
      __int16 v29 = 1024;
      int v30 = 63;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_337F20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15)
{
}

void sub_337F90(void *a1)
{
  char v1 = (void *)sub_33B548(a1);
  operator delete(v1);
}

BOOL sub_337FA4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1819569763) {
    return 0LL;
  }
  if (v2 != 1936092532 && v2 != 1885762592)
  {
    int v8 = (os_log_t *)sub_138E8(22);
    unint64_t v9 = *v8;
    if (*v8)
    {
      BOOL result = os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      unsigned int v20 = *(void **)a2;
      int v21 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v20);
      if (v24 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      unint64_t v26 = "AggregateStream_Broadcast.cpp";
      __int16 v27 = 1024;
      int v28 = 261;
      __int16 v29 = 2080;
      int v30 = v10;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Encountered an unsupported property: %s.", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    return 0LL;
  }

  uint64_t v5 = a1 + 80;
  for (uint64_t i = *(void *)(a1 + 88); i != v5; uint64_t i = *(void *)(i + 8))
  {
    if (((*(uint64_t (**)(void, int *))(**(void **)(i + 16) + 16LL))(*(void *)(i + 16), a2) & 1) == 0)
    {
      char v11 = (os_log_t *)sub_138E8(13);
      unint64_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(i + 16) + 8LL));
        int v13 = v24;
        __int16 v14 = (void **)__p[0];
        unint64_t v18 = *(void **)a2;
        int v19 = a2[2];
        sub_613AC((uint64_t)&v20, (unsigned int *)&v18);
        unint64_t v15 = __p;
        if (v13 < 0) {
          unint64_t v15 = v14;
        }
        if (v22 >= 0) {
          uint64_t v16 = &v20;
        }
        else {
          uint64_t v16 = v20;
        }
        *(_DWORD *)buf = 136315906;
        unint64_t v26 = "AggregateStream_Broadcast.cpp";
        __int16 v27 = 1024;
        int v28 = 248;
        __int16 v29 = 2080;
        int v30 = v15;
        __int16 v31 = 2080;
        uint64_t v32 = v16;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Referenced stream %s does not support property %s.",  buf,  0x26u);
        if (v22 < 0) {
          operator delete(v20);
        }
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Referenced stream %s does not support property %s.");
    }
  }

  return 1LL;
}

void sub_338248(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_338278(void *a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    unint64_t v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *a2;
      int v23 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)buf, (unsigned int *)&v22);
      unsigned int v20 = v27 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)int v28 = 136315650;
      *(void *)&v28[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&v28[12] = 1024;
      *(_DWORD *)&v28[14] = 273;
      *(_WORD *)&v28[18] = 2080;
      *(void *)&v28[20] = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  v28,  0x1Cu);
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  *(void *)&v28[8] = 0LL;
  *(void *)&v28[16] = 0LL;
  *(void *)int v28 = &v28[8];
  BOOL v4 = a1 + 10;
  uint64_t v5 = a1[11];
  if ((void *)v5 == a1 + 10) {
    goto LABEL_17;
  }
  do
  {
    if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(v5 + 16) + 16LL))(*(void *)(v5 + 16), a2))
    {
      unsigned int v6 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v5 + 16) + 24LL))(*(void *)(v5 + 16), a2);
      char v7 = v6;
      uint64_t v8 = *(void *)&v28[8];
      unint64_t v9 = &v28[8];
      uint64_t v10 = &v28[8];
      if (*(void *)&v28[8])
      {
        while (1)
        {
          while (1)
          {
            uint64_t v10 = (void *)v8;
            unsigned int v11 = *(unsigned __int8 *)(v8 + 25);
            if (v11 <= v6) {
              break;
            }
            uint64_t v8 = *v10;
            unint64_t v9 = v10;
            if (!*v10) {
              goto LABEL_11;
            }
          }

          if (v11 >= v6) {
            break;
          }
          uint64_t v8 = v10[1];
          if (!v8)
          {
            unint64_t v9 = v10 + 1;
            goto LABEL_11;
          }
        }
      }

      else
      {
LABEL_11:
        unint64_t v12 = operator new(0x20uLL);
        v12[25] = v7;
        *(void *)unint64_t v12 = 0LL;
        *((void *)v12 + 1) = 0LL;
        *((void *)v12 + 2) = v10;
        void *v9 = v12;
        if (**(void **)v28)
        {
          *(void *)int v28 = **(void **)v28;
          unint64_t v12 = (_BYTE *)*v9;
        }

        sub_7A420(*(uint64_t **)&v28[8], (uint64_t *)v12);
        ++*(void *)&v28[16];
      }
    }

    uint64_t v5 = *(void *)(v5 + 8);
  }

  while ((void *)v5 != v4);
  if (*(void *)&v28[16] != 1LL)
  {
LABEL_17:
    unint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      __int16 v25 = 1024;
      int v26 = 285;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Varying response to IsPropertySettable.",  buf,  0x12u);
    }

    uint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v17 = &off_4865A0;
    v17[2] = 1852797029;
  }

  uint64_t v13 = *(unsigned __int8 *)(*(void *)v28 + 25LL);
  sub_32C8C(*(void **)&v28[8]);
  return v13;
}

void sub_338584( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

uint64_t sub_3385AC(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)buf, (unsigned int *)&v24);
      unint64_t v18 = v34 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)int v26 = 136315650;
      *(void *)&v26[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 294;
      *(_WORD *)&v26[18] = 2080;
      *(void *)&v26[20] = v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  v26,  0x1Cu);
      if (v34 < 0) {
        operator delete(*(void **)buf);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    unsigned int v20 = (os_log_t *)sub_138E8(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)buf, (unsigned int *)&v24);
      uint64_t v22 = v34 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)int v26 = 136316162;
      *(void *)&v26[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 295;
      *(_WORD *)&v26[18] = 2080;
      *(void *)&v26[20] = v22;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = a4;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        v26,
        0x2Cu);
      if (v34 < 0) {
        operator delete(*(void **)buf);
      }
    }

    int v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v23 = &off_4865A0;
    v23[2] = 561211770;
  }

  *(void *)&v26[8] = 0LL;
  *(void *)&v26[16] = 0LL;
  *(void *)int v26 = &v26[8];
  uint64_t v8 = a1 + 10;
  uint64_t v9 = a1[11];
  if ((void *)v9 == v8) {
    goto LABEL_9;
  }
  do
  {
    if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(v9 + 16) + 16LL))(*(void *)(v9 + 16), a2))
    {
      unsigned int v10 = (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t))(**(void **)(v9 + 16) + 32LL))( *(void *)(v9 + 16),  a2,  a3,  a4);
      sub_57ADC((uint64_t *)v26, v10, v10);
    }

    uint64_t v9 = *(void *)(v9 + 8);
  }

  while ((void *)v9 != v8);
  if (*(void *)&v26[16] != 1LL)
  {
LABEL_9:
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      __int16 v32 = 1024;
      int v33 = 306;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Varying response to GetPropertyDataSize.",  buf,  0x12u);
    }

    unint64_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v15 = &off_4865A0;
    v15[2] = 1852797029;
  }

  uint64_t v11 = *(unsigned int *)(*(void *)v26 + 28LL);
  sub_32C8C(*(void **)&v26[8]);
  return v11;
}

void sub_338964( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_33898C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unint64_t v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v44);
      unsigned int v20 = v50 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 315;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v44);
      uint64_t v24 = v50 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 316;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v24;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a3;
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = a4;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }

    int v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v25 = &off_4865A0;
    v25[2] = 561211770;
  }

  if (!a6)
  {
    int v26 = (os_log_t *)sub_138E8(13);
    __int16 v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v44);
      int v28 = v50 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 317;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "outData";
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v28;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }

    __int16 v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v29 = &off_4865A0;
    _OWORD v29[2] = 561211770;
  }

  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
  {
    uint64_t v30 = (os_log_t *)sub_138E8(13);
    __int16 v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v44);
      int v32 = v50;
      int v33 = *(_BYTE **)__p;
      unsigned int v34 = *a5;
      int v35 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
      __int16 v36 = __p;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      if (v32 < 0) {
        __int16 v36 = v33;
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 318;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v36;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v34;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v35;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }

    unint64_t v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v37 = &off_4865A0;
    v37[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 1936092532 || *(_DWORD *)a2 == 1885762592)
  {
    if (*a5 <= 0x27)
    {
      __int16 v38 = (os_log_t *)sub_138E8(13);
      int v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 325;
        _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): ioDataSize too small to fit an AudioStreamBasicDescription.",  buf,  0x12u);
      }

      __int16 v40 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v40 = &off_4865A0;
      v40[2] = 561211770;
    }

    int v13 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 120LL))(a1, buf);
    if (v13)
    {
      v41 = (os_log_t *)sub_138E8(13);
      __int16 v42 = *v41;
      if (*v41)
      {
        if (os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(void *)&__p[4] = "AggregateStream_Broadcast.cpp";
          __int16 v48 = 1024;
          int v49 = 328;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: AggregateStream_Broadcast::GetCurrentFormat repor ted a failure.",  __p,  0x12u);
        }
      }

      int v43 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v43 = &off_4865A0;
      v43[2] = v13;
    }

    __int128 v14 = *(_OWORD *)&buf[16];
    *(_OWORD *)a6 = *(_OWORD *)buf;
    *(_OWORD *)(a6 + 16) = v14;
    *(void *)(a6 + 32) = *(void *)&buf[32];
  }

  else
  {
    unint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v44);
      uint64_t v17 = v50 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 334;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unhandled property for which HasProperty returned true: %s.",  buf,  0x1Cu);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

void sub_3390C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3390EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    unint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v43);
      int v19 = v49 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 344;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v19;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    int v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v43);
      int v23 = v49 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 345;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v23;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a3;
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = a4;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }

    uint64_t v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v24 = &off_4865A0;
    v24[2] = 561211770;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) > a5)
  {
    int v25 = (os_log_t *)sub_138E8(13);
    int v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v43);
      int v27 = v49;
      int v28 = *(_BYTE **)__p;
      int v29 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
      uint64_t v30 = __p;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      if (v27 < 0) {
        uint64_t v30 = v28;
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 346;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v30;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a5;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v29;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }

    __int16 v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v31 = &off_4865A0;
    v31[2] = 561211770;
  }

  if (!a6)
  {
    int v32 = (os_log_t *)sub_138E8(13);
    int v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v43);
      unsigned int v34 = v49 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 347;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "inData";
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v34;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }

    int v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v35 = &off_4865A0;
    v35[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    __int16 v36 = (os_log_t *)sub_138E8(13);
    unint64_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v43);
      __int16 v38 = v49 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 348;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v38;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }

    int v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v39 = &off_4865A0;
    v39[2] = 1852797029;
  }

  if (*(_DWORD *)a2 == 1936092532 || *(_DWORD *)a2 == 1885762592)
  {
    __int128 v12 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)buf = *(_OWORD *)a6;
    *(_OWORD *)&buf[16] = v12;
    *(void *)&buf[32] = *(void *)(a6 + 32);
    int v13 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 136LL))(a1, buf);
    if (v13)
    {
      __int16 v40 = (os_log_t *)sub_138E8(13);
      v41 = *v40;
      if (*v40)
      {
        if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(void *)&__p[4] = "AggregateStream_Broadcast.cpp";
          __int16 v47 = 1024;
          int v48 = 357;
          _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: AggregateStream_Broadcast::SetCurrentFormat repor ted a failure.",  __p,  0x12u);
        }
      }

      __int16 v42 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v42 = &off_4865A0;
      v42[2] = v13;
    }
  }

  else
  {
    __int128 v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v43);
      uint64_t v16 = v49 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 362;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unhandled property for which HasProperty returned true: %s.",  buf,  0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

void sub_339878( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_33989C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_7D084(&v16, __str);
  BOOL v4 = std::string::insert(&v16, 0LL, "[ addr: ", 8uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unsigned int v6 = __p;
  }
  else {
    unsigned int v6 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v7 = HIBYTE(cap);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  snprintf(__str, 0x13uLL, "%p", *(const void **)(a1 + 200));
  sub_7D084(&v16, __str);
  uint64_t v8 = std::string::insert(&v16, 0LL, "; owning dev: ", 0xEuLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t cap = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unsigned int v10 = __p;
  }
  else {
    unsigned int v10 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v11 = HIBYTE(cap);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::string::append(a2, "; strms: { ", 0xBuLL);
  uint64_t v12 = *(void *)(a1 + 88);
  if (v12 != a1 + 80)
  {
    while (1)
    {
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(v12 + 16) + 8LL));
      int v13 = cap >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      __int128 v14 = cap >= 0 ? (void *)HIBYTE(cap) : __p[1];
      std::string::append(a2, v13, (std::string::size_type)v14);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = *(void *)(v12 + 8);
      if (v12 == a1 + 80) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
    }
  }

  return std::string::append(a2, " } ]", 4uLL);
}

void sub_339AE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_339B58(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != 1936092532 && *a2 != 1885762592) {
    return 0LL;
  }
  if (a1[23] || a1[24])
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      std::string v16 = "AggregateStream_Broadcast.cpp";
      __int16 v17 = 1024;
      int v18 = 546;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to set a new listener while the old one still exists. We don't handle this.",  (uint8_t *)&v15,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "Attempt to set a new listener while the old one still exists. We don't handle this.");
  }

  __int128 v9 = operator new(0xCuLL);
  *(void *)__int128 v9 = *(void *)a2;
  v9[2] = a2[2];
  unsigned int v10 = (void *)a1[22];
  a1[22] = v9;
  if (v10) {
    operator delete(v10);
  }
  a1[23] = a3;
  a1[24] = a4;
  return 1LL;
}

void sub_339CC8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_339CE4(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != 1936092532 && *a2 != 1885762592) {
    return 0LL;
  }
  __int128 v5 = a1 + 23;
  if (a1[23] != a3 || a1[24] != a4)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    __int128 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "AggregateStream_Broadcast.cpp";
      __int16 v13 = 1024;
      int v14 = 571;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to unregister a listener that is not currently registered",  (uint8_t *)&v11,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to unregister a listener that is not currently registered");
  }

  unsigned int v6 = (void *)a1[22];
  a1[22] = 0LL;
  if (v6) {
    operator delete(v6);
  }
  void *v5 = 0LL;
  v5[1] = 0LL;
  return 1LL;
}

void sub_339E30(_Unwind_Exception *exception_object)
{
}

uint64_t sub_339E50()
{
  return 1LL;
}

uint64_t sub_339E58(uint64_t a1, void *a2)
{
  if ((void *)(a1 + 128) != a2) {
    sub_27FA48( a2,  *(char **)(a1 + 128),  *(char **)(a1 + 136),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3));
  }
  return 0LL;
}

uint64_t sub_339EA4(void *a1, void *a2, int a3)
{
  if (a3 == 1885762657)
  {
    if (a1 + 13 != a2)
    {
      BOOL v4 = (char *)a1[13];
      unsigned int v3 = (char *)a1[14];
      goto LABEL_7;
    }
  }

  else
  {
    if (a3 != 1936092513)
    {
      unsigned int v6 = (os_log_t *)sub_138E8(13);
      std::string::size_type v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        unsigned int v10 = "AggregateStream_Broadcast.cpp";
        __int16 v11 = 1024;
        int v12 = 384;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  (uint8_t *)&v9,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "specified inSelector is not valid");
    }

    if (a1 + 16 != a2)
    {
      BOOL v4 = (char *)a1[16];
      unsigned int v3 = (char *)a1[17];
LABEL_7:
      sub_27FA48(a2, v4, v3, 0x6DB6DB6DB6DB6DB7LL * ((v3 - v4) >> 3));
    }
  }

  return 0LL;
}

void sub_33A000(_Unwind_Exception *exception_object)
{
}

uint64_t sub_33A01C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1936092532LL);
}

uint64_t sub_33A030(uint64_t a1, void *outData, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    __int128 v5 = (os_log_t *)sub_138E8(13);
    unsigned int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        inAddress.mSelector = 136315394;
        *(void *)&inAddress.mScope = "AggregateStream_Broadcast.cpp";
        __int16 v10 = 1024;
        int v11 = 408;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  (uint8_t *)&inAddress,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  *(void *)&inAddress.mScope = 1735159650LL;
  UInt32 ioDataSize = 40;
  inAddress.mSelector = a3;
  return AudioObjectGetPropertyData(*(_DWORD *)(a1 + 208), &inAddress, 0, 0LL, &ioDataSize, outData);
}

void sub_33A168(_Unwind_Exception *a1)
{
}

void sub_33A184()
{
  int v0 = (os_log_t *)sub_138E8(13);
  char v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      BOOL v4 = "AggregateStream_Broadcast.cpp";
      __int16 v5 = 1024;
      int v6 = 456;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Setting virtual stream format is not allowed.  Only physical stream fo rmats may be set.",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error( exception,  "Setting virtual stream format is not allowed.  Only physical stream formats may be set.");
}

void sub_33A244(_Unwind_Exception *exception_object)
{
}

uint64_t sub_33A260(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 != 1885762592)
  {
    int v27 = (os_log_t *)sub_138E8(13);
    int v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 419;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  __int16 v5 = (os_log_t *)sub_138E8(22);
  int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2CC00((std::string *)__p, (uint64_t)a2);
    std::string::size_type v7 = (SBYTE7(v36) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 422;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client requested format: %s", buf, 0x1Cu);
    if (SBYTE7(v36) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v8 = a1 + 152;
  uint64_t v30 = a1;
  uint64_t v9 = *(void *)(a1 + 160);
  if (v9 == v8)
  {
LABEL_30:
    if (*(void *)(v30 + 176))
    {
      int v25 = *(void (**)(void, uint64_t))(v30 + 184);
      if (v25) {
        v25(0LL, 1LL);
      }
    }

    return 0LL;
  }

  else
  {
    while (1)
    {
      int v33 = 0LL;
      uint64_t v34 = 0LL;
      int v32 = 0LL;
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96LL))( *(void *)(v9 + 16),  1LL,  0LL);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 104LL))(v10, &v32, 1885762657LL);
      sub_280EDC((uint64_t)buf, (uint64_t)v32, (uint64_t)v33, a2);
      *(_OWORD *)__p = *(_OWORD *)buf;
      __int128 v36 = *(_OWORD *)&buf[16];
      uint64_t v37 = *(void *)&buf[32];
      int v11 = (os_log_t *)sub_138E8(22);
      int v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96LL))( *(void *)(v9 + 16),  1LL,  0LL);
        uint64_t v14 = *(void *)(v9 + 16);
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120LL))(v14);
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 434;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v13;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v14;
        *(_WORD *)&buf[38] = 1024;
        int v39 = v15;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling SetCurrentFormat on Stream %p of PhysicalDevice %p (ID %u):",  buf,  0x2Cu);
      }

      std::string v16 = (os_log_t *)sub_138E8(22);
      __int16 v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
      {
        sub_2CC00(&v31, (uint64_t)__p);
        int v18 = &v31;
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 435;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v18;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
      }

      uint64_t v19 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96LL))( *(void *)(v9 + 16),  1LL,  0LL);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v19 + 136LL))(v19, __p, 1885762592LL);
      if ((_DWORD)v20)
      {
        uint64_t v21 = (os_log_t *)sub_138E8(22);
        uint64_t v22 = *v21;
        if (*v21)
        {
          if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96LL))( *(void *)(v9 + 16),  1LL,  0LL);
            sub_2CA1C(&v31, v20);
            uint64_t v24 = &v31;
            if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v24 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 437;
            *(_WORD *)&_BYTE buf[18] = 2048;
            *(void *)&buf[20] = v23;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = v24;
            *(_WORD *)&buf[38] = 1024;
            int v39 = v20;
            _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d SetCurrentFormat on stream %p failed with status '%s' (%d).",  buf,  0x2Cu);
          }
        }
      }

      if (v32)
      {
        int v33 = v32;
        operator delete(v32);
      }

      if ((_DWORD)v20) {
        return 560226676LL;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      if (v9 == v8) {
        goto LABEL_30;
      }
    }
  }

void sub_33A748( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
}

void sub_33A7A0()
{
  int v0 = (os_log_t *)sub_138E8(13);
  char v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      BOOL v4 = "AggregateStream_Broadcast.cpp";
      __int16 v5 = 1024;
      int v6 = 510;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Setting virtual stream format is not allowed.  Only physical stream fo rmats may be set.",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error( exception,  "Setting virtual stream format is not allowed.  Only physical stream formats may be set.");
}

void sub_33A860(_Unwind_Exception *exception_object)
{
}

uint64_t sub_33A87C(void *a1, uint64_t *a2, int a3)
{
  if (a3 != 1885762592)
  {
    uint64_t v54 = (os_log_t *)sub_138E8(13);
    v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      __int16 v69 = 1024;
      int v70 = 463;
      _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  __int16 v5 = *(os_log_s **)sub_138E8(22);
  uint64_t v57 = (uint64_t)a1;
  if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2CC00((std::string *)&v82, (uint64_t)a2);
    int v6 = v82.__m_.__opaque[15] >= 0 ? &v82 : (std::mutex *)v82.__m_.__sig;
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    __int16 v69 = 1024;
    int v70 = 467;
    __int16 v71 = 2080;
    uint64_t v72 = (const char *)v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client requested physical format: %s", buf, 0x1Cu);
    if (v82.__m_.__opaque[15] < 0) {
      operator delete((void *)v82.__m_.__sig);
    }
  }

  std::string::size_type v7 = (void *)a1[20];
  if (v7 == a1 + 19)
  {
LABEL_21:
    std::string v16 = a1;
    if (a1[22])
    {
      __int16 v17 = (void (*)(void, uint64_t))a1[23];
      if (v17)
      {
        v17(0LL, 1LL);
        std::string v16 = a1;
      }
    }

    AudioObjectID v18 = (*(uint64_t (**)(void))(*(void *)v16[25] + 120LL))(v16[25]);
    *(void *)&inAddress.mSelector = 0x676C6F626E737274LL;
    inAddress.mElement = 0;
    uint64_t v19 = sub_138E8(13);
    if ((*(_BYTE *)(v19 + 8) & 1) != 0)
    {
      uint64_t v20 = *(os_log_s **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          v81.__cv_.__sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v81.__cv_.__opaque = inAddress.mElement;
          sub_613AC((uint64_t)&v82, (unsigned int *)&v81);
          uint64_t v21 = v82.__m_.__opaque[15] >= 0 ? &v82 : (std::mutex *)v82.__m_.__sig;
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 166;
          __int16 v71 = 2080;
          uint64_t v72 = (const char *)v21;
          __int16 v73 = 1024;
          LODWORD(v74) = v18;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  buf,  0x22u);
          if (v82.__m_.__opaque[15] < 0) {
            operator delete((void *)v82.__m_.__sig);
          }
        }
      }
    }

    AudioObjectID v64 = v18;
    AudioObjectPropertyAddress v65 = inAddress;
    int v66 = 0;
    uint64_t v67 = 0LL;
    double v22 = COERCE_DOUBLE(sub_33B380((uint64_t)&v64));
    if (!v23 && *(double *)a2 == v22)
    {
      uint64_t v37 = sub_138E8(13);
      if ((*(_BYTE *)(v37 + 8) & 1) != 0)
      {
        __int16 v38 = *(os_log_s **)v37;
        if (*(void *)v37)
        {
          if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v69 = 1024;
            int v70 = 219;
            __int16 v71 = 1024;
            LODWORD(v72) = v18;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  buf,  0x18u);
          }
        }
      }

      goto LABEL_94;
    }

    memset(v82.__m_.__opaque, 0, sizeof(v82.__m_.__opaque));
    v82.__m_.__sig = 850045863LL;
    memset(v81.__cv_.__opaque, 0, sizeof(v81.__cv_.__opaque));
    v81.__cv_.__sig = 1018212795LL;
    char v63 = 0;
    sub_7D684(&__p, v18, &inAddress, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v63);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v28.__d_.__rep_) / -1000)
    {
      double v25 = COERCE_DOUBLE(sub_33B380((uint64_t)&v64));
      if (v26) {
        goto LABEL_93;
      }
      double v27 = v25;
      if (i <= 0)
      {
        char v50 = (os_log_t *)sub_138E8(13);
        os_log_t v51 = *v50;
        if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
        {
          AudioObjectPropertyAddress v59 = inAddress;
          sub_613AC((uint64_t)&__lk, &v59.mSelector);
          if (v61 >= 0) {
            p_lk = (std::string *)&__lk;
          }
          else {
            p_lk = (std::string *)__lk.__m_;
          }
          BOOL v53 = *(double *)a2 == v27;
          *(_DWORD *)buf = 136316930;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 248;
          __int16 v71 = 2080;
          uint64_t v72 = "updated";
          __int16 v73 = 2080;
          uint64_t v74 = p_lk;
          __int16 v75 = 2080;
          *(void *)v76 = "updated";
          *(_WORD *)&v76[8] = 1024;
          *(_DWORD *)&v76[10] = v53;
          __int16 v77 = 1024;
          int v78 = 0;
          __int16 v79 = 1024;
          AudioObjectID v80 = v18;
          __int16 v46 = "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.";
          __int16 v47 = v51;
          os_log_type_t v48 = OS_LOG_TYPE_ERROR;
          uint32_t v49 = 66;
LABEL_91:
          _os_log_impl(&dword_0, v47, v48, v46, buf, v49);
          if (v61 < 0) {
            operator delete(__lk.__m_);
          }
        }

        goto LABEL_93;
      }

      v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v29 = sub_138E8(13);
      if ((*(_BYTE *)(v29 + 8) & 1) != 0)
      {
        uint64_t v30 = *(os_log_s **)v29;
        if (*(void *)v29)
        {
          if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v69 = 1024;
            int v70 = 257;
            __int16 v71 = 2080;
            uint64_t v72 = "with timeout";
            __int16 v73 = 1024;
            LODWORD(v74) = v18;
            _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)buf = &qword_48F828;
      buf[8] = 0;
      buf[8] = sub_1A30E4();
      __lk.__m_ = &v82;
      __lk.__owns_ = 1;
      std::mutex::lock(&v82);
      v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v63)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v32 = v31.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v32 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_42;
          }
          v33.__d_.__rep_ = v32 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v33.__d_.__rep_ >= 1) {
            break;
          }
LABEL_60:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v32 || v63) {
            goto LABEL_42;
          }
        }

        std::chrono::steady_clock::now();
        v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v34.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0LL;
          goto LABEL_56;
        }

        if (v34.__d_.__rep_ < 1)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v34.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_56;
          }

void sub_33B2E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_33B380(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.mElement = *(_DWORD *)(a1 + 12);
  sub_9EA74((uint64_t)&v19, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  uint64_t v4 = v19;
  if (v19)
  {
    __int16 v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v17, v4);
        int v7 = v18;
        uint64_t v8 = (void **)v17[0];
        uint64_t v13 = *v2;
        int v14 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v13);
        uint64_t v9 = v17;
        if (v7 < 0) {
          uint64_t v9 = v8;
        }
        if (v16 >= 0) {
          uint64_t v10 = __p;
        }
        else {
          uint64_t v10 = (void **)__p[0];
        }
        AudioObjectID v11 = *(_DWORD *)a1;
        buf.mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        std::chrono::system_clock::time_point v28 = v9;
        __int16 v29 = 2080;
        uint64_t v30 = v10;
        __int16 v31 = 1024;
        AudioObjectID v32 = v11;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }
    }
  }

  if (v21) {
    return v20;
  }
  else {
    return 0LL;
  }
}

void sub_33B528(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_33B548(void *a1)
{
  *a1 = off_4820F0;
  int v2 = (void *)a1[22];
  a1[22] = 0LL;
  if (v2) {
    operator delete(v2);
  }
  sub_68314(a1 + 19);
  UInt32 v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }

  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }

  sub_68314(a1 + 10);
  return sub_F3008((uint64_t)a1);
}

void sub_33B5B4(void **a1, uint64_t a2, UInt32 a3, AudioObjectPropertySelector a4)
{
  if (a4 != 1885762657 && a4 != 1936092513)
  {
    int v78 = (os_log_t *)sub_138E8(13);
    __int16 v79 = *v78;
    if (*v78)
    {
      if (os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v89 = "AggregateStream_Broadcast.cpp";
        __int16 v90 = 1024;
        int v91 = 40;
        _os_log_impl(&dword_0, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  *(void *)&inAddress.mSelector = 0x6F75747073746D23LL;
  inAddress.mElement = 0;
  UInt32 outDataSize = 0;
  AudioObjectID v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v9, &inAddress, 0, 0LL, &outDataSize);
  if (a3 >= 2)
  {
    uint64_t v56 = (os_log_t *)sub_138E8(13);
    uint64_t v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 49;
      __int16 v92 = 1024;
      *(_DWORD *)v93 = a3;
      _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Requested stream index is invalid: %u",  buf,  0x18u);
    }

    uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Requested stream index is invalid: %u");
LABEL_58:
  }

  unint64_t v11 = (unint64_t)outDataSize >> 2;
  if (outDataSize >> 2 <= a3)
  {
    AudioObjectPropertyAddress v59 = (os_log_t *)sub_138E8(13);
    unint64_t v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      unint64_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 50;
      __int16 v92 = 1024;
      *(_DWORD *)v93 = a3;
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = v11 - 1;
      _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Requested stream index %u is out of range: %u",  buf,  0x1Eu);
    }

    uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Requested stream index %u is out of range: %u");
    goto LABEL_58;
  }

  v81[1] = v81;
  uint64_t v12 = 4 * v11;
  __n128 v13 = __chkstk_darwin(PropertyDataSize);
  int v14 = (char *)v81 - ((4 * v11 + 15) & 0x1FFFFFFF0LL);
  AudioObjectID v15 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a2 + 120LL))(a2, v13);
  OSStatus PropertyData = AudioObjectGetPropertyData(v15, &inAddress, 0, 0LL, &outDataSize, v14);
  if (PropertyData)
  {
    char v61 = (os_log_t *)sub_138E8(13);
    uint64_t v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v85, inAddress.mScope);
      char v63 = (v85.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v85 : (std::string *)v85.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 55;
      __int16 v92 = 2080;
      *(void *)v93 = v63;
      _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: AudioObjectGetPropertyData(kAudioDeviceProperty Streams, '%s') failed.",  buf,  0x1Cu);
    }

    AudioObjectID v64 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectID v64 = &off_4865A0;
    v64[2] = PropertyData;
  }

  if (v12 != outDataSize)
  {
    AudioObjectPropertyAddress v65 = (os_log_t *)sub_138E8(13);
    int v66 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      unint64_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 56;
      __int16 v92 = 1024;
      *(_DWORD *)v93 = outDataSize;
      *(_WORD *)&v93[4] = 2048;
      *(void *)&v93[6] = v12;
      _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a size of %u while we expected %lu",  buf,  0x22u);
    }

    uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v67, "The HAL returned a size of %u while we expected %lu");
  }

  __int16 v17 = (os_log_t *)sub_138E8(22);
  char v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == 1936092513) {
      unsigned int v19 = "virtual";
    }
    else {
      unsigned int v19 = "physical";
    }
    int v20 = *(_DWORD *)&v14[4 * a3];
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 128LL))(&v85, a2);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    unint64_t v89 = "AggregateStream_Broadcast.cpp";
    __int16 v90 = 1024;
    int v91 = 60;
    __int16 v92 = 2080;
    *(void *)v93 = v19;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)&v93[10] = v20;
    __int16 v94 = 1024;
    int v95 = v21;
    __int16 v96 = 2112;
    std::string::size_type v97 = v85.__r_.__value_.__r.__words[0];
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d getting %s formats for output stream ID %u on device ID %u (uid: %@).",  buf,  0x32u);
    sub_19DFC((uint64_t)&v85);
  }

  UInt32 ioDataSize = 0;
  v84.mSelector = a4;
  *(void *)&v84.mScope = 1735159650LL;
  uint64_t v22 = AudioObjectGetPropertyDataSize(*(_DWORD *)&v14[4 * a3], &v84, 0, 0LL, &ioDataSize);
  uint64_t v23 = v22;
  uint64_t v24 = a3;
  if ((_DWORD)v22)
  {
    v68 = (os_log_t *)sub_138E8(13);
    __int16 v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v85, v23);
      int v70 = (std::string *)v85.__r_.__value_.__r.__words[0];
      int v71 = *(_DWORD *)&v14[4 * v24];
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v70 = &v85;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      unint64_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 67;
      __int16 v92 = 1024;
      *(_DWORD *)v93 = v23;
      *(_WORD *)&v93[4] = 2080;
      *(void *)&v93[6] = v70;
      __int16 v94 = 1024;
      int v95 = v71;
      _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: Error %d ('%s') determining the number of strea m formats for stream %d",  buf,  0x28u);
    }

    uint64_t v72 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v72 = &off_4865A0;
    v72[2] = v23;
  }

  UInt32 v25 = ioDataSize / 0x38;
  __chkstk_darwin(v22);
  __int16 v27 = (char *)v81 - v26;
  UInt32 ioDataSize = 56 * v25;
  uint64_t v28 = AudioObjectGetPropertyData(*(_DWORD *)&v14[4 * v24], &v84, 0, 0LL, &ioDataSize, (char *)v81 - v26);
  if ((_DWORD)v28)
  {
    __int16 v73 = (os_log_t *)sub_138E8(13);
    uint64_t v74 = *v73;
    if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v85, v28);
      __int16 v75 = (std::string *)v85.__r_.__value_.__r.__words[0];
      int v76 = *(_DWORD *)&v14[4 * v24];
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v75 = &v85;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      unint64_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 74;
      __int16 v92 = 1024;
      *(_DWORD *)v93 = v28;
      *(_WORD *)&v93[4] = 2080;
      *(void *)&v93[6] = v75;
      __int16 v94 = 1024;
      int v95 = v76;
      _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: Error %d ('%s') reading the stream formats for stream %d",  buf,  0x28u);
    }

    __int16 v77 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v77 = &off_4865A0;
    v77[2] = v28;
  }

  if (v25 >= ioDataSize / 0x38) {
    uint64_t v30 = ioDataSize / 0x38;
  }
  else {
    uint64_t v30 = v25;
  }
  if ((_DWORD)v30)
  {
    __int16 v31 = 0LL;
    uint64_t v32 = 0LL;
    *(void *)&__int128 v29 = 136315906LL;
    __int128 v82 = v29;
    do
    {
      std::chrono::steady_clock::time_point v33 = &v27[56 * v32];
      std::chrono::system_clock::time_point v34 = a1[2];
      if (v31 >= (_OWORD *)v34)
      {
        __int16 v38 = *a1;
        uint64_t v39 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v31 - (_BYTE *)*a1) >> 3);
        unint64_t v40 = v39 + 1;
        unint64_t v41 = 0x6DB6DB6DB6DB6DB7LL * ((v34 - (_BYTE *)v38) >> 3);
        if (2 * v41 > v40) {
          unint64_t v40 = 2 * v41;
        }
        if (v41 >= 0x249249249249249LL) {
          unint64_t v42 = 0x492492492492492LL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42) {
          unint64_t v42 = (unint64_t)sub_177AE0(v42);
        }
        else {
          uint64_t v43 = 0LL;
        }
        unint64_t v44 = v42 + 56 * v39;
        __int128 v45 = *(_OWORD *)v33;
        __int128 v46 = *((_OWORD *)v33 + 1);
        __int128 v47 = *((_OWORD *)v33 + 2);
        *(void *)(v44 + 48) = *((void *)v33 + 6);
        *(_OWORD *)(v44 + 16) = v46;
        *(_OWORD *)(v44 + 32) = v47;
        *(_OWORD *)unint64_t v44 = v45;
        if (v31 == v38)
        {
          unint64_t v52 = v42 + 56 * v39;
        }

        else
        {
          unint64_t v48 = v42 + 56 * v39;
          do
          {
            __int128 v49 = *(_OWORD *)((char *)v31 - 56);
            __int128 v50 = *(_OWORD *)((char *)v31 - 40);
            __int128 v51 = *(_OWORD *)((char *)v31 - 24);
            unint64_t v52 = v48 - 56;
            *(void *)(v48 - 8) = *((void *)v31 - 1);
            *(_OWORD *)(v48 - 24) = v51;
            *(_OWORD *)(v48 - 40) = v50;
            *(_OWORD *)(v48 - 56) = v49;
            __int16 v31 = (_OWORD *)((char *)v31 - 56);
            v48 -= 56LL;
          }

          while (v31 != v38);
        }

        __int16 v31 = (_OWORD *)(v44 + 56);
        *a1 = (void *)v52;
        a1[1] = (void *)(v44 + 56);
        a1[2] = (void *)(v42 + 56 * v43);
        if (v38) {
          operator delete(v38);
        }
      }

      else
      {
        __int128 v35 = *(_OWORD *)v33;
        __int128 v36 = *((_OWORD *)v33 + 1);
        __int128 v37 = *((_OWORD *)v33 + 2);
        *((void *)v31 + 6) = *((void *)v33 + 6);
        v31[1] = v36;
        v31[2] = v37;
        *__int16 v31 = v35;
        __int16 v31 = (_OWORD *)((char *)v31 + 56);
      }

      a1[1] = v31;
      BOOL v53 = (os_log_t *)sub_138E8(22);
      uint64_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_DEBUG))
      {
        sub_1548E8(&v85, (uint64_t)&v27[56 * v32]);
        v55 = &v85;
        if ((v85.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          v55 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = v82;
        unint64_t v89 = "AggregateStream_Broadcast.cpp";
        __int16 v90 = 1024;
        int v91 = 82;
        __int16 v92 = 1024;
        *(_DWORD *)v93 = v32;
        *(_WORD *)&v93[4] = 2080;
        *(void *)&v93[6] = v55;
        _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stream Format %u: %s.", buf, 0x22u);
      }

      ++v32;
    }

    while (v32 != v30);
  }

void sub_33C020(_Unwind_Exception *exception_object)
{
  UInt32 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_33C0B0(uint64_t a1, UInt32 a2)
{
  if (!a1)
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    __n128 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      std::chrono::steady_clock::time_point v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 143;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(void *)&inAddress.mSelector = 0x6F75747073746D23LL;
  inAddress.mElement = 0;
  UInt32 outDataSize = 0;
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v4, &inAddress, 0, 0LL, &outDataSize);
  if (a2 >= 2)
  {
    AudioObjectID v15 = (os_log_t *)sub_138E8(13);
    char v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::chrono::steady_clock::time_point v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 150;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = a2;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Requested stream index is invalid: %u",  buf,  0x18u);
    }

    __int16 v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Requested stream index is invalid: %u");
  }

  unint64_t v6 = (unint64_t)outDataSize >> 2;
  if (outDataSize >> 2 <= a2)
  {
    char v18 = (os_log_t *)sub_138E8(13);
    unsigned int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      std::chrono::steady_clock::time_point v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 151;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = a2;
      WORD2(v37[0]) = 1024;
      *(_DWORD *)((char *)v37 + 6) = v6 - 1;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Requested stream index %u is out of range: %u",  buf,  0x1Eu);
    }

    int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Requested stream index %u is out of range: %u");
  }

  uint64_t v7 = 4 * v6;
  __n128 v8 = __chkstk_darwin(PropertyDataSize);
  AudioObjectID v9 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 120LL))(a1, v8);
  OSStatus PropertyData = AudioObjectGetPropertyData( v9,  &inAddress,  0,  0LL,  &outDataSize,  (char *)v28 - ((v7 + 15) & 0x1FFFFFFF0LL));
  if (PropertyData)
  {
    int v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v28, inAddress.mScope);
      uint64_t v23 = v29 >= 0 ? v28 : (void **)v28[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::chrono::steady_clock::time_point v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 155;
      __int16 v36 = 2080;
      v37[0] = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: AudioObjectGetPropertyData(kAudioDeviceProperty Streams, '%s') failed.",  buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }

    uint64_t v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v24 = &off_4865A0;
    v24[2] = PropertyData;
  }

  if (v7 != outDataSize)
  {
    UInt32 v25 = (os_log_t *)sub_138E8(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      std::chrono::steady_clock::time_point v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 156;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = outDataSize;
      WORD2(v37[0]) = 2048;
      *(void *)((char *)v37 + 6) = v7;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a size of %u while we expected %lu",  buf,  0x22u);
    }

    __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "The HAL returned a size of %u while we expected %lu");
  }

  return *(unsigned int *)((char *)v28 + 4 * a2 - ((v7 + 15) & 0x1FFFFFFF0LL));
}

void sub_33C560(_Unwind_Exception *a1)
{
}

uint64_t sub_33C588(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  return sub_F9108(a1);
}

void sub_33C5BC(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  int v2 = (void *)sub_F9108(a1);
  operator delete(v2);
}

uint64_t sub_33C5F4()
{
  return 1LL;
}

BOOL sub_33C5FC(uint64_t a1, uint64_t *a2)
{
  UInt32 v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  __int16 v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v5;
  uint64_t v7 = *a2;
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 144);
    BOOL v2 = v8 != 1885892706 && v8 != 1886216820;
  }

  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return v2;
    }
    return 0;
  }

  if (!v7) {
    return 0;
  }
  return v2;
}

BOOL sub_33C6A4()
{
  uint64_t v0 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 88LL))(v0) == 0;
}

BOOL sub_33C6CC(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&__int128 v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000LL) != 0 && (_DWORD)v3 != 0;
}

void *sub_33C724()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_4825D8;
  return result;
}

void sub_33C748(uint64_t a1, void *a2)
{
  *a2 = &off_4825D8;
}

BOOL sub_33C760(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_33C780()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_482590;
  return result;
}

void sub_33C7A4(uint64_t a1, void *a2)
{
  *a2 = &off_482590;
}

BOOL sub_33C7BC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_33C7DC()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_482548;
  return result;
}

void sub_33C800(uint64_t a1, void *a2)
{
  *a2 = &off_482548;
}

uint64_t sub_33C818(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_33C878()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482500;
  return result;
}

void sub_33C89C(uint64_t a1, void *a2)
{
  *a2 = &off_482500;
}

uint64_t sub_33C8B4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_33C8CC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4824B8;
  return result;
}

void sub_33C8F0(uint64_t a1, void *a2)
{
  *a2 = &off_4824B8;
}

uint64_t sub_33C908(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_33C920()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482470;
  return result;
}

void sub_33C944(uint64_t a1, void *a2)
{
  *a2 = &off_482470;
}

BOOL sub_33C95C(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_33C980()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482428;
  return result;
}

void sub_33C9A4(uint64_t a1, void *a2)
{
  *a2 = &off_482428;
}

uint64_t sub_33C9BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

void *sub_33C9CC(void *result, uint64_t a2, _DWORD *a3)
{
  *uint64_t result = 0LL;
  result[1] = 0LL;
  uint64_t v3 = a2 + 32;
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unint64_t v6 = result;
    uint64_t v7 = a2 + 32;
    do
    {
      uint64_t result = (void *)sub_4930((_DWORD *)(v4 + 32), a3);
      int v8 = (uint64_t *)(v4 + 8);
      if (!(_DWORD)result)
      {
        int v8 = (uint64_t *)v4;
        uint64_t v7 = v4;
      }

      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v7 != v3)
    {
      uint64_t result = (void *)sub_4930(a3, (_DWORD *)(v7 + 32));
      if ((result & 1) == 0)
      {
        uint64_t v10 = *(void *)(v7 + 48);
        uint64_t v9 = *(void *)(v7 + 56);
        if (v9)
        {
          unint64_t v11 = (unint64_t *)(v9 + 8);
          do
            unint64_t v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }

        void *v6 = v10;
        v6[1] = v9;
      }
    }
  }

  return result;
}

uint64_t sub_33CA6C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 240))
  {
    sub_8DF68(&v72, a1);
    sub_8DFA8(&__s1, a1);
    sub_8C7FC(v67, a1);
    CFRetain(@"PlayAndRecord");
    sub_7F234(&v63, @"PlayAndRecord");
    if (!v63)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_48100((uint64_t)&v64, (const __CFString *)v63);
    uint64_t v3 = v74;
    int v4 = (char)v74;
    size_t v5 = v73;
    if ((v74 & 0x80u) == 0) {
      size_t v6 = v74;
    }
    else {
      size_t v6 = v73;
    }
    uint64_t v7 = v66;
    if ((v66 & 0x80u) != 0) {
      uint64_t v7 = v65;
    }
    if (v6 == v7)
    {
      if ((v66 & 0x80u) == 0) {
        int v8 = (unsigned __int8 *)&v64;
      }
      else {
        int v8 = (unsigned __int8 *)v64;
      }
      if ((v74 & 0x80) == 0)
      {
        if (v74)
        {
          uint64_t v9 = &v72;
          uint64_t v10 = v74;
          while (*(unsigned __int8 *)v9 == *v8)
          {
            uint64_t v9 = (void **)((char *)v9 + 1);
            ++v8;
            if (!--v10) {
              goto LABEL_34;
            }
          }

          goto LABEL_20;
        }

void sub_33D050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void *sub_33D16C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482658;
  return result;
}

void sub_33D190(uint64_t a1, void *a2)
{
  *a2 = &off_482658;
}

uint64_t sub_33D1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (!sub_7192C(1885892674, *a4, a4[1])) {
    return 1LL;
  }
  int v6 = *(_DWORD *)(a2 + 144);
  if (v6 == 1885433888) {
    return 1LL;
  }
  if (v6 != 1885892674) {
    return sub_1F66B8(1701868400, *a4, a4[1]);
  }
  uint64_t result = sub_1F7024(a2, (uint64_t)*a4, (uint64_t)a4[1]);
  if ((_DWORD)result) {
    return sub_1F6EF0(a2);
  }
  return result;
}

void *sub_33D244()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4826A0;
  return result;
}

void sub_33D268(uint64_t a1, void *a2)
{
  *a2 = &off_4826A0;
}

uint64_t sub_33D280(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  uint64_t v5 = sub_5954C();
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_4A1998);
  if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_4A1998)) {
    goto LABEL_3;
  }
  uint64_t v39 = 0x706E756C63726E67LL;
  BOOL v40 = &off_4826E8;
  uint64_t v42 = &v40;
  uint64_t v43 = 0x706C656F63736176LL;
  v44[0] = &off_482730;
  v44[3] = v44;
  v44[4] = 0x706C656F63766D20LL;
  v45[0] = &off_482778;
  v45[3] = v45;
  v45[4] = 0x706C656F63766D67LL;
  v46[0] = &off_4827C0;
  v46[3] = v46;
  v46[4] = 0x706C656F63706172LL;
  v47[0] = &off_482808;
  v47[3] = v47;
  v47[4] = 0x7068704263736176LL;
  v48[0] = &off_482850;
  v48[3] = v48;
  v48[4] = 0x7068704263666D61LL;
  v49[0] = &off_482898;
  v49[3] = v49;
  v49[4] = 0x7061707363736176LL;
  v50[0] = &off_4828E0;
  v50[3] = v50;
  v50[4] = 0x7061706163736176LL;
  v51[0] = &off_482928;
  v51[3] = v51;
  v51[4] = 0x7068646D63736176LL;
  v52[0] = &off_482970;
  v52[3] = v52;
  v52[4] = 0x7075696F63736176LL;
  v53[0] = &off_4829B8;
  v53[3] = v53;
  v53[4] = 0x7073706B63736176LL;
  v54[0] = &off_482A00;
  v54[3] = v54;
  v54[4] = 0x7061707363706172LL;
  v55[0] = &off_482A48;
  v55[3] = v55;
  v55[4] = 0x7061706163706172LL;
  v56[0] = &off_482A90;
  v56[3] = v56;
  v56[4] = 0x7068646D63706172LL;
  v57[0] = &off_482AD8;
  v57[3] = v57;
  v57[4] = 0x7075696F63706172LL;
  v58[0] = &off_482B20;
  v58[3] = v58;
  v58[4] = 0x7068704263706172LL;
  v59[0] = &off_482B68;
  v59[3] = v59;
  v59[4] = 0x7073706B63706172LL;
  v60[0] = &off_482BB0;
  v60[3] = v60;
  sub_33D820(&v39, 18LL);
  uint64_t v34 = 720LL;
  do
  {
    int v35 = *(uint64_t **)((char *)&v38 + v34);
    if ((uint64_t *)((char *)&v39 + v34 - 32) == v35)
    {
      int v35 = (uint64_t *)((char *)&v39 + v34 - 32);
      uint64_t v36 = 4LL;
    }

    else
    {
      if (!v35) {
        goto LABEL_61;
      }
      uint64_t v36 = 5LL;
    }

    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_61:
    v34 -= 40LL;
  }

  while (v34);
  __cxa_guard_release(&qword_4A1998);
LABEL_3:
  for (uint64_t i = *a2; ; ++i)
  {
    uint64_t v8 = *i;
    if (!*(_DWORD *)(*i + 4) && *(_DWORD *)v8 == 1986291046) {
      break;
    }
  }

  if (!*(void *)(v8 + 32)) {
    return 0LL;
  }
  sub_B8CBC(&v37, (uint64_t *)(*(void *)(v8 + 24) + 32LL), "", 184);
  if (!v37) {
    goto LABEL_46;
  }
  uint64_t v9 = qword_4A1988;
  if (!qword_4A1988) {
    goto LABEL_46;
  }
  unsigned int v10 = *(_DWORD *)(v37 + 144);
  unsigned int v11 = *a3;
  unsigned __int8 v12 = &qword_4A1988;
  do
  {
    unsigned int v13 = *(_DWORD *)(v9 + 32);
    BOOL v14 = v13 == v11;
    if (v13 >= v11) {
      char v15 = 1;
    }
    else {
      char v15 = -1;
    }
    if (v14)
    {
      unsigned int v16 = *(_DWORD *)(v9 + 36);
      BOOL v17 = v16 == v10;
      char v15 = v16 >= v10 ? 1 : -1;
      if (v17) {
        char v15 = 0;
      }
    }

    BOOL v18 = (v15 & 0x80) == 0LL;
    if (v15 < 0) {
      unint64_t v19 = (uint64_t *)(v9 + 8);
    }
    else {
      unint64_t v19 = (uint64_t *)v9;
    }
    if (v18) {
      unsigned __int8 v12 = (uint64_t *)v9;
    }
    uint64_t v9 = *v19;
  }

  while (*v19);
  if (v12 == &qword_4A1988) {
    goto LABEL_46;
  }
  unsigned int v20 = *((_DWORD *)v12 + 8);
  BOOL v21 = v11 == v20;
  if (v11 >= v20) {
    char v22 = 1;
  }
  else {
    char v22 = -1;
  }
  if (v21)
  {
    unsigned int v23 = *((_DWORD *)v12 + 9);
    BOOL v24 = v10 >= v23;
    BOOL v25 = v10 == v23;
    char v26 = -1;
    if (v24) {
      char v26 = 1;
    }
    if (v25) {
      char v22 = 0;
    }
    else {
      char v22 = v26;
    }
  }

  if (v22 < 0)
  {
LABEL_46:
    uint64_t v27 = 0LL;
  }

  else
  {
    sub_82AF0((uint64_t)&v39, (uint64_t)(v12 + 5));
    if (!v41) {
      sub_82CEC();
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t *))(*v41 + 48))(v41);
    BOOL v28 = v41;
    if (v41 == &v39)
    {
      uint64_t v29 = 4LL;
      BOOL v28 = &v39;
LABEL_53:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }

    else if (v41)
    {
      uint64_t v29 = 5LL;
      goto LABEL_53;
    }
  }

  int v31 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  return v27;
}

void sub_33D748(_Unwind_Exception *a1)
{
  uint64_t v3 = 720LL;
  while (1)
  {
    int v4 = *(void **)(v1 + v3 - 8);
    if ((void *)(v1 + v3 - 32) == v4) {
      break;
    }
    if (v4)
    {
      uint64_t v5 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }

    v3 -= 40LL;
    if (!v3)
    {
      __cxa_guard_abort(&qword_4A1998);
      _Unwind_Resume(a1);
    }
  }

  int v4 = (void *)(v1 + v3 - 32);
  uint64_t v5 = 4LL;
  goto LABEL_6;
}

uint64_t *sub_33D820(uint64_t *result, uint64_t a2)
{
  qword_4A1990 = 0LL;
  qword_4A1988 = 0LL;
  qword_4A1980 = (uint64_t)&qword_4A1988;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0LL;
    int v4 = &result[5 * a2];
    uint64_t v5 = &qword_4A1988;
    while (v5 != &qword_4A1988)
    {
      unsigned __int8 v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          uint64_t v7 = v6;
          unsigned __int8 v6 = (uint64_t *)v6[1];
        }

        while (v6);
      }

      else
      {
        uint64_t v8 = &qword_4A1988;
        do
        {
          uint64_t v7 = (uint64_t *)v8[2];
          BOOL v11 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }

        while (v11);
      }

      unsigned int v9 = *((_DWORD *)v7 + 8);
      unsigned int v10 = *(_DWORD *)v2;
      BOOL v11 = v9 == *(_DWORD *)v2;
      if (v9 >= *(_DWORD *)v2) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unsigned int v13 = *((_DWORD *)v7 + 9);
        unsigned int v14 = *((_DWORD *)v2 + 1);
        BOOL v15 = v13 == v14;
        char v12 = v13 >= v14 ? 1 : -1;
        if (v15) {
          char v12 = 0;
        }
      }

      if (v12 < 0) {
        goto LABEL_41;
      }
      if (v3)
      {
        unsigned int v16 = *((_DWORD *)v2 + 1);
        BOOL v17 = &qword_4A1988;
        while (1)
        {
          while (1)
          {
            BOOL v18 = (uint64_t *)v3;
            unsigned int v19 = *(_DWORD *)(v3 + 32);
            if (v10 == v19) {
              break;
            }
            if (v10 >= v19)
            {
              if (v19 >= v10) {
                char v23 = 1;
              }
              else {
                char v23 = -1;
              }
              if ((v23 & 0x80) == 0) {
                goto LABEL_47;
              }
              goto LABEL_39;
            }

void sub_33DA00(_Unwind_Exception *a1)
{
}

void sub_33DA28(void *a1)
{
  if (a1)
  {
    sub_33DA28(*a1);
    sub_33DA28(a1[1]);
    uint64_t v2 = (void *)a1[8];
    if (v2 == a1 + 5)
    {
      uint64_t v3 = 4LL;
      uint64_t v2 = a1 + 5;
    }

    else
    {
      if (!v2)
      {
LABEL_8:
        operator delete(a1);
        return;
      }

      uint64_t v3 = 5LL;
    }

    (*(void (**)(void))(*v2 + 8 * v3))();
    goto LABEL_8;
  }

void *sub_33DA98()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482BB0;
  return result;
}

void sub_33DABC(uint64_t a1, void *a2)
{
  *a2 = &off_482BB0;
}

void *sub_33DAE0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482B68;
  return result;
}

void sub_33DB04(uint64_t a1, void *a2)
{
  *a2 = &off_482B68;
}

uint64_t sub_33DB1C()
{
  return 1LL;
}

void *sub_33DB2C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482B20;
  return result;
}

void sub_33DB50(uint64_t a1, void *a2)
{
  *a2 = &off_482B20;
}

uint64_t sub_33DB68()
{
  return 1LL;
}

void *sub_33DB78()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482AD8;
  return result;
}

void sub_33DB9C(uint64_t a1, void *a2)
{
  *a2 = &off_482AD8;
}

uint64_t sub_33DBB4()
{
  return 1LL;
}

void *sub_33DBC4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482A90;
  return result;
}

void sub_33DBE8(uint64_t a1, void *a2)
{
  *a2 = &off_482A90;
}

uint64_t sub_33DC00()
{
  return 1LL;
}

void *sub_33DC10()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482A48;
  return result;
}

void sub_33DC34(uint64_t a1, void *a2)
{
  *a2 = &off_482A48;
}

uint64_t sub_33DC4C()
{
  return 1LL;
}

void *sub_33DC5C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482A00;
  return result;
}

void sub_33DC80(uint64_t a1, void *a2)
{
  *a2 = &off_482A00;
}

void *sub_33DCA4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4829B8;
  return result;
}

void sub_33DCC8(uint64_t a1, void *a2)
{
  *a2 = &off_4829B8;
}

uint64_t sub_33DCE0()
{
  return 1LL;
}

void *sub_33DCF0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482970;
  return result;
}

void sub_33DD14(uint64_t a1, void *a2)
{
  *a2 = &off_482970;
}

uint64_t sub_33DD2C()
{
  return 1LL;
}

void *sub_33DD3C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482928;
  return result;
}

void sub_33DD60(uint64_t a1, void *a2)
{
  *a2 = &off_482928;
}

uint64_t sub_33DD78()
{
  return 1LL;
}

void *sub_33DD88()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4828E0;
  return result;
}

void sub_33DDAC(uint64_t a1, void *a2)
{
  *a2 = &off_4828E0;
}

uint64_t sub_33DDC4()
{
  return 1LL;
}

void *sub_33DDD4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482898;
  return result;
}

void sub_33DDF8(uint64_t a1, void *a2)
{
  *a2 = &off_482898;
}

uint64_t sub_33DE10()
{
  return 1LL;
}

void *sub_33DE20()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482850;
  return result;
}

void sub_33DE44(uint64_t a1, void *a2)
{
  *a2 = &off_482850;
}

uint64_t sub_33DE5C()
{
  return 1LL;
}

void *sub_33DE6C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482808;
  return result;
}

void sub_33DE90(uint64_t a1, void *a2)
{
  *a2 = &off_482808;
}

BOOL sub_33DEA8()
{
  uint64_t v0 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96LL))(v0) != 0;
}

void *sub_33DED8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4827C0;
  return result;
}

void sub_33DEFC(uint64_t a1, void *a2)
{
  *a2 = &off_4827C0;
}

BOOL sub_33DF14()
{
  uint64_t v0 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96LL))(v0) != 0;
}

void *sub_33DF44()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482778;
  return result;
}

void sub_33DF68(uint64_t a1, void *a2)
{
  *a2 = &off_482778;
}

BOOL sub_33DF80()
{
  uint64_t v0 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96LL))(v0) != 0;
}

void *sub_33DFB0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482730;
  return result;
}

void sub_33DFD4(uint64_t a1, void *a2)
{
  *a2 = &off_482730;
}

BOOL sub_33DFEC()
{
  uint64_t v0 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96LL))(v0) != 0;
}

void *sub_33E01C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4826E8;
  return result;
}

void sub_33E040(uint64_t a1, void *a2)
{
  *a2 = &off_4826E8;
}

BOOL sub_33E058()
{
  uint64_t v0 = (unsigned int (***)(void))sub_5954C();
  return (**v0)(v0) == 1;
}

void *sub_33E088()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482BF8;
  return result;
}

void sub_33E0AC(uint64_t a1, void *a2)
{
  *a2 = &off_482BF8;
}

uint64_t sub_33E0C4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (*a4 == 1667657057)
  {
    int v4 = (int *)qword_4A1960;
    if (qword_4A1960 != unk_4A1968)
    {
      do
      {
        if (*(void *)(a2 + 8) == a2)
        {
          uint64_t result = 0LL;
        }

        else
        {
          int v5 = *v4;
          uint64_t v6 = *(void *)(a2 + 8);
          do
          {
            BOOL v7 = *(_DWORD *)(v6 + 16) == v5 || *(_DWORD *)(v6 + 20) == v5;
            uint64_t result = v7;
            if (v7) {
              break;
            }
            uint64_t v6 = *(void *)(v6 + 8);
          }

          while (v6 != a2);
        }

        if ((result & 1) != 0) {
          break;
        }
        ++v4;
      }

      while (v4 != (int *)unk_4A1968);
      return result;
    }

    return 0LL;
  }

  unsigned int v9 = (int *)qword_4A1940;
  if (qword_4A1940 == unk_4A1948) {
    return 0LL;
  }
  do
  {
    if (*(void *)(a2 + 8) == a2)
    {
      uint64_t result = 0LL;
    }

    else
    {
      int v10 = *v9;
      uint64_t v11 = *(void *)(a2 + 8);
      do
      {
        BOOL v12 = *(_DWORD *)(v11 + 16) == v10 || *(_DWORD *)(v11 + 20) == v10;
        uint64_t result = v12;
        if (v12) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
      }

      while (v11 != a2);
    }

    if ((result & 1) != 0) {
      break;
    }
    ++v9;
  }

  while (v9 != (int *)unk_4A1948);
  return result;
}

void *sub_33E1B0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482C40;
  return result;
}

void sub_33E1D4(uint64_t a1, void *a2)
{
  *a2 = &off_482C40;
}

uint64_t sub_33E1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0LL;
  }
  do
  {
    BOOL v3 = *(_DWORD *)(v2 + 16) == 1886216809 || *(_DWORD *)(v2 + 20) == 1886216809;
    uint64_t result = v3;
    if (v3) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }

  while (v2 != a2);
  return result;
}

uint64_t sub_33E22C(uint64_t result, int a2)
{
  if (a2 <= 1885696610)
  {
    if (a2 == 1752200307 || a2 == 1819309171) {
      goto LABEL_12;
    }
    if (a2 == 1836346212)
    {
      BOOL v3 = &off_482CD0;
LABEL_14:
      *(void *)uint64_t result = v3;
      goto LABEL_15;
    }

void *sub_33E2F4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482D18;
  return result;
}

void sub_33E318(uint64_t a1, void *a2)
{
  *a2 = &off_482D18;
}

uint64_t sub_33E330()
{
  return 0LL;
}

void *sub_33E340()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482CD0;
  return result;
}

void sub_33E364(uint64_t a1, void *a2)
{
  *a2 = &off_482CD0;
}

BOOL sub_33E37C(uint64_t a1, uint64_t **a2, int *a3)
{
  int v3 = *a3;
  if (*a3 > 1668313714)
  {
    if (v3 == 1668703084 || v3 == 1668576377) {
      return sub_7192C(1886216809, *a2, a2[1]);
    }
    if (v3 != 1668313715) {
      return 0LL;
    }
  }

  else if (v3 != 1668301427 && v3 != 1668309362 && v3 != 1668313666)
  {
    return 0LL;
  }

  int v7 = a3[1];
  if (v7 > 1919776354)
  {
    if (v7 > 1987081832)
    {
      if (v7 == 1987081839) {
        return sub_7192C(1886216809, *a2, a2[1]);
      }
      unsigned __int16 v9 = 30313;
    }

    else
    {
      if (v7 == 1919776355) {
        return sub_7192C(1886216809, *a2, a2[1]);
      }
      unsigned __int16 v9 = 26467;
    }

    int v8 = v9 | 0x76700000;
LABEL_27:
    if (v7 != v8) {
      return 0LL;
    }
    return sub_7192C(1886216809, *a2, a2[1]);
  }

  if (v7 > 1768779618)
  {
    if (v7 == 1768779619) {
      return sub_7192C(1886216809, *a2, a2[1]);
    }
    int v8 = 1768781411;
    goto LABEL_27;
  }

  if (v7 != 1735222132)
  {
    int v8 = 1768057203;
    goto LABEL_27;
  }

  return sub_7192C(1886216809, *a2, a2[1]);
}

_DWORD *sub_33E4C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &off_482C88;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_33E500(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &off_482C88;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_33E520(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  BOOL v2 = 1LL;
  if (v1 > 1935962991)
  {
    BOOL v3 = v1 == 1936290409;
    int v4 = 1935962992;
  }

  else
  {
    BOOL v3 = v1 == 1819309171;
    int v4 = 1885696611;
  }

  if (v3 || v1 == v4)
  {
    uint64_t v6 = (void *)sub_EAD14();
    CFStringRef v8 = CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
    char v9 = 1;
    BOOL v2 = sub_EAE28(v6, &v8) != 0;
    sub_19DFC((uint64_t)&v8);
  }

  return v2;
}

void sub_33E5D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t (***sub_33E5E8(uint64_t (***result)(), int a2))()
{
  BOOL v2 = &off_482D60;
  if (a2 <= 1885696610)
  {
    if (a2 != 1752200307 && a2 != 1819309171)
    {
      if (a2 != 1836346212)
      {
LABEL_12:
        BOOL v2 = &off_482DF0;
        goto LABEL_13;
      }

      BOOL v2 = &off_482DA8;
    }
  }

  else
  {
    if (a2 > 1936290408)
    {
      if (a2 == 1936290409) {
        goto LABEL_13;
      }
      int v3 = 1936614497;
    }

    else
    {
      if (a2 == 1885696611) {
        goto LABEL_13;
      }
      int v3 = 1935962992;
    }

    if (a2 != v3) {
      goto LABEL_12;
    }
  }

void *sub_33E6A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482D60;
  return result;
}

void sub_33E6C8(uint64_t a1, void *a2)
{
  *a2 = &off_482D60;
}

uint64_t sub_33E6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0LL;
  }
  do
  {
    BOOL v3 = *(_DWORD *)(v2 + 16) == 1886614640 || *(_DWORD *)(v2 + 20) == 1886614640;
    uint64_t result = v3;
    if (v3) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }

  while (v2 != a2);
  return result;
}

void *sub_33E728()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482DA8;
  return result;
}

void sub_33E74C(uint64_t a1, void *a2)
{
  *a2 = &off_482DA8;
}

uint64_t sub_33E764(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  BOOL v25 = 0LL;
  uint64_t v26 = 0LL;
  BOOL v24 = (uint64_t *)&v25;
  BOOL v3 = *a3;
  int v4 = a3[1];
  if (*a3 == v4)
  {
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  while (1)
  {
    uint64_t v6 = *v3;
    if (!*(_DWORD *)(*v3 + 4) && *(_DWORD *)v6 == 1986291046) {
      break;
    }
    if (++v3 == v4) {
      goto LABEL_5;
    }
  }

  unint64_t v33 = &off_475CA0;
  int v35 = (uint64_t *)&v33;
  sub_1F6154((uint64_t)&v31, (void *)(v6 + 16), (uint64_t)&v33);
  char v9 = (uint64_t (***)())v35;
  if (v35 == (uint64_t *)&v33)
  {
    uint64_t v10 = 4LL;
    char v9 = &v33;
  }

  else
  {
    if (!v35) {
      goto LABEL_12;
    }
    uint64_t v10 = 5LL;
  }

  (*v9)[v10]();
LABEL_12:
  uint64_t v11 = v31;
  if (v31 != v32)
  {
    do
    {
      sub_B8F68(&v27, v11 + 4, "", 1043);
      sub_2040F4(&v29, v27);
      BOOL v12 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      BOOL v15 = v30;
      if (v30)
      {
        sub_13315C(&v24, (unint64_t *)&v29, &v29);
        std::__shared_weak_count::__release_weak(v15);
      }

      unsigned int v16 = (void *)v11[1];
      if (v16)
      {
        do
        {
          BOOL v17 = (void **)v16;
          unsigned int v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          BOOL v17 = (void **)v11[2];
          BOOL v20 = *v17 == v11;
          uint64_t v11 = v17;
        }

        while (!v20);
      }

      uint64_t v11 = v17;
    }

    while (v17 != v32);
  }

  sub_FF3B8(v32[0]);
  if (!v26) {
    goto LABEL_5;
  }
  sub_B8F68((uint64_t *)&v33, v24 + 4, "", 280);
  uint64_t v18 = *(void *)(a2 + 8);
  if (v18 == a2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    int v19 = *((_DWORD *)v33 + 36);
    do
    {
      BOOL v20 = *(_DWORD *)(v18 + 16) == v19 || *(_DWORD *)(v18 + 20) == v19;
      uint64_t v7 = v20;
      if (v20) {
        break;
      }
      uint64_t v18 = *(void *)(v18 + 8);
    }

    while (v18 != a2);
  }

  BOOL v21 = v34;
  if (v34)
  {
    char v22 = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

LABEL_6:
  sub_FF3B8(v25);
  return v7;
}

void sub_33E9DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void *sub_33EA5C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_482DF0;
  return result;
}

void sub_33EA80(uint64_t a1, void *a2)
{
  *a2 = &off_482DF0;
}

uint64_t sub_33EA98()
{
  return 0LL;
}

uint64_t sub_33EAA0( int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vdprintf(*a1, a2, &a9);
}

uint64_t sub_33EACC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  for (uint64_t i = 16LL; i != 48; i += 8LL)
  {
    uint64_t v10 = *(const void **)(a1 + i);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + i) = 0LL;
    }
  }

  uint64_t v11 = *(int **)(a1 + 48);
  if (v11)
  {
    if (*v11 != -1)
    {
      sub_33EAA0(*(int **)(a1 + 48), "*** done.\n", a3, a4, a5, a6, a7, a8, v13);
      close(*v11);
    }

    operator delete(v11);
  }

  return sub_19DFC(a1);
}

uint64_t sub_33EB48()
{
  unint64_t v0 = atomic_load(&qword_4A19A8);
  if (v0 != -1LL)
  {
    int v4 = &v2;
    BOOL v3 = &v4;
    std::__call_once(&qword_4A19A8, &v3, (void (__cdecl *)(void *))sub_33EBA4);
  }

  return qword_4A19A0;
}

os_log_t sub_33EBA4()
{
  unint64_t v0 = operator new(0x10uLL);
  v0[1] = 0LL;
  os_log_t result = os_log_create("com.apple.coreaudio.utility", "TPLM");
  *unint64_t v0 = result;
  qword_4A19A0 = (uint64_t)v0;
  return result;
}

uint64_t sub_33EBEC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = **(const __CFString ***)a2;
  if (v6 && CFStringHasPrefix(v6, @"/")) {
    uint64_t v7 = &stru_486F70;
  }
  else {
    uint64_t v7 = *(const __CFString **)a1;
  }
  MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, v7);
  uint64_t v9 = 0LL;
  CFMutableStringRef theString = MutableCopy;
  char v46 = 1;
  if (!MutableCopy) {
    goto LABEL_8;
  }
LABEL_6:
  CFStringAppend(MutableCopy, @"/");
  if (theString) {
    CFStringAppend(theString, **(CFStringRef **)(a2 + v9));
  }
LABEL_8:
  while (v9 != 16)
  {
    MutableCopy = theString;
    v9 += 8LL;
    if (theString) {
      goto LABEL_6;
    }
  }

  size_t v10 = strlen(off_482E28[a3]);
  suffix = CFStringCreateWithBytesNoCopy( kCFAllocatorDefault,  (const UInt8 *)off_482E28[a3],  v10,  0x600u,  0,  kCFAllocatorNull);
  if (theString)
  {
    uint64_t v11 = theString;
    if (!CFStringHasSuffix(theString, suffix))
    {
      CFStringAppend(theString, suffix);
      uint64_t v11 = theString;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 512LL);
  char v13 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v11, kCFURLPOSIXPathStyle, 0);
  if (v13
    && (unint64_t v14 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v13), CFRelease(v13), v14)
    && (CFReadStreamOpen(v14),
        BOOL v15 = (const __CFDictionary *)CFPropertyListCreateWithStream(kCFAllocatorDefault, v14, 0LL, 0LL, 0LL, 0LL),
        CFReadStreamClose(v14),
        CFRelease(v14),
        v15))
  {
    CFRelease(Mutable);
    unsigned int v16 = *(const void ***)(a2 + 16);
    BOOL v17 = *v16;
    if (a3)
    {
      CFMutableStringRef key = (CFMutableStringRef)*v16;
    }

    else
    {
      uint64_t v19 = 0LL;
      BOOL v20 = 0LL;
      BOOL v21 = 0LL;
      CFMutableStringRef key = theString;
      __int128 v47 = 0LL;
      do
      {
        char v22 = off_482E48[v19];
        if (!CFDictionaryContainsKey(v15, v22))
        {
          if (!v21)
          {
            CFIndex Count = CFDictionaryGetCount(v15);
            BOOL v20 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 2, v15);
            __int128 v47 = v20;
          }

          CFDictionaryAddValue(v20, v22, v17);
          BOOL v21 = v20;
        }

        ++v19;
      }

      while (v19 != 2);
      if (v20) {
        CFRelease(v15);
      }
      else {
        BOOL v20 = v15;
      }
      BOOL v15 = v20;
    }

    Value = (const __CFString *)CFDictionaryGetValue(v15, @"name");
    uint64_t v25 = a3;
    if (Value)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        uint64_t v42 = (CFDictionaryRef *)(a1 + 8 * v25 + 16);
        CFIndex v27 = CFDictionaryGetCount(*v42);
        CFIndex v28 = v27;
        if (v27 >= 1)
        {
          else {
            size_t v29 = 8 * v27;
          }
          uint64_t v30 = (const void **)operator new[](v29);
          int v31 = (const void **)operator new[](v29);
          CFDictionaryGetKeysAndValues(*v42, v30, v31);
          for (uint64_t i = 0LL; v28 != i; ++i)
          {
            if (!v30[i]) {
              break;
            }
            unint64_t v33 = (const __CFDictionary *)v31[i];
            if (!v33) {
              break;
            }
            CFTypeID v34 = CFDictionaryGetTypeID();
            if (v34 == CFGetTypeID(v33))
            {
              int v35 = (const __CFString *)CFDictionaryGetValue(v33, @"name");
              if (v35)
              {
                CFTypeID v36 = CFStringGetTypeID();
                if (v36 == CFGetTypeID(v35) && CFStringCompare(v35, Value, 0LL) == kCFCompareEqualTo)
                {
                  CFDictionaryRemoveValue(*v42, v30[i]);
                  break;
                }
              }
            }
          }

          operator delete[](v30);
          operator delete[](v31);
        }
      }
    }

    uint64_t v37 = a1 + 8 * v25;
    uint64_t v39 = *(__CFDictionary **)(v37 + 16);
    int v38 = (const __CFString **)(v37 + 16);
    CFDictionarySetValue(v39, key, v15);
    uint64_t v40 = *(void *)(a1 + 48);
    if (v40) {
      sub_33F070(*v38, "@@ Strips Nov 10 2024 02:22:14", v40);
    }
    uint64_t v18 = 0LL;
  }

  else
  {
    if (Mutable)
    {
      CFStringAppend(Mutable, @"Error loading plist file ");
      CFStringAppend(Mutable, v11);
      CFStringAppend(Mutable, @"\n");
    }

    CFRelease(Mutable);
    BOOL v15 = 0LL;
    uint64_t v18 = 0xFFFFFFFFLL;
  }

  if (suffix) {
    CFRelease(suffix);
  }
  if (v15) {
    CFRelease(v15);
  }
  sub_D9A64((uint64_t)&theString);
  return v18;
}

void sub_33F034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_33F610((const void **)va1);
  sub_D9A64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_33F070(const __CFString *a1, const char *a2, uint64_t a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (CFStringGetTypeID() == v6)
  {
    int v12 = *(_DWORD *)(a3 + 4);
    if (v12 >= 127) {
      size_t v13 = 127LL;
    }
    else {
      size_t v13 = v12;
    }
    valuePtr[(int)v13] = 0;
    if ((_DWORD)v13) {
      memset(&valuePtr[(int)v13 - 1 - (v13 - 1)], 32, v13);
    }
    sub_33EAA0((int *)a3, "%s", v13, v7, v8, v9, v10, v11, (char)valuePtr);
    CFGetRetainCount(a1);
    CFStringGetCStringPtr(a1, 0);
    sub_33EAA0((int *)a3, "'%s' | String{%d} | %s\n", v14, v15, v16, v17, v18, v19, (char)a2);
  }

  else if (CFNumberGetTypeID() == v6)
  {
    CFNumberType Type = CFNumberGetType((CFNumberRef)a1);
    int v26 = *(_DWORD *)(a3 + 4);
    if (v26 >= 127) {
      size_t v27 = 127LL;
    }
    else {
      size_t v27 = v26;
    }
    valuePtr[(int)v27] = 0;
    if ((_DWORD)v27) {
      memset(&valuePtr[(int)v27 - 1 - (v27 - 1)], 32, v27);
    }
    sub_33EAA0((int *)a3, "%s", v27, v20, v21, v22, v23, v24, (char)valuePtr);
    if ((unint64_t)Type <= kCFNumberDoubleType)
    {
      if (((1LL << Type) & 0x3060) != 0)
      {
        CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
        CFGetRetainCount(a1);
        sub_33EAA0((int *)a3, "'%s' | Number(float){%d} | %f\n", v64, v65, v66, v67, v68, v69, (char)a2);
        return;
      }

      if (((1LL << Type) & 0x82) != 0)
      {
        CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
        CFGetRetainCount(a1);
        sub_33EAA0((int *)a3, "'%s' | Number(SInt8){%d} | 0x%02x\n", v83, v84, v85, v86, v87, v88, (char)a2);
        return;
      }

      if (((1LL << Type) & 0x104) != 0)
      {
        CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
        CFGetRetainCount(a1);
        sub_33EAA0((int *)a3, "'%s' | Number(SInt16){%d} | 0x%04x\n", v28, v29, v30, v31, v32, v33, (char)a2);
        return;
      }
    }

    CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
    CFGetRetainCount(a1);
    sub_33EAA0( (int *)a3,  "'%s' | Number(SInt32){%d} | %-6d 0x%08x %c%c%c%c\n",  v97,  v98,  v99,  v100,  v101,  v102,  (char)a2);
  }

  else if (CFDictionaryGetTypeID() == v6)
  {
    int v39 = *(_DWORD *)(a3 + 4);
    if (v39 >= 127) {
      size_t v40 = 127LL;
    }
    else {
      size_t v40 = v39;
    }
    valuePtr[(int)v40] = 0;
    if ((_DWORD)v40) {
      memset(&valuePtr[(int)v40 - 1 - (v40 - 1)], 32, v40);
    }
    sub_33EAA0((int *)a3, "%s", v40, v34, v35, v36, v37, v38, (char)valuePtr);
    CFGetRetainCount(a1);
    CFDictionaryGetCount((CFDictionaryRef)a1);
    sub_33EAA0((int *)a3, "'%s' | Dictionary{%d} | %d key/value pairs\n", v41, v42, v43, v44, v45, v46, (char)a2);
    if (!strcmp("aupreset", a2)) {
      *(_BYTE *)(a3 + 8) = 1;
    }
    *(_DWORD *)(a3 + 4) += 4;
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)sub_33F5DC, (void *)a3);
    *(_DWORD *)(a3 + 4) -= 4;
    *(_BYTE *)(a3 + 8) = 0;
  }

  else if (CFArrayGetTypeID() == v6)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
    int v53 = *(_DWORD *)(a3 + 4);
    if (v53 >= 127) {
      size_t v54 = 127LL;
    }
    else {
      size_t v54 = v53;
    }
    valuePtr[(int)v54] = 0;
    if ((_DWORD)v54) {
      memset(&valuePtr[(int)v54 - 1 - (v54 - 1)], 32, v54);
    }
    sub_33EAA0((int *)a3, "%s", v54, v47, v48, v49, v50, v51, (char)valuePtr);
    CFGetRetainCount(a1);
    sub_33EAA0((int *)a3, "'%s' | Array{%d} | %d ordered objects\n", v55, v56, v57, v58, v59, v60, (char)a2);
    int v61 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v61 + 4;
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
        snprintf(valuePtr, 0x10uLL, "[%u]", i);
        sub_33F070(ValueAtIndex, valuePtr, a3);
      }

      int v61 = *(_DWORD *)(a3 + 4) - 4;
    }

    *(_DWORD *)(a3 + 4) = v61;
  }

  else if (CFDataGetTypeID() == v6)
  {
    int v75 = *(_DWORD *)(a3 + 4);
    if (v75 >= 127) {
      size_t v76 = 127LL;
    }
    else {
      size_t v76 = v75;
    }
    valuePtr[(int)v76] = 0;
    if ((_DWORD)v76) {
      memset(&valuePtr[(int)v76 - 1 - (v76 - 1)], 32, v76);
    }
    sub_33EAA0((int *)a3, "%s", v76, v70, v71, v72, v73, v74, (char)valuePtr);
    CFGetRetainCount(a1);
    CFDataGetLength((CFDataRef)a1);
    sub_33EAA0((int *)a3, "'%s' | %sData{%d} | %d bytes\n", v77, v78, v79, v80, v81, v82, (char)a2);
  }

  else
  {
    int v89 = *(_DWORD *)(a3 + 4);
    if (v89 >= 127) {
      size_t v90 = 127LL;
    }
    else {
      size_t v90 = v89;
    }
    valuePtr[(int)v90] = 0;
    if ((_DWORD)v90) {
      memset(&valuePtr[(int)v90 - 1 - (v90 - 1)], 32, v90);
    }
    sub_33EAA0((int *)a3, "%s", v90, v70, v71, v72, v73, v74, (char)valuePtr);
    sub_33EAA0((int *)a3, "'%s' | <unknown type id: %d)>\n", v91, v92, v93, v94, v95, v96, (char)a2);
  }

uint64_t sub_33F5DC(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0);
  return sub_33F070(a2, CStringPtr, a3);
}

const void **sub_33F610(const void **a1)
{
  char v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL sub_33F640(const __CFNumber *a1, void *a2)
{
  BOOL result = 0;
  if (a1)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      if (CFNumberGetValue(a1, kCFNumberSInt32Type, a2)) {
        return 1;
      }
    }
  }

  return result;
}

CFDictionaryRef sub_33F6A4(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t v3 = a1 + 8LL * a3;
  uint64_t v5 = *(void *)(v3 + 16);
  int v4 = (CFDictionaryRef *)(v3 + 16);
  if (!v5) {
    return 0LL;
  }
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a2, 0, kCFAllocatorNull);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *v4;
  if (a3 - 1 > 2)
  {
    CFIndex Count = CFDictionaryGetCount(v9);
    if (Count <= 0)
    {
      CFRelease(v8);
      return 0LL;
    }

    CFIndex v14 = Count;
    else {
      size_t v15 = 8 * Count;
    }
    uint64_t v16 = (const void **)operator new[](v15);
    uint64_t v17 = (const void **)operator new[](v15);
    CFDictionaryGetKeysAndValues(*v4, v16, v17);
    for (uint64_t i = 0LL; i != v14; ++i)
    {
      if (!v16[i]) {
        break;
      }
      uint64_t v11 = (const __CFDictionary *)v17[i];
      if (!v11) {
        break;
      }
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v11))
      {
        Value = (const __CFString *)CFDictionaryGetValue(v11, @"name");
        if (Value)
        {
          uint64_t v21 = Value;
          CFTypeID v22 = CFStringGetTypeID();
          if (v22 == CFGetTypeID(v21) && CFStringCompare(v21, v8, 0LL) == kCFCompareEqualTo) {
            goto LABEL_28;
          }
        }
      }
    }

    uint64_t v23 = (const __CFDictionary **)sub_33EB48();
    if (v23)
    {
      uint64_t v11 = *v23;
      if (!*v23) {
        goto LABEL_28;
      }
    }

    else
    {
      uint64_t v11 = (const __CFDictionary *)&_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315394;
      uint64_t v28 = "TuningPListMgr.cpp";
      __int16 v29 = 1024;
      int v30 = 424;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Did not match strip name field to file name!",  (uint8_t *)&v27,  0x12u);
    }

    uint64_t v11 = 0LL;
LABEL_28:
    operator delete[](v16);
    operator delete[](v17);
    CFRelease(v8);
    if (v11) {
      return v11;
    }
LABEL_29:
    uint64_t v24 = (os_log_s **)sub_33EB48();
    if (v24)
    {
      uint64_t v25 = *v24;
      if (!*v24) {
        return 0LL;
      }
    }

    else
    {
      uint64_t v25 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315394;
      uint64_t v28 = "TuningPListMgr.cpp";
      __int16 v29 = 1024;
      int v30 = 435;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d return dictionary is null", (uint8_t *)&v27, 0x12u);
    }

    return 0LL;
  }

  uint64_t v10 = (const __CFDictionary *)CFDictionaryGetValue(v9, v8);
  if (!v10 || (v11 = v10, CFTypeID v12 = CFDictionaryGetTypeID(), v12 != CFGetTypeID(v11)))
  {
    CFRelease(v8);
    goto LABEL_29;
  }

  CFRelease(v8);
  return v11;
}

void *sub_33F984(void *a1)
{
  *a1 = off_482E68;
  sub_85B80(a1 + 1);
  return a1;
}

void sub_33F9B4(uint64_t *a1)
{
  *a1 = (uint64_t)off_482E68;
  sub_85B80(a1 + 1);
  operator delete(a1);
}

void sub_33F9E4(uint64_t a1)
{
  int v1 = (void *)(a1 + 8);
  char v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[3];
      uint64_t v9 = v2[2];
      uint64_t v10 = v3;
      if (v3)
      {
        p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
        do
          unint64_t v5 = __ldxr(p_shared_weak_owners);
        while (__stxr(v5 + 1, p_shared_weak_owners));
      }

      sub_B8CBC(&v11, &v9, "", 13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 280LL))(v11, 1LL);
      CFTypeID v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      char v2 = (void *)v2[1];
    }

    while (v2 != v1);
  }

void sub_33FABC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_33FB18(uint64_t a1)
{
  int v1 = (void *)(a1 + 8);
  char v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[3];
      uint64_t v9 = v2[2];
      uint64_t v10 = v3;
      if (v3)
      {
        p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
        do
          unint64_t v5 = __ldxr(p_shared_weak_owners);
        while (__stxr(v5 + 1, p_shared_weak_owners));
      }

      sub_B8CBC(&v11, &v9, "", 18);
      (*(void (**)(uint64_t, void))(*(void *)v11 + 280LL))(v11, 0LL);
      CFTypeID v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      char v2 = (void *)v2[1];
    }

    while (v2 != v1);
  }

void sub_33FBF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_33FC50(uint64_t a1)
{
  int v1 = (void *)sub_341980(a1);
  operator delete(v1);
}

uint64_t sub_33FC64(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    size_t v13 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      size_t v15 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v30 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 404;
      __int16 v33 = 2080;
      uint64_t v34 = (const char *)v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      uint64_t v19 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v30 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 405;
      __int16 v33 = 2080;
      uint64_t v34 = (const char *)v19;
      __int16 v35 = 1024;
      LODWORD(v36[0]) = a3;
      WORD2(v36[0]) = 2048;
      *(void *)((char *)v36 + 6) = a4;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = &off_4865A0;
    void v20[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    CFTypeID v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      uint64_t v23 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v30 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 406;
      __int16 v33 = 2080;
      uint64_t v34 = "outData";
      __int16 v35 = 2080;
      v36[0] = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v24 = &off_4865A0;
    v24[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 2004054901) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
  }
  else {
    return sub_222CE8(a1, a2, a3, a4, a5, a6);
  }
}

void sub_340078(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_546E0();
  unint64_t v5 = operator new(4uLL);
  __p[0] = v5;
  _DWORD *v5 = 1885892674;
  __p[1] = v5 + 1;
  __p[2] = v5 + 1;
  strcpy((char *)&__p[3], "cwdv");
  char v36 = 0;
  int v37 = 3;
  v39[0] = 0LL;
  v39[1] = 0LL;
  uint64_t v38 = v39;
  int v40 = 44739242;
  CFTypeRef cf = 0LL;
  theString1.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_4830E0;
  p_std::string theString1 = &theString1;
  sub_FF3FC(v32, v4, (unsigned int **)__p, (uint64_t)&theString1);
  CFTypeID v6 = p_theString1;
  if (p_theString1 == &theString1)
  {
    uint64_t v7 = 4LL;
    CFTypeID v6 = &theString1;
  }

  else
  {
    if (!p_theString1) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(v6->__r_.__value_.__r.__words[0] + 8 * v7))();
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v39[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0LL;
  if (v32[2] >= 2uLL)
  {
    (*(void (**)(CFArrayRef *__return_ptr))(**(void **)(a1 + 192) + 304LL))(&theArray);
    unint64_t v8 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFIndex v10 = Count;
      CFArrayRef v11 = theArray;
      if (theArray)
      {
        CFIndex v28 = CFArrayGetCount(theArray);
        if (!v10) {
          goto LABEL_46;
        }
LABEL_16:
        unint64_t v12 = 0LL;
        do
        {
          if (v8 == v11 && v12 == v28) {
            break;
          }
          sub_36030(&v30, v8, v12);
          size_t v13 = (uint64_t *)v32[1];
          unint64_t v14 = (const __CFString *)v30;
          if (v30) {
            CFRetain(v30);
          }
          theString2 = v14;
          size_t v15 = v32;
          if (v13 != v32)
          {
            size_t v15 = v13;
            while (1)
            {
              sub_B8CBC((uint64_t *)__p, v15 + 2, "", 324);
              if (__p[0] && *((_DWORD *)__p[0] + 36) == 1885892674)
              {
                (*(void (**)(std::string *__return_ptr))(**((void **)__p[0] + 24) + 128LL))(&theString1);
                BOOL v16 = CFStringCompare((CFStringRef)theString1.__r_.__value_.__l.__data_, theString2, 0LL) == kCFCompareEqualTo;
                sub_19DFC((uint64_t)&theString1);
              }

              else
              {
                BOOL v16 = 0;
              }

              uint64_t v17 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                uint64_t v18 = (unint64_t *)((char *)__p[1] + 8);
                do
                  unint64_t v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }

              if (v16) {
                break;
              }
              size_t v15 = (uint64_t *)v15[1];
              if (v15 == v32)
              {
                size_t v15 = v32;
                break;
              }
            }

            unint64_t v14 = theString2;
          }

          if (v14) {
            CFRelease(v14);
          }
          if (v15 != v32)
          {
            uint64_t v20 = operator new(0x20uLL);
            void v20[2] = v15[2];
            uint64_t v21 = v15[3];
            v20[3] = v21;
            if (v21)
            {
              CFTypeID v22 = (unint64_t *)(v21 + 16);
              do
                unint64_t v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }

            uint64_t v24 = *a2;
            void *v20 = *a2;
            v20[1] = a2;
            *(void *)(v24 + 8) = v20;
            *a2 = (uint64_t)v20;
            ++a2[2];
          }

          if (v30) {
            CFRelease(v30);
          }
          ++v12;
        }

        while (v12 != v10);
        goto LABEL_46;
      }

      CFIndex v28 = 0LL;
      if (Count) {
        goto LABEL_16;
      }
    }

void sub_340474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, const void *);
  sub_7A6D8((const void **)va);
  sub_85B80(v5);
  sub_85B80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_34057C(uint64_t a1, char a2)
{
  uint64_t v10 = 0x676C6F6277737375LL;
  int v11 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v10))
  {
    *(_BYTE *)(a1 + 681) = a2;
    AudioObjectID v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 120LL))(*(void *)(a1 + 192));
    uint64_t v5 = sub_1A6D54(v4);
    uint64_t v7 = v6;
    unint64_t v8 = (dispatch_queue_s *)sub_869B4();
    uint64_t v9 = operator new(0x18uLL);
    *(void *)uint64_t v9 = v5;
    v9[2] = v7;
    *((_BYTE *)v9 + 12) = BYTE4(v7);
    *((void *)v9 + 2) = a1;
    dispatch_async_f(v8, v9, (dispatch_function_t)sub_341644);
  }

uint64_t sub_34062C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 681);
}

BOOL sub_340634(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *a2;
  if (v7) {
    BOOL v2 = *(_DWORD *)(v7 + 144) != 1885892706;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return v2;
    }
    return 0;
  }

  if (!v7) {
    return 0;
  }
  return v2;
}

uint64_t sub_3406D0()
{
  return 1LL;
}

uint64_t sub_3406D8(void *a1)
{
  uint64_t v3 = a1[24];
  int v4 = *(_DWORD *)(v3 + 500);
  if (v4 == -1 || !*(_BYTE *)(v3 + 512)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 1LL;
  if (v4 != 1)
  {
    if (*(_DWORD *)(v3 + 504) == 1) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  return result;
}

uint64_t sub_34074C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 400LL))(a1);
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408LL))(a1);
  }
}

BOOL sub_3407B0(uint64_t a1)
{
  int v1 = *(const __CFString **)(a1 + 672);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  sub_48100((uint64_t)v6, v1);
  if (v7 < 0)
  {
    BOOL v3 = v6[1] != 0LL;
    operator delete(v6[0]);
  }

  else
  {
    BOOL v3 = v7 != 0;
  }

  return *(_BYTE *)(a1 + 680) && v3;
}

void sub_34083C(_Unwind_Exception *a1)
{
}

uint64_t sub_340850(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424LL))(a1);
}

void *sub_34085C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(const __CFString **)(a1 + 672);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  return sub_48100(a2, v2);
}

void sub_3408A8(_Unwind_Exception *a1)
{
}

void sub_3408BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 682));
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 288LL))(a1))
  {
    BOOL v7 = sub_341460(a1) == 1;
    goto LABEL_3;
  }

  int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == -1 || *(_BYTE *)(a3 + 12) == 0)
  {
    LOBYTE(v8) = 0;
  }

  else if (v8 != 1)
  {
    BOOL v7 = *(_DWORD *)(a3 + 4) == 1;
LABEL_3:
    LOBYTE(v8) = v7;
  }

  atomic_store(v8, (unsigned __int8 *)(a1 + 682));
  uint64_t v10 = sub_138E8(17);
  uint64_t v11 = sub_138E8(28);
  char v12 = 0;
  uint64_t v13 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1LL;
    if ((v16 & 1) != 0) {
      goto LABEL_19;
    }
  }

  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_19:
  uint64_t v17 = *(os_log_s **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(const __CFString **)(a1 + 248);
    uint64_t v59 = v18;
    char v60 = *(_BYTE *)(a1 + 256);
    if (v60 && v18) {
      CFRetain(v18);
    }
    sub_48E98(v68, v18);
    int v19 = v69;
    uint64_t v20 = v68[0];
    sub_F9154(&__p, a3);
    uint64_t v21 = v68;
    if (v19 < 0) {
      uint64_t v21 = (std::__shared_weak_count **)v20;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    unsigned __int8 v23 = atomic_load((unsigned __int8 *)(a1 + 682));
    *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
    __int16 v62 = 1024;
    uint64_t v24 = "in";
    *(_DWORD *)CFTypeRef v63 = 232;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(_WORD *)&v63[4] = 2080;
    if ((v23 & 1) == 0) {
      uint64_t v24 = "out";
    }
    *(void *)&v63[6] = v21;
    __int16 v64 = 2080;
    uint64_t v65 = p_p;
    __int16 v66 = 2080;
    uint64_t v67 = v24;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio port with UID %s: headset status %s, effective in ear state: %s",  buf,  0x30u);
    if (v69 < 0) {
      operator delete(v68[0]);
    }
    sub_19DFC((uint64_t)&v59);
  }

  if (*(_BYTE *)(a3 + 12))
  {
    if (*(_DWORD *)a3 != *(_DWORD *)a2)
    {
      LODWORD(v68[0]) = 1651796336;
      sub_8ED70(buf, (uint64_t)v68, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }

    if (*(_DWORD *)(a3 + 4) != *(_DWORD *)(a2 + 4))
    {
      LODWORD(v68[0]) = 1651796339;
      sub_8ED70(buf, (uint64_t)v68, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }

    if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a2 + 8))
    {
      LODWORD(v68[0]) = 1651798131;
      sub_8ED70(buf, (uint64_t)v68, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }

    unsigned __int8 v25 = atomic_load((unsigned __int8 *)(a1 + 682));
    if ((v6 & 1) != (v25 & 1))
    {
      if (sub_203D48(*(_DWORD *)(a1 + 144)))
      {
        uint64_t v55 = (os_log_t *)sub_138E8(13);
        uint64_t v56 = *v55;
        if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
          __int16 v62 = 1024;
          *(_DWORD *)CFTypeRef v63 = 198;
          _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      unsigned __int8 v26 = atomic_load((unsigned __int8 *)(a1 + 682));
      if ((v26 & 1) == 0)
      {
        if (*(_BYTE *)(a1 + 681))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 272LL))(buf, a1);
          if (*(void *)&v63[2])
          {
            unsigned __int8 v27 = atomic_load((unsigned __int8 *)(a1 + 682));
            sub_224AC8(a1, (uint64_t)buf, v27 & 1);
          }

          sub_85B80((uint64_t *)buf);
        }

        else
        {
          int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408LL))(a1);
          uint64_t v33 = sub_138E8(17);
          uint64_t v34 = sub_138E8(28);
          char v35 = 0;
          uint64_t v36 = 0LL;
          if (v32)
          {
            *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
            uint64_t v37 = *(void *)(v33 + 8);
            while (1)
            {
              uint64_t v38 = *(int *)&buf[4 * v36];
              char v39 = v35;
              if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
                break;
              }
              char v35 = 1;
              uint64_t v36 = 1LL;
              if ((v39 & 1) != 0) {
                goto LABEL_75;
              }
            }

            if ((v37 & v38) == 0) {
              uint64_t v33 = v34;
            }
LABEL_75:
            uint64_t v43 = *(os_log_s **)v33;
            if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v44 = *(const __CFString **)(a1 + 248);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
              __p.__r_.__value_.__s.__data_[8] = *(_BYTE *)(a1 + 256);
              if (__p.__r_.__value_.__s.__data_[8] && v44) {
                CFRetain(v44);
              }
              sub_48E98(v68, v44);
              if (v69 >= 0) {
                uint64_t v45 = v68;
              }
              else {
                uint64_t v45 = (std::__shared_weak_count **)v68[0];
              }
              unsigned __int8 v46 = atomic_load((unsigned __int8 *)(a1 + 682));
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
              if ((v46 & 1) != 0) {
                uint64_t v47 = "true";
              }
              else {
                uint64_t v47 = "false";
              }
              __int16 v62 = 1024;
              *(_DWORD *)CFTypeRef v63 = 211;
              *(_WORD *)&v63[4] = 2080;
              *(void *)&v63[6] = v45;
              __int16 v64 = 2080;
              uint64_t v65 = (std::string *)v47;
              _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %s: setting routability to %s",  buf,  0x26u);
              if (v69 < 0) {
                operator delete(v68[0]);
              }
              sub_19DFC((uint64_t)&__p);
            }

            uint64_t v48 = *(std::__shared_weak_count **)(a1 + 88);
            v68[0] = *(std::__shared_weak_count **)(a1 + 80);
            v68[1] = v48;
            if (v48)
            {
              p_shared_weak_owners = (unint64_t *)&v48->__shared_weak_owners_;
              do
                unint64_t v50 = __ldxr(p_shared_weak_owners);
              while (__stxr(v50 + 1, p_shared_weak_owners));
            }

            sub_D61C0((uint64_t *)buf, (uint64_t *)v68, 1LL);
            unsigned __int8 v51 = atomic_load((unsigned __int8 *)(a1 + 682));
            sub_224AC8(a1, (uint64_t)buf, v51 & 1);
            sub_85B80((uint64_t *)buf);
            if (v68[1]) {
              std::__shared_weak_count::__release_weak(v68[1]);
            }
          }

          else
          {
            *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
            uint64_t v40 = *(void *)(v33 + 8);
            while (1)
            {
              uint64_t v41 = *(int *)&buf[4 * v36];
              char v42 = v35;
              if (((v40 & v41) != 0) != ((*(void *)(v34 + 8) & v41) != 0)) {
                break;
              }
              char v35 = 1;
              uint64_t v36 = 1LL;
              if ((v42 & 1) != 0) {
                goto LABEL_96;
              }
            }

            if ((v40 & v41) == 0) {
              uint64_t v33 = v34;
            }
LABEL_96:
            BOOL v52 = *(os_log_s **)v33;
            if (v52 && os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              int v53 = *(const __CFString **)(a1 + 248);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
              __p.__r_.__value_.__s.__data_[8] = *(_BYTE *)(a1 + 256);
              if (__p.__r_.__value_.__s.__data_[8] && v53) {
                CFRetain(v53);
              }
              sub_48E98(v68, v53);
              if (v69 >= 0) {
                size_t v54 = v68;
              }
              else {
                size_t v54 = (std::__shared_weak_count **)v68[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
              __int16 v62 = 1024;
              *(_DWORD *)CFTypeRef v63 = 217;
              *(_WORD *)&v63[4] = 2080;
              *(void *)&v63[6] = v54;
              _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %s: routability unchanged due to negative ownership status",  buf,  0x1Cu);
              if (v69 < 0) {
                operator delete(v68[0]);
              }
              sub_19DFC((uint64_t)&__p);
            }
          }
        }
      }

      LODWORD(v68[0]) = 1651796325;
      sub_8ED70(buf, (uint64_t)v68, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }

    if (*(unsigned __int8 *)(a3 + 12) != *(unsigned __int8 *)(a2 + 12))
    {
      *(_OWORD *)uint64_t v68 = xmmword_403270;
      sub_8ED70(buf, (uint64_t)v68, 4LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }
  }

  else if (*(_BYTE *)(a2 + 12))
  {
    *(_OWORD *)uint64_t v68 = xmmword_403270;
    sub_8ED70(buf, (uint64_t)v68, 4LL);
    (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
    sub_68314(buf);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 408LL))(a1))
    {
      unsigned __int8 v28 = atomic_load((unsigned __int8 *)(a1 + 682));
      if ((v28 & 1) == 0 || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1))
      {
        __int16 v29 = *(std::__shared_weak_count **)(a1 + 88);
        v68[0] = *(std::__shared_weak_count **)(a1 + 80);
        v68[1] = v29;
        if (v29)
        {
          CFTypeRef v30 = (unint64_t *)&v29->__shared_weak_owners_;
          do
            unint64_t v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }

        sub_D61C0((uint64_t *)buf, (uint64_t *)v68, 1LL);
        sub_224AC8(a1, (uint64_t)buf, 1LL);
        sub_85B80((uint64_t *)buf);
        if (v68[1]) {
          std::__shared_weak_count::__release_weak(v68[1]);
        }
      }
    }
  }

void sub_341140( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, std::__shared_weak_count *a22, int a23, __int16 a24, char a25, char a26)
{
}

uint64_t sub_3411F4(void *a1)
{
  uint64_t v2 = a1[24];
  strcpy(buf, "dmlubolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v3 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v2 + 16LL))(v2, buf);
  int v4 = (os_log_t *)sub_138E8(23);
  uint64_t v5 = *v4;
  if (!*v4 || !os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_7;
  }
  sub_2CA1C(__p, 1970040164LL);
  unsigned __int8 v6 = v22 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
  *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
  __int16 v24 = 1024;
  int v25 = 136;
  __int16 v26 = 2080;
  unsigned __int8 v27 = v6;
  __int16 v28 = 1024;
  int v29 = v3;
  _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HasProperty(%s): %d", buf, 0x22u);
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if ((v3 & 1) != 0) {
      return 1635085420LL;
    }
  }

  else
  {
LABEL_7:
    if ((v3 & 1) != 0) {
      return 1635085420LL;
    }
  }

  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 112LL))(a1);
  uint64_t v7 = 2003068262LL;
  if ((v8 & 0xFF00000000LL) != 0 && v8 == 1701865584LL)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)a1[24] + 376LL))(a1[24]);
    BOOL v11 = (v10 & 0xFF00000000LL) == 0 || (_DWORD)v10 == 0;
    BOOL v12 = !v11;
    uint64_t v13 = (os_log_t *)sub_138E8(23);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 126;
      __int16 v26 = 1024;
      LODWORD(v27) = v12;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SupportsSoftwareVolume: %d", buf, 0x18u);
    }

    if (v12) {
      return 1633759844LL;
    }
    uint64_t v15 = a1[24];
    strcpy(buf, "papsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v16 = sub_5C2F8(v15);
    *((void *)&v19 + 1) = v17;
    *(void *)&__int128 v19 = v16;
    uint64_t v18 = v19 >> 32;
    if ((v18 & 0xFF00000000LL) != 0)
    {
      if ((_DWORD)v18) {
        return 1633759844LL;
      }
    }
  }

  return v7;
}

uint64_t sub_341460(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1) & 1) == 0)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 60;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 272LL))(buf, a1);
  sub_EDD50(&v11, buf);
  uint64_t v2 = v12;
  if (v12 == &v11)
  {
    uint64_t v3 = 2LL;
  }

  else
  {
    uint64_t v3 = 2LL;
    while (1)
    {
      uint64_t v4 = v2[2];
      if (*(_DWORD *)(v4 + 144) != 1885892674) {
        break;
      }
      uint64_t v5 = *(void *)(v4 + 192);
      int v6 = *(_DWORD *)(v5 + 500);
      if (v6 == -1 || !*(_BYTE *)(v5 + 512))
      {
        uint64_t v3 = 1LL;
        goto LABEL_15;
      }

      if (v6 == 1 || *(_DWORD *)(v5 + 504) == 1) {
        uint64_t v3 = 1LL;
      }
      uint64_t v2 = (uint64_t *)v2[1];
      if (v2 == &v11) {
        goto LABEL_15;
      }
    }

    uint64_t v3 = 0xFFFFFFFFLL;
  }

void sub_341618( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_341644(void **a1)
{
}

void sub_3416BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      __int128 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    char v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      unsigned __int8 v23 = v22;
      __int16 v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        __int128 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unsigned __int8 v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        __int128 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x341684LL);
}

const void **sub_341904(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_34193C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4830E0;
  return result;
}

void sub_341960(uint64_t a1, void *a2)
{
  *a2 = &off_4830E0;
}

uint64_t sub_341978()
{
  return 1LL;
}

uint64_t sub_341980(uint64_t a1)
{
  *(void *)a1 = off_482EA0;
  uint64_t v2 = *(const void **)(a1 + 672);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  return sub_F9108(a1);
}

void sub_3419D0()
{
  qword_4A1A98 = 0LL;
  qword_4A1A90 = 0LL;
  qword_4A1A88 = (uint64_t)&qword_4A1A90;
  *(void *)unint64_t v136 = 0LL;
  v136[8] = 1;
  sub_14EEF8(buf);
  if (buf[24] && (buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    goto LABEL_6;
  }

  if (buf[24])
  {
LABEL_6:
    sub_1CAFFC(buf);
    if (buf[23] >= 0) {
      unint64_t v0 = buf;
    }
    else {
      unint64_t v0 = *(const char **)buf;
    }
    unsigned __int8 v110 = (__CFString *)CFStringCreateWithCString(0LL, v0, 0x600u);
    LOBYTE(v111[0]) = 1;
    sub_6A8C0((uint64_t)v136, (uint64_t)&v110);
    sub_19DFC((uint64_t)&v110);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_11;
  }

  *(void *)AudioObjectPropertyAddress buf = sub_28A0D0();
  buf[8] = 1;
  sub_6A8C0((uint64_t)v136, (uint64_t)buf);
  sub_19DFC((uint64_t)buf);
LABEL_11:
  sub_300D48(&v134, (CFStringRef *)v136);
  sub_19DFC((uint64_t)v136);
  int size = (char)v134.__r_.__value_.__s.__size_;
  if ((v134.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v2 = v134.__r_.__value_.__s.__size_;
  }
  else {
    size_t v2 = v134.__r_.__value_.__l.__size_;
  }
  uint64_t v3 = buf;
  sub_D0924((uint64_t)buf, v2 + 27);
  if (buf[23] < 0) {
    uint64_t v3 = *(_BYTE **)buf;
  }
  if (v2)
  {
    if (size >= 0) {
      uint64_t v4 = &v134;
    }
    else {
      uint64_t v4 = (std::string *)v134.__r_.__value_.__r.__words[0];
    }
    memmove(v3, v4, v2);
  }

  strcpy(&v3[v2], "SoundAutoConfigStrips.plist");
  sub_155560(&theDict, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v5 = theDict;
  sub_22BC0C((uint64_t)&v127, theDict);
  sub_22BC0C((uint64_t)&v121, v5);
  uint64_t v122 = (v124 - (_BYTE *)v123) >> 3;
  while (1)
  {
    if (v127 && v128 != (v130 - (_BYTE *)v129) >> 3)
    {
      uint64_t v6 = v121;
      goto LABEL_30;
    }

    uint64_t v6 = v121;
    if (!v121 || v122 == (v124 - (_BYTE *)v123) >> 3) {
      break;
    }
LABEL_30:
    if (v127 == v6 && v128 == v122) {
      break;
    }
    sub_22BC8C((uint64_t)__p, &v127);
    sub_14A9A0((uint64_t)buf, (const void **)&v134.__r_.__value_.__l.__data_, (const void **)__p);
    std::string v117 = *(std::string *)buf;
    sub_342D98((uint64_t)v136, (std::__fs::filesystem::path *)&v117);
    if ((v136[23] & 0x80000000) != 0)
    {
      uint64_t v7 = *(void **)v136;
      sub_24054(buf, *(void **)v136, *(unint64_t *)&v136[8]);
      operator delete(v7);
    }

    else
    {
      *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v136;
      *(void *)&buf[16] = *(void *)&v136[16];
    }

    uint64_t v8 = buf[23];
    int v9 = buf[23];
    if (buf[23] < 0) {
      uint64_t v8 = *(void *)&buf[8];
    }
    if (v8 == 8)
    {
      uint64_t v14 = *(void **)buf;
      if (buf[23] >= 0) {
        uint64_t v14 = buf;
      }
      if (*v14 != 0x706972747375612ELL) {
LABEL_50:
      }
        std::string::append(&v117, ".austrip", 8uLL);
    }

    else
    {
      if (v8 != 10) {
        goto LABEL_50;
      }
      uint64_t v10 = *(_BYTE **)buf;
      if (buf[23] >= 0) {
        uint64_t v10 = buf;
      }
      uint64_t v11 = *(void *)v10;
      int v12 = *((unsigned __int16 *)v10 + 4);
      if (v11 != 0x727473706F72702ELL || v12 != 28777) {
        goto LABEL_50;
      }
    }

    if (v9 < 0) {
      operator delete(*(void **)buf);
    }
    if ((sub_1CCDF8() & 1) == 0)
    {
      else {
        *(std::string *)AudioObjectPropertyAddress buf = v117;
      }
      uint64_t v15 = buf[23];
      int v16 = buf[23];
      os_log_t v17 = *(void **)buf;
      if (buf[23] >= 0)
      {
        int v18 = buf;
      }

      else
      {
        uint64_t v15 = *(void *)&buf[8];
        int v18 = *(_BYTE **)buf;
      }

      __int128 v19 = &v18[v15];
      if (v15 >= 12)
      {
        uint64_t v20 = v18;
        do
        {
          uint32_t v21 = (char *)memchr(v20, 109, v15 - 11);
          if (!v21) {
            break;
          }
          if (*(void *)v21 == 0x7375612E64656C6DLL && *((_DWORD *)v21 + 2) == 1885958772) {
            goto LABEL_69;
          }
          uint64_t v20 = v21 + 1;
          uint64_t v15 = v19 - (_BYTE *)v20;
        }

        while (v19 - (_BYTE *)v20 > 11);
      }

      uint32_t v21 = v19;
LABEL_69:
      BOOL v24 = v21 == v19 || v21 - v18 == -1;
      if (v16 < 0)
      {
        operator delete(v17);
        if (!v24) {
          goto LABEL_224;
        }
      }

      else if (!v24)
      {
        goto LABEL_224;
      }
    }

    v111[0] = 0LL;
    v111[1] = 0LL;
    v113[0] = 0LL;
    v113[1] = 0LL;
    unsigned __int8 v110 = (__CFString *)v111;
    uint64_t v112 = v113;
    v115[0] = 0LL;
    v115[1] = 0LL;
    uint64_t v114 = v115;
    __int16 v116 = 0;
    os_log_t v25 = (const __CFDictionary *)v120;
    sub_342FC8((const __CFDictionary *)v120, (const UInt8 *)"position", (uint64_t **)&v112);
    sub_342FC8(v25, (const UInt8 *)"role", (uint64_t **)&v114);
    if (!v25)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_343254((uint64_t)&cf, v25, (const UInt8 *)"VirtualAudioPlugInMode");
    if (cf.__r_.__value_.__s.__data_[8] && cf.__r_.__value_.__r.__words[0])
    {
      CFTypeID v26 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
      if (v26 == CFArrayGetTypeID())
      {
        sub_158524(&v135, (CFTypeRef *)&cf.__r_.__value_.__l.__data_);
        if (!v135)
        {
          v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v103, "Could not construct");
        }

        memset(v136, 0, 24);
        sub_3432A4((uint64_t)buf, (const __CFArray *)v135, (__n128 *)v136);
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v136;
        sub_8CD60((void ***)&v106);
        if (v135) {
          CFRelease(v135);
        }
        uint64_t v27 = *(void *)buf;
        uint64_t v28 = *(void *)&buf[8];
        while (v27 != v28)
        {
          else {
            int v29 = *(unsigned int **)v27;
          }
          unsigned int v30 = bswap32(*v29);
          sub_57ADC((uint64_t *)&v110, v30, v30);
          v27 += 24LL;
        }

        *(void *)unint64_t v136 = buf;
        sub_8CD60((void ***)v136);
      }

      else if (cf.__r_.__value_.__r.__words[0])
      {
        CFTypeID v31 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
        if (v31 == CFStringGetTypeID())
        {
          sub_D9B14(v136, (CFTypeRef *)&cf.__r_.__value_.__l.__data_);
          if (!*(void *)v136)
          {
            uint64_t v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v104, "Could not construct");
          }

          sub_48100((uint64_t)buf, *(const __CFString **)v136);
          if (*(void *)v136) {
            CFRelease(*(CFTypeRef *)v136);
          }
          if (buf[23] >= 0) {
            int v32 = (unsigned int *)buf;
          }
          else {
            int v32 = *(unsigned int **)buf;
          }
          unsigned int v33 = bswap32(*v32);
          sub_57ADC((uint64_t *)&v110, v33, v33);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }

    sub_343334((uint64_t)&cf);
    __int16 v116 = sub_34336C((const __CFDictionary **)&v120);
    id v34 = *(id *)sub_138E8(24);
    char v35 = v34;
    if (v34)
    {
      uint64_t v36 = (os_log_s *)v34;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        v136[23] = 15;
        strcpy(v136, "{ calibration: ");
        uint64_t v37 = "true";
        if (!(_BYTE)v116) {
          uint64_t v37 = "false";
        }
        if (HIBYTE(v116)) {
          uint64_t v38 = v37;
        }
        else {
          uint64_t v38 = "unspecified";
        }
        size_t v39 = strlen(v38);
        uint64_t v40 = std::string::append((std::string *)v136, v38, v39);
        __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0LL;
        v40->__r_.__value_.__l.__cap_ = 0LL;
        v40->__r_.__value_.__r.__words[0] = 0LL;
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
        sub_22BA64(&cf, v112, v113);
        char v42 = std::string::insert(&cf, 0LL, ", positions: ", 0xDuLL);
        __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        *(void *)&v136[16] = v42->__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v136 = v43;
        v42->__r_.__value_.__l.__size_ = 0LL;
        v42->__r_.__value_.__l.__cap_ = 0LL;
        v42->__r_.__value_.__r.__words[0] = 0LL;
        if (v136[23] >= 0) {
          uint64_t v44 = v136;
        }
        else {
          uint64_t v44 = *(const std::string::value_type **)v136;
        }
        if (v136[23] >= 0) {
          std::string::size_type v45 = v136[23];
        }
        else {
          std::string::size_type v45 = *(void *)&v136[8];
        }
        std::string::append(&v106, v44, v45);
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
        sub_22BA64(&cf, v114, v115);
        unsigned __int8 v46 = std::string::insert(&cf, 0LL, ", roles: ", 9uLL);
        __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        *(void *)&v136[16] = v46->__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v136 = v47;
        v46->__r_.__value_.__l.__size_ = 0LL;
        v46->__r_.__value_.__l.__cap_ = 0LL;
        v46->__r_.__value_.__r.__words[0] = 0LL;
        if (v136[23] >= 0) {
          uint64_t v48 = v136;
        }
        else {
          uint64_t v48 = *(const std::string::value_type **)v136;
        }
        if (v136[23] >= 0) {
          std::string::size_type v49 = v136[23];
        }
        else {
          std::string::size_type v49 = *(void *)&v136[8];
        }
        std::string::append(&v106, v48, v49);
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
        sub_110E40(&cf, v110, v111);
        unint64_t v50 = std::string::insert(&cf, 0LL, ", modes: ", 9uLL);
        __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        *(void *)&v136[16] = v50->__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v136 = v51;
        v50->__r_.__value_.__l.__size_ = 0LL;
        v50->__r_.__value_.__l.__cap_ = 0LL;
        v50->__r_.__value_.__r.__words[0] = 0LL;
        if (v136[23] >= 0) {
          BOOL v52 = v136;
        }
        else {
          BOOL v52 = *(const std::string::value_type **)v136;
        }
        if (v136[23] >= 0) {
          std::string::size_type v53 = v136[23];
        }
        else {
          std::string::size_type v53 = *(void *)&v136[8];
        }
        std::string::append(&v106, v52, v53);
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
        std::string::append(&v106, " }", 2uLL);
        size_t v54 = &v106;
        if ((v106.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          size_t v54 = (std::string *)v106.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SoundAutoConfigUtilities.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 208;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v54;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_INFO,  "%25s:%-5d Parsed SoundAutoConfig dictionary into AbstractSoundAutoConfigCondition %s.",  buf,  0x1Cu);
      }
    }

    sub_342D98((uint64_t)v136, (std::__fs::filesystem::path *)&v117);
    int v55 = v136[23];
    if ((v136[23] & 0x80000000) != 0)
    {
      sub_24054(buf, *(void **)v136, *(unint64_t *)&v136[8]);
    }

    else
    {
      *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v136;
      *(void *)&buf[16] = *(void *)&v136[16];
    }

    uint64_t v56 = buf[23];
    if (buf[23] < 0) {
      uint64_t v56 = *(void *)&buf[8];
    }
    int v57 = 1886548848;
    if (v56 == 8)
    {
      uint64_t v58 = *(unint64_t **)buf;
      if (buf[23] >= 0) {
        uint64_t v58 = (unint64_t *)buf;
      }
      unint64_t v59 = bswap64(*v58);
      BOOL v60 = v59 >= 0x2E61757374726970LL;
      int v61 = v59 > 0x2E61757374726970LL;
      int v62 = !v60;
      if (v61 == v62) {
        int v57 = 1635087216;
      }
      else {
        int v57 = 1886548848;
      }
    }

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v55 < 0) {
      operator delete(*(void **)v136);
    }
    else {
      std::string cf = v117;
    }
    sub_86550((uint64_t *)&v136[8], (uint64_t)&v110);
    sub_16D268(&v137, &v112);
    sub_16D268(v138, &v114);
    __int16 v139 = v116;
    int v140 = 2;
    sub_1FE7A8((uint64_t)buf, 4LL, v57, (__int128 *)&cf, (uint64_t)v136);
    sub_9DBD0((uint64_t)&v136[8]);
    CFTypeRef v63 = (const __CFArray *)sub_D13C4(v25, (const UInt8 *)"VirtualAudioDeviceType");
    if (!v63)
    {
      cf.__r_.__value_.__s.__data_[0] = 0;
      char v109 = 0;
LABEL_191:
      sub_342F30(&v106, v25, (const UInt8 *)"VirtualAudioDeviceType");
      if (v107)
      {
        unsigned __int8 v79 = v106.__r_.__value_.__s.__size_;
        uint64_t v80 = (unsigned int *)v106.__r_.__value_.__r.__words[0];
        if ((v106.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v80 = (unsigned int *)&v106;
        }
        LODWORD(v135) = bswap32(*v80);
        uint64_t v81 = sub_342E58(v135, &v135);
        uint64_t v82 = v81;
        uint64_t v83 = v81 + 7;
        unint64_t v84 = v81[7];
        unint64_t v85 = v81[6];
        if (v85 >= v84)
        {
          uint64_t v88 = v81[5];
          unint64_t v89 = 0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v85 - v88) >> 3);
          unint64_t v90 = v89 + 1;
          if (v89 + 1 > 0x1E1E1E1E1E1E1E1LL) {
            sub_7A87C();
          }
          unint64_t v91 = 0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v84 - v88) >> 3);
          if (2 * v91 > v90) {
            unint64_t v90 = 2 * v91;
          }
          if (v91 >= 0xF0F0F0F0F0F0F0LL) {
            unint64_t v92 = 0x1E1E1E1E1E1E1E1LL;
          }
          else {
            unint64_t v92 = v90;
          }
          uint64_t v137 = v83;
          if (v92) {
            unint64_t v92 = (unint64_t)sub_1FE648(v92);
          }
          else {
            uint64_t v93 = 0LL;
          }
          *(void *)unint64_t v136 = v92;
          *(void *)&v136[8] = v92 + 136 * v89;
          *(void *)&v136[16] = *(void *)&v136[8];
          *(void *)&v136[24] = v92 + 136 * v93;
          sub_1FE5C0(*(uint64_t *)&v136[8], (uint64_t)buf);
          *(void *)&v136[16] += 136LL;
          sub_1FE68C(v82 + 5, v136);
          unint64_t v86 = v82[6];
          sub_1FE75C((uint64_t)v136);
          int v87 = v107;
          unsigned __int8 v79 = v106.__r_.__value_.__s.__size_;
        }

        else
        {
          sub_1FE5C0(v81[6], (uint64_t)buf);
          unint64_t v86 = v85 + 136;
          v82[6] = v85 + 136;
          int v87 = 1;
        }

        v82[6] = v86;
        if (v87 && (v79 & 0x80) != 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
      }

      goto LABEL_209;
    }

    sub_14A724((uint64_t)&cf, v63);
    if (!v109) {
      goto LABEL_191;
    }
    std::string::size_type v64 = cf.__r_.__value_.__l.__size_;
    for (std::string::size_type i = cf.__r_.__value_.__r.__words[0]; i != v64; i += 24LL)
    {
      else {
        __int16 v66 = *(unsigned int **)i;
      }
      LODWORD(v106.__r_.__value_.__l.__data_) = bswap32(*v66);
      uint64_t v67 = sub_342E58(v106.__r_.__value_.__l.__data_, &v106);
      uint64_t v68 = v67;
      char v69 = v67 + 7;
      unint64_t v70 = v67[7];
      unint64_t v71 = v67[6];
      if (v71 >= v70)
      {
        uint64_t v73 = v67[5];
        unint64_t v74 = 0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v71 - v73) >> 3);
        unint64_t v75 = v74 + 1;
        if (v74 + 1 > 0x1E1E1E1E1E1E1E1LL) {
          sub_7A87C();
        }
        unint64_t v76 = 0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v70 - v73) >> 3);
        if (2 * v76 > v75) {
          unint64_t v75 = 2 * v76;
        }
        if (v76 >= 0xF0F0F0F0F0F0F0LL) {
          unint64_t v77 = 0x1E1E1E1E1E1E1E1LL;
        }
        else {
          unint64_t v77 = v75;
        }
        uint64_t v137 = v69;
        if (v77) {
          unint64_t v77 = (unint64_t)sub_1FE648(v77);
        }
        else {
          uint64_t v78 = 0LL;
        }
        *(void *)unint64_t v136 = v77;
        *(void *)&v136[8] = v77 + 136 * v74;
        *(void *)&v136[16] = *(void *)&v136[8];
        *(void *)&v136[24] = v77 + 136 * v78;
        sub_1FE5C0(*(uint64_t *)&v136[8], (uint64_t)buf);
        *(void *)&v136[16] += 136LL;
        sub_1FE68C(v68 + 5, v136);
        unint64_t v72 = v68[6];
        sub_1FE75C((uint64_t)v136);
      }

      else
      {
        sub_1FE5C0(v67[6], (uint64_t)buf);
        unint64_t v72 = v71 + 136;
        v68[6] = v71 + 136;
      }

      v68[6] = v72;
    }

LABEL_209:
    if (v109)
    {
      *(void *)unint64_t v136 = &cf;
      sub_8CD60((void ***)v136);
    }

    id v94 = *(id *)sub_138E8(1);
    uint64_t v95 = v94;
    if (v94)
    {
      uint64_t v96 = (os_log_s *)v94;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
      {
        else {
          std::string cf = v117;
        }
        p_std::string cf = &cf;
        if ((cf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)unint64_t v136 = 136315650;
        *(void *)&v136[4] = "SoundAutoConfigUtilities.mm";
        *(_WORD *)&v136[12] = 1024;
        *(_DWORD *)&v136[14] = 137;
        *(_WORD *)&v136[18] = 2080;
        *(void *)&v136[20] = p_cf;
        _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_INFO,  "%25s:%-5d Parsed SoundAutoConfig tuning at path %s into ConditionalOverlayTuning",  v136,  0x1Cu);
      }
    }

    if (v145 < 0) {
      operator delete(v144);
    }
    sub_9DBD0((uint64_t)&buf[16]);
    sub_88C08(v115[0]);
    sub_88C08(v113[0]);
    sub_32C8C(v111[0]);
LABEL_224:
    if (v120) {
      CFRelease(v120);
    }
    if (v119 < 0) {
      operator delete(__p[0]);
    }
    ++v128;
  }

  if (v125)
  {
    unint64_t v126 = v125;
    operator delete(v125);
  }

  if (v123)
  {
    uint64_t v124 = v123;
    operator delete(v123);
  }

  if (v131)
  {
    uint64_t v132 = v131;
    operator delete(v131);
  }

  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }

  id v98 = *(id *)sub_138E8(1);
  uint64_t v99 = v98;
  if (v98)
  {
    uint64_t v100 = (os_log_s *)v98;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
    {
      if (!theDict)
      {
        uint64_t v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v105, "Could not construct");
      }

      CFIndex Count = CFDictionaryGetCount(theDict);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "SoundAutoConfigUtilities.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 141;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "SoundAutoConfigStrips.plist";
      __int16 v142 = 2048;
      CFIndex v143 = Count;
      _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_INFO,  "%25s:%-5d Parsed %s into %zu ConditionalOverlayTunings",  buf,  0x26u);
    }
  }

  if (theDict) {
    CFRelease(theDict);
  }
}

void sub_342A14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
}

double sub_342D98(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(this);
  if (v3.__size >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_7D1D4();
  }
  if (v3.__size >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v3.__size | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size;
    unint64_t v9 = v6 | 0x8000000000000000LL;
    *(void *)&__int128 __dst = p_dst;
  }

  else
  {
    HIBYTE(v9) = v3.__size;
    p_dst = &__dst;
    if (!v3.__size) {
      goto LABEL_9;
    }
  }

  memmove(p_dst, v3.__data, v3.__size);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t *sub_342E58(unsigned int a1, _DWORD *a2)
{
  uint64_t v3 = qword_4A1A90;
  if (qword_4A1A90)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3;
        unsigned int v5 = *(_DWORD *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        std::basic_string_view<_CharT, _Traits>::size_type v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }

      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        std::basic_string_view<_CharT, _Traits>::size_type v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    std::basic_string_view<_CharT, _Traits>::size_type v6 = &qword_4A1A90;
    uint64_t v4 = &qword_4A1A90;
LABEL_9:
    uint64_t v7 = v4;
    uint64_t v4 = (uint64_t *)operator new(0x40uLL);
    *((_DWORD *)v4 + 8) = *a2;
    v4[6] = 0LL;
    v4[7] = 0LL;
    v4[5] = 0LL;
    uint64_t *v4 = 0LL;
    v4[1] = 0LL;
    v4[2] = (uint64_t)v7;
    uint64_t *v6 = (uint64_t)v4;
    uint64_t v8 = v4;
    if (*(void *)qword_4A1A88)
    {
      qword_4A1A88 = *(void *)qword_4A1A88;
      uint64_t v8 = (uint64_t *)*v6;
    }

    sub_7A420((uint64_t *)qword_4A1A90, v8);
    ++qword_4A1A98;
  }

  return v4;
}

CFStringRef sub_342F30(_BYTE *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  double result = (const __CFString *)sub_D13C4(a2, __s);
  if (result) {
    return (const __CFString *)sub_7D2D4((CFTypeID)a1, result);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

void sub_342F78(char *a1)
{
  if (a1)
  {
    sub_342F78(*(void *)a1);
    sub_342F78(*((void *)a1 + 1));
    size_t v2 = (void **)(a1 + 40);
    sub_196014(&v2);
    operator delete(a1);
  }

uint64_t sub_342FC8(const __CFDictionary *a1, const UInt8 *__s, uint64_t **a3)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  sub_343254((uint64_t)&cf, a1, __s);
  if (v18 && cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFArrayGetTypeID())
    {
      sub_158524(&v14, &cf);
      if (!v14)
      {
        uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v10, "Could not construct");
      }

      __n128 v12 = 0uLL;
      uint64_t v13 = 0LL;
      sub_3432A4((uint64_t)__p, (const __CFArray *)v14, &v12);
      __int128 v19 = &v12;
      sub_8CD60((void ***)&v19);
      if (v14) {
        CFRelease(v14);
      }
      unsigned int v5 = (void **)__p[0];
      std::basic_string_view<_CharT, _Traits>::size_type v6 = (void **)__p[1];
      while (v5 != v6)
      {
        sub_34344C(a3, v5, (uint64_t)v5);
        v5 += 3;
      }

      v12.n128_u64[0] = (unint64_t)__p;
      sub_8CD60((void ***)&v12);
    }

    else if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFStringGetTypeID())
      {
        sub_D9B14(&v12, &cf);
        if (!v12.n128_u64[0])
        {
          uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v11, "Could not construct");
        }

        sub_48100((uint64_t)__p, (const __CFString *)v12.n128_u64[0]);
        if (v12.n128_u64[0]) {
          CFRelease((CFTypeRef)v12.n128_u64[0]);
        }
        sub_34344C(a3, __p, (uint64_t)__p);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return sub_343334((uint64_t)&cf);
}

void sub_3431A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
}

const void *sub_343254(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  double result = sub_D13C4(a2, __s);
  if (result)
  {
    unsigned int v5 = result;
    double result = CFRetain(result);
    *(void *)a1 = v5;
    char v6 = 1;
  }

  else
  {
    char v6 = 0;
    *(_BYTE *)a1 = 0;
  }

  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

__n128 sub_3432A4(uint64_t a1, const __CFArray *a2, __n128 *a3)
{
  if (v8)
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    sub_8DC78((char *)a1, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    unint64_t v9 = &v6;
    sub_8CD60((void ***)&v9);
  }

  else
  {
    __n128 result = *a3;
    *(__n128 *)a1 = *a3;
    *(void *)(a1 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[1] = 0LL;
    a3[1].n128_u64[0] = 0LL;
    a3->n128_u64[0] = 0LL;
  }

  return result;
}

uint64_t sub_343334(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    size_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

uint64_t sub_34336C(const __CFDictionary **a1)
{
  size_t v2 = *a1;
  if (!v2) {
    goto LABEL_12;
  }
  LOWORD(v3) = sub_22C330(v2, (const UInt8 *)"calibrationMode");
  if ((unsigned __int16)v3 >= 0x100u)
  {
    int v5 = 1;
    return v3 | (v5 << 8);
  }

  if (!*a1)
  {
LABEL_12:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  uint64_t v3 = (const __CFNumber *)sub_D13C4(*a1, (const UInt8 *)"calibrationMode");
  if (v3)
  {
    uint64_t v3 = sub_36328(v3);
    unint64_t v4 = (unint64_t)v3 >> 32;
    else {
      LOBYTE(v3) = 0;
    }
    int v5 = v4 != 0;
  }

  else
  {
    int v5 = 0;
  }

  return v3 | (v5 << 8);
}

void sub_343434(_Unwind_Exception *a1)
{
}

uint64_t *sub_34344C(uint64_t **a1, void **a2, uint64_t a3)
{
  __n128 result = sub_845D8((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    char v6 = (uint64_t **)result;
    sub_E72E8((uint64_t)&v7, (uint64_t)a1, a3);
    return sub_32C38(a1, v8, v6, v7);
  }

  return result;
}

void *sub_3434C0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_483408;
  return result;
}

void sub_3434E4(uint64_t a1, void *a2)
{
  *a2 = &off_483408;
}

BOOL sub_3434FC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_34351C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_4833C0;
  return result;
}

void sub_343540(uint64_t a1, void *a2)
{
  *a2 = &off_4833C0;
}

BOOL sub_343558(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_343578()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_483378;
  return result;
}

void sub_34359C(uint64_t a1, void *a2)
{
  *a2 = &off_483378;
}

uint64_t sub_3435B4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_343614()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_483330;
  return result;
}

void sub_343638(uint64_t a1, void *a2)
{
  *a2 = &off_483330;
}

uint64_t sub_343650(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_343668()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4832E8;
  return result;
}

void sub_34368C(uint64_t a1, void *a2)
{
  *a2 = &off_4832E8;
}

uint64_t sub_3436A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_3436BC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4832A0;
  return result;
}

void sub_3436E0(uint64_t a1, void *a2)
{
  *a2 = &off_4832A0;
}

BOOL sub_3436F8(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_34371C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_483258;
  return result;
}

void sub_343740(uint64_t a1, void *a2)
{
  *a2 = &off_483258;
}

uint64_t sub_343758(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

#error "343768: too big function (funcsize=0)"
void sub_363A2C(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __cxa_guard_abort(&qword_49D650);
  sub_239798((uint64_t)&STACK[0x34C0]);
  sub_178504((void **)&STACK[0x1A90]);
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  if (SLOBYTE(STACK[0xB57]) < 0) {
    operator delete((void *)STACK[0xB40]);
  }
  if (SLOBYTE(STACK[0xB9F]) < 0) {
    operator delete((void *)STACK[0xB88]);
  }
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  if (SLOBYTE(STACK[0xC2F]) < 0) {
    operator delete((void *)STACK[0xC18]);
  }
  if (SLOBYTE(STACK[0xC77]) < 0) {
    operator delete((void *)STACK[0xC60]);
  }
  if (SLOBYTE(STACK[0xCBF]) < 0) {
    operator delete((void *)STACK[0xCA8]);
  }
  if (SLOBYTE(STACK[0xD07]) < 0) {
    operator delete((void *)STACK[0xCF0]);
  }
  if (SLOBYTE(STACK[0xD4F]) < 0) {
    operator delete((void *)STACK[0xD38]);
  }
  if (SLOBYTE(STACK[0xD97]) < 0) {
    operator delete((void *)STACK[0xD80]);
  }
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  sub_33EACC((uint64_t)&STACK[0x13A8], v2, v3, v4, v5, v6, v7, v8);
  if (SLOBYTE(STACK[0x1407]) < 0) {
    operator delete((void *)STACK[0x13F0]);
  }
  sub_19DFC((uint64_t)&STACK[0x1408]);
  if (LOBYTE(STACK[0x1440])) {
    sub_830A4((uint64_t)&STACK[0x1418]);
  }
  sub_830DC((uint64_t)&STACK[0x1448]);
  sub_830A4((uint64_t)&STACK[0x1498]);
  sub_8399C((uint64_t)&STACK[0x14C0]);
  sub_82FFC((uint64_t)&STACK[0x1510]);
  sub_24A0AC((uint64_t)&STACK[0x18F0]);
  unint64_t v9 = STACK[0x1978];
  STACK[0x1978] = 0LL;
  if (v9) {
    sub_2492EC(v9);
  }
  uint64_t v10 = STACK[0x1980];
  STACK[0x1980] = 0LL;
  if (v10) {
    sub_2492EC(v10);
  }
  uint64_t v11 = STACK[0x1988];
  STACK[0x1988] = 0LL;
  if (v11) {
    sub_2492EC(v11);
  }
  _Unwind_Resume(a1);
}

void *sub_366528(uint64_t a1)
{
  if (!*(_BYTE *)a1) {
    return 0LL;
  }
  size_t v2 = (os_log_t *)sub_138E8(20);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)&v11[4] = "RoutingSettings_J98.cpp";
    __int16 v12 = 1024;
    int v13 = 760;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating subport config for spatial recording",  v11,  0x12u);
  }

  unint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&v11[4] = "RoutingSettings_J98.cpp";
      __int16 v12 = 1024;
      int v13 = 761;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v11, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  char v6 = operator new(0x80uLL);
  uint64_t *v4 = 0LL;
  *(void *)uint64_t v11 = v5;
  v11[8] = 1;
  sub_2CE400( (uint64_t)v6,  0x1616C6C20LL,  &qword_402F28,  &qword_402F30,  &qword_402F78,  (uint64_t *)v11,  &xmmword_402F38,  (uint64_t)&unk_402F48);
  return v6;
}

void sub_366704(_Unwind_Exception *a1)
{
}

void *sub_366730(uint64_t a1)
{
  if (!*(_BYTE *)a1) {
    return 0LL;
  }
  size_t v2 = (os_log_t *)sub_138E8(20);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)&v11[4] = "RoutingSettings_J98.cpp";
    __int16 v12 = 1024;
    int v13 = 772;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating subport config for multicam recording",  v11,  0x12u);
  }

  unint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&v11[4] = "RoutingSettings_J98.cpp";
      __int16 v12 = 1024;
      int v13 = 773;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v11, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  char v6 = operator new(0x80uLL);
  uint64_t *v4 = 0LL;
  *(void *)uint64_t v11 = v5;
  v11[8] = 1;
  sub_2CE400( (uint64_t)v6,  0x1616C6C20LL,  &qword_402F28,  &qword_402F30,  &qword_402F78,  (uint64_t *)v11,  &xmmword_402F38,  (uint64_t)&unk_402F48);
  return v6;
}

void sub_36690C(_Unwind_Exception *a1)
{
}

void *sub_366938(uint64_t a1)
{
  if (!*(_BYTE *)a1) {
    return 0LL;
  }
  size_t v2 = (os_log_t *)sub_138E8(20);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)&v11[4] = "RoutingSettings_J98.cpp";
    __int16 v12 = 1024;
    int v13 = 811;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating subport config for webcam recording",  v11,  0x12u);
  }

  unint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&v11[4] = "RoutingSettings_J98.cpp";
      __int16 v12 = 1024;
      int v13 = 812;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v11, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  char v6 = operator new(0x80uLL);
  uint64_t *v4 = 0LL;
  *(void *)uint64_t v11 = v5;
  v11[8] = 1;
  sub_2CE400( (uint64_t)v6,  0x1616C6C20LL,  &qword_402F28,  &qword_402F30,  &qword_402F78,  (uint64_t *)v11,  &xmmword_402F38,  (uint64_t)&unk_402F48);
  return v6;
}

void sub_366B14(_Unwind_Exception *a1)
{
}

uint64_t sub_366B40()
{
  qword_4A8760 = 0LL;
  qword_4A8758 = (uint64_t)&qword_4A8760;
  qword_4A8778 = 0LL;
  qword_4A8768 = 0LL;
  unk_4A8770 = &qword_4A8778;
  qword_4A8798 = 0LL;
  qword_4A8790 = 0LL;
  qword_4A8780 = 0LL;
  unk_4A8788 = &qword_4A8790;
  return sub_2D5228((uint64_t **)&qword_4A8758, (uint64_t)&qword_4A9190, qword_4A8480);
}

void sub_366B9C(_Unwind_Exception *a1)
{
}

uint64_t sub_366BB4()
{
  qword_4A87B0 = 0LL;
  qword_4A87A8 = (uint64_t)&qword_4A87B0;
  qword_4A87C8 = 0LL;
  qword_4A87B8 = 0LL;
  unk_4A87C0 = &qword_4A87C8;
  qword_4A87E8 = 0LL;
  qword_4A87E0 = 0LL;
  qword_4A87D0 = 0LL;
  unk_4A87D8 = &qword_4A87E0;
  sub_DB44C((uint64_t)v1, 1, 1768776806, 1634231920);
  sub_2D5228((uint64_t **)&qword_4A87A8, (uint64_t)v1, qword_4A8460);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }

  return sub_2D5228((uint64_t **)&qword_4A87A8, (uint64_t)&qword_4A9190, qword_4A8458);
}

void sub_366C64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_366C98()
{
  qword_4A8800 = 0LL;
  qword_4A87F8 = (uint64_t)&qword_4A8800;
  qword_4A8818 = 0LL;
  qword_4A8808 = 0LL;
  unk_4A8810 = &qword_4A8818;
  qword_4A8838 = 0LL;
  qword_4A8830 = 0LL;
  qword_4A8820 = 0LL;
  unk_4A8828 = &qword_4A8830;
  sub_DB44C((uint64_t)v0, 1, 1768776806, 1634231920);
  sub_2D5228((uint64_t **)&qword_4A87F8, (uint64_t)v0, qword_4A8340);
  if (__p)
  {
    size_t v2 = __p;
    operator delete(__p);
  }

void sub_366D2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_F2A64((void **)&qword_4A87F8);
  _Unwind_Resume(a1);
}

void sub_366D5C()
{
  qword_4A8850 = 0LL;
  qword_4A8848 = (uint64_t)&qword_4A8850;
  qword_4A8868 = 0LL;
  qword_4A8858 = 0LL;
  unk_4A8860 = &qword_4A8868;
  qword_4A8888 = 0LL;
  qword_4A8880 = 0LL;
  qword_4A8870 = 0LL;
  unk_4A8878 = &qword_4A8880;
  sub_DB44C((uint64_t)v0, 1, 1768776806, 1634231920);
  sub_2D5228((uint64_t **)&qword_4A8848, (uint64_t)v0, qword_4A8338);
  if (__p)
  {
    size_t v2 = __p;
    operator delete(__p);
  }

void sub_366DF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_F2A64((void **)&qword_4A8848);
  _Unwind_Resume(a1);
}

uint64_t sub_366E20()
{
  qword_4A88A0 = 0LL;
  qword_4A8898 = (uint64_t)&qword_4A88A0;
  qword_4A88B8 = 0LL;
  qword_4A88A8 = 0LL;
  unk_4A88B0 = &qword_4A88B8;
  qword_4A88D8 = 0LL;
  qword_4A88D0 = 0LL;
  qword_4A88C0 = 0LL;
  unk_4A88C8 = &qword_4A88D0;
  sub_2D5228((uint64_t **)&qword_4A8898, (uint64_t)&qword_4A9190, qword_4A8180);
  sub_2D613C((uint64_t)&qword_4A8898);
  sub_2D6A60((uint64_t)&qword_4A8898, (int *)&qword_4A9190, 2);
  return sub_2D6400((uint64_t)&qword_4A8898, (int *)&qword_4A9190, qword_4A7C50, dword_4A7CC8);
}

void sub_366EC4(_Unwind_Exception *a1)
{
}

uint64_t sub_366EDC()
{
  qword_4A88F0 = 0LL;
  qword_4A88E8 = (uint64_t)&qword_4A88F0;
  qword_4A8908 = 0LL;
  qword_4A88F8 = 0LL;
  unk_4A8900 = &qword_4A8908;
  qword_4A8928 = 0LL;
  qword_4A8920 = 0LL;
  qword_4A8910 = 0LL;
  unk_4A8918 = &qword_4A8920;
  sub_2D5228((uint64_t **)&qword_4A88E8, (uint64_t)&qword_4A9190, qword_4A8190);
  sub_2D613C((uint64_t)&qword_4A88E8);
  sub_2D6A60((uint64_t)&qword_4A88E8, (int *)&qword_4A9190, 2);
  return sub_2D6400((uint64_t)&qword_4A88E8, (int *)&qword_4A9190, qword_4A7C50, dword_4A7CC8);
}

void sub_366F80(_Unwind_Exception *a1)
{
}

uint64_t sub_366F98()
{
  qword_4A8940 = 0LL;
  qword_4A8938 = (uint64_t)&qword_4A8940;
  qword_4A8958 = 0LL;
  qword_4A8948 = 0LL;
  unk_4A8950 = &qword_4A8958;
  qword_4A8978 = 0LL;
  qword_4A8970 = 0LL;
  qword_4A8960 = 0LL;
  unk_4A8968 = &qword_4A8970;
  sub_2D5228((uint64_t **)&qword_4A8938, (uint64_t)&qword_4A9190, (uint64_t)&unk_4A81A0);
  sub_2D6A60((uint64_t)&qword_4A8938, (int *)&qword_4A9190, 2);
  return sub_2D6400((uint64_t)&qword_4A8938, (int *)&qword_4A9190, qword_4A7C50, dword_4A7CC8);
}

void sub_367030(_Unwind_Exception *a1)
{
}

uint64_t sub_367048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t **)a2;
  *(void *)(a2 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = a2 + 32;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = a2 + 56;
  sub_2D5228((uint64_t **)a2, (uint64_t)&qword_4A9190, qword_4A8078);
  *(void *)AudioObjectPropertyAddress buf = 0x696D646600000001LL;
  *(void *)&buf[8] = 1LL;
  *(_DWORD *)&buf[16] = 0;
  int v22 = 0;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v23 = 0LL;
  sub_2D5228(v3, (uint64_t)buf, qword_4A8088);
  *(void *)AudioObjectPropertyAddress buf = 0x6D6F767000000001LL;
  *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
  int v22 = 0;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v23 = 0LL;
  sub_2D5228(v3, (uint64_t)buf, qword_4A8098);
  *(void *)AudioObjectPropertyAddress buf = 0x6D6F767000000001LL;
  *(void *)&buf[8] = 1LL;
  *(_DWORD *)&buf[16] = 0;
  int v22 = 0;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v23 = 0LL;
  sub_2D5228(v3, (uint64_t)buf, qword_4A80A8);
  *(void *)AudioObjectPropertyAddress buf = 0x6D736D7400000001LL;
  *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
  int v22 = 0;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v23 = 0LL;
  sub_2D5228(v3, (uint64_t)buf, qword_4A80B8);
  *(void *)AudioObjectPropertyAddress buf = 0x7261772000000001LL;
  *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
  int v22 = 0;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v23 = 0LL;
  sub_2D5228(v3, (uint64_t)buf, qword_4A80C8);
  if (sub_1CBD44())
  {
    *(void *)AudioObjectPropertyAddress buf = 0x6D706D7500000001LL;
    *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
    int v22 = 0;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v23 = 0LL;
    sub_2D5228(v3, (uint64_t)buf, (uint64_t)&unk_4A80D8);
  }

  uint64_t v4 = 0LL;
  qmemcpy(v20, "comicvmitcmg", 12);
  do
  {
    int v5 = *(_DWORD *)((char *)v20 + v4);
    *(_DWORD *)AudioObjectPropertyAddress buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
    int v22 = 0;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v23 = 0LL;
    sub_2D5228(v3, (uint64_t)buf, qword_4A8160);
    v4 += 4LL;
  }

  while (v4 != 12);
  uint64_t v6 = 0LL;
  CFTypeID v7 = "ovpvivpvcgpvcvmrsibikniobolg";
  uint64_t v8 = &unk_4A8000;
  unint64_t v9 = "";
  do
  {
    int v10 = *(_DWORD *)&v7[v6];
    *(_DWORD *)AudioObjectPropertyAddress buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
    int v22 = 0;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v23 = 0LL;
    sub_2D5228(v3, (uint64_t)buf, v8[46]);
    *(_DWORD *)AudioObjectPropertyAddress buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
    int v22 = 0;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v23 = 0LL;
    sub_2D6400((uint64_t)v3, (int *)buf, (uint64_t)v9, 0);
    if (!*(_BYTE *)(a1 + 720))
    {
      uint64_t v11 = (uint64_t)v3;
      if (!*(_BYTE *)(a1 + 308))
      {
        os_log_t v17 = (os_log_t *)sub_138E8(13);
        char v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingSettings_J98.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1175;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      __int16 v12 = v9;
      int v13 = v8;
      CFTypeRef v14 = v7;
      int v15 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)AudioObjectPropertyAddress buf = 1;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_OWORD *)&buf[8] = *(_OWORD *)sub_2FC95C();
      int v22 = 0;
      uint64_t v24 = 0LL;
      uint64_t v25 = 0LL;
      uint64_t v23 = 0LL;
      sub_2D6A60(v11, (int *)buf, v15);
      CFTypeID v7 = v14;
      uint64_t v8 = v13;
      unint64_t v9 = v12;
      uint64_t v3 = (uint64_t **)v11;
    }

    v6 += 4LL;
  }

  while (v6 != 20);
  sub_2D6400((uint64_t)v3, (int *)&qword_4A9190, qword_4A7C50, dword_4A7CC8);
  return sub_2D6A60((uint64_t)v3, (int *)&qword_4A9190, 2);
}

void sub_36749C(_Unwind_Exception *a1)
{
}

uint64_t sub_367518()
{
  qword_4A8B20 = 0LL;
  qword_4A8B18 = (uint64_t)&qword_4A8B20;
  qword_4A8B38 = 0LL;
  qword_4A8B28 = 0LL;
  unk_4A8B30 = &qword_4A8B38;
  qword_4A8B58 = 0LL;
  qword_4A8B50 = 0LL;
  qword_4A8B40 = 0LL;
  unk_4A8B48 = &qword_4A8B50;
  sub_2D5228((uint64_t **)&qword_4A8B18, (uint64_t)&qword_4A9190, qword_4A8278);
  return sub_2D6400((uint64_t)&qword_4A8B18, (int *)&qword_4A9190, (uint64_t)&unk_402E88, 0);
}

void sub_367594(_Unwind_Exception *a1)
{
}

void sub_3675AC()
{
  qword_4A8B70 = 0LL;
  qword_4A8B68 = (uint64_t)&qword_4A8B70;
  qword_4A8B88 = 0LL;
  qword_4A8B78 = 0LL;
  unk_4A8B80 = &qword_4A8B88;
  qword_4A8BA8 = 0LL;
  qword_4A8BA0 = 0LL;
  qword_4A8B90 = 0LL;
  unk_4A8B98 = &qword_4A8BA0;
  sub_2D5228((uint64_t **)&qword_4A8B68, (uint64_t)&qword_4A9190, qword_4A8440);
  sub_2D6400((uint64_t)&qword_4A8B68, (int *)&qword_4A9190, (uint64_t)&dword_4A7C98, 0);
  sub_DB44C((uint64_t)v4, 1, 1768776806, 1633759844);
  DWORD2(v0) = 0;
  *(void *)&__int128 v0 = 2LL;
  sub_17E44C((uint64_t)v1, 1768776806, &v0, 1633759844);
  sub_2D5228((uint64_t **)&qword_4A8B68, (uint64_t)v4, qword_4A8440);
  sub_2D5228((uint64_t **)&qword_4A8B68, (uint64_t)v1, qword_4A8278);
  sub_2D6400((uint64_t)&qword_4A8B68, v4, (uint64_t)&unk_402E88, 0);
  sub_2D6400((uint64_t)&qword_4A8B68, v1, (uint64_t)&unk_402E88, 0);
  sub_2D6400((uint64_t)&qword_4A8B68, v4, (uint64_t)&unk_402E58, 1);
  sub_2D6400((uint64_t)&qword_4A8B68, v1, (uint64_t)&unk_402E58, 1);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }

  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }

void sub_367730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_F2A64((void **)&qword_4A8B68);
  _Unwind_Resume(a1);
}

char *sub_36777C(char **a1, uint64_t a2, int a3, uint64_t a4)
{
  *a1 = (char *)a1;
  a1[1] = (char *)a1;
  a1[2] = 0LL;
  *((_DWORD *)a1 + 6) = 3;
  a1[6] = 0LL;
  a1[5] = 0LL;
  a1[4] = (char *)(a1 + 5);
  *((_DWORD *)a1 + 14) = 3;
  a1[10] = 0LL;
  a1[11] = 0LL;
  a1[9] = 0LL;
  a1[8] = (char *)(a1 + 9);
  a1[14] = 0LL;
  a1[13] = 0LL;
  a1[12] = (char *)(a1 + 13);
  uint64_t v8 = operator new(0x38uLL);
  v8[2] = 0x706C6F7570617020LL;
  uint64_t v9 = 1LL;
  *((_BYTE *)v8 + 24) = 1;
  v8[4] = &qword_4A9200;
  *((_BYTE *)v8 + 40) = 0;
  *((_BYTE *)v8 + 48) = 0;
  void *v8 = a1;
  v8[1] = a1;
  *a1 = (char *)v8;
  a1[1] = (char *)v8;
  a1[2] = (_BYTE *)(&dword_0 + 1);
  if (!*(_BYTE *)(a2 + 8))
  {
    int v10 = operator new(0x38uLL);
    v10[2] = 0x7073706B70617020LL;
    *((_BYTE *)v10 + 24) = 1;
    v10[4] = a4;
    *((_BYTE *)v10 + 40) = 0;
    *((_BYTE *)v10 + 48) = 0;
    void *v10 = v8;
    v10[1] = a1;
    v8[1] = v10;
    *a1 = (char *)v10;
    uint64_t v9 = 2LL;
    a1[2] = (_BYTE *)(&dword_0 + 2);
    uint64_t v8 = v10;
  }

  uint64_t v11 = operator new(0x38uLL);
  v11[2] = 0x7068646D70617020LL;
  *((_BYTE *)v11 + 24) = 1;
  v11[4] = &qword_4A9200;
  *((_BYTE *)v11 + 40) = 0;
  *((_BYTE *)v11 + 48) = 0;
  void *v11 = v8;
  v11[1] = a1;
  v8[1] = v11;
  *a1 = (char *)v11;
  a1[2] = (char *)(v9 + 1);
  __int16 v12 = operator new(0x38uLL);
  v12[2] = 0x7064737070617020LL;
  *((_BYTE *)v12 + 24) = 1;
  v12[4] = &qword_4A9200;
  *((_BYTE *)v12 + 40) = 0;
  *((_BYTE *)v12 + 48) = 0;
  *__int16 v12 = v11;
  v12[1] = a1;
  v11[1] = v12;
  *a1 = (char *)v12;
  a1[2] = (char *)(v9 + 2);
  int v13 = operator new(0x38uLL);
  v13[2] = 0x7075736F70617020LL;
  *((_BYTE *)v13 + 24) = 1;
  v13[4] = &qword_4A9200;
  *((_BYTE *)v13 + 40) = 0;
  *((_BYTE *)v13 + 48) = 0;
  void *v13 = v12;
  v13[1] = a1;
  v12[1] = v13;
  *a1 = (char *)v13;
  a1[2] = (char *)(v9 + 3);
  CFTypeRef v14 = operator new(0x38uLL);
  v14[2] = 0x7074626F70617020LL;
  *((_BYTE *)v14 + 24) = 1;
  v14[4] = &qword_4A9200;
  *((_BYTE *)v14 + 40) = 0;
  *((_BYTE *)v14 + 48) = 0;
  *CFTypeRef v14 = v13;
  v14[1] = a1;
  v13[1] = v14;
  *a1 = (char *)v14;
  a1[2] = (char *)(v9 | 4);
  if (a3)
  {
    if (a3 == 3)
    {
      CFTypeID v31 = operator new(0x38uLL);
      v31[2] = 0x7068707770617020LL;
      *((_BYTE *)v31 + 24) = 1;
      v31[4] = &qword_4A8758;
      *((_BYTE *)v31 + 40) = 0;
      *((_BYTE *)v31 + 48) = 0;
      *CFTypeID v31 = v14;
      v31[1] = a1;
      v14[1] = v31;
      *a1 = (char *)v31;
      a1[2] = (char *)(v9 + 5);
      int v32 = operator new(0x38uLL);
      v32[2] = 0x7068706270617020LL;
      *((_BYTE *)v32 + 24) = 1;
      v32[4] = &qword_4A87F8;
      v32[5] = &qword_4A20C8;
      *((_BYTE *)v32 + 48) = 1;
      *int v32 = v31;
      v32[1] = a1;
      v31[1] = v32;
      *a1 = (char *)v32;
      a1[2] = (char *)(v9 + 6);
      __int128 v19 = operator new(0x38uLL);
      v19[2] = 0x7068706270617020LL;
      *((_BYTE *)v19 + 24) = 1;
      v19[4] = &qword_4A87A8;
      v19[5] = &qword_4A20D8;
      *((_BYTE *)v19 + 48) = 1;
      *__int128 v19 = v32;
      v19[1] = a1;
      v32[1] = v19;
      uint64_t v20 = v9 + 7;
      *a1 = (char *)v19;
    }

    else if (a3 == 2)
    {
      int v15 = operator new(0x38uLL);
      v15[2] = 0x7068707770617020LL;
      *((_BYTE *)v15 + 24) = 1;
      v15[4] = &unk_4A8708;
      *((_BYTE *)v15 + 40) = 0;
      *((_BYTE *)v15 + 48) = 0;
      *int v15 = v14;
      v15[1] = a1;
      v14[1] = v15;
      *a1 = (char *)v15;
      a1[2] = (char *)(v9 + 5);
      char v16 = operator new(0x38uLL);
      v16[2] = 0x706C656F70617020LL;
      *((_BYTE *)v16 + 24) = 1;
      v16[4] = &qword_4A9200;
      *((_BYTE *)v16 + 40) = 0;
      *((_BYTE *)v16 + 48) = 0;
      *char v16 = v15;
      v16[1] = a1;
      v15[1] = v16;
      *a1 = (char *)v16;
      a1[2] = (char *)(v9 + 6);
      os_log_t v17 = operator new(0x38uLL);
      v17[2] = 0x7068704270617020LL;
      *((_BYTE *)v17 + 24) = 1;
      v17[4] = &unk_4A8708;
      *((_BYTE *)v17 + 40) = 0;
      *((_BYTE *)v17 + 48) = 0;
      *os_log_t v17 = v16;
      v17[1] = a1;
      v16[1] = v17;
      *a1 = (char *)v17;
      a1[2] = (char *)(v9 + 7);
      uint64_t v18 = qword_4A8C08;
      __int128 v19 = operator new(0x38uLL);
      v19[2] = 0x7073746F70617020LL;
      *((_BYTE *)v19 + 24) = 1;
      v19[4] = v18;
      *((_BYTE *)v19 + 40) = 0;
      *((_BYTE *)v19 + 48) = 0;
      *__int128 v19 = v17;
      v19[1] = a1;
      v17[1] = v19;
      *a1 = (char *)v19;
      uint64_t v20 = v9 | 8;
    }

    else
    {
      unsigned int v33 = operator new(0x38uLL);
      v33[2] = 0x7068707770617020LL;
      *((_BYTE *)v33 + 24) = 1;
      v33[4] = &unk_4A8708;
      *((_BYTE *)v33 + 40) = 0;
      *((_BYTE *)v33 + 48) = 0;
      *unsigned int v33 = v14;
      v33[1] = a1;
      v14[1] = v33;
      *a1 = (char *)v33;
      a1[2] = (char *)(v9 + 5);
      id v34 = operator new(0x38uLL);
      v34[2] = 0x706C656F70617020LL;
      *((_BYTE *)v34 + 24) = 1;
      v34[4] = &qword_4A9200;
      *((_BYTE *)v34 + 40) = 0;
      *((_BYTE *)v34 + 48) = 0;
      *id v34 = v33;
      v34[1] = a1;
      v33[1] = v34;
      *a1 = (char *)v34;
      a1[2] = (char *)(v9 + 6);
      uint64_t v35 = qword_4A8C08;
      __int128 v19 = operator new(0x38uLL);
      v19[2] = 0x7073746F70617020LL;
      *((_BYTE *)v19 + 24) = 1;
      v19[4] = v35;
      *((_BYTE *)v19 + 40) = 0;
      *((_BYTE *)v19 + 48) = 0;
      *__int128 v19 = v34;
      v19[1] = a1;
      v34[1] = v19;
      *a1 = (char *)v19;
      uint64_t v20 = v9 + 7;
    }
  }

  else
  {
    uint32_t v21 = operator new(0x38uLL);
    v21[2] = 0x7068707770617020LL;
    *((_BYTE *)v21 + 24) = 1;
    v21[4] = &unk_4A8708;
    *((_BYTE *)v21 + 40) = 0;
    *((_BYTE *)v21 + 48) = 0;
    *uint32_t v21 = v14;
    v21[1] = a1;
    v14[1] = v21;
    *a1 = (char *)v21;
    a1[2] = (char *)(v9 + 5);
    int v22 = operator new(0x38uLL);
    v22[2] = 0x706C656F70617020LL;
    *((_BYTE *)v22 + 24) = 1;
    v22[4] = &qword_4A9200;
    *((_BYTE *)v22 + 40) = 0;
    *((_BYTE *)v22 + 48) = 0;
    void *v22 = v21;
    v22[1] = a1;
    v21[1] = v22;
    *a1 = (char *)v22;
    a1[2] = (char *)(v9 + 6);
    if (_os_feature_enabled_impl("BluetoothFeatures", "RingtoneOverA2DP"))
    {
      unsigned __int8 v23 = atomic_load((unsigned __int8 *)&qword_4A8D58);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_4A8D58))
      {
        sub_24A670();
        __cxa_guard_release(&qword_4A8D58);
      }

      uint64_t v24 = operator new(0x38uLL);
      v24[2] = 0x7068704270617020LL;
      *((_BYTE *)v24 + 24) = 1;
      v24[4] = &unk_4A8708;
      v24[5] = &qword_4A8D28;
      *((_BYTE *)v24 + 48) = 1;
      uint64_t v25 = *a1;
      void *v24 = *a1;
      v24[1] = a1;
      *((void *)v25 + 1) = v24;
      *a1 = (char *)v24;
      ++a1[2];
    }

    CFTypeID v26 = operator new(0x38uLL);
    v26[2] = 0x7068706270617020LL;
    *((_BYTE *)v26 + 24) = 1;
    v26[4] = &qword_4A8848;
    v26[5] = &qword_4A20C8;
    *((_BYTE *)v26 + 48) = 1;
    uint64_t v27 = *a1;
    *CFTypeID v26 = *a1;
    v26[1] = a1;
    *((void *)v27 + 1) = v26;
    *a1 = (char *)v26;
    uint64_t v28 = a1[2];
    a1[2] = v28 + 1;
    int v29 = operator new(0x38uLL);
    _OWORD v29[2] = 0x7068706270617020LL;
    *((_BYTE *)v29 + 24) = 1;
    v29[4] = &unk_4A8708;
    v29[5] = &qword_4A20D8;
    *((_BYTE *)v29 + 48) = 1;
    *int v29 = v26;
    v29[1] = a1;
    v26[1] = v29;
    *a1 = (char *)v29;
    a1[2] = v28 + 2;
    uint64_t v30 = qword_4A8C08;
    __int128 v19 = operator new(0x38uLL);
    v19[2] = 0x7073746F70617020LL;
    *((_BYTE *)v19 + 24) = 1;
    v19[4] = v30;
    *((_BYTE *)v19 + 40) = 0;
    *((_BYTE *)v19 + 48) = 0;
    *__int128 v19 = v29;
    v19[1] = a1;
    v29[1] = v19;
    *a1 = (char *)v19;
    uint64_t v20 = (uint64_t)(v28 + 3);
  }

  a1[2] = (char *)v20;
  uint64_t v36 = (char *)operator new(0x38uLL);
  strcpy(v36 + 16, " paplunp");
  *((void *)v36 + 4) = &qword_4A9200;
  v36[40] = 0;
  v36[48] = 0;
  *(void *)uint64_t v36 = v19;
  *((void *)v36 + 1) = a1;
  v19[1] = v36;
  *a1 = v36;
  a1[2] = (char *)(v20 + 1);
  unsigned __int8 v37 = atomic_load((unsigned __int8 *)&qword_499DE0);
  if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_499DE0))
  {
    LODWORD(v45) = 20;
    __int128 v43 = xmmword_402424;
    __int128 v44 = unk_402434;
    sub_F1194(qword_499DC8, &v43, 9uLL);
    __cxa_guard_release(&qword_499DE0);
  }

  uint64_t v38 = *(unsigned int ***)a2;
  if (a3)
  {
    __int128 v43 = (unint64_t)qword_499DC8;
    uint64_t v41 = 0x1200000001LL;
    int v42 = 3;
    *(void *)&__int128 v44 = 0LL;
    *((void *)&v44 + 1) = &v41;
    uint64_t v45 = 3LL;
    uint64_t result = (char *)sub_2A2FC4(v38, (uint64_t *)&v43);
  }

  else
  {
    int v40 = 22;
    *(void *)&__int128 v43 = qword_499DC8;
    *((void *)&v43 + 1) = &v40;
    uint64_t v41 = 0x1200000001LL;
    int v42 = 3;
    *(void *)&__int128 v44 = 1LL;
    *((void *)&v44 + 1) = &v41;
    uint64_t v45 = 3LL;
    uint64_t result = (char *)sub_2A2FC4(v38, (uint64_t *)&v43);
  }

  a1[11] = result;
  return result;
}

void sub_367F70(_Unwind_Exception *a1)
{
}

void sub_368014(uint64_t a1)
{
  if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 376LL))( *(void *)(a1 + 8),  1936748595LL,  64008LL,  0LL,  1LL)
    && *(void *)(a1 + 16))
  {
    size_t v2 = (os_log_t *)sub_138E8(19);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v29, 64008LL);
      if (v30 >= 0) {
        uint64_t v4 = v29;
      }
      else {
        uint64_t v4 = (void **)v29[0];
      }
      sub_2CA1C(v27, 1936748595LL);
      int v5 = v28;
      uint64_t v6 = (void **)v27[0];
      sub_151D60(&__p, *(const __CFDictionary **)(a1 + 16));
      CFTypeID v7 = v27;
      if (v5 < 0) {
        CFTypeID v7 = v6;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v32 = "RoutingHandlerAction_ReApplyCPMSPowerBudget.cpp";
      __int16 v33 = 1024;
      int v34 = 24;
      __int16 v35 = 2080;
      uint64_t v36 = v4;
      __int16 v37 = 2080;
      uint64_t v38 = v7;
      __int16 v39 = 2080;
      int v40 = p_p;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Re-apply CPMS Budget: Setting property %s for AU %s Budget Value = %s",  buf,  0x30u);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 8) + 400LL))( *(void *)(a1 + 8),  1936748595LL,  64008LL,  a1 + 16,  8LL,  1LL,  0LL);
  }

  else if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 376LL))( *(void *)(a1 + 8),  1668312369LL,  64100LL,  0LL,  1LL) {
         && *(void *)(a1 + 16))
  }
  {
    uint64_t v9 = (os_log_t *)sub_138E8(19);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v29, 64100LL);
      if (v30 >= 0) {
        uint64_t v11 = v29;
      }
      else {
        uint64_t v11 = (void **)v29[0];
      }
      sub_2CA1C(v27, 1668312369LL);
      int v12 = v28;
      int v13 = (void **)v27[0];
      sub_151D60(&__p, *(const __CFDictionary **)(a1 + 16));
      CFTypeRef v14 = v27;
      if (v12 < 0) {
        CFTypeRef v14 = v13;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v15 = &__p;
      }
      else {
        int v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v32 = "RoutingHandlerAction_ReApplyCPMSPowerBudget.cpp";
      __int16 v33 = 1024;
      int v34 = 30;
      __int16 v35 = 2080;
      uint64_t v36 = v11;
      __int16 v37 = 2080;
      uint64_t v38 = v14;
      __int16 v39 = 2080;
      int v40 = v15;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Re-apply CPMS Budget: Setting property %s for AU %s Budget Value = %s",  buf,  0x30u);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 8) + 400LL))( *(void *)(a1 + 8),  1668312369LL,  64100LL,  a1 + 16,  8LL,  1LL,  0LL);
  }

  else
  {
    char v16 = (os_log_t *)sub_138E8(19);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v29, 64008LL);
      if (v30 >= 0) {
        uint64_t v18 = v29;
      }
      else {
        uint64_t v18 = (void **)v29[0];
      }
      sub_2CA1C(v27, 1936748595LL);
      if (v28 >= 0) {
        __int128 v19 = v27;
      }
      else {
        __int128 v19 = (void **)v27[0];
      }
      sub_2CA1C(&__p, 64100LL);
      int size = (char)__p.__r_.__value_.__s.__size_;
      std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
      sub_2CA1C(v24, 1668312369LL);
      int v22 = &__p;
      if (size < 0) {
        int v22 = (std::string *)v21;
      }
      if (v25 >= 0) {
        unsigned __int8 v23 = v24;
      }
      else {
        unsigned __int8 v23 = (void **)v24[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      int v32 = "RoutingHandlerAction_ReApplyCPMSPowerBudget.cpp";
      __int16 v33 = 1024;
      int v34 = 36;
      __int16 v35 = 2080;
      uint64_t v36 = v18;
      __int16 v37 = 2080;
      uint64_t v38 = v19;
      __int16 v39 = 2080;
      int v40 = v22;
      __int16 v41 = 2080;
      int v42 = v23;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Re-apply CPMS Budget: DSPChain does not have any of the CPMS power budget properties present (%s for A U %s), or (%s for AU %s), nor their corresponding graph properties.",  buf,  0x3Au);
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
  }

void sub_3684D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (v27 < 0) {
    operator delete(v26);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_36854C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  Boolean outIsSettable = 0;
  OSStatus IsPropertySettable = AudioObjectIsPropertySettable(*(_DWORD *)(a1 + 268), a2, &outIsSettable);
  if (outIsSettable >= 2u)
  {
    uint64_t v7 = sub_138E8(13);
    id v8 = sub_8C7D4(1, *(void **)v7, *(void *)(v7 + 8));
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    int v10 = v9;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      CFTypeRef v14 = "Device_HAL_Common.mm";
      __int16 v15 = 1024;
      int v16 = 213;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a bad value",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL returned a bad value");
  }

  return !IsPropertySettable && outIsSettable == 1;
}

void sub_368684(_Unwind_Exception *a1)
{
}

uint64_t sub_3686A0( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if (a2->mSelector == 1836414053)
  {
    uint64_t v13 = sub_138E8(17);
    uint64_t v14 = sub_138E8(38);
    char v15 = 0;
    uint64_t v16 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&buf[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1LL;
      if ((v19 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_8:
    id v20 = *(id *)v13;
    std::string::size_type v21 = v20;
    if (v20)
    {
      int v22 = (os_log_s *)v20;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v85 = a6;
        float v23 = *a6;
        int v24 = *(_DWORD *)(a1 + 268);
        sub_2CA1C(__p, a2->mScope);
        if (v96 >= 0) {
          char v25 = __p;
        }
        else {
          char v25 = (void **)__p[0];
        }
        unsigned int mScope = a2->mScope;
        unsigned int mElement = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v98 = 1024;
        int v99 = 277;
        __int16 v100 = 1024;
        *(float *)uint64_t v101 = v23;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = v24;
        *(_WORD *)&v101[10] = 2080;
        *(void *)&v101[12] = v25;
        *(_WORD *)&v101[20] = 1024;
        *(_DWORD *)&v101[22] = mScope;
        *(_WORD *)&v101[26] = 1024;
        *(_DWORD *)&v101[28] = mElement;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set mute value of %u on HAL device %u (selector: kAudioDevicePropertyMute; scope: '%s' (%u); element: %u).",
          buf,
          0x34u);
        if (v96 < 0) {
          operator delete(__p[0]);
        }
        a6 = v85;
      }
    }

    AudioObjectPropertySelector mSelector = a2->mSelector;
  }

  if (mSelector == 1987013732)
  {
    uint64_t v28 = sub_138E8(17);
    uint64_t v29 = sub_138E8(38);
    char v30 = 0;
    uint64_t v31 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1LL;
      if ((v34 & 1) != 0) {
        goto LABEL_25;
      }
    }

    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
LABEL_25:
    id v35 = *(id *)v28;
    uint64_t v36 = v35;
    if (v35)
    {
      __int16 v37 = (os_log_s *)v35;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        float v38 = *a6;
        int v39 = *(_DWORD *)(a1 + 268);
        sub_2CA1C(__p, a2->mScope);
        int v40 = v96 >= 0 ? __p : (void **)__p[0];
        unsigned int v41 = a2->mScope;
        unsigned int v42 = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v98 = 1024;
        int v99 = 281;
        __int16 v100 = 2048;
        *(double *)uint64_t v101 = v38;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)&v101[10] = v39;
        *(_WORD *)&v101[14] = 2080;
        *(void *)&v101[16] = v40;
        *(_WORD *)&v101[24] = 1024;
        *(_DWORD *)&v101[26] = v41;
        *(_WORD *)&v101[30] = 1024;
        LODWORD(v102) = v42;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set decibel volume value of %f on HAL device %u (selector: kAudioDevicePropertyVolumeDecibels; scope"
          ": '%s' (%u); element: %u).",
          buf,
          0x38u);
        if (v96 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    AudioObjectPropertySelector mSelector = a2->mSelector;
  }

  if (mSelector == 1853059700)
  {
    uint64_t v43 = sub_138E8(17);
    uint64_t v44 = sub_138E8(36);
    char v45 = 0;
    uint64_t v46 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v47 = *(void *)(v43 + 8);
    while (1)
    {
      uint64_t v48 = *(int *)&buf[4 * v46];
      char v49 = v45;
      if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
        break;
      }
      char v45 = 1;
      uint64_t v46 = 1LL;
      if ((v49 & 1) != 0) {
        goto LABEL_41;
      }
    }

    if ((v47 & v48) == 0) {
      uint64_t v43 = v44;
    }
LABEL_41:
    id v50 = *(id *)v43;
    __int128 v51 = v50;
    if (v50)
    {
      BOOL v52 = (os_log_s *)v50;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v86 = a6;
        uint64_t v53 = *(void *)a6;
        int v54 = *(_DWORD *)(a1 + 268);
        sub_2CA1C(__p, a2->mScope);
        if (v96 >= 0) {
          int v55 = __p;
        }
        else {
          int v55 = (void **)__p[0];
        }
        unsigned int v56 = a2->mScope;
        unsigned int v57 = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v98 = 1024;
        int v99 = 286;
        __int16 v100 = 2048;
        *(void *)uint64_t v101 = v53;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)&v101[10] = v54;
        *(_WORD *)&v101[14] = 2080;
        *(void *)&v101[16] = v55;
        *(_WORD *)&v101[24] = 1024;
        *(_DWORD *)&v101[26] = v56;
        *(_WORD *)&v101[30] = 1024;
        LODWORD(v102) = v57;
        _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting sample rate value of %f on HAL device %u (selector: kAudioDevicePropertyNominalSampleRate; s"
          "cope: '%s' (%u); element: %u).",
          buf,
          0x38u);
        if (v96 < 0) {
          operator delete(__p[0]);
        }
        a6 = v86;
      }
    }

    AudioObjectPropertySelector mSelector = a2->mSelector;
  }

  if (mSelector == 1936945763)
  {
    uint64_t v58 = sub_138E8(17);
    if ((*(_BYTE *)(v58 + 8) & 1) != 0)
    {
      id v59 = *(id *)v58;
      if (v59)
      {
        BOOL v60 = (os_log_s *)v59;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          UInt32 v87 = a3;
          int v61 = a6;
          sub_2CA1C(__p, *(unsigned int *)a6);
          int v62 = v96;
          CFTypeRef v63 = (void **)__p[0];
          int v64 = *(_DWORD *)(a1 + 268);
          unint64_t v89 = *(void **)&a2->mSelector;
          unsigned int v90 = a2->mElement;
          sub_613AC((uint64_t)v93, (unsigned int *)&v89);
          uint64_t v65 = __p;
          if (v62 < 0) {
            uint64_t v65 = v63;
          }
          __int16 v66 = v93;
          if (v94 < 0) {
            __int16 v66 = (void **)v93[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v98 = 1024;
          int v99 = 289;
          __int16 v100 = 2080;
          *(void *)uint64_t v101 = v65;
          *(_WORD *)&v101[8] = 1024;
          *(_DWORD *)&v101[10] = v64;
          *(_WORD *)&v101[14] = 2080;
          *(void *)&v101[16] = v66;
          _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting data source value of %s HAL device %u (%s).",  buf,  0x2Cu);
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          a6 = v61;
          if (v96 < 0) {
            operator delete(__p[0]);
          }
          a3 = v87;
        }
      }
    }
  }

  uint64_t result = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 268), a2, a3, a4, a5, a6);
  uint64_t v68 = result;
  if ((_DWORD)result)
  {
    id v69 = *(id *)sub_138E8(17);
    unint64_t v70 = v69;
    if (v69)
    {
      unint64_t v71 = (os_log_s *)v69;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v68);
        if (v96 >= 0) {
          unint64_t v72 = __p;
        }
        else {
          unint64_t v72 = (void **)__p[0];
        }
        int v73 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v92, a1);
        uint64_t v88 = v92[0];
        sub_2CA1C(v93, a2->mSelector);
        int v74 = v94;
        unint64_t v75 = (void **)v93[0];
        unsigned int v76 = a2->mScope;
        sub_2CA1C(&v89, v76);
        unint64_t v77 = v93;
        if (v74 < 0) {
          unint64_t v77 = v75;
        }
        uint64_t v78 = &v89;
        if (v91 < 0) {
          uint64_t v78 = v89;
        }
        unsigned int v79 = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136317442;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v98 = 1024;
        int v99 = 295;
        __int16 v100 = 1024;
        *(_DWORD *)uint64_t v101 = v68;
        *(_WORD *)&v101[4] = 2080;
        *(void *)&v101[6] = v72;
        *(_WORD *)&v101[14] = 1024;
        *(_DWORD *)&v101[16] = v73;
        *(_WORD *)&v101[20] = 2112;
        *(void *)&v101[22] = v88;
        *(_WORD *)&v101[30] = 2080;
        uint64_t v102 = v77;
        __int16 v103 = 1024;
        unsigned int v104 = v76;
        __int16 v105 = 2080;
        std::string v106 = v78;
        __int16 v107 = 1024;
        unsigned int v108 = v79;
        _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %d (%s): mDeviceID %u (uid %@); selector %s; scope %u ('%s'); element %u",
          buf,
          0x52u);
        if (v91 < 0) {
          operator delete(v89);
        }
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        sub_19DFC((uint64_t)v92);
        if (v96 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    uint64_t v80 = sub_138E8(13);
    id v81 = sub_8C7D4(1, *(void **)v80, *(void *)(v80 + 8));
    uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
    uint64_t v83 = v82;
    if (v82)
    {
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v98 = 1024;
        int v99 = 296;
        _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to set property data.",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v68;
  }

  return result;
}

void sub_368F44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (v27 < 0) {
    operator delete(v25);
  }
  sub_19DFC((uint64_t)&a15);
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_368FB0( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  uint64_t v8 = AudioObjectAddPropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4);
  if ((_DWORD)v8)
  {
    id v9 = *(id *)sub_138E8(17);
    int v10 = v9;
    if (v9)
    {
      uint64_t v11 = (os_log_s *)v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v22, v8);
        if (v23 >= 0) {
          int v12 = v22;
        }
        else {
          int v12 = (void **)v22[0];
        }
        int v13 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v21, a1);
        uint64_t v14 = v21[0];
        sub_2CA1C(__p, a2->mSelector);
        if (v20 >= 0) {
          char v15 = __p;
        }
        else {
          char v15 = (void **)__p[0];
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        AudioObjectPropertyElement mElement = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136317186;
        char v25 = "Device_HAL_Common.mm";
        __int16 v26 = 1024;
        int v27 = 313;
        __int16 v28 = 1024;
        int v29 = v8;
        __int16 v30 = 2080;
        uint64_t v31 = v12;
        __int16 v32 = 1024;
        int v33 = v13;
        __int16 v34 = 2112;
        uint64_t v35 = v14;
        __int16 v36 = 2080;
        __int16 v37 = v15;
        __int16 v38 = 1024;
        AudioObjectPropertyScope v39 = mScope;
        __int16 v40 = 1024;
        AudioObjectPropertyElement v41 = mElement;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %d (%s): mDeviceID %u (uid %@); selector %s; scope %u; element %u",
          buf,
          0x48u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)v21);
        if (v23 < 0) {
          operator delete(v22[0]);
        }
      }
    }
  }

  return (_DWORD)v8 == 0;
}

void sub_369194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_3691D8( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
}

unsigned __int8 *sub_369228(uint64_t a1)
{
  v16[0] = 0;
  uint64_t v17 = 0LL;
  sub_36D45C(0LL);
  while (1)
  {
    std::mutex::lock((std::mutex *)(a1 + 320));
    if (!*(void *)(a1 + 400)) {
      break;
    }
    uint64_t v2 = *(void *)(a1 + 392);
    unint64_t v4 = *(void *)(v2 + 16);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    std::mutex::unlock((std::mutex *)(a1 + 320));
    if (!v4)
    {
      if (!v3) {
        return sub_E9064(v16);
      }
      char v11 = 1;
      goto LABEL_18;
    }

    v15[0] = v4;
    v15[1] = (unint64_t)v3;
    if (v3)
    {
      uint64_t v7 = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }

    sub_36D53C(a1, v15);
    if (v3)
    {
      id v9 = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }

      char v11 = 0;
LABEL_18:
      int v12 = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }

      if ((v11 & 1) != 0) {
        return sub_E9064(v16);
      }
    }
  }

  std::mutex::unlock((std::mutex *)(a1 + 320));
  return sub_E9064(v16);
}

void sub_36935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }

    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  sub_E9064((unsigned __int8 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3693D8(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 272;
  uint64_t v3 = 272LL;
  if (a2)
  {
    uint64_t v3 = 296LL;
    uint64_t v2 = a1 + 296;
  }

  return (*(void *)(v2 + 8) - *(void *)(a1 + v3)) >> 4;
}

uint64_t sub_369408(std::mutex *a1, int a2, unsigned int a3)
{
  unint64_t v6 = &a1[4].__m_.__opaque[32];
  uint64_t v7 = 272LL;
  if (a2) {
    uint64_t v7 = 296LL;
  }
  else {
    unint64_t v6 = &a1[4].__m_.__opaque[8];
  }
  uint64_t v8 = *(uint64_t *)((char *)&a1->__m_.__sig + v7);
  if (a3 >= (unint64_t)((*((void *)v6 + 1) - v8) >> 4))
  {
    char v19 = v6;
    uint64_t v20 = v7;
    unsigned int v21 = a3;
    uint64_t v10 = sub_138E8(13);
    id v11 = sub_8C7D4(1, *(void **)v10, *(void *)(v10 + 8));
    int v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    unint64_t v13 = v12;
    if (v12)
    {
      uint64_t v14 = v12;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if (a2) {
          char v15 = "output";
        }
        else {
          char v15 = "input";
        }
        sub_7D084(__p, v15);
        uint64_t v16 = (void **)__p[0];
        if (v23 >= 0) {
          uint64_t v16 = __p;
        }
        uint64_t v17 = (*((void *)v19 + 1) - *(uint64_t *)((char *)&a1->__m_.__sig + v20)) >> 4;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        char v25 = "Device_HAL_Common.mm";
        __int16 v26 = 1024;
        int v27 = 387;
        __int16 v28 = 1024;
        unsigned int v29 = v21;
        __int16 v30 = 2080;
        uint64_t v31 = v16;
        __int16 v32 = 2048;
        uint64_t v33 = v17;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): Requested index %u, but %s stream has only %lu streams.",  buf,  0x2Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C(exception, "Requested index %u, but %s stream has only %lu streams.");
  }

  return *(void *)(v8 + 16LL * a3);
}

void sub_3695EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_369618(uint64_t a1, double a2)
{
  double inData = a2;
  sub_1BB60((std::mutex *)a1);
  uint64_t v3 = sub_138E8(17);
  uint64_t v4 = sub_138E8(36);
  char v5 = 0;
  uint64_t v6 = 0LL;
  *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *((int *)&buf.mSelector + v6);
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1LL;
    if ((v9 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_7:
  id v10 = *(id *)v3;
  id v11 = v10;
  if (v10)
  {
    int v12 = (os_log_s *)v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HAL_Common.mm";
      __int16 v89 = 1024;
      int v90 = 425;
      __int16 v91 = 2048;
      *(double *)unint64_t v92 = a2;
      *(_WORD *)&v92[8] = 1024;
      *(_DWORD *)&v92[10] = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously setting sample rate to %f Hz on physical device %u.",  (uint8_t *)&buf,  0x22u);
    }
  }

  kdebug_trace(553912333LL, (unint64_t)inData, 0LL, 0LL, 0LL);
  AudioObjectID inObjectID = *(_DWORD *)(a1 + 268);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F626E737274LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v14 = sub_138E8(13);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
  {
    id v15 = *(id *)v14;
    if (v15)
    {
      uint64_t v16 = (os_log_s *)v15;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v97.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v97.__cv_.__opaque = inAddress.mElement;
        sub_613AC((uint64_t)&v98, (unsigned int *)&v97);
        uint64_t v17 = v98.__m_.__opaque[15] >= 0 ? &v98 : (std::mutex *)v98.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v89 = 1024;
        int v90 = 166;
        __int16 v91 = 2080;
        *(void *)unint64_t v92 = v17;
        *(_WORD *)&v92[8] = 1024;
        *(_DWORD *)&v92[10] = inObjectID;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v98.__m_.__opaque[15] < 0) {
          operator delete((void *)v98.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v84 = inObjectID;
  AudioObjectPropertyAddress v85 = inAddress;
  int v86 = 0;
  uint64_t v87 = 0LL;
  double v18 = COERCE_DOUBLE(sub_36D260((uint64_t)&v84));
  if (!v19 && inData == v18)
  {
    uint64_t v32 = sub_138E8(13);
    if ((*(_BYTE *)(v32 + 8) & 1) != 0)
    {
      uint64_t v33 = (os_log_s *)*(id *)v32;
      uint64_t v24 = (uint64_t)v33;
      if (!v33) {
        goto LABEL_109;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v89 = 1024;
        int v90 = 191;
        __int16 v91 = 1024;
        *(_DWORD *)unint64_t v92 = inObjectID;
        _os_log_impl( &dword_0,  (os_log_t)v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
      }
    }

void sub_36A270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  sub_7D898((uint64_t)va);
  std::condition_variable::~condition_variable((std::condition_variable *)(v14 - 232));
  std::mutex::~mutex((std::mutex *)(v14 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_36A36C(os_unfair_lock_s *a1)
{
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8)
  {
    strcpy(buf, "Sjnitpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  buf))
    {
      sub_36C6F8((uint64_t)buf, (uint64_t)a1, COERCE_DOUBLE(1869968496LL));
      uint64_t v21 = 0LL;
      *(_OWORD *)std::string __p = 0u;
      int v2 = buf[24];
      uint64_t v3 = __p;
      if (buf[24]) {
        uint64_t v3 = (void **)buf;
      }
      uint64_t v4 = *v3;
      int32x2_t v5 = vdup_n_s32(buf[24] == 0);
      v6.i64[0] = v5.u32[0];
      v6.i64[1] = v5.u32[1];
      int8x16_t v7 = vandq_s8(*(int8x16_t *)&buf[8], (int8x16_t)vcgezq_s64(vshlq_n_s64(v6, 0x3FuLL)));
      *(_OWORD *)(v3 + 1) = 0uLL;
      std::__shared_weak_count *v3 = 0LL;
      int v22 = v4;
      int v19 = (void *)v7.i64[0];
      int8x16_t v23 = v7;
      if (__p[0]) {
        operator delete(__p[0]);
      }
      if (v2 && *(void *)buf) {
        operator delete(*(void **)buf);
      }
      if (v19 == v4)
      {
        strcpy(buf, "Sjnitpni");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        int v8 = sub_F2FAC((uint64_t)a1);
        id v9 = *(id *)sub_138E8(17);
        id v10 = v9;
        if (v9)
        {
          id v11 = (os_log_s *)v9;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            (*(void (**)(void **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                            + 128LL))( __p,  a1);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 853;
            *(_WORD *)&_BYTE buf[18] = 2112;
            *(void **)&buf[20] = __p[0];
            __int16 v25 = 1024;
            int v26 = v8;
            _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Enabling injection stream property on device %@. status: %u",  buf,  0x22u);
            sub_19DFC((uint64_t)__p);
          }
        }

        if (!v8)
        {
          AudioObjectID v12 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
          sub_36C768(v12, 0x6F757470u, &v22);
        }
      }

      if (v4) {
        operator delete(v4);
      }
    }
  }

  uint64_t v13 = 0LL;
  *(_WORD *)AudioObjectPropertyAddress buf = 256;
  do
    sub_36BEA0(a1, buf[v13++]);
  while (v13 != 2);
  strcpy(buf, "nartbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v14 = sub_5C2F8((uint64_t)a1);
  *((void *)&v16 + 1) = v15;
  *(void *)&__int128 v16 = v14;
  if (((v16 >> 32) & 0xFF00000000LL) != 0 && HIDWORD(v14) == 1651274862LL)
  {
    strcpy(buf, "SxEatpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LODWORD(v22) = 0;
    sub_38A8E8((uint64_t)a1, (uint64_t)buf, 4LL, (uint64_t)&v22);
  }

  return 1LL;
}

void sub_36A670(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_36A6A8(uint64_t a1)
{
  int v2 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v3 = a1 + 384;
  uint64_t v4 = *(void *)(a1 + 392);
  if (v4 == a1 + 384)
  {
LABEL_4:
    BOOL v6 = 0LL;
  }

  else
  {
    while (1)
    {
      int v5 = *(_DWORD *)(*(void *)(v4 + 16) + 144LL);
      BOOL v6 = v5 == 1886613611;
      if (v5 == 1886613611) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3) {
        goto LABEL_4;
      }
    }
  }

  std::mutex::unlock(v2);
  return v6;
}

uint64_t sub_36A718()
{
  return 0LL;
}

uint64_t sub_36A720(uint64_t a1, int a2)
{
  int v36 = a2;
  sub_1BB60((std::mutex *)a1);
  uint64_t v4 = sub_138E8(17);
  uint64_t v5 = sub_138E8(36);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = (int)buf[v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  id v11 = *(id *)v4;
  AudioObjectID v12 = v11;
  if (v11)
  {
    uint64_t v13 = (os_log_s *)v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      buf[0] = 136315906;
      *(void *)&buf[1] = "Device_HAL_Common.mm";
      __int16 v38 = 1024;
      int v39 = 447;
      __int16 v40 = 1024;
      *(_DWORD *)uint64_t v41 = a2;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously setting peak power budget to %u mW on physical device %u.",  (uint8_t *)buf,  0x1Eu);
    }
  }

  AudioObjectID v15 = *(_DWORD *)(a1 + 268);
  strcpy((char *)buf, "wBPPptuo");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v16 = sub_36B274(v15, (uint64_t)buf, &v36);
  if ((_DWORD)v16)
  {
    uint64_t v17 = sub_138E8(17);
    uint64_t v18 = sub_138E8(36);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = (int)buf[v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_18:
    id v24 = *(id *)v17;
    __int16 v25 = v24;
    if (v24)
    {
      int v26 = (os_log_s *)v24;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v16);
        int v27 = v35;
        int v28 = (void **)__p[0];
        int v29 = v36;
        int v30 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v33, a1);
        uint64_t v31 = __p;
        if (v27 < 0) {
          uint64_t v31 = v28;
        }
        buf[0] = 136316418;
        *(void *)&buf[1] = "Device_HAL_Common.mm";
        __int16 v38 = 1024;
        int v39 = 455;
        __int16 v40 = 2080;
        *(void *)uint64_t v41 = v31;
        *(_WORD *)&v41[8] = 1024;
        int v42 = v29;
        __int16 v43 = 1024;
        int v44 = v30;
        __int16 v45 = 2112;
        uint64_t v46 = v33[0];
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' setting peak power budget to %d mW on HAL device %u with UID %@",  (uint8_t *)buf,  0x32u);
        sub_19DFC((uint64_t)v33);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return v16;
}

void sub_36AA28(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_36AA68(uint64_t a1, int a2)
{
  int v36 = a2;
  sub_1BB60((std::mutex *)a1);
  uint64_t v4 = sub_138E8(17);
  uint64_t v5 = sub_138E8(36);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = (int)buf[v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  id v11 = *(id *)v4;
  AudioObjectID v12 = v11;
  if (v11)
  {
    uint64_t v13 = (os_log_s *)v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      buf[0] = 136315906;
      *(void *)&buf[1] = "Device_HAL_Common.mm";
      __int16 v38 = 1024;
      int v39 = 465;
      __int16 v40 = 1024;
      *(_DWORD *)uint64_t v41 = a2;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously setting thermal budget to %u mW on physical device %u.",  (uint8_t *)buf,  0x1Eu);
    }
  }

  AudioObjectID v15 = *(_DWORD *)(a1 + 268);
  strcpy((char *)buf, "wBhTptuo");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v16 = sub_36B274(v15, (uint64_t)buf, &v36);
  if ((_DWORD)v16)
  {
    uint64_t v17 = sub_138E8(17);
    uint64_t v18 = sub_138E8(36);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = (int)buf[v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_18:
    id v24 = *(id *)v17;
    __int16 v25 = v24;
    if (v24)
    {
      int v26 = (os_log_s *)v24;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v16);
        int v27 = v35;
        int v28 = (void **)__p[0];
        int v29 = v36;
        int v30 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v33, a1);
        uint64_t v31 = __p;
        if (v27 < 0) {
          uint64_t v31 = v28;
        }
        buf[0] = 136316418;
        *(void *)&buf[1] = "Device_HAL_Common.mm";
        __int16 v38 = 1024;
        int v39 = 472;
        __int16 v40 = 2080;
        *(void *)uint64_t v41 = v31;
        *(_WORD *)&v41[8] = 1024;
        int v42 = v29;
        __int16 v43 = 1024;
        int v44 = v30;
        __int16 v45 = 2112;
        uint64_t v46 = v33[0];
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' setting thermal budget to %d mW on HAL device %u with UID %@",  (uint8_t *)buf,  0x32u);
        sub_19DFC((uint64_t)v33);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return v16;
}

void sub_36AD70(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

void sub_36ADB0(std::mutex *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = &a1[4].__m_.__opaque[8];
  uint64_t v9 = 272LL;
  if (a2)
  {
    uint64_t v9 = 296LL;
    uint64_t v8 = &a1[4].__m_.__opaque[32];
  }

  uint64_t v10 = *(uint64_t *)((char *)&a1->__m_.__sig + v9);
  if (a3 >= (unint64_t)((*((void *)v8 + 1) - v10) >> 4))
  {
    int v14 = v8;
    uint64_t v25 = v9;
    unsigned int v24 = a3;
    uint64_t v15 = sub_138E8(13);
    id v16 = sub_8C7D4(1, *(void **)v15, *(void *)(v15 + 8));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = v17;
    if (v17)
    {
      char v19 = v17;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        if (a2) {
          uint64_t v20 = "output";
        }
        else {
          uint64_t v20 = "input";
        }
        sub_7D084(__p, v20);
        uint64_t v21 = (void **)__p[0];
        if (v27 >= 0) {
          uint64_t v21 = __p;
        }
        uint64_t v22 = (*((void *)v14 + 1) - *(uint64_t *)((char *)&a1->__m_.__sig + v25)) >> 4;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        int v29 = "Device_HAL_Common.mm";
        __int16 v30 = 1024;
        int v31 = 376;
        __int16 v32 = 1024;
        unsigned int v33 = v24;
        __int16 v34 = 2080;
        char v35 = v21;
        __int16 v36 = 2048;
        uint64_t v37 = v22;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): Requested index %u, but %s stream has only %lu streams.",  buf,  0x2Cu);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C(exception, "Requested index %u, but %s stream has only %lu streams.");
  }

  __int128 v11 = *(_OWORD *)(v10 + 16LL * a3);
  *a4 = v11;
  if (*((void *)&v11 + 1))
  {
    AudioObjectID v12 = (unint64_t *)(*((void *)&v11 + 1) + 16LL);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

void sub_36AFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_36AFE8(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 1869968496;
  }
  else {
    int v3 = 1768845428;
  }
  v15[0] = 1936482681;
  v15[1] = v3;
  unint64_t v15[2] = 0;
  unsigned int v14 = (*(uint64_t (**)(uint64_t, _DWORD *, void, void))(*(void *)a1 + 32LL))(a1, v15, 0LL, 0LL);
  uint64_t v4 = (unsigned int *)malloc(24LL * v14);
  if (v14) {
    BOOL v5 = v4 == 0LL;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v13 = std::bad_alloc::bad_alloc(exception);
  }

  char v6 = v4;
  (*(void (**)(uint64_t, _DWORD *, void, void, unsigned int *, unsigned int *))(*(void *)a1 + 40LL))( a1,  v15,  0LL,  0LL,  &v14,  v4);
  uint64_t v7 = *v6;
  if ((_DWORD)v7)
  {
    LODWORD(v8) = 0;
    uint64_t v9 = (int *)(v6 + 2);
    do
    {
      int v10 = *v9;
      v9 += 4;
      uint64_t v8 = (v10 + v8);
      --v7;
    }

    while (v7);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  free(v6);
  return v8;
}

void sub_36B0F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_36B108@<Q0>(AudioObjectID a1@<W1>, __n128 *a2@<X8>)
{
  uint64_t v4 = (os_log_s *)*(id *)sub_138E8(17);
  BOOL v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315650;
    uint64_t v9 = "Device_HAL_Common.mm";
    __int16 v10 = 1024;
    int v11 = 548;
    __int16 v12 = 1024;
    AudioObjectID v13 = a1;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream ID = %u", (uint8_t *)&v8, 0x18u);
  }

  char v6 = operator new(0x70uLL);
  v6[1] = 0LL;
  v6[2] = 0LL;
  void *v6 = off_483768;
  result.n128_u64[0] = sub_177B28((uint64_t)(v6 + 3), a1);
  result.n128_u64[1] = (unint64_t)v6;
  *a2 = result;
  return result;
}

void sub_36B214(_Unwind_Exception *a1)
{
}

void sub_36B234(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_483768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_36B244(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_483768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_36B264(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_36B274(AudioObjectID a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = sub_138E8(13);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    id v7 = *(id *)v6;
    if (v7)
    {
      int v8 = (os_log_s *)v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v76, (unsigned int *)&__p);
        uint64_t v9 = v76.__m_.__opaque[15] >= 0 ? &v76 : (std::mutex *)v76.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v66 = 1024;
        int v67 = 166;
        __int16 v68 = 2080;
        *(void *)int v69 = v9;
        *(_WORD *)&v69[8] = 1024;
        *(_DWORD *)&v69[10] = a1;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v76.__m_.__opaque[15] < 0) {
          operator delete((void *)v76.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v60 = a1;
  uint64_t v61 = *(void *)a2;
  int v62 = *(_DWORD *)(a2 + 8);
  int v63 = 0;
  uint64_t v64 = 0LL;
  unint64_t v10 = sub_36BCB4((uint64_t)&v60);
  if (HIDWORD(v10)) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = *a3 == (_DWORD)v10;
  }
  int v12 = v11;
  uint64_t v13 = sub_138E8(13);
  uint64_t v14 = *(void *)(v13 + 8);
  if (v12)
  {
    if ((v14 & 1) == 0) {
      return 0LL;
    }
    uint64_t v15 = (os_log_s *)*(id *)v13;
    if (!v15) {
      return 0LL;
    }
    id v16 = v15;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v66 = 1024;
      int v67 = 191;
      __int16 v68 = 1024;
      *(_DWORD *)int v69 = a1;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
    }

void sub_36BBEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  sub_7D898((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v37 - 168));
  _Unwind_Resume(a1);
}

unint64_t sub_36BCB4(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_36EF4((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    id v7 = *(id *)sub_138E8(13);
    int v8 = v7;
    if (v7)
    {
      uint64_t v9 = (os_log_s *)v7;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v21, v4);
        int v10 = v22;
        BOOL v11 = (void **)v21[0];
        uint64_t v17 = *v2;
        int v18 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v17);
        int v12 = v21;
        if (v10 < 0) {
          int v12 = v11;
        }
        if (v20 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        AudioObjectID v14 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v24 = 1024;
        int v25 = 176;
        __int16 v26 = 1024;
        int v27 = v4;
        __int16 v28 = 2080;
        uint64_t v29 = v12;
        __int16 v30 = 2080;
        int v31 = v13;
        __int16 v32 = 1024;
        AudioObjectID v33 = v14;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
    }
  }

  unint64_t v15 = HIDWORD(v4);
  if (!v6) {
    unint64_t v15 = 0LL;
  }
  return v15 | (v4 << 32);
}

void sub_36BE70(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

void sub_36BEA0(os_unfair_lock_s *a1, int a2)
{
  int v3 = a1;
  if (a2) {
    uint64_t v4 = 296LL;
  }
  else {
    uint64_t v4 = 272LL;
  }
  if (a2) {
    char v5 = (int64x2_t *)&a1[74];
  }
  else {
    char v5 = (int64x2_t *)&a1[68];
  }
  if (*(void *)((char *)&a1->_os_unfair_lock_opaque + v4) != v5->i64[1])
  {
    char v6 = (os_log_s *)*(id *)sub_138E8(13);
    id v7 = v6;
    if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = "input";
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (a2) {
        int v8 = "output";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 806;
      __int16 v90 = 2080;
      *(void *)__int16 v91 = v8;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE:  %s streams already created",  buf,  0x1Cu);
    }
  }

  AudioObjectID os_unfair_lock_opaque = v3[67]._os_unfair_lock_opaque;
  if (a2) {
    AudioObjectPropertyScope v10 = 1869968496;
  }
  else {
    AudioObjectPropertyScope v10 = 1768845428;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 1937009955;
  *(_DWORD *)&uint8_t buf[4] = v10;
  *(_DWORD *)&buf[8] = 0;
  outDataSize[0] = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize( os_unfair_lock_opaque,  (const AudioObjectPropertyAddress *)buf,  0,  0LL,  outDataSize);
  UInt32 ioDataSize = outDataSize[0];
  if (outDataSize[0])
  {
    uint64_t v78 = (uint64_t)&v78;
    unint64_t v12 = 4 * ((unint64_t)outDataSize[0] >> 2);
    __chkstk_darwin(PropertyDataSize);
    inAddress.AudioObjectPropertySelector mSelector = 1937009955;
    inAddress.AudioObjectPropertyScope mScope = v10;
    inAddress.AudioObjectPropertyElement mElement = 0;
    AudioObjectID v13 = v3[67]._os_unfair_lock_opaque;
    AudioObjectID v84 = (char *)&v78 - ((v12 + 15) & 0x1FFFFFFF0LL);
    OSStatus PropertyData = AudioObjectGetPropertyData(v13, &inAddress, 0, 0LL, &ioDataSize, v84);
    if (PropertyData)
    {
      uint64_t v66 = sub_138E8(13);
      id v67 = sub_8C7D4(1, *(void **)v66, *(void *)(v66 + 8));
      __int16 v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
      int v69 = v68;
      if (v68)
      {
        BOOL v70 = v68;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(outDataSize, inAddress.mScope);
          __int16 v71 = v86 >= 0 ? outDataSize : *(UInt32 **)outDataSize;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 816;
          __int16 v90 = 2080;
          *(void *)__int16 v91 = v71;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: AudioObjectGetPropertyData(kAudioDeviceProp ertyStreams, '%s') failed.",  buf,  0x1Cu);
          if (v86 < 0) {
            operator delete(*(void **)outDataSize);
          }
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = PropertyData;
    }

    if (v12 != ioDataSize)
    {
      uint64_t v73 = sub_138E8(13);
      id v74 = sub_8C7D4(1, *(void **)v73, *(void *)(v73 + 8));
      unint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
      std::mutex v76 = v75;
      if (v75 && os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 818;
        __int16 v90 = 1024;
        *(_DWORD *)__int16 v91 = ioDataSize;
        *(_WORD *)&v91[4] = 1024;
        *(_DWORD *)&v91[6] = v12;
        _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a size of %u while we expected %u",  buf,  0x1Eu);
      }

      unint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v77, "The HAL returned a size of %u while we expected %u");
    }

    if (ioDataSize >= 4)
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = "output";
      if (!a2) {
        uint64_t v17 = "input";
      }
      char v81 = v17;
      os_unfair_lock_t v82 = v3 + 2;
      unint64_t v83 = (unint64_t)ioDataSize >> 2;
      *(void *)&__int128 v15 = 136316674LL;
      __int128 v80 = v15;
      AudioObjectPropertyAddress v79 = v3;
      do
      {
        if (!*(_DWORD *)&v84[4 * v16])
        {
          uint64_t v61 = sub_138E8(13);
          id v62 = sub_8C7D4(1, *(void **)v61, *(void *)(v61 + 8));
          int v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
          uint64_t v64 = v63;
          if (v63 && os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 824;
            __int16 v90 = 2080;
            *(void *)__int16 v91 = v81;
            *(_WORD *)&v91[8] = 1024;
            int v92 = v16;
            _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned kAudioObjectUnknown for %s index %u.",  buf,  0x22u);
          }

          char v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v65, "The HAL returned kAudioObjectUnknown for %s index %u.");
        }

        (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *))(*(void *)&v3->_os_unfair_lock_opaque + 464LL))( buf,  v3);
        char v19 = (_OWORD *)v5->i64[1];
        unint64_t v18 = v5[1].u64[0];
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v20 = *(void *)((char *)&v3->_os_unfair_lock_opaque + v4);
          uint64_t v21 = ((uint64_t)v19 - v20) >> 4;
          unint64_t v22 = v21 + 1;
          uint64_t v23 = v18 - v20;
          if (v23 >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          else {
            unint64_t v24 = v22;
          }
          int v25 = (char *)sub_7BE90(v24);
          int v27 = &v25[16 * v21];
          *(_OWORD *)int v27 = *(_OWORD *)buf;
          *(void *)AudioObjectPropertyAddress buf = 0LL;
          *(void *)&buf[8] = 0LL;
          __int16 v28 = (void *)v5->i64[1];
          uint64_t v29 = *(void **)((char *)&v3->_os_unfair_lock_opaque + v4);
          if (v28 == v29)
          {
            int64x2_t v32 = vdupq_n_s64((unint64_t)v28);
            __int16 v30 = &v25[16 * v21];
          }

          else
          {
            __int16 v30 = &v25[16 * v21];
            do
            {
              __int128 v31 = *((_OWORD *)v28 - 1);
              v28 -= 2;
              *((_OWORD *)v30 - 1) = v31;
              v30 -= 16;
              *__int16 v28 = 0LL;
              v28[1] = 0LL;
            }

            while (v28 != v29);
            int64x2_t v32 = *v5;
          }

          AudioObjectID v33 = v27 + 16;
          *(void *)((char *)&v3->_os_unfair_lock_opaque + v4) = v30;
          v5->i64[1] = (uint64_t)(v27 + 16);
          v5[1].i64[0] = (uint64_t)&v25[16 * v26];
          uint64_t v34 = v32.i64[1];
          std::chrono::system_clock::time_point v35 = (void *)v32.i64[0];
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = *(std::__shared_weak_count **)&buf[8];
          v5->i64[1] = (uint64_t)v33;
          if (v36)
          {
            p_shared_owners = (unint64_t *)&v36->__shared_owners_;
            do
              unint64_t v38 = __ldaxr(p_shared_owners);
            while (__stlxr(v38 - 1, p_shared_owners));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
        }

        else
        {
          *char v19 = *(_OWORD *)buf;
          v5->i64[1] = (uint64_t)(v19 + 1);
        }

        (*(void (**)(void))(**(void **)(v5->i64[1] - 16) + 80LL))(*(void *)(v5->i64[1] - 16));
        uint64_t v39 = *(void *)(v5->i64[1] - 16);
        strcpy(buf, "spatbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unint64_t v40 = sub_5C2F8(v39);
        uint64_t v42 = v41;
        uint64_t v43 = sub_138E8(17);
        uint64_t v44 = sub_138E8(22);
        char v45 = 0;
        uint64_t v46 = 0LL;
        *((void *)&v48 + 1) = v42;
        *(void *)&__int128 v48 = v40;
        uint64_t v47 = v48 >> 32;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v49 = *(void *)(v43 + 8);
        while (1)
        {
          uint64_t v50 = *(int *)&buf[4 * v46];
          char v51 = v45;
          if (((v49 & v50) != 0) != ((*(void *)(v44 + 8) & v50) != 0)) {
            break;
          }
          char v45 = 1;
          uint64_t v46 = 1LL;
          if ((v51 & 1) != 0) {
            goto LABEL_54;
          }
        }

        if ((v49 & v50) == 0) {
          uint64_t v43 = v44;
        }
LABEL_54:
        id v52 = *(id *)v43;
        uint64_t v53 = v52;
        if (v52)
        {
          int v54 = (os_log_s *)v52;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v55 = v4;
            int v56 = *(_DWORD *)&v84[4 * v16];
            uint64_t v57 = *(void *)(v5->i64[1] - 16);
            sub_23FE8((uint64_t)outDataSize, v82);
            int v58 = outDataSize;
            if (v86 < 0) {
              int v58 = *(UInt32 **)outDataSize;
            }
            if ((_DWORD)v47) {
              BOOL v59 = (v47 & 0xFF00000000LL) == 0;
            }
            else {
              BOOL v59 = 1;
            }
            AudioObjectID v60 = "tapstream";
            if (v59) {
              AudioObjectID v60 = "";
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = v80;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 833;
            __int16 v90 = 2080;
            *(void *)__int16 v91 = v81;
            *(_WORD *)&v91[8] = 1024;
            int v92 = v56;
            __int16 v93 = 2048;
            uint64_t v94 = v57;
            __int16 v95 = 2080;
            AudioObjectID v96 = v58;
            __int16 v97 = 2080;
            std::mutex v98 = v60;
            _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Created %s stream with ID %u (%p) for device %s, %s",  buf,  0x40u);
            if (v86 < 0) {
              operator delete(*(void **)outDataSize);
            }
            uint64_t v4 = v55;
            int v3 = v79;
          }
        }

        ++v16;
      }

      while (v16 != v83);
    }
  }

void sub_36C6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_36C6F8(uint64_t a1, uint64_t a2, double a3)
{
  int v9 = 1937009955;
  double v10 = a3;
  sub_1919F8((uint64_t)v5, a2);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (v8)
  {
    double result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return result;
}

void sub_36C768(AudioObjectID a1, AudioObjectPropertyScope a2, void *a3)
{
  inAddress.AudioObjectPropertySelector mSelector = 1937009955;
  inAddress.AudioObjectPropertyScope mScope = a2;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v6 = sub_138E8(13);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    id v7 = *(id *)v6;
    if (v7)
    {
      char v8 = (os_log_s *)v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v71.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v71.__cv_.__opaque = inAddress.mElement;
        sub_613AC((uint64_t)&v72, (unsigned int *)&v71);
        int v9 = v72.__m_.__opaque[15] >= 0 ? &v72 : (std::mutex *)v72.__m_.__sig;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        __int16 v58 = 1024;
        int v59 = 166;
        __int16 v60 = 2080;
        *(void *)uint64_t v61 = v9;
        *(_WORD *)&v61[8] = 1024;
        LODWORD(v62) = a1;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  buf,  0x22u);
        if (v72.__m_.__opaque[15] < 0) {
          operator delete((void *)v72.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress v54 = inAddress;
  AudioObjectID v53 = a1;
  int v55 = 0;
  uint64_t v56 = 0LL;
  sub_36D000((uint64_t)v51, (uint64_t)&v53);
  if (!v52)
  {
    double v10 = (void *)v51[0];
    if (a3[1] - *a3 != v51[1] - v51[0])
    {
      uint64_t v34 = sub_138E8(13);
      if ((*(_BYTE *)(v34 + 8) & 1) != 0)
      {
        std::chrono::system_clock::time_point v35 = (os_log_s *)*(id *)v34;
        if (v35)
        {
          uint64_t v36 = v35;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v58 = 1024;
            int v59 = 219;
            __int16 v60 = 1024;
            *(_DWORD *)uint64_t v61 = a1;
            _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  buf,  0x18u);
          }
        }
      }

      int v3 = 0;
      if (v10) {
        goto LABEL_71;
      }
      goto LABEL_72;
    }
  }

  memset(v72.__m_.__opaque, 0, sizeof(v72.__m_.__opaque));
  v71.__cv_.__uint64_t sig = 1018212795LL;
  memset(v71.__cv_.__opaque, 0, sizeof(v71.__cv_.__opaque));
  v72.__m_.__uint64_t sig = 850045863LL;
  char v50 = 0;
  sub_7D684(inClientData, a1, &inAddress, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v50);
  uint64_t v11 = 400LL;
  do
  {
    sub_36D000((uint64_t)__p, (uint64_t)&v53);
    unint64_t v12 = __p[0];
    if (v48)
    {
      int v13 = 1;
      int v3 = v48;
      if (__p[0]) {
        goto LABEL_29;
      }
      continue;
    }

    uint64_t v14 = a3[1] - *a3;
    if (v14 != (char *)__p[1] - (char *)__p[0])
    {
      int v13 = 12;
      if (!__p[0]) {
        continue;
      }
LABEL_29:
      operator delete(v12);
      continue;
    }

    if (v11 > 0)
    {
      v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v16 = sub_138E8(13);
      if ((*(_BYTE *)(v16 + 8) & 1) != 0)
      {
        uint64_t v17 = (os_log_s *)*(id *)v16;
        if (v17)
        {
          unint64_t v18 = v17;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v58 = 1024;
            int v59 = 257;
            __int16 v60 = 2080;
            *(void *)uint64_t v61 = "with timeout";
            *(_WORD *)&v61[8] = 1024;
            LODWORD(v62) = a1;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)AudioObjectPropertyAddress buf = &qword_48F828;
      buf[8] = 0;
      buf[8] = sub_1A30E4();
      __lk.__m_ = &v72;
      __lk.__owns_ = 1;
      std::mutex::lock(&v72);
      v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v50)
      {
LABEL_24:
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_7D790((uint64_t)buf);
        int v13 = 0;
        v11 += (std::chrono::system_clock::now().__d_.__rep_ - v15.__d_.__rep_) / -1000;
        if (v12) {
          goto LABEL_29;
        }
        continue;
      }

      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = v19.__d_.__rep_ + 1000000 * v11;
      while (1)
      {
        if (v25 <= std::chrono::steady_clock::now().__d_.__rep_) {
          goto LABEL_24;
        }
        v26.__d_.__rep_ = v25 - std::chrono::steady_clock::now().__d_.__rep_;
        if (v26.__d_.__rep_ >= 1) {
          break;
        }
LABEL_56:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v25 || v50) {
          goto LABEL_24;
        }
      }

      std::chrono::steady_clock::now();
      v27.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v27.__d_.__rep_)
      {
        if (v27.__d_.__rep_ < 1)
        {
          if ((unint64_t)v27.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0x8000000000000000LL;
            goto LABEL_54;
          }
        }

        else if ((unint64_t)v27.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_52;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 1000 * v27.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0LL;
      }

void sub_36CF44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  sub_7D898((uint64_t)va);
  std::condition_variable::~condition_variable((std::condition_variable *)(v19 - 216));
  std::mutex::~mutex((std::mutex *)(v19 - 168));
  if (*v18) {
    operator delete(*v18);
  }
  _Unwind_Resume(a1);
}

void sub_36D000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v22, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v22;
  if (v22)
  {
    id v7 = *(id *)sub_138E8(13);
    char v8 = v7;
    if (v7)
    {
      int v9 = (os_log_s *)v7;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v6);
        int v10 = v21;
        uint64_t v11 = (void **)v20[0];
        uint64_t v16 = *v4;
        int v17 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        unint64_t v12 = v20;
        if (v10 < 0) {
          unint64_t v12 = v11;
        }
        int v13 = (void **)__p[0];
        AudioObjectID v14 = *(_DWORD *)a2;
        if (v19 >= 0) {
          int v13 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v27 = 2080;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = v12;
        __int16 v29 = 2080;
        uint64_t v30 = v13;
        __int16 v31 = 1024;
        AudioObjectID v32 = v14;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  if (v25)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v23, v24, (v24 - (uint64_t)v23) >> 2);
    uint64_t v15 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v15;
    *(_DWORD *)(a1 + 24) = v6;
    if (v23) {
      operator delete(v23);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
  }

void sub_36D210( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v24 < 0) {
    operator delete(v23);
  }

  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_36D260(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  sub_9EA74((uint64_t)&v20, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  uint64_t v4 = v20;
  if (v20)
  {
    id v5 = *(id *)sub_138E8(13);
    uint64_t v6 = v5;
    if (v5)
    {
      id v7 = (os_log_s *)v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v18, v4);
        int v8 = v19;
        int v9 = (void **)v18[0];
        uint64_t v14 = *v2;
        int v15 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v14);
        int v10 = v18;
        if (v8 < 0) {
          int v10 = v9;
        }
        if (v17 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        AudioObjectID v12 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v24 = 1024;
        int v25 = 176;
        __int16 v26 = 1024;
        int v27 = v4;
        __int16 v28 = 2080;
        __int16 v29 = v10;
        __int16 v30 = 2080;
        __int16 v31 = v11;
        __int16 v32 = 1024;
        AudioObjectID v33 = v12;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
    }
  }

  if (v22) {
    return v21;
  }
  else {
    return 0LL;
  }
}

void sub_36D42C(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_36D45C(uint64_t a1)
{
  if (a1 && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1) & 1) == 0)
  {
    uint64_t v1 = (os_log_s *)*(id *)sub_138E8(13);
    int v2 = v1;
    if (v1 && os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "PortManager.h";
      __int16 v7 = 1024;
      int v8 = 202;
      _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Client mutex is not owned by the current thread",  (uint8_t *)&v5,  0x12u);
    }
  }

  int v3 = (_DWORD *)sub_546E0();
  return sub_1008E4(v3);
}

void sub_36D53C(uint64_t a1, unint64_t *a2)
{
  int v5 = (std::__shared_weak_count *)a2[1];
  v87[0] = *a2;
  v87[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  BOOL v8 = sub_36DE4C(a1, v87);
  if (v5)
  {
    int v9 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (!v8)
  {
    uint64_t v57 = sub_138E8(13);
    id v58 = sub_8C7D4(1, *(void **)v57, *(void *)(v57 + 8));
    int v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    __int16 v60 = v59;
    if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 622;
      _os_log_impl(&dword_0, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(void *)(*a2 + 192) != a1)
  {
    uint64_t v62 = sub_138E8(13);
    id v63 = sub_8C7D4(1, *(void **)v62, *(void *)(v62 + 8));
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
    __int16 v65 = v64;
    if (v64)
    {
      BOOL v66 = v64;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        unint64_t v67 = *a2;
        int v68 = *(const __CFString **)(*a2 + 248);
        CFStringRef theString = v68;
        LODWORD(v67) = *(unsigned __int8 *)(v67 + 256);
        char v84 = v67;
        if ((_DWORD)v67 && v68)
        {
          CFRetain(v68);
          int v68 = theString;
        }

        sub_48E98(__p, v68);
        if (v86 >= 0) {
          __int16 v69 = __p;
        }
        else {
          __int16 v69 = (void **)__p[0];
        }
        uint64_t v70 = *(void *)(*a2 + 192);
        if (v70)
        {
          (*(void (**)(CFStringRef *__return_ptr, void))(*(void *)v70 + 128LL))( v80,  *(void *)(*a2 + 192));
          std::condition_variable v71 = v81;
          sub_48E98(v81, v80[0]);
          if (v82 < 0) {
            std::condition_variable v71 = (void **)v81[0];
          }
        }

        else
        {
          std::condition_variable v71 = (void **)"NULL";
        }

        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v76, a1);
        sub_48E98(&v77, v76[0]);
        if (v79 >= 0) {
          std::mutex v72 = &v77;
        }
        else {
          std::mutex v72 = v77;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 628;
        __int16 v89 = 2080;
        __int16 v90 = v69;
        __int16 v91 = 2080;
        int v92 = v71;
        __int16 v93 = 2080;
        uint64_t v94 = v72;
        _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s).",  buf,  0x30u);
        if (v79 < 0) {
          operator delete(v77);
        }
        sub_19DFC((uint64_t)v76);
        if (v70)
        {
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          sub_19DFC((uint64_t)v80);
        }

        if (v86 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)&theString);
      }
    }

    uint64_t v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v73, "Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s).");
  }

  uint64_t v11 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  AudioObjectID v12 = (uint64_t *)(a1 + 384);
  int v13 = *(uint64_t **)(a1 + 392);
  unint64_t v14 = *a2;
  while (v13[2] != v14)
  {
    int v13 = (uint64_t *)v13[1];
    if (v13 == v12) {
      goto LABEL_88;
    }
  }

  if (v13 == v12) {
    goto LABEL_88;
  }
  int v15 = (std::__shared_weak_count *)v13[3];
  v81[0] = (void *)*a2;
  v81[1] = v15;
  if (v15)
  {
    uint64_t v16 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  uint64_t v18 = *v13;
  *(void *)(v18 + 8) = v13[1];
  *(void *)v13[1] = v18;
  --*(void *)(a1 + 400);
  sub_7A768((uint64_t)(v13 + 2));
  operator delete(v13);
  char v19 = *(void **)(a1 + 424);
  if (v19)
  {
    while (v19[2] != v14)
    {
      char v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_23;
      }
    }

    id v25 = *(id *)sub_138E8(17);
    __int16 v26 = v25;
    if (v25)
    {
      int v27 = (os_log_s *)v25;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v28 = *a2;
        __int16 v29 = *(__CFString **)(*a2 + 248);
        unint64_t v77 = v29;
        LODWORD(v28) = *(unsigned __int8 *)(v28 + 256);
        char v78 = v28;
        if ((_DWORD)v28) {
          BOOL v30 = v29 == 0LL;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30) {
          CFRetain(v29);
        }
        sub_48E98(__p, v29);
        if (v86 >= 0) {
          __int16 v31 = __p;
        }
        else {
          __int16 v31 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 645;
        __int16 v89 = 2080;
        __int16 v90 = v31;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Port %s was unregistered multiple times. Skipping redundant unregistration and teardown.",  buf,  0x1Cu);
        if (v86 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)&v77);
      }
    }

    char v32 = 1;
    if (!v15) {
      goto LABEL_85;
    }
    goto LABEL_82;
  }

void sub_36DD50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, char a33, uint64_t a34, char a35)
{
  sub_7A768((uint64_t)&a19);
  std::mutex::unlock(v35);
  _Unwind_Resume(a1);
}

BOOL sub_36DE4C(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v5 = a1 + 384;
  uint64_t v6 = *(void *)(a1 + 392);
  if (v6 == a1 + 384)
  {
LABEL_4:
    uint64_t v6 = a1 + 384;
  }

  else
  {
    while (*(void *)(v6 + 16) != *a2)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == v5) {
        goto LABEL_4;
      }
    }
  }

  BOOL v7 = v6 != v5;
  std::mutex::unlock(v4);
  return v7;
}

unsigned __int8 *sub_36DEC4(void *a1)
{
  v37[0] = 0;
  uint64_t v38 = 0LL;
  sub_36D45C(0LL);
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 152LL))(*a1);
  (*(void (**)(void))(*(void *)*a1 + 88LL))(*a1);
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 152LL))(*a1))
  {
    id v3 = *(id *)sub_138E8(13);
    uint64_t v4 = v3;
    if (v3)
    {
      uint64_t v5 = (os_log_s *)v3;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *a1;
        BOOL v7 = *(const __CFString **)(*a1 + 248LL);
        CFStringRef theString = v7;
        LODWORD(v6) = *(unsigned __int8 *)(v6 + 256);
        char v34 = v6;
        if ((_DWORD)v6 && v7)
        {
          CFRetain(v7);
          BOOL v7 = theString;
        }

        sub_48E98(__p, v7);
        if (v36 >= 0) {
          BOOL v8 = __p;
        }
        else {
          BOOL v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 518;
        __int16 v40 = 2080;
        float v41 = v8;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Port %s is connected after teardown",  buf,  0x1Cu);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)&theString);
      }
    }
  }

  if ((*(unsigned int (**)(void))(*(void *)*a1 + 160LL))(*a1))
  {
    id v9 = *(id *)sub_138E8(13);
    unint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = (os_log_s *)v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *a1;
        int v13 = *(const __CFString **)(*a1 + 248LL);
        CFStringRef theString = v13;
        LODWORD(v12) = *(unsigned __int8 *)(v12 + 256);
        char v34 = v12;
        if ((_DWORD)v12 && v13)
        {
          CFRetain(v13);
          int v13 = theString;
        }

        sub_48E98(__p, v13);
        if (v36 >= 0) {
          unint64_t v14 = __p;
        }
        else {
          unint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 519;
        __int16 v40 = 2080;
        float v41 = v14;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Port %s is routable after teardown",  buf,  0x1Cu);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)&theString);
      }
    }
  }

  if (v2 != (*(unsigned int (**)(void))(*(void *)*a1 + 152LL))(*a1))
  {
    uint64_t v15 = sub_138E8(17);
    uint64_t v16 = sub_138E8(9);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_52;
        }
        goto LABEL_38;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
    if ((*(void *)(v15 + 8) & 1) != 0)
    {
LABEL_38:
      id v22 = *(id *)v15;
      if (v22)
      {
        unint64_t v23 = (os_log_s *)v22;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = *a1;
          id v25 = *(const __CFString **)(*a1 + 248LL);
          CFStringRef theString = v25;
          LODWORD(v24) = *(unsigned __int8 *)(v24 + 256);
          char v34 = v24;
          if ((_DWORD)v24 && v25) {
            CFRetain(v25);
          }
          sub_48E98(__p, v25);
          if (v36 >= 0) {
            __int16 v26 = __p;
          }
          else {
            __int16 v26 = (void **)__p[0];
          }
          int v27 = "";
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(_WORD *)&_BYTE buf[12] = 1024;
          if (v2) {
            int v27 = "dis";
          }
          *(_DWORD *)&buf[14] = 524;
          __int16 v40 = 2080;
          float v41 = v26;
          __int16 v42 = 2080;
          unint64_t v43 = v27;
          _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port %s is now %sconnected", buf, 0x26u);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          sub_19DFC((uint64_t)&theString);
        }
      }
    }

void sub_36E31C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  sub_E9064((unsigned __int8 *)va);
  _Unwind_Resume(a1);
}

void sub_36E3B8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_7A768((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }

uint64_t sub_36E3FC( uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3, const void *a4, uint64_t a5)
{
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v10 = (os_unfair_lock_s *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 96) = 850045863LL;
  *(void *)a1 = off_474BF0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = a1 + 232;
  *(void *)(a1 + sub_19DFC(v65 - 240) = a1 + 232;
  *(void *)(a1 + 248) = 0LL;
  *(_DWORD *)(a1 + 256) = sub_1D2264();
  *(_BYTE *)(a1 + 260) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(void *)a1 = off_483488;
  *(_DWORD *)(a1 + 268) = a2;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 850045863LL;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = a1 + 384;
  *(void *)(a1 + 392) = a1 + 384;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0LL;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(void *)(a1 + 448) = a3;
  *(_BYTE *)(a1 + 456) = 1;
  if (a4) {
    CFRetain(a4);
  }
  sub_7F234((void *)(a1 + 464), a4);
  inAddress.AudioObjectPropertySelector mSelector = a2;
  *(void *)&v74.AudioObjectPropertySelector mSelector = 0x676C6F626D756964LL;
  v74.AudioObjectPropertyElement mElement = 0;
  sub_C80E0((uint64_t)buf, &inAddress.mSelector, &v74, 0, 0LL);
  if (v86[10]
    && (uint64_t v11 = *(const void **)&v86[2],
        *(void *)&v86[2] = 0LL,
        std::condition_variable __p = &off_483688,
        CFTypeRef cf = v11,
        char v81 = 1,
        sub_39FD8((const char **)((char *)&v84 + 4)),
        v81))
  {
    CFTypeRef v12 = cf;
    if (cf) {
      CFRetain(cf);
    }
    sub_7F234((void *)(a1 + 472), v12);
    if (v81) {
      sub_39FD8(&__p);
    }
  }

  else
  {
    *(void *)(a1 + 472) = 0LL;
  }

  *(_BYTE *)(a1 + 480) = +[CiderService IsSimulatedDevice:]( &OBJC_CLASS___CiderService,  "IsSimulatedDevice:",  *(unsigned int *)(a1 + 268));
  *(void *)(a1 + 484) = a5;
  if (!a2)
  {
    uint64_t v35 = sub_138E8(13);
    id v36 = sub_8C7D4(1, *(void **)v35, *(void *)(v35 + 8));
    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    uint64_t v38 = v37;
    if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v84 = "Device_HAL_Common.mm";
      __int16 v85 = 1024;
      *(_DWORD *)char v86 = 115;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inPhysicalDeviceID passed as 0.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inPhysicalDeviceID passed as 0.");
LABEL_64:
  }

  if (!a3)
  {
    uint64_t v40 = sub_138E8(13);
    id v41 = sub_8C7D4(1, *(void **)v40, *(void *)(v40 + 8));
    __int16 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    unint64_t v43 = v42;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v84 = "Device_HAL_Common.mm";
      __int16 v85 = 1024;
      *(_DWORD *)char v86 = 116;
      _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [uid is NULL]: uid passed as NULL.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "uid passed as NULL.");
    goto LABEL_64;
  }

  UInt32 ioDataSize = 4;
  int outData = -2;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"kniobolg";
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 268), &inAddress, 0, 0LL, &ioDataSize, &outData);
  if ((_DWORD)PropertyData)
  {
    id v44 = *(id *)sub_138E8(17);
    size_t v45 = v44;
    if (v44)
    {
      uint64_t v46 = (os_log_s *)v44;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&__p, PropertyData);
        int v47 = v82;
        unint64_t v48 = (void **)__p;
        sub_48E98(&v74, a3);
        p_p = &__p;
        if (v47 < 0) {
          p_p = v48;
        }
        if (v75 >= 0) {
          unint64_t v50 = &v74;
        }
        else {
          unint64_t v50 = *(AudioObjectPropertyAddress **)&v74.mSelector;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        char v84 = "Device_HAL_Common.mm";
        __int16 v85 = 1024;
        *(_DWORD *)char v86 = 125;
        *(_WORD *)&v86[4] = 2080;
        *(void *)&v86[6] = p_p;
        *(_WORD *)&v86[14] = 2080;
        *(void *)&v86[16] = v50;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' reading hog mode status from physical device with UID %s",  buf,  0x26u);
        if (v75 < 0) {
          operator delete(*(void **)&v74.mSelector);
        }
        if (v82 < 0) {
          operator delete(__p);
        }
      }
    }

    uint64_t v51 = sub_138E8(13);
    id v52 = sub_8C7D4(1, *(void **)v51, *(void *)(v51 + 8));
    AudioObjectID v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    unint64_t v54 = v53;
    if (v53 && os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v84 = "Device_HAL_Common.mm";
      __int16 v85 = 1024;
      *(_DWORD *)char v86 = 126;
      int v55 = "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to read hog mode status.";
LABEL_97:
      _os_log_impl(&dword_0, v54, OS_LOG_TYPE_ERROR, v55, buf, 0x12u);
    }

void sub_36EFD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20, uint64_t a21)
{
  if (v24 < 0) {
    operator delete(v26);
  }

  sub_7A738(a11);
  sub_7A738(a10);
  sub_19DFC(v21 + 448);
  sub_36F184(v21 + 408);
  sub_1BB88(v23);
  std::mutex::~mutex(v22);
  a21 = v21 + 296;
  sub_7A668((void ***)&a21);
  a21 = v21 + 272;
  sub_7A668((void ***)&a21);
  sub_1D54A4(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_36F184(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      sub_7A768((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_36F1E0(uint64_t a1)
{
  *(void *)a1 = off_483488;
  __int16 v93 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  int v2 = (void *)(a1 + 384);
  id v3 = *(void **)(a1 + 392);
  if (v3 == (void *)(a1 + 384))
  {
    uint64_t v94 = (uint64_t *)(a1 + 408);
  }

  else
  {
    uint64_t v4 = (void *)(a1 + 424);
    unint64_t v5 = (unint64_t)&dword_0;
    do
    {
      uint64_t v6 = (void *)*v4;
      if (*v4)
      {
        while (v6[2] != v3[2])
        {
          uint64_t v6 = (void *)*v6;
          if (!v6) {
            goto LABEL_6;
          }
        }
      }

      else
      {
LABEL_6:
        uint64_t v7 = sub_138E8(17);
        uint64_t v8 = sub_138E8(23);
        char v9 = 0;
        uint64_t v10 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v11 = *(void *)(v7 + 8);
        while (1)
        {
          uint64_t v12 = *(int *)&buf[4 * v10];
          char v13 = v9;
          if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
            break;
          }
          char v9 = 1;
          uint64_t v10 = 1LL;
          if ((v13 & 1) != 0) {
            goto LABEL_12;
          }
        }

        if ((v11 & v12) == 0) {
          uint64_t v7 = v8;
        }
LABEL_12:
        id v14 = (os_log_s *)*(id *)v7;
        uint64_t v15 = v14;
        if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t v16 = v3[2];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 169;
          *(_WORD *)&_BYTE buf[18] = 2048;
          *(void *)&buf[20] = v16;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Port at %p was not torn down by the device, adding it to the removed port list",  buf,  0x1Cu);
        }
      }

      id v3 = (void *)v3[1];
    }

    while (v3 != v2);
    int v17 = *(void **)(a1 + 392);
    uint64_t v94 = (uint64_t *)(a1 + 408);
    while (v17 != v2)
    {
      uint64_t v19 = v17 + 2;
      unint64_t v18 = v17[2];
      unint64_t v20 = 0x9DDFEA08EB382D69LL * (((8 * v18) + 8LL) ^ HIDWORD(v18));
      unint64_t v21 = 0x9DDFEA08EB382D69LL * (HIDWORD(v18) ^ (v20 >> 47) ^ v20);
      unint64_t v22 = 0x9DDFEA08EB382D69LL * (v21 ^ (v21 >> 47));
      unint64_t v23 = *(void *)(a1 + 416);
      if (v23)
      {
        uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] > 1uLL)
        {
          unint64_t v5 = 0x9DDFEA08EB382D69LL * (v21 ^ (v21 >> 47));
          if (v22 >= v23) {
            unint64_t v5 = v22 % v23;
          }
        }

        else
        {
          unint64_t v5 = v22 & (v23 - 1);
        }

        id v25 = *(void **)(*v94 + 8 * v5);
        if (v25)
        {
          for (uint64_t i = (void *)*v25; i; uint64_t i = (void *)*i)
          {
            unint64_t v27 = i[1];
            if (v27 == v22)
            {
              if (i[2] == v18) {
                goto LABEL_56;
              }
            }

            else
            {
              if (v24.u32[0] > 1uLL)
              {
                if (v27 >= v23) {
                  v27 %= v23;
                }
              }

              else
              {
                v27 &= v23 - 1;
              }

              if (v27 != v5) {
                break;
              }
            }
          }
        }
      }

      int v28 = operator new(0x20uLL);
      *(void *)AudioObjectPropertyAddress buf = v28;
      *(void *)&buf[8] = a1 + 424;
      *int v28 = 0LL;
      v28[1] = v22;
      *((_OWORD *)v28 + 1) = *v19;
      *(void *)uint64_t v19 = 0LL;
      v17[3] = 0LL;
      buf[16] = 1;
      float v29 = (float)(unint64_t)(*(void *)(a1 + 432) + 1LL);
      float v30 = *(float *)(a1 + 440);
      if (!v23 || (float)(v30 * (float)v23) < v29)
      {
        BOOL v31 = (v23 & (v23 - 1)) != 0;
        if (v23 < 3) {
          BOOL v31 = 1LL;
        }
        unint64_t v32 = v31 | (2 * v23);
        unint64_t v33 = vcvtps_u32_f32(v29 / v30);
        if (v32 <= v33) {
          size_t v34 = v33;
        }
        else {
          size_t v34 = v32;
        }
        sub_52168((uint64_t)v94, v34);
        unint64_t v23 = *(void *)(a1 + 416);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23) {
            unint64_t v5 = v22 % v23;
          }
          else {
            unint64_t v5 = v22;
          }
        }

        else
        {
          unint64_t v5 = (v23 - 1) & v22;
        }
      }

      uint64_t v35 = *v94;
      id v36 = *(void **)(*v94 + 8 * v5);
      if (v36)
      {
        *int v28 = *v36;
      }

      else
      {
        *int v28 = *v4;
        void *v4 = v28;
        *(void *)(v35 + 8 * v5) = v4;
        if (!*v28) {
          goto LABEL_55;
        }
        unint64_t v37 = *(void *)(*v28 + 8LL);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v37 >= v23) {
            v37 %= v23;
          }
        }

        else
        {
          v37 &= v23 - 1;
        }

        id v36 = (void *)(*v94 + 8 * v37);
      }

      *id v36 = v28;
LABEL_55:
      *(void *)AudioObjectPropertyAddress buf = 0LL;
      ++*(void *)(a1 + 432);
      sub_36E3B8((uint64_t)buf);
LABEL_56:
      int v17 = (void *)v17[1];
    }
  }

  std::mutex::unlock(v93);
  std::mutex::lock(v93);
  int64x2_t inData = 0uLL;
  v96[0] = 0LL;
  unint64_t v38 = *(void *)(a1 + 432);
  if (v38)
  {
    if (v38 >> 60) {
      sub_7A87C();
    }
    *(void *)&buf[32] = v96;
    unint64_t v39 = (char *)sub_7BE90(v38);
    id v41 = (void *)inData.i64[1];
    __int16 v42 = (void *)inData.i64[0];
    if (inData.i64[1] == inData.i64[0])
    {
      int64x2_t v45 = vdupq_n_s64(inData.u64[1]);
      unint64_t v43 = v39;
    }

    else
    {
      unint64_t v43 = v39;
      do
      {
        __int128 v44 = *((_OWORD *)v41 - 1);
        v41 -= 2;
        *((_OWORD *)v43 - 1) = v44;
        v43 -= 16;
        void *v41 = 0LL;
        v41[1] = 0LL;
      }

      while (v41 != v42);
      int64x2_t v45 = inData;
    }

    inData.i64[0] = (uint64_t)v43;
    inData.i64[1] = (uint64_t)v39;
    *(int64x2_t *)&buf[8] = v45;
    uint64_t v46 = v96[0];
    v96[0] = &v39[16 * v40];
    *(void *)&_BYTE buf[24] = v46;
    *(void *)AudioObjectPropertyAddress buf = v45.i64[0];
    sub_A0D64((uint64_t)buf);
  }

  int v47 = *(void **)(a1 + 424);
  while (v47)
  {
    unint64_t v48 = v47;
    int v47 = (void *)*v47;
    sub_2FDF90((uint64_t)buf, (void *)(a1 + 408), v48);
    uint64_t v49 = *(void **)buf;
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    sub_36E3B8((uint64_t)buf);
    unint64_t v50 = v49 + 2;
    uint64_t v51 = inData.i64[1];
    if (inData.i64[1] >= v96[0])
    {
      uint64_t v52 = (inData.i64[1] - inData.i64[0]) >> 4;
      unint64_t v53 = v52 + 1;
      uint64_t v54 = v96[0] - inData.i64[0];
      if ((v96[0] - inData.i64[0]) >> 3 > v53) {
        unint64_t v53 = v54 >> 3;
      }
      else {
        unint64_t v55 = v53;
      }
      *(void *)&buf[32] = v96;
      uint64_t v56 = (char *)sub_7BE90(v55);
      id v58 = &v56[16 * v52];
      *(_OWORD *)id v58 = *v50;
      *(void *)unint64_t v50 = 0LL;
      v49[3] = 0LL;
      int v59 = (void *)inData.i64[1];
      __int16 v60 = (void *)inData.i64[0];
      if (inData.i64[1] == inData.i64[0])
      {
        int64x2_t v63 = vdupq_n_s64(inData.u64[1]);
        uint64_t v61 = &v56[16 * v52];
      }

      else
      {
        uint64_t v61 = &v56[16 * v52];
        do
        {
          __int128 v62 = *((_OWORD *)v59 - 1);
          v59 -= 2;
          *((_OWORD *)v61 - 1) = v62;
          v61 -= 16;
          *int v59 = 0LL;
          v59[1] = 0LL;
        }

        while (v59 != v60);
        int64x2_t v63 = inData;
      }

      id v64 = v58 + 16;
      inData.i64[0] = (uint64_t)v61;
      *(int64x2_t *)&buf[8] = v63;
      uint64_t v65 = v96[0];
      v96[0] = &v56[16 * v57];
      *(void *)&_BYTE buf[24] = v65;
      *(void *)AudioObjectPropertyAddress buf = v63.i64[0];
      sub_A0D64((uint64_t)buf);
      inData.i64[1] = (uint64_t)v64;
      if (!v49) {
        continue;
      }
    }

    else
    {
      *(_OWORD *)inData.i64[1] = *v50;
      *(void *)unint64_t v50 = 0LL;
      v49[3] = 0LL;
      inData.i64[1] = v51 + 16;
    }

    sub_7A768((uint64_t)(v49 + 2));
    operator delete(v49);
  }

  if (inData.i64[0] != inData.i64[1])
  {
    if ((sub_397E74((unint64_t *)qword_4A9BE8) & 1) == 0)
    {
      BOOL v66 = (os_log_s *)*(id *)sub_138E8(13);
      unint64_t v67 = v66;
      if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 72;
        _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event",  buf,  0x12u);
      }
    }

    uint64_t v68 = inData.i64[0];
    if (inData.i64[0] != inData.i64[1])
    {
      do
      {
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v68;
        *(void *)uint64_t v68 = 0LL;
        *(void *)(v68 + 8) = 0LL;
        sub_E9EFC(buf);
        __int16 v69 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          uint64_t v70 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }

        uint64_t v72 = v68 + 16;
        if (v68 + 16 != inData.i64[1])
        {
          do
          {
            uint64_t v73 = v68;
            v68 += 16LL;
          }

          while (sub_127660(v73, (__int128 *)v68) + 32 != inData.i64[1]);
          uint64_t v72 = inData.i64[1];
        }

        while (v72 != v68)
          uint64_t v72 = sub_7A768(v72 - 16);
        inData.i64[1] = v68;
        BOOL v74 = inData.i64[0] == v68;
        uint64_t v68 = inData.i64[0];
      }

      while (!v74);
    }
  }

  *(void *)AudioObjectPropertyAddress buf = &inData;
  sub_7A668((void ***)buf);
  std::mutex::unlock(v93);
  uint64_t v76 = *(void *)(a1 + 272);
  for (uint64_t j = *(void *)(a1 + 280); j != v76; uint64_t j = sub_7A768(j - 16))
    ;
  *(void *)(a1 + 280) = v76;
  uint64_t v78 = *(void *)(a1 + 296);
  for (uint64_t k = *(void *)(a1 + 304); k != v78; uint64_t k = sub_7A768(k - 16))
    ;
  *(void *)(a1 + 304) = v78;
  inData.i32[0] = *(_DWORD *)(a1 + 268);
  strcpy(buf, "kniobolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v79 = sub_3C9B8((AudioObjectID *)&inData, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
  *((void *)&v82 + 1) = v80;
  *(void *)&__int128 v82 = v79;
  uint64_t v81 = v82 >> 32;
  if ((v81 & 0xFF00000000LL) != 0 && getpid() == (_DWORD)v81)
  {
    inData.i32[0] = -1;
    AudioObjectID v83 = *(_DWORD *)(a1 + 268);
    strcpy(buf, "kniobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    OSStatus v84 = AudioObjectSetPropertyData(v83, (const AudioObjectPropertyAddress *)buf, 0, 0LL, 4u, &inData);
    __int16 v85 = (os_log_s *)*(id *)sub_138E8(17);
    char v86 = v85;
    if (v85 && os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v87 = "Failed to";
      int v88 = *(_DWORD *)(a1 + 268);
      uint64_t v89 = *(void *)(a1 + 448);
      if (!v84) {
        uint64_t v87 = "Successfully";
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 191;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v87;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)&buf[30] = v88;
      *(_WORD *)&buf[34] = 2112;
      *(void *)&buf[36] = v89;
      _os_log_impl( &dword_0,  v86,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %s reset hog mode on device %u with UID %@",  buf,  0x2Cu);
    }
  }

  __int16 v90 = *(const void **)(a1 + 472);
  if (v90) {
    CFRelease(v90);
  }
  __int16 v91 = *(const void **)(a1 + 464);
  if (v91) {
    CFRelease(v91);
  }
  sub_19DFC(a1 + 448);
  sub_36F184((uint64_t)v94);
  sub_1BB88((uint64_t *)(a1 + 384));
  std::mutex::~mutex(v93);
  *(void *)AudioObjectPropertyAddress buf = a1 + 296;
  sub_7A668((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = a1 + 272;
  sub_7A668((void ***)buf);
  sub_1D54A4(a1);
  return a1;
}

void sub_36FAEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void **sub_36FB84(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    sub_7A768((uint64_t)v2 + 16);
    operator delete(v2);
    *a1 = 0LL;
  }

  return a1;
}

void sub_36FBC4(uint64_t *a1)
{
  uint64_t v1 = sub_370544(a1);
  operator delete(v1);
}

uint64_t sub_36FBD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unint64_t *)qword_4A9BE8;
  unint64_t v5 = atomic_load((unint64_t *)qword_4A9BE8);
  if (v5 && (sub_397E74((unint64_t *)qword_4A9BE8) & 1) == 0)
  {
    uint64_t v6 = (os_log_s *)*(id *)sub_138E8(13);
    uint64_t v7 = v6;
    if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v23 = 1024;
      int v24 = 124;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mExecutionThread has been set outside of this command's execution",  buf,  0x12u);
    }
  }

  if (sub_397E74(v4))
  {
    uint64_t v8 = sub_138E8(13);
    uint64_t v9 = sub_138E8(15);
    char v10 = 0;
    uint64_t v11 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v14 & 1) != 0) {
        goto LABEL_14;
      }
    }

    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_14:
    uint64_t v15 = (os_log_s *)*(id *)v8;
    uint64_t v16 = v15;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v23 = 1024;
      int v24 = 127;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Called recursively", buf, 0x12u);
    }
  }

  v20[0] = &off_483720;
  v20[1] = v4;
  unint64_t v21 = v20;
  sub_35678(buf, 0, (uint64_t)v20);
  int v17 = v21;
  if (v21 == v20)
  {
    uint64_t v18 = 4LL;
    int v17 = v20;
    goto LABEL_22;
  }

  if (v21)
  {
    uint64_t v18 = 5LL;
LABEL_22:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }

  atomic_store((unint64_t)pthread_self(), v4);
  sub_370058(v4, (void *)(a1 + 16), 0);
  sub_72210(a2, 1920099684LL);
  return sub_35B78((uint64_t)buf);
}

void sub_36FE30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_36FE90(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 24);
  memset(&v14, 0, sizeof(v14));
  std::string::append(&v14, "{ ", 2uLL);
  if (v4 != (void *)(a1 + 16))
  {
    while (1)
    {
      unint64_t v5 = (os_unfair_lock_s *)v4[2];
      uint64_t v6 = (std::__shared_weak_count *)v4[3];
      uint64_t v15 = v5;
      uint64_t v16 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }

      sub_23FE8((uint64_t)__p, v5 + 2);
      if ((v18 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v10 = v18;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(&v14, (const std::string::value_type *)v9, v10);
      if ((char)v18 < 0)
      {
        operator delete(__p[0]);
        if (!v6) {
          goto LABEL_19;
        }
      }

      else if (!v6)
      {
        goto LABEL_19;
      }

      uint64_t v11 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }

void sub_37000C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_370058(unint64_t *a1, void *a2, int a3)
{
  if (a2[2])
  {
    if (a3)
    {
      uint64_t v4 = sub_869B4();
      unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      uint64_t v6 = v26;
      *(void *)__int16 v26 = v26;
      *(void *)&v26[8] = v26;
      *(void *)&v26[16] = 0LL;
      uint64_t v7 = a2[2];
      if (v7)
      {
        uint64_t v9 = *a2;
        unint64_t v8 = (uint64_t *)a2[1];
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = *(void *)(*a2 + 8LL);
        **(void **)(v9 + 8) = v10;
        uint64_t v11 = *(void *)v26;
        *(void *)(*(void *)v26 + 8LL) = v8;
        uint64_t *v8 = v11;
        *(void *)(v9 + 8) = v26;
        *(void *)__int16 v26 = v9;
        *(void *)&v26[16] = v7;
        a2[2] = 0LL;
        uint64_t v6 = (_BYTE *)v9;
      }

      unint64_t v12 = v5;
      uint64_t v13 = (uint64_t *)operator new(0x18uLL);
      uint64_t *v13 = (uint64_t)v13;
      v13[1] = (uint64_t)v13;
      v13[2] = 0LL;
      if (v7)
      {
        std::string v14 = *(void **)&v26[8];
        uint64_t v15 = **(void **)&v26[8];
        *(void *)(v15 + 8) = *((void *)v6 + 1);
        **((void **)v6 + 1) = v15;
        uint64_t v16 = *v13;
        *(void *)(v16 + 8) = v14;
        *std::string v14 = v16;
        uint64_t *v13 = (uint64_t)v6;
        *((void *)v6 + 1) = v13;
        v13[2] = v7;
        *(void *)&v26[16] = 0LL;
      }

      dispatch_async_f(v12, v13, (dispatch_function_t)sub_370344);

      sub_1BB88((uint64_t *)v26);
      if (a2[2])
      {
        int v17 = (os_log_s *)*(id *)sub_138E8(13);
        unsigned __int8 v18 = v17;
        if (v17)
        {
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int16 v26 = 136315394;
            *(void *)&v26[4] = "ObjectDestructionManager.h";
            *(_WORD *)&v26[12] = 1024;
            *(_DWORD *)&v26[14] = 91;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The object destruction manager did not propery clear a command's object lis t! Some objects may not be deleted.",  v26,  0x12u);
          }
        }
      }
    }

    else
    {
      if ((sub_397E74(a1) & 1) == 0)
      {
        uint64_t v19 = (os_log_s *)*(id *)sub_138E8(13);
        unint64_t v20 = v19;
        if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v26 = 136315394;
          *(void *)&v26[4] = "ObjectDestructionManager.h";
          *(_WORD *)&v26[12] = 1024;
          *(_DWORD *)&v26[14] = 72;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event",  v26,  0x12u);
        }
      }

      while (a2[2])
      {
        unint64_t v21 = (_OWORD *)a2[1];
        *(_OWORD *)__int16 v26 = v21[1];
        *((void *)v21 + 3) = 0LL;
        *((void *)v21 + 2) = 0LL;
        sub_E9EFC(v26);
        unint64_t v22 = *(std::__shared_weak_count **)&v26[8];
        if (*(void *)&v26[8])
        {
          __int16 v23 = (unint64_t *)(*(void *)&v26[8] + 8LL);
          do
            unint64_t v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }

        uint64_t v25 = *(void *)v21;
        *(void *)(v25 + 8) = *((void *)v21 + 1);
        **((void **)v21 + 1) = v25;
        --a2[2];
        sub_7A768((uint64_t)(v21 + 1));
        operator delete(v21);
      }
    }
  }

void sub_370318(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_370344(uint64_t *a1)
{
  uint64_t v2 = sub_5954C();
  id v3 = (char *)operator new(0x28uLL);
  uint64_t v4 = v3;
  uint64_t v5 = a1[1];
  uint64_t v13 = &v13;
  std::string v14 = (uint64_t *)&v13;
  uint64_t v15 = 0LL;
  if ((uint64_t *)v5 == a1)
  {
    *((_DWORD *)v3 + 2) = 1;
    *(void *)id v3 = &off_4836F0;
    *((void *)v3 + 2) = v3 + 16;
    *((void *)v3 + 3) = v3 + 16;
    uint64_t v6 = (uint64_t *)(v3 + 32);
    goto LABEL_7;
  }

  uint64_t v6 = &v15;
  uint64_t v7 = (uint64_t *)&v13;
  do
  {
    unint64_t v8 = operator new(0x20uLL);
    v8[1] = *(_OWORD *)(v5 + 16);
    *(void *)(v5 + 16) = 0LL;
    *(void *)(v5 + 24) = 0LL;
    *(void *)unint64_t v8 = v7;
    *((void *)v8 + 1) = &v13;
    v7[1] = (uint64_t)v8;
    uint64_t v9 = v15 + 1;
    uint64_t v13 = v8;
    ++v15;
    uint64_t v5 = *(void *)(v5 + 8);
    uint64_t v7 = (uint64_t *)v8;
  }

  while ((uint64_t *)v5 != a1);
  *((_DWORD *)v4 + 2) = 1;
  *(void *)uint64_t v4 = &off_4836F0;
  *((void *)v4 + 2) = v4 + 16;
  *((void *)v4 + 3) = v4 + 16;
  *((void *)v4 + 4) = 0LL;
  if (v9)
  {
    uint64_t v10 = v14;
    uint64_t v11 = *v14;
    *(void *)(v11 + 8) = *((void *)v8 + 1);
    **((void **)v8 + 1) = v11;
    uint64_t v12 = *((void *)v4 + 2);
    *(void *)(v12 + 8) = v10;
    uint64_t *v10 = v12;
    *((void *)v4 + 2) = v8;
    *((void *)v8 + 1) = v4 + 16;
    *((void *)v4 + 4) = v9;
LABEL_7:
    uint64_t *v6 = 0LL;
  }

  (*(void (**)(uint64_t, char *))(*(void *)v2 + 328LL))(v2, v4);
  sub_1BB88((uint64_t *)&v13);
  sub_1BB88(a1);
  operator delete(a1);
}

void sub_370498(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_3704E8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_483720;
  result[1] = v3;
  return result;
}

uint64_t sub_37051C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_483720;
  a2[1] = v2;
  return result;
}

uint64_t sub_370538(uint64_t result)
{
  return result;
}

uint64_t *sub_370544(uint64_t *a1)
{
  uint64_t v2 = a1 + 2;
  if (a1[4])
  {
    uint64_t v3 = sub_138E8(13);
    uint64_t v4 = sub_138E8(15);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)std::condition_variable __p = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&__p[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    id v10 = *(id *)v3;
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v12 = (os_log_s *)v10;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = (uint64_t *)a1[3];
        memset(&v24, 0, sizeof(v24));
        std::string::append(&v24, "{ ", 2uLL);
        if (v13 != v2)
        {
          while (1)
          {
            std::string v14 = (os_unfair_lock_s *)v13[2];
            uint64_t v15 = (std::__shared_weak_count *)v13[3];
            uint64_t v25 = v14;
            __int16 v26 = v15;
            if (v15)
            {
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                unint64_t v17 = __ldxr(p_shared_owners);
              while (__stxr(v17 + 1, p_shared_owners));
            }

            sub_23FE8((uint64_t)__p, v14 + 2);
            if (SBYTE3(v29) >= 0) {
              unsigned __int8 v18 = __p;
            }
            else {
              unsigned __int8 v18 = *(const std::string::value_type **)__p;
            }
            if (SBYTE3(v29) >= 0) {
              std::string::size_type v19 = BYTE3(v29);
            }
            else {
              std::string::size_type v19 = *(void *)&__p[8];
            }
            std::string::append(&v24, v18, v19);
            if (SBYTE3(v29) < 0)
            {
              operator delete(*(void **)__p);
              if (!v15) {
                goto LABEL_28;
              }
            }

            else if (!v15)
            {
              goto LABEL_28;
            }

            unint64_t v20 = (unint64_t *)&v15->__shared_owners_;
            do
              unint64_t v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }

void sub_3707D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_370848(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  v22[0] = off_4836A8;
  v22[1] = v3;
  void v21[2] = 0LL;
  v21[3] = 0LL;
  v22[2] = v2;
  __int16 v23 = v22;
  sub_35678(v24, 0, (uint64_t)v22);
  uint64_t v6 = v23;
  if (v23 == v22)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v22;
  }

  else
  {
    if (!v23) {
      goto LABEL_9;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 152LL))(*a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 80LL))(*a1);
  if ((v9 & 1) != 0)
  {
    if (v8 != (*(unsigned int (**)(uint64_t))(*(void *)*a1 + 152LL))(*a1))
    {
      uint64_t v13 = sub_546E0();
      uint64_t v14 = *a1;
      uint64_t v15 = (std::__shared_weak_count *)a1[1];
      v21[0] = v14;
      v21[1] = (uint64_t)v15;
      if (v15)
      {
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          unint64_t v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
      }

      sub_1013F4(v13, v21);
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    unsigned __int8 v18 = v26;
    __int16 v26 = 0LL;
    if (v18 == v25)
    {
      uint64_t v19 = 4LL;
      unsigned __int8 v18 = v25;
      goto LABEL_20;
    }

    if (v18)
    {
      uint64_t v19 = 5LL;
LABEL_20:
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 8 * v19))(v18, v10, v11, v12);
    }
  }

  sub_35B78((uint64_t)v24);
  return v9;
}

void sub_3709D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned __int8 v18 = v17;
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_35B78((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *sub_370A38(void *a1)
{
  *a1 = off_4836A8;
  sub_7A768((uint64_t)(a1 + 1));
  return a1;
}

void sub_370A68(void *a1)
{
  *a1 = off_4836A8;
  sub_7A768((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_370A98(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_4836A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

uint64_t sub_370AE8(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_4836A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

uint64_t sub_370B18(uint64_t a1)
{
  return sub_7A768(a1 + 8);
}

void sub_370B20(void *a1)
{
}

void sub_370B48(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = sub_138E8(17);
  uint64_t v4 = sub_138E8(9);
  char v5 = 0;
  uint64_t v6 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&buf[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1LL;
    if ((v9 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_7:
  id v10 = *(id *)v3;
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = (os_log_s *)v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *v2;
      uint64_t v14 = *(const __CFString **)(*v2 + 248LL);
      size_t v34 = v14;
      LODWORD(v13) = *(unsigned __int8 *)(v13 + 256);
      char v35 = v13;
      if ((_DWORD)v13) {
        BOOL v15 = v14 == 0LL;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15) {
        CFRetain(v14);
      }
      sub_48E98(v36, v14);
      if (v37 >= 0) {
        uint64_t v16 = v36;
      }
      else {
        uint64_t v16 = (void **)v36[0];
      }
      uint64_t v17 = *(void *)(*v2 + 192LL);
      if (v17)
      {
        (*(void (**)(CFStringRef *__return_ptr))(*(void *)v17 + 128LL))(theString);
        sub_48E98(__p, theString[0]);
        if (v33 >= 0) {
          unsigned __int8 v18 = __p;
        }
        else {
          unsigned __int8 v18 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 487;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v16;
        __int16 v39 = 2080;
        uint64_t v40 = (const char *)v18;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Initialization failed for port %s of device %s. The port has not been registered and will be queued for destruction.",  buf,  0x26u);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)theString);
      }

      else
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 487;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v16;
        __int16 v39 = 2080;
        uint64_t v40 = "NULL";
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Initialization failed for port %s of device %s. The port has not been registered and will be queued for destruction.",  buf,  0x26u);
      }

      if (v37 < 0) {
        operator delete(v36[0]);
      }
      sub_19DFC((uint64_t)&v34);
    }
  }

  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 16);
  __p[0] = *(void **)(a1 + 8);
  __p[1] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }

  sub_36DEC4(__p);
  if (v19)
  {
    unint64_t v22 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v24 = *v2;
  if (*v2)
  {
    uint64_t v25 = (unint64_t *)qword_4A9BE8;
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(_OWORD *)&buf[8] = (unint64_t)buf;
    __int16 v26 = operator new(0x20uLL);
    uint64_t v27 = *(void *)(a1 + 16);
    v26[2] = v24;
    void v26[3] = v27;
    *uint64_t v2 = 0LL;
    v2[1] = 0LL;
    *__int16 v26 = buf;
    v26[1] = buf;
    *(void *)AudioObjectPropertyAddress buf = v26;
    *(void *)&buf[8] = v26;
    *(void *)&buf[16] = 1LL;
    sub_370058(v25, buf, 1);
    v36[0] = 0LL;
    v36[1] = 0LL;
    sub_127660((uint64_t)v2, (__int128 *)v36);
    __int16 v28 = (std::__shared_weak_count *)v36[1];
    if (v36[1])
    {
      float v29 = (unint64_t *)((char *)v36[1] + 8);
      do
        unint64_t v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

    sub_1BB88((uint64_t *)buf);
  }

void sub_370EC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_370F60(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  uint64_t v4 = (std::mutex *)(a2 + 320);
  std::mutex::lock((std::mutex *)(a2 + 320));
  char v5 = (void *)(a2 + 384);
  for (uint64_t i = *(void **)(a2 + 392); i != v5; uint64_t i = (void *)i[1])
  {
    uint64_t v8 = i[2];
    uint64_t v7 = i[3];
    if (v7)
    {
      char v9 = (unint64_t *)(v7 + 16);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    uint64_t v11 = operator new(0x20uLL);
    v11[2] = v8;
    v11[3] = v7;
    uint64_t v12 = *a1;
    void *v11 = *a1;
    v11[1] = a1;
    *(void *)(v12 + 8) = v11;
    *a1 = (uint64_t)v11;
    ++a1[2];
  }

  std::mutex::unlock(v4);
}

void sub_371004(_Unwind_Exception *a1)
{
}

void sub_371034(uint64_t *a1, uint64_t a2)
{
  std::condition_variable __p = 0LL;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  strcpy(v5, "cwdv");
  _BYTE v5[8] = 0;
  int v6 = 3;
  v8[0] = 0LL;
  v8[1] = 0LL;
  uint64_t v7 = v8;
  int v9 = 44739242;
  CFTypeRef cf = 0LL;
  sub_3710DC(a1, a2, (uint64_t)&__p);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v8[0]);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }

void sub_3710C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_3710DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  int v6 = (std::mutex *)(a2 + 320);
  std::mutex::lock((std::mutex *)(a2 + 320));
  uint64_t v7 = (void *)(a2 + 384);
  for (uint64_t i = *(void **)(a2 + 392); i != v7; uint64_t i = (void *)i[1])
  {
    if (sub_54ADC(i[2], a3))
    {
      uint64_t v10 = i[2];
      uint64_t v9 = i[3];
      if (v9)
      {
        uint64_t v11 = (unint64_t *)(v9 + 16);
        do
          unint64_t v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }

      uint64_t v13 = operator new(0x20uLL);
      v13[2] = v10;
      v13[3] = v9;
      uint64_t v14 = *a1;
      void *v13 = *a1;
      v13[1] = a1;
      *(void *)(v14 + 8) = v13;
      *a1 = (uint64_t)v13;
      ++a1[2];
    }
  }

  std::mutex::unlock(v6);
}

void sub_37119C(_Unwind_Exception *a1)
{
}

void sub_3711D4(uint64_t a1, void ***a2)
{
  if (!*a2)
  {
    uint64_t v20 = sub_138E8(13);
    id v21 = sub_8C7D4(1, *(void **)v20, *(void *)(v20 + 8));
    unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    unint64_t v23 = v22;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      id v58 = "Device_HAL_Common.mm";
      __int16 v59 = 1024;
      int v60 = 588;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v56[0] = *a2;
  v56[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  BOOL v7 = sub_36DE4C(a1, v56);
  if (v4)
  {
    uint64_t v8 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v7)
  {
    uint64_t v25 = a2;
    uint64_t v26 = sub_138E8(13);
    id v27 = sub_8C7D4(1, *(void **)v26, *(void *)(v26 + 8));
    __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    float v29 = v28;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      unint64_t v30 = *v25;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      id v58 = "Device_HAL_Common.mm";
      __int16 v59 = 1024;
      int v60 = 592;
      __int16 v61 = 2048;
      __int128 v62 = v30;
      __int16 v63 = 2048;
      uint64_t v64 = a1;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Port at %p has already been registered to device at %p",  buf,  0x26u);
    }

    BOOL v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v31, "Port at %p has already been registered to device at %p");
  }

  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v10 = *(void **)(a1 + 424);
  if (v10)
  {
    while ((void **)v10[2] != *a2)
    {
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_16;
      }
    }

    sub_2FDF90((uint64_t)buf, (void *)(a1 + 408), v10);
    sub_36E3B8((uint64_t)buf);
  }

void sub_37175C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31, uint64_t a32, char a33)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a23);

  _Unwind_Resume(a1);
}

void sub_371820(uint64_t a1, int a2, unsigned int a3, int a4)
{
  int v56 = 1;
  sub_36C6F8((uint64_t)buf, a1, COERCE_DOUBLE(1768845428LL));
  uint64_t v59 = 0LL;
  *(_OWORD *)std::condition_variable __p = 0u;
  int v8 = buf[24];
  unint64_t v9 = __p;
  if (buf[24]) {
    unint64_t v9 = (void **)buf;
  }
  uint64_t v10 = (char *)*v9;
  int32x2_t v11 = vdup_n_s32(buf[24] == 0);
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  int8x16_t v13 = vandq_s8(*(int8x16_t *)&buf[8], (int8x16_t)vcgezq_s64(vshlq_n_s64(v12, 0x3FuLL)));
  *(_OWORD *)(v9 + 1) = 0uLL;
  unint64_t *v9 = 0LL;
  char v54 = v10;
  unint64_t v53 = (char *)v13.i64[0];
  int8x16_t v55 = v13;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v8 && *(void *)buf) {
    operator delete(*(void **)buf);
  }
  id v14 = *(id *)sub_138E8(17);
  char v15 = v14;
  if (v14)
  {
    uint64_t v16 = (os_log_s *)v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(__p, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 705;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void **)&buf[20] = __p[0];
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = (unint64_t)(v53 - v10) >> 2;
      *(_WORD *)&v63[4] = 2080;
      *(void *)&v63[6] = "Enabling";
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "%25s:%-5d Device %@ has %d input streams before %s tapstream",  buf,  0x2Cu);
      sub_19DFC((uint64_t)__p);
    }
  }

  if (a2 == 1 && *(_BYTE *)(a1 + 480))
  {
    AudioObjectID v17 = *(_DWORD *)(a1 + 268);
    strcpy(buf, "#mtsptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LODWORD(__p[0]) = 0;
    AudioObjectGetPropertyDataSize(v17, (const AudioObjectPropertyAddress *)buf, 0, 0LL, (UInt32 *)__p);
    if (!LODWORD(__p[0]))
    {
      id v40 = *(id *)sub_138E8(17);
      id v41 = v40;
      if (!v40)
      {
LABEL_58:

        goto LABEL_70;
      }

      id v41 = v40;
      if (!os_log_type_enabled((os_log_t)v41, OS_LOG_TYPE_DEBUG))
      {
LABEL_57:

        goto LABEL_58;
      }

      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(__p, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 716;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void **)&buf[20] = __p[0];
      __int16 v42 = "%25s:%-5d Simulated device %@ has no output stream to tap -- skipping tapstream enablement";
LABEL_56:
      _os_log_impl(&dword_0, (os_log_t)v41, OS_LOG_TYPE_DEBUG, v42, buf, 0x1Cu);
      sub_19DFC((uint64_t)__p);
      goto LABEL_57;
    }

    if (v10 != v53)
    {
      unsigned __int8 v18 = v10;
      while (1)
      {
        LODWORD(__p[0]) = *(_DWORD *)v18;
        strcpy(buf, "spatbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unint64_t v19 = sub_36EF4((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
        *((void *)&v21 + 1) = v20;
        *(void *)&__int128 v21 = v19;
        if (((v21 >> 32) & 0xFF00000000LL) != 0 && HIDWORD(v19) != 0LL) {
          break;
        }
        v18 += 4;
        if (v18 == v53) {
          goto LABEL_23;
        }
      }

      id v43 = *(id *)sub_138E8(17);
      id v41 = v43;
      if (!v43) {
        goto LABEL_58;
      }
      id v41 = v43;
      if (!os_log_type_enabled((os_log_t)v41, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_57;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(__p, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 728;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void **)&buf[20] = __p[0];
      __int16 v42 = "%25s:%-5d Simulated device %@ has already posted tapstream -- skipping tapstream enablement";
      goto LABEL_56;
    }

void sub_372098(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_372174(uint64_t a1, UInt32 *a2, float *a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_48FDC8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_48FDC8))
  {
    byte_48FDC0 = sub_1CC250();
    __cxa_guard_release(&qword_48FDC8);
  }

  if (byte_48FDC0)
  {
    *(void *)&v11.AudioObjectPropertySelector mSelector = 0x676C6F62636C6B64LL;
    v11.AudioObjectPropertyElement mElement = 0;
    sub_232A4(a1, &v11, 0, 0LL, a2, a3);
    if (!*(_DWORD *)a3)
    {
      BOOL v7 = (os_log_s *)*(id *)sub_138E8(17);
      int v8 = v7;
      if (v7)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int8x16_t v13 = "Device_HAL_Common.mm";
          __int16 v14 = 1024;
          int v15 = 902;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d We expect this device to report a correct clock domain, but it is coming back as NULL/zero?!?!",  buf,  0x12u);
        }
      }
    }
  }

  else
  {
    unint64_t v9 = (os_log_s *)*(id *)sub_138E8(17);
    uint64_t v10 = v9;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int8x16_t v13 = "Device_HAL_Common.mm";
      __int16 v14 = 1024;
      int v15 = 909;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Driver does not report correct clock domain for the product, setting clock domain to 0",  buf,  0x12u);
    }

    sub_5CABC(0, a2, a3);
  }

void sub_372350(_Unwind_Exception *a1)
{
}

uint64_t sub_372370(os_unfair_lock_s *a1)
{
  char v2 = 0;
  uint64_t v3 = 0LL;
  __int16 v32 = 256;
  uint64_t v4 = a1 + 68;
  char v5 = a1 + 74;
  uint64_t v6 = 4LL;
  do
  {
    char v7 = v2;
    int v8 = *((unsigned __int8 *)&v32 + v3);
    AudioObjectID os_unfair_lock_opaque = a1[67]._os_unfair_lock_opaque;
    if (*((_BYTE *)&v32 + v3)) {
      uint64_t v10 = 74LL;
    }
    else {
      uint64_t v10 = 68LL;
    }
    if (*((_BYTE *)&v32 + v3)) {
      AudioObjectPropertyAddress v11 = v5;
    }
    else {
      AudioObjectPropertyAddress v11 = v4;
    }
    if (*((_BYTE *)&v32 + v3)) {
      int v12 = 1869968496;
    }
    else {
      int v12 = 1768845428;
    }
    LODWORD(inAddress) = 1937009955;
    HIDWORD(inAddress) = v12;
    LODWORD(inAddress_8) = 0;
    outDataSize[0] = 0;
    AudioObjectGetPropertyDataSize( os_unfair_lock_opaque,  (const AudioObjectPropertyAddress *)&inAddress,  0,  0LL,  outDataSize);
    int8x16_t v13 = *(char **)&a1[v10]._os_unfair_lock_opaque;
    __int16 v14 = *(char **)&v11[2]._os_unfair_lock_opaque;
    if (outDataSize[0])
    {
      if (v13 == v14)
      {
        sub_36BEA0(a1, v8 != 0);
        uint64_t v6 = 1LL;
      }
    }

    else if (v13 != v14)
    {
      *(void *)UInt32 outDataSize = 0LL;
      unint64_t v30 = 0LL;
      uint64_t v31 = 0LL;
      sub_372600(outDataSize, v13, v14, (v14 - v13) >> 4);
      uint64_t v15 = *(void *)&v11[2]._os_unfair_lock_opaque;
      uint64_t v16 = *(void *)&a1[v10]._os_unfair_lock_opaque;
      while (v15 != v16)
        uint64_t v15 = sub_7A768(v15 - 16);
      *(void *)&v11[2]._AudioObjectID os_unfair_lock_opaque = v16;
      (*(void (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 432LL))(a1);
      int v26 = 0LL;
      id v27 = 0LL;
      uint64_t v28 = 0LL;
      sub_372600(&v26, *(void **)outDataSize, v30, ((uint64_t)v30 - *(void *)outDataSize) >> 4);
      __int128 v24 = 0uLL;
      uint64_t v25 = 0LL;
      sub_372600(&v24, v26, v27, (v27 - v26) >> 4);
      uint64_t v17 = sub_869B4();
      unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      __int128 v23 = v24;
      uint64_t v19 = v25;
      __int128 v24 = 0uLL;
      uint64_t v25 = 0LL;
      uint64_t v20 = v18;
      __int128 v21 = operator new(0x18uLL);
      *(_OWORD *)__int128 v21 = v23;
      void v21[2] = v19;
      uint64_t inAddress_8 = 0LL;
      uint64_t v35 = 0LL;
      AudioObjectPropertyAddress inAddress = 0LL;
      p_AudioObjectPropertyAddress inAddress = 0LL;
      dispatch_async_f(v20, v21, (dispatch_function_t)sub_3726B8);
      sub_372B3C((void ***)&p_inAddress);

      p_AudioObjectPropertyAddress inAddress = (void ***)&inAddress;
      sub_7A668((void ***)&p_inAddress);

      AudioObjectPropertyAddress inAddress = (UInt32 *)&v24;
      sub_7A668((void ***)&inAddress);
      AudioObjectPropertyAddress inAddress = (UInt32 *)&v26;
      sub_7A668((void ***)&inAddress);
      AudioObjectPropertyAddress inAddress = outDataSize;
      sub_7A668((void ***)&inAddress);
      uint64_t v6 = 2LL;
    }

    char v2 = 1;
    uint64_t v3 = 1LL;
  }

  while ((v7 & 1) == 0);
  sub_CC160((uint64_t)a1);
  return v6;
}

void sub_3725AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, void **a21)
{
  a21 = (void **)&a17;
  sub_7A668(&a21);
  _Unwind_Resume(a1);
}

void *sub_372600(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      sub_7A87C();
    }
    uint64_t v6 = result;
    double result = sub_7BE90(a4);
    void *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *double result = *a2;
      uint64_t v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        unint64_t v9 = (unint64_t *)(v8 + 8);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      a2 += 2;
      result += 2;
    }

    v6[1] = result;
  }

  return result;
}

void sub_3726A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_3726B8(void **a1)
{
  uint64_t v8 = a1;
  uint64_t v2 = sub_5954C();
  uint64_t v3 = operator new(0x48uLL);
  sub_7D084(__p, "Device_HAL_Common::HandleAudioStreamsChange: Old streams deletion");
  __int128 v9 = 0uLL;
  uint64_t v10 = 0LL;
  sub_372600(&v9, *a1, a1[1], ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  uint64_t v15 = 0LL;
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = off_4837A0;
  *(_OWORD *)(v4 + 8) = v9;
  *((void *)v4 + 3) = v10;
  __int128 v9 = 0uLL;
  uint64_t v10 = 0LL;
  uint64_t v15 = v4;
  sub_26E970((uint64_t)v3, (__int128 *)__p, (uint64_t)v14);
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 328LL))(v2, v3);
  char v5 = v15;
  if (v15 == v14)
  {
    uint64_t v6 = 4LL;
    char v5 = v14;
  }

  else
  {
    if (!v15) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  AudioObjectPropertyAddress v11 = (void **)&v9;
  sub_7A668(&v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return sub_372B3C(&v8);
}

void sub_37280C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, __int16 *a17, __int128 __p, __int128 a19, __int16 a20, __int16 a21, int a22, int a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  a17 = &a12;
  sub_7A668((void ***)&a17);
  if (SBYTE7(a19) < 0) {
    operator delete((void *)__p);
  }
  operator delete(v23);
  if (a2 == 3)
  {
    int v26 = __cxa_begin_catch(exception_object);
    id v27 = *(id *)sub_138E8(13);
    if (v27)
    {
      uint64_t v28 = (os_log_s *)v27;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v29 = v26[2];
        LODWORD(__p) = 136316162;
        *(void *)((char *)&__p + 4) = "StandardUtilities.h";
        WORD6(__p) = 1024;
        *(_DWORD *)((char *)&__p + 14) = 429;
        WORD1(a19) = 1024;
        DWORD1(a19) = v29;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = "";
        a21 = 1024;
        a22 = 98;
        unint64_t v30 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v31 = v28;
        uint32_t v32 = 40;
LABEL_15:
        _os_log_impl(&dword_0, v31, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&__p, v32);
        goto LABEL_16;
      }

      goto LABEL_16;
    }
  }

  else
  {
    int v33 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v34 = v33;
      id v35 = *(id *)sub_138E8(13);
      if (v35)
      {
        uint64_t v28 = (os_log_s *)v35;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v34 + 16LL))(v34);
          LODWORD(__p) = 136316162;
          *(void *)((char *)&__p + 4) = "StandardUtilities.h";
          WORD6(__p) = 1024;
          *(_DWORD *)((char *)&__p + 14) = 430;
          WORD1(a19) = 2080;
          *(void *)((char *)&a19 + 4) = v36;
          WORD6(a19) = 2080;
          *(void *)((char *)&a19 + 14) = "";
          HIWORD(a22) = 1024;
          a23 = 98;
          unint64_t v30 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v31 = v28;
          uint32_t v32 = 44;
          goto LABEL_15;
        }

void ***sub_372B3C(void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v4 = v2;
    sub_7A668(&v4);
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_372B84(uint64_t a1)
{
  *(void *)a1 = off_4837A0;
  uint64_t v3 = (void **)(a1 + 8);
  sub_7A668(&v3);
  return a1;
}

void sub_372BC8(char *a1)
{
  *(void *)a1 = off_4837A0;
  uint64_t v2 = (void **)(a1 + 8);
  sub_7A668(&v2);
  operator delete(a1);
}

void *sub_372C0C(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_4837A0;
  v2[2] = 0LL;
  v2[3] = 0LL;
  v2[1] = 0LL;
  sub_372600( v2 + 1,  *(void **)(a1 + 8),  *(void **)(a1 + 16),  (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  return v2;
}

void sub_372C5C(_Unwind_Exception *a1)
{
}

void *sub_372C70(uint64_t a1, void *a2)
{
  *a2 = off_4837A0;
  a2[2] = 0LL;
  a2[3] = 0LL;
  a2[1] = 0LL;
  return sub_372600( a2 + 1,  *(void **)(a1 + 8),  *(void **)(a1 + 16),  (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
}

void sub_372C9C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  sub_7A668(&v1);
}

void sub_372CC4(void **a1)
{
  uint64_t v2 = a1 + 1;
  sub_7A668(&v2);
  operator delete(a1);
}

BOOL sub_372CFC@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  while (v4 != v5)
    uint64_t v4 = sub_7A768(v4 - 16);
  *(void *)(a1 + 16) = v5;
  return sub_72210(a2, 1920099684LL);
}

__CFArray *sub_372D50(uint64_t a1, int a2)
{
  v31[0] = 1936941859;
  v31[1] = a2;
  v31[2] = 0;
  if (a2 == 1768845428) {
    uint64_t v4 = @"input source ID";
  }
  else {
    uint64_t v4 = @"output destination ID";
  }
  uint64_t v5 = @"output destination name";
  if (a2 == 1768845428) {
    uint64_t v5 = @"input source name";
  }
  __int128 v23 = v5;
  CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  __int16 v30 = 257;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, _DWORD *, void, void))(*(void *)a1 + 32LL))(a1, v31, 0LL, 0LL);
  unsigned int v7 = v6;
  unsigned int v8 = v6 >> 2;
  __n128 v9 = __chkstk_darwin(v6);
  AudioObjectPropertyAddress v11 = (int *)((char *)&v22 - ((v10 + 15) & 0x1FFFFFFF0LL));
  int v28 = v12;
  (*(void (**)(uint64_t, _DWORD *, void, void, int *, int *, __n128))(*(void *)a1 + 40LL))( a1,  v31,  0LL,  0LL,  &v28,  v11,  v9);
  uint64_t v22 = (uint64_t)&v22;
  if (v28 != v7)
  {
    uint64_t v17 = sub_138E8(13);
    id v18 = sub_8C7D4(1, *(void **)v17, *(void *)(v17 + 8));
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    uint64_t v20 = v19;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      __int16 v33 = 1024;
      *(_DWORD *)int v34 = 991;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = v7;
      LOWORD(v35[0]) = 1024;
      *(_DWORD *)((char *)v35 + 2) = v28;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Expected %u bytes, got %u bytes instead",  buf,  0x1Eu);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Expected %u bytes, got %u bytes instead");
  }

  if (v7 >= 4)
  {
    if (v8 <= 1) {
      uint64_t v13 = 1LL;
    }
    else {
      uint64_t v13 = v8;
    }
    do
    {
      id v27 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = v11;
      *(_DWORD *)&buf[8] = 4;
      *(void *)&v34[2] = &v27;
      v35[0] = 8;
      v26[0] = 1819501422;
      v26[1] = a2;
      v26[2] = 0;
      int v28 = 32;
      (*(void (**)(uint64_t, _DWORD *, void, void, int *, _BYTE *))(*(void *)a1 + 40LL))( a1,  v26,  0LL,  0LL,  &v28,  buf);
      CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      __int16 v25 = 257;
      sub_13408((uint64_t)&v24, v4, *v11);
      CFMutableDictionaryRef v14 = v24;
      if (HIBYTE(v25) && v27 && v24)
      {
        CFDictionarySetValue(v24, v23, v27);
        CFMutableDictionaryRef v14 = v24;
      }

      if (Mutable && HIBYTE(v30)) {
        CFArrayAppendValue(Mutable, v14);
      }
      if (v27) {
        CFRelease(v27);
      }
      sub_13850((uint64_t)&v24);
      ++v11;
      --v13;
    }

    while (v13);
  }

  if (Mutable)
  {
    CFRetain(Mutable);
    uint64_t v15 = Mutable;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  sub_13818((uint64_t)&Mutable);
  return v15;
}

void sub_3730B4(_Unwind_Exception *a1)
{
}

CFNumberRef sub_373104(uint64_t a1, uint64_t a2)
{
  int v10 = 4;
  int valuePtr = 0;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1936945763;
  unint64_t v13 = a2;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, int *))(*(void *)a1 + 40LL))( a1,  buf,  0LL,  0LL,  &v10,  &valuePtr);
  uint64_t v3 = sub_138E8(17);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    id v4 = *(id *)v3;
    if (v4)
    {
      uint64_t v5 = (os_log_s *)v4;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(__p, a2);
        if (v9 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        unint64_t v13 = (unint64_t)"Device_HAL_Common.mm";
        __int16 v14 = 1024;
        int v15 = 1030;
        __int16 v16 = 2080;
        uint64_t v17 = v6;
        __int16 v18 = 1024;
        int v19 = valuePtr;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d retrieved data source (scope = %s) of %u", buf, 0x22u);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
}

void sub_373278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_373294(uint64_t a1, uint64_t a2, CFNumberRef number)
{
  CFNumberRef v14 = number;
  char v15 = 0;
  int valuePtr = 0;
  if (number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    int v5 = valuePtr;
  }

  else
  {
    int v5 = 0;
  }

  int v13 = v5;
  uint64_t v6 = sub_138E8(17);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    id v7 = *(id *)v6;
    if (v7)
    {
      unsigned int v8 = (os_log_s *)v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(__p, a2);
        if (v12 >= 0) {
          char v9 = __p;
        }
        else {
          char v9 = (void **)__p[0];
        }
        int valuePtr = 136315906;
        unint64_t v17 = (unint64_t)"Device_HAL_Common.mm";
        __int16 v18 = 1024;
        int v19 = 1043;
        __int16 v20 = 2080;
        __int128 v21 = v9;
        __int16 v22 = 1024;
        int v23 = v5;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d setting data source (scope = %s) to %u",  (uint8_t *)&valuePtr,  0x22u);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  int valuePtr = 1936945763;
  unint64_t v17 = a2;
  (*(void (**)(uint64_t, int *, void, void, uint64_t, int *))(*(void *)a1 + 48LL))( a1,  &valuePtr,  0LL,  0LL,  4LL,  &v13);
  return sub_1348C((uint64_t)&v14);
}

void sub_373430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  sub_1348C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_373464(char **a1, std::mutex *a2, uint64_t a3)
{
  id v4 = (os_unfair_lock_s *)a2;
  int v5 = a1;
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  inAddress.AudioObjectPropertySelector mSelector = 1936941859;
  inAddress.AudioObjectPropertyScope mScope = a3;
  inAddress.AudioObjectPropertyElement mElement = 0;
  __int16 v63 = a1;
  sub_1BB60(a2);
  uint64_t result = AudioObjectHasProperty(v4[67]._os_unfair_lock_opaque, &inAddress);
  if ((_DWORD)result)
  {
    uint64_t v7 = (*(uint64_t (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *, void, void))(*(void *)&v4->_os_unfair_lock_opaque + 32LL))( v4,  &inAddress,  0LL,  0LL);
    unsigned int v8 = v7;
    v60[1] = v60;
    unsigned int v9 = v7 >> 2;
    __n128 v10 = __chkstk_darwin(v7);
    char v12 = (char *)v60 - ((v11 + 15) & 0x1FFFFFFF0LL);
    int v79 = v13;
    CFNumberRef v14 = *(uint64_t (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *, void, void, int *, __n128))(*(void *)&v4->_os_unfair_lock_opaque + 40LL);
    uint64_t v68 = v12;
    uint64_t result = v14(v4, &inAddress, 0LL, 0LL, &v79, v10);
    if (v79 != v8)
    {
      uint64_t v55 = sub_138E8(13);
      id v56 = sub_8C7D4(1, *(void **)v55, *(void *)(v55 + 8));
      uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      id v58 = v57;
      if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1075;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v8;
        *(_WORD *)&_BYTE buf[24] = 1024;
        *(_DWORD *)&buf[26] = v79;
        _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Expected %u bytes, got %u bytes instead",  buf,  0x1Eu);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Expected %u bytes, got %u bytes instead");
    }

    if (v8 >= 4)
    {
      uint64_t v16 = 0LL;
      if (v9 <= 1) {
        uint64_t v17 = 1LL;
      }
      else {
        uint64_t v17 = v9;
      }
      uint64_t v66 = v17;
      uint64_t v67 = (uint64_t)&v86 + 4;
      os_unfair_lock_t v62 = v4 + 2;
      uint64_t v64 = v5 + 2;
      *(void *)&__int128 v15 = 136316674LL;
      __int128 v61 = v15;
      __int16 v65 = v4;
      do
      {
        uint64_t v18 = *(unsigned int *)&v68[4 * v16];
        LODWORD(v70) = *(_DWORD *)&v68[4 * v16];
        uint64_t v73 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = &v70;
        *(_DWORD *)&buf[8] = 4;
        *(void *)&buf[16] = &v73;
        *(_DWORD *)&_BYTE buf[24] = 8;
        LODWORD(v81.__r_.__value_.__l.__data_) = 1819501422;
        *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = a3;
        LODWORD(v76) = 32;
        (*(void (**)(os_unfair_lock_s *, std::string *, void, void, __int128 *, _BYTE *))(*(void *)&v4->_os_unfair_lock_opaque + 40LL))( v4,  &v81,  0LL,  0LL,  &v76,  buf);
        p_isa = &v73->isa;
        unint64_t v77 = v73;
        char v78 = 1;
        __int16 v20 = (std::__shared_weak_count *)operator new(0x60uLL);
        v20->__shared_owners_ = 0LL;
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        v20->__shared_weak_owners_ = 0LL;
        v20->__vftable = (std::__shared_weak_count_vtbl *)off_4851A8;
        uint64_t v70 = p_isa;
        unsigned __int8 v71 = 1;
        if (p_isa) {
          CFRetain(p_isa);
        }
        sub_3899E4((uint64_t)buf, v18);
        memset(&v81, 0, sizeof(v81));
        uint64_t v73 = (__CFString *)&v81;
        char v74 = 0;
        v81.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        v81.__r_.__value_.__l.__size_ = v81.__r_.__value_.__r.__words[0];
        v81.__r_.__value_.__l.__cap_ = v81.__r_.__value_.__r.__words[0] + 64;
        v81.__r_.__value_.__l.__size_ = sub_85654((uint64_t)buf, v67, (uint64_t)v81.__r_.__value_.__l.__data_);
        sub_856E4((uint64_t)&v20[1], v18, 1735291491, 0, (uint64_t *)&v81);
        uint64_t v73 = (__CFString *)&v81;
        sub_855A4((void ***)&v73);
        if (v83)
        {
          *(void *)OSStatus v84 = v83;
          operator delete(v83);
        }

        if (*(void *)&buf[8])
        {
          *(void *)&buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }

        __int16 v22 = v70;
        v20[3].__shared_owners_ = (uint64_t)v70;
        int v23 = v71;
        LOBYTE(v20[3].__shared_weak_owners_) = v71;
        if (v23 && v22) {
          CFRetain(v22);
        }
        sub_19DFC((uint64_t)&v70);
        *(void *)&__int128 v76 = v20 + 1;
        *((void *)&v76 + 1) = v20;
        id v24 = *(id *)sub_138E8(17);
        __int16 v25 = v24;
        if (v24)
        {
          __int16 v69 = (os_log_s *)v24;
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            sub_3893A0(&v81, (unsigned int *)&v20[1]);
            if ((v81.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v26 = &v81;
            }
            else {
              int v26 = (std::string *)v81.__r_.__value_.__r.__words[0];
            }
            CStringPtr = CFStringGetCStringPtr(v77, 0x8000100u);
            sub_23FE8((uint64_t)&v73, v62);
            int v28 = v75;
            int v29 = &v73->isa;
            sub_2CA1C(&v70, a3);
            __int16 v30 = (void ***)&v73;
            if (v28 < 0) {
              __int16 v30 = (void ***)v29;
            }
            uint64_t v31 = (void **)&v70;
            if (v72 < 0) {
              uint64_t v31 = v70;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = v61;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1089;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v26;
            *(_WORD *)&_BYTE buf[28] = 2048;
            *(void *)&buf[30] = v18;
            *(_WORD *)&buf[38] = 2080;
            AudioObjectID v83 = (char *)CStringPtr;
            *(_WORD *)OSStatus v84 = 2080;
            *(void *)&v84[2] = v30;
            __int16 v85 = 2080;
            char v86 = v31;
            _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating sub-port '%s' to represent data source ID: %lu with name: '%s' for device: '%s'. Scope: '%s'.",  buf,  0x44u);
            if (v72 < 0) {
              operator delete(v70);
            }
            int v5 = v63;
            id v4 = v65;
            if (v75 < 0) {
              operator delete(v73);
            }
          }
        }

        uint32_t v32 = v5[1];
        unint64_t v33 = (unint64_t)v5[2];
        if ((unint64_t)v32 >= v33)
        {
          uint64_t v35 = (v32 - *v5) >> 4;
          unint64_t v36 = v35 + 1;
          uint64_t v37 = v33 - (void)*v5;
          if (v37 >> 3 > v36) {
            unint64_t v36 = v37 >> 3;
          }
          else {
            unint64_t v38 = v36;
          }
          *(void *)&buf[32] = v64;
          AudioObjectID v39 = (char *)sub_7BE90(v38);
          id v41 = &v39[16 * v35];
          uint64_t v42 = *((void *)&v76 + 1);
          *(_OWORD *)id v41 = v76;
          if (v42)
          {
            id v43 = (unint64_t *)(v42 + 8);
            do
              unint64_t v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }

          uint64_t v46 = *v5;
          id v45 = v5[1];
          if (v45 == *v5)
          {
            int64x2_t v49 = vdupq_n_s64((unint64_t)v45);
            char v47 = &v39[16 * v35];
          }

          else
          {
            char v47 = &v39[16 * v35];
            do
            {
              __int128 v48 = *((_OWORD *)v45 - 1);
              v45 -= 16;
              *((_OWORD *)v47 - 1) = v48;
              v47 -= 16;
              *(void *)id v45 = 0LL;
              *((void *)v45 + 1) = 0LL;
            }

            while (v45 != v46);
            int64x2_t v49 = *(int64x2_t *)v5;
          }

          AudioObjectID v50 = v5;
          uint64_t v51 = v41 + 16;
          *AudioObjectID v50 = v47;
          v50[1] = v41 + 16;
          *(int64x2_t *)&buf[8] = v49;
          char v52 = v50[2];
          v50[2] = &v39[16 * v40];
          *(void *)&_BYTE buf[24] = v52;
          *(void *)AudioObjectPropertyAddress buf = v49.i64[0];
          sub_A0D64((uint64_t)buf);
          __int16 v20 = (std::__shared_weak_count *)*((void *)&v76 + 1);
          v50[1] = v51;
          int v5 = v50;
          id v4 = v65;
          if (!v20) {
            goto LABEL_56;
          }
        }

        else
        {
          *(void *)uint32_t v32 = v76;
          *((void *)v32 + 1) = v20;
          do
            unint64_t v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
          v5[1] = v32 + 16;
        }

        unint64_t v53 = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }

void sub_373B94(_Unwind_Exception *a1)
{
  *(void *)(v2 - 232) = *(void *)(v2 - 360);
  sub_7A668((void ***)(v2 - 232));
  _Unwind_Resume(a1);
}

void sub_373CEC(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v7 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v7, 0);
  sub_1D5AE0(a1, (uint64_t)v7);
  unsigned int v8 = operator new(0x50uLL);
  sub_EC558((uint64_t)v8);
  sub_1D5AE0(a1, (uint64_t)v8);
  sub_1D580C((uint64_t)a1, 1u, *(unsigned int *)a2, (uint64_t)v7);
  sub_1D55D4(a1, 1u, *(unsigned int *)a2, (uint64_t)v8);
  unsigned int v9 = (std::__shared_weak_count *)operator new(0x228uLL);
  *(_OWORD *)&v9->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_483818;
  uint64_t v11 = (uint64_t)&v9[1];
  uint64_t v38 = 0LL;
  __int128 v37 = 0u;
  sub_31AC08((uint64_t)&cf, *(unsigned int *)a2);
  *(void *)AudioObjectPropertyAddress buf = cf;
  buf[8] = v36;
  if (v36 && cf) {
    CFRetain(cf);
  }
  *(void *)&v41[2] = 0LL;
  _BYTE v41[10] = 1;
  *(void *)&v43[2] = 0LL;
  char v44 = 1;
  sub_31AC08((uint64_t)v34, *(unsigned int *)a2);
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  sub_7D084(__p, "");
  sub_F9638(v11, a2, (uint64_t)a1, (uint64_t)&v37, (uint64_t)buf, (uint64_t)v34, &v31, (__int128 *)__p);
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
  LOWORD(v9[22].__shared_weak_owners_) = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = &v31;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)v34);
  sub_19DFC((uint64_t)&v43[2]);
  sub_19DFC((uint64_t)&v41[2]);
  sub_19DFC((uint64_t)buf);
  sub_19DFC((uint64_t)&cf);
  *(void *)uint64_t v11 = &off_4805D8;
  char v12 = (os_log_t *)sub_138E8(17);
  int v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v11 + 144LL))(&v37, v11);
    uint64_t v14 = v37;
    shared_owners = (char *)v9[11].__shared_owners_;
    uint64_t v31 = shared_owners;
    LOBYTE(v32) = v9[11].__shared_weak_owners_;
    if ((_BYTE)v32 && shared_owners) {
      CFRetain(shared_owners);
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Port_Injection_Aspen.cpp";
    __int16 v40 = 1024;
    *(_DWORD *)id v41 = 38;
    *(_WORD *)&v41[4] = 2112;
    *(void *)&v41[6] = v14;
    __int16 v42 = 2112;
    *(void *)id v43 = shared_owners;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating an injection output port with name %@, uid %@",  buf,  0x26u);
    sub_19DFC((uint64_t)&v31);
    sub_19DFC((uint64_t)&v37);
  }

  *(void *)&__int128 v27 = v9 + 1;
  *((void *)&v27 + 1) = v9;
  shared_weak_owners = (std::__shared_weak_count *)v9[4].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    do
      unint64_t v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v9[4].__shared_owners_ = v11;
    v9[4].__shared_weak_owners_ = (uint64_t)v9;
    do
LABEL_26:
      unint64_t v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }

    goto LABEL_29;
  }

  if (shared_weak_owners->__shared_owners_ == -1)
  {
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    uint64_t v18 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v9[4].__shared_owners_ = v11;
    v9[4].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    goto LABEL_26;
  }

void sub_3740F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, char a27)
{
}

void sub_3741AC()
{
}

void sub_3741B8()
{
}

void sub_3741C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_483818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3741D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_483818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_3741F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *sub_374204(void *a1, unsigned int a2)
{
  id v4 = operator new(0x70uLL);
  *(_OWORD *)id v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  sub_EC558((uint64_t)v4);
  v4[10] = off_4838C8;
  void *v4 = off_483850;
  v4[12] = 0LL;
  v4[13] = 0LL;
  v4[11] = 0LL;
  strcpy((char *)buf, "etumptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if ((*(unsigned int (**)(void *, uint8_t *))(*a1 + 16LL))(a1, buf))
  {
    int v5 = operator new(0x80uLL);
    v5[2] = 0LL;
    void *v5 = off_483900;
    v5[1] = 0LL;
    sub_EC558((uint64_t)(v5 + 3));
    v5[3] = &off_478AE8;
    v5[13] = off_478B60;
    v5[14] = a1;
    v5[15] = 1869968496LL;
    *(void *)AudioObjectPropertyAddress buf = v5 + 13;
    *(void *)&buf[8] = v5;
    __int128 v37 = 0LL;
    uint64_t v38 = 0LL;
    sub_2793D8(v4, buf);
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

  if (a2)
  {
    unsigned int v9 = 1;
    do
    {
      *(void *)AudioObjectPropertyAddress buf = 0x6F7574706D757465LL;
      *(_DWORD *)&buf[8] = v9;
      if ((*(unsigned int (**)(void *, uint8_t *))(*a1 + 16LL))(a1, buf))
      {
        __n128 v10 = operator new(0x80uLL);
        v10[2] = 0LL;
        void *v10 = off_483900;
        v10[1] = 0LL;
        sub_EC558((uint64_t)(v10 + 3));
        v10[3] = &off_478AE8;
        v10[13] = off_478B60;
        v10[14] = a1;
        *((_DWORD *)v10 + 30) = 1869968496;
        *((_DWORD *)v10 + 31) = v9;
        *(void *)AudioObjectPropertyAddress buf = v10 + 13;
        *(void *)&buf[8] = v10;
        __int128 v37 = 0LL;
        uint64_t v38 = 0LL;
        sub_2793D8(v4, buf);
        uint64_t v11 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          char v12 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }

      ++v9;
    }

    while (v9 <= a2);
  }

  memset(buf, 0, sizeof(buf));
  uint64_t v14 = (__int128 *)v4[11];
  __int128 v15 = (__int128 *)v4[12];
  if (v14 == v15)
  {
    __int128 v37 = buf;
    sub_A0CF0((void ***)&v37);
    goto LABEL_47;
  }

  uint64_t v16 = 0LL;
  do
  {
    __int128 v17 = *v14;
    uint64_t v18 = *((void *)v14 + 1);
    if (v18)
    {
      unint64_t v19 = (unint64_t *)(v18 + 16);
      do
        unint64_t v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }

    if ((unint64_t)v16 < *(void *)&buf[16])
    {
      *v16++ = v17;
      goto LABEL_40;
    }

    __int128 v21 = *(_OWORD **)buf;
    uint64_t v22 = ((uint64_t)v16 - *(void *)buf) >> 4;
    unint64_t v23 = v22 + 1;
    __int128 v36 = v17;
    uint64_t v24 = *(void *)&buf[16] - *(void *)buf;
    else {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
      sub_7A8C4();
    }
    unint64_t v26 = (char *)operator new(16 * v25);
    __int128 v27 = &v26[16 * v22];
    *(_OWORD *)__int128 v27 = v36;
    uint64_t v28 = v27 + 16;
    if (v16 == v21)
    {
      *(void *)AudioObjectPropertyAddress buf = &v26[16 * v22];
      *(void *)&buf[8] = v27 + 16;
      *(void *)&buf[16] = &v26[16 * v25];
      if (!v16) {
        goto LABEL_39;
      }
    }

    else
    {
      do
      {
        __int128 v29 = *--v16;
        *((_OWORD *)v27 - 1) = v29;
        v27 -= 16;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v16 + 1) = 0LL;
      }

      while (v16 != v21);
      char v30 = *(_OWORD **)buf;
      uint64_t v16 = *(_OWORD **)&buf[8];
      *(void *)AudioObjectPropertyAddress buf = v27;
      *(void *)&buf[8] = v28;
      *(void *)&buf[16] = &v26[16 * v25];
      if (v16 != v30)
      {
        do
        {
          uint64_t v31 = (std::__shared_weak_count *)*((void *)v16 - 1);
          if (v31) {
            std::__shared_weak_count::__release_weak(v31);
          }
          --v16;
        }

        while (v16 != v30);
        uint64_t v16 = v30;
      }

      if (!v16) {
        goto LABEL_39;
      }
    }

    operator delete(v16);
LABEL_39:
    uint64_t v16 = v28;
LABEL_40:
    *(void *)&buf[8] = v16;
    ++v14;
  }

  while (v14 != v15);
  uint64_t v32 = *(_OWORD **)buf;
  __int128 v37 = buf;
  sub_A0CF0((void ***)&v37);
  if (v16 != v32)
  {
    sub_1D5AE0(a1, (uint64_t)v4);
    return (char *)(v4 + 10);
  }

void sub_3746C4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf)
{
  if (a2)
  {
    sub_7A768((uint64_t)&buf);
    sub_7A768((uint64_t)&a13);
    __cxa_begin_catch(a1);
    uint64_t v16 = sub_138E8(17);
    id v17 = sub_8C7D4(1, *(void **)v16, *(void *)(v16 + 8));
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    unint64_t v19 = v18;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "Device_HAL_Common.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1147;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Caught exception trying to create controls",  (uint8_t *)&buf,  0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x374640LL);
  }

  _Unwind_Resume(a1);
}

void sub_374800()
{
}

void sub_37480C(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0x374724LL);
}

void sub_37481C()
{
}

void sub_374824(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_483900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_374834(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_483900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_374854(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_OWORD *sub_374864(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x78uLL);
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  *((void *)v6 + 14) = 0LL;
  sub_2BC660((uint64_t)v6);
  *(void *)uint64_t v6 = off_483938;
  *((void *)v6 + 10) = off_483A00;
  *((void *)v6 + 13) = 0LL;
  *((void *)v6 + 14) = 0LL;
  *((void *)v6 + 12) = 0LL;
  strcpy(buf, "dlovptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v7 = operator new(0x1F8uLL);
  v7[2] = 0LL;
  void *v7 = off_483A38;
  v7[1] = 0LL;
  *(void *)AudioObjectPropertyAddress buf = sub_1C88B8((uint64_t)(v7 + 3), (uint64_t)a1, 1869968496LL, 0, 0, 74, a3);
  *(void *)&buf[8] = v7;
  __int128 v25 = 0uLL;
  (*(void (**)(_OWORD *, _BYTE *))(*(void *)v6 + 136LL))(v6, buf);
  unint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unsigned int v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (!*((void *)&v25 + 1)) {
    goto LABEL_11;
  }
  uint64_t v11 = (unint64_t *)(*((void *)&v25 + 1) + 8LL);
  do
    unint64_t v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    (*(void (**)(void))(**((void **)&v25 + 1) + 16LL))(*((void *)&v25 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
    if (!a2) {
      goto LABEL_25;
    }
  }

  else
  {
LABEL_11:
    if (!a2) {
      goto LABEL_25;
    }
  }

  unsigned int v13 = 1;
  do
  {
    *(void *)AudioObjectPropertyAddress buf = 0x6F757470766F6C64LL;
    *(_DWORD *)&buf[8] = v13;
    if ((*(unsigned int (**)(void *, _BYTE *))(*a1 + 16LL))(a1, buf))
    {
      uint64_t v14 = operator new(0x1F8uLL);
      v14[2] = 0LL;
      *uint64_t v14 = off_483A38;
      v14[1] = 0LL;
      *(void *)&__int128 v25 = sub_1C88B8((uint64_t)(v14 + 3), (uint64_t)a1, 1869968496LL, v13, 0, 74, a3);
      *((void *)&v25 + 1) = v14;
      *(_OWORD *)AudioObjectPropertyAddress buf = v25;
      __int128 v25 = 0uLL;
      (*(void (**)(_OWORD *, _BYTE *))(*(void *)v6 + 136LL))(v6, buf);
      __int128 v15 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v16 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }

      if (*((void *)&v25 + 1))
      {
        uint64_t v18 = (unint64_t *)(*((void *)&v25 + 1) + 8LL);
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          (*(void (**)(void))(**((void **)&v25 + 1) + 16LL))(*((void *)&v25 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
        }
      }
    }

    ++v13;
  }

  while (v13 <= a2);
LABEL_25:
  (*(void (**)(_BYTE *__return_ptr, _OWORD *))(*(void *)v6 + 144LL))(buf, v6);
  uint64_t v21 = *(void *)buf;
  uint64_t v20 = *(void *)&buf[8];
  *(void *)&__int128 v25 = buf;
  sub_A0CF0((void ***)&v25);
  if (v20 == v21)
  {
    uint64_t v22 = (os_log_s *)*(id *)sub_138E8(17);
    unint64_t v23 = v22;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1153;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d No controls created", buf, 0x12u);
    }

    (*(void (**)(_OWORD *))(*(void *)v6 + 8LL))(v6);
    return 0LL;
  }

  else
  {
    sub_1D5AE0(a1, (uint64_t)v6);
  }

  return v6;
}

void sub_374BEC(_Unwind_Exception *a1)
{
}

_OWORD *sub_374D30(void *a1, unsigned int a2)
{
  id v4 = operator new(0x78uLL);
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  *((void *)v4 + 14) = 0LL;
  sub_2BC660((uint64_t)v4);
  *(void *)id v4 = off_483938;
  *((void *)v4 + 10) = off_483A00;
  *((void *)v4 + 13) = 0LL;
  *((void *)v4 + 14) = 0LL;
  *((void *)v4 + 12) = 0LL;
  strcpy(buf, "dlovtpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v5 = operator new(0x140uLL);
  v5[2] = 0LL;
  void *v5 = off_483A70;
  v5[1] = 0LL;
  *(void *)AudioObjectPropertyAddress buf = sub_236254((uint64_t)(v5 + 3), (uint64_t)a1, 1768845428LL, 0, 0, 59);
  *(void *)&buf[8] = v5;
  __int128 v23 = 0uLL;
  (*(void (**)(_OWORD *, _BYTE *))(*(void *)v4 + 136LL))(v4, buf);
  uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (!*((void *)&v23 + 1)) {
    goto LABEL_11;
  }
  unsigned int v9 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
  do
    unint64_t v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    (*(void (**)(void))(**((void **)&v23 + 1) + 16LL))(*((void *)&v23 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
    if (!a2) {
      goto LABEL_25;
    }
  }

  else
  {
LABEL_11:
    if (!a2) {
      goto LABEL_25;
    }
  }

  unsigned int v11 = 1;
  do
  {
    *(void *)AudioObjectPropertyAddress buf = 0x696E7074766F6C64LL;
    *(_DWORD *)&buf[8] = v11;
    if ((*(unsigned int (**)(void *, _BYTE *))(*a1 + 16LL))(a1, buf))
    {
      unint64_t v12 = operator new(0x140uLL);
      v12[2] = 0LL;
      *unint64_t v12 = off_483A70;
      v12[1] = 0LL;
      *(void *)&__int128 v23 = sub_236254((uint64_t)(v12 + 3), (uint64_t)a1, 1768845428LL, v11, 0, 59);
      *((void *)&v23 + 1) = v12;
      *(_OWORD *)AudioObjectPropertyAddress buf = v23;
      __int128 v23 = 0uLL;
      (*(void (**)(_OWORD *, _BYTE *))(*(void *)v4 + 136LL))(v4, buf);
      unsigned int v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v14 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }

      if (*((void *)&v23 + 1))
      {
        uint64_t v16 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
        do
          unint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          (*(void (**)(void))(**((void **)&v23 + 1) + 16LL))(*((void *)&v23 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
        }
      }
    }

    ++v11;
  }

  while (v11 <= a2);
LABEL_25:
  (*(void (**)(_BYTE *__return_ptr, _OWORD *))(*(void *)v4 + 144LL))(buf, v4);
  uint64_t v19 = *(void *)buf;
  uint64_t v18 = *(void *)&buf[8];
  *(void *)&__int128 v23 = buf;
  sub_A0CF0((void ***)&v23);
  if (v18 == v19)
  {
    uint64_t v20 = (os_log_s *)*(id *)sub_138E8(17);
    uint64_t v21 = v20;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1153;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d No controls created", buf, 0x12u);
    }

    (*(void (**)(_OWORD *))(*(void *)v4 + 8LL))(v4);
    return 0LL;
  }

  else
  {
    sub_1D5AE0(a1, (uint64_t)v4);
  }

  return v4;
}

void sub_3750A4(_Unwind_Exception *a1)
{
}

void sub_3751E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_483A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3751F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_483A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_375218(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_37522C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_376FA8(a1);
  operator delete(v1);
}

BOOL sub_375240(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 > 1986817376)
  {
    if (v3 > 2004053365)
    {
      if (v3 == 2021027692) {
        return 0LL;
      }
      if (v3 != 2004053366) {
        goto LABEL_36;
      }
    }

    else if (v3 != 1986817377 && v3 != 1987013741)
    {
LABEL_36:
      uint64_t v19 = (os_log_t *)sub_138E8(1);
      uint64_t v20 = *v19;
      if (*v19)
      {
        BOOL v21 = os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0LL;
        if (!v21) {
          return result;
        }
        uint64_t v23 = *(void *)a2;
        int v24 = a2[2];
        sub_613AC((uint64_t)&v25, (unsigned int *)&v23);
        if (v26 >= 0) {
          uint64_t v22 = &v25;
        }
        else {
          uint64_t v22 = *(AudioObjectPropertyAddress **)&v25.mSelector;
        }
        inAddress.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&inAddress.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
        __int16 v28 = 1024;
        int v29 = 105;
        __int16 v30 = 2080;
        uint64_t v31 = v22;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unhandled property %s.",  (uint8_t *)&inAddress,  0x1Cu);
        if (v26 < 0) {
          operator delete(*(void **)&v25.mSelector);
        }
      }

      return 0LL;
    }

    uint64_t v7 = *(void *)(a1 + 104);
    uint64_t v8 = *(void *)(a1 + 112);
    if (v7 == v8) {
      return 0LL;
    }
    for (uint64_t i = v7 + 4; ; i += 4LL)
    {
      AudioObjectID v10 = *(_DWORD *)(i - 4);
      inAddress.AudioObjectPropertySelector mSelector = 2004053366;
      *(void *)&inAddress.AudioObjectPropertyScope mScope = qword_4A8EA0;
      if (AudioObjectHasProperty(v10, &inAddress)) {
        break;
      }
      v25.AudioObjectPropertySelector mSelector = 1987013741;
      *(void *)&v25.AudioObjectPropertyScope mScope = qword_4A8EA8;
      int HasProperty = AudioObjectHasProperty(v10, &v25);
      BOOL v4 = HasProperty == 0;
      BOOL result = HasProperty != 0;
      if (!v4 || i == v8) {
        return result;
      }
    }

    return 1LL;
  }

  if (v3 <= 1986225517)
  {
    BOOL v4 = v3 == 1064725619 || v3 == 1684633187;
    if (!v4) {
      goto LABEL_36;
    }
    return 0LL;
  }

  if (v3 != 1986225518)
  {
    if (v3 != 1986229104) {
      goto LABEL_36;
    }
    return 1LL;
  }

  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 112);
  if (v13 == v14) {
    return 0LL;
  }
  uint64_t v15 = v13 + 4;
  do
  {
    AudioObjectID v16 = *(_DWORD *)(v15 - 4);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F627663656ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    int v17 = AudioObjectHasProperty(v16, &inAddress);
    BOOL v4 = v17 == 0;
    BOOL result = v17 != 0;
    BOOL v18 = !v4 || v15 == v14;
    v15 += 4LL;
  }

  while (!v18);
  return result;
}

void sub_3754F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_375508(void *a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    BOOL v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v24);
      uint64_t v22 = v27 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v29 = 1024;
      int v30 = 115;
      __int16 v31 = 2080;
      uint64_t v32 = v22;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  (uint8_t *)&buf,  0x1Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v4 = *(_DWORD *)a2;
  if (*(int *)a2 > 1986817376)
  {
    BOOL v5 = v4 == 1987013741 || v4 == 1986817377;
    if (!v5) {
      goto LABEL_17;
    }
    uint64_t v6 = a1[13];
    uint64_t v7 = a1[14];
    if (v6 != v7)
    {
      uint64_t v8 = v6 + 4;
      do
      {
        AudioObjectID v9 = *(_DWORD *)(v8 - 4);
        buf.AudioObjectPropertySelector mSelector = 2004053366;
        *(void *)&buf.AudioObjectPropertyScope mScope = qword_4A8EA0;
        BOOL result = sub_325E4(v9, &buf);
        if (result) {
          break;
        }
        BOOL v5 = v8 == v7;
        v8 += 4LL;
      }

      while (!v5);
      return result;
    }

    return 0LL;
  }

  if (v4 == 1986225518)
  {
    uint64_t v15 = a1[13];
    uint64_t v16 = a1[14];
    if (v15 == v16) {
      return 1LL;
    }
    uint64_t v17 = v15 + 4;
    do
    {
      AudioObjectID v18 = *(_DWORD *)(v17 - 4);
      strcpy((char *)&buf, "necvbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      BOOL result = sub_325E4(v18, &buf);
      BOOL v19 = !result || v17 == v16;
      v17 += 4LL;
    }

    while (!v19);
    return result;
  }

  if (v4 == 1986229104) {
    return 0LL;
  }
LABEL_17:
  unsigned int v11 = (os_log_t *)sub_138E8(1);
  unint64_t v12 = *v11;
  if (!*v11) {
    return 0LL;
  }
  BOOL v13 = os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v13)
  {
    uint64_t v24 = *a2;
    int v25 = *((_DWORD *)a2 + 2);
    sub_613AC((uint64_t)__p, (unsigned int *)&v24);
    if (v27 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
    __int16 v29 = 1024;
    int v30 = 138;
    __int16 v31 = 2080;
    uint64_t v32 = v14;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", (uint8_t *)&buf, 0x1Cu);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_37581C(uint64_t a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unint64_t v12 = (os_log_t *)sub_138E8(13);
    BOOL v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v16);
      uint64_t v14 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      BOOL v21 = "SplitterMasterVolumeControl.cpp";
      __int16 v22 = 1024;
      int v23 = 148;
      __int16 v24 = 2080;
      int v25 = v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  buf,  0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v3 = *(_DWORD *)a2;
  uint64_t result = 4LL;
  if (*(int *)a2 > 1986817376)
  {
    BOOL v5 = v3 == 1986817377;
    int v6 = 1987013741;
  }

  else
  {
    BOOL v5 = v3 == 1986225518;
    int v6 = 1986229104;
  }

  if (!v5 && v3 != v6)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(1);
    AudioObjectID v9 = *v8;
    if (!*v8) {
      return 0LL;
    }
    BOOL v10 = os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v10)
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v16);
      if (v19 >= 0) {
        unsigned int v11 = __p;
      }
      else {
        unsigned int v11 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      BOOL v21 = "SplitterMasterVolumeControl.cpp";
      __int16 v22 = 1024;
      int v23 = 165;
      __int16 v24 = 2080;
      int v25 = v11;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      return 0LL;
    }
  }

  return result;
}

void sub_375A84(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v23 = (os_log_t *)sub_138E8(13);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *a2;
      int v32 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v31);
      int v25 = v34 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v36 = 1024;
      int v37 = 175;
      __int16 v38 = 2080;
      AudioObjectID v39 = v25;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  (uint8_t *)&buf,  0x1Cu);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v12 = *a5;
  if (v12 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
  {
    char v27 = (os_log_t *)sub_138E8(13);
    __int16 v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *a2;
      int v32 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v31);
      __int16 v29 = v34 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v36 = 1024;
      int v37 = 176;
      __int16 v38 = 2080;
      AudioObjectID v39 = v29;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for property %s.",  (uint8_t *)&buf,  0x1Cu);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }

    int v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v30 = &off_4865A0;
    v30[2] = 561211770;
  }

  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 > 1986817376)
  {
    if (v13 == 1987013741 || v13 == 1986817377)
    {
      *a6 = *(_DWORD *)(a1 + 92);
      return;
    }

    goto LABEL_10;
  }

  if (v13 != 1986225518)
  {
    if (v13 == 1986229104)
    {
      *a6 = 1;
      return;
    }

void sub_375EB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    char v27 = (os_log_t *)sub_138E8(13);
    __int16 v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)inData, (unsigned int *)&v39);
      __int16 v29 = v42 >= 0 ? inData : (void **)inData[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v44 = 1024;
      int v45 = 218;
      __int16 v46 = 2080;
      char v47 = v29;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unknown property: %s.",  (uint8_t *)&buf,  0x1Cu);
      if (v42 < 0) {
        operator delete(inData[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    uint64_t v31 = (os_log_t *)sub_138E8(13);
    int v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)inData, (unsigned int *)&v39);
      uint64_t v33 = v42 >= 0 ? inData : (void **)inData[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v44 = 1024;
      int v45 = 219;
      __int16 v46 = 2080;
      char v47 = v33;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Property %s is not settable.",  (uint8_t *)&buf,  0x1Cu);
      if (v42 < 0) {
        operator delete(inData[0]);
      }
    }

    char v34 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v34 = &off_4865A0;
    v34[2] = 1970171760;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) != a5)
  {
    uint64_t v35 = (os_log_t *)sub_138E8(13);
    __int16 v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)inData, (unsigned int *)&v39);
      int v37 = v42 >= 0 ? inData : (void **)inData[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v44 = 1024;
      int v45 = 220;
      __int16 v46 = 2080;
      char v47 = v37;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for property %s.",  (uint8_t *)&buf,  0x1Cu);
      if (v42 < 0) {
        operator delete(inData[0]);
      }
    }

    __int16 v38 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v38 = &off_4865A0;
    v38[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 1987013741 || *(_DWORD *)a2 == 1986817377)
  {
    float v12 = *a6;
    *(float *)int inData = *a6;
    int v13 = (os_log_t *)sub_138E8(1);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v44 = 1024;
      int v45 = 228;
      __int16 v46 = 2048;
      char v47 = (void **)a1;
      __int16 v48 = 2048;
      double v49 = v12;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Request to set master volume (%p) %f",  (uint8_t *)&buf,  0x26u);
    }

    if (vabds_f32(*(float *)(a1 + 92), v12) >= 0.001)
    {
      uint64_t v15 = *(AudioObjectID **)(a1 + 104);
      for (uint64_t i = *(AudioObjectID **)(a1 + 112); v15 != i; ++v15)
      {
        AudioObjectID v17 = *v15;
        buf.AudioObjectPropertySelector mSelector = 2004053366;
        *(void *)&buf.AudioObjectPropertyScope mScope = qword_4A8EA0;
        OSStatus v18 = AudioObjectSetPropertyData(v17, &buf, 0, 0LL, 4u, inData);
        if (v18)
        {
          char v26 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v26 = &off_4865A0;
          v26[2] = v18;
        }

        *(_DWORD *)(a1 + 92) = inData[0];
        unint64_t v19 = (os_log_t *)sub_138E8(1);
        uint64_t v20 = *v19;
        if (*v19)
        {
          if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
          {
            double v21 = *(float *)(a1 + 92);
            AudioObjectID v22 = *v15;
            buf.AudioObjectPropertySelector mSelector = 136316162;
            *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
            __int16 v44 = 1024;
            int v45 = 237;
            __int16 v46 = 2048;
            char v47 = (void **)a1;
            __int16 v48 = 2048;
            double v49 = v21;
            __int16 v50 = 1024;
            AudioObjectID v51 = v22;
            _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applied master volume (%p) %f to %u",  (uint8_t *)&buf,  0x2Cu);
          }
        }
      }
    }
  }

  else
  {
    int v23 = (os_log_t *)sub_138E8(1);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)inData, (unsigned int *)&v39);
      int v25 = v42 >= 0 ? inData : (void **)inData[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v44 = 1024;
      int v45 = 248;
      __int16 v46 = 2080;
      char v47 = v25;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", (uint8_t *)&buf, 0x1Cu);
      if (v42 < 0) {
        operator delete(inData[0]);
      }
    }
  }

void sub_37650C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3765DC(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    char v26 = (os_log_t *)sub_138E8(13);
    char v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v35 = 1024;
      *(_DWORD *)__int16 v36 = 291;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (*a2 != 1987013741) {
    return 1LL;
  }
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6277736D76LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
  *(_DWORD *)&buf[8] = a2[2];
  *(void *)&void v36[2] = a3;
  *(void *)&v36[10] = a4;
  sub_1885D4(a1 + 16, &inAddress.mSelector, (unsigned int *)buf);
  uint64_t v8 = (AudioObjectID *)a1[13];
  AudioObjectID v9 = (AudioObjectID *)a1[14];
  if (v8 == v9) {
    return 1LL;
  }
  BOOL v10 = "SplitterMasterVolumeControl.cpp";
  do
  {
    uint64_t v11 = AudioObjectAddPropertyListener(*v8, &inAddress, (AudioObjectPropertyListenerProc)sub_3770CC, a1);
    BOOL v12 = (_DWORD)v11 == 0;
    if ((_DWORD)v11)
    {
      int v13 = (os_log_t *)sub_138E8(18);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v31, v11);
          uint64_t v15 = v10;
          int v16 = v32;
          AudioObjectID v17 = (void **)v31[0];
          AudioObjectID v18 = *v8;
          sub_2CA1C(__p, 2004053366LL);
          if (v16 >= 0) {
            unint64_t v19 = v31;
          }
          else {
            unint64_t v19 = v17;
          }
          uint64_t v20 = __p;
          if (v30 < 0) {
            uint64_t v20 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          BOOL v10 = v15;
          *(void *)&uint8_t buf[4] = v15;
          __int16 v35 = 1024;
          *(_DWORD *)__int16 v36 = 316;
          *(_WORD *)&v36[4] = 2080;
          *(void *)&v36[6] = v19;
          *(_WORD *)&v36[14] = 1024;
          *(_DWORD *)&v36[16] = v18;
          __int16 v37 = 2080;
          __int16 v38 = v20;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AddPropertyListener() failed with status '%s'. device: %u; selector: '%s'.",
            buf,
            0x2Cu);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
          if (v32 < 0) {
            operator delete(v31[0]);
          }
        }
      }
    }

    double v21 = (os_log_t *)sub_138E8(18);
    AudioObjectID v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v23 = *v8;
      sub_2CA1C(v31, 2004053366LL);
      if (v32 >= 0) {
        __int16 v24 = v31;
      }
      else {
        __int16 v24 = (void **)v31[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v35 = 1024;
      *(_DWORD *)__int16 v36 = 322;
      *(_WORD *)&v36[4] = 2048;
      *(void *)&v36[6] = a1;
      *(_WORD *)&v36[14] = 1024;
      *(_DWORD *)&v36[16] = v23;
      __int16 v37 = 2080;
      __int16 v38 = v24;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %p AddPropertyListener() succeeded. device: %u; selector: '%s'.",
        buf,
        0x2Cu);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }

    ++v8;
  }

  while (v8 != v9);
  return v12;
}

void sub_37695C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_376980(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((((uint64_t (*)(uint64_t **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v22 = 1024;
      *(_DWORD *)AudioObjectID v23 = 339;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (*(_DWORD *)a2 == 1987013741)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6277736D76LL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 8);
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_18803C(a1 + 16, &inAddress.mSelector, (unsigned int *)buf);
    uint64_t v8 = (AudioObjectID *)a1[13];
    for (uint64_t i = (AudioObjectID *)a1[14]; v8 != i; ++v8)
    {
      AudioObjectRemovePropertyListener(*v8, &inAddress, (AudioObjectPropertyListenerProc)sub_3770CC, a1);
      BOOL v10 = (os_log_t *)sub_138E8(18);
      uint64_t v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectID v12 = *v8;
        sub_2CA1C(__p, 2004053366LL);
        int v13 = __p;
        if (v19 < 0) {
          int v13 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
        __int16 v22 = 1024;
        *(_DWORD *)AudioObjectID v23 = 357;
        *(_WORD *)&v23[4] = 2048;
        *(void *)&v23[6] = a1;
        *(_WORD *)&v23[14] = 1024;
        *(_DWORD *)&v23[16] = v12;
        __int16 v24 = 2080;
        int v25 = v13;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %p RemovePropertyListener() succeeded. device: %u; selector: '%s'.",
          buf,
          0x2Cu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 1LL;
}

void sub_376C08()
{
  __int128 v0 = (os_log_t *)sub_138E8(1);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315394;
      int v3 = "SplitterMasterVolumeControl.cpp";
      __int16 v4 = 1024;
      int v5 = 264;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Request to reconfigure master volume control",  (uint8_t *)&v2,  0x12u);
    }
  }

void sub_376CC0()
{
  __int128 v0 = (os_log_t *)sub_138E8(1);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315394;
      int v3 = "SplitterMasterVolumeControl.cpp";
      __int16 v4 = 1024;
      int v5 = 271;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Request to reconfigure master volume control",  (uint8_t *)&v2,  0x12u);
    }
  }

double sub_376D78()
{
  return 0.0;
}

double sub_376D84()
{
  return 0.0;
}

std::string *sub_376D90@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_7D084(&v11, __str);
  __int16 v4 = std::string::insert(&v11, 0LL, "addr: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  int v6 = std::string::append(&v12, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::condition_variable __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_376EE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_376F50(uint64_t result)
{
  *(_BYTE *)(result + 96) = 1;
  return result;
}

uint64_t sub_376F5C(uint64_t result)
{
  *(_BYTE *)(result + 96) = 0;
  return result;
}

uint64_t sub_376F64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_376F6C(uint64_t a1)
{
  return sub_376FA8(a1 - 80);
}

void sub_376F74(uint64_t a1)
{
  uint64_t v1 = (void *)sub_376FA8(a1 - 80);
  operator delete(v1);
}

uint64_t sub_376F8C(uint64_t result)
{
  *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t sub_376F98(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t sub_376FA0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_376FA8(uint64_t a1)
{
  *(void *)a1 = off_483AA8;
  *(void *)(a1 + 80) = off_483B78;
  int v2 = (os_log_t *)sub_138E8(1);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315650;
    __int128 v7 = "SplitterMasterVolumeControl.cpp";
    __int16 v8 = 1024;
    int v9 = 70;
    __int16 v10 = 2048;
    uint64_t v11 = a1;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Destroyed master volume (%p)", (uint8_t *)&v6, 0x1Cu);
  }

  sub_67FE8(a1 + 216);
  *(void *)(a1 + 128) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 152));
  __int16 v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(void *)(a1 + 112) = v4;
    operator delete(v4);
  }

  sub_F3008(a1);
  return a1;
}

void sub_3770BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_3770CC(int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    double v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v33 = 1024;
      int v34 = 393;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inNumberAddresses is 0.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }

  if (!a4)
  {
    AudioObjectID v23 = (os_log_t *)sub_138E8(13);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v33 = 1024;
      int v34 = 394;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: inClientData is NULL.",  buf,  0x12u);
    }

    int v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "inClientData is NULL.");
  }

  if (!a3)
  {
    char v26 = (os_log_t *)sub_138E8(13);
    char v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v33 = 1024;
      int v34 = 395;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: inAddresses is NULL.",  buf,  0x12u);
    }

    uint64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "inAddresses is NULL.");
  }

  uint64_t v6 = 0LL;
  uint64_t v7 = a2;
  do
  {
    uint64_t v8 = sub_138E8(17);
    uint64_t v9 = sub_138E8(28);
    char v10 = 0;
    uint64_t v11 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v14 & 1) != 0) {
        goto LABEL_11;
      }
    }

    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_11:
    uint64_t v15 = *(os_log_s **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, *(unsigned int *)(a3 + 12 * v6));
      int v16 = __p;
      if (v31 < 0) {
        int v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v33 = 1024;
      int v34 = 401;
      __int16 v35 = 2080;
      __int16 v36 = v16;
      __int16 v37 = 1024;
      int v38 = a1;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Received notification (%s) from audio device with ID %u",  buf,  0x22u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    if (*(_DWORD *)(a3 + 12 * v6 + 4) == (_DWORD)qword_4A8EA0
      && *(_DWORD *)(a3 + 12 * v6) == 2004053366
      && *(_DWORD *)(a3 + 12 * v6 + 8) == HIDWORD(qword_4A8EA0))
    {
      AudioObjectID v17 = (dispatch_queue_s *)sub_869B4();
      AudioObjectID v18 = operator new(0x10uLL);
      *(void *)AudioObjectID v18 = a4;
      v18[2] = a1;
      dispatch_async_f(v17, v18, (dispatch_function_t)sub_377520);
    }

    ++v6;
  }

  while (v6 != v7);
  return 0LL;
}

void sub_3774EC(_Unwind_Exception *a1)
{
}

void sub_377520(_DWORD *__p)
{
  uint64_t v2 = *(void *)__p;
  int v3 = *(unsigned int **)(*(void *)__p + 104LL);
  for (uint64_t i = *(unsigned int **)(*(void *)__p + 112LL); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (*v3 == __p[2])
    {
      unsigned int v18 = *v3;
      buf.AudioObjectPropertySelector mSelector = 2004053366;
      *(void *)&buf.AudioObjectPropertyScope mScope = qword_4A8EA0;
      unint64_t v6 = sub_1B99A8(&v18, &buf, 0, 0LL);
      *((void *)&v9 + 1) = v7;
      *(void *)&__int128 v9 = v6;
      uint64_t v8 = v9 >> 32;
      if ((v8 & 0xFF00000000LL) != 0)
      {
        uint64_t v10 = sub_138E8(17);
        uint64_t v11 = sub_138E8(28);
        char v12 = 0;
        uint64_t v13 = 0LL;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
        uint64_t v14 = *(void *)(v10 + 8);
        while (1)
        {
          uint64_t v15 = *((int *)&buf.mSelector + v13);
          char v16 = v12;
          if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
            break;
          }
          char v12 = 1;
          uint64_t v13 = 1LL;
          if ((v16 & 1) != 0) {
            goto LABEL_10;
          }
        }

        if ((v14 & v15) == 0) {
          uint64_t v10 = v11;
        }
LABEL_10:
        AudioObjectID v17 = *(os_log_s **)v10;
        if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          buf.AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
          __int16 v21 = 1024;
          int v22 = 380;
          __int16 v23 = 2048;
          uint64_t v24 = v2;
          __int16 v25 = 2048;
          double v26 = *(float *)&v8;
          __int16 v27 = 1024;
          unsigned int v28 = v5;
          _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Master volume (%p) updated to %f for device %u",  (uint8_t *)&buf,  0x2Cu);
        }

        *(_DWORD *)(v2 + 92) = v8;
        unsigned int v18 = 2004053366;
        uint64_t v19 = qword_4A8EA0;
        sub_67564((void *)(v2 + 128), &v18);
      }
    }
  }

  operator delete(__p);
}

void sub_377728( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    __int16 v21 = __cxa_begin_catch(a1);
    int v22 = (os_log_t *)sub_138E8(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = a9;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v24;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      __int16 v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      double v26 = v23;
      uint32_t v27 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }

  else
  {
    unsigned int v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v29 = v28;
      char v30 = (os_log_t *)sub_138E8(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16LL))(v29);
        LODWORD(buf) = a9;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v32;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        __int16 v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        double v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      __int16 v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        __int16 v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        double v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x3776E0LL);
}

uint64_t sub_377968(uint64_t a1)
{
  return a1;
}

void sub_377990(uint64_t *a1)
{
}

void sub_3779B8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      int v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        __int16 v4 = std::__shared_weak_count::lock(v3);
        uint64_t v14 = v4;
        if (v4)
        {
          unsigned int v5 = v4;
          uint64_t v6 = v2[2];
          uint64_t v13 = v6;
          if (v6)
          {
            int v11 = 0;
            int v12 = 1;
            uint64_t v7 = *(void *)(v6 + 192);
            uint64_t v10 = 0x696E7074696E6A45LL;
            sub_38A8E8(v7, (uint64_t)&v10, 4LL, (uint64_t)&v12);
          }

          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            unint64_t v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }

      uint64_t v2 = (void *)v2[1];
    }

    while (v2 != v1);
  }

void sub_377A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_377A94(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      int v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        __int16 v4 = std::__shared_weak_count::lock(v3);
        v11[2] = v4;
        if (v4)
        {
          unsigned int v5 = v4;
          uint64_t v6 = v2[2];
          v11[1] = v6;
          if (v6)
          {
            v11[0] = 0LL;
            uint64_t v7 = *(void *)(v6 + 192);
            uint64_t v10 = 0x696E7074696E6A45LL;
            sub_38A8E8(v7, (uint64_t)&v10, 4LL, (uint64_t)v11 + 4);
          }

          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            unint64_t v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }

      uint64_t v2 = (void *)v2[1];
    }

    while (v2 != v1);
  }

void sub_377B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_377B6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_483C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_377B7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_483C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_377B9C(uint64_t a1)
{
}

uint64_t sub_377BA8(uint64_t a1)
{
  *(void *)a1 = off_4735F0;
  return sub_F3008(a1);
}

void sub_377BB8(void *a1)
{
  *a1 = off_4735F0;
  uint64_t v1 = (void *)sub_F3008((uint64_t)a1);
  operator delete(v1);
}

void sub_377BDC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_3781A4(a1);
  operator delete(v1);
}

pthread_t sub_377BF0(uint64_t a1)
{
  uint64_t v2 = pthread_self();
  int v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (!pthread_equal(v2, v3))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "CAGuard.cpp";
      __int16 v10 = 1024;
      int v11 = 88;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAGuard::Wait: A thread has to have locked a guard before it can wait",  (uint8_t *)&v8,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1;
LABEL_10:
  }

  atomic_store(0LL, (unint64_t *)(a1 + 16));
  int v4 = pthread_cond_wait((pthread_cond_t *)(a1 + 88), (pthread_mutex_t *)(a1 + 24));
  if (v4)
  {
    int v7 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "CAGuard.cpp";
      __int16 v10 = 1024;
      int v11 = 97;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAGuard::Wait: Could not wait for a signal",  (uint8_t *)&v8,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v7;
    goto LABEL_10;
  }

  pthread_t result = pthread_self();
  atomic_store((unint64_t)result, (unint64_t *)(a1 + 16));
  return result;
}

BOOL sub_377D8C(uint64_t a1, unint64_t a2)
{
  int v4 = pthread_self();
  unsigned int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (!pthread_equal(v4, v5))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "CAGuard.cpp";
      __int16 v15 = 1024;
      int v16 = 130;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAGuard::WaitFor: A thread has to have locked a guard be for it can wait",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1;
LABEL_14:
  }

  if (a2 <= 0x3B9AC9FF)
  {
    __darwin_time_t v6 = 0LL;
  }

  else
  {
    __darwin_time_t v6 = a2 / 0x3B9ACA00;
    a2 %= 0x3B9ACA00uLL;
  }

  v12.tv_sec = v6;
  v12.tv_nsec = a2;
  int v7 = (unint64_t *)(a1 + 16);
  atomic_store(0LL, (unint64_t *)(a1 + 16));
  int v8 = pthread_cond_timedwait_relative_np((pthread_cond_t *)(a1 + 88), (pthread_mutex_t *)(a1 + 24), &v12);
  int v9 = v8;
  if (v8 && v8 != 60)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "CAGuard.cpp";
      __int16 v15 = 1024;
      int v16 = 169;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAGuard::WaitFor: Wait got an error",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v9;
    goto LABEL_14;
  }

  atomic_store((unint64_t)pthread_self(), v7);
  return v9 == 60;
}

uint64_t sub_377F70(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = mach_absolute_time();
  unint64_t v5 = __udivti3(125 * v4, (v4 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
  if (a2 <= v5) {
    return 1LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 64LL))(a1, a2 - v5);
  }
}

uint64_t sub_377FD4(uint64_t a1)
{
  uint64_t result = pthread_cond_signal((pthread_cond_t *)(a1 + 88));
  if ((_DWORD)result)
  {
    int v3 = result;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v5 = "CAGuard.cpp";
      __int16 v6 = 1024;
      int v7 = 302;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAGuard::Notify: failed",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v3;
  }

  return result;
}

uint64_t sub_3780BC(uint64_t a1)
{
  uint64_t result = pthread_cond_broadcast((pthread_cond_t *)(a1 + 88));
  if ((_DWORD)result)
  {
    int v3 = result;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v5 = "CAGuard.cpp";
      __int16 v6 = 1024;
      int v7 = 320;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAGuard::NotifyAll: failed",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v3;
  }

  return result;
}

uint64_t sub_3781A4(uint64_t a1)
{
  *(void *)a1 = off_483CF8;
  pthread_cond_destroy((pthread_cond_t *)(a1 + 88));
  *(void *)a1 = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
  return a1;
}

uint64_t sub_3781F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_B1F7C(a1, a2);
  *(void *)uint64_t v3 = off_483CF8;
  int v4 = pthread_cond_init((pthread_cond_t *)(v3 + 88), 0LL);
  if (v4)
  {
    int v6 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "CAGuard.cpp";
      __int16 v10 = 1024;
      int v11 = 66;
      _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  CAGuard::CAGuard: Could not init the cond var",  (uint8_t *)&v8,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v6;
  }

  return a1;
}

void sub_3782F8(_Unwind_Exception *a1)
{
}

void sub_378310(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_378324(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1684370275)
  {
    if (mSelector == 1651664739) {
      return 1LL;
    }
    if (mSelector != 1684365924) {
      goto LABEL_9;
    }
LABEL_8:
    AudioObjectPropertyScope mScope = a2->mScope;
    v8[0] = 1634689389;
    v8[1] = mScope;
    v8[2] = 0;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, v8);
  }

  if (mSelector == 1684370276) {
    goto LABEL_8;
  }
  if (mSelector == 1885631346)
  {
    BOOL v5 = sub_379B08() == 0;
    return !v5;
  }

uint64_t sub_378400(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1684370275)
  {
    if (mSelector != 1684370276)
    {
      if (mSelector == 1885631346) {
        return sub_379B08() != 0;
      }
      return sub_36854C(a1, a2);
    }

uint64_t sub_3784B8(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      timespec v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      os_log_t v23 = "Device_AOP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 161;
      __int16 v26 = 2080;
      uint32_t v27 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      if (v21 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      os_log_t v23 = "Device_AOP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 162;
      __int16 v26 = 2080;
      uint32_t v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      os_log_t v31 = a4;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    AudioObjectID v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectID v17 = &off_4865A0;
    v17[2] = 561211770;
  }

  uint64_t result = 0LL;
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1684370275)
  {
    if (mSelector != 1684370276)
    {
      if (mSelector != 1885631346) {
        return sub_21524(a1, a2, a3, a4);
      }
      return 8LL;
    }
  }

  else if (mSelector != 1651664739 && mSelector != 1684365924)
  {
    return sub_21524(a1, a2, a3, a4);
  }

  return result;
}

void sub_3787D8( uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1684370275)
  {
    if (mSelector == 1651664739)
    {
      *a5 = 4;
      int v16 = *(unsigned __int8 *)(a1 + 508);
LABEL_16:
      *(_DWORD *)a6 = v16;
      return;
    }

    if (mSelector == 1684365924)
    {
      *a5 = 4;
      BOOL v13 = *(_DWORD *)(a1 + 504) == 2;
      goto LABEL_13;
    }

    goto LABEL_10;
  }

  if (mSelector == 1684370276)
  {
    *a5 = 4;
    BOOL v13 = *(_DWORD *)(a1 + 504) == 1;
LABEL_13:
    int v16 = v13;
    goto LABEL_16;
  }

  if (mSelector != 1885631346)
  {
LABEL_10:
    sub_232A4(a1, a2, a3, a4, a5, a6);
    return;
  }

  UInt32 v14 = *a5;
  if (v14 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
  {
    AudioObjectID v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      int v19 = v28;
      uint64_t v20 = (void **)__p[0];
      UInt32 v21 = *a5;
      int v22 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
      os_log_t v23 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      if (v19 < 0) {
        os_log_t v23 = v20;
      }
      __int16 v30 = 1024;
      int v31 = 192;
      __int16 v32 = 2080;
      __int16 v33 = v23;
      __int16 v34 = 1024;
      UInt32 v35 = v21;
      __int16 v36 = 1024;
      int v37 = v22;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  uint64_t v15 = sub_379B08();
  if (v15)
  {
    strcpy(buf, "trsnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, _BYTE *, uint64_t, const void *, UInt32 *, float *))(*(void *)v15 + 40LL))( v15,  buf,  a3,  a4,  a5,  a6);
  }

void sub_378AB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_378AD8( uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 a5, double *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v31 = (os_log_t *)sub_138E8(13);
    __int16 v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v60 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v60);
      __int16 v33 = v63 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      __int16 v65 = 1024;
      int v66 = 225;
      __int16 v67 = 2080;
      uint64_t v68 = (const char *)v33;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    UInt32 v35 = (os_log_t *)sub_138E8(13);
    __int16 v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v60 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v60);
      int v37 = v63 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      __int16 v65 = 1024;
      int v66 = 226;
      __int16 v67 = 2080;
      uint64_t v68 = (const char *)v37;
      __int16 v69 = 1024;
      LODWORD(v70[0]) = a3;
      WORD2(v70[0]) = 2048;
      *(void *)((char *)v70 + 6) = a4;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
    }

    int v38 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v38 = &off_4865A0;
    v38[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v39 = (os_log_t *)sub_138E8(13);
    int v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v60 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v60);
      id v41 = v63 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      __int16 v65 = 1024;
      int v66 = 227;
      __int16 v67 = 2080;
      uint64_t v68 = "inData";
      __int16 v69 = 2080;
      v70[0] = v41;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
    }

    char v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v42 = &off_4865A0;
    v42[2] = 561211770;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1684370275)
  {
    switch(mSelector)
    {
      case 0x616F656Du:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != a5)
        {
          id v43 = (os_log_t *)sub_138E8(13);
          __int16 v44 = *v43;
          if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
          {
            uint64_t v60 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)__p, (unsigned int *)&v60);
            int v45 = v63;
            __int16 v46 = (void **)__p[0];
            int v47 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            __int16 v48 = __p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
            if (v45 < 0) {
              __int16 v48 = v46;
            }
            __int16 v65 = 1024;
            int v66 = 244;
            __int16 v67 = 2080;
            uint64_t v68 = (const char *)v48;
            __int16 v69 = 1024;
            LODWORD(v70[0]) = a5;
            WORD2(v70[0]) = 1024;
            *(_DWORD *)((char *)v70 + 6) = v47;
            _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v63 < 0) {
              operator delete(__p[0]);
            }
          }

          double v49 = __cxa_allocate_exception(0x10uLL);
          *(void *)double v49 = &off_4865A0;
          v49[2] = 561211770;
        }

        int v18 = sub_379B90(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
        if (v18)
        {
          int v19 = v18;
          uint64_t v20 = (os_log_t *)sub_138E8(17);
          UInt32 v21 = *v20;
          if (*v20)
          {
            if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
              __int16 v65 = 1024;
              int v66 = 246;
              __int16 v67 = 1024;
              LODWORD(v68) = v19;
              _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d setting kAOPAudio_DriverEnabledChannelMask",  buf,  0x18u);
            }
          }
        }

        return;
      case 0x62726763u:
        int v25 = *(unsigned __int8 *)a6;
        if (*(unsigned __int8 *)(a1 + 508) != v25)
        {
          *(_BYTE *)(a1 + 508) = v25;
          if (*(_DWORD *)(a1 + 504) == 2)
          {
            uint64_t v26 = *(void *)(a1 + 496);
            BOOL v27 = v25 == 0;
            uint64_t v28 = 112LL;
            if (v27)
            {
              uint64_t v28 = 136LL;
              uint64_t v15 = v26 + 136;
            }

            else
            {
              uint64_t v15 = v26 + 112;
            }

            if (*(void *)(v26 + v28) != *(void *)(v15 + 8)) {
              goto LABEL_29;
            }
          }
        }

        return;
      case 0x64656264u:
        if (*(_DWORD *)(a1 + 504) != 2)
        {
          uint64_t v13 = *(void *)(a1 + 496);
          uint64_t v14 = 112LL;
          if (*(_BYTE *)(a1 + 508))
          {
            uint64_t v15 = v13 + 112;
          }

          else
          {
            uint64_t v14 = 136LL;
            uint64_t v15 = v13 + 136;
          }

          if (*(void *)(v13 + v14) != *(void *)(v15 + 8))
          {
            int v16 = 2;
LABEL_28:
            *(_DWORD *)(a1 + 504) = v16;
LABEL_29:
            sub_37A4F4(v15);
            return;
          }
        }

        return;
    }

void sub_379454( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37947C(double a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(17);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315650;
    uint64_t v13 = "Device_AOP_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 372;
    __int16 v16 = 2048;
    double v17 = a1;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_INFO,  "%25s:%-5d Requested to set sample rate synchronously for AOP Device %f",  (uint8_t *)&v12,  0x1Cu);
  }

  double v4 = fabs(a1);
  if (v4 < 16000.0) {
    double v4 = 16000.0;
  }
  if (v4 >= 1.0) {
    double v5 = v4 * 2.22044605e-16;
  }
  else {
    double v5 = 2.22044605e-16;
  }
  if (fabs(a1 + -16000.0) > v5)
  {
    int v9 = (os_log_t *)sub_138E8(13);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "Device_AOP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 378;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v12,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v6 = (os_log_t *)sub_138E8(17);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315394;
    uint64_t v13 = "Device_AOP_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 379;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "%25s:%-5d Ignoring sample rate change for AOP Device because it is fixed at 16k and is not settable",  (uint8_t *)&v12,  0x12u);
  }

  return 0LL;
}

void sub_3796A0(_Unwind_Exception *a1)
{
}

uint64_t sub_3796BC(os_unfair_lock_s *a1)
{
  uint64_t v2 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v2, 0);
  sub_1D5AE0(a1, (uint64_t)v2);
  uint64_t v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D55D4((uint64_t *)a1, 0, 1886216809LL, (uint64_t)v3);
  sub_1D580C((uint64_t)a1, 0, 1886216809LL, (uint64_t)v2);
  sub_373CEC((uint64_t *)a1, &qword_4A8F50, 0);
  uint64_t v4 = sub_546E0();
  double v5 = operator new(4uLL);
  std::condition_variable __p = v5;
  _DWORD *v5 = 1886216809;
  int v11 = v5 + 1;
  int v12 = v5 + 1;
  strcpy(v13, "cwdv");
  v13[8] = 0;
  int v14 = 3;
  v16[0] = 0LL;
  v16[1] = 0LL;
  int v15 = v16;
  int v17 = 44739242;
  CFTypeRef cf = 0LL;
  v20[0] = &off_475D78;
  UInt32 v21 = v20;
  sub_FF3FC(v19, v4, (unsigned int **)&__p, (uint64_t)v20);
  int v6 = v21;
  if (v21 == v20)
  {
    uint64_t v7 = 4LL;
    int v6 = v20;
  }

  else
  {
    if (!v21) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v16[0]);
  if (__p)
  {
    int v11 = __p;
    operator delete(__p);
  }

  if (v19[2])
  {
    uint64_t v8 = sub_546E0();
    sub_1014AC(v8, 0x70707570u, (uint64_t *)(v19[1] + 16), 0);
  }

  sub_85B80(v19);
  return 1LL;
}

void sub_3798A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37991C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1819306350)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      double v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_AOP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 304;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    int v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_AOP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 305;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_379AC8(_Unwind_Exception *a1)
{
}

uint64_t sub_379AE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 496);
  uint64_t v2 = *(unsigned int **)(v1 + 160);
  else {
    return *v2;
  }
}

uint64_t sub_379B08()
{
  if ((sub_1CC090() & 1) != 0) {
    return 0LL;
  }
  uint64_t v1 = (void *)sub_EAD14();
  CFStringRef v3 = CFStringCreateWithCString(0LL, "Codec", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_EAE28(v1, &v3);
  sub_19DFC((uint64_t)&v3);
  return v0;
}

void sub_379B7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_379B90(AudioObjectID a1, uint64_t a2, UInt32 a3, const void *a4, _DWORD *a5)
{
  uint64_t v10 = sub_138E8(13);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
  {
    char v11 = *(os_log_s **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v73, (unsigned int *)&__p);
        int v12 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 166;
        __int16 v65 = 2080;
        *(void *)int v66 = v12;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v57 = a1;
  uint64_t v58 = *(void *)a2;
  int v59 = *(_DWORD *)(a2 + 8);
  UInt32 v60 = a3;
  __int128 v61 = a4;
  unint64_t v13 = sub_37A69C((uint64_t)&v57);
  if (HIDWORD(v13)) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = *a5 == (_DWORD)v13;
  }
  int v15 = v14;
  uint64_t v16 = sub_138E8(13);
  uint64_t v17 = *(void *)(v16 + 8);
  if (v15)
  {
    if ((v17 & 1) == 0) {
      return 0LL;
    }
    int v18 = *(os_log_s **)v16;
    if (!*(void *)v16 || !os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v63 = 1024;
    int v64 = 191;
    __int16 v65 = 1024;
    *(_DWORD *)int v66 = a1;
LABEL_20:
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a no tification on id %u.",  (uint8_t *)&buf,  0x18u);
    return 0LL;
  }

  if ((v17 & 1) != 0)
  {
    int v19 = *(os_log_s **)v16;
    if (*(void *)v16)
    {
      if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v73, (unsigned int *)&__p);
        uint64_t v20 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 199;
        __int16 v65 = 2080;
        *(void *)int v66 = v20;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v21 = AudioObjectSetPropertyData(a1, &buf, a3, a4, 4u, a5);
  if (!(_DWORD)v21)
  {
    unint64_t v28 = sub_37A69C((uint64_t)&v57);
    if (!HIDWORD(v28) && *a5 == (_DWORD)v28)
    {
      uint64_t v29 = sub_138E8(13);
      if ((*(_BYTE *)(v29 + 8) & 1) == 0) {
        return 0LL;
      }
      int v18 = *(os_log_s **)v29;
      if (!*(void *)v29 || !os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v63 = 1024;
      int v64 = 219;
      __int16 v65 = 1024;
      *(_DWORD *)int v66 = a1;
      goto LABEL_20;
    }

    memset(v73.__m_.__opaque, 0, sizeof(v73.__m_.__opaque));
    v73.__m_.__uint64_t sig = 850045863LL;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795LL;
    char v56 = 0;
    sub_7D684(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v73, (uint64_t)&v56);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v34.__d_.__rep_) / -1000)
    {
      unint64_t v32 = sub_37A69C((uint64_t)&v57);
      int v33 = v32;
      uint64_t v21 = HIDWORD(v32);
      if (HIDWORD(v32)) {
        goto LABEL_95;
      }
      if (*a5 == (_DWORD)v32) {
        break;
      }
      if (i <= 0)
      {
        __int16 v46 = (os_log_t *)sub_138E8(13);
        uint64_t v21 = 2003329396LL;
        int v47 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = *(void *)a2;
          int v51 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v50);
          __int16 v48 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v49 = *a5 == v33;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v63 = 1024;
          int v64 = 248;
          __int16 v65 = 2080;
          *(void *)int v66 = "set";
          *(_WORD *)&v66[8] = 2080;
          *(void *)&v66[10] = v48;
          *(_WORD *)&v66[18] = 2080;
          *(void *)&v66[20] = "set";
          *(_WORD *)&v66[28] = 1024;
          BOOL v67 = v49;
          __int16 v68 = 1024;
          int v69 = 0;
          __int16 v70 = 1024;
          AudioObjectID v71 = a1;
          _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }

void sub_37A474( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

void sub_37A4F4(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    double v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 319;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): No datasources found in the transducer database!",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  uint64_t v2 = sub_379B08();
  uint64_t v8 = 0x696E707450444573LL;
  int v9 = 0;
  if (v2)
  {
    uint64_t v3 = v2;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v8))
    {
      memset(buf, 0, sizeof(buf));
      sub_7A5B8(buf, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
      char v4 = *(void **)buf;
      (*(void (**)(uint64_t, uint64_t *, void, void, void, void))(*(void *)v3 + 48LL))( v3,  &v8,  0LL,  0LL,  (*(_DWORD *)&buf[8] - *(_DWORD *)buf) & 0xFFFFFFFC,  *(void *)buf);
      if (v4) {
        operator delete(v4);
      }
    }
  }

void sub_37A67C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_37A69C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_36EF4((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        char v11 = v20;
        if (v9 < 0) {
          char v11 = v10;
        }
        if (v19 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        unint64_t v28 = v11;
        __int16 v29 = 2080;
        int v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_37A844(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37A864(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_36E3FC(a1, a2, a3, a3, 0LL) = &off_483D68;
  *(void *)(a1 + 496) = sub_33341C();
  *(_DWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 508) = 0;
  return a1;
}

void sub_37A8AC(_Unwind_Exception *a1)
{
}

void sub_37A8C4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_37A8D8(os_unfair_lock_s *a1)
{
  int v2 = operator new(0x128uLL);
  sub_236254((uint64_t)v2, (uint64_t)a1, 1768845428LL, 0, 0, 51);
  sub_1D5AE0(a1, (uint64_t)v2);
  sub_1D580C((uint64_t)a1, 0, 1885891433LL, (uint64_t)v2);
  UInt32 v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D55D4((uint64_t *)a1, 0, 1885891433LL, (uint64_t)v3);
  memset(&v120, 0, 24);
  unint64_t v4 = (__CFString *)CFStringCreateWithCString(0LL, "Hawking Input", 0x600u);
  uint64_t v89 = v4;
  LOBYTE(v90) = 1;
  *(void *)AudioObjectPropertyAddress buf = v4;
  buf[8] = 1;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)&buf[16] = 0LL;
  uint8_t buf[24] = 1;
  *(void *)&buf[32] = 0LL;
  _BYTE buf[40] = 1;
  std::condition_variable __p = 0LL;
  uint64_t v94 = 0LL;
  uint64_t v95 = 0LL;
  char v5 = operator new(0x228uLL);
  v5[1] = 0LL;
  v5[2] = 0LL;
  void *v5 = off_485B80;
  *(void *)&__int128 v111 = CFStringCreateWithCString(0LL, "Hawking Input", 0x600u);
  BYTE8(v111) = 1;
  sub_7D084(&v121, "");
  sub_F9638( (uint64_t)(v5 + 3),  &qword_4A8FF8,  (uint64_t)a1,  (uint64_t)&v120,  (uint64_t)buf,  (uint64_t)&v111,  (char **)&__p,  (__int128 *)&v121.__m_.__sig);
  _DWORD v5[3] = &off_46FD40;
  *((_WORD *)v5 + 272) = 0;
  if (v121.__m_.__opaque[15] < 0) {
    operator delete((void *)v121.__m_.__sig);
  }
  sub_19DFC((uint64_t)&v111);
  v103[0] = v5 + 3;
  v103[1] = v5;
  sub_AFDAC((uint64_t)v103, v5 + 13, (uint64_t)(v5 + 3));
  __int128 v73 = *(_OWORD *)v103;
  v103[0] = 0LL;
  v103[1] = 0LL;
  sub_3711D4((uint64_t)a1, (void ***)&v73);
  char v6 = (std::__shared_weak_count *)*((void *)&v73 + 1);
  if (*((void *)&v73 + 1))
  {
    uint64_t v7 = (unint64_t *)(*((void *)&v73 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  int v9 = (std::__shared_weak_count *)v103[1];
  if (v103[1])
  {
    uint64_t v10 = (unint64_t *)((char *)v103[1] + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  v121.__m_.__uint64_t sig = (uint64_t)&__p;
  sub_7A668((void ***)&v121);
  sub_19DFC((uint64_t)&buf[32]);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  sub_19DFC((uint64_t)&v89);
  if (v120.__cv_.__sig) {
    operator delete((void *)v120.__cv_.__sig);
  }
  strcpy(buf, "#csstpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  buf))
  {
    AudioObjectID v12 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473737263LL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    LODWORD(v120.__cv_.__sig) = v12;
    v121.__m_.__uint64_t sig = 0x696E707473736323LL;
    *(_DWORD *)v121.__m_.__opaque = 0;
    sub_90764((uint64_t)buf, (AudioObjectID *)&v120, (AudioObjectPropertyAddress *)&v121, 0, 0LL);
    int v13 = *(_DWORD *)buf;
    if (*(_DWORD *)buf || !buf[32])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v13;
    }

    int v69 = 0LL;
    uint64_t v70 = 0LL;
    uint64_t v71 = 0LL;
    unint64_t v14 = *(void **)&buf[8];
    sub_7A5B8( &v69,  *(const void **)&buf[8],  *(uint64_t *)&buf[16],  (uint64_t)(*(void *)&buf[16] - *(void *)&buf[8]) >> 2);
    if (v14) {
      operator delete(v14);
    }
    uint64_t v15 = sub_138E8(13);
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      uint64_t v16 = *(os_log_s **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          v120.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v120.__cv_.__opaque = inAddress.mElement;
          sub_613AC((uint64_t)&v121, (unsigned int *)&v120);
          int v17 = v121.__m_.__opaque[15] >= 0 ? &v121 : (std::mutex *)v121.__m_.__sig;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 166;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v17;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v12;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  buf,  0x22u);
          if (v121.__m_.__opaque[15] < 0) {
            operator delete((void *)v121.__m_.__sig);
          }
        }
      }
    }

    *(AudioObjectPropertyAddress *)((char *)&v111 + 4) = inAddress;
    LODWORD(v111) = v12;
    int v112 = 0;
    uint64_t v113 = 0LL;
    sub_37BB60((uint64_t)&v121, (uint64_t)&v111);
    if (*(_DWORD *)&v121.__m_.__opaque[16]) {
      goto LABEL_31;
    }
    unsigned int v108 = 0LL;
    char v109 = 0LL;
    uint64_t v110 = 0LL;
    sub_7A5B8( &v108,  (const void *)v121.__m_.__sig,  *(uint64_t *)v121.__m_.__opaque,  (*(void *)v121.__m_.__opaque - v121.__m_.__sig) >> 2);
    __int16 v105 = 0LL;
    std::string v106 = 0LL;
    uint64_t v107 = 0LL;
    char v21 = v69;
    uint64_t v22 = v70;
    sub_7A5B8(&v105, v69, v70, (v70 - (uint64_t)v69) >> 2);
    __int16 v31 = v108;
    AudioObjectID v32 = v105;
    if (v109 - v108 == v106 - v105)
    {
      BOOL v33 = memcmp(v108, v105, v109 - v108) == 0;
      if (!v32)
      {
LABEL_57:
        if (v31)
        {
          char v109 = v31;
          operator delete(v31);
          if (v33)
          {
LABEL_61:
            uint64_t v34 = sub_138E8(13);
            if ((*(_BYTE *)(v34 + 8) & 1) != 0)
            {
              int v26 = *(os_log_s **)v34;
              if (!*(void *)v34) {
                goto LABEL_66;
              }
              if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 191;
                *(_WORD *)&_BYTE buf[18] = 1024;
                *(_DWORD *)&buf[20] = v12;
                _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primit ive for a notification on id %u.",  buf,  0x18u);
              }
            }

void sub_37B7AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_37B998(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885891433)
  {
    UInt32 v3 = (os_log_t *)sub_138E8(17);
    unint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      char v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v13 = "Device_Hawking_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 84;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    char v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v13 = "Device_Hawking_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 85;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_37BB44(_Unwind_Exception *a1)
{
}

void sub_37BB60(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v21;
  if (v21)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    unint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v15);
        char v11 = v19;
        if (v9 < 0) {
          char v11 = v10;
        }
        AudioObjectID v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          AudioObjectID v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        int v27 = v11;
        __int16 v28 = 2080;
        __int16 v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
  }

void sub_37BD54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_37BD94(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

BOOL sub_37BDA8(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1064725619) {
    return a2->mScope == 1869968496;
  }
  sub_1BB60((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

BOOL sub_37BE0C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1064725619 && sub_36854C(a1, a2);
}

uint64_t sub_37BE2C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      char v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v22 = "Device_AirPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 83;
      __int16 v25 = 2080;
      __int16 v26 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    AudioObjectID v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      uint64_t v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v22 = "Device_AirPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 84;
      __int16 v25 = 2080;
      __int16 v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      __int16 v30 = a4;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    int v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v16 = &off_4865A0;
    v16[2] = 561211770;
  }

  if (a2->mSelector == 1064725619) {
    return 4LL;
  }
  else {
    return sub_21524(a1, a2, a3, a4);
  }
}

void sub_37C104( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v22);
      int v16 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v27 = "Device_AirPlay_Aspen.cpp";
      __int16 v28 = 1024;
      int v29 = 99;
      __int16 v30 = 2080;
      AudioObjectID v31 = (const char *)v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (!a6)
  {
    char v18 = (os_log_t *)sub_138E8(13);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v22);
      char v20 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v27 = "Device_AirPlay_Aspen.cpp";
      __int16 v28 = 1024;
      int v29 = 100;
      __int16 v30 = 2080;
      AudioObjectID v31 = "outData";
      __int16 v32 = 2080;
      BOOL v33 = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }

    unsigned int v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v21 = &off_4865A0;
    void v21[2] = 561211770;
  }

  if (a2->mSelector == 1064725619)
  {
    *a6 = 0.0;
    AudioObjectID v12 = (os_log_t *)sub_138E8(17);
    AudioObjectID v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v27 = "Device_AirPlay_Aspen.cpp";
        __int16 v28 = 1024;
        int v29 = 106;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d KnowableVolumeLevels is 0", buf, 0x12u);
      }
    }
  }

  else
  {
    sub_232A4(a1, a2, a3, a4, a5, a6);
  }

uint64_t sub_37C44C(os_unfair_lock_s *a1)
{
  if (!(*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  1LL))
  {
    std::chrono::system_clock::time_point v40 = (os_log_t *)sub_138E8(13);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
      __int16 v71 = 1024;
      int v72 = 128;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): AirPlay audio device has no output streams.",  (uint8_t *)&buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "AirPlay audio device has no output streams.");
  }

  int v2 = wmemchr(dword_402FB0, a1[123]._os_unfair_lock_opaque, 8uLL);
  UInt32 v3 = "St19bad_optional_access";
  if (v2) {
    UInt32 v3 = (const char *)v2;
  }
  if (v3 - (const char *)dword_402FB0 == 32)
  {
    std::chrono::system_clock::time_point v43 = (os_log_t *)sub_138E8(13);
    uint64_t v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v68, a1[123]._os_unfair_lock_opaque);
      int v45 = v69 >= 0 ? &v68 : (__int128 *)v68;
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
      __int16 v71 = 1024;
      int v72 = 129;
      __int16 v73 = 2080;
      char v74 = v45;
      _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): AirPlay audio device has incorrect port type %s",  (uint8_t *)&buf,  0x1Cu);
      if (v69 < 0) {
        operator delete((void *)v68);
      }
    }

    std::chrono::steady_clock::time_point v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "AirPlay audio device has incorrect port type %s");
  }

  uint64_t v66 = 0LL;
  char v67 = 1;
  uint64_t v64 = 0x676C6F626C6E616DLL;
  int v65 = 0;
  if (((*(uint64_t (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v64) & 1) == 0)
  {
    int v47 = (os_log_t *)sub_138E8(13);
    __int16 v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v68, 1819173229LL);
      BOOL v49 = v69 >= 0 ? &v68 : (__int128 *)v68;
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
      __int16 v71 = 1024;
      int v72 = 133;
      __int16 v73 = 2080;
      char v74 = v49;
      _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): AirPlay audio device does not have property %s",  (uint8_t *)&buf,  0x1Cu);
      if (v69 < 0) {
        operator delete((void *)v68);
      }
    }

    uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "AirPlay audio device does not have property %s");
  }

  int v63 = 16;
  (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, int *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                          + 40LL))( a1,  &v64,  0LL,  0LL,  &v63,  &v66);
  uint64_t v61 = 0x6F7574706374726CLL;
  int v62 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v61)) {
    goto LABEL_9;
  }
  uint64_t v4 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t *, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                + 32LL))( a1,  &v61,  0LL,  0LL);
  uint64_t v5 = v4;
  if (!(_DWORD)v4)
  {
    std::chrono::steady_clock::time_point v54 = (os_log_t *)sub_138E8(13);
    uint64_t v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
      __int16 v71 = 1024;
      int v72 = 146;
      _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): AirPlay audio device returned control list size of 0",  (uint8_t *)&buf,  0x12u);
    }

    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "AirPlay audio device returned control list size of 0");
  }

  LODWORD(v6) = v4 >> 2;
  __n128 v7 = __chkstk_darwin(v4);
  int v9 = (AudioObjectID *)((char *)&v57 - ((v8 + 15) & 0x1FFFFFFF0LL));
  int v63 = v5 & 0xFFFFFFFC;
  (*(void (**)(os_unfair_lock_s *, uint64_t *, uint64_t, void, int *, AudioObjectID *, __n128))(*(void *)&a1->_os_unfair_lock_opaque + 40LL))( a1,  &v61,  v5,  0LL,  &v63,  v9,  v7);
  *(void *)&__int128 inAddress = 0x6F757470636C6173LL;
  DWORD2(inAddress) = 0;
  if (v5 <= 3)
  {
LABEL_9:
    uint64_t v10 = 0LL;
LABEL_10:
    char v11 = operator new(0x50uLL);
    sub_EC558((uint64_t)v11);
    sub_1D5AE0(a1, (uint64_t)v11);
    goto LABEL_11;
  }

  uint64_t v10 = 0LL;
  char v11 = 0LL;
  else {
    uint64_t v6 = v6;
  }
  do
  {
    if (!AudioObjectHasProperty(*v9, (const AudioObjectPropertyAddress *)&inAddress))
    {
      uint64_t v36 = (os_log_t *)sub_138E8(13);
      int v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v68, 1668047219LL);
        uint64_t v38 = v69 >= 0 ? &v68 : (__int128 *)v68;
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
        __int16 v71 = 1024;
        int v72 = 157;
        __int16 v73 = 2080;
        char v74 = v38;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): AirPlay audio device does not have property %s",  (uint8_t *)&buf,  0x1Cu);
        if (v69 < 0) {
          operator delete((void *)v68);
        }
      }

      unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "AirPlay audio device does not have property %s");
    }

    LODWORD(v68) = *v9;
    strcpy((char *)&buf, "salcptuo");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v18 = sub_36EF4((AudioObjectID *)&v68, &buf, 0, 0LL);
    if ((_DWORD)v18 || !v19)
    {
      int v34 = v18;
      uint64_t v35 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v35 = &off_4865A0;
      v35[2] = v34;
    }

    if (v10 || HIDWORD(v18) != 1986817381)
    {
      if (!v11 && HIDWORD(v18) == 1836414053)
      {
        char v11 = operator new(0x1E0uLL);
        sub_1C88B8((uint64_t)v11, (uint64_t)a1, 1869968496LL, 0, 0, 74, 0LL);
        sub_1D5AE0(a1, (uint64_t)v11);
      }
    }

    else
    {
      uint64_t v10 = operator new(0x1E0uLL);
      sub_1C88B8((uint64_t)v10, (uint64_t)a1, 1869968496LL, 0, 0, 74, 0LL);
      sub_1D5AE0(a1, (uint64_t)v10);
    }

    ++v9;
    --v6;
  }

  while (v6);
  if (!v11) {
    goto LABEL_10;
  }
LABEL_11:
  if (!v10)
  {
    uint64_t v10 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v10, 0);
    sub_1D5AE0(a1, (uint64_t)v10);
  }

  sub_1D55D4((uint64_t *)a1, 1u, a1[123]._os_unfair_lock_opaque, (uint64_t)v11);
  sub_1D580C((uint64_t)a1, 1u, a1[123]._os_unfair_lock_opaque, (uint64_t)v10);
  (*(void (**)(AudioObjectPropertyAddress *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                       + 128LL))( &buf,  a1);
  AudioObjectID v12 = operator new(0x310uLL);
  v12[1] = 0LL;
  v12[2] = 0LL;
  *AudioObjectID v12 = off_484630;
  uint64_t v13 = (uint64_t)(v12 + 3);
  sub_31B8EC((uint64_t)(v12 + 3), (uint64_t)a1, (uint64_t)&v66, (uint64_t)&buf, a1[123]._os_unfair_lock_opaque, 0);
  *(void *)&__int128 v68 = v12 + 3;
  *((void *)&v68 + 1) = v12;
  sub_AFDAC((uint64_t)&v68, v12 + 13, (uint64_t)(v12 + 3));
  sub_19DFC((uint64_t)&buf);
  if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312LL))(a1) & 0xFF00000000LL) != 0)
  {
    (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v59,  a1);
    uint64_t v14 = wmemchr(dword_402FB0, a1[123]._os_unfair_lock_opaque, 8uLL);
    uint64_t v15 = "St19bad_optional_access";
    if (v14) {
      uint64_t v15 = (const char *)v14;
    }
    if (v15 - (const char *)dword_402FB0 == 32)
    {
      int v51 = (os_log_t *)sub_138E8(13);
      BOOL v52 = *v51;
      if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.h";
        __int16 v71 = 1024;
        int v72 = 39;
        _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
      }

      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v53, "Precondition failure.");
    }

    uint64_t v16 = 1885430132LL;
    int os_unfair_lock_opaque = a1[123]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 1885433970)
    {
      if (os_unfair_lock_opaque == 1885433975)
      {
        uint64_t v16 = 1885433204LL;
LABEL_39:
        char v20 = operator new(0x310uLL);
        v20[1] = 0LL;
        void v20[2] = 0LL;
        void *v20 = off_484630;
        sub_31B8EC((uint64_t)(v20 + 3), (uint64_t)a1, (uint64_t)&v66, (uint64_t)v59, v16, 0);
        *(void *)&__int128 inAddress = v20 + 3;
        *((void *)&inAddress + 1) = v20;
        sub_AFDAC((uint64_t)&inAddress, v20 + 13, (uint64_t)(v20 + 3));
        sub_19DFC((uint64_t)v59);
        sub_204854(v13, (uint64_t)(v20 + 3));
        __int128 v58 = inAddress;
        __int128 inAddress = 0uLL;
        sub_3711D4((uint64_t)a1, (void ***)&v58);
        unsigned int v21 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        if (*((void *)&v58 + 1))
        {
          uint64_t v22 = (unint64_t *)(*((void *)&v58 + 1) + 8LL);
          do
            unint64_t v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }

        int v24 = (std::__shared_weak_count *)*((void *)&inAddress + 1);
        if (*((void *)&inAddress + 1))
        {
          char v25 = (unint64_t *)(*((void *)&inAddress + 1) + 8LL);
          do
            unint64_t v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }

        goto LABEL_49;
      }
    }

    else
    {
      if (os_unfair_lock_opaque == 1885433953) {
        goto LABEL_39;
      }
      if (os_unfair_lock_opaque == 1885433964)
      {
        uint64_t v16 = 1885432948LL;
        goto LABEL_39;
      }
    }

    uint64_t v16 = 1885434740LL;
    goto LABEL_39;
  }

void sub_37CF14(_Unwind_Exception *a1)
{
}

uint64_t sub_37D060(uint64_t a1, uint64_t a2)
{
  UInt32 v3 = wmemchr(dword_402FB0, a2, 8uLL);
  uint64_t v4 = "St19bad_optional_access";
  if (v3) {
    uint64_t v4 = (const char *)v3;
  }
  if (v4 - (const char *)dword_402FB0 == 32)
  {
    uint64_t v6 = sub_138E8(17);
    uint64_t v7 = sub_138E8(27);
    char v8 = 0;
    uint64_t v9 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1LL;
      if ((v12 & 1) != 0) {
        goto LABEL_11;
      }
    }

    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_11:
    uint64_t v13 = *(os_log_s **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v14 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_AirPlay_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 219;
      __int16 v23 = 2080;
      int v24 = v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_AirPlay_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 220;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_37D294(_Unwind_Exception *a1)
{
}

void sub_37D2B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_484630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_37D2C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_484630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_37D2E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_37D2F0(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_36E3FC(a1, a2, a3, a3, 0LL) = &off_484448;
  v10.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v11 = a2;
  *(void *)&v10.AudioObjectPropertySelector mSelector = 0x676C6F6261707074LL;
  unint64_t v5 = sub_36EF4(&v11, &v10, 0, 0LL);
  if ((_DWORD)v5 || !v6)
  {
    int v8 = v5;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v8;
  }

  *(_DWORD *)(a1 + 492) = HIDWORD(v5);
  sub_371820(a1, 0, 0x6F757470u, 0);
  return a1;
}

void sub_37D3B8(_Unwind_Exception *a1)
{
}

uint64_t sub_37D3D0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000LL;
  v2[2] = sub_37D430;
  v2[3] = &unk_484658;
  v2[4] = *(void *)(a1 + 32);
  return sub_36C08((uint64_t)v2);
}

void sub_37D430(uint64_t a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    AudioObjectPropertyAddress v10 = (os_log_t *)sub_138E8(13);
    AudioObjectID v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v45 = 1024;
      int v46 = 47;
      __int16 v47 = 2080;
      __int16 v48 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  UInt32 v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-trim-gains-1", 20LL, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v3;
  if (!v3)
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_14591C(cf, CFProperty);
  if (!cf[0])
  {
    uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }

  sub_15676C(&v42, cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v3);
  IOObjectRelease(v2);
  unint64_t v5 = v42;
  if (v42 == v43)
  {
    CFTypeRef v39 = 0LL;
  }

  else
  {
    sub_2C9114((CFArrayRef *)&v39, v42, v43);
    uint64_t v6 = sub_138E8(17);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      uint64_t v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v8 = CFCopyDescription(v39);
          sub_48188((uint64_t)cf, v8);
          if (v8) {
            CFRelease(v8);
          }
          uint64_t v9 = cf;
          if (v41 < 0) {
            uint64_t v9 = (CFTypeRef *)cf[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
          __int16 v45 = 1024;
          int v46 = 285;
          __int16 v47 = 2080;
          __int16 v48 = "IODeviceTree:/product/audio";
          __int16 v49 = 2080;
          uint64_t v50 = "speaker-trim-gains-1";
          __int16 v51 = 2080;
          BOOL v52 = v9;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
          if (v41 < 0) {
            operator delete((void *)cf[0]);
          }
        }
      }
    }
  }

  if (v5) {
    operator delete(v5);
  }
  io_registry_entry_t v15 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v15)
  {
    __int16 v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v45 = 1024;
      int v46 = 47;
      __int16 v47 = 2080;
      __int16 v48 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    char v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  uint64_t v16 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-trim-gains-0", 20LL, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v16;
  if (!v16)
  {
    unint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
  }

  CFTypeRef v17 = IORegistryEntryCreateCFProperty(v15, v16, kCFAllocatorDefault, 0);
  sub_14591C(cf, v17);
  if (!cf[0])
  {
    __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
  }

  sub_15676C(&v42, cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v16);
  IOObjectRelease(v15);
  unint64_t v18 = v42;
  if (v42 == v43)
  {
    CFTypeRef v38 = 0LL;
  }

  else
  {
    sub_2C9114((CFArrayRef *)&v38, v42, v43);
    uint64_t v19 = sub_138E8(17);
    if ((*(_BYTE *)(v19 + 8) & 1) != 0)
    {
      char v20 = *(os_log_s **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          __int16 v21 = CFCopyDescription(v38);
          sub_48188((uint64_t)cf, v21);
          if (v21) {
            CFRelease(v21);
          }
          int v22 = cf;
          if (v41 < 0) {
            int v22 = (CFTypeRef *)cf[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
          __int16 v45 = 1024;
          int v46 = 285;
          __int16 v47 = 2080;
          __int16 v48 = "IODeviceTree:/product/audio";
          __int16 v49 = 2080;
          uint64_t v50 = "speaker-trim-gains-0";
          __int16 v51 = 2080;
          BOOL v52 = v22;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
          if (v41 < 0) {
            operator delete((void *)cf[0]);
          }
        }
      }
    }
  }

  if (v18) {
    operator delete(v18);
  }
  sub_2C9898((CFArrayRef *)buf, (const __CFArray **)&v39, (const __CFArray **)&v38);
  if (v38) {
    CFRelease(v38);
  }
  if (v39) {
    CFRelease(v39);
  }
  qword_4A9290 = *(void *)buf;
  uint64_t v28 = *(void *)(a1 + 32);
  unint64_t v29 = *(const void **)v28;
  uint64_t v30 = *(void *)(v28 + 8);
  if (*(void *)v28 != v30)
  {
    uint64_t v36 = 0LL;
    uint64_t v37 = 0LL;
    uint64_t v35 = 0LL;
    sub_7A5B8(&v35, v29, v30, (v30 - (uint64_t)v29) >> 2);
    AudioObjectID v31 = (const void *)qword_4A9290;
    if (qword_4A9290) {
      CFRetain((CFTypeRef)qword_4A9290);
    }
    CFTypeRef v34 = v31;
    unint64_t v32 = v35;
    sub_37DE84((CFArrayRef *)buf, v35, v36, (CFArrayRef *)&v34);
    BOOL v33 = (const void *)qword_4A9290;
    qword_4A9290 = *(void *)buf;
    *(void *)AudioObjectPropertyAddress buf = v33;
    if (v33) {
      CFRelease(v33);
    }
    if (v34) {
      CFRelease(v34);
    }
    if (v32) {
      operator delete(v32);
    }
  }

void sub_37DE0C()
{
}

void sub_37DE14()
{
}

void sub_37DE30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  if (v9) {
    JUMPOUT(0x37DE44LL);
  }
  _Unwind_Resume(a1);
}

void sub_37DE50(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_37DE60(_Unwind_Exception *a1)
{
}

void sub_37DE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_37DE84(CFArrayRef *a1, int *a2, int *a3, CFArrayRef *a4)
{
  if (*a4)
  {
    unint64_t v5 = a2;
    __int128 v66 = 0uLL;
    for (unint64_t i = 0LL; v5 != a3; ++v5)
    {
      int v6 = *v5;
      LOBYTE(cf) = 0;
      unsigned __int8 v65 = 0;
      uint64_t v7 = *a4;
      if (!*a4) {
        goto LABEL_31;
      }
      CFIndex Count = CFArrayGetCount(*a4);
      CFIndex v9 = Count;
      CFArrayRef v10 = *a4;
      if (*a4)
      {
        CFIndex v11 = CFArrayGetCount(*a4);
        if (!v9) {
          goto LABEL_31;
        }
      }

      else
      {
        CFIndex v11 = 0LL;
        if (!Count) {
          goto LABEL_31;
        }
      }

      unint64_t v12 = 0LL;
      while (v7 != v10 || v11 != v12)
      {
        sub_2C9C4C(valuePtr, v7, v12);
        if (!*(void *)valuePtr)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }

        uint64_t v13 = (const __CFNumber *)sub_8D568(*(const __CFDictionary **)valuePtr, "trim_gain_data_source_id");
        if (v13)
        {
          uint64_t v14 = sub_36328(v13);
          if ((unint64_t)v14 >> 32 && v6 == (_DWORD)v14)
          {
            if (v65)
            {
              CFTypeRef v16 = cf;
              CFTypeRef cf = *(CFTypeRef *)valuePtr;
              if (*(void *)valuePtr) {
                CFRetain(*(CFTypeRef *)valuePtr);
              }
              if (v16) {
                CFRelease(v16);
              }
            }

            else
            {
              CFTypeRef v17 = *(const void **)valuePtr;
              if (*(void *)valuePtr) {
                CFRetain(*(CFTypeRef *)valuePtr);
              }
              CFTypeRef cf = v17;
              unsigned __int8 v65 = 1;
            }

            if (*(void *)valuePtr) {
              CFRelease(*(CFTypeRef *)valuePtr);
            }
            break;
          }
        }

        if (*(void *)valuePtr) {
          CFRelease(*(CFTypeRef *)valuePtr);
        }
        if (v9 == ++v12) {
          break;
        }
      }

void sub_37E508( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20, int a21, __int16 a22, char a23, char a24, CFTypeRef cf, uint64_t a26, uint64_t a27, char a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_37E6FC(id a1)
{
}

void sub_37E714(id a1)
{
  io_registry_entry_t v1 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v1)
  {
    CFIndex v9 = (os_log_t *)sub_138E8(13);
    CFArrayRef v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v20 = "EDTUtilsImpl.h";
      __int16 v21 = 1024;
      int v22 = 47;
      __int16 v23 = 2080;
      CFDictionaryRef v24 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  io_registry_entry_t v2 = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"filler-key-string-no-receiver-trim-gain-written",  47LL,  0x8000100u,  0);
  if (!v2)
  {
    unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v1, v2, kCFAllocatorDefault, 0);
  sub_14591C(cf, CFProperty);
  if (!cf[0])
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }

  sub_15676C(&v17, cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v2);
  IOObjectRelease(v1);
  uint64_t v4 = v17;
  if (v17 == v18)
  {
    CFTypeRef v14 = 0LL;
  }

  else
  {
    sub_2C9114((CFArrayRef *)&v14, v17, v18);
    uint64_t v5 = sub_138E8(17);
    if ((*(_BYTE *)(v5 + 8) & 1) != 0)
    {
      int v6 = *(os_log_s **)v5;
      if (*(void *)v5)
      {
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v7 = CFCopyDescription(v14);
          sub_48188((uint64_t)cf, v7);
          if (v7) {
            CFRelease(v7);
          }
          int v8 = cf;
          if (v16 < 0) {
            int v8 = (CFTypeRef *)cf[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          int v20 = "FDRDataImpl.cpp";
          __int16 v21 = 1024;
          int v22 = 285;
          __int16 v23 = 2080;
          CFDictionaryRef v24 = "IODeviceTree:/product/audio";
          __int16 v25 = 2080;
          unint64_t v26 = "filler-key-string-no-receiver-trim-gain-written";
          __int16 v27 = 2080;
          uint64_t v28 = v8;
          _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
          if (v16 < 0) {
            operator delete((void *)cf[0]);
          }
        }
      }
    }
  }

  if (v4) {
    operator delete(v4);
  }
  qword_4A92A8 = (uint64_t)v14;
}

void sub_37EC08()
{
}

void sub_37EC10()
{
}

uint64_t sub_37EC20(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000LL;
  v2[2] = sub_37EC80;
  v2[3] = &unk_484718;
  v2[4] = *(void *)(a1 + 32);
  return sub_36C08((uint64_t)v2);
}

void sub_37EC80(uint64_t a1)
{
  if (sub_1CBBF8())
  {
    io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v2)
    {
      CFNumberRef v18 = (os_log_t *)sub_138E8(13);
      CFStringRef v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        uint64_t v76 = "IODeviceTree:/product/audio";
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }

    UInt32 v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"mic-trim-gains", 14LL, 0x8000100u, 0);
    if (!v3)
    {
      CFDictionaryRef v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
    }

    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
    sub_14591C(cf, CFProperty);
    if (!cf[0])
    {
      unint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Could not construct");
    }

    sub_15676C(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v3);
    IOObjectRelease(v2);
    CFArrayRef v5 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v67 = 0LL;
    }

    else
    {
      sub_2C9114((CFArrayRef *)&v67, v70, v71);
      uint64_t v6 = sub_138E8(17);
      if ((*(_BYTE *)(v6 + 8) & 1) != 0)
      {
        uint64_t v7 = *(os_log_s **)v6;
        if (*(void *)v6)
        {
          if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
          {
            int v8 = CFCopyDescription(v67);
            sub_48188((uint64_t)cf, v8);
            if (v8) {
              CFRelease(v8);
            }
            CFIndex v9 = cf;
            if (v69 < 0) {
              CFIndex v9 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            uint64_t v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            char v78 = "mic-trim-gains";
            __int16 v79 = 2080;
            AudioObjectPropertyAddress v80 = v9;
            _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }

    if (v5) {
      operator delete(v5);
    }
    std::chrono::steady_clock::time_point v54 = (unsigned __int8 *)v67;
  }

  else
  {
    io_registry_entry_t v10 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v10)
    {
      __int16 v21 = (os_log_t *)sub_138E8(13);
      int v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        uint64_t v76 = "IODeviceTree:/product/audio";
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
      }

      __int16 v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v23, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }

    CFIndex v11 = CFStringCreateWithBytes(0LL, (const UInt8 *)"mic-trim-gains-2", 16LL, 0x8000100u, 0);
    *(void *)AudioObjectPropertyAddress buf = v11;
    if (!v11)
    {
      __int16 v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Could not construct");
    }

    CFTypeRef v12 = IORegistryEntryCreateCFProperty(v10, v11, kCFAllocatorDefault, 0);
    sub_14591C(cf, v12);
    if (!cf[0])
    {
      __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Could not construct");
    }

    sub_15676C(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v11);
    IOObjectRelease(v10);
    CFArrayRef v13 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v67 = 0LL;
    }

    else
    {
      sub_2C9114((CFArrayRef *)&v67, v70, v71);
      uint64_t v14 = sub_138E8(17);
      if ((*(_BYTE *)(v14 + 8) & 1) != 0)
      {
        io_registry_entry_t v15 = *(os_log_s **)v14;
        if (*(void *)v14)
        {
          if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
          {
            char v16 = CFCopyDescription(v67);
            sub_48188((uint64_t)cf, v16);
            if (v16) {
              CFRelease(v16);
            }
            CFTypeRef v17 = cf;
            if (v69 < 0) {
              CFTypeRef v17 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            uint64_t v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            char v78 = "mic-trim-gains-2";
            __int16 v79 = 2080;
            AudioObjectPropertyAddress v80 = v17;
            _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }

    if (v13) {
      operator delete(v13);
    }
    io_registry_entry_t v28 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v28)
    {
      uint64_t v36 = (os_log_t *)sub_138E8(13);
      CFDictionaryRef v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        uint64_t v76 = "IODeviceTree:/product/audio";
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
      }

      __int128 v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v38, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }

    unint64_t v29 = CFStringCreateWithBytes(0LL, (const UInt8 *)"mic-trim-gains-1", 16LL, 0x8000100u, 0);
    *(void *)AudioObjectPropertyAddress buf = v29;
    if (!v29)
    {
      unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
    }

    CFTypeRef v30 = IORegistryEntryCreateCFProperty(v28, v29, kCFAllocatorDefault, 0);
    sub_14591C(cf, v30);
    if (!cf[0])
    {
      std::chrono::system_clock::time_point v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }

    sub_15676C(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v29);
    IOObjectRelease(v28);
    CFArrayRef v31 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v66 = 0LL;
    }

    else
    {
      sub_2C9114((CFArrayRef *)&v66, v70, v71);
      uint64_t v32 = sub_138E8(17);
      if ((*(_BYTE *)(v32 + 8) & 1) != 0)
      {
        BOOL v33 = *(os_log_s **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v34 = CFCopyDescription(v66);
            sub_48188((uint64_t)cf, v34);
            if (v34) {
              CFRelease(v34);
            }
            uint64_t v35 = cf;
            if (v69 < 0) {
              uint64_t v35 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            uint64_t v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            char v78 = "mic-trim-gains-1";
            __int16 v79 = 2080;
            AudioObjectPropertyAddress v80 = v35;
            _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }

    if (v31) {
      operator delete(v31);
    }
    io_registry_entry_t v41 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v41)
    {
      __int16 v49 = (os_log_t *)sub_138E8(13);
      uint64_t v50 = *v49;
      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        uint64_t v76 = "IODeviceTree:/product/audio";
        _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
      }

      __int16 v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v51, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }

    BOOL v42 = CFStringCreateWithBytes(0LL, (const UInt8 *)"mic-trim-gains-0", 16LL, 0x8000100u, 0);
    *(void *)AudioObjectPropertyAddress buf = v42;
    if (!v42)
    {
      BOOL v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v52, "Could not construct");
    }

    CFTypeRef v43 = IORegistryEntryCreateCFProperty(v41, v42, kCFAllocatorDefault, 0);
    sub_14591C(cf, v43);
    if (!cf[0])
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v53, "Could not construct");
    }

    sub_15676C(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v42);
    IOObjectRelease(v41);
    CFArrayRef v44 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v65 = 0LL;
    }

    else
    {
      sub_2C9114((CFArrayRef *)&v65, v70, v71);
      uint64_t v45 = sub_138E8(17);
      if ((*(_BYTE *)(v45 + 8) & 1) != 0)
      {
        int v46 = *(os_log_s **)v45;
        if (*(void *)v45)
        {
          if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
          {
            __int16 v47 = CFCopyDescription(v65);
            sub_48188((uint64_t)cf, v47);
            if (v47) {
              CFRelease(v47);
            }
            __int16 v48 = cf;
            if (v69 < 0) {
              __int16 v48 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            uint64_t v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            char v78 = "mic-trim-gains-0";
            __int16 v79 = 2080;
            AudioObjectPropertyAddress v80 = v48;
            _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }

    if (v44) {
      operator delete(v44);
    }
    sub_2C9898((CFArrayRef *)buf, (const __CFArray **)&v66, (const __CFArray **)&v65);
    sub_2C9898((CFArrayRef *)&v70, (const __CFArray **)&v67, (const __CFArray **)buf);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    if (v65) {
      CFRelease(v65);
    }
    if (v66) {
      CFRelease(v66);
    }
    if (v67) {
      CFRelease(v67);
    }
    std::chrono::steady_clock::time_point v54 = v70;
  }

  qword_4A92C0 = (uint64_t)v54;
  uint64_t v55 = *(void *)(a1 + 32);
  uint64_t v56 = *(const void **)v55;
  uint64_t v57 = *(void *)(v55 + 8);
  if (*(void *)v55 != v57)
  {
    CFDictionaryRef v63 = 0LL;
    uint64_t v64 = 0LL;
    int v62 = 0LL;
    sub_7A5B8(&v62, v56, v57, (v57 - (uint64_t)v56) >> 2);
    CFNumberRef v58 = (const void *)qword_4A92C0;
    if (qword_4A92C0) {
      CFRetain((CFTypeRef)qword_4A92C0);
    }
    CFTypeRef v61 = v58;
    CFTypeRef v59 = v62;
    sub_37DE84((CFArrayRef *)buf, v62, v63, (CFArrayRef *)&v61);
    CFNumberRef v60 = (const void *)qword_4A92C0;
    qword_4A92C0 = *(void *)buf;
    *(void *)AudioObjectPropertyAddress buf = v60;
    if (v60) {
      CFRelease(v60);
    }
    if (v61) {
      CFRelease(v61);
    }
    if (v59) {
      operator delete(v59);
    }
  }

void sub_37FFD0()
{
}

void sub_37FFE8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_380000(uint64_t a1, ...)
{
  if (v1) {
    JUMPOUT(0x380014LL);
  }
  JUMPOUT(0x37FFF0LL);
}

void sub_38001C()
{
}

void sub_380024(uint64_t *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_4A92E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_4A92E0)) {
    __cxa_guard_release(&qword_4A92E0);
  }
  if (qword_4A92E8 != -1) {
    dispatch_once(&qword_4A92E8, &stru_484778);
  }
  uint64_t v3 = qword_4A92D8;
  if (qword_4A92D8) {
    CFRetain((CFTypeRef)qword_4A92D8);
  }
  *a1 = v3;
}

void sub_3800B4(id a1)
{
}

void sub_3800CC(id a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_48FD28);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_48FD28))
  {
    byte_48FD20 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 3;
    __cxa_guard_release(&qword_48FD28);
  }

  if (byte_48FD20)
  {
    io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v2)
    {
      CFIndex v11 = (os_log_t *)sub_138E8(13);
      CFTypeRef v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v22 = 1024;
        int v23 = 47;
        __int16 v24 = 2080;
        __int16 v25 = "IODeviceTree:/product/audio";
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }

    uint64_t v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-thiele-small", 20LL, 0x8000100u, 0);
    if (!v3)
    {
      uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
    }

    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
    sub_14591C(cf, CFProperty);
    if (!cf[0])
    {
      io_registry_entry_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
    }

    sub_15676C(&v19, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v3);
    IOObjectRelease(v2);
    CFArrayRef v5 = v19;
    if (v19 == v20)
    {
      CFTypeRef v16 = 0LL;
    }

    else
    {
      sub_2CC1A8((CFArrayRef *)&v16, v19, v20);
      uint64_t v6 = sub_138E8(17);
      if ((*(_BYTE *)(v6 + 8) & 1) != 0)
      {
        uint64_t v7 = *(os_log_s **)v6;
        if (*(void *)v6)
        {
          if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
          {
            int v8 = CFCopyDescription(v16);
            sub_48188((uint64_t)cf, v8);
            if (v8) {
              CFRelease(v8);
            }
            CFIndex v9 = cf;
            if (v18 < 0) {
              CFIndex v9 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v22 = 1024;
            int v23 = 285;
            __int16 v24 = 2080;
            __int16 v25 = "IODeviceTree:/product/audio";
            __int16 v26 = 2080;
            __int16 v27 = "speaker-thiele-small";
            __int16 v28 = 2080;
            unint64_t v29 = v9;
            _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: %s Key: %s: %s",  buf,  0x30u);
            if (v18 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }

    if (v5) {
      operator delete(v5);
    }
    CFTypeRef v10 = v16;
  }

  else
  {
    sub_2C9D2C((CFArrayRef *)buf);
    CFTypeRef v10 = *(CFTypeRef *)buf;
  }

  qword_4A92D8 = (uint64_t)v10;
}

void sub_380634(_Unwind_Exception *a1)
{
}

void sub_380650(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_4A92F8);
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = a2;
    int v6 = __cxa_guard_acquire(&qword_4A92F8);
    a2 = v5;
    if (v6)
    {
      __cxa_guard_release(&qword_4A92F8);
      a2 = v5;
    }
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_380720;
  block[3] = &unk_4847F8;
  block[4] = a2;
  if (qword_4A9300 != -1) {
    dispatch_once(&qword_4A9300, block);
  }
  uint64_t v4 = qword_4A92F0;
  if (qword_4A92F0) {
    CFRetain((CFTypeRef)qword_4A92F0);
  }
  *a1 = v4;
}

uint64_t sub_380720(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000LL;
  v2[2] = sub_380780;
  v2[3] = &unk_4847D8;
  v2[4] = *(void *)(a1 + 32);
  return sub_36C08((uint64_t)v2);
}

void sub_380780(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)(a1 + 32);
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    __int128 v38 = (os_log_t *)sub_138E8(13);
    unint64_t v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      __int16 v75 = 2080;
      *(void *)uint64_t v76 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  unsigned __int8 v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-eq-0", 12LL, 0x8000100u, 0);
  if (!v3)
  {
    io_registry_entry_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_14591C(&valuePtr, CFProperty);
  if (!valuePtr)
  {
    uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Could not construct");
  }

  sub_15676C(&v58, valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFRelease(v3);
  IOObjectRelease(v2);
  uint64_t v5 = v58;
  sub_2CCF44(&v51, v58, v59);
  if (v5) {
    operator delete(v5);
  }
  io_registry_entry_t v6 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v6)
  {
    BOOL v42 = (os_log_t *)sub_138E8(13);
    CFTypeRef v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      __int16 v75 = 2080;
      *(void *)uint64_t v76 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    CFArrayRef v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v44, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  uint64_t v7 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-eq-1", 12LL, 0x8000100u, 0);
  if (!v7)
  {
    int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
  }

  CFTypeRef v8 = IORegistryEntryCreateCFProperty(v6, v7, kCFAllocatorDefault, 0);
  sub_14591C(&valuePtr, v8);
  if (!valuePtr)
  {
    __int16 v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
  }

  sub_15676C(&v58, valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFRelease(v7);
  IOObjectRelease(v6);
  CFIndex v9 = v58;
  sub_2CCF44(&v50, v58, v59);
  if (v9) {
    operator delete(v9);
  }
  memset(v66, 0, sizeof(v66));
  uint64_t v10 = (uint64_t)(v1[1] - *v1) >> 2;
  uint64_t v64 = 1LL;
  unint64_t v65 = v10;
  CFNumberRef v58 = v66;
  CFTypeRef v59 = &v64;
  CFNumberRef v60 = &v65;
  CFTypeRef v61 = v1;
  int v62 = &v63;
  sub_2CD690((uint64_t)&v58, (unsigned int *)v51.i64[0], (unsigned int *)v51.i64[1]);
  sub_2CD690((uint64_t)&v58, (unsigned int *)v50.i64[0], (unsigned int *)v50.i64[1]);
  uint64_t v56 = 0LL;
  unint64_t v57 = 0LL;
  uint64_t v55 = &v56;
  if (v65)
  {
    for (unint64_t i = 1LL; i <= v65; ++i)
    {
      sub_7D084(&v54, "ch");
      std::to_string(&v53, i);
      if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        CFTypeRef v12 = &v53;
      }
      else {
        CFTypeRef v12 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v53.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v53.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::string::append(&v54, (const std::string::value_type *)v12, size);
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      std::string::size_type cap = v14->__r_.__value_.__l.__cap_;
      __int128 v68 = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      sub_59370((CFStringRef *)buf, "Mute");
      *(void *)&buf[8] = kCFBooleanFalse;
      sub_59370((CFStringRef *)&buf[16], "PhaseFlip");
      *(void *)&v76[4] = kCFBooleanFalse;
      v52[0] = (void **)buf;
      v52[1] = (void **)(&dword_0 + 2);
      CFDictionaryRef v16 = sub_5A950((uint64_t)v52);
      CFTypeRef v17 = sub_845D8((uint64_t)&v55, &v67, (void **)&v68);
      if (*v17)
      {
        if (v16) {
          CFRelease(v16);
        }
      }

      else
      {
        char v18 = v17;
        CFStringRef v19 = operator new(0x40uLL);
        __int16 v71 = &v56;
        v19[2] = v68;
        std::string::size_type v20 = cap;
        __int128 v68 = 0uLL;
        std::string::size_type cap = 0LL;
        *((void *)v19 + 6) = v20;
        *((void *)v19 + 7) = v16;
        LOBYTE(v72) = 1;
        uint64_t v21 = v67;
        *(void *)CFStringRef v19 = 0LL;
        *((void *)v19 + 1) = 0LL;
        *((void *)v19 + 2) = v21;
        *char v18 = v19;
        if (*v55)
        {
          uint64_t v55 = (uint64_t **)*v55;
          CFStringRef v19 = (_OWORD *)*v18;
        }

        sub_7A420(v56, (uint64_t *)v19);
        ++v57;
        CFStringRef valuePtr = 0LL;
        sub_2CDFB8((uint64_t)&valuePtr);
      }

      for (uint64_t j = 0LL; j != -32; j -= 16LL)
      {
        int v23 = *(const void **)&v76[j + 4];
        if (v23) {
          CFRelease(v23);
        }
        __int16 v24 = *(const void **)&buf[j + 16];
        if (v24) {
          CFRelease(v24);
        }
      }

      if (SHIBYTE(cap) < 0) {
        operator delete((void *)v68);
      }
    }
  }

  sub_59370((CFStringRef *)buf, "Filters");
  *(void *)&buf[8] = sub_2C97A8(v66);
  sub_59370((CFStringRef *)&buf[16], "QVersion");
  LODWORD(valuePtr) = 1;
  *(void *)&v76[4] = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  if (!*(void *)&v76[4])
  {
    __int16 v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
  }

  __int128 v68 = 0uLL;
  std::string::size_type cap = 0LL;
  sub_7DCF4(&v68, v57);
  __int16 v25 = v55;
  if (v55 != &v56)
  {
    do
    {
      sub_2CDDC4(&v68, (const UInt8 *)v25 + 32, (const void **)v25 + 7);
      __int16 v26 = v25[1];
      if (v26)
      {
        do
        {
          __int16 v27 = (uint64_t **)v26;
          __int16 v26 = (uint64_t *)*v26;
        }

        while (v26);
      }

      else
      {
        do
        {
          __int16 v27 = (uint64_t **)v25[2];
          BOOL v28 = *v27 == (uint64_t *)v25;
          __int16 v25 = v27;
        }

        while (!v28);
      }

      __int16 v25 = v27;
    }

    while (v27 != &v56);
  }

  CFDictionaryRef v29 = sub_7C1F4((void ***)&v68);
  v52[0] = (void **)&v68;
  sub_7CFCC(v52);
  sub_59370(&valuePtr, "Channels");
  if (v29) {
    CFRetain(v29);
  }
  __int16 v71 = (uint64_t **)v29;
  sub_59370(&v72, "InputGain");
  LODWORD(v68) = 0;
  if (!CFNumberCreate(0LL, kCFNumberIntType, &v68))
  {
    __int16 v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
  }

  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&valuePtr;
  v53.__r_.__value_.__l.__size_ = 2LL;
  CFDictionaryRef v30 = sub_5A950((uint64_t)&v53);
  sub_59370(&v77, "Global");
  if (v30) {
    CFRetain(v30);
  }
  v78[0] = v30;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v54.__r_.__value_.__l.__size_ = 3LL;
  CFDictionaryRef v31 = sub_5A950((uint64_t)&v54);
  for (uint64_t k = 0LL; k != -6; k -= 2LL)
  {
    BOOL v33 = (const void *)v78[k];
    if (v33) {
      CFRelease(v33);
    }
    unint64_t v34 = (const void *)v78[k - 1];
    if (v34) {
      CFRelease(v34);
    }
  }

  if (v30) {
    CFRelease(v30);
  }
  for (uint64_t m = 0LL; m != -32; m -= 16LL)
  {
    uint64_t v36 = *(const void **)&buf[m - 8];
    if (v36) {
      CFRelease(v36);
    }
    CFDictionaryRef v37 = *(CFStringRef *)((char *)&v72 + m);
    if (v37) {
      CFRelease(v37);
    }
  }

  if (v29) {
    CFRelease(v29);
  }
  sub_2CDD40(v56);
  *(void *)AudioObjectPropertyAddress buf = v66;
  sub_AD8B8((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v50;
  sub_2CD5B8((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v51;
  sub_2CD5B8((void ***)buf);
  qword_4A92F0 = (uint64_t)v31;
}

void sub_381060( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
  if (a2 == 1)
  {
    int v46 = __cxa_begin_catch(a1);
    __int16 v47 = (os_log_t *)sub_138E8(17);
    __int16 v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = (*(uint64_t (**)(void *))(*(void *)v46 + 16LL))(v46);
      *(_DWORD *)(v43 - sub_13818(v2 - 160) = 136316162;
      uint64_t v50 = v43 - 224;
      *(void *)(v50 + 68) = "EDTUtilsImpl.h";
      *(_WORD *)(v43 - 148) = 1024;
      *(_DWORD *)(v50 + 78) = 74;
      *(_WORD *)(v43 - 142) = 2080;
      *(void *)(v50 + 84) = v49;
      *(_WORD *)(v43 - 132) = 2080;
      *(void *)(v50 + 94) = v42;
      *(_WORD *)(v43 - 122) = 2080;
      *(void *)(v43 - 120) = "speaker-eq-1";
      _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)(v43 - 160),
        0x30u);
    }

    __cxa_end_catch();
    JUMPOUT(0x380910LL);
  }

  *(void *)(v43 - sub_13818(v2 - 160) = &a13;
  sub_2CD5B8((void ***)(v43 - 160));
  _Unwind_Resume(a1);
}

void sub_3816D0(uint64_t a1)
{
  unsigned __int8 v1 = (void *)sub_38829C(a1);
  operator delete(v1);
}

BOOL sub_3816E4(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      BOOL v6 = mSelector == 1987013732;
      int v7 = 1986290211;
    }

    else
    {
      BOOL v6 = mSelector == 1836414053;
      int v7 = 1986229104;
    }

    BOOL v9 = v6 || mSelector == v7;
    if (v9 && a2->mElement == 6 && a2->mScope == 1869968496) {
      return 1LL;
    }
    goto LABEL_22;
  }

  BOOL result = 1LL;
  if (mSelector > 1685483629)
  {
    if (mSelector != 1685483630 && mSelector != 1835103844)
    {
LABEL_22:
      sub_1BB60((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }

  else
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542) {
        return result;
      }
      goto LABEL_22;
    }

    return a2->mScope == 1869968496;
  }

  return result;
}

uint64_t sub_381810(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211)
      {
LABEL_18:
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          return sub_36854C(a1, a2);
        }
        return 0LL;
      }

      if (mSelector != 1987013732) {
        return sub_36854C(a1, a2);
      }
    }

    else if (mSelector != 1836414053)
    {
      if (mSelector != 1986229104) {
        return sub_36854C(a1, a2);
      }
      goto LABEL_18;
    }

    if (a2->mElement != 6 || a2->mScope != 1869968496) {
      return sub_36854C(a1, a2);
    }
    return 1LL;
  }

  uint64_t v3 = 1LL;
  if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return v3;
    }
    if (mSelector != 1835103844) {
      return sub_36854C(a1, a2);
    }
    return 0LL;
  }

  if (mSelector == 1064725619) {
    return 0LL;
  }
  if (mSelector != 1634759542) {
    return sub_36854C(a1, a2);
  }
  return v3;
}

uint64_t sub_381924(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    CFIndex v11 = (os_log_t *)sub_138E8(13);
    CFTypeRef v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      CFArrayRef v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v24 = "Device_Receiver_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 388;
      __int16 v27 = 2080;
      BOOL v28 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    __int128 v15 = (os_log_t *)sub_138E8(13);
    CFDictionaryRef v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      if (v22 >= 0) {
        CFTypeRef v17 = __p;
      }
      else {
        CFTypeRef v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v24 = "Device_Receiver_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 389;
      __int16 v27 = 2080;
      BOOL v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      uint64_t v32 = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    char v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v18 = &off_4865A0;
    v18[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  uint64_t result = 4LL;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211) {
        return 16LL;
      }
      int v10 = 1987013732;
    }

    else if (mSelector == 1836414053)
    {
      if (a2->mElement != 6) {
        return sub_21524(a1, a2, a3, a4);
      }
      int mSelector = a2->mScope;
      int v10 = 1869968496;
    }

    else
    {
      int v10 = 1986229104;
    }
  }

  else if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return result;
    }
    int v10 = 1835103844;
  }

  else
  {
    if (mSelector == 1064725619) {
      return result;
    }
    int v10 = 1634759542;
  }

  if (mSelector != v10) {
    return sub_21524(a1, a2, a3, a4);
  }
  return result;
}

void sub_381CB4( uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v32 = (os_log_t *)sub_138E8(13);
    BOOL v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
      unint64_t v34 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 449;
      __int16 v107 = 2080;
      unsigned int v108 = (const char *)v34;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    uint64_t v36 = (os_log_t *)sub_138E8(13);
    CFDictionaryRef v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
      __int128 v38 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 450;
      __int16 v107 = 2080;
      unsigned int v108 = (const char *)v38;
      __int16 v109 = 1024;
      LODWORD(v110[0]) = a3;
      WORD2(v110[0]) = 2048;
      *(void *)((char *)v110 + 6) = a4;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    unint64_t v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v39 = &off_4865A0;
    v39[2] = 561211770;
  }

  if (!a6)
  {
    std::chrono::system_clock::time_point v40 = (os_log_t *)sub_138E8(13);
    io_registry_entry_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
      uint64_t v42 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 451;
      __int16 v107 = 2080;
      unsigned int v108 = "outData";
      __int16 v109 = 2080;
      v110[0] = v42;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    uint64_t v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v43 = &off_4865A0;
    v43[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector <= 1986290210)
    {
      if (mSelector == 1836414053)
      {
        UInt32 v26 = *a5;
        if (v26 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          BOOL v52 = (os_log_t *)sub_138E8(13);
          std::string v53 = *v52;
          if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
            int v54 = v103;
            uint64_t v55 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v56 = *a5;
            int v57 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            p_p = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            if (v54 < 0) {
              p_p = v55;
            }
            __int16 v105 = 1024;
            int v106 = 513;
            __int16 v107 = 2080;
            unsigned int v108 = (const char *)p_p;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v56;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v57;
            _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }

          CFTypeRef v59 = __cxa_allocate_exception(0x10uLL);
          *(void *)CFTypeRef v59 = &off_4865A0;
          void v59[2] = 561211770;
        }

        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        __int16 v27 = (unsigned __int8 *)sub_1F4000();
        int v17 = sub_1F5650(v27);
      }

      else
      {
        if (mSelector != 1986229104) {
          goto LABEL_49;
        }
        UInt32 v15 = *a5;
        if (v15 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          uint64_t v76 = (os_log_t *)sub_138E8(13);
          CFStringRef v77 = *v76;
          if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
            int v78 = v103;
            __int16 v79 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v80 = *a5;
            int v81 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            char v82 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            if (v78 < 0) {
              char v82 = v79;
            }
            __int16 v105 = 1024;
            int v106 = 525;
            __int16 v107 = 2080;
            unsigned int v108 = (const char *)v82;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v80;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v81;
            _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }

          AudioObjectID v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)AudioObjectID v83 = &off_4865A0;
          v83[2] = 561211770;
        }

        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        uint64_t v16 = sub_1F4000();
        int v17 = sub_1F4DF8(v16);
      }

      *(_DWORD *)a6 = v17;
      return;
    }

    if (mSelector == 1986290211)
    {
      UInt32 v31 = *a5;
      if (v31 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
      {
        CFNumberRef v60 = (os_log_t *)sub_138E8(13);
        CFTypeRef v61 = *v60;
        if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
          int v62 = v103;
          char v63 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v64 = *a5;
          int v65 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          CFTypeRef v66 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
          if (v62 < 0) {
            CFTypeRef v66 = v63;
          }
          __int16 v105 = 1024;
          int v106 = 500;
          __int16 v107 = 2080;
          unsigned int v108 = (const char *)v66;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v64;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v65;
          _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }

        uint64_t v67 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v67 = &off_4865A0;
        v67[2] = 561211770;
      }

      if (a2->mElement == 6 && a2->mScope == 1869968496)
      {
        *(_OWORD *)a6 = xmmword_4031A0;
        return;
      }

      goto LABEL_49;
    }

    if (mSelector != 1987013732) {
      goto LABEL_49;
    }
    UInt32 v22 = *a5;
    if (v22 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      int v92 = (os_log_t *)sub_138E8(13);
      __int16 v93 = *v92;
      if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
        int v94 = v103;
        uint64_t v95 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v96 = *a5;
        int v97 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        std::mutex v98 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        if (v94 < 0) {
          std::mutex v98 = v95;
        }
        __int16 v105 = 1024;
        int v106 = 487;
        __int16 v107 = 2080;
        unsigned int v108 = (const char *)v98;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v96;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v97;
        _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      uint64_t v99 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v99 = &off_4865A0;
      v99[2] = 561211770;
    }

    if (a2->mElement != 6 || a2->mScope != 1869968496)
    {
LABEL_49:
      sub_232A4(a1, a2, a3, a4, a5, a6);
      return;
    }

    int v23 = (float *)sub_1F4000();
    float v24 = (float)(sub_1F4F28(v23) * 100.0) + -100.0;
    goto LABEL_51;
  }

  if (mSelector <= 1685483629)
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542)
      {
        UInt32 v13 = *a5;
        if (v13 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          __int128 v68 = (os_log_t *)sub_138E8(13);
          char v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
            int v70 = v103;
            __int16 v71 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v72 = *a5;
            int v73 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            int v74 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            if (v70 < 0) {
              int v74 = v71;
            }
            __int16 v105 = 1024;
            int v106 = 457;
            __int16 v107 = 2080;
            unsigned int v108 = (const char *)v74;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v72;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v73;
            _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }

          __int16 v75 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v75 = &off_4865A0;
          void v75[2] = 561211770;
        }

        AudioObjectPropertyScope mScope = a2->mScope;
        *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
        *(_DWORD *)&uint8_t buf[4] = mScope;
        *(_DWORD *)&buf[8] = 0;
        (*(void (**)(uint64_t, _BYTE *, uint64_t, const void *, UInt32 *, float *))(*(void *)a1 + 40LL))( a1,  buf,  a3,  a4,  a5,  a6);
        return;
      }

      goto LABEL_49;
    }

    UInt32 v25 = *a5;
    if (v25 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      CFArrayRef v44 = (os_log_t *)sub_138E8(13);
      uint64_t v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
        int v46 = v103;
        __int16 v47 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v48 = *a5;
        int v49 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        uint64_t v50 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        if (v46 < 0) {
          uint64_t v50 = v47;
        }
        __int16 v105 = 1024;
        int v106 = 543;
        __int16 v107 = 2080;
        unsigned int v108 = (const char *)v50;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v48;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v49;
        _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      int64x2_t v51 = __cxa_allocate_exception(0x10uLL);
      *(void *)int64x2_t v51 = &off_4865A0;
      v51[2] = 561211770;
    }

    int v21 = 1;
LABEL_31:
    *(_DWORD *)a6 = v21;
    return;
  }

  if (mSelector != 1685483630)
  {
    if (mSelector != 1835103844) {
      goto LABEL_49;
    }
    UInt32 v18 = *a5;
    if (v18 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      OSStatus v84 = (os_log_t *)sub_138E8(13);
      uint64_t v85 = *v84;
      if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
        int v86 = v103;
        uint64_t v87 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v88 = *a5;
        int v89 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        uint64_t v90 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        if (v86 < 0) {
          uint64_t v90 = v87;
        }
        __int16 v105 = 1024;
        int v106 = 466;
        __int16 v107 = 2080;
        unsigned int v108 = (const char *)v90;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v88;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v89;
        _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      char v91 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v91 = &off_4865A0;
      v91[2] = 561211770;
    }

    AudioObjectPropertyScope v20 = a2->mScope;
    AudioObjectPropertyElement v19 = a2->mElement;
    if (v19 == 6 && v20 == 1869968496)
    {
      int v21 = -1027131310;
      goto LABEL_31;
    }

    __p.int mSelector = 1986290211;
    __p.AudioObjectPropertyScope mScope = v20;
    __p.AudioObjectPropertyElement mElement = v19;
    LODWORD(v100) = 16;
    sub_232A4(a1, &__p, 0, 0LL, (UInt32 *)&v100, (float *)buf);
    float v24 = *(double *)buf;
LABEL_51:
    *a6 = v24;
    return;
  }

  BOOL v28 = (os_log_t *)sub_138E8(17);
  __int16 v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(&__p, a2->mSelector);
    UInt32 v30 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
    __int16 v105 = 1024;
    int v106 = 538;
    __int16 v107 = 2080;
    unsigned int v108 = (const char *)v30;
    _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property '%s' is write-only", buf, 0x1Cu);
    if (v103 < 0) {
      operator delete(*(void **)&__p.mSelector);
    }
  }

  *a5 = 0;
}

void sub_382C74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_382CB0(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    char v82 = (os_log_t *)sub_138E8(13);
    AudioObjectID v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      OSStatus v84 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 560;
      __int16 v148 = 2080;
      *(void *)v149 = v84;
      _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)&buf,  0x1Cu);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v86 = (os_log_t *)sub_138E8(13);
    uint64_t v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      UInt32 v88 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 561;
      __int16 v148 = 2080;
      *(void *)v149 = v88;
      *(_WORD *)&v149[8] = 1024;
      *(_DWORD *)&v149[10] = a3;
      *(_WORD *)&v149[14] = 2048;
      *(void *)&v149[16] = a4;
      _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    int v89 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v89 = &off_4865A0;
    v89[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v90 = (os_log_t *)sub_138E8(13);
    char v91 = *v90;
    if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      int v92 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 562;
      __int16 v148 = 2080;
      *(void *)v149 = "inData";
      *(_WORD *)&v149[8] = 2080;
      *(void *)&v149[10] = v92;
      _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)&buf,  0x26u);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    __int16 v93 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v93 = &off_4865A0;
    v93[2] = 561211770;
  }

  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1685483629)
  {
    switch(v12)
    {
      case 1162046576:
        float v20 = *a6;
        int v21 = (os_log_t *)sub_138E8(17);
        UInt32 v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          __int16 v146 = 1024;
          int v147 = 583;
          __int16 v148 = 1024;
          *(float *)v149 = v20;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d set DevicePropertyCodecLowPowerModeEnable = %u.",  (uint8_t *)&buf,  0x18u);
        }

        break;
      case 1162701936:
        int v24 = *(_DWORD *)a6;
        UInt32 v25 = (os_log_t *)sub_138E8(17);
        UInt32 v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          __int16 v146 = 1024;
          int v147 = 595;
          __int16 v148 = 1024;
          *(_DWORD *)v149 = v24;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d set DevicePropertyMicrophoneLowPowerModeEnable = %u.",  (uint8_t *)&buf,  0x18u);
        }

        break;
      case 1634759542:
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          unsigned int v108 = (os_log_t *)sub_138E8(13);
          __int16 v109 = *v108;
          if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
          {
            v155.__cv_.__uint64_t sig = *(void *)a2;
            *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
            sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
            int v110 = v156.__m_.__opaque[15];
            uint64_t sig = v156.__m_.__sig;
            int v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            uint64_t v113 = &v156;
            buf.int mSelector = 136316162;
            *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
            if (v110 < 0) {
              uint64_t v113 = (std::mutex *)sig;
            }
            __int16 v146 = 1024;
            int v147 = 568;
            __int16 v148 = 2080;
            *(void *)v149 = v113;
            *(_WORD *)&v149[8] = 1024;
            *(_DWORD *)&v149[10] = a5;
            *(_WORD *)&v149[14] = 1024;
            *(_DWORD *)&v149[16] = v112;
            _os_log_impl( &dword_0,  v109,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              (uint8_t *)&buf,
              0x28u);
            if (v156.__m_.__opaque[15] < 0) {
              operator delete((void *)v156.__m_.__sig);
            }
          }

          uint64_t v114 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v114 = &off_4865A0;
          v114[2] = 561211770;
        }

        AudioObjectPropertyScope v16 = *(_DWORD *)(a2 + 4);
        buf.int mSelector = 1987013732;
        buf.AudioObjectPropertyScope mScope = v16;
        buf.AudioObjectPropertyElement mElement = 0;
        (*(void (**)(uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, float *))(*(void *)a1 + 48LL))( a1,  &buf,  a3,  a4,  a5,  a6);
        return;
      default:
LABEL_40:
        sub_3686A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
        return;
    }

    sub_3686A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
    return;
  }

  if (v12 > 1836414052)
  {
    if (v12 == 1836414053)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
      {
        uint64_t v101 = (os_log_t *)sub_138E8(13);
        uint64_t v102 = *v101;
        if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
        {
          v155.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
          int v103 = v156.__m_.__opaque[15];
          uint64_t v104 = v156.__m_.__sig;
          int v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          int v106 = &v156;
          buf.int mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          if (v103 < 0) {
            int v106 = (std::mutex *)v104;
          }
          __int16 v146 = 1024;
          int v147 = 625;
          __int16 v148 = 2080;
          *(void *)v149 = v106;
          *(_WORD *)&v149[8] = 1024;
          *(_DWORD *)&v149[10] = a5;
          *(_WORD *)&v149[14] = 1024;
          *(_DWORD *)&v149[16] = v105;
          _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v156.__m_.__opaque[15] < 0) {
            operator delete((void *)v156.__m_.__sig);
          }
        }

        __int16 v107 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v107 = &off_4865A0;
        v107[2] = 561211770;
      }

      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v23 = sub_1F4000();
        sub_1F57EC(v23, *(_DWORD *)a6 != 0);
        return;
      }
    }

    else if (v12 == 1987013732)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
      {
        BOOL v115 = (os_log_t *)sub_138E8(13);
        __int16 v116 = *v115;
        if (*v115 && os_log_type_enabled(*v115, OS_LOG_TYPE_ERROR))
        {
          v155.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
          int v117 = v156.__m_.__opaque[15];
          uint64_t v118 = v156.__m_.__sig;
          int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          std::condition_variable v120 = &v156;
          buf.int mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          if (v117 < 0) {
            std::condition_variable v120 = (std::mutex *)v118;
          }
          __int16 v146 = 1024;
          int v147 = 601;
          __int16 v148 = 2080;
          *(void *)v149 = v120;
          *(_WORD *)&v149[8] = 1024;
          *(_DWORD *)&v149[10] = a5;
          *(_WORD *)&v149[14] = 1024;
          *(_DWORD *)&v149[16] = v119;
          _os_log_impl( &dword_0,  v116,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v156.__m_.__opaque[15] < 0) {
            operator delete((void *)v156.__m_.__sig);
          }
        }

        std::mutex v121 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::mutex v121 = &off_4865A0;
        v121[2] = 561211770;
      }

      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v17 = sub_1F4000();
        if (sub_1F4DF8(v17))
        {
          float v18 = (float)(*a6 + 100.0) / 100.0;
          uint64_t v19 = sub_1F4000();
          sub_1F51DC(v19, v18);
        }

        return;
      }
    }

    goto LABEL_40;
  }

  if (v12 == 1685483630)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      int v94 = (os_log_t *)sub_138E8(13);
      uint64_t v95 = *v94;
      if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
      {
        v155.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
        int v96 = v156.__m_.__opaque[15];
        uint64_t v97 = v156.__m_.__sig;
        int v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        uint64_t v99 = &v156;
        buf.int mSelector = 136316162;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
        if (v96 < 0) {
          uint64_t v99 = (std::mutex *)v97;
        }
        __int16 v146 = 1024;
        int v147 = 637;
        __int16 v148 = 2080;
        *(void *)v149 = v99;
        *(_WORD *)&v149[8] = 1024;
        *(_DWORD *)&v149[10] = a5;
        *(_WORD *)&v149[14] = 1024;
        *(_DWORD *)&v149[16] = v98;
        _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          (uint8_t *)&buf,
          0x28u);
        if (v156.__m_.__opaque[15] < 0) {
          operator delete((void *)v156.__m_.__sig);
        }
      }

      uint64_t v100 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v100 = &off_4865A0;
      v100[2] = 561211770;
    }

    *(_BYTE *)(a1 + 684) = *(_DWORD *)a6 != 0;
    return;
  }

  if (v12 != 1768255076) {
    goto LABEL_40;
  }
  if (__PAIR64__(*(_DWORD *)(a2 + 4), 1768255076) != qword_4A93B8 || *(_DWORD *)(a2 + 8) != dword_4A93C0)
  {
    __int16 v27 = (os_log_t *)sub_138E8(17);
    os_log_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      buf.int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 663;
      __int16 v29 = "%25s:%-5d Unknown property address using selector kAppleEmbeddedAudio_DevicePropertyInputEnableDevice. Ignoring.";
      UInt32 v30 = v28;
      os_log_type_t v31 = OS_LOG_TYPE_ERROR;
      uint32_t v32 = 18;
LABEL_48:
      _os_log_impl(&dword_0, v30, v31, v29, (uint8_t *)&buf, v32);
      return;
    }

    return;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))(a1, a2, a3, a4) != (_DWORD)a5)
  {
    uint64_t v122 = (os_log_t *)sub_138E8(13);
    v123 = *v122;
    if (*v122 && os_log_type_enabled(*v122, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      int v124 = v156.__m_.__opaque[15];
      uint64_t v125 = v156.__m_.__sig;
      int v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
      uint64_t v127 = &v156;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      if (v124 < 0) {
        uint64_t v127 = (std::mutex *)v125;
      }
      __int16 v146 = 1024;
      int v147 = 644;
      __int16 v148 = 2080;
      *(void *)v149 = v127;
      *(_WORD *)&v149[8] = 1024;
      *(_DWORD *)&v149[10] = a5;
      *(_WORD *)&v149[14] = 1024;
      *(_DWORD *)&v149[16] = v126;
      _os_log_impl( &dword_0,  v123,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        (uint8_t *)&buf,
        0x28u);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    uint64_t v128 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v128 = &off_4865A0;
    v128[2] = 561211770;
  }

  float v13 = *a6;
  uint64_t v14 = (unsigned int *)(a1 + 688);
  if (v13 == 0.0)
  {
    if (!atomic_load(v14))
    {
      uint64_t v129 = (os_log_t *)sub_138E8(13);
      v130 = *v129;
      if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
        __int16 v146 = 1024;
        int v147 = 648;
        _os_log_impl( &dword_0,  v130,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Attempt to power off the built-in mic when mMicPowerOnCount is 0.",  (uint8_t *)&buf,  0x12u);
      }

      uint64_t v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v131, "Attempt to power off the built-in mic when mMicPowerOnCount is 0.");
    }

    do
    {
      unsigned int v34 = __ldaxr(v14);
      unsigned int v35 = v34 - 1;
    }

    while (__stlxr(v35, v14));
    if (v35) {
      return;
    }
  }

  else
  {
    do
      unsigned int v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (v15) {
      return;
    }
  }

  uint64_t v36 = (os_log_t *)sub_138E8(17);
  CFDictionaryRef v37 = *v36;
  if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_INFO))
  {
    __int128 v38 = "dis";
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
    buf.int mSelector = 136315650;
    if (v13 != 0.0) {
      __int128 v38 = "en";
    }
    __int16 v146 = 1024;
    int v147 = 654;
    __int16 v148 = 2080;
    *(void *)v149 = v38;
    _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_INFO,  "%25s:%-5d Non-redundant requesting to %sable microphone power. Calling the HAL.",  (uint8_t *)&buf,  0x1Cu);
  }

  AudioObjectID v39 = *(_DWORD *)(a1 + 268);
  int inData = LODWORD(v13) != 0;
  uint64_t v40 = sub_138E8(13);
  if ((*(_BYTE *)(v40 + 8) & 1) != 0)
  {
    io_registry_entry_t v41 = *(os_log_s **)v40;
    if (*(void *)v40)
    {
      if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
      {
        v155.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
        uint64_t v42 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v146 = 1024;
        int v147 = 166;
        __int16 v148 = 2080;
        *(void *)v149 = v42;
        *(_WORD *)&v149[8] = 1024;
        *(_DWORD *)&v149[10] = v39;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v156.__m_.__opaque[15] < 0) {
          operator delete((void *)v156.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v140 = v39;
  uint64_t v141 = *(void *)a2;
  int v142 = *(_DWORD *)(a2 + 8);
  int v143 = a3;
  char v144 = a4;
  unint64_t v43 = sub_3880D4((uint64_t)&v140);
  if (HIDWORD(v43)) {
    BOOL v44 = 0;
  }
  else {
    BOOL v44 = inData == (_DWORD)v43;
  }
  int v45 = v44;
  uint64_t v46 = sub_138E8(13);
  uint64_t v47 = *(void *)(v46 + 8);
  if (v45)
  {
    if ((v47 & 1) != 0)
    {
      os_log_t v48 = *(os_log_t *)v46;
      if (*(void *)v46)
      {
        if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v146 = 1024;
          int v147 = 191;
          __int16 v148 = 1024;
          *(_DWORD *)v149 = v39;
          __int16 v29 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitiv"
                "e for a notification on id %u.";
LABEL_77:
          UInt32 v30 = v48;
          os_log_type_t v31 = OS_LOG_TYPE_DEBUG;
          uint32_t v32 = 24;
          goto LABEL_48;
        }
      }
    }

    return;
  }

  if ((v47 & 1) != 0)
  {
    int v49 = *(os_log_s **)v46;
    if (*(void *)v46)
    {
      if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
      {
        v155.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
        uint64_t v50 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v146 = 1024;
        int v147 = 199;
        __int16 v148 = 2080;
        *(void *)v149 = v50;
        *(_WORD *)&v149[8] = 1024;
        *(_DWORD *)&v149[10] = v39;
        _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v156.__m_.__opaque[15] < 0) {
          operator delete((void *)v156.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v51 = AudioObjectSetPropertyData(v39, &buf, a3, a4, 4u, &inData);
  if ((_DWORD)v51)
  {
    BOOL v52 = (os_log_t *)sub_138E8(13);
    std::string v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v156, v51);
      int v54 = v156.__m_.__opaque[15];
      uint64_t v55 = v156.__m_.__sig;
      uint64_t inClientData = *(void *)a2;
      int v138 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v155, (unsigned int *)&inClientData);
      UInt32 v56 = &v156;
      if (v54 < 0) {
        UInt32 v56 = (std::mutex *)v55;
      }
      if (v155.__cv_.__opaque[15] >= 0) {
        uint64_t v57 = (uint64_t)&v155;
      }
      else {
        uint64_t v57 = v155.__cv_.__sig;
      }
      buf.int mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v146 = 1024;
      int v147 = 207;
      __int16 v148 = 1024;
      *(_DWORD *)v149 = v51;
      *(_WORD *)&v149[4] = 2080;
      *(void *)&v149[6] = v56;
      *(_WORD *)&v149[14] = 2080;
      *(void *)&v149[16] = v57;
      *(_WORD *)&v149[24] = 1024;
      *(_DWORD *)&v149[26] = v39;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (v155.__cv_.__opaque[15] < 0) {
        operator delete((void *)v155.__cv_.__sig);
      }
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    return;
  }

  unint64_t v58 = sub_3880D4((uint64_t)&v140);
  if (HIDWORD(v58) || inData != (_DWORD)v58)
  {
    memset(v156.__m_.__opaque, 0, sizeof(v156.__m_.__opaque));
    v155.__cv_.__uint64_t sig = 1018212795LL;
    memset(v155.__cv_.__opaque, 0, sizeof(v155.__cv_.__opaque));
    v156.__m_.__uint64_t sig = 850045863LL;
    char v139 = 0;
    sub_7D684(&inClientData, v39, (AudioObjectPropertyAddress *)a2, (uint64_t)&v155, (uint64_t)&v156, (uint64_t)&v139);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v63.__d_.__rep_) / -1000)
    {
      unint64_t v61 = sub_3880D4((uint64_t)&v140);
      int v62 = v61;
      if (HIDWORD(v61)) {
        goto LABEL_149;
      }
      if (inData == (_DWORD)v61) {
        break;
      }
      if (i <= 0)
      {
        __int16 v79 = (os_log_t *)sub_138E8(13);
        os_log_t v80 = *v79;
        if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
        {
          uint64_t v133 = *(void *)a2;
          int v134 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v133);
          if (v136 >= 0) {
            p_luint64_t k = &__lk;
          }
          else {
            p_luint64_t k = __lk.__m_;
          }
          buf.int mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v146 = 1024;
          int v147 = 248;
          __int16 v148 = 2080;
          *(void *)v149 = "set";
          *(_WORD *)&v149[8] = 2080;
          *(void *)&v149[10] = p_lk;
          *(_WORD *)&v149[18] = 2080;
          *(void *)&v149[20] = "set";
          *(_WORD *)&v149[28] = 1024;
          BOOL v150 = inData == v62;
          __int16 v151 = 1024;
          int v152 = 0;
          __int16 v153 = 1024;
          AudioObjectID v154 = v39;
          __int16 v75 = "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.";
          uint64_t v76 = v80;
          os_log_type_t v77 = OS_LOG_TYPE_ERROR;
          uint32_t v78 = 66;
LABEL_147:
          _os_log_impl(&dword_0, v76, v77, v75, (uint8_t *)&buf, v78);
          if (v136 < 0) {
            operator delete(__lk.__m_);
          }
        }

        goto LABEL_149;
      }

      v63.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v64 = sub_138E8(13);
      if ((*(_BYTE *)(v64 + 8) & 1) != 0)
      {
        int v65 = *(os_log_s **)v64;
        if (*(void *)v64)
        {
          if (os_log_type_enabled(*(os_log_t *)v64, OS_LOG_TYPE_DEBUG))
          {
            buf.int mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v146 = 1024;
            int v147 = 257;
            __int16 v148 = 2080;
            *(void *)v149 = "with timeout";
            *(_WORD *)&v149[8] = 1024;
            *(_DWORD *)&v149[10] = v39;
            _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.int mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v156;
      __lk.__owns_ = 1;
      std::mutex::lock(&v156);
      v66.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v139)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v66.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v67 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_113;
          }
          v68.__d_.__rep_ = v67 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v68.__d_.__rep_ >= 1) {
            break;
          }
LABEL_131:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v67 || v139) {
            goto LABEL_113;
          }
        }

        std::chrono::steady_clock::now();
        v69.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v69.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = 0LL;
          goto LABEL_127;
        }

        if (v69.__d_.__rep_ < 1)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v69.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_127;
          }

void sub_384494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

BOOL sub_384548( void *a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    BOOL v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v13);
      CFIndex v11 = v17 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)float v20 = 681;
      *(_WORD *)&v20[4] = 2080;
      *(void *)&v20[6] = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v17 < 0) {
        operator delete(__p);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(void *)&a2->mSelector != qword_4A9388 || a2->mElement != dword_4A9390)
    && (*(void *)&a2->mSelector != qword_4A9398 || a2->mElement != dword_4A93A0)
    && (*(void *)&a2->mSelector != qword_4A93A8 || a2->mElement != dword_4A93B0))
  {
    return sub_368FB0((uint64_t)a1, a2, a3, a4);
  }

  AudioObjectPropertyAddress __p = *(void **)&a2->mSelector;
  AudioObjectPropertyElement v16 = a2->mElement;
  *(void *)AudioObjectPropertyAddress buf = *(void *)&a2->mSelector;
  *(_DWORD *)&buf[8] = a2->mElement;
  *(void *)&void v20[2] = a3;
  *(void *)&v20[10] = a4;
  sub_1885D4(a1 + 64, (unsigned int *)&__p, (unsigned int *)buf);
  return 1LL;
}

BOOL sub_3847D0( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_4A9388 && a2->mElement == dword_4A9390
    || *(void *)&a2->mSelector == qword_4A9398 && a2->mElement == dword_4A93A0
    || *(void *)&a2->mSelector == qword_4A93A8 && a2->mElement == dword_4A93B0)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    int v12 = a3;
    sub_18803C((uint64_t **)(a1 + 512), (unsigned int *)&v14, (unsigned int *)&v10);
    return 1LL;
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

unsigned __int8 *sub_384914(uint64_t a1)
{
  uint64_t v2 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v2 + 56LL))(v2, sub_3873D4);
  return sub_369228(a1);
}

uint64_t sub_38494C(uint64_t a1, double a2)
{
  double v19 = a2;
  uint64_t v4 = sub_369618(a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200LL))(a1);
  uint64_t v17 = 0x676C6F62616F7372LL;
  int v18 = 0;
  if (v5) {
    BOOL v6 = (_DWORD)v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = v5;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 16LL))(v5, &v17))
    {
      uint64_t v8 = sub_138E8(17);
      uint64_t v9 = sub_138E8(36);
      char v10 = 0;
      uint64_t v11 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1LL;
        if ((v14 & 1) != 0) {
          goto LABEL_13;
        }
      }

      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_13:
      unsigned int v15 = *(os_log_s **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 837;
        __int16 v23 = 2048;
        double v24 = a2;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informing AOP of Codec sample rate %f Hz", buf, 0x1Cu);
      }

      (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, double *))(*(void *)v7 + 48LL))( v7,  &v17,  0LL,  0LL,  8LL,  &v19);
    }
  }

  return v4;
}

uint64_t sub_384B04(uint64_t a1)
{
  v163[0] = 1;
  *(void *)&v163[1] = 0x6F7574706D757465LL;
  v163[3] = 1;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v163[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v163[1],  0LL,  0LL,  4LL,  v163);
  }
  v163[3] = 2;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v163[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v163[1],  0LL,  0LL,  4LL,  v163);
  }
  v163[3] = 3;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v163[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v163[1],  0LL,  0LL,  4LL,  v163);
  }
  v163[3] = 4;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v163[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v163[1],  0LL,  0LL,  4LL,  v163);
  }
  int v161 = 4;
  float v162 = 0.0;
  strcpy((char *)&v163[1], "dlovptuo");
  BYTE1(v163[3]) = 0;
  HIWORD(v163[3]) = 0;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v163[1]))
  {
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, float *))(*(void *)a1 + 40LL))( a1,  &v163[1],  0LL,  0LL,  &v161,  &v162);
    float v2 = v162;
    if (v162 != 0.0)
    {
      float v162 = 0.0;
      (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, float *, float))(*(void *)a1 + 48LL))( a1,  &v163[1],  0LL,  0LL,  4LL,  &v162,  v2);
    }
  }

  BYTE1(v163[3]) = 0;
  HIWORD(v163[3]) = 0;
  strcpy((char *)v163, "Ms2icrscbolg");
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v163[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v163[1],  0LL,  0LL,  4LL,  v163);
  }
  *(void *)&__int128 inAddress = 0x6F7574706A61636BLL;
  DWORD2(inAddress) = 0;
  AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v3, (const AudioObjectPropertyAddress *)&inAddress))
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    double v5 = sub_387ECC(v4, 1u);
    double v7 = v6;
    uint64_t v8 = operator new(0x1E0uLL);
    sub_1C8600((uint64_t)v8, a1, 1u, 74, v5, v7);
    sub_1D5AE0((void *)a1, (uint64_t)v8);
    sub_1D55D4((uint64_t *)a1, 1u, 1885892727LL, (uint64_t)v8);
    sub_1D580C(a1, 1u, 1885892727LL, (uint64_t)v8);
    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1)
    {
      uint64_t v9 = (os_log_t *)sub_138E8(17);
      char v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1006;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating TTY controls", buf, 0x12u);
      }

      sub_1D55D4((uint64_t *)a1, 1u, 1886680175LL, (uint64_t)v8);
      sub_1D580C(a1, 1u, 1886680175LL, (uint64_t)v8);
    }
  }

  AudioObjectID v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  double v12 = sub_387ECC(v11, 3u);
  double v14 = v13;
  unsigned int v15 = operator new(0x1E0uLL);
  sub_1C8600((uint64_t)v15, a1, 3u, 74, v12, v14);
  sub_1D5AE0((void *)a1, (uint64_t)v15);
  sub_1D55D4((uint64_t *)a1, 1u, 1886545251LL, (uint64_t)v15);
  sub_1D580C(a1, 1u, 1886545251LL, (uint64_t)v15);
  *(void *)AudioObjectPropertyAddress buf = 0x6F7574706D757465LL;
  *(_DWORD *)&buf[8] = 5;
  *(void *)&__int128 v187 = 0x6F757470766F6C6DLL;
  DWORD2(v187) = 5;
  AudioObjectID v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v16, (const AudioObjectPropertyAddress *)buf))
  {
    AudioObjectID v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    if (AudioObjectHasProperty(v17, (const AudioObjectPropertyAddress *)&v187))
    {
      AudioObjectID v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      double v19 = sub_387ECC(v18, 5u);
      double v21 = v20;
      int v22 = operator new(0x1E0uLL);
      sub_1C8600((uint64_t)v22, a1, 5u, 74, v19, v21);
      __int16 v23 = v22;
    }

    else
    {
      __int16 v23 = operator new(0x50uLL);
      sub_EC558((uint64_t)v23);
      sub_1D5AE0((void *)a1, (uint64_t)v23);
      int v22 = operator new(0x68uLL);
      sub_EC5B8((uint64_t)v22, 0);
    }

    sub_1D5AE0((void *)a1, (uint64_t)v22);
    sub_1D55D4((uint64_t *)a1, 1u, 1885888867LL, (uint64_t)v23);
    sub_1D580C(a1, 1u, 1885888867LL, (uint64_t)v22);
  }

  sub_9005C();
  char v24 = byte_48CC71;
  *(void *)&__int128 v185 = 0x696E70746D757465LL;
  DWORD2(v185) = 0;
  AudioObjectID v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v25, (const AudioObjectPropertyAddress *)&v185))
  {
    UInt32 v26 = operator new(0x100uLL);
    uint64_t v181 = 0x676C6F626D757465LL;
    LODWORD(v182) = 0;
    sub_220150((uint64_t)v26, &v181, (uint64_t)&v185, a1);
    sub_1D5AE0((void *)a1, (uint64_t)v26);
    if ((v24 & 1) != 0) {
      sub_1D55D4((uint64_t *)a1, 0, 1886216809LL, (uint64_t)v26);
    }
    sub_1D55D4((uint64_t *)a1, 0, 1886222185LL, (uint64_t)v26);
  }

  uint64_t v181 = 0x696E7074766F6C64LL;
  LODWORD(v182) = 0;
  AudioObjectID v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v27, (const AudioObjectPropertyAddress *)&v181))
  {
    os_log_t v28 = operator new(0x128uLL);
    sub_236254((uint64_t)v28, a1, 1768845428LL, 0, 0, 59);
    sub_1D5AE0((void *)a1, (uint64_t)v28);
    if ((v24 & 1) != 0) {
      sub_1D580C(a1, 0, 1886216809LL, (uint64_t)v28);
    }
    sub_1D580C(a1, 0, 1886222185LL, (uint64_t)v28);
  }

  if (sub_387BE4(a1))
  {
    *(void *)AudioObjectPropertyAddress buf = 0x6F757470534E5263LL;
    *(_DWORD *)&buf[8] = 1;
    if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)a1 + 16LL))(a1, buf))
    {
      LODWORD(inAddress) = 0;
      LODWORD(v187) = 4;
      (*(void (**)(uint64_t, _BYTE *, void, void, __int128 *, __int128 *))(*(void *)a1 + 40LL))( a1,  buf,  0LL,  0LL,  &v187,  &inAddress);
      BOOL v29 = *(float *)&inAddress > 96.0;
    }

    else
    {
      BOOL v29 = 0;
    }

    UInt32 v30 = (os_log_t *)sub_138E8(17);
    os_log_type_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEBUG))
    {
      uint32_t v32 = "16-bit";
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (v29) {
        uint32_t v32 = "24-bit";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1114;
      __int16 v194 = 2080;
      v195 = v32;
      _os_log_impl(&dword_0, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a %s wired-headphones port", buf, 0x1Cu);
    }

    BOOL v33 = operator new(0x228uLL);
    v33[1] = 0LL;
    void v33[2] = 0LL;
    *BOOL v33 = off_485BF0;
    sub_15AA94((uint64_t)(v33 + 3), a1, v29);
    *(void *)&__int128 v187 = v33 + 3;
    *((void *)&v187 + 1) = v33;
    sub_AFDAC((uint64_t)&v187, v33 + 13, (uint64_t)(v33 + 3));
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312LL))(a1) & 0xFF00000000LL) != 0)
    {
      unsigned int v34 = (os_log_t *)sub_138E8(17);
      unsigned int v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1119;
        _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating a wired tapstream port", buf, 0x12u);
      }

      uint64_t v36 = operator new(0x228uLL);
      v36[1] = 0LL;
      void v36[2] = 0LL;
      *uint64_t v36 = off_485BB8;
      *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Wired Headphones Reference", 0x600u);
      buf[8] = 1;
      sub_31AB40((uint64_t)(v36 + 3), a1, (uint64_t)buf);
      sub_19DFC((uint64_t)buf);
      *(void *)&__int128 inAddress = v36 + 3;
      *((void *)&inAddress + 1) = v36;
      sub_AFDAC((uint64_t)&inAddress, v36 + 13, (uint64_t)(v36 + 3));
      __int128 v184 = inAddress;
      __int128 inAddress = 0uLL;
      sub_3711D4(a1, (void ***)&v184);
      CFDictionaryRef v37 = (std::__shared_weak_count *)*((void *)&v184 + 1);
      if (*((void *)&v184 + 1))
      {
        __int128 v38 = (unint64_t *)(*((void *)&v184 + 1) + 8LL);
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      uint64_t v40 = (std::__shared_weak_count *)*((void *)&inAddress + 1);
      if (*((void *)&inAddress + 1))
      {
        io_registry_entry_t v41 = (unint64_t *)(*((void *)&inAddress + 1) + 8LL);
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }

    if (sub_387C94(a1))
    {
      unint64_t v43 = (os_log_t *)sub_138E8(17);
      BOOL v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1128;
        _os_log_impl(&dword_0, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a wired-microphone port", buf, 0x12u);
      }

      uint64_t v45 = *(void *)(a1 + 664);
      uint64_t v48 = *(void *)(v45 + 72);
      uint64_t v46 = v45 + 72;
      uint64_t v47 = v48;
      if (!v48) {
        goto LABEL_72;
      }
      uint64_t v49 = v46;
      do
      {
        unsigned int v50 = *(_DWORD *)(v47 + 32);
        BOOL v51 = v50 >= 0x706D7769;
        if (v50 >= 0x706D7769) {
          BOOL v52 = (uint64_t *)v47;
        }
        else {
          BOOL v52 = (uint64_t *)(v47 + 8);
        }
        if (v51) {
          uint64_t v49 = v47;
        }
        uint64_t v47 = *v52;
      }

      while (*v52);
      if (v49 == v46 || *(_DWORD *)(v49 + 32) > 0x706D7769u) {
LABEL_72:
      }
        uint64_t v49 = v46;
      uint64_t v181 = 0LL;
      v182 = 0LL;
      uint64_t v183 = 0LL;
      sub_7A5B8( &v181,  *(const void **)(v49 + 40),  *(void *)(v49 + 48),  (uint64_t)(*(void *)(v49 + 48) - *(void *)(v49 + 40)) >> 2);
      std::string v53 = (int *)v181;
      sub_389724((char **)buf, (int *)v181, v182);
      if (v53)
      {
        v182 = v53;
        operator delete(v53);
      }

      int v54 = operator new(0x228uLL);
      v54[1] = 0LL;
      v54[2] = 0LL;
      *int v54 = off_485C28;
      sub_15AF80((uint64_t)(v54 + 3), a1, (char **)buf);
      *(void *)&__int128 inAddress = v54 + 3;
      *((void *)&inAddress + 1) = v54;
      sub_AFDAC((uint64_t)&inAddress, v54 + 13, (uint64_t)(v54 + 3));
      sub_204854((uint64_t)(v54 + 3), v187);
      __int128 v180 = inAddress;
      __int128 inAddress = 0uLL;
      sub_3711D4(a1, (void ***)&v180);
      uint64_t v55 = (std::__shared_weak_count *)*((void *)&v180 + 1);
      if (*((void *)&v180 + 1))
      {
        UInt32 v56 = (unint64_t *)(*((void *)&v180 + 1) + 8LL);
        do
          unint64_t v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }

      unint64_t v58 = (std::__shared_weak_count *)*((void *)&inAddress + 1);
      if (*((void *)&inAddress + 1))
      {
        uint64_t v59 = (unint64_t *)(*((void *)&inAddress + 1) + 8LL);
        do
          unint64_t v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }

      *(void *)&__int128 inAddress = buf;
      sub_7A668((void ***)&inAddress);
    }

    if (sub_387D60(a1))
    {
      unint64_t v61 = (os_log_t *)sub_138E8(17);
      int v62 = *v61;
      if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1139;
        _os_log_impl(&dword_0, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating TTY ports", buf, 0x12u);
      }

      uint64_t v63 = *(void *)(a1 + 664);
      uint64_t v66 = *(void *)(v63 + 72);
      uint64_t v64 = v63 + 72;
      uint64_t v65 = v66;
      if (!v66) {
        goto LABEL_101;
      }
      uint64_t v67 = v64;
      do
      {
        unsigned int v68 = *(_DWORD *)(v65 + 32);
        BOOL v69 = v68 >= 0x70747469;
        if (v68 >= 0x70747469) {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = (uint64_t *)v65;
        }
        else {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = (uint64_t *)(v65 + 8);
        }
        if (v69) {
          uint64_t v67 = v65;
        }
        uint64_t v65 = *v70;
      }

      while (*v70);
      if (v67 == v64 || *(_DWORD *)(v67 + 32) > 0x70747469u) {
LABEL_101:
      }
        uint64_t v67 = v64;
      uint64_t v177 = 0LL;
      v178 = 0LL;
      uint64_t v179 = 0LL;
      sub_7A5B8( &v177,  *(const void **)(v67 + 40),  *(void *)(v67 + 48),  (uint64_t)(*(void *)(v67 + 48) - *(void *)(v67 + 40)) >> 2);
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v71 = v177;
      sub_389724((char **)buf, v177, v178);
      if (v71)
      {
        v178 = v71;
        operator delete(v71);
      }

      uint64_t v72 = operator new(0x228uLL);
      v72[1] = 0LL;
      v72[2] = 0LL;
      *uint64_t v72 = off_485C60;
      uint64_t v73 = (uint64_t)(v72 + 3);
      sub_187B4C((uint64_t)(v72 + 3), a1, (char **)buf);
      *(void *)&__int128 v185 = v72 + 3;
      *((void *)&v185 + 1) = v72;
      sub_AFDAC((uint64_t)&v185, v72 + 13, (uint64_t)(v72 + 3));
      __int128 inAddress = 0uLL;
      uint64_t v191 = 0LL;
      int v74 = operator new(0x228uLL);
      v74[1] = 0LL;
      v74[2] = 0LL;
      *int v74 = off_486108;
      sub_187924((uint64_t)(v74 + 3), a1, (char **)&inAddress);
      __p[0] = v74 + 3;
      __p[1] = v74;
      sub_AFDAC((uint64_t)__p, v74 + 13, (uint64_t)(v74 + 3));
      *(void *)&__int128 v189 = &inAddress;
      sub_7A668((void ***)&v189);
      sub_204854(v73, (uint64_t)(v74 + 3));
      __int128 v176 = v185;
      __int128 v185 = 0uLL;
      sub_3711D4(a1, (void ***)&v176);
      __int16 v75 = (std::__shared_weak_count *)*((void *)&v176 + 1);
      if (*((void *)&v176 + 1))
      {
        uint64_t v76 = (unint64_t *)(*((void *)&v176 + 1) + 8LL);
        do
          unint64_t v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }

      __int128 v175 = *(_OWORD *)__p;
      __p[0] = 0LL;
      __p[1] = 0LL;
      sub_3711D4(a1, (void ***)&v175);
      uint32_t v78 = (std::__shared_weak_count *)*((void *)&v175 + 1);
      if (*((void *)&v175 + 1))
      {
        __int16 v79 = (unint64_t *)(*((void *)&v175 + 1) + 8LL);
        do
          unint64_t v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }

      int v81 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        char v82 = (unint64_t *)((char *)__p[1] + 8);
        do
          unint64_t v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }

      OSStatus v84 = (std::__shared_weak_count *)*((void *)&v185 + 1);
      if (*((void *)&v185 + 1))
      {
        uint64_t v85 = (unint64_t *)(*((void *)&v185 + 1) + 8LL);
        do
          unint64_t v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }

      *(void *)&__int128 inAddress = buf;
      sub_7A668((void ***)&inAddress);
    }

    __int128 v174 = v187;
    __int128 v187 = 0uLL;
    sub_3711D4(a1, (void ***)&v174);
    uint64_t v87 = (std::__shared_weak_count *)*((void *)&v174 + 1);
    if (*((void *)&v174 + 1))
    {
      UInt32 v88 = (unint64_t *)(*((void *)&v174 + 1) + 8LL);
      do
        unint64_t v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }

    uint64_t v90 = (std::__shared_weak_count *)*((void *)&v187 + 1);
    if (*((void *)&v187 + 1))
    {
      char v91 = (unint64_t *)(*((void *)&v187 + 1) + 8LL);
      do
        unint64_t v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }

  *(void *)&v173.int mSelector = 0x6F7574706D757465LL;
  v173.AudioObjectPropertyElement mElement = 4;
  AudioObjectID v93 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v93, &v173))
  {
    int v94 = (os_log_t *)sub_138E8(17);
    uint64_t v95 = *v94;
    if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1159;
      _os_log_impl(&dword_0, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a speaker port", buf, 0x12u);
    }

    __int128 v187 = 0uLL;
    uint64_t v188 = 0LL;
    sub_F9530((uint64_t)buf, qword_4A93F8);
    __int128 v185 = 0uLL;
    uint64_t v186 = 0LL;
    int v96 = operator new(0x228uLL);
    v96[1] = 0LL;
    void v96[2] = 0LL;
    *int v96 = off_485B80;
    __p[0] = (void *)CFStringCreateWithCString(0LL, "Built-In Speaker", 0x600u);
    LOBYTE(__p[1]) = 1;
    sub_7D084(&inAddress, "");
    sub_F9638( (uint64_t)(v96 + 3),  &qword_4A93F8,  a1,  (uint64_t)&v187,  (uint64_t)buf,  (uint64_t)__p,  (char **)&v185,  &inAddress);
    v96[3] = &off_46FD40;
    *((_WORD *)v96 + 272) = 0;
    if (SHIBYTE(v191) < 0) {
      operator delete((void *)inAddress);
    }
    sub_19DFC((uint64_t)__p);
    *(void *)&__int128 v189 = v96 + 3;
    *((void *)&v189 + 1) = v96;
    sub_AFDAC((uint64_t)&v189, v96 + 13, (uint64_t)(v96 + 3));
    __int128 v172 = v189;
    __int128 v189 = 0uLL;
    sub_3711D4(a1, (void ***)&v172);
    uint64_t v97 = (std::__shared_weak_count *)*((void *)&v172 + 1);
    if (*((void *)&v172 + 1))
    {
      int v98 = (unint64_t *)(*((void *)&v172 + 1) + 8LL);
      do
        unint64_t v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }

    uint64_t v100 = (std::__shared_weak_count *)*((void *)&v189 + 1);
    if (*((void *)&v189 + 1))
    {
      uint64_t v101 = (unint64_t *)(*((void *)&v189 + 1) + 8LL);
      do
        unint64_t v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }

    *(void *)&__int128 inAddress = &v185;
    sub_7A668((void ***)&inAddress);
    sub_19DFC((uint64_t)v196);
    sub_19DFC((uint64_t)&buf[16]);
    sub_19DFC((uint64_t)buf);
    if ((void)v187) {
      operator delete((void *)v187);
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312LL))(a1) & 0xFF00000000LL) != 0)
    {
      int v103 = (os_log_t *)sub_138E8(17);
      uint64_t v104 = *v103;
      if (*v103 && os_log_type_enabled(*v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1169;
        _os_log_impl(&dword_0, v104, OS_LOG_TYPE_DEFAULT, "%25s:%-5d creating a speaker tap input port", buf, 0x12u);
      }

      int v105 = operator new(0x228uLL);
      v105[1] = 0LL;
      v105[2] = 0LL;
      *int v105 = off_484A28;
      sub_22CCE8((uint64_t)(v105 + 3), a1);
      *(void *)AudioObjectPropertyAddress buf = v105 + 3;
      *(void *)&buf[8] = v105;
      sub_AFDAC((uint64_t)buf, v105 + 13, (uint64_t)(v105 + 3));
      __int128 v171 = *(_OWORD *)buf;
      *(void *)AudioObjectPropertyAddress buf = 0LL;
      *(void *)&buf[8] = 0LL;
      sub_3711D4(a1, (void ***)&v171);
      int v106 = (std::__shared_weak_count *)*((void *)&v171 + 1);
      if (*((void *)&v171 + 1))
      {
        __int16 v107 = (unint64_t *)(*((void *)&v171 + 1) + 8LL);
        do
          unint64_t v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }

      __int16 v109 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v110 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
    }
  }

  int v112 = operator new(0x14uLL);
  __p[0] = v112;
  uint64_t v170 = v112 + 5;
  v112[4] = 1937007472;
  *(_OWORD *)int v112 = *(_OWORD *)"rvmiplmimacmpcpspctsivpvovpvcgpvcvmrgcrvgsmvpcps wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmgc"
                               "vmrplminkpstmsmmacmpcpspcts";
  __p[1] = v112 + 5;
  uint64_t v113 = (os_log_t *)sub_138E8(17);
  uint64_t v114 = *v113;
  if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1179;
    _os_log_impl(&dword_0, v114, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a receiver port", buf, 0x12u);
  }

  sub_F9530((uint64_t)buf, qword_4A93C8);
  __int128 v187 = 0uLL;
  uint64_t v188 = 0LL;
  BOOL v115 = operator new(0x228uLL);
  v115[1] = 0LL;
  v115[2] = 0LL;
  *BOOL v115 = off_485B80;
  *(void *)&__int128 v185 = CFStringCreateWithCString(0LL, "Built-In Receiver", 0x600u);
  BYTE8(v185) = 1;
  sub_7D084(&inAddress, "");
  sub_F9638( (uint64_t)(v115 + 3),  &qword_4A93C8,  a1,  (uint64_t)__p,  (uint64_t)buf,  (uint64_t)&v185,  (char **)&v187,  &inAddress);
  v115[3] = &off_46FD40;
  *((_WORD *)v115 + 272) = 0;
  if (SHIBYTE(v191) < 0) {
    operator delete((void *)inAddress);
  }
  sub_19DFC((uint64_t)&v185);
  *(void *)&__int128 v168 = v115 + 3;
  *((void *)&v168 + 1) = v115;
  sub_AFDAC((uint64_t)&v168, v115 + 13, (uint64_t)(v115 + 3));
  *(void *)&__int128 inAddress = &v187;
  sub_7A668((void ***)&inAddress);
  sub_19DFC((uint64_t)v196);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  __int16 v116 = (std::__shared_weak_count *)operator new(0x228uLL);
  *(_OWORD *)&v116->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v116->__shared_owners_;
  v116->__vftable = (std::__shared_weak_count_vtbl *)off_484A60;
  uint64_t v118 = v116 + 1;
  uint64_t v191 = 0LL;
  __int128 inAddress = 0u;
  sub_F9530((uint64_t)buf, qword_4A9980);
  *(void *)&__int128 v189 = CFStringCreateWithCString(0LL, "Receiver Tap Stream Input", 0x600u);
  BYTE8(v189) = 1;
  __int128 v187 = 0uLL;
  uint64_t v188 = 0LL;
  sub_7D084(&v185, "");
  sub_F9638( (uint64_t)&v116[1],  &qword_4A9980,  a1,  (uint64_t)&inAddress,  (uint64_t)buf,  (uint64_t)&v189,  (char **)&v187,  &v185);
  v116[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
  LOWORD(v116[22].__shared_weak_owners_) = 0;
  if (SHIBYTE(v186) < 0) {
    operator delete((void *)v185);
  }
  *(void *)&__int128 v185 = &v187;
  sub_7A668((void ***)&v185);
  sub_19DFC((uint64_t)&v189);
  sub_19DFC((uint64_t)v196);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  shared_weak_owners = (std::__shared_weak_count *)v116[4].__shared_weak_owners_;
  v116[1].__vftable = (std::__shared_weak_count_vtbl *)&off_4851E0;
  *(void *)&__int128 v167 = v116 + 1;
  *((void *)&v167 + 1) = v116;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_187;
    }
    do
      unint64_t v120 = __ldxr(p_shared_owners);
    while (__stxr(v120 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v116->__shared_weak_owners_;
    do
      unint64_t v122 = __ldxr(p_shared_weak_owners);
    while (__stxr(v122 + 1, p_shared_weak_owners));
    v116[4].__shared_owners_ = (uint64_t)v118;
    v116[4].__shared_weak_owners_ = (uint64_t)v116;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  else
  {
    do
      unint64_t v123 = __ldxr(p_shared_owners);
    while (__stxr(v123 + 1, p_shared_owners));
    int v124 = (unint64_t *)&v116->__shared_weak_owners_;
    do
      unint64_t v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
    v116[4].__shared_owners_ = (uint64_t)v118;
    v116[4].__shared_weak_owners_ = (uint64_t)v116;
  }

  do
    unint64_t v126 = __ldaxr(p_shared_owners);
  while (__stlxr(v126 - 1, p_shared_owners));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }

LABEL_187:
  sub_204854(v167, v168);
  __int128 v166 = v168;
  __int128 v168 = 0uLL;
  sub_3711D4(a1, (void ***)&v166);
  uint64_t v127 = (std::__shared_weak_count *)*((void *)&v166 + 1);
  if (*((void *)&v166 + 1))
  {
    uint64_t v128 = (unint64_t *)(*((void *)&v166 + 1) + 8LL);
    do
      unint64_t v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }

  __int128 v165 = v167;
  __int128 v167 = 0uLL;
  sub_3711D4(a1, (void ***)&v165);
  v130 = (std::__shared_weak_count *)*((void *)&v165 + 1);
  if (*((void *)&v165 + 1))
  {
    uint64_t v131 = (unint64_t *)(*((void *)&v165 + 1) + 8LL);
    do
      unint64_t v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }

  uint64_t v133 = (os_log_t *)sub_138E8(17);
  int v134 = *v133;
  if (*v133 && os_log_type_enabled(*v133, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1195;
    _os_log_impl(&dword_0, v134, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a HAC port", buf, 0x12u);
  }

  sub_F9530((uint64_t)buf, qword_4A9428);
  __int128 v185 = 0uLL;
  uint64_t v186 = 0LL;
  CFTypeRef v135 = operator new(0x2A0uLL);
  v135[1] = 0LL;
  v135[2] = 0LL;
  *CFTypeRef v135 = off_484A98;
  *(void *)&__int128 v189 = CFStringCreateWithCString(0LL, "Hearing Aid Compliance", 0x600u);
  BYTE8(v189) = 1;
  sub_7D084(&v187, "");
  *(void *)&__int128 inAddress = &off_484AD0;
  p___int128 inAddress = &inAddress;
  sub_FAB1C( (uint64_t)(v135 + 3),  &qword_4A9428,  a1,  (uint64_t)__p,  (uint64_t)buf,  (uint64_t)&v189,  (char **)&v185,  &v187,  (uint64_t)&inAddress);
  char v136 = p_inAddress;
  if (p_inAddress == &inAddress)
  {
    uint64_t v137 = 4LL;
    char v136 = &inAddress;
  }

  else
  {
    if (!p_inAddress) {
      goto LABEL_205;
    }
    uint64_t v137 = 5LL;
  }

  (*(void (**)(void))(*(void *)v136 + 8 * v137))();
LABEL_205:
  if (SHIBYTE(v188) < 0) {
    operator delete((void *)v187);
  }
  sub_19DFC((uint64_t)&v189);
  *(void *)&__int128 v164 = v135 + 3;
  *((void *)&v164 + 1) = v135;
  sub_AFDAC((uint64_t)&v164, v135 + 13, (uint64_t)(v135 + 3));
  __int128 inAddress = v164;
  __int128 v164 = 0uLL;
  sub_3711D4(a1, (void ***)&inAddress);
  int v138 = (std::__shared_weak_count *)*((void *)&inAddress + 1);
  if (*((void *)&inAddress + 1))
  {
    char v139 = (unint64_t *)(*((void *)&inAddress + 1) + 8LL);
    do
      unint64_t v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }

  uint64_t v141 = (std::__shared_weak_count *)*((void *)&v164 + 1);
  if (*((void *)&v164 + 1))
  {
    int v142 = (unint64_t *)(*((void *)&v164 + 1) + 8LL);
    do
      unint64_t v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }

  *(void *)&__int128 v187 = &v185;
  sub_7A668((void ***)&v187);
  sub_19DFC((uint64_t)v196);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  char v144 = (std::__shared_weak_count *)*((void *)&v167 + 1);
  if (*((void *)&v167 + 1))
  {
    char v145 = (unint64_t *)(*((void *)&v167 + 1) + 8LL);
    do
      unint64_t v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }

  int v147 = (std::__shared_weak_count *)*((void *)&v168 + 1);
  if (*((void *)&v168 + 1))
  {
    __int16 v148 = (unint64_t *)(*((void *)&v168 + 1) + 8LL);
    do
      unint64_t v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }

  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v150 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *), uint64_t))(*(void *)v150 + 48LL))( v150,  sub_3873D4,  a1);
  sub_3874A0((os_unfair_lock_s *)a1);
  *(void *)&__int128 v187 = 0x707472755354656ELL;
  DWORD2(v187) = 0;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(void *)a1 + 16LL))(a1, &v187))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    (*(void (**)(uint64_t, __int128 *, void, void, uint64_t, _BYTE *))(*(void *)a1 + 48LL))( a1,  &v187,  0LL,  0LL,  4LL,  buf);
  }

  *(void *)&__int128 v185 = 0x6F7574706D757465LL;
  DWORD2(v185) = 5;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(void *)a1 + 16LL))(a1, &v185))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1;
    (*(void (**)(uint64_t, __int128 *, void, void, uint64_t, _BYTE *))(*(void *)a1 + 48LL))( a1,  &v185,  0LL,  0LL,  4LL,  buf);
  }

  uint64_t v181 = 0x676C6F624D434373LL;
  LODWORD(v182) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v181))
  {
    uint64_t v177 = 0LL;
    int v161 = 8;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, int **))(*(void *)a1 + 40LL))( a1,  &v181,  0LL,  0LL,  &v161,  &v177);
    if (!v177)
    {
      v158 = (os_log_t *)sub_138E8(13);
      v159 = *v158;
      if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 800;
        _os_log_impl( &dword_0,  v159,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [maxChannelInfo is NULL]: Invalid Maximum Channel Info",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid Maximum Channel Info");
    }

    *(void *)&__int128 inAddress = v177;
    WORD4(inAddress) = 1;
    if (CFDictionaryContainsKey((CFDictionaryRef)v177, @"MaxInputChannelCount"))
    {
      __int16 v151 = (int *)(a1 + 680);
      if ((sub_51A88((const __CFDictionary *)inAddress, @"MaxInputChannelCount", v151) & 1) == 0)
      {
        int v152 = (os_log_t *)sub_138E8(17);
        __int16 v153 = *v152;
        if (*v152)
        {
          if (os_log_type_enabled(*v152, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 807;
            _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to convert max num input channels to UInt32",  buf,  0x12u);
          }
        }
      }

      uint64_t v154 = sub_138E8(17);
      if ((*(_BYTE *)(v154 + 8) & 1) != 0)
      {
        std::condition_variable v155 = *(os_log_s **)v154;
        if (*(void *)v154)
        {
          if (os_log_type_enabled(*(os_log_t *)v154, OS_LOG_TYPE_DEBUG))
          {
            int v156 = *v151;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 811;
            __int16 v194 = 1024;
            LODWORD(v195) = v156;
            _os_log_impl( &dword_0,  v155,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Codec specified a maximum number of input channels: %u",  buf,  0x18u);
          }
        }
      }
    }

    sub_13850((uint64_t)&inAddress);
  }

  return 1LL;
}

void sub_3866C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, char a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
}

uint64_t sub_386AFC()
{
  if ((sub_1CC090() & 1) != 0) {
    return 0LL;
  }
  unsigned __int8 v1 = (void *)sub_EAD14();
  CFStringRef v3 = CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_EAE28(v1, &v3);
  sub_19DFC((uint64_t)&v3);
  return v0;
}

void sub_386B70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_386B84(uint64_t a1, int a2)
{
  if (a2 > 1886545250)
  {
    switch(a2)
    {
      case 1886545251:
        return 3LL;
      case 1886613611:
        return 4LL;
      case 1886680175:
        return 1LL;
      default:
        goto LABEL_13;
    }
  }

  else
  {
    if (a2 != 1885888867)
    {
      if (a2 != 1885892727)
      {
        if (a2 == 1886154613) {
          return 2LL;
        }
LABEL_13:
        CFStringRef v3 = (os_log_t *)sub_138E8(17);
        char v4 = *v3;
        if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, a2);
          double v5 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          double v14 = "Device_Receiver_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 895;
          __int16 v17 = 2080;
          AudioObjectID v18 = v5;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }

        double v6 = (os_log_t *)sub_138E8(13);
        double v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, a2);
          if (v12 >= 0) {
            uint64_t v8 = __p;
          }
          else {
            uint64_t v8 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          double v14 = "Device_Receiver_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 896;
          __int16 v17 = 2080;
          AudioObjectID v18 = v8;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType: %s.",  buf,  0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
      }

      return 1LL;
    }

    return 5LL;
  }

void sub_386DEC(_Unwind_Exception *a1)
{
}

void sub_386E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_138E8(17);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    double v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 16);
        sub_1840C0(&__p, *(void *)(a2 + 8), a2);
        double v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        double v14 = "Device_Receiver_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 911;
        __int16 v17 = 2048;
        uint64_t v18 = v6;
        __int16 v19 = 2080;
        double v20 = v7;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inPortList (%zu): %s.", buf, 0x26u);
      }
    }
  }

  BOOL v8 = sub_1FF038(1886154613, a2);
  BOOL v9 = v8;
  if (v8)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    AudioObjectID v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        double v14 = "Device_Receiver_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 914;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected lineout port",  buf,  0x12u);
      }
    }
  }

  *(_BYTE *)(a1 + 656) = v9;
}

void *sub_386FB8@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1886549104)
  {
LABEL_14:
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    return result;
  }

  if (a2 != 1886216809)
  {
    uint64_t v9 = result[83];
    if (v9) {
      return sub_2E22D0(a3, v9, a2);
    }
    goto LABEL_14;
  }

  uint64_t v4 = *(void *)(result[84] + 24LL);
  if (!v4)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    AudioObjectID v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      __int32 v13 = 136315394;
      double v14 = "Device_Receiver_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 930;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: No default s ub-port specified for built-in mic.",  (uint8_t *)&v13,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
  }

  double v5 = *(__int32 **)(v4 + 32);
  uint64_t v6 = *(__int32 **)(v4 + 40);
  if ((unint64_t)((char *)v6 - (char *)v5) >= 0x41 && v5 != v6)
  {
    BOOL v8 = v5;
    while (v8[8] != 1869442665)
    {
      v8 += 16;
      if (v8 == v6) {
        goto LABEL_16;
      }
    }

    double v5 = v8;
  }

void sub_38716C(_Unwind_Exception *a1)
{
}

uint64_t sub_387188@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 144);
  if (v4 == 1886545251)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    int v8 = 0;
    uint64_t result = sub_38734C(result, 3, (uint64_t)&v8);
    if (!(_DWORD)result) {
      return result;
    }
    double v5 = operator new(4uLL);
    int v6 = v8;
    goto LABEL_7;
  }

  if (v4 == 1886613611)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    int v7 = 0;
    uint64_t result = sub_38734C(result, 4, (uint64_t)&v7);
    if (!(_DWORD)result) {
      return result;
    }
    double v5 = operator new(4uLL);
    int v6 = v7;
LABEL_7:
    *a3 = v5;
    _DWORD *v5 = v6;
    uint64_t result = (uint64_t)(v5 + 1);
    a3[1] = result;
    a3[2] = result;
    return result;
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  return result;
}

void sub_38723C(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 664);
  if (!v3)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    double v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "Device_Receiver_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 921;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No valid support policy present",  (uint8_t *)&v7,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No valid support policy present");
  }

  sub_2E0360(v3, a2, a3);
}

void sub_387330(_Unwind_Exception *exception_object)
{
}

uint64_t sub_38734C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v8 = 0x6F75747061747363LL;
  int v9 = a2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v8);
  if ((_DWORD)v5)
  {
    int v7 = 4;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, uint64_t))(*(void *)a1 + 40LL))( a1,  &v8,  0LL,  0LL,  &v7,  a3);
  }

  return v5;
}

void sub_3873D4(os_unfair_lock_s *a1)
{
  if (!a1)
  {
    float v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "Device_Receiver_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 1361;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: SystemSettingsManager passed clientData as NULL.",  (uint8_t *)&v4,  0x12u);
      }
    }
  }

  sub_3874A0(a1);
}

void sub_3874A0(os_unfair_lock_s *a1)
{
  float v2 = operator new(4uLL);
  *(void *)AudioObjectPropertyAddress buf = v2;
  *float v2 = 1885888867;
  *(void *)&buf[8] = v2 + 1;
  *(void *)&buf[16] = v2 + 1;
  strcpy(&buf[24], "cwdv");
  buf[32] = 0;
  LODWORD(v54) = 3;
  UInt32 v56 = 0LL;
  uint64_t v57 = 0LL;
  uint64_t v55 = (uint64_t *)&v56;
  int v58 = 44739242;
  CFTypeRef v59 = 0LL;
  sub_3710DC(v51, (uint64_t)a1, (uint64_t)buf);
  if (v59) {
    CFRelease(v59);
  }
  sub_32C8C(v56);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v52 >= 2)
  {
    UInt32 v26 = (os_log_t *)sub_138E8(13);
    AudioObjectID v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)&__p, a1 + 2);
      os_log_t v28 = (__val & 0x8000000000000000LL) == 0LL ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1372;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v28;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Encountered more than one Hearing Aid Compliance port in device %s",  buf,  0x1Cu);
      if (SHIBYTE(__val) < 0) {
        operator delete(__p);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Encountered more than one Hearing Aid Compliance port in device %s");
  }

  if (v52)
  {
    sub_B8CBC(&v46, (uint64_t *)(v51[1] + 16), "", 1376);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 152LL))(v46);
    (*(void (**)(uint64_t))(*(void *)v46 + 544LL))(v46);
    if (v3 != (*(unsigned int (**)(uint64_t))(*(void *)v46 + 152LL))(v46))
    {
      int v4 = operator new(4uLL);
      _DWORD *v4 = 1886545251;
      *(void *)AudioObjectPropertyAddress buf = v4;
      *(void *)&buf[8] = v4 + 1;
      *(void *)&buf[16] = v4 + 1;
      strcpy(&buf[24], "cwdv");
      buf[32] = 0;
      LODWORD(v54) = 3;
      UInt32 v56 = 0LL;
      uint64_t v57 = 0LL;
      uint64_t v55 = (uint64_t *)&v56;
      int v58 = 44739242;
      CFTypeRef v59 = 0LL;
      sub_3710DC((uint64_t *)&__p, (uint64_t)a1, (uint64_t)buf);
      if (v59) {
        CFRelease(v59);
      }
      sub_32C8C(v56);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      if (__val != 1)
      {
        UInt32 v30 = (os_log_t *)sub_138E8(13);
        os_log_type_t v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          std::to_string(&v45, __val);
          int size = (char)v45.__r_.__value_.__s.__size_;
          std::string::size_type v33 = v45.__r_.__value_.__r.__words[0];
          sub_23FE8((uint64_t)&v42, a1 + 2);
          unsigned int v34 = &v45;
          if (size < 0) {
            unsigned int v34 = (std::string *)v33;
          }
          if (v44 >= 0) {
            unsigned int v35 = &v42;
          }
          else {
            unsigned int v35 = v42;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1390;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v34;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = v35;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered %s receiver ports in device %s (expected 1)",  buf,  0x26u);
          if (SHIBYTE(v44) < 0) {
            operator delete(v42);
          }
        }

        uint64_t v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v36, "Encountered %s receiver ports in device %s (expected 1)");
      }

      sub_B8CBC((uint64_t *)buf, (uint64_t *)(v49 + 16), "", 1396);
      if (v3) {
        uint64_t v5 = 0LL;
      }
      else {
        uint64_t v5 = 1919443299LL;
      }
      (*(void (**)(void, uint64_t))(**(void **)buf + 104LL))(*(void *)buf, v5);
      __int16 v6 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      uint64_t v40 = v46;
      io_registry_entry_t v41 = v47;
      if (v47)
      {
        p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
        do
          unint64_t v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }

      sub_1873B0((uint64_t *)&v42, &v40);
      *(_DWORD *)AudioObjectPropertyAddress buf = 1852011125;
      *(void *)&buf[8] = &buf[8];
      *(void *)&buf[16] = &buf[8];
      *(void *)&uint8_t buf[24] = 0LL;
      uint64_t v11 = v44;
      if (v44)
      {
        __int32 v13 = (void **)v42;
        char v12 = v43;
        uint64_t v14 = *v43;
        *(void *)(v14 + 8) = *((void *)v42 + 1);
        *v13[1] = v14;
        uint64_t v15 = *(void *)&buf[8];
        *(void *)(*(void *)&buf[8] + 8LL) = v12;
        *char v12 = v15;
        *(void *)&buf[8] = v13;
        v13[1] = &buf[8];
        *(void *)&uint8_t buf[24] = v11;
        uint64_t v44 = 0LL;
      }

      sub_1873B0(&v37, (uint64_t *)(v49 + 16));
      *(_DWORD *)&buf[32] = 1886418288;
      uint64_t v54 = (uint64_t)&v54;
      uint64_t v55 = &v54;
      UInt32 v56 = 0LL;
      int v16 = v39;
      if (v39)
      {
        uint64_t v18 = v37;
        __int16 v17 = v38;
        uint64_t v19 = *v38;
        *(void *)(v19 + 8) = *(void *)(v37 + 8);
        **(void **)(v18 + 8) = v19;
        uint64_t v20 = v54;
        *(void *)(v54 + 8) = v17;
        *__int16 v17 = v20;
        uint64_t v54 = v18;
        *(void *)(v18 + 8) = &v54;
        UInt32 v56 = v16;
        unint64_t v39 = 0LL;
      }

      sub_EDEBC((uint64_t)&v45, (unsigned int *)buf, 2LL);
      for (uint64_t i = 40LL; i != -24; i -= 32LL)
        sub_85B80((uint64_t *)&buf[i]);
      sub_85B80(&v37);
      sub_85B80((uint64_t *)&v42);
      if (v41) {
        std::__shared_weak_count::__release_weak(v41);
      }
      uint64_t v22 = sub_546E0();
      sub_101870(v22, &v45, 0);
      sub_EDF34((void *)v45.__r_.__value_.__l.__size_);
      sub_85B80((uint64_t *)&__p);
    }

    __int16 v23 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        unint64_t v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }

  sub_85B80(v51);
}

void sub_387A78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_85B80(&a26);
  sub_7A768((uint64_t)&a24);
  sub_85B80(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_387BE4(uint64_t a1)
{
  *(void *)&inAddress.int mSelector = 0x6F7574706A61636BLL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_4A9460);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_4A9460))
  {
    AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    byte_4A9458 = AudioObjectHasProperty(v3, &inAddress) != 0;
    __cxa_guard_release(&qword_4A9460);
  }

  return byte_4A9458;
}

void sub_387C7C(_Unwind_Exception *a1)
{
}

BOOL sub_387C94(uint64_t a1)
{
  if ((sub_93B80() & 1) != 0) {
    return 0LL;
  }
  *(void *)&v7.int mSelector = 0x696E70746A61636BLL;
  v7.AudioObjectPropertyElement mElement = 0;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_4A9470);
  int v4 = &dword_4A9000;
  if ((v3 & 1) == 0)
  {
    int v5 = __cxa_guard_acquire(&qword_4A9470);
    int v4 = &dword_4A9000;
    if (v5)
    {
      AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      byte_4A9468 = AudioObjectHasProperty(v6, &v7) == 1;
      __cxa_guard_release(&qword_4A9470);
      int v4 = &dword_4A9000;
    }
  }

  return *((_BYTE *)v4 + 1128) != 0;
}

void sub_387D48(_Unwind_Exception *a1)
{
}

uint64_t sub_387D60(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_4A9480);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_4A9480))
  {
    BOOL v3 = sub_387BE4(a1)
      && sub_387C94(a1)
      && MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1;
    byte_4A9478 = v3;
    __cxa_guard_release(&qword_4A9480);
  }

  return byte_4A9478;
}

void sub_387E00(_Unwind_Exception *a1)
{
}

void *sub_387E20()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_484AD0;
  return result;
}

void sub_387E44(uint64_t a1, void *a2)
{
  *a2 = &off_484AD0;
}

BOOL sub_387E5C()
{
  uint64_t v0 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 40LL))(v0) == 543711587;
}

void sub_387E8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_484A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_387E9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_484A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_387EBC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_387ECC(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  if (!a1)
  {
    unint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      inAddress.int mSelector = 136315394;
      *(void *)&inAddress.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 97;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&inAddress,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  double outData = 0.0;
  double v15 = 0.0;
  *(void *)&inAddress.int mSelector = 0x6F75747076646223LL;
  inAddress.AudioObjectPropertyElement mElement = a2;
  UInt32 ioDataSize = 16;
  if (AudioObjectHasProperty(a1, &inAddress)) {
    AudioObjectGetPropertyData(a1, &inAddress, 0, 0LL, &ioDataSize, &outData);
  }
  switch(a2)
  {
    case 1u:
      double v8 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v8 = v15;
      }
      double v15 = v8;
      double v6 = -76.0;
      goto LABEL_14;
    case 2u:
      double v9 = v15;
      if (v15 > 0.0) {
        double v9 = 0.0;
      }
      double v15 = v9;
      double result = -58.0;
      if (outData >= -58.0) {
        double result = outData;
      }
      break;
    case 3u:
    case 5u:
      double v4 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v4 = v15;
      }
      double v15 = v4;
      double v6 = -58.0;
LABEL_14:
      double result = v6;
      if (v5 >= v6) {
        double result = v5;
      }
      break;
    case 4u:
      double result = outData;
      if (outData < -58.0) {
        double result = -58.0;
      }
      break;
    default:
      double result = outData;
      break;
  }

  return result;
}

void sub_3880B8(_Unwind_Exception *a1)
{
}

unint64_t sub_3880D4(uint64_t a1)
{
  float v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.int mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_36EF4((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    AudioObjectPropertyAddress v7 = (os_log_t *)sub_138E8(13);
    double v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        unint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          char v12 = __p;
        }
        else {
          char v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.int mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        os_log_t v28 = v11;
        __int16 v29 = 2080;
        UInt32 v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_38827C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_38829C(uint64_t a1)
{
  *(void *)a1 = off_484840;
  uint64_t v2 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_67FE8(a1 + 600);
  *(void *)(a1 + 512) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 536));
  sub_189BF4((uint64_t *)(a1 + 504));
  uint64_t v3 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return sub_36F1E0(a1);
}

uint64_t sub_388320(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  char v6 = (void *)sub_36E3FC(a1, a2, a3, a3, 0LL);
  void *v6 = off_484840;
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  sub_189C20((uint64_t)(v6 + 64));
  *(_BYTE *)(a1 + 656) = 0;
  if (sub_93B80())
  {
    *(void *)(a1 + 664) = 0LL;
  }

  else
  {
    *(void *)AudioObjectPropertyAddress inAddress = &inAddress[8];
    *(void *)&inAddress[8] = 0LL;
    v24[0] = 0LL;
    v24[1] = 0LL;
    *(void *)&inAddress[16] = 0LL;
    __int16 v23 = v24;
    sub_2DE180((uint64_t *)inAddress, 0x706D6269u, 1768778083);
    sub_2DE180((uint64_t *)inAddress, 0x706D6269u, 1768778033);
    sub_2DE180((uint64_t *)inAddress, 0x706D7769u, 1701669219);
    sub_2DE180((uint64_t *)inAddress, 0x70747469u, 1701669219);
    sub_2DE334((uint64_t)inAddress, 0x656D6963u, 1886222185);
    sub_2DE334((uint64_t)inAddress, 0x656D6963u, 1886680169);
    sub_2DE334((uint64_t)inAddress, 0x696D6963u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x696D6931u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x736D6963u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x696D6932u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x6C6D6963u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x666D6963u, 1886216809);
    AudioObjectPropertyAddress v7 = operator new(0x78uLL);
    sub_2DFDA8((uint64_t)v7, a2, inAddress);
    *(void *)(a1 + 664) = v7;
    sub_8DF20(v24[0]);
    sub_8DF20(*(void **)&inAddress[8]);
  }

  *(void *)(a1 + 672) = sub_33341C();
  *(_DWORD *)(a1 + 680) = 2;
  *(_BYTE *)(a1 + 684) = 0;
  *(_DWORD *)(a1 + 688) = 0;
  if (!a2)
  {
    AudioObjectID v13 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_Receiver_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 252;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
    }

    goto LABEL_13;
  }

  if (!a3)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_Receiver_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 253;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
    }

void sub_3887A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18 = *(void *)(v15 + 664);
  *(void *)(v15 + 664) = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  sub_67FE8(v15 + 600);
  *(void *)(v15 + 512) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v15 + 536));
  sub_189BF4((uint64_t *)(v15 + 504));
  uint64_t v19 = *(void *)(v15 + 496);
  *(void *)(v15 + 496) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_36F1E0(v15);
  _Unwind_Resume(a1);
}

void *sub_38889C()
{
  double result = operator new(0x10uLL);
  *double result = &off_484B18;
  return result;
}

void sub_3888C0(uint64_t a1, void *a2)
{
  *a2 = &off_484B18;
}

uint64_t sub_3888D8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_5954C();
  unint64_t v4 = (char *)operator new(0x18uLL);
  *((_DWORD *)v4 + 2) = 1;
  *(void *)unint64_t v4 = &off_484B60;
  *(void *)(v4 + 12) = *a2;
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v3 + 328LL))(v3, v4);
}

BOOL sub_388938@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (os_log_t *)sub_138E8(6);
  char v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_33464(&__p, (unsigned int *)(a1 + 12));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "TimeSyncClockCreatedHandler.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 25;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = p_p;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TimeSync clock created for %s", buf, 0x1Cu);
  }

  uint64_t v7 = sub_32918();
  *(_OWORD *)&buf[8] = 0uLL;
  *(void *)AudioObjectPropertyAddress buf = &buf[8];
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  sub_395F90(v7, a1 + 12, (uint64_t)buf, (unsigned int *)&__p);
  sub_32C8C(*(void **)&buf[8]);
  return sub_72210(a2, 1920099684LL);
}

void sub_388A80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_388A9C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = std::string::insert(&v6, 0LL, "Notifying ", 0xAuLL);
  __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__l.__cap_ = v3->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
  char v5 = std::string::append(&v7, " of time sync clock creation", 0x1CuLL);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_388B48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_388B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TimeSyncClockManagerNotifyWhenAvailable(a2, a3);
}

uint64_t sub_388B94(uint64_t a1, uint64_t a2)
{
  return TimeSyncClockCreateWithClockIdentifer(a2);
}

uint64_t sub_388B9C(uint64_t a1, uint64_t a2)
{
  return TimeSyncClockDispose(a2);
}

uint64_t sub_388BA4(uint64_t a1, uint64_t a2)
{
  return TimeSyncClockCreateAudioClockDeviceUID(a2);
}

uint64_t sub_388BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TimeSyncgPTPManagerNotifyWhenAvailable(a2, a3);
}

void sub_388BBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_484BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_388BCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_484BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_388BEC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_388BFC(const __CFString *a1, BOOL *a2)
{
  int valuePtr = -1;
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    int v5 = valuePtr + 3;
  }

  else
  {
    if (v4 != CFStringGetTypeID()) {
      goto LABEL_22;
    }
    if (CFEqual(a1, @"error"))
    {
      int v5 = 1;
      goto LABEL_23;
    }

    if (CFEqual(a1, @"warning"))
    {
      int v5 = 2;
      goto LABEL_23;
    }

    if (CFEqual(a1, @"note") || CFEqual(a1, @"notice"))
    {
      int v5 = 3;
      goto LABEL_23;
    }

    if (CFEqual(a1, @"info"))
    {
      int v5 = 4;
      goto LABEL_23;
    }

    if (CFEqual(a1, @"details"))
    {
      int v5 = 5;
      goto LABEL_23;
    }

    if (CFEqual(a1, @"minutiae"))
    {
      int v5 = 6;
      goto LABEL_23;
    }

    if (CFEqual(a1, @"spew"))
    {
      int v5 = 7;
      goto LABEL_23;
    }

    if (!CFStringGetCString(a1, buffer, 64LL, 0x8000100u))
    {
LABEL_22:
      int v5 = -1;
      goto LABEL_23;
    }

    int v6 = sscanf(buffer, "%d", &v9);
    int v5 = v9 + 3;
    if (v6 != 1) {
      int v5 = -1;
    }
  }

void *sub_388DD8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_484C68;
  result[1] = v3;
  return result;
}

uint64_t sub_388E0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_484C68;
  a2[1] = v2;
  return result;
}

uint64_t sub_388E28(uint64_t result, int *a2)
{
  uint64_t v2 = 3LL;
  if (*a2 <= 6) {
    uint64_t v2 = 1LL;
  }
  *(void *)(*(void *)(result + 8) + 8LL) = v2;
  return result;
}

void *sub_388E44(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 4 * a3;
    std::string v7 = a1;
    do
    {
      AudioObjectID v8 = operator new(0x18uLL);
      v8[4] = *(_DWORD *)(a2 + 4 * v5);
      *(void *)AudioObjectID v8 = v7;
      *((void *)v8 + 1) = a1;
      *((void *)v7 + 1) = v8;
      *a1 = v8;
      a1[2] = ++v5;
      std::string v7 = v8;
      v6 -= 4LL;
    }

    while (v6);
  }

  return a1;
}

void sub_388EC0(_Unwind_Exception *a1)
{
}

void sub_388ED4(void *a1, uint64_t *a2, int *a3, uint64_t a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a4 + 8); i != a4; uint64_t i = *(void *)(i + 8))
  {
    int v9 = *(_DWORD *)(i + 16);
    if (v9 > 1935827811)
    {
      if (v9 == 1935827812)
      {
LABEL_9:
        sub_85350((uint64_t)&v10, 1650811245, *a2, v9, 0, (uint64_t)&qword_4A9530);
        sub_38917C(a1, (uint64_t)&v10);
        goto LABEL_10;
      }

      if (v9 == 1937007986)
      {
        sub_85350((uint64_t)&v10, 1937007986, *a2, 1937007986, 0, (uint64_t)&qword_4A9548);
        sub_38917C(a1, (uint64_t)&v10);
        goto LABEL_10;
      }
    }

    else
    {
      if (v9 == 1668441188) {
        goto LABEL_9;
      }
      if (v9 == 1869442665)
      {
        sub_85350((uint64_t)&v10, *a3, *a2, 1869442665, -1, a2[1]);
        sub_38917C(a1, (uint64_t)&v10);
LABEL_10:
        if (__p)
        {
          unint64_t v14 = __p;
          operator delete(__p);
        }

        if (v11)
        {
          char v12 = v11;
          operator delete(v11);
        }
      }
    }
  }

void sub_38904C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_389084(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  std::string v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_7E420(v7, v11);
    AudioObjectID v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  char v12 = (void **)(result + 8);
  unint64_t v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_17:
    double result = (char *)memmove(v18, v19, v17);
  }

uint64_t sub_38917C(void *a1, uint64_t a2)
{
  CFTypeID v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 6;
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 5;
    else {
      unint64_t v12 = v11;
    }
    __int16 v25 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_85830(v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    unint64_t v23 = v12;
    *(void *)int v24 = v12 + (v9 << 6);
    *(void *)&v24[16] = v12 + (v13 << 6);
    sub_389308(*(uint64_t *)v24, a2);
    *(void *)&char v24[8] = *(void *)v24 + 64LL;
    uint64_t v15 = *a1;
    uint64_t v14 = a1[1];
    for (uint64_t i = 64LL; ; i -= 64LL)
    {
      uint64_t v17 = *(void *)v24 + i;
      if (v14 + i - 64 == v15) {
        break;
      }
      uint64_t v18 = v14 + i - 128;
      sub_85864(v17 - 128, v18);
    }

    uint64_t v19 = a1[2];
    __int128 v20 = *(_OWORD *)&v24[8];
    unint64_t v22 = *(void *)&v24[8];
    __int128 v21 = *(_OWORD *)a1;
    *a1 = v17 - 64;
    *(_OWORD *)int v24 = v21;
    *(_OWORD *)(a1 + 1) = v20;
    *(void *)&v24[16] = v19;
    unint64_t v23 = v21;
    uint64_t result = sub_858FC((uint64_t)&v23);
    unint64_t v8 = v22;
  }

  else
  {
    uint64_t result = sub_389308(a1[1], a2);
    unint64_t v8 = v6 + 64;
    a1[1] = v6 + 64;
  }

  a1[1] = v8;
  return result;
}

void sub_3892C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_389308(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  sub_7A5B8( (void *)(a1 + 8),  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_7A5B8( (void *)(a1 + 40),  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_389384(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

std::string *sub_3893A0(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  sub_2CA1C(&v26, *a2);
  uint64_t v4 = std::string::insert(&v26, 0LL, "ID: ", 4uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v6 = std::string::append(&v27, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  __int128 v28 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v8 = (const std::string::value_type *)&v28;
  }
  else {
    unint64_t v8 = (const std::string::value_type *)v28;
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = *((void *)&v28 + 1);
  }
  std::string::append(a1, v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v28);
  }
  uint64_t v10 = (const __CFString *)*((void *)a2 + 7);
  CFStringRef theString = v10;
  char v25 = *((_BYTE *)a2 + 64);
  if (v25 && v10)
  {
    CFRetain(v10);
    uint64_t v10 = theString;
  }

  sub_48E98(&v26, v10);
  uint64_t v11 = std::string::insert(&v26, 0LL, "name: ", 6uLL);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v13 = std::string::append(&v27, "; ", 2uLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t cap = v13->__r_.__value_.__l.__cap_;
  __int128 v28 = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v15 = (const std::string::value_type *)&v28;
  }
  else {
    uint64_t v15 = (const std::string::value_type *)v28;
  }
  if (cap >= 0) {
    std::string::size_type v16 = HIBYTE(cap);
  }
  else {
    std::string::size_type v16 = *((void *)&v28 + 1);
  }
  std::string::append(a1, v15, v16);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v28);
  }
  sub_19DFC((uint64_t)&theString);
  sub_2CA1C(&v26, a2[1]);
  uint64_t v17 = std::string::insert(&v26, 0LL, "type: ", 6uLL);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v19 = std::string::append(&v27, "; ", 2uLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t cap = v19->__r_.__value_.__l.__cap_;
  __int128 v28 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v21 = (const std::string::value_type *)&v28;
  }
  else {
    __int128 v21 = (const std::string::value_type *)v28;
  }
  if (cap >= 0) {
    std::string::size_type v22 = HIBYTE(cap);
  }
  else {
    std::string::size_type v22 = *((void *)&v28 + 1);
  }
  std::string::append(a1, v21, v22);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v28);
  }
  return std::string::append(a1, "]", 1uLL);
}

void sub_389650( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

void sub_389724(char **a1, int *a2, int *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v6 = a1 + 2;
    do
    {
      int v7 = *v4;
      unint64_t v8 = operator new(0x60uLL);
      v8[1] = 0LL;
      v8[2] = 0LL;
      void *v8 = off_4851A8;
      sub_3899E4((uint64_t)&v31, v7);
      std::string v26 = 0LL;
      uint64_t v27 = 0LL;
      __int128 v28 = 0LL;
      __int16 v29 = &v26;
      char v30 = 0;
      std::string v26 = (char *)operator new(0x40uLL);
      uint64_t v27 = (uint64_t)v26;
      __int128 v28 = v26 + 64;
      uint64_t v27 = sub_85654((uint64_t)&v31, (uint64_t)&v37, (uint64_t)v26);
      sub_856E4((uint64_t)(v8 + 3), v7, 1735291491, 0, (uint64_t *)&v26);
      __int16 v29 = &v26;
      sub_855A4((void ***)&v29);
      if (__p)
      {
        uint64_t v36 = __p;
        operator delete(__p);
      }

      if (v32[0])
      {
        v32[1] = v32[0];
        operator delete(v32[0]);
      }

      sub_1F0A70((uint64_t)(v8 + 10), *((unsigned int *)v8 + 7));
      *(void *)&__int128 v25 = v8 + 3;
      *((void *)&v25 + 1) = v8;
      uint64_t v10 = a1[1];
      unint64_t v9 = (unint64_t)a1[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = (v10 - *a1) >> 4;
        uint64_t v13 = v9 - (void)*a1;
        uint64_t v14 = v13 >> 3;
        else {
          unint64_t v15 = v14;
        }
        unsigned int v34 = v6;
        std::string::size_type v16 = (char *)sub_7BE90(v15);
        __int128 v18 = &v16[16 * v12];
        *(_OWORD *)__int128 v18 = v25;
        __int128 v20 = *a1;
        uint64_t v19 = a1[1];
        if (v19 == *a1)
        {
          int64x2_t v23 = vdupq_n_s64((unint64_t)v19);
          __int128 v21 = &v16[16 * v12];
        }

        else
        {
          __int128 v21 = &v16[16 * v12];
          do
          {
            __int128 v22 = *((_OWORD *)v19 - 1);
            v19 -= 16;
            *((_OWORD *)v21 - 1) = v22;
            v21 -= 16;
            *(void *)uint64_t v19 = 0LL;
            *((void *)v19 + 1) = 0LL;
          }

          while (v19 != v20);
          int64x2_t v23 = *(int64x2_t *)a1;
        }

        uint64_t v11 = v18 + 16;
        *a1 = v21;
        a1[1] = v18 + 16;
        *(int64x2_t *)AudioObjectID v32 = v23;
        int v24 = a1[2];
        a1[2] = &v16[16 * v17];
        std::string::size_type v33 = v24;
        uint64_t v31 = v23.i64[0];
        sub_A0D64((uint64_t)&v31);
      }

      else
      {
        *(_OWORD *)uint64_t v10 = v25;
        uint64_t v11 = v10 + 16;
      }

      a1[1] = v11;
      ++v4;
    }

    while (v4 != a3);
  }

void sub_389958( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
}

void sub_3899E4(uint64_t a1, int a2)
{
  __int32 v4 = a2;
  sub_852D0(__p, &v4, 1LL);
  memset(v6, 0, sizeof(v6));
  sub_85350(a1, a2, (uint64_t)__p, 1852796517, -1, (uint64_t)v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_389A58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_389A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(a2 + 4)) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == v6) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v8 = sub_389C24(*(_DWORD *)(v5 + 36));
    int v9 = *(unsigned __int8 *)(a2 + 4);
    if ((v8 & 0xFF00000000LL) == 0 || v9 == 0)
    {
      if (((v8 & 0xFF00000000LL) != 0) == (v9 != 0)) {
        goto LABEL_13;
      }
    }

    else if (*(float *)a2 == *(float *)&v8)
    {
      goto LABEL_13;
    }

    v5 += 64LL;
  }

  while (v5 != v6);
  uint64_t v5 = v6;
LABEL_13:
  if (v5 == *(void *)(a1 + 40)) {
LABEL_14:
  }
    uint64_t v5 = 0LL;
  if (!*(_BYTE *)(a3 + 4)) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  if (v11 != v12)
  {
    while (*(_DWORD *)(v11 + 32) != *(_DWORD *)a3)
    {
      v11 += 64LL;
      if (v11 == v12) {
        goto LABEL_27;
      }
    }
  }

  if (v11 == v12)
  {
LABEL_27:
    uint64_t v11 = 0LL;
    if (v5) {
      goto LABEL_22;
    }
    return v11;
  }

  if (!v5) {
    return v11;
  }
LABEL_22:
  if (v11)
  {
    if (v5 != v11)
    {
      uint64_t v13 = (os_log_t *)sub_138E8(13);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          int v16 = 136315394;
          uint64_t v17 = "SubPort.cpp";
          __int16 v18 = 1024;
          int v19 = 253;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Config mismatch.",  (uint8_t *)&v16,  0x12u);
        }
      }
    }
  }

  return v5;
}

uint64_t sub_389C24(int a1)
{
  int v1 = a1 + 1;
  if ((a1 + 1) >= 3)
  {
    __int32 v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "SubPort.cpp";
      __int16 v9 = 1024;
      int v10 = 48;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected case in switch",  (uint8_t *)&v7,  0x12u);
    }

    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v2 = qword_403060[v1];
    uint64_t v3 = qword_403078[v1];
  }

  return v3 | v2;
}

uint64_t sub_389D10(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 4))
  {
    v7[0] = 0;
    v7[4] = 0;
    uint64_t result = sub_389A74(a1, (uint64_t)v7, a2);
    goto LABEL_10;
  }

  uint64_t result = *(void *)(a1 + 32);
  __int32 v4 = *(unsigned int **)(a1 + 40);
  if ((unint64_t)v4 - result < 0x41 || result == (void)v4)
  {
LABEL_10:
    uint64_t v6 = (unsigned int *)result;
    if (!result) {
      return result;
    }
    return *v6;
  }

  uint64_t v6 = (unsigned int *)result;
  while (v6[8] != 1869442665)
  {
    v6 += 16;
    if (v6 == v4) {
      goto LABEL_10;
    }
  }

  return *v6;
}

void *sub_389D94(void *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 != a3)
  {
    while (*(_DWORD *)a2 != a4)
    {
      a2 += 64LL;
      if (a2 == a3) {
        goto LABEL_7;
      }
    }
  }

  if (a2 == a3)
  {
LABEL_7:
    *uint64_t result = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
  }

  else
  {
    *uint64_t result = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    return sub_7A5B8( result,  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  return result;
}

BOOL sub_389DE8(uint64_t a1, int a2, int *a3, int *a4)
{
  int v7 = (void *)v11[0];
  if (v11[0] == v11[1]
    || *((_BYTE *)a3 + 4)
    && (int v14 = *a3, v15 = 1, LOBYTE(v12) = 0, v13 = 0, !sub_389A74(a1, (uint64_t)&v14, (uint64_t)&v12)))
  {
    BOOL v8 = 0LL;
  }

  else
  {
    BOOL v8 = 1LL;
    if (*((_BYTE *)a4 + 4))
    {
      int v9 = *a4;
      LOBYTE(v14) = 0;
      char v15 = 0;
      int v12 = v9;
      char v13 = 1;
      BOOL v8 = sub_389A74(a1, (uint64_t)&v14, (uint64_t)&v12) != 0;
    }
  }

  if (v7) {
    operator delete(v7);
  }
  return v8;
}

void sub_389EBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_389ED4(void *a1)
{
  *a1 = off_484CC8;
  sub_7A768((uint64_t)(a1 + 2));
  return a1;
}

void sub_389F04(void *a1)
{
  *a1 = off_484CC8;
  sub_7A768((uint64_t)(a1 + 2));
  operator delete(a1);
}

void *sub_389F34(void *result)
{
  uint64_t v1 = (uint64_t)(result + 2);
  if (result[2]) {
    return result;
  }
  uint64_t v2 = result[1];
  uint64_t v9 = 0x676C6F626470656CLL;
  int v10 = 0;
  v14[0] = &off_484D00;
  v14[1] = v2;
  char v15 = v14;
  v12[0] = &off_484D48;
  v12[1] = v2;
  char v13 = v12;
  sub_F3758((uint64_t *)&v11, v2, (int *)&v9, (uint64_t)v14, (uint64_t)v12);
  sub_127660(v1, &v11);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    __int32 v4 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  uint64_t v6 = v13;
  if (v13 == v12)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v12;
    goto LABEL_11;
  }

  if (v13)
  {
    uint64_t v7 = 5LL;
LABEL_11:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  uint64_t result = v15;
  if (v15 == v14)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v14;
  }

  else
  {
    if (!v15) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_38A080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  __int128 v20 = a17;
  if (a17 == v17)
  {
    uint64_t v21 = 4LL;
    __int128 v20 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  __int128 v22 = *(void **)(v18 - 32);
  if (v22 == (void *)(v18 - 56))
  {
    uint64_t v23 = 4LL;
    __int128 v22 = (void *)(v18 - 56);
  }

  else
  {
    if (!v22) {
      goto LABEL_11;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_38A0E8(uint64_t a1)
{
}

void *sub_38A0F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_484D48;
  result[1] = v3;
  return result;
}

uint64_t sub_38A12C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_484D48;
  a2[1] = v2;
  return result;
}

uint64_t sub_38A148(uint64_t a1)
{
  int v7 = 0;
  uint64_t v2 = sub_5954C();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t)))(*(void *)v2 + 160LL))(v2, sub_38C280);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = 0x676C6F626470656CLL;
  int v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, int *))(*(void *)v3 + 48LL))( v3,  &v5,  0LL,  0LL,  4LL,  &v7);
}

void *sub_38A1C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_484D00;
  result[1] = v3;
  return result;
}

uint64_t sub_38A1F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_484D00;
  a2[1] = v2;
  return result;
}

uint64_t sub_38A214(uint64_t a1)
{
  uint64_t v2 = sub_5954C();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), void))(*(void *)v2 + 152LL))( v2,  sub_38C280,  *(void *)(a1 + 8));
  uint64_t v3 = sub_5954C();
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 168LL))(v3);
}

void sub_38A25C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_38A270(os_unfair_lock_s *a1)
{
  if (!(*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  0LL))
  {
    char v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Squid_Aspen.cpp";
      __int16 v28 = 1024;
      *(_DWORD *)__int16 v29 = 47;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HDMI input device has no input streams.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HDMI input device has no input streams.");
  }

  uint64_t v2 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v2, 0);
  sub_1D5AE0(a1, (uint64_t)v2);
  uint64_t v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D580C((uint64_t)a1, 0, 1885434467LL, (uint64_t)v2);
  sub_1D55D4((uint64_t *)a1, 0, 1885434467LL, (uint64_t)v3);
  __int32 v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( __p,  a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_Squid_Aspen.cpp";
    __int16 v28 = 1024;
    *(_DWORD *)__int16 v29 = 55;
    *(_WORD *)&v29[4] = 2112;
    *(void **)&v29[6] = __p[0];
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating an HDMI input port with UID %@", buf, 0x1Cu);
    sub_19DFC((uint64_t)__p);
  }

  memset(v22, 0, sizeof(v22));
  CFStringRef v6 = CFStringCreateWithCString(0LL, "Squid", 0x600u);
  CFStringRef v20 = v6;
  char v21 = 1;
  *(void *)AudioObjectPropertyAddress buf = v6;
  buf[8] = 1;
  if (v6) {
    CFRetain(v6);
  }
  *(void *)&_OWORD v29[2] = 0LL;
  v29[10] = 1;
  uint64_t v30 = 0LL;
  char v31 = 1;
  (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v19,  a1);
  memset(v18, 0, sizeof(v18));
  int v7 = operator new(0x228uLL);
  v7[1] = 0LL;
  v7[2] = 0LL;
  void *v7 = off_485B80;
  sub_7D084(__p, "");
  sub_F9638( (uint64_t)(v7 + 3),  &qword_4A9828,  (uint64_t)a1,  (uint64_t)v22,  (uint64_t)buf,  (uint64_t)v19,  v18,  (__int128 *)__p);
  v7[3] = &off_46FD40;
  *((_WORD *)v7 + 272) = 0;
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&__int128 v23 = v7 + 3;
  *((void *)&v23 + 1) = v7;
  sub_AFDAC((uint64_t)&v23, v7 + 13, (uint64_t)(v7 + 3));
  __int128 v24 = v23;
  __int128 v23 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v24);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    uint64_t v9 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  __int128 v11 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    int v12 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  __p[0] = v18;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)v19);
  sub_19DFC((uint64_t)&v30);
  sub_19DFC((uint64_t)&v29[2]);
  sub_19DFC((uint64_t)buf);
  sub_19DFC((uint64_t)&v20);
  if (v22[0]) {
    operator delete(v22[0]);
  }
  return 1LL;
}

void sub_38A660( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
}

uint64_t sub_38A720(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886613860)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    __int32 v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v13 = "Device_Squid_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 73;
      __int16 v16 = 2080;
      uint64_t v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    CFStringRef v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v13 = "Device_Squid_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 74;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_38A8CC(_Unwind_Exception *a1)
{
}

uint64_t sub_38A8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2);
    if ((_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  0LL,  0LL,  a3,  a4);
    }
  }

  return result;
}

uint64_t sub_38A970(uint64_t a1)
{
  uint64_t v6 = 0x6F75747054684277LL;
  int v7 = 0;
  uint64_t v4 = 0x6F75747050504277LL;
  int v5 = 0;
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v6);
  uint64_t result = 0LL;
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v4);
  }
  return result;
}

BOOL sub_38A9E4(uint64_t a1)
{
  if (v12)
  {
    uint64_t v1 = v11;
    if (!v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    CFStringRef v2 = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"kBluetoothAudioDeviceFeatureHearingAssistCapability",  51LL,  0x8000100u,  0);
    if (!v2)
    {
      uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
    }

    Value = (const __CFBoolean *)CFDictionaryGetValue(v1, v2);
    CFRelease(v2);
    if (Value)
    {
      __int16 v4 = sub_476EC(Value);
      int v5 = HIBYTE(v4);
    }

    else
    {
      int v5 = 0;
      LOBYTE(v4) = 0;
    }

    unsigned int v9 = v4 | (v5 << 8);
    if (v9 <= 0x100) {
      LOBYTE(v9) = 0;
    }
    BOOL v6 = v9 != 0;
  }

  else
  {
    BOOL v6 = 0LL;
  }

  sub_8D530((uint64_t)&v11);
  return v6;
}

uint64_t sub_38AB80(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(uint64_t (**)(void))(*(void *)a1 + 88LL);
  if ((a2 & 1) != 0)
  {
    int v5 = v4();
    if (v5)
    {
LABEL_3:
      uint64_t v6 = 0LL;
      uint64_t v7 = 0LL;
      while (1)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96LL))(a1, a2, v7);
        uint64_t v9 = v8;
        if (v8)
        {
          strcpy(buf, "spatbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          unint64_t v10 = sub_5C2F8(v8);
          *((void *)&v12 + 1) = v11;
          *(void *)&__int128 v12 = v10;
          if (((v12 >> 32) & 0xFF00000000LL) == 0 || HIDWORD(v10) == 0LL)
          {
            uint64_t v14 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v9 + 112LL))(v9, buf);
            if ((_DWORD)v14)
            {
              __int128 v22 = (os_log_t *)sub_138E8(17);
              __int128 v23 = *v22;
              if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
              {
                sub_2CA1C(__p, v14);
                if (v28 >= 0) {
                  __int128 v24 = __p;
                }
                else {
                  __int128 v24 = (void **)__p[0];
                }
                __int128 v25 = "input";
                *(void *)&v37[4] = "PhysicalDeviceUtilities.cpp";
                *(_DWORD *)uint64_t v37 = 136315906;
                __int16 v38 = 1024;
                if ((_DWORD)a2) {
                  __int128 v25 = "output";
                }
                int v39 = 170;
                __int16 v40 = 2080;
                io_registry_entry_t v41 = v24;
                __int16 v42 = 2080;
                unint64_t v43 = v25;
                _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error '%s' getting current stream format, returning 0 non tapstream %s channels",  v37,  0x26u);
                if (v28 < 0) {
                  operator delete(__p[0]);
                }
              }

              return 0LL;
            }

            uint64_t v6 = (*(_DWORD *)v34 + v6);
          }
        }

        uint64_t v7 = (v7 + 1);
        if (v5 == (_DWORD)v7)
        {
          int v15 = (os_log_t *)sub_138E8(17);
          __int16 v16 = *v15;
          if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_INFO))
          {
            if ((_DWORD)a2) {
              uint64_t v17 = "output";
            }
            else {
              uint64_t v17 = "input";
            }
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v37, a1);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
            __int16 v30 = 1024;
            int v31 = 179;
            __int16 v32 = 2080;
            std::string::size_type v33 = v17;
            *(_WORD *)unsigned int v34 = 2112;
            *(void *)&v34[2] = *(void *)v37;
            __int16 v35 = 1024;
            int v36 = v6;
            _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "%25s:%-5d Non tapstream %s channel count for device %@: %d",  buf,  0x2Cu);
            sub_19DFC((uint64_t)v37);
          }

          return v6;
        }
      }
    }
  }

  else
  {
    int v18 = v4();
    int v5 = v18 - (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312LL))(a1) & 0xFF00000000LL) != 0);
    if (v5) {
      goto LABEL_3;
    }
  }

  int v19 = (os_log_t *)sub_138E8(17);
  CFStringRef v20 = *v19;
  if (!*v19) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
  {
    if ((_DWORD)a2) {
      char v21 = "output";
    }
    else {
      char v21 = "input";
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v37, a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
    __int16 v30 = 1024;
    int v31 = 156;
    __int16 v32 = 2080;
    std::string::size_type v33 = v21;
    *(_WORD *)unsigned int v34 = 2112;
    *(void *)&v34[2] = *(void *)v37;
    _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Non tapstream %s stream count is zero for device %@",  buf,  0x26u);
    sub_19DFC((uint64_t)v37);
    return 0LL;
  }

  return v6;
}

void sub_38AF28(uint64_t a1, double *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v8 = a2 - 2;
  unint64_t v9 = a1;
  while (2)
  {
    a1 = v9;
    uint64_t v10 = (uint64_t)a2 - v9;
    unint64_t v11 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*v8 < *(double *)v9)
        {
          __int128 v82 = *(_OWORD *)v9;
          *(_OWORD *)unint64_t v9 = *(_OWORD *)v8;
          *(_OWORD *)uint64_t v8 = v82;
        }

        return;
      case 3uLL:
        sub_1AEF7C((double *)v9, (double *)(v9 + 16), a2 - 2);
        return;
      case 4uLL:
        sub_1AF020((double *)v9, (double *)(v9 + 16), (double *)(v9 + 32), (unint64_t *)a2 - 2);
        return;
      case 5uLL:
        unsigned int v34 = (__int128 *)(v9 + 16);
        __int16 v35 = (__int128 *)(v9 + 32);
        int v36 = (__int128 *)(v9 + 48);
        sub_1AF020((double *)v9, (double *)(v9 + 16), (double *)(v9 + 32), (unint64_t *)(v9 + 48));
        if (*v8 < *(double *)(v9 + 48))
        {
          __int128 v37 = *v36;
          *int v36 = *(_OWORD *)v8;
          *(_OWORD *)uint64_t v8 = v37;
          if (*(double *)v36 < *(double *)v35)
          {
            __int128 v38 = *v35;
            *__int16 v35 = *v36;
            *int v36 = v38;
            if (*(double *)v35 < *(double *)v34)
            {
              __int128 v39 = *v34;
              *unsigned int v34 = *v35;
              *__int16 v35 = v39;
              if (*(double *)(v9 + 16) < *(double *)v9)
              {
                __int128 v83 = *(_OWORD *)v9;
                *(_OWORD *)unint64_t v9 = *v34;
                *unsigned int v34 = v83;
              }
            }
          }
        }

        return;
      default:
        if (v10 <= 383)
        {
          __int16 v40 = (double *)(v9 + 16);
          BOOL v42 = (double *)v9 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              uint64_t v43 = 0LL;
              unint64_t v44 = v9;
              do
              {
                std::string v45 = v40;
                double v46 = *(double *)(v44 + 16);
                if (v46 < *(double *)v44)
                {
                  uint64_t v47 = *(void *)(v44 + 24);
                  uint64_t v48 = v43;
                  while (1)
                  {
                    *(_OWORD *)(v9 + v48 + 16) = *(_OWORD *)(v9 + v48);
                    if (!v48) {
                      break;
                    }
                    double v49 = *(double *)(v9 + v48 - 16);
                    v48 -= 16LL;
                    if (v46 >= v49)
                    {
                      uint64_t v50 = v9 + v48 + 16;
                      goto LABEL_76;
                    }
                  }

                  uint64_t v50 = v9;
LABEL_76:
                  *(double *)uint64_t v50 = v46;
                  *(void *)(v50 + 8) = v47;
                }

                __int16 v40 = v45 + 2;
                v43 += 16LL;
                unint64_t v44 = (unint64_t)v45;
              }

              while (v45 + 2 != a2);
            }
          }

          else if (!v42)
          {
            do
            {
              uint64_t v75 = (uint64_t)v40;
              double v76 = *(double *)(a1 + 16);
              if (v76 < *(double *)a1)
              {
                uint64_t v77 = *(void *)(a1 + 24);
                uint32_t v78 = v40;
                do
                {
                  *(_OWORD *)uint32_t v78 = *((_OWORD *)v78 - 1);
                  double v79 = *(v78 - 4);
                  v78 -= 2;
                }

                while (v76 < v79);
                *uint32_t v78 = v76;
                *((void *)v78 + 1) = v77;
              }

              v40 += 2;
              a1 = v75;
            }

            while ((double *)(v75 + 16) != a2);
          }

          return;
        }

        if (!a3)
        {
          if ((double *)v9 != a2)
          {
            int64_t v51 = (v11 - 2) >> 1;
            int64_t v52 = v51;
            do
            {
              int64_t v53 = v52;
              if (v51 >= v52)
              {
                uint64_t v54 = (2 * v52) | 1;
                uint64_t v55 = (double *)(v9 + 16 * v54);
                if (2 * v53 + 2 < (uint64_t)v11 && *v55 < v55[2])
                {
                  v55 += 2;
                  uint64_t v54 = 2 * v53 + 2;
                }

                UInt32 v56 = (double *)(v9 + 16 * v53);
                double v57 = *v56;
                if (*v55 >= *v56)
                {
                  uint64_t v58 = *((void *)v56 + 1);
                  do
                  {
                    CFTypeRef v59 = v56;
                    UInt32 v56 = v55;
                    *(_OWORD *)CFTypeRef v59 = *(_OWORD *)v55;
                    if (v51 < v54) {
                      break;
                    }
                    uint64_t v60 = 2 * v54;
                    uint64_t v54 = (2 * v54) | 1;
                    uint64_t v55 = (double *)(v9 + 16 * v54);
                    uint64_t v61 = v60 + 2;
                    if (v61 < (uint64_t)v11 && *v55 < v55[2])
                    {
                      v55 += 2;
                      uint64_t v54 = v61;
                    }
                  }

                  while (*v55 >= v57);
                  *UInt32 v56 = v57;
                  *((void *)v56 + 1) = v58;
                }
              }

              int64_t v52 = v53 - 1;
            }

            while (v53);
            uint64_t v62 = (unint64_t)v10 >> 4;
            do
            {
              uint64_t v63 = 0LL;
              __int128 v84 = *(_OWORD *)v9;
              uint64_t v64 = (double *)v9;
              do
              {
                uint64_t v65 = v64;
                v64 += 2 * v63 + 2;
                uint64_t v66 = 2 * v63;
                uint64_t v63 = (2 * v63) | 1;
                uint64_t v67 = v66 + 2;
                if (v67 < v62 && *v64 < v64[2])
                {
                  v64 += 2;
                  uint64_t v63 = v67;
                }

                *(_OWORD *)uint64_t v65 = *(_OWORD *)v64;
              }

              while (v63 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
              a2 -= 2;
              if (v64 == a2)
              {
                *(_OWORD *)uint64_t v64 = v84;
              }

              else
              {
                *(_OWORD *)uint64_t v64 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v84;
                uint64_t v68 = (uint64_t)v64 - v9 + 16;
                if (v68 >= 17)
                {
                  unint64_t v69 = (((unint64_t)v68 >> 4) - 2) >> 1;
                  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = (double *)(v9 + 16 * v69);
                  double v71 = *v64;
                  if (*v70 < *v64)
                  {
                    uint64_t v72 = *((void *)v64 + 1);
                    do
                    {
                      uint64_t v73 = v64;
                      uint64_t v64 = v70;
                      *(_OWORD *)uint64_t v73 = *(_OWORD *)v70;
                      if (!v69) {
                        break;
                      }
                      unint64_t v69 = (v69 - 1) >> 1;
                      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = (double *)(v9 + 16 * v69);
                    }

                    while (*v70 < v71);
                    *uint64_t v64 = v71;
                    *((void *)v64 + 1) = v72;
                  }
                }
              }
            }

            while (v62-- > 2);
          }

          return;
        }

        unint64_t v12 = v11 >> 1;
        unint64_t v13 = (double *)(v9 + 16 * (v11 >> 1));
        if ((unint64_t)v10 < 0x801)
        {
          sub_1AEF7C((double *)(a1 + 16 * (v11 >> 1)), (double *)a1, a2 - 2);
        }

        else
        {
          sub_1AEF7C((double *)a1, (double *)(a1 + 16 * (v11 >> 1)), a2 - 2);
          sub_1AEF7C((double *)(a1 + 16), v13 - 2, a2 - 4);
          sub_1AEF7C((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v12), a2 - 6);
          sub_1AEF7C(v13 - 2, v13, (double *)(a1 + 16 + 16 * v12));
          __int128 v80 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)unint64_t v13 = v80;
        }

        --a3;
        double v14 = *(double *)a1;
        if ((a4 & 1) == 0 && *(double *)(a1 - 16) >= v14)
        {
          if (v14 >= *v8)
          {
            unint64_t v28 = a1 + 16;
            do
            {
              unint64_t v9 = v28;
              v28 += 16LL;
            }

            while (v14 >= *(double *)v9);
          }

          else
          {
            unint64_t v9 = a1;
            do
            {
              double v27 = *(double *)(v9 + 16);
              v9 += 16LL;
            }

            while (v14 >= v27);
          }

          __int16 v29 = a2;
          if (v9 < (unint64_t)a2)
          {
            __int16 v29 = a2;
            do
            {
              double v30 = *(v29 - 2);
              v29 -= 2;
            }

            while (v14 < v30);
          }

          uint64_t v31 = *(void *)(a1 + 8);
          while (v9 < (unint64_t)v29)
          {
            __int128 v81 = *(_OWORD *)v9;
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v29;
            *(_OWORD *)__int16 v29 = v81;
            do
            {
              double v32 = *(double *)(v9 + 16);
              v9 += 16LL;
            }

            while (v14 >= v32);
            do
            {
              double v33 = *(v29 - 2);
              v29 -= 2;
            }

            while (v14 < v33);
          }

          if (v9 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v9 - 16);
          }
          a4 = 0;
          *(double *)(v9 - 16) = v14;
          *(void *)(v9 - 8) = v31;
          continue;
        }

        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v16 = a1;
        do
        {
          unint64_t v17 = v16;
          double v18 = *(double *)(v16 + 16);
          v16 += 16LL;
        }

        while (v18 < v14);
        int v19 = a2;
        if (v17 == a1)
        {
          int v19 = a2;
          do
          {
            double v21 = *(v19 - 2);
            v19 -= 2;
          }

          while (v21 >= v14);
        }

        else
        {
          do
          {
            double v20 = *(v19 - 2);
            v19 -= 2;
          }

          while (v20 >= v14);
        }

        unint64_t v9 = v16;
        if (v16 < (unint64_t)v19)
        {
          __int128 v22 = v19;
          do
          {
            __int128 v23 = *(_OWORD *)v9;
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v22;
            *(_OWORD *)__int128 v22 = v23;
            do
            {
              double v24 = *(double *)(v9 + 16);
              v9 += 16LL;
            }

            while (v24 < v14);
            do
            {
              double v25 = *(v22 - 2);
              v22 -= 2;
            }

            while (v25 >= v14);
          }

          while (v9 < (unint64_t)v22);
        }

        if (v9 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v9 - 16);
        }
        *(double *)(v9 - 16) = v14;
        *(void *)(v9 - 8) = v15;
        if (v16 < (unint64_t)v19)
        {
LABEL_29:
          sub_38AF28(a1, v9 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        BOOL v26 = sub_38C078(a1, v9 - 16);
        if (!sub_38C078(v9, (uint64_t)a2))
        {
          if (v26) {
            continue;
          }
          goto LABEL_29;
        }

        a2 = (double *)(v9 - 16);
        if (!v26) {
          goto LABEL_1;
        }
        return;
    }
  }

void sub_38B614(double *a1, double *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v8 = a2 - 2;
  unint64_t v9 = a1;
  while (2)
  {
    a1 = v9;
    uint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = ((char *)a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1) > v9[1])
        {
          __int128 v86 = *(_OWORD *)v9;
          *(_OWORD *)unint64_t v9 = *(_OWORD *)v8;
          *(_OWORD *)uint64_t v8 = v86;
        }

        return;
      case 3uLL:
        sub_38BD30(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        sub_38BDD4(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        __int128 v38 = (__int128 *)(v9 + 2);
        __int128 v39 = (__int128 *)(v9 + 4);
        __int16 v40 = (__int128 *)(v9 + 6);
        sub_38BDD4(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(v9 + 6));
        if (*(a2 - 1) > v9[7])
        {
          __int128 v41 = *v40;
          *__int16 v40 = *(_OWORD *)v8;
          *(_OWORD *)uint64_t v8 = v41;
          if (v9[7] > v9[5])
          {
            __int128 v42 = *v39;
            *__int128 v39 = *v40;
            *__int16 v40 = v42;
            if (v9[5] > v9[3])
            {
              __int128 v43 = *v38;
              *__int128 v38 = *v39;
              *__int128 v39 = v43;
              if (v9[3] > v9[1])
              {
                __int128 v87 = *(_OWORD *)v9;
                *(_OWORD *)unint64_t v9 = *v38;
                *__int128 v38 = v87;
              }
            }
          }
        }

        return;
      default:
        if (v10 <= 383)
        {
          unint64_t v44 = v9 + 2;
          BOOL v46 = v9 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              uint64_t v47 = 0LL;
              uint64_t v48 = v9;
              do
              {
                double v49 = v48[3];
                double v50 = v48[1];
                uint64_t v48 = v44;
                if (v49 > v50)
                {
                  double v51 = *v44;
                  uint64_t v52 = v47;
                  while (1)
                  {
                    *(_OWORD *)((char *)v9 + v52 + 16) = *(_OWORD *)((char *)v9 + v52);
                    if (!v52) {
                      break;
                    }
                    double v53 = *(double *)((char *)v9 + v52 - 8);
                    v52 -= 16LL;
                    if (v49 <= v53)
                    {
                      uint64_t v54 = (uint64_t)v9 + v52 + 16;
                      goto LABEL_79;
                    }
                  }

                  uint64_t v54 = (uint64_t)v9;
LABEL_79:
                  *(double *)uint64_t v54 = v51;
                  *(double *)(v54 + 8) = v49;
                }

                unint64_t v44 = v48 + 2;
                v47 += 16LL;
              }

              while (v48 + 2 != a2);
            }
          }

          else if (!v46)
          {
            do
            {
              double v79 = a1[3];
              double v80 = a1[1];
              a1 = v44;
              if (v79 > v80)
              {
                double v81 = *v44;
                __int128 v82 = v44;
                do
                {
                  *(_OWORD *)__int128 v82 = *((_OWORD *)v82 - 1);
                  double v83 = *(v82 - 3);
                  v82 -= 2;
                }

                while (v79 > v83);
                *__int128 v82 = v81;
                v82[1] = v79;
              }

              v44 += 2;
            }

            while (a1 + 2 != a2);
          }

          return;
        }

        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v55 = (v11 - 2) >> 1;
            int64_t v56 = v55;
            do
            {
              int64_t v57 = v56;
              if (v55 >= v56)
              {
                uint64_t v58 = (2 * v56) | 1;
                CFTypeRef v59 = &v9[2 * v58];
                if (2 * v57 + 2 < (uint64_t)v11 && v59[1] > v59[3])
                {
                  v59 += 2;
                  uint64_t v58 = 2 * v57 + 2;
                }

                uint64_t v60 = &v9[2 * v57];
                double v61 = v60[1];
                if (v59[1] <= v61)
                {
                  uint64_t v62 = *(void *)v60;
                  do
                  {
                    uint64_t v63 = v60;
                    uint64_t v60 = v59;
                    *(_OWORD *)uint64_t v63 = *(_OWORD *)v59;
                    if (v55 < v58) {
                      break;
                    }
                    uint64_t v64 = 2 * v58;
                    uint64_t v58 = (2 * v58) | 1;
                    CFTypeRef v59 = &v9[2 * v58];
                    uint64_t v65 = v64 + 2;
                    if (v65 < (uint64_t)v11 && v59[1] > v59[3])
                    {
                      v59 += 2;
                      uint64_t v58 = v65;
                    }
                  }

                  while (v59[1] <= v61);
                  *(void *)uint64_t v60 = v62;
                  v60[1] = v61;
                }
              }

              int64_t v56 = v57 - 1;
            }

            while (v57);
            uint64_t v66 = (unint64_t)v10 >> 4;
            do
            {
              uint64_t v67 = 0LL;
              __int128 v88 = *(_OWORD *)v9;
              uint64_t v68 = v9;
              do
              {
                unint64_t v69 = v68;
                v68 += 2 * v67 + 2;
                uint64_t v70 = 2 * v67;
                uint64_t v67 = (2 * v67) | 1;
                uint64_t v71 = v70 + 2;
                if (v71 < v66 && v68[1] > v68[3])
                {
                  v68 += 2;
                  uint64_t v67 = v71;
                }

                *(_OWORD *)unint64_t v69 = *(_OWORD *)v68;
              }

              while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)uint64_t v68 = v88;
              }

              else
              {
                *(_OWORD *)uint64_t v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v88;
                uint64_t v72 = (char *)v68 - (char *)v9 + 16;
                if (v72 >= 17)
                {
                  unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                  int v74 = &v9[2 * v73];
                  double v75 = v68[1];
                  if (v74[1] > v75)
                  {
                    uint64_t v76 = *(void *)v68;
                    do
                    {
                      uint64_t v77 = v68;
                      uint64_t v68 = v74;
                      *(_OWORD *)uint64_t v77 = *(_OWORD *)v74;
                      if (!v73) {
                        break;
                      }
                      unint64_t v73 = (v73 - 1) >> 1;
                      int v74 = &v9[2 * v73];
                    }

                    while (v74[1] > v75);
                    *(void *)uint64_t v68 = v76;
                    v68[1] = v75;
                  }
                }
              }
            }

            while (v66-- > 2);
          }

          return;
        }

        unint64_t v12 = v11 >> 1;
        unint64_t v13 = &v9[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          sub_38BD30(&a1[2 * (v11 >> 1)], a1, a2 - 2);
        }

        else
        {
          sub_38BD30(a1, &a1[2 * (v11 >> 1)], a2 - 2);
          sub_38BD30(a1 + 2, v13 - 2, a2 - 4);
          sub_38BD30(a1 + 4, &a1[2 * v12 + 2], a2 - 6);
          sub_38BD30(v13 - 2, v13, &a1[2 * v12 + 2]);
          __int128 v84 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)unint64_t v13 = v84;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v14 = a1[1];
          if (*(a1 - 1) > v14) {
            goto LABEL_11;
          }
          if (v14 <= *(a2 - 1))
          {
            double v30 = a1 + 2;
            do
            {
              unint64_t v9 = v30;
              if (v30 >= a2) {
                break;
              }
              double v31 = v30[1];
              v30 += 2;
            }

            while (v14 <= v31);
          }

          else
          {
            unint64_t v28 = a1;
            do
            {
              unint64_t v9 = v28 + 2;
              double v29 = v28[3];
              v28 += 2;
            }

            while (v14 <= v29);
          }

          double v32 = a2;
          if (v9 < a2)
          {
            double v33 = a2;
            do
            {
              double v32 = v33 - 2;
              double v34 = *(v33 - 1);
              v33 -= 2;
            }

            while (v14 > v34);
          }

          double v35 = *a1;
          while (v9 < v32)
          {
            __int128 v85 = *(_OWORD *)v9;
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v32;
            *(_OWORD *)double v32 = v85;
            do
            {
              double v36 = v9[3];
              v9 += 2;
            }

            while (v14 <= v36);
            do
            {
              double v37 = *(v32 - 1);
              v32 -= 2;
            }

            while (v14 > v37);
          }

          if (v9 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v9 - 1);
          }
          a4 = 0;
          *(v9 - 2) = v35;
          *(v9 - 1) = v14;
          continue;
        }

        double v14 = a1[1];
LABEL_11:
        double v15 = *a1;
        unint64_t v16 = a1;
        do
        {
          unint64_t v17 = v16;
          v16 += 2;
        }

        while (v17[3] > v14);
        double v18 = a2;
        if (v17 == a1)
        {
          double v21 = a2;
          while (v16 < v21)
          {
            int v19 = v21 - 2;
            double v22 = *(v21 - 1);
            v21 -= 2;
            if (v22 > v14) {
              goto LABEL_21;
            }
          }

          int v19 = v21;
        }

        else
        {
          do
          {
            int v19 = v18 - 2;
            double v20 = *(v18 - 1);
            v18 -= 2;
          }

          while (v20 <= v14);
        }

double *sub_38BD30(double *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 <= result[1])
  {
    if (v4 > v3)
    {
      __int128 v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (a2[1] > result[1])
      {
        __int128 v7 = *(_OWORD *)result;
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }

  else
  {
    if (v4 <= v3)
    {
      __int128 v8 = *(_OWORD *)result;
      *(_OWORD *)uint64_t result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (a3[1] <= a2[1]) {
        return result;
      }
      __int128 v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }

    else
    {
      __int128 v5 = *(_OWORD *)result;
      *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    }

    *(_OWORD *)a3 = v5;
  }

  return result;
}

__n128 sub_38BDD4(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] > *(double *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] > *(double *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] > a1[1])
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }

  return result;
}

BOOL sub_38BE70(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(a2 - 1) > a1[1])
      {
        __int128 v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }

      return result;
    case 3LL:
      sub_38BD30(a1, a1 + 2, a2 - 2);
      return 1LL;
    case 4LL:
      sub_38BDD4(a1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 4), (uint64_t)(a2 - 2));
      return 1LL;
    case 5LL:
      unint64_t v16 = (__int128 *)(a1 + 2);
      unint64_t v17 = (__int128 *)(a1 + 4);
      double v18 = (__int128 *)(a1 + 6);
      sub_38BDD4(a1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 4), (uint64_t)(a1 + 6));
      if (*(a2 - 1) > a1[7])
      {
        __int128 v19 = *v18;
        *double v18 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v19;
        if (a1[7] > a1[5])
        {
          __int128 v20 = *v17;
          *unint64_t v17 = *v18;
          *double v18 = v20;
          if (a1[5] > a1[3])
          {
            __int128 v21 = *v16;
            *unint64_t v16 = *v17;
            *unint64_t v17 = v21;
            if (a1[3] > a1[1])
            {
              __int128 v22 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v16;
              *unint64_t v16 = v22;
            }
          }
        }
      }

      return 1LL;
    default:
      __int128 v7 = a1 + 4;
      sub_38BD30(a1, a1 + 2, a1 + 4);
      __int128 v8 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1LL;
      }
      uint64_t v9 = 0LL;
      int v10 = 0;
      break;
  }

  while (1)
  {
    double v11 = v8[1];
    if (v11 > v7[1])
    {
      uint64_t v12 = *(void *)v8;
      uint64_t v13 = v9;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v13 + 48) = *(_OWORD *)((char *)a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        double v14 = *(double *)((char *)a1 + v13 + 24);
        v13 -= 16LL;
        if (v11 <= v14)
        {
          uint64_t v15 = (uint64_t)a1 + v13 + 48;
          goto LABEL_13;
        }
      }

      uint64_t v15 = (uint64_t)a1;
LABEL_13:
      *(void *)uint64_t v15 = v12;
      *(double *)(v15 + 8) = v11;
      if (++v10 == 8) {
        return v8 + 2 == a2;
      }
    }

    __int128 v7 = v8;
    v9 += 16LL;
    v8 += 2;
    if (v8 == a2) {
      return 1LL;
    }
  }

BOOL sub_38C078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      __int128 v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        __int128 v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        _OWORD *v6 = v7;
      }

      return result;
    case 3LL:
      sub_1AEF7C((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1LL;
    case 4LL:
      sub_1AF020((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1LL;
    case 5LL:
      unint64_t v17 = (__int128 *)(a1 + 16);
      double v18 = (__int128 *)(a1 + 32);
      __int128 v19 = (__int128 *)(a1 + 48);
      sub_1AF020((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a1 + 48));
      double v21 = *(double *)(a2 - 16);
      __int128 v20 = (__int128 *)(a2 - 16);
      if (v21 < *(double *)(a1 + 48))
      {
        __int128 v22 = *v19;
        *__int128 v19 = *v20;
        __int128 *v20 = v22;
        if (*(double *)v19 < *(double *)v18)
        {
          __int128 v23 = *v18;
          *double v18 = *v19;
          *__int128 v19 = v23;
          if (*(double *)v18 < *(double *)v17)
          {
            __int128 v24 = *v17;
            *unint64_t v17 = *v18;
            *double v18 = v24;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              __int128 v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *unint64_t v17 = v25;
            }
          }
        }
      }

      return 1LL;
    default:
      __int128 v8 = (double *)(a1 + 32);
      sub_1AEF7C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (1)
  {
    double v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        double v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16LL;
        if (v12 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_13;
        }
      }

      uint64_t v16 = a1;
LABEL_13:
      *(double *)uint64_t v16 = v12;
      *(void *)(v16 + 8) = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }

    __int128 v8 = (double *)v9;
    v10 += 16LL;
    v9 += 16LL;
    if (v9 == a2) {
      return 1LL;
    }
  }

uint64_t sub_38C280(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
        __int16 v13 = 1024;
        int v14 = 274;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: RoutingHandlerAction passed clientData as NULL.",  buf,  0x12u);
      }
    }
  }

  uint64_t v2 = sub_5954C();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144LL))(v2);
  uint64_t v4 = (os_log_t *)sub_138E8(10);
  __int128 v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v6 = "disabled";
    if (v3) {
      __int128 v6 = "enabled";
    }
    __int128 v7 = "on";
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
    __int16 v13 = 1024;
    int v14 = 62;
    uint64_t v16 = v6;
    __int16 v15 = 2080;
    if (v3) {
      __int128 v7 = "off";
    }
    __int16 v17 = 2080;
    double v18 = v7;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Low Power Mode %s, turning %s always listening",  buf,  0x26u);
  }

  int v11 = v3 ^ 1;
  strcpy(buf, "lepdbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  return (*(uint64_t (**)(uint64_t, _BYTE *, void, void, uint64_t, int *))(*(void *)a1 + 48LL))( a1,  buf,  0LL,  0LL,  4LL,  &v11);
}

uint64_t sub_38C448(int *a1, int *a2, void *a3)
{
  __int128 v5 = v12;
  if (v12 == &v11)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    int v6 = *a2;
    int v7 = *a1;
    do
    {
      uint64_t v8 = v5[2];
      v13[0] = v7;
      v13[1] = v6;
      v13[2] = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v8 + 16LL))(v8, v13);
      if ((v9 & 1) != 0) {
        break;
      }
      __int128 v5 = (uint64_t *)v5[1];
    }

    while (v5 != &v11);
  }

  sub_1BB88(&v11);
  return v9;
}

void sub_38C4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_38C50C(int *a1, int *a2, void *a3)
{
  __int128 v5 = v12;
  if (v12 == &v11)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    int v6 = *a2;
    int v7 = *a1;
    do
    {
      uint64_t v8 = v5[2];
      v13[0] = v7;
      v13[1] = v6;
      v13[2] = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v8 + 24LL))(v8, v13);
      if ((v9 & 1) != 0) {
        break;
      }
      __int128 v5 = (uint64_t *)v5[1];
    }

    while (v5 != &v11);
  }

  sub_1BB88(&v11);
  return v9;
}

void sub_38C5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_38C5D0(uint64_t a1)
{
  *(void *)a1 = off_484F78;
  int v3 = (void **)(a1 + 528);
  sub_7A668(&v3);
  return sub_F8158(a1);
}

void sub_38C614(uint64_t a1)
{
  *(void *)a1 = off_484F78;
  int v3 = (void **)(a1 + 528);
  sub_7A668(&v3);
  uint64_t v2 = (void *)sub_F8158(a1);
  operator delete(v2);
}

void sub_38C65C(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  if (*a2 == 1668703084 || *a2 == 1668576377)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  else
  {
    int v4 = a2[1];
    if (v4 <= 1987077986)
    {
      BOOL v5 = v4 == 1768057203;
      int v6 = 1919776355;
    }

    else
    {
      BOOL v5 = v4 == 1987077987 || v4 == 1987081833;
      int v6 = 1987081839;
    }

    if (v5 || v4 == v6) {
      uint64_t v8 = (__int32 ***)(a1 + 528);
    }
    else {
      uint64_t v8 = (__int32 ***)(a1 + 96);
    }
    sub_F72A4(a3, v4, *v8, v8[1]);
  }

uint64_t sub_38C6F4(uint64_t a1, int a2)
{
  LOBYTE(v3) = 0;
  char v4 = 0;
  return sub_38DC9C(a1, a2, &v3);
}

uint64_t sub_38C71C(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  char v5 = 1;
  return sub_38DC9C(a1, a2, (int *)&v4);
}

uint64_t sub_38C748(uint64_t a1)
{
  return *(void *)(a1 + 560);
}

uint64_t sub_38C750()
{
  return 1LL;
}

void sub_38C758(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  uint64_t v10 = (os_log_t *)sub_138E8(23);
  uint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
  {
    double v12 = &v59;
    sub_2CA1C(&v59, a3);
    if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v12 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    __int16 v13 = &v58;
    sub_23FE8((uint64_t)&v58, (os_unfair_lock_t)(a1 + 8));
    if ((v58.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v13 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if (*((_BYTE *)a4 + 4))
    {
      sub_2CA1C(__p, *a4);
      if (v57 >= 0) {
        int v14 = __p;
      }
      else {
        int v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 307;
      __int16 v61 = 2080;
      uint64_t v62 = v12;
      __int16 v63 = 2080;
      uint64_t v64 = v13;
      __int16 v65 = 2080;
      uint64_t v66 = (const char *)v14;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting preferred sub-port: %s on port: %s with preferred polar pattern: %s",  buf,  0x30u);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 307;
      __int16 v61 = 2080;
      uint64_t v62 = v12;
      __int16 v63 = 2080;
      uint64_t v64 = v13;
      __int16 v65 = 2080;
      uint64_t v66 = "none";
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting preferred sub-port: %s on port: %s with preferred polar pattern: %s",  buf,  0x30u);
    }
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
  sub_38DB00(&v54, a3, *(void *)(a1 + 96), *(void *)(a1 + 104));
  uint64_t v15 = v54;
  if (!v54)
  {
    __int16 v40 = (os_log_t *)sub_138E8(13);
    __int128 v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v59, a3);
      int size = (char)v59.__r_.__value_.__s.__size_;
      std::string::size_type v43 = v59.__r_.__value_.__r.__words[0];
      sub_2CA1C(&v58, *(unsigned int *)(a1 + 144));
      unint64_t v44 = &v59;
      if (size < 0) {
        unint64_t v44 = (std::string *)v43;
      }
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v45 = &v58;
      }
      else {
        std::string v45 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 314;
      __int16 v61 = 2080;
      uint64_t v62 = v44;
      __int16 v63 = 2080;
      uint64_t v64 = v45;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [subPort is NULL]: Attempt to set unknown sub-port (%s) preferred on po rt with type %s.",  buf,  0x26u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to set unknown sub-port (%s) preferred on port with type %s.");
  }

  if (*((_BYTE *)a4 + 4))
  {
    buf[0] = 0;
    uint8_t buf[4] = 0;
    uint64_t v16 = sub_389A74(v54, (uint64_t)buf, (uint64_t)a4);
    if (!v16)
    {
      uint64_t v47 = (os_log_t *)sub_138E8(13);
      uint64_t v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v59, *a4);
        int v49 = (char)v59.__r_.__value_.__s.__size_;
        std::string::size_type v50 = v59.__r_.__value_.__r.__words[0];
        sub_3893A0(&v58, (unsigned int *)v15);
        double v51 = &v59;
        if (v49 < 0) {
          double v51 = (std::string *)v50;
        }
        if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v52 = &v58;
        }
        else {
          uint64_t v52 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 321;
        __int16 v61 = 2080;
        uint64_t v62 = v51;
        __int16 v63 = 2080;
        uint64_t v64 = v52;
        _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [config is NULL]: Invalid pattern %s for sub-port %s",  buf,  0x26u);
      }

      double v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v53, "Invalid pattern %s for sub-port %s");
    }

    for (uint64_t i = *(_DWORD **)(v16 + 40); ; ++i)
    {
      if (i == *(_DWORD **)(v16 + 48))
      {
        int v18 = *a4;
        *(_BYTE *)(a1 + 572) = *((_BYTE *)a4 + 4);
        *(_DWORD *)(a1 + 568) = v18;
        goto LABEL_26;
      }

      if (*i == (_DWORD)a2) {
        break;
      }
    }

    double v32 = (os_log_t *)sub_138E8(23);
    double v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_INFO))
    {
      uint64_t v34 = *a4;
      double v35 = &v59;
      sub_2CA1C(&v59, v34);
      if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        double v35 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      sub_3893A0(&v58, (unsigned int *)v15);
      int v36 = (char)v58.__r_.__value_.__s.__size_;
      std::string::size_type v37 = v58.__r_.__value_.__r.__words[0];
      sub_2CA1C(__p, a2);
      __int128 v38 = &v58;
      if (v36 < 0) {
        __int128 v38 = (std::string *)v37;
      }
      if (v57 >= 0) {
        __int128 v39 = __p;
      }
      else {
        __int128 v39 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 335;
      __int16 v61 = 2080;
      uint64_t v62 = v35;
      __int16 v63 = 2080;
      uint64_t v64 = v38;
      __int16 v65 = 2080;
      uint64_t v66 = (const char *)v39;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_INFO,  "%25s:%-5d Ignoring set of polar pattern: %s on sub-port %s, because it is not allowed for the current mode: %s",  buf,  0x30u);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_38CEFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (v27 < 0) {
    operator delete(v26);
  }
  sub_7A768((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_BYTE *sub_38CFE4(_BYTE *result)
{
  result[128] = 0;
  result[132] = 0;
  result[136] = 0;
  result[140] = 0;
  result[560] = 0;
  result[564] = 0;
  result[568] = 0;
  result[572] = 0;
  return result;
}

uint64_t sub_38D008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = *(uint64_t **)(a1 + 96);
  char v5 = *(uint64_t **)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_63;
  }
  do
  {
    uint64_t v8 = (int *)*v4;
    uint64_t v9 = (std::__shared_weak_count *)v4[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      int v12 = *v8;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }

      if (v12 == (_DWORD)a2) {
        goto LABEL_14;
      }
    }

    else if (*v8 == (_DWORD)a2)
    {
      goto LABEL_14;
    }

    v4 += 2;
  }

  while (v4 != v5);
  float v4 = v5;
LABEL_14:
  if (v4 == *(uint64_t **)(a1 + 104))
  {
LABEL_63:
    int v36 = (os_log_t *)sub_138E8(13);
    std::string::size_type v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__p, a2);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      std::string::size_type v50 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v51 = 1024;
      int v52 = 377;
      __int16 v53 = 1024;
      LODWORD(v54[0]) = a2;
      WORD2(v54[0]) = 2080;
      *(void *)((char *)v54 + 6) = p_p;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not find sub-port for id: %u (%s)",  buf,  0x22u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Could not find sub-port for id: %u (%s)");
  }

  uint64_t v14 = *v4;
  uint64_t v15 = (std::__shared_weak_count *)v4[1];
  uint64_t v47 = v14;
  uint64_t v48 = v15;
  if (v15)
  {
    uint64_t v16 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  if (v14)
  {
    uint64_t v19 = *(void *)(v14 + 32);
    uint64_t v18 = *(void *)(v14 + 40);
    if (v19 == v18) {
      goto LABEL_71;
    }
    uint64_t v20 = v19 + 64;
    do
    {
      int v21 = *(_DWORD *)(v20 - 32);
      BOOL v22 = v21 != 1852796517 || v20 == v18;
      v20 += 64LL;
    }

    while (!v22);
    if (v21 == 1852796517)
    {
LABEL_71:
      __int16 v40 = (os_log_t *)sub_138E8(13);
      __int128 v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        sub_3893A0(&__p, (unsigned int *)v14);
        __int128 v42 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        std::string::size_type v50 = "Port_MicrophoneBuiltIn_Aspen.cpp";
        __int16 v51 = 1024;
        int v52 = 362;
        __int16 v53 = 2080;
        v54[0] = v42;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Sub-port %s does not have any polar patterns",  buf,  0x1Cu);
      }

      std::string::size_type v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v43, "Sub-port %s does not have any polar patterns");
    }

    else
    {
      if (*(int *)(v14 + 8) >= 2)
      {
        __int128 v23 = (os_log_t *)sub_138E8(23);
        uint64_t v24 = *v23;
        if (*v23)
        {
          if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            sub_3893A0(&__p, (unsigned int *)v14);
            __int128 v25 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            std::string::size_type v50 = "Port_MicrophoneBuiltIn_Aspen.cpp";
            __int16 v51 = 1024;
            int v52 = 363;
            __int16 v53 = 2080;
            v54[0] = v25;
            _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Accessing a sub-port that does not have client visibility: %s",  buf,  0x1Cu);
          }
        }
      }

      if (*(_BYTE *)(a1 + 572))
      {
        a3 = *(unsigned int *)(a1 + 568);
        goto LABEL_56;
      }

      if (*(_BYTE *)(a3 + 4))
      {
        buf[0] = 0;
        LOBYTE(v50) = 0;
        uint64_t v26 = sub_389A74(v14, a3, (uint64_t)buf);
        if (v26)
        {
          a3 = *(unsigned int *)(v26 + 32);
          goto LABEL_56;
        }
      }

      uint64_t v27 = *(void *)(v14 + 32);
      uint64_t v28 = *(void *)(v14 + 40);
      if (v27 != v28)
      {
        uint64_t v29 = v27 + 64;
        do
        {
          int v30 = *(_DWORD *)(v29 - 32);
          BOOL v31 = v30 != 1852796517 || v29 == v28;
          v29 += 64LL;
        }

        while (!v31);
        if (v30 != 1852796517)
        {
          if ((unint64_t)(v28 - v27) >= 0x41)
          {
            uint64_t v32 = *(void *)(v14 + 32);
            while (*(_DWORD *)(v32 + 32) != 1869442665)
            {
              v32 += 64LL;
              if (v32 == v28) {
                goto LABEL_55;
              }
            }

            uint64_t v27 = v32;
          }

void sub_38D53C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

BOOL sub_38D590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v1 = *(void *)(a1 + 104);
  if (v2 == v1) {
    return 0LL;
  }
  uint64_t v3 = v2 + 16;
  do
  {
    int v4 = *(_DWORD *)(*(void *)(v3 - 16) + 8LL);
    BOOL result = v4 == 1;
    BOOL v6 = v4 == 1 || v3 == v1;
    v3 += 16LL;
  }

  while (!v6);
  return result;
}

void sub_38D5C8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((_DWORD)a2 == 1870033508)
  {
    int v4 = (os_log_t *)sub_138E8(23);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v13 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 391;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_INFO,  "%25s:%-5d Looking up runtime override for built-in mic data sources",  buf,  0x12u);
    }

    sub_14C918(a3);
    if (*a3 == a3[1])
    {
      BOOL v6 = (os_log_t *)sub_138E8(13);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, 1870033508LL);
        if (v11 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        unint64_t v13 = "Port_MicrophoneBuiltIn_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 393;
        __int16 v16 = 2080;
        unint64_t v17 = v8;
        __int16 v18 = 1024;
        int v19 = 1870033508;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not translate data sources for sub-port ID:%s (%u)",  buf,  0x22u);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Could not translate data sources for sub-port ID:%s (%u)");
    }
  }

  else
  {
    sub_F6674(a1, a2, (uint64_t)a3);
  }

void sub_38D7D4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }

  _Unwind_Resume(exception_object);
}

void sub_38D810(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  sub_F6BA0(a1, a2);
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  char v5 = *(uint64_t **)(a1 + 96);
  int v4 = *(uint64_t **)(a1 + 104);
  if (v5 == v4) {
    return;
  }
  while (1)
  {
    uint64_t v6 = *(unsigned int *)*v5;
LABEL_19:
    v5 += 2;
    if (v5 == v4) {
      return;
    }
  }

  if (!*(_BYTE *)(a1 + 140) || *(_DWORD *)(a1 + 136) != (_DWORD)v6)
  {
    if (*(_BYTE *)(a1 + 580))
    {
      int v7 = (os_log_t *)sub_138E8(23);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(__p, *(unsigned int *)(a1 + 576));
          uint64_t v9 = __p;
          if (v17 < 0) {
            uint64_t v9 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v19 = "Port_MicrophoneBuiltIn_Aspen.cpp";
          __int16 v20 = 1024;
          int v21 = 230;
          __int16 v22 = 2080;
          __int128 v23 = v9;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "%25s:%-5d Active sub-port client ID already exists %s.",  buf,  0x1Cu);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v10 = (os_log_t *)sub_138E8(23);
    char v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(__p, v6);
      int v12 = __p;
      if (v17 < 0) {
        int v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v19 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 231;
      __int16 v22 = 2080;
      __int128 v23 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting active sub-port client ID %s.", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    *(_DWORD *)(a1 + 576) = v6;
    *(_BYTE *)(a1 + 580) = 1;
    goto LABEL_19;
  }

  unint64_t v13 = (os_log_t *)sub_138E8(23);
  __int16 v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
  {
    sub_2CA1C(__p, v6);
    int v15 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    int v19 = "Port_MicrophoneBuiltIn_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 224;
    __int16 v22 = 2080;
    __int128 v23 = v15;
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "%25s:%-5d Found matching preferred client ID. Setting active sub-port client ID %s.",  buf,  0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_DWORD *)(a1 + 576) = v6;
  *(_BYTE *)(a1 + 580) = 1;
}

void *sub_38DB00(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    while (**(_DWORD **)a3 != a2)
    {
      a3 += 16LL;
      if (a3 == a4) {
        goto LABEL_4;
      }
    }
  }

  if (a3 == a4)
  {
LABEL_4:
    int v4 = (os_log_t *)sub_138E8(13);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      if (v13 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v15 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v16 = 1024;
      int v17 = 115;
      __int16 v18 = 2080;
      int v19 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not find sub-port with client ID: %s for built-in mic port",  buf,  0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find sub-port with client ID: %s for built-in mic port");
  }

  *BOOL result = *(void *)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  result[1] = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  return result;
}

void sub_38DC80(_Unwind_Exception *a1)
{
}

uint64_t sub_38DC9C(uint64_t a1, int a2, int *a3)
{
  uint64_t v3 = (uint64_t **)(a1 + 96);
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    std::string::size_type v37 = (os_log_t *)sub_138E8(13);
    __int128 v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v53 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 249;
      _os_log_impl(&dword_0, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(_BYTE *)(a1 + 124))
  {
    __int16 v40 = (os_log_t *)sub_138E8(13);
    __int128 v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v53 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 250;
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }

    __int128 v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v42, "Invariant failure.");
  }

  int v6 = 1;
  if (a2 <= 1987077986)
  {
    if (a2 == 1768057203) {
      goto LABEL_11;
    }
    int v7 = 1919776355;
  }

  else
  {
    if (a2 == 1987077987 || a2 == 1987081833) {
      goto LABEL_11;
    }
    int v7 = 1987081839;
  }

  if (a2 != v7) {
    int v6 = 0;
  }
LABEL_11:
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = (os_log_t *)sub_138E8(23);
  unint64_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
  {
    sub_2CA1C(__p, v8);
    char v11 = v51 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    __int16 v53 = "Port_MicrophoneBuiltIn_Aspen.cpp";
    __int16 v54 = 1024;
    int v55 = 255;
    __int16 v56 = 1024;
    *(_DWORD *)char v57 = v8;
    *(_WORD *)&v57[4] = 2080;
    *(void *)&v57[6] = v11;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "%25s:%-5d Looking up client visible sub-port ID for %u (%s)",  buf,  0x22u);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v6) {
    int v12 = (uint64_t **)(a1 + 528);
  }
  else {
    int v12 = v3;
  }
  sub_38E360(&v48, v8, v12, (unsigned int *)(a1 + 576), a3, (int *)(a1 + 568));
  char v13 = v48;
  if (v48)
  {
    __int16 v14 = (os_log_t *)sub_138E8(23);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(__p, *v13);
      int v16 = v51;
      int v17 = (void **)__p[0];
      sub_2CA1C(v46, v8);
      __int16 v18 = __p;
      if (v16 < 0) {
        __int16 v18 = v17;
      }
      if (v47 >= 0) {
        int v19 = v46;
      }
      else {
        int v19 = (void **)v46[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v53 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 264;
      __int16 v56 = 2080;
      *(void *)char v57 = v18;
      *(_WORD *)&v57[8] = 2080;
      *(void *)&v57[10] = v19;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "%25s:%-5d Returning client visible sub-port ID %s for active ID %s",  buf,  0x26u);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v51 < 0) {
        operator delete(__p[0]);
      }
    }

    LODWORD(v20) = *v13;
    int v21 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      goto LABEL_59;
    }
  }

  else
  {
    uint64_t v24 = v49;
    if (v49)
    {
      __int128 v25 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    uint64_t v27 = 552LL;
    if (v6) {
      uint64_t v27 = 556LL;
    }
    uint64_t v28 = *(unsigned int *)(a1 + v27);
    buf[0] = 0;
    LOBYTE(v53) = 0;
    LOBYTE(__p[0]) = 0;
    BYTE4(__p[0]) = 0;
    LOBYTE(v46[0]) = 0;
    BYTE4(v46[0]) = 0;
    sub_38E360(&v48, v28, v12, (unsigned int *)buf, (int *)__p, (int *)v46);
    if (!v48)
    {
      sub_7A768((uint64_t)&v48);
      std::string::size_type v43 = (os_log_t *)sub_138E8(13);
      unint64_t v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v53 = "Port_MicrophoneBuiltIn_Aspen.cpp";
        __int16 v54 = 1024;
        int v55 = 280;
        _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not find client-visible sub-port for active ID or fallback.",  buf,  0x12u);
      }

      std::string v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v45, "Could not find client-visible sub-port for active ID or fallback.");
    }

    uint64_t v20 = *v48;
    uint64_t v29 = (os_log_t *)sub_138E8(23);
    int v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(__p, v8);
      int v31 = v51;
      uint64_t v32 = (void **)__p[0];
      sub_2CA1C(v46, v20);
      double v33 = __p;
      if (v31 < 0) {
        double v33 = v32;
      }
      if (v47 >= 0) {
        unint64_t v34 = v46;
      }
      else {
        unint64_t v34 = (void **)v46[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v53 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 275;
      __int16 v56 = 2080;
      *(void *)char v57 = v33;
      *(_WORD *)&v57[8] = 2080;
      *(void *)&v57[10] = v34;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_INFO,  "%25s:%-5d The current active sub-port (%s) is not client-visible. Substituting sub-port ID: %s",  buf,  0x26u);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v51 < 0) {
        operator delete(__p[0]);
      }
    }

    int v21 = v49;
    if (v49)
    {
      double v35 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v35);
      while (__stlxr(v23 - 1, v35));
LABEL_59:
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

  return v20 | 0x100000000LL;
}

void sub_38E2FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_38E360(void *a1, uint64_t a2, uint64_t **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6 = a4;
  uint64_t v8 = a1;
  int64x2_t v91 = 0uLL;
  unint64_t v92 = 0LL;
  uint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  if (*a3 == v10)
  {
    uint64_t v35 = 0LL;
    uint64_t v34 = 0LL;
  }

  else
  {
    do
    {
      if (sub_389DE8(*v9, a2, a5, a6))
      {
        uint64_t v13 = v91.i64[1];
        if (v91.i64[1] >= (unint64_t)v92)
        {
          uint64_t v18 = (v91.i64[1] - v91.i64[0]) >> 4;
          unint64_t v19 = v18 + 1;
          uint64_t v20 = (uint64_t)&v92[-v91.i64[0]];
          else {
            unint64_t v21 = v19;
          }
          *(void *)&buf[32] = &v92;
          __int16 v22 = (char *)sub_7BE90(v21);
          uint64_t v24 = &v22[16 * v18];
          __int128 v25 = *(_OWORD *)v9;
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v9;
          if (*((void *)&v25 + 1))
          {
            unint64_t v26 = (unint64_t *)(*((void *)&v25 + 1) + 8LL);
            do
              unint64_t v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }

          uint64_t v28 = (void *)v91.i64[1];
          uint64_t v29 = (void *)v91.i64[0];
          if (v91.i64[1] == v91.i64[0])
          {
            int64x2_t v32 = vdupq_n_s64(v91.u64[1]);
            int v30 = &v22[16 * v18];
          }

          else
          {
            int v30 = &v22[16 * v18];
            do
            {
              __int128 v31 = *((_OWORD *)v28 - 1);
              v28 -= 2;
              *((_OWORD *)v30 - 1) = v31;
              v30 -= 16;
              *uint64_t v28 = 0LL;
              v28[1] = 0LL;
            }

            while (v28 != v29);
            int64x2_t v32 = v91;
          }

          int v17 = v24 + 16;
          v91.i64[0] = (uint64_t)v30;
          v91.i64[1] = (uint64_t)(v24 + 16);
          *(int64x2_t *)&buf[8] = v32;
          double v33 = v92;
          unint64_t v92 = &v22[16 * v23];
          *(void *)&uint8_t buf[24] = v33;
          *(void *)AudioObjectPropertyAddress buf = v32.i64[0];
          sub_A0D64((uint64_t)buf);
        }

        else
        {
          *(void *)v91.i64[1] = *v9;
          uint64_t v14 = v9[1];
          *(void *)(v13 + 8) = v14;
          if (v14)
          {
            int v15 = (unint64_t *)(v14 + 8);
            do
              unint64_t v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }

          int v17 = (_OWORD *)(v13 + 16);
        }

        v91.i64[1] = (uint64_t)v17;
      }

      v9 += 2;
    }

    while (v9 != v10);
    uint64_t v34 = v91.i64[1];
    uint64_t v35 = v91.i64[0];
    int v6 = a4;
    uint64_t v8 = a1;
  }

  uint64_t v36 = (v34 - v35) >> 4;
  if (v36 == 1)
  {
    __int16 v40 = (os_log_t *)sub_138E8(23);
    __int128 v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(__p, a2);
      int v42 = SHIBYTE(cap);
      std::string::size_type v43 = (void **)__p[0];
      sub_2CA1C(&v93, **(unsigned int **)v91.i64[0]);
      unint64_t v44 = __p;
      if (v42 < 0) {
        unint64_t v44 = v43;
      }
      if ((v93.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v45 = &v93;
      }
      else {
        std::string v45 = (std::string *)v93.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 146;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v44;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&buf[30] = v45;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_INFO,  "%25s:%-5d Found match for internal sub-port ID %s: %s.",  buf,  0x26u);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v46 = *(void *)(v91.i64[0] + 8);
    void *v8 = *(void *)v91.i64[0];
    v8[1] = v46;
    if (v46)
    {
      char v47 = (unint64_t *)(v46 + 8);
      do
        unint64_t v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
  }

  else
  {
    if (!v36)
    {
      std::string::size_type v37 = (os_log_t *)sub_138E8(23);
      __int128 v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, a2);
        if (cap >= 0) {
          __int128 v39 = __p;
        }
        else {
          __int128 v39 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 139;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v39;
        _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not find match for internal sub-port ID %s.",  buf,  0x1Cu);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
      }

      void *v8 = 0LL;
      v8[1] = 0LL;
      goto LABEL_121;
    }

    int v49 = (os_log_t *)sub_138E8(23);
    std::string::size_type v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_INFO))
    {
      char v51 = v89;
      sub_2CA1C(v89, a2);
      if (v90 < 0) {
        char v51 = (void **)v89[0];
      }
      memset(&v88, 0, sizeof(v88));
      __int16 v53 = (void *)v91.i64[1];
      int v52 = (void *)v91.i64[0];
      if (v91.i64[0] == v91.i64[1])
      {
        uint64_t v62 = &v88;
      }

      else
      {
        do
        {
          sub_2CA1C(&v93, *(unsigned int *)*v52);
          uint64_t v54 = *(void *)(v91.i64[1] - 16);
          BOOL v55 = *v52 == v54;
          BOOL v56 = *v52 != v54;
          if (v55) {
            char v57 = "";
          }
          else {
            char v57 = ", ";
          }
          std::string v58 = std::string::append(&v93, v57, 2LL * v56);
          __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          int64_t cap = v58->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string __p = v59;
          v58->__r_.__value_.__l.__size_ = 0LL;
          v58->__r_.__value_.__l.__cap_ = 0LL;
          v58->__r_.__value_.__r.__words[0] = 0LL;
          if (cap >= 0) {
            uint64_t v60 = __p;
          }
          else {
            uint64_t v60 = (void **)__p[0];
          }
          if (cap >= 0) {
            std::string::size_type v61 = HIBYTE(cap);
          }
          else {
            std::string::size_type v61 = (std::string::size_type)__p[1];
          }
          std::string::append(&v88, (const std::string::value_type *)v60, v61);
          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
          v52 += 2;
        }

        while (v52 != v53);
        uint64_t v62 = &v88;
        if ((v88.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v62 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
      }

      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 161;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v51;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&buf[30] = v62;
      _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_INFO,  "%25s:%-5d Multiple matches found for internal sub-port ID %s: %s.",  buf,  0x26u);
      if (v90 < 0) {
        operator delete(v89[0]);
      }
    }

    if (*((_BYTE *)v6 + 4))
    {
      uint64_t v63 = v91.i64[0];
      if (v91.i64[0] != v91.i64[1])
      {
        while (*v6 != **(_DWORD **)v63)
        {
          v63 += 16LL;
          if (v63 == v91.i64[1])
          {
            uint64_t v63 = v91.i64[1];
            break;
          }
        }
      }

      if ((uint64_t *)v63 != a3[1])
      {
        uint64_t v64 = (os_log_t *)sub_138E8(23);
        __int16 v65 = *v64;
        if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(__p, a2);
          int v66 = SHIBYTE(cap);
          uint64_t v67 = (void **)__p[0];
          sub_2CA1C(&v93, *v6);
          uint64_t v68 = __p;
          if (v66 < 0) {
            uint64_t v68 = v67;
          }
          if ((v93.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t v69 = &v93;
          }
          else {
            unint64_t v69 = (std::string *)v93.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 171;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v68;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = v69;
          _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_INFO,  "%25s:%-5d Found match for internal sub-port ID %s using client ID %s.",  buf,  0x26u);
          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
        }

        void *v8 = *(void *)v63;
        uint64_t v70 = *(void *)(v63 + 8);
        v8[1] = v70;
        if (v70)
        {
          uint64_t v71 = (unint64_t *)(v70 + 8);
          do
            unint64_t v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }

        goto LABEL_121;
      }

      unint64_t v73 = (os_log_t *)sub_138E8(23);
      int v74 = *v73;
      if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, a2);
        int v75 = SHIBYTE(cap);
        uint64_t v76 = (void **)__p[0];
        sub_2CA1C(&v93, *v6);
        uint64_t v77 = __p;
        if (v75 < 0) {
          uint64_t v77 = v76;
        }
        if ((v93.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint32_t v78 = &v93;
        }
        else {
          uint32_t v78 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 177;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v77;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&buf[30] = v78;
        _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to find match for internal sub-port ID %s using client ID %s.",  buf,  0x26u);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
      }
    }

    double v79 = (os_log_t *)sub_138E8(23);
    double v80 = *v79;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(__p, **(unsigned int **)v91.i64[0]);
      double v81 = cap >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 181;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v81;
      _os_log_impl(&dword_0, v80, OS_LOG_TYPE_INFO, "%25s:%-5d Returning first matching sub-port %s.", buf, 0x1Cu);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v82 = *(void *)(v91.i64[0] + 8);
    void *v8 = *(void *)v91.i64[0];
    v8[1] = v82;
    if (v82)
    {
      double v83 = (unint64_t *)(v82 + 8);
      do
        unint64_t v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
  }

void sub_38EBF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, char *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  if (v40 < 0) {
    operator delete(v39);
  }
  a34 = &a25;
  sub_7A668((void ***)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_38ECC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64x2_t v96 = 0uLL;
  uint64_t v97 = 0LL;
  uint64_t v9 = *(uint64_t **)a6;
  uint64_t v8 = *(uint64_t **)(a6 + 8);
  if (*(uint64_t **)a6 != v8)
  {
    do
    {
      sub_EE250(&v98, *v9);
      uint64_t v10 = sub_138E8(23);
      if ((*(_BYTE *)(v10 + 8) & 1) != 0)
      {
        char v11 = *(os_log_s **)v10;
        if (*(void *)v10)
        {
          if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
          {
            sub_3893A0(&__p, (unsigned int *)v98);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 87;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = p_p;
            _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding a sub-port %s", buf, 0x1Cu);
          }
        }
      }

      uint64_t v13 = v96.i64[1];
      if (v96.i64[1] >= (unint64_t)v97)
      {
        uint64_t v18 = (v96.i64[1] - v96.i64[0]) >> 4;
        unint64_t v19 = v18 + 1;
        uint64_t v20 = (uint64_t)&v97[-v96.i64[0]];
        else {
          unint64_t v21 = v19;
        }
        uint64_t v101 = &v97;
        __int16 v22 = (char *)sub_7BE90(v21);
        uint64_t v24 = &v22[16 * v18];
        uint64_t v25 = *((void *)&v98 + 1);
        *(_OWORD *)uint64_t v24 = v98;
        if (v25)
        {
          unint64_t v26 = (unint64_t *)(v25 + 8);
          do
            unint64_t v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }

        uint64_t v28 = (void *)v96.i64[1];
        uint64_t v29 = (void *)v96.i64[0];
        if (v96.i64[1] == v96.i64[0])
        {
          int64x2_t v32 = vdupq_n_s64(v96.u64[1]);
          int v30 = &v22[16 * v18];
        }

        else
        {
          int v30 = &v22[16 * v18];
          do
          {
            __int128 v31 = *((_OWORD *)v28 - 1);
            v28 -= 2;
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 16;
            *uint64_t v28 = 0LL;
            v28[1] = 0LL;
          }

          while (v28 != v29);
          int64x2_t v32 = v96;
        }

        int v17 = v24 + 16;
        v96.i64[0] = (uint64_t)v30;
        v96.i64[1] = (uint64_t)(v24 + 16);
        *(int64x2_t *)&buf[8] = v32;
        double v33 = v97;
        uint64_t v97 = &v22[16 * v23];
        *(void *)&uint8_t buf[24] = v33;
        *(void *)AudioObjectPropertyAddress buf = v32.i64[0];
        sub_A0D64((uint64_t)buf);
        uint64_t v14 = (std::__shared_weak_count *)*((void *)&v98 + 1);
      }

      else
      {
        uint64_t v14 = (std::__shared_weak_count *)*((void *)&v98 + 1);
        *(void *)v96.i64[1] = v98;
        *(void *)(v13 + 8) = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }

        int v17 = (_OWORD *)(v13 + 16);
      }

      v96.i64[1] = (uint64_t)v17;
      if (v14)
      {
        uint64_t v34 = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      ++v9;
    }

    while (v9 != v8);
  }

  uint64_t v36 = sub_138E8(23);
  if ((*(_BYTE *)(v36 + 8) & 1) != 0)
  {
    std::string::size_type v37 = *(os_log_s **)v36;
    if (*(void *)v36)
    {
      if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 91;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = (v96.i64[1] - v96.i64[0]) >> 4;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Finished creating sub-ports.  Added %lu subPorts",  buf,  0x1Cu);
      }
    }
  }

  sub_7D084(buf, "");
  sub_F9638(a1, &qword_4A9938, a2, a3, a4, a5, (char **)&v96, (__int128 *)buf);
  *(void *)a1 = &off_46FD40;
  *(_WORD *)(a1 + 520) = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)AudioObjectPropertyAddress buf = &v96;
  sub_7A668((void ***)buf);
  *(void *)a1 = off_484F78;
  __int128 v38 = (int64x2_t *)(a1 + 528);
  *(void *)(a1 + 528) = 0LL;
  *(void *)(a1 + 544) = 0LL;
  *(void *)(a1 + 536) = 0LL;
  __int128 v39 = *(uint64_t **)(a6 + 32);
  for (uint64_t i = *(uint64_t **)(a6 + 40); v39 != i; ++v39)
  {
    sub_EE250(&v96, *v39);
    uint64_t v41 = sub_138E8(23);
    if ((*(_BYTE *)(v41 + 8) & 1) != 0)
    {
      int v42 = *(os_log_s **)v41;
      if (*(void *)v41)
      {
        if (os_log_type_enabled(*(os_log_t *)v41, OS_LOG_TYPE_DEBUG))
        {
          sub_3893A0(&__p, (unsigned int *)v96.i64[0]);
          std::string::size_type v43 = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string::size_type v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 101;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v43;
          _os_log_impl(&dword_0, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding a sub-port %s", buf, 0x1Cu);
        }
      }
    }

    unint64_t v44 = *(int64x2_t **)(a1 + 536);
    unint64_t v45 = *(void *)(a1 + 544);
    if ((unint64_t)v44 >= v45)
    {
      uint64_t v50 = ((uint64_t)v44->i64 - v38->i64[0]) >> 4;
      unint64_t v51 = v50 + 1;
      uint64_t v52 = v45 - v38->i64[0];
      if (v52 >> 3 > v51) {
        unint64_t v51 = v52 >> 3;
      }
      else {
        unint64_t v53 = v51;
      }
      uint64_t v101 = (char **)(a1 + 544);
      uint64_t v54 = (char *)sub_7BE90(v53);
      BOOL v56 = (int64x2_t *)&v54[16 * v50];
      uint64_t v57 = v96.i64[1];
      *BOOL v56 = v96;
      if (v57)
      {
        std::string v58 = (unint64_t *)(v57 + 8);
        do
          unint64_t v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }

      uint64_t v60 = *(void **)(a1 + 536);
      std::string::size_type v61 = *(void **)(a1 + 528);
      if (v60 == v61)
      {
        int64x2_t v64 = vdupq_n_s64((unint64_t)v60);
        uint64_t v62 = &v54[16 * v50];
      }

      else
      {
        uint64_t v62 = &v54[16 * v50];
        do
        {
          __int128 v63 = *((_OWORD *)v60 - 1);
          v60 -= 2;
          *((_OWORD *)v62 - 1) = v63;
          v62 -= 16;
          *uint64_t v60 = 0LL;
          v60[1] = 0LL;
        }

        while (v60 != v61);
        int64x2_t v64 = *v38;
      }

      int v49 = v56 + 1;
      *(void *)(a1 + 528) = v62;
      *(void *)(a1 + 536) = v56 + 1;
      *(int64x2_t *)&buf[8] = v64;
      uint64_t v65 = *(void *)(a1 + 544);
      *(void *)(a1 + 544) = &v54[16 * v55];
      *(void *)&uint8_t buf[24] = v65;
      *(void *)AudioObjectPropertyAddress buf = v64.i64[0];
      sub_A0D64((uint64_t)buf);
      uint64_t v46 = (std::__shared_weak_count *)v96.i64[1];
    }

    else
    {
      v44->i64[0] = v96.i64[0];
      uint64_t v46 = (std::__shared_weak_count *)v96.i64[1];
      v44->i64[1] = v96.i64[1];
      if (v46)
      {
        char v47 = (unint64_t *)&v46->__shared_owners_;
        do
          unint64_t v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }

      int v49 = v44 + 1;
    }

    *(void *)(a1 + 536) = v49;
    if (v46)
    {
      int v66 = (unint64_t *)&v46->__shared_owners_;
      do
        unint64_t v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }

  uint64_t v68 = sub_138E8(23);
  if ((*(_BYTE *)(v68 + 8) & 1) != 0)
  {
    unint64_t v69 = *(os_log_s **)v68;
    if (*(void *)v68)
    {
      if (os_log_type_enabled(*(os_log_t *)v68, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v70 = (uint64_t)(*(void *)(a1 + 536) - *(void *)(a1 + 528)) >> 4;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 105;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v70;
        _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Finished creating sub-ports.  Added %lu subPorts",  buf,  0x1Cu);
      }
    }
  }

  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 564) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 572) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  uint64_t v71 = *(void *)(a6 + 24);
  if (!v71)
  {
    __int128 v85 = (os_log_t *)sub_138E8(13);
    __int128 v86 = *v85;
    if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 197;
      _os_log_impl(&dword_0, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_121;
  }

  unint64_t v72 = *(char **)(v71 + 32);
  unint64_t v73 = *(char **)(v71 + 40);
  BOOL v74 = (unint64_t)(v73 - v72) < 0x41 || v73 == v72;
  char v75 = v74;
  if (v74)
  {
LABEL_90:
    if (v72) {
      goto LABEL_91;
    }
    unint64_t v89 = (os_log_t *)sub_138E8(13);
    char v90 = *v89;
    if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 198;
      _os_log_impl(&dword_0, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_38F5CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

void sub_38F708(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

void sub_38F720(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_38F734(os_unfair_lock_s *a1)
{
  if (!(*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  0LL))
  {
    int v15 = (os_log_t *)sub_138E8(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_VirtualEARC_Aspen.cpp";
      __int16 v28 = 1024;
      *(_DWORD *)uint64_t v29 = 47;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Virtual eARC device has no input streams.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Virtual eARC device has no input streams.");
  }

  int v2 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v2, 0);
  sub_1D5AE0(a1, (uint64_t)v2);
  uint64_t v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D580C((uint64_t)a1, 0, 1885434467LL, (uint64_t)v2);
  sub_1D55D4((uint64_t *)a1, 0, 1885434467LL, (uint64_t)v3);
  int v4 = (os_log_t *)sub_138E8(17);
  char v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( __p,  a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_VirtualEARC_Aspen.cpp";
    __int16 v28 = 1024;
    *(_DWORD *)uint64_t v29 = 55;
    *(_WORD *)&v29[4] = 2112;
    *(void **)&v29[6] = __p[0];
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a Virtual eARC input port with UID %@",  buf,  0x1Cu);
    sub_19DFC((uint64_t)__p);
  }

  memset(v22, 0, sizeof(v22));
  CFStringRef v6 = CFStringCreateWithCString(0LL, "Virtual eARC", 0x600u);
  CFStringRef v20 = v6;
  char v21 = 1;
  *(void *)AudioObjectPropertyAddress buf = v6;
  buf[8] = 1;
  if (v6) {
    CFRetain(v6);
  }
  *(void *)&_OWORD v29[2] = 0LL;
  v29[10] = 1;
  uint64_t v30 = 0LL;
  char v31 = 1;
  (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v19,  a1);
  memset(v18, 0, sizeof(v18));
  int v7 = operator new(0x228uLL);
  v7[1] = 0LL;
  v7[2] = 0LL;
  void *v7 = off_485B80;
  sub_7D084(__p, "");
  sub_F9638( (uint64_t)(v7 + 3),  &qword_4A9A10,  (uint64_t)a1,  (uint64_t)v22,  (uint64_t)buf,  (uint64_t)v19,  v18,  (__int128 *)__p);
  v7[3] = &off_46FD40;
  *((_WORD *)v7 + 272) = 0;
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&__int128 v23 = v7 + 3;
  *((void *)&v23 + 1) = v7;
  sub_AFDAC((uint64_t)&v23, v7 + 13, (uint64_t)(v7 + 3));
  __int128 v24 = v23;
  __int128 v23 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v24);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    uint64_t v9 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  char v11 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    int v12 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  __p[0] = v18;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)v19);
  sub_19DFC((uint64_t)&v30);
  sub_19DFC((uint64_t)&v29[2]);
  sub_19DFC((uint64_t)buf);
  sub_19DFC((uint64_t)&v20);
  if (v22[0]) {
    operator delete(v22[0]);
  }
  return 1LL;
}

void sub_38FB24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
}

uint64_t sub_38FBE4(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885434467)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      char v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v13 = "Device_VirtualEARC_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 73;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    CFStringRef v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v13 = "Device_VirtualEARC_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 74;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_38FD90(_Unwind_Exception *a1)
{
}

void sub_38FDAC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v71 = 0u;
  __int128 v72 = 0u;
  int v73 = 1065353216;
  sub_7D084(cf, "");
  sub_7D084(buf, "");
  sub_7D084(v61, off_48C220);
  sub_7D084(&v74, "AU");
  sub_7D084(&__p, "VAD");
  sub_836D4((char *)__dst, (__int128 *)cf, (uint64_t)buf, (std::string *)v61, &v74, &__p);
  if (SBYTE7(v62) < 0) {
    operator delete(v61[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ((cf[23] & 0x80000000) != 0) {
    operator delete(*(void **)cf);
  }
  uint64_t v59 = a2;
  sub_D0720((CFDataRef *)buf, a2);
  int v4 = *(const void **)buf;
  sub_155850(&v64, *(const __CFData **)buf);
  if (v4) {
    CFRelease(v4);
  }
  if (!v64)
  {
    int v40 = (os_log_t *)sub_138E8(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      else {
        uint64_t v42 = *(void *)v59;
      }
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 47;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = v42;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Failed to load CFDictionary from path %s",  cf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to load CFDictionary from path %s");
  }

  *(_OWORD *)std::string::size_type v61 = 0u;
  __int128 v62 = 0u;
  float v63 = 1.0;
  sub_22C22C(v76, (const __CFDictionary *)v64, (const UInt8 *)"CommonData");
  if (!v77)
  {
    unint64_t v44 = (os_log_t *)sub_138E8(13);
    unint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFTypeRef cf = 136315394;
      *(void *)&cf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 670;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unable to find CommonData dictionary",  cf,  0x12u);
    }

    uint64_t v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v46, "Unable to find CommonData dictionary");
  }

  sub_7D084(buf, "");
  sub_7D084(&v74, "");
  sub_7D084(&__p, off_48C220);
  sub_7D084(&theDict, "AU");
  sub_7D084(&v78, "VAD");
  sub_836D4(cf, (__int128 *)buf, (uint64_t)&v74, &__p, &theDict, &v78);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (!*(void *)v76)
  {
    char v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
  }

  if (!sub_D12E8(*(const __CFDictionary **)v76, (const UInt8 *)"tuningPath"))
  {
    unint64_t v48 = (os_log_t *)sub_138E8(13);
    int v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 465;
      _os_log_impl(&dword_0, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_390B30( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18, __int16 a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, void *__p, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,__int128 buf,__int128 a52)
{
  if (a2 == 1)
  {
    uint64_t v55 = __cxa_begin_catch(a1);
    BOOL v56 = (os_log_t *)sub_138E8(20);
    uint64_t v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      else {
        uint64_t v58 = *(void *)a10;
      }
      uint64_t v59 = (*(uint64_t (**)(void *))(*(void *)v55 + 16LL))(v55);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "DSPGraphConfig_Utilities.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 52;
      WORD1(a52) = 2080;
      *(void *)((char *)&a52 + 4) = v58;
      WORD6(a52) = 2080;
      *(void *)((char *)&a52 + 14) = v59;
      _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Exception getting configuration data from %s : %s",  (uint8_t *)&buf,  0x26u);
    }

    __cxa_rethrow();
  }

  sub_8399C((uint64_t)&a19);
  sub_830A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_390EF8()
{
}

uint64_t sub_390F30(void *a1, const __CFDictionary *a2, const UInt8 *a3, void *a4)
{
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }

  else
  {
    *a1 = *a4;
    *a4 = 0LL;
  }

  return sub_8D530((uint64_t)&cf);
}

void sub_390F98(uint64_t a1, void *a2)
{
  int v3 = SHIBYTE(v6);
  if (SHIBYTE(v6) < 0)
  {
    sub_24054((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v6;
  }

  CFTypeRef v4 = cf;
  if (cf)
  {
    CFRetain(cf);
    *(void *)(a1 + 24) = v4;
    CFRelease(v4);
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(__p[0]);
    return;
  }

  *(void *)(a1 + 24) = 0LL;
  if (v3 < 0) {
    goto LABEL_8;
  }
}

void sub_391034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_391050(uint64_t a1, const __CFDictionary **a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v4 = a1 + 48;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v5 = a1 + 96;
  *(void *)(a1 + 112) = 0LL;
  uint64_t v6 = a1 + 72;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 120) = 1684434036;
  *(_OWORD *)(a1 + 128) = 0u;
  int v7 = (int64x2_t *)(a1 + 128);
  *(_OWORD *)(a1 + sub_13818(v2 - 160) = 0u;
  uint64_t v8 = a1 + 160;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + sub_19DFC(v1 - 208) = 0LL;
  char v9 = (void *)(a1 + 208);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = a1 + 192;
  uint64_t v140 = a1 + 192;
  uint64_t v141 = (const void **)(a1 + 152);
  *(_BYTE *)(a1 + sub_19DFC(v65 - 240) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(_OWORD *)std::condition_variable v155 = *(_OWORD *)&qword_402EFC;
  *(void *)&v155[16] = 2LL;
  sub_83660(a1 + 248, (int *)v155, 3LL);
  *(void *)(a1 + 296) = 0LL;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (!sub_D12E8(*a2, (const UInt8 *)"graph"))
  {
    __int16 v109 = (os_log_t *)sub_138E8(13);
    int v110 = *v109;
    if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::condition_variable v155 = 136315394;
      *(void *)&v155[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&v155[12] = 1024;
      *(_DWORD *)&v155[14] = 484;
      _os_log_impl(&dword_0, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v155, 0x12u);
    }

    unint64_t v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v111, "Precondition failure.");
  }

  if (!*a2)
  {
    int v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v112, "Could not construct");
  }

  sub_392A00((uint64_t)v155, *a2, (const UInt8 *)"graph");
  *(_OWORD *)a1 = *(_OWORD *)v155;
  *(void *)(a1 + 16) = *(void *)&v155[16];
  if (!*a2)
  {
    uint64_t v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v113, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"austrip"))
  {
    if (!*a2)
    {
      unint64_t v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v125, "Could not construct");
    }

    sub_392A00((uint64_t)v155, *a2, (const UInt8 *)"austrip");
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v155;
    *(void *)(v4 + 16) = *(void *)&v155[16];
  }

  if (!*a2)
  {
    uint64_t v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v114, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"propstrip"))
  {
    if (!*a2)
    {
      unint64_t v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v126, "Could not construct");
    }

    sub_392A00((uint64_t)v155, *a2, (const UInt8 *)"propstrip");
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v155;
    *(void *)(v6 + 16) = *(void *)&v155[16];
  }

  if (!*a2)
  {
    BOOL v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v115, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"metaparameter"))
  {
    if (!*a2)
    {
      uint64_t v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v127, "Could not construct");
    }

    sub_392A00((uint64_t)v155, *a2, (const UInt8 *)"metaparameter");
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v155;
    *(void *)(v5 + 16) = *(void *)&v155[16];
  }

  if (!*a2)
  {
    __int16 v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v116, "Could not construct");
  }

  uint64_t v142 = v8;
  unint64_t v143 = v9;
  if (!sub_D12E8(*a2, (const UInt8 *)"properties")) {
    goto LABEL_81;
  }
  if (!*a2)
  {
    uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v128, "Could not construct");
    goto LABEL_221;
  }

  int v10 = sub_D13C4(*a2, (const UInt8 *)"properties");
  if (!v10)
  {
    uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v128, "Could not find item");
    goto LABEL_221;
  }

  unint64_t v11 = v10;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v11))
  {
    uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v128, "Could not convert");
LABEL_221:
  }

  int Count = CFArrayGetCount((CFArrayRef)v11);
  memset(buf, 0, sizeof(buf));
  sub_2680A8(buf, Count);
  if (Count >= 1)
  {
    CFIndex v14 = 0LL;
    uint64_t v15 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, v14);
      int v17 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFRetain(ValueAtIndex);
        sub_3617C(cf, v17);
      }

      else
      {
        cf[0] = 0LL;
      }

      unint64_t v18 = *(void **)&buf[8];
      if (*(void *)&buf[8] >= *(void *)&buf[16])
      {
        unint64_t v19 = *(void **)buf;
        uint64_t v20 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
        unint64_t v21 = v20 + 1;
        uint64_t v22 = *(void *)&buf[16] - *(void *)buf;
        else {
          unint64_t v23 = v21;
        }
        *(void *)&v155[32] = &buf[16];
        if (v23)
        {
          unint64_t v23 = (unint64_t)sub_7DC90(v23);
          unint64_t v19 = *(void **)buf;
          unint64_t v18 = *(void **)&buf[8];
        }

        else
        {
          uint64_t v24 = 0LL;
        }

        size_t v25 = (CFTypeRef *)(v23 + 8 * v20);
        unint64_t v26 = v23 + 8 * v24;
        *(void *)&v155[24] = v26;
        CFTypeRef *v25 = cf[0];
        unint64_t v27 = v25 + 1;
        cf[0] = 0LL;
        *(void *)&v155[16] = v25 + 1;
        if (v18 != v19)
        {
          do
          {
            unint64_t v28 = (const void *)*--v18;
            *--size_t v25 = v28;
            *unint64_t v18 = 0LL;
          }

          while (v18 != v19);
          unint64_t v27 = *(CFTypeRef **)&v155[16];
          unint64_t v26 = *(void *)&v155[24];
        }

        __int128 v29 = *(_OWORD *)buf;
        *(void *)AudioObjectPropertyAddress buf = v25;
        *(void *)&buf[8] = v27;
        *(_OWORD *)&v155[8] = v29;
        uint64_t v30 = *(void *)&buf[16];
        *(void *)&buf[16] = v26;
        *(void *)&v155[24] = v30;
        *(void *)std::condition_variable v155 = v29;
        sub_AD86C((uint64_t)v155);
        *(void *)&buf[8] = v27;
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }

      else
      {
        **(void **)&buf[8] = cf[0];
        *(void *)&buf[8] = v18 + 1;
      }

      ++v14;
    }

    while (v14 != v15);
  }

  char v31 = *(const __CFDictionary ***)buf;
  int64x2_t v32 = *(const __CFDictionary ***)&buf[8];
  while (v31 != v32)
  {
    if (!*v31)
    {
      unint64_t v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v102, "Could not construct");
    }

    if (!sub_D12E8(*v31, (const UInt8 *)"ID"))
    {
      int v105 = (os_log_t *)sub_138E8(13);
      int v106 = *v105;
      if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::condition_variable v155 = 136315394;
        *(void *)&v155[4] = "DSPGraphConfig_Utilities.cpp";
        *(_WORD *)&v155[12] = 1024;
        *(_DWORD *)&v155[14] = 516;
        _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Property dictionary requires ID",  v155,  0x12u);
      }

      __int16 v107 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v107, "Property dictionary requires ID");
    }

    if (!*v31)
    {
      int v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v103, "Could not construct");
    }

    sub_392A70(v155, *v31, (const UInt8 *)"ID");
    unsigned int v33 = sub_1581F8((const void **)v155);
    if (*(void *)v155) {
      CFRelease(*(CFTypeRef *)v155);
    }
    uint64_t v34 = *v31;
    if (!*v31)
    {
      uint64_t v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v104, "Could not construct");
    }

    v152[0] = 0LL;
    sub_390F30(cf, v34, (const UInt8 *)"Info", v152);
    *(_DWORD *)std::condition_variable v155 = v33;
    CFTypeRef v35 = cf[0];
    *(CFTypeRef *)&v155[8] = cf[0];
    cf[0] = 0LL;
    unint64_t v36 = *(void *)(a1 + 136);
    unint64_t v37 = *(void *)(a1 + 144);
    if (v36 >= v37)
    {
      uint64_t v39 = (uint64_t)(v36 - v7->i64[0]) >> 4;
      unint64_t v40 = v39 + 1;
      uint64_t v41 = v37 - v7->i64[0];
      if (v41 >> 3 > v40) {
        unint64_t v40 = v41 >> 3;
      }
      else {
        unint64_t v42 = v40;
      }
      std::string::size_type v43 = (char *)sub_7BE90(v42);
      unint64_t v45 = &v43[16 * v39];
      *(_DWORD *)unint64_t v45 = v33;
      *((void *)v45 + 1) = v35;
      *(void *)&v155[8] = 0LL;
      uint64_t v47 = *(void *)(a1 + 128);
      unint64_t v46 = *(void *)(a1 + 136);
      if (v46 == v47)
      {
        int64x2_t v50 = vdupq_n_s64(v46);
        unint64_t v48 = &v43[16 * v39];
      }

      else
      {
        unint64_t v48 = &v43[16 * v39];
        do
        {
          int v49 = *(_DWORD *)(v46 - 16);
          v46 -= 16LL;
          *((_DWORD *)v48 - 4) = v49;
          v48 -= 16;
          *((void *)v48 + 1) = *(void *)(v46 + 8);
          *(void *)(v46 + 8) = 0LL;
        }

        while (v46 != v47);
        int64x2_t v50 = *v7;
      }

      __int128 v38 = v45 + 16;
      *(void *)(a1 + 128) = v48;
      *(void *)(a1 + 136) = v45 + 16;
      *(void *)(a1 + 144) = &v43[16 * v44];
      uint64_t v51 = v50.i64[1];
      uint64_t v52 = (void *)v50.i64[0];
      if (v50.i64[1] != v50.i64[0])
      {
        do
        {
          unint64_t v53 = (void *)(v51 - 16);
          sub_83380(*(const void **)(v51 - 8));
          uint64_t v51 = (uint64_t)v53;
        }

        while (v53 != v52);
      }

      if (v52)
      {
        operator delete(v52);
        CFTypeRef v54 = cf[0];
        *(void *)(a1 + 136) = v38;
        if (v54) {
          CFRelease(v54);
        }
        goto LABEL_77;
      }
    }

    else
    {
      *(_DWORD *)unint64_t v36 = v33;
      *(void *)(v36 + 8) = v35;
      __int128 v38 = (char *)(v36 + 16);
      *(void *)&v155[8] = 0LL;
    }

    *(void *)(a1 + 136) = v38;
LABEL_77:
    if (v152[0]) {
      CFRelease(v152[0]);
    }
    ++v31;
  }

  *(void *)std::condition_variable v155 = buf;
  sub_AD8B8((void ***)v155);
  uint64_t v8 = v142;
  char v9 = v143;
LABEL_81:
  if (!*a2)
  {
    int v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v117, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"presets"))
  {
    if (!*a2)
    {
      unint64_t v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v129, "Could not construct");
    }

    sub_1468E4(&v147, *a2, (const UInt8 *)"presets");
    uint64_t v55 = (const __CFDictionary *)v147;
    if (v147)
    {
      CFTypeID v56 = CFDictionaryGetTypeID();
      if (v56 == CFGetTypeID(v55))
      {
        CFIndex v57 = CFDictionaryGetCount(v55);
        char v145 = 0LL;
        uint64_t v146 = 0LL;
        char v144 = &v145;
        sub_7E328(cf, v57);
        sub_7E328(v152, v57);
        CFDictionaryGetKeysAndValues(v55, (const void **)cf[0], (const void **)v152[0]);
        if (v57)
        {
          for (uint64_t i = 0LL; i != v57; ++i)
          {
            sub_48100((uint64_t)v150, *((const __CFString **)cf[0] + i));
            sub_48100((uint64_t)v148, *((const __CFString **)v152[0] + i));
            *(_OWORD *)std::condition_variable v155 = *(_OWORD *)v150;
            *(void *)&v155[16] = v151;
            v150[1] = 0LL;
            uint64_t v151 = 0LL;
            *(_OWORD *)&v155[24] = *(_OWORD *)v148;
            int v156 = v149;
            v148[0] = 0LL;
            v148[1] = 0LL;
            unint64_t v149 = 0LL;
            v150[0] = 0LL;
            uint64_t v59 = (char **)sub_845D8((uint64_t)&v144, &v154, (void **)v155);
            if (!*v59)
            {
              uint64_t v60 = v59;
              std::string::size_type v61 = (char *)operator new(0x50uLL);
              *(void *)AudioObjectPropertyAddress buf = v61;
              *(void *)&buf[8] = &v145;
              buf[16] = 0;
              __int128 v62 = v61 + 32;
              if ((v155[23] & 0x80000000) != 0)
              {
                sub_24054(v62, *(void **)v155, *(unint64_t *)&v155[8]);
              }

              else
              {
                *(_OWORD *)__int128 v62 = *(_OWORD *)v155;
                *((void *)v61 + 6) = *(void *)&v155[16];
              }

              *(_OWORD *)(v61 + 56) = *(_OWORD *)&v155[24];
              *((void *)v61 + 9) = v156;
              *(void *)&v155[32] = 0LL;
              int v156 = 0LL;
              *(void *)&v155[24] = 0LL;
              buf[16] = 1;
              uint64_t v63 = v154;
              *(void *)std::string::size_type v61 = 0LL;
              *((void *)v61 + 1) = 0LL;
              *((void *)v61 + 2) = v63;
              *uint64_t v60 = v61;
              if (*v144)
              {
                char v144 = (uint64_t **)*v144;
                std::string::size_type v61 = *v60;
              }

              sub_7A420(v145, (uint64_t *)v61);
              ++v146;
              *(void *)AudioObjectPropertyAddress buf = 0LL;
              sub_8455C((uint64_t)buf);
            }

            if (SHIBYTE(v156) < 0) {
              operator delete(*(void **)&v155[24]);
            }
            if ((v155[23] & 0x80000000) != 0) {
              operator delete(*(void **)v155);
            }
            if (SHIBYTE(v149) < 0) {
              operator delete(v148[0]);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v150[0]);
            }
          }
        }

        if (v152[0])
        {
          v152[1] = v152[0];
          operator delete((void *)v152[0]);
        }

        uint64_t v8 = v142;
        char v9 = v143;
        if (cf[0])
        {
          cf[1] = cf[0];
          operator delete((void *)cf[0]);
        }

        sub_832CC(*(void **)(a1 + 192));
        CFTypeRef v64 = v145;
        *(void *)(a1 + 184) = v144;
        *(void *)(a1 + 192) = v64;
        uint64_t v65 = v146;
        *(void *)(a1 + 200) = v146;
        if (v65)
        {
          v64[2] = v140;
          char v144 = &v145;
          char v145 = 0LL;
          uint64_t v146 = 0LL;
          CFTypeRef v64 = 0LL;
        }

        else
        {
          *(void *)(a1 + 184) = v140;
        }

        sub_832CC(v64);
        if (v147) {
          CFRelease(v147);
        }
        goto LABEL_113;
      }

      v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Could not convert");
    }

    else
    {
      v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Could not construct");
    }
  }

void sub_392608( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *__p, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  if (v38) {
    operator delete(v38);
  }
  sub_831AC(v37);
  _Unwind_Resume(a1);
}

uint64_t sub_3929C0(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_392A00(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  uint64_t v4 = (const __CFString *)sub_D13C4(a2, __s);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  return sub_48100(a1, v4);
}

void sub_392A5C(_Unwind_Exception *a1)
{
}

CFTypeRef sub_392A70(void *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  uint64_t v4 = sub_D13C4(a2, __s);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  uint64_t v5 = v4;
  CFTypeRef result = CFRetain(v4);
  *a1 = v5;
  return result;
}

void sub_392AD0(_Unwind_Exception *a1)
{
}

void *sub_392AE8(void *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  uint64_t v4 = sub_D13C4(a2, __s);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  uint64_t v5 = v4;
  CFRetain(v4);
  return sub_35F84(a1, v5);
}

void sub_392B4C(_Unwind_Exception *a1)
{
}

void sub_392B64(std::__fs::filesystem::path *a1, std::string *a2)
{
}

void sub_392BD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_392C0C(std::__fs::filesystem::path *a1, std::string *a2, std::string *a3, std::string *a4)
{
  if ((char)v13.__pn_.__r_.__value_.__s.__size_ < 0)
  {
    sub_24054(a1, v13.__pn_.__r_.__value_.__l.__data_, v13.__pn_.__r_.__value_.__l.__size_);
  }

  else
  {
    *a1 = v13;
  }

void sub_392D40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_392DEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (!sub_149814(*a1, v5, 1685090928))
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v23 = 0u;
    int v24 = 1065353216;
    sub_2DC194((uint64_t)v31, (uint64_t)__p);
    LODWORD(v27) = 1685090928;
    sub_2DC450((uint64_t)v28, (uint64_t)v31);
    sub_148DB8((uint64_t)a1, (int)v27, &v27);
    sub_2DBF5C((uint64_t)v28);
    sub_2DBF5C((uint64_t)v31);
    sub_D0C4C(0LL);
    uint64_t v4 = *a1;
    unint64_t v5 = a1[1];
  }

  uint64_t v6 = sub_149814(v4, v5, 1685090928);
  uint64_t v7 = sub_2DD160((int *)v6 + 6);
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = v7;
    do
    {
      int v10 = *((_DWORD *)v8 + 4);
      if (sub_D01B4((void *)v9, v10))
      {
        unint64_t v11 = sub_149814(*(void *)v9, *(void *)(v9 + 8), v10);
        if (!v11) {
          sub_8F9A4("unordered_map::at: key not found");
        }
        uint64_t v12 = (uint64_t)(v11 + 3);
        if (*((_DWORD *)v11 + 6) == 16)
        {
          std::__fs::filesystem::path v13 = (uint64_t *)sub_2DD25C((int *)v11 + 6);
          LODWORD(v27) = v10;
          sub_2DC450((uint64_t)v28, (uint64_t)(v8 + 3));
          sub_149710((uint64_t)__p, (int *)&v27, 1LL);
          sub_2DC194((uint64_t)v31, (uint64_t)__p);
          std::string v14 = sub_149ED8((uint64_t)v31);
          v14[1] = v13;
          uint64_t v15 = *v13;
          *std::string v14 = *v13;
          *(void *)(v15 + 8) = v14;
          uint64_t *v13 = (uint64_t)v14;
          ++v13[2];
          sub_2DBF5C((uint64_t)v31);
          sub_D0C4C((void *)v23);
          __int16 v16 = __p[0];
          __p[0] = 0LL;
          if (v16) {
            operator delete(v16);
          }
          sub_2DBF5C((uint64_t)v28);
        }

        else
        {
          int v29 = v10;
          sub_2DC450((uint64_t)v30, (uint64_t)(v8 + 3));
          sub_149710((uint64_t)__p, &v29, 1LL);
          sub_2DC194((uint64_t)v31, (uint64_t)__p);
          int v25 = v10;
          sub_2DC450((uint64_t)v26, v12);
          sub_149710((uint64_t)&v27, &v25, 1LL);
          sub_2DC194((uint64_t)&v32, (uint64_t)&v27);
          sub_149910(v21, (uint64_t)v31, 2LL);
          for (uint64_t i = 16LL; i != -16; i -= 16LL)
            sub_2DBF5C((uint64_t)&v31[i]);
          sub_D0C4C(v28[1]);
          unint64_t v18 = v27;
          unint64_t v27 = 0LL;
          if (v18) {
            operator delete(v18);
          }
          sub_2DBF5C((uint64_t)v26);
          sub_D0C4C((void *)v23);
          unint64_t v19 = __p[0];
          __p[0] = 0LL;
          if (v19) {
            operator delete(v19);
          }
          sub_2DBF5C((uint64_t)v30);
          sub_2DC204((uint64_t)__p, (uint64_t)v21);
          uint64_t v20 = sub_149814(*(void *)v9, *(void *)(v9 + 8), *((_DWORD *)v8 + 4));
          sub_2DC544((CFTypeRef *)v20 + 3, (CFTypeRef *)__p);
          sub_2DBF5C((uint64_t)__p);
          sub_149990(v21);
        }
      }

      else
      {
        sub_D14D8(v9, v10, (_DWORD *)v8 + 4);
      }

      uint64_t v8 = (uint64_t *)*v8;
    }

    while (v8);
  }

void sub_393110(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_393120(int a1, uint64_t a2, uint64_t *a3)
{
  int v7 = a1;
  sub_2DC450((uint64_t)v8, a2);
  sub_149710((uint64_t)__p, &v7, 1LL);
  sub_392DEC(a3, (uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  uint64_t v4 = __p[0];
  __p[0] = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return sub_2DBF5C((uint64_t)v8);
}

void sub_3931C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_3931CC(uint64_t a1, uint64_t a2, std::string *a3)
{
  *(_OWORD *)unint64_t v125 = 0u;
  __int128 v126 = 0u;
  int v127 = 1065353216;
  LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 7;
  __dst.__pn_.__r_.__value_.__l.__size_ = 1685287015LL;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1685090932;
  sub_2DC450((uint64_t)&buf[8], (uint64_t)&__dst);
  sub_148DB8((uint64_t)v125, *(int *)buf, buf);
  sub_2DBF5C((uint64_t)&buf[8]);
  sub_2DBF5C((uint64_t)&__dst);
  uint64_t v4 = operator new(0x28uLL);
  sub_8427C((uint64_t)v4, a2 + 248);
  LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 11;
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1970496883;
  sub_2DC450((uint64_t)&buf[8], (uint64_t)&__dst);
  sub_148DB8((uint64_t)v125, *(int *)buf, buf);
  sub_2DBF5C((uint64_t)&buf[8]);
  sub_2DBF5C((uint64_t)&__dst);
  sub_14A9A0((uint64_t)&v130, (const void **)&a3->__r_.__value_.__l.__data_, (const void **)a2);
  unint64_t v5 = std::string::append(&v130, ".dspg", 5uLL);
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
  v137.__pn_.__r_.__value_.__r.__words[0] = v5->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v5->__r_.__value_.__s.__size_;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  *(std::string::size_type *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7);
  __dst.__pn_.__r_.__value_.__r.__words[0] = v6;
  __dst.__pn_.__r_.__value_.__l.__size_ = v137.__pn_.__r_.__value_.__r.__words[0];
  __dst.__pn_.__r_.__value_.__s.__size_ = size;
  __int16 v116 = a3 + 1;
  sub_83AA0((std::__fs::filesystem::path *)buf, (uint64_t)&a3[1], &__dst);
  uint64_t v8 = *(void **)buf;
  uint64_t v9 = *(void **)&buf[8];
  LODWORD(v128.__pn_.__r_.__value_.__l.__data_) = *(_DWORD *)&buf[16];
  *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)&buf[19];
  int v10 = buf[23];
  buf[23] = 0;
  buf[0] = 0;
  if ((char)v130.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v130.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }

  else if ((v10 & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)AudioObjectPropertyAddress buf = v8;
    *(void *)&buf[8] = v9;
    *(_DWORD *)&buf[16] = v128.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)&buf[19] = *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words + 3);
    buf[23] = v10;
    goto LABEL_8;
  }

  sub_24054(buf, v8, (unint64_t)v9);
LABEL_8:
  sub_2DC0BC((uint64_t)&__dst, (uint64_t)buf);
  sub_393120(1685287015, (uint64_t)&__dst, (uint64_t *)v125);
  sub_2DBF5C((uint64_t)&__dst);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }

  else if ((v10 & 0x80000000) == 0)
  {
LABEL_10:
    __p[0] = v8;
    __p[1] = v9;
    *(_DWORD *)unint64_t v123 = v128.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)&v123[3] = *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words + 3);
    char v124 = v10;
    goto LABEL_14;
  }

  sub_24054(__p, v8, (unint64_t)v9);
  operator delete(v8);
  if (v124 < 0) {
    operator delete(__p[0]);
  }
LABEL_14:
  memset(&v121, 0, sizeof(v121));
  uint64_t v11 = *(unsigned __int8 *)(a2 + 47);
  if ((v11 & 0x80u) != 0LL) {
    uint64_t v11 = *(void *)(a2 + 32);
  }
  if (v11)
  {
    uint64_t v12 = (const std::string *)(a2 + 24);
LABEL_18:
    std::string::operator=(&v121, v12);
    goto LABEL_23;
  }

  uint64_t v13 = *(unsigned __int8 *)(a2 + 71);
  if ((v13 & 0x80u) != 0LL) {
    uint64_t v13 = *(void *)(a2 + 56);
  }
  if (!v13)
  {
    uint64_t v106 = *(unsigned __int8 *)(a2 + 23);
    if ((v106 & 0x80u) != 0LL) {
      uint64_t v106 = *(void *)(a2 + 8);
    }
    uint64_t v12 = (const std::string *)a2;
    if (!v106)
    {
      __int16 v107 = (os_log_t *)sub_138E8(13);
      unint64_t v108 = *v107;
      if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 325;
        _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid Graph string in DSPGraph configuration metadata",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid Graph string in DSPGraph configuration metadata");
    }

    goto LABEL_18;
  }

  sub_14A9A0((uint64_t)buf, (const void **)&a3->__r_.__value_.__l.__data_, (const void **)(a2 + 48));
  std::string v121 = *(std::string *)buf;
LABEL_23:
  sub_2DC0BC((uint64_t)buf, (uint64_t)&v121);
  sub_393120(1735287149, (uint64_t)buf, (uint64_t *)v125);
  sub_2DBF5C((uint64_t)buf);
  if ((v121.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v14 = &v121;
  }
  else {
    std::string v14 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  int v15 = *(_DWORD *)(a2 + 120);
  char v16 = *(_BYTE *)(a2 + 288);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = 0LL;
  sub_7D084((void *)(a1 + 24), (char *)v14);
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 52) = v16;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + sub_13818(v2 - 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + sub_19DFC(v1 - 208) = 0LL;
  uint64_t v17 = *(unsigned __int8 *)(a2 + 71);
  if ((v17 & 0x80u) != 0LL) {
    uint64_t v17 = *(void *)(a2 + 56);
  }
  if (!v17) {
    goto LABEL_43;
  }
  sub_14A9A0((uint64_t)&v130, (const void **)&a3->__r_.__value_.__l.__data_, (const void **)(a2 + 48));
  unint64_t v18 = std::string::append(&v130, ".austrip", 8uLL);
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
  v137.__pn_.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v20 = v18->__r_.__value_.__s.__size_;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  *(std::string::size_type *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7);
  __dst.__pn_.__r_.__value_.__r.__words[0] = v19;
  __dst.__pn_.__r_.__value_.__l.__size_ = v137.__pn_.__r_.__value_.__r.__words[0];
  __dst.__pn_.__r_.__value_.__s.__size_ = v20;
  sub_83AA0((std::__fs::filesystem::path *)buf, (uint64_t)v116, &__dst);
  unint64_t v21 = *(void **)buf;
  std::string::size_type v22 = *(void *)&buf[8];
  LODWORD(v128.__pn_.__r_.__value_.__l.__data_) = *(_DWORD *)&buf[16];
  *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)&buf[19];
  int v23 = buf[23];
  buf[23] = 0;
  buf[0] = 0;
  if ((char)v130.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v130.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_33;
    }
  }

  else if ((v23 & 0x80000000) == 0)
  {
LABEL_33:
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    __dst.__pn_.__r_.__value_.__l.__size_ = v22;
    LODWORD(__dst.__pn_.__r_.__value_.__r.__words[2]) = v128.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words
                                                                                   + 3);
    __dst.__pn_.__r_.__value_.__s.__size_ = v23;
    goto LABEL_36;
  }

  sub_24054(&__dst, v21, v22);
LABEL_36:
  sub_3949C8((uint64_t)buf, (__int128 *)&__dst, 1635087216);
  sub_2DC2E4((uint64_t)&v130, (uint64_t)buf);
  sub_393120(1635087216, (uint64_t)&v130, (uint64_t *)v125);
  sub_2DBF5C((uint64_t)&v130);
  int v24 = *(void **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    uint64_t v25 = 4LL;
    int v24 = buf;
    goto LABEL_40;
  }

  if (*(void *)&buf[24])
  {
    uint64_t v25 = 5LL;
LABEL_40:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }

  if ((char)__dst.__pn_.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }

  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_43;
  }

  operator delete(v21);
LABEL_43:
  uint64_t v26 = *(unsigned __int8 *)(a2 + 95);
  if ((v26 & 0x80u) != 0LL) {
    uint64_t v26 = *(void *)(a2 + 80);
  }
  if (!v26) {
    goto LABEL_62;
  }
  sub_14A9A0((uint64_t)&v130, (const void **)&a3->__r_.__value_.__l.__data_, (const void **)(a2 + 72));
  unint64_t v27 = std::string::append(&v130, ".propstrip", 0xAuLL);
  std::string::size_type v28 = v27->__r_.__value_.__r.__words[0];
  v137.__pn_.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v29 = v27->__r_.__value_.__s.__size_;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  *(std::string::size_type *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7);
  __dst.__pn_.__r_.__value_.__r.__words[0] = v28;
  __dst.__pn_.__r_.__value_.__l.__size_ = v137.__pn_.__r_.__value_.__r.__words[0];
  __dst.__pn_.__r_.__value_.__s.__size_ = v29;
  sub_83AA0((std::__fs::filesystem::path *)buf, (uint64_t)v116, &__dst);
  uint64_t v30 = *(void **)buf;
  std::string::size_type v31 = *(void *)&buf[8];
  LODWORD(v128.__pn_.__r_.__value_.__l.__data_) = *(_DWORD *)&buf[16];
  *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)&buf[19];
  int v32 = buf[23];
  buf[23] = 0;
  buf[0] = 0;
  if ((char)v130.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v130.__r_.__value_.__l.__data_);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_50;
    }
  }

  else if ((v32 & 0x80000000) == 0)
  {
LABEL_50:
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    __dst.__pn_.__r_.__value_.__l.__size_ = v31;
    LODWORD(__dst.__pn_.__r_.__value_.__r.__words[2]) = v128.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words
                                                                                   + 3);
    __dst.__pn_.__r_.__value_.__s.__size_ = v32;
    goto LABEL_55;
  }

  sub_24054(&__dst, v30, v31);
LABEL_55:
  sub_3949C8((uint64_t)buf, (__int128 *)&__dst, 1886548848);
  sub_2DC2E4((uint64_t)&v130, (uint64_t)buf);
  sub_393120(1886548848, (uint64_t)&v130, (uint64_t *)v125);
  sub_2DBF5C((uint64_t)&v130);
  unsigned int v33 = *(void **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    uint64_t v34 = 4LL;
    unsigned int v33 = buf;
    goto LABEL_59;
  }

  if (*(void *)&buf[24])
  {
    uint64_t v34 = 5LL;
LABEL_59:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }

  if ((char)__dst.__pn_.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_62;
    }
  }

  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_62;
  }

  operator delete(v30);
LABEL_62:
  uint64_t v35 = *(unsigned __int8 *)(a2 + 119);
  if ((v35 & 0x80u) != 0LL) {
    uint64_t v35 = *(void *)(a2 + 104);
  }
  if (!v35) {
    goto LABEL_81;
  }
  sub_14A9A0((uint64_t)&v130, (const void **)&a3->__r_.__value_.__l.__data_, (const void **)(a2 + 96));
  unint64_t v36 = std::string::append(&v130, ".plist", 6uLL);
  std::string::size_type v37 = v36->__r_.__value_.__r.__words[0];
  v137.__pn_.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v38 = v36->__r_.__value_.__s.__size_;
  v36->__r_.__value_.__l.__size_ = 0LL;
  v36->__r_.__value_.__l.__cap_ = 0LL;
  v36->__r_.__value_.__r.__words[0] = 0LL;
  *(std::string::size_type *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v137.__pn_.__r_.__value_.__r.__words + 7);
  __dst.__pn_.__r_.__value_.__r.__words[0] = v37;
  __dst.__pn_.__r_.__value_.__l.__size_ = v137.__pn_.__r_.__value_.__r.__words[0];
  __dst.__pn_.__r_.__value_.__s.__size_ = v38;
  sub_83AA0((std::__fs::filesystem::path *)buf, (uint64_t)v116, &__dst);
  uint64_t v39 = *(void **)buf;
  std::string::size_type v40 = *(void *)&buf[8];
  LODWORD(v128.__pn_.__r_.__value_.__l.__data_) = *(_DWORD *)&buf[16];
  *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)&buf[19];
  int v41 = buf[23];
  buf[23] = 0;
  buf[0] = 0;
  if ((char)v130.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v130.__r_.__value_.__l.__data_);
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_69;
    }
  }

  else if ((v41 & 0x80000000) == 0)
  {
LABEL_69:
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    __dst.__pn_.__r_.__value_.__l.__size_ = v40;
    LODWORD(__dst.__pn_.__r_.__value_.__r.__words[2]) = v128.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v128.__pn_.__r_.__value_.__r.__words
                                                                                   + 3);
    __dst.__pn_.__r_.__value_.__s.__size_ = v41;
    goto LABEL_74;
  }

  sub_24054(&__dst, v39, v40);
LABEL_74:
  sub_3949C8((uint64_t)buf, (__int128 *)&__dst, 1836347501);
  sub_2DC2E4((uint64_t)&v130, (uint64_t)buf);
  sub_393120(1836347501, (uint64_t)&v130, (uint64_t *)v125);
  sub_2DBF5C((uint64_t)&v130);
  unint64_t v42 = *(void **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    uint64_t v43 = 4LL;
    unint64_t v42 = buf;
    goto LABEL_78;
  }

  if (*(void *)&buf[24])
  {
    uint64_t v43 = 5LL;
LABEL_78:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }

  if ((char)__dst.__pn_.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_81;
    }
  }

  else if ((v41 & 0x80000000) == 0)
  {
    goto LABEL_81;
  }

  operator delete(v39);
LABEL_81:
  BOOL v115 = (std::string *)(a1 + 56);
  uint64_t v44 = *(__int128 **)(a2 + 184);
  uint64_t v118 = a2;
  unint64_t v45 = (__int128 *)(a2 + 192);
  if (v44 != (__int128 *)(a2 + 192))
  {
    unint64_t v46 = (const void **)&v133;
    uint64_t v47 = (uint64_t)&a3[2];
    unint64_t v48 = &buf[24];
    int v49 = &off_485798;
    while (1)
    {
      sub_7ECB0((char *)&__dst, v44 + 2);
      sub_14A9A0((uint64_t)&v130, (const void **)&a3->__r_.__value_.__l.__data_, v46);
      *(std::string *)AudioObjectPropertyAddress buf = v130;
      memset(&v130, 0, sizeof(v130));
      sub_83AA0(&v137, v47, (std::__fs::filesystem::path *)buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      else {
        std::__fs::filesystem::path v128 = v137;
      }
      int v50 = (char)v128.__pn_.__r_.__value_.__s.__size_;
      else {
        *(std::__fs::filesystem::path *)AudioObjectPropertyAddress buf = v128;
      }
      else {
        *(std::__fs::filesystem::path *)unint64_t v48 = __dst;
      }
      uint64_t v131 = 0LL;
      uint64_t v51 = (char *)operator new(0x38uLL);
      uint64_t v52 = (std::string *)v51;
      *(void *)uint64_t v51 = v49;
      int v53 = buf[23];
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_24054(v51 + 8, *(void **)buf, *(unint64_t *)&buf[8]);
      }

      else
      {
        *(_OWORD *)(v51 + 8) = *(_OWORD *)buf;
        *((void *)v51 + 3) = *(void *)&buf[16];
      }

      CFTypeRef v54 = &v52[1].__r_.__value_.__s.__data_[8];
      if ((v136 & 0x80000000) == 0) {
        break;
      }
      int v117 = v50;
      CFIndex v57 = v48;
      uint64_t v58 = v45;
      uint64_t v59 = v47;
      uint64_t v60 = v46;
      std::string::size_type v61 = v49;
      __int128 v62 = *(void **)&buf[24];
      sub_24054(v54, *(void **)&buf[24], *(unint64_t *)&buf[32]);
      uint64_t v131 = v52;
      operator delete(v62);
      int v49 = v61;
      unint64_t v46 = v60;
      uint64_t v47 = v59;
      unint64_t v45 = v58;
      unint64_t v48 = v57;
      int v50 = v117;
      if (v53 < 0) {
        goto LABEL_101;
      }
LABEL_102:
      sub_2DC2E4((uint64_t)v129, (uint64_t)&v130);
      sub_393120(1652060275, (uint64_t)v129, (uint64_t *)v125);
      sub_2DBF5C((uint64_t)v129);
      uint64_t v55 = v131;
      if (v131 == &v130)
      {
        uint64_t v55 = &v130;
        uint64_t v56 = 4LL;
        goto LABEL_108;
      }

      if (v131)
      {
        uint64_t v56 = 5LL;
LABEL_108:
        (*(void (**)(std::string *))(v55->__r_.__value_.__r.__words[0] + 8 * v56))(v55);
      }

      if (v50 < 0) {
        operator delete(v128.__pn_.__r_.__value_.__l.__data_);
      }
      if (v134 < 0) {
        operator delete((void *)v133);
      }
      uint64_t v63 = (__int128 *)*((void *)v44 + 1);
      if (v63)
      {
        do
        {
          CFTypeRef v64 = v63;
          uint64_t v63 = *(__int128 **)v63;
        }

        while (v63);
      }

      else
      {
        do
        {
          CFTypeRef v64 = (__int128 *)*((void *)v44 + 2);
          BOOL v65 = *(void *)v64 == (void)v44;
          uint64_t v44 = v64;
        }

        while (!v65);
      }

      uint64_t v44 = v64;
      if (v64 == v45) {
        goto LABEL_123;
      }
    }

    *(_OWORD *)CFTypeRef v54 = *(_OWORD *)v48;
    v52[2].__r_.__value_.__r.__words[0] = *((void *)v48 + 2);
    uint64_t v131 = v52;
    if ((v53 & 0x80000000) == 0) {
      goto LABEL_102;
    }
LABEL_101:
    operator delete(*(void **)buf);
    goto LABEL_102;
  }

void sub_3945CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_D0C14((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_3949C8(uint64_t a1, __int128 *a2, int a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(&v8, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v8 = *a2;
    uint64_t v9 = *((void *)a2 + 2);
  }

  *(void *)(a1 + 24) = 0LL;
  unint64_t v5 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v5 = &off_485750;
  std::string::size_type v6 = v5 + 8;
  if (SHIBYTE(v9) < 0)
  {
    int v7 = (void *)v8;
    sub_24054(v6, (void *)v8, *((unint64_t *)&v8 + 1));
    *((_DWORD *)v5 + 8) = a3;
    *(void *)(a1 + 24) = v5;
    operator delete(v7);
  }

  else
  {
    *(_OWORD *)std::string::size_type v6 = v8;
    *((void *)v5 + 3) = v9;
    *((_DWORD *)v5 + 8) = a3;
    *(void *)(a1 + 24) = v5;
  }

void sub_394A8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t *sub_394AB8(unsigned int a1)
{
  if (!qword_4A9A78) {
    return 0LL;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)qword_4A9A78);
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
  }

  else
  {
    unint64_t v2 = ((_DWORD)qword_4A9A78 - 1) & a1;
  }

  uint64_t i = *(uint64_t **)(qword_4A9A70 + 8 * v2);
  if (i)
  {
    for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }

      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= qword_4A9A78) {
            v4 %= (unint64_t)qword_4A9A78;
          }
        }

        else
        {
          v4 &= qword_4A9A78 - 1;
        }

        if (v4 != v2) {
          return 0LL;
        }
      }
    }
  }

  return i;
}

uint64_t *sub_394B78(unsigned int a1)
{
  if (!qword_4A9AA0) {
    return 0LL;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)qword_4A9AA0);
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
  }

  else
  {
    unint64_t v2 = ((_DWORD)qword_4A9AA0 - 1) & a1;
  }

  uint64_t i = *(uint64_t **)(qword_4A9A98 + 8 * v2);
  if (i)
  {
    for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }

      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= qword_4A9AA0) {
            v4 %= (unint64_t)qword_4A9AA0;
          }
        }

        else
        {
          v4 &= qword_4A9AA0 - 1;
        }

        if (v4 != v2) {
          return 0LL;
        }
      }
    }
  }

  return i;
}

uint64_t sub_394C38(uint64_t a1)
{
  *(void *)a1 = &off_485798;
  return a1;
}

void sub_394C84(void **__p)
{
  void *__p = &off_485798;
  operator delete(__p);
}

char *sub_394CD0(uint64_t a1)
{
  uint8x8_t v1 = (__int128 *)(a1 + 8);
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &off_485798;
  sub_395180(v2 + 8, v1);
  return v2;
}

void sub_394D10(_Unwind_Exception *a1)
{
}

char *sub_394D24(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_485798;
  return sub_395180((char *)(a2 + 8), (__int128 *)(a1 + 8));
}

void sub_394D40(uint64_t a1)
{
}

void sub_394D48(void *a1)
{
}

double sub_394D70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = (os_log_t *)sub_138E8(24);
  std::string::size_type v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 8);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)std::string::size_type v28 = "DSPGraphConfig_Utilities.cpp";
    *(_WORD *)&v28[8] = 1024;
    *(_DWORD *)&v28[10] = 241;
    __int16 v29 = 2080;
    *(void *)uint64_t v30 = v7;
    *(_WORD *)&v30[8] = 2080;
    *(void *)&v30[10] = v8;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading preset for box %s from path %s", buf, 0x26u);
  }

  sub_155560(&v26, v4);
  uint64_t v9 = v26;
  if (v26)
  {
    sub_59370((CFStringRef *)buf, "BoxName");
    uint64_t v12 = *(const UInt8 **)(a1 + 32);
    uint64_t v11 = a1 + 32;
    int v10 = v12;
    int v13 = *(char *)(v11 + 23);
    if (v13 >= 0) {
      std::string v14 = (const UInt8 *)v11;
    }
    else {
      std::string v14 = v10;
    }
    if (v13 >= 0) {
      CFIndex v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      CFIndex v15 = *(void *)(v11 + 8);
    }
    *(void *)&v28[4] = CFStringCreateWithBytes(0LL, v14, v15, 0x8000100u, 0);
    if (!*(void *)&v28[4])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_59370((CFStringRef *)&v28[12], "Preset");
    CFRetain(v9);
    *(void *)&v30[4] = v9;
    v25[0] = buf;
    v25[1] = 2LL;
    CFDictionaryRef v16 = sub_5A950((uint64_t)v25);
    for (uint64_t i = 0LL; i != -32; i -= 16LL)
    {
      unint64_t v18 = *(const void **)&v30[i + 4];
      if (v18) {
        CFRelease(v18);
      }
      std::string::size_type v19 = *(const void **)&v28[i + 12];
      if (v19) {
        CFRelease(v19);
      }
    }

    sub_2DC034((uint64_t)v25, v16);
    *(_DWORD *)AudioObjectPropertyAddress buf = 1652060275;
    sub_2DC450((uint64_t)&v28[4], (uint64_t)v25);
    sub_149710(a2, (int *)buf, 1LL);
    sub_2DBF5C((uint64_t)&v28[4]);
    sub_2DBF5C((uint64_t)v25);
    CFRelease(v16);
    if (v9) {
      CFRelease(v9);
    }
  }

  else
  {
    unint64_t v21 = (os_log_t *)sub_138E8(24);
    std::string::size_type v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      else {
        uint64_t v23 = *(void *)(a1 + 8);
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)std::string::size_type v28 = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&v28[8] = 1024;
      *(_DWORD *)&v28[10] = 251;
      __int16 v29 = 2080;
      *(void *)uint64_t v30 = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Loading plist for preset from path %s returned invalid",  buf,  0x1Cu);
    }

    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }

  return result;
}

void sub_39506C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_7DCC4(&a13);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

char *sub_395180(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::__fs::filesystem::path __dst = v4;
  }

  unint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_24054(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)unint64_t v5 = v6;
  }

  return __dst;
}

void sub_3951F8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_395214(uint64_t a1)
{
  *(void *)a1 = &off_485750;
  return a1;
}

void sub_395250(void **__p)
{
  void *__p = &off_485750;
  operator delete(__p);
}

char *sub_39528C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &off_485750;
  int v3 = v2 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_24054(v3, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    *(_OWORD *)int v3 = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }

  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_3952F4(_Unwind_Exception *a1)
{
}

_BYTE *sub_395308(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_485750;
  double result = (_BYTE *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    double result = sub_24054(result, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)double result = v5;
  }

  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void sub_395368(uint64_t a1)
{
}

void sub_39537C(void **__p)
{
}

double sub_3953AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  __int128 v5 = (os_log_t *)sub_138E8(24);
  __int128 v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(__p, *(unsigned int *)(a1 + 32));
    uint64_t v7 = v17 >= 0 ? __p : (void **)__p[0];
    uint64_t v8 = *(char *)(a1 + 31) >= 0 ? v4 : *(void *)(a1 + 8);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    std::string::size_type v19 = "DSPGraphConfig_Utilities.cpp";
    __int16 v20 = 1024;
    int v21 = 274;
    __int16 v22 = 2080;
    uint64_t v23 = v7;
    __int16 v24 = 2080;
    uint64_t v25 = v8;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading plist for property %s from path %s", buf, 0x26u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_155560(&cf, v4);
  CFTypeRef v9 = cf;
  if (cf)
  {
    sub_2DC034((uint64_t)__p, cf);
    *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a1 + 32);
    sub_2DC450((uint64_t)&v19 + 4, (uint64_t)__p);
    sub_149710(a2, (int *)buf, 1LL);
    sub_2DBF5C((uint64_t)&v19 + 4);
    sub_2DBF5C((uint64_t)__p);
    CFRelease(v9);
  }

  else
  {
    uint64_t v11 = (os_log_t *)sub_138E8(24);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, *(unsigned int *)(a1 + 32));
      if (v17 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      else {
        uint64_t v14 = *(void *)(a1 + 8);
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      std::string::size_type v19 = "DSPGraphConfig_Utilities.cpp";
      __int16 v20 = 1024;
      int v21 = 283;
      __int16 v22 = 2080;
      uint64_t v23 = v13;
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Loading plist for property %s from path %s was invalid",  buf,  0x26u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }

  return result;
}

void sub_39560C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_395660(uint64_t a1, void *a2, unsigned __int8 *a3, std::string *a4)
{
  uint64_t v7 = sub_248FF0(a2, a3);
  if (v7)
  {
    sub_3931CC(a1, (uint64_t)(v7 + 40), a4);
  }

  else
  {
    uint64_t v8 = (os_log_t *)sub_138E8(20);
    CFTypeRef v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
    {
      if ((a3[23] & 0x80u) == 0) {
        int v10 = (uint64_t *)a3;
      }
      else {
        int v10 = *(uint64_t **)a3;
      }
      int v11 = 136315650;
      uint64_t v12 = "DSPGraphConfig_Utilities.cpp";
      __int16 v13 = 1024;
      int v14 = 452;
      __int16 v15 = 2080;
      CFDictionaryRef v16 = v10;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Graph collection missing expected key %s",  (uint8_t *)&v11,  0x1Cu);
    }

    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    strcpy((char *)(a1 + 48), "tlfd");
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + sub_13818(v2 - 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(void *)(a1 + sub_19DFC(v1 - 208) = 0LL;
  }

uint64_t sub_3957C0(uint64_t a1)
{
  *(void *)a1 = off_4857F8;
  sub_395838(*(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_3957FC(char *a1)
{
  *(void *)a1 = off_4857F8;
  sub_395838(*((void **)a1 + 10));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  operator delete(a1);
}

void sub_395838(void *a1)
{
  if (a1)
  {
    sub_395838(*a1);
    sub_395838(a1[1]);
    sub_32C8C((void *)a1[8]);
    sub_32C8C((void *)a1[5]);
    operator delete(a1);
  }

void sub_395880(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  __int128 v6 = (uint64_t **)(a1 + 80);
  __int128 v5 = *(uint64_t **)(a1 + 80);
  if (!v5)
  {
    uint64_t v7 = (uint64_t **)(a1 + 80);
LABEL_9:
    CFTypeRef v9 = (uint64_t *)operator new(0x60uLL);
    sub_86550(v9 + 4, a2);
    sub_395A68(v9 + 7, (void *)(a2 + 24));
    *((_OWORD *)v9 + 5) = *(_OWORD *)(a2 + 48);
    uint64_t *v9 = 0LL;
    v9[1] = 0LL;
    v9[2] = (uint64_t)v7;
    os_log_s *v6 = v9;
    uint64_t v10 = **(void **)(a1 + 72);
    if (v10)
    {
      *(void *)(a1 + 72) = v10;
      CFTypeRef v9 = *v6;
    }

    sub_7A420(*(uint64_t **)(a1 + 80), v9);
    ++*(void *)(a1 + 88);
    goto LABEL_12;
  }

  while (1)
  {
    while (1)
    {
      uint64_t v7 = (uint64_t **)v5;
      uint64_t v8 = (uint64_t)(v5 + 4);
      __int128 v5 = *v7;
      __int128 v6 = v7;
      if (!*v7) {
        goto LABEL_9;
      }
    }

    if (!sub_395B10(v8, a2)) {
      break;
    }
    __int128 v6 = v7 + 1;
    __int128 v5 = v7[1];
    if (!v5) {
      goto LABEL_9;
    }
  }

  if (!*v6) {
    goto LABEL_9;
  }
  int v11 = (os_log_t *)sub_138E8(17);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    int v13 = 136315394;
    int v14 = "DeviceInfoListener.cpp";
    __int16 v15 = 1024;
    int v16 = 55;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Specified listener already exists!",  (uint8_t *)&v13,  0x12u);
  }

void sub_395A2C(_Unwind_Exception *a1)
{
}

uint64_t *sub_395A68(uint64_t *a1, void *a2)
{
  a1[1] = 0LL;
  int v3 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  __int128 v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_36A30(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      __int128 v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          __int128 v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          __int128 v5 = v7;
        }

        while (!v8);
      }

      __int128 v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_395AFC(_Unwind_Exception *a1)
{
}

BOOL sub_395B10(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 56);
  unint64_t v3 = *(void *)(a2 + 56);
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    unint64_t v5 = *(void *)(a1 + 48);
    unint64_t v6 = *(void *)(a2 + 48);
    BOOL v4 = v5 >= v6;
    if (v5 == v6)
    {
      CFTypeRef v9 = *(void **)a1;
      if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
      {
        if (v9 == (void *)(a1 + 8))
        {
LABEL_22:
          unint64_t v18 = *(void **)(a1 + 24);
          if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
          {
            if (v18 == (void *)(a1 + 32)) {
              return 0LL;
            }
            std::string::size_type v19 = *(void **)(a2 + 24);
            __int16 v20 = v19;
            int v21 = *(void **)(a1 + 24);
            while (*((_DWORD *)v21 + 7) == *((_DWORD *)v20 + 7))
            {
              __int16 v22 = (void *)v21[1];
              uint64_t v23 = v21;
              if (v22)
              {
                do
                {
                  int v21 = v22;
                  __int16 v22 = (void *)*v22;
                }

                while (v22);
              }

              else
              {
                do
                {
                  int v21 = (void *)v23[2];
                  BOOL v15 = *v21 == (void)v23;
                  uint64_t v23 = v21;
                }

                while (!v15);
              }

              __int16 v24 = (void *)v20[1];
              if (v24)
              {
                do
                {
                  uint64_t v25 = v24;
                  __int16 v24 = (void *)*v24;
                }

                while (v24);
              }

              else
              {
                do
                {
                  uint64_t v25 = (void *)v20[2];
                  BOOL v15 = *v25 == (void)v20;
                  __int16 v20 = v25;
                }

                while (!v15);
              }

              uint64_t v7 = 0LL;
              __int16 v20 = v25;
              if (v21 == (void *)(a1 + 32)) {
                return v7;
              }
            }
          }

          else
          {
            std::string::size_type v19 = *(void **)(a2 + 24);
          }

          unint64_t v27 = (void *)(a1 + 32);
          std::string::size_type v28 = (void *)(a2 + 32);
          BOOL v29 = v19 == (void *)(a2 + 32);
          BOOL v30 = v18 == (void *)(a1 + 32);
          if (v18 == (void *)(a1 + 32) || v19 == v28)
          {
LABEL_57:
            if (v30) {
              char v26 = v29 - 1;
            }
            else {
              char v26 = 1;
            }
          }

          else
          {
            while (1)
            {
              char v26 = sub_395DB8((_DWORD *)v18 + 7, (_DWORD *)v19 + 7);
              if (v26) {
                break;
              }
              std::string::size_type v31 = (void *)v18[1];
              if (v31)
              {
                do
                {
                  int v32 = v31;
                  std::string::size_type v31 = (void *)*v31;
                }

                while (v31);
              }

              else
              {
                do
                {
                  int v32 = (void *)v18[2];
                  BOOL v15 = *v32 == (void)v18;
                  unint64_t v18 = v32;
                }

                while (!v15);
              }

              unsigned int v33 = (void *)v19[1];
              if (v33)
              {
                do
                {
                  uint64_t v34 = v33;
                  unsigned int v33 = (void *)*v33;
                }

                while (v33);
              }

              else
              {
                do
                {
                  uint64_t v34 = (void *)v19[2];
                  BOOL v15 = *v34 == (void)v19;
                  std::string::size_type v19 = v34;
                }

                while (!v15);
              }

              BOOL v29 = v34 == v28;
              BOOL v30 = v32 == v27;
              if (v32 != v27)
              {
                unint64_t v18 = v32;
                std::string::size_type v19 = v34;
                if (v34 != v28) {
                  continue;
                }
              }

              goto LABEL_57;
            }
          }

          return v26 < 0;
        }

        uint64_t v10 = *(void **)a2;
        int v11 = *(void **)a2;
        uint64_t v12 = *(void **)a1;
        while (*((_DWORD *)v12 + 7) == *((_DWORD *)v11 + 7))
        {
          int v13 = (void *)v12[1];
          int v14 = v12;
          if (v13)
          {
            do
            {
              uint64_t v12 = v13;
              int v13 = (void *)*v13;
            }

            while (v13);
          }

          else
          {
            do
            {
              uint64_t v12 = (void *)v14[2];
              BOOL v15 = *v12 == (void)v14;
              int v14 = v12;
            }

            while (!v15);
          }

          int v16 = (void *)v11[1];
          if (v16)
          {
            do
            {
              char v17 = v16;
              int v16 = (void *)*v16;
            }

            while (v16);
          }

          else
          {
            do
            {
              char v17 = (void *)v11[2];
              BOOL v15 = *v17 == (void)v11;
              int v11 = v17;
            }

            while (!v15);
          }

          int v11 = v17;
          if (v12 == (void *)(a1 + 8)) {
            goto LABEL_22;
          }
        }
      }

      else
      {
        uint64_t v10 = *(void **)a2;
      }

      uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t))sub_335A6C;
      char v26 = sub_335A88(v9, (void *)(a1 + 8), v10, (void *)(a2 + 8), &v35);
      return v26 < 0;
    }
  }

  return !v4;
}

uint64_t sub_395DB8(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 1;
  }
  if (*a1 == *a2) {
    return 0LL;
  }
  else {
    return v2;
  }
}

void sub_395DD4(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  unint64_t v5 = *(void **)(a1 + 80);
  if (!v5) {
    goto LABEL_8;
  }
  unint64_t v6 = (void *)(a1 + 80);
  do
  {
    BOOL v7 = sub_395B10((uint64_t)(v5 + 4), a2);
    BOOL v8 = v5 + 1;
    if (!v7)
    {
      BOOL v8 = v5;
      unint64_t v6 = v5;
    }

    unint64_t v5 = (void *)*v8;
  }

  while (*v8);
  if (v6 == (void *)(a1 + 80) || sub_395B10(a2, (uint64_t)(v6 + 4)))
  {
LABEL_8:
    CFTypeRef v9 = (os_log_t *)sub_138E8(17);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      char v17 = "DeviceInfoListener.cpp";
      __int16 v18 = 1024;
      int v19 = 64;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Specified listener does not exist",  (uint8_t *)&v16,  0x12u);
    }
  }

  else
  {
    int v11 = (void *)v6[1];
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        int v11 = (void *)*v11;
      }

      while (v11);
    }

    else
    {
      int v13 = v6;
      do
      {
        uint64_t v12 = (void *)v13[2];
        BOOL v14 = *v12 == (void)v13;
        int v13 = v12;
      }

      while (!v14);
    }

    if (*(void **)(a1 + 72) == v6) {
      *(void *)(a1 + 72) = v12;
    }
    BOOL v15 = *(uint64_t **)(a1 + 80);
    --*(void *)(a1 + 88);
    sub_911E8(v15, v6);
    sub_32C8C((void *)v6[8]);
    sub_32C8C((void *)v6[5]);
    operator delete(v6);
  }

  std::mutex::unlock(v4);
}

void sub_395F74(_Unwind_Exception *a1)
{
}

void sub_395F90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int v21 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  BOOL v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
  {
    do
    {
      if (v8[6]) {
        uint64_t v9 = (uint64_t)(v8 + 4);
      }
      else {
        uint64_t v9 = a3;
      }
      sub_86550((uint64_t *)&v27, v9);
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      __int16 v24 = &v25;
      sub_1F70C0((uint64_t)buf, *(void **)a3, (void *)(a3 + 8), v27, v28, (uint64_t)&v24, (uint64_t)&v25);
      if (v26) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v28[1] == 0LL;
      }
      if (v10)
      {
        sub_395A68(&v22, v8 + 7);
        int v11 = v23[0];
        if (v23[0])
        {
          int v12 = *a4;
          int v13 = v23;
          do
          {
            BOOL v14 = v11;
            BOOL v15 = v13;
            int v16 = *((_DWORD *)v11 + 7);
            char v17 = v11 + 1;
            if (v16 >= v12)
            {
              char v17 = v14;
              int v13 = (void **)v14;
            }

            int v11 = (void *)*v17;
          }

          while (v11);
          if (v13 != v23)
          {
            if (v16 < v12) {
              BOOL v14 = v15;
            }
            if (v12 >= *((_DWORD *)v14 + 7))
            {
              __int16 v18 = (void (*)(uint64_t, uint64_t *, void, void))v8[10];
              sub_86550(v29, (uint64_t)&v24);
              v18(a2, v29, *a4, v8[11]);
              sub_32C8C((void *)v29[1]);
            }
          }
        }

        sub_32C8C(v23[0]);
      }

      sub_32C8C(v25);
      sub_32C8C(v28[0]);
      int v19 = (void *)v8[1];
      if (v19)
      {
        do
        {
          __int16 v20 = v19;
          int v19 = (void *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          __int16 v20 = (void *)v8[2];
          BOOL v10 = *v20 == (void)v8;
          BOOL v8 = v20;
        }

        while (!v10);
      }

      BOOL v8 = v20;
    }

    while (v20 != (void *)(a1 + 80));
  }

  std::mutex::unlock(v21);
}

void sub_3963AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24)
{
}

std::string *sub_396420(void *a1, int a2)
{
  unint64_t v3 = a1;
  double result = (std::string *)sub_7D084(a1, "unknown");
  switch(a2)
  {
    case 0:
      return sub_90B04((std::string *)v3, "ChannelConfigurationChanged", 0x1BuLL);
    case 1:
      if (*((char *)v3 + 23) < 0)
      {
        v3[1] = 21LL;
        unint64_t v3 = (void *)*v3;
      }

      else
      {
        *((_BYTE *)v3 + 23) = 21;
      }

      qmemcpy(v3, "TimeSyncDeviceCreated", 21);
      unint64_t v6 = (char *)v3 + 21;
      goto LABEL_16;
    case 2:
      if (*((char *)v3 + 23) < 0)
      {
        v3[1] = 14LL;
        unint64_t v3 = (void *)*v3;
      }

      else
      {
        *((_BYTE *)v3 + 23) = 14;
      }

      unint64_t v5 = "PortsConnected";
      goto LABEL_13;
    case 3:
      if (*((char *)v3 + 23) < 0)
      {
        v3[1] = 14LL;
        unint64_t v3 = (void *)*v3;
      }

      else
      {
        *((_BYTE *)v3 + 23) = 14;
      }

      unint64_t v5 = "RouteDidChange";
LABEL_13:
      void *v3 = *(void *)v5;
      *(void *)((char *)v3 + 6) = *(void *)(v5 + 6);
      unint64_t v6 = (char *)v3 + 14;
LABEL_16:
      _BYTE *v6 = 0;
      break;
    default:
      return result;
  }

  return result;
}

void sub_396534(_Unwind_Exception *exception_object)
{
}

void sub_396554(void *a1)
{
  uint64_t v1 = sub_397644(a1);
  operator delete(v1);
}

void sub_396568(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8))
  {
    uint64_t v84 = (os_log_t *)sub_138E8(13);
    __int128 v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v110 = 136315394;
      *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&v110[12] = 1024;
      *(_DWORD *)&v110[14] = 36;
      _os_log_impl(&dword_0, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v110, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == a2)
  {
    BOOL v4 = 0LL;
    __int128 v99 = 0u;
  }

  else
  {
    BOOL v4 = 0LL;
    __int128 v99 = 0u;
    do
    {
      uint64_t v5 = *(void *)(v3 + 16);
      if (!v5)
      {
        uint64_t v66 = (os_log_t *)sub_138E8(13);
        uint64_t v67 = *v66;
        if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v110 = 136315394;
          *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v110[12] = 1024;
          *(_DWORD *)&v110[14] = 130;
          _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v110,  0x12u);
        }

        uint64_t v68 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v68, "Precondition failure.");
      }

      uint64_t v6 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 96LL))(v5, 0LL, 0LL);
      if (!v6)
      {
        unint64_t v69 = (os_log_t *)sub_138E8(13);
        unsigned int v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v110 = 136315394;
          *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v110[12] = 1024;
          *(_DWORD *)&v110[14] = 133;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v110,  0x12u);
        }

        unsigned int v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v71, "Precondition failure.");
      }

      (*(void (**)(uint64_t, _BYTE *))(*(void *)v6 + 112LL))(v6, v110);
      BOOL v7 = (char *)v99;
      if ((unint64_t)v99 >= *((void *)&v99 + 1))
      {
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v99 - (void)v4) >> 3) + 1;
        if (v11 > 0x666666666666666LL) {
          sub_7A87C();
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)sub_F2BEC(v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        unint64_t v14 = v12 + 8 * ((uint64_t)(v99 - (void)v4) >> 3);
        __int128 v15 = *(_OWORD *)v110;
        __int128 v16 = *(_OWORD *)&v110[16];
        *(void *)(v14 + 32) = *(void *)&v110[32];
        *(_OWORD *)unint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        if ((char *)v99 == v4)
        {
          __int16 v20 = (char *)(v12 + 8 * ((uint64_t)(v99 - (void)v4) >> 3));
        }

        else
        {
          unint64_t v17 = v12 + 8 * ((uint64_t)(v99 - (void)v4) >> 3);
          do
          {
            __int128 v18 = *(_OWORD *)(v7 - 40);
            __int128 v19 = *(_OWORD *)(v7 - 24);
            __int16 v20 = (char *)(v17 - 40);
            *(void *)(v17 - 8) = *((void *)v7 - 1);
            *(_OWORD *)(v17 - 24) = v19;
            *(_OWORD *)(v17 - 40) = v18;
            v7 -= 40;
            v17 -= 40LL;
          }

          while (v7 != v4);
        }

        unint64_t v10 = v14 + 40;
        *((void *)&v99 + 1) = v12 + 40 * v13;
        if (v4) {
          operator delete(v4);
        }
        BOOL v4 = v20;
      }

      else
      {
        __int128 v8 = *(_OWORD *)v110;
        __int128 v9 = *(_OWORD *)&v110[16];
        *(void *)(v99 + 32) = *(void *)&v110[32];
        *(_OWORD *)__int128 v99 = v8;
        *(_OWORD *)(v99 + 16) = v9;
        unint64_t v10 = v99 + 40;
      }

      int v21 = (os_log_t *)sub_138E8(16);
      uint64_t v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
      {
        sub_23FE8((uint64_t)&v107, (os_unfair_lock_t)(*(void *)(v3 + 16) + 8LL));
        int v23 = v109;
        __int16 v24 = (void **)v107;
        sub_2CC00(&__p, (uint64_t)v110);
        uint64_t v25 = &v107;
        if (v23 < 0) {
          uint64_t v25 = v24;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
        __int16 v117 = 1024;
        int v118 = 139;
        __int16 v119 = 2080;
        *(void *)unint64_t v120 = v25;
        *(_WORD *)&v120[8] = 2080;
        *(void *)&v120[10] = p_p;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d input stream format on physical device %s : %s",  buf,  0x26u);
        if (v109 < 0) {
          operator delete(v107);
        }
      }

      *((void *)&v27 + 1) = *((void *)&v99 + 1);
      *(void *)&__int128 v27 = v10;
      __int128 v99 = v27;
      uint64_t v3 = *(void *)(v3 + 8);
    }

    while (v3 != a2);
  }

  std::string::size_type v28 = *(void **)(a1 + 80);
  if (v28)
  {
    *(void *)(a1 + 88) = v28;
    operator delete(v28);
    *(void *)(a1 + 80) = 0LL;
    *(void *)(a1 + 88) = 0LL;
    *(void *)(a1 + 96) = 0LL;
  }

  *(void *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 88) = v99;
  if ((char *)v99 == v4)
  {
    __int128 v87 = (os_log_t *)sub_138E8(13);
    uint64_t v88 = *v87;
    if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v110 = 136315394;
      *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&v110[12] = 1024;
      *(_DWORD *)&v110[14] = 151;
      _os_log_impl(&dword_0, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v110, 0x12u);
    }

    unint64_t v89 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v89, "Precondition failure.");
  }

  __int128 v29 = *(_OWORD *)v4;
  __int128 v30 = *((_OWORD *)v4 + 1);
  uint64_t v105 = *((void *)v4 + 4);
  __int128 v103 = v29;
  __int128 v104 = v30;
  int v31 = DWORD1(v30);
  if (DWORD1(v30) != 1)
  {
    uint64_t v90 = (os_log_t *)sub_138E8(13);
    uint64_t v91 = *v90;
    if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v110 = 136315650;
      *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&v110[12] = 1024;
      *(_DWORD *)&v110[14] = 154;
      *(_WORD *)&v110[18] = 1024;
      *(_DWORD *)&v110[20] = v31;
      _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): More than 1 frame per packet in input stream: %u",  v110,  0x18u);
    }

    unint64_t v92 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v92, "More than 1 frame per packet in input stream: %u");
  }

  int v32 = v4 + 40;
  if (v32 != (char *)v99)
  {
    unsigned int v33 = HIDWORD(v104);
    unsigned int v34 = v104;
    do
    {
      if (*(double *)v32 != *(double *)&v103)
      {
        __int128 v72 = (os_log_t *)sub_138E8(13);
        unsigned int v73 = *v72;
        if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
        {
          double v74 = *(double *)v32;
          *(_DWORD *)int v110 = 136315906;
          *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v110[12] = 1024;
          *(_DWORD *)&v110[14] = 158;
          *(_WORD *)&v110[18] = 2048;
          *(double *)&v110[20] = v74;
          *(_WORD *)&v110[28] = 2048;
          *(void *)&v110[30] = v103;
          _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): SampleRate mismatch between input streams: %f %f",  v110,  0x26u);
        }

        CFTypeRef v75 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v75, "SampleRate mismatch between input streams: %f %f");
      }

      if (*((_DWORD *)v32 + 8) != (_DWORD)v105)
      {
        unint64_t v80 = (os_log_t *)sub_138E8(13);
        double v81 = *v80;
        if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
        {
          int v82 = *((_DWORD *)v32 + 8);
          *(_DWORD *)int v110 = 136315906;
          *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v110[12] = 1024;
          *(_DWORD *)&v110[14] = 159;
          *(_WORD *)&v110[18] = 1024;
          *(_DWORD *)&v110[20] = v82;
          *(_WORD *)&v110[24] = 1024;
          *(_DWORD *)&v110[26] = v105;
          _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Bits per sample mismatch between input streams: %u %u",  v110,  0x1Eu);
        }

        __int128 v83 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v83, "Bits per sample mismatch between input streams: %u %u");
      }

      if (*((_DWORD *)v32 + 5) != 1)
      {
        unsigned int v76 = (os_log_t *)sub_138E8(13);
        unsigned int v77 = *v76;
        if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
        {
          int v78 = *((_DWORD *)v32 + 5);
          *(_DWORD *)int v110 = 136315650;
          *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v110[12] = 1024;
          *(_DWORD *)&v110[14] = 160;
          *(_WORD *)&v110[18] = 1024;
          *(_DWORD *)&v110[20] = v78;
          _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): More than 1 frame per packet in input stream: %u",  v110,  0x18u);
        }

        uint64_t v79 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v79, "More than 1 frame per packet in input stream: %u");
      }

      v33 += *((_DWORD *)v32 + 7);
      v34 += *((_DWORD *)v32 + 4);
      LODWORD(v104) = v34;
      *((void *)&v104 + 1) = __PAIR64__(v33, v34);
      v32 += 40;
    }

    while (v32 != (char *)v99);
  }

  uint64_t v35 = (os_log_t *)sub_138E8(16);
  unint64_t v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_INFO))
  {
    sub_2CC00((std::string *)buf, (uint64_t)&v103);
    std::string::size_type v37 = v120[3] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)int v110 = 136315650;
    *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 166;
    *(_WORD *)&v110[18] = 2080;
    *(void *)&v110[20] = v37;
    _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "%25s:%-5d output stream format for capture: %s", v110, 0x1Cu);
    if ((v120[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  __int128 v102 = xmmword_4033B0;
  uint64_t v38 = sub_546E0();
  memset(v110, 0, 24);
  strcpy(&v110[24], "cwdv");
  v110[32] = 0;
  int v111 = 3;
  v113[0] = 0LL;
  v113[1] = 0LL;
  int v112 = v113;
  int v114 = 44739242;
  CFTypeRef cf = 0LL;
  *(void *)AudioObjectPropertyAddress buf = &off_485840;
  *(void *)&v120[4] = buf;
  sub_FFB0C((uint64_t *)&v107, v38, v110, (uint64_t)buf);
  uint64_t v39 = *(void **)&v120[4];
  if (*(_BYTE **)&v120[4] == buf)
  {
    uint64_t v40 = 4LL;
    uint64_t v39 = buf;
    goto LABEL_59;
  }

  if (*(void *)&v120[4])
  {
    uint64_t v40 = 5LL;
LABEL_59:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v113[0]);
  if (*(void *)v110)
  {
    *(void *)&v110[8] = *(void *)v110;
    operator delete(*(void **)v110);
  }

  int v41 = v108;
  if (v108 == &v107) {
    goto LABEL_72;
  }
  while (1)
  {
    sub_B8F68((uint64_t *)v110, (uint64_t *)v41 + 2, "", 45);
    unint64_t v42 = *(std::__shared_weak_count **)&v110[8];
    int v43 = *(_DWORD *)(*(void *)v110 + 144LL);
    if (*(void *)&v110[8])
    {
      uint64_t v44 = (unint64_t *)(*(void *)&v110[8] + 8LL);
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    if (v43 == 1751409257) {
      break;
    }
    int v41 = (void **)v41[1];
    if (v41 == &v107) {
      goto LABEL_72;
    }
  }

  if (v41 == &v107)
  {
LABEL_72:
    unint64_t v46 = (os_log_t *)sub_138E8(13);
    uint64_t v47 = *v46;
    if (*v46)
    {
      if (os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v110 = 136315394;
        *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 47;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): No Haptic Debug Input ports present",  v110,  0x12u);
      }
    }

    unint64_t v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v48, "No Haptic Debug Input ports present");
  }

  int v49 = (char *)v41[3];
  *(void *)int v110 = v41[2];
  *(void *)&v110[8] = v49;
  if (v49)
  {
    int v50 = (unint64_t *)(v49 + 16);
    do
      unint64_t v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }

  sub_CAE54((uint64_t *)buf, (uint64_t *)v110, 1LL);
  if (*(void *)&v110[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v110[8]);
  }
  uint64_t v52 = (os_log_t *)sub_138E8(16);
  int v53 = *v52;
  if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_DEBUG))
  {
    sub_B8F68(&v100, (uint64_t *)v41 + 2, "", 52);
    sub_2CA1C(&__p, *(unsigned int *)(v100 + 144));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFTypeRef v54 = &__p;
    }
    else {
      CFTypeRef v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v110 = 136315650;
    *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 52;
    *(_WORD *)&v110[18] = 2080;
    *(void *)&v110[20] = v54;
    _os_log_impl(&dword_0, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring AudioIOMonitor for %s", v110, 0x1Cu);
    uint64_t v55 = v101;
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        unint64_t v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }

  uint64_t v58 = *(void *)(a1 + 8);
  if (v58) {
    (*(void (**)(uint64_t, __int128 *, __int128 *, _BYTE *))(*(void *)v58 + 16LL))(v58, &v102, &v103, buf);
  }
  sub_85B80((uint64_t *)buf);
  if (!*(void *)(a1 + 32))
  {
    unsigned int v60 = DWORD2(v104) * *(_DWORD *)(a1 + 120);
    std::string::size_type v61 = operator new[](v60);
    __int128 v62 = *(void **)(a1 + 128);
    *(void *)(a1 + 128) = v61;
    if (v62) {
      operator delete[](v62);
    }
    if (v60)
    {
      uint64_t v63 = *(void *)(a1 + 128);
      if (v63)
      {
        *(void *)(a1 + 32) = v63;
        *(_DWORD *)(a1 + 28) = v60;
        CFTypeRef v64 = (os_log_t *)sub_138E8(16);
        BOOL v65 = *v64;
        if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v110 = 136315650;
          *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v110[12] = 1024;
          *(_DWORD *)&v110[14] = 64;
          *(_WORD *)&v110[18] = 1024;
          *(_DWORD *)&v110[20] = v60;
          _os_log_impl(&dword_0, v65, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allocating output buffer of size %u", v110, 0x18u);
        }

        goto LABEL_97;
      }

      uint64_t v95 = (os_log_t *)sub_138E8(13);
      int64x2_t v96 = *v95;
      if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v110 = 136315394;
        *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 61;
        _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v110,  0x12u);
      }
    }

    else
    {
      uint64_t v93 = (os_log_t *)sub_138E8(13);
      int v94 = *v93;
      if (*v93 && os_log_type_enabled(*v93, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v110 = 136315394;
        *(void *)&v110[4] = "HapticDebugIOMonitor.cpp";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 60;
        _os_log_impl( &dword_0,  v94,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v110,  0x12u);
      }
    }

    uint64_t v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v97, "Precondition failure.");
  }

void sub_3974A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, char a34, std::__shared_weak_count *a35)
{
}

void *sub_397600()
{
  double result = operator new(0x10uLL);
  *double result = &off_485840;
  return result;
}

void sub_397624(uint64_t a1, void *a2)
{
  *a2 = &off_485840;
}

uint64_t sub_39763C()
{
  return 1LL;
}

void *sub_397644(void *a1)
{
  *a1 = off_485818;
  unsigned int v2 = (void *)a1[16];
  a1[16] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }

  uint64_t v4 = a1[1];
  a1[1] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

uint64_t sub_3976A8(uint64_t a1, int a2)
{
  *(void *)a1 = off_485818;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 48) = -1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(a1 + 120) = a2;
  *(void *)(a1 + 128) = 0LL;
  sub_7D084(__p, "");
  uint64_t v4 = sub_312D0(1LL, (uint64_t)__p);
  uint64_t v5 = *v3;
  void *v3 = v4;
  if (v5) {
    (*(void (**)(char *))(*(void *)v5 + 8LL))(v5);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_397774( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __int128 v19 = *(void **)(v15 + 128);
  *(void *)(v15 + 128) = 0LL;
  if (v19) {
    operator delete[](v19);
  }
  __int16 v20 = *v17;
  if (*v17)
  {
    *(void *)(v15 + 88) = v20;
    operator delete(v20);
  }

  uint64_t v21 = *v16;
  *__int128 v16 = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3977D0(uint64_t a1, unsigned int *a2)
{
  if (!*(void *)(a1 + 32) || *(_DWORD *)(a1 + 16) != 1)
  {
    std::string::size_type v28 = (os_log_t *)sub_138E8(13);
    __int128 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 86;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_DWORD *)(a1 + 48) == -1)
  {
    int v31 = (os_log_t *)sub_138E8(13);
    int v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 87;
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unsigned int v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Precondition failure.");
  }

  if (!a2)
  {
    unsigned int v34 = (os_log_t *)sub_138E8(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 88;
      _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unint64_t v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v36, "Precondition failure.");
  }

  uint64_t v4 = *a2;
  if (!(_DWORD)v4)
  {
    std::string::size_type v37 = (os_log_t *)sub_138E8(13);
    uint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 89;
      _os_log_impl(&dword_0, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "Precondition failure.");
  }

  uint64_t v46 = a1 + 16;
  unint64_t v5 = 0LL;
  unsigned int v6 = 0;
  uint64_t v7 = 16 * v4;
  do
  {
    v6 += a2[v5 / 4 + 3];
    v5 += 16LL;
  }

  while (v7 != v5);
  unsigned int v8 = *(_DWORD *)(a1 + 64);
  uint64_t v9 = v6 / v8;
  unsigned int v10 = *(_DWORD *)(a1 + 28);
  if ((_DWORD)v9 != v10 / v8)
  {
    uint64_t v40 = (os_log_t *)sub_138E8(13);
    int v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 99;
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unint64_t v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v42, "Precondition failure.");
  }

  if (v6 != v10)
  {
    int v43 = (os_log_t *)sub_138E8(13);
    uint64_t v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 100;
      _os_log_impl(&dword_0, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unint64_t v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v45, "Precondition failure.");
  }

  if (v8 <= v6)
  {
    int v11 = 0;
    int v12 = 0;
    else {
      int v13 = v6 / v8;
    }
    LODWORD(v14) = 1;
    do
    {
      if ((_DWORD)v14)
      {
        unint64_t v15 = 0LL;
        uint64_t v16 = 24LL;
        uint64_t v17 = 4LL;
        do
        {
          unsigned int v18 = *(_DWORD *)(*(void *)(a1 + 80) + v16);
          if (*(_DWORD *)(a1 + 28) - v11 < v18)
          {
            uint64_t v25 = (os_log_t *)sub_138E8(13);
            uint64_t v26 = *v25;
            if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 111;
              _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            __int128 v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v27, "Precondition failure.");
          }

          memcpy( (void *)(*(void *)(a1 + 32) + v11),  (const void *)(*(void *)&a2[v17] + v18 * v12),  *(unsigned int *)(*(void *)(a1 + 80) + v16));
          v11 += v18;
          ++v15;
          unint64_t v14 = *a2;
          v17 += 4LL;
          v16 += 40LL;
        }

        while (v15 < v14);
      }

      ++v12;
    }

    while (v12 != v13);
  }

  uint64_t v19 = *(void *)(a1 + 8);
  if (!v19 || (*(_BYTE *)(v19 + 16) & 1) == 0) {
    return 0LL;
  }
  sub_33C9CC(buf, v19, (_DWORD *)(a1 + 104));
  if (*(void *)buf) {
    uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)buf + 24LL))( *(void *)buf,  v9,  v46,  0LL);
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t v22 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v23 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  return v20;
}

void sub_397E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_397E74(unint64_t *a1)
{
  unint64_t v1 = atomic_load(a1);
  pthread_t v2 = pthread_self();
  if (v2) {
    BOOL v3 = v2 == (pthread_t)v1;
  }
  else {
    BOOL v3 = 0;
  }
  unsigned int v4 = v3;
  if (v1) {
    return v4;
  }
  else {
    return v2 == 0LL;
  }
}

void sub_397EB8(uint64_t a1)
{
  unint64_t v1 = (void *)sub_39C47C(a1);
  operator delete(v1);
}

BOOL sub_397ECC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1986229103)
  {
    if (mSelector != 1986229104 && mSelector != 1987013732 && mSelector != 1986290211) {
      goto LABEL_14;
    }
LABEL_12:
    if (a2->mElement == 1) {
      return 1LL;
    }
    goto LABEL_14;
  }

  if (mSelector == 1835103844) {
    return 1LL;
  }
  if (mSelector == 1836414053) {
    goto LABEL_12;
  }
LABEL_14:
  sub_1BB60((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

uint64_t sub_397F7C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1986229103)
  {
    if (mSelector != 1835103844)
    {
      int v5 = 1836414053;
      goto LABEL_12;
    }

    return 0LL;
  }

  if (mSelector == 1986229104 || mSelector == 1986290211)
  {
    if (a2->mElement != 1) {
      return sub_36854C(a1, a2);
    }
    return 0LL;
  }

  int v5 = 1987013732;
LABEL_12:
  if (mSelector == v5 && a2->mElement == 1) {
    return 1LL;
  }
  return sub_36854C(a1, a2);
}

uint64_t sub_398008(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unsigned int v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      int v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v23 = "Device_MikeyBus_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 179;
      __int16 v26 = 2080;
      __int128 v27 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    unint64_t v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      if (v21 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v23 = "Device_MikeyBus_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 180;
      __int16 v26 = 2080;
      __int128 v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      int v31 = a4;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v17 = &off_4865A0;
    v17[2] = 561211770;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t result = 4LL;
  if ((int)a2->mSelector <= 1986229103)
  {
    if (mSelector != 1835103844 && mSelector != 1836414053) {
      return sub_21524(a1, a2, a3, a4);
    }
  }

  else if (mSelector != 1986229104 && mSelector != 1987013732)
  {
    if (mSelector == 1986290211) {
      return 16LL;
    }
    return sub_21524(a1, a2, a3, a4);
  }

  return result;
}

void sub_398338(uint64_t a1, uint64_t *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v39);
      char v21 = v42 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 217;
      __int16 v46 = 2080;
      uint64_t v47 = (const char *)v21;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v42 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v23 = (os_log_t *)sub_138E8(13);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v39);
      int v25 = v42 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 218;
      __int16 v46 = 2080;
      uint64_t v47 = (const char *)v25;
      __int16 v48 = 1024;
      LODWORD(v49[0]) = a3;
      WORD2(v49[0]) = 2048;
      *(void *)((char *)v49 + 6) = a4;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v42 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    __int16 v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v26 = &off_4865A0;
    v26[2] = 561211770;
  }

  if (!a6)
  {
    __int128 v27 = (os_log_t *)sub_138E8(13);
    __int16 v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v39);
      UInt32 v29 = v42 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 219;
      __int16 v46 = 2080;
      uint64_t v47 = "outData";
      __int16 v48 = 2080;
      v49[0] = v29;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v42 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    __int16 v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v30 = &off_4865A0;
    v30[2] = 561211770;
  }

  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1986229103)
  {
    if (v12 == 1835103844)
    {
      UInt32 v18 = *a5;
      if (v18 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
      {
        int v31 = (os_log_t *)sub_138E8(13);
        int v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
        {
          uint64_t v39 = *a2;
          int v40 = *((_DWORD *)a2 + 2);
          sub_613AC((uint64_t)&__p, (unsigned int *)&v39);
          int v33 = v42;
          unsigned int v34 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v35 = *a5;
          int v36 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          p_p = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
          if (v33 < 0) {
            p_p = v34;
          }
          __int16 v44 = 1024;
          int v45 = 226;
          __int16 v46 = 2080;
          uint64_t v47 = (const char *)p_p;
          __int16 v48 = 1024;
          LODWORD(v49[0]) = v35;
          WORD2(v49[0]) = 1024;
          *(_DWORD *)((char *)v49 + 6) = v36;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v42 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }

        uint64_t v38 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v38 = &off_4865A0;
        v38[2] = 561211770;
      }

      __p.AudioObjectPropertySelector mSelector = 1986290211;
      *(void *)&__p.AudioObjectPropertyScope mScope = *(uint64_t *)((char *)a2 + 4);
      LODWORD(v39) = 16;
      sub_232A4(a1, &__p, 0, 0LL, (UInt32 *)&v39, (float *)buf);
      float v14 = *(double *)buf;
      goto LABEL_22;
    }

    if (v12 != 1836414053 || *((_DWORD *)a2 + 2) != 1) {
      goto LABEL_19;
    }
    unint64_t v15 = (unsigned __int8 *)sub_1F4000();
    int v16 = sub_1F5650(v15);
LABEL_16:
    *(_DWORD *)a6 = v16;
    return;
  }

  if (v12 == 1986229104)
  {
    if (*((_DWORD *)a2 + 2) != 1) {
      goto LABEL_19;
    }
    uint64_t v17 = sub_1F4000();
    int v16 = sub_1F4DF8(v17);
    goto LABEL_16;
  }

  if (v12 == 1986290211)
  {
    if (*((_DWORD *)a2 + 2) == 1)
    {
      *(_OWORD *)a6 = xmmword_4031A0;
      return;
    }

    goto LABEL_19;
  }

  if (v12 != 1987013732 || *((_DWORD *)a2 + 2) != 1)
  {
LABEL_19:
    sub_232A4(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
    return;
  }

  int v13 = (float *)sub_1F4000();
  float v14 = (float)(sub_1F4F28(v13) * 100.0) + -100.0;
LABEL_22:
  *a6 = v14;
}

void sub_39898C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3989B0( void *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    int v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      UInt32 v18 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v37 = "Device_MikeyBus_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 293;
      __int16 v40 = 2080;
      int v41 = (const char *)v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    char v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      uint64_t v22 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      std::string::size_type v37 = "Device_MikeyBus_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 294;
      __int16 v40 = 2080;
      int v41 = (const char *)v22;
      __int16 v42 = 1024;
      LODWORD(v43[0]) = a3;
      WORD2(v43[0]) = 2048;
      *(void *)((char *)v43 + 6) = a4;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    int v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v23 = &off_4865A0;
    v23[2] = 561211770;
  }

  if (!a6)
  {
    __int16 v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      __int16 v26 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      std::string::size_type v37 = "Device_MikeyBus_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 295;
      __int16 v40 = 2080;
      int v41 = "inData";
      __int16 v42 = 2080;
      v43[0] = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v27 = &off_4865A0;
    v27[2] = 561211770;
  }

  if (((*(uint64_t (**)(void *, const AudioObjectPropertyAddress *))(*a1 + 24LL))(a1, a2) & 1) == 0)
  {
    __int16 v28 = (os_log_t *)sub_138E8(13);
    UInt32 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      __int16 v30 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v37 = "Device_MikeyBus_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 296;
      __int16 v40 = 2080;
      int v41 = (const char *)v30;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    int v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v31 = &off_4865A0;
    v31[2] = 1852797029;
  }

  if (a2->mSelector == 1836414053)
  {
    if (a2->mElement == 1 && a2->mScope == 1869968496)
    {
      uint64_t v15 = sub_1F4000();
      sub_1F57EC(v15, *(_DWORD *)a6 != 0);
      return;
    }

    goto LABEL_16;
  }

  if (a2->mSelector != 1987013732 || a2->mElement != 1)
  {
LABEL_16:
    sub_3686A0((uint64_t)a1, a2, a3, a4, a5, a6);
    return;
  }

  uint64_t v12 = sub_1F4000();
  if (sub_1F4DF8(v12))
  {
    float v13 = (float)(*a6 + 100.0) / 100.0;
    uint64_t v14 = sub_1F4000();
    sub_1F51DC(v14, v13);
  }

BOOL sub_398FE0( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if ((*(void *)&a2->mSelector != qword_4A9D10 || a2->mElement != dword_4A9D18)
    && (*(void *)&a2->mSelector != qword_4A9D20 || a2->mElement != dword_4A9D28)
    && (*(void *)&a2->mSelector != qword_4A9D30 || a2->mElement != dword_4A9D38))
  {
    return sub_368FB0(a1, a2, a3, a4);
  }

  uint64_t v9 = *(void *)&a2->mSelector;
  AudioObjectPropertyElement mElement = a2->mElement;
  uint64_t v5 = *(void *)&a2->mSelector;
  AudioObjectPropertyElement v6 = a2->mElement;
  uint64_t v7 = a3;
  unsigned int v8 = a4;
  sub_1885D4((void *)(a1 + 496), (unsigned int *)&v9, (unsigned int *)&v5);
  return 1LL;
}

BOOL sub_3990E8( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_4A9D10 && a2->mElement == dword_4A9D18
    || *(void *)&a2->mSelector == qword_4A9D20 && a2->mElement == dword_4A9D28
    || *(void *)&a2->mSelector == qword_4A9D30 && a2->mElement == dword_4A9D38)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    float v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    uint64_t v12 = a3;
    sub_18803C((uint64_t **)(a1 + 496), (unsigned int *)&v14, (unsigned int *)&v10);
    return 1LL;
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

unsigned __int8 *sub_39922C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 492))
  {
    pthread_t v2 = (void *)sub_1F4000();
    sub_1F4AD0(v2, 1819176821, (unint64_t)sub_39C314);
    BOOL v3 = (uint64_t **)sub_1F4000();
    sub_1F440C(v3, (unint64_t)sub_39BE5C);
  }

  unsigned int v4 = *(uint64_t **)(a1 + 640);
  if (v4) {
    sub_20B22C(v4);
  }
  sub_1D0E48(a1);
  return sub_369228(a1);
}

uint64_t sub_399290(os_unfair_lock_s *a1)
{
  return 1LL;
}

uint64_t sub_3992BC(uint64_t a1, int a2)
{
  if (a2 > 1886222184)
  {
    if (a2 == 1886680175) {
      return 0LL;
    }
    int v2 = 1886222185;
  }

  else
  {
    if (a2 == 1885892727) {
      return 0LL;
    }
    int v2 = 1886154613;
  }

  if (a2 != v2)
  {
    unsigned int v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      if (v10 >= 0) {
        AudioObjectPropertyElement v6 = __p;
      }
      else {
        AudioObjectPropertyElement v6 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v12 = "Device_MikeyBus_Aspen.cpp";
      __int16 v13 = 1024;
      int v14 = 622;
      __int16 v15 = 2080;
      int v16 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType: %s.",  buf,  0x1Cu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
  }

  return 0LL;
}

void sub_399438(_Unwind_Exception *a1)
{
}

void sub_399454(uint64_t a1, _DWORD **a2, int a3)
{
  BOOL v3 = *a2;
  if (a3)
  {
    if (*v3 == 1701669219) {
      return;
    }
  }

  else if (v3 == a2[1])
  {
    return;
  }

  unsigned int v4 = (os_log_t *)sub_138E8(13);
  uint64_t v5 = *v4;
  if (*v4)
  {
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "Device_MikeyBus_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 633;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid SubPortIDs found for Mikeybus device",  (uint8_t *)&v6,  0x12u);
    }
  }

void sub_399538(unint64_t a1)
{
  if ((*(unsigned int (**)(unint64_t, void))(*(void *)a1 + 88LL))(a1, 0LL))
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v219 = 0x696E70747465726DLL;
      LODWORD(v220) = 0;
      uint64_t v3 = (*(uint64_t (**)(unint64_t, void, uint64_t))(*(void *)a1 + 96LL))(a1, 0LL, v2);
      LODWORD(v218) = 0;
      LODWORD(v216) = 4;
      (*(void (**)(uint64_t, uint64_t *, void, void, char **, __int128 *))(*(void *)v3 + 40LL))( v3,  &v219,  0LL,  0LL,  &v216,  &v218);
      int v4 = v218;
      if ((_DWORD)v218 == 1752000867)
      {
        if (sub_39B8A0(a1))
        {
          uint64_t v5 = sub_138E8(17);
          uint64_t v6 = sub_138E8(32);
          char v7 = 0;
          uint64_t v8 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v9 = *(void *)(v5 + 8);
          while (1)
          {
            uint64_t v10 = *(int *)&buf[4 * v8];
            char v11 = v7;
            if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
              break;
            }
            char v7 = 1;
            uint64_t v8 = 1LL;
            if ((v11 & 1) != 0) {
              goto LABEL_37;
            }
          }

          if ((v9 & v10) == 0) {
            uint64_t v5 = v6;
          }
LABEL_37:
          UInt32 v29 = *(os_log_s **)v5;
          if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 471;
            _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating X90 input port subtype", buf, 0x12u);
          }

          *(_DWORD *)AudioObjectPropertyAddress buf = 1701669219;
          sub_21C1B8(v246, 1uLL, buf);
          __int128 inAddress = 0uLL;
          uint64_t v224 = 0LL;
          sub_F9530((uint64_t)buf, qword_4A9CE0);
          v208 = 0LL;
          uint64_t v209 = 0LL;
          v207 = 0LL;
          sub_7A5B8( &v207,  *(const void **)&v246[0].mSelector,  *(uint64_t *)&v246[0].mElement,  (uint64_t)(*(void *)&v246[0].mElement - *(void *)&v246[0].mSelector) >> 2);
          __int16 v30 = v207;
          sub_389724((char **)v225, v207, v208);
          int v31 = operator new(0x228uLL);
          v31[1] = 0LL;
          v31[2] = 0LL;
          *int v31 = off_485B80;
          *(void *)&__int128 v222 = CFStringCreateWithCString(0LL, "Mikeybus Headset Microphone", 0x600u);
          BYTE8(v222) = 1;
          sub_7D084(__p, "");
          sub_F9638( (uint64_t)(v31 + 3),  &qword_4A9CE0,  a1,  (uint64_t)&inAddress,  (uint64_t)buf,  (uint64_t)&v222,  (char **)v225,  (__int128 *)__p);
          _DWORD v31[3] = &off_46FD40;
          *((_WORD *)v31 + 272) = 0;
          if (SHIBYTE(__p[1].mElement) < 0) {
            operator delete(*(void **)&__p[0].mSelector);
          }
          sub_19DFC((uint64_t)&v222);
          *(void *)&__int128 v221 = v31 + 3;
          *((void *)&v221 + 1) = v31;
          sub_AFDAC((uint64_t)&v221, v31 + 13, (uint64_t)(v31 + 3));
          *(void *)&__p[0].AudioObjectPropertySelector mSelector = v225;
          sub_7A668((void ***)__p);
          if (v30)
          {
            v208 = v30;
            operator delete(v30);
          }

          sub_19DFC((uint64_t)&buf[32]);
          sub_19DFC((uint64_t)&buf[16]);
          sub_19DFC((uint64_t)buf);
          (*(void (**)(void *, uint64_t))(v31[3] + 104LL))(v31 + 3, 2004367664LL);
          __int128 v206 = v221;
          __int128 v221 = 0uLL;
          sub_3711D4(a1, (void ***)&v206);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)&v206 + 1);
          if (*((void *)&v206 + 1))
          {
            int v33 = (unint64_t *)(*((void *)&v206 + 1) + 8LL);
            do
              unint64_t v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }

          strcpy(buf, "dlovtpni");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          if ((*(unsigned int (**)(unint64_t, _BYTE *))(*(void *)a1 + 16LL))(a1, buf))
          {
            char v35 = operator new(0x128uLL);
            sub_236254((uint64_t)v35, a1, 1768845428LL, 0, 0, 59);
            sub_1D5AE0((void *)a1, (uint64_t)v35);
            sub_1D580C(a1, 0, qword_4A9CE0, (uint64_t)v35);
          }

          else
          {
            int v36 = operator new(0x68uLL);
            sub_EC5B8((uint64_t)v36, 0);
            sub_1D5AE0((void *)a1, (uint64_t)v36);
            sub_1D580C(a1, 0, qword_4A9CE0, (uint64_t)v36);
            sub_1D55D4((uint64_t *)a1, 0, qword_4A9CE0, (uint64_t)v36);
          }

          std::string::size_type v37 = (std::__shared_weak_count *)*((void *)&v221 + 1);
          if (*((void *)&v221 + 1))
          {
            __int16 v38 = (unint64_t *)(*((void *)&v221 + 1) + 8LL);
            do
              unint64_t v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }

          uint64_t v19 = *(void **)&v246[0].mSelector;
          if (!*(void *)&v246[0].mSelector) {
            goto LABEL_60;
          }
          *(void *)&v246[0].AudioObjectPropertyElement mElement = *(void *)&v246[0].mSelector;
          goto LABEL_59;
        }

        int v4 = v218;
      }

      if (v4 == 1751412840)
      {
        strcpy(buf, "spatbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unint64_t v12 = sub_5C2F8(v3);
        *((void *)&v14 + 1) = v13;
        *(void *)&__int128 v14 = v12;
        if (((v14 >> 32) & 0xFF00000000LL) != 0 && HIDWORD(v12) != 0LL)
        {
          uint64_t v20 = (os_log_t *)sub_138E8(17);
          char v21 = *v20;
          if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 501;
            _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating port for headphone reference stream",  buf,  0x12u);
          }

          uint64_t v22 = operator new(0x228uLL);
          v22[1] = 0LL;
          v22[2] = 0LL;
          void *v22 = off_485BB8;
          *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Mikeybus Headphones Reference", 0x600u);
          buf[8] = 1;
          sub_31AB40((uint64_t)(v22 + 3), a1, (uint64_t)buf);
          sub_19DFC((uint64_t)buf);
          *(void *)&__p[0].AudioObjectPropertySelector mSelector = v22 + 3;
          *(void *)&__p[0].AudioObjectPropertyElement mElement = v22;
          sub_AFDAC((uint64_t)__p, v22 + 13, (uint64_t)(v22 + 3));
          __int128 v205 = *(_OWORD *)&__p[0].mSelector;
          *(void *)&__p[0].AudioObjectPropertySelector mSelector = 0LL;
          *(void *)&__p[0].AudioObjectPropertyElement mElement = 0LL;
          sub_3711D4(a1, (void ***)&v205);
          int v23 = (std::__shared_weak_count *)*((void *)&v205 + 1);
          if (*((void *)&v205 + 1))
          {
            __int16 v24 = (unint64_t *)(*((void *)&v205 + 1) + 8LL);
            do
              unint64_t v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }

          __int16 v26 = *(std::__shared_weak_count **)&__p[0].mElement;
          if (*(void *)&__p[0].mElement)
          {
            __int128 v27 = (unint64_t *)(*(void *)&__p[0].mElement + 8LL);
            do
              unint64_t v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }

          goto LABEL_60;
        }
      }

      int v16 = (os_log_t *)sub_138E8(17);
      uint64_t v17 = *v16;
      if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_60;
      }
      sub_2CA1C(__p, v218);
      UInt32 v18 = __p;
      if ((__p[1].mElement & 0x80000000) != 0) {
        UInt32 v18 = *(AudioObjectPropertyAddress **)&__p[0].mSelector;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 506;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v2;
      *(_WORD *)&uint8_t buf[24] = 2080;
      *(void *)&buf[26] = v18;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring headset input stream (%u, %s)", buf, 0x22u);
      if ((SHIBYTE(__p[1].mElement) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      uint64_t v19 = *(void **)&__p[0].mSelector;
LABEL_59:
      operator delete(v19);
LABEL_60:
      uint64_t v2 = (v2 + 1);
    }

    while (v2 < (*(unsigned int (**)(unint64_t, void))(*(void *)a1 + 88LL))( a1,  0LL));
  }

  if ((*(unsigned int (**)(unint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL))
  {
    uint64_t v203 = 0x6F7574707465726DLL;
    int v204 = 0;
    uint64_t v40 = (*(uint64_t (**)(unint64_t, uint64_t, void))(*(void *)a1 + 96LL))(a1, 1LL, 0LL);
    if (!v40)
    {
      uint64_t v188 = (os_log_t *)sub_138E8(13);
      __int128 v189 = *v188;
      if (*v188 && os_log_type_enabled(*v188, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 516;
        _os_log_impl( &dword_0,  v189,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    int v201 = 4;
    unsigned int v202 = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, unsigned int *))(*(void *)v40 + 40LL))( v40,  &v203,  0LL,  0LL,  &v201,  &v202);
    switch(v202)
    {
      case 0x6C696E65u:
        uint64_t v62 = sub_138E8(17);
        uint64_t v63 = sub_138E8(23);
        char v64 = 0;
        uint64_t v65 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v66 = *(void *)(v62 + 8);
        while (1)
        {
          uint64_t v67 = *(int *)&buf[4 * v65];
          char v68 = v64;
          if (((v66 & v67) != 0) != ((*(void *)(v63 + 8) & v67) != 0)) {
            break;
          }
          char v64 = 1;
          uint64_t v65 = 1LL;
          if ((v68 & 1) != 0) {
            goto LABEL_91;
          }
        }

        if ((v66 & v67) == 0) {
          uint64_t v62 = v63;
        }
LABEL_91:
        uint64_t v69 = sub_138E8(32);
        char v70 = 0;
        uint64_t v71 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v72 = *(void *)(v62 + 8);
        while (1)
        {
          uint64_t v73 = *(int *)&buf[4 * v71];
          char v74 = v70;
          if (((v72 & v73) != 0) != ((*(void *)(v69 + 8) & v73) != 0)) {
            break;
          }
          char v70 = 1;
          uint64_t v71 = 1LL;
          if ((v74 & 1) != 0) {
            goto LABEL_97;
          }
        }

        if ((v72 & v73) == 0) {
          uint64_t v62 = v69;
        }
LABEL_97:
        CFTypeRef v75 = *(os_log_s **)v62;
        if (v75 && os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 557;
          _os_log_impl(&dword_0, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a Mikeybus LineOut port", buf, 0x12u);
        }

        memset(v246, 0, sizeof(v246));
        sub_F9530((uint64_t)buf, 1886154613LL);
        __int128 inAddress = 0uLL;
        uint64_t v224 = 0LL;
        unsigned int v76 = operator new(0x228uLL);
        v76[1] = 0LL;
        int v76[2] = 0LL;
        void *v76 = off_485B80;
        *(void *)&v225[0].AudioObjectPropertySelector mSelector = CFStringCreateWithCString(0LL, "Mikeybus LineOut", 0x600u);
        LOBYTE(v225[0].mElement) = 1;
        sub_7D084(__p, "");
        sub_F9638( (uint64_t)(v76 + 3),  &qword_4A9C80,  a1,  (uint64_t)v246,  (uint64_t)buf,  (uint64_t)v225,  (char **)&inAddress,  (__int128 *)__p);
        v76[3] = &off_46FD40;
        *((_WORD *)v76 + 272) = 0;
        if (SHIBYTE(__p[1].mElement) < 0) {
          operator delete(*(void **)&__p[0].mSelector);
        }
        sub_19DFC((uint64_t)v225);
        *(void *)&__int128 v222 = v76 + 3;
        *((void *)&v222 + 1) = v76;
        sub_AFDAC((uint64_t)&v222, v76 + 13, (uint64_t)(v76 + 3));
        __int128 v198 = v222;
        __int128 v222 = 0uLL;
        sub_3711D4(a1, (void ***)&v198);
        unsigned int v77 = (std::__shared_weak_count *)*((void *)&v198 + 1);
        if (*((void *)&v198 + 1))
        {
          int v78 = (unint64_t *)(*((void *)&v198 + 1) + 8LL);
          do
            unint64_t v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }

        unint64_t v80 = (std::__shared_weak_count *)*((void *)&v222 + 1);
        if (*((void *)&v222 + 1))
        {
          double v81 = (unint64_t *)(*((void *)&v222 + 1) + 8LL);
          do
            unint64_t v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }

        *(void *)&__p[0].AudioObjectPropertySelector mSelector = &inAddress;
        sub_7A668((void ***)__p);
        sub_19DFC((uint64_t)&buf[32]);
        sub_19DFC((uint64_t)&buf[16]);
        sub_19DFC((uint64_t)buf);
        if (*(void *)&v246[0].mSelector) {
          operator delete(*(void **)&v246[0].mSelector);
        }
        sub_39B8EC(a1, 1886154613LL);
        break;
      case 0x6C696170u:
        (*(void (**)(AudioObjectPropertyAddress *__return_ptr, unint64_t))(*(void *)a1 + 128LL))( v246,  a1);
        __int16 v48 = operator new(0x280uLL);
        v48[1] = 0LL;
        CFStringRef v48[2] = 0LL;
        *__int16 v48 = off_485B48;
        sub_18784C((_BYTE *)v48 + 24, a1, (CFStringRef *)v246);
        *(void *)AudioObjectPropertyAddress buf = v48 + 3;
        *(void *)&buf[8] = v48;
        sub_AFDAC((uint64_t)buf, v48 + 13, (uint64_t)(v48 + 3));
        *(_OWORD *)&__p[0].AudioObjectPropertySelector mSelector = *(_OWORD *)buf;
        *(void *)AudioObjectPropertyAddress buf = 0LL;
        *(void *)&buf[8] = 0LL;
        sub_3711D4(a1, (void ***)__p);
        int v49 = *(std::__shared_weak_count **)&__p[0].mElement;
        if (*(void *)&__p[0].mElement)
        {
          int v50 = (unint64_t *)(*(void *)&__p[0].mElement + 8LL);
          do
            unint64_t v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }

        uint64_t v52 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          int v53 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }

        sub_19DFC((uint64_t)v246);
        uint64_t v55 = sub_138E8(17);
        uint64_t v56 = sub_138E8(32);
        char v57 = 0;
        uint64_t v58 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v59 = *(void *)(v55 + 8);
        while (1)
        {
          uint64_t v60 = *(int *)&buf[4 * v58];
          char v61 = v57;
          if (((v59 & v60) != 0) != ((*(void *)(v56 + 8) & v60) != 0)) {
            break;
          }
          char v57 = 1;
          uint64_t v58 = 1LL;
          if ((v61 & 1) != 0) {
            goto LABEL_117;
          }
        }

        if ((v59 & v60) == 0) {
          uint64_t v55 = v56;
        }
LABEL_117:
        __int128 v83 = *(os_log_s **)v55;
        if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 378;
          _os_log_impl(&dword_0, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating an iAP Mikeybus LineOut port", buf, 0x12u);
        }

        *(_BYTE *)(a1 + 492) = 1;
        uint64_t v84 = (uint64_t **)sub_1F4000();
        sub_1F4114(v84, (unint64_t)sub_39BE5C, a1);
        sub_39BF74((os_unfair_lock_s *)a1, 1819176821);
        uint64_t v85 = sub_1F4000();
        sub_1F470C(v85, 1819176821, (unint64_t)sub_39C314, a1);
        sub_39B8EC(a1, 0x6C696170706C6F75LL);
        break;
      case 0x68647068u:
        if (sub_39B8A0(a1))
        {
          uint64_t v41 = sub_138E8(17);
          uint64_t v42 = sub_138E8(32);
          char v43 = 0;
          uint64_t v44 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v45 = *(void *)(v41 + 8);
          while (1)
          {
            uint64_t v46 = *(int *)&buf[4 * v44];
            char v47 = v43;
            if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
              break;
            }
            char v43 = 1;
            uint64_t v44 = 1LL;
            if ((v47 & 1) != 0) {
              goto LABEL_191;
            }
          }

          if ((v45 & v46) == 0) {
            uint64_t v41 = v42;
          }
LABEL_191:
          uint64_t v140 = *(os_log_s **)v41;
          if (v140 && os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 526;
            _os_log_impl(&dword_0, v140, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating X90 output port subtype", buf, 0x12u);
          }

          memset(v246, 0, sizeof(v246));
          sub_F9530((uint64_t)buf, qword_4A9CB0);
          __int128 inAddress = 0uLL;
          uint64_t v224 = 0LL;
          uint64_t v141 = (std::__shared_weak_count *)operator new(0x228uLL);
          v141->__shared_owners_ = 0LL;
          p_shared_owners = (unint64_t *)&v141->__shared_owners_;
          v141->__shared_weak_owners_ = 0LL;
          v141->__vftable = (std::__shared_weak_count_vtbl *)off_485B80;
          *(void *)&v225[0].AudioObjectPropertySelector mSelector = CFStringCreateWithCString(0LL, "Mikeybus Headphones", 0x600u);
          LOBYTE(v225[0].mElement) = 1;
          sub_7D084(__p, "");
          sub_F9638( (uint64_t)&v141[1],  &qword_4A9CB0,  a1,  (uint64_t)v246,  (uint64_t)buf,  (uint64_t)v225,  (char **)&inAddress,  (__int128 *)__p);
          v141[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
          LOWORD(v141[22].__shared_weak_owners_) = 0;
          if (SHIBYTE(__p[1].mElement) < 0) {
            operator delete(*(void **)&__p[0].mSelector);
          }
          sub_19DFC((uint64_t)v225);
          *(void *)&__int128 v222 = v141 + 1;
          *((void *)&v222 + 1) = v141;
          sub_AFDAC((uint64_t)&v222, &v141[4].__shared_owners_, (uint64_t)&v141[1]);
          *(void *)&__p[0].AudioObjectPropertySelector mSelector = &inAddress;
          sub_7A668((void ***)__p);
          sub_19DFC((uint64_t)&buf[32]);
          sub_19DFC((uint64_t)&buf[16]);
          sub_19DFC((uint64_t)buf);
          ((void (*)(std::__shared_weak_count *, uint64_t))v141[1].__vftable[2].__get_deleter)( &v141[1],  1752709424LL);
          v199 = (void **)&v141[1].__vftable;
          v200 = v141;
          do
            unint64_t v143 = __ldxr(p_shared_owners);
          while (__stxr(v143 + 1, p_shared_owners));
          sub_3711D4(a1, &v199);
          char v144 = v200;
          if (v200)
          {
            char v145 = (unint64_t *)&v200->__shared_owners_;
            do
              unint64_t v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }

          sub_39B8EC(a1, qword_4A9CB0 | 0x6878393000000000LL);
          CFTypeRef v147 = (std::__shared_weak_count *)*((void *)&v222 + 1);
          if (*((void *)&v222 + 1))
          {
            __int16 v148 = (unint64_t *)(*((void *)&v222 + 1) + 8LL);
            do
              unint64_t v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
        }

        else
        {
          uint64_t v86 = operator new(0x228uLL);
          v86[1] = 0LL;
          v86[2] = 0LL;
          void *v86 = off_485BF0;
          uint64_t v87 = (uint64_t)(v86 + 3);
          sub_15AA94((uint64_t)(v86 + 3), a1, 1);
          *(void *)&__int128 v222 = v86 + 3;
          *((void *)&v222 + 1) = v86;
          sub_AFDAC((uint64_t)&v222, v86 + 13, (uint64_t)(v86 + 3));
          uint64_t v88 = (os_log_t *)sub_138E8(17);
          unint64_t v89 = *v88;
          if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 762;
            _os_log_impl(&dword_0, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a wired-microphone port", buf, 0x12u);
          }

          uint64_t v90 = operator new(4uLL);
          *uint64_t v90 = 1701669219;
          memset(__p, 0, sizeof(__p));
          sub_7A5B8(__p, v90, (uint64_t)(v90 + 1), 1uLL);
          uint64_t v91 = *(void **)&__p[0].mSelector;
          sub_389724((char **)buf, *(int **)&__p[0].mSelector, *(int **)&__p[0].mElement);
          if (v91)
          {
            *(void *)&__p[0].AudioObjectPropertyElement mElement = v91;
            operator delete(v91);
          }

          unint64_t v92 = (std::__shared_weak_count *)operator new(0x228uLL);
          v92->__shared_owners_ = 0LL;
          uint64_t v93 = (unint64_t *)&v92->__shared_owners_;
          v92->__shared_weak_owners_ = 0LL;
          v92->__vftable = (std::__shared_weak_count_vtbl *)off_485C28;
          sub_15AF80((uint64_t)&v92[1], a1, (char **)buf);
          *(void *)&__int128 v221 = v92 + 1;
          *((void *)&v221 + 1) = v92;
          sub_AFDAC((uint64_t)&v221, &v92[4].__shared_owners_, (uint64_t)&v92[1]);
          sub_204854((uint64_t)&v92[1], v87);
          uint64_t v219 = (uint64_t)&v92[1];
          v220 = v92;
          do
            unint64_t v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          sub_3711D4(a1, (void ***)&v219);
          uint64_t v95 = v220;
          if (v220)
          {
            int64x2_t v96 = (unint64_t *)&v220->__shared_owners_;
            do
              unint64_t v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }

          __int128 v218 = v222;
          if (*((void *)&v222 + 1))
          {
            __int128 v98 = (unint64_t *)(*((void *)&v222 + 1) + 8LL);
            do
              unint64_t v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }

          sub_3711D4(a1, (void ***)&v218);
          uint64_t v100 = (std::__shared_weak_count *)*((void *)&v218 + 1);
          if (*((void *)&v218 + 1))
          {
            uint64_t v101 = (unint64_t *)(*((void *)&v218 + 1) + 8LL);
            do
              unint64_t v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }

          __int128 v103 = operator new(0x1E0uLL);
          sub_1C8600((uint64_t)v103, a1, 0, 74, -76.0, 2.0);
          sub_1D5AE0((void *)a1, (uint64_t)v103);
          __int128 v104 = operator new(0x128uLL);
          sub_236254((uint64_t)v104, a1, 1768845428LL, 0, 0, 59);
          sub_1D5AE0((void *)a1, (uint64_t)v104);
          sub_1D55D4((uint64_t *)a1, 1u, 1885892727LL, (uint64_t)v103);
          sub_1D580C(a1, 1u, 1885892727LL, (uint64_t)v103);
          sub_1D55D4((uint64_t *)a1, 0, 1886222185LL, (uint64_t)v104);
          sub_1D580C(a1, 0, 1886222185LL, (uint64_t)v104);
          if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1)
          {
            uint64_t v105 = (os_log_t *)sub_138E8(17);
            uint64_t v106 = *v105;
            if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_DEBUG))
            {
              v246[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&v246[0].AudioObjectPropertyElement mScope = "Device_MikeyBus_Aspen.cpp";
              LOWORD(v246[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&v246[1].mSelector + 2) = 791;
              _os_log_impl(&dword_0, v106, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating TTY ports", (uint8_t *)v246, 0x12u);
            }

            uint64_t v224 = 0LL;
            __int128 inAddress = 0uLL;
            sub_7A5B8(&inAddress, v90, (uint64_t)(v90 + 1), 1uLL);
            __int16 v107 = (void *)inAddress;
            sub_389724((char **)v246, (int *)inAddress, *((int **)&inAddress + 1));
            if (v107)
            {
              *((void *)&inAddress + 1) = v107;
              operator delete(v107);
            }

            unint64_t v108 = (char *)operator new(0x228uLL);
            *((void *)v108 + 1) = 0LL;
            char v109 = (unint64_t *)(v108 + 8);
            *((void *)v108 + 2) = 0LL;
            *(void *)unint64_t v108 = off_485C60;
            sub_187B4C((uint64_t)(v108 + 24), a1, (char **)v246);
            v216 = v108 + 24;
            v217 = (std::__shared_weak_count *)v108;
            sub_AFDAC((uint64_t)&v216, (void *)v108 + 13, (uint64_t)(v108 + 24));
            memset(v225, 0, sizeof(v225));
            int v110 = (std::__shared_weak_count *)operator new(0x228uLL);
            v110->__shared_owners_ = 0LL;
            v110->__shared_weak_owners_ = 0LL;
            v110->__vftable = (std::__shared_weak_count_vtbl *)off_486108;
            sub_187924((uint64_t)&v110[1], a1, (char **)v225);
            v214 = (void **)&v110[1].__vftable;
            v215 = v110;
            sub_AFDAC((uint64_t)&v214, &v110[4].__shared_owners_, (uint64_t)&v110[1]);
            v212 = v225;
            sub_7A668((void ***)&v212);
            sub_204854((uint64_t)(v108 + 24), (uint64_t)&v110[1]);
            v212 = (AudioObjectPropertyAddress *)(v108 + 24);
            v213 = (std::__shared_weak_count *)v108;
            do
              unint64_t v111 = __ldxr(v109);
            while (__stxr(v111 + 1, v109));
            sub_3711D4(a1, (void ***)&v212);
            int v112 = v213;
            if (v213)
            {
              uint64_t v113 = (unint64_t *)&v213->__shared_owners_;
              do
                unint64_t v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }

            v210 = v214;
            v211 = v215;
            if (v215)
            {
              BOOL v115 = (unint64_t *)&v215->__shared_owners_;
              do
                unint64_t v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }

            sub_3711D4(a1, &v210);
            __int16 v117 = v211;
            if (v211)
            {
              int v118 = (unint64_t *)&v211->__shared_owners_;
              do
                unint64_t v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }

            unint64_t v120 = (os_log_t *)sub_138E8(17);
            std::string v121 = *v120;
            if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_DEBUG))
            {
              v225[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&v225[0].AudioObjectPropertyElement mScope = "Device_MikeyBus_Aspen.cpp";
              LOWORD(v225[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&v225[1].mSelector + 2) = 800;
              _os_log_impl(&dword_0, v121, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating TTY controls", (uint8_t *)v225, 0x12u);
            }

            sub_1D55D4((uint64_t *)a1, 1u, 1886680175LL, (uint64_t)v103);
            sub_1D580C(a1, 1u, 1886680175LL, (uint64_t)v103);
            sub_1D55D4((uint64_t *)a1, 0, 1886680169LL, (uint64_t)v104);
            sub_1D580C(a1, 0, 1886680169LL, (uint64_t)v104);
            unint64_t v122 = v215;
            if (v215)
            {
              unint64_t v123 = (unint64_t *)&v215->__shared_owners_;
              do
                unint64_t v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }

            unint64_t v125 = v217;
            if (v217)
            {
              __int128 v126 = (unint64_t *)&v217->__shared_owners_;
              do
                unint64_t v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }

            *(void *)&v225[0].AudioObjectPropertySelector mSelector = v246;
            sub_7A668((void ***)v225);
          }

          std::__fs::filesystem::path v128 = (std::__shared_weak_count *)*((void *)&v221 + 1);
          if (*((void *)&v221 + 1))
          {
            unint64_t v129 = (unint64_t *)(*((void *)&v221 + 1) + 8LL);
            do
              unint64_t v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }

          *(void *)&v246[0].AudioObjectPropertySelector mSelector = buf;
          sub_7A668((void ***)v246);
          operator delete(v90);
          uint64_t v131 = (std::__shared_weak_count *)*((void *)&v222 + 1);
          if (*((void *)&v222 + 1))
          {
            unint64_t v132 = (unint64_t *)(*((void *)&v222 + 1) + 8LL);
            do
              unint64_t v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }

          if (*(void *)(a1 + 640))
          {
            v195 = (os_log_t *)sub_138E8(13);
            v196 = *v195;
            if (*v195 && os_log_type_enabled(*v195, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 696;
              _os_log_impl( &dword_0,  v196,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            v197 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v197, "Precondition failure.");
          }

          AudioObjectID v134 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 120LL))(a1);
          strcpy((char *)__p, "kcajptuo");
          BYTE1(__p[0].mElement) = 0;
          HIWORD(__p[0].mElement) = 0;
          BOOL v135 = AudioObjectHasProperty(v134, __p) != 0;
          *(_DWORD *)AudioObjectPropertyAddress buf = 1885892727;
          *(void *)&buf[8] = 0LL;
          *(void *)&buf[16] = 0LL;
          uint8_t buf[24] = v135;
          AudioObjectID v136 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 120LL))(a1);
          strcpy((char *)v246, "kcajtpni");
          BYTE1(v246[0].mElement) = 0;
          HIWORD(v246[0].mElement) = 0;
          BOOL v137 = AudioObjectHasProperty(v136, v246) != 0;
          *(_DWORD *)&_BYTE buf[32] = 1886222185;
          v237 = 0LL;
          uint64_t v236 = 0LL;
          LOBYTE(v238) = v137;
          AudioObjectID v138 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 120LL))(a1);
          *(void *)&__int128 inAddress = 0x696E70746A61636BLL;
          DWORD2(inAddress) = 0;
          if (AudioObjectHasProperty(v138, (const AudioObjectPropertyAddress *)&inAddress)) {
            BOOL v139 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1;
          }
          else {
            BOOL v139 = 0;
          }
          LODWORD(v239) = 1886680169;
          CFTypeRef v241 = 0LL;
          uint64_t v240 = 0LL;
          BOOL v242 = v139;
          AudioObjectID v150 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 120LL))(a1);
          strcpy((char *)v225, "kcajptuo");
          BYTE1(v225[0].mElement) = 0;
          HIWORD(v225[0].mElement) = 0;
          if (AudioObjectHasProperty(v150, v225)) {
            BOOL v151 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1;
          }
          else {
            BOOL v151 = 0;
          }
          uint64_t v152 = 0LL;
          int v243 = 1886680175;
          v244[1] = 0LL;
          v244[0] = 0LL;
          BOOL v245 = v151;
          __int16 v153 = buf;
          do
          {
            int v154 = *(_DWORD *)v153;
            std::condition_variable v155 = operator new(4uLL);
            _DWORD *v155 = v154;
            *(void *)&__p[0].AudioObjectPropertySelector mSelector = v155;
            *(void *)&__p[0].AudioObjectPropertyElement mElement = v155 + 1;
            *(void *)&__p[1].AudioObjectPropertyElement mScope = v155 + 1;
            strcpy(v227, "cwdv");
            v227[8] = 0;
            int v230 = 3;
            v232[0] = 0LL;
            v232[1] = 0LL;
            v231 = v232;
            int v233 = 44739242;
            CFTypeRef cf = 0LL;
            sub_3710DC((uint64_t *)v246, a1, (uint64_t)__p);
            if (cf) {
              CFRelease(cf);
            }
            sub_32C8C(v232[0]);
            if (*(void *)&__p[0].mSelector)
            {
              *(void *)&__p[0].AudioObjectPropertyElement mElement = *(void *)&__p[0].mSelector;
              operator delete(*(void **)&__p[0].mSelector);
            }

            uint64_t v156 = v153[24];
            if (*(void *)&v246[1].mScope != v156)
            {
              v157 = (os_log_t *)sub_138E8(13);
              v158 = *v157;
              if (*v157)
              {
                if (os_log_type_enabled(*v157, OS_LOG_TYPE_ERROR))
                {
                  AudioObjectPropertyElement mScope = v246[1].mScope;
                  sub_2CA1C(&inAddress, *(unsigned int *)v153);
                  p___int128 inAddress = &inAddress;
                  if (v224 < 0) {
                    p___int128 inAddress = (__int128 *)inAddress;
                  }
                  __p[0].AudioObjectPropertySelector mSelector = 136316162;
                  *(void *)&__p[0].AudioObjectPropertyElement mScope = "Device_MikeyBus_Aspen.cpp";
                  LOWORD(__p[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&__p[1].mSelector + 2) = 731;
                  HIWORD(__p[1].mScope) = 1024;
                  __p[1].AudioObjectPropertyElement mElement = mScope;
                  *(_WORD *)v227 = 2080;
                  *(void *)&v227[2] = p_inAddress;
                  __int16 v228 = 1024;
                  int v229 = v156;
                  _os_log_impl( &dword_0,  v158,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Found %u ports of type '%s' (expected %u)",  (uint8_t *)__p,  0x28u);
                  if (SHIBYTE(v224) < 0) {
                    operator delete((void *)inAddress);
                  }
                }
              }
            }

            if ((_DWORD)v156 && *(void *)&v246[1].mScope == 1LL)
            {
              uint64_t v162 = *(void *)(*(void *)&v246[0].mElement + 16LL);
              uint64_t v161 = *(void *)(*(void *)&v246[0].mElement + 24LL);
              if (v161)
              {
                v163 = (unint64_t *)(v161 + 16);
                do
                  unint64_t v164 = __ldxr(v163);
                while (__stxr(v164 + 1, v163));
              }

              __int128 v165 = (std::__shared_weak_count *)*((void *)v153 + 2);
              *((void *)v153 + 1) = v162;
              *((void *)v153 + 2) = v161;
              if (v165) {
                std::__shared_weak_count::__release_weak(v165);
              }
            }

            sub_85B80((uint64_t *)v246);
            ++v152;
            __int16 v153 = &buf[32 * v152];
          }

          while (v152 != 4);
          __int128 v166 = operator new(0x120uLL);
          sub_20AC18((uint64_t)v166, &buf[8], &v236, &v240, v244, a1);
          uint64_t v167 = *(void *)(a1 + 640);
          *(void *)(a1 + 640) = v166;
          if (v167) {
            (*(void (**)(uint64_t))(*(void *)v167 + 8LL))(v167);
          }
          for (uint64_t i = 112LL; i != -16; i -= 32LL)
          {
            v169 = *(std::__shared_weak_count **)&buf[i];
            if (v169) {
              std::__shared_weak_count::__release_weak(v169);
            }
          }
        }

        break;
      default:
        uint64_t v191 = (os_log_t *)sub_138E8(13);
        v192 = *v191;
        if (*v191 && os_log_type_enabled(*v191, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v202);
          v193 = (__p[1].mElement & 0x80000000) == 0 ? __p : *(AudioObjectPropertyAddress **)&__p[0].mSelector;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 570;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v193;
          _os_log_impl( &dword_0,  v192,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unknown Stream Terminal Type :%s",  buf,  0x1Cu);
          if (SHIBYTE(__p[1].mElement) < 0) {
            operator delete(*(void **)&__p[0].mSelector);
          }
        }

        __int16 v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v194, "Unknown Stream Terminal Type :%s");
    }
  }

  uint64_t v170 = operator new(4uLL);
  *uint64_t v170 = 1885894516;
  *(void *)AudioObjectPropertyAddress buf = v170;
  *(void *)&buf[8] = v170 + 1;
  *(void *)&buf[16] = v170 + 1;
  strcpy(&buf[24], "cwdv");
  _BYTE buf[32] = 0;
  LODWORD(v236) = 3;
  uint64_t v239 = 0LL;
  v238 = 0LL;
  v237 = &v238;
  LODWORD(vsub_19DFC(v65 - 240) = 44739242;
  CFTypeRef v241 = 0LL;
  sub_3710DC((uint64_t *)__p, a1, (uint64_t)buf);
  if (v241) {
    CFRelease(v241);
  }
  sub_32C8C(v238);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (*(void *)&__p[1].mScope == 1LL)
  {
    uint64_t v172 = *(void *)(*(void *)&__p[0].mElement + 16LL);
    __int128 v171 = *(std::__shared_weak_count **)(*(void *)&__p[0].mElement + 24LL);
    if (v171)
    {
      p_shared_weak_owners = (unint64_t *)&v171->__shared_weak_owners_;
      do
        unint64_t v174 = __ldxr(p_shared_weak_owners);
      while (__stxr(v174 + 1, p_shared_weak_owners));
    }
  }

  else
  {
    uint64_t v172 = 0LL;
    __int128 v171 = 0LL;
  }

  __int128 v175 = operator new(4uLL);
  *__int128 v175 = 1885892727;
  *(void *)AudioObjectPropertyAddress buf = v175;
  *(void *)&buf[8] = v175 + 1;
  *(void *)&buf[16] = v175 + 1;
  strcpy(&buf[24], "cwdv");
  _BYTE buf[32] = 0;
  LODWORD(v236) = 3;
  uint64_t v239 = 0LL;
  v238 = 0LL;
  v237 = &v238;
  LODWORD(vsub_19DFC(v65 - 240) = 44739242;
  CFTypeRef v241 = 0LL;
  sub_3710DC((uint64_t *)v246, a1, (uint64_t)buf);
  if (v241) {
    CFRelease(v241);
  }
  sub_32C8C(v238);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (*(void *)&v246[1].mScope != 1LL)
  {
    uint64_t v176 = 0LL;
    uint64_t v177 = 0LL;
    if (!v171) {
      goto LABEL_276;
    }
LABEL_259:
    __int128 v180 = std::__shared_weak_count::lock(v171);
    *(void *)&buf[8] = v180;
    if (!v180) {
      goto LABEL_276;
    }
    *(void *)AudioObjectPropertyAddress buf = v172;
    if (v172)
    {
      if (v177)
      {
        uint64_t v181 = std::__shared_weak_count::lock(v177);
        *((void *)&inAddress + 1) = v181;
        if (v181)
        {
          v182 = v181;
          *(void *)&__int128 inAddress = v176;
          if (v176) {
            sub_204854(v172, v176);
          }
          uint64_t v183 = (unint64_t *)&v182->__shared_owners_;
          do
            unint64_t v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
      }

      __int128 v185 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_276;
      }
    }

    else
    {
      __int128 v185 = v180;
    }

    uint64_t v186 = (unint64_t *)&v185->__shared_owners_;
    do
      unint64_t v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }

    goto LABEL_276;
  }

  uint64_t v176 = *(void *)(*(void *)&v246[0].mElement + 16LL);
  uint64_t v177 = *(std::__shared_weak_count **)(*(void *)&v246[0].mElement + 24LL);
  if (v177)
  {
    v178 = (unint64_t *)&v177->__shared_weak_owners_;
    do
      unint64_t v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
  }

  if (v171) {
    goto LABEL_259;
  }
LABEL_276:
  if (v177) {
    std::__shared_weak_count::__release_weak(v177);
  }
  sub_85B80((uint64_t *)v246);
  if (v171) {
    std::__shared_weak_count::__release_weak(v171);
  }
  sub_85B80((uint64_t *)__p);
}

void sub_39B408(_Unwind_Exception *a1)
{
}

BOOL sub_39B8A0(uint64_t a1)
{
  int v1 = v4;
  if (v4) {
    sub_39FD8(v3);
  }
  return v1 == 0;
}

void sub_39B8EC(uint64_t a1, uint64_t a2)
{
  *(void *)&v49.AudioObjectPropertySelector mSelector = 0x6F757470766F6C64LL;
  v49.AudioObjectPropertyElement mElement = 0;
  sub_1BB60((std::mutex *)a1);
  if (AudioObjectHasProperty(*(_DWORD *)(a1 + 268), &v49))
  {
    uint64_t v4 = sub_138E8(17);
    uint64_t v5 = sub_138E8(32);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)&v49.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *((int *)&v49.mSelector + v7);
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = sub_138E8(38);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)&v49.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v21 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v22 = *((int *)&v49.mSelector + v20);
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_19;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v4 = v18;
    }
LABEL_19:
    __int16 v24 = *(os_log_s **)v4;
    if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v49.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&v49.AudioObjectPropertyElement mScope = "Device_MikeyBus_Aspen.cpp";
      __int16 v50 = 1024;
      int v51 = 395;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Output Volume Control", (uint8_t *)&v49, 0x12u);
    }

    BOOL v26 = (_DWORD)a2 == 1885892727 && HIDWORD(a2) != 1752709424;
    __int128 v27 = operator new(0x1E0uLL);
    unint64_t v28 = v27;
    if (v26) {
      sub_1C8600((uint64_t)v27, a1, 0, 74, -76.0, 2.0);
    }
    else {
      sub_1C88B8((uint64_t)v27, a1, 1869968496LL, 0, 0, 74, 0LL);
    }
    UInt32 v29 = v28;
    uint64_t v30 = (uint64_t)v28;
  }

  else
  {
    uint64_t v11 = sub_138E8(17);
    uint64_t v12 = sub_138E8(32);
    char v13 = 0;
    uint64_t v14 = 0LL;
    if (HIDWORD(a2) == 1818845552)
    {
      *(void *)&v49.AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v15 = *(void *)(v11 + 8);
      while (1)
      {
        uint64_t v16 = *((int *)&v49.mSelector + v14);
        char v17 = v13;
        if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
          break;
        }
        char v13 = 1;
        uint64_t v14 = 1LL;
        if ((v17 & 1) != 0) {
          goto LABEL_38;
        }
      }

      if ((v15 & v16) == 0) {
        uint64_t v11 = v12;
      }
LABEL_38:
      uint64_t v34 = sub_138E8(38);
      char v35 = 0;
      uint64_t v36 = 0LL;
      *(void *)&v49.AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v37 = *(void *)(v11 + 8);
      while (1)
      {
        uint64_t v38 = *((int *)&v49.mSelector + v36);
        char v39 = v35;
        if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
          break;
        }
        char v35 = 1;
        uint64_t v36 = 1LL;
        if ((v39 & 1) != 0) {
          goto LABEL_50;
        }
      }

      if ((v37 & v38) == 0) {
        uint64_t v11 = v34;
      }
LABEL_50:
      uint64_t v46 = *(os_log_s **)v11;
      if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        v49.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&v49.AudioObjectPropertyElement mScope = "Device_MikeyBus_Aspen.cpp";
        __int16 v50 = 1024;
        int v51 = 416;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating Output Volume Control for IAP device",  (uint8_t *)&v49,  0x12u);
      }

      unint64_t v28 = operator new(0x1E0uLL);
      sub_1C88B8((uint64_t)v28, a1, 1869968496LL, 1u, 0, 2, 0LL);
      sub_1D5AE0((void *)a1, (uint64_t)v28);
      UInt32 v29 = operator new(0x50uLL);
      sub_EC558((uint64_t)v29);
      uint64_t v30 = (uint64_t)v29;
    }

    else
    {
      *(void *)&v49.AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v31 = *(void *)(v11 + 8);
      while (1)
      {
        uint64_t v32 = *((int *)&v49.mSelector + v14);
        char v33 = v13;
        if (((v31 & v32) != 0) != ((*(void *)(v12 + 8) & v32) != 0)) {
          break;
        }
        char v13 = 1;
        uint64_t v14 = 1LL;
        if ((v33 & 1) != 0) {
          goto LABEL_44;
        }
      }

      if ((v31 & v32) == 0) {
        uint64_t v11 = v12;
      }
LABEL_44:
      uint64_t v40 = sub_138E8(38);
      char v41 = 0;
      uint64_t v42 = 0LL;
      *(void *)&v49.AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v43 = *(void *)(v11 + 8);
      while (1)
      {
        uint64_t v44 = *((int *)&v49.mSelector + v42);
        char v45 = v41;
        if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
          break;
        }
        char v41 = 1;
        uint64_t v42 = 1LL;
        if ((v45 & 1) != 0) {
          goto LABEL_56;
        }
      }

      if ((v43 & v44) == 0) {
        uint64_t v11 = v40;
      }
LABEL_56:
      char v47 = *(os_log_s **)v11;
      if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        v49.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&v49.AudioObjectPropertyElement mScope = "Device_MikeyBus_Aspen.cpp";
        __int16 v50 = 1024;
        int v51 = 427;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating NULL Output Volume Control",  (uint8_t *)&v49,  0x12u);
      }

      __int16 v48 = operator new(0x50uLL);
      sub_EC558((uint64_t)v48);
      sub_1D5AE0((void *)a1, (uint64_t)v48);
      UInt32 v29 = operator new(0x68uLL);
      sub_EC5B8((uint64_t)v29, 0);
      uint64_t v30 = (uint64_t)v48;
      unint64_t v28 = v29;
    }
  }

  sub_1D5AE0((void *)a1, (uint64_t)v29);
  sub_1D55D4((uint64_t *)a1, 1u, a2, v30);
  sub_1D580C(a1, 1u, a2, (uint64_t)v28);
}

void sub_39BE24(_Unwind_Exception *a1)
{
}

void sub_39BE5C(int a1, os_unfair_lock_s *a2)
{
  if (!a2)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      char v6 = "Device_MikeyBus_Aspen.cpp";
      __int16 v7 = 1024;
      int v8 = 672;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_39BF74(a2, a1);
}

void sub_39BF58(_Unwind_Exception *exception_object)
{
}

void sub_39BF74(os_unfair_lock_s *a1, int a2)
{
  if (a2 == 1819176821)
  {
    uint64_t v3 = operator new(4uLL);
    *(void *)AudioObjectPropertyAddress __p = v3;
    _DWORD *v3 = 1886154613;
    *(void *)&__p[8] = v3 + 1;
    *(void *)&__p[16] = v3 + 1;
    strcpy(&__p[24], "cwdv");
    BYTE2(v30) = 0;
    LODWORD(v32) = 3;
    v34[0] = 0LL;
    v34[1] = 0LL;
    char v33 = v34;
    int v35 = 44739242;
    CFTypeRef cf = 0LL;
    sub_3710DC((uint64_t *)v24, (uint64_t)a1, (uint64_t)__p);
    sub_EDD50(&v26, v24);
    sub_85B80((uint64_t *)v24);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v34[0]);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }

    if (v28 != 1)
    {
      uint64_t v14 = (os_log_t *)sub_138E8(13);
      uint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = v28;
        sub_2CA1C(v24, 1886154613LL);
        int v17 = v25;
        uint64_t v18 = (void **)v24[0];
        sub_23FE8((uint64_t)v22, a1 + 2);
        char v19 = v24;
        if (v17 < 0) {
          char v19 = v18;
        }
        if (v23 >= 0) {
          uint64_t v20 = v22;
        }
        else {
          uint64_t v20 = (void **)v22[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress __p = 136316162;
        *(void *)&__p[4] = "Device_MikeyBus_Aspen.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 649;
        *(_WORD *)&_BYTE __p[18] = 2048;
        *(void *)&__p[20] = v16;
        *(_WORD *)&__p[28] = 2080;
        uint64_t v30 = v19;
        __int16 v31 = 2080;
        uint64_t v32 = v20;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Found %lu ports of type '%s' in device %s (looking for exactly 1)",  __p,  0x30u);
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        if (v25 < 0) {
          operator delete(v24[0]);
        }
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found %lu ports of type '%s' in device %s (looking for exactly 1)");
    }

    int v5 = *(void **)(v27 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(v27 + 24);
    *(void *)AudioObjectPropertyAddress __p = v5;
    *(void *)&__p[8] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    int v8 = (*(uint64_t (**)(void *))(*(void *)v5 + 152LL))(v5);
    sub_17382C((uint64_t)v5);
    if (v8 != (*(unsigned int (**)(void *))(*(void *)v5 + 152LL))(v5))
    {
      uint64_t v9 = sub_546E0();
      v24[0] = v5;
      v24[1] = v4;
      if (v4)
      {
        p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
        do
          unint64_t v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }

      sub_1013F4(v9, (uint64_t *)v24);
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    if (v4)
    {
      uint64_t v12 = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    sub_1BB88(&v26);
  }

void sub_39C280( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v20 < 0) {
    operator delete(v19);
  }
  sub_1BB88(&a16);
  _Unwind_Resume(a1);
}

void *sub_39C314(void *result, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      unint64_t v7 = "Device_MikeyBus_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 681;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v6,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((_DWORD)result == 1819176821)
  {
    uint64_t v2 = (void *)(a2 + 496);
    uint64_t result = (void *)sub_67420((void *)(a2 + 496), (uint64_t)&qword_4A9D30);
    if ((_DWORD)result) {
      return sub_67564(v2, (unsigned int *)&qword_4A9D30);
    }
  }

  return result;
}

void sub_39C460(_Unwind_Exception *exception_object)
{
}

uint64_t sub_39C47C(uint64_t a1)
{
  *(void *)a1 = off_485888;
  uint64_t v2 = *(void *)(a1 + 640);
  *(void *)(a1 + 640) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_67FE8(a1 + 584);
  *(void *)(a1 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 520));
  return sub_36F1E0(a1);
}

uint64_t sub_39C4E0(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  uint64_t v5 = sub_36E3FC(a1, a2, a3, a3, 0LL);
  *(void *)uint64_t v5 = off_485888;
  *(_BYTE *)(v5 + 492) = 0;
  sub_189C20(v5 + 496);
  *(void *)(a1 + 640) = 0LL;
  uint64_t v6 = sub_138E8(17);
  uint64_t v7 = sub_138E8(32);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  unint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    sub_48E98(__p, a3);
    uint64_t v14 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
    __int16 v19 = 1024;
    int v20 = 95;
    __int16 v21 = 2080;
    uint64_t v22 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Constructing MikeyBus device with UID %s.",  buf,  0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1CBE08()) {
    sub_371820(a1, 1, 0x6F757470u, 0);
  }
  return a1;
}

void sub_39C694(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 640);
  *(void *)(v1 + 640) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_67FE8(v1 + 584);
  *(void *)(v1 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 520));
  sub_36F1E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_39C704(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  nullsub_9(*(void *)(a1 + 8));
  sub_7A768(v2);
  return a1;
}

void sub_39C738(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  nullsub_9(a1[1]);
  sub_7A768(v2);
  operator delete(a1);
}

uint64_t sub_39C76C(uint64_t a1)
{
  return nullsub_9(*(void *)(a1 + 8));
}

uint64_t sub_39C774(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16LL))( caulk::alloc::realtime_safe_resource,  40LL,  8LL);
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)uint64_t v2 = &off_4864F0;
  *(void *)(v2 + 8) = 0LL;
  return caulk::concurrent::messenger::enqueue( (caulk::concurrent::messenger *)&unk_4A9D88,  (caulk::concurrent::message *)v2);
}

void sub_39C7D8(caulk::concurrent::message *a1)
{
}

uint64_t sub_39C7EC(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                           + 24LL))( caulk::alloc::realtime_safe_resource,  a1,  40LL,  8LL);
}

void sub_39C844(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_486518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_39C854(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_486518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_39C874(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  nullsub_9(*(void *)(a1 + 32));
  return sub_7A768(v1);
}

uint64_t **sub_39C8A0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48C230, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48C248, (unsigned int *)v1, 8LL);
  qword_48C270 = 0LL;
  qword_48C268 = 0LL;
  qword_48C260 = (uint64_t)&qword_48C268;
  return result;
}

uint64_t sub_39C96C()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48C278, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  return sub_7A22C((uint64_t)&unk_48C290, (unsigned int *)v1, 1LL);
}

void *sub_39CA1C()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48C2A8, (unsigned int *)v18, 8LL);
  *(_DWORD *)uint64_t v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_48C2C0, (unsigned int *)v18, 1LL);
  qword_48C2E8 = 0LL;
  qword_48C2E0 = 0LL;
  qword_48C2D8 = (uint64_t)&qword_48C2E0;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_48C2F0 = 3;
  sub_7A22C((uint64_t)&unk_48C2F8, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_48C310 = 3;
  sub_7A22C((uint64_t)&unk_48C318, (unsigned int *)v18, 9LL);
  *(_OWORD *)uint64_t v18 = xmmword_403140;
  dword_48C330 = 3;
  sub_7A22C((uint64_t)&unk_48C338, (unsigned int *)v18, 4LL);
  *(_OWORD *)uint64_t v18 = xmmword_403150;
  dword_48C350 = 3;
  sub_7A22C((uint64_t)&unk_48C358, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_48C370 = 3;
  sub_7A22C((uint64_t)&unk_48C378, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_48C390 = 3;
  sub_7A22C((uint64_t)&unk_48C398, (unsigned int *)v18, 7LL);
  *(_OWORD *)uint64_t v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_48C3B0 = 2;
  sub_7A22C((uint64_t)&unk_48C3B8, (unsigned int *)v18, 8LL);
  *(_OWORD *)uint64_t v18 = xmmword_403160;
  dword_48C3D0 = 2;
  sub_7A22C((uint64_t)&unk_48C3D8, (unsigned int *)v18, 4LL);
  *(_DWORD *)uint64_t v18 = 1918990112;
  dword_48C3F0 = 2;
  sub_7A22C((uint64_t)&unk_48C3F8, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1836281204;
  dword_48C410 = 2;
  sub_7A22C((uint64_t)&unk_48C418, (unsigned int *)v18, 1LL);
  *(void *)uint64_t v18 = 0x7670766976706763LL;
  dword_48C430 = 2;
  sub_7A22C((uint64_t)&unk_48C438, (unsigned int *)v18, 2LL);
  *(_DWORD *)uint64_t v18 = 1987080813;
  dword_48C450 = 2;
  sub_7A22C((uint64_t)&unk_48C458, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1987208039;
  dword_48C470 = 2;
  sub_7A22C((uint64_t)&unk_48C478, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1919776355;
  dword_48C490 = 2;
  sub_7A22C((uint64_t)&unk_48C498, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_48C4B0 = 2;
  sub_7A22C((uint64_t)&unk_48C4B8, (unsigned int *)v18, 5LL);
  *(_DWORD *)uint64_t v18 = 1768778864;
  dword_48C4D0 = 3;
  sub_7A22C((uint64_t)&unk_48C4D8, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1768776806;
  dword_48C4F0 = 2;
  sub_7A22C((uint64_t)&unk_48C4F8, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_48C510 = 2;
  sub_7A22C((uint64_t)&unk_48C518, (unsigned int *)v18, 3LL);
  *(_DWORD *)uint64_t v18 = 1751212899;
  dword_48C530 = 2;
  sub_7A22C((uint64_t)&unk_48C538, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1751212899;
  dword_48C550 = 3;
  sub_7A22C((uint64_t)&unk_48C558, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1986556788;
  dword_48C570 = 2;
  sub_7A22C((uint64_t)&unk_48C578, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1986556788;
  dword_48C590 = 3;
  sub_7A22C((uint64_t)&unk_48C598, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_48C5B0 = 2;
  sub_7A22C((uint64_t)&unk_48C5B8, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_48C5D0 = 3;
  sub_7A22C((uint64_t)&unk_48C5D8, (unsigned int *)v18, 5LL);
  *(_DWORD *)uint64_t v18 = 1986098036;
  dword_48C5F0 = 2;
  sub_7A22C((uint64_t)&unk_48C5F8, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1986098036;
  dword_48C610 = 3;
  sub_7A22C((uint64_t)&unk_48C618, (unsigned int *)v18, 1LL);
  *(void *)uint64_t v18 = 0x6563692065637620LL;
  dword_48C630 = 2;
  sub_7A22C((uint64_t)&unk_48C638, (unsigned int *)v18, 2LL);
  *(void *)uint64_t v18 = 0x6563692065637620LL;
  dword_48C650 = 3;
  sub_7A22C((uint64_t)&unk_48C658, (unsigned int *)v18, 2LL);
  *(_DWORD *)uint64_t v18 = 0;
  dword_48C670 = 2;
  sub_81EF8(qword_48C678, (int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 0;
  dword_48C690 = 3;
  sub_81EF8(qword_48C698, (int *)v18, 1LL);
  *(void *)uint64_t v18 = &off_46D498;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_48C6B0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    uint64_t v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)uint64_t v18 = &off_46D4E0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_48C6F8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  uint64_t v4 = operator new(0x10uLL);
  void *v4 = &unk_48C6B0;
  v4[1] = &unk_48C6F8;
  qword_48C740 = (uint64_t)off_483190;
  qword_48C750 = 0LL;
  unk_48C758 = 0LL;
  qword_48C748 = 0LL;
  sub_8201C(&qword_48C748, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)uint64_t v18 = &off_46D528;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_48C760, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)uint64_t v18 = &off_46D570;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_48C7A8, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)uint64_t v18 = &off_46D5B8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_48C7F0, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)uint64_t v18 = &off_46D600;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_48C838, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)uint64_t v18 = &off_46D648;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_48C880, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_48C8C8 = (uint64_t)off_4831C0;
  dword_48C8D0 = 6;
  qword_48C8D8 = (uint64_t)off_4831F0;
  unk_48C8E0 = &qword_48C8C8;
  return result;
}

void sub_39D38C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t sub_39D428()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48C8E8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48C900, (unsigned int *)v1, 1LL);
  qword_48C928 = 0LL;
  qword_48C920 = 0LL;
  qword_48C918 = (uint64_t)&qword_48C920;
  return result;
}

uint64_t **sub_39D4F4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48C930, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48C948, (unsigned int *)v1, 8LL);
  qword_48C970 = 0LL;
  qword_48C968 = 0LL;
  qword_48C960 = (uint64_t)&qword_48C968;
  return result;
}

uint64_t **sub_39D5C0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48C978, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48C990, (unsigned int *)v1, 8LL);
  qword_48C9B8 = 0LL;
  qword_48C9B0 = 0LL;
  qword_48C9A8 = (uint64_t)&qword_48C9B0;
  return result;
}

uint64_t **sub_39D68C()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48C9C0, (unsigned int *)v1, 8LL);
}

uint64_t sub_39D71C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CA60, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CA78, (unsigned int *)v1, 8LL);
  qword_48CA98 = 0LL;
  qword_48CAA0 = 0LL;
  qword_48CA90 = (uint64_t)&qword_48CA98;
  qword_48CAA8 = 0x7063776970616374LL;
  dword_48CAB0 = 0;
  byte_48CAB4 = 0;
  if (qword_48E768 != -1) {
    dispatch_once(&qword_48E768, &stru_471098);
  }
  if (byte_48E760)
  {
    *(void *)&v1[0] = 0x767A7A7A76646566LL;
    uint64_t result = sub_7A22C((uint64_t)&unk_48CAB8, (unsigned int *)v1, 2LL);
  }

  else
  {
    LODWORD(v1[0]) = 1987738234;
    uint64_t result = sub_7A22C((uint64_t)&unk_48CAB8, (unsigned int *)v1, 1LL);
  }

  word_48CAD0 = word_48CAD0 & 0xF800 | 0x434;
  return result;
}

uint64_t **sub_39D894()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CAD8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48CAF0, (unsigned int *)v1, 8LL);
  qword_48CB18 = 0LL;
  qword_48CB10 = 0LL;
  qword_48CB08 = (uint64_t)&qword_48CB10;
  return result;
}

void sub_39D960()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CB20, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CB38, (unsigned int *)v1, 8LL);
  qword_48CB60 = 0LL;
  qword_48CB58 = 0LL;
  qword_48CB50 = (uint64_t)&qword_48CB58;
  objc_autoreleasePoolPop(v0);
}

uint64_t **sub_39DA44()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CBD0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48CBE8, (unsigned int *)v1, 8LL);
  qword_48CC10 = 0LL;
  qword_48CC08 = 0LL;
  qword_48CC00 = (uint64_t)&qword_48CC08;
  return result;
}

uint64_t **sub_39DB10()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CC18, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48CC30, (unsigned int *)v1, 8LL);
  qword_48CC58 = 0LL;
  qword_48CC50 = 0LL;
  qword_48CC48 = (uint64_t)&qword_48CC50;
  return result;
}

uint64_t sub_39DBDC()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CC80, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48CC98, (unsigned int *)v1, 1LL);
  qword_48CCC0 = 0LL;
  qword_48CCB8 = 0LL;
  qword_48CCB0 = (uint64_t)&qword_48CCB8;
  return result;
}

uint64_t sub_39DCA8()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CCC8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48CCE0, (unsigned int *)v1, 1LL);
  qword_48CD08 = 0LL;
  qword_48CD00 = 0LL;
  qword_48CCF8 = (uint64_t)&qword_48CD00;
  return result;
}

void sub_39DD74()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CD10, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CD28, (unsigned int *)v1, 1LL);
  qword_48CD50 = 0LL;
  qword_48CD48 = 0LL;
  qword_48CD40 = (uint64_t)&qword_48CD48;
  objc_autoreleasePoolPop(v0);
}

uint64_t **sub_39DE58()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CD68, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48CD80, (unsigned int *)v1, 8LL);
}

void *sub_39DF08()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CDC0, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CDD8, (unsigned int *)v2, 8LL);
  qword_48CE00 = 0LL;
  qword_48CDF8 = 0LL;
  qword_48CDF0 = (uint64_t)&qword_48CDF8;
  else {
    int v0 = 3;
  }
  dword_48CE08 = v0;
  sub_157A88((uint64_t)&unk_48CE10, 0, -96.0, 0.0);
  return sub_7D084(&qword_48CE40, "stereo_input_orientation");
}

uint64_t **sub_39E028()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48CE58, (unsigned int *)v1, 8LL);
}

uint64_t *sub_39E0B8()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CE70, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CE88, (unsigned int *)v1, 1LL);
  qword_48CEB0 = 0LL;
  qword_48CEA8 = 0LL;
  qword_48CEA0 = (uint64_t)&qword_48CEA8;
  qmemcpy(&qword_48CEB8, "oiupiwcpnupe", 12);
  byte_48CEC4 = 1;
  sub_86550((uint64_t *)&algn_48CEC5[3], (uint64_t)&unk_48CE88);
  word_48CEE0 = word_48CEE0 & 0xF800 | 0x61E;
  qmemcpy(&qword_48CEE8, "iiupiwcpnupe", 12);
  byte_48CEF4 = 1;
  uint64_t result = sub_86550(qword_48CEF8, (uint64_t)&unk_48CE88);
  word_48CF10 = word_48CF10 & 0xF800 | 0x617;
  return result;
}

uint64_t **sub_39E224()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CF18, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48CF30, (unsigned int *)v1, 8LL);
  qword_48CF58 = 0LL;
  qword_48CF50 = 0LL;
  qword_48CF48 = (uint64_t)&qword_48CF50;
  return result;
}

uint64_t sub_39E2F0()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48CF60, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48CF78, (unsigned int *)v2, 8LL);
  qword_48CFA0 = 0LL;
  qword_48CF98 = 0LL;
  qword_48CF90 = (uint64_t)&qword_48CF98;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48CFA8 = v1;
  return result;
}

uint64_t sub_39E3E0()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D070, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48D088, (unsigned int *)v1, 1LL);
  qword_48D0B0 = 0LL;
  qword_48D0A8 = 0LL;
  qword_48D0A0 = (uint64_t)&qword_48D0A8;
  return result;
}

uint64_t sub_39E4AC()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D0B8, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D0D0, (unsigned int *)v2, 8LL);
  qword_48D0F8 = 0LL;
  qword_48D0F0 = 0LL;
  qword_48D0E8 = (uint64_t)&qword_48D0F0;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48D100 = v1;
  return result;
}

uint64_t sub_39E59C()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D108, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48D120, (unsigned int *)v1, 1LL);
  qword_48D148 = 0LL;
  qword_48D140 = 0LL;
  qword_48D138 = (uint64_t)&qword_48D140;
  return result;
}

uint64_t *sub_39E668()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D150, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D168, (unsigned int *)v1, 1LL);
  qword_48D190 = 0LL;
  qword_48D188 = 0LL;
  qword_48D180 = (uint64_t)&qword_48D188;
  qmemcpy(&qword_48D198, "obtpiwcpnupe", 12);
  byte_48D1A4 = 1;
  sub_86550((uint64_t *)&algn_48D1A5[3], (uint64_t)&unk_48D168);
  word_48D1C0 = word_48D1C0 & 0xF800 | 0x616;
  qmemcpy(&qword_48D1C8, "ibtpiwcpnupe", 12);
  byte_48D1D4 = 1;
  sub_86550(qword_48D1D8, (uint64_t)&unk_48D168);
  word_48D1F0 = word_48D1F0 & 0xF800 | 0x617;
  qmemcpy(&qword_48D1F8, "tbtpiwcpnupe", 12);
  byte_48D204 = 1;
  uint64_t result = sub_86550((uint64_t *)&algn_48D205[3], (uint64_t)&unk_48D168);
  word_48D220 = word_48D220 & 0xF800 | 0x607;
  return result;
}

uint64_t sub_39E820()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D228, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D240, (unsigned int *)v1, 1LL);
  qword_48D260 = 0LL;
  qword_48D268 = 0LL;
  qword_48D258 = (uint64_t)&qword_48D260;
  qword_48D270 = 0x7063776970616976LL;
  dword_48D278 = 0;
  byte_48D27C = 0;
  if (qword_48E768 != -1) {
    dispatch_once(&qword_48E768, &stru_471098);
  }
  if (byte_48E760)
  {
    *(void *)&v1[0] = 0x767A7A7A76646566LL;
    uint64_t result = sub_7A22C((uint64_t)&unk_48D280, (unsigned int *)v1, 2LL);
  }

  else
  {
    LODWORD(v1[0]) = 1987738234;
    uint64_t result = sub_7A22C((uint64_t)&unk_48D280, (unsigned int *)v1, 1LL);
  }

  word_48D298 = word_48D298 & 0xF800 | 0x435;
  return result;
}

uint64_t **sub_39E998()
{
  *(_DWORD *)int v1 = 1986295651;
  sub_7A22C((uint64_t)&unk_48D2A0, (unsigned int *)v1, 1LL);
  *(_OWORD *)&v1[128] = off_486408;
  *(_OWORD *)&v1[144] = *(_OWORD *)"lovc";
  *(_OWORD *)&v1[160] = xmmword_486428;
  *(_OWORD *)&v1[176] = *(_OWORD *)&off_486438;
  *(_OWORD *)&v1[64] = xmmword_4863C8;
  *(_OWORD *)&v1[80] = *(_OWORD *)&off_4863D8;
  *(_OWORD *)&v1[96] = *(_OWORD *)"lovl";
  *(_OWORD *)&v1[112] = unk_4863F8;
  *(_OWORD *)int v1 = *(_OWORD *)"ulov";
  *(_OWORD *)&v1[16] = unk_486398;
  *(_OWORD *)&_BYTE v1[32] = off_4863A8;
  *(_OWORD *)&v1[48] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D2B8, (unsigned int *)v1, 8LL);
  xmmword_48D2D0 = 0u;
  unk_48D2E0 = 0u;
  dword_48D2F0 = 1065353216;
  qword_48D2F8 = (uint64_t)&qword_48D2F8;
  unk_48D300 = &qword_48D2F8;
  qword_48D308 = 0LL;
  memcpy(v1, "2meb", sizeof(v1));
  sub_CFE40(&qword_48D310, (unsigned int *)v1, 23LL);
  *(_OWORD *)&v1[96] = xmmword_4018C4;
  *(_OWORD *)&v1[112] = unk_4018D4;
  *(_OWORD *)&v1[128] = xmmword_4018E4;
  *(_OWORD *)&_BYTE v1[32] = xmmword_401884;
  *(_OWORD *)&v1[48] = unk_401894;
  *(_OWORD *)&v1[64] = xmmword_4018A4;
  *(_OWORD *)&v1[80] = unk_4018B4;
  *(_OWORD *)int v1 = xmmword_401864;
  *(_OWORD *)&v1[16] = unk_401874;
  return sub_CFE40(&qword_48D328, (unsigned int *)v1, 12LL);
}

uint64_t sub_39EAE8()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D340, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48D358, (unsigned int *)v1, 1LL);
  qword_48D380 = 0LL;
  qword_48D378 = 0LL;
  qword_48D370 = (uint64_t)&qword_48D378;
  return result;
}

double sub_39EBB4()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D388, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D3A0, (unsigned int *)v2, 8LL);
  qword_48D3C8 = 0LL;
  qword_48D3C0 = 0LL;
  qword_48D3B8 = (uint64_t)&qword_48D3C0;
  qword_48D3D8 = 0LL;
  unk_48D3E0 = 0LL;
  qword_48D3D0 = 0LL;
  int v0 = (char *)operator new(0x30uLL);
  qword_48D3D8 = (uint64_t)(v0 + 48);
  unk_48D3E0 = v0 + 48;
  qmemcpy(v0, "mtslgaswnepsnehsshpsdmpsfcpsafrhdmlussthsslcemps", 48);
  double result = 1.49290215e195;
  qword_48D3D0 = (uint64_t)v0;
  return result;
}

uint64_t **sub_39ECC4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D3E8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_7A2A4((uint64_t **)&unk_48D400, (unsigned int *)v1, 8LL);
  qword_48D428 = 0LL;
  qword_48D420 = 0LL;
  qword_48D418 = (uint64_t)&qword_48D420;
  return result;
}

uint64_t sub_39ED90()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D430, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48D448, (unsigned int *)v1, 1LL);
  qword_48D470 = 0LL;
  qword_48D468 = 0LL;
  qword_48D460 = (uint64_t)&qword_48D468;
  return result;
}

uint64_t sub_39EE5C()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D478, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D490, (unsigned int *)v2, 1LL);
  qword_48D4B0 = 0LL;
  qword_48D4B8 = 0LL;
  qword_48D4A8 = (uint64_t)&qword_48D4B0;
  qword_48D4C0 = 0x706362696C70696ELL;
  dword_48D4C8 = 0;
  byte_48D4CC = 0;
  *(void *)&v2[0] = 0x766D696E766F6464LL;
  sub_7A22C((uint64_t)&unk_48D4D0, (unsigned int *)v2, 2LL);
  word_48D4E8 = word_48D4E8 & 0xF800 | 0x630;
  qword_48D4F0 = 0x706362696870696ELL;
  dword_48D4F8 = 0;
  byte_48D4FC = 0;
  LODWORD(v2[0]) = 1987011684;
  sub_7A22C((uint64_t)&unk_48D500, (unsigned int *)v2, 1LL);
  word_48D518 = word_48D518 & 0xF800 | 0x630;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48D520 = v1;
  return result;
}

uint64_t sub_39EFF0()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D528, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48D540, (unsigned int *)v1, 1LL);
  qword_48D568 = 0LL;
  qword_48D560 = 0LL;
  qword_48D558 = (uint64_t)&qword_48D560;
  return result;
}

uint64_t sub_39F0BC()
{
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D570, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48D588, (unsigned int *)v1, 1LL);
  qword_48D5B0 = 0LL;
  qword_48D5A8 = 0LL;
  qword_48D5A0 = (uint64_t)&qword_48D5A8;
  return result;
}

uint64_t sub_39F188()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D5B8, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D5D0, (unsigned int *)v2, 8LL);
  qword_48D5F8 = 0LL;
  qword_48D5F0 = 0LL;
  qword_48D5E8 = (uint64_t)&qword_48D5F0;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48D600 = v1;
  return result;
}

uint64_t **sub_39F278()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D608, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48D620, (unsigned int *)v1, 8LL);
  qword_48D648 = 0LL;
  qword_48D640 = 0LL;
  qword_48D638 = (uint64_t)&qword_48D640;
  return result;
}

uint64_t **sub_39F344()
{
  qword_48D660 = 0LL;
  qword_48D658 = 0LL;
  qword_48D650 = (uint64_t)&qword_48D658;
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D668, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48D680, (unsigned int *)v1, 8LL);
}

uint64_t sub_39F410()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D698, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D6B0, (unsigned int *)v2, 8LL);
  qword_48D6D8 = 0LL;
  qword_48D6D0 = 0LL;
  qword_48D6C8 = (uint64_t)&qword_48D6D0;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48D6E0 = v1;
  return result;
}

void sub_39F500()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_39F5B4(_Unwind_Exception *a1)
{
}

void sub_39F5CC()
{
  v8[0] = off_486408;
  v8[1] = *(_OWORD *)"lovc";
  v8[2] = xmmword_486428;
  _DWORD v8[3] = *(_OWORD *)&off_486438;
  v5[0] = xmmword_4863C8;
  v5[1] = *(_OWORD *)&off_4863D8;
  __int128 v6 = *(_OWORD *)"lovl";
  __int128 v7 = unk_4863F8;
  __int128 v2 = *(_OWORD *)"ulov";
  v3[0] = unk_486398;
  v3[1] = off_4863A8;
  __int128 v4 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D768, (unsigned int *)&v2, 8LL);
  LODWORD(v2) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D780, (unsigned int *)&v2, 1LL);
  qword_48D7A8 = 0LL;
  qword_48D7A0 = 0LL;
  qword_48D798 = (uint64_t)&qword_48D7A0;
  sub_7D084(&v2, "Null_Device");
  sub_7D084((void *)v3 + 1, "Actuator");
  sub_7D084(&v4, "Halogen");
  sub_7D084((void *)v5 + 1, "Hawking");
  sub_7D084(&v6, "Flicker");
  sub_7D084((void *)&v7 + 1, "Penrose");
  uint64_t v0 = 0LL;
  dword_48D7B8 = 2;
  qword_48D7D0 = 0LL;
  qword_48D7C8 = 0LL;
  qword_48D7C0 = (uint64_t)&qword_48D7C8;
  do
  {
    sub_E7140((uint64_t)&qword_48D7C0, (uint64_t)&qword_48D7C8, (void **)((char *)&v3[-1] + v0), (uint64_t)&v3[-1] + v0);
    v0 += 24LL;
  }

  while (v0 != 144);
  for (uint64_t i = 0LL; i != -144; i -= 24LL)
  {
  }

  dword_48D7D8 = 3;
  qword_48D7F0 = 0LL;
  qword_48D7E8 = 0LL;
  qword_48D7E0 = (uint64_t)&qword_48D7E8;
}

void sub_39F7BC(_Unwind_Exception *exception_object)
{
}

uint64_t **sub_39F82C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48D7F8, (unsigned int *)v1, 8LL);
}

uint64_t *sub_39F8BC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48D810, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D828, (unsigned int *)v1, 8LL);
  qword_48D850 = 0LL;
  qword_48D848 = 0LL;
  qword_48D840 = (uint64_t)&qword_48D848;
  qword_48D858 = 0x7063787870616E63LL;
  dword_48D860 = 0;
  byte_48D864 = 0;
  uint64_t result = sub_86550((uint64_t *)&algn_48D865[3], (uint64_t)&unk_48D810);
  word_48D880 = word_48D880 & 0xF800 | 0x421;
  return result;
}

uint64_t sub_39F9CC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D888, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48D8A0, (unsigned int *)v1, 1LL);
  qword_48D8C8 = 0LL;
  qword_48D8C0 = 0LL;
  qword_48D8B8 = (uint64_t)&qword_48D8C0;
  return result;
}

void *sub_39FA98()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48D8D0, (unsigned int *)v18, 8LL);
  *(_DWORD *)uint64_t v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_48D8E8, (unsigned int *)v18, 1LL);
  qword_48D910 = 0LL;
  qword_48D908 = 0LL;
  qword_48D900 = (uint64_t)&qword_48D908;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_48D918 = 3;
  sub_7A22C((uint64_t)&unk_48D920, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_48D938 = 3;
  sub_7A22C((uint64_t)&unk_48D940, (unsigned int *)v18, 9LL);
  *(_OWORD *)uint64_t v18 = xmmword_403140;
  dword_48D958 = 3;
  sub_7A22C((uint64_t)&unk_48D960, (unsigned int *)v18, 4LL);
  *(_OWORD *)uint64_t v18 = xmmword_403150;
  dword_48D978 = 3;
  sub_7A22C((uint64_t)&unk_48D980, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_48D998 = 3;
  sub_7A22C((uint64_t)&qword_48D9A0, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_48D9B8 = 3;
  sub_7A22C((uint64_t)&unk_48D9C0, (unsigned int *)v18, 7LL);
  *(_OWORD *)uint64_t v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_48D9D8 = 2;
  sub_7A22C((uint64_t)&unk_48D9E0, (unsigned int *)v18, 8LL);
  *(_OWORD *)uint64_t v18 = xmmword_403160;
  dword_48D9F8 = 2;
  sub_7A22C((uint64_t)&qword_48DA00, (unsigned int *)v18, 4LL);
  *(_DWORD *)uint64_t v18 = 1918990112;
  dword_48DA18 = 2;
  sub_7A22C((uint64_t)&unk_48DA20, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1836281204;
  dword_48DA38 = 2;
  sub_7A22C((uint64_t)&qword_48DA40, (unsigned int *)v18, 1LL);
  *(void *)uint64_t v18 = 0x7670766976706763LL;
  dword_48DA58 = 2;
  sub_7A22C((uint64_t)&unk_48DA60, (unsigned int *)v18, 2LL);
  *(_DWORD *)uint64_t v18 = 1987080813;
  dword_48DA78 = 2;
  sub_7A22C((uint64_t)&unk_48DA80, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1987208039;
  dword_48DA98 = 2;
  sub_7A22C((uint64_t)&unk_48DAA0, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1919776355;
  dword_48DAB8 = 2;
  sub_7A22C((uint64_t)&unk_48DAC0, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_48DAD8 = 2;
  sub_7A22C((uint64_t)&unk_48DAE0, (unsigned int *)v18, 5LL);
  *(_DWORD *)uint64_t v18 = 1768778864;
  dword_48DAF8 = 3;
  sub_7A22C((uint64_t)&unk_48DB00, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1768776806;
  dword_48DB18 = 2;
  sub_7A22C((uint64_t)&unk_48DB20, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_48DB38 = 2;
  sub_7A22C((uint64_t)&unk_48DB40, (unsigned int *)v18, 3LL);
  *(_DWORD *)uint64_t v18 = 1751212899;
  dword_48DB58 = 2;
  sub_7A22C((uint64_t)&unk_48DB60, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1751212899;
  dword_48DB78 = 3;
  sub_7A22C((uint64_t)&unk_48DB80, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1986556788;
  dword_48DB98 = 2;
  sub_7A22C((uint64_t)&unk_48DBA0, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1986556788;
  dword_48DBB8 = 3;
  sub_7A22C((uint64_t)&unk_48DBC0, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_48DBD8 = 2;
  sub_7A22C((uint64_t)&unk_48DBE0, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_48DBF8 = 3;
  sub_7A22C((uint64_t)&unk_48DC00, (unsigned int *)v18, 5LL);
  *(_DWORD *)uint64_t v18 = 1986098036;
  dword_48DC18 = 2;
  sub_7A22C((uint64_t)&unk_48DC20, (unsigned int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 1986098036;
  dword_48DC38 = 3;
  sub_7A22C((uint64_t)&unk_48DC40, (unsigned int *)v18, 1LL);
  *(void *)uint64_t v18 = 0x6563692065637620LL;
  dword_48DC58 = 2;
  sub_7A22C((uint64_t)&unk_48DC60, (unsigned int *)v18, 2LL);
  *(void *)uint64_t v18 = 0x6563692065637620LL;
  dword_48DC78 = 3;
  sub_7A22C((uint64_t)&unk_48DC80, (unsigned int *)v18, 2LL);
  *(_DWORD *)uint64_t v18 = 0;
  dword_48DC98 = 2;
  sub_81EF8(qword_48DCA0, (int *)v18, 1LL);
  *(_DWORD *)uint64_t v18 = 0;
  dword_48DCB8 = 3;
  sub_81EF8(qword_48DCC0, (int *)v18, 1LL);
  *(void *)uint64_t v18 = &off_46F880;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_48DCD8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    uint64_t v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)uint64_t v18 = &off_46F8C8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_48DD20, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    __int128 v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  __int128 v4 = operator new(0x10uLL);
  void *v4 = &unk_48DCD8;
  v4[1] = &unk_48DD20;
  qword_48DD68 = (uint64_t)off_483190;
  qword_48DD78 = 0LL;
  unk_48DD80 = 0LL;
  qword_48DD70 = 0LL;
  sub_8201C(&qword_48DD70, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)uint64_t v18 = &off_46F910;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_48DD88, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)uint64_t v18 = &off_46F958;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_48DDD0, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    __int128 v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)uint64_t v18 = &off_46F9A0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_48DE18, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)uint64_t v18 = &off_46F9E8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_48DE60, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)uint64_t v18 = &off_46FA30;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_48DEA8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_48DEF0 = (uint64_t)off_4831C0;
  dword_48DEF8 = 6;
  qword_48DF00 = (uint64_t)off_4831F0;
  *(void *)algn_48DF08 = &qword_48DEF0;
  return result;
}

void sub_3A0408( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t sub_3A04A4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E090, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48E0A8, (unsigned int *)v1, 1LL);
  qword_48E0D0 = 0LL;
  qword_48E0C8 = 0LL;
  qword_48E0C0 = (uint64_t)&qword_48E0C8;
  return result;
}

uint64_t sub_3A0570()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E0D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48E0F0, (unsigned int *)v1, 1LL);
  qword_48E118 = 0LL;
  qword_48E110 = 0LL;
  qword_48E108 = (uint64_t)&qword_48E110;
  return result;
}

uint64_t **sub_3A063C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&qword_48E120, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48E138, (unsigned int *)v1, 8LL);
  qword_48E160 = 0LL;
  qword_48E158 = 0LL;
  qword_48E150 = (uint64_t)&qword_48E158;
  return result;
}

uint64_t **sub_3A0708()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48E168, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48E180, (unsigned int *)v1, 8LL);
  qword_48E1A8 = 0LL;
  qword_48E1A0 = 0LL;
  qword_48E198 = (uint64_t)&qword_48E1A0;
  return result;
}

void sub_3A07D4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_3A0888(_Unwind_Exception *a1)
{
}

uint64_t sub_3A08A0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E1B0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  return sub_7A22C((uint64_t)&unk_48E1C8, (unsigned int *)v1, 1LL);
}

uint64_t *sub_3A0950()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48E1E0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E1F8, (unsigned int *)v1, 8LL);
  qword_48E220 = 0LL;
  qword_48E218 = 0LL;
  qword_48E210 = (uint64_t)&qword_48E218;
  qword_48E230 = 0x7063787870617020LL;
  dword_48E238 = 0;
  byte_48E23C = 0;
  uint64_t result = sub_86550(qword_48E240, (uint64_t)&unk_48E1E0);
  word_48E258 = word_48E258 & 0xF800 | 0x620;
  return result;
}

void sub_3A0A60()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_3A0B14(_Unwind_Exception *a1)
{
}

uint64_t sub_3A0B2C()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E260, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48E278, (unsigned int *)v2, 1LL);
  qword_48E2A0 = 0LL;
  qword_48E298 = 0LL;
  qword_48E290 = (uint64_t)&qword_48E298;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48E2A8 = v1;
  return result;
}

void sub_3A0C1C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_3A0CD0(_Unwind_Exception *a1)
{
}

uint64_t sub_3A0CE8()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48E2B0, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E2C8, (unsigned int *)v2, 8LL);
  qword_48E2F0 = 0LL;
  qword_48E2E8 = 0LL;
  qword_48E2E0 = (uint64_t)&qword_48E2E8;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48E2F8 = v1;
  return result;
}

double sub_3A0DD8()
{
  __int128 v16 = off_486408;
  __int128 v17 = *(_OWORD *)"lovc";
  __int128 v18 = xmmword_486428;
  __int128 v19 = *(_OWORD *)&off_486438;
  __int128 v12 = xmmword_4863C8;
  __int128 v13 = *(_OWORD *)&off_4863D8;
  __int128 v14 = *(_OWORD *)"lovl";
  __int128 v15 = unk_4863F8;
  __int128 v8 = *(_OWORD *)"ulov";
  __int128 v9 = unk_486398;
  __int128 v10 = off_4863A8;
  __int128 v11 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E300, (unsigned int *)&v8, 8LL);
  LODWORD(v8) = 1986295651;
  sub_7A22C((uint64_t)&unk_48E318, (unsigned int *)&v8, 1LL);
  LODWORD(v8) = 1885500772;
  *((void *)&v8 + 1) = &off_485678;
  *(void *)&__int128 v9 = sub_13B7F8;
  *(void *)&__int128 v10 = (char *)&v8 + 8;
  DWORD2(v10) = 1718186601;
  *(void *)&__int128 v11 = &off_485678;
  *((void *)&v11 + 1) = sub_13BA90;
  *((void *)&v12 + 1) = &v11;
  LODWORD(v13) = 1651074168;
  *((void *)&v13 + 1) = &off_485678;
  *(void *)&__int128 v14 = sub_13C4A8;
  *(void *)&__int128 v15 = (char *)&v13 + 8;
  DWORD2(v15) = 1735287906;
  *(void *)&__int128 v16 = &off_485678;
  *((void *)&v16 + 1) = sub_13C8E0;
  *((void *)&v17 + 1) = &v16;
  LODWORD(v18) = 21;
  *((void *)&v18 + 1) = &off_485678;
  *(void *)&__int128 v19 = sub_13CE68;
  __int128 v20 = (char *)&v18 + 8;
  int v21 = 1920365171;
  __int128 v22 = &off_485678;
  __int128 v23 = sub_13D1B4;
  __int128 v24 = &v22;
  int v25 = 1684303986;
  __int128 v26 = &off_485678;
  __int128 v27 = sub_13D4A4;
  uint64_t v28 = &v26;
  int v29 = 1667789676;
  uint64_t v30 = &off_485678;
  __int16 v31 = sub_13DEAC;
  uint64_t v32 = &v30;
  int v33 = 1768907891;
  v34[0] = &off_485678;
  v34[1] = sub_13E248;
  void v34[3] = v34;
  int v35 = 1936749683;
  v36[0] = &off_485678;
  v36[1] = sub_13E92C;
  void v36[3] = v36;
  int v37 = 14;
  v38[0] = &off_485678;
  v38[1] = sub_13F1F8;
  v38[3] = v38;
  int v39 = 1936746861;
  v40[0] = &off_485678;
  v40[1] = sub_13F544;
  v40[3] = v40;
  int v41 = 1835235437;
  v42[0] = &off_485678;
  v42[1] = sub_13F5DC;
  v42[3] = v42;
  int v43 = 1886548852;
  v44[0] = &off_485678;
  v44[1] = sub_13F674;
  v44[3] = v44;
  int v45 = 1886610801;
  v46[0] = &off_485678;
  v46[1] = sub_13F738;
  v46[3] = v46;
  int v47 = 1886352244;
  v48[0] = &off_485678;
  v48[1] = sub_13F7D0;
  v48[3] = v48;
  int v49 = 1701737068;
  v50[0] = &off_485678;
  v50[1] = sub_13F868;
  v50[3] = v50;
  int v51 = 1818326117;
  v52[0] = &off_485678;
  v52[1] = sub_13F938;
  v52[3] = v52;
  int v53 = 1701080167;
  v54[0] = &off_485678;
  v54[1] = sub_13FA08;
  v54[3] = v54;
  int v55 = 1633972835;
  v56[0] = &off_485678;
  v56[1] = sub_13FAD8;
  v56[3] = v56;
  int v57 = 1668248691;
  v58[0] = &off_485678;
  v58[1] = sub_13FBA8;
  v58[3] = v58;
  int v59 = 1634625388;
  v60[0] = &off_485678;
  v60[1] = sub_13FC40;
  v60[3] = v60;
  sub_13FCD8(qword_48E330, (unsigned int *)&v8, 22LL);
  uint64_t v0 = 880LL;
  do
  {
    int v1 = *(_OWORD **)((char *)&v8 + v0 - 8);
    if ((__int128 *)((char *)&v8 + v0 - 32) == v1)
    {
      int v1 = (__int128 *)((char *)&v8 + v0 - 32);
      uint64_t v2 = 4LL;
    }

    else
    {
      if (!v1) {
        goto LABEL_7;
      }
      uint64_t v2 = 5LL;
    }

    (*(void (**)(void))(*(void *)v1 + 8 * v2))();
LABEL_7:
    v0 -= 40LL;
  }

  while (v0);
  LODWORD(v8) = 1987405668;
  *((void *)&v8 + 1) = &off_4856C0;
  *(void *)&__int128 v9 = sub_140150;
  *(void *)&__int128 v10 = (char *)&v8 + 8;
  DWORD2(v10) = 1987013749;
  *(void *)&__int128 v11 = &off_4856C0;
  *((void *)&v11 + 1) = sub_14028C;
  *((void *)&v12 + 1) = &v11;
  LODWORD(v13) = 1668706156;
  *((void *)&v13 + 1) = &off_4856C0;
  *(void *)&__int128 v14 = sub_141220;
  *(void *)&__int128 v15 = (char *)&v13 + 8;
  DWORD2(v15) = 1819701100;
  *(void *)&__int128 v16 = &off_4856C0;
  *((void *)&v16 + 1) = sub_14135C;
  *((void *)&v17 + 1) = &v16;
  LODWORD(v18) = 1953918828;
  *((void *)&v18 + 1) = &off_4856C0;
  *(void *)&__int128 v19 = sub_141450;
  __int128 v20 = (char *)&v18 + 8;
  int v21 = 1752659567;
  __int128 v22 = &off_4856C0;
  __int128 v23 = sub_141574;
  __int128 v24 = &v22;
  int v25 = 1987343987;
  __int128 v26 = &off_4856C0;
  __int128 v27 = sub_14185C;
  uint64_t v28 = &v26;
  int v29 = 1651275122;
  uint64_t v30 = &off_4856C0;
  __int16 v31 = sub_141CFC;
  uint64_t v32 = &v30;
  sub_141DE8(qword_48E358, (unsigned int *)&v8, 8LL);
  uint64_t v3 = 320LL;
  do
  {
    __int128 v4 = *(_OWORD **)((char *)&v8 + v3 - 8);
    if ((__int128 *)((char *)&v8 + v3 - 32) == v4)
    {
      __int128 v4 = (__int128 *)((char *)&v8 + v3 - 32);
      uint64_t v5 = 4LL;
    }

    else
    {
      if (!v4) {
        goto LABEL_14;
      }
      uint64_t v5 = 5LL;
    }

    (*(void (**)(void))(*(void *)v4 + 8 * v5))();
LABEL_14:
    v3 -= 40LL;
  }

  while (v3);
  qword_48E388 = 0LL;
  qword_48E390 = 0LL;
  qword_48E380 = (uint64_t)&qword_48E388;
  xmmword_48E3D0 = xmmword_403170;
  xmmword_48E508 = xmmword_403170;
  xmmword_48E4B0 = xmmword_403180;
  xmmword_48E3F0 = xmmword_403180;
  sub_157A88((uint64_t)&dword_48E398, 6u, -58.0, 0.0);
  uint64_t v6 = (char *)operator new(0x98uLL);
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 2) = 0LL;
  *(void *)uint64_t v6 = off_47DE00;
  *((void *)v6 + 4) = -2609680281LL;
  *((_DWORD *)v6 + 10) = 0;
  *(void *)(v6 + 60) = 0x100000001LL;
  *(_OWORD *)(v6 + 44) = xmmword_402D48;
  *(_OWORD *)(v6 + 72) = xmmword_48E3F0;
  v6[88] = 0;
  v6[136] = 0;
  double result = 2.11004386e262;
  *((void *)v6 + 3) = off_47DE38;
  *((void *)v6 + 18) = 0x76657167766F6C75LL;
  qword_48E3E0 = (uint64_t)(v6 + 24);
  *(void *)algn_48E3E8 = v6;
  return result;
}

void sub_3A141C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 320LL;
  while (1)
  {
    __int128 v4 = *(void **)(v1 + v3 - 8);
    if ((void *)(v1 + v3 - 32) == v4) {
      break;
    }
    if (v4)
    {
      uint64_t v5 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }

    v3 -= 40LL;
    if (!v3) {
      _Unwind_Resume(exception_object);
    }
  }

  __int128 v4 = (void *)(v1 + v3 - 32);
  uint64_t v5 = 4LL;
  goto LABEL_6;
}

uint64_t sub_3A14BC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E6A8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48E6C0, (unsigned int *)v1, 1LL);
  qword_48E6E8 = 0LL;
  qword_48E6E0 = 0LL;
  qword_48E6D8 = (uint64_t)&qword_48E6E0;
  return result;
}

uint64_t **sub_3A1588()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48E6F0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48E708, (unsigned int *)v1, 8LL);
  qword_48E730 = 0LL;
  qword_48E728 = 0LL;
  qword_48E720 = (uint64_t)&qword_48E728;
  return result;
}

uint64_t **sub_3A1654()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48E9C8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48E9E0, (unsigned int *)v1, 8LL);
}

uint64_t sub_3A1704()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48E9F8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EA10, (unsigned int *)v1, 1LL);
  qword_48EA38 = 0LL;
  qword_48EA30 = 0LL;
  qword_48EA28 = (uint64_t)&qword_48EA30;
  return result;
}

uint64_t sub_3A17D0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EA40, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EA58, (unsigned int *)v1, 1LL);
  qword_48EA80 = 0LL;
  qword_48EA78 = 0LL;
  qword_48EA70 = (uint64_t)&qword_48EA78;
  return result;
}

uint64_t **sub_3A189C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48EA88, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48EAA0, (unsigned int *)v1, 8LL);
}

uint64_t *sub_3A194C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48EAD8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EAF0, (unsigned int *)v1, 8LL);
  qword_48EB18 = 0LL;
  qword_48EB10 = 0LL;
  qword_48EB08 = (uint64_t)&qword_48EB10;
  qmemcpy(&qword_48EB20, "wphpiwcpphpe", 12);
  byte_48EB2C = 1;
  sub_86550(qword_48EB30, (uint64_t)&unk_48EAD8);
  word_48EB48 = word_48EB48 & 0xF800 | 0x416;
  qmemcpy(&qword_48EB50, "wphpiwcpphpe", 12);
  byte_48EB5C = 1;
  uint64_t result = sub_86550(qword_48EB60, (uint64_t)&unk_48EAD8);
  word_48EB78 = word_48EB78 & 0xF800 | 0x616;
  return result;
}

uint64_t *sub_3A1ABC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48EB80, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EB98, (unsigned int *)v1, 8LL);
  qword_48EBB0 = 0x70637769706D7769LL;
  dword_48EBB8 = 0;
  byte_48EBBC = 0;
  uint64_t result = sub_86550(qword_48EBC0, (uint64_t)&unk_48EB80);
  word_48EBD8 = word_48EBD8 & 0xF800 | 0x417;
  return result;
}

uint64_t sub_3A1BB4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EBE0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EBF8, (unsigned int *)v1, 1LL);
  qword_48EC20 = 0LL;
  qword_48EC18 = 0LL;
  qword_48EC10 = (uint64_t)&qword_48EC18;
  return result;
}

uint64_t sub_3A1C80()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48ED28, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48ED40, (unsigned int *)v1, 1LL);
  qword_48ED68 = 0LL;
  qword_48ED60 = 0LL;
  qword_48ED58 = (uint64_t)&qword_48ED60;
  return result;
}

uint64_t sub_3A1D4C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48ED70, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48ED88, (unsigned int *)v1, 1LL);
  qword_48EDB0 = 0LL;
  qword_48EDA8 = 0LL;
  qword_48EDA0 = (uint64_t)&qword_48EDA8;
  return result;
}

uint64_t sub_3A1E18()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EDB8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EDD0, (unsigned int *)v1, 1LL);
  qword_48EDF8 = 0LL;
  qword_48EDF0 = 0LL;
  qword_48EDE8 = (uint64_t)&qword_48EDF0;
  return result;
}

uint64_t sub_3A1EE4()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EE00, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48EE18, (unsigned int *)v2, 1LL);
  qword_48EE40 = 0LL;
  qword_48EE38 = 0LL;
  qword_48EE30 = (uint64_t)&qword_48EE38;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48EE48 = v1;
  return result;
}

uint64_t sub_3A1FD4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EE50, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EE68, (unsigned int *)v1, 1LL);
  qword_48EE90 = 0LL;
  qword_48EE88 = 0LL;
  qword_48EE80 = (uint64_t)&qword_48EE88;
  return result;
}

uint64_t sub_3A20A0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EE98, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EEB0, (unsigned int *)v1, 1LL);
  qword_48EED8 = 0LL;
  qword_48EED0 = 0LL;
  qword_48EEC8 = (uint64_t)&qword_48EED0;
  return result;
}

uint64_t sub_3A216C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EEE0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EEF8, (unsigned int *)v1, 1LL);
  qword_48EF20 = 0LL;
  qword_48EF18 = 0LL;
  qword_48EF10 = (uint64_t)&qword_48EF18;
  return result;
}

uint64_t *sub_3A2238()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EF28, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48EF40, (unsigned int *)v1, 1LL);
  qword_48EF68 = 0LL;
  qword_48EF60 = 0LL;
  qword_48EF58 = (uint64_t)&qword_48EF60;
  qword_48EF70 = 0x706362697073706BLL;
  dword_48EF78 = 0;
  byte_48EF7C = 0;
  sub_86550(qword_48EF80, (uint64_t)&unk_48EF40);
  word_48EF98 = word_48EF98 & 0xF800 | 0x630;
  qword_48EFA0 = 0x70636269706D6269LL;
  dword_48EFA8 = 0;
  byte_48EFAC = 0;
  uint64_t result = sub_86550(qword_48EFB0, (uint64_t)&unk_48EF40);
  word_48EFC8 = word_48EFC8 & 0xF800 | 0x631;
  return result;
}

uint64_t sub_3A238C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48EFD0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48EFE8, (unsigned int *)v1, 1LL);
  qword_48F010 = 0LL;
  qword_48F008 = 0LL;
  qword_48F000 = (uint64_t)&qword_48F008;
  return result;
}

uint64_t **sub_3A2458()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F018, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48F030, (unsigned int *)v1, 8LL);
  qword_48F058 = 0LL;
  qword_48F050 = 0LL;
  qword_48F048 = (uint64_t)&qword_48F050;
  return result;
}

uint64_t **sub_3A2524()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F060, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48F078, (unsigned int *)v1, 8LL);
  qword_48F0A0 = 0LL;
  qword_48F098 = 0LL;
  qword_48F090 = (uint64_t)&qword_48F098;
  return result;
}

uint64_t sub_3A25F0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F160, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F178, (unsigned int *)v1, 1LL);
  qword_48F1A0 = 0LL;
  qword_48F198 = 0LL;
  qword_48F190 = (uint64_t)&qword_48F198;
  return result;
}

uint64_t sub_3A26BC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F1A8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F1C0, (unsigned int *)v1, 1LL);
  qword_48F1E8 = 0LL;
  qword_48F1E0 = 0LL;
  qword_48F1D8 = (uint64_t)&qword_48F1E0;
  return result;
}

uint64_t **sub_3A2788()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F1F0, (unsigned int *)v1, 1LL);
  qmemcpy(&qword_48F208, "uolpiwcpnupe", 12);
  byte_48F214 = 1;
  sub_86550(qword_48F218, (uint64_t)&unk_48F1F0);
  word_48F230 = word_48F230 & 0xF800 | 0x41E;
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48F238, (unsigned int *)v1, 8LL);
}

uint64_t **sub_3A2894()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F250, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_48F268, (unsigned int *)v1, 8LL);
}

uint64_t sub_3A2944()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F298, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F2B0, (unsigned int *)v1, 1LL);
  qword_48F2D8 = 0LL;
  qword_48F2D0 = 0LL;
  qword_48F2C8 = (uint64_t)&qword_48F2D0;
  return result;
}

uint64_t sub_3A2A10()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F2E0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F2F8, (unsigned int *)v1, 1LL);
  qword_48F320 = 0LL;
  qword_48F318 = 0LL;
  qword_48F310 = (uint64_t)&qword_48F318;
  return result;
}

uint64_t sub_3A2ADC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F328, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F340, (unsigned int *)v1, 1LL);
  qword_48F368 = 0LL;
  qword_48F360 = 0LL;
  qword_48F358 = (uint64_t)&qword_48F360;
  return result;
}

uint64_t sub_3A2BA8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F370, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F388, (unsigned int *)v1, 1LL);
  qword_48F3B0 = 0LL;
  qword_48F3A8 = 0LL;
  qword_48F3A0 = (uint64_t)&qword_48F3A8;
  return result;
}

uint64_t **sub_3A2C74()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F3B8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48F3D0, (unsigned int *)v1, 8LL);
  qword_48F3F8 = 0LL;
  qword_48F3F0 = 0LL;
  qword_48F3E8 = (uint64_t)&qword_48F3F0;
  return result;
}

uint64_t *sub_3A2D40()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F400, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F418, (unsigned int *)v2, 8LL);
  qword_48F440 = 0LL;
  qword_48F438 = 0LL;
  qword_48F430 = (uint64_t)&qword_48F438;
  else {
    int v0 = 3;
  }
  dword_48F448 = v0;
  qmemcpy(&qword_48F450, "uolpiwcpnupe", 12);
  byte_48F45C = 1;
  sub_86550(qword_48F460, (uint64_t)&unk_48F400);
  word_48F478 = word_48F478 & 0xF800 | 0x41E;
  qword_48F480 = 0x6F757470766F6C6DLL;
  dword_48F488 = 6;
  qword_48F490 = 0x6F757470766F6C64LL;
  dword_48F498 = 6;
  qword_48F4A0 = 0x6F75747076637370LL;
  dword_48F4A8 = 6;
  qword_48F4B0 = 0x696E707469656E64LL;
  dword_48F4B8 = 0;
  qword_48F4C0 = 0x7063626970726563LL;
  dword_48F4C8 = 0;
  byte_48F4CC = 0;
  sub_86550(qword_48F4D0, (uint64_t)&unk_48F400);
  word_48F4E8 = word_48F4E8 & 0xF800 | 0x434;
  qword_48F4F0 = 0x706362697073706BLL;
  dword_48F4F8 = 0;
  byte_48F4FC = 0;
  sub_86550(qword_48F500, (uint64_t)&unk_48F400);
  word_48F518 = word_48F518 & 0xF800 | 0x43C;
  qword_48F520 = 0x7063626970686163LL;
  dword_48F528 = 0;
  byte_48F52C = 0;
  uint64_t result = sub_86550(qword_48F530, (uint64_t)&unk_48F400);
  word_48F548 = word_48F548 & 0xF800 | 0x424;
  return result;
}

void sub_3A2FB0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_3A3064(_Unwind_Exception *a1)
{
}

void sub_3A307C()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4(&qword_48F5A0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F5B8, (unsigned int *)v1, 1LL);
  qword_48F5E0 = 0LL;
  qword_48F5D8 = 0LL;
  qword_48F5D0 = (uint64_t)&qword_48F5D8;
  qword_48F5E8 = (uint64_t)&qword_48F5E8;
  qword_48F5F0 = (uint64_t)&qword_48F5E8;
  qword_48F5F8 = 0LL;
  objc_autoreleasePoolPop(v0);
}

uint64_t **sub_3A3170()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F600, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48F618, (unsigned int *)v1, 8LL);
  qword_48F640 = 0LL;
  qword_48F638 = 0LL;
  qword_48F630 = (uint64_t)&qword_48F638;
  return result;
}

uint64_t sub_3A323C()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F648, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F660, (unsigned int *)v2, 1LL);
  qword_48F688 = 0LL;
  qword_48F680 = 0LL;
  qword_48F678 = (uint64_t)&qword_48F680;
  qword_48F698 = 0LL;
  unk_48F6A0 = 0LL;
  qword_48F690 = 0LL;
  unsigned __int8 v0 = operator new(0x10uLL);
  qword_48F690 = (uint64_t)v0;
  *unsigned __int8 v0 = xmmword_4031F0;
  uint64_t result = (uint64_t)(v0 + 1);
  qword_48F698 = result;
  unk_48F6A0 = result;
  return result;
}

void sub_3A333C()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  qword_48F6A8 = 0x6F75747074686264LL;
  dword_48F6B0 = 0;
  qword_48F6B8 = kCPMSPowerTimeScale1s;
  qword_48F6C0 = kCPMSPowerTimeScale100ms;
  qword_48F6C8 = kCPMSPowerTimeScaleInstantaneous;
  qword_48F6D0 = kCPMSPowerTimeScaleThermal;
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_3A33B8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F6D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F6F0, (unsigned int *)v1, 1LL);
  qword_48F718 = 0LL;
  qword_48F710 = 0LL;
  qword_48F708 = (uint64_t)&qword_48F710;
  return result;
}

uint64_t *sub_3A3484()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F720, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F738, (unsigned int *)v1, 1LL);
  qword_48F760 = 0LL;
  qword_48F758 = 0LL;
  qword_48F750 = (uint64_t)&qword_48F758;
  qword_48F768 = 0x7063787868646269LL;
  dword_48F770 = 0;
  byte_48F774 = 0;
  uint64_t result = sub_86550(qword_48F778, (uint64_t)&unk_48F738);
  word_48F790 = word_48F790 & 0xF800 | 0x421;
  return result;
}

uint64_t sub_3A3594()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F798, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F7B0, (unsigned int *)v1, 1LL);
  qword_48F7D8 = 0LL;
  qword_48F7D0 = 0LL;
  qword_48F7C8 = (uint64_t)&qword_48F7D0;
  return result;
}

uint64_t **sub_3A3660()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F7E0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48F7F8, (unsigned int *)v1, 8LL);
  qword_48F820 = 0LL;
  qword_48F818 = 0LL;
  qword_48F810 = (uint64_t)&qword_48F818;
  return result;
}

uint64_t sub_3A372C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F8D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F8F0, (unsigned int *)v1, 1LL);
  qword_48F918 = 0LL;
  qword_48F910 = 0LL;
  qword_48F908 = (uint64_t)&qword_48F910;
  return result;
}

void sub_3A37F8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_3A38AC(_Unwind_Exception *a1)
{
}

uint64_t sub_3A38C4()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F920, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F938, (unsigned int *)v2, 8LL);
  qword_48F960 = 0LL;
  qword_48F958 = 0LL;
  qword_48F950 = (uint64_t)&qword_48F958;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48F968 = v1;
  return result;
}

uint64_t **sub_3A39B4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48F970, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48F988, (unsigned int *)v1, 8LL);
  qword_48F9B0 = 0LL;
  qword_48F9A8 = 0LL;
  qword_48F9A0 = (uint64_t)&qword_48F9A8;
  return result;
}

uint64_t sub_3A3A80()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48F9B8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48F9D0, (unsigned int *)v1, 1LL);
  qword_48F9F8 = 0LL;
  qword_48F9F0 = 0LL;
  qword_48F9E8 = (uint64_t)&qword_48F9F0;
  return result;
}

uint64_t sub_3A3B4C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FA00, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48FA18, (unsigned int *)v1, 1LL);
  qword_48FA40 = 0LL;
  qword_48FA38 = 0LL;
  qword_48FA30 = (uint64_t)&qword_48FA38;
  return result;
}

uint64_t sub_3A3C18()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FA48, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48FA60, (unsigned int *)v2, 1LL);
  qword_48FA88 = 0LL;
  qword_48FA80 = 0LL;
  qword_48FA78 = (uint64_t)&qword_48FA80;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48FA90 = v1;
  return result;
}

uint64_t sub_3A3D08()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FAA0, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48FAB8, (unsigned int *)v2, 1LL);
  qword_48FAE0 = 0LL;
  qword_48FAD8 = 0LL;
  qword_48FAD0 = (uint64_t)&qword_48FAD8;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48FAE8 = v1;
  return result;
}

uint64_t sub_3A3DF8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FB18, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48FB30, (unsigned int *)v1, 1LL);
  qword_48FB58 = 0LL;
  qword_48FB50 = 0LL;
  qword_48FB48 = (uint64_t)&qword_48FB50;
  return result;
}

uint64_t sub_3A3EC4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FB60, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48FB78, (unsigned int *)v1, 1LL);
  qword_48FBA0 = 0LL;
  qword_48FB98 = 0LL;
  qword_48FB90 = (uint64_t)&qword_48FB98;
  return result;
}

uint64_t sub_3A3F90()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FBA8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48FBC0, (unsigned int *)v1, 1LL);
  qword_48FBE8 = 0LL;
  qword_48FBE0 = 0LL;
  qword_48FBD8 = (uint64_t)&qword_48FBE0;
  return result;
}

uint64_t **sub_3A405C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48FBF0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48FC08, (unsigned int *)v1, 8LL);
  qword_48FC30 = 0LL;
  qword_48FC28 = 0LL;
  qword_48FC20 = (uint64_t)&qword_48FC28;
  return result;
}

void sub_3A4128()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  if (!sub_753A8())
  {
    int v1 = (os_log_s *)*(id *)sub_138E8(13);
    uint64_t v2 = v1;
    if (v1 && os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "PlatformUtilities_Aspen.mm";
      __int16 v6 = 1024;
      int v7 = 39;
      _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown device! Please file a bug against Audio (New Bugs).",  (uint8_t *)&v4,  0x12u);
    }
  }

  byte_48FC98 = 1;
  qword_48FCA8 = 0LL;
  qword_48FCB0 = 0LL;
  qword_48FCA0 = 0LL;
  uint64_t v3 = operator new(0xBCuLL);
  qword_48FCB0 = (uint64_t)v3 + 188;
  v3[8] = xmmword_401ECC;
  v3[9] = unk_401EDC;
  v3[10] = xmmword_401EEC;
  *(_OWORD *)((char *)v3 + 172) = *(__int128 *)((char *)&xmmword_401EEC + 12);
  v3[4] = xmmword_401E8C;
  v3[5] = unk_401E9C;
  v3[6] = xmmword_401EAC;
  v3[7] = unk_401EBC;
  _OWORD *v3 = *(_OWORD *)"\t";
  v3[1] = unk_401E5C;
  _OWORD v3[2] = xmmword_401E6C;
  v3[3] = unk_401E7C;
  qword_48FCA0 = (uint64_t)v3;
  qword_48FCA8 = (uint64_t)v3 + 188;
  objc_autoreleasePoolPop(v0);
}

uint64_t **sub_3A4278()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48FE70, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_48FE88, (unsigned int *)v1, 8LL);
  qword_48FEB0 = 0LL;
  qword_48FEA8 = 0LL;
  qword_48FEA0 = (uint64_t)&qword_48FEA8;
  return result;
}

uint64_t sub_3A4344()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FEB8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48FED0, (unsigned int *)v1, 1LL);
  qword_48FEF8 = 0LL;
  qword_48FEF0 = 0LL;
  qword_48FEE8 = (uint64_t)&qword_48FEF0;
  return result;
}

uint64_t sub_3A4410()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FF00, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_48FF18, (unsigned int *)v1, 1LL);
  qword_48FF40 = 0LL;
  qword_48FF38 = 0LL;
  qword_48FF30 = (uint64_t)&qword_48FF38;
  return result;
}

uint64_t sub_3A44DC()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_48FF48, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_48FF60, (unsigned int *)v2, 1LL);
  qword_48FF88 = 0LL;
  qword_48FF80 = 0LL;
  qword_48FF78 = (uint64_t)&qword_48FF80;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_48FF90 = v1;
  return result;
}

uint64_t sub_3A45CC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490998, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4909B0, (unsigned int *)v1, 1LL);
  qword_4909D8 = 0LL;
  qword_4909D0 = 0LL;
  qword_4909C8 = (uint64_t)&qword_4909D0;
  return result;
}

uint64_t **sub_3A4698()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4909E0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4909F8, (unsigned int *)v1, 8LL);
  qword_490A20 = 0LL;
  qword_490A18 = 0LL;
  qword_490A10 = (uint64_t)&qword_490A18;
  return result;
}

uint64_t **sub_3A4764()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_490A28, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_490A40, (unsigned int *)v1, 8LL);
  qword_490A68 = 0LL;
  qword_490A60 = 0LL;
  qword_490A58 = (uint64_t)&qword_490A60;
  return result;
}

uint64_t sub_3A4830()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490A70, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_490A88, (unsigned int *)v1, 1LL);
  qword_490AB0 = 0LL;
  qword_490AA8 = 0LL;
  qword_490AA0 = (uint64_t)&qword_490AA8;
  return result;
}

uint64_t *sub_3A48FC()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_490AB8, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490AD0, (unsigned int *)v2, 8LL);
  qword_490AF8 = 0LL;
  qword_490AF0 = 0LL;
  qword_490AE8 = (uint64_t)&qword_490AF0;
  else {
    int v0 = 3;
  }
  dword_490B00 = v0;
  qmemcpy(&qword_490B08, "uolpiwcpnupe", 12);
  byte_490B14 = 1;
  sub_86550(qword_490B18, (uint64_t)&unk_490AB8);
  word_490B30 = word_490B30 & 0xF800 | 0x41E;
  qword_490B38 = 0x706362696C70696ELL;
  dword_490B40 = 0;
  byte_490B44 = 0;
  *(void *)&v2[0] = 0x766D696E766F6464LL;
  sub_7A22C((uint64_t)&algn_490B45[3], (unsigned int *)v2, 2LL);
  word_490B60 = word_490B60 & 0xF800 | 0x630;
  qword_490B68 = 0x706362696870696ELL;
  dword_490B70 = 0;
  byte_490B74 = 0;
  LODWORD(v2[0]) = 1987011684;
  sub_7A22C((uint64_t)&unk_490B78, (unsigned int *)v2, 1LL);
  word_490B90 = word_490B90 & 0xF800 | 0x630;
  qword_490B98 = 0x6F757470766F6C6DLL;
  dword_490BA0 = 6;
  qword_490BA8 = 0x6F757470766F6C64LL;
  dword_490BB0 = 6;
  qword_490BB8 = 0x6F75747076637370LL;
  dword_490BC0 = 6;
  qword_490BC8 = 0x696E707469656E64LL;
  dword_490BD0 = 0;
  qword_490BD8 = 0x7063626970726563LL;
  dword_490BE0 = 0;
  byte_490BE4 = 0;
  sub_86550((uint64_t *)&algn_490BE5[3], (uint64_t)&unk_490AB8);
  word_490C00 = word_490C00 & 0xF800 | 0x434;
  qword_490C08 = 0x706362697073706BLL;
  dword_490C10 = 0;
  byte_490C14 = 0;
  sub_86550(qword_490C18, (uint64_t)&unk_490AB8);
  word_490C30 = word_490C30 & 0xF800 | 0x43C;
  qword_490C38 = 0x7063626970686163LL;
  dword_490C40 = 0;
  byte_490C44 = 0;
  uint64_t result = sub_86550((uint64_t *)&algn_490C45[3], (uint64_t)&unk_490AB8);
  word_490C60 = word_490C60 & 0xF800 | 0x424;
  return result;
}

uint64_t *sub_3A4C10()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490CB8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_490CD0, (unsigned int *)v1, 1LL);
  qword_490CF8 = 0LL;
  qword_490CF0 = 0LL;
  qword_490CE8 = (uint64_t)&qword_490CF0;
  qmemcpy(&qword_490D00, "uolpiwcpnupe", 12);
  byte_490D0C = 1;
  sub_86550(qword_490D10, (uint64_t)&unk_490CD0);
  word_490D28 = word_490D28 & 0xF800 | 0x41E;
  qword_490D30 = 0x676C6F626E737274LL;
  dword_490D38 = 0;
  qword_490D40 = 0x6F757470766F6C6DLL;
  dword_490D48 = 0;
  qword_490D50 = 0x6F757470766F6C64LL;
  dword_490D58 = 0;
  qword_490D60 = 0x6F75747076637370LL;
  dword_490D68 = 0;
  qmemcpy(&qword_490D70, "osupiwcpnupe", 12);
  byte_490D7C = 1;
  uint64_t result = sub_86550(qword_490D80, (uint64_t)&unk_490CD0);
  word_490D98 = word_490D98 & 0xF800 | 0x61E;
  return result;
}

uint64_t sub_3A4DDC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490DA0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_490DB8, (unsigned int *)v1, 1LL);
  qword_490DE0 = 0LL;
  qword_490DD8 = 0LL;
  qword_490DD0 = (uint64_t)&qword_490DD8;
  qword_490DE8 = 0x70636269706C7169LL;
  dword_490DF0 = 0;
  byte_490DF4 = 0;
  LODWORD(v1[0]) = 1986818404;
  sub_7A22C((uint64_t)&unk_490DF8, (unsigned int *)v1, 1LL);
  word_490E10 = word_490E10 & 0xF800 | 0x421;
  qword_490E18 = 0x70636269706C716FLL;
  dword_490E20 = 0;
  byte_490E24 = 0;
  LODWORD(v1[0]) = 1986818404;
  uint64_t result = sub_7A22C((uint64_t)&algn_490E25[3], (unsigned int *)v1, 1LL);
  word_490E40 = word_490E40 & 0xF800 | 0x420;
  return result;
}

uint64_t *sub_3A4F48()
{
  v3[8] = off_486408;
  v3[9] = *(_OWORD *)"lovc";
  v3[10] = xmmword_486428;
  v3[11] = *(_OWORD *)&off_486438;
  v3[4] = xmmword_4863C8;
  v3[5] = *(_OWORD *)&off_4863D8;
  v3[6] = *(_OWORD *)"lovl";
  v3[7] = unk_4863F8;
  v3[0] = *(_OWORD *)"ulov";
  v3[1] = unk_486398;
  _OWORD v3[2] = off_4863A8;
  v3[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490E48, (unsigned int *)v3, 8LL);
  LODWORD(v3[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_490E60, (unsigned int *)v3, 1LL);
  qword_490E88 = 0LL;
  qword_490E80 = 0LL;
  qword_490E78 = (uint64_t)&qword_490E80;
  else {
    int v0 = 3;
  }
  dword_490E90 = v0;
  qword_490E98 = 0x706377697075736FLL;
  if (sub_1CCD00())
  {
    dword_490EA0 = 1701867895;
    byte_490EA4 = 1;
  }

  else
  {
    byte_490EA4 = 1;
    dword_490EA0 = 1701868910;
  }

  sub_86550(&qword_490EA8, (uint64_t)&unk_490E60);
  word_490EC0 = word_490EC0 & 0xFFC0 | 0x1E;
  else {
    __int16 v1 = 1536;
  }
  word_490EC0 = word_490EC0 & 0xF83F | v1;
  qmemcpy(&qword_490EC8, "isupiwcpnupe", 12);
  byte_490ED4 = 1;
  sub_86550(qword_490ED8, (uint64_t)&unk_490E60);
  word_490EF0 = word_490EF0 & 0xF800 | 0x617;
  qmemcpy(&qword_490EF8, "taupiwcpnupe", 12);
  byte_490F04 = 1;
  uint64_t result = sub_86550((uint64_t *)&algn_490F05[3], (uint64_t)&unk_490E60);
  word_490F20 = word_490F20 & 0xF800 | 0x607;
  return result;
}

void sub_3A5168(_Unwind_Exception *a1)
{
}

uint64_t sub_3A5188()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490F38, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_490F50, (unsigned int *)v1, 1LL);
  qword_490F78 = 0LL;
  qword_490F70 = 0LL;
  qword_490F68 = (uint64_t)&qword_490F70;
  return result;
}

uint64_t sub_3A5254()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_490F80, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490F98, (unsigned int *)v2, 8LL);
  qword_490FC0 = 0LL;
  qword_490FB8 = 0LL;
  qword_490FB0 = (uint64_t)&qword_490FB8;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_490FC8 = v1;
  return result;
}

uint64_t sub_3A5344()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_490FD0, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_490FE8, (unsigned int *)v2, 8LL);
  qword_491010 = 0LL;
  qword_491008 = 0LL;
  qword_491000 = (uint64_t)&qword_491008;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_491018 = v1;
  return result;
}

uint64_t sub_3A5434()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491098, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4910B0, (unsigned int *)v1, 1LL);
  qword_4910D0 = 0LL;
  qword_4910D8 = 0LL;
  qword_4910C8 = (uint64_t)&qword_4910D0;
  qword_4910E0 = 0x706362696C70696ELL;
  dword_4910E8 = 0;
  byte_4910EC = 0;
  *(void *)&v1[0] = 0x766D696E766F6464LL;
  sub_7A22C((uint64_t)&unk_4910F0, (unsigned int *)v1, 2LL);
  word_491108 = word_491108 & 0xF800 | 0x630;
  qword_491110 = 0x706362696870696ELL;
  dword_491118 = 0;
  byte_49111C = 0;
  LODWORD(v1[0]) = 1987011684;
  uint64_t result = sub_7A22C((uint64_t)&unk_491120, (unsigned int *)v1, 1LL);
  word_491138 = word_491138 & 0xF800 | 0x630;
  return result;
}

double sub_3A55A4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491140, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491158, (unsigned int *)v1, 1LL);
  qword_491180 = 0LL;
  qword_491178 = 0LL;
  qword_491170 = (uint64_t)&qword_491178;
  double result = 1.58366012e190;
  qword_491188 = 0x676C6F6273747674LL;
  dword_491190 = 0;
  return result;
}

uint64_t **sub_3A5688()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491198, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_4911B0, (unsigned int *)v1, 8LL);
}

uint64_t sub_3A5738()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4911C8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4911E0, (unsigned int *)v1, 1LL);
  qword_491208 = 0LL;
  qword_491200 = 0LL;
  qword_4911F8 = (uint64_t)&qword_491200;
  return result;
}

uint64_t sub_3A5804()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491210, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_491228, (unsigned int *)v1, 1LL);
  qword_491250 = 0LL;
  qword_491248 = 0LL;
  qword_491240 = (uint64_t)&qword_491248;
  return result;
}

uint64_t sub_3A58D0()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491258, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491270, (unsigned int *)v2, 1LL);
  qword_491298 = 0LL;
  qword_491290 = 0LL;
  qword_491288 = (uint64_t)&qword_491290;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_4912A0 = v1;
  return result;
}

uint64_t sub_3A59C0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4912A8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4912C0, (unsigned int *)v1, 1LL);
  qword_4912E8 = 0LL;
  qword_4912E0 = 0LL;
  qword_4912D8 = (uint64_t)&qword_4912E0;
  return result;
}

uint64_t sub_3A5A8C()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4912F0, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491308, (unsigned int *)v2, 1LL);
  qword_491330 = 0LL;
  qword_491328 = 0LL;
  qword_491320 = (uint64_t)&qword_491328;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_491338 = v1;
  return result;
}

uint64_t **sub_3A5B7C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491340, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_491358, (unsigned int *)v1, 8LL);
  qword_491380 = 0LL;
  qword_491378 = 0LL;
  qword_491370 = (uint64_t)&qword_491378;
  return result;
}

double sub_3A5C48()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491388, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4913A0, (unsigned int *)v1, 1LL);
  qword_4913C0 = 0LL;
  qword_4913B8 = (uint64_t)&qword_4913C0;
  qword_4913C8 = 0LL;
  *(void *)&xmmword_493168 = 0x40E5888000000000LL;
  *(__int128 *)((char *)&xmmword_493168 + 8) = xmmword_4031B0;
  *(void *)&double result = 0x100000004LL;
  unk_493180 = xmmword_4031C0;
  return result;
}

uint64_t sub_3A5D40()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491418, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_491430, (unsigned int *)v1, 1LL);
  qword_491458 = 0LL;
  qword_491450 = 0LL;
  qword_491448 = (uint64_t)&qword_491450;
  return result;
}

uint64_t *sub_3A5E0C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491460, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491478, (unsigned int *)v1, 1LL);
  qword_4914A0 = 0LL;
  qword_491498 = 0LL;
  qword_491490 = (uint64_t)&qword_491498;
  qmemcpy(&qword_4914A8, "mocpw!cpnupe", 12);
  byte_4914B4 = 1;
  uint64_t result = sub_86550(qword_4914B8, (uint64_t)&unk_491478);
  word_4914D0 = word_4914D0 & 0xF800 | 0x61D;
  return result;
}

uint64_t sub_3A5F30()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4914D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4914F0, (unsigned int *)v1, 1LL);
  qword_491518 = 0LL;
  qword_491510 = 0LL;
  qword_491508 = (uint64_t)&qword_491510;
  return result;
}

uint64_t sub_3A5FFC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491520, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_491538, (unsigned int *)v1, 1LL);
  qword_491560 = 0LL;
  qword_491558 = 0LL;
  qword_491550 = (uint64_t)&qword_491558;
  return result;
}

uint64_t **sub_3A60C8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4915A0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4915B8, (unsigned int *)v1, 8LL);
  qword_4915E0 = 0LL;
  qword_4915D8 = 0LL;
  qword_4915D0 = (uint64_t)&qword_4915D8;
  return result;
}

uint64_t **sub_3A6194()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4915E8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_491600, (unsigned int *)v1, 8LL);
  qword_491628 = 0LL;
  qword_491620 = 0LL;
  qword_491618 = (uint64_t)&qword_491620;
  return result;
}

uint64_t sub_3A6260()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491630, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491648, (unsigned int *)v2, 8LL);
  qword_491670 = 0LL;
  qword_491668 = 0LL;
  qword_491660 = (uint64_t)&qword_491668;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_491678 = v1;
  return result;
}

uint64_t **sub_3A6350()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491680, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_491698, (unsigned int *)v1, 8LL);
  qword_4916C0 = 0LL;
  qword_4916B8 = 0LL;
  qword_4916B0 = (uint64_t)&qword_4916B8;
  return result;
}

uint64_t **sub_3A641C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_4916C8, (unsigned int *)v1, 8LL);
}

uint64_t sub_3A64AC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491710, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_491728, (unsigned int *)v1, 1LL);
  qword_491750 = 0LL;
  qword_491748 = 0LL;
  qword_491740 = (uint64_t)&qword_491748;
  return result;
}

uint64_t sub_3A6578()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491758, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_491770, (unsigned int *)v1, 1LL);
  qword_491798 = 0LL;
  qword_491790 = 0LL;
  qword_491788 = (uint64_t)&qword_491790;
  return result;
}

uint64_t **sub_3A6644()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4917A0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4917B8, (unsigned int *)v1, 8LL);
  qword_4917E0 = 0LL;
  qword_4917D8 = 0LL;
  qword_4917D0 = (uint64_t)&qword_4917D8;
  return result;
}

uint64_t *sub_3A6710()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4917E8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491800, (unsigned int *)v1, 1LL);
  qword_491828 = 0LL;
  qword_491820 = 0LL;
  qword_491818 = (uint64_t)&qword_491820;
  qword_491830 = 0x70636269706D7372LL;
  dword_491838 = 0;
  byte_49183C = 0;
  LODWORD(v1[0]) = 1987276900;
  sub_7A22C((uint64_t)&unk_491840, (unsigned int *)v1, 1LL);
  word_491858 = word_491858 & 0xF800 | 0x635;
  qword_491860 = 0x7063626970636F70LL;
  dword_491868 = 0;
  byte_49186C = 0;
  uint64_t result = sub_86550(qword_491870, (uint64_t)&unk_491800);
  word_491888 = word_491888 & 0xF800 | 0x635;
  return result;
}

uint64_t *sub_3A6874()
{
  unsigned int v1 = 1986295651;
  sub_7A22C((uint64_t)&unk_491890, &v1, 1LL);
  qword_4918A8 = 0x7063787870737470LL;
  dword_4918B0 = 0;
  byte_4918B4 = 0;
  uint64_t result = sub_86550(qword_4918B8, (uint64_t)&unk_491890);
  word_4918D0 = word_4918D0 & 0xF800 | 0x21;
  return result;
}

uint64_t *sub_3A68F4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4918D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4918F0, (unsigned int *)v1, 1LL);
  qword_491918 = 0LL;
  qword_491910 = 0LL;
  qword_491908 = (uint64_t)&qword_491910;
  qmemcpy(&qword_491920, "pcspiwcpnupe", 12);
  byte_49192C = 1;
  uint64_t result = sub_86550(qword_491930, (uint64_t)&unk_4918F0);
  word_491948 = word_491948 & 0xF800 | 0x61E;
  return result;
}

float sub_3A6A18()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491950, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491968, (unsigned int *)v1, 8LL);
  qword_491990 = 0LL;
  qword_491988 = 0LL;
  qword_491980 = (uint64_t)&qword_491988;
  return sub_157A88((uint64_t)&unk_491998, 0, -96.0, 0.0);
}

void sub_3A6B00()
{
  int v0 = objc_autoreleasePoolPush();
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491A78, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_491A90, (unsigned int *)v1, 1LL);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_3A6BC8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491AA8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_491AC0, (unsigned int *)v1, 1LL);
  qword_491AE8 = 0LL;
  qword_491AE0 = 0LL;
  qword_491AD8 = (uint64_t)&qword_491AE0;
  return result;
}

uint64_t sub_3A6C94()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491AF0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_491B08, (unsigned int *)v1, 1LL);
  qword_491B30 = 0LL;
  qword_491B28 = 0LL;
  qword_491B20 = (uint64_t)&qword_491B28;
  return result;
}

void *sub_3A6D60()
{
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_491B38, (unsigned int *)v18, 1LL);
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_491B50, (unsigned int *)v18, 8LL);
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_491B68 = 3;
  sub_7A22C((uint64_t)&unk_491B70, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_491B88 = 3;
  sub_7A22C((uint64_t)&unk_491B90, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_491BA8 = 3;
  sub_7A22C((uint64_t)&unk_491BB0, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_491BC8 = 3;
  sub_7A22C((uint64_t)&unk_491BD0, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_491BE8 = 3;
  sub_7A22C((uint64_t)&unk_491BF0, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_491C08 = 3;
  sub_7A22C((uint64_t)&unk_491C10, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_491C28 = 2;
  sub_7A22C((uint64_t)&unk_491C30, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_491C48 = 2;
  sub_7A22C((uint64_t)&unk_491C50, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_491C68 = 2;
  sub_7A22C((uint64_t)&unk_491C70, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_491C88 = 2;
  sub_7A22C((uint64_t)&unk_491C90, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_491CA8 = 2;
  sub_7A22C((uint64_t)&unk_491CB0, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_491CC8 = 2;
  sub_7A22C((uint64_t)&unk_491CD0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_491CE8 = 2;
  sub_7A22C((uint64_t)&unk_491CF0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_491D08 = 2;
  sub_7A22C((uint64_t)&unk_491D10, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_491D28 = 2;
  sub_7A22C((uint64_t)&unk_491D30, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_491D48 = 3;
  sub_7A22C((uint64_t)&unk_491D50, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_491D68 = 2;
  sub_7A22C((uint64_t)&unk_491D70, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_491D88 = 2;
  sub_7A22C((uint64_t)&unk_491D90, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_491DA8 = 2;
  sub_7A22C((uint64_t)&unk_491DB0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_491DC8 = 3;
  sub_7A22C((uint64_t)&unk_491DD0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_491DE8 = 2;
  sub_7A22C((uint64_t)&unk_491DF0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_491E08 = 3;
  sub_7A22C((uint64_t)&unk_491E10, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_491E28 = 2;
  sub_7A22C((uint64_t)&unk_491E30, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_491E48 = 3;
  sub_7A22C((uint64_t)&unk_491E50, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_491E68 = 2;
  sub_7A22C((uint64_t)&unk_491E70, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_491E88 = 3;
  sub_7A22C((uint64_t)&unk_491E90, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_491EA8 = 2;
  sub_7A22C((uint64_t)&unk_491EB0, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_491EC8 = 3;
  sub_7A22C((uint64_t)&unk_491ED0, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_491EE8 = 2;
  sub_81EF8(qword_491EF0, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_491F08 = 3;
  sub_81EF8(qword_491F10, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_477E38;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_491F28, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    int v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_477E80;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_491F70, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_491F28;
  v4[1] = &unk_491F70;
  qword_491FB8 = (uint64_t)off_483190;
  qword_491FC8 = 0LL;
  unk_491FD0 = 0LL;
  qword_491FC0 = 0LL;
  sub_8201C(&qword_491FC0, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_477EC8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_491FD8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_477F10;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_492020, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_477F58;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_492068, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_477FA0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_4920B0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_477FE8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_4920F8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_492140 = (uint64_t)off_4831C0;
  dword_492148 = 6;
  qword_492150 = (uint64_t)off_4831F0;
  *(void *)algn_492158 = &qword_492140;
  qword_492170 = 0LL;
  qword_492168 = 0LL;
  qword_492160 = (uint64_t)&qword_492168;
  return result;
}

void sub_3A76D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t sub_3A776C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_492508, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_492520, (unsigned int *)v1, 1LL);
  qword_492548 = 0LL;
  qword_492540 = 0LL;
  qword_492538 = (uint64_t)&qword_492540;
  return result;
}

uint64_t sub_3A7838()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_492550, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_492568, (unsigned int *)v1, 1LL);
  qword_492590 = 0LL;
  qword_492588 = 0LL;
  qword_492580 = (uint64_t)&qword_492588;
  return result;
}

uint64_t **sub_3A7904()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_492598, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4925B0, (unsigned int *)v1, 8LL);
  qword_4925D8 = 0LL;
  qword_4925D0 = 0LL;
  qword_4925C8 = (uint64_t)&qword_4925D0;
  return result;
}

void sub_3A79D0()
{
  int v0 = objc_autoreleasePoolPush();
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4925E0, (unsigned int *)v1, 8LL);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_3A7A78()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4925F8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_492610, (unsigned int *)v1, 1LL);
  qword_492638 = 0LL;
  qword_492630 = 0LL;
  qword_492628 = (uint64_t)&qword_492630;
  return result;
}

double sub_3A7B44()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_492640, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_492658, (unsigned int *)v2, 8LL);
  qword_492680 = 0LL;
  qword_492678 = 0LL;
  qword_492670 = (uint64_t)&qword_492678;
  int v0 = (char *)operator new(0x48uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)int v0 = off_47DC18;
  *((void *)v0 + 4) = 0x5F737776766F6C69LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  double result = 0.0;
  *((void *)v0 + 3) = off_47DC50;
  *(_OWORD *)(v0 + 44) = xmmword_402D48;
  qword_492688 = (uint64_t)(v0 + 24);
  unk_492690 = v0;
  return result;
}

uint64_t **sub_3A7C6C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_492798, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_7A2A4((uint64_t **)&unk_4927B0, (unsigned int *)v1, 8LL);
  qword_4927D8 = 0LL;
  qword_4927D0 = 0LL;
  qword_4927C8 = (uint64_t)&qword_4927D0;
  return result;
}

char *sub_3A7D38()
{
  LODWORD(v3[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4927F8, (unsigned int *)v3, 1LL);
  v3[8] = off_486408;
  v3[9] = *(_OWORD *)"lovc";
  v3[10] = xmmword_486428;
  v3[11] = *(_OWORD *)&off_486438;
  v3[4] = xmmword_4863C8;
  v3[5] = *(_OWORD *)&off_4863D8;
  v3[6] = *(_OWORD *)"lovl";
  v3[7] = unk_4863F8;
  v3[0] = *(_OWORD *)"ulov";
  v3[1] = unk_486398;
  _OWORD v3[2] = off_4863A8;
  v3[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_492810, (unsigned int *)v3, 8LL);
  qword_492838 = 0LL;
  qword_492830 = 0LL;
  qword_492828 = (uint64_t)&qword_492830;
  qword_492840 = 0x6F757470766F6C64LL;
  dword_492848 = 0;
  qword_492858 = 0LL;
  unk_492860 = 0LL;
  qword_492850 = 0LL;
  int v0 = operator new(8uLL);
  qword_492850 = (uint64_t)v0;
  *int v0 = 0x7061327470687042LL;
  qword_492858 = (uint64_t)(v0 + 1);
  unk_492860 = v0 + 1;
  qword_492870 = 0LL;
  unk_492878 = 0LL;
  qword_492868 = 0LL;
  uint64_t v1 = (char *)operator new(0xCuLL);
  qword_492870 = (uint64_t)(v1 + 12);
  unk_492878 = v1 + 12;
  qmemcpy(v1, "bphptbmptfhp", 12);
  qword_492868 = (uint64_t)v1;
  qword_492888 = 0LL;
  unk_492890 = 0LL;
  qword_492880 = 0LL;
  double result = (char *)operator new(0xCuLL);
  qword_492888 = (uint64_t)(result + 12);
  unk_492890 = result + 12;
  qmemcpy(result, "oelpielptelp", 12);
  qword_492880 = (uint64_t)result;
  return result;
}

uint64_t **sub_3A7ED0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_492898, (unsigned int *)v1, 8LL);
}

uint64_t sub_3A7F60()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4928B0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4928C8, (unsigned int *)v1, 1LL);
  qword_4928F0 = 0LL;
  qword_4928E8 = 0LL;
  qword_4928E0 = (uint64_t)&qword_4928E8;
  return result;
}

void *sub_3A802C()
{
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_4928F8, (unsigned int *)v18, 1LL);
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_492910, (unsigned int *)v18, 8LL);
  qword_492938 = 0LL;
  qword_492930 = 0LL;
  qword_492928 = (uint64_t)&qword_492930;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_492940 = 3;
  sub_7A22C((uint64_t)&algn_492944[4], (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_492960 = 3;
  sub_7A22C((uint64_t)&algn_492964[4], (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_492980 = 3;
  sub_7A22C((uint64_t)&algn_492984[4], (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_4929A0 = 3;
  sub_7A22C((uint64_t)&algn_4929A4[4], (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_4929C0 = 3;
  sub_7A22C((uint64_t)&algn_4929C4[4], (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_4929E0 = 3;
  sub_7A22C((uint64_t)&algn_4929E4[4], (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_492A00 = 2;
  sub_7A22C((uint64_t)&algn_492A04[4], (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_492A20 = 2;
  sub_7A22C((uint64_t)&algn_492A24[4], (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_492A40 = 2;
  sub_7A22C((uint64_t)&algn_492A44[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_492A60 = 2;
  sub_7A22C((uint64_t)&algn_492A64[4], (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_492A80 = 2;
  sub_7A22C((uint64_t)&algn_492A84[4], (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_492AA0 = 2;
  sub_7A22C((uint64_t)&algn_492AA4[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_492AC0 = 2;
  sub_7A22C((uint64_t)&algn_492AC4[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_492AE0 = 2;
  sub_7A22C((uint64_t)&algn_492AE4[4], (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_492B00 = 2;
  sub_7A22C((uint64_t)&algn_492B04[4], (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_492B20 = 3;
  sub_7A22C((uint64_t)&algn_492B24[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_492B40 = 2;
  sub_7A22C((uint64_t)&algn_492B44[4], (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_492B60 = 2;
  sub_7A22C((uint64_t)&algn_492B64[4], (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_492B80 = 2;
  sub_7A22C((uint64_t)&algn_492B84[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_492BA0 = 3;
  sub_7A22C((uint64_t)&algn_492BA4[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_492BC0 = 2;
  sub_7A22C((uint64_t)&algn_492BC4[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_492BE0 = 3;
  sub_7A22C((uint64_t)&algn_492BE4[4], (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_492C00 = 2;
  sub_7A22C((uint64_t)&algn_492C04[4], (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_492C20 = 3;
  sub_7A22C((uint64_t)&algn_492C24[4], (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_492C40 = 2;
  sub_7A22C((uint64_t)&algn_492C44[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_492C60 = 3;
  sub_7A22C((uint64_t)&algn_492C64[4], (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_492C80 = 2;
  sub_7A22C((uint64_t)&algn_492C84[4], (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_492CA0 = 3;
  sub_7A22C((uint64_t)&algn_492CA4[4], (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_492CC0 = 2;
  sub_81EF8((uint64_t *)&algn_492CC4[4], (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_492CE0 = 3;
  sub_81EF8((uint64_t *)&algn_492CE4[4], (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_478B98;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_492D00, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    int v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_478BE0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_492D48, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_492D00;
  v4[1] = &unk_492D48;
  qword_492D90 = (uint64_t)off_483190;
  qword_492DA0 = 0LL;
  unk_492DA8 = 0LL;
  qword_492D98 = 0LL;
  sub_8201C(&qword_492D98, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_478C28;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_492DB0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_478C70;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_492DF8, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_478CB8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_492E40, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_478D00;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_492E88, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_478D48;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_492ED0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_492F18 = (uint64_t)off_4831C0;
  dword_492F20 = 6;
  qword_492F28 = (uint64_t)off_4831F0;
  unk_492F30 = &qword_492F18;
  return result;
}

void sub_3A899C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t **sub_3A8A38()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_492F38, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_492F50, (unsigned int *)v1, 8LL);
  qword_492F78 = 0LL;
  qword_492F70 = 0LL;
  qword_492F68 = (uint64_t)&qword_492F70;
  return result;
}

void sub_3A8B04()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_3A8BB8(_Unwind_Exception *a1)
{
}

void sub_3A8BD0()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_492F80, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_492F98, (unsigned int *)v2, 8LL);
  qword_492FC0 = 0LL;
  qword_492FB8 = 0LL;
  qword_492FB0 = (uint64_t)&qword_492FB8;
  else {
    int v1 = 3;
  }
  dword_492FC8 = v1;
  strcpy((char *)&xmmword_492FD0, "vascfdmi");
  BYTE12(xmmword_492FD0) = 0;
  objc_autoreleasePoolPop(v0);
}

uint64_t **sub_3A8CF4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_493070, (unsigned int *)v1, 8LL);
}

uint64_t sub_3A8D84()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_493088, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4930A0, (unsigned int *)v1, 1LL);
  qword_4930C8 = 0LL;
  qword_4930C0 = 0LL;
  qword_4930B8 = (uint64_t)&qword_4930C0;
  return result;
}

uint64_t sub_3A8E50()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4930D0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4930E8, (unsigned int *)v1, 1LL);
  qword_493110 = 0LL;
  qword_493108 = 0LL;
  qword_493100 = (uint64_t)&qword_493108;
  return result;
}

uint64_t sub_3A8F1C()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_493118, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_493130, (unsigned int *)v2, 8LL);
  qword_493158 = 0LL;
  qword_493150 = 0LL;
  qword_493148 = (uint64_t)&qword_493150;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_493160 = v1;
  return result;
}

uint64_t sub_3A900C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_493190, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4931A8, (unsigned int *)v1, 1LL);
  qword_4931D0 = 0LL;
  qword_4931C8 = 0LL;
  qword_4931C0 = (uint64_t)&qword_4931C8;
  return result;
}

uint64_t sub_3A90D8()
{
  __int128 v29 = *(_OWORD *)"lovc";
  __int128 v30 = xmmword_486428;
  __int128 v31 = *(_OWORD *)&off_486438;
  __int128 v24 = xmmword_4863C8;
  __int128 v25 = *(_OWORD *)&off_4863D8;
  __int128 v26 = *(_OWORD *)"lovl";
  __int128 v27 = unk_4863F8;
  __int128 v28 = off_486408;
  *(_OWORD *)__int128 v22 = *(_OWORD *)"ulov";
  *(_OWORD *)&v22[16] = unk_486398;
  *(_OWORD *)&v22[32] = off_4863A8;
  __int128 v23 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4931D8, (unsigned int *)v22, 8LL);
  *(_DWORD *)__int128 v22 = 1986295651;
  sub_7A22C((uint64_t)&unk_4931F0, (unsigned int *)v22, 1LL);
  qword_493218 = 0LL;
  qword_493210 = 0LL;
  qword_493208 = (uint64_t)&qword_493210;
  qmemcpy(v19, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v19));
  qmemcpy(v22, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_493220 = 3;
  sub_7A22C((uint64_t)&algn_493224[4], (unsigned int *)v22, 8LL);
  qmemcpy(v22, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_493240 = 3;
  sub_7A22C((uint64_t)&algn_493244[4], (unsigned int *)v22, 9LL);
  *(_OWORD *)__int128 v22 = xmmword_403140;
  dword_493260 = 3;
  sub_7A22C((uint64_t)&algn_493264[4], (unsigned int *)v22, 4LL);
  *(_OWORD *)__int128 v22 = xmmword_403150;
  dword_493280 = 3;
  sub_7A22C((uint64_t)&algn_493284[4], (unsigned int *)v22, 4LL);
  qmemcpy(v22, "cgpvivpvovpvcvmrsibi", 20);
  dword_4932A0 = 3;
  sub_7A22C((uint64_t)&algn_4932A4[4], (unsigned int *)v22, 5LL);
  qmemcpy(v22, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_4932C0 = 3;
  sub_7A22C((uint64_t)&algn_4932C4[4], (unsigned int *)v22, 7LL);
  *(_OWORD *)__int128 v22 = v19[1];
  *(_OWORD *)&v22[16] = v19[0];
  dword_4932E0 = 2;
  sub_7A22C((uint64_t)&algn_4932E4[4], (unsigned int *)v22, 8LL);
  *(_OWORD *)__int128 v22 = xmmword_403160;
  dword_493300 = 2;
  sub_7A22C((uint64_t)&algn_493304[4], (unsigned int *)v22, 4LL);
  *(_DWORD *)__int128 v22 = 1918990112;
  dword_493320 = 2;
  sub_7A22C((uint64_t)&algn_493324[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1836281204;
  dword_493340 = 2;
  sub_7A22C((uint64_t)&algn_493344[4], (unsigned int *)v22, 1LL);
  *(void *)__int128 v22 = 0x7670766976706763LL;
  dword_493360 = 2;
  sub_7A22C((uint64_t)&algn_493364[4], (unsigned int *)v22, 2LL);
  *(_DWORD *)__int128 v22 = 1987080813;
  dword_493380 = 2;
  sub_7A22C((uint64_t)&algn_493384[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1987208039;
  dword_4933A0 = 2;
  sub_7A22C((uint64_t)&algn_4933A4[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1919776355;
  dword_4933C0 = 2;
  sub_7A22C((uint64_t)&algn_4933C4[4], (unsigned int *)v22, 1LL);
  qmemcpy(v22, "plmirvmierpspcpspcts", 20);
  dword_4933E0 = 2;
  sub_7A22C((uint64_t)&algn_4933E4[4], (unsigned int *)v22, 5LL);
  *(_DWORD *)__int128 v22 = 1768778864;
  dword_493400 = 3;
  sub_7A22C((uint64_t)&algn_493404[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1768776806;
  dword_493420 = 2;
  sub_7A22C((uint64_t)&algn_493424[4], (unsigned int *)v22, 1LL);
  qmemcpy(v22, "pctspcpserps", 12);
  dword_493440 = 2;
  sub_7A22C((uint64_t)&algn_493444[4], (unsigned int *)v22, 3LL);
  *(_DWORD *)__int128 v22 = 1751212899;
  dword_493460 = 2;
  sub_7A22C((uint64_t)&algn_493464[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1751212899;
  dword_493480 = 3;
  sub_7A22C((uint64_t)&algn_493484[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1986556788;
  dword_4934A0 = 2;
  sub_7A22C((uint64_t)&algn_4934A4[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1986556788;
  dword_4934C0 = 3;
  sub_7A22C((uint64_t)&algn_4934C4[4], (unsigned int *)v22, 1LL);
  v19[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v22, "gcrvmorvtshvisrvtsav", 20);
  dword_4934E0 = 2;
  sub_7A22C((uint64_t)&algn_4934E4[4], (unsigned int *)v22, 5LL);
  qmemcpy(v22, "gcrvmorvtshvisrvtsav", 20);
  dword_493500 = 3;
  sub_7A22C((uint64_t)&algn_493504[4], (unsigned int *)v22, 5LL);
  *(_DWORD *)__int128 v22 = 1986098036;
  dword_493520 = 2;
  sub_7A22C((uint64_t)&algn_493524[4], (unsigned int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 1986098036;
  dword_493540 = 3;
  sub_7A22C((uint64_t)&algn_493544[4], (unsigned int *)v22, 1LL);
  *(void *)__int128 v22 = 0x6563692065637620LL;
  dword_493560 = 2;
  sub_7A22C((uint64_t)&algn_493564[4], (unsigned int *)v22, 2LL);
  *(void *)__int128 v22 = 0x6563692065637620LL;
  dword_493580 = 3;
  sub_7A22C((uint64_t)&algn_493584[4], (unsigned int *)v22, 2LL);
  *(_DWORD *)__int128 v22 = 0;
  dword_4935A0 = 2;
  sub_81EF8((uint64_t *)&algn_4935A4[4], (int *)v22, 1LL);
  *(_DWORD *)__int128 v22 = 0;
  dword_4935C0 = 3;
  sub_81EF8((uint64_t *)&algn_4935C4[4], (int *)v22, 1LL);
  *(void *)__int128 v22 = &off_479760;
  *(void *)&v22[24] = v22;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_4935E0, (uint64_t)v22, (__int128 *)__p, 0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v0 = *(void **)&v22[24];
  if (*(_BYTE **)&v22[24] == v22)
  {
    uint64_t v1 = 4LL;
    unsigned __int8 v0 = v22;
  }

  else
  {
    if (!*(void *)&v22[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v22 = &off_4797A8;
  *(void *)&v22[24] = v22;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_493628, (uint64_t)v22, (__int128 *)__p, 0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v22[24];
  if (*(_BYTE **)&v22[24] == v22)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v22;
  }

  else
  {
    if (!*(void *)&v22[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_4935E0;
  v4[1] = &unk_493628;
  qword_493670 = (uint64_t)off_483190;
  qword_493680 = 0LL;
  unk_493688 = 0LL;
  qword_493678 = 0LL;
  sub_8201C(&qword_493678, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v22 = &off_4797F0;
  *(void *)&v22[24] = v22;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_493690, (uint64_t)v22, (__int128 *)__p, 0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v22[24];
  if (*(_BYTE **)&v22[24] == v22)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v22;
  }

  else
  {
    if (!*(void *)&v22[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v22 = &off_479838;
  *(void *)&v22[24] = v22;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_4936D8, (uint64_t)v22, (__int128 *)__p, 1);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v22[24];
  if (*(_BYTE **)&v22[24] == v22)
  {
    uint64_t v8 = 4LL;
    int v7 = v22;
  }

  else
  {
    if (!*(void *)&v22[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v22 = &off_479880;
  *(void *)&v22[24] = v22;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_493720, (uint64_t)v22, (__int128 *)__p, 1);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v22[24];
  if (*(_BYTE **)&v22[24] == v22)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v22;
  }

  else
  {
    if (!*(void *)&v22[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v22 = &off_4798C8;
  *(void *)&v22[24] = v22;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_493768, (uint64_t)v22, (__int128 *)__p, 0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v22[24];
  if (*(_BYTE **)&v22[24] == v22)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v22;
  }

  else
  {
    if (!*(void *)&v22[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v22 = &off_479910;
  *(void *)&v22[24] = v22;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_4937B0, (uint64_t)v22, (__int128 *)__p, 0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  __int128 v13 = *(void **)&v22[24];
  if (*(_BYTE **)&v22[24] == v22)
  {
    uint64_t v14 = 4LL;
    __int128 v13 = v22;
    goto LABEL_49;
  }

  if (*(void *)&v22[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }

  qword_4937F8 = (uint64_t)off_4831C0;
  dword_493800 = 6;
  qword_493808 = (uint64_t)off_4831F0;
  unk_493810 = &qword_4937F8;
  qword_493820 = 0LL;
  unk_493828 = 0LL;
  qword_493818 = 0LL;
  __int128 v15 = operator new(8uLL);
  qword_493818 = (uint64_t)v15;
  *__int128 v15 = 0x400FFFFFFFFLL;
  qword_493820 = (uint64_t)(v15 + 1);
  unk_493828 = v15 + 1;
  byte_493830 = 0;
  byte_493838 = 0;
  qword_493848 = 0LL;
  unk_493850 = 0LL;
  qword_493840 = 0LL;
  __int128 v16 = operator new(8uLL);
  qword_493840 = (uint64_t)v16;
  *__int128 v16 = 0x400FFFFFFFFLL;
  qword_493848 = (uint64_t)(v16 + 1);
  unk_493850 = v16 + 1;
  byte_493858 = 0;
  byte_493860 = 0;
  qword_493870 = 0LL;
  unk_493878 = 0LL;
  qword_493868 = 0LL;
  char v17 = operator new(8uLL);
  qword_493868 = (uint64_t)v17;
  *char v17 = 0x200FFFFFFFFLL;
  uint64_t result = (uint64_t)(v17 + 1);
  qword_493870 = result;
  unk_493878 = result;
  byte_493880 = 0;
  byte_493888 = 0;
  return result;
}

void sub_3A9ADC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

void sub_3A9B78()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4938F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4938F0))
    {
      v1[6] = off_4799A8;
      v1[7] = *(_OWORD *)&off_4799B8;
      int v1[8] = off_4799C8;
      v1[2] = off_479968;
      v1[3] = *(_OWORD *)&off_479978;
      v1[4] = off_479988;
      v1[5] = *(_OWORD *)&off_479998;
      v1[0] = off_479948;
      v1[1] = *(_OWORD *)&off_479958;
      sub_E7374((uint64_t)v1, 9LL);
      __cxa_guard_release(&qword_4938F0);
    }
  }

void sub_3A9C2C(_Unwind_Exception *a1)
{
}

uint64_t **sub_3A9C44()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_493890, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4938A8, (unsigned int *)v1, 8LL);
  qword_4938D0 = 0LL;
  qword_4938C8 = 0LL;
  qword_4938C0 = (uint64_t)&qword_4938C8;
  return result;
}

uint64_t sub_3A9D10()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_493910, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_493928, (unsigned int *)v2, 1LL);
  qword_493950 = 0LL;
  qword_493948 = 0LL;
  qword_493940 = (uint64_t)&qword_493948;
  qword_493960 = 0LL;
  unk_493968 = 0LL;
  qword_493958 = 0LL;
  unsigned __int8 v0 = operator new(0x10uLL);
  qword_493958 = (uint64_t)v0;
  *unsigned __int8 v0 = xmmword_403290;
  uint64_t result = (uint64_t)(v0 + 1);
  qword_493960 = result;
  unk_493968 = result;
  return result;
}

void *sub_3A9E10()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_493970, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_493988, (unsigned int *)v18, 1LL);
  qword_4939B0 = 0LL;
  qword_4939A8 = 0LL;
  qword_4939A0 = (uint64_t)&qword_4939A8;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_4939B8 = 3;
  sub_7A22C((uint64_t)&unk_4939C0, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_4939D8 = 3;
  sub_7A22C((uint64_t)&unk_4939E0, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_4939F8 = 3;
  sub_7A22C((uint64_t)&unk_493A00, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_493A18 = 3;
  sub_7A22C((uint64_t)&unk_493A20, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_493A38 = 3;
  sub_7A22C((uint64_t)&unk_493A40, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_493A58 = 3;
  sub_7A22C((uint64_t)&unk_493A60, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_493A78 = 2;
  sub_7A22C((uint64_t)&unk_493A80, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_493A98 = 2;
  sub_7A22C((uint64_t)&unk_493AA0, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_493AB8 = 2;
  sub_7A22C((uint64_t)&unk_493AC0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_493AD8 = 2;
  sub_7A22C((uint64_t)&unk_493AE0, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_493AF8 = 2;
  sub_7A22C((uint64_t)&unk_493B00, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_493B18 = 2;
  sub_7A22C((uint64_t)&unk_493B20, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_493B38 = 2;
  sub_7A22C((uint64_t)&unk_493B40, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_493B58 = 2;
  sub_7A22C((uint64_t)&unk_493B60, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_493B78 = 2;
  sub_7A22C((uint64_t)&unk_493B80, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_493B98 = 3;
  sub_7A22C((uint64_t)&unk_493BA0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_493BB8 = 2;
  sub_7A22C((uint64_t)&unk_493BC0, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_493BD8 = 2;
  sub_7A22C((uint64_t)&unk_493BE0, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_493BF8 = 2;
  sub_7A22C((uint64_t)&unk_493C00, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_493C18 = 3;
  sub_7A22C((uint64_t)&unk_493C20, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_493C38 = 2;
  sub_7A22C((uint64_t)&unk_493C40, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_493C58 = 3;
  sub_7A22C((uint64_t)&unk_493C60, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_493C78 = 2;
  sub_7A22C((uint64_t)&unk_493C80, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_493C98 = 3;
  sub_7A22C((uint64_t)&unk_493CA0, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_493CB8 = 2;
  sub_7A22C((uint64_t)&unk_493CC0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_493CD8 = 3;
  sub_7A22C((uint64_t)&unk_493CE0, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_493CF8 = 2;
  sub_7A22C((uint64_t)&unk_493D00, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_493D18 = 3;
  sub_7A22C((uint64_t)&unk_493D20, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_493D38 = 2;
  sub_81EF8(qword_493D40, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_493D58 = 3;
  sub_81EF8(qword_493D60, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_4799E8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_493D78, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    unsigned __int8 v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_479A30;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_493DC0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_493D78;
  v4[1] = &unk_493DC0;
  qword_493E08 = (uint64_t)off_483190;
  qword_493E18 = 0LL;
  unk_493E20 = 0LL;
  qword_493E10 = 0LL;
  sub_8201C(&qword_493E10, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_479A78;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_493E28, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_479AC0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_493E70, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_479B08;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_493EB8, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_479B50;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_493F00, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_479B98;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_493F48, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_493F90 = (uint64_t)off_4831C0;
  dword_493F98 = 6;
  qword_493FA0 = (uint64_t)off_4831F0;
  *(void *)algn_493FA8 = &qword_493F90;
  return result;
}

void sub_3AA780( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t sub_3AA81C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_493FB8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_493FD0, (unsigned int *)v1, 1LL);
  qword_493FF8 = 0LL;
  qword_493FF0 = 0LL;
  qword_493FE8 = (uint64_t)&qword_493FF0;
  return result;
}

uint64_t **sub_3AA8E8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_494000, (unsigned int *)v1, 8LL);
}

double sub_3AA978()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_494018, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_494030, (unsigned int *)v2, 1LL);
  qword_494058 = 0LL;
  qword_494050 = 0LL;
  qword_494048 = (uint64_t)&qword_494050;
  qword_494060 = 0x7063776970646C6ELL;
  dword_494068 = 0;
  byte_49406C = 0;
  sub_86550(qword_494070, (uint64_t)&unk_494030);
  word_494088 = word_494088 & 0xF800 | 0x421;
  qword_494090 = 0x7063776970756C6ELL;
  dword_494098 = 0;
  byte_49409C = 0;
  sub_86550(qword_4940A0, (uint64_t)&unk_494030);
  word_4940B8 = word_4940B8 & 0xF800 | 0x420;
  qword_4940C8 = 0LL;
  unk_4940D0 = 0LL;
  qword_4940C0 = 0LL;
  unsigned __int8 v0 = operator new(0x24uLL);
  qword_4940C8 = (uint64_t)v0 + 36;
  unk_4940D0 = (char *)v0 + 36;
  double result = 1.58366013e190;
  *unsigned __int8 v0 = xmmword_4032A0;
  v0[1] = xmmword_4032B0;
  *((_DWORD *)v0 + 8) = 0;
  qword_4940C0 = (uint64_t)v0;
  return result;
}

void *sub_3AAB10()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4940D8, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_4940F0, (unsigned int *)v18, 1LL);
  qword_494118 = 0LL;
  qword_494110 = 0LL;
  qword_494108 = (uint64_t)&qword_494110;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_494120 = 3;
  sub_7A22C((uint64_t)&algn_494124[4], (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_494140 = 3;
  sub_7A22C((uint64_t)&algn_494144[4], (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_494160 = 3;
  sub_7A22C((uint64_t)&algn_494164[4], (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_494180 = 3;
  sub_7A22C((uint64_t)&algn_494184[4], (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_4941A0 = 3;
  sub_7A22C((uint64_t)&algn_4941A4[4], (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_4941C0 = 3;
  sub_7A22C((uint64_t)&algn_4941C4[4], (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_4941E0 = 2;
  sub_7A22C((uint64_t)&algn_4941E4[4], (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_494200 = 2;
  sub_7A22C((uint64_t)&algn_494204[4], (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_494220 = 2;
  sub_7A22C((uint64_t)&algn_494224[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_494240 = 2;
  sub_7A22C((uint64_t)&algn_494244[4], (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_494260 = 2;
  sub_7A22C((uint64_t)&algn_494264[4], (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_494280 = 2;
  sub_7A22C((uint64_t)&algn_494284[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_4942A0 = 2;
  sub_7A22C((uint64_t)&algn_4942A4[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_4942C0 = 2;
  sub_7A22C((uint64_t)&algn_4942C4[4], (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_4942E0 = 2;
  sub_7A22C((uint64_t)&algn_4942E4[4], (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_494300 = 3;
  sub_7A22C((uint64_t)&algn_494304[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_494320 = 2;
  sub_7A22C((uint64_t)&algn_494324[4], (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_494340 = 2;
  sub_7A22C((uint64_t)&algn_494344[4], (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_494360 = 2;
  sub_7A22C((uint64_t)&algn_494364[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_494380 = 3;
  sub_7A22C((uint64_t)&algn_494384[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_4943A0 = 2;
  sub_7A22C((uint64_t)&algn_4943A4[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_4943C0 = 3;
  sub_7A22C((uint64_t)&algn_4943C4[4], (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_4943E0 = 2;
  sub_7A22C((uint64_t)&algn_4943E4[4], (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_494400 = 3;
  sub_7A22C((uint64_t)&algn_494404[4], (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_494420 = 2;
  sub_7A22C((uint64_t)&algn_494424[4], (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_494440 = 3;
  sub_7A22C((uint64_t)&algn_494444[4], (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_494460 = 2;
  sub_7A22C((uint64_t)&algn_494464[4], (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_494480 = 3;
  sub_7A22C((uint64_t)&algn_494484[4], (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_4944A0 = 2;
  sub_81EF8((uint64_t *)&algn_4944A4[4], (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_4944C0 = 3;
  sub_81EF8((uint64_t *)&algn_4944C4[4], (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_479E80;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_4944E0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    unsigned __int8 v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_479EC8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_494528, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_4944E0;
  v4[1] = &unk_494528;
  qword_494570 = (uint64_t)off_483190;
  qword_494580 = 0LL;
  unk_494588 = 0LL;
  qword_494578 = 0LL;
  sub_8201C(&qword_494578, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_479F10;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_494590, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_479F58;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_4945D8, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_479FA0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_494620, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_479FE8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_494668, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_47A030;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_4946B0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  double result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    double result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    double result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_4946F8 = (uint64_t)off_4831C0;
  dword_494700 = 6;
  qword_494708 = (uint64_t)off_4831F0;
  unk_494710 = &qword_4946F8;
  return result;
}

void sub_3AB480( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t **sub_3AB51C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_499CA0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_7A2A4((uint64_t **)&unk_499CB8, (unsigned int *)v1, 8LL);
  qword_499CE0 = 0LL;
  qword_499CD8 = 0LL;
  qword_499CD0 = (uint64_t)&qword_499CD8;
  return result;
}

uint64_t **sub_3AB5E8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49C7B8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_7A2A4((uint64_t **)&unk_49C7D0, (unsigned int *)v1, 8LL);
  qword_49C7F8 = 0LL;
  qword_49C7F0 = 0LL;
  qword_49C7E8 = (uint64_t)&qword_49C7F0;
  return result;
}

uint64_t sub_3AB6B4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49C800, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49C818, (unsigned int *)v1, 1LL);
  qword_49C840 = 0LL;
  qword_49C838 = 0LL;
  qword_49C830 = (uint64_t)&qword_49C838;
  return result;
}

float sub_3AB780()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49C848, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49C860, (unsigned int *)v1, 8LL);
  qword_49C888 = 0LL;
  qword_49C880 = 0LL;
  qword_49C878 = (uint64_t)&qword_49C880;
  return sub_157A88((uint64_t)&unk_49C890, 0, -96.0, 0.0);
}

uint64_t sub_3AB868()
{
  unsigned int v1 = 1986295651;
  return sub_7A22C((uint64_t)&unk_49C8C0, &v1, 1LL);
}

uint64_t sub_3AB8A0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49C8D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  return sub_7A22C((uint64_t)&unk_49C8F0, (unsigned int *)v1, 1LL);
}

uint64_t **sub_3AB950()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49C918, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49C930, (unsigned int *)v1, 8LL);
  qword_49C958 = 0LL;
  qword_49C950 = 0LL;
  qword_49C948 = (uint64_t)&qword_49C950;
  return result;
}

uint64_t sub_3ABA1C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49C960, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49C978, (unsigned int *)v1, 1LL);
  qword_49C9A0 = 0LL;
  qword_49C998 = 0LL;
  qword_49C990 = (uint64_t)&qword_49C998;
  return result;
}

uint64_t **sub_3ABAE8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49C9E8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49CA00, (unsigned int *)v1, 8LL);
  qword_49CA28 = 0LL;
  qword_49CA20 = 0LL;
  qword_49CA18 = (uint64_t)&qword_49CA20;
  return result;
}

uint64_t sub_3ABBB4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CA30, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CA48, (unsigned int *)v1, 1LL);
  qword_49CA70 = 0LL;
  qword_49CA68 = 0LL;
  qword_49CA60 = (uint64_t)&qword_49CA68;
  return result;
}

uint64_t sub_3ABC80()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CA88, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CAA0, (unsigned int *)v1, 1LL);
  qword_49CAC8 = 0LL;
  qword_49CAC0 = 0LL;
  qword_49CAB8 = (uint64_t)&qword_49CAC0;
  return result;
}

uint64_t sub_3ABD4C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CAD0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CAE8, (unsigned int *)v1, 1LL);
  qword_49CB10 = 0LL;
  qword_49CB08 = 0LL;
  qword_49CB00 = (uint64_t)&qword_49CB08;
  return result;
}

uint64_t sub_3ABE18()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CB18, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CB30, (unsigned int *)v1, 1LL);
  qword_49CB58 = 0LL;
  qword_49CB50 = 0LL;
  qword_49CB48 = (uint64_t)&qword_49CB50;
  return result;
}

uint64_t **sub_3ABEE4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49CB60, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49CB78, (unsigned int *)v1, 8LL);
  qword_49CBA0 = 0LL;
  qword_49CB98 = 0LL;
  qword_49CB90 = (uint64_t)&qword_49CB98;
  return result;
}

double sub_3ABFB0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CBA8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49CBC0, (unsigned int *)v1, 1LL);
  qword_49CBE8 = 0LL;
  qword_49CBE0 = 0LL;
  qword_49CBD8 = (uint64_t)&qword_49CBE0;
  qword_49CBF0 = 0x696E707473737263LL;
  dword_49CBF8 = 0;
  qword_49CC00 = 0x6F75747053436873LL;
  dword_49CC08 = 0;
  qword_49CC10 = 0x6F75747053434474LL;
  dword_49CC18 = 0;
  qword_49CC20 = 0x6F75747053434465LL;
  dword_49CC28 = 0;
  double result = 8.13208634e228;
  qword_49CC30 = 0x6F75747053434461LL;
  dword_49CC38 = 0;
  return result;
}

uint64_t sub_3AC0F4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CC48, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CC60, (unsigned int *)v1, 1LL);
  qword_49CC88 = 0LL;
  qword_49CC80 = 0LL;
  qword_49CC78 = (uint64_t)&qword_49CC80;
  return result;
}

uint64_t sub_3AC1C0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49CC90, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CCA8, (unsigned int *)v1, 8LL);
  qword_49CCD0 = 0LL;
  qword_49CCC8 = 0LL;
  qword_49CCC0 = (uint64_t)&qword_49CCC8;
  sub_DB44C((uint64_t)&dword_4A91C8, 0, 1836412020, 1836412020);
  sub_DB44C((uint64_t)&unk_49CCD8, 1, 1836412020, 1836412020);
  qword_4A9190 = 0x696D646600000001LL;
  xmmword_4A9198 = *(_OWORD *)sub_2FC95C();
  dword_4A91A8 = 0;
  qword_4A91B8 = 0LL;
  unk_4A91C0 = 0LL;
  qword_4A91B0 = 0LL;
  qword_4A84E8 = 0x696D646600000000LL;
  xmmword_4A84F0 = *(_OWORD *)sub_2FC95C();
  dword_4A8500 = 0;
  qword_4A8510 = 0LL;
  unk_4A8518 = 0LL;
  qword_4A8508 = 0LL;
  qword_4A9208 = 0LL;
  qword_4A9200 = (uint64_t)&qword_4A9208;
  qword_4A9220 = 0LL;
  qword_4A9210 = 0LL;
  unk_4A9218 = &qword_4A9220;
  qword_4A9238 = 0LL;
  qword_4A9228 = 0LL;
  unk_4A9230 = &qword_4A9238;
  qword_4A9240 = 0LL;
  qword_49CD20 = 0LL;
  qword_49CD18 = 0LL;
  qword_49CD10 = (uint64_t)&qword_49CD18;
  return sub_2CE400( (uint64_t)&unk_4A7CD8,  0LL,  &qword_402A88,  &qword_402A90,  &qword_402A98,  (uint64_t *)&unk_402AA0,  &xmmword_402AB0,  (uint64_t)&unk_402AC0);
}

uint64_t **sub_3AC3B4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49CD48, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_49CD60, (unsigned int *)v1, 8LL);
}

uint64_t sub_3AC464()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CD78, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CD90, (unsigned int *)v1, 1LL);
  qword_49CDB8 = 0LL;
  qword_49CDB0 = 0LL;
  qword_49CDA8 = (uint64_t)&qword_49CDB0;
  return result;
}

uint64_t sub_3AC530()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CDC0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  return sub_7A22C((uint64_t)&unk_49CDD8, (unsigned int *)v1, 1LL);
}

uint64_t sub_3AC5E0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CE00, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CE18, (unsigned int *)v1, 1LL);
  qword_49CE40 = 0LL;
  qword_49CE38 = 0LL;
  qword_49CE30 = (uint64_t)&qword_49CE38;
  return result;
}

uint64_t sub_3AC6AC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CE48, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49CE60, (unsigned int *)v1, 1LL);
  qword_49CE88 = 0LL;
  qword_49CE80 = 0LL;
  qword_49CE78 = (uint64_t)&qword_49CE80;
  return result;
}

uint64_t **sub_3AC778()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49CE90, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_49CEA8, (unsigned int *)v1, 8LL);
}

double sub_3AC828()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49CEC0, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49CED8, (unsigned int *)v2, 8LL);
  qword_49CF00 = 0LL;
  qword_49CEF8 = 0LL;
  qword_49CEF0 = (uint64_t)&qword_49CEF8;
  else {
    int v0 = 3;
  }
  dword_49CF08 = v0;
  qword_49CF10 = 0x676C6F6261766170LL;
  dword_49CF18 = 0;
  qword_49CF20 = 0x676C6F6277736167LL;
  dword_49CF28 = 0;
  qword_49CF30 = 0x6F75747064697663LL;
  dword_49CF38 = 0;
  double result = 8.13208713e228;
  qword_49CF40 = 0x6F757470766F6C64LL;
  dword_49CF48 = 0;
  return result;
}

uint64_t **sub_3AC978()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49CFD0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_7A2A4((uint64_t **)&unk_49CFE8, (unsigned int *)v1, 8LL);
  qword_49D010 = 0LL;
  qword_49D008 = 0LL;
  qword_49D000 = (uint64_t)&qword_49D008;
  return result;
}

uint64_t **sub_3ACA44()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49D018, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_7A2A4((uint64_t **)&unk_49D030, (unsigned int *)v1, 8LL);
  qword_49D058 = 0LL;
  qword_49D050 = 0LL;
  qword_49D048 = (uint64_t)&qword_49D050;
  return result;
}

uint64_t sub_3ACB10()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49D0D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49D0F0, (unsigned int *)v1, 1LL);
  qword_49D118 = 0LL;
  qword_49D110 = 0LL;
  qword_49D108 = (uint64_t)&qword_49D110;
  return result;
}

uint64_t sub_3ACBDC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49D120, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49D138, (unsigned int *)v1, 1LL);
  qword_49D160 = 0LL;
  qword_49D158 = 0LL;
  qword_49D150 = (uint64_t)&qword_49D158;
  return result;
}

uint64_t **sub_3ACCA8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49D168, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49D180, (unsigned int *)v1, 8LL);
  qword_49D1A8 = 0LL;
  qword_49D1A0 = 0LL;
  qword_49D198 = (uint64_t)&qword_49D1A0;
  return result;
}

uint64_t **sub_3ACD74()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49D1B0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49D1C8, (unsigned int *)v1, 8LL);
  qword_49D1F0 = 0LL;
  qword_49D1E8 = 0LL;
  qword_49D1E0 = (uint64_t)&qword_49D1E8;
  return result;
}

uint64_t sub_3ACE40()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49D1F8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49D210, (unsigned int *)v1, 1LL);
  qword_49D238 = 0LL;
  qword_49D230 = 0LL;
  qword_49D228 = (uint64_t)&qword_49D230;
  return result;
}

uint64_t sub_3ACF0C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49D390, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49D3A8, (unsigned int *)v1, 1LL);
  qword_49D3D0 = 0LL;
  qword_49D3C8 = 0LL;
  qword_49D3C0 = (uint64_t)&qword_49D3C8;
  return result;
}

uint64_t **sub_3ACFD8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49D3D8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49D3F0, (unsigned int *)v1, 8LL);
  qword_49D418 = 0LL;
  qword_49D410 = 0LL;
  qword_49D408 = (uint64_t)&qword_49D410;
  return result;
}

uint64_t sub_3AD0A4()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49D478, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49D490, (unsigned int *)v2, 1LL);
  qword_49D4B8 = 0LL;
  qword_49D4B0 = 0LL;
  qword_49D4A8 = (uint64_t)&qword_49D4B0;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_49D4C0 = v1;
  return result;
}

double sub_3AD194()
{
  int v4[8] = off_486408;
  v4[9] = *(_OWORD *)"lovc";
  v4[10] = xmmword_486428;
  v4[11] = *(_OWORD *)&off_486438;
  v4[4] = xmmword_4863C8;
  v4[5] = *(_OWORD *)&off_4863D8;
  v4[6] = *(_OWORD *)"lovl";
  v4[7] = unk_4863F8;
  v4[0] = *(_OWORD *)"ulov";
  v4[1] = unk_486398;
  v4[2] = off_4863A8;
  v4[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49D4C8, (unsigned int *)v4, 8LL);
  LODWORD(v4[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49D4E0, (unsigned int *)v4, 1LL);
  qword_49D500 = 0LL;
  qword_49D508 = 0LL;
  qword_49D4F8 = (uint64_t)&qword_49D500;
  xmmword_49D560 = xmmword_403170;
  xmmword_49D580 = xmmword_403170;
  xmmword_49D7E0 = xmmword_403180;
  xmmword_49D658 = xmmword_403180;
  int v0 = operator new(0x30uLL);
  *int v0 = 0;
  v0[4] = 0;
  v0[8] = 0;
  v0[12] = 0;
  v0[16] = 0;
  v0[20] = 0;
  v0[24] = 0;
  v0[40] = 0;
  qword_4A8610 = (uint64_t)v0;
  int v1 = (char *)operator new(0x48uLL);
  *((void *)v1 + 1) = 0LL;
  *((void *)v1 + 2) = 0LL;
  *(void *)int v1 = off_47DC18;
  *((void *)v1 + 4) = 0x5F737776766F6C69LL;
  *((_DWORD *)v1 + 10) = 0;
  *(void *)(v1 + 60) = 0x100000001LL;
  *(_OWORD *)(v1 + 44) = xmmword_402D48;
  *((void *)v1 + 3) = off_47DC50;
  qword_49D510 = (uint64_t)(v1 + 24);
  *(void *)algn_49D518 = v1;
  uint64_t v2 = (char *)operator new(0x48uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)uint64_t v2 = off_4817C8;
  *((void *)v2 + 4) = 0x7675676464737067LL;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001LL;
  *(_OWORD *)(v2 + 44) = xmmword_402D48;
  *((void *)v2 + 3) = off_481800;
  qword_49D520 = (uint64_t)(v2 + 24);
  *(void *)algn_49D528 = v2;
  sub_157A88((uint64_t)&dword_49D530, 6u, -58.0, 0.0);
  return sub_2FCC0C(&qword_49D570, &xmmword_49D580, (uint64_t)&dword_49D530);
}

double sub_3AD3C0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49D9D8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49D9F0, (unsigned int *)v1, 8LL);
  qword_49DA18 = 0LL;
  qword_49DA10 = 0LL;
  qword_49DA08 = (uint64_t)&qword_49DA10;
  qword_49DA20 = 0x7063787870737072LL;
  dword_49DA28 = 0;
  byte_49DA2C = 0;
  sub_86550(qword_49DA30, (uint64_t)&unk_49D9D8);
  word_49DA48 = word_49DA48 & 0xF800 | 0x21;
  double result = 7.28117508e199;
  qword_49DA50 = 0x696E707473737263LL;
  dword_49DA58 = 0;
  return result;
}

uint64_t **sub_3AD4E8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_49DA60, (unsigned int *)v1, 8LL);
}

uint64_t sub_3AD578()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49DB88, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49DBA0, (unsigned int *)v2, 1LL);
  qword_49DBC8 = 0LL;
  qword_49DBC0 = 0LL;
  qword_49DBB8 = (uint64_t)&qword_49DBC0;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_49DBD0 = v1;
  return result;
}

uint64_t sub_3AD668()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49DBD8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49DBF0, (unsigned int *)v1, 1LL);
  qword_49DC18 = 0LL;
  qword_49DC10 = 0LL;
  qword_49DC08 = (uint64_t)&qword_49DC10;
  return result;
}

void *sub_3AD734()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49DC20, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_49DC38, (unsigned int *)v18, 1LL);
  qword_49DC60 = 0LL;
  qword_49DC58 = 0LL;
  qword_49DC50 = (uint64_t)&qword_49DC58;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_49DC68 = 3;
  sub_7A22C((uint64_t)&unk_49DC70, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_49DC88 = 3;
  sub_7A22C((uint64_t)&unk_49DC90, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_49DCA8 = 3;
  sub_7A22C((uint64_t)&unk_49DCB0, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_49DCC8 = 3;
  sub_7A22C((uint64_t)&unk_49DCD0, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_49DCE8 = 3;
  sub_7A22C((uint64_t)&unk_49DCF0, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_49DD08 = 3;
  sub_7A22C((uint64_t)&unk_49DD10, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_49DD28 = 2;
  sub_7A22C((uint64_t)&unk_49DD30, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_49DD48 = 2;
  sub_7A22C((uint64_t)&unk_49DD50, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_49DD68 = 2;
  sub_7A22C((uint64_t)&unk_49DD70, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_49DD88 = 2;
  sub_7A22C((uint64_t)&unk_49DD90, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_49DDA8 = 2;
  sub_7A22C((uint64_t)&unk_49DDB0, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_49DDC8 = 2;
  sub_7A22C((uint64_t)&unk_49DDD0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_49DDE8 = 2;
  sub_7A22C((uint64_t)&unk_49DDF0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_49DE08 = 2;
  sub_7A22C((uint64_t)&unk_49DE10, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_49DE28 = 2;
  sub_7A22C((uint64_t)&unk_49DE30, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_49DE48 = 3;
  sub_7A22C((uint64_t)&unk_49DE50, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_49DE68 = 2;
  sub_7A22C((uint64_t)&unk_49DE70, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_49DE88 = 2;
  sub_7A22C((uint64_t)&unk_49DE90, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49DEA8 = 2;
  sub_7A22C((uint64_t)&unk_49DEB0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49DEC8 = 3;
  sub_7A22C((uint64_t)&unk_49DED0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49DEE8 = 2;
  sub_7A22C((uint64_t)&unk_49DEF0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49DF08 = 3;
  sub_7A22C((uint64_t)&unk_49DF10, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49DF28 = 2;
  sub_7A22C((uint64_t)&unk_49DF30, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49DF48 = 3;
  sub_7A22C((uint64_t)&unk_49DF50, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49DF68 = 2;
  sub_7A22C((uint64_t)&unk_49DF70, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49DF88 = 3;
  sub_7A22C((uint64_t)&unk_49DF90, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49DFA8 = 2;
  sub_7A22C((uint64_t)&unk_49DFB0, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49DFC8 = 3;
  sub_7A22C((uint64_t)&unk_49DFD0, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49DFE8 = 2;
  sub_81EF8(qword_49DFF0, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49E008 = 3;
  sub_81EF8(qword_49E010, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_4801B0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_49E028, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    int v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_4801F8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_49E070, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_49E028;
  v4[1] = &unk_49E070;
  qword_49E0B8 = (uint64_t)off_483190;
  qword_49E0C8 = 0LL;
  unk_49E0D0 = 0LL;
  qword_49E0C0 = 0LL;
  sub_8201C(&qword_49E0C0, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_480240;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49E0D8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_480288;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49E120, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_4802D0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_49E168, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_480318;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_49E1B0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_480360;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_49E1F8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_49E240 = (uint64_t)off_4831C0;
  dword_49E248 = 6;
  qword_49E250 = (uint64_t)off_4831F0;
  *(void *)algn_49E258 = &qword_49E240;
  return result;
}

void sub_3AE0A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3AE140()
{
  unsigned int v1 = 1986295651;
  sub_7A22C((uint64_t)&unk_49E260, &v1, 1LL);
  qword_49E278 = 0x7063776970687774LL;
  dword_49E280 = 0;
  byte_49E284 = 0;
  uint64_t result = sub_86550((uint64_t *)&algn_49E285[3], (uint64_t)&unk_49E260);
  word_49E2A0 = word_49E2A0 & 0xF800 | 0x407;
  return result;
}

uint64_t sub_3AE1C0()
{
  LODWORD(v1) = 1986295651;
  sub_7A22C((uint64_t)&unk_49E2A8, (unsigned int *)&v1, 1LL);
  qword_49E2C0 = 0x706362696C70696ELL;
  dword_49E2C8 = 0;
  byte_49E2CC = 0;
  uint64_t v1 = 0x766D696E766F6464LL;
  sub_7A22C((uint64_t)&unk_49E2D0, (unsigned int *)&v1, 2LL);
  word_49E2E8 = word_49E2E8 & 0xF800 | 0x630;
  qword_49E2F0 = 0x706362696870696ELL;
  dword_49E2F8 = 0;
  byte_49E2FC = 0;
  LODWORD(v1) = 1987011684;
  uint64_t result = sub_7A22C((uint64_t)&unk_49E300, (unsigned int *)&v1, 1LL);
  word_49E318 = word_49E318 & 0xF800 | 0x630;
  return result;
}

void *sub_3AE2C0()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49E320, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_49E338, (unsigned int *)v18, 1LL);
  qword_49E360 = 0LL;
  qword_49E358 = 0LL;
  qword_49E350 = (uint64_t)&qword_49E358;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_49E368 = 3;
  sub_7A22C((uint64_t)&unk_49E370, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_49E388 = 3;
  sub_7A22C((uint64_t)&unk_49E390, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_49E3A8 = 3;
  sub_7A22C((uint64_t)&unk_49E3B0, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_49E3C8 = 3;
  sub_7A22C((uint64_t)&unk_49E3D0, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_49E3E8 = 3;
  sub_7A22C((uint64_t)&unk_49E3F0, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_49E408 = 3;
  sub_7A22C((uint64_t)&unk_49E410, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_49E428 = 2;
  sub_7A22C((uint64_t)&unk_49E430, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_49E448 = 2;
  sub_7A22C((uint64_t)&unk_49E450, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_49E468 = 2;
  sub_7A22C((uint64_t)&unk_49E470, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_49E488 = 2;
  sub_7A22C((uint64_t)&unk_49E490, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_49E4A8 = 2;
  sub_7A22C((uint64_t)&unk_49E4B0, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_49E4C8 = 2;
  sub_7A22C((uint64_t)&unk_49E4D0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_49E4E8 = 2;
  sub_7A22C((uint64_t)&unk_49E4F0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_49E508 = 2;
  sub_7A22C((uint64_t)&unk_49E510, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_49E528 = 2;
  sub_7A22C((uint64_t)&unk_49E530, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_49E548 = 3;
  sub_7A22C((uint64_t)&unk_49E550, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_49E568 = 2;
  sub_7A22C((uint64_t)&unk_49E570, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_49E588 = 2;
  sub_7A22C((uint64_t)&unk_49E590, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49E5A8 = 2;
  sub_7A22C((uint64_t)&unk_49E5B0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49E5C8 = 3;
  sub_7A22C((uint64_t)&unk_49E5D0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49E5E8 = 2;
  sub_7A22C((uint64_t)&unk_49E5F0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49E608 = 3;
  sub_7A22C((uint64_t)&unk_49E610, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49E628 = 2;
  sub_7A22C((uint64_t)&unk_49E630, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49E648 = 3;
  sub_7A22C((uint64_t)&unk_49E650, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49E668 = 2;
  sub_7A22C((uint64_t)&unk_49E670, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49E688 = 3;
  sub_7A22C((uint64_t)&unk_49E690, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49E6A8 = 2;
  sub_7A22C((uint64_t)&unk_49E6B0, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49E6C8 = 3;
  sub_7A22C((uint64_t)&unk_49E6D0, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49E6E8 = 2;
  sub_81EF8(qword_49E6F0, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49E708 = 3;
  sub_81EF8(qword_49E710, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_480808;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_49E728, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    int v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_480850;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_49E770, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_49E728;
  v4[1] = &unk_49E770;
  qword_49E7B8 = (uint64_t)off_483190;
  qword_49E7C8 = 0LL;
  unk_49E7D0 = 0LL;
  qword_49E7C0 = 0LL;
  sub_8201C(&qword_49E7C0, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_480898;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49E7D8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_4808E0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49E820, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_480928;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_49E868, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_480970;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_49E8B0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_4809B8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_49E8F8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_49E940 = (uint64_t)off_4831C0;
  dword_49E948 = 6;
  qword_49E950 = (uint64_t)off_4831F0;
  *(void *)algn_49E958 = &qword_49E940;
  return result;
}

void sub_3AEC30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

void *sub_3AECCC()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49E960, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_49E978, (unsigned int *)v18, 1LL);
  qword_49E9A0 = 0LL;
  qword_49E998 = 0LL;
  qword_49E990 = (uint64_t)&qword_49E998;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_49E9A8 = 3;
  sub_7A22C((uint64_t)&unk_49E9B0, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_49E9C8 = 3;
  sub_7A22C((uint64_t)&unk_49E9D0, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_49E9E8 = 3;
  sub_7A22C((uint64_t)&unk_49E9F0, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_49EA08 = 3;
  sub_7A22C((uint64_t)&unk_49EA10, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_49EA28 = 3;
  sub_7A22C((uint64_t)&unk_49EA30, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_49EA48 = 3;
  sub_7A22C((uint64_t)&unk_49EA50, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_49EA68 = 2;
  sub_7A22C((uint64_t)&unk_49EA70, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_49EA88 = 2;
  sub_7A22C((uint64_t)&unk_49EA90, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_49EAA8 = 2;
  sub_7A22C((uint64_t)&unk_49EAB0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_49EAC8 = 2;
  sub_7A22C((uint64_t)&unk_49EAD0, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_49EAE8 = 2;
  sub_7A22C((uint64_t)&unk_49EAF0, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_49EB08 = 2;
  sub_7A22C((uint64_t)&unk_49EB10, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_49EB28 = 2;
  sub_7A22C((uint64_t)&unk_49EB30, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_49EB48 = 2;
  sub_7A22C((uint64_t)&unk_49EB50, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_49EB68 = 2;
  sub_7A22C((uint64_t)&unk_49EB70, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_49EB88 = 3;
  sub_7A22C((uint64_t)&unk_49EB90, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_49EBA8 = 2;
  sub_7A22C((uint64_t)&unk_49EBB0, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_49EBC8 = 2;
  sub_7A22C((uint64_t)&unk_49EBD0, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49EBE8 = 2;
  sub_7A22C((uint64_t)&unk_49EBF0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49EC08 = 3;
  sub_7A22C((uint64_t)&unk_49EC10, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49EC28 = 2;
  sub_7A22C((uint64_t)&unk_49EC30, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49EC48 = 3;
  sub_7A22C((uint64_t)&unk_49EC50, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49EC68 = 2;
  sub_7A22C((uint64_t)&unk_49EC70, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49EC88 = 3;
  sub_7A22C((uint64_t)&unk_49EC90, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49ECA8 = 2;
  sub_7A22C((uint64_t)&unk_49ECB0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49ECC8 = 3;
  sub_7A22C((uint64_t)&unk_49ECD0, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49ECE8 = 2;
  sub_7A22C((uint64_t)&unk_49ECF0, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49ED08 = 3;
  sub_7A22C((uint64_t)&unk_49ED10, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49ED28 = 2;
  sub_81EF8(qword_49ED30, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49ED48 = 3;
  sub_81EF8(qword_49ED50, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_480A00;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_49ED68, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    int v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_480A48;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_49EDB0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_49ED68;
  v4[1] = &unk_49EDB0;
  qword_49EDF8 = (uint64_t)off_483190;
  qword_49EE08 = 0LL;
  unk_49EE10 = 0LL;
  qword_49EE00 = 0LL;
  sub_8201C(&qword_49EE00, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_480A90;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49EE18, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_480AD8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49EE60, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_480B20;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_49EEA8, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_480B68;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_49EEF0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_480BB0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_49EF38, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_49EF80 = (uint64_t)off_4831C0;
  dword_49EF88 = 6;
  qword_49EF90 = (uint64_t)off_4831F0;
  *(void *)algn_49EF98 = &qword_49EF80;
  return result;
}

void sub_3AF63C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t **sub_3AF6D8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49EFA0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49EFB8, (unsigned int *)v1, 8LL);
  qword_49EFE0 = 0LL;
  qword_49EFD8 = 0LL;
  qword_49EFD0 = (uint64_t)&qword_49EFD8;
  return result;
}

uint64_t sub_3AF7A4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49EFE8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49F000, (unsigned int *)v1, 1LL);
  qword_49F028 = 0LL;
  qword_49F020 = 0LL;
  qword_49F018 = (uint64_t)&qword_49F020;
  return result;
}

uint64_t **sub_3AF870()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49F030, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_49F048, (unsigned int *)v1, 8LL);
  qword_49F070 = 0LL;
  qword_49F068 = 0LL;
  qword_49F060 = (uint64_t)&qword_49F068;
  return result;
}

uint64_t **sub_3AF93C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_49F078, (unsigned int *)v1, 8LL);
}

uint64_t sub_3AF9CC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F090, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49F0A8, (unsigned int *)v1, 1LL);
  qword_49F0D0 = 0LL;
  qword_49F0C8 = 0LL;
  qword_49F0C0 = (uint64_t)&qword_49F0C8;
  return result;
}

uint64_t sub_3AFA98()
{
  unsigned int v1 = 1986295651;
  return sub_7A22C((uint64_t)&unk_49F0D8, &v1, 1LL);
}

uint64_t *sub_3AFAD0()
{
  v3[8] = off_486408;
  v3[9] = *(_OWORD *)"lovc";
  v3[10] = xmmword_486428;
  v3[11] = *(_OWORD *)&off_486438;
  v3[4] = xmmword_4863C8;
  v3[5] = *(_OWORD *)&off_4863D8;
  v3[6] = *(_OWORD *)"lovl";
  v3[7] = unk_4863F8;
  v3[0] = *(_OWORD *)"ulov";
  v3[1] = unk_486398;
  _OWORD v3[2] = off_4863A8;
  v3[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F100, (unsigned int *)v3, 8LL);
  LODWORD(v3[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49F118, (unsigned int *)v3, 1LL);
  qword_49F138 = 0LL;
  qword_49F140 = 0LL;
  qword_49F130 = (uint64_t)&qword_49F138;
  qword_49F148 = 0x7063776970647370LL;
  if (sub_1CCD00())
  {
    dword_49F150 = 1701867895;
    byte_49F154 = 1;
  }

  else
  {
    byte_49F154 = 1;
    dword_49F150 = 1701868910;
  }

  sub_86550(&qword_49F158, (uint64_t)&unk_49F118);
  word_49F170 = word_49F170 & 0xFFC0 | 0x1E;
  else {
    __int16 v0 = 1536;
  }
  word_49F170 = word_49F170 & 0xF83F | v0;
  qword_49F178 = 0x706377697068646DLL;
  if (sub_1CCD00())
  {
    dword_49F180 = 1701867895;
    byte_49F184 = 1;
  }

  else
  {
    byte_49F184 = 1;
    dword_49F180 = 1701868910;
  }

  sub_86550(&qword_49F188, (uint64_t)&unk_49F118);
  word_49F1A0 = word_49F1A0 & 0xFFC0 | 0x1E;
  else {
    __int16 v1 = 1536;
  }
  word_49F1A0 = word_49F1A0 & 0xF83F | v1;
  qmemcpy(&qword_49F1A8, "tdhpxxcpnupe", 12);
  byte_49F1B4 = 1;
  uint64_t result = sub_86550(qword_49F1B8, (uint64_t)&unk_49F118);
  word_49F1D0 = word_49F1D0 & 0xF800 | 0x68F;
  return result;
}

void sub_3AFD20(_Unwind_Exception *a1)
{
}

void sub_3AFD54()
{
  __int16 v0 = objc_autoreleasePoolPush();
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F1E0, (unsigned int *)v1, 8LL);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_3AFDFC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F1F8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49F210, (unsigned int *)v1, 1LL);
  qword_49F238 = 0LL;
  qword_49F230 = 0LL;
  qword_49F228 = (uint64_t)&qword_49F230;
  return result;
}

void sub_3AFEC8()
{
  __int16 v0 = objc_autoreleasePoolPush();
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49F240, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F258, (unsigned int *)v1, 8LL);
  qword_49F280 = 0LL;
  qword_49F278 = 0LL;
  qword_49F270 = (uint64_t)&qword_49F278;
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_3AFFAC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F288, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49F2A0, (unsigned int *)v1, 1LL);
  qword_49F2C8 = 0LL;
  qword_49F2C0 = 0LL;
  qword_49F2B8 = (uint64_t)&qword_49F2C0;
  return result;
}

void sub_3B0078()
{
  __int16 v0 = objc_autoreleasePoolPush();
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_49F2D0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F2E8, (unsigned int *)v1, 8LL);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_3B0140()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F300, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_49F318, (unsigned int *)v1, 1LL);
  qword_49F340 = 0LL;
  qword_49F338 = 0LL;
  qword_49F330 = (uint64_t)&qword_49F338;
  return result;
}

void *sub_3B020C()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_49F348, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_49F360, (unsigned int *)v18, 1LL);
  qword_49F388 = 0LL;
  qword_49F380 = 0LL;
  qword_49F378 = (uint64_t)&qword_49F380;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_49F390 = 3;
  sub_7A22C((uint64_t)&unk_49F398, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_49F3B0 = 3;
  sub_7A22C((uint64_t)&unk_49F3B8, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_49F3D0 = 3;
  sub_7A22C((uint64_t)&unk_49F3D8, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_49F3F0 = 3;
  sub_7A22C((uint64_t)&unk_49F3F8, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_49F410 = 3;
  sub_7A22C((uint64_t)&unk_49F418, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_49F430 = 3;
  sub_7A22C((uint64_t)&unk_49F438, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_49F450 = 2;
  sub_7A22C((uint64_t)&unk_49F458, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_49F470 = 2;
  sub_7A22C((uint64_t)&unk_49F478, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_49F490 = 2;
  sub_7A22C((uint64_t)&unk_49F498, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_49F4B0 = 2;
  sub_7A22C((uint64_t)&unk_49F4B8, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_49F4D0 = 2;
  sub_7A22C((uint64_t)&unk_49F4D8, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_49F4F0 = 2;
  sub_7A22C((uint64_t)&unk_49F4F8, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_49F510 = 2;
  sub_7A22C((uint64_t)&unk_49F518, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_49F530 = 2;
  sub_7A22C((uint64_t)&unk_49F538, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_49F550 = 2;
  sub_7A22C((uint64_t)&unk_49F558, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_49F570 = 3;
  sub_7A22C((uint64_t)&unk_49F578, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_49F590 = 2;
  sub_7A22C((uint64_t)&unk_49F598, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_49F5B0 = 2;
  sub_7A22C((uint64_t)&unk_49F5B8, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49F5D0 = 2;
  sub_7A22C((uint64_t)&unk_49F5D8, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_49F5F0 = 3;
  sub_7A22C((uint64_t)&unk_49F5F8, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49F610 = 2;
  sub_7A22C((uint64_t)&unk_49F618, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_49F630 = 3;
  sub_7A22C((uint64_t)&unk_49F638, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49F650 = 2;
  sub_7A22C((uint64_t)&unk_49F658, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_49F670 = 3;
  sub_7A22C((uint64_t)&unk_49F678, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49F690 = 2;
  sub_7A22C((uint64_t)&unk_49F698, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_49F6B0 = 3;
  sub_7A22C((uint64_t)&unk_49F6B8, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49F6D0 = 2;
  sub_7A22C((uint64_t)&unk_49F6D8, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_49F6F0 = 3;
  sub_7A22C((uint64_t)&unk_49F6F8, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49F710 = 2;
  sub_81EF8(qword_49F718, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_49F730 = 3;
  sub_81EF8(qword_49F738, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_4815D0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_49F750, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int16 v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    __int16 v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_481618;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_49F798, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_49F750;
  v4[1] = &unk_49F798;
  qword_49F7E0 = (uint64_t)off_483190;
  qword_49F7F0 = 0LL;
  unk_49F7F8 = 0LL;
  qword_49F7E8 = 0LL;
  sub_8201C(&qword_49F7E8, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_481660;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49F800, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_4816A8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_49F848, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_4816F0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_49F890, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_481738;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_49F8D8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_481780;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_49F920, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_49F968 = (uint64_t)off_4831C0;
  dword_49F970 = 6;
  qword_49F978 = (uint64_t)off_4831F0;
  unk_49F980 = &qword_49F968;
  return result;
}

void sub_3B0B7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B0C18()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A0810, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A0828, (unsigned int *)v1, 1LL);
  qword_4A0850 = 0LL;
  qword_4A0848 = 0LL;
  qword_4A0840 = (uint64_t)&qword_4A0848;
  return result;
}

uint64_t **sub_3B0CE4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A0858, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A0870, (unsigned int *)v1, 8LL);
  qword_4A0898 = 0LL;
  qword_4A0890 = 0LL;
  qword_4A0888 = (uint64_t)&qword_4A0890;
  return result;
}

uint64_t sub_3B0DB0()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A0918, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A0930, (unsigned int *)v1, 1LL);
  qword_4A0958 = 0LL;
  qword_4A0950 = 0LL;
  qword_4A0948 = (uint64_t)&qword_4A0950;
  return result;
}

uint64_t **sub_3B0E7C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A0960, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A0978, (unsigned int *)v1, 8LL);
  qword_4A09A0 = 0LL;
  qword_4A0998 = 0LL;
  qword_4A0990 = (uint64_t)&qword_4A0998;
  return result;
}

uint64_t sub_3B0F48()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A09C0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A09D8, (unsigned int *)v1, 1LL);
  qword_4A0A00 = 0LL;
  qword_4A09F8 = 0LL;
  qword_4A09F0 = (uint64_t)&qword_4A09F8;
  return result;
}

uint64_t *sub_3B1014()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A0A08, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A0A20, (unsigned int *)v1, 8LL);
  qword_4A0A48 = 0LL;
  qword_4A0A40 = 0LL;
  qword_4A0A38 = (uint64_t)&qword_4A0A40;
  qword_4A0A50 = 0x6F757470734D7574LL;
  dword_4A0A58 = 0;
  qword_4A0A60 = 0x706362697073706BLL;
  dword_4A0A68 = 0;
  byte_4A0A6C = 0;
  uint64_t result = sub_86550(qword_4A0A70, (uint64_t)&unk_4A0A08);
  word_4A0A88 = word_4A0A88 & 0xF800 | 0x43C;
  return result;
}

uint64_t **sub_3B113C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A0A90, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A0AA8, (unsigned int *)v1, 8LL);
  qword_4A0AD0 = 0LL;
  qword_4A0AC8 = 0LL;
  qword_4A0AC0 = (uint64_t)&qword_4A0AC8;
  return result;
}

uint64_t **sub_3B1208()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A1028, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_4A1040, (unsigned int *)v1, 8LL);
}

uint64_t sub_3B12B8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A10B8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A10D0, (unsigned int *)v1, 1LL);
  qword_4A10F8 = 0LL;
  qword_4A10F0 = 0LL;
  qword_4A10E8 = (uint64_t)&qword_4A10F0;
  return result;
}

uint64_t sub_3B1384()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A1100, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A1118, (unsigned int *)v1, 1LL);
  qword_4A1140 = 0LL;
  qword_4A1138 = 0LL;
  qword_4A1130 = (uint64_t)&qword_4A1138;
  return result;
}

uint64_t sub_3B1450()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A1148, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A1160, (unsigned int *)v1, 1LL);
  qword_4A1188 = 0LL;
  qword_4A1180 = 0LL;
  qword_4A1178 = (uint64_t)&qword_4A1180;
  return result;
}

uint64_t **sub_3B151C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A1190, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A11A8, (unsigned int *)v1, 8LL);
  qword_4A11D0 = 0LL;
  qword_4A11C8 = 0LL;
  qword_4A11C0 = (uint64_t)&qword_4A11C8;
  return result;
}

uint64_t sub_3B15E8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A11D8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A11F0, (unsigned int *)v1, 1LL);
  qword_4A1218 = 0LL;
  qword_4A1210 = 0LL;
  qword_4A1208 = (uint64_t)&qword_4A1210;
  return result;
}

uint64_t **sub_3B16B4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A1220, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A1238, (unsigned int *)v1, 8LL);
  qword_4A1260 = 0LL;
  qword_4A1258 = 0LL;
  qword_4A1250 = (uint64_t)&qword_4A1258;
  return result;
}

uint64_t sub_3B1780()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A1268, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A1280, (unsigned int *)v1, 1LL);
  qword_4A12A8 = 0LL;
  qword_4A12A0 = 0LL;
  qword_4A1298 = (uint64_t)&qword_4A12A0;
  return result;
}

void *sub_3B184C()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A12B0, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_4A12C8, (unsigned int *)v18, 1LL);
  qword_4A12F0 = 0LL;
  qword_4A12E8 = 0LL;
  qword_4A12E0 = (uint64_t)&qword_4A12E8;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_4A12F8 = 3;
  sub_7A22C((uint64_t)&unk_4A1300, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_4A1318 = 3;
  sub_7A22C((uint64_t)&unk_4A1320, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_4A1338 = 3;
  sub_7A22C((uint64_t)&unk_4A1340, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_4A1358 = 3;
  sub_7A22C((uint64_t)&unk_4A1360, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_4A1378 = 3;
  sub_7A22C((uint64_t)&unk_4A1380, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_4A1398 = 3;
  sub_7A22C((uint64_t)&unk_4A13A0, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_4A13B8 = 2;
  sub_7A22C((uint64_t)&unk_4A13C0, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_4A13D8 = 2;
  sub_7A22C((uint64_t)&unk_4A13E0, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_4A13F8 = 2;
  sub_7A22C((uint64_t)&unk_4A1400, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_4A1418 = 2;
  sub_7A22C((uint64_t)&unk_4A1420, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_4A1438 = 2;
  sub_7A22C((uint64_t)&unk_4A1440, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_4A1458 = 2;
  sub_7A22C((uint64_t)&unk_4A1460, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_4A1478 = 2;
  sub_7A22C((uint64_t)&unk_4A1480, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_4A1498 = 2;
  sub_7A22C((uint64_t)&unk_4A14A0, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_4A14B8 = 2;
  sub_7A22C((uint64_t)&unk_4A14C0, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_4A14D8 = 3;
  sub_7A22C((uint64_t)&unk_4A14E0, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_4A14F8 = 2;
  sub_7A22C((uint64_t)&unk_4A1500, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_4A1518 = 2;
  sub_7A22C((uint64_t)&unk_4A1520, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_4A1538 = 2;
  sub_7A22C((uint64_t)&unk_4A1540, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_4A1558 = 3;
  sub_7A22C((uint64_t)&unk_4A1560, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_4A1578 = 2;
  sub_7A22C((uint64_t)&unk_4A1580, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_4A1598 = 3;
  sub_7A22C((uint64_t)&unk_4A15A0, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_4A15B8 = 2;
  sub_7A22C((uint64_t)&unk_4A15C0, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_4A15D8 = 3;
  sub_7A22C((uint64_t)&unk_4A15E0, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_4A15F8 = 2;
  sub_7A22C((uint64_t)&unk_4A1600, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_4A1618 = 3;
  sub_7A22C((uint64_t)&unk_4A1620, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_4A1638 = 2;
  sub_7A22C((uint64_t)&unk_4A1640, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_4A1658 = 3;
  sub_7A22C((uint64_t)&unk_4A1660, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_4A1678 = 2;
  sub_81EF8(qword_4A1680, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_4A1698 = 3;
  sub_81EF8(qword_4A16A0, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_482428;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_4A16B8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int16 v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    __int16 v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_482470;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_4A1700, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_4A16B8;
  v4[1] = &unk_4A1700;
  qword_4A1748 = (uint64_t)off_483190;
  qword_4A1758 = 0LL;
  unk_4A1760 = 0LL;
  qword_4A1750 = 0LL;
  sub_8201C(&qword_4A1750, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_4824B8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_4A1768, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_482500;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_4A17B0, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_482548;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_4A17F8, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_482590;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_4A1840, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_4825D8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_4A1888, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_4A18D0 = (uint64_t)off_4831C0;
  dword_4A18D8 = 6;
  qword_4A18E0 = (uint64_t)off_4831F0;
  *(void *)algn_4A18E8 = &qword_4A18D0;
  return result;
}

void sub_3B21BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B2258()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A18F0, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A1908, (unsigned int *)v2, 8LL);
  qword_4A1930 = 0LL;
  qword_4A1928 = 0LL;
  qword_4A1920 = (uint64_t)&qword_4A1928;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_4A1938 = v1;
  return result;
}

uint64_t sub_3B2348()
{
  unsigned int v1 = 1986295651;
  return sub_7A22C((uint64_t)&unk_4A19B0, &v1, 1LL);
}

uint64_t **sub_3B2380()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A19C8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_4A19E0, (unsigned int *)v1, 8LL);
}

uint64_t **sub_3B2430()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A19F8, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A1A10, (unsigned int *)v1, 8LL);
  qword_4A1A38 = 0LL;
  qword_4A1A30 = 0LL;
  qword_4A1A28 = (uint64_t)&qword_4A1A30;
  return result;
}

void sub_3B24FC()
{
  __int16 v0 = objc_autoreleasePoolPush();
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A1A40, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A1A58, (unsigned int *)v1, 1LL);
  qword_4A1A80 = 0LL;
  qword_4A1A78 = 0LL;
  qword_4A1A70 = (uint64_t)&qword_4A1A78;
  objc_autoreleasePoolPop(v0);
}

void *sub_3B25E0()
{
  __int128 v25 = *(_OWORD *)"lovc";
  __int128 v26 = xmmword_486428;
  __int128 v27 = *(_OWORD *)&off_486438;
  __int128 v20 = xmmword_4863C8;
  __int128 v21 = *(_OWORD *)&off_4863D8;
  __int128 v22 = *(_OWORD *)"lovl";
  __int128 v23 = unk_4863F8;
  __int128 v24 = off_486408;
  *(_OWORD *)__int128 v18 = *(_OWORD *)"ulov";
  *(_OWORD *)&v18[16] = unk_486398;
  *(_OWORD *)&v18[32] = off_4863A8;
  __int128 v19 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A1AA8, (unsigned int *)v18, 8LL);
  *(_DWORD *)__int128 v18 = 1986295651;
  sub_7A22C((uint64_t)&unk_4A1AC0, (unsigned int *)v18, 1LL);
  qword_4A1AE8 = 0LL;
  qword_4A1AE0 = 0LL;
  qword_4A1AD8 = (uint64_t)&qword_4A1AE0;
  qmemcpy(v15, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v15));
  qmemcpy(v18, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_4A1AF0 = 3;
  sub_7A22C((uint64_t)&qword_4A1AF8, (unsigned int *)v18, 8LL);
  qmemcpy(v18, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_4A1B10 = 3;
  sub_7A22C((uint64_t)&unk_4A1B18, (unsigned int *)v18, 9LL);
  *(_OWORD *)__int128 v18 = xmmword_403140;
  dword_4A1B30 = 3;
  sub_7A22C((uint64_t)&unk_4A1B38, (unsigned int *)v18, 4LL);
  *(_OWORD *)__int128 v18 = xmmword_403150;
  dword_4A1B50 = 3;
  sub_7A22C((uint64_t)&unk_4A1B58, (unsigned int *)v18, 4LL);
  qmemcpy(v18, "cgpvivpvovpvcvmrsibi", 20);
  dword_4A1B70 = 3;
  sub_7A22C((uint64_t)&qword_4A1B78, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_4A1B90 = 3;
  sub_7A22C((uint64_t)&unk_4A1B98, (unsigned int *)v18, 7LL);
  *(_OWORD *)__int128 v18 = v15[1];
  *(_OWORD *)&v18[16] = v15[0];
  dword_4A1BB0 = 2;
  sub_7A22C((uint64_t)&qword_4A1BB8, (unsigned int *)v18, 8LL);
  *(_OWORD *)__int128 v18 = xmmword_403160;
  dword_4A1BD0 = 2;
  sub_7A22C((uint64_t)&qword_4A1BD8, (unsigned int *)v18, 4LL);
  *(_DWORD *)__int128 v18 = 1918990112;
  dword_4A1BF0 = 2;
  sub_7A22C((uint64_t)&qword_4A1BF8, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1836281204;
  dword_4A1C10 = 2;
  sub_7A22C((uint64_t)&unk_4A1C18, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x7670766976706763LL;
  dword_4A1C30 = 2;
  sub_7A22C((uint64_t)&qword_4A1C38, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 1987080813;
  dword_4A1C50 = 2;
  sub_7A22C((uint64_t)&qword_4A1C58, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1987208039;
  dword_4A1C70 = 2;
  sub_7A22C((uint64_t)&unk_4A1C78, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1919776355;
  dword_4A1C90 = 2;
  sub_7A22C((uint64_t)&unk_4A1C98, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "plmirvmierpspcpspcts", 20);
  dword_4A1CB0 = 2;
  sub_7A22C((uint64_t)&qword_4A1CB8, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1768778864;
  dword_4A1CD0 = 3;
  sub_7A22C((uint64_t)&qword_4A1CD8, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1768776806;
  dword_4A1CF0 = 2;
  sub_7A22C((uint64_t)&unk_4A1CF8, (unsigned int *)v18, 1LL);
  qmemcpy(v18, "pctspcpserps", 12);
  dword_4A1D10 = 2;
  sub_7A22C((uint64_t)&qword_4A1D18, (unsigned int *)v18, 3LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_4A1D30 = 2;
  sub_7A22C((uint64_t)&qword_4A1D38, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1751212899;
  dword_4A1D50 = 3;
  sub_7A22C((uint64_t)&qword_4A1D58, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_4A1D70 = 2;
  sub_7A22C((uint64_t)&qword_4A1D78, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986556788;
  dword_4A1D90 = 3;
  sub_7A22C((uint64_t)&qword_4A1D98, (unsigned int *)v18, 1LL);
  v15[1] = *(_OWORD *)"gcrvmorvtshvisrvtsav";
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_4A1DB0 = 2;
  sub_7A22C((uint64_t)&unk_4A1DB8, (unsigned int *)v18, 5LL);
  qmemcpy(v18, "gcrvmorvtshvisrvtsav", 20);
  dword_4A1DD0 = 3;
  sub_7A22C((uint64_t)&unk_4A1DD8, (unsigned int *)v18, 5LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_4A1DF0 = 2;
  sub_7A22C((uint64_t)&unk_4A1DF8, (unsigned int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 1986098036;
  dword_4A1E10 = 3;
  sub_7A22C((uint64_t)&unk_4A1E18, (unsigned int *)v18, 1LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_4A1E30 = 2;
  sub_7A22C((uint64_t)&qword_4A1E38, (unsigned int *)v18, 2LL);
  *(void *)__int128 v18 = 0x6563692065637620LL;
  dword_4A1E50 = 3;
  sub_7A22C((uint64_t)&qword_4A1E58, (unsigned int *)v18, 2LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_4A1E70 = 2;
  sub_81EF8(&qword_4A1E78, (int *)v18, 1LL);
  *(_DWORD *)__int128 v18 = 0;
  dword_4A1E90 = 3;
  sub_81EF8(&qword_4A1E98, (int *)v18, 1LL);
  *(void *)__int128 v18 = &off_483258;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require out of band speech input support");
  sub_81F70((uint64_t)&unk_4A1EB0, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int16 v0 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v1 = 4LL;
    __int16 v0 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_8;
    }
    uint64_t v1 = 5LL;
  }

  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_8:
  *(void *)__int128 v18 = &off_4832A0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require wireless splitter not in use");
  sub_81F70((uint64_t)&unk_4A1EF8, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_15;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_15:
  int v4 = operator new(0x10uLL);
  void *v4 = &unk_4A1EB0;
  v4[1] = &unk_4A1EF8;
  qword_4A1F40 = (uint64_t)off_483190;
  qword_4A1F50 = 0LL;
  unk_4A1F58 = 0LL;
  qword_4A1F48 = 0LL;
  sub_8201C(&qword_4A1F48, v4, (uint64_t)(v4 + 2));
  operator delete(v4);
  *(void *)__int128 v18 = &off_4832E8;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_4A1F60, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_22;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_22:
  *(void *)__int128 v18 = &off_483330;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Require telephony support");
  sub_81F70((uint64_t)&unk_4A1FA8, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v8 = 4LL;
    int v7 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  *(void *)__int128 v18 = &off_483378;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Tap Requires Apple Display SubPort Type");
  sub_81F70((uint64_t)&unk_4A1FF0, (uint64_t)v18, (__int128 *)__p, 1);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v9 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v10 = 4LL;
    __int128 v9 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_36;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_36:
  *(void *)__int128 v18 = &off_4833C0;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_81F70((uint64_t)&unk_4A2038, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __int128 v11 = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v12 = 4LL;
    __int128 v11 = v18;
  }

  else
  {
    if (!*(void *)&v18[24]) {
      goto LABEL_43;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_43:
  *(void *)__int128 v18 = &off_483408;
  *(void *)&v18[24] = v18;
  sub_7D084(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_81F70((uint64_t)&unk_4A2080, (uint64_t)v18, (__int128 *)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(void **)&v18[24];
  if (*(_BYTE **)&v18[24] == v18)
  {
    uint64_t v14 = 4LL;
    uint64_t result = v18;
    goto LABEL_49;
  }

  if (*(void *)&v18[24])
  {
    uint64_t v14 = 5LL;
LABEL_49:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  qword_4A20C8 = (uint64_t)off_4831C0;
  dword_4A20D0 = 6;
  qword_4A20D8 = (uint64_t)off_4831F0;
  unk_4A20E0 = &qword_4A20C8;
  return result;
}

void sub_3B2F50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __int128 v24 = a23;
  if (a23 == &a20)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_8;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t **sub_3B2FEC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A8D60, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A8D78, (unsigned int *)v1, 8LL);
  qword_4A8DA0 = 0LL;
  qword_4A8D98 = 0LL;
  qword_4A8D90 = (uint64_t)&qword_4A8D98;
  return result;
}

void sub_3B30B8()
{
  __int16 v0 = objc_autoreleasePoolPush();
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A8DA8, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A8DC0, (unsigned int *)v2, 1LL);
  qword_4A8DE8 = 0LL;
  qword_4A8DE0 = 0LL;
  qword_4A8DD8 = (uint64_t)&qword_4A8DE0;
  else {
    int v1 = 3;
  }
  dword_4A8DF0 = v1;
  qword_4A8DF8 = 0x706362696C70696ELL;
  dword_4A8E00 = 0;
  byte_4A8E04 = 0;
  *(void *)&v2[0] = 0x766D696E766F6464LL;
  sub_7A22C((uint64_t)&algn_4A8E05[3], (unsigned int *)v2, 2LL);
  word_4A8E20 = word_4A8E20 & 0xF800 | 0x630;
  qword_4A8E28 = 0x706362696870696ELL;
  dword_4A8E30 = 0;
  byte_4A8E34 = 0;
  LODWORD(v2[0]) = 1987011684;
  sub_7A22C((uint64_t)&unk_4A8E38, (unsigned int *)v2, 1LL);
  word_4A8E50 = word_4A8E50 & 0xF800 | 0x630;
  objc_autoreleasePoolPop(v0);
}

double sub_3B325C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A8E58, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A8E70, (unsigned int *)v1, 1LL);
  qword_4A8E98 = 0LL;
  qword_4A8E90 = 0LL;
  qword_4A8E88 = (uint64_t)&qword_4A8E90;
  qword_4A8EA0 = 1735159650LL;
  *(void *)&double result = 1869968496LL;
  qword_4A8EA8 = 1869968496LL;
  return result;
}

uint64_t sub_3B3348()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A8EB0, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A8EC8, (unsigned int *)v2, 8LL);
  qword_4A8EF0 = 0LL;
  qword_4A8EE8 = 0LL;
  qword_4A8EE0 = (uint64_t)&qword_4A8EE8;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_4A8EF8 = v1;
  return result;
}

uint64_t sub_3B3438()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A8F00, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A8F18, (unsigned int *)v2, 1LL);
  qword_4A8F40 = 0LL;
  qword_4A8F38 = 0LL;
  qword_4A8F30 = (uint64_t)&qword_4A8F38;
  else {
    int v0 = 3;
  }
  dword_4A8F48 = v0;
  qword_4A8F50 = 0x706362696C70696ELL;
  dword_4A8F58 = 0;
  byte_4A8F5C = 0;
  *(void *)&v2[0] = 0x766D696E766F6464LL;
  sub_7A22C((uint64_t)&unk_4A8F60, (unsigned int *)v2, 2LL);
  word_4A8F78 = word_4A8F78 & 0xF800 | 0x630;
  qword_4A8F80 = 0x706362696870696ELL;
  dword_4A8F88 = 0;
  byte_4A8F8C = 0;
  LODWORD(v2[0]) = 1987011684;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A8F90, (unsigned int *)v2, 1LL);
  word_4A8FA8 = word_4A8FA8 & 0xF800 | 0x630;
  return result;
}

uint64_t sub_3B35CC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A8FB0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A8FC8, (unsigned int *)v1, 1LL);
  qword_4A8FF0 = 0LL;
  qword_4A8FE8 = 0LL;
  qword_4A8FE0 = (uint64_t)&qword_4A8FE8;
  qword_4A8FF8 = 0x7063626970686B69LL;
  dword_4A9000 = 0;
  byte_4A9004 = 0;
  LODWORD(v1[0]) = 1986552183;
  uint64_t result = sub_7A22C((uint64_t)&algn_4A9005[3], (unsigned int *)v1, 1LL);
  word_4A9020 = word_4A9020 & 0xF800 | 0x421;
  return result;
}

uint64_t sub_3B36E8()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9028, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A9040, (unsigned int *)v1, 1LL);
  qword_4A9068 = 0LL;
  qword_4A9060 = 0LL;
  qword_4A9058 = (uint64_t)&qword_4A9060;
  return result;
}

uint64_t sub_3B37B4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9070, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A9088, (unsigned int *)v1, 1LL);
  qword_4A90B0 = 0LL;
  qword_4A90A8 = 0LL;
  qword_4A90A0 = (uint64_t)&qword_4A90A8;
  return result;
}

uint64_t sub_3B3880()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A90B8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A90D0, (unsigned int *)v1, 1LL);
  qword_4A90F8 = 0LL;
  qword_4A90F0 = 0LL;
  qword_4A90E8 = (uint64_t)&qword_4A90F0;
  return result;
}

uint64_t sub_3B394C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9100, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A9118, (unsigned int *)v1, 1LL);
  qword_4A9140 = 0LL;
  qword_4A9138 = 0LL;
  qword_4A9130 = (uint64_t)&qword_4A9138;
  return result;
}

uint64_t **sub_3B3A18()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9148, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A9160, (unsigned int *)v1, 8LL);
  qword_4A9188 = 0LL;
  qword_4A9180 = 0LL;
  qword_4A9178 = (uint64_t)&qword_4A9180;
  return result;
}

uint64_t sub_3B3AE4()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9248, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A9260, (unsigned int *)v1, 1LL);
  qword_4A9288 = 0LL;
  qword_4A9280 = 0LL;
  qword_4A9278 = (uint64_t)&qword_4A9280;
  return result;
}

uint64_t *sub_3B3BB0()
{
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9308, (unsigned int *)v2, 1LL);
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9320, (unsigned int *)v2, 8LL);
  qword_4A9348 = 0LL;
  qword_4A9340 = 0LL;
  qword_4A9338 = (uint64_t)&qword_4A9340;
  else {
    int v0 = 3;
  }
  dword_4A9350 = v0;
  qmemcpy(&qword_4A9358, "uolpiwcpnupe", 12);
  byte_4A9364 = 1;
  sub_86550((uint64_t *)&algn_4A9365[3], (uint64_t)&unk_4A9308);
  word_4A9380 = word_4A9380 & 0xF800 | 0x41E;
  qword_4A9388 = 0x6F757470766F6C6DLL;
  dword_4A9390 = 6;
  qword_4A9398 = 0x6F757470766F6C64LL;
  dword_4A93A0 = 6;
  qword_4A93A8 = 0x6F75747076637370LL;
  dword_4A93B0 = 6;
  qword_4A93B8 = 0x696E707469656E64LL;
  dword_4A93C0 = 0;
  qword_4A93C8 = 0x7063626970726563LL;
  dword_4A93D0 = 0;
  byte_4A93D4 = 0;
  sub_86550(qword_4A93D8, (uint64_t)&unk_4A9308);
  word_4A93F0 = word_4A93F0 & 0xF800 | 0x434;
  qword_4A93F8 = 0x706362697073706BLL;
  dword_4A9400 = 0;
  byte_4A9404 = 0;
  sub_86550((uint64_t *)&algn_4A9405[3], (uint64_t)&unk_4A9308);
  word_4A9420 = word_4A9420 & 0xF800 | 0x43C;
  qword_4A9428 = 0x7063626970686163LL;
  dword_4A9430 = 0;
  byte_4A9434 = 0;
  uint64_t result = sub_86550(qword_4A9438, (uint64_t)&unk_4A9308);
  word_4A9450 = word_4A9450 & 0xF800 | 0x424;
  return result;
}

uint64_t **sub_3B3E20()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9488, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A94A0, (unsigned int *)v1, 8LL);
  qword_4A94C8 = 0LL;
  qword_4A94C0 = 0LL;
  qword_4A94B8 = (uint64_t)&qword_4A94C0;
  return result;
}

double sub_3B3EEC()
{
  LODWORD(v4[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A94D0, (unsigned int *)v4, 1LL);
  int v4[8] = off_486408;
  v4[9] = *(_OWORD *)"lovc";
  v4[10] = xmmword_486428;
  v4[11] = *(_OWORD *)&off_486438;
  v4[4] = xmmword_4863C8;
  v4[5] = *(_OWORD *)&off_4863D8;
  v4[6] = *(_OWORD *)"lovl";
  v4[7] = unk_4863F8;
  v4[0] = *(_OWORD *)"ulov";
  v4[1] = unk_486398;
  v4[2] = off_4863A8;
  v4[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A94E8, (unsigned int *)v4, 8LL);
  qword_4A9510 = 0LL;
  qword_4A9508 = 0LL;
  qword_4A9500 = (uint64_t)&qword_4A9508;
  qword_4A9520 = 0LL;
  unk_4A9528 = 0LL;
  qword_4A9518 = 0LL;
  int v0 = (char *)operator new(0x1CuLL);
  qword_4A9520 = (uint64_t)(v0 + 28);
  unk_4A9528 = v0 + 28;
  qmemcpy(v0, "ivpvovpvcgpvcvmrgcrvgsmvpcps", 28);
  qword_4A9518 = (uint64_t)v0;
  qword_4A9538 = 0LL;
  unk_4A9540 = 0LL;
  qword_4A9530 = 0LL;
  int v1 = operator new(0x10uLL);
  qword_4A9530 = (uint64_t)v1;
  _OWORD *v1 = xmmword_4034E0;
  qword_4A9538 = (uint64_t)(v1 + 1);
  unk_4A9540 = v1 + 1;
  qword_4A9550 = 0LL;
  unk_4A9558 = 0LL;
  qword_4A9548 = 0LL;
  uint64_t v2 = (char *)operator new(0x44uLL);
  qword_4A9550 = (uint64_t)(v2 + 68);
  unk_4A9558 = v2 + 68;
  qmemcpy(v2, " wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmgcvmrplminkpstmsmmacmpcpspcts", 68);
  double result = *(double *)"cgpvtcmgcvmrplminkpstmsmmacmpcpspcts";
  qword_4A9548 = (uint64_t)v2;
  return result;
}

uint64_t **sub_3B4070()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9760, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  return sub_7A2A4((uint64_t **)&unk_4A9778, (unsigned int *)v1, 8LL);
}

uint64_t sub_3B4120()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9790, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A97A8, (unsigned int *)v2, 1LL);
  qword_4A97D0 = 0LL;
  qword_4A97C8 = 0LL;
  qword_4A97C0 = (uint64_t)&qword_4A97C8;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_4A97D8 = v1;
  return result;
}

uint64_t *sub_3B4210()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A97E0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A97F8, (unsigned int *)v1, 1LL);
  qword_4A9820 = 0LL;
  qword_4A9818 = 0LL;
  qword_4A9810 = (uint64_t)&qword_4A9818;
  qword_4A9828 = 0x7063776970737164LL;
  dword_4A9830 = 0;
  byte_4A9834 = 0;
  uint64_t result = sub_86550(qword_4A9838, (uint64_t)&unk_4A97F8);
  word_4A9850 = word_4A9850 & 0xF800 | 0x617;
  return result;
}

uint64_t sub_3B4320()
{
  v2[8] = off_486408;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_486428;
  v2[11] = *(_OWORD *)&off_486438;
  v2[4] = xmmword_4863C8;
  void v2[5] = *(_OWORD *)&off_4863D8;
  v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_4863F8;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_486398;
  v2[2] = off_4863A8;
  v2[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9858, (unsigned int *)v2, 8LL);
  LODWORD(v2[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9870, (unsigned int *)v2, 1LL);
  qword_4A9898 = 0LL;
  qword_4A9890 = 0LL;
  qword_4A9888 = (uint64_t)&qword_4A9890;
  uint64_t result = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  if ((_DWORD)result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_4A98A0 = v1;
  return result;
}

uint64_t sub_3B4410()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A98A8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A98C0, (unsigned int *)v1, 1LL);
  qword_4A98E8 = 0LL;
  qword_4A98E0 = 0LL;
  qword_4A98D8 = (uint64_t)&qword_4A98E0;
  return result;
}

uint64_t *sub_3B44DC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A98F0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9908, (unsigned int *)v1, 8LL);
  qword_4A9930 = 0LL;
  qword_4A9928 = 0LL;
  qword_4A9920 = (uint64_t)&qword_4A9928;
  qword_4A9938 = 0x70636269706D6269LL;
  dword_4A9940 = 0;
  byte_4A9944 = 0;
  uint64_t result = sub_86550((uint64_t *)&algn_4A9945[3], (uint64_t)&unk_4A98F0);
  word_4A9960 = word_4A9960 & 0xF800 | 0x435;
  return result;
}

uint64_t *sub_3B45EC()
{
  unsigned int v1 = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9968, &v1, 1LL);
  qword_4A9980 = 0x7063787870727470LL;
  dword_4A9988 = 0;
  byte_4A998C = 0;
  uint64_t result = sub_86550(qword_4A9990, (uint64_t)&unk_4A9968);
  word_4A99A8 = word_4A99A8 & 0xF800 | 0x21;
  return result;
}

void sub_3B466C()
{
  uint64_t v0 = 0LL;
  uint64_t v1 = 0LL;
  qword_4A99C0 = 0LL;
  qword_4A99B8 = 0LL;
  uint64_t v2 = &qword_4A99B8;
  qword_4A99B0 = (uint64_t)&qword_4A99B8;
  while (1)
  {
    uint64_t v3 = (unsigned int *)((char *)&unk_485400 + 16 * v1);
    if (v2 == &qword_4A99B8)
    {
      uint64_t v5 = &qword_4A99B8;
    }

    else
    {
      int v4 = (uint64_t *)v0;
      if (v0)
      {
        do
        {
          uint64_t v5 = v4;
          int v4 = (uint64_t *)v4[1];
        }

        while (v4);
      }

      else
      {
        uint64_t v6 = &qword_4A99B8;
        do
        {
          uint64_t v5 = (uint64_t *)v6[2];
          BOOL v7 = *v5 == (void)v6;
          uint64_t v6 = v5;
        }

        while (v7);
      }

      unsigned int v8 = *v3;
      if (*((_DWORD *)v5 + 8) >= *v3)
      {
        if (v0)
        {
          uint64_t v10 = &qword_4A99B8;
          while (1)
          {
            while (1)
            {
              __int128 v9 = (uint64_t *)v0;
              unsigned int v12 = *(_DWORD *)(v0 + 32);
              if (v8 >= v12) {
                break;
              }
              uint64_t v0 = *v9;
              uint64_t v10 = v9;
              if (!*v9) {
                goto LABEL_17;
              }
            }

            if (v12 >= v8) {
              break;
            }
            uint64_t v10 = v9 + 1;
            uint64_t v0 = v9[1];
            if (!v0) {
              goto LABEL_17;
            }
          }
        }

        else
        {
          __int128 v9 = &qword_4A99B8;
          uint64_t v10 = &qword_4A99B8;
        }

        goto LABEL_16;
      }
    }

    __int128 v9 = v0 ? v5 : &qword_4A99B8;
    uint64_t v10 = v0 ? v5 + 1 : &qword_4A99B8;
LABEL_16:
    if (!*v10)
    {
LABEL_17:
      __int128 v11 = operator new(0x30uLL);
      v11[2] = *(_OWORD *)v3;
      *(void *)__int128 v11 = 0LL;
      *((void *)v11 + 1) = 0LL;
      *((void *)v11 + 2) = v9;
      uint64_t *v10 = (uint64_t)v11;
      if (*(void *)qword_4A99B0)
      {
        qword_4A99B0 = *(void *)qword_4A99B0;
        __int128 v11 = (_OWORD *)*v10;
      }

      sub_7A420((uint64_t *)qword_4A99B8, (uint64_t *)v11);
      ++qword_4A99C0;
    }

    if (++v1 == 8) {
      break;
    }
    uint64_t v2 = (uint64_t *)qword_4A99B0;
    uint64_t v0 = qword_4A99B8;
  }

void sub_3B47E4(_Unwind_Exception *a1)
{
}

uint64_t *sub_3B47FC()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&qword_4A99C8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A99E0, (unsigned int *)v1, 1LL);
  qword_4A9A08 = 0LL;
  qword_4A9A00 = 0LL;
  qword_4A99F8 = (uint64_t)&qword_4A9A00;
  qword_4A9A10 = 0x7063776970617263LL;
  dword_4A9A18 = 0;
  byte_4A9A1C = 0;
  uint64_t result = sub_86550(qword_4A9A20, (uint64_t)&unk_4A99E0);
  word_4A9A38 = word_4A9A38 & 0xF800 | 0x617;
  return result;
}

_OWORD *sub_3B490C()
{
  __int128 v14 = off_486408;
  __int128 v15 = *(_OWORD *)"lovc";
  __int128 v16 = xmmword_486428;
  __int128 v17 = *(_OWORD *)&off_486438;
  __int128 v10 = xmmword_4863C8;
  __int128 v11 = *(_OWORD *)&off_4863D8;
  __int128 v12 = *(_OWORD *)"lovl";
  __int128 v13 = unk_4863F8;
  __int128 v6 = *(_OWORD *)"ulov";
  __int128 v7 = unk_486398;
  __int128 v8 = off_4863A8;
  __int128 v9 = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9A40, (unsigned int *)&v6, 8LL);
  LODWORD(v6) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9A58, (unsigned int *)&v6, 1LL);
  LODWORD(v6) = 1885500772;
  *((void *)&v6 + 1) = &off_485678;
  *(void *)&__int128 v7 = sub_13B7F8;
  *(void *)&__int128 v8 = (char *)&v6 + 8;
  DWORD2(v8) = 1718186601;
  *(void *)&__int128 v9 = &off_485678;
  *((void *)&v9 + 1) = sub_13BA90;
  *((void *)&v10 + 1) = &v9;
  LODWORD(v11) = 1651074168;
  *((void *)&v11 + 1) = &off_485678;
  *(void *)&__int128 v12 = sub_13C4A8;
  *(void *)&__int128 v13 = (char *)&v11 + 8;
  DWORD2(v13) = 1735287906;
  *(void *)&__int128 v14 = &off_485678;
  *((void *)&v14 + 1) = sub_13C8E0;
  *((void *)&v15 + 1) = &v14;
  LODWORD(v16) = 21;
  *((void *)&v16 + 1) = &off_485678;
  *(void *)&__int128 v17 = sub_13CE68;
  __int128 v18 = (char *)&v16 + 8;
  int v19 = 1920365171;
  __int128 v20 = &off_485678;
  __int128 v21 = sub_13D1B4;
  __int128 v22 = &v20;
  int v23 = 1684303986;
  __int128 v24 = &off_485678;
  uint64_t v25 = sub_13D4A4;
  __int128 v26 = &v24;
  int v27 = 1667789676;
  __int128 v28 = &off_485678;
  __int128 v29 = sub_13DEAC;
  __int128 v30 = &v28;
  int v31 = 1768907891;
  v32[0] = &off_485678;
  v32[1] = sub_13E248;
  uint64_t v32[3] = v32;
  int v33 = 1936749683;
  v34[0] = &off_485678;
  v34[1] = sub_13E92C;
  void v34[3] = v34;
  int v35 = 14;
  v36[0] = &off_485678;
  v36[1] = sub_13F1F8;
  void v36[3] = v36;
  int v37 = 1936746861;
  v38[0] = &off_485678;
  v38[1] = sub_13F544;
  v38[3] = v38;
  int v39 = 1835235437;
  v40[0] = &off_485678;
  v40[1] = sub_13F5DC;
  v40[3] = v40;
  int v41 = 1886548852;
  v42[0] = &off_485678;
  v42[1] = sub_13F674;
  v42[3] = v42;
  int v43 = 1886610801;
  v44[0] = &off_485678;
  v44[1] = sub_13F738;
  v44[3] = v44;
  int v45 = 1886352244;
  v46[0] = &off_485678;
  v46[1] = sub_13F7D0;
  v46[3] = v46;
  int v47 = 1701737068;
  v48[0] = &off_485678;
  v48[1] = sub_13F868;
  v48[3] = v48;
  int v49 = 1818326117;
  v50[0] = &off_485678;
  v50[1] = sub_13F938;
  v50[3] = v50;
  int v51 = 1701080167;
  v52[0] = &off_485678;
  v52[1] = sub_13FA08;
  v52[3] = v52;
  int v53 = 1633972835;
  v54[0] = &off_485678;
  v54[1] = sub_13FAD8;
  v54[3] = v54;
  int v55 = 1668248691;
  v56[0] = &off_485678;
  v56[1] = sub_13FBA8;
  v56[3] = v56;
  int v57 = 1634625388;
  v58[0] = &off_485678;
  v58[1] = sub_13FC40;
  v58[3] = v58;
  sub_13FCD8(&qword_4A9A70, (unsigned int *)&v6, 22LL);
  uint64_t v0 = 880LL;
  do
  {
    uint64_t v1 = *(_OWORD **)((char *)&v6 + v0 - 8);
    if ((__int128 *)((char *)&v6 + v0 - 32) == v1)
    {
      uint64_t v1 = (__int128 *)((char *)&v6 + v0 - 32);
      uint64_t v2 = 4LL;
    }

    else
    {
      if (!v1) {
        goto LABEL_7;
      }
      uint64_t v2 = 5LL;
    }

    (*(void (**)(void))(*(void *)v1 + 8 * v2))();
LABEL_7:
    v0 -= 40LL;
  }

  while (v0);
  LODWORD(v6) = 1987405668;
  *((void *)&v6 + 1) = &off_4856C0;
  *(void *)&__int128 v7 = sub_140150;
  *(void *)&__int128 v8 = (char *)&v6 + 8;
  DWORD2(v8) = 1987013749;
  *(void *)&__int128 v9 = &off_4856C0;
  *((void *)&v9 + 1) = sub_14028C;
  *((void *)&v10 + 1) = &v9;
  LODWORD(v11) = 1668706156;
  *((void *)&v11 + 1) = &off_4856C0;
  *(void *)&__int128 v12 = sub_141220;
  *(void *)&__int128 v13 = (char *)&v11 + 8;
  DWORD2(v13) = 1819701100;
  *(void *)&__int128 v14 = &off_4856C0;
  *((void *)&v14 + 1) = sub_14135C;
  *((void *)&v15 + 1) = &v14;
  LODWORD(v16) = 1953918828;
  *((void *)&v16 + 1) = &off_4856C0;
  *(void *)&__int128 v17 = sub_141450;
  __int128 v18 = (char *)&v16 + 8;
  int v19 = 1752659567;
  __int128 v20 = &off_4856C0;
  __int128 v21 = sub_141574;
  __int128 v22 = &v20;
  int v23 = 1987343987;
  __int128 v24 = &off_4856C0;
  uint64_t v25 = sub_14185C;
  __int128 v26 = &v24;
  int v27 = 1651275122;
  __int128 v28 = &off_4856C0;
  __int128 v29 = sub_141CFC;
  __int128 v30 = &v28;
  sub_141DE8(&qword_4A9A98, (unsigned int *)&v6, 8LL);
  uint64_t v3 = 320LL;
  do
  {
    uint64_t result = *(_OWORD **)((char *)&v6 + v3 - 8);
    if ((__int128 *)((char *)&v6 + v3 - 32) == result)
    {
      uint64_t result = (__int128 *)((char *)&v6 + v3 - 32);
      uint64_t v5 = 4LL;
    }

    else
    {
      if (!result) {
        goto LABEL_14;
      }
      uint64_t v5 = 5LL;
    }

    uint64_t result = (_OWORD *)(*(uint64_t (**)(void))(*(void *)result + 8 * v5))();
LABEL_14:
    v3 -= 40LL;
  }

  while (v3);
  return result;
}

void sub_3B4E64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 320LL;
  while (1)
  {
    int v4 = *(void **)(v1 + v3 - 8);
    if ((void *)(v1 + v3 - 32) == v4) {
      break;
    }
    if (v4)
    {
      uint64_t v5 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }

    v3 -= 40LL;
    if (!v3) {
      _Unwind_Resume(exception_object);
    }
  }

  int v4 = (void *)(v1 + v3 - 32);
  uint64_t v5 = 4LL;
  goto LABEL_6;
}

uint64_t sub_3B4F04()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9AC8, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A9AE0, (unsigned int *)v1, 1LL);
  qword_4A9B08 = 0LL;
  qword_4A9B00 = 0LL;
  qword_4A9AF8 = (uint64_t)&qword_4A9B00;
  return result;
}

uint64_t **sub_3B4FD0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9B10, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A9B28, (unsigned int *)v1, 8LL);
  qword_4A9B50 = 0LL;
  qword_4A9B48 = 0LL;
  qword_4A9B40 = (uint64_t)&qword_4A9B48;
  return result;
}

uint64_t sub_3B509C()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9B58, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A9B70, (unsigned int *)v1, 1LL);
  qword_4A9B98 = 0LL;
  qword_4A9B90 = 0LL;
  qword_4A9B88 = (uint64_t)&qword_4A9B90;
  return result;
}

uint64_t **sub_3B5168()
{
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9BA0, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_7A2A4((uint64_t **)&unk_4A9BB8, (unsigned int *)v1, 8LL);
  qword_4A9BE0 = 0LL;
  qword_4A9BD8 = 0LL;
  qword_4A9BD0 = (uint64_t)&qword_4A9BD8;
  return result;
}

uint64_t sub_3B5234()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9BF0, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_7A22C((uint64_t)&unk_4A9C08, (unsigned int *)v1, 1LL);
  qword_4A9C30 = 0LL;
  qword_4A9C28 = 0LL;
  qword_4A9C20 = (uint64_t)&qword_4A9C28;
  return result;
}

double sub_3B5300()
{
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9C38, (unsigned int *)v1, 8LL);
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9C50, (unsigned int *)v1, 1LL);
  qword_4A9C78 = 0LL;
  qword_4A9C70 = 0LL;
  qword_4A9C68 = (uint64_t)&qword_4A9C70;
  qmemcpy(&qword_4A9C80, "uolpiwcpnupe", 12);
  byte_4A9C8C = 1;
  sub_86550(qword_4A9C90, (uint64_t)&unk_4A9C50);
  word_4A9CA8 = word_4A9CA8 & 0xF800 | 0x41E;
  qmemcpy(&qword_4A9CB0, "wphpiwcpphpe", 12);
  byte_4A9CBC = 1;
  sub_86550(qword_4A9CC0, (uint64_t)&unk_4A9C50);
  word_4A9CD8 = word_4A9CD8 & 0xF800 | 0x616;
  qword_4A9CE0 = 0x70637769706D7769LL;
  dword_4A9CE8 = 0;
  byte_4A9CEC = 0;
  sub_86550(qword_4A9CF0, (uint64_t)&unk_4A9C50);
  word_4A9D08 = word_4A9D08 & 0xF800 | 0x617;
  qword_4A9D10 = 0x6F757470766F6C6DLL;
  dword_4A9D18 = 1;
  qword_4A9D20 = 0x6F757470766F6C64LL;
  dword_4A9D28 = 1;
  double result = 8.13208713e228;
  qword_4A9D30 = 0x6F75747076637370LL;
  dword_4A9D38 = 1;
  return result;
}

void sub_3B5504()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  LODWORD(v1[0]) = 1986295651;
  sub_7A22C((uint64_t)&unk_4A9D40, (unsigned int *)v1, 1LL);
  int v1[8] = off_486408;
  _OWORD v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_486428;
  v1[11] = *(_OWORD *)&off_486438;
  v1[4] = xmmword_4863C8;
  v1[5] = *(_OWORD *)&off_4863D8;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_4863F8;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_486398;
  v1[2] = off_4863A8;
  v1[3] = *(_OWORD *)"dguv";
  sub_7A2A4((uint64_t **)&unk_4A9D58, (unsigned int *)v1, 8LL);
  qword_4A9D80 = 0LL;
  qword_4A9D78 = 0LL;
  qword_4A9D70 = (uint64_t)&qword_4A9D78;
  objc_autoreleasePoolPop(v0);
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}