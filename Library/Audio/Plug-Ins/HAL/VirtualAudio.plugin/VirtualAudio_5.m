void sub_2128C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, std::__shared_weak_count *a46, uint64_t a47, uint64_t a48, std::__shared_weak_count *a49, uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a66;
  char a68;
  uint64_t v68;
  __cxa_guard_abort(&qword_48FA98);
  sub_7A768((uint64_t)&a43);
  a43 = (uint64_t)&a45;
  sub_7A668((void ***)&a43);
  if (a49) {
    std::__shared_weak_count::__release_weak(a49);
  }
  if (a51) {
    std::__shared_weak_count::__release_weak(a51);
  }
  if (*(_BYTE *)(v68 - 136)) {
    sub_D0C14(v68 - 176);
  }
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8LL))(a52);
  }
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a57) {
    std::__shared_weak_count::__release_weak(a57);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }

  if (a63) {
    operator delete(a63);
  }
  sub_7A768((uint64_t)&a66);
  sub_7A768((uint64_t)&a68);
  _Unwind_Resume(a1);
}

void sub_212D3C()
{
}

uint64_t sub_212D44()
{
  return 0LL;
}

void sub_212D4C( uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned int **a9, uint64_t a10, uint64_t a11)
{
  int v16 = *(_DWORD *)(v456 + 144);
  unsigned int v17 = sub_105B8C(*(uint64_t **)(a10 + 8), 4);
  if (v16 == 1886613611) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = 0;
  }
  if (v18 == 1)
  {
    v19 = (os_unfair_lock_s **)sub_105C24(a10, 4);
    v21 = *v19;
    v20 = (std::__shared_weak_count *)v19[1];
    v454 = *v19;
    v455 = v20;
    if (v20)
    {
      p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
      do
        unint64_t v23 = __ldxr(p_shared_weak_owners);
      while (__stxr(v23 + 1, p_shared_weak_owners));
    }
  }

  else
  {
    v21 = 0LL;
    v20 = 0LL;
    v454 = 0LL;
    v455 = 0LL;
  }

  if (sub_105B8C(*(uint64_t **)(a10 + 8), 3))
  {
    uint64_t v24 = sub_105C24(a10, 3);
    v25 = *(std::__shared_weak_count **)(v24 + 24);
    uint64_t v452 = *(void *)(v24 + 16);
    v453 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        unint64_t v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }

  else
  {
    uint64_t v452 = 0LL;
    v453 = 0LL;
  }

  int v417 = v16;
  if (sub_105B8C(*(uint64_t **)(a10 + 8), 9))
  {
    uint64_t v28 = sub_105C24(a10, 9);
    v29 = *(std::__shared_weak_count **)(v28 + 8);
    v450 = *(os_unfair_lock_s **)v28;
    v451 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_weak_owners_;
      do
        unint64_t v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
  }

  else
  {
    v450 = 0LL;
    v451 = 0LL;
  }

  if (*(_DWORD *)(a8 + 12) != 1768057203) {
    goto LABEL_31;
  }
  if (*(_BYTE *)(a8 + 200))
  {
    v32 = (os_log_t *)sub_138E8(19);
    v33 = *v32;
    if (*v32)
    {
      if (os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = a8 + 176;
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 489;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v34;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = "NetworkUplinkClock_UID";
        _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Conflict: Multiple clock devices present for Ibis. Route-defined clock %s, network uplink clock %s",  buf,  0x26u);
      }
    }
  }

  if (*(_DWORD *)(a8 + 12) == 1768057203)
  {
    sub_7D084(buf, "NetworkUplinkClock_UID");
    *(_OWORD *)v447 = *(_OWORD *)buf;
    uint64_t v448 = *(void *)&buf[16];
    char v449 = 1;
  }

  else
  {
LABEL_31:
    sub_C590C(v447, (__int128 *)(a8 + 176));
  }

  v35 = (os_log_t *)sub_138E8(19);
  v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
  {
    sub_7D084(__p, "none");
    if (v449)
    {
      if (SHIBYTE(v448) < 0)
      {
        sub_24054(__dst, v447[0], (unint64_t)v447[1]);
      }

      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v447;
        *(void *)&__dst[16] = v448;
      }
    }

    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__p;
      *(void *)&__dst[16] = v484;
      *(void *)&__int128 v484 = 0LL;
      __p[0] = 0LL;
      __p[1] = 0LL;
    }

    v37 = __dst;
    if (__dst[23] < 0) {
      v37 = *(_BYTE **)__dst;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 495;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v37;
    _os_log_impl(&dword_0, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Clock UID is %s", buf, 0x1Cu);
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if (SBYTE7(v484) < 0) {
      operator delete(__p[0]);
    }
  }

  char v38 = *(_BYTE *)(a8 + 156);
  *a1 = 0LL;
  uint64_t v418 = a8 + 120;
  if (a3 == a4)
  {
    if (v20)
    {
      v407 = (os_log_t *)sub_138E8(13);
      v408 = *v407;
      if (*v407 && os_log_type_enabled(*v407, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 503;
        _os_log_impl( &dword_0,  v408,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    int v48 = *(_DWORD *)(v456 + 144);
    *(_DWORD *)buf = *(_DWORD *)(v458 + 144);
    *(_DWORD *)&buf[4] = v48;
    sub_7A22C((uint64_t)theString, (unsigned int *)buf, 2LL);
    *(void *)&__int128 v427 = &v427;
    *((void *)&v427 + 1) = &v427;
    *(void *)&__int128 v428 = 0LL;
    v49 = (std::__shared_weak_count *)a5[1];
    if (v49)
    {
      v50 = std::__shared_weak_count::lock(v49);
      v51 = v50;
      if (v50)
      {
        uint64_t v52 = *a5;
        v53 = (unint64_t *)&v50->__shared_weak_owners_;
        do
          unint64_t v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          unint64_t v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v51);
        }

LABEL_193:
            v162 = operator new(0x20uLL);
            v162[2] = v157;
            v162[3] = v156;
            uint64_t v163 = v427;
            void *v162 = v427;
            v162[1] = &v427;
            *(void *)(v163 + 8) = v162;
            *(void *)&__int128 v427 = v162;
            *(void *)&__int128 v428 = v428 + 1;
            if (v453)
            {
              v164 = std::__shared_weak_count::lock(v453);
              v165 = v164;
              if (v164)
              {
                uint64_t v166 = v452;
                v167 = (unint64_t *)&v164->__shared_weak_owners_;
                do
                  unint64_t v168 = __ldxr(v167);
                while (__stxr(v168 + 1, v167));
                v169 = (unint64_t *)&v164->__shared_owners_;
                do
                  unint64_t v170 = __ldaxr(v169);
                while (__stlxr(v170 - 1, v169));
                if (!v170)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }

              else
              {
                uint64_t v166 = 0LL;
              }

              v181 = operator new(0x20uLL);
              v181[2] = v166;
              v181[3] = v165;
              uint64_t v182 = v427;
              void *v181 = v427;
              v181[1] = &v427;
              *(void *)(v182 + 8) = v181;
              *(void *)&__int128 v427 = v181;
              *(void *)&__int128 v428 = v428 + 1;
              sub_B8CBC((uint64_t *)buf, &v452, "", 513);
              sub_57ADC((uint64_t *)theString, *(_DWORD *)(*(void *)buf + 144LL), *(_DWORD *)(*(void *)buf + 144LL));
              v183 = *(std::__shared_weak_count **)&buf[8];
              if (*(void *)&buf[8])
              {
                v184 = (unint64_t *)(*(void *)&buf[8] + 8LL);
                do
                  unint64_t v185 = __ldaxr(v184);
                while (__stlxr(v185 - 1, v184));
                if (!v185)
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                }
              }
            }

            int v186 = sub_1BAB2C(*(_DWORD *)(a8 + 12));
            if (*(_BYTE *)(a8 + 164)) {
              int v187 = *(_DWORD *)(a8 + 160);
            }
            else {
              int v187 = v186;
            }
            v188 = operator new(0x30uLL);
            int v189 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120LL))(a3);
            sub_85A90(&v444, &v427);
            *(void *)v188 = off_484140;
            v188[2] = v189;
            *((void *)v188 + 2) = v188 + 4;
            *((void *)v188 + 3) = v188 + 4;
            *((void *)v188 + 4) = 0LL;
            uint64_t v190 = v446;
            if (v446)
            {
              uint64_t v192 = v444;
              v191 = v445;
              uint64_t v193 = *v445;
              *(void *)(v193 + 8) = *(void *)(v444 + 8);
              **(void **)(v192 + 8) = v193;
              uint64_t v194 = *((void *)v188 + 2);
              *(void *)(v194 + 8) = v191;
              void *v191 = v194;
              *((void *)v188 + 2) = v192;
              *(void *)(v192 + 8) = v188 + 4;
              *((void *)v188 + 4) = v190;
              uint64_t v446 = 0LL;
            }

            v188[10] = v187;
            *((_BYTE *)v188 + 44) = v38;
            v195 = operator new(0x18uLL);
            v196 = *(void **)(a11 + 8);
            void *v195 = a11;
            v195[1] = v196;
            v195[2] = v188;
            void *v196 = v195;
            uint64_t v197 = *(void *)(a11 + 16) + 1LL;
            *(void *)(a11 + 8) = v195;
            *(void *)(a11 + 16) = v197;
            sub_CCAB4((uint64_t)v188);
            sub_85B80(&v444);
            int v198 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 88LL))(a3, 0LL);
            BOOL v199 = ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 312LL))(a3) & 0xFF00000000LL) != 0;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a3 + 88LL))(a3, 1LL) <= 1
              && (*(unsigned int (**)(uint64_t, void))(*(void *)a3 + 88LL))(a3, 0LL) < 2)
            {
              goto LABEL_226;
            }

            if (_os_feature_enabled_impl("VirtualAudio", "podcast_production")
              && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a3 + 88LL))(a3, 1LL) <= 1
              && (v198 - v199) <= 1)
            {
              int v206 = *(_DWORD *)(a8 + 12);
              if (v206 <= 1987077986)
              {
                if (v206 == 1768057203) {
                  goto LABEL_323;
                }
                int v207 = 1919776355;
              }

              else
              {
                if (v206 == 1987077987 || v206 == 1987081833) {
                  goto LABEL_323;
                }
                int v207 = 1987081839;
              }

              if (v206 != v207)
              {
LABEL_226:
                if (v451 && ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 312LL))(a3) & 0xFF00000000LL) != 0)
                {
                  sub_B8CBC((uint64_t *)&v468, (uint64_t *)&v450, "", 530);
                  memset(__dst, 0, 32);
                  *(_DWORD *)&__dst[32] = 1065353216;
                  __int128 v484 = 0u;
                  *(_OWORD *)__p = 0u;
                  v485[0] = 1065353216;
                  unsigned int data = 0;
                  v467.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 312LL))(a3);
                  while (1)
                  {
                    LODWORD(v466.__r_.__value_.__l.__data_) = data;
                    if (v467.__r_.__value_.__s.__data_[4]) {
                      BOOL v201 = data == LODWORD(v467.__r_.__value_.__l.__data_);
                    }
                    else {
                      BOOL v201 = 0;
                    }
                    if (!v201)
                    {
                      sub_10AB90(v469, v458, (uint64_t)v459, a7);
                      v202 = sub_1D4250((uint64_t)__p, data, &v466);
                      sub_216E40((void *)v202 + 3, (uint64_t *)v469);
                      if (v470[0])
                      {
                        v470[1] = v470[0];
                        operator delete(v470[0]);
                      }

                      v203 = (std::__shared_weak_count *)v469[1];
                      if (v469[1])
                      {
                        v204 = (unint64_t *)((char *)v469[1] + 8);
                        do
                          unint64_t v205 = __ldaxr(v204);
                        while (__stlxr(v205 - 1, v204));
                        if (!v205)
                        {
                          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                          std::__shared_weak_count::__release_weak(v203);
                        }
                      }

                      unsigned int data = v466.__r_.__value_.__l.__data_;
                    }

                    ++data;
                  }

                  if (v468.__r_.__value_.__r.__words[0])
                  {
                    *(_OWORD *)v469 = *(_OWORD *)&v468.__r_.__value_.__l.__data_;
                    if (v468.__r_.__value_.__l.__size_)
                    {
                      v227 = (unint64_t *)(v468.__r_.__value_.__l.__size_ + 8);
                      do
                        unint64_t v228 = __ldxr(v227);
                      while (__stxr(v228 + 1, v227));
                    }

                    v470[1] = 0LL;
                    v470[0] = 0LL;
                    v471[0] = 0LL;
                    v229 = sub_1D4250((uint64_t)__p, v467.__r_.__value_.__l.__data_, &v467);
                    sub_216E40((void *)v229 + 3, (uint64_t *)v469);
                    if (v470[0])
                    {
                      v470[1] = v470[0];
                      operator delete(v470[0]);
                    }

                    v230 = (std::__shared_weak_count *)v469[1];
                    if (v469[1])
                    {
                      v231 = (unint64_t *)((char *)v469[1] + 8);
                      do
                        unint64_t v232 = __ldaxr(v231);
                      while (__stlxr(v232 - 1, v231));
                      if (!v232)
                      {
                        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                        std::__shared_weak_count::__release_weak(v230);
                      }
                    }
                  }

                  for (unsigned int i = 0; ; ++i)
                  {
                    LODWORD(v469[0]) = i;
                    v234 = sub_216ECC((uint64_t)__dst, i, v469);
                    uint64_t v236 = v456;
                    v235 = v457;
                    if (v457)
                    {
                      v237 = (unint64_t *)&v457->__shared_weak_owners_;
                      do
                        unint64_t v238 = __ldxr(v237);
                      while (__stxr(v238 + 1, v237));
                    }

                    v239 = (std::__shared_weak_count *)v234[4];
                    v234[3] = v236;
                    v234[4] = v235;
                    if (v239) {
                      std::__shared_weak_count::__release_weak(v239);
                    }
                  }

                  sub_1D3E10((uint64_t *)buf, a3, (uint64_t)__p, (uint64_t)__dst);
                  sub_10ACC8((uint64_t)__p);
                  sub_10ABFC((uint64_t)__dst);
                  size = (std::__shared_weak_count *)v468.__r_.__value_.__l.__size_;
                  if (v468.__r_.__value_.__l.__size_)
                  {
                    v241 = (unint64_t *)(v468.__r_.__value_.__l.__size_ + 8);
                    do
                      unint64_t v242 = __ldaxr(v241);
                    while (__stlxr(v242 - 1, v241));
                    if (!v242)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                }

                else
                {
                  sub_1D4510((uint64_t *)buf, a3, v458, v456, a7);
                }

                sub_2170E4((uint64_t)buf, a10);
                unsigned __int8 v243 = _os_feature_enabled_impl("VirtualAudio", "podcast_production");
                if ((v243 & (v451 != 0LL)) != 0) {
                  uint64_t v244 = 2LL;
                }
                else {
                  uint64_t v244 = 0LL;
                }
                v245 = (os_log_t *)sub_138E8(19);
                v246 = *v245;
                if (*v245 && os_log_type_enabled(*v245, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1D4C48((std::string *)__p, (uint64_t)buf);
                  v247 = (SBYTE7(v484) & 0x80u) == 0 ? __p : (void **)__p[0];
                  *(_DWORD *)__dst = 136315906;
                  *(void *)&__dst[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
                  *(_WORD *)&__dst[12] = 1024;
                  *(_DWORD *)&__dst[14] = 544;
                  *(_WORD *)&__dst[18] = 2080;
                  *(void *)&__dst[20] = v247;
                  *(_WORD *)&__dst[28] = 1024;
                  *(_DWORD *)&__dst[30] = v244;
                  _os_log_impl( &dword_0,  v246,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device Description: %s, device input usage: %d",  __dst,  0x22u);
                  if (SBYTE7(v484) < 0) {
                    operator delete(__p[0]);
                  }
                }

                v248 = *(unsigned int **)a8;
                sub_105E0C((char **)__dst, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
                v249 = sub_10A5F4( (uint64_t *)buf,  1,  1,  v248,  v418,  (__int128 *)(a8 + 24),  a8 + 40,  (void **)__dst,  v244,  (uint64_t)theString,  (__int128 *)v447);
                v250 = *a1;
                *a1 = v249;
                if (v250) {
                  (*(void (**)(uint64_t *))(*v250 + 8))(v250);
                }
                __p[0] = __dst;
                sub_7A668((void ***)__p);
                sub_85D64(v480);
                sub_85D64(v477);
                *(void *)__dst = &buf[32];
                sub_85DA4((void ***)__dst);
                *(void *)__dst = &buf[8];
                sub_85DA4((void ***)__dst);
LABEL_367:
                sub_85B80((uint64_t *)&v427);
                sub_32C8C(&theString[1]->isa);
                goto LABEL_583;
              }
            }

LABEL_272:
    int v222 = *(_DWORD *)(a8 + 12);
    if (v222 <= 1987077986)
    {
      if (v222 == 1768057203) {
        goto LABEL_405;
      }
      int v223 = 1919776355;
    }

    else
    {
      if (v222 == 1987077987 || v222 == 1987081833) {
        goto LABEL_405;
      }
      int v223 = 1987081839;
    }

    if (v222 != v223 && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 328LL))(a3))
    {
      sub_1D2530(buf, a4, v456);
      sub_1D3810(__dst, a3, v458, 0, a7);
      v224 = *(unsigned int **)a8;
      sub_105E0C((char **)v469, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
      sub_85EA4(__p, buf);
      sub_210660((uint64_t *)theString, __p, 1LL);
      v468.__r_.__value_.__r.__words[0] = sub_1BAFD8( (uint64_t)theString,  *(_DWORD *)(a8 + 12),  *(unsigned __int8 *)(a8 + 156));
      v225 = sub_217730( (uint64_t *)__dst,  (uint64_t *)buf,  v224,  v418,  (__int128 *)(a8 + 24),  a8 + 40,  (void **)v469,  (uint64_t *)&v468,  (uint64_t)v433,  (__int128 *)v447);
      v226 = *a1;
      *a1 = v225;
      if (v226) {
        (*(void (**)(uint64_t *))(*v226 + 8))(v226);
      }
      sub_85CA0((uint64_t *)theString);
      sub_85D64(v487);
      sub_85D64(v486);
      *(void *)&__int128 v427 = v485;
      sub_85DA4((void ***)&v427);
      *(void *)&__int128 v427 = &__p[1];
      sub_85DA4((void ***)&v427);
      __p[0] = v469;
      sub_7A668((void ***)__p);
      sub_10A59C((uint64_t)__dst);
      sub_10A59C((uint64_t)buf);
      goto LABEL_410;
    }

    goto LABEL_405;
  }

  sub_1D2530(__dst, a4, v456);
  sub_2170E4((uint64_t)__dst, a10);
  sub_1D3810(__p, a3, v458, 0, a7);
  v131 = (os_log_t *)sub_138E8(19);
  v132 = *v131;
  if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_DEFAULT))
  {
    sub_D3ECC(v469, &v454);
    v133 = SHIBYTE(v470[0]) >= 0 ? v469 : (void **)v469[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 640;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v133;
    _os_log_impl(&dword_0, v132, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Telemetry source is %s", buf, 0x1Cu);
    if (SHIBYTE(v470[0]) < 0) {
      operator delete(v469[0]);
    }
  }

  v134 = (os_log_t *)sub_138E8(19);
  v135 = *v134;
  if (*v134 && os_log_type_enabled(*v134, OS_LOG_TYPE_DEFAULT))
  {
    sub_D3ECC(v469, &v450);
    v136 = SHIBYTE(v470[0]) >= 0 ? v469 : (void **)v469[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 641;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v136;
    _os_log_impl(&dword_0, v135, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TapStream source is %s", buf, 0x1Cu);
    if (SHIBYTE(v470[0]) < 0) {
      operator delete(v469[0]);
    }
  }

  uint64_t v137 = (uint64_t)v442;
  if (!v442)
  {
    if (sub_105B8C(*(uint64_t **)(a10 + 8), 9))
    {
      v175 = (void *)sub_105C24(a10, 9);
      uint64_t v176 = v175[1];
      *(void *)&__int128 v427 = *v175;
      *((void *)&v427 + 1) = v176;
      if (v176)
      {
        v177 = (unint64_t *)(v176 + 16);
        do
          unint64_t v178 = __ldxr(v177);
        while (__stxr(v178 + 1, v177));
        uint64_t v179 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 312LL))(a4);
        unsigned int v180 = v179;
        if ((v179 & 0xFF00000000LL) == 0)
        {
          v413 = (os_log_t *)sub_138E8(13);
          v414 = *v413;
          if (*v413 && os_log_type_enabled(*v413, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(CFStringRef *__return_ptr))(*(void *)a4 + 128LL))(theString);
            sub_48E98(v469, theString[0]);
            if (SHIBYTE(v470[0]) >= 0) {
              v415 = v469;
            }
            else {
              v415 = (void **)v469[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 651;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v415;
            _os_log_impl( &dword_0,  v414,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No valid tap stream index present for device %s",  buf,  0x1Cu);
            if (SHIBYTE(v470[0]) < 0) {
              operator delete(v469[0]);
            }
            sub_19DFC((uint64_t)theString);
          }

          v416 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v416, "No valid tap stream index present for device %s");
        }

        sub_B8CBC((uint64_t *)v469, (uint64_t *)&v427, "", 654);
        sub_1D48AC((uint64_t *)buf, a4, (uint64_t)v469[0], v180, v456, a7);
        *(void *)__dst = *(void *)buf;
        sub_2176CC((uint64_t **)&__dst[8]);
        *(_OWORD *)&__dst[8] = *(_OWORD *)&buf[8];
        *(void *)&__dst[24] = *(void *)&buf[24];
        memset(&buf[8], 0, 24);
        sub_2176CC((uint64_t **)&__dst[32]);
        *(_OWORD *)&__dst[32] = *(_OWORD *)&buf[32];
        uint64_t v489 = v475;
        uint64_t v475 = 0LL;
        *(_OWORD *)&buf[32] = 0uLL;
        sub_85D64(v491[0]);
        v490 = v476;
        v491[0] = v477;
        v491[1] = v478;
        if (v478)
        {
          v477[2] = v491;
          v476 = &v477;
          v477 = 0LL;
          v478 = 0LL;
        }

        else
        {
          v490 = v491;
        }

        sub_85D64(v493[0]);
        v302 = v480;
        v492 = v479;
        v493[0] = v480;
        v493[1] = v481;
        if (v481)
        {
          v480[2] = v493;
          v479 = &v480;
          v480 = 0LL;
          v481 = 0LL;
          v302 = 0LL;
        }

        else
        {
          v492 = v493;
        }

        sub_85D64(v302);
        sub_85D64(v477);
        theString[0] = (CFStringRef)&buf[32];
        sub_85DA4((void ***)theString);
        theString[0] = (CFStringRef)&buf[8];
        sub_85DA4((void ***)theString);
        v303 = (std::__shared_weak_count *)v469[1];
        if (v469[1])
        {
          v304 = (unint64_t *)((char *)v469[1] + 8);
          do
            unint64_t v305 = __ldaxr(v304);
          while (__stlxr(v305 - 1, v304));
          if (!v305)
          {
            ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
            std::__shared_weak_count::__release_weak(v303);
          }
        }

        if (*((void *)&v427 + 1))
        {
          int v306 = *(_DWORD *)(a8 + 12);
          if (v306 <= 1987077986)
          {
            if (v306 == 1768057203) {
              goto LABEL_429;
            }
            int v307 = 1919776355;
          }

          else
          {
            if (v306 == 1987077987 || v306 == 1987081839) {
              goto LABEL_429;
            }
            int v307 = 1987081833;
          }

          if (v306 == v307)
          {
LABEL_429:
            sub_85EA4(buf, __dst);
            sub_210660((uint64_t *)v469, buf, 1LL);
            v467.__r_.__value_.__r.__words[0] = sub_1BAFD8( (uint64_t)v469,  *(_DWORD *)(a8 + 12),  *(unsigned __int8 *)(a8 + 156));
            sub_85CA0((uint64_t *)v469);
            sub_85D64(v480);
            sub_85D64(v477);
            theString[0] = (CFStringRef)&buf[32];
            sub_85DA4((void ***)theString);
            theString[0] = (CFStringRef)&buf[8];
            sub_85DA4((void ***)theString);
            sub_85EA4(buf, __p);
            sub_85EA4(v482, __dst);
            v469[1] = 0LL;
            v469[0] = 0LL;
            v470[0] = 0LL;
            theString[0] = (CFStringRef)v469;
            LOBYTE(theString[1]) = 0;
            v469[0] = operator new(0xD0uLL);
            v469[1] = v469[0];
            v470[0] = (char *)v469[0] + 208;
            uint64_t v308 = 0LL;
            v469[1] = (void *)sub_10A49C((uint64_t)buf, (uint64_t)__p, (uint64_t)v469[0]);
            do
            {
              sub_85D64((void *)v482[v308 + 11]);
              sub_85D64((void *)v482[v308 + 8]);
              theString[0] = (CFStringRef)&v482[v308 + 4];
              sub_85DA4((void ***)theString);
              theString[0] = (CFStringRef)&v482[v308 + 1];
              sub_85DA4((void ***)theString);
              v308 -= 13LL;
            }

            while (v308 != -26);
            if (!sub_105B8C(*(uint64_t **)(a10 + 8), 9)
              || (v309 = sub_105BDC(*(uint64_t **)(a10 + 8), 9),
                  v311 = (const void *)*v309,
                  uint64_t v310 = v309[1],
                  int64_t v312 = v310 - *v309,
                  v310 == *v309))
            {
              v313 = 0LL;
              v314 = 0LL;
            }

            else
            {
              if (v312 < 0) {
                sub_7A87C();
              }
              v313 = (char *)sub_7DC90(v312 >> 3);
              memmove(v313, v311, v312);
              v314 = &v313[8 * (v312 >> 3)];
            }

            uint64_t v315 = v314 - v313;
            v422 = v313;
            if ((unint64_t)v315 >= 9)
            {
              unint64_t v316 = v315 >> 3;
              if (v316 <= 2) {
                uint64_t v317 = 2LL;
              }
              else {
                uint64_t v317 = v316;
              }
              for (junsigned int j = 1LL; jj != v317; ++jj)
              {
                sub_B8CBC((uint64_t *)theString, *(uint64_t **)&v313[8 * jj], "", 678);
                isa = theString[0][6].isa;
                uint64_t v320 = (*(uint64_t (**)(void *))(*(void *)isa + 312LL))(isa);
                unsigned int v321 = v320;
                if ((v320 & 0xFF00000000LL) == 0)
                {
                  v328 = (os_log_t *)sub_138E8(16);
                  v329 = *v328;
                  if (*v328)
                  {
                    if (os_log_type_enabled(*v328, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315394;
                      *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 683;
                      _os_log_impl( &dword_0,  v329,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Tap stream object in route does not have associated tap stream index! Skipping",  buf,  0x12u);
                    }
                  }
                }

                sub_1D3810(buf, (uint64_t)isa, (uint64_t)theString[0], v321, a7);
                if (v469[1] >= v470[0])
                {
                  uint64_t v323 = 0x4EC4EC4EC4EC4EC5LL * (((char *)v469[1] - (char *)v469[0]) >> 3);
                  unint64_t v324 = v323 + 1;
                  else {
                    unint64_t v325 = v324;
                  }
                  if (v325)
                  {
                    v327 = sub_2194C8(v325);
                  }

                  else
                  {
                    v327 = 0LL;
                    uint64_t v326 = 0LL;
                  }

                  v330 = (char *)&v327[13 * v326];
                  v331 = sub_20DEC4(&v327[13 * v323], (uint64_t)buf);
                  v322 = v331 + 13;
                  v332 = (char *)v469[1];
                  v333 = (char *)v469[0];
                  if (v469[1] == v469[0])
                  {
                    v469[0] = v331;
                    v469[1] = v331 + 13;
                    v470[0] = v330;
                  }

                  else
                  {
                    do
                    {
                      v332 -= 104;
                      v331 = sub_20DEC4(v331 - 13, (uint64_t)v332);
                    }

                    while (v332 != v333);
                    v334 = (char *)v469[0];
                    v332 = (char *)v469[1];
                    v469[0] = v331;
                    v469[1] = v322;
                    v470[0] = v330;
                    if (v332 != v334)
                    {
                      do
                      {
                        v332 -= 104;
                        sub_85D10((uint64_t)v332);
                      }

                      while (v332 != v334);
                      v332 = v334;
                    }
                  }

                  v313 = v422;
                  if (v332) {
                    operator delete(v332);
                  }
                }

                else
                {
                  v322 = sub_20DEC4((void *)v469[1], (uint64_t)buf) + 13;
                }

                v469[1] = v322;
                sub_85D64(v480);
                sub_85D64(v477);
                v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[32];
                sub_85DA4((void ***)&v468);
                v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[8];
                sub_85DA4((void ***)&v468);
                v335 = (std::__shared_weak_count *)theString[1];
                if (theString[1])
                {
                  p_info = &theString[1]->info;
                  do
                    unint64_t v337 = __ldaxr((unint64_t *)p_info);
                  while (__stlxr(v337 - 1, (unint64_t *)p_info));
                  if (!v337)
                  {
                    ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                    std::__shared_weak_count::__release_weak(v335);
                  }
                }
              }
            }

            uint64_t v338 = *(void *)a8;
            sub_105E0C((char **)buf, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
            v339 = sub_2B7D7C( (uint64_t **)v469,  v338,  (__int128 *)(a8 + 24),  a8 + 40,  (void **)buf,  v418,  &v467,  v433,  (__int128 *)v447);
            v340 = *a1;
            *a1 = v339;
            if (v340) {
              (*(void (**)(uint64_t *))(*v340 + 8))(v340);
            }
            theString[0] = (CFStringRef)buf;
            sub_7A668((void ***)theString);
            if (v313) {
              operator delete(v313);
            }
            *(void *)buf = v469;
            sub_10A52C((void ***)buf);
            goto LABEL_379;
          }

          sub_B8CBC((uint64_t *)buf, (uint64_t *)&v427, "", 710);
          v400 = *(std::__shared_weak_count **)&buf[8];
          uint64_t v401 = *(unsigned int *)(*(void *)buf + 144LL);
          if (*(void *)&buf[8])
          {
            v402 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              unint64_t v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
              std::__shared_weak_count::__release_weak(v400);
            }
          }

          if ((_DWORD)v401 != 1886614640)
          {
            v404 = (os_log_t *)sub_138E8(13);
            v405 = *v404;
            if (*v404)
            {
              if (os_log_type_enabled(*v404, OS_LOG_TYPE_ERROR))
              {
                sub_2CA1C(v469, v401);
                v406 = SHIBYTE(v470[0]) >= 0 ? v469 : (void **)v469[0];
                *(_DWORD *)buf = 136315650;
                *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 713;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v406;
                _os_log_impl( &dword_0,  v405,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected tapstream present - not from speaker (%s)",  buf,  0x1Cu);
                if (SHIBYTE(v470[0]) < 0) {
                  operator delete(v469[0]);
                }
              }
            }
          }

          int v208 = 2;
          int v209 = 3;
LABEL_253:
          sub_85EA4(buf, __dst);
          sub_210660((uint64_t *)v469, buf, 1LL);
          uint64_t v210 = sub_1BAF50((uint64_t)v469);
          sub_85CA0((uint64_t *)v469);
          sub_85D64(v480);
          sub_85D64(v477);
          theString[0] = (CFStringRef)&buf[32];
          sub_85DA4((void ***)theString);
          theString[0] = (CFStringRef)&buf[8];
          sub_85DA4((void ***)theString);
          if ((v210 & 0xFFFFFFFD) == 1)
          {
            int v211 = *(_DWORD *)(a8 + 12);
            if (v211 <= 1987077986)
            {
              if (v211 != 1768057203)
              {
                int v212 = 1919776355;
LABEL_373:
                int v208 = v210;
                if (v211 != v212) {
                  int v208 = v209;
                }
                goto LABEL_376;
              }
            }

            else if (v211 != 1987077987 && v211 != 1987081833)
            {
              int v212 = 1987081839;
              goto LABEL_373;
            }

            int v208 = v210;
          }

LABEL_376:
          v281 = *(unsigned int **)a8;
          sub_105E0C((char **)buf, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
          v469[0] = (void *)__PAIR64__(HIDWORD(v210), v208);
          v282 = sub_217730( (uint64_t *)__p,  (uint64_t *)__dst,  v281,  v418,  (__int128 *)(a8 + 24),  a8 + 40,  (void **)buf,  (uint64_t *)v469,  (uint64_t)v433,  (__int128 *)v447);
          v283 = *a1;
          *a1 = v282;
          if (v283) {
            (*(void (**)(uint64_t *))(*v283 + 8))(v283);
          }
          v469[0] = buf;
          sub_7A668((void ***)v469);
LABEL_379:
          v284 = (std::__shared_weak_count *)*((void *)&v427 + 1);
          if (!*((void *)&v427 + 1)) {
            goto LABEL_577;
          }
          goto LABEL_576;
        }
      }
    }

    else
    {
      __int128 v427 = 0uLL;
    }

    int v208 = 0;
    int v209 = 1;
    goto LABEL_253;
  }

  unsigned int v138 = sub_105B8C(*(uint64_t **)(a10 + 8), 9);
  if (v16 == 1886613611) {
    unsigned int v139 = v138;
  }
  else {
    unsigned int v139 = 0;
  }
  if (v139 != 1 || (v140 = (uint64_t *)sub_105C24(a10, 9), (v141 = (std::__shared_weak_count *)v140[1]) == 0LL))
  {
    sub_1D48AC((uint64_t *)v469, a4, v137, 0, v456, a7);
    sub_85EA4(buf, __p);
    sub_85EA4(v482, v469);
    theString[0] = 0LL;
    theString[1] = 0LL;
    *(void *)&__int128 v431 = 0LL;
    *(void *)&__int128 v427 = theString;
    BYTE8(v427) = 0;
    theString[0] = (CFStringRef)operator new(0xD0uLL);
    theString[1] = theString[0];
    *(void *)&__int128 v431 = (char *)theString[0] + 208;
    theString[1] = (CFStringRef)sub_10A49C((uint64_t)buf, (uint64_t)__p, (uint64_t)theString[0]);
    uint64_t v171 = *(void *)a8;
    sub_105E0C((char **)&v427, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
    v468.__r_.__value_.__r.__words[0] = 0LL;
    v172 = sub_2B7D7C( (uint64_t **)theString,  v171,  (__int128 *)(a8 + 24),  a8 + 40,  (void **)&v427,  v418,  &v468,  v433,  (__int128 *)v447);
    v173 = *a1;
    *a1 = v172;
    if (v173) {
      (*(void (**)(uint64_t *))(*v173 + 8))(v173);
    }
    v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&v427;
    sub_7A668((void ***)&v468);
    *(void *)&__int128 v427 = theString;
    sub_10A52C((void ***)&v427);
    for (kuint64_t k = 0LL; kk != -26; kk -= 13LL)
    {
      sub_85D64((void *)v482[kk + 11]);
      sub_85D64((void *)v482[kk + 8]);
      *(void *)&__int128 v427 = &v482[kk + 4];
      sub_85DA4((void ***)&v427);
      *(void *)&__int128 v427 = &v482[kk + 1];
      sub_85DA4((void ***)&v427);
    }

    sub_85D64(v473);
    sub_85D64(v472);
    *(void *)buf = v471;
    sub_85DA4((void ***)buf);
    *(void *)buf = &v469[1];
    sub_85DA4((void ***)buf);
    goto LABEL_577;
  }

  uint64_t v142 = *v140;
  v143 = (unint64_t *)&v141->__shared_weak_owners_;
  do
    unint64_t v144 = __ldxr(v143);
  while (__stxr(v144 + 1, v143));
  *(_OWORD *)theString = 0u;
  __int128 v431 = 0u;
  float v432 = 1.0;
  __int128 v427 = 0u;
  __int128 v428 = 0u;
  float v429 = 1.0;
  *(void *)buf = v454;
  *(void *)&buf[8] = v455;
  if (v455)
  {
    v145 = &v455->__shared_weak_owners_;
    do
      unint64_t v146 = __ldxr((unint64_t *)v145);
    while (__stxr(v146 + 1, (unint64_t *)v145));
  }

  memset(&buf[16], 0, 24);
  v147 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v147 + 24) = 0u;
  v469[0] = v147;
  v469[1] = &v428;
  *(_OWORD *)(v147 + 40) = 0u;
  *((void *)v147 + 7) = 0LL;
  *(void *)v147 = 0LL;
  *((void *)v147 + 1) = 0LL;
  *((_DWORD *)v147 + 4) = 0;
  LOBYTE(v470[0]) = 1;
  unint64_t v148 = vcvtps_u32_f32((float)(unint64_t)(*((void *)&v428 + 1) + 1LL) / v429);
  if (v148 <= 1) {
    size_t v149 = 1LL;
  }
  else {
    size_t v149 = v148;
  }
  sub_52168((uint64_t)&v427, v149);
  v150 = (void *)v427;
  v151 = *(void **)v427;
  if (*(void *)v427)
  {
    *(void *)v147 = *v151;
  }

  else
  {
    unint64_t v279 = *((void *)&v427 + 1);
    *(void *)v147 = v428;
    *(void *)&__int128 v428 = v147;
    void *v150 = &v428;
    if (!*(void *)v147) {
      goto LABEL_479;
    }
    unint64_t v280 = *(void *)(*(void *)v147 + 8LL);
    if ((v279 & (v279 - 1)) != 0)
    {
      if (v280 >= v279) {
        v280 %= v279;
      }
    }

    else
    {
      v280 &= v279 - 1;
    }

    v151 = (void *)(v427 + 8 * v280);
  }

  void *v151 = v147;
LABEL_479:
  v469[0] = 0LL;
  ++*((void *)&v428 + 1);
  sub_10AF1C((uint64_t)v469);
  sub_1D4498((uint64_t)(v147 + 24), (__int128 *)buf);
  if (*(void *)&buf[16]) {
    operator delete(*(void **)&buf[16]);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v341 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 312LL))(a4);
  uint64_t v426 = v341;
  if ((v341 & 0xFF00000000LL) == 0)
  {
    v410 = (os_log_t *)sub_138E8(13);
    v411 = *v410;
    if (*v410 && os_log_type_enabled(*v410, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 755;
      _os_log_impl(&dword_0, v411, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    v412 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v412, "Precondition failure.");
  }

  *(void *)buf = v142;
  *(void *)&buf[8] = v141;
  do
    unint64_t v342 = __ldxr(v143);
  while (__stxr(v342 + 1, v143));
  memset(&buf[16], 0, 24);
  v343 = sub_1D4250((uint64_t)&v427, v341, &v426);
  sub_1D4498((uint64_t)(v343 + 24), (__int128 *)buf);
  if (*(void *)&buf[16]) {
    operator delete(*(void **)&buf[16]);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  unint64_t v344 = (unint64_t)theString[1];
  if (theString[1])
  {
    v345 = (void **)theString[0]->isa;
    if (theString[0]->isa)
    {
      v346 = *v345;
      if (*v345)
      {
        uint8x8_t v347 = (uint8x8_t)vcnt_s8((int8x8_t)theString[1]);
        v347.i16[0] = vaddlv_u8(v347);
        do
        {
          unint64_t v348 = *((void *)v346 + 1);
          if (v348)
          {
            if (v347.u32[0] > 1uLL)
            {
              if ((CFStringRef)v348 < theString[1]) {
                break;
              }
              unint64_t v349 = v348 % (unint64_t)theString[1];
            }

            else
            {
              unint64_t v349 = v348 & ((unint64_t)&theString[1][-1].length + 7);
            }

            if (v349) {
              break;
            }
          }

          else if (!*((_DWORD *)v346 + 4))
          {
            goto LABEL_521;
          }

          v346 = *(void **)v346;
        }

        while (v346);
      }
    }
  }

  v346 = operator new(0x28uLL);
  *((void *)v346 + 3) = 0LL;
  *((void *)v346 + 4) = 0LL;
  *(void *)v346 = 0LL;
  *((void *)v346 + 1) = 0LL;
  *((_DWORD *)v346 + 4) = 0;
  float v350 = (float)(unint64_t)(*((void *)&v431 + 1) + 1LL);
  if (!v344 || (float)(v432 * (float)v344) < v350)
  {
    BOOL v351 = 1LL;
    if (v344 >= 3) {
      BOOL v351 = (v344 & (v344 - 1)) != 0;
    }
    unint64_t v352 = v351 | (2 * v344);
    unint64_t v353 = vcvtps_u32_f32(v350 / v432);
    if (v352 <= v353) {
      size_t v354 = v353;
    }
    else {
      size_t v354 = v352;
    }
    sub_52168((uint64_t)theString, v354);
    unint64_t v344 = (unint64_t)theString[1];
  }

  v355 = (__CFString *)theString[0];
  v356 = (void **)theString[0]->isa;
  if (theString[0]->isa)
  {
    *(void *)v346 = *v356;
  }

  else
  {
    *(void *)v346 = v431;
    *(void *)&__int128 v431 = v346;
    v355->isa = &v431;
    if (!*(void *)v346) {
      goto LABEL_520;
    }
    unint64_t v357 = *(void *)(*(void *)v346 + 8LL);
    if ((v344 & (v344 - 1)) != 0)
    {
      if (v357 >= v344) {
        v357 %= v344;
      }
    }

    else
    {
      v357 &= v344 - 1;
    }

    v356 = &theString[0]->isa + v357;
  }

  *v356 = v346;
LABEL_520:
  ++*((void *)&v431 + 1);
LABEL_521:
  v358 = (std::__shared_weak_count *)a6[1];
  if (v358)
  {
    v359 = std::__shared_weak_count::lock(v358);
    v360 = v359;
    if (v359)
    {
      uint64_t v361 = *a6;
      v362 = (unint64_t *)&v359->__shared_weak_owners_;
      do
        unint64_t v363 = __ldxr(v362);
      while (__stxr(v363 + 1, v362));
      v364 = (unint64_t *)&v359->__shared_owners_;
      do
        unint64_t v365 = __ldaxr(v364);
      while (__stlxr(v365 - 1, v364));
      if (!v365)
      {
        ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
        std::__shared_weak_count::__release_weak(v360);
      }
    }

    else
    {
      uint64_t v361 = 0LL;
    }
  }

  else
  {
    uint64_t v361 = 0LL;
    v360 = 0LL;
  }

  v366 = (std::__shared_weak_count *)*((void *)v346 + 4);
  *((void *)v346 + 3) = v361;
  *((void *)v346 + 4) = v360;
  if (v366) {
    std::__shared_weak_count::__release_weak(v366);
  }
  sub_1D3E10((uint64_t *)v469, a4, (uint64_t)&v427, (uint64_t)theString);
  sub_85EA4(buf, v469);
  sub_210660((uint64_t *)&v468, buf, 1LL);
  unint64_t v367 = sub_1BAFD8((uint64_t)&v468, *(_DWORD *)(a8 + 12), *(unsigned __int8 *)(a8 + 156));
  unint64_t v425 = v367;
  sub_85CA0((uint64_t *)&v468);
  sub_85D64(v480);
  sub_85D64(v477);
  v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[32];
  sub_85DA4((void ***)&v467);
  v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[8];
  sub_85DA4((void ***)&v467);
  v368 = (os_log_t *)sub_138E8(19);
  v369 = *v368;
  if (*v368 && os_log_type_enabled(*v368, OS_LOG_TYPE_DEFAULT))
  {
    sub_7D084(&v464, "{");
    v370 = std::string::append(&v464, " deviceInputUsage: ", 0x13uLL);
    __int128 v371 = *(_OWORD *)&v370->__r_.__value_.__l.__data_;
    v465.__r_.__value_.__l.__cap_ = v370->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v465.__r_.__value_.__l.__data_ = v371;
    v370->__r_.__value_.__l.__size_ = 0LL;
    v370->__r_.__value_.__l.__cap_ = 0LL;
    v370->__r_.__value_.__r.__words[0] = 0LL;
    if ((v367 & 0xFFFFFFFC) != 0) {
      v372 = "Unexpected value";
    }
    else {
      v372 = off_476400[v367];
    }
    sub_7D084(v462, v372);
    if ((v463 & 0x80u) == 0) {
      v373 = v462;
    }
    else {
      v373 = (void **)v462[0];
    }
    if ((v463 & 0x80u) == 0) {
      std::string::size_type v374 = v463;
    }
    else {
      std::string::size_type v374 = (std::string::size_type)v462[1];
    }
    v375 = std::string::append(&v465, (const std::string::value_type *)v373, v374);
    __int128 v376 = *(_OWORD *)&v375->__r_.__value_.__l.__data_;
    v466.__r_.__value_.__l.__cap_ = v375->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v466.__r_.__value_.__l.__data_ = v376;
    v375->__r_.__value_.__l.__size_ = 0LL;
    v375->__r_.__value_.__l.__cap_ = 0LL;
    v375->__r_.__value_.__r.__words[0] = 0LL;
    v377 = std::string::append(&v466, ", StreamProcessor: ", 0x13uLL);
    __int128 v378 = *(_OWORD *)&v377->__r_.__value_.__l.__data_;
    v467.__r_.__value_.__l.__cap_ = v377->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v467.__r_.__value_.__l.__data_ = v378;
    v377->__r_.__value_.__l.__size_ = 0LL;
    v377->__r_.__value_.__l.__cap_ = 0LL;
    v377->__r_.__value_.__r.__words[0] = 0LL;
    if (HIDWORD(v367)) {
      v379 = "HAL";
    }
    else {
      v379 = "VA";
    }
    sub_7D084(v460, v379);
    if ((v461 & 0x80u) == 0) {
      v380 = v460;
    }
    else {
      v380 = (void **)v460[0];
    }
    if ((v461 & 0x80u) == 0) {
      std::string::size_type v381 = v461;
    }
    else {
      std::string::size_type v381 = (std::string::size_type)v460[1];
    }
    v382 = std::string::append(&v467, (const std::string::value_type *)v380, v381);
    __int128 v383 = *(_OWORD *)&v382->__r_.__value_.__l.__data_;
    v468.__r_.__value_.__l.__cap_ = v382->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v468.__r_.__value_.__l.__data_ = v383;
    v382->__r_.__value_.__l.__size_ = 0LL;
    v382->__r_.__value_.__l.__cap_ = 0LL;
    v382->__r_.__value_.__r.__words[0] = 0LL;
    v384 = std::string::append(&v468, " }", 2uLL);
    __int128 v385 = *(_OWORD *)&v384->__r_.__value_.__l.__data_;
    int64_t cap = v384->__r_.__value_.__l.__cap_;
    *(_OWORD *)v423 = v385;
    v384->__r_.__value_.__l.__size_ = 0LL;
    v384->__r_.__value_.__l.__cap_ = 0LL;
    v384->__r_.__value_.__r.__words[0] = 0LL;
    v386 = v423;
    if (cap < 0) {
      v386 = (void **)v423[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 766;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v386;
    _os_log_impl(&dword_0, v369, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speaker input usage settings: %s", buf, 0x1Cu);
    if (SHIBYTE(cap) < 0) {
      operator delete(v423[0]);
    }
  }

  sub_85EA4(buf, __p);
  sub_85EA4(v482, v469);
  memset(&v468, 0, sizeof(v468));
  v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&v468;
  v467.__r_.__value_.__s.__data_[8] = 0;
  v468.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xD0uLL);
  v468.__r_.__value_.__l.__size_ = v468.__r_.__value_.__r.__words[0];
  v468.__r_.__value_.__l.__cap_ = v468.__r_.__value_.__r.__words[0] + 208;
  v468.__r_.__value_.__l.__size_ = sub_10A49C((uint64_t)buf, (uint64_t)__p, (uint64_t)v468.__r_.__value_.__l.__data_);
  uint64_t v387 = *(void *)a8;
  sub_105E0C(&v467.__r_.__value_.__l.__data_, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
  v388 = sub_2B7D7C((uint64_t **)&v468, v387, (__int128 *)(a8 + 24), a8 + 40, &v467, v418, &v425, v433, (__int128 *)v447);
  v389 = *a1;
  *a1 = v388;
  if (v389) {
    (*(void (**)(uint64_t *))(*v389 + 8))(v389);
  }
  v466.__r_.__value_.__r.__words[0] = (std::string::size_type)&v467;
  sub_7A668((void ***)&v466);
  v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&v468;
  sub_10A52C((void ***)&v467);
  for (muint64_t m = 0LL; mm != -26; mm -= 13LL)
  {
    sub_85D64((void *)v482[mm + 11]);
    sub_85D64((void *)v482[mm + 8]);
    v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&v482[mm + 4];
    sub_85DA4((void ***)&v467);
    v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&v482[mm + 1];
    sub_85DA4((void ***)&v467);
  }

  sub_85D64(v473);
  sub_85D64(v472);
  *(void *)buf = v471;
  sub_85DA4((void ***)buf);
  *(void *)buf = &v469[1];
  sub_85DA4((void ***)buf);
  sub_10ACC8((uint64_t)&v427);
  sub_10ABFC((uint64_t)theString);
  v284 = v141;
LABEL_576:
  std::__shared_weak_count::__release_weak(v284);
LABEL_577:
  sub_85D64(v487);
  sub_85D64(v486);
  *(void *)buf = v485;
  sub_85DA4((void ***)buf);
  *(void *)buf = &__p[1];
  sub_85DA4((void ***)buf);
  sub_85D64(v493[0]);
  sub_85D64(v491[0]);
  *(void *)buf = &__dst[32];
  sub_85DA4((void ***)buf);
  *(void *)buf = &__dst[8];
  sub_85DA4((void ***)buf);
LABEL_578:
  sub_32C8C((void *)v433[1]);
  sub_85B80(v437);
  sub_85B80(v441);
  v391 = v443;
  if (v443)
  {
    v392 = (unint64_t *)&v443->__shared_owners_;
    do
      unint64_t v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }

LABEL_583:
  if (v449 && SHIBYTE(v448) < 0) {
    operator delete(v447[0]);
  }
  if (v451) {
    std::__shared_weak_count::__release_weak(v451);
  }
  if (v453) {
    std::__shared_weak_count::__release_weak(v453);
  }
  if (v455) {
    std::__shared_weak_count::__release_weak(v455);
  }
  v394 = v457;
  if (v457)
  {
    v395 = (unint64_t *)&v457->__shared_owners_;
    do
      unint64_t v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
      std::__shared_weak_count::__release_weak(v394);
    }
  }

  v397 = v459;
  if (v459)
  {
    v398 = (unint64_t *)&v459->__shared_owners_;
    do
      unint64_t v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }

void sub_216480( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::__shared_weak_count *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a28) {
    std::__shared_weak_count::__release_weak(a28);
  }
  sub_10A59C((uint64_t)&STACK[0x410]);
  sub_10A59C(v74 - 208);
  sub_32C8C(a40);
  sub_85B80(&a45);
  sub_85B80(&a51);
  sub_7A768((uint64_t)&a54);
  uint64_t v76 = *a19;
  *a19 = 0LL;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8LL))(v76);
  }
  if (a65 && a64 < 0) {
    operator delete(__p);
  }
  if (a68) {
    std::__shared_weak_count::__release_weak(a68);
  }
  if (a70) {
    std::__shared_weak_count::__release_weak(a70);
  }
  if (a72) {
    std::__shared_weak_count::__release_weak(a72);
  }
  sub_7A768((uint64_t)&a73);
  sub_7A768((uint64_t)&a74);
  _Unwind_Resume(a1);
}

void sub_216D88(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  v6 = operator new(0x88uLL);
  v7 = v6;
  v6[1] = 0LL;
  v6[2] = 0LL;
  void *v6 = off_4842D8;
  v8 = v6 + 3;
  v11[0] = a2;
  v11[1] = a3;
  if (a3)
  {
    p_shared_weak_owners = (unint64_t *)&a3->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  sub_CB254((uint64_t)(v6 + 3), v11);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_216E1C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void *sub_216E40(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  v8 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
    a1[2] = 0LL;
    a1[3] = 0LL;
    a1[4] = 0LL;
  }

  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
  a2[2] = 0LL;
  a2[3] = 0LL;
  a2[4] = 0LL;
  return a1;
}

void *sub_216ECC(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & a2;
    }

    v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          unint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  unint64_t v10 = operator new(0x28uLL);
  *unint64_t v10 = 0LL;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0LL;
  v10[4] = 0LL;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_52168(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }

  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_2170CC(_Unwind_Exception *a1)
{
}

void sub_2170E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_105C24(a2, 3);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 24);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  v9 = (void *)sub_EAD14();
  *(void *)v39 = CFStringCreateWithCString(0LL, "Codec", 0x600u);
  v39[8] = 1;
  uint64_t v10 = sub_EAE28(v9, (CFStringRef *)v39);
  sub_19DFC((uint64_t)v39);
  if (!v10)
  {
    v35 = (os_log_t *)sub_138E8(13);
    v36 = *v35;
    if (*v35)
    {
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v39 = 136315394;
        *(void *)&v39[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        __int16 v40 = 1024;
        int v41 = 74;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Could not locate codec device",  v39,  0x12u);
      }
    }
  }

  unint64_t v11 = *(uint64_t **)(a1 + 32);
  float v12 = *(uint64_t **)(a1 + 40);
  if (v11 == v12) {
    goto LABEL_28;
  }
  do
  {
    if (v11[2])
    {
      uint64_t v13 = v11[1];
      BOOL v14 = *(std::__shared_weak_count **)(v13 + 24);
      if (v14)
      {
        unint64_t v15 = std::__shared_weak_count::lock(v14);
        if (v15)
        {
          unint64_t v16 = v15;
          uint64_t v17 = *(void *)(v13 + 16);
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            unint64_t v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (v19)
          {
            if (!v17) {
              goto LABEL_25;
            }
          }

          else
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v16);
            if (!v17) {
              goto LABEL_25;
            }
          }

          uint64_t v20 = v11[1];
          v21 = *(std::__shared_weak_count **)(v20 + 24);
          if (v21 && (v22 = std::__shared_weak_count::lock(v21)) != 0LL)
          {
            unint64_t v23 = v22;
            uint64_t v24 = *(void *)(*(void *)(v20 + 16) + 192LL);
            v25 = (unint64_t *)&v22->__shared_owners_;
            do
              unint64_t v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v23);
            }

            if (v24 == v10) {
              goto LABEL_27;
            }
          }

          else if (!v10)
          {
            goto LABEL_27;
          }
        }
      }
    }

void sub_217454(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21749C(void *a1, void *a2)
{
  v28[0] = (uint64_t)v28;
  v28[1] = (uint64_t)v28;
  v28[2] = 0LL;
  v2 = (void *)a1[1];
  if (v2 != a1)
  {
    while (1)
    {
      uint64_t v5 = (std::__shared_weak_count *)v2[3];
      if (v5)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v5);
        uint64_t v7 = v6 ? v2[2] : 0LL;
      }

      else
      {
        uint64_t v7 = 0LL;
        uint64_t v6 = 0LL;
      }

      unint64_t v8 = (std::__shared_weak_count *)a2[1];
      if (v8 && (v9 = std::__shared_weak_count::lock(v8)) != 0LL)
      {
        uint64_t v10 = v9;
        BOOL v11 = v7 == *a2;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v10);
        }
      }

      else
      {
        BOOL v11 = v7 == 0;
      }

      if (v6)
      {
        BOOL v14 = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      unint64_t v16 = (void *)v2[1];
      if (v11) {
        break;
      }
LABEL_41:
      v2 = v16;
      if (v16 == a1) {
        goto LABEL_44;
      }
    }

    while (v16 != a1)
    {
      uint64_t v17 = (std::__shared_weak_count *)v16[3];
      if (v17)
      {
        uint64_t v18 = std::__shared_weak_count::lock(v17);
        if (v18) {
          uint64_t v19 = v16[2];
        }
        else {
          uint64_t v19 = 0LL;
        }
      }

      else
      {
        uint64_t v19 = 0LL;
        uint64_t v18 = 0LL;
      }

      uint64_t v20 = (std::__shared_weak_count *)a2[1];
      if (v20 && (v21 = std::__shared_weak_count::lock(v20)) != 0LL)
      {
        v22 = v21;
        BOOL v23 = v19 == *a2;
        uint64_t v24 = (unint64_t *)&v21->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v22);
        }
      }

      else
      {
        BOOL v23 = v19 == 0;
      }

      if (v18)
      {
        unint64_t v26 = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }

      if (!v23)
      {
        sub_1176BC((uint64_t)v28, v28, (uint64_t)a1, v2, v16);
        unint64_t v16 = (void *)v16[1];
        goto LABEL_41;
      }

      unint64_t v16 = (void *)v16[1];
    }

    sub_1176BC((uint64_t)v28, v28, (uint64_t)a1, v2, a1);
  }

void sub_2176CC(uint64_t **a1)
{
  v1 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        sub_85B80(v3);
      }

      while (v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void *sub_217730( uint64_t *a1, uint64_t *a2, unsigned int *a3, uint64_t a4, __int128 *a5, uint64_t a6, void **a7, uint64_t *a8, uint64_t a9, __int128 *a10)
{
  *(void *)buf = *(void *)(a4 + 4);
  sub_2899B8((uint64_t)&v214, (uint64_t *)buf);
  uint64_t v18 = operator new(0x358uLL);
  uint64_t v19 = *a2;
  *(void *)v229 = *a1;
  *(void *)v234 = v19;
  uint64_t v210 = v18;
  if (!*(void *)v229)
  {
    unint64_t v168 = (os_log_t *)sub_138E8(13);
    v169 = *v168;
    if (*v168 && os_log_type_enabled(*v168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 219;
      _os_log_impl( &dword_0,  v169,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inInputDevice is NULL]: inInputDevice is NULL.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inInputDevice is NULL.");
LABEL_218:
  }

  if (!v19)
  {
    uint64_t v171 = (os_log_t *)sub_138E8(13);
    v172 = *v171;
    if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 220;
      _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inOutputDevice is NULL]: inOutputDevice is NULL.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inOutputDevice is NULL.");
    goto LABEL_218;
  }

  if (*(void *)v229 == v19)
  {
    v173 = (os_log_t *)sub_138E8(13);
    v174 = *v173;
    if (*v173 && os_log_type_enabled(*v173, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 221;
      _os_log_impl( &dword_0,  v174,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inInputDevice == inOutputDevice. Don't use AggregateDevice_Duplex.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inInputDevice == inOutputDevice. Don't use AggregateDevice_Duplex.");
    goto LABEL_218;
  }

  uint64_t v225 = (uint64_t)&v225;
  v226 = &v225;
  uint64_t v227 = 0LL;
  sub_10AA94(buf, (uint64_t *)v229);
  sub_10AAF4(&v225, buf);
  sub_68314(buf);
  sub_10AA94(buf, (uint64_t *)v234);
  sub_10AAF4(&v225, buf);
  sub_68314(buf);
  uint64_t v20 = (os_log_t *)sub_138E8(16);
  int v208 = a7;
  int v209 = a1;
  uint64_t v207 = a6;
  v21 = *v20;
  if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 230;
    _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built topology for duplex aggregate device:", buf, 0x12u);
  }

  for (unsigned int i = v226; i != &v225; unsigned int i = (uint64_t *)i[1])
  {
    uint64_t v23 = *(void *)(i[3] + 16);
    uint64_t v24 = (os_log_t *)sub_138E8(16);
    unint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEBUG))
    {
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 120LL))(v23);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v23 + 128LL))(&v223, v23);
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 235;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v26;
      *(_WORD *)&buf[24] = 2112;
      *(void *)&buf[26] = v223;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d - PhysicalDevice ID %u (uid: %@).", buf, 0x22u);
      sub_19DFC((uint64_t)&v223);
    }
  }

  sub_21AD3C(v210, (uint64_t)&v225, v209, a2, (uint64_t)a3, (__int128 *)a4, v208, *a8, a9, (__int128 *)__dst);
  sub_AB45C(&v225);
  *uint64_t v210 = off_47D340;
  sub_21AF4C(v210, v209, (std::__shared_weak_count *)a2, a3, (unsigned int *)a4, a5, v207);
  sub_259EC((uint64_t)v210);
  if (((v210[66] - v210[65]) & 0xFFFFFFFF0LL) != 0x10) {
    goto LABEL_190;
  }
  sub_259EC((uint64_t)v210);
  if (((v210[69] - v210[68]) & 0xFFFFFFFF0LL) != 0x10) {
    goto LABEL_190;
  }
  LOBYTE(v27) = 0;
  uint64_t v28 = v210 + 54;
  char v29 = 1;
  do
  {
    v30 = (void *)*v28;
    if ((void *)*v28 == v210 + 53)
    {
      v162 = (os_log_t *)sub_138E8(13);
      uint64_t v163 = *v162;
      if (!*v162 || !os_log_type_enabled(*v162, OS_LOG_TYPE_ERROR)) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 326;
      v164 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError): Duplex aggregate device configured with incorrect num"
             "ber of devices";
      goto LABEL_203;
    }

    uint64_t v31 = *(void *)(v30[3] + 16LL);
    if (!v31)
    {
      v165 = (os_log_t *)sub_138E8(13);
      uint64_t v163 = *v165;
      if (!*v165 || !os_log_type_enabled(*v165, OS_LOG_TYPE_ERROR)) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 328;
      v164 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [curDevice is NULL]: NULL  device";
LABEL_203:
      _os_log_impl(&dword_0, v163, OS_LOG_TYPE_ERROR, v164, buf, 0x12u);
LABEL_204:
      int v166 = 560227702;
      goto LABEL_205;
    }

    char v32 = v29;
    char v29 = 0;
    uint64_t v28 = v30 + 1;
    LOBYTE(v27) = 1;
  }

  while ((v32 & 1) != 0);
  v33 = (os_log_t *)sub_138E8(13);
  unint64_t v27 = *v33;
  if (*v33)
  {
    if (os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 336;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Master device was not found",  buf,  0x12u);
    }

    LOBYTE(v27) = 0;
  }

LABEL_267:
    v203 = __cxa_allocate_exception(0x10uLL);
    *(void *)v203 = &off_4865A0;
    v203[2] = 2003329396;
  }

  if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v39 + 144LL))(v39, buf))
  {
    v202 = (os_log_t *)sub_138E8(13);
    v200 = *v202;
    if (*v202 && os_log_type_enabled(*v202, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v234 = 136315394;
      *(void *)&v234[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&v234[12] = 1024;
      *(_DWORD *)&v234[14] = 206;
      BOOL v201 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to set the new master format on the aggregate device";
      goto LABEL_266;
    }

    goto LABEL_267;
  }

  uint64_t v119 = sub_138E8(16);
  uint64_t v120 = sub_138E8(22);
  char v121 = 0;
  uint64_t v122 = 0LL;
  *(void *)v234 = 0x100000002LL;
  uint64_t v123 = *(void *)(v119 + 8);
  while (1)
  {
    uint64_t v124 = *(int *)&v234[4 * v122];
    char v125 = v121;
    if (((v123 & v124) != 0) != ((*(void *)(v120 + 8) & v124) != 0)) {
      break;
    }
    char v121 = 1;
    uint64_t v122 = 1LL;
    if ((v125 & 1) != 0) {
      goto LABEL_149;
    }
  }

  if ((v123 & v124) == 0) {
    uint64_t v119 = v120;
  }
LABEL_149:
  uint64_t v135 = sub_138E8(35);
  char v136 = 0;
  uint64_t v137 = 0LL;
  *(void *)v234 = 0x100000002LL;
  uint64_t v138 = *(void *)(v119 + 8);
  while (1)
  {
    uint64_t v139 = *(int *)&v234[4 * v137];
    char v140 = v136;
    if (((v138 & v139) != 0) != ((*(void *)(v135 + 8) & v139) != 0)) {
      break;
    }
    char v136 = 1;
    uint64_t v137 = 1LL;
    if ((v140 & 1) != 0) {
      goto LABEL_155;
    }
  }

  if ((v138 & v139) == 0) {
    uint64_t v119 = v135;
  }
LABEL_155:
  uint64_t v141 = sub_138E8(36);
  char v142 = 0;
  uint64_t v143 = 0LL;
  *(void *)v234 = 0x100000002LL;
  uint64_t v144 = *(void *)(v119 + 8);
  while (1)
  {
    uint64_t v145 = *(int *)&v234[4 * v143];
    char v146 = v142;
    if (((v144 & v145) != 0) != ((*(void *)(v141 + 8) & v145) != 0)) {
      break;
    }
    char v142 = 1;
    uint64_t v143 = 1LL;
    if ((v146 & 1) != 0) {
      goto LABEL_161;
    }
  }

  if ((v144 & v145) == 0) {
    uint64_t v119 = v141;
  }
LABEL_161:
  v147 = *(os_log_s **)v119;
  if (*(void *)v119 && os_log_type_enabled(*(os_log_t *)v119, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v234 = 136315394;
    *(void *)&v234[4] = "AggregateDevice_Duplex.h";
    *(_WORD *)&v234[12] = 1024;
    *(_DWORD *)&v234[14] = 208;
    _os_log_impl( &dword_0,  v147,  OS_LOG_TYPE_INFO,  "%25s:%-5d Successfully set compatible sample rate/format for input and output.",  v234,  0x12u);
  }

LABEL_190:
  if (v216 && v215 < 0) {
    operator delete(v214);
  }
  if (v213 && v212 < 0) {
    operator delete(__dst[0]);
  }
  return v210;
}

void sub_218FC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }

  (*(void (**)(void *))(*(void *)a20 + 8LL))(a20);
  sub_10AA14((uint64_t)&a23);
  _Unwind_Resume(a1);
}

double sub_21912C(uint64_t a1, int a2)
{
  double v25 = 0.0;
  if (*(void *)(a1 + 440) != 2LL)
  {
    BOOL v11 = (os_log_t *)sub_138E8(13);
    os_log_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v27 = "AggregateDevice_Duplex.h";
      __int16 v28 = 1024;
      int v29 = 366;
      unint64_t v13 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError): Duplex aggregate device configured with incorrect number of devices";
LABEL_28:
      uint64_t v17 = v12;
      uint32_t v18 = 18;
LABEL_29:
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, v13, buf, v18);
    }

uint64_t sub_219498(void *a1)
{
  *a1 = off_47D340;
  return sub_21ACE8(a1);
}

void sub_2194A8(void *a1)
{
  *a1 = off_47D340;
  v1 = (void *)sub_21ACE8(a1);
  operator delete(v1);
}

void *sub_2194C8(unint64_t a1)
{
  if (a1 >= 0x276276276276277LL) {
    sub_7A8C4();
  }
  return operator new(104 * a1);
}

uint64_t sub_219518(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  double v7 = (os_log_t *)sub_138E8(19);
  unint64_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_1ACDE4(&__p, a2);
    v9 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_Record_GenericConfig1.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 75;
    __int16 v138 = 2080;
    uint64_t v139 = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Activating route: %s", buf, 0x1Cu);
  }

  uint64_t v10 = *(uint64_t **)(*(void *)a2 + 24LL);
  unint64_t v113 = v10 + 2;
  sub_B8CBC(&v133, v10 + 2, "", 78);
  uint64_t v11 = *(unsigned int *)(v133 + 144);
  os_log_t v12 = (void *)sub_EAD14();
  *(void *)buf = CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
  buf[8] = 1;
  unint64_t v13 = (os_unfair_lock_s *)sub_EAE28(v12, (CFStringRef *)buf);
  sub_19DFC((uint64_t)buf);
  uint64_t v14 = *(void *)(v133 + 192);
  uint64_t v15 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v15 == 1986556788 || (_DWORD)v15 == 1987208039 || (_DWORD)v15 == 1987211117)
  {
    BOOL v16 = v11 == 1886216809;
    if (v13 && (_DWORD)v11 == 1886216809)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = dword_491338;
      strcpy(buf, "meoabolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_38A8E8((uint64_t)v13, (uint64_t)buf, 4LL, (uint64_t)&__p);
      LODWORD(__p.__r_.__value_.__l.__data_) = 1;
      strcpy(buf, "maoabolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_38A8E8((uint64_t)v13, (uint64_t)buf, 4LL, (uint64_t)&__p);
      strcpy(buf, "gloabolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&v13->_os_unfair_lock_opaque + 16LL))( v13,  buf))
      {
        strcpy(buf, "gloabolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&v13->_os_unfair_lock_opaque + 16LL))( v13,  buf))
        {
          strcpy((char *)&__p, "gloabolg");
          __p.__r_.__value_.__s.__data_[9] = 0;
          WORD1(__p.__r_.__value_.__r.__words[1]) = 0;
          if ((*(unsigned int (**)(os_unfair_lock_s *, std::string *))(*(void *)&v13->_os_unfair_lock_opaque
                                                                                 + 24LL))( v13,  &__p))
          {
            uint64_t v17 = operator new(0x30uLL);
            *uint64_t v17 = off_474748;
            v17[1] = v13;
            v17[2] = 1735159650LL;
            *((_DWORD *)v17 + 6) = 1;
            *(void *)((char *)v17 + 36) = 0LL;
            *(void *)((char *)v17 + 28) = 0LL;
            *((_DWORD *)v17 + 11) = 0;
            uint32_t v18 = operator new(0x18uLL);
            uint64_t v19 = *(void **)(a3 + 8);
            *uint32_t v18 = a3;
            v18[1] = v19;
            v18[2] = v17;
            void *v19 = v18;
            uint64_t v20 = *(void *)(a3 + 16) + 1LL;
            *(void *)(a3 + 8) = v18;
            *(void *)(a3 + 16) = v20;
            sub_1BD710((uint64_t)v17);
          }
        }

        if (sub_1CC748() && sub_1CC748())
        {
          v21 = operator new(0x20uLL);
          void *v21 = off_484CC8;
          v21[1] = v13;
          v21[2] = 0LL;
          v21[3] = 0LL;
          int v22 = operator new(0x18uLL);
          uint64_t v23 = *(void **)(a3 + 8);
          void *v22 = a3;
          v22[1] = v23;
          v22[2] = v21;
          *uint64_t v23 = v22;
          uint64_t v24 = *(void *)(a3 + 16) + 1LL;
          *(void *)(a3 + 8) = v22;
          *(void *)(a3 + 16) = v24;
          sub_389F34(v21);
        }
      }

      else
      {
        strcpy(buf, "lepdbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        if ((*(unsigned int (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&v13->_os_unfair_lock_opaque + 16LL))( v13,  buf))
        {
          strcpy((char *)&__p, "lepdbolg");
          __p.__r_.__value_.__s.__data_[9] = 0;
          WORD1(__p.__r_.__value_.__r.__words[1]) = 0;
          if ((*(unsigned int (**)(os_unfair_lock_s *, std::string *))(*(void *)&v13->_os_unfair_lock_opaque
                                                                                 + 24LL))( v13,  &__p))
          {
            __int16 v30 = operator new(0x30uLL);
            void *v30 = off_474810;
            v30[1] = v13;
            v30[2] = 1735159650LL;
            *((_DWORD *)v30 + 6) = 1;
            *(void *)((char *)v30 + 36) = 0LL;
            *(void *)((char *)v30 + 28) = 0LL;
            *((_DWORD *)v30 + 11) = 0;
            uint64_t v31 = operator new(0x18uLL);
            char v32 = *(void **)(a3 + 8);
            *uint64_t v31 = a3;
            v31[1] = v32;
            v31[2] = v30;
            void *v32 = v31;
            uint64_t v33 = *(void *)(a3 + 16) + 1LL;
            *(void *)(a3 + 8) = v31;
            *(void *)(a3 + 16) = v33;
            sub_1BD22C((uint64_t)v30);
          }
        }
      }

      strcpy(buf, "cgrbtpni");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_1BCE9C((uint64_t)v13, (uint64_t)buf, a3, 0);
      int v111 = 1;
      goto LABEL_35;
    }
  }

  else
  {
    BOOL v16 = v11 == 1886216809;
  }

  int v111 = v16;
  unint64_t v13 = *(os_unfair_lock_s **)(v133 + 192);
  if (!v14)
  {
    double v25 = (os_log_t *)sub_138E8(13);
    int v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(void *)v133 + 144LL))(v136);
      unint64_t v27 = *(std::string **)v136;
      sub_2CA1C(&__p, *(unsigned int *)(v133 + 144));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Record_GenericConfig1.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 100;
      __int16 v138 = 2112;
      uint64_t v139 = v27;
      __int16 v140 = 2080;
      uint64_t v141 = p_p;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: could not get device for port \\ %@\\ (type: '%s').",  buf,  0x26u);
      sub_19DFC((uint64_t)v136);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003329396;
  }

void sub_21A360( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, std::__shared_weak_count *a30, char a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, void *__p, uint64_t a37)
{
}

void sub_21A534(void *a1)
{
  v1 = (void *)sub_21ACE8(a1);
  operator delete(v1);
}

uint64_t sub_21A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(a1 + 768) & 0xFFFFFFFDLL) != 1)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint32_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 678;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 776) + 88LL))(*(void *)(a1 + 776), 0LL) <= **(_DWORD **)(a1 + 808))
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 679;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Precondition failure.");
  }

  uint64_t v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 776) + 96LL))(*(void *)(a1 + 776), 0LL);
  (*(void (**)(uint64_t, void))(*(void *)v8 + 112LL))(v8, *(void *)(a1 + 832));
  **(double **)(a1 + 832) = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  double v9 = sub_28F84(a1, 1);
  __int128 v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)buf = *(_OWORD *)a4;
  *(_OWORD *)&buf[16] = v10;
  *(void *)unint64_t v27 = *(void *)(a4 + 32);
  uint64_t v11 = *(void *)(a1 + 832);
  *(_OWORD *)&v27[8] = *(_OWORD *)v11;
  *(_OWORD *)&v27[24] = *(_OWORD *)(v11 + 16);
  *(void *)&v27[40] = *(void *)(v11 + 32);
  os_log_t v12 = operator new(0x50uLL);
  uint64_t v24 = v12 + 5;
  double v25 = v12 + 5;
  __int128 v13 = *(_OWORD *)&v27[16];
  v12[2] = *(_OWORD *)v27;
  v12[3] = v13;
  v12[4] = *(_OWORD *)&v27[32];
  __int128 v14 = *(_OWORD *)&buf[16];
  *os_log_t v12 = *(_OWORD *)buf;
  v12[1] = v14;
  std::string __p = v12;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a2 + 136LL))( a2,  a4,  &__p,  a3,  v9);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }

  return v15;
}

void sub_21A808( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_21A840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(a1 + 768) & 0xFFFFFFFELL) != 2)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint32_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 696;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 776) + 88LL))(*(void *)(a1 + 776), 0LL) <= *(_DWORD *)(*(void *)(a1 + 808) + 4LL))
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 697;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Precondition failure.");
  }

  uint64_t v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 776) + 96LL))(*(void *)(a1 + 776), 0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 112LL))(v8, *(void *)(a1 + 832) + 40LL);
  *(double *)(*(void *)(a1 + 832) + 40LL) = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  double v9 = sub_28F84(a1, 0);
  __int128 v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)buf = *(_OWORD *)a4;
  *(_OWORD *)&buf[16] = v10;
  *(void *)unint64_t v27 = *(void *)(a4 + 32);
  uint64_t v11 = *(void *)(a1 + 832);
  *(_OWORD *)&v27[8] = *(_OWORD *)(v11 + 40);
  *(_OWORD *)&v27[24] = *(_OWORD *)(v11 + 56);
  *(void *)&v27[40] = *(void *)(v11 + 72);
  os_log_t v12 = operator new(0x50uLL);
  uint64_t v24 = v12 + 5;
  double v25 = v12 + 5;
  __int128 v13 = *(_OWORD *)&v27[16];
  v12[2] = *(_OWORD *)v27;
  v12[3] = v13;
  v12[4] = *(_OWORD *)&v27[32];
  __int128 v14 = *(_OWORD *)&buf[16];
  *os_log_t v12 = *(_OWORD *)buf;
  v12[1] = v14;
  std::string __p = v12;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a2 + 136LL))( a2,  a3,  &__p,  a4,  v9);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }

  return v15;
}

void sub_21AB00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void sub_21AB38(id a1)
{
  v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0LL)
  {
    off_49D068 = dlsym(v1, "AudioIssueDetectorCreate");
    off_49D070 = dlsym(v1, "AudioIssueDetectorInitialize");
    off_49D078 = dlsym(v1, "AudioIssueDetectorDispose");
    qword_49D080 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_49D088 = dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_49D090 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_49D098 = (uint64_t (*)(void, void, void, void, void, void))dlsym( v1,  "AudioIssueDetectorAnalyzeBuffer");
    off_49D0A0 = dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_49D0A8 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_49D0B0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_49D0B8 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_49D0C0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_49D0C8 = dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }

  uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    uint64_t v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3) {
      v3();
    }
  }

uint64_t sub_21ACE8(void *a1)
{
  *a1 = off_476468;
  uint64_t v2 = (void *)a1[104];
  if (v2)
  {
    a1[105] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[101];
  if (v3)
  {
    a1[102] = v3;
    operator delete(v3);
  }

  sub_85B80(a1 + 98);
  return sub_231850((uint64_t)a1);
}

void *sub_21AD3C( void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, __int128 *a6, void **a7, uint64_t a8, uint64_t a9, __int128 *a10)
{
  if (a3)
  {
    sub_10AA94(v25, a3);
    if (a4)
    {
LABEL_3:
      sub_10AA94(v24, a4);
      goto LABEL_6;
    }
  }

  else
  {
    v25[0] = v25;
    v25[1] = v25;
    v25[2] = 0LL;
    if (a4) {
      goto LABEL_3;
    }
  }

  v24[0] = v24;
  v24[1] = v24;
  v24[2] = 0LL;
LABEL_6:
  sub_21B1EC((uint64_t *)__p, a3, a4, a8);
  uint32_t v18 = (os_unfair_lock_s *)sub_289C50(a2);
  sub_230800(a1, a2, (uint64_t)v25, (uint64_t)v24, (uint64_t)__p, a5, a6, 1, a7, v18, a9, a10);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  sub_68314(v24);
  sub_68314(v25);
  *a1 = off_476468;
  a1[96] = a8;
  if (!a4)
  {
    uint64_t v19 = 0LL;
    a1[97] = 0LL;
    uint64_t v20 = a1 + 98;
    BOOL v21 = a8 == 0;
LABEL_13:
    a1[98] = a1 + 98;
    a1[99] = v20;
    a1[100] = 0LL;
    goto LABEL_14;
  }

  uint64_t v19 = *a4;
  a1[97] = *a4;
  uint64_t v20 = a1 + 98;
  if (!(_DWORD)a8)
  {
    BOOL v21 = 1;
    goto LABEL_13;
  }

  sub_21BD74(a1 + 98, a4, a8);
  BOOL v21 = 0;
  uint64_t v19 = a1[97];
LABEL_14:
  if (!v19 || v21)
  {
    a1[101] = 0LL;
    a1[102] = 0LL;
    a1[103] = 0LL;
  }

  else
  {
    sub_21C0E8(a1 + 101, v19);
  }

  sub_21C164(a1 + 104);
  return a1;
}

void sub_21AEDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_21AF4C( uint64_t *a1, uint64_t *a2, std::__shared_weak_count *a3, unsigned int *a4, unsigned int *a5, __int128 *a6, uint64_t a7)
{
  if (a2) {
    a2 = (uint64_t *)sub_28153C((uint64_t)a1, a5[4], a6, 0LL, 0LL, a2, a4);
  }
  if (a3)
  {
    else {
      unsigned int v14 = a5[4];
    }
    if (*(_BYTE *)(a7 + 16)) {
      BOOL v15 = a5[6] == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      BOOL v16 = a6;
    }
    else {
      BOOL v16 = (__int128 *)a7;
    }
    __int128 v29 = *v16;
    uint64_t v17 = sub_28153C((uint64_t)a1, v14, &v29, 1LL, 0LL, (uint64_t *)a3, a4);
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  if (!a2)
  {
    __int128 v29 = 0uLL;
    uint64_t v30 = 0LL;
    if (v17) {
      goto LABEL_17;
    }
LABEL_19:
    memset(v26, 0, sizeof(v26));
    goto LABEL_20;
  }

  unint64_t v27 = a2;
  uint32_t v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_47C9A8;
  v18->__shared_owners_ = 0LL;
  v18->__shared_weak_owners_ = 0LL;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  __int16 v28 = v18;
  sub_85AF8(&v29, &v27);
  if (!v17) {
    goto LABEL_19;
  }
LABEL_17:
  v25[0] = v17;
  a3 = (std::__shared_weak_count *)operator new(0x20uLL);
  a3->__vftable = (std::__shared_weak_count_vtbl *)&off_47C9A8;
  a3->__shared_owners_ = 0LL;
  a3->__shared_weak_owners_ = 0LL;
  a3[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  v25[1] = a3;
  sub_85AF8(v26, v25);
LABEL_20:
  sub_2318DC((unint64_t *)a1, (uint64_t **)&v29, (uint64_t **)v26);
  uint64_t v31 = v26;
  sub_7A668((void ***)&v31);
  if (v17)
  {
    if (a3)
    {
      p_shared_owners = (unint64_t *)&a3->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
    }
  }

  v26[0] = (void **)&v29;
  sub_7A668(v26);
  if (a2)
  {
    BOOL v21 = v28;
    if (v28)
    {
      int v22 = (unint64_t *)&v28->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

  return (*(uint64_t (**)(uint64_t *))(*a1 + 600))(a1);
}

void sub_21B148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  a12 = (void **)&a17;
  sub_7A668(&a12);
  if (v17) {
    sub_7A768((uint64_t)&a15);
  }
  _Unwind_Resume(a1);
}

void sub_21B1EC(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (!a4)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    return;
  }

  if (!a2)
  {
    uint64_t v8 = 0LL;
    if (a3) {
      goto LABEL_4;
    }
LABEL_26:
    BOOL v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v66 = "AggregateDevice_Simple.cpp";
      __int16 v67 = 1024;
      int v68 = 90;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v8 = *a2;
  if (!a3) {
    goto LABEL_26;
  }
LABEL_4:
  uint64_t v9 = *a3;
  if (v8 && v9 && v8 == v9)
  {
    if (!a2)
    {
      int v44 = (os_log_t *)sub_138E8(13);
      int v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        BOOL v66 = "AggregateDevice_Simple.cpp";
        __int16 v67 = 1024;
        int v68 = 57;
        _os_log_impl(&dword_0, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      char v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v46, "Precondition failure.");
    }

    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 88LL))(*a2, 0LL);
    if (v10)
    {
      uint64_t v11 = operator new(1uLL);
      *uint64_t v11 = 1;
      *a1 = (uint64_t)v11;
      a1[1] = (uint64_t)(v11 + 1);
      a1[2] = (uint64_t)(v11 + 1);
      buf[0] = 0;
      sub_21C230((uint64_t)a1, v11 + 1, (v10 - 1), buf);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 312LL))(*a2);
      uint64_t v14 = *a1;
      uint64_t v13 = a1[1];
      if (a4 == 2 && (v12 & 0xFF00000000LL) != 0)
      {
        if (v13 - v14 != (_DWORD)v12 + 1)
        {
          uint64_t v49 = (os_log_t *)sub_138E8(13);
          char v50 = *v49;
          if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            BOOL v66 = "AggregateDevice_Simple.cpp";
            __int16 v67 = 1024;
            int v68 = 74;
            _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          uint64_t v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v51, "Precondition failure.");
        }

        *(_BYTE *)(v14 + v12) = 2;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v13 = 0LL;
    }

    uint64_t v24 = v13 - v14;
    if (v13 - v14 != v10)
    {
      double v25 = (os_log_t *)sub_138E8(16);
      int v26 = *v25;
      if (*v25)
      {
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          BOOL v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 81;
          __int16 v69 = 2048;
          uint64_t v70 = v24;
          __int16 v71 = 1024;
          int v72 = v10;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Input stream usage mask size (%lu) doesn't match input stream count (%u)",  buf,  0x22u);
        }
      }
    }

    return;
  }

  if (!v9)
  {
    int v41 = (os_log_t *)sub_138E8(13);
    unint64_t v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v66 = "AggregateDevice_Simple.cpp";
      __int16 v67 = 1024;
      int v68 = 91;
      _os_log_impl(&dword_0, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v43, "Precondition failure.");
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  unsigned int v15 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 88LL))(v9, 0LL);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 312LL))(*a3);
  if (a2)
  {
    unsigned int v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 88LL))(*a2, 0LL);
    if (v17)
    {
      uint32_t v18 = operator new(1uLL);
      *uint32_t v18 = 1;
      *a1 = (uint64_t)v18;
      a1[1] = (uint64_t)(v18 + 1);
      a1[2] = (uint64_t)(v18 + 1);
      if (v17 >= 2)
      {
        buf[0] = 0;
        sub_21C230((uint64_t)a1, v18 + 1, v17 - 1, buf);
      }
    }
  }

  switch(a4)
  {
    case 3:
      if (!sub_1D5354(*a3))
      {
        unint64_t v56 = (os_log_t *)sub_138E8(13);
        uint64_t v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          BOOL v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 138;
          _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_108;
      }

      if (v15 < 2) {
        goto LABEL_80;
      }
      if (!BYTE4(v16)) {
        sub_8DEEC();
      }
      if ((_DWORD)v16 != 1)
      {
LABEL_80:
        int v47 = (os_log_t *)sub_138E8(13);
        uint64_t v48 = *v47;
        if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          BOOL v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 139;
          _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_108;
      }

      uint64_t v30 = (char *)a1[1];
      buf[0] = 2;
      sub_21C230((uint64_t)a1, v30, 1uLL, buf);
      uint64_t v31 = (char *)a1[1];
      buf[0] = 2;
      sub_21C230((uint64_t)a1, v31, 1uLL, buf);
      break;
    case 2:
      if (!BYTE4(v16))
      {
        char v52 = (os_log_t *)sub_138E8(13);
        unint64_t v53 = *v52;
        if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          BOOL v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 123;
          _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_108;
      }

      if ((_DWORD)v16)
      {
        if (v15 < 2 || (_DWORD)v16 != 1)
        {
          uint64_t v60 = (os_log_t *)sub_138E8(13);
          uint64_t v61 = *v60;
          if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            BOOL v66 = "AggregateDevice_Simple.cpp";
            __int16 v67 = 1024;
            int v68 = 131;
            _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          goto LABEL_108;
        }

        __int16 v28 = (char *)a1[1];
        buf[0] = 0;
        sub_21C230((uint64_t)a1, v28, 1uLL, buf);
        __int128 v29 = (char *)a1[1];
        buf[0] = 2;
        sub_21C230((uint64_t)a1, v29, 1uLL, buf);
      }

      else
      {
        char v32 = (char *)a1[1];
        buf[0] = 2;
        sub_21C230((uint64_t)a1, v32, 1uLL, buf);
      }

      break;
    case 1:
      if (sub_1D5354(*a3))
      {
        if (v15)
        {
          uint64_t v19 = (char *)a1[1];
          buf[0] = 2;
          sub_21C230((uint64_t)a1, v19, 1uLL, buf);
          unint64_t v20 = (char *)a1[1];
          buf[0] = 0;
          sub_21C230((uint64_t)a1, v20, v15 - 1, buf);
          break;
        }

        char v58 = (os_log_t *)sub_138E8(13);
        uint64_t v59 = *v58;
        if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          BOOL v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 117;
          _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      else
      {
        uint64_t v54 = (os_log_t *)sub_138E8(13);
        uint64_t v55 = *v54;
        if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          BOOL v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 116;
          _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

void sub_21BC8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  unint64_t v20 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_21BD74(uint64_t *a1, void *a2, int a3)
{
  if (!*a2)
  {
    int v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      unint64_t v20 = "AggregateDevice_Simple.cpp";
      __int16 v21 = 1024;
      int v22 = 174;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v19,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 == 1)
  {
    uint64_t v5 = (void *)a2[1];
LABEL_8:
    sub_85A90(a1, v5);
    return;
  }

  if ((a3 & 0xFFFFFFFE) == 2)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 312LL))(*a2);
    if ((v6 & 0xFF00000000LL) == 0)
    {
      uint64_t v13 = (os_log_t *)sub_138E8(13);
      uint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        unint64_t v20 = "AggregateDevice_Simple.cpp";
        __int16 v21 = 1024;
        int v22 = 183;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v19,  0x12u);
      }

      unsigned int v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v15, "Precondition failure.");
    }

    uint64_t v7 = a2[1];
    if (0xAAAAAAAAAAAAAAABLL * ((a2[2] - v7) >> 3) <= v6)
    {
      uint64_t v16 = (os_log_t *)sub_138E8(13);
      uint64_t v17 = *v16;
      if (*v16)
      {
        if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315394;
          unint64_t v20 = "AggregateDevice_Simple.cpp";
          __int16 v21 = 1024;
          int v22 = 184;
          _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v19,  0x12u);
        }
      }

      uint32_t v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v18, "Precondition failure.");
    }

    uint64_t v5 = (void *)(v7 + 24LL * v6);
    goto LABEL_8;
  }

  uint64_t v8 = (os_log_t *)sub_138E8(13);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
  {
    int v19 = 136315394;
    unint64_t v20 = "AggregateDevice_Simple.cpp";
    __int16 v21 = 1024;
    int v22 = 189;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unsupported speaker input",  (uint8_t *)&v19,  0x12u);
  }

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
}

void sub_21C0C4(_Unwind_Exception *a1)
{
}

uint64_t sub_21C0E8(void *a1, uint64_t a2)
{
  int v6 = 0;
  *(_DWORD *)*sub_21C1B8(a1, 2uLL, &v6) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 312LL))(a2);
  if ((result & 0xFF00000000LL) != 0) {
    int v5 = result;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(*a1 + 4LL) = v5;
  return result;
}

void sub_21C148(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_21C164(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v2 = operator new(0x50uLL);
  a1[1] = v2 + 5;
  a1[2] = v2 + 5;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0LL;
  *(_OWORD *)((char *)v2 + 40) = 0u;
  *(_OWORD *)((char *)v2 + 56) = 0u;
  *((void *)v2 + 9) = 0LL;
  *a1 = v2;
  return a1;
}

void *sub_21C1B8(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_7A840(a1, a2);
  int v6 = (_DWORD *)a1[1];
  uint64_t v7 = &v6[a2];
  uint64_t v8 = 4 * a2;
  do
  {
    *v6++ = *a3;
    v8 -= 4LL;
  }

  while (v8);
  a1[1] = v7;
  return a1;
}

void sub_21C214(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_21C230(uint64_t a1, char *__src, unint64_t a3, _BYTE *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    unint64_t v5 = a3;
    int v6 = __src;
    uint64_t v9 = *(char **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 - (uint64_t)v9 >= a3)
    {
      unint64_t v16 = v9 - __src;
      unint64_t v17 = a3 - (v9 - __src);
      if (a3 <= v9 - __src)
      {
        uint32_t v18 = *(char **)(a1 + 8);
        unint64_t v20 = a3;
      }

      else
      {
        uint32_t v18 = &__src[a3];
        int v19 = *(_BYTE **)(a1 + 8);
        do
        {
          *v19++ = *a4;
          --v17;
        }

        while (v17);
        *(void *)(a1 + 8) = v18;
        if (!v16) {
          return;
        }
        unint64_t v20 = v9 - __src;
      }

      __int16 v21 = &__src[a3];
      int v22 = v18;
      if (&v18[-a3] < v9)
      {
        if (a3 <= v16) {
          unint64_t v23 = v9 - __src;
        }
        else {
          unint64_t v23 = a3;
        }
        uint64_t v24 = &__src[-a3];
        double v25 = __src;
        int v26 = __src;
        do
        {
          v25[v23] = v24[v23];
          ++v26;
          ++v24;
          ++v25;
        }

        while (&v26[v23 - (void)v9 - a3]);
        if (a3 > v16) {
          unint64_t v16 = a3;
        }
        int v22 = &v25[v16];
      }

      *(void *)(a1 + 8) = v22;
      if (v18 != v21) {
        memmove(&__src[a3], __src, v18 - v21);
      }
      if (v6 <= v4)
      {
        else {
          unint64_t v27 = v5;
        }
        v4 += v27;
      }

      do
      {
        *v6++ = *v4;
        --v20;
      }

      while (v20);
    }

    else
    {
      int v10 = *(_BYTE **)a1;
      uint64_t v11 = (uint64_t)&v9[a3 - *(void *)a1];
      if (v11 < 0) {
        sub_7A87C();
      }
      uint64_t v12 = (char *)(__src - v10);
      unint64_t v13 = v8 - (void)v10;
      if (2 * v13 > v11) {
        uint64_t v11 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v11;
      }
      if (v14) {
        unsigned int v15 = operator new(v14);
      }
      else {
        unsigned int v15 = 0LL;
      }
      __int16 v28 = &v12[(void)v15];
      __int128 v29 = &v12[(void)v15 + v5];
      int64_t v30 = (_BYTE *)v15 - v10;
      do
      {
        v6[v30++] = *v4;
        --v5;
      }

      while (v5);
      if (v10 != v6)
      {
        do
        {
          v12[(void)v15 - 1] = v12[(void)(v10 - 1)];
          --v12;
        }

        while (v12);
        __int16 v28 = (char *)v15;
      }

      uint64_t v31 = (char *)v15 + v14;
      if (v9 != v6) {
        memmove(v29, v6, v9 - v6);
      }
      *(void *)a1 = v28;
      *(void *)(a1 + 8) = &v29[v9 - v6];
      *(void *)(a1 + 16) = v31;
      if (v10) {
        operator delete(v10);
      }
    }
  }

void *sub_21C444( void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, __int128 *a6, void **a7, uint64_t a8, __int128 *a9)
{
  v20[0] = v20;
  v20[1] = v20;
  v20[2] = 0LL;
  sub_21B1EC((uint64_t *)__p, a3, a4, 2);
  unint64_t v17 = (os_unfair_lock_s *)sub_289C50(a2);
  sub_230800(a1, a2, (uint64_t)v21, (uint64_t)v20, (uint64_t)__p, a5, a6, 1, a7, v17, a8, a9);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  sub_68314(v20);
  sub_68314(v21);
  *a1 = off_476468;
  a1[96] = 2LL;
  a1[97] = *a4;
  sub_21BD74(a1 + 98, a4, 2);
  sub_21C0E8(a1 + 101, a1[97]);
  sub_21C164(a1 + 104);
  return a1;
}

void sub_21C56C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v24 = *v22;
  if (*v22)
  {
    *(void *)(v20 + 816) = v24;
    operator delete(v24);
  }

  sub_85B80(v21);
  sub_231850(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_21C5D4(uint64_t a1)
{
  *(void *)a1 = off_476728;
  sub_6600C(*(void **)(a1 + 40));
  sub_32C8C(*(void **)(a1 + 16));
  return a1;
}

void sub_21C610(void **a1)
{
  *a1 = off_476728;
  sub_6600C(a1[5]);
  sub_32C8C(a1[2]);
  operator delete(a1);
}

uint64_t sub_21C64C(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 24);
  return 0LL;
}

uint64_t sub_21C65C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (*(void *)(a1 + 24) <= a2)
  {
    unint64_t v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)&v8[4] = "DSPProcessorManager.cpp";
      __int16 v9 = 1024;
      int v10 = 139;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): Bad index into DSPProcessorType map.",  v8,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(exception, "Bad index into DSPProcessorType map.");
  }

  *(void *)uint64_t v8 = *(void *)(a1 + 8);
  sub_8866C((void **)v8, a2);
  *a3 = *(_DWORD *)(*(void *)v8 + 32LL);
  return 0LL;
}

void sub_21C778(_Unwind_Exception *exception_object)
{
}

uint64_t sub_21C794(uint64_t a1, unint64_t a2, AudioComponentDescription *a3)
{
  if (*(void *)(a1 + 24) <= a2)
  {
    unint64_t v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)&v8[4] = "DSPProcessorManager.cpp";
      __int16 v9 = 1024;
      int v10 = 153;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): Bad index into DSPProcessorType map.",  v8,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(exception, "Bad index into DSPProcessorType map.");
  }

  *(void *)uint64_t v8 = *(void *)(a1 + 8);
  sub_8866C((void **)v8, a2);
  return AudioComponentGetDescription(*(AudioComponent *)(*(void *)v8 + 40LL), a3);
}

void sub_21C8AC(_Unwind_Exception *exception_object)
{
}

void *sub_21C8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  int v66 = a2;
  uint64_t v7 = sub_21D980((uint64_t **)(a1 + 8), a2, &v66)[5];
  if (!v7)
  {
    uint64_t v51 = (os_log_t *)sub_138E8(13);
    char v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v61, a2);
      unint64_t v53 = v62 >= 0 ? v61 : (void **)v61[0];
      *(_DWORD *)inComponent = 136315650;
      *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
      *(_WORD *)&inComponent[12] = 1024;
      *(_DWORD *)&inComponent[14] = 168;
      *(_WORD *)&inComponent[18] = 2080;
      *(void *)&inComponent[20] = v53;
      _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [component is NULL]: Unable to instantiate DSPProcessor. Type ID %s not found.",  inComponent,  0x1Cu);
      if (SHIBYTE(v62) < 0) {
        operator delete(v61[0]);
      }
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to instantiate DSPProcessor. Type ID %s not found.");
  }

  v61[0] = 0LL;
  v61[1] = 0LL;
  int v63 = 0;
  uint64_t v62 = 0LL;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  memset(&v57, 0, sizeof(v57));
  std::string __p = v7;
  uint64_t v59 = 0LL;
  uint64_t v60 = 0LL;
  uint64_t v58 = 0LL;
  AudioComponentGetDescription((AudioComponent)v7, &v57);
  memset(inComponent, 0, sizeof(inComponent));
  uint64_t v71 = 0LL;
  uint64_t v72 = 0LL;
  *(void *)&v70[2] = 0LL;
  sub_31F8A4((uint64_t)inComponent, (uint64_t)&__p);
  uint64_t v8 = operator new(0x28uLL);
  __int16 v9 = *(OpaqueAudioComponent **)inComponent;
  *((_DWORD *)v8 + 2) = 1;
  *(void *)uint64_t v8 = off_4818F8;
  *((void *)v8 + 2) = 0LL;
  *((_DWORD *)v8 + 6) = 0;
  OSStatus v10 = AudioComponentInstanceNew(v9, (AudioComponentInstance *)v8 + 2);
  if (v10)
  {
    if (os_log_type_enabled(0LL, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "CAAudioUnit.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 43;
      __int16 v75 = 1024;
      OSStatus v76 = v10;
      _os_log_impl(&dword_0, 0LL, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): ", buf, 0x18u);
    }

    char v50 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v50 = &off_4865A0;
    v50[2] = v10;
  }

  *((void *)v8 + 4) = 0LL;
  __int16 v73 = v8;
  sub_3292A8((uint64_t)v61, (uint64_t)inComponent);
  sub_329330(inComponent);
  sub_31F858(&__p);
  uint64_t v11 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v11 + 8) = 0u;
  uint64_t v12 = (unint64_t *)(v11 + 8);
  unint64_t v13 = (int *)(a1 + 56);
  *(void *)uint64_t v11 = off_4768C0;
  *((void *)v11 + 3) = off_4767A8;
  uint64_t v14 = (uint64_t)(v11 + 24);
  int v15 = *(_DWORD *)(a1 + 56);
  *((_DWORD *)v11 + 8) = v15;
  *((void *)v11 + 5) = 0LL;
  *((_OWORD *)v11 + 3) = 0u;
  *((_DWORD *)v11 + 16) = 0;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  sub_3292A8((uint64_t)(v11 + 40), (uint64_t)v61);
  *((_OWORD *)v11 + 7) = 0u;
  *((void *)v11 + 13) = v7;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((_DWORD *)v11 + 40) = 4096;
  v11[164] = a3 & 1;
  if (*((void *)&v65 + 1)) {
    unint64_t v16 = *(OpaqueAudioComponentInstance **)(*((void *)&v65 + 1) + 16LL);
  }
  else {
    unint64_t v16 = 0LL;
  }
  v11[165] = AudioComponentInstanceCanDo(v16, 21) != 0;
  v11[166] = 0;
  if (!v15)
  {
    int v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)inComponent = 136315394;
        *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
        *(_WORD *)&inComponent[12] = 1024;
        *(_DWORD *)&inComponent[14] = 357;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid DSP processor instance ID",  inComponent,  0x12u);
      }
    }
  }

  uint64_t v17 = *((void *)v11 + 12);
  int inData = 0;
  if (v17) {
    uint32_t v18 = *(OpaqueAudioComponentInstance **)(v17 + 16);
  }
  else {
    uint32_t v18 = 0LL;
  }
  if (AudioUnitSetProperty(v18, 0x33u, 1u, 0, &inData, 4u))
  {
    __int16 v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inComponent = 136315394;
      *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
      *(_WORD *)&inComponent[12] = 1024;
      *(_DWORD *)&inComponent[14] = 364;
LABEL_28:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", inComponent, 0x12u);
      goto LABEL_29;
    }

    goto LABEL_29;
  }

  uint64_t v23 = *((void *)v11 + 12);
  if (v23) {
    uint64_t v24 = *(OpaqueAudioComponentInstance **)(v23 + 16);
  }
  else {
    uint64_t v24 = 0LL;
  }
  if (AudioUnitSetProperty(v24, 0x33u, 2u, 0, &inData, 4u))
  {
    double v25 = (os_log_t *)sub_138E8(13);
    int v22 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inComponent = 136315394;
      *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
      *(_WORD *)&inComponent[12] = 1024;
      *(_DWORD *)&inComponent[14] = 365;
      goto LABEL_28;
    }

void sub_21D1B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v10[5].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v10[6].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }

  int v15 = (std::__shared_weak_count_vtbl *)*v12;
  if (*v12)
  {
    v10[5].__vftable = v15;
    operator delete(v15);
  }

  sub_329330(v11);
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v16);
  sub_329330(va);
  _Unwind_Resume(a1);
}

void sub_21D2BC()
{
}

void sub_21D2C4(uint64_t a1, int a2)
{
  if (a2)
  {
    operator delete(v2);
    JUMPOUT(0x21D2D8LL);
  }

  JUMPOUT(0x21D2B4LL);
}

void sub_21D308(uint64_t a1, uint64_t a2, ...)
{
}

uint64_t sub_21D320(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v9 = a2;
  uint64_t v4 = sub_65F40((uint64_t **)(a1 + 32), a2, &v9)[5];
  if (!v4)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v11 = "DSPProcessorManager.cpp";
      __int16 v12 = 1024;
      int v13 = 201;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: Unable to find instance.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }

  *a3 = *((_DWORD *)v4 + 7);
  return 0LL;
}

void sub_21D434(_Unwind_Exception *a1)
{
}

uint64_t sub_21D450(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v17 = a2;
  __int16 v12 = sub_65F40((uint64_t **)(a1 + 32), a2, &v17)[5];
  if (!v12)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v19 = "DSPProcessorManager.cpp";
      __int16 v20 = 1024;
      int v21 = 244;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: Unable to find instance.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + 48))( v12,  a3,  a4,  a5,  a6,  a7);
}

void sub_21D598(_Unwind_Exception *a1)
{
}

uint64_t sub_21D5B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v9 = a2;
  uint64_t v4 = sub_65F40((uint64_t **)(a1 + 32), a2, &v9)[5];
  if (!v4)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v11 = "DSPProcessorManager.cpp";
      __int16 v12 = 1024;
      int v13 = 254;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: Unable to find instance.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t))(*v4 + 176))(v4, a3);
}

void sub_21D6CC(_Unwind_Exception *a1)
{
}

uint64_t sub_21D6E8(uint64_t a1, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v2 = sub_65F40((uint64_t **)(a1 + 32), a2, &v7)[5];
  if (!v2)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    unint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v9 = "DSPProcessorManager.cpp";
      __int16 v10 = 1024;
      int v11 = 264;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: Unable to find instance.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }

  return (*(uint64_t (**)(uint64_t *))(*v2 + 184))(v2);
}

void sub_21D7F8(_Unwind_Exception *a1)
{
}

uint64_t sub_21D814(void *a1, unsigned int a2)
{
  uint64_t v2 = (uint64_t *)a1[5];
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a1[5];
  do
  {
    unsigned int v5 = *(_DWORD *)(v4 + 32);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      unsigned int v7 = (uint64_t *)v4;
    }
    else {
      unsigned int v7 = (uint64_t *)(v4 + 8);
    }
    if (v6) {
      uint64_t v3 = (void *)v4;
    }
    uint64_t v4 = *v7;
  }

  while (*v7);
  if (v3 != a1 + 5 && *((_DWORD *)v3 + 8) <= a2)
  {
    __int16 v10 = (void *)v3[1];
    if (v10)
    {
      do
      {
        int v11 = v10;
        __int16 v10 = (void *)*v10;
      }

      while (v10);
    }

    else
    {
      __int16 v12 = v3;
      do
      {
        int v11 = (void *)v12[2];
        BOOL v13 = *v11 == (void)v12;
        __int16 v12 = v11;
      }

      while (!v13);
    }

    if ((void *)a1[4] == v3) {
      a1[4] = v11;
    }
    --a1[6];
    sub_911E8(v2, v3);
    sub_7A768((uint64_t)(v3 + 5));
    operator delete(v3);
  }

  else
  {
LABEL_12:
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      unint64_t v16 = "DSPProcessorManager.cpp";
      __int16 v17 = 1024;
      int v18 = 191;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Tried to remove an instance that is not in the map",  (uint8_t *)&v15,  0x12u);
    }
  }

  return 0LL;
}

uint64_t **sub_21D980(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0LL;
    uint64_t *v7 = 0LL;
    v7[1] = 0LL;
    v7[2] = v9;
    os_log_t *v6 = (uint64_t *)v7;
    __int16 v10 = (uint64_t *)**a1;
    int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      int v11 = *v6;
    }

    sub_7A420(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

void sub_21DA4C(uint64_t a1, AudioUnitScope inScope)
{
  if (inScope == 1) {
    uint64_t v4 = 88LL;
  }
  else {
    uint64_t v4 = 112LL;
  }
  if (inScope == 1) {
    uint64_t v5 = a1 + 88;
  }
  else {
    uint64_t v5 = a1 + 112;
  }
  AudioUnitElement outData = 0;
  ioDataSize[0] = 4;
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    unsigned int v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    unsigned int v7 = 0LL;
  }
  if (AudioUnitGetProperty(v7, 0xBu, inScope, 0, &outData, ioDataSize))
  {
    unsigned int v8 = (os_log_t *)sub_138E8(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315394;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 785;
      __int16 v10 = (uint8_t *)ioDataSize;
LABEL_14:
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", v10, 0x12u);
    }
  }

  else
  {
    *(void *)(v5 + 8) = *(void *)(a1 + v4);
    if (!outData) {
      return;
    }
    AudioUnitElement v14 = 0;
    while (1)
    {
      uint64_t v42 = 0LL;
      memset(ioDataSize, 0, sizeof(ioDataSize));
      UInt32 v37 = 40;
      uint64_t v15 = *(void *)(a1 + 72);
      unint64_t v16 = v15 ? *(OpaqueAudioComponentInstance **)(v15 + 16) : 0LL;
      if (AudioUnitGetProperty(v16, 8u, inScope, v14, ioDataSize, &v37)) {
        break;
      }
      __int16 v17 = *(char **)(v5 + 8);
      unint64_t v18 = *(void *)(v5 + 16);
      if ((unint64_t)v17 >= v18)
      {
        int v22 = *(char **)(a1 + v4);
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v22) >> 4);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0x555555555555555LL) {
          sub_7A87C();
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v22) >> 4);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v26 = 0x555555555555555LL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 > 0x555555555555555LL) {
            sub_7A8C4();
          }
          unint64_t v27 = (char *)operator new(48 * v26);
          __int16 v17 = *(char **)(v5 + 8);
        }

        else
        {
          unint64_t v27 = 0LL;
        }

        os_log_t v28 = &v27[48 * v23];
        __int128 v29 = *(_OWORD *)&ioDataSize[4];
        *(_OWORD *)os_log_t v28 = *(_OWORD *)ioDataSize;
        *((_OWORD *)v28 + 1) = v29;
        *((void *)v28 + 4) = v42;
        v28[40] = 0;
        if (v17 == v22)
        {
          int v33 = &v27[48 * v23];
        }

        else
        {
          int64_t v30 = &v27[48 * v23];
          do
          {
            __int128 v31 = *((_OWORD *)v17 - 3);
            __int128 v32 = *((_OWORD *)v17 - 2);
            int v33 = v30 - 48;
            *(_OWORD *)(v30 - 23) = *(_OWORD *)(v17 - 23);
            *((_OWORD *)v30 - 3) = v31;
            *((_OWORD *)v30 - 2) = v32;
            v17 -= 48;
            v30 -= 48;
          }

          while (v17 != v22);
        }

        unint64_t v34 = &v27[48 * v26];
        *(void *)(a1 + v4) = v33;
        int v21 = v28 + 48;
        *(void *)(v5 + 8) = v28 + 48;
        *(void *)(v5 + 16) = v34;
        if (v22) {
          operator delete(v22);
        }
      }

      else
      {
        __int128 v19 = *(_OWORD *)ioDataSize;
        __int128 v20 = *(_OWORD *)&ioDataSize[4];
        *((void *)v17 + 4) = v42;
        *(_OWORD *)__int16 v17 = v19;
        *((_OWORD *)v17 + 1) = v20;
        v17[40] = 0;
        int v21 = v17 + 48;
      }

      *(void *)(v5 + 8) = v21;
      if (++v14 >= outData) {
        return;
      }
    }

    uint64_t v35 = (os_log_t *)sub_138E8(13);
    unsigned int v9 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      UInt32 v37 = 136315394;
      int v38 = "DSPProcessorManager.cpp";
      __int16 v39 = 1024;
      int v40 = 792;
      __int16 v10 = (uint8_t *)&v37;
      goto LABEL_14;
    }
  }

  int v11 = (os_log_t *)sub_138E8(24);
  __int16 v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    BOOL v13 = "output";
    *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
    ioDataSize[0] = 136315650;
    if (inScope == 1) {
      BOOL v13 = "input";
    }
    LOWORD(ioDataSize[3]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[3] + 2) = 797;
    HIWORD(ioDataSize[4]) = 2080;
    *(void *)&ioDataSize[5] = v13;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error while updating DSP instance bus %s formats",  (uint8_t *)ioDataSize,  0x1Cu);
  }

void sub_21DE14(void *a1)
{
  uint64_t v1 = sub_21F434(a1);
  operator delete(v1);
}

os_log_s *sub_21DE28(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 142))
  {
    uint64_t v1 = (os_log_t *)sub_138E8(24);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 396;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Skipping initialization because the AU is already initialized.",  buf,  0x12u);
      }

      return 0LL;
    }
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4) {
      uint64_t v5 = *(OpaqueAudioComponentInstance **)(v4 + 16);
    }
    else {
      uint64_t v5 = 0LL;
    }
    uint64_t v2 = (os_log_s *)AudioUnitInitialize(v5);
    if ((_DWORD)v2)
    {
      uint64_t v6 = (os_log_t *)sub_138E8(13);
      unsigned int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 400;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
      }

      unsigned int v8 = (os_log_t *)sub_138E8(24);
      unsigned int v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
        sub_2CA1C(__p, v10);
        int v11 = v14 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        unint64_t v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 404;
        __int16 v19 = 2080;
        __int128 v20 = v11;
        __int16 v21 = 1024;
        int v22 = (int)v2;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Processor initialization of type '%s' failed with error: %d",  buf,  0x22u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else
    {
      *(_BYTE *)(a1 + 142) = 1;
    }
  }

  return v2;
}

os_log_s *sub_21E05C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 142))
  {
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2) {
      uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
    }
    else {
      uint64_t v3 = 0LL;
    }
    uint64_t v5 = (os_log_s *)AudioUnitUninitialize(v3);
    if ((_DWORD)v5)
    {
      uint64_t v6 = (os_log_t *)sub_138E8(13);
      unsigned int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 419;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
      }

      unsigned int v8 = (os_log_t *)sub_138E8(24);
      unsigned int v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
        sub_2CA1C(__p, v10);
        if (v14 >= 0) {
          int v11 = __p;
        }
        else {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        unint64_t v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 423;
        __int16 v19 = 2080;
        __int128 v20 = v11;
        __int16 v21 = 1024;
        int v22 = (int)v5;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Processor un-initialization of type '%s' failed with error: %d",  buf,  0x22u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else
    {
      *(_BYTE *)(a1 + 142) = 0;
    }
  }

  else
  {
    uint64_t v4 = (os_log_t *)sub_138E8(24);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 414;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Skipping uninitialization because the AU is already uninitialized.",  buf,  0x12u);
      }

      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_21E28C(uint64_t a1, _DWORD *a2)
{
  uint64_t outData = 0LL;
  CFTypeRef cf = 0LL;
  UInt32 ioDataSize = 16;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    uint64_t v4 = *(OpaqueAudioComponentInstance **)(v3 + 16);
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t Property = AudioUnitGetProperty(v4, 0x24u, 0, 0, &outData, &ioDataSize);
  if (cf) {
    CFRelease(cf);
  }
  if (!(_DWORD)Property) {
    *a2 = outData;
  }
  return Property;
}

uint64_t sub_21E308(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v6 = 0LL;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return AudioUnitSetProperty(v3, 0x24u, 0, 0, &v5, 0x10u);
}

uint64_t sub_21E354(uint64_t a1, uint64_t *a2)
{
  uint64_t inData = *a2;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return AudioUnitSetProperty(v3, 0, 0, 0, &inData, 8u);
}

uint64_t sub_21E3A0(uint64_t a1, AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  AudioUnitRenderActionFlags ioActionFlags = 512;
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    int v5 = *(OpaqueAudioComponentInstance **)(v4 + 16);
  }
  else {
    int v5 = 0LL;
  }
  return AudioUnitProcess(v5, &ioActionFlags, inTimeStamp, inNumberFrames, ioData);
}

uint64_t sub_21E3E8(void *a1, AudioUnitScope a2, AudioUnitElement a3, __int128 *a4)
{
  if (a2 - 3 <= 0xFFFFFFFD)
  {
    int v33 = (os_log_t *)sub_138E8(13);
    unint64_t v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 577;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }

  if (a2 == 1) {
    uint64_t v7 = 11LL;
  }
  else {
    uint64_t v7 = 14LL;
  }
  if (a2 == 1) {
    unsigned int v8 = a1 + 11;
  }
  else {
    unsigned int v8 = a1 + 14;
  }
  uint64_t v9 = a1[v7];
  if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - v9) >> 4) <= a3)
  {
    uint64_t v36 = (os_log_t *)sub_138E8(13);
    UInt32 v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = (v8[1] - a1[v7]) >> 4;
      *(_DWORD *)buf = 136316162;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 581;
      __int16 v49 = 1024;
      *(_DWORD *)char v50 = a3;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = -1431655765 * v38;
      *(_WORD *)uint64_t v51 = 1024;
      *(_DWORD *)&v51[2] = a2;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): inElement (%u) cannot exceed bus count (%u) for scope: %u",  buf,  0x24u);
    }

    __int16 v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(v39, "inElement (%u) cannot exceed bus count (%u) for scope: %u");
  }

  uint64_t v12 = v9 + 48LL * a3;
  if (*(_BYTE *)(v12 + 40))
  {
    if (*(double *)v12 != *(double *)a4
      || *(_DWORD *)(v12 + 8) != *((_DWORD *)a4 + 2)
      || *(_DWORD *)(v12 + 12) != *((_DWORD *)a4 + 3))
    {
      uint64_t v13 = v9 + 48LL * a3;
LABEL_14:
      int v14 = *(_DWORD *)(v13 + 28);
      __int128 v16 = *a4;
      __int128 v15 = a4[1];
      *(void *)(v13 + 32) = *((void *)a4 + 4);
      *(_OWORD *)uint64_t v13 = v16;
      *(_OWORD *)(v13 + 16) = v15;
      sub_2B77C(v13, v14, (*(_DWORD *)(v13 + 12) & 0x20) == 0);
      goto LABEL_15;
    }

    return 0LL;
  }

  if (sub_ABEE0((_DWORD *)v12, a4, 3u)) {
    return 0LL;
  }
  uint64_t v13 = a1[v7] + 48LL * a3;
  if (*(_BYTE *)(v13 + 40)) {
    goto LABEL_14;
  }
  __int128 v31 = *a4;
  __int128 v32 = a4[1];
  *(void *)(v13 + 32) = *((void *)a4 + 4);
  *(_OWORD *)uint64_t v13 = v31;
  *(_OWORD *)(v13 + 16) = v32;
LABEL_15:
  uint64_t v17 = a1[9];
  if (v17) {
    int v18 = *(OpaqueAudioComponentInstance **)(v17 + 16);
  }
  else {
    int v18 = 0LL;
  }
  uint64_t v19 = AudioUnitSetProperty(v18, 8u, a2, a3, (const void *)(a1[v7] + 48LL * a3), 0x28u);
  if ((_DWORD)v19)
  {
    __int128 v20 = (os_log_t *)sub_138E8(13);
    __int16 v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 587;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
    }

    int v22 = (os_log_t *)sub_138E8(24);
    unint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = (*(uint64_t (**)(void *))(*a1 + 152LL))(a1);
      sub_2CA1C(v43, v24);
      if (v44 >= 0) {
        unint64_t v25 = v43;
      }
      else {
        unint64_t v25 = (void **)v43[0];
      }
      sub_2CA1C(v41, v19);
      int v26 = v42;
      unint64_t v27 = (void **)v41[0];
      sub_2CC00(&__p, a1[v7] + 48LL * a3);
      os_log_t v28 = v41;
      if (v26 < 0) {
        os_log_t v28 = v27;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136316418;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 592;
      __int16 v49 = 2080;
      *(void *)char v50 = v25;
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)uint64_t v51 = v19;
      *(_WORD *)&v51[4] = 2080;
      char v52 = v28;
      __int16 v53 = 2080;
      uint64_t v54 = p_p;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP (%s) format setup failed with error: (%d) %s, format: %s",  buf,  0x36u);
      if (v42 < 0) {
        operator delete(v41[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
    }
  }

  return v19;
}

void sub_21E8B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21E8FC(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 136) == a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    uint64_t v6 = *(OpaqueAudioComponentInstance **)(v5 + 16);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = AudioUnitUninitialize(v6);
  if ((_DWORD)v7)
  {
    uint64_t v2 = v7;
    unsigned int v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "DSPProcessorManager.cpp";
      __int16 v18 = 1024;
      int v19 = 605;
LABEL_21:
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&v16, 0x12u);
    }
  }

  else
  {
    uint64_t v10 = sub_329390(*(OpaqueAudioComponentInstance **)(a1 + 72), a2);
    if ((_DWORD)v10)
    {
      uint64_t v2 = v10;
      int v11 = (os_log_t *)sub_138E8(13);
      uint64_t v9 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        uint64_t v17 = "DSPProcessorManager.cpp";
        __int16 v18 = 1024;
        int v19 = 607;
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 72);
      if (v12) {
        uint64_t v13 = *(OpaqueAudioComponentInstance **)(v12 + 16);
      }
      else {
        uint64_t v13 = 0LL;
      }
      uint64_t v2 = AudioUnitInitialize(v13);
      if (!(_DWORD)v2)
      {
        *(_DWORD *)(a1 + 136) = a2;
        return v2;
      }

      int v14 = (os_log_t *)sub_138E8(13);
      uint64_t v9 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        uint64_t v17 = "DSPProcessorManager.cpp";
        __int16 v18 = 1024;
        int v19 = 609;
        goto LABEL_21;
      }
    }
  }

  return v2;
}

CFStringRef sub_21EAF0(uint64_t a1)
{
  if (!*(void *)(a1 + 64) && !AudioComponentCopyName(*(AudioComponent *)(a1 + 16), &outName))
  {
    uint64_t v2 = outName;
    *(void *)(a1 + 64) = outName;
    if (v2)
    {
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, v2, @":");
      ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0LL);
      *(void *)(a1 + 48) = ValueAtIndex;
      CFRetain(ValueAtIndex);
      MutableCopy = 0LL;
      if (CFArrayGetCount(ArrayBySeparatingStrings) >= 2)
      {
        uint64_t v6 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1LL);
        CFIndex Length = CFStringGetLength(v6);
        MutableCopy = CFStringCreateMutableCopy(0LL, Length, v6);
        CFStringTrimWhitespace(MutableCopy);
      }

      *(void *)(a1 + 56) = MutableCopy;
      CFRelease(ArrayBySeparatingStrings);
    }
  }

  unsigned int v8 = *(const void **)(a1 + 56);
  if (v8) {
    return (CFStringRef)CFRetain(v8);
  }
  unsigned int v8 = *(const void **)(a1 + 64);
  if (v8) {
    return (CFStringRef)CFRetain(v8);
  }
  else {
    return CFStringCreateWithCString(0LL, "unknown", 0x600u);
  }
}

uint64_t sub_21EBE0(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_21EBE8(uint64_t a1, int a2)
{
  int inData = a2 ^ 1;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return AudioUnitSetProperty(v3, 0x15u, 0, 0, &inData, 4u);
}

uint64_t sub_21EC34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 140);
}

uint64_t sub_21EC3C(uint64_t a1, AudioUnitScope inScope, UInt32 a3)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    __int128 v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      UInt32 outDataSize = 136315394;
      __int128 v20 = "DSPProcessorManager.cpp";
      __int16 v21 = 1024;
      int v22 = 625;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input",  (uint8_t *)&outDataSize,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }

  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    uint64_t v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t PropertyInfo = AudioUnitGetPropertyInfo(v7, 0xBu, inScope, 0, &outDataSize, &outWritable);
  if (!(_DWORD)PropertyInfo
    && outWritable
    && ((outDataSize = a3, (uint64_t v11 = *(void *)(a1 + 72)) == 0)
      ? (uint64_t v12 = 0LL)
      : (uint64_t v12 = *(OpaqueAudioComponentInstance **)(v11 + 16)),
        uint64_t v9 = AudioUnitSetProperty(v12, 0xBu, inScope, 0, &outDataSize, 4u),
        (_DWORD)v9))
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      UInt32 outDataSize = 136315394;
      __int128 v20 = "DSPProcessorManager.cpp";
      __int16 v21 = 1024;
      int v22 = 630;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FailIf failed, goto Exit",  (uint8_t *)&outDataSize,  0x12u);
    }
  }

  else
  {
    sub_21DA4C(a1, inScope);
    return PropertyInfo;
  }

  return v9;
}

void sub_21EE40(_Unwind_Exception *a1)
{
}

uint64_t sub_21EE5C(void *a1, AudioUnitScope inScope, AudioUnitElement a3, int a4)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    int64_t v30 = (os_log_t *)sub_138E8(13);
    __int128 v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315394;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 645;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input",  (uint8_t *)ioDataSize,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }

  AudioUnitElement outData = 0;
  ioDataSize[0] = 4;
  uint64_t v8 = a1[9];
  if (v8) {
    uint64_t v9 = *(OpaqueAudioComponentInstance **)(v8 + 16);
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t Property = AudioUnitGetProperty(v9, 0xBu, inScope, 0, &outData, ioDataSize);
  if ((_DWORD)Property)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315394;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 648;
LABEL_29:
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)ioDataSize, 0x12u);
      goto LABEL_30;
    }

    goto LABEL_30;
  }

  if (outData <= a3)
  {
    int v33 = (os_log_t *)sub_138E8(13);
    unint64_t v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315650;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 649;
      HIWORD(ioDataSize[4]) = 1024;
      ioDataSize[5] = inScope;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): inElement cannot exceed bus count for scope: %u",  (uint8_t *)ioDataSize,  0x18u);
    }

    uint64_t v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(v35, "inElement cannot exceed bus count for scope: %u");
  }

  uint64_t v13 = a1 + 14;
  if (inScope == 1) {
    uint64_t v14 = 11LL;
  }
  else {
    uint64_t v14 = 14LL;
  }
  if (inScope == 1) {
    uint64_t v13 = a1 + 11;
  }
  uint64_t v15 = a1[v14];
  if (0xAAAAAAAAAAAAAAABLL * ((v13[1] - v15) >> 4) <= a3)
  {
    uint64_t v36 = (os_log_t *)sub_138E8(13);
    UInt32 v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315650;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 654;
      HIWORD(ioDataSize[4]) = 1024;
      ioDataSize[5] = inScope;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): inElement cannot exceed bus count for scope: %u",  (uint8_t *)ioDataSize,  0x18u);
    }

    uint64_t v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(v38, "inElement cannot exceed bus count for scope: %u");
  }

  uint64_t v16 = v15 + 48LL * a3;
  if (*(_DWORD *)(v16 + 28) == a4)
  {
LABEL_17:
    uint64_t Property = 0LL;
    *(_BYTE *)(v15 + 48LL * a3 + 40) = 1;
    return Property;
  }

  memset(ioDataSize, 0, 40);
  v41[0] = 40;
  uint64_t v17 = a1[9];
  if (v17) {
    __int16 v18 = *(OpaqueAudioComponentInstance **)(v17 + 16);
  }
  else {
    __int16 v18 = 0LL;
  }
  uint64_t Property = AudioUnitGetProperty(v18, 8u, inScope, a3, ioDataSize, v41);
  if (!(_DWORD)Property)
  {
    sub_2B77C((uint64_t)ioDataSize, a4, (ioDataSize[3] & 0x20) == 0);
    uint64_t v19 = a1[9];
    __int128 v20 = v19 ? *(OpaqueAudioComponentInstance **)(v19 + 16) : 0LL;
    uint64_t Property = AudioUnitSetProperty(v20, 8u, inScope, a3, ioDataSize, 0x28u);
    if (!(_DWORD)Property)
    {
      sub_2B77C(v16, a4, (*(_DWORD *)(v16 + 12) & 0x20) == 0);
      uint64_t v15 = a1[v14];
      goto LABEL_17;
    }
  }

  __int16 v21 = (os_log_t *)sub_138E8(13);
  uint64_t v12 = *v21;
  if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
  {
    ioDataSize[0] = 136315394;
    *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
    LOWORD(ioDataSize[3]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[3] + 2) = 661;
    goto LABEL_29;
  }

void sub_21F3FC(_Unwind_Exception *a1)
{
}

void *sub_21F434(void *a1)
{
  *a1 = off_4767A8;
  a1[12] = a1[11];
  a1[15] = a1[14];
  uint64_t v2 = a1[9];
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0LL;
  }
  AudioUnitUninitialize(v3);
  uint64_t v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }

  sub_329330(a1 + 2);
  return a1;
}

void sub_21F4B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4768C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21F4C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4768C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_21F4E4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_21F4F8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_220108(a1);
  operator delete(v1);
}

BOOL sub_21F50C(_DWORD *a1, _DWORD *a2)
{
  return a2[1] == a1[21] && *a2 == a1[20] && a2[2] == a1[22];
}

uint64_t sub_21F548(void **a1)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[2])(a1);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[13] + 24LL))(a1[13], (uint64_t)a1 + 92);
  }
  return result;
}

uint64_t sub_21F590(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[2])(a1);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*a1[13] + 32LL))( a1[13],  (uint64_t)a1 + 92,  a3,  a4);
  }
  return result;
}

uint64_t sub_21F5F4(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *a2;
      int v18 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      if (v20 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      int v22 = "RelayObject.cpp";
      __int16 v23 = 1024;
      int v24 = 54;
      __int16 v25 = 2080;
      int v26 = v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): invalid property address %s",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[13] + 40LL))( a1[13],  (uint64_t)a1 + 92,  a3,  a4,  a5,  a6);
}

uint64_t sub_21F78C(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *a2;
      int v22 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v21);
      uint64_t v15 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      int v26 = "RelayObject.cpp";
      __int16 v27 = 1024;
      int v28 = 60;
      __int16 v29 = 2080;
      int64_t v30 = v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): invalid property address %s",  buf,  0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((((uint64_t (*)(void **, uint64_t *))(*a1)[3])(a1, a2) & 1) == 0)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *a2;
      int v22 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v21);
      if (v24 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      int v26 = "RelayObject.cpp";
      __int16 v27 = 1024;
      int v28 = 61;
      __int16 v29 = 2080;
      int64_t v30 = v19;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): property %s is read-only",  buf,  0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    char v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v20 = &off_4865A0;
    v20[2] = 1970171760;
  }

  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[13] + 48LL))( a1[13],  (uint64_t)a1 + 92,  a3,  a4,  a5,  a6);
}

std::string *sub_21FA2C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_7D084(&v28, __str);
  uint64_t v4 = std::string::insert(&v28, 0LL, "addr: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v29, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  *(void *)__str = *(void *)(a1 + 80);
  int v33 = *(_DWORD *)(a1 + 88);
  sub_613AC((uint64_t)&v28, (unsigned int *)__str);
  uint64_t v10 = std::string::insert(&v28, 0LL, "client addr: ", 0xDuLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v12 = std::string::append(&v29, "; ", 2uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t cap = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v15 = HIBYTE(cap);
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  *(void *)__str = *(void *)(a1 + 92);
  int v33 = *(_DWORD *)(a1 + 100);
  sub_613AC((uint64_t)&v28, (unsigned int *)__str);
  uint64_t v16 = std::string::insert(&v28, 0LL, "target addr: ", 0xDuLL);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  int v18 = std::string::append(&v29, "; ", 2uLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t cap = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    char v20 = __p;
  }
  else {
    char v20 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v21 = HIBYTE(cap);
  }
  else {
    std::string::size_type v21 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v20, v21);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  int v22 = *(os_unfair_lock_s **)(a1 + 104);
  if (v22)
  {
    sub_23FE8((uint64_t)&v29, v22 + 2);
    __int16 v23 = std::string::insert(&v29, 0LL, "; target obj: ", 0xEuLL);
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t cap = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int16 v25 = __p;
    }
    else {
      __int16 v25 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v26 = HIBYTE(cap);
    }
    else {
      std::string::size_type v26 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  return std::string::append(a2, " ]", 2uLL);
}

void sub_21FDA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21FE5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *(void *)(a1 + 92);
  int v14 = *(_DWORD *)(a1 + 100);
  BOOL v8 = sub_67420((void *)(a1 + 112), (uint64_t)&v13);
  uint64_t v9 = *(void *)(a1 + 92);
  uint64_t v16 = a4;
  uint64_t v17 = v9;
  int v18 = *(_DWORD *)(a1 + 100);
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a3;
  sub_1885D4((void *)(a1 + 112), (unsigned int *)&v17, (unsigned int *)&v13);
  if (!v8)
  {
    uint64_t v10 = 1LL;
    uint64_t v11 = *(void *)(a1 + 92);
    uint64_t v16 = a4;
    uint64_t v17 = v11;
    int v18 = *(_DWORD *)(a1 + 100);
    uint64_t v13 = *a2;
    int v14 = *((_DWORD *)a2 + 2);
    uint64_t v15 = a3;
    sub_18803C((uint64_t **)(a1 + 112), (unsigned int *)&v17, (unsigned int *)&v13);
    return 0LL;
  }

  return 1LL;
}

BOOL sub_21FF7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (uint64_t *)(a1 + 92);
  uint64_t v11 = *(void *)(a1 + 92);
  int v12 = *(_DWORD *)(a1 + 100);
  BOOL result = sub_67420((void *)(a1 + 112), (uint64_t)&v11);
  if (result)
  {
    uint64_t v10 = *v8;
    uint64_t v14 = a4;
    uint64_t v15 = v10;
    int v16 = *(_DWORD *)(a1 + 100);
    uint64_t v11 = *a2;
    int v12 = *((_DWORD *)a2 + 2);
    uint64_t v13 = a3;
    sub_18803C((uint64_t **)(a1 + 112), (unsigned int *)&v15, (unsigned int *)&v11);
    uint64_t v11 = *v8;
    int v12 = *(_DWORD *)(a1 + 100);
  }

  return result;
}

void *sub_220078(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*(void **)(a4 + 104) == result && a2 != 0)
  {
    __int128 v5 = (_DWORD *)(a4 + 92);
    uint64_t v6 = a2;
    for (unsigned int i = (_DWORD *)(a3 + 8); *(i - 1) != *(_DWORD *)(a4 + 96) || *(i - 2) != *v5 || *i != *(_DWORD *)(a4 + 100); i += 3)
    {
      if (!--v6) {
        return result;
      }
    }

    uint64_t v8 = *(void *)v5;
    int v9 = *(_DWORD *)(a4 + 100);
    return sub_67564((void *)(a4 + 112), (unsigned int *)&v8);
  }

  return result;
}

uint64_t sub_220108(uint64_t a1)
{
  *(void *)a1 = off_4768F8;
  sub_67FE8(a1 + 200);
  *(void *)(a1 + 112) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 136));
  return sub_F3008(a1);
}

uint64_t sub_220150(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_4768F8;
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 80) = v5;
  LODWORD(v5) = *(_DWORD *)(a3 + 8);
  *(void *)(a1 + 92) = *(void *)a3;
  uint64_t v6 = a1 + 92;
  *(_DWORD *)(a1 + 100) = v5;
  *(void *)(a1 + 104) = a4;
  sub_189C20(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 104);
  if (!v7 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16LL))(v7, v6) & 1) == 0)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    int v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a1 + 104);
        sub_2CA1C(__p, *(unsigned int *)(a1 + 92));
        if (v14 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        int v16 = "RelayObject.cpp";
        __int16 v17 = 1024;
        int v18 = 28;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        __int16 v21 = 2080;
        int v22 = v11;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: invalid relay object target. target: %p; property: %s",
          buf,
          0x26u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  sub_CC160(a1);
  return a1;
}

void sub_2202E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 112) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 136));
  sub_F3008(v1);
  _Unwind_Resume(a1);
}

void sub_220338(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_22034C(os_unfair_lock_s *a1)
{
  if (!(*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  0LL))
  {
    __int16 v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_ContinuityCapture_Aspen.cpp";
      __int16 v36 = 1024;
      *(_DWORD *)UInt32 v37 = 55;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Continuity capture device has no input streams.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Continuity capture device has no input streams.");
  }

  uint64_t v2 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v2, 0);
  sub_1D5AE0(a1, (uint64_t)v2);
  uint64_t v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D580C((uint64_t)a1, 0, 1885564781LL, (uint64_t)v2);
  sub_1D55D4((uint64_t *)a1, 0, 1885564781LL, (uint64_t)v3);
  uint64_t v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v29,  a1);
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_ContinuityCapture_Aspen.cpp";
    __int16 v36 = 1024;
    *(_DWORD *)UInt32 v37 = 64;
    *(_WORD *)&v37[4] = 2112;
    *(void *)&v37[6] = v29;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a Continuity Capture Microphone input port with UID %@",  buf,  0x1Cu);
    sub_19DFC((uint64_t)&v29);
  }

  strcpy(buf, "manlbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_1EF0E0((uint64_t)&v29, (uint64_t)a1);
  if (!(_DWORD)v29 && v32) {
    goto LABEL_15;
  }
  uint64_t v6 = (os_log_t *)sub_138E8(17);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(&v33, v29);
    uint64_t v8 = v34 >= 0 ? &v33 : (__int128 *)v33;
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_ContinuityCapture_Aspen.cpp";
    __int16 v36 = 1024;
    *(_DWORD *)UInt32 v37 = 69;
    *(_WORD *)&v37[4] = 2080;
    *(void *)&v37[6] = v8;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No name for device found. Error:%s", buf, 0x1Cu);
    if (v34 < 0) {
      operator delete((void *)v33);
    }
  }

  if (v32)
  {
LABEL_15:
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    sub_7F234(buf, v9);
    CFStringRef v10 = *(CFStringRef *)buf;
  }

  else
  {
    CFStringRef v10 = CFStringCreateWithCString(0LL, "ContinuityCapture Microphone", 0x600u);
  }

  CFStringRef v27 = v10;
  char v28 = 1;
  memset(__p, 0, sizeof(__p));
  *(void *)buf = v10;
  buf[8] = 1;
  if (v10) {
    CFRetain(v10);
  }
  *(void *)&v37[2] = 0LL;
  v37[10] = 1;
  uint64_t v38 = 0LL;
  char v39 = 1;
  (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v23,  a1);
  memset(v22, 0, sizeof(v22));
  uint64_t v11 = operator new(0x228uLL);
  v11[1] = 0LL;
  void v11[2] = 0LL;
  *uint64_t v11 = off_485B80;
  sub_7D084(&v33, "");
  sub_F9638((uint64_t)(v11 + 3), &qword_4914A8, (uint64_t)a1, (uint64_t)__p, (uint64_t)buf, (uint64_t)v23, v22, &v33);
  v11[3] = &off_46FD40;
  *((_WORD *)v11 + 272) = 0;
  if (v34 < 0) {
    operator delete((void *)v33);
  }
  *(void *)&__int128 v25 = v11 + 3;
  *((void *)&v25 + 1) = v11;
  sub_AFDAC((uint64_t)&v25, v11 + 13, (uint64_t)(v11 + 3));
  __int128 v26 = v25;
  __int128 v25 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v26);
  int v12 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1))
  {
    int v16 = (unint64_t *)(*((void *)&v25 + 1) + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  *(void *)&__int128 v33 = v22;
  sub_7A668((void ***)&v33);
  sub_19DFC((uint64_t)v23);
  sub_19DFC((uint64_t)&v38);
  sub_19DFC((uint64_t)&v37[2]);
  sub_19DFC((uint64_t)buf);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  sub_19DFC((uint64_t)&v27);
  if (v32) {
    sub_39FD8(&v30);
  }
  return 1LL;
}

void sub_220864( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27)
{
  if (a26) {
    sub_39FD8(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_220950(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885564781)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v13 = "Device_ContinuityCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 100;
      __int16 v16 = 2080;
      unint64_t v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = "Device_ContinuityCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 101;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_220AFC(_Unwind_Exception *a1)
{
}

uint64_t sub_220B18()
{
  return 0LL;
}

void sub_220B20()
{
  uint64_t v0 = IOHIDEventSystemClientCreate(kCFAllocatorDefault);
  qword_491568 = v0;
  qword_491570 = 0LL;
  qword_491590 = 0LL;
  if (!v0)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    CFTypeRef v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v18 = "HIDEventSystemClient.cpp";
      __int16 v19 = 1024;
      v20[0] = 31;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v1 = v0;
  LODWORD(v13) = 11;
  CFTypeRef cf = CFNumberCreate(0LL, kCFNumberIntType, &v13);
  if (!cf)
  {
    char v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }

  sub_C4814((uint64_t)buf, "PrimaryUsagePage", &cf);
  int valuePtr = 1;
  CFNumberRef v2 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  CFNumberRef v13 = v2;
  if (!v2)
  {
    int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }

  sub_C4854((uint64_t)v20 + 2, "PrimaryUsage", (const void **)&v13);
  v15[0] = buf;
  v15[1] = 2LL;
  CFDictionaryRef v3 = sub_5A950((uint64_t)v15);
  uint64_t v4 = 0LL;
  v15[2] = v3;
  do
  {
    uint64_t v5 = *(const void **)((char *)&v20[v4 + 2] + 2);
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)((char *)&v20[v4] + 2);
    if (v6) {
      CFRelease(v6);
    }
    v4 -= 4LL;
  }

  while (v4 != -8);
  CFRelease(v2);
  if (cf) {
    CFRelease(cf);
  }
  IOHIDEventSystemClientSetMatching(v1, v3);
  IOHIDEventSystemClientRegisterDeviceMatchingCallback(v1, sub_220F3C, &qword_491568, 0LL);
  IOHIDEventSystemClientRegisterEventCallback(v1, sub_220F84, &qword_491568, 0LL);
  uint64_t v7 = sub_869B4();
  IOHIDEventSystemClientSetDispatchQueue(v1, v7);
  IOHIDEventSystemClientActivate(v1);
  sub_220FCC((uint64_t)&qword_491568);
  sub_221020((uint64_t)&qword_491568);
  CFRelease(v3);
}

void sub_220DF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  __int16 v16 = (uint64_t *)qword_491590;
  if ((uint64_t *)qword_491590 == &qword_491578)
  {
    uint64_t v17 = 4LL;
    __int16 v16 = &qword_491578;
  }

  else
  {
    if (!qword_491590) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  sub_7A6D8(&qword_491570);
  sub_22134C();
  _Unwind_Resume(a1);
}

uint64_t sub_220F3C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    IOHIDServiceClientRegisterRemovalCallback(a3, sub_2213A0, result, 0LL);
    sub_220FCC(v3);
    return sub_221020(v3);
  }

  return result;
}

uint64_t sub_220F84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v4 = result;
    BOOL result = IOHIDEventGetIntegerValue(a4, 196608LL);
    if (result == 65289) {
      return sub_221020(v4);
    }
  }

  return result;
}

void sub_220FCC(uint64_t a1)
{
  CFArrayRef v2 = IOHIDEventSystemClientCopyServices(*(IOHIDEventSystemClientRef *)a1);
  sub_35F84(&v4, v2);
  uint64_t v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  uint64_t v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t sub_221020(uint64_t result)
{
  if (!*(void *)(result + 40)) {
    return result;
  }
  uint64_t v1 = result;
  if (*(void *)(result + 8))
  {
    char v2 = 0;
    uint64_t v3 = 0LL;
    int v4 = 0;
    uint64_t v19 = 0x200000001LL;
    do
    {
      char v5 = v2;
      uint64_t v6 = *(unsigned int *)&buf[4 * v3 - 8];
      KeyboardEvent = (const void *)IOHIDEventCreateKeyboardEvent(kCFAllocatorDefault, 0LL, 65289LL, v6, 0LL, 0LL);
      for (CFIndex i = 0LL; i < CFArrayGetCount(*(CFArrayRef *)(v1 + 8)); ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 8), i);
        uint64_t v10 = IOHIDServiceClientCopyEvent(ValueAtIndex, 3LL, KeyboardEvent, 0LL);
        char v11 = (const void *)v10;
        if (v10)
        {
          if (IOHIDEventGetIntegerValue(v10, 196610LL))
          {
            int v12 = v6;
            if (((1LL << v6) & 0x100010006LL) == 0)
            {
              if (v6 == 3)
              {
                int v12 = 4;
              }

              else
              {
                if (v6 != 4)
                {
LABEL_28:
                  __int16 v16 = (os_log_t *)sub_138E8(13);
                  uint64_t v17 = *v16;
                  if (*v16)
                  {
                    if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315394;
                      __int16 v21 = "HIDEventSystemClient.cpp";
                      __int16 v22 = 1024;
                      int v23 = 102;
                      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): SmartCoverState::Unknown usage",  buf,  0x12u);
                    }
                  }

                  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(exception, "SmartCoverState::Unknown usage");
                }

                int v12 = 8;
              }
            }

            v4 |= v12;
          }

          CFRelease(v11);
        }
      }

      if (KeyboardEvent) {
        CFRelease(KeyboardEvent);
      }
      char v2 = 1;
      uint64_t v3 = 1LL;
    }

    while ((v5 & 1) == 0);
    goto LABEL_25;
  }

  CFNumberRef v13 = (os_log_t *)sub_138E8(16);
  __int16 v14 = *v13;
  if (!*v13) {
    goto LABEL_24;
  }
  int v4 = 0;
  if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v21 = "HIDEventSystemClient.cpp";
    __int16 v22 = 1024;
    int v23 = 85;
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d IOHIDEventSystemClientCopyServices(mHidSystemClient) returned null",  buf,  0x12u);
LABEL_24:
    int v4 = 0;
  }

void sub_2212F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_22134C()
{
  if (qword_491568) {
    CFRelease((CFTypeRef)qword_491568);
  }
}

const void **sub_221370(const void **a1)
{
  char v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_2213A0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_220FCC(result);
    return sub_221020(v1);
  }

  return result;
}

void sub_2213CC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_491598);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_491598))
    {
      sub_220B20();
      __cxa_guard_release(&qword_491598);
    }
  }

void sub_22141C(_Unwind_Exception *a1)
{
}

void *sub_221434(void *a1)
{
  *a1 = off_481AE0;
  char v2 = a1 + 1;
  sub_904DC(a1 + 3);
  sub_904B0(v2);
  return a1;
}

void sub_221474(uint64_t *a1)
{
  *a1 = (uint64_t)off_481AE0;
  char v2 = a1 + 1;
  sub_904DC(a1 + 3);
  sub_904B0(v2);
  operator delete(a1);
}

void sub_2214B4(uint64_t a1)
{
  uint64_t v2 = sub_138E8(31);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v4 = atomic_load((unsigned int *)(a1 + 16));
        int v8 = 136315650;
        CFTypeRef v9 = "AggregateDevice_IODelegate.cpp";
        __int16 v10 = 1024;
        int v11 = 23;
        __int16 v12 = 1024;
        unsigned int v13 = v4;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Informed to Handle IO Start, current start count is %u",  (uint8_t *)&v8,  0x18u);
      }
    }
  }

  char v5 = (unsigned int *)(a1 + 16);
  do
    unsigned int v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (!v6 && !sub_221F30(a1))
  {
    do
      unsigned int v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
  }

void sub_2215BC(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 16);
  if (!atomic_load((unsigned int *)(a1 + 16)))
  {
    __int16 v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      __int16 v14 = "AggregateDevice_IODelegate.cpp";
      __int16 v15 = 1024;
      int v16 = 39;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = sub_138E8(31);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    char v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v6 = atomic_load(v1);
        int v13 = 136315650;
        __int16 v14 = "AggregateDevice_IODelegate.cpp";
        __int16 v15 = 1024;
        int v16 = 40;
        __int16 v17 = 1024;
        unsigned int v18 = v6;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Informed to Handle IO Stop, current start count %u",  (uint8_t *)&v13,  0x18u);
      }
    }
  }

  do
  {
    unsigned int v7 = __ldaxr(v1);
    unsigned int v8 = v7 - 1;
  }

  while (__stlxr(v8, v1));
  if (!v8 && !sub_2219C8(a1))
  {
    do
      unsigned int v9 = __ldaxr(v1);
    while (__stlxr(v9 + 1, v1));
  }

void sub_221770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v14);
  if (a2 == 3)
  {
    __int16 v17 = __cxa_begin_catch(exception_object);
    unsigned int v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v20;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 48;
      __int16 v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&a9, v23);
    }
  }

  else
  {
    __int128 v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int128 v25 = v24;
      __int128 v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v28;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 48;
        __int16 v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 48;
        __int16 v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x2216A0LL);
}

BOOL sub_2219C8(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    int v11 = (os_log_t *)sub_138E8(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "AggregateDevice_IODelegate.cpp";
      __int16 v21 = 1024;
      int v22 = 71;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(void *)(a1 + 24))
  {
    __int16 v14 = (os_log_t *)sub_138E8(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "AggregateDevice_IODelegate.cpp";
      __int16 v21 = 1024;
      int v22 = 72;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }

  uint64_t v2 = (os_log_t *)sub_138E8(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v4 = atomic_load((unsigned int *)(a1 + 16));
    *(_DWORD *)buf = 136315650;
    int v20 = "AggregateDevice_IODelegate.cpp";
    __int16 v21 = 1024;
    int v22 = 74;
    __int16 v23 = 1024;
    LODWORD(v24) = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d hardstop called: mStart = %d", buf, 0x18u);
  }

  uint64_t v5 = sub_31B6B8( *(AudioObjectID **)(a1 + 24),  **(OSStatus (__cdecl ***)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 8));
  if ((_DWORD)v5)
  {
    unsigned int v6 = (os_log_t *)sub_138E8(16);
    unsigned int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, v5);
      if (v18 >= 0) {
        unsigned int v8 = __p;
      }
      else {
        unsigned int v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      int v20 = "AggregateDevice_IODelegate.cpp";
      __int16 v21 = 1024;
      int v22 = 80;
      __int16 v23 = 2080;
      __int128 v24 = v8;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Stop failed with status %s on AggregateDevice IO Delegate",  buf,  0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }

    int v9 = 1;
  }

  else
  {
    int v9 = 0;
  }

  return v9 == 0;
}

void sub_221CCC(_Unwind_Exception *a1)
{
}

BOOL sub_221F30(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    __int16 v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      os_log_t v19 = "AggregateDevice_IODelegate.cpp";
      __int16 v20 = 1024;
      int v21 = 54;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(void *)(a1 + 24))
  {
    int v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      os_log_t v19 = "AggregateDevice_IODelegate.cpp";
      __int16 v20 = 1024;
      int v21 = 55;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    __int16 v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Precondition failure.");
  }

  uint64_t v2 = (os_log_t *)sub_138E8(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v4 = atomic_load((unsigned int *)(a1 + 16));
    *(_DWORD *)buf = 136315650;
    os_log_t v19 = "AggregateDevice_IODelegate.cpp";
    __int16 v20 = 1024;
    int v21 = 57;
    __int16 v22 = 1024;
    LODWORD(v23) = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d hardstart called: mStart = %d", buf, 0x18u);
  }

  uint64_t v5 = sub_31B568( *(AudioObjectID **)(a1 + 24),  **(OSStatus (__cdecl ***)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 8));
  if ((_DWORD)v5)
  {
    unsigned int v6 = (os_log_t *)sub_138E8(16);
    unsigned int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, v5);
        if (v17 >= 0) {
          unsigned int v8 = __p;
        }
        else {
          unsigned int v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        os_log_t v19 = "AggregateDevice_IODelegate.cpp";
        __int16 v20 = 1024;
        int v21 = 62;
        __int16 v22 = 2080;
        __int16 v23 = v8;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Start failed with status %s on AggregateDevice IO Delegate",  buf,  0x1Cu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return (_DWORD)v5 == 0;
}

void sub_22221C(_Unwind_Exception *a1)
{
}

uint64_t sub_22223C(void **a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1819505772)
  {
    if (v2 <= 1668051826)
    {
      if (v2 > 1651796335)
      {
        if (v2 <= 1651797099)
        {
          if (v2 == 1651796336) {
            return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
          }
          unsigned __int16 v5 = 26995;
        }

        else
        {
          if (v2 == 1651797100 || v2 == 1651798131) {
            return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
          }
          unsigned __int16 v5 = 29542;
        }

        int v3 = v5 | 0x62740000;
        goto LABEL_55;
      }

      if (v2 > 1651794289)
      {
        if (v2 != 1651794290)
        {
          if (v2 == 1651796325) {
            return ((unsigned int (*)(void **))(*a1)[50])(a1) != -1;
          }
          return 0LL;
        }
      }

      else if (v2 != 1650551140)
      {
        int v3 = 1651271025;
        goto LABEL_55;
      }
    }

    else if (v2 > 1752462194)
    {
      if (v2 > 1768382831)
      {
        if (v2 == 1768382832 || v2 == 1819046768) {
          return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
        }
        int v3 = 1819503987;
        goto LABEL_55;
      }

      if (v2 != 1752462195)
      {
        int v3 = 1767989616;
        goto LABEL_55;
      }
    }

    else
    {
      if (v2 > 1685021039)
      {
        if (v2 == 1685021040 || v2 == 1685484390) {
          return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
        }
        int v3 = 1752327777;
LABEL_55:
        if (v2 == v3) {
          return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
        }
        return 0LL;
      }

      if (v2 != 1668051827)
      {
        int v3 = 1684826732;
        goto LABEL_55;
      }
    }

    return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
  }

  if (v2 > 1936746610)
  {
    if (v2 > 1970496629)
    {
      if (v2 > 2004050278)
      {
        if (v2 != 2004050279)
        {
          int v3 = 2004054901;
          goto LABEL_55;
        }
      }

      else if (v2 != 1970496630)
      {
        int v3 = 1986947428;
        goto LABEL_55;
      }

      return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
    }

    if (v2 > 1937204589)
    {
      if (v2 != 1937204590)
      {
        int v3 = 1970040164;
        goto LABEL_55;
      }

      return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
    }

    unsigned __int16 v4 = 26739;
LABEL_23:
    int v3 = v4 | 0x73700000;
    goto LABEL_55;
  }

  if (v2 > 1936221549)
  {
    if (v2 <= 1936744815)
    {
      if (v2 != 1936221550)
      {
        int v3 = 1936225136;
        goto LABEL_55;
      }

      return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
    }

    if (v2 == 1936744816 || v2 == 1936745318) {
      return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
    }
    unsigned __int16 v4 = 25966;
    goto LABEL_23;
  }

  if (v2 <= 1885955427)
  {
    if (v2 != 1819505773)
    {
      int v3 = 1869832547;
      goto LABEL_55;
    }

    return (*(uint64_t (**)(void *))(*a1[24] + 16LL))(a1[24]);
  }

  if (v2 != 1885955428)
  {
    int v3 = 1935762278;
    goto LABEL_55;
  }

  return 1LL;
}

uint64_t sub_22257C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1869832546)
  {
    if (v2 > 1936746610)
    {
      if (v2 <= 1937204589)
      {
        return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24LL))(*(void *)(a1 + 192));
      }

      BOOL v4 = v2 == 1937204590 || v2 == 2004050279;
      int v5 = 1986947428;
    }

    else if (v2 > 1936744815)
    {
      BOOL v4 = v2 == 1936744816 || v2 == 1936745318;
      int v5 = 1936745838;
    }

    else
    {
      BOOL v4 = v2 == 1869832547 || v2 == 1936221550;
      int v5 = 1936225136;
    }

    goto LABEL_40;
  }

  if (v2 <= 1684826731)
  {
    if (v2 > 1651797099)
    {
      BOOL v4 = v2 == 1651797100 || v2 == 1651798886;
      int v5 = 1668051827;
    }

    else
    {
      BOOL v4 = v2 == 1650551140 || v2 == 1651271025;
      int v5 = 1651794290;
    }

uint64_t sub_222754(void **a1, int *a2, uint64_t a3, uint64_t a4)
{
  char v8 = ((_DWORD)a3 != 0) ^ (a4 == 0);
  while (1)
  {
    if ((((uint64_t (*)(void **, int *))(*a1)[2])(a1, a2) & 1) == 0)
    {
      int v13 = (os_log_t *)sub_138E8(13);
      __int16 v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)a2;
        int v22 = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)&v21);
        __int16 v15 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        __int128 v26 = "Port_Bluetooth_Aspen.cpp";
        __int16 v27 = 1024;
        int v28 = 237;
        __int16 v29 = 2080;
        os_log_t v30 = v15;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = 2003332927;
    }

    if ((v8 & 1) == 0)
    {
      char v17 = (os_log_t *)sub_138E8(13);
      char v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)a2;
        int v22 = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)&v21);
        os_log_t v19 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136316162;
        __int128 v26 = "Port_Bluetooth_Aspen.cpp";
        __int16 v27 = 1024;
        int v28 = 238;
        __int16 v29 = 2080;
        os_log_t v30 = v19;
        __int16 v31 = 1024;
        int v32 = a3;
        __int16 v33 = 2048;
        uint64_t v34 = a4;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NUL L, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x2Cu);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }

      __int16 v20 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v20 = &off_4865A0;
      v20[2] = 561211770;
    }

    int v9 = *a2;
    if (*a2 > 1819505772) {
      break;
    }
    if (v9 <= 1651798885)
    {
      if (v9 <= 1651796324)
      {
        if (v9 == 1650551140 || v9 == 1651271025) {
          return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
        }
        unsigned __int16 v11 = 24946;
      }

      else
      {
        unsigned __int16 v11 = 28787;
      }

      int v10 = v11 | 0x62740000;
    }

    else if (v9 <= 1752327776)
    {
      if (v9 > 1684826731)
      {
        if (v9 == 1684826732) {
          return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
        }
        int v10 = 1685021040;
      }

      else
      {
        if (v9 == 1651798886) {
          return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
        }
        int v10 = 1668051827;
      }
    }

    else if (v9 <= 1767989615)
    {
      if (v9 == 1752327777) {
        return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
      }
      int v10 = 1752462195;
    }

    else
    {
      if (v9 == 1767989616 || v9 == 1768382832) {
        return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[24] + 32LL))(a1[24], a2, a3, a4);
      }
      int v10 = 1819503987;
    }

uint64_t sub_222CE8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[2])(a1);
  if ((result & 1) == 0)
  {
    char v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v30);
      __int16 v20 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v35 = "Port_Bluetooth_Aspen.cpp";
      __int16 v36 = 1024;
      int v37 = 296;
      __int16 v38 = 2080;
      char v39 = (const char *)v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    int v22 = (os_log_t *)sub_138E8(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v30);
      char v24 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      uint64_t v35 = "Port_Bluetooth_Aspen.cpp";
      __int16 v36 = 1024;
      int v37 = 297;
      __int16 v38 = 2080;
      char v39 = (const char *)v24;
      __int16 v40 = 1024;
      LODWORD(v41[0]) = a3;
      WORD2(v41[0]) = 2048;
      *(void *)((char *)v41 + 6) = a4;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v25 = &off_4865A0;
    void v25[2] = 561211770;
  }

  if (!a6)
  {
    __int128 v26 = (os_log_t *)sub_138E8(13);
    __int16 v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v30);
      if (v33 >= 0) {
        int v28 = __p;
      }
      else {
        int v28 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      uint64_t v35 = "Port_Bluetooth_Aspen.cpp";
      __int16 v36 = 1024;
      int v37 = 298;
      __int16 v38 = 2080;
      char v39 = "outData";
      __int16 v40 = 2080;
      v41[0] = v28;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v29 = &off_4865A0;
    v29[2] = 561211770;
  }

  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1819505772)
  {
    if (v14 > 1668051826)
    {
      if (v14 > 1752462194)
      {
        if (v14 > 1768382831)
        {
          if (v14 == 1768382832 || v14 == 1819046768) {
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
          }
          int v15 = 1819503987;
          goto LABEL_59;
        }

        if (v14 != 1752462195)
        {
          int v15 = 1767989616;
          goto LABEL_59;
        }
      }

      else
      {
        if (v14 > 1685021039)
        {
          if (v14 == 1685021040 || v14 == 1685484390) {
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
          }
          int v15 = 1752327777;
LABEL_59:
          if (v14 == v15) {
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
          }
          return sub_F4320((uint64_t)a1, (uint64_t *)a2, a3, a4, v13, (uint64_t)a6);
        }

        if (v14 != 1668051827)
        {
          int v15 = 1684826732;
          goto LABEL_59;
        }
      }

      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }

    if (v14 > 1651796335)
    {
      if (v14 <= 1651797099)
      {
        if (v14 == 1651796336) {
          return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
        }
        unsigned __int16 v17 = 26995;
      }

      else
      {
        if (v14 == 1651797100 || v14 == 1651798131) {
          return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
        }
        unsigned __int16 v17 = 29542;
      }

      int v15 = v17 | 0x62740000;
      goto LABEL_59;
    }

    if (v14 <= 1651794289)
    {
      if (v14 != 1650551140)
      {
        int v15 = 1651271025;
        goto LABEL_59;
      }

      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }

    if (v14 == 1651794290) {
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }
    if (v14 == 1651796325)
    {
      uint64_t result = ((uint64_t (*)(void **))(*a1)[50])(a1);
      *a6 = result == 1;
      return result;
    }

    return sub_F4320((uint64_t)a1, (uint64_t *)a2, a3, a4, v13, (uint64_t)a6);
  }

  if (v14 > 1936746610)
  {
    if (v14 > 1970496629)
    {
      if (v14 <= 2004050278)
      {
        if (v14 != 1970496630)
        {
          int v15 = 1986947428;
          goto LABEL_59;
        }

        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
      }

      if (v14 == 2004050279) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
      }
      if (v14 == 2004054901)
      {
        *a6 = 0;
        return result;
      }

      return sub_F4320((uint64_t)a1, (uint64_t *)a2, a3, a4, v13, (uint64_t)a6);
    }

    if (v14 > 1937204589)
    {
      if (v14 != 1937204590)
      {
        int v15 = 1970040164;
        goto LABEL_59;
      }

      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }

    if ((v14 - 1936747876) < 2) {
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }
    unsigned __int16 v16 = 26739;
LABEL_26:
    int v15 = v16 | 0x73700000;
    goto LABEL_59;
  }

  if (v14 > 1936221549)
  {
    if (v14 <= 1936744815)
    {
      if (v14 != 1936221550)
      {
        int v15 = 1936225136;
        goto LABEL_59;
      }

      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }

    if (v14 == 1936744816 || v14 == 1936745318) {
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }
    unsigned __int16 v16 = 25966;
    goto LABEL_26;
  }

  if (v14 <= 1885955427)
  {
    if (v14 != 1819505773)
    {
      int v15 = 1869832547;
      goto LABEL_59;
    }

    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*a1[24] + 40LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
  }

  if (v14 != 1885955428)
  {
    int v15 = 1935762278;
    goto LABEL_59;
  }

  uint64_t result = ((uint64_t (*)(void **))(*a1)[49])(a1);
  *a6 = result;
  return result;
}

uint64_t sub_22344C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    unsigned __int16 v17 = (os_log_t *)sub_138E8(13);
    char v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v33);
      os_log_t v19 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 361;
      __int16 v41 = 2080;
      char v42 = (const char *)v19;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v33);
      __int16 v23 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 362;
      __int16 v41 = 2080;
      char v42 = (const char *)v23;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }

    char v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v24 = &off_4865A0;
    v24[2] = 561211770;
  }

  if (!a6)
  {
    __int128 v25 = (os_log_t *)sub_138E8(13);
    __int128 v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v33);
      __int16 v27 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 363;
      __int16 v41 = 2080;
      char v42 = "inData";
      __int16 v43 = 2080;
      v44[0] = v27;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }

    int v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v28 = &off_4865A0;
    v28[2] = 561211770;
  }

  if ((((uint64_t (*)(void **, uint64_t))(*a1)[3])(a1, a2) & 1) == 0)
  {
    __int16 v29 = (os_log_t *)sub_138E8(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v33);
      if (v36 >= 0) {
        int v31 = __p;
      }
      else {
        int v31 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 364;
      __int16 v41 = 2080;
      char v42 = (const char *)v31;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }

    int v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v32 = &off_4865A0;
    v32[2] = 1852797029;
  }

  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 > 1936221549)
  {
    if (v13 > 1936747875)
    {
      if ((v13 - 1936747876) < 2 || v13 == 2004050279) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
      }
      int v14 = 1937204590;
    }

    else
    {
      if (v13 > 1936745837)
      {
        if (v13 == 1936745838) {
          return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
        }
        unsigned __int16 v15 = 26739;
      }

      else
      {
        if (v13 == 1936221550) {
          return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
        }
        unsigned __int16 v15 = 25446;
      }

      int v14 = v15 | 0x73700000;
    }
  }

  else if (v13 > 1752462194)
  {
    if (v13 > 1819505772)
    {
      if (v13 == 1819505773) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
      }
      int v14 = 1869832547;
    }

    else
    {
      if (v13 == 1752462195) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
      }
      int v14 = 1767989616;
    }
  }

  else
  {
    if (v13 <= 1668051826)
    {
      if (v13 != 1651797100)
      {
        int v14 = 1651798886;
        goto LABEL_27;
      }

      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }

    if (v13 == 1668051827) {
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[24] + 48LL))( a1[24],  a2,  a3,  a4,  a5,  a6);
    }
    int v14 = 1752327777;
  }

os_log_s *sub_223A8C(uint64_t a1, int *a2, unint64_t a3, unint64_t a4)
{
  if (!*(void *)(a1 + 648)) {
    return sub_F8898((void *)a1, a2, a3, a4);
  }
  unsigned int v6 = *a2;
  unsigned int v7 = *(uint64_t **)(a1 + 648);
  while (1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v6 >= v8) {
      break;
    }
LABEL_6:
    unsigned int v7 = (uint64_t *)*v7;
    if (!v7) {
      return sub_F8898((void *)a1, a2, a3, a4);
    }
  }

  if (v8 < v6)
  {
    ++v7;
    goto LABEL_6;
  }

  int v10 = sub_10338C(*(uint64_t **)(a1 + 648), *a2);
  int v11 = (*(uint64_t (**)(uint64_t *))(v10[5] + 16))(v10 + 5);
  uint64_t v12 = (uint64_t **)sub_1D21EC((uint64_t)(v10 + 2), buf, a3, a4);
  int v13 = *v12;
  if (*v12)
  {
    int v14 = (os_log_t *)sub_138E8(23);
    unsigned __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, *((unsigned int *)v10 + 2));
      unsigned __int16 v16 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_PropertyListener_Aspen.cpp";
      __int16 v22 = 1024;
      int v23 = 39;
      __int16 v24 = 2080;
      __int128 v25 = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified listener for %s already exists", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    unsigned __int16 v17 = v12;
    char v18 = (uint64_t *)operator new(0x30uLL);
    v18[4] = a3;
    v18[5] = a4;
    sub_32C38((uint64_t **)v10 + 2, *(uint64_t *)buf, v17, v18);
  }

  if (v11) {
    (*(void (**)(uint64_t *))(v10[5] + 24))(v10 + 5);
  }
  return (os_log_s *)(v13 == 0LL);
}

void sub_223C98(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

os_log_s *sub_223CD8(uint64_t a1, int *a2, unint64_t a3, unint64_t a4)
{
  if (!*(void *)(a1 + 648)) {
    return sub_F8A80((void *)a1, a2, a3, a4);
  }
  unsigned int v6 = *a2;
  unsigned int v7 = *(uint64_t **)(a1 + 648);
  while (1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v6 >= v8) {
      break;
    }
LABEL_6:
    unsigned int v7 = (uint64_t *)*v7;
    if (!v7) {
      return sub_F8A80((void *)a1, a2, a3, a4);
    }
  }

  if (v8 < v6)
  {
    ++v7;
    goto LABEL_6;
  }

  int v10 = sub_10338C(*(uint64_t **)(a1 + 648), *a2);
  int v11 = (*(uint64_t (**)(uint64_t *))(v10[5] + 16))(v10 + 5);
  uint64_t v12 = (void *)v10[3];
  if (!v12) {
    goto LABEL_23;
  }
  int v13 = v10 + 3;
  do
  {
    unint64_t v14 = v12[4];
    BOOL v16 = v14 == a3;
    BOOL v15 = v14 < a3;
    if (v16) {
      BOOL v15 = v12[5] < a4;
    }
    BOOL v16 = !v15;
    if (v15) {
      unsigned __int16 v17 = v12 + 1;
    }
    else {
      unsigned __int16 v17 = v12;
    }
    if (v16) {
      int v13 = v12;
    }
    uint64_t v12 = (void *)*v17;
  }

  while (*v17);
  if (v13 == v10 + 3) {
    goto LABEL_23;
  }
  unint64_t v18 = v13[4];
  BOOL v16 = v18 == a3;
  BOOL v19 = v18 > a3;
  if (v16) {
    BOOL v19 = v13[5] > a4;
  }
  if (v19)
  {
LABEL_23:
    char v20 = (os_log_t *)sub_138E8(23);
    uint64_t v21 = *v20;
    if (*v20)
    {
      if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, *((unsigned int *)v10 + 2));
        if (v24 >= 0) {
          __int16 v22 = __p;
        }
        else {
          __int16 v22 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        __int128 v26 = "Port_PropertyListener_Aspen.cpp";
        __int16 v27 = 1024;
        int v28 = 48;
        __int16 v29 = 2080;
        uint64_t v30 = v22;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified listener for %s does not exist", buf, 0x1Cu);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v21 = 0LL;
    }

    if (v11) {
LABEL_32:
    }
      (*(void (**)(uint64_t *))(v10[5] + 24))(v10 + 5);
  }

  else
  {
    sub_1D20A4((uint64_t **)v10 + 2, v13);
    operator delete(v13);
    uint64_t v21 = (os_log_s *)(&dword_0 + 1);
    if (v11) {
      goto LABEL_32;
    }
  }

  return v21;
}

void sub_223F14(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F50(uint64_t a1)
{
  uint64_t v1 = atomic_load((unsigned int *)(*(void *)(a1 + 192) + 492LL));
  return v1 | 0x100000000LL;
}

void sub_223F64(uint64_t a1, uint64_t a2)
{
  int v3 = sub_10338C(*(uint64_t **)(a1 + 648), 0x706E616Du);
  sub_2B5D74((uint64_t)v3);
}

uint64_t sub_223F94(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 497LL);
}

uint64_t sub_223FA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  int v2 = *(_DWORD *)(v1 + 500);
  if (v2 == -1 || !*(_BYTE *)(v1 + 512)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 1LL;
  if (v2 != 1)
  {
    if (*(_DWORD *)(v1 + 504) == 1) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  return result;
}

BOOL sub_223FDC(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)(a1 + 192) + 528LL));
  return v1 != 2;
}

void sub_223FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return;
  }
  do
  {
    int v5 = *(uint64_t **)(a1 + 648);
    if (!v5)
    {
LABEL_31:
      uint64_t v21 = (os_log_t *)sub_138E8(13);
      __int16 v22 = *v21;
      if (*v21)
      {
        if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
          __int16 v32 = 1024;
          int v33 = 448;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    uint64_t v6 = *(unsigned int *)(v2 + 16);
    while (1)
    {
      unsigned int v7 = *((_DWORD *)v5 + 8);
LABEL_7:
      int v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_31;
      }
    }

    if (v7 < v6)
    {
      ++v5;
      goto LABEL_7;
    }

    uint64_t v8 = sub_138E8(23);
    uint64_t v9 = sub_138E8(28);
    char v10 = 0;
    uint64_t v11 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v14 & 1) != 0) {
        goto LABEL_15;
      }
    }

    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_15:
    BOOL v15 = *(os_log_s **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v29, v6);
      if (v30 >= 0) {
        BOOL v16 = v29;
      }
      else {
        BOOL v16 = (void **)v29[0];
      }
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 144LL))(v28, a1);
      uint64_t v17 = v28[0];
      unint64_t v18 = *(const void **)(a1 + 248);
      __int128 v26 = v18;
      char v27 = *(_BYTE *)(a1 + 256);
      if (v27 && v18) {
        CFRetain(v18);
      }
      sub_2CA1C(__p, *(unsigned int *)(a1 + 144));
      BOOL v19 = __p;
      if (v25 < 0) {
        BOOL v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 452;
      __int16 v34 = 2080;
      uint64_t v35 = v16;
      __int16 v36 = 2112;
      uint64_t v37 = v17;
      __int16 v38 = 2112;
      __int16 v39 = v18;
      __int16 v40 = 2080;
      __int16 v41 = v19;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Notifying listeners: changed property %s for port with name %@, UID %@, and type '%s'",  buf,  0x3Au);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)&v26);
      sub_19DFC((uint64_t)v28);
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    char v20 = sub_10338C(*(uint64_t **)(a1 + 648), v6);
    sub_2B5D74((uint64_t)v20);
    uint64_t v2 = *(void *)(v2 + 8);
  }

  while (v2 != a2);
}

void sub_22430C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_224360(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 524LL);
}

uint64_t sub_22436C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 664);
}

BOOL sub_224374(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  return (v1 & 0xFF00000000LL) == 0 || (_DWORD)v1 != 1701869160;
}

uint64_t sub_2243A4(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(a1);
  *((void *)&v4 + 1) = v2;
  *(void *)&__int128 v4 = v1;
  uint64_t v3 = v4 >> 32;
  if ((v3 & 0xFF00000000LL) != 0) {
    return v3;
  }
  else {
    return 0LL;
  }
}

void sub_2243E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(17);
  uint64_t v7 = sub_138E8(28);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  uint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    char v14 = *(const __CFString **)(a1 + 248);
    __int16 v40 = v14;
    char v41 = *(_BYTE *)(a1 + 256);
    if (v41 && v14) {
      CFRetain(v14);
    }
    sub_48E98(v42, v14);
    int v15 = v43;
    BOOL v16 = v42[0];
    sub_F9154(&__p, a3);
    uint64_t v17 = v42;
    if (v15 < 0) {
      uint64_t v17 = (std::__shared_weak_count **)v16;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
    __int16 v45 = 1024;
    int v46 = 473;
    __int16 v47 = 2080;
    int v48 = v17;
    __int16 v49 = 2080;
    char v50 = p_p;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio port with UID %s: headset status %s",  buf,  0x26u);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    sub_19DFC((uint64_t)&v40);
  }

  if (*(_BYTE *)(a3 + 12))
  {
    if (*(_DWORD *)a3 != *(_DWORD *)a2)
    {
      LODWORD(v42[0]) = 1651796336;
      sub_8ED70(buf, (uint64_t)v42, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }

    if (*(_DWORD *)(a3 + 4) != *(_DWORD *)(a2 + 4))
    {
      LODWORD(v42[0]) = 1651796339;
      sub_8ED70(buf, (uint64_t)v42, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }

    if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a2 + 8))
    {
      LODWORD(v42[0]) = 1651798131;
      sub_8ED70(buf, (uint64_t)v42, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }

    int v19 = *(unsigned __int8 *)(a3 + 12);
    int v20 = -1;
    if (*(_DWORD *)a3 != -1)
    {
      if (*(_BYTE *)(a3 + 12))
      {
        int v20 = 1;
        if (*(_DWORD *)a3 != 1)
        {
          if (*(_DWORD *)(a3 + 4) == 1) {
            int v20 = 1;
          }
          else {
            int v20 = 2;
          }
        }
      }
    }

    int v21 = *(unsigned __int8 *)(a2 + 12);
    int v22 = -1;
    if (*(_DWORD *)a2 != -1)
    {
      if (*(_BYTE *)(a2 + 12))
      {
        int v22 = 1;
        if (*(_DWORD *)a2 != 1)
        {
          if (*(_DWORD *)(a2 + 4) == 1) {
            int v22 = 1;
          }
          else {
            int v22 = 2;
          }
        }
      }
    }

    if (v20 != v22)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 408LL))(a1)
        || *(_DWORD *)a3 != -1 && *(_BYTE *)(a3 + 12) && (*(_DWORD *)a3 == 1 || *(_DWORD *)(a3 + 4) == 1))
      {
        uint64_t v29 = sub_138E8(17);
        uint64_t v30 = sub_138E8(28);
        char v31 = 0;
        uint64_t v32 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v33 = *(void *)(v29 + 8);
        while (1)
        {
          uint64_t v34 = *(int *)&buf[4 * v32];
          char v35 = v31;
          if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
            break;
          }
          char v31 = 1;
          uint64_t v32 = 1LL;
          if ((v35 & 1) != 0) {
            goto LABEL_70;
          }
        }

        if ((v33 & v34) == 0) {
          uint64_t v29 = v30;
        }
LABEL_70:
        __int16 v36 = *(os_log_s **)v29;
        if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = *(const __CFString **)(a1 + 248);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
          __p.__r_.__value_.__s.__data_[8] = *(_BYTE *)(a1 + 256);
          if (__p.__r_.__value_.__s.__data_[8] && v37) {
            CFRetain(v37);
          }
          sub_48E98(v42, v37);
          if (v43 >= 0) {
            __int16 v38 = v42;
          }
          else {
            __int16 v38 = (std::__shared_weak_count **)v42[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
          __int16 v45 = 1024;
          int v46 = 500;
          __int16 v47 = 2080;
          int v48 = v38;
          _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %s: routability unchanged due to negative ownership status",  buf,  0x1Cu);
          if (v43 < 0) {
            operator delete(v42[0]);
          }
          sub_19DFC((uint64_t)&__p);
        }
      }

      else
      {
        int v23 = *(std::__shared_weak_count **)(a1 + 88);
        v42[0] = *(std::__shared_weak_count **)(a1 + 80);
        v42[1] = v23;
        if (v23)
        {
          p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
          do
            unint64_t v25 = __ldxr(p_shared_weak_owners);
          while (__stxr(v25 + 1, p_shared_weak_owners));
        }

        sub_D61C0((uint64_t *)buf, (uint64_t *)v42, 1LL);
        sub_224AC8(a1, (uint64_t)buf, 0LL);
        sub_85B80((uint64_t *)buf);
        if (v42[1]) {
          std::__shared_weak_count::__release_weak(v42[1]);
        }
      }

      LODWORD(v42[0]) = 1651796325;
      sub_8ED70(buf, (uint64_t)v42, 1LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
      int v19 = *(unsigned __int8 *)(a3 + 12);
      int v21 = *(unsigned __int8 *)(a2 + 12);
    }

    if (v19 != v21)
    {
      *(_OWORD *)char v42 = xmmword_403270;
      sub_8ED70(buf, (uint64_t)v42, 4LL);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
      sub_68314(buf);
    }
  }

  else if (*(_BYTE *)(a2 + 12))
  {
    *(_OWORD *)char v42 = xmmword_403270;
    sub_8ED70(buf, (uint64_t)v42, 4LL);
    (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 448LL))(a1, buf);
    sub_68314(buf);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 408LL))(a1))
    {
      if (*(_DWORD *)a3 == -1
        || !*(_BYTE *)(a3 + 12)
        || *(_DWORD *)a3 != 1 && *(_DWORD *)(a3 + 4) != 1
        || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1))
      {
        __int128 v26 = *(std::__shared_weak_count **)(a1 + 88);
        v42[0] = *(std::__shared_weak_count **)(a1 + 80);
        v42[1] = v26;
        if (v26)
        {
          char v27 = (unint64_t *)&v26->__shared_weak_owners_;
          do
            unint64_t v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }

        sub_D61C0((uint64_t *)buf, (uint64_t *)v42, 1LL);
        sub_224AC8(a1, (uint64_t)buf, 1LL);
        sub_85B80((uint64_t *)buf);
        if (v42[1]) {
          std::__shared_weak_count::__release_weak(v42[1]);
        }
      }
    }
  }

void sub_224A30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, char a22)
{
}

uint64_t sub_224AC0()
{
  return 0LL;
}

void sub_224AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(17);
  uint64_t v7 = sub_138E8(28);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  uint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    char v14 = *(const void **)(a1 + 248);
    int v19 = v14;
    char v20 = *(_BYTE *)(a1 + 256);
    if (v20 && v14) {
      CFRetain(v14);
    }
    sub_2D9F18(&__p, a2);
    int v15 = "false";
    if ((_DWORD)a3) {
      int v15 = "true";
    }
    *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136316162;
    __int16 v22 = 1024;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    int v23 = 461;
    __int16 v24 = 2112;
    unint64_t v25 = v14;
    __int16 v26 = 2080;
    char v27 = v15;
    __int16 v28 = 2080;
    uint64_t v29 = p_p;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %@: setting routability to %s for ports %s",  buf,  0x30u);
    sub_19DFC((uint64_t)&v19);
  }

  uint64_t v17 = sub_546E0();
  sub_103CF8(v17, a2, a3, 0);
}

void sub_224CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_224CC0( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, CFStringRef theString, char a8)
{
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = buf;
  sub_7A668((void ***)__p);
  *(void *)a1 = &off_476B40;
  int v15 = (uint64_t *)(a1 + 648);
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(void *)(a1 + 640) = a1 + 648;
  if (!a3) {
    goto LABEL_11;
  }
  strcpy(buf, "paaibolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v16 = sub_5C2F8(a3);
  BOOL v17 = 0;
  *((void *)&v20 + 1) = v18;
  *(void *)&__int128 v20 = v16;
  uint64_t v19 = v20 >> 32;
  if ((v19 & 0xFF00000000LL) == 0 || !(_DWORD)v19) {
    goto LABEL_21;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 376LL))(a3);
  BOOL v22 = (v21 & 0xFF00000000LL) == 0 || v21 == 0LL;
  if (v22)
  {
LABEL_11:
    BOOL v17 = 0;
  }

  else
  {
    LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120LL))(a3);
    strcpy(buf, "diabbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v23 = sub_36EF4((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
    *((void *)&v26 + 1) = v24;
    *(void *)&__int128 v26 = v23;
    uint64_t v25 = v26 >> 32;
    BOOL v28 = HIDWORD(v23) > 0x2009 && (_DWORD)v25 != 8208;
    BOOL v17 = (v25 & 0xFF00000000LL) != 0 && v28;
  }

void sub_22501C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_225088(char *a1)
{
  if (a1)
  {
    sub_225088(*(void *)a1);
    sub_225088(*((void *)a1 + 1));
    *((void *)a1 + 5) = off_47B000;
    *((void *)a1 + 10) = off_46E4E8;
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 104));
    sub_32C8C(*((void **)a1 + 8));
    operator delete(a1);
  }

uint64_t sub_2250F4(uint64_t a1)
{
  *(void *)a1 = off_47B000;
  *(void *)(a1 + 40) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 64));
  sub_32C8C(*(void **)(a1 + 24));
  return a1;
}

void sub_225140(pthread_mutex_t *a1)
{
  a1->__sig = (uint64_t)off_47B000;
  *(void *)&a1->__opaque[32] = off_46E4E8;
  pthread_mutex_destroy(a1 + 1);
  sub_32C8C(*(void **)&a1->__opaque[16]);
  operator delete(a1);
}

uint64_t sub_22518C(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  return sub_F9108(a1);
}

void sub_2251C0(uint64_t a1)
{
  *(void *)a1 = &off_476B40;
  sub_225088(*(char **)(a1 + 648));
  uint64_t v2 = (void *)sub_F9108(a1);
  operator delete(v2);
}

void *sub_2251F8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, CFStringRef *a6, char a7, int a8)
{
  *a1 = off_476D80;
  return a1;
}

void sub_225294( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_2252A8(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  if (!a1)
  {
    __int128 v20 = (os_log_t *)sub_138E8(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v30 = 1024;
      int v31 = 240;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inObject is NULL]: inObject is nullptr.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inObject is nullptr.");
  }

  if (a2 && !a3)
  {
    unint64_t v23 = (os_log_t *)sub_138E8(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v30 = 1024;
      int v31 = 242;
      __int16 v32 = 1024;
      unsigned int v33 = a2;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inAddresses is nullptr, but inNumberAddresses is %u.",  buf,  0x18u);
    }

    uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "inAddresses is nullptr, but inNumberAddresses is %u.");
  }

  if (!a4)
  {
    __int128 v26 = (os_log_t *)sub_138E8(13);
    char v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v30 = 1024;
      int v31 = 243;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: inClientData is nullptr.",  buf,  0x12u);
    }

    BOOL v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "inClientData is nullptr.");
  }

  CFIndex i = a3;
  if (a2)
  {
    uint64_t v7 = 12LL * a2;
    for (CFIndex i = a3; i[1] != *(_DWORD *)(a4 + 36) || *i != *(_DWORD *)(a4 + 32) || i[2] != *(_DWORD *)(a4 + 40); i += 3)
    {
      v7 -= 12LL;
      if (!v7) {
        return;
      }
    }
  }

  if (i != &a3[3 * a2])
  {
    char v8 = *(std::__shared_weak_count **)(a4 + 16);
    uint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = *(void *)(a4 + 8);
    if (!v8 || (uint64_t v11 = std::__shared_weak_count::lock(v8)) == 0LL) {
      sub_9D954();
    }
    char v12 = v11;
    uint64_t v13 = *(void *)(v9 + 8);
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16LL))(v13);
    uint64_t v15 = *(void *)(v9 + 16);
    if (v15 && v15 == a1 && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 24LL))(v10, a1))
    {
      if (*(_DWORD *)(v10 + 32) == 1635153007)
      {
        uint64_t v16 = (os_log_t *)sub_138E8(1);
        BOOL v17 = *v16;
        if (*v16)
        {
          if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
            __int16 v30 = 1024;
            int v31 = 432;
            _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d The AOP driver reports a Hey Siri trigger.",  buf,  0x12u);
          }
        }
      }

      if (*(_BYTE *)(v9 + 48))
      {
        if (!*(_BYTE *)(v10 + 46)) {
          sub_87EB4((unint64_t *)(v9 + 56), (int *)(v10 + 32));
        }
      }

      else
      {
        sub_34AA0(buf, *(void *)(v9 + 8));
        sub_34B90(v9, 1LL, v10 + 32, 0LL);
        if (buf[8]) {
          (*(void (**)(void))(**(void **)buf + 16LL))(*(void *)buf);
        }
      }
    }

    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
    }
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_2256F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_225790(std::__shared_weak_count_vtbl *a1, int *a2, char a3)
{
  int v6 = *a2;
  if (*a2 > 1836414052)
  {
    if (v6 > 1936876402)
    {
      if (v6 <= 1986225267)
      {
        if (v6 <= 1953002353)
        {
          if (v6 == 1936876403) {
            goto LABEL_107;
          }
          if (v6 == 1952997988) {
            goto LABEL_106;
          }
          goto LABEL_125;
        }

        if (v6 != 1953002354)
        {
          if (v6 == 1983997011) {
            goto LABEL_97;
          }
          if (v6 != 1986225266) {
            goto LABEL_125;
          }
        }

        goto LABEL_66;
      }

      if (v6 <= 1986817376)
      {
        if (v6 == 1986225268 || v6 == 1986229104) {
          goto LABEL_97;
        }
        int v8 = 1986290211;
LABEL_26:
        if (v6 != v8) {
          goto LABEL_125;
        }
        uint64_t v9 = (std::__shared_weak_count *)operator new(0x70uLL);
        uint64_t v10 = v9;
        v9->__shared_owners_ = 0LL;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        v9->__shared_weak_owners_ = 0LL;
        v9->__vftable = (std::__shared_weak_count_vtbl *)off_477110;
        v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_477148;
        char v12 = v9 + 1;
        v9[1].__shared_owners_ = 0LL;
        v9[1].__shared_weak_owners_ = 0LL;
        uint64_t v13 = *(void *)a2;
        v9[2].__vftable = a1;
        v9[2].__shared_owners_ = v13;
        LODWORD(v9[2].__shared_weak_owners_) = a2[2];
        BYTE4(v9[2].__shared_weak_owners_) = a3 & 1;
        BYTE5(v9[2].__shared_weak_owners_) = (a3 & 2) != 0;
        BYTE6(v9[2].__shared_weak_owners_) = (a3 & 4) != 0;
        HIBYTE(v9[2].__shared_weak_owners_) = (a3 & 8) != 0;
        LOBYTE(v9[3].__vftable) = 0;
        *(_OWORD *)&v9[3].__shared_owners_ = 0u;
        v9[4].std::__shared_count = 0u;
        do
          unint64_t v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          unint64_t v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
        v9[1].__shared_owners_ = (uint64_t)v12;
        v9[1].__shared_weak_owners_ = (uint64_t)v9;
        do
          unint64_t v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
LABEL_120:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }

        goto LABEL_122;
      }

      if (v6 == 1986817377 || v6 == 1987013732)
      {
LABEL_90:
        __int16 v32 = (std::__shared_weak_count *)operator new(0x58uLL);
        uint64_t v10 = v32;
        v32->__shared_owners_ = 0LL;
        unsigned int v33 = (unint64_t *)&v32->__shared_owners_;
        v32->__shared_weak_owners_ = 0LL;
        v32->__vftable = (std::__shared_weak_count_vtbl *)off_477030;
        v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_477068;
        char v12 = v32 + 1;
        v32[1].__shared_owners_ = 0LL;
        v32[1].__shared_weak_owners_ = 0LL;
        uint64_t v34 = *(void *)a2;
        v32[2].__vftable = a1;
        v32[2].__shared_owners_ = v34;
        LODWORD(v32[2].__shared_weak_owners_) = a2[2];
        BYTE4(v32[2].__shared_weak_owners_) = a3 & 1;
        BYTE5(v32[2].__shared_weak_owners_) = (a3 & 2) != 0;
        BYTE6(v32[2].__shared_weak_owners_) = (a3 & 4) != 0;
        HIBYTE(v32[2].__shared_weak_owners_) = (a3 & 8) != 0;
        LOBYTE(v32[3].__vftable) = 0;
        HIDWORD(v32[3].__vftable) = 0;
        LODWORD(v32[3].__shared_owners_) = 0;
        do
          unint64_t v35 = __ldxr(v33);
        while (__stxr(v35 + 1, v33));
        __int16 v36 = (unint64_t *)&v32->__shared_weak_owners_;
        do
          unint64_t v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        v32[1].__shared_owners_ = (uint64_t)v12;
        v32[1].__shared_weak_owners_ = (uint64_t)v32;
        do
          unint64_t v17 = __ldaxr(v33);
        while (__stlxr(v17 - 1, v33));
        goto LABEL_120;
      }

      int v31 = 1987013741;
    }

    else
    {
      if (v6 > 1886807153)
      {
        if (v6 <= 1935763059)
        {
          if (v6 != 1886807154 && v6 != 1919774835)
          {
            int v7 = 1935762281;
LABEL_14:
            if (v6 != v7) {
              goto LABEL_125;
            }
            goto LABEL_106;
          }

void sub_2260BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_226108(void *a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, char a4)
{
  int v8 = (std::__shared_weak_count *)operator new(0x58uLL);
  uint64_t v9 = v8;
  v8->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0LL;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_476FC0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_476FF8;
  v8[1].__shared_owners_ = 0LL;
  v8[1].__shared_weak_owners_ = 0LL;
  uint64_t v11 = *(void *)a3;
  v8[2].__vftable = a2;
  v8[2].__shared_owners_ = v11;
  LODWORD(v8[2].__shared_weak_owners_) = *(_DWORD *)(a3 + 8);
  BYTE4(v8[2].__shared_weak_owners_) = a4 & 1;
  BYTE5(v8[2].__shared_weak_owners_) = (a4 & 2) != 0;
  BYTE6(v8[2].__shared_weak_owners_) = (a4 & 4) != 0;
  HIBYTE(v8[2].__shared_weak_owners_) = (a4 & 8) != 0;
  LOBYTE(v8[3].__vftable) = 0;
  HIDWORD(v8[3].__vftable) = 0;
  LODWORD(v8[3].__shared_owners_) = 0;
  *a1 = v8 + 1;
  a1[1] = v8;
  do
    unint64_t v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    unint64_t v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v8[1].__shared_owners_ = (uint64_t)&v8[1];
  v8[1].__shared_weak_owners_ = (uint64_t)v8;
  do
    unint64_t v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }

void sub_226218(void *a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, char a4)
{
  int v8 = (std::__shared_weak_count *)operator new(0x60uLL);
  uint64_t v9 = v8;
  v8->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0LL;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_477260;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_477298;
  v8[1].__shared_owners_ = 0LL;
  v8[1].__shared_weak_owners_ = 0LL;
  uint64_t v11 = *(void *)a3;
  v8[2].__vftable = a2;
  v8[2].__shared_owners_ = v11;
  LODWORD(v8[2].__shared_weak_owners_) = *(_DWORD *)(a3 + 8);
  BYTE4(v8[2].__shared_weak_owners_) = a4 & 1;
  BYTE5(v8[2].__shared_weak_owners_) = (a4 & 2) != 0;
  BYTE6(v8[2].__shared_weak_owners_) = (a4 & 4) != 0;
  HIBYTE(v8[2].__shared_weak_owners_) = (a4 & 8) != 0;
  LOBYTE(v8[3].__vftable) = 0;
  v8[3].__shared_owners_ = 0LL;
  v8[3].__shared_weak_owners_ = 0LL;
  *a1 = v8 + 1;
  a1[1] = v8;
  do
    unint64_t v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    unint64_t v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v8[1].__shared_owners_ = (uint64_t)&v8[1];
  v8[1].__shared_weak_owners_ = (uint64_t)v8;
  do
    unint64_t v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }

uint64_t sub_226328(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_226354(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t sub_226380(uint64_t result, int a2, void *a3)
{
  if (a2 != 8)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    __int128 v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v8 = 1024;
      int v9 = 38;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Incorrect data size.",  (uint8_t *)&v6,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }

  *(void *)(result + 56) = *a3;
  return result;
}

void sub_22647C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_226498(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  BOOL v4 = sub_226770(a1, a2, &v5);
  if (!v4) {
    *(void *)(a1 + 56) = v5;
  }
  return !v4;
}

uint64_t sub_2264EC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (sub_226770(a1, a2, &v5)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 45)) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24LL))(a2, &v6);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  &v6,  0LL,  0LL,  8LL,  a1 + 56);
    return 1LL;
  }

  return result;
}

void sub_226734(_Unwind_Exception *a1)
{
}

void sub_226754(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_226770(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, void *))(*(void *)a2 + 40LL))( a2,  &v6,  0LL,  0LL,  v8,  a3);
  return *(void *)(a1 + 56) == *a3;
}

void sub_226818( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a2)
  {
    __int128 v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v21 = v20;
      BOOL v22 = (os_log_t *)sub_138E8(1);
      unint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_613AC((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.",  (uint8_t *)&buf,  0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    else
    {
      uint64_t v26 = (os_log_t *)sub_138E8(1);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)&__p, &a16);
        BOOL v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Fatal exception trying to read property '%s'.",  (uint8_t *)&buf,  0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    JUMPOUT(0x2267E8LL);
  }

  _Unwind_Resume(a1);
}

void sub_2269E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_477260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2269F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_477260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_226A14(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_226A24(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_226A50(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t sub_226A7C(uint64_t result, int a2, void *a3)
{
  if (a2 != 8)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v8 = 1024;
      int v9 = 38;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Incorrect data size.",  (uint8_t *)&v6,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }

  *(void *)(result + 56) = *a3;
  return result;
}

void sub_226B78(_Unwind_Exception *exception_object)
{
}

uint64_t sub_226B94(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  BOOL v4 = sub_226E6C(a1, a2, &v5);
  if (!v4) {
    *(void *)(a1 + 56) = v5;
  }
  return !v4;
}

uint64_t sub_226BE8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (sub_226E6C(a1, a2, &v5)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 45)) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24LL))(a2, &v6);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  &v6,  0LL,  0LL,  8LL,  a1 + 56);
    return 1LL;
  }

  return result;
}

void sub_226E30(_Unwind_Exception *a1)
{
}

void sub_226E50(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_226E6C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, void *))(*(void *)a2 + 40LL))( a2,  &v6,  0LL,  0LL,  v8,  a3);
  return *(void *)(a1 + 56) == *a3;
}

void sub_226F14( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a2)
  {
    __int128 v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v21 = v20;
      BOOL v22 = (os_log_t *)sub_138E8(1);
      unint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_613AC((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.",  (uint8_t *)&buf,  0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    else
    {
      uint64_t v26 = (os_log_t *)sub_138E8(1);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)&__p, &a16);
        BOOL v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Fatal exception trying to read property '%s'.",  (uint8_t *)&buf,  0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    JUMPOUT(0x226EE4LL);
  }

  _Unwind_Resume(a1);
}

void sub_2270E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4771F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2270F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4771F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_227110(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_227120(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_22714C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

__n128 sub_227178(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 != 40)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v10 = 1024;
      int v11 = 38;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Incorrect data size.",  (uint8_t *)&v8,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }

  __n128 result = *(__n128 *)a3;
  __int128 v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 88) = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 72) = v4;
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void sub_227280(_Unwind_Exception *exception_object)
{
}

uint64_t sub_22729C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  __int128 v4 = *(_OWORD *)(a1 + 112);
  __int128 v7 = *(_OWORD *)(a1 + 96);
  __int128 v8 = v4;
  uint64_t v9 = *(void *)(a1 + 128);
  int v5 = sub_227590(a1, a2, (uint64_t)&v7);
  if ((v5 & 1) == 0)
  {
    __int128 v6 = v8;
    *(_OWORD *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(void *)(a1 + 88) = v9;
  }

  return v5 ^ 1u;
}

uint64_t sub_227304(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  __int128 v4 = *(_OWORD *)(a1 + 112);
  v6[0] = *(_OWORD *)(a1 + 96);
  v6[1] = v4;
  uint64_t v7 = *(void *)(a1 + 128);
  if (!*(_BYTE *)(a1 + 45)) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24LL))(a2, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  &v8,  0LL,  0LL,  40LL,  a1 + 56);
    return 1LL;
  }

  return result;
}

void sub_227554(_Unwind_Exception *a1)
{
}

void sub_227574(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_227590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *(void *)(a1 + 32);
  int v21 = *(_DWORD *)(a1 + 40);
  v22[0] = 40;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, uint64_t))(*(void *)a2 + 40LL))( a2,  &v20,  0LL,  0LL,  v22,  a3);
  double v5 = *(double *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 64);
  if (v7)
  {
    int v8 = *(_DWORD *)(a3 + 8);
    if (v8)
    {
      if (v7 != v8) {
        return 0LL;
      }
    }
  }

  int v9 = *(_DWORD *)(a1 + 72);
  if (v9)
  {
    int v10 = *(_DWORD *)(a3 + 16);
    if (v10)
    {
      if (v9 != v10) {
        return 0LL;
      }
    }
  }

  int v11 = *(_DWORD *)(a1 + 76);
  if (v11)
  {
    int v12 = *(_DWORD *)(a3 + 20);
    if (v12)
    {
      if (v11 != v12) {
        return 0LL;
      }
    }
  }

  int v13 = *(_DWORD *)(a1 + 80);
  if (v13)
  {
    int v14 = *(_DWORD *)(a3 + 24);
    if (v14)
    {
      if (v13 != v14) {
        return 0LL;
      }
    }
  }

  int v15 = *(_DWORD *)(a1 + 84);
  if (v15)
  {
    int v16 = *(_DWORD *)(a3 + 28);
    if (v16)
    {
      if (v15 != v16) {
        return 0LL;
      }
    }
  }

  int v17 = *(_DWORD *)(a1 + 88);
  if (v17 && (int v18 = *(_DWORD *)(a3 + 32)) != 0 && v17 != v18) {
    return 0LL;
  }
  else {
    return sub_2854C(a1 + 56, a3);
  }
}

void sub_2276E8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      BOOL v22 = (os_log_t *)sub_138E8(1);
      unint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_613AC((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.",  (uint8_t *)&buf,  0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }

    else
    {
      uint64_t v26 = (os_log_t *)sub_138E8(1);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)&__p, &a16);
        BOOL v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Fatal exception trying to read property '%s'.",  (uint8_t *)&buf,  0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2276A8LL);
  }

  _Unwind_Resume(a1);
}

void sub_2278B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_477180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2278C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_477180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2278E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2278F0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_22791C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

__n128 sub_227948(uint64_t a1, int a2, __n128 *a3)
{
  if (a2 != 16)
  {
    __int128 v4 = (os_log_t *)sub_138E8(13);
    double v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v9 = 1024;
      int v10 = 38;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Incorrect data size.",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }

  __n128 result = *a3;
  *(__n128 *)(a1 + 56) = *a3;
  return result;
}

void sub_227A44(_Unwind_Exception *exception_object)
{
}

uint64_t sub_227A60(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  __int128 v5 = *(_OWORD *)(a1 + 72);
  BOOL v4 = sub_227D38(a1, a2, (double *)&v5);
  if (!v4) {
    *(_OWORD *)(a1 + 56) = v5;
  }
  return !v4;
}

uint64_t sub_227AB4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  *(_OWORD *)__int128 v5 = *(_OWORD *)(a1 + 72);
  if (sub_227D38(a1, a2, v5)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 45)) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24LL))(a2, &v6);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  &v6,  0LL,  0LL,  16LL,  a1 + 56);
    return 1LL;
  }

  return result;
}

void sub_227CFC(_Unwind_Exception *a1)
{
}

void sub_227D1C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_227D38(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v13 = *(void *)(a1 + 32);
  int v14 = *(_DWORD *)(a1 + 40);
  int v15 = 16;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a2 + 40LL))( a2,  &v13,  0LL,  0LL,  &v15,  a3);
  double v5 = *(double *)(a1 + 64);
  double v6 = *a3;
  if (v5 < *a3) {
    return 0LL;
  }
  double v7 = *(double *)(a1 + 56);
  double v8 = a3[1];
  if (v7 < v6 && v5 <= v8) {
    return 0LL;
  }
  BOOL v10 = v7 == v6;
  if (v5 != v8) {
    BOOL v10 = 0;
  }
  return (v7 >= v6 || v5 <= v8) && v10;
}

void sub_227FA4(_Unwind_Exception *a1)
{
}

void sub_227FC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_227FE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_477110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_227FF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_477110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_228010(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_228020(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_22804C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

double sub_228078(uint64_t a1, int a2, double *a3)
{
  if (a2 != 8)
  {
    BOOL v4 = (os_log_t *)sub_138E8(13);
    double v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      double v8 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v9 = 1024;
      int v10 = 38;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Incorrect data size.",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }

  double result = *a3;
  *(double *)(a1 + 56) = *a3;
  return result;
}

void sub_228174(_Unwind_Exception *exception_object)
{
}

uint64_t sub_228190(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  BOOL v4 = sub_228468(a1, a2, (double *)&v5);
  if (!v4) {
    *(void *)(a1 + 56) = v5;
  }
  return !v4;
}

uint64_t sub_2281E4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 45)) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24LL))(a2, &v6);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  &v6,  0LL,  0LL,  8LL,  a1 + 56);
    return 1LL;
  }

  return result;
}

void sub_22842C(_Unwind_Exception *a1)
{
}

void sub_22844C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_228468(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a2 + 40LL))( a2,  &v6,  0LL,  0LL,  v8,  a3);
  return *(double *)(a1 + 56) == *a3;
}

void sub_228510( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      BOOL v22 = (os_log_t *)sub_138E8(1);
      unint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_613AC((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.",  (uint8_t *)&buf,  0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    else
    {
      uint64_t v26 = (os_log_t *)sub_138E8(1);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)&__p, &a16);
        BOOL v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Fatal exception trying to read property '%s'.",  (uint8_t *)&buf,  0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    JUMPOUT(0x2284E0LL);
  }

  _Unwind_Resume(a1);
}

void sub_2286DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4770A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2286EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4770A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_22870C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_22871C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_228748(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

float sub_228774(uint64_t a1, int a2, float *a3)
{
  if (a2 != 4)
  {
    BOOL v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      double v8 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v9 = 1024;
      int v10 = 38;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Incorrect data size.",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }

  float result = *a3;
  *(float *)(a1 + 52) = *a3;
  return result;
}

void sub_228870(_Unwind_Exception *exception_object)
{
}

uint64_t sub_22888C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  BOOL v4 = sub_228B64(a1, a2, (float *)&v5);
  if (!v4) {
    *(_DWORD *)(a1 + 52) = v5;
  }
  return !v4;
}

uint64_t sub_2288E0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 45)) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24LL))(a2, &v6);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  &v6,  0LL,  0LL,  4LL,  a1 + 52);
    return 1LL;
  }

  return result;
}

void sub_228B28(_Unwind_Exception *a1)
{
}

void sub_228B48(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_228B64(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 4;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)a2 + 40LL))( a2,  &v6,  0LL,  0LL,  v8,  a3);
  return *(float *)(a1 + 52) == *a3;
}

void sub_228C0C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      BOOL v22 = (os_log_t *)sub_138E8(1);
      unint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_613AC((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.",  (uint8_t *)&buf,  0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    else
    {
      uint64_t v26 = (os_log_t *)sub_138E8(1);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)&__p, &a16);
        BOOL v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Fatal exception trying to read property '%s'.",  (uint8_t *)&buf,  0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    JUMPOUT(0x228BDCLL);
  }

  _Unwind_Resume(a1);
}

void sub_228DD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_477030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_228DE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_477030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_228E08(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_228E18(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_228E44(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t sub_228E70(uint64_t result, int a2, _DWORD *a3)
{
  if (a2 != 4)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v8 = 1024;
      int v9 = 38;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Incorrect data size.",  (uint8_t *)&v6,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }

  *(_DWORD *)(result + 52) = *a3;
  return result;
}

void sub_228F6C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_228F88(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  BOOL v4 = sub_229260(a1, a2, &v5);
  if (!v4) {
    *(_DWORD *)(a1 + 52) = v5;
  }
  return !v4;
}

uint64_t sub_228FDC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 44)) {
    return 1LL;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  if (sub_229260(a1, a2, &v5)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 45)) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24LL))(a2, &v6);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  &v6,  0LL,  0LL,  4LL,  a1 + 52);
    return 1LL;
  }

  return result;
}

void sub_229224(_Unwind_Exception *a1)
{
}

void sub_229244(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_229260(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 4;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, _DWORD *))(*(void *)a2 + 40LL))( a2,  &v6,  0LL,  0LL,  v8,  a3);
  return *(_DWORD *)(a1 + 52) == *a3;
}

void sub_229308( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      BOOL v22 = (os_log_t *)sub_138E8(1);
      unint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_613AC((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.",  (uint8_t *)&buf,  0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    else
    {
      uint64_t v26 = (os_log_t *)sub_138E8(1);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_613AC((uint64_t)&__p, &a16);
        BOOL v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Fatal exception trying to read property '%s'.",  (uint8_t *)&buf,  0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }

      __cxa_end_catch();
    }

    JUMPOUT(0x2292D8LL);
  }

  _Unwind_Resume(a1);
}

void sub_2294D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_476FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2294E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_476FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_229504(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_229514(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  if (a1[2])
  {
    BOOL v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315650;
        int v9 = "VirtualAudio_DevicePropertyCache.cpp";
        __int16 v10 = 1024;
        int v11 = 291;
        __int16 v12 = 2048;
        uint64_t v13 = a1;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Property cache at %p is being torn down while an active object is selected.",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  sub_6DD4();
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315650;
        int v9 = "VirtualAudio_DevicePropertyCache.cpp";
        __int16 v10 = 1024;
        int v11 = 293;
        __int16 v12 = 2048;
        uint64_t v13 = a1;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Property cache at %p is being torn down while the routing mutex is held.",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  sub_2296FC((uint64_t)a1);
  sub_2297C0(a1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
}

void sub_2296BC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_2296FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  if (*(void *)(a1 + 16))
  {
    memset(v4, 0, sizeof(v4));
    *(_BYTE *)(a1 + 48) = 1;
    sub_229AFC(a1, 0LL, v4);
    int v5 = (void **)v4;
    sub_E2D18(&v5);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
}

void sub_229790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_2297C0(uint64_t *a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48LL))(a1[1]) & 1) == 0)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 464;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Cache mutex not held by current thread.",  buf,  0x12u);
      }
    }
  }

  sub_6DD4();
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 465;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is held by the current thread.",  buf,  0x12u);
      }
    }
  }

  if (a1[13])
  {
    uint64_t v6 = 0LL;
    *(void *)buf = buf;
    *(void *)&buf[8] = buf;
    int v7 = buf;
    int v8 = a1 + 11;
    while (1)
    {
      *(void *)&buf[16] = v6;
      int v8 = (uint64_t *)v8[1];
      if (v8 == a1 + 11) {
        break;
      }
      int v9 = operator new(0x28uLL);
      v9[2] = v8[2];
      uint64_t v10 = v8[3];
      v9[3] = v10;
      if (v10)
      {
        int v11 = (unint64_t *)(v10 + 16);
        do
          unint64_t v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        uint64_t v6 = *(void *)&buf[16];
      }

      v9[4] = v8[4];
      void *v9 = v7;
      v9[1] = buf;
      *((void *)v7 + 1) = v9;
      *(void *)buf = v9;
      ++v6;
      int v7 = v9;
    }

    sub_85B80(a1 + 11);
    sub_34AA0(&v23, a1[1]);
    for (uint64_t i = *(void *)&buf[8]; (_BYTE *)i != buf; uint64_t i = *(void *)(i + 8))
    {
      int v14 = *(std::__shared_weak_count **)(i + 24);
      if (v14)
      {
        uint64_t v15 = *(void *)(i + 16);
        p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
        do
          unint64_t v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
        uint64_t v18 = *(void *)(i + 32);
        unint64_t v19 = std::__shared_weak_count::lock(v14);
        if (v19)
        {
          uint64_t v20 = v19;
          if (v15) {
            sub_F35C8(v18, (_DWORD *)(v15 + 32), (uint64_t)sub_2252A8, v15);
          }
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            unint64_t v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }

        std::__shared_weak_count::__release_weak(v14);
      }
    }

    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
    }
    sub_85B80((uint64_t *)buf);
  }

void sub_229A98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_229AFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
  int v7 = v6;
  if (*(void *)(a1 + 16) != a2)
  {
    uint64_t v37 = v5;
    int v38 = v6;
    if (!*(_BYTE *)(a1 + 48))
    {
      unint64_t v35 = (os_log_t *)sub_138E8(13);
      __int16 v36 = *v35;
      if (*v35)
      {
        if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          unint64_t v45 = "VirtualAudio_DevicePropertyCache.cpp";
          __int16 v46 = 1024;
          int v47 = 318;
          _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Notifications must be queued during swap.",  buf,  0x12u);
        }
      }
    }

    int v8 = (void *)(a1 + 24);
    int v9 = *(void **)(a1 + 32);
    if (v9 != (void *)(a1 + 24))
    {
      uint64_t v10 = a1 + 88;
      do
      {
        uint64_t v11 = v9[2];
        unint64_t v12 = (std::__shared_weak_count *)v9[3];
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }

        int v15 = *(unsigned __int8 *)(v11 + 48);
        if (*(_BYTE *)(v11 + 48))
        {
          if (!*(void *)(a1 + 16))
          {
            char v24 = (os_log_t *)sub_138E8(13);
            uint64_t v25 = *v24;
            if (*v24)
            {
              if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                unint64_t v45 = "VirtualAudio_DevicePropertyCache.cpp";
                __int16 v46 = 1024;
                int v47 = 328;
                _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mCurrentVAObject is nullptr but there is an active property.",  buf,  0x12u);
              }
            }
          }

          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              unint64_t v17 = __ldxr(p_shared_weak_owners);
            while (__stxr(v17 + 1, p_shared_weak_owners));
          }

          uint64_t v18 = *(void *)(a1 + 16);
          unint64_t v19 = operator new(0x28uLL);
          v19[2] = v11;
          v19[3] = v12;
          v19[4] = v18;
          uint64_t v20 = *(void *)(a1 + 88);
          void *v19 = v20;
          v19[1] = v10;
          *(void *)(v20 + 8) = v19;
          *(void *)(a1 + 88) = v19;
          ++*(void *)(a1 + 104);
        }

        if (a2)
        {
          uint64_t v21 = *(void *)v11;
          if (v15)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v11, a2) & 1) == 0)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24LL))(v11, a2);
              if (!*(_BYTE *)(v11 + 46))
              {
                unint64_t v22 = (unint64_t *)sub_E2D90(a3, *(_DWORD *)(*(void *)a1 + 8LL));
                sub_87EB4(v22, (int *)(v11 + 32));
              }
            }
          }

          else
          {
            (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v11, a2);
          }

          uint64_t v26 = sub_F31A4(a2, (_DWORD *)(v11 + 32), (uint64_t)sub_2252A8, v11, *(_BYTE *)(v11 + 47) == 0);
          if ((_DWORD)v26)
          {
            unint64_t v27 = (os_log_t *)sub_138E8(1);
            BOOL v28 = *v27;
            if (*v27)
            {
              if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
              {
                sub_2CA1C(v42, v26);
                int v29 = v43;
                int v30 = (void **)v42[0];
                sub_613AC((uint64_t)__p, (unsigned int *)(v11 + 32));
                int v31 = v42;
                if (v29 < 0) {
                  int v31 = v30;
                }
                __int16 v32 = __p;
                if (v41 < 0) {
                  __int16 v32 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136316162;
                unint64_t v45 = "VirtualAudio_DevicePropertyCache.cpp";
                __int16 v46 = 1024;
                int v47 = 255;
                __int16 v48 = 2080;
                __int128 v49 = v31;
                __int16 v50 = 1024;
                int v51 = v26;
                __int16 v52 = 2080;
                __int16 v53 = v32;
                _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' (%d) adding listener for property '%s'.",  buf,  0x2Cu);
                if (v41 < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v10 = a1 + 88;
                int v8 = (void *)(a1 + 24);
                if (v43 < 0) {
                  operator delete(v42[0]);
                }
              }
            }
          }

          char v23 = 1;
        }

        else
        {
          char v23 = 0;
        }

        *(_BYTE *)(v11 + 48) = v23;
LABEL_38:
        if (v12)
        {
          unsigned int v33 = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }

        int v9 = (void *)v9[1];
      }

      while (v9 != v8);
    }

    *(void *)(a1 + 16) = a2;
    uint64_t v5 = v37;
    int v7 = v38;
  }

  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }
}

void sub_229F34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a13 + 24LL))(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_229FB0(uint64_t a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48LL))(*(void *)(a1 + 8)) & 1) == 0)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        int v7 = "VirtualAudio_DevicePropertyCache.cpp";
        __int16 v8 = 1024;
        int v9 = 407;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Cache mutex not held by current thread.",  (uint8_t *)&v6,  0x12u);
      }
    }
  }

  sub_E30AC( a2,  *(_DWORD *)(*(void *)a1 + 8LL),  -1431655765 * ((*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2),  *(int **)(a1 + 56));
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
}

uint64_t sub_22A0C8(void *a1)
{
  *a1 = off_4772D0;
  sub_7A768((uint64_t)(a1 + 98));
  return sub_231850((uint64_t)a1);
}

void sub_22A0FC(void *a1)
{
  *a1 = off_4772D0;
  sub_7A768((uint64_t)(a1 + 98));
  uint64_t v2 = (void *)sub_231850((uint64_t)a1);
  operator delete(v2);
}

uint64_t sub_22A134(os_unfair_lock_s *a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void))(*(void *)&a1->_os_unfair_lock_opaque + 96LL))( a1,  1LL,  0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 112LL))(v4, v6);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_99578(a1, a2);
    if (!(_DWORD)result)
    {
      *(double *)int v6 = a2;
      return (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 144LL))(v4, v6);
    }
  }

  return result;
}

uint64_t sub_22A1B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 208);
  if (!result) {
    return *(void *)(*(void *)(*(void *)(a1 + 432) + 24LL) + 16LL);
  }
  return result;
}

uint64_t sub_22A1D8( uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, double *a7, uint64_t a8)
{
  if (!*(void *)(a1 + 456))
  {
    unsigned int v40 = (os_log_t *)sub_138E8(13);
    char v41 = *v40;
    if (*v40)
    {
      if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Broadcast.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 334;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The client IO proc must exist for IO to run.",  (uint8_t *)&buf,  0x12u);
      }
    }
  }

  uint64_t v11 = *(_BYTE **)(a1 + 664);
  unint64_t v12 = *(_BYTE **)(a1 + 672);
  uint64_t v13 = v11;
  if (v11 != v12)
  {
    while (*v13 != 1)
    {
      if (++v13 == v12)
      {
        uint64_t v13 = *(_BYTE **)(a1 + 672);
        break;
      }
    }
  }

  uint64_t v14 = sub_45C8(a1 + 688, 1, 0);
  uint64_t v15 = v14;
  uint64_t v16 = ((_DWORD)v13 - (_DWORD)v11);
  uint64_t v17 = *(void *)(v14 + 192);
  BOOL v18 = (*(_BYTE *)(v17 + 448) || *(void *)(v17 + 584) || *(void *)(v17 + 672))
     && *(_DWORD *)(v14 + 8) == 1819304813;
  if (v12 == v13) {
    uint64_t v16 = 0LL;
  }
  uint64_t v58 = v16;
  unint64_t v19 = &a6[4 * v16];
  uint64_t v21 = v19 + 3;
  unsigned int v20 = v19[3];
  UInt32 v64 = v20 / *(_DWORD *)(v14 + 64);
  unint64_t v22 = *(unsigned int **)(a1 + 752);
  uint64_t v23 = *(void *)(a1 + 712);
  outOutputData = *(AudioBufferList **)(v23 + 160);
  char v24 = *(AudioBufferList **)(v23 + 176);
  inInputData = v24;
  int v66 = outOutputData;
  if (v18)
  {
    uint64_t v25 = *v22;
    if ((_DWORD)v25)
    {
      int v26 = *(_DWORD *)(v14 + 24) * v64;
      unint64_t v27 = (int *)(v22 + 3);
      do
      {
        *unint64_t v27 = v26;
        v27 += 4;
        --v25;
      }

      while (v25);
    }

    uint64_t v28 = sub_45C8(a1 + 688, 1, 0);
    uint64_t mNumberBuffers = outOutputData->mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
    {
      int v30 = *(_DWORD *)(v28 + 104) * v64;
      p_mDataByteSize = &outOutputData->mBuffers[0].mDataByteSize;
      do
      {
        _DWORD *p_mDataByteSize = v30;
        p_mDataByteSize += 4;
        --mNumberBuffers;
      }

      while (mNumberBuffers);
    }

    uint64_t v32 = sub_45C8(a1 + 688, 1, 0);
    uint64_t v33 = v24->mNumberBuffers;
    if ((_DWORD)v33)
    {
      int v34 = *(_DWORD *)(v32 + 144) * v64;
      unint64_t v35 = &v24->mBuffers[0].mDataByteSize;
      do
      {
        _DWORD *v35 = v34;
        v35 += 4;
        --v33;
      }

      while (v33);
    }
  }

  else
  {
    *((void *)v22 + 2) = *((void *)v19 + 2);
    v22[3] = v20;
  }

  if (*(_BYTE *)(a1 + 104))
  {
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    *(_BYTE *)(a1 + 104) = 0;
  }

  unsigned int v36 = v22[3];
  if (a4 && *(_BYTE *)(a1 + 364) && *a4)
  {
    unint64_t v37 = 0LL;
    int v38 = (void **)(a4 + 4);
    do
    {
      bzero(*v38, *((unsigned int *)v38 - 1));
      ++v37;
      v38 += 2;
    }

    while (v37 < *a4);
  }

  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, unsigned int *, double *, void))(a1 + 456))( a8,  a3,  a4,  a5,  v22,  a7,  *(void *)(a1 + 464));
  if (!v18) {
    goto LABEL_38;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 448LL))(a1) & 1) == 0)
  {
    bzero(*(void **)&a6[4 * v58 + 4], *v21);
LABEL_38:
    int v39 = 0;
    goto LABEL_39;
  }

  int v39 = 1;
LABEL_39:
  uint64_t v42 = *(OpaqueAudioConverter ***)(v15 + 192);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 448LL))(a1) || v22[3])
  {
    *(_DWORD *)(a1 + 632) = 0;
    goto LABEL_42;
  }

  unsigned int v45 = *(_DWORD *)(a1 + 632);
  if (v45 >> 6 >= 0x177)
  {
    if (v45 <= v64 + 24000)
    {
      sub_3057C((uint64_t)v42);
      *(_DWORD *)(a1 + 632) += 2 * v64;
    }

    goto LABEL_72;
  }

  *(_DWORD *)(a1 + 632) = v45 + v64;
  if ((v39 & 1) == 0)
  {
LABEL_72:
    if ((*(_BYTE *)(a1 + 80) & 4) != 0)
    {
      unint64_t v54 = *v22;
      if ((_DWORD)v54)
      {
        uint64_t v55 = 0LL;
        do
        {
          v22[v55 + 3] = v36;
          v55 += 4LL;
        }

        while (4 * v54 != v55);
        unint64_t v56 = 0LL;
        AudioComponentDescription v57 = (void **)(v22 + 4);
        do
        {
          if (*v57)
          {
            bzero(*v57, *((unsigned int *)v57 - 1));
            unint64_t v54 = *v22;
          }

          ++v56;
          v57 += 2;
        }

        while (v56 < v54);
      }
    }

    bzero(*(void **)&a6[4 * v58 + 4], *v21);
    int v39 = 0;
    goto LABEL_42;
  }

  unint64_t v50 = *v22;
  if ((_DWORD)v50)
  {
    uint64_t v51 = 0LL;
    do
    {
      v22[v51 + 3] = v36;
      v51 += 4LL;
    }

    while (4 * v50 != v51);
    unint64_t v52 = 0LL;
    __int16 v53 = (void **)(v22 + 4);
    int v39 = 1;
    do
    {
      if (*v53)
      {
        bzero(*v53, *((unsigned int *)v53 - 1));
        unint64_t v50 = *v22;
      }

      ++v52;
      v53 += 2;
    }

    while (v52 < v50);
  }

  else
  {
    int v39 = 1;
  }

uint64_t sub_22A7FC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[97];
  if (!v10) {
    return sub_28E6C((uint64_t)a1, a2, a3, a4, a5);
  }
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v10 + 96LL))(v10, 0LL, 0LL);
  (*(void (**)(uint64_t, __int128 *))(*(void *)v11 + 112LL))(v11, &v22);
  *(void *)&__int128 v22 = (*(double (**)(void *))(*a1 + 104LL))(a1);
  double v12 = sub_28F84((uint64_t)a1, a2);
  __int128 v13 = *(_OWORD *)(a5 + 16);
  __int128 v25 = *(_OWORD *)a5;
  __int128 v26 = v13;
  *(void *)unint64_t v27 = *(void *)(a5 + 32);
  *(_OWORD *)&v27[8] = v22;
  *(_OWORD *)&v27[24] = v23;
  *(void *)&v27[40] = v24;
  uint64_t v14 = operator new(0x50uLL);
  std::string __p = v14;
  uint64_t v21 = v14 + 5;
  __int128 v15 = *(_OWORD *)&v27[16];
  v14[2] = *(_OWORD *)v27;
  v14[3] = v15;
  v14[4] = *(_OWORD *)&v27[32];
  __int128 v16 = v26;
  *uint64_t v14 = v25;
  v14[1] = v16;
  unsigned int v20 = v14 + 5;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a3 + 136LL))( a3,  a5,  &__p,  a4,  v12);
  if (__p)
  {
    unsigned int v20 = __p;
    operator delete(__p);
  }

  return v17;
}

void sub_22A9AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22A9D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, void **a6, int a7, uint64_t a8)
{
  *(void *)unint64_t v106 = v106;
  *(void *)&v106[8] = v106;
  *(void *)&v106[16] = 0LL;
  sub_22B86C(&v103, a3);
  if (a7)
  {
    unint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = v11 + 16;
    uint64_t v13 = *(void *)(v11 + 24);
    if (v13 != v11 + 16)
    {
      do
      {
        BOOL v14 = sub_2C7B94(*(void *)(v13 + 16));
        __int128 v15 = *(unsigned int (**)(void))(**(void **)(v13 + 16) + 88LL);
        if (v14)
        {
          if (!v15())
          {
            v85 = (os_log_t *)sub_138E8(13);
            unint64_t v86 = *v85;
            if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioBufferList buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Broadcast.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 136;
              _os_log_impl( &dword_0,  v86,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Precondition failure.");
          }

          __int128 v16 = v101;
          if (v101 >= v102)
          {
            unint64_t v20 = (unint64_t)v100;
            int64_t v21 = v101 - (_BYTE *)v100;
            uint64_t v22 = v101 - (_BYTE *)v100 + 1;
            if (v22 < 0) {
              sub_7A87C();
            }
            unint64_t v23 = v102 - (_BYTE *)v100;
            if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v24 = v22;
            }
            if (v24) {
              __int128 v25 = (char *)operator new(v24);
            }
            else {
              __int128 v25 = 0LL;
            }
            __int128 v26 = &v25[v21];
            unint64_t v27 = &v25[v21];
            *unint64_t v27 = 2;
            uint64_t v17 = v27 + 1;
            if (v16 != (char *)v20)
            {
              uint64_t v28 = &v16[~v20];
              do
              {
                char v29 = *--v16;
                (v28--)[(void)v25] = v29;
              }

              while (v16 != (char *)v20);
              __int128 v26 = v25;
            }

            unint64_t v100 = v26;
            uint64_t v102 = &v25[v24];
            if (v20) {
              operator delete((void *)v20);
            }
          }

          else
          {
            *uint64_t v101 = 2;
            uint64_t v17 = v16 + 1;
          }

          uint64_t v101 = v17;
          int v30 = (*(uint64_t (**)(void, void))(**(void **)(v13 + 16) + 88LL))(*(void *)(v13 + 16), 0LL);
          buf[0] = 0;
          sub_21C230((uint64_t)&v100, v17, (v30 - 1), buf);
        }

        else if (v15())
        {
          BOOL v18 = v101;
          unsigned int v19 = (*(uint64_t (**)(void, void))(**(void **)(v13 + 16) + 88LL))(*(void *)(v13 + 16), 0LL);
          buf[0] = 0;
          sub_21C230((uint64_t)&v100, v18, v19, buf);
        }

        uint64_t v13 = *(void *)(v13 + 8);
      }

      while (v13 != v12);
    }
  }

  else
  {
    unint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    uint64_t v102 = 0LL;
  }

  uint64_t v31 = *(void *)(a3 + 8);
  uint64_t v32 = *(os_unfair_lock_s **)(v31 + 16);
  if (v31 != a3)
  {
    double v33 = 0.0;
    do
    {
      memset(buf, 0, 24);
      uint64_t v34 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v31 + 16) + 96LL))( *(void *)(v31 + 16),  1LL,  0LL);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v34 + 96LL))(v34, buf);
      for (uint64_t i = *(void *)buf; i != *(void *)&buf[8]; i += 56LL)
      {
        if (v33 == 0.0 || *(double *)(i + 48) > v33)
        {
          uint64_t v32 = *(os_unfair_lock_s **)(v31 + 16);
          double v33 = *(double *)(i + 48);
        }
      }

      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      uint64_t v31 = *(void *)(v31 + 8);
    }

    while (v31 != a3);
  }

  buf[0] = 0;
  _BYTE buf[24] = 0;
  _BYTE buf[32] = 0;
  char v105 = 0;
  sub_230800((void *)a1, a2, (uint64_t)v106, (uint64_t)&v103, (uint64_t)&v100, a4, a5, 0, a6, v32, a8, (__int128 *)buf);
  if (v100) {
    operator delete(v100);
  }
  sub_68314(&v103);
  sub_68314(v106);
  uint64_t v37 = 0LL;
  *(void *)a1 = off_4772D0;
  *(_BYTE *)(a1 + 768) = a7;
  if (a7)
  {
    uint64_t v38 = *(void *)(a3 + 8);
    if (v38 != a3)
    {
      uint64_t v37 = 0LL;
      do
      {
        BOOL v39 = sub_2C7B94(*(void *)(v38 + 16));
        uint64_t v41 = v38 + 8;
        uint64_t v38 = *(void *)(v38 + 8);
        uint64_t v40 = *(void *)(v41 + 8);
        if (v39) {
          uint64_t v37 = v40;
        }
      }

      while (v38 != a3);
    }
  }

  *(void *)(a1 + 776) = v37;
  sub_22B86C(&v100, a3);
  uint64_t v42 = (char *)operator new(0xF0uLL);
  uint64_t v43 = v42;
  *((void *)v42 + 1) = 0LL;
  *((void *)v42 + 2) = 0LL;
  *((void *)v42 + 3) = off_4820F0;
  uint64_t v97 = (uint64_t)(v42 + 24);
  *(void *)uint64_t v42 = off_477558;
  *((_OWORD *)v42 + 2) = 0u;
  int v44 = (os_unfair_lock_s *)(v42 + 32);
  *((void *)v42 + 12) = 0LL;
  *((_OWORD *)v42 + 3) = 0u;
  *((_OWORD *)v42 + 4) = 0u;
  *((_OWORD *)v42 + 5) = 0u;
  *((_DWORD *)v42 + memset(buf, 0, 24) = 1065353216;
  if (!v102)
  {
    int8x16_t v88 = (os_log_t *)sub_138E8(13);
    unint64_t v89 = *v88;
    if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 201;
      _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inPhysicalDeviceList is empty.",  buf,  0x12u);
    }

    unint64_t v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v90, "inPhysicalDeviceList is empty.");
  }

  *((void *)v42 + 13) = v42 + 104;
  *((void *)v42 + 14) = v42 + 104;
  *((void *)v42 + 15) = 0LL;
  unsigned int v45 = (os_log_t *)sub_138E8(22);
  uint64_t v46 = *v45;
  if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 205;
    _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Building StreamList for AggregateStream_Broadcast:",  buf,  0x12u);
  }

  for (unsigned int j = v101; j != (char *)&v100; unsigned int j = (char *)*((void *)j + 1))
  {
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)j + 2) + 88LL))(*((void *)j + 2), 1LL) != 1)
    {
      unint64_t v79 = (os_log_t *)sub_138E8(13);
      __n128 v80 = *v79;
      if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
      {
        int v81 = (*(uint64_t (**)(void))(**((void **)j + 2) + 120LL))(*((void *)j + 2));
        (*(void (**)(_BYTE *__return_ptr))(**((void **)j + 2) + 128LL))(v106);
        uint64_t v82 = *(void *)v106;
        int v83 = (*(uint64_t (**)(void, uint64_t))(**((void **)j + 2) + 88LL))(*((void *)j + 2), 1LL);
        *(_DWORD *)AudioBufferList buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 212;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v81;
        *(_WORD *)&_BYTE buf[24] = 2112;
        *(void *)&buf[26] = v82;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v83;
        _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): AggregateStream_Broadcasts support only PhysicalDevices with a singl e output stream. PhysicalDevice ID %u (uid:  \\%@\\) has %u streams.",  buf,  0x28u);
        sub_19DFC((uint64_t)v106);
      }

      unint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error( v84,  "AggregateStream_Broadcasts support only PhysicalDevices with a single output stream. PhysicalDevice ID %u (uid: %@) has %u streams.");
    }

    uint64_t v48 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)j + 2) + 96LL))( *((void *)j + 2),  1LL,  0LL);
    __int128 v49 = operator new(0x18uLL);
    v49[1] = v43 + 104;
    v49[2] = v48;
    uint64_t v50 = *((void *)v43 + 13);
    void *v49 = v50;
    *(void *)(v50 + 8) = v49;
    *((void *)v43 + 13) = v49;
    ++*((void *)v43 + 15);
    uint64_t v51 = (os_log_t *)sub_138E8(22);
    unint64_t v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v53 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)j + 2) + 96LL))( *((void *)j + 2),  1LL,  0LL);
      int v54 = (*(uint64_t (**)(void))(**((void **)j + 2) + 120LL))(*((void *)j + 2));
      (*(void (**)(_BYTE *__return_ptr))(**((void **)j + 2) + 128LL))(v106);
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 215;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&buf[20] = v53;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)&buf[30] = v54;
      *(_WORD *)&buf[34] = 2112;
      *(void *)&buf[36] = *(void *)v106;
      _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Added stream %p from PhysicalDevice ID %u (uid: %@).",  buf,  0x2Cu);
      sub_19DFC((uint64_t)v106);
    }
  }

  sub_33B5B4((void **)v43 + 16, a1, 0, 0x70667461u);
  sub_33B5B4((void **)v43 + 19, a1, 0, 0x73666D61u);
  sub_90418((void *)v43 + 22, (uint64_t)&v100);
  *((void *)v43 + 25) = 0LL;
  *((void *)v43 + 26) = 0LL;
  *((void *)v43 + 27) = 0LL;
  *((void *)v43 + 28) = a1;
  *((_DWORD *)v43 + 58) = sub_33C0B0(a1, 0);
  uint64_t v55 = *((void *)v43 + 16);
  uint64_t v56 = *((void *)v43 + 17);
  if (v55 == v56)
  {
    float64x2_t v91 = (os_log_t *)sub_138E8(13);
    float64x2_t v92 = *v91;
    if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v106 = 136315394;
      *(void *)&v106[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 90;
      _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inAggregateStream_BroadcastFormatList is empty.",  v106,  0x12u);
    }

    unint64_t v93 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v93, "inAggregateStream_BroadcastFormatList is empty.");
  }

  int v57 = 0;
  double v58 = *(double *)(v55 + 48);
  uint64_t v59 = *(void *)(v55 + 32);
  __int128 v60 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)AudioBufferList buf = *(_OWORD *)v55;
  *(_OWORD *)&buf[16] = v60;
  *(void *)&_BYTE buf[32] = v59;
  uint64_t v61 = (_OWORD *)((unint64_t)buf | 0xC);
  unsigned int v62 = HIDWORD(v60);
  int v63 = *(_DWORD *)&buf[8];
  while (1)
  {
    int v64 = *(_DWORD *)(v55 + 8);
    *(_OWORD *)unint64_t v106 = *(_OWORD *)(v55 + 12);
    unsigned int v65 = *(_DWORD *)(v55 + 28);
    uint64_t v66 = *(void *)(v55 + 32);
    double v68 = *(double *)(v55 + 40);
    double v67 = *(double *)(v55 + 48);
    if (v67 >= v58)
    {
      BOOL v69 = v65 >= v62 && v64 == 1819304813;
      BOOL v70 = !v69;
      if (((v70 | v57) & 1) == 0)
      {
        *uint64_t v61 = *(_OWORD *)(v55 + 12);
        double v58 = v67;
        uint64_t v59 = v66;
        unsigned int v62 = v65;
        int v63 = 1819304813;
      }
    }

    if (v68 > 44100.0) {
      goto LABEL_83;
    }
    if (v67 < 44100.0 || v64 != 1819304813) {
      goto LABEL_83;
    }
    *uint64_t v61 = *(_OWORD *)v106;
    if (v65 == 2) {
      break;
    }
    int v57 = 1;
    double v58 = 44100.0;
    uint64_t v59 = v66;
    unsigned int v62 = v65;
    int v63 = 1819304813;
LABEL_83:
    v55 += 56LL;
    if (v55 == v56)
    {
      *(_DWORD *)&buf[8] = v63;
      *(_DWORD *)&_BYTE buf[28] = v62;
      *(void *)&_BYTE buf[32] = v59;
      *(double *)AudioBufferList buf = v58;
      goto LABEL_86;
    }
  }

  *(_DWORD *)&buf[8] = 1819304813;
  *(_DWORD *)&_BYTE buf[28] = 2;
  *(void *)&_BYTE buf[32] = v66;
  *(void *)AudioBufferList buf = 0x40E5888000000000LL;
LABEL_86:
  uint64_t v72 = sub_138E8(22);
  if ((*(_BYTE *)(v72 + 8) & 1) != 0)
  {
    __int16 v73 = *(os_log_s **)v72;
    if (*(void *)v72)
    {
      if (os_log_type_enabled(*(os_log_t *)v72, OS_LOG_TYPE_DEBUG))
      {
        sub_2CC00(&v103, (uint64_t)buf);
        unint64_t v74 = (v103.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v103 : (std::string *)v103.__r_.__value_.__r.__words[0];
        *(_DWORD *)unint64_t v106 = 136315650;
        *(void *)&v106[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&v106[12] = 1024;
        *(_DWORD *)&v106[14] = 136;
        *(_WORD *)&v106[18] = 2080;
        *(void *)&v106[20] = v74;
        _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AggregateStream_Broadcast::InitializeCurrentPhysicalFormat format is:%s",  v106,  0x1Cu);
      }
    }
  }

  (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v97 + 152LL))(v97, buf, 1885762592LL);
  sub_CC160(v97);
  __int16 v75 = (os_log_t *)sub_138E8(22);
  OSStatus v76 = *v75;
  if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_DEBUG))
  {
    sub_23FE8((uint64_t)&v103, v44);
    if ((v103.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v77 = &v103;
    }
    else {
      uint64_t v77 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)unint64_t v106 = 136315650;
    *(void *)&v106[4] = "AggregateStream_Broadcast.cpp";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 182;
    *(_WORD *)&v106[18] = 2080;
    *(void *)&v106[20] = v77;
    _os_log_impl(&dword_0, v76, OS_LOG_TYPE_DEBUG, "%25s:%-5d AggregateStream created: %s.", v106, 0x1Cu);
  }

  *(void *)(a1 + 784) = v97;
  *(void *)(a1 + 792) = v43;
  sub_68314(&v100);
  return a1;
}

void sub_22B5A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26)
{
  uint64_t v34 = *v32;
  os_unfair_lock_s *v32 = 0LL;
  if (v34) {
    operator delete(v34);
  }
  sub_68314(v30);
  unint64_t v35 = *v29;
  if (*v29)
  {
    v26[6].__shared_weak_owners_ = (uint64_t)v35;
    operator delete(v35);
  }

  unsigned int v36 = *v28;
  if (*v28)
  {
    v26[5].__shared_weak_owners_ = (uint64_t)v36;
    operator delete(v36);
  }

  sub_68314(v27);
  sub_F3008(a15);
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v37);
  sub_68314(&__p);
  sub_231850(a16);
  _Unwind_Resume(a1);
}

void *sub_22B748(uint64_t a1, uint64_t *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = operator new(0x2E0uLL);
  uint64_t v22 = 0LL;
  unint64_t v23 = 0LL;
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  if (v13)
  {
    BOOL v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      __int128 v15 = v14;
      uint64_t v16 = *a2;
      p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      uint64_t v22 = v16;
      unint64_t v23 = v14;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    else
    {
      uint64_t v22 = 0LL;
      unint64_t v23 = 0LL;
    }
  }

  sub_2805B4((uint64_t)v12, &v22, a1, 0LL, a3, a4, a5, a6);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_27A3CC((uint64_t)v12);
  return v12;
}

void sub_22B84C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void *sub_22B86C(void *result, uint64_t a2)
{
  *uint64_t result = result;
  result[1] = result;
  result[2] = 0LL;
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 1LL;
    int v6 = result;
    do
    {
      uint64_t result = operator new(0x18uLL);
      uint64_t v7 = *(void *)(v2 + 16);
      result[1] = v4;
      result[2] = v7;
      *uint64_t result = v6;
      v6[1] = result;
      void *v4 = result;
      v4[2] = v5;
      uint64_t v2 = *(void *)(v2 + 8);
      ++v5;
      int v6 = result;
    }

    while (v2 != a2);
  }

  return result;
}

void sub_22B8EC(_Unwind_Exception *a1)
{
}

void sub_22B900(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_477558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22B910(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_477558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_22B930(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::string *sub_22B940(std::string **a1, const void **a2, uint64_t a3)
{
  else {
    size_t v6 = (size_t)a2[1];
  }
  sub_D0924((uint64_t)__p, v6 + 2);
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    else {
      __int16 v8 = *a2;
    }
    memmove(v7, v8, v6);
  }

  strcpy((char *)v7 + v6, ": ");
  if ((v16 & 0x80u) == 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v10 = v16;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  std::string::append(*a1, (const std::string::value_type *)v9, v10);
  if (*(_BYTE *)(a3 + 24))
  {
    int v11 = *(char *)(a3 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a3;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a3 + 8);
    }
  }

  else
  {
    uint64_t v12 = "unspecified";
    std::string::size_type v13 = 11LL;
  }

  return std::string::append(*a1, v12, v13);
}

void sub_22BA48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_22BA64(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      else {
        size_t v6 = (char *)a2[4];
      }
      sub_195860(v13, v6);
      sub_48E98(__p, v13[1]);
      if ((v15 & 0x80u) == 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        std::string::size_type v8 = v15;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      sub_39FD8(v13);
      int v9 = (void *)a2[1];
      if (v9)
      {
        do
        {
          std::string::size_type v10 = v9;
          int v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          std::string::size_type v10 = (void *)a2[2];
          BOOL v11 = *v10 == (void)a2;
          a2 = v10;
        }

        while (!v11);
      }

      if (v10 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v10;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_22BB8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_22BBD4()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

uint64_t sub_22BC0C(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  int v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + memset(buf, 0, 24) = 0u;
  *(void *)(a1 + 56) = 0LL;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_148C54((char **)(a1 + 16), Count);
    sub_148C54(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }

  return a1;
}

double sub_22BC8C(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x8000000000000000LL) != 0 || (uint64_t v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(exception, "DictionaryRef_iterator iterator out of range.");
  }

  sub_48100((uint64_t)&v13, *(const __CFString **)(v4 + 8 * v2));
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[5];
  std::string::size_type v8 = *(const void **)(v7 + 8 * v6);
  if (v8)
  {
    CFRetain(*(CFTypeRef *)(v7 + 8 * v6));
    sub_3617C(&v12, v8);
    uint64_t v9 = v12;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  double result = *(double *)&v13;
  *(_OWORD *)a1 = v13;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + memset(buf, 0, 24) = v9;
  return result;
}

void sub_22BD48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_22BD78(uint64_t a1, uint64_t a2)
{
  xmmword_4916E0 = 0u;
  *(_OWORD *)&qword_4916F0 = 0u;
  dword_491700 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0LL;
    uint64_t v5 = a1 + 32 * a2;
    uint64_t v6 = &qword_491000;
    uint64_t v7 = &qword_491000;
    while (1)
    {
      unint64_t v8 = sub_7ED44(v3);
      unint64_t v9 = v8;
      unint64_t v10 = v6[221];
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v8;
          if (v8 >= v10) {
            unint64_t v2 = v8 % v10;
          }
        }

        else
        {
          unint64_t v2 = (v10 - 1) & v8;
        }

        __int128 v13 = *(unsigned __int8 ***)(xmmword_4916E0 + 8 * v2);
        if (v13)
        {
          uint64_t v14 = *v13;
          if (*v13)
          {
            while (1)
            {
              unint64_t v15 = *((void *)v14 + 1);
              if (v15 == v9)
              {
                if (sub_7F194(v14 + 16, (unsigned __int8 *)v3))
                {
                  uint64_t v6 = &qword_491000;
                  uint64_t v7 = &qword_491000;
                  goto LABEL_80;
                }
              }

              else
              {
                if (v12 > 1)
                {
                  if (v15 >= v10) {
                    v15 %= v10;
                  }
                }

                else
                {
                  v15 &= v10 - 1;
                }

                if (v15 != v2)
                {
LABEL_19:
                  uint64_t v6 = &qword_491000;
                  break;
                }
              }

              uint64_t v14 = *(unsigned __int8 **)v14;
              if (!v14) {
                goto LABEL_19;
              }
            }
          }
        }

        uint64_t v7 = &qword_491000;
      }

      unsigned __int8 v16 = operator new(0x30uLL);
      *unsigned __int8 v16 = 0LL;
      v16[1] = v9;
      uint64_t v17 = v16 + 2;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_24054(v17, *(void **)v3, *(void *)(v3 + 8));
        uint64_t v4 = v7[223];
      }

      else
      {
        __int128 v18 = *(_OWORD *)v3;
        v16[4] = *(void *)(v3 + 16);
        *(_OWORD *)uint64_t v17 = v18;
      }

      v16[5] = *(void *)(v3 + 24);
      float v19 = (float)(unint64_t)(v4 + 1);
LABEL_70:
      uint64_t v35 = xmmword_4916E0;
      unsigned int v36 = *(void **)(xmmword_4916E0 + 8 * v2);
      if (v36)
      {
        *unsigned __int8 v16 = *v36;
      }

      else
      {
        *unsigned __int8 v16 = qword_4916F0;
        qword_4916F0 = (uint64_t)v16;
        *(void *)(v35 + 8 * v2) = &qword_4916F0;
        if (!*v16) {
          goto LABEL_79;
        }
        unint64_t v37 = *(void *)(*v16 + 8LL);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v37 >= v10) {
            v37 %= v10;
          }
        }

        else
        {
          v37 &= v10 - 1;
        }

        unsigned int v36 = (void *)(xmmword_4916E0 + 8 * v37);
      }

      void *v36 = v16;
LABEL_79:
      uint64_t v4 = v7[223] + 1;
      v7[223] = v4;
LABEL_80:
      v3 += 32LL;
      if (v3 == v5) {
        return;
      }
    }

    BOOL v20 = (v10 & (v10 - 1)) != 0;
    if (v10 < 3) {
      BOOL v20 = 1LL;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v19 / *(float *)&dword_491700);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }

    unint64_t v10 = v6[221];
    if (*(void *)&prime > v10) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)qword_4916F8 / *(float *)&dword_491700);
      if (v10 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }

      else
      {
        uint64_t v32 = 1LL << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }

      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = v6[221];
      }

      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          size_t v24 = operator new(8LL * *(void *)&prime);
          __int128 v25 = (void *)xmmword_4916E0;
          *(void *)&xmmword_4916E0 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0LL;
          v6[221] = (uint64_t)prime;
          do
            *(void *)(xmmword_4916E0 + 8 * v26++) = 0LL;
          while (*(void *)&prime != v26);
          unint64_t v27 = (void **)qword_4916F0;
          if (qword_4916F0)
          {
            unint64_t v28 = *(void *)(qword_4916F0 + 8);
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }

            else
            {
              v28 &= *(void *)&prime - 1LL;
            }

            *(void *)(xmmword_4916E0 + 8 * v28) = &qword_4916F0;
            for (i = *v27; i; unint64_t v28 = v34)
            {
              unint64_t v34 = i[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(void *)&prime) {
                  v34 %= *(void *)&prime;
                }
              }

              else
              {
                v34 &= *(void *)&prime - 1LL;
              }

              if (v34 != v28)
              {
                if (!*(void *)(xmmword_4916E0 + 8 * v34))
                {
                  *(void *)(xmmword_4916E0 + 8 * v34) = v27;
                  goto LABEL_61;
                }

                *unint64_t v27 = (void *)*i;
                *uint64_t i = **(void **)(xmmword_4916E0 + 8 * v34);
                **(void **)(xmmword_4916E0 + 8 * v34) = i;
                uint64_t i = v27;
              }

              unint64_t v34 = v28;
LABEL_61:
              unint64_t v27 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }

          unint64_t v10 = (unint64_t)prime;
          goto LABEL_65;
        }

        uint64_t v38 = (void *)xmmword_4916E0;
        *(void *)&xmmword_4916E0 = 0LL;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0LL;
        v6[221] = 0LL;
      }
    }

void sub_22C1F8(_Unwind_Exception *a1)
{
}

void sub_22C22C(_BYTE *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  uint64_t v4 = sub_D13C4(a2, __s);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }

  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t sub_22C2B0(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + memset(buf, 0, 24) = 0u;
  *(void *)(a1 + 56) = 0LL;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_148C54((char **)(a1 + 16), Count);
    sub_148C54(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }

  return a1;
}

uint64_t sub_22C330(const __CFDictionary *a1, const UInt8 *a2)
{
  unint64_t v2 = (const __CFBoolean *)sub_D13C4(a1, a2);
  if (v2)
  {
    LOWORD(v2) = sub_476EC(v2);
    int v3 = BYTE1(v2);
  }

  else
  {
    int v3 = 0;
  }

  return v2 | (v3 << 8);
}

uint64_t sub_22C360(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_199E0C(a1 + 16, a2 + 16);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v4 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_24054(v4, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v4 = v5;
  }

  return a1;
}

void sub_22C3D4(_Unwind_Exception *a1)
{
}

uint64_t sub_22C3E8(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_22C428()
{
  unsigned __int8 v0 = (void **)qword_4916F0;
  if (qword_4916F0)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      operator delete(v0);
      unsigned __int8 v0 = v1;
    }

    while (v1);
  }

  unint64_t v2 = (void *)xmmword_4916E0;
  *(void *)&xmmword_4916E0 = 0LL;
  if (v2) {
    operator delete(v2);
  }
}

uint64_t sub_22C48C(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + memset(buf, 0, 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + memset(buf, 0, 24) = v4;
  }

  else
  {
    int v3 = (void *)(a1 + 24);
  }

  *int v3 = 0LL;
  return a1;
}

void *sub_22C4F0(void *a1)
{
  *a1 = &off_484C20;
  unint64_t v2 = a1 + 2;
  int v3 = (void *)a1[5];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    int v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_22C54C(char *__p)
{
  *(void *)std::string __p = &off_484C20;
  unint64_t v2 = __p + 16;
  int v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    int v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *sub_22C5A8(uint64_t a1)
{
  unint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &off_484C20;
  v2[1] = v3;
  sub_82AF0((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_22C5EC(_Unwind_Exception *a1)
{
}

uint64_t sub_22C600(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &off_484C20;
  a2[1] = v2;
  return sub_82AF0((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_22C620(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  double result = *(void **)(a1 + 40);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    double result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_22C654(char *__p)
{
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

BOOL sub_22C6A4(uint64_t a1, void *a2)
{
  int v3 = (*(uint64_t (**)(void, char *))(a1 + 8))(*a2, &v6);
  if (!v6) {
    return 0LL;
  }
  int v7 = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    sub_82CEC();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v4 + 48LL))(v4, &v7);
  return v6 != 0;
}

void sub_22C714(uint64_t a1)
{
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)a1 = 1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22C764(std::string *a1, int *a2)
{
  uint64_t v4 = std::string::append(&v37, ", ApplyNonStereoHFPCulling: ", 0x1CuLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v36, *((unsigned __int8 *)a2 + 4));
  if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v6 = &v36;
  }
  else {
    char v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v36.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  unint64_t v8 = std::string::append(&v38, (const std::string::value_type *)v6, size);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v10 = std::string::append(&v39, ", Disallowed port: ", 0x13uLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  double v33 = 0LL;
  unint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v12 && (double v33 = std::__shared_weak_count::lock(v12)) != 0LL) {
    __int128 v13 = (const void *)*((void *)a2 + 1);
  }
  else {
    __int128 v13 = 0LL;
  }
  snprintf(__str, 0x13uLL, "%p", v13);
  sub_7D084(__p, __str);
  if ((v35 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v35 & 0x80u) == 0) {
    std::string::size_type v15 = v35;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  unsigned __int8 v16 = std::string::append(&v40, (const std::string::value_type *)v14, v15);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v18 = std::string::append(&v41, ", Allowed port: ", 0x10uLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v20 = (std::__shared_weak_count *)*((void *)a2 + 4);
  if (v20)
  {
    unint64_t v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      unint64_t v22 = (const void *)*((void *)a2 + 3);
      goto LABEL_22;
    }
  }

  else
  {
    unint64_t v21 = 0LL;
  }

  unint64_t v22 = 0LL;
LABEL_22:
  snprintf(__s, 0x13uLL, "%p", v22);
  sub_7D084(__str, __s);
  if ((v49 & 0x80u) == 0) {
    unint64_t v23 = __str;
  }
  else {
    unint64_t v23 = *(char **)__str;
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v24 = v49;
  }
  else {
    std::string::size_type v24 = v48;
  }
  __int128 v25 = std::string::append(&v42, v23, v24);
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v27 = std::string::append(&v43, "}", 1uLL);
  *a1 = *v27;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  if (v33)
  {
    unint64_t v30 = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  for (uint64_t i = 0LL; i != -9; i -= 3LL)
  {
    if (SHIBYTE(v46[i + 2]) < 0) {
      operator delete((void *)v46[i]);
    }
  }

void sub_22CB6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  sub_7A768((uint64_t)&a12);
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  uint64_t v67 = 0LL;
  uint64_t v68 = v65 - 176;
  while (1)
  {
    v67 -= 24LL;
    if (v67 == -72) {
      _Unwind_Resume(a1);
    }
  }

void sub_22CC90()
{
}

void sub_22CC98()
{
}

void sub_22CCA0()
{
}

void sub_22CCA8()
{
  while (1)
  {
    v0 -= 24LL;
    if (v0 == v1 - 176) {
      JUMPOUT(0x22CC88LL);
    }
  }

void sub_22CCD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_22CCE8(uint64_t a1, uint64_t a2)
{
  CFStringRef v8 = CFStringCreateWithCString(0LL, "Speaker Tap Stream Input", 0x600u);
  char v9 = 1;
  memset(v7, 0, sizeof(v7));
  sub_7D084(__p, "");
  sub_F9638(a1, &qword_4918A8, a2, (uint64_t)v13, (uint64_t)v10, (uint64_t)&v8, v7, (__int128 *)__p);
  *(void *)a1 = &off_46FD40;
  *(_WORD *)(a1 + 520) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v7;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)&v8);
  sub_19DFC((uint64_t)&v12);
  sub_19DFC((uint64_t)&v11);
  sub_19DFC((uint64_t)v10);
  *(void *)a1 = &off_477590;
  return a1;
}

void sub_22CDE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_7A668((void ***)&__p);
  sub_19DFC((uint64_t)&a19);
  sub_19DFC((uint64_t)&a25);
  sub_19DFC((uint64_t)&a23);
  sub_19DFC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_22CE4C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_22CE60(os_unfair_lock_s *a1)
{
  uint64_t v2 = operator new(0x50uLL);
  sub_EC558((uint64_t)v2);
  sub_1D5AE0(a1, (uint64_t)v2);
  int v3 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v3, 0);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D55D4((uint64_t *)a1, 1u, qword_491920, (uint64_t)v2);
  sub_1D580C((uint64_t)a1, 1u, qword_491920, (uint64_t)v3);
  sub_F9530((uint64_t)v24, qword_491920);
  uint64_t v4 = (os_log_t *)sub_138E8(17);
  __int128 v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = v26[0];
    uint64_t v7 = v25;
    uint64_t v8 = v24[0];
    (*(void (**)(void **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( __p,  a1);
    if (v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    *(void *)&uint8_t buf[4] = "Device_SystemCapture_Aspen.cpp";
    *(_DWORD *)AudioBufferList buf = 136315906;
    if (v6) {
      uint64_t v9 = v6;
    }
    __int16 v28 = 1024;
    int v29 = 80;
    __int16 v30 = 2112;
    uint64_t v31 = v9;
    __int16 v32 = 2112;
    double v33 = __p[0];
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a system capture output port with name %@ and UID %@",  buf,  0x26u);
    sub_19DFC((uint64_t)__p);
  }

  unint64_t v10 = operator new(0x10uLL);
  *unint64_t v10 = xmmword_403280;
  __p[1] = v10 + 1;
  __p[2] = v10 + 1;
  __p[0] = v10;
  (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v20,  a1);
  memset(v19, 0, sizeof(v19));
  uint64_t v11 = operator new(0x228uLL);
  v11[1] = 0LL;
  void v11[2] = 0LL;
  *uint64_t v11 = off_485B80;
  sub_7D084(buf, "");
  sub_F9638( (uint64_t)(v11 + 3),  &qword_491920,  (uint64_t)a1,  (uint64_t)__p,  (uint64_t)v24,  (uint64_t)v20,  v19,  (__int128 *)buf);
  v11[3] = &off_46FD40;
  *((_WORD *)v11 + 272) = 0;
  if (SBYTE3(v31) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)&__int128 v21 = v11 + 3;
  *((void *)&v21 + 1) = v11;
  sub_AFDAC((uint64_t)&v21, v11 + 13, (uint64_t)(v11 + 3));
  __int128 v22 = v21;
  __int128 v21 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v22);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    __int128 v13 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  std::string::size_type v15 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1))
  {
    unsigned __int8 v16 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  *(void *)AudioBufferList buf = v19;
  sub_7A668((void ***)buf);
  sub_19DFC((uint64_t)v20);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  sub_19DFC((uint64_t)v26);
  sub_19DFC((uint64_t)&v25);
  sub_19DFC((uint64_t)v24);
  return 1LL;
}

void sub_22D190( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_22D244(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886610288)
  {
    int v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      __int128 v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int128 v13 = "Device_SystemCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 103;
      __int16 v16 = 2080;
      unint64_t v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int128 v13 = "Device_SystemCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 104;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_22D3F0(_Unwind_Exception *a1)
{
}

uint64_t sub_22D414(uint64_t result, char a2)
{
  *(_BYTE *)(result + 636) = a2;
  return result;
}

void sub_22D41C(uint64_t a1, _OWORD *a2, UInt32 a3, uint64_t a4)
{
  if (!*(void *)(a1 + 416))
  {
    double v58 = (os_log_t *)sub_138E8(13);
    uint64_t v59 = *v58;
    if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 471;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: No HAL IO Proc has been set.",  (uint8_t *)&buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No HAL IO Proc has been set.");
  }

  if (!*(void *)(a1 + 456))
  {
    uint64_t v61 = (os_log_t *)sub_138E8(13);
    unsigned int v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 472;
      _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mClientIOProc is NULL]: No client IO Proc has been set.",  (uint8_t *)&buf,  0x12u);
    }

    int v63 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v63, "No client IO Proc has been set.");
  }

  char v8 = sub_25D14((unsigned int *)a1, a4, 1);
  if ((v8 & 3) != 0)
  {
    char v9 = v8;
    uint64_t v10 = sub_138E8(16);
    uint64_t v11 = sub_138E8(31);
    if ((_DWORD)a4 == 1 && (v9 & 1) != 0)
    {
      char v12 = 0;
      uint64_t v13 = 0LL;
      *(void *)&buf.mSampleTime = 0x100000002LL;
      uint64_t v14 = *(void *)(v10 + 8);
      while (1)
      {
        uint64_t v15 = *((int *)&buf.mSampleTime + v13);
        char v16 = v12;
        if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
          break;
        }
        char v12 = 1;
        uint64_t v13 = 1LL;
        if ((v16 & 1) != 0) {
          goto LABEL_56;
        }
      }

      if ((v14 & v15) == 0) {
        uint64_t v10 = v11;
      }
LABEL_56:
      uint64_t v55 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEFAULT))
        {
          int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
          LODWORD(buf.mSampleTime) = 136315650;
          *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 535;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v56;
          _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.",  (uint8_t *)&buf,  0x18u);
        }
      }
    }

    else
    {
      char v29 = 0;
      uint64_t v30 = 0LL;
      *(void *)&buf.mSampleTime = 0x100000002LL;
      uint64_t v31 = *(void *)(v10 + 8);
      while (1)
      {
        uint64_t v32 = *((int *)&buf.mSampleTime + v30);
        char v33 = v29;
        if (((v31 & v32) != 0) != ((*(void *)(v11 + 8) & v32) != 0)) {
          break;
        }
        char v29 = 1;
        uint64_t v30 = 1LL;
        if ((v33 & 1) != 0) {
          goto LABEL_45;
        }
      }

      if ((v31 & v32) == 0) {
        uint64_t v10 = v11;
      }
LABEL_45:
      unint64_t v47 = *(os_log_s **)v10;
      if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, a4);
        int v48 = SBYTE3(v100);
        unsigned __int8 v49 = *(_BYTE **)__p;
        int v50 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
        uint64_t v51 = v48 >= 0 ? __p : v49;
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 540;
        WORD1(buf.mRateScalar) = 2080;
        *(void *)((char *)&buf.mRateScalar + 4) = v51;
        WORD2(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v50;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  (uint8_t *)&buf,  0x22u);
        if (SBYTE3(v100) < 0) {
          operator delete(*(void **)__p);
        }
      }

      __int128 v52 = a2[1];
      *(_OWORD *)&buf.mSampleTime = *a2;
      *(_OWORD *)&buf.mRateScalar = v52;
      __int128 v53 = a2[3];
      *(_OWORD *)&buf.mSMPTETime.mSubframes = a2[2];
      *(_OWORD *)&buf.mSMPTETime.mHours = v53;
      if ((_DWORD)a4 == 1) {
        int v54 = 0LL;
      }
      else {
        int v54 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
      }
      uint64_t v57 = AudioDeviceStartAtTime(*(_DWORD *)(a1 + 128), v54, &buf, a3);
      if ((_DWORD)v57)
      {
        sub_25D14((unsigned int *)a1, a4, 0);
        __n128 v80 = (os_log_t *)sub_138E8(16);
        int v81 = *v80;
        if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v94, v57);
          int v82 = v95;
          int v83 = (void **)v94[0];
          sub_23FE8((uint64_t)v92, (os_unfair_lock_t)(a1 + 8));
          unint64_t v84 = v94;
          if (v82 < 0) {
            unint64_t v84 = v83;
          }
          if (v93 >= 0) {
            v85 = v92;
          }
          else {
            v85 = (void **)v92[0];
          }
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "AggregateDevice_Common.cpp";
          __int16 v97 = 1024;
          int v98 = 546;
          __int16 v99 = 2080;
          unint64_t v100 = v84;
          __int16 v101 = 2080;
          uint64_t v102 = v85;
          _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  __p,  0x26u);
          if (v93 < 0) {
            operator delete(v92[0]);
          }
          if (v95 < 0) {
            operator delete(v94[0]);
          }
        }

        unint64_t v86 = (os_log_t *)sub_138E8(13);
        unint64_t v87 = *v86;
        if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common.cpp";
          __int16 v97 = 1024;
          int v98 = 547;
          _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  __p,  0x12u);
        }

        int8x16_t v88 = __cxa_allocate_exception(0x10uLL);
        *(void *)int8x16_t v88 = &off_4865A0;
        v88[2] = v57;
      }
    }
  }

  else
  {
    unint64_t v17 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v17) {
      caulk::concurrent::messenger::drain(v17);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 616LL))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232LL))(a1);
    sub_3067C(a1);
    uint64_t v18 = *(void *)(a1 + 96);
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 24LL))(v18);
    }
    int v19 = sub_326DC(a1);
    if (v19)
    {
      int v64 = v19;
      uint64_t v65 = (os_log_t *)sub_138E8(13);
      uint64_t v66 = *v65;
      if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 492;
        _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (willStartResult): Error calling WillStartIO on physical devices.",  (uint8_t *)&buf,  0x12u);
      }

      uint64_t v67 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v67 = &off_4865A0;
      void v67[2] = v64;
    }

    sub_3280C(a1);
    BOOL v20 = *(double **)(a1 + 136);
    if (v20)
    {
      double v21 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
      sub_1C8B9C(v20, v21);
    }

    uint64_t v22 = sub_138E8(16);
    uint64_t v23 = sub_138E8(31);
    char v24 = 0;
    uint64_t v25 = 0LL;
    *(void *)&buf.mSampleTime = 0x100000002LL;
    uint64_t v26 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v27 = *((int *)&buf.mSampleTime + v25);
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1LL;
      if ((v28 & 1) != 0) {
        goto LABEL_27;
      }
    }

    if ((v26 & v27) == 0) {
      uint64_t v22 = v23;
    }
LABEL_27:
    unint64_t v34 = *(os_log_s **)v22;
    if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, a4);
      int v35 = SBYTE3(v100);
      std::string v36 = *(_BYTE **)__p;
      int v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
      std::string v38 = v35 >= 0 ? __p : v36;
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 499;
      WORD1(buf.mRateScalar) = 2080;
      *(void *)((char *)&buf.mRateScalar + 4) = v38;
      WORD2(buf.mWordClockTime) = 1024;
      *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v37;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Starting IO type %s on AggregateDevice %u.",  (uint8_t *)&buf,  0x22u);
      if (SBYTE3(v100) < 0) {
        operator delete(*(void **)__p);
      }
    }

    __int128 v39 = a2[1];
    *(_OWORD *)&buf.mSampleTime = *a2;
    *(_OWORD *)&buf.mRateScalar = v39;
    __int128 v40 = a2[3];
    *(_OWORD *)&buf.mSMPTETime.mSubframes = a2[2];
    *(_OWORD *)&buf.mSMPTETime.mHours = v40;
    if ((_DWORD)a4 == 1) {
      std::string v41 = 0LL;
    }
    else {
      std::string v41 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    uint64_t v42 = AudioDeviceStartAtTime(*(_DWORD *)(a1 + 128), v41, &buf, a3);
    if ((_DWORD)v42)
    {
      sub_25D14((unsigned int *)a1, a4, 0);
      uint64_t v68 = (os_log_t *)sub_138E8(16);
      BOOL v69 = *v68;
      if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v94, v42);
        int v70 = v95;
        uint64_t v71 = (void **)v94[0];
        sub_23FE8((uint64_t)v92, (os_unfair_lock_t)(a1 + 8));
        uint64_t v72 = v94;
        if (v70 < 0) {
          uint64_t v72 = v71;
        }
        if (v93 >= 0) {
          __int16 v73 = v92;
        }
        else {
          __int16 v73 = (void **)v92[0];
        }
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        __int16 v97 = 1024;
        int v98 = 508;
        __int16 v99 = 2080;
        unint64_t v100 = v72;
        __int16 v101 = 2080;
        uint64_t v102 = v73;
        _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %s on AggregateDevice %s.",  __p,  0x26u);
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        if (v95 < 0) {
          operator delete(v94[0]);
        }
      }

      unint64_t v74 = *(uint64_t ***)(a1 + 136);
      if (v74) {
        sub_1C9B20(v74);
      }
      sub_3C684(a1);
      (*(void (**)(uint64_t))(*(void *)a1 + 552LL))(a1);
      OSStatus v76 = *(void **)(a1 + 240);
      __int16 v75 = *(void **)(a1 + 248);
      while (v76 != v75)
      {
        (*(void (**)(void, uint64_t))(*(void *)*v76 + 40LL))(*v76, 1LL);
        v76 += 2;
      }

      unint64_t v89 = (os_log_t *)sub_138E8(13);
      unint64_t v90 = *v89;
      if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        __int16 v97 = 1024;
        int v98 = 515;
        _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (startResult): Unable to start IO.",  __p,  0x12u);
      }

      float64x2_t v91 = __cxa_allocate_exception(0x10uLL);
      *(void *)float64x2_t v91 = &off_4865A0;
      v91[2] = v42;
    }

    int v43 = sub_3359C(a1);
    uint64_t v44 = *(void *)a1;
    if (v43)
    {
      (*(void (**)(uint64_t, uint64_t))(v44 + 256))(a1, a4);
      uint64_t v77 = (os_log_t *)sub_138E8(13);
      unint64_t v78 = *v77;
      if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        __int16 v97 = 1024;
        int v98 = 522;
        _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (didStartResult): Error calling DidStartIO on physical devices.",  __p,  0x12u);
      }

      unint64_t v79 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v79 = &off_4865A0;
      v79[2] = v43;
    }

    (*(void (**)(uint64_t))(v44 + 544))(a1);
    unsigned int v45 = *(void **)(a1 + 240);
    uint64_t v46 = *(void **)(a1 + 248);
    while (v45 != v46)
    {
      (*(void (**)(void))(*(void *)*v45 + 24LL))(*v45);
      v45 += 2;
    }

    *(_BYTE *)(a1 + 637) = *(_BYTE *)(a1 + 636);
  }

void sub_22DF20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22DF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 696LL;
  if ((_DWORD)a2) {
    uint64_t v6 = 720LL;
  }
  uint64_t v7 = 688LL;
  if ((_DWORD)a2) {
    uint64_t v7 = 712LL;
  }
  int v8 = -991146299 * ((*(void *)(a1 + v6) - *(void *)(a1 + v7)) >> 4);
  if (v8 < 1) {
    return 0LL;
  }
  uint64_t v9 = a1 + 688;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 328LL))(a1, a2);
  int v11 = 1;
  do
  {
    int v12 = v11;
    uint64_t v13 = sub_45C8(v9, a2, v11 - 1);
    int v14 = sub_197A20(*(void *)(v13 + 192), a3);
    ++v11;
    if (v14) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v12 < v8;
    }
  }

  while (v15);
  uint64_t v16 = v14 ? 2003329396LL : 0LL;
  if (!v14) {
    return 0LL;
  }
  do
  {
    uint64_t v17 = sub_45C8(v9, a2, v11 - 2);
    sub_197A20(*(void *)(v17 + 192), v10);
    --v11;
  }

  while (v11 > 1);
  return v16;
}

BOOL sub_22E098(uint64_t a1, int a2)
{
  uint64_t v4 = 696LL;
  if (a2) {
    uint64_t v4 = 720LL;
  }
  uint64_t v5 = 688LL;
  if (a2) {
    uint64_t v5 = 712LL;
  }
  return *(void *)(a1 + v4) != *(void *)(a1 + v5)
      && *(_BYTE *)(*(void *)(sub_45C8(a1 + 688, a2, 0) + 192) + 449LL) != 0;
}

void sub_22E110(uint64_t a1)
{
  unint64_t v16 = sub_1D7A74(a1 + 264);
  uint64_t v2 = (unint64_t *)(a1 + 80);
  if ((sub_230674(&v16, 0, (uint64_t)&v16, 8u, (void *)(a1 + 80)) & 1) == 0)
  {
    int v3 = (os_log_t *)sub_138E8(16);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = 0LL;
      char v15 = 8;
      strcpy((char *)__p, "00000000");
      uint64_t v6 = 7LL;
      do
      {
        if (((v16 >> v5) & 1) != 0)
        {
          if (v15 >= 0) {
            uint64_t v7 = __p;
          }
          else {
            uint64_t v7 = (void **)__p[0];
          }
          *((_BYTE *)v7 + v6) = 49;
        }

        ++v5;
        --v6;
      }

      while (v5 != 8);
      int v8 = __p;
      if (v15 < 0) {
        int v8 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      __int16 v18 = 1024;
      int v19 = 730;
      __int16 v20 = 2080;
      int v21 = v8;
      __int16 v22 = 2080;
      uint64_t v23 = "anc|tel|sec|pri|hal";
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags have changed to %s (%s)", buf, 0x26u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    (*(void (**)(_BYTE *__return_ptr, uint64_t, unint64_t *))(*(void *)a1 + 608LL))(buf, a1, &v16);
    uint64_t v9 = *(void *)buf;
    *(void *)AudioTimeStamp buf = 0LL;
    uint64_t v10 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      uint64_t v11 = *(void *)buf;
      *(void *)AudioTimeStamp buf = 0LL;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
      }
    }

    unint64_t v12 = v16;
    unint64_t v13 = *v2;
    if (((v16 ^ *v2) & 1) != 0
      || ((v16 >> 5) & 1) != ((v13 >> 5) & 1)
      || ((v16 >> 6) & 1) != ((v13 >> 6) & 1)
      || ((v16 >> 7) & 1) != ((v13 >> 7) & 1))
    {
      sub_3228C(a1, v16);
      unint64_t v12 = v16;
    }

    *(void *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 104) = 1;
  }

uint64_t sub_22E344(uint64_t a1, int a2)
{
  uint64_t v2 = 696LL;
  if (a2) {
    uint64_t v2 = 720LL;
  }
  uint64_t v3 = 688LL;
  if (a2) {
    uint64_t v3 = 712LL;
  }
  int v4 = -991146299 * ((*(void *)(a1 + v2) - *(void *)(a1 + v3)) >> 4);
  if (!v4) {
    return 0LL;
  }
  LODWORD(v6) = 0;
  unsigned int v7 = 0;
  uint64_t v8 = a1 + 688;
  do
  {
    uint64_t v9 = sub_45C8(v8, a2, v7);
    unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(v9 + 192) + 128LL))(*(void *)(v9 + 192));
    else {
      uint64_t v6 = v10;
    }
    ++v7;
  }

  while (v4 != v7);
  return v6;
}

void sub_22E3F8(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  if (a3)
  {
    uint64_t v68 = (os_log_t *)sub_138E8(13);
    BOOL v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 289;
      _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): The default implementation of SetStreamIsUsed() handles only single-st ream AggregateDevice_Common instances. Override the function in the derived class.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C( exception,  "The default implementation of SetStreamIsUsed() handles only single-stream AggregateDevice_Common instances. Overr ide the function in the derived class.");
  }

  uint64_t v8 = sub_138E8(16);
  uint64_t v9 = sub_138E8(22);
  char v10 = 0;
  uint64_t v11 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1LL;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
LABEL_8:
  char v15 = *(os_log_s **)v8;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v16 = a4 ? "En" : "Dis";
    uint64_t v17 = (_DWORD)a2 ? "output" : "input";
    sub_7D084(__p, v17);
    __int16 v18 = SHIBYTE(v89) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 291;
    __int16 v91 = 2080;
    float64x2_t v92 = (std::string *)v16;
    __int16 v93 = 2080;
    unint64_t v94 = v18;
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d %sabling %s stream on aggregate.", buf, 0x26u);
    if (SHIBYTE(v89) < 0) {
      operator delete(__p[0]);
    }
  }

  AudioObjectID v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_155918((uint64_t)__p, a2, v19, a1[52]);
  if ((_DWORD)a2) {
    uint64_t v20 = 83LL;
  }
  else {
    uint64_t v20 = 80LL;
  }
  if ((_DWORD)a2) {
    int v21 = a1 + 83;
  }
  else {
    int v21 = a1 + 80;
  }
  if (v21[1] - a1[v20] != *((_DWORD *)v89 + 2))
  {
    __int16 v22 = (os_log_t *)sub_138E8(16);
    uint64_t v23 = *v22;
    if (*v22)
    {
      if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        sub_155E78(&v87, (uint64_t)__p);
        char v24 = (v87.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v87 : (std::string *)v87.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 296;
        __int16 v91 = 2080;
        float64x2_t v92 = v24;
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d streamUsage: %s.", buf, 0x1Cu);
      }
    }
  }

  if (v21[1] - a1[v20] != *((_DWORD *)v89 + 2))
  {
    uint64_t v25 = (os_log_t *)sub_138E8(16);
    uint64_t v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        sub_22FD80(&v87, (char *)a1[v20], (char *)v21[1]);
        uint64_t v27 = (v87.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v87 : (std::string *)v87.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 297;
        __int16 v91 = 2080;
        float64x2_t v92 = v27;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d usageMask: %s.", buf, 0x1Cu);
      }
    }
  }

  uint64_t v28 = *((unsigned int *)v89 + 2);
  if (v21[1] - a1[v20] != v28)
  {
    uint64_t v71 = (os_log_t *)sub_138E8(13);
    uint64_t v72 = *v71;
    if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 298;
      __int16 v91 = 1024;
      LODWORD(v92) = a2;
      _os_log_impl( &dword_0,  v72,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL aggregate device reported a different number of streams than our internal usage template for direction %d.",  buf,  0x18u);
    }

    __int16 v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( v73,  "The HAL aggregate device reported a different number of streams than our internal usage template for direction %d.");
LABEL_133:
  }

  if ((_DWORD)v28) {
    goto LABEL_48;
  }
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 88))(a1, a2))
  {
    uint64_t v77 = (os_log_t *)sub_138E8(13);
    unint64_t v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 299;
      _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL aggregate device reported no streams, yet we have one.",  buf,  0x12u);
    }

    __int16 v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "The HAL aggregate device reported no streams, yet we have one.");
    goto LABEL_133;
  }

  if (!*((_DWORD *)v89 + 2) && a4)
  {
    unint64_t v79 = (os_log_t *)sub_138E8(13);
    __n128 v80 = *v79;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 300;
      _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Attempt to enable stream when there aren't any.",  buf,  0x12u);
    }

    int v81 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v81 = &off_4865A0;
    v81[2] = 1852797029;
  }

void sub_22F154( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30)
{
}

void sub_22F21C()
{
}

uint64_t sub_22F224(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, 0LL) >= 2)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    unsigned int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, 0LL);
      int v14 = 136315650;
      char v15 = "AggregateDevice_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 806;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u input streams. Implement stream initialization in the derived class.",  (uint8_t *)&v14,  0x18u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C( exception,  "The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u input streams. Implement stream initialization in the derived class.");
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL) >= 2)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
      int v14 = 136315650;
      char v15 = "AggregateDevice_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 807;
      __int16 v18 = 1024;
      int v19 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::range_error): The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u output streams. Implement stream initialization in the derived class.",  (uint8_t *)&v14,  0x18u);
    }

    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22FD5C( v13,  "The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u output streams. Implement stream initialization in the derived class.");
  }

  uint64_t v2 = 0LL;
  LOWORD(v14) = 256;
  do
  {
    uint64_t v3 = *((unsigned __int8 *)&v14 + v2);
    BOOL v4 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, v3) != 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, BOOL))(*(void *)a1 + 584LL))(a1, v3, 0LL, v4);
    ++v2;
  }

  while (v2 != 2);
  return result;
}

void sub_22F47C(_Unwind_Exception *a1)
{
}

uint64_t sub_22F49C(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2 == a1) {
    return 1LL;
  }
  while (1)
  {
    BOOL v4 = (std::__shared_weak_count *)v2[3];
    if (!v4) {
      goto LABEL_19;
    }
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (!v5) {
      goto LABEL_19;
    }
    uint64_t v6 = v5;
    uint64_t v7 = v2[2];
    if (v7)
    {
      int v1 = 0;
      int v8 = *(_DWORD *)(v7 + 144);
      if (v8 <= 1886155112)
      {
        if (v8 != 1885432182 && v8 != 1885891433) {
LABEL_25:
        }
          int v1 = 1;
      }

      else if (v8 != 1886155113 && v8 != 1886155119 && v8 != 1886613618)
      {
        goto LABEL_25;
      }
    }

    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }

    if (((v7 != 0) & (v1 ^ 1)) != 0) {
      return 0LL;
    }
LABEL_19:
    uint64_t v2 = (void *)v2[1];
    if (v2 == a1) {
      return 1LL;
    }
  }

uint64_t sub_22F5C4(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + 160) = 0LL;
  *(_DWORD *)(a1 + 168) = 0;
  sub_2DB30(a1 + 160, (unsigned int **)(a2 + 160));
  *(void *)(a1 + 176) = 0LL;
  *(_DWORD *)(a1 + 184) = 0;
  sub_2DB30(a1 + 176, (unsigned int **)(a2 + 176));
  *(_OWORD *)(a1 + sub_19DFC(v37 - 192) = *(_OWORD *)(a2 + 192);
  return a1;
}

void sub_22F64C(_Unwind_Exception *a1)
{
}

void sub_22F660(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  __int128 v10 = (_OWORD *)*a1;
  if (0x4EC4EC4EC4EC4EC5LL * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      sub_867E4((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 > 0x13B13B13B13B13BLL) {
      sub_7A87C();
    }
    unint64_t v11 = 0x4EC4EC4EC4EC4EC5LL * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x9D89D89D89D89DLL) {
      unint64_t v13 = 0x13B13B13B13B13BLL;
    }
    else {
      unint64_t v13 = v12;
    }
    sub_22F9D0(a1, v13);
    uint64_t v14 = sub_22F8CC(v9, a2, a3, a1[1]);
    goto LABEL_13;
  }

  if (0x4EC4EC4EC4EC4EC5LL * ((a1[1] - (uint64_t)v10) >> 4) < a4)
  {
    uint64_t v15 = a2 + 16 * ((a1[1] - (uint64_t)v10) >> 4);
    sub_22F83C(a2, v15, v10);
    uint64_t v14 = sub_22F8CC(v9, v15, a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }

  __int16 v16 = sub_22F83C(a2, a3, v10);
  sub_867E4((uint64_t)a1, (uint64_t)v16);
}

void sub_22F7D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22F7E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_22F7E8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_867A4(&v3);
  uint64_t v3 = (void **)a1;
  sub_867A4(&v3);
  return a1;
}

_OWORD *sub_22F83C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      __int128 v6 = *(_OWORD *)(v5 + 16);
      *a3 = *(_OWORD *)v5;
      a3[1] = v6;
      __int128 v7 = *(_OWORD *)(v5 + 32);
      __int128 v8 = *(_OWORD *)(v5 + 48);
      __int128 v9 = *(_OWORD *)(v5 + 80);
      a3[4] = *(_OWORD *)(v5 + 64);
      a3[5] = v9;
      a3[2] = v7;
      a3[3] = v8;
      __int128 v10 = *(_OWORD *)(v5 + 96);
      __int128 v11 = *(_OWORD *)(v5 + 112);
      __int128 v12 = *(_OWORD *)(v5 + 144);
      a3[8] = *(_OWORD *)(v5 + 128);
      a3[9] = v12;
      a3[6] = v10;
      a3[7] = v11;
      sub_2DB30((uint64_t)(a3 + 10), (unsigned int **)(v5 + 160));
      sub_2DB30((uint64_t)(a3 + 11), (unsigned int **)(v5 + 176));
      a3[12] = *(_OWORD *)(v5 + 192);
      a3 += 13;
      v5 += 208LL;
    }

    while (v5 != a2);
  }

  return a3;
}

uint64_t sub_22F8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a2 != a3)
  {
    do
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(_OWORD *)(v4 + 16) = v6;
      __int128 v7 = *(_OWORD *)(a2 + 32);
      __int128 v8 = *(_OWORD *)(a2 + 48);
      __int128 v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 80) = v9;
      *(_OWORD *)(v4 + 32) = v7;
      *(_OWORD *)(v4 + 48) = v8;
      __int128 v10 = *(_OWORD *)(a2 + 96);
      __int128 v11 = *(_OWORD *)(a2 + 112);
      __int128 v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(v4 + 144) = v12;
      *(_OWORD *)(v4 + 96) = v10;
      *(_OWORD *)(v4 + 112) = v11;
      *(void *)(v4 + 160) = 0LL;
      *(_DWORD *)(v4 + 168) = 0;
      uint64_t v13 = a2 + 160;
      sub_2DB30(v4 + 160, (unsigned int **)(a2 + 160));
      *(void *)(v4 + 176) = 0LL;
      *(_DWORD *)(v4 + 184) = 0;
      v13 += 16LL;
      sub_2DB30(v4 + 176, (unsigned int **)v13);
      *(_OWORD *)(v4 + sub_19DFC(v37 - 192) = *(_OWORD *)(v13 + 16);
      uint64_t v4 = v18 + 208;
      v18 += 208LL;
      a2 = v13 + 32;
    }

    while (v13 + 32 != a3);
  }

  char v16 = 1;
  sub_22FA68((uint64_t)v15);
  return v4;
}

void sub_22F9AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_22F9D0(void *a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL) {
    sub_7A87C();
  }
  uint64_t result = (char *)sub_22FA20(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[208 * v4];
  return result;
}

void *sub_22FA20(unint64_t a1)
{
  if (a1 >= 0x13B13B13B13B13CLL) {
    sub_7A8C4();
  }
  return operator new(208 * a1);
}

uint64_t sub_22FA68(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 208LL)
    {
      sub_2DBF4((unsigned int **)(v4 - 32));
      sub_2DBF4((unsigned int **)(v4 - 48));
    }
  }

  return a1;
}

void *sub_22FACC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    sub_22F9D0(result, a4);
    uint64_t result = (void *)sub_22F8CC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_22FB30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_867A4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22FB50(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8LL);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8LL);
    while (v3 != v4)
    {
      sub_2DBF4((unsigned int **)(v3 + 176));
      sub_2DBF4((unsigned int **)(v3 + 160));
      v3 += 208LL;
    }
  }

  return a1;
}

void sub_22FBAC(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0LL)
  {
    off_49D068 = dlsym(v1, "AudioIssueDetectorCreate");
    off_49D070 = dlsym(v1, "AudioIssueDetectorInitialize");
    off_49D078 = dlsym(v1, "AudioIssueDetectorDispose");
    qword_49D080 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_49D088 = dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_49D090 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_49D098 = (uint64_t (*)(void, void, void, void, void, void))dlsym( v1,  "AudioIssueDetectorAnalyzeBuffer");
    off_49D0A0 = dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_49D0A8 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_49D0B0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_49D0B8 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_49D0C0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_49D0C8 = dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }

  uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    uint64_t v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3) {
      v3();
    }
  }

std::runtime_error *sub_22FD5C(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  return result;
}

std::string *sub_22FD80(std::string *a1, char *a2, char *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      __int128 v6 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v9 : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v9.__r_.__value_.__s.__size_ : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_22FE58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_22FE94(uint64_t result, uint64_t a2, unsigned int a3, _BYTE *a4, _BYTE *a5)
{
  v23[0] = a2;
  uint64_t v24 = result + 424;
  int v25 = 0;
  if (a4 != a5)
  {
    __int128 v6 = a4;
    int v9 = 0;
    if ((_DWORD)a2) {
      uint64_t v10 = "output";
    }
    else {
      uint64_t v10 = "input";
    }
    do
    {
      uint64_t v11 = sub_138E8(16);
      if ((*(_BYTE *)(v11 + 8) & 1) != 0)
      {
        __int128 v12 = *(os_log_s **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_7D084(__p, v10);
            int v13 = v22;
            uint64_t v14 = (void **)__p[0];
            int v15 = *v6;
            uint64_t v16 = sub_289B14((uint64_t)v23);
            uint64_t v17 = __p;
            if (v13 < 0) {
              uint64_t v17 = v14;
            }
            *(_DWORD *)AudioTimeStamp buf = 136316162;
            uint64_t v27 = "AggregateDevice_Common.cpp";
            __int16 v28 = 1024;
            uint64_t v18 = "false";
            int v29 = 992;
            __int16 v30 = 2080;
            uint64_t v31 = v17;
            __int16 v32 = 2080;
            int v33 = v18;
            __int16 v34 = 2048;
            uint64_t v35 = v16;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will call WillSetStreamIsUsed(%s, %s) on %p",  buf,  0x30u);
            if (v22 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      uint64_t result = sub_289B14((uint64_t)v23);
      if (result)
      {
        uint64_t v19 = sub_289B14((uint64_t)v23);
        if (*v6 == 1) {
          uint64_t v20 = a3;
        }
        else {
          uint64_t v20 = 0LL;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 176LL))(v19, a2, v20);
        int v25 = ++v9;
      }

      ++v6;
    }

    while (v6 != a5);
  }

  return result;
}

void sub_230080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2300A4(uint64_t result, uint64_t a2, unsigned int a3, _BYTE *a4, _BYTE *a5)
{
  v23[0] = a2;
  uint64_t v24 = result + 424;
  int v25 = 0;
  if (a4 != a5)
  {
    __int128 v6 = a4;
    int v9 = 0;
    if ((_DWORD)a2) {
      uint64_t v10 = "output";
    }
    else {
      uint64_t v10 = "input";
    }
    do
    {
      uint64_t v11 = sub_138E8(16);
      if ((*(_BYTE *)(v11 + 8) & 1) != 0)
      {
        __int128 v12 = *(os_log_s **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_7D084(__p, v10);
            int v13 = v22;
            uint64_t v14 = (void **)__p[0];
            int v15 = *v6;
            uint64_t v16 = sub_289B14((uint64_t)v23);
            uint64_t v17 = __p;
            if (v13 < 0) {
              uint64_t v17 = v14;
            }
            *(_DWORD *)AudioTimeStamp buf = 136316162;
            uint64_t v27 = "AggregateDevice_Common.cpp";
            __int16 v28 = 1024;
            uint64_t v18 = "false";
            int v29 = 1009;
            __int16 v30 = 2080;
            uint64_t v31 = v17;
            __int16 v32 = 2080;
            int v33 = v18;
            __int16 v34 = 2048;
            uint64_t v35 = v16;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will call DidSetStreamIsUsed(%s, %s) on %p",  buf,  0x30u);
            if (v22 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      uint64_t result = sub_289B14((uint64_t)v23);
      if (result)
      {
        uint64_t v19 = sub_289B14((uint64_t)v23);
        if (*v6) {
          uint64_t v20 = a3;
        }
        else {
          uint64_t v20 = 0LL;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 184LL))(v19, a2, v20);
        int v25 = ++v9;
      }

      ++v6;
    }

    while (v6 != a5);
  }

  return result;
}

void sub_230290( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2302B4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x666666666666667LL) {
      sub_7A87C();
    }
    uint64_t result = sub_F2BEC(a4);
    std::string::size_type v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[5 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }

  return result;
}

void sub_23033C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_230358(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    uint64_t v4 = dlerror();
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_4919D0 = dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_4919D8 = dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_4919E0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_4919E8 = dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_4919F0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_4919F8 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_491A00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_491A08 = dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_491A10 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_491A18 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_491A20 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_491A28 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_491A30 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_491A38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_491A40 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_491A48 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    qword_491A50 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    qword_491A58 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_491A60 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_491A68 = dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_491A70 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    uint64_t v4 = v2;
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

uint64_t sub_230674(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }

    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64LL;
        if (v8) {
          goto LABEL_14;
        }
      }

      return 0LL;
    }

    uint64_t v7 = v5;
LABEL_14:
  }

  return 1LL;
}

int **sub_230740(int **a1)
{
  int v2 = **a1;
  if (!v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = a1[1];
    __int16 v11 = 256;
    do
    {
      char v5 = v2;
      if (*((_BYTE *)&v11 + v3)) {
        uint64_t v6 = 136LL;
      }
      else {
        uint64_t v6 = 130LL;
      }
      if (*((_BYTE *)&v11 + v3)) {
        uint64_t v7 = v4 + 136;
      }
      else {
        uint64_t v7 = v4 + 130;
      }
      uint64_t v8 = *(void *)&v4[v6];
      uint64_t v9 = *((void *)v7 + 1);
      while (v8 != v9)
      {
        sub_3057C(*(void *)(*(void *)v8 + 136LL));
        v8 += 16LL;
      }

      LOBYTE(v2) = 1;
      uint64_t v3 = 1LL;
    }

    while ((v5 & 1) == 0);
  }

  return a1;
}

void *sub_230800( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, void **a9, os_unfair_lock_s *a10, uint64_t a11, __int128 *a12)
{
  *a1 = off_4779A8;
  uint64_t v19 = *(void *)(a3 + 8);
  if (v19 == a3)
  {
    unsigned int v20 = 0;
  }

  else
  {
    unsigned int v20 = 0;
    do
    {
      uint64_t v21 = *(void *)(v19 + 16);
      if (v21) {
        v20 += (*(uint64_t (**)(uint64_t, void))(*(void *)v21 + 88LL))(v21, 0LL);
      }
      uint64_t v19 = *(void *)(v19 + 8);
    }

    while (v19 != a3);
  }

  uint64_t v22 = *(void *)(a4 + 8);
  if (v22 == a4)
  {
    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v23 = 0LL;
    do
    {
      uint64_t v24 = *(void *)(v22 + 16);
      if (v24) {
        uint64_t v23 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v24 + 88LL))(v24, 1LL) + v23;
      }
      uint64_t v22 = *(void *)(v22 + 8);
    }

    while (v22 != a4);
  }

  uint64_t v25 = *(void *)(a6 + 40);
  unint64_t v54 = v20 | (unint64_t)(v23 << 32);
  if (v25)
  {
    uint64_t v26 = sub_2D10E8(v25, *((unsigned int *)a7 + 4));
    if ((v26 & 0xFF00000000LL) != 0) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    unsigned int v53 = v27;
    uint64_t v28 = *(void *)(a6 + 40);
    int v29 = 64;
    if (v28)
    {
      uint64_t v30 = sub_2D129C(v28, *((unsigned int *)a7 + 4));
      if ((v30 & 0xFF00000000LL) != 0) {
        int v29 = v30;
      }
      else {
        int v29 = 64;
      }
    }
  }

  else
  {
    unsigned int v53 = 0;
    int v29 = 64;
  }

  unsigned int v52 = v29;
  int v31 = *((_DWORD *)a7 + 4);
  int v32 = 1;
  int v33 = (int *)a6;
  if (v31 <= 1987077986)
  {
    int v34 = a8;
    if (v31 == 1768057203) {
      goto LABEL_32;
    }
    int v35 = 1919776355;
  }

  else
  {
    int v34 = a8;
    if (v31 == 1987077987 || v31 == 1987081833) {
      goto LABEL_32;
    }
    int v35 = 1987081839;
  }

  if (v31 != v35) {
    int v32 = 0;
  }
LABEL_32:
  uint64_t v36 = *(void *)((char *)a7 + 28);
  BOOL v37 = v31 == 1987208039 || v31 == 1987211117;
  char v38 = v31 == 1986556788 || v37;
  int v39 = sub_1FEC80(v33, v38);
  *(_DWORD *)AudioTimeStamp buf = sub_2877F0(a2, v33, v54, a10, v53, v52, v34, v32, (uint64_t)a12, v36, v39);
  *(void *)&v57[4] = sub_2895AC( *(AudioObjectID *)buf,  (OSStatus (__cdecl *)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))sub_2F80,  a1);
  sub_AB3D8((uint64_t *)&v57[12], a2);
  memset(v58, 0, sizeof(v58));
  sub_7F2E0(v58, *a9, a9[1], ((char *)a9[1] - (char *)*a9) >> 4);
  __int128 v40 = a7[1];
  __int128 v59 = *a7;
  __int128 v60 = v40;
  __int128 v61 = a7[2];
  v62[0] = (uint64_t)v62;
  v62[1] = (uint64_t)v62;
  v62[2] = 0LL;
  for (uint64_t i = a2; ; sub_230DF4(v62, v62, *(void *)(i + 24), i + 16))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == a2) {
      break;
    }
  }

  v62[3] = (uint64_t)a10;
  sub_86550(v63, a11);
  sub_C590C(&v64, a12);
  sub_C590C(&__p, a12 + 2);
  sub_AAE78((uint64_t)a1, (uint64_t)buf);
  if (v69 && v68 < 0) {
    operator delete(__p);
  }
  if (v66 && v65 < 0) {
    operator delete(v64);
  }
  sub_32C8C((void *)v63[1]);
  sub_68314(v62);
  uint64_t v55 = (void **)v58;
  sub_7A668(&v55);
  sub_AB45C((uint64_t *)&v57[12]);
  *a1 = off_4779A8;
  *((_DWORD *)a1 + 158) = 0;
  *((_WORD *)a1 + 318) = 0;
  if (*(void *)a5 == *(void *)(a5 + 8))
  {
    sub_230EF0((uint64_t)(a1 + 80), 0LL, a1 + 53, a3);
  }

  else
  {
    a1[80] = 0LL;
    a1[81] = 0LL;
    a1[82] = 0LL;
    uint64_t v43 = *(const void **)a5;
    uint64_t v42 = *(void *)(a5 + 8);
    size_t v44 = v42 - *(void *)a5;
    if (v42 != *(void *)a5)
    {
      if ((v44 & 0x8000000000000000LL) != 0) {
        sub_7A87C();
      }
      uint64_t v45 = (char *)operator new(v42 - *(void *)a5);
      a1[80] = v45;
      a1[81] = v45;
      uint64_t v46 = &v45[v44];
      a1[82] = &v45[v44];
      memmove(v45, v43, v44);
      a1[81] = v46;
    }
  }

  sub_230EF0((uint64_t)(a1 + 83), 1LL, a1 + 53, a4);
  a1[94] = 0LL;
  *((_DWORD *)a1 + 190) = 0;
  *((_OWORD *)a1 + 43) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  *(_OWORD *)((char *)a1 + 732) = 0u;
  if (!*(void *)(a2 + 16))
  {
    unsigned int v48 = (os_log_t *)sub_138E8(13);
    int v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)uint64_t v57 = "AggregateDevice_Common.cpp";
      *(_WORD *)&v57[8] = 1024;
      *(_DWORD *)&v57[10] = 209;
      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inAggregateTopology is empty.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inAggregateTopology is empty.");
  }

  if (a1 + 59 != (void *)a3) {
    sub_23143C(a1 + 59, *(void *)(a3 + 8), a3);
  }
  if (a1 + 62 != (void *)a4) {
    sub_23143C(a1 + 62, *(void *)(a4 + 8), a4);
  }
  return a1;
}

void sub_230D18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, char a44)
{
  int v50 = *v46;
  if (*v46)
  {
    *(void *)(v44 + 672) = v50;
    operator delete(v50);
  }

  uint64_t v51 = *v47;
  if (*v47)
  {
    *(void *)(v44 + 648) = v51;
    operator delete(v51);
  }

  sub_AB51C(v44);
  _Unwind_Resume(a1);
}

void *sub_230DF4(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x18uLL);
    uint64_t v8 = result;
    *uint64_t result = 0LL;
    result[1] = 0LL;
    result[2] = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = 1LL;
    if (v9 != a4)
    {
      __int16 v11 = result;
      do
      {
        uint64_t result = operator new(0x18uLL);
        *uint64_t result = v11;
        result[1] = 0LL;
        result[2] = *(void *)(v9 + 16);
        v11[1] = result;
        ++v10;
        uint64_t v9 = *(void *)(v9 + 8);
        __int16 v11 = result;
      }

      while (v9 != a4);
    }

    uint64_t v12 = *a2;
    *(void *)(v12 + 8) = v8;
    void *v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }

  return result;
}

void sub_230EBC(void *a1)
{
  do
  {
    int v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_230EDC(_Unwind_Exception *a1)
{
}

void sub_230EF0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = (os_log_t *)sub_138E8(16);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = "input";
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int128 v40 = "AggregateDevice_Common.cpp";
    if ((_DWORD)a2) {
      uint64_t v10 = "output";
    }
    __int16 v41 = 1024;
    int v42 = 91;
    __int16 v43 = 2080;
    *(void *)uint64_t v44 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Building StreamUsageMask for %s.", buf, 0x1Cu);
  }

  int v11 = 0;
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  LOBYTE(v36[0]) = a2;
  v36[1] = a3;
  while (1)
  {
    int v37 = v11;
    uint64_t v12 = sub_289B14((uint64_t)v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 88LL))(v12, a2))
    {
      uint64_t v13 = a4;
      if (*(void *)(a4 + 8) != a4)
      {
        uint64_t v13 = *(void *)(a4 + 8);
        while (*(void *)(v13 + 16) != v12)
        {
          uint64_t v13 = *(void *)(v13 + 8);
          if (v13 == a4)
          {
            uint64_t v13 = a4;
            break;
          }
        }
      }

      uint64_t v14 = *(char **)(a1 + 8);
      buf[0] = v13 != a4;
      sub_21C230(a1, v14, 1uLL, buf);
      int v15 = *(char **)(a1 + 8);
      int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 88LL))(v12, a2);
      buf[0] = 0;
      sub_21C230(a1, v15, (v16 - 1), buf);
      uint64_t v17 = (os_log_t *)sub_138E8(16);
      os_log_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 120LL))(v12);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v12 + 128LL))(&__p, v12);
        std::string::size_type v20 = __p.__r_.__value_.__r.__words[0];
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v12 + 96LL))(v12, a2, 0LL);
        *(_DWORD *)AudioTimeStamp buf = 136316162;
        __int128 v40 = "AggregateDevice_Common.cpp";
        __int16 v41 = 1024;
        int v42 = 106;
        __int16 v43 = 1024;
        *(_DWORD *)uint64_t v44 = v19;
        *(_WORD *)&v44[4] = 2112;
        *(void *)&v44[6] = v20;
        *(_WORD *)&v44[14] = 2048;
        *(void *)&v44[16] = v21;
        uint64_t v22 = v18;
        uint64_t v23 = "%25s:%-5d Adding element for PhysicalDevice ID %u (uid %@), (first) stream %p.";
        uint32_t v24 = 44;
LABEL_20:
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEBUG, v23, buf, v24);
        sub_19DFC((uint64_t)&__p);
      }
    }

    else
    {
      uint64_t v25 = (os_log_t *)sub_138E8(16);
      os_log_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
      {
        int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 120LL))(v12);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v12 + 128LL))(&__p, v12);
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        __int128 v40 = "AggregateDevice_Common.cpp";
        __int16 v41 = 1024;
        int v42 = 111;
        __int16 v43 = 1024;
        *(_DWORD *)uint64_t v44 = v27;
        *(_WORD *)&v44[4] = 2112;
        *(void *)&v44[6] = __p.__r_.__value_.__r.__words[0];
        uint64_t v22 = v26;
        uint64_t v23 = "%25s:%-5d Bypassing PhysicalDevice ID %u (uid %@).";
        uint32_t v24 = 34;
        goto LABEL_20;
      }
    }

    ++v11;
  }

  uint64_t v28 = (os_log_t *)sub_138E8(16);
  int v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
  {
    if ((_DWORD)a2) {
      uint64_t v30 = "output";
    }
    else {
      uint64_t v30 = "input";
    }
    sub_7D084(v36, v30);
    int v31 = v38;
    int v32 = (void **)v36[0];
    sub_2314E4(&__p, *(char **)a1, *(char **)(a1 + 8));
    int v33 = v36;
    if (v31 < 0) {
      int v33 = v32;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int128 v40 = "AggregateDevice_Common.cpp";
    __int16 v41 = 1024;
    int v42 = 115;
    __int16 v43 = 2080;
    *(void *)uint64_t v44 = v33;
    *(_WORD *)&v44[8] = 2080;
    *(void *)&v44[10] = p_p;
    _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built StreamUsageMask for %s: %s.", buf, 0x26u);
    if (v38 < 0) {
      operator delete(v36[0]);
    }
  }

void sub_231348( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2313BC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  sub_7A668(&v3);
  sub_AB45C((uint64_t *)(a1 + 16));
  return a1;
}

uint64_t *sub_23143C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t result = (uint64_t *)a1[1];
  if (a2 != a3 && result != a1)
  {
    do
    {
      result[2] = *(void *)(v4 + 16);
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t result = (uint64_t *)result[1];
    }

    while (v4 != a3 && result != a1);
  }

  if (result == a1) {
    return sub_230DF4(a1, a1, v4, a3);
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *result;
  *(void *)(v9 + 8) = *(void *)(*a1 + 8);
  **(void **)(v8 + 8) = v9;
  do
  {
    uint64_t v10 = (uint64_t *)result[1];
    --a1[2];
    operator delete(result);
    uint64_t result = v10;
  }

  while (v10 != a1);
  return result;
}

std::string *sub_2314E4(std::string *a1, char *a2, char *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      uint64_t v6 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v9 : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v9.__r_.__value_.__s.__size_ : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_2315BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_2315F8(uint64_t *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_155918((uint64_t)v24, 0, v2, a1[52]);
  if (*((_DWORD *)v25 + 2))
  {
    uint64_t v3 = a1[80];
    unint64_t v4 = a1[81] - v3;
    if (v4)
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = (char *)v25 + 12;
      do
      {
        *(_DWORD *)&v6[4 * v5] = *(char *)(v3 + v5);
        ++v5;
      }

      while (v4 > v5);
    }

    sub_155D1C((uint64_t)v24);
  }

  AudioObjectID v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_155918((uint64_t)v22, 1, v7, a1[52]);
  if (*((_DWORD *)v23 + 2))
  {
    uint64_t v8 = a1[83];
    unint64_t v9 = a1[84] - v8;
    if (v9)
    {
      uint64_t v10 = 0LL;
      int v11 = (char *)v23 + 12;
      do
      {
        *(_DWORD *)&v11[4 * v10] = *(char *)(v8 + v10);
        ++v10;
      }

      while (v9 > v10);
    }

    sub_155D1C((uint64_t)v22);
  }

  uint64_t v12 = (os_log_t *)sub_138E8(16);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_155E78(v20, (uint64_t)v24);
    int v14 = v21;
    uint64_t v15 = (void **)v20[0];
    sub_155E78(__p, (uint64_t)v22);
    int v16 = v20;
    if (v14 < 0) {
      int v16 = v15;
    }
    if (v19 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v27 = "AggregateDevice_Common.cpp";
    __int16 v28 = 1024;
    int v29 = 245;
    __int16 v30 = 2080;
    int v31 = v16;
    __int16 v32 = 2080;
    int v33 = v17;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting VA input stream usage to %s, output stream usage to %s",  buf,  0x26u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }

  free(v23);
  free(v25);
}

void sub_231804( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  free(a17);
  free(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_231850(uint64_t a1)
{
  *(void *)a1 = off_4779A8;
  sub_259EC(a1);
  sub_2DBF4((unsigned int **)(a1 + 752));
  sub_2DBF4((unsigned int **)(a1 + 736));
  uint64_t v5 = (void **)(a1 + 712);
  sub_867A4(&v5);
  uint64_t v5 = (void **)(a1 + 688);
  sub_867A4(&v5);
  AudioObjectID v2 = *(void **)(a1 + 664);
  if (v2)
  {
    *(void *)(a1 + 672) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 640);
  if (v3)
  {
    *(void *)(a1 + 648) = v3;
    operator delete(v3);
  }

  return sub_AB51C(a1);
}

void sub_2318DC(unint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v5 = (uint64_t)(a1 + 65);
  unint64_t v6 = a1[65];
  for (unint64_t i = a1[66]; v6 != i; v6 += 16LL)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(*(void *)v6 + 136LL) + 168LL))(&v10);
    sub_231BEC(a1 + 30, a1[31], v10, v11, (v11 - v10) >> 4);
    uint64_t v12 = &v10;
    sub_7A668((void ***)&v12);
  }

  unint64_t v8 = a1[68];
  for (unint64_t j = a1[69]; v8 != j; v8 += 16LL)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(*(void *)v8 + 136LL) + 168LL))(&v10);
    sub_231BEC(a1 + 30, a1[31], v10, v11, (v11 - v10) >> 4);
    uint64_t v12 = &v10;
    sub_7A668((void ***)&v12);
  }

  (*(void (**)(unint64_t *))(*a1 + 616))(a1);
  sub_CC160((uint64_t)a1);
}

void sub_231A28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_7A668(&a12);
  _Unwind_Resume(a1);
}

char *sub_231A48(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  unint64_t v8 = *(char **)a1;
  if (a4 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    uint64_t result = *(char **)(a1 + 8);
    unint64_t v17 = (result - v8) >> 4;
    if (v17 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          uint64_t v25 = *v6;
          uint64_t v26 = v6[1];
          v6 += 2;
          sub_91174(v8, v25, v26);
          v8 += 16;
        }

        while (v6 != a3);
        uint64_t result = *(char **)(a1 + 8);
      }

      while (result != v8)
        uint64_t result = (char *)sub_7A768((uint64_t)(result - 16));
      *(void *)(a1 + 8) = v8;
    }

    else
    {
      os_log_t v18 = &a2[2 * v17];
      if (result != v8)
      {
        do
        {
          uint64_t v19 = *v6;
          uint64_t v20 = v6[1];
          v6 += 2;
          uint64_t result = (char *)sub_91174(v8, v19, v20);
          v8 += 16;
        }

        while (v6 != v18);
        unint64_t v8 = *(char **)(a1 + 8);
      }

      int v21 = v8;
      if (v18 != a3)
      {
        int v21 = v8;
        do
        {
          uint64_t v22 = v18[1];
          void *v21 = *v18;
          v21[1] = v22;
          if (v22)
          {
            uint64_t v23 = (unint64_t *)(v22 + 8);
            do
              unint64_t v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }

          v18 += 2;
          v21 += 2;
        }

        while (v18 != a3);
      }

      *(void *)(a1 + 8) = v21;
    }
  }

  else
  {
    sub_1664F0((void **)a1);
    if (a4 >> 60) {
      goto LABEL_33;
    }
    uint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0LL ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_33:
    }
      sub_7A87C();
    uint64_t result = (char *)sub_7BE90(v11);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[16 * v13];
    while (v6 != a3)
    {
      uint64_t v14 = v6[1];
      *(void *)uint64_t result = *v6;
      *((void *)result + 1) = v14;
      if (v14)
      {
        uint64_t v15 = (unint64_t *)(v14 + 8);
        do
          unint64_t v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }

      v6 += 2;
      result += 16;
    }

    *(void *)(a1 + 8) = result;
  }

  return result;
}

void sub_231BEC(unint64_t *a1, unint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v6 = a3;
  unint64_t v7 = a2;
  uint64_t v9 = a1 + 2;
  unint64_t v10 = a1[2];
  unint64_t v11 = a1[1];
  if (a5 > (uint64_t)(v10 - v11) >> 4)
  {
    uint64_t v12 = (void *)*a1;
    unint64_t v13 = a5 + ((uint64_t)(v11 - *a1) >> 4);
    if (v13 >> 60) {
      sub_7A87C();
    }
    uint64_t v14 = (uint64_t)(a2 - (void)v12) >> 4;
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 3 > v13) {
      unint64_t v13 = v15 >> 3;
    }
    else {
      unint64_t v16 = v13;
    }
    uint64_t v55 = v9;
    if (v16) {
      unint64_t v16 = (unint64_t)sub_7BE90(v16);
    }
    else {
      uint64_t v17 = 0LL;
    }
    uint64_t v25 = (void *)(v16 + 16 * v14);
    unint64_t v51 = v16;
    unsigned int v52 = v25;
    unint64_t v54 = v16 + 16 * v17;
    uint64_t v26 = &v25[2 * a5];
    int v27 = v25;
    do
    {
      *int v27 = *v6;
      uint64_t v28 = v6[1];
      v27[1] = v28;
      if (v28)
      {
        int v29 = (unint64_t *)(v28 + 8);
        do
          unint64_t v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }

      v27 += 2;
      v6 += 2;
    }

    while (v27 != (void *)v26);
    unsigned int v53 = &v25[2 * a5];
    int v31 = (void *)*a1;
    if (*a1 != v7)
    {
      __int16 v32 = (void *)v7;
      do
      {
        __int128 v33 = *((_OWORD *)v32 - 1);
        v32 -= 2;
        *((_OWORD *)v25 - 1) = v33;
        v25 -= 2;
        void *v32 = 0LL;
        v32[1] = 0LL;
      }

      while (v32 != v31);
      uint64_t v26 = v53;
    }

    unint64_t v34 = a1[1];
    if (v34 != v7)
    {
      do
      {
        *v26++ = *(_OWORD *)v7;
        *(void *)unint64_t v7 = 0LL;
        *(void *)(v7 + 8) = 0LL;
        v7 += 16LL;
      }

      while (v7 != v34);
      unint64_t v7 = a1[1];
    }

    unint64_t v35 = *a1;
    *a1 = (unint64_t)v25;
    a1[1] = (unint64_t)v26;
    unint64_t v36 = a1[2];
    a1[2] = v54;
    unsigned int v53 = (_OWORD *)v7;
    unint64_t v54 = v36;
    unint64_t v51 = v35;
    unsigned int v52 = (void *)v35;
    sub_A0D64((uint64_t)&v51);
    return;
  }

  uint64_t v18 = (uint64_t)(v11 - a2) >> 4;
  if (v18 >= a5)
  {
    uint64_t v19 = &a3[2 * a5];
    int v21 = (void *)a1[1];
LABEL_36:
    int v37 = &v21[-2 * a5];
    char v38 = v21;
    if ((unint64_t)v37 < v11)
    {
      int v39 = &v21[-2 * a5];
      char v38 = v21;
      do
      {
        *v38++ = *(_OWORD *)v39;
        void *v39 = 0LL;
        v39[1] = 0LL;
        v39 += 2;
      }

      while ((unint64_t)v39 < v11);
    }

    a1[1] = (unint64_t)v38;
    if (v21 != (void *)(a2 + 16 * a5))
    {
      do
      {
        __int128 v40 = *((_OWORD *)v37 - 1);
        v37 -= 2;
        void *v37 = 0LL;
        v37[1] = 0LL;
        __int16 v41 = (std::__shared_weak_count *)*(v21 - 1);
        *((_OWORD *)v21 - 1) = v40;
        v21 -= 2;
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            unint64_t v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }

      while (v37 != (void *)v7);
    }

    for (; v6 != v19; v7 += 16LL)
    {
      uint64_t v45 = *v6;
      uint64_t v44 = v6[1];
      if (v44)
      {
        uint64_t v46 = (unint64_t *)(v44 + 8);
        do
          unint64_t v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }

      uint64_t v48 = *(std::__shared_weak_count **)(v7 + 8);
      *(void *)unint64_t v7 = v45;
      *(void *)(v7 + 8) = v44;
      if (v48)
      {
        int v49 = (unint64_t *)&v48->__shared_owners_;
        do
          unint64_t v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }

      v6 += 2;
    }

    return;
  }

  uint64_t v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    int v21 = (void *)a1[1];
  }

  else
  {
    uint64_t v20 = &a3[2 * v18];
    int v21 = (void *)a1[1];
    do
    {
      void *v21 = *v20;
      uint64_t v22 = v20[1];
      v21[1] = v22;
      if (v22)
      {
        uint64_t v23 = (unint64_t *)(v22 + 8);
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }

      v20 += 2;
      v21 += 2;
    }

    while (v20 != a4);
  }

  a1[1] = (unint64_t)v21;
}

uint64_t sub_231EDC(_BYTE *a1, _BYTE *a2, int a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    int v4 = 0;
    uint64_t v3 = a1;
    do
    {
      if (*v3 == 2)
      {
        if (v4 == a3) {
          goto LABEL_8;
        }
        ++v4;
      }

      ++v3;
    }

    while (v3 != a2);
    uint64_t v3 = a2;
  }

void sub_232010(_Unwind_Exception *exception_object)
{
}

void sub_23202C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_D62E0(v1 + 5);
    }
    operator delete(v1);
  }

uint64_t *sub_232070(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        unsigned int v9 = *((_DWORD *)v7 + 9);
        BOOL v10 = v9 > a4;
        if (v8 != a3) {
          BOOL v10 = v8 > a3;
        }
        if (!v10) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }

      BOOL v11 = v9 < a4;
      BOOL v12 = v8 == a3;
      BOOL v13 = v8 < a3;
      if (v12) {
        BOOL v13 = v11;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v7 + 1;
      uint64_t v5 = (uint64_t *)v7[1];
    }

    while (v5);
  }

  else
  {
    unint64_t v7 = result;
  }

__n128 sub_2320F0(uint64_t a1)
{
  AudioObjectID v2 = (char *)operator new(0x18uLL);
  *(void *)AudioObjectID v2 = &off_477CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_232128(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_477CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_232148(uint64_t a1)
{
  AudioObjectID v2 = (os_log_t *)sub_138E8(19);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    uint64_t v23 = "RoutingHandlerDispatcher.cpp";
    __int16 v24 = 1024;
    int v25 = 118;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Undoing local action map", buf, 0x12u);
  }

  int v4 = *(void **)(a1 + 8);
  unint64_t v7 = (void *)*v4;
  uint64_t v5 = v4 + 1;
  unint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      uint64_t v8 = sub_138E8(19);
      if ((*(_BYTE *)(v8 + 8) & 1) != 0)
      {
        unsigned int v9 = *(os_log_s **)v8;
        if (*(void *)v8)
        {
          if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
          {
            sub_33464(&__p, (unsigned int *)v6 + 8);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            uint64_t v23 = "RoutingHandlerDispatcher.cpp";
            __int16 v24 = 1024;
            int v25 = 123;
            __int16 v26 = 2080;
            int v27 = p_p;
            _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Undoing routing actions for %s", buf, 0x1Cu);
          }
        }
      }

      sub_2323EC(v6 + 5);
      BOOL v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          BOOL v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          BOOL v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          unint64_t v6 = v12;
        }

        while (!v13);
      }

      unint64_t v6 = v12;
    }

    while (v12 != v5);
  }

  uint64_t v14 = *(void **)(a1 + 16);
  uint64_t v15 = (void *)*v14;
  unint64_t v16 = (void *)v14[1];
  while (v15 != v16)
  {
    uint64_t v17 = v15[7];
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
    uint64_t v18 = v15[6];
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    uint64_t v19 = v15[5];
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
    uint64_t v20 = v15[4];
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    }
    v15 += 15;
  }

uint64_t sub_2323A0(uint64_t a1, uint64_t a2)
{
  int v4 = operator new(0x18uLL);
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  void *v4 = a1;
  v4[1] = v5;
  v4[2] = a2;
  *uint64_t v5 = v4;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6 + 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
}

void sub_2323EC(uint64_t *a1)
{
}

void sub_2326AC(_Unwind_Exception *a1)
{
}

void sub_2326B4(_Unwind_Exception *a1)
{
}

void sub_2326C0(_Unwind_Exception *a1)
{
}

void sub_2326CC(_Unwind_Exception *a1)
{
}

void sub_2326D8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x2326E0LL);
  }
  sub_7A0E8(a1);
}

void sub_2326F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_234F8C(a1);
  operator delete(v1);
}

uint64_t sub_232708(uint64_t a1, int *a2)
{
  return sub_14B8B8(a1 + 96, a2);
}

BOOL sub_232710(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unsigned int v9 = (os_log_t *)sub_138E8(13);
    BOOL v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)a2;
      int v14 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v13);
      BOOL v11 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v18 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 244;
      __int16 v21 = 2080;
      uint64_t v22 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported property: %s.",  buf,  0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v3 = *a2;
  BOOL result = 1LL;
  if (*a2 <= 1983013985)
  {
    if (v3 > 1836414052)
    {
      if (v3 == 1836414053 || v3 == 1836478308) {
        return result;
      }
      goto LABEL_18;
    }

    if (v3 != 1064725619)
    {
      int v5 = 1684157046;
      goto LABEL_15;
    }

    return 0LL;
  }

  if (v3 > 1986290210)
  {
    if (v3 == 1987013741 || v3 == 1987013732) {
      return result;
    }
    int v5 = 1986290211;
    goto LABEL_15;
  }

  if (v3 == 1983013986) {
    return 0LL;
  }
  int v5 = 1986229104;
LABEL_15:
  if (v3 == v5) {
    return 0LL;
  }
LABEL_18:
  uint64_t v6 = (os_log_t *)sub_138E8(13);
  unint64_t v7 = *v6;
  if (!*v6) {
    return 0LL;
  }
  BOOL result = os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v13 = *(void *)a2;
    int v14 = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)&v13);
    if (v16 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    uint64_t v18 = "InputVolumeControl_HAL_Common.cpp";
    __int16 v19 = 1024;
    int v20 = 266;
    __int16 v21 = 2080;
    uint64_t v22 = v8;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty() returned true, but I do not know about property %s.",  buf,  0x1Cu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_2329E8(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unsigned int v9 = (os_log_t *)sub_138E8(13);
    BOOL v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)a2;
      int v14 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v13);
      BOOL v11 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v18 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 276;
      __int16 v21 = 2080;
      uint64_t v22 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported property: %s.",  buf,  0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v3 = *a2;
  uint64_t result = 4LL;
  if (*a2 <= 1983013985)
  {
    if (v3 > 1836414052)
    {
      if (v3 == 1836414053) {
        return result;
      }
      int v5 = 1836478308;
    }

    else
    {
      if (v3 == 1064725619) {
        return result;
      }
      int v5 = 1684157046;
    }

    goto LABEL_15;
  }

  if (v3 <= 1986290210)
  {
    if (v3 == 1983013986) {
      return result;
    }
    int v5 = 1986229104;
LABEL_15:
    if (v3 == v5) {
      return result;
    }
    goto LABEL_17;
  }

  if (v3 == 1987013741 || v3 == 1987013732) {
    return result;
  }
  if (v3 == 1986290211) {
    return 16LL;
  }
LABEL_17:
  uint64_t v6 = (os_log_t *)sub_138E8(13);
  unint64_t v7 = *v6;
  if (!*v6) {
    return 0LL;
  }
  uint64_t result = os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    uint64_t v13 = *(void *)a2;
    int v14 = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)&v13);
    if (v16 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    uint64_t v18 = "InputVolumeControl_HAL_Common.cpp";
    __int16 v19 = 1024;
    int v20 = 300;
    __int16 v21 = 2080;
    uint64_t v22 = v8;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty() returned true, but I do not know about property %s.",  buf,  0x1Cu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  return result;
}

void sub_232CC4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, _DWORD *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v27 = (os_log_t *)sub_138E8(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)a2;
      int v39 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v38);
      int v29 = v41 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      unint64_t v43 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v44 = 1024;
      int v45 = 310;
      __int16 v46 = 2080;
      unint64_t v47 = v29;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported property: %s.",  buf,  0x1Cu);
      if (v41 < 0) {
        operator delete(*(void **)__p);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) > *a5)
  {
    int v31 = (os_log_t *)sub_138E8(13);
    __int16 v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)a2;
      int v39 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v38);
      __int128 v33 = v41 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      unint64_t v43 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v44 = 1024;
      int v45 = 311;
      __int16 v46 = 2080;
      unint64_t v47 = v33;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient for property %s.",  buf,  0x1Cu);
      if (v41 < 0) {
        operator delete(*(void **)__p);
      }
    }

    unint64_t v34 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v34 = &off_4865A0;
    v34[2] = 561211770;
  }

  int v12 = *a2;
  if (*a2 <= 1986229103)
  {
    if (v12 > 1836414052)
    {
      if (v12 != 1836414053)
      {
        if (v12 == 1983013986)
        {
          sub_64424(a1 + 152, *a6);
LABEL_24:
          sub_68168(a5, a6, v13);
          return;
        }

        if (v12 == 1836478308)
        {
          unint64_t v35 = (os_log_t *)sub_138E8(13);
          unint64_t v36 = *v35;
          if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            unint64_t v43 = "InputVolumeControl_HAL_Common.cpp";
            __int16 v44 = 1024;
            int v45 = 362;
            _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Attempt to GetPropertyData for kVirtualAudioDevicePropertyAppl yMasterVolumeDefault.  This property is write-only.",  buf,  0x12u);
          }

          int v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error( v37,  "Attempt to GetPropertyData for kVirtualAudioDevicePropertyApplyMasterVolumeDefault.  This property is write-only.");
        }

        goto LABEL_31;
      }

      int v16 = *(unsigned __int8 *)(a1 + 209);
LABEL_22:
      sub_5CABC(v16, a5, a6);
      return;
    }

    if (v12 != 1064725619)
    {
      if (v12 == 1684157046)
      {
        uint64_t v14 = a1 + 152;
        float v15 = *a6;
        goto LABEL_18;
      }

      goto LABEL_31;
    }

    *(_DWORD *)AudioTimeStamp buf = 1064725619;
    uint64_t v17 = *(void *)(a1 + 120);
    unint64_t v43 = *(const char **)(a1 + 128);
    int v18 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v17 + 16LL))(v17, buf);
    uint64_t v19 = *(void *)(a1 + 120);
    if (!v18)
    {
      *(_DWORD *)std::string __p = 1987013732;
      *(void *)&__p[4] = *(void *)(a1 + 128);
      int v20 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v19 + 16LL))(v19, __p);
      sub_5CABC(v20, a5, a6);
      return;
    }

void sub_23338C(_Unwind_Exception *a1)
{
}

void sub_2333A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unsigned int v52 = (os_log_t *)sub_138E8(13);
    unsigned int v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *a2;
      int v65 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v64);
      unint64_t v54 = v67 >= 0 ? __p : (void **)__p[0];
      buf[0] = 4.8152e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 396;
      __int16 v71 = 2080;
      double v72 = *(double *)&v54;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported property: %s.",  (uint8_t *)buf,  0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) > a5)
  {
    int v56 = (os_log_t *)sub_138E8(13);
    uint64_t v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *a2;
      int v65 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v64);
      uint64_t v58 = v67 >= 0 ? __p : (void **)__p[0];
      buf[0] = 4.8152e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 397;
      __int16 v71 = 2080;
      double v72 = *(double *)&v58;
      _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient for property %s.",  (uint8_t *)buf,  0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v59 = &off_4865A0;
    v59[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    __int128 v60 = (os_log_t *)sub_138E8(13);
    __int128 v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *a2;
      int v65 = *((_DWORD *)a2 + 2);
      sub_613AC((uint64_t)__p, (unsigned int *)&v64);
      unsigned int v62 = v67 >= 0 ? __p : (void **)__p[0];
      buf[0] = 4.8152e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 398;
      __int16 v71 = 2080;
      double v72 = *(double *)&v62;
      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Property %s is not settable.",  (uint8_t *)buf,  0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }

    int v63 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v63 = &off_4865A0;
    v63[2] = 1970171760;
  }

  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 > 1987013731)
  {
    if (v12 == 1987013732)
    {
      LODWORD(__p[0]) = sub_63910(a5, (uint64_t)a6);
      float v32 = *(double *)(a1 + 136);
      buf[0] = v32;
      float v33 = *(double *)(a1 + 144);
      *(float *)&uint64_t v64 = v33;
      *(float *)(a1 + sub_67FE8(v1 + 200) = *sub_63A98(buf, (float *)__p, (float *)&v64);
      if (*(double *)(a1 + 144) < *(float *)__p)
      {
        unint64_t v34 = (os_log_t *)sub_138E8(18);
        unint64_t v35 = *v34;
        if (*v34)
        {
          if (os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v36 = *(void ***)(a1 + 144);
            buf[0] = 4.8154e-34;
            *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
            __int16 v69 = 1024;
            int v70 = 414;
            __int16 v71 = 2048;
            double v72 = *(float *)__p;
            __int16 v73 = 2048;
            unint64_t v74 = v36;
            __int16 v75 = 2048;
            OSStatus v76 = v36;
            _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d desiredVolume (%f) is greater than the maximum decibel volume of the device (%f). Clamping to mU serVolumeRangeDecibels.mMaximum (%f)",  (uint8_t *)buf,  0x30u);
          }
        }
      }

      if (*(double *)(a1 + 136) > *(float *)__p)
      {
        int v37 = (os_log_t *)sub_138E8(18);
        uint64_t v38 = *v37;
        if (*v37)
        {
          if (os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
          {
            int v39 = *(void ***)(a1 + 136);
            buf[0] = 4.8154e-34;
            *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
            __int16 v69 = 1024;
            int v70 = 415;
            __int16 v71 = 2048;
            double v72 = *(float *)__p;
            __int16 v73 = 2048;
            unint64_t v74 = v39;
            __int16 v75 = 2048;
            OSStatus v76 = v39;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d desiredVolume (%f) is less than the minimum decibel volume of the device (%f). Clamping to mUser VolumeRangeDecibels.mMinimum (%f)",  (uint8_t *)buf,  0x30u);
          }
        }
      }

      sub_2353FC(a1);
      return;
    }

    if (v12 == 1987013741)
    {
      float v20 = sub_63910(a5, (uint64_t)a6);
      float v21 = 1.0;
      if (v20 <= 1.0) {
        float v21 = v20;
      }
      BOOL v22 = v20 < 0.0;
      float v23 = 0.0;
      if (!v22) {
        float v23 = v21;
      }
      sub_64424(a1 + 152, v23);
      *(_DWORD *)(a1 + sub_67FE8(v1 + 200) = v24;
      sub_2353FC(a1);
      return;
    }

    goto LABEL_19;
  }

  if (v12 == 1836414053)
  {
    *(_BYTE *)(a1 + 209) = sub_1C7038(a5, a6) != 0;
    uint64_t v31 = *(void *)(a1 + 120);
    buf[0] = 4.7478e27;
    *(void *)&buf[1] = *(void *)(a1 + 128);
    (*(void (**)(uint64_t, float *, void, void, uint64_t, unsigned int *))(*(void *)v31 + 48LL))( v31,  buf,  0LL,  0LL,  a5,  a6);
    return;
  }

  if (v12 != 1836478308)
  {
LABEL_19:
    int v25 = (os_log_t *)sub_138E8(13);
    os_log_t v26 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v64 = *a2;
    int v65 = *((_DWORD *)a2 + 2);
    sub_613AC((uint64_t)__p, (unsigned int *)&v64);
    if (v67 >= 0) {
      int v27 = __p;
    }
    else {
      int v27 = (void **)__p[0];
    }
    buf[0] = 4.8152e-34;
    *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v69 = 1024;
    int v70 = 435;
    __int16 v71 = 2080;
    double v72 = *(double *)&v27;
    uint64_t v28 = "%25s:%-5d ASSERTION FAILURE: GetPropertyDataSize() is correct and IsPropertySettable() and HasProperty() ret"
          "urned true, but I do not know about property %s.";
    int v29 = v26;
    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    goto LABEL_57;
  }

  if (*(_BYTE *)(a1 + 208))
  {
    *(_DWORD *)(a1 + sub_67FE8(v1 + 200) = *(_DWORD *)(a1 + 204);
    uint64_t v13 = sub_138E8(18);
    uint64_t v14 = sub_138E8(38);
    char v15 = 0;
    uint64_t v16 = 0LL;
    *(void *)AudioTimeStamp buf = 0x100000002LL;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = SLODWORD(buf[v16]);
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1LL;
      if ((v19 & 1) != 0) {
        goto LABEL_41;
      }
    }

    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_41:
    unint64_t v47 = *(os_log_s **)v13;
    if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      float v48 = *(float *)(a1 + 204);
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8LL));
      if (v67 >= 0) {
        int v49 = __p;
      }
      else {
        int v49 = (void **)__p[0];
      }
      buf[0] = 4.8153e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 728;
      __int16 v71 = 2048;
      double v72 = v48;
      __int16 v73 = 2080;
      unint64_t v74 = v49;
      _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applying default input gain of %f dB on VAD '%s'.",  (uint8_t *)buf,  0x26u);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_2353FC(a1);
    return;
  }

  uint64_t v40 = sub_138E8(18);
  uint64_t v41 = sub_138E8(38);
  char v42 = 0;
  uint64_t v43 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v44 = *(void *)(v40 + 8);
  while (1)
  {
    uint64_t v45 = SLODWORD(buf[v43]);
    char v46 = v42;
    if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
      break;
    }
    char v42 = 1;
    uint64_t v43 = 1LL;
    if ((v46 & 1) != 0) {
      goto LABEL_51;
    }
  }

  if ((v44 & v45) == 0) {
    uint64_t v40 = v41;
  }
LABEL_51:
  unint64_t v50 = *(os_log_s **)v40;
  if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8LL));
    if (v67 >= 0) {
      unint64_t v51 = __p;
    }
    else {
      unint64_t v51 = (void **)__p[0];
    }
    buf[0] = 4.8152e-34;
    *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v69 = 1024;
    int v70 = 734;
    __int16 v71 = 2080;
    double v72 = *(double *)&v51;
    uint64_t v28 = "%25s:%-5d Ignoring request to apply default volume. This control has no default volume on VAD '%s'. Defaulting"
          " to driver initialized input gain";
    int v29 = v50;
    os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
LABEL_57:
    _os_log_impl(&dword_0, v29, v30, v28, (uint8_t *)buf, 0x1Cu);
    if (v67 < 0) {
      operator delete(__p[0]);
    }
  }

uint64_t sub_233CE0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unint64_t v35 = (os_log_t *)sub_138E8(13);
    unint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      unsigned int v40 = a2[2];
      sub_613AC((uint64_t)v44, (unsigned int *)&__p);
      int v37 = v45 >= 0 ? v44 : (void **)v44[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v47 = 1024;
      *(_DWORD *)float v48 = 447;
      *(_WORD *)&v48[4] = 2080;
      *(void *)&v48[6] = v37;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported property: %s.",  buf,  0x1Cu);
      if (v45 < 0) {
        operator delete(v44[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v8 = *a2;
  if (*a2 <= 1986229103)
  {
    unsigned int v9 = (os_log_s *)(&dword_0 + 1);
    if (v8 == 1064725619) {
      return (uint64_t)v9;
    }
    if (v8 == 1836414053) {
      goto LABEL_25;
    }
    if (v8 != 1836478308) {
      goto LABEL_37;
    }
  }

  else
  {
    if (v8 <= 1987013731)
    {
      if (v8 != 1986229104 && v8 != 1986290211)
      {
LABEL_37:
        uint64_t v31 = (os_log_t *)sub_138E8(13);
        float v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          unsigned int v40 = a2[2];
          sub_613AC((uint64_t)v44, (unsigned int *)&__p);
          if (v45 >= 0) {
            float v33 = v44;
          }
          else {
            float v33 = (void **)v44[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
          __int16 v47 = 1024;
          *(_DWORD *)float v48 = 499;
          *(_WORD *)&v48[4] = 2080;
          *(void *)&v48[6] = v33;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty() returned true, but I do not know about property %s.",  buf,  0x1Cu);
LABEL_43:
          if (v45 < 0) {
            operator delete(v44[0]);
          }
          return 0LL;
        }

        return 0LL;
      }

      goto LABEL_25;
    }

    if (v8 == 1987013732)
    {
LABEL_25:
      int v42 = *a2;
      uint64_t v43 = *(void *)(a1 + 128);
      if (!(*(unsigned int (**)(void, int *))(**(void **)(a1 + 120) + 16LL))( *(void *)(a1 + 120),  &v42)) {
        return 1LL;
      }
      float v21 = *(void **)(a1 + 280);
      *(void *)AudioTimeStamp buf = *(void *)a2;
      *(_DWORD *)&buf[8] = a2[2];
      *(void *)&v48[2] = a3;
      *(void *)&v48[10] = a4;
      sub_1885D4(v21, (unsigned int *)&v42, (unsigned int *)buf);
      uint64_t v22 = sub_F31A4(*(void *)(a1 + 120), &v42, (uint64_t)sub_234FE4, a1, 1);
      if (!(_DWORD)v22) {
        return 1LL;
      }
      float v23 = (os_log_t *)sub_138E8(18);
      unsigned int v9 = *v23;
      if (*v23)
      {
        if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v44, v22);
          int v24 = v45;
          int v25 = (void **)v44[0];
          uint64_t v26 = *(void *)(a1 + 120);
          sub_2CA1C(&__p, *a2);
          int v27 = v44;
          if (v24 < 0) {
            int v27 = v25;
          }
          if (v41 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          int v29 = *(_DWORD *)(a1 + 128);
          int v30 = *(_DWORD *)(a1 + 132);
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
          __int16 v47 = 1024;
          *(_DWORD *)float v48 = 477;
          *(_WORD *)&v48[4] = 2080;
          *(void *)&v48[6] = v27;
          *(_WORD *)&v48[14] = 2048;
          *(void *)&v48[16] = v26;
          __int16 v49 = 2080;
          unint64_t v50 = p_p;
          __int16 v51 = 1024;
          int v52 = v29;
          __int16 v53 = 1024;
          int v54 = v30;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
            buf,
            0x3Cu);
          if (v41 < 0) {
            operator delete(__p);
          }
          goto LABEL_43;
        }

        return 0LL;
      }

      return (uint64_t)v9;
    }

    if (v8 != 1987013741) {
      goto LABEL_37;
    }
    int v42 = 1987013732;
    uint64_t v43 = *(void *)(a1 + 128);
    BOOL v10 = *(void **)(a1 + 280);
    *(void *)AudioTimeStamp buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v48[2] = a3;
    *(void *)&v48[10] = a4;
    sub_1885D4(v10, (unsigned int *)&v42, (unsigned int *)buf);
    uint64_t v11 = sub_F31A4(*(void *)(a1 + 120), &v42, (uint64_t)sub_234FE4, a1, 1);
    unsigned int v9 = (os_log_s *)((_DWORD)v11 == 0);
    if ((_DWORD)v11)
    {
      int v12 = (os_log_t *)sub_138E8(18);
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v44, v11);
          int v14 = v45;
          char v15 = (void **)v44[0];
          uint64_t v16 = *(void *)(a1 + 120);
          sub_2CA1C(&__p, 1987013732LL);
          uint64_t v17 = v44;
          if (v14 < 0) {
            uint64_t v17 = v15;
          }
          if (v41 >= 0) {
            uint64_t v18 = &__p;
          }
          else {
            uint64_t v18 = __p;
          }
          int v19 = *(_DWORD *)(a1 + 128);
          int v20 = *(_DWORD *)(a1 + 132);
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
          __int16 v47 = 1024;
          *(_DWORD *)float v48 = 461;
          *(_WORD *)&v48[4] = 2080;
          *(void *)&v48[6] = v17;
          *(_WORD *)&v48[14] = 2048;
          *(void *)&v48[16] = v16;
          __int16 v49 = 2080;
          unint64_t v50 = v18;
          __int16 v51 = 1024;
          int v52 = v19;
          __int16 v53 = 1024;
          int v54 = v20;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
            buf,
            0x3Cu);
          if (v41 < 0) {
            operator delete(__p);
          }
          if (v45 < 0) {
            operator delete(v44[0]);
          }
        }
      }
    }
  }

  return (uint64_t)v9;
}

void sub_234290(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2342B4(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v18 = 1024;
      *(_DWORD *)int v19 = 509;
LABEL_20:
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

void sub_23453C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFF00000000LL) == 0 || (_DWORD)a3)
  {
    OSStatus v76 = (os_log_t *)sub_138E8(13);
    uint64_t v77 = *v76;
    if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v84 = 1024;
      int v85 = 605;
      _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inTransferFunction must be CAVolumeCurve::kLinearCurve for input Volume Controls.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "inTransferFunction must be CAVolumeCurve::kLinearCurve for input Volume Controls.");
  }

  double v10 = v8;
  double v11 = v9;
  uint64_t v12 = sub_138E8(18);
  uint64_t v13 = sub_138E8(38);
  char v14 = 0;
  uint64_t v15 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1LL;
    if ((v18 & 1) != 0)
    {
      if ((v16 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }

  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
  if ((*(void *)(v12 + 8) & 1) != 0)
  {
LABEL_11:
    int v19 = *(os_log_s **)v12;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      double v20 = *a2;
      double v21 = a2[1];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v84 = 1024;
      int v85 = 607;
      __int16 v86 = 2048;
      double v87 = v20;
      __int16 v88 = 2048;
      double v89 = v21;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Desired input volume range: %f dB to %f dB", buf, 0x26u);
    }
  }

void sub_234CF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_234D28()
{
  uint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      int v4 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v5 = 1024;
      int v6 = 686;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Not implemented for input volume control",  (uint8_t *)&v3,  0x12u);
    }
  }

  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented for input volume control");
}

void sub_234DE8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_234E04(uint64_t a1)
{
  return sub_2BCA9C(*(void *)(a1 + 120), *(unsigned int *)(a1 + 128), *(_DWORD *)(a1 + 132));
}

uint64_t sub_234E14(uint64_t a1)
{
  return sub_2BCA9C(*(void *)(a1 + 120), *(unsigned int *)(a1 + 128), *(_DWORD *)(a1 + 132));
}

uint64_t sub_234E24(uint64_t a1, float a2)
{
  double v3 = a2;
  if (*(double *)(a1 + 136) <= a2 && *(double *)(a1 + 144) >= v3)
  {
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 208) = 1;
    *(float *)(a1 + 204) = a2;
  }

  else
  {
    int v4 = (os_log_t *)sub_138E8(18);
    __int16 v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 136);
        uint64_t v7 = *(void *)(a1 + 144);
        int v9 = 136316162;
        double v10 = "InputVolumeControl_HAL_Common.cpp";
        __int16 v11 = 1024;
        int v12 = 706;
        __int16 v13 = 2048;
        double v14 = v3;
        __int16 v15 = 2048;
        uint64_t v16 = v6;
        __int16 v17 = 2048;
        uint64_t v18 = v7;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Disabling default input volume due to inDefaultVolume (%f) being out of range of the valid hardware volume range [%f, %f]. Defaulting to driver initialized input gain",  (uint8_t *)&v9,  0x30u);
      }
    }

    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 208) = 0;
  }

  return result;
}

uint64_t sub_234F3C(uint64_t result)
{
  *(_BYTE *)(result + 208) = 0;
  return result;
}

uint64_t sub_234F44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_234F54()
{
  return 0LL;
}

uint64_t sub_234F5C(uint64_t a1)
{
  return sub_234F8C(a1 - 80);
}

void sub_234F64(uint64_t a1)
{
  uint64_t v1 = (void *)sub_234F8C(a1 - 80);
  operator delete(v1);
}

uint64_t sub_234F84()
{
  return 0LL;
}

uint64_t sub_234F8C(uint64_t a1)
{
  *(void *)a1 = off_477CF0;
  *(void *)(a1 + 80) = off_477DB8;
  sub_7A768(a1 + 280);
  int v2 = *(std::__shared_weak_count **)(a1 + 264);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_32C8C(*(void **)(a1 + 168));
  sub_68314((void *)(a1 + 96));
  return sub_F3008(a1);
}

void *sub_234FE4(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  if (!a2)
  {
    double v14 = (os_log_t *)sub_138E8(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 559;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inNumberAddresses is 0.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }

  if (!a4)
  {
    __int16 v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 560;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: inClientData is NULL.",  buf,  0x12u);
    }

    int v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "inClientData is NULL.");
  }

  __int16 v5 = a3;
  if (!a3)
  {
    double v20 = (os_log_t *)sub_138E8(13);
    double v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 561;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: inAddresses is NULL.",  buf,  0x12u);
    }

    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "inAddresses is NULL.");
  }

  if (a3[2] != *(_DWORD *)(a4 + 132))
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 565;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inAddresses[0].mElement != This->mElement.",  buf,  0x12u);
    }

    uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "inAddresses[0].mElement != This->mElement.");
  }

  uint64_t v6 = a2;
  do
  {
    int v7 = *(_DWORD *)(a4 + 128);
    if (v5[1] == v7 && *v5 == 1987013732)
    {
      int v8 = *(_DWORD *)(a4 + 132);
      if (v5[2] == v8)
      {
        if (*(_BYTE *)(a4 + 210))
        {
          int v26 = 4;
          float v27 = 0.0;
          uint64_t v9 = *(void *)(a4 + 120);
          *(_DWORD *)AudioTimeStamp buf = 1987013732;
          *(_DWORD *)&uint8_t buf[4] = v7;
          *(_DWORD *)&buf[8] = v8;
          (*(void (**)(uint64_t, _BYTE *, void, void, int *, float *))(*(void *)v9 + 40LL))( v9,  buf,  0LL,  0LL,  &v26,  &v27);
          float v10 = v27;
          if (*(float *)(a4 + 200) != v27)
          {
            if (!*(_DWORD *)(a4 + 248))
            {
              *(double *)AudioTimeStamp buf = v27;
              float v11 = *sub_1C7EB4((double *)(a4 + 136), (double *)buf, (double *)(a4 + 144));
              *(float *)(a4 + sub_67FE8(v1 + 200) = v11;
              float v10 = v27;
            }

            *(float *)(a4 + 240) = v10;
          }
        }
      }
    }

    int v12 = *(void **)(a4 + 280);
    *(void *)AudioTimeStamp buf = *(void *)v5;
    *(_DWORD *)&buf[8] = v5[2];
    uint64_t result = sub_67564(v12, (unsigned int *)buf);
    v5 += 3;
    --v6;
  }

  while (v6);
  return result;
}

void sub_2353D4(_Unwind_Exception *a1)
{
}

void sub_2353FC(uint64_t a1)
{
  float v2 = *(float *)(a1 + 200);
  float v91 = v2;
  if (*(_DWORD *)(a1 + 248) == 1)
  {
    float v3 = *(float *)(a1 + 232);
    if (v2 < v3 || (v3 = *(float *)(a1 + 236), float v4 = 0.0, v2 > v3))
    {
      float v4 = v2 - v3;
      float v91 = v3;
    }
  }

  else
  {
    *(double *)AudioTimeStamp buf = v2;
    float v5 = *sub_1C7EB4((double *)(a1 + 216), (double *)buf, (double *)(a1 + 224));
    float v91 = v5;
    float v4 = 0.0;
  }

  uint64_t v6 = sub_138E8(18);
  uint64_t v7 = sub_138E8(38);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_12;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_12:
  __int16 v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    double v14 = *(float *)(a1 + 200);
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v93 = 1024;
    int v94 = 161;
    __int16 v95 = 2048;
    *(double *)unint64_t v96 = v14;
    *(_WORD *)&v96[8] = 2048;
    *(double *)&v96[10] = v91;
    __int16 v97 = 2048;
    double v98 = v4;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d   Setting Input Volume: %f dB, Final HW Volume: %f dB, Final SW Volume: %f dB",  buf,  0x30u);
  }

  uint64_t v15 = sub_138E8(18);
  uint64_t v16 = sub_138E8(38);
  char v17 = 0;
  uint64_t v18 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1LL;
    if ((v21 & 1) != 0) {
      goto LABEL_21;
    }
  }

  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_21:
  uint64_t v22 = *(os_log_s **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8LL));
    uint64_t v23 = v90 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v93 = 1024;
    int v94 = 162;
    __int16 v95 = 2080;
    *(void *)unint64_t v96 = v23;
    _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   VAD '%s'", buf, 0x1Cu);
    if (v90 < 0) {
      operator delete(__p);
    }
  }

  uint64_t v24 = sub_138E8(18);
  uint64_t v25 = sub_138E8(38);
  char v26 = 0;
  uint64_t v27 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v28 = *(void *)(v24 + 8);
  while (1)
  {
    uint64_t v29 = *(int *)&buf[4 * v27];
    char v30 = v26;
    if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
      break;
    }
    char v26 = 1;
    uint64_t v27 = 1LL;
    if ((v30 & 1) != 0) {
      goto LABEL_34;
    }
  }

  if ((v28 & v29) == 0) {
    uint64_t v24 = v25;
  }
LABEL_34:
  uint64_t v31 = *(os_log_s **)v24;
  if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 120) + 128LL))(&__p);
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v93 = 1024;
    int v94 = 164;
    __int16 v95 = 2112;
    *(void *)unint64_t v96 = __p;
    _os_log_impl(&dword_0, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   PhysicalDevice UID = %@", buf, 0x1Cu);
    sub_19DFC((uint64_t)&__p);
  }

  uint64_t v32 = sub_138E8(18);
  uint64_t v33 = sub_138E8(38);
  char v34 = 0;
  uint64_t v35 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v36 = *(void *)(v32 + 8);
  while (1)
  {
    uint64_t v37 = *(int *)&buf[4 * v35];
    char v38 = v34;
    if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
      break;
    }
    char v34 = 1;
    uint64_t v35 = 1LL;
    if ((v38 & 1) != 0) {
      goto LABEL_43;
    }
  }

  if ((v36 & v37) == 0) {
    uint64_t v32 = v33;
  }
LABEL_43:
  int v39 = *(os_log_s **)v32;
  if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v40 = *(_DWORD *)(a1 + 128);
    sub_2CA1C(&__p, v40);
    double v41 = v90 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v93 = 1024;
    int v94 = 165;
    __int16 v95 = 1024;
    *(_DWORD *)unint64_t v96 = v40;
    *(_WORD *)&v96[4] = 2080;
    *(void *)&v96[6] = v41;
    _os_log_impl(&dword_0, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   Scope = %u (%s)", buf, 0x22u);
    if (v90 < 0) {
      operator delete(__p);
    }
  }

  uint64_t v42 = sub_138E8(18);
  uint64_t v43 = sub_138E8(38);
  char v44 = 0;
  uint64_t v45 = 0LL;
  *(void *)AudioTimeStamp buf = 0x100000002LL;
  uint64_t v46 = *(void *)(v42 + 8);
  while (1)
  {
    uint64_t v47 = *(int *)&buf[4 * v45];
    char v48 = v44;
    if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
      break;
    }
    char v44 = 1;
    uint64_t v45 = 1LL;
    if ((v48 & 1) != 0) {
      goto LABEL_56;
    }
  }

  if ((v46 & v47) == 0) {
    uint64_t v42 = v43;
  }
LABEL_56:
  __int16 v49 = *(os_log_s **)v42;
  if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v50 = *(_DWORD *)(a1 + 132);
    sub_2CA1C(&__p, v50);
    __int16 v51 = v90 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v93 = 1024;
    int v94 = 166;
    __int16 v95 = 1024;
    *(_DWORD *)unint64_t v96 = v50;
    *(_WORD *)&v96[4] = 2080;
    *(void *)&v96[6] = v51;
    _os_log_impl(&dword_0, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   Element = %u (%s)", buf, 0x22u);
    if (v90 < 0) {
      operator delete(__p);
    }
  }

  if (!*(_DWORD *)(a1 + 248))
  {
    uint64_t v65 = sub_138E8(18);
    uint64_t v66 = sub_138E8(38);
    char v67 = 0;
    uint64_t v68 = 0LL;
    *(void *)AudioTimeStamp buf = 0x100000002LL;
    uint64_t v69 = *(void *)(v65 + 8);
    while (1)
    {
      uint64_t v70 = *(int *)&buf[4 * v68];
      char v71 = v67;
      if (((v69 & v70) != 0) != ((*(void *)(v66 + 8) & v70) != 0)) {
        break;
      }
      char v67 = 1;
      uint64_t v68 = 1LL;
      if ((v71 & 1) != 0) {
        goto LABEL_93;
      }
    }

    if ((v69 & v70) == 0) {
      uint64_t v65 = v66;
    }
LABEL_93:
    uint64_t v77 = *(os_log_s **)v65;
    if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v93 = 1024;
      int v94 = 167;
      _os_log_impl(&dword_0, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d   SW Volume: disabled", buf, 0x12u);
    }
  }

  uint64_t v52 = *(void *)(a1 + 128);
  *(_DWORD *)double v87 = 1987013732;
  *(void *)&v87[4] = v52;
  if (!*(_BYTE *)(a1 + 210) || (*(float *)(a1 + 240) = v91, sub_1C7638(*(void *)(a1 + 120)) == *(float *)(a1 + 240)))
  {
    int v53 = 0;
  }

  else
  {
    (*(void (**)(void, _BYTE *, void, void, uint64_t, float *))(**(void **)(a1 + 120) + 48LL))( *(void *)(a1 + 120),  v87,  0LL,  0LL,  4LL,  &v91);
    int v53 = 1;
  }

  if (*(_DWORD *)(a1 + 248))
  {
    std::string __p = 0LL;
    double v89 = 0LL;
    float v54 = *(std::__shared_weak_count **)(a1 + 264);
    if (v54)
    {
      float v55 = std::__shared_weak_count::lock(v54);
      double v89 = v55;
      if (v55)
      {
        float v56 = *(void **)(a1 + 256);
        std::string __p = v56;
        if (v56)
        {
          int v57 = (*(uint64_t (**)(void *))(*(void *)v56 + 136LL))(v56);
          if (v57 == 1935895666) {
            float v4 = sub_757A4(a1 + 152, v4);
          }
          uint64_t v58 = sub_138E8(18);
          uint64_t v59 = sub_138E8(38);
          char v60 = 0;
          uint64_t v61 = 0LL;
          *(void *)AudioTimeStamp buf = 0x100000002LL;
          uint64_t v62 = *(void *)(v58 + 8);
          while (1)
          {
            uint64_t v63 = *(int *)&buf[4 * v61];
            char v64 = v60;
            if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
              break;
            }
            char v60 = 1;
            uint64_t v61 = 1LL;
            if ((v64 & 1) != 0) {
              goto LABEL_98;
            }
          }

          if ((v62 & v63) == 0) {
            uint64_t v58 = v59;
          }
LABEL_98:
          unint64_t v78 = *(os_log_s **)v58;
          if (v78 && os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
          {
            int v79 = "dB";
            *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
            __int16 v93 = 1024;
            int v94 = 193;
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            if (v57 == 1935895666) {
              int v79 = "scalar";
            }
            __int16 v95 = 2048;
            *(double *)unint64_t v96 = v4;
            *(_WORD *)&v96[8] = 2080;
            *(void *)&v96[10] = v79;
            _os_log_impl(&dword_0, v78, OS_LOG_TYPE_DEBUG, "%25s:%-5d   Input SW Volume: %f %s", buf, 0x26u);
          }

          if (v4 != *(float *)(a1 + 244) || !*(_BYTE *)(a1 + 272))
          {
            (*(void (**)(void *, float))(*(void *)v56 + 16LL))(v56, v4);
            int v74 = 0;
            *(float *)(a1 + 244) = v4;
            *(_BYTE *)(a1 + 272) = 1;
            goto LABEL_87;
          }

void sub_235E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void **sub_235E60(void *a1)
{
  uint64_t v11 = a1;
  float v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    float v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      float v4 = (void *)*a1;
      if (*a1)
      {
        uint64_t v5 = (uint64_t)(a1 + 2);
        if (sub_67420(v4, v5))
        {
          *(void *)AudioTimeStamp buf = *(void *)v5;
          *(_DWORD *)&buf[8] = *(_DWORD *)(v5 + 8);
          sub_67564(v4, (unsigned int *)buf);
        }

void sub_235FB8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    unint64_t v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  if (a2 == 3)
  {
    char v21 = __cxa_begin_catch(a1);
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v24;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 98;
      uint64_t v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v26 = v23;
      uint32_t v27 = 40;
LABEL_17:
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }

  else
  {
    uint64_t v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v29 = v28;
      char v30 = (os_log_t *)sub_138E8(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16LL))(v29);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v32;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 98;
        uint64_t v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 98;
        uint64_t v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_17;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x235F80LL);
}

uint64_t sub_236254(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  char v12 = (void *)sub_2BC660(a1);
  *char v12 = off_477CF0;
  v12[10] = off_477DB8;
  if (!a6)
  {
    char v38 = (os_log_t *)sub_138E8(13);
    int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(float *)AudioTimeStamp buf = 4.8151e-34;
      uint64_t v46 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v47 = 1024;
      int v48 = 34;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): propertyFlags has no flags.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "propertyFlags has no flags.");
  }

  __int16 v13 = &v41;
  *(void *)&__int128 v41 = &v41;
  *((void *)&v41 + 1) = &v41;
  uint64_t v42 = 0LL;
  if ((a6 & 3) != 0)
  {
    int v14 = operator new(0x20uLL);
    v14[2] = 0x676C6F6276637370LL;
    *((_DWORD *)v14 + 6) = 0;
    *int v14 = &v41;
    v14[1] = &v41;
    *(void *)&__int128 v41 = v14;
    *((void *)&v41 + 1) = v14;
    uint64_t v42 = 1LL;
    uint64_t v15 = operator new(0x20uLL);
    v15[2] = 0x676C6F623F766C73LL;
    *((_DWORD *)v15 + 6) = 0;
    *uint64_t v15 = v14;
    v15[1] = &v41;
    v14[1] = v15;
    *(void *)&__int128 v41 = v15;
    uint64_t v42 = 2LL;
    uint64_t v16 = operator new(0x20uLL);
    v16[2] = 0x676C6F6276326462LL;
    *((_DWORD *)v16 + 6) = 0;
    *uint64_t v16 = v15;
    v16[1] = &v41;
    v15[1] = v16;
    *(void *)&__int128 v41 = v16;
    uint64_t v42 = 3LL;
    __int16 v13 = (__int128 *)operator new(0x20uLL);
    *((void *)v13 + 2) = 0x676C6F6264623276LL;
    *((_DWORD *)v13 + 6) = 0;
    *(void *)__int16 v13 = v16;
    *((void *)v13 + 1) = &v41;
    v16[1] = v13;
    uint64_t v17 = 4LL;
    *(void *)&__int128 v41 = v13;
    uint64_t v42 = 4LL;
    if ((a6 & 2) != 0)
    {
      uint64_t v18 = operator new(0x20uLL);
      v18[2] = 0x676C6F62766F6C6DLL;
      *((_DWORD *)v18 + 6) = 0;
      *uint64_t v18 = v13;
      v18[1] = &v41;
      *((void *)v13 + 1) = v18;
      uint64_t v17 = 5LL;
      *(void *)&__int128 v41 = v18;
      uint64_t v42 = 5LL;
      __int16 v13 = (__int128 *)v18;
    }

    if ((a6 & 1) != 0)
    {
      uint64_t v19 = operator new(0x20uLL);
      v19[2] = 0x2A2A2A2A766F6C64LL;
      *((_DWORD *)v19 + 6) = 0;
      void *v19 = v13;
      v19[1] = &v41;
      *((void *)v13 + 1) = v19;
      ++v17;
      *(void *)&__int128 v41 = v19;
      uint64_t v42 = v17;
      __int16 v13 = (__int128 *)v19;
    }

    if ((a6 & 8) == 0)
    {
LABEL_8:
      if ((a6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v17 = 0LL;
    if ((a6 & 8) == 0) {
      goto LABEL_8;
    }
  }

  unint64_t v20 = operator new(0x20uLL);
  void v20[2] = 0x676C6F626D757465LL;
  *((_DWORD *)v20 + 6) = 0;
  void *v20 = v13;
  v20[1] = &v41;
  *((void *)v13 + 1) = v20;
  ++v17;
  *(void *)&__int128 v41 = v20;
  uint64_t v42 = v17;
  __int16 v13 = (__int128 *)v20;
  if ((a6 & 0x10) == 0)
  {
LABEL_9:
    if ((a6 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

void sub_236710(_Unwind_Exception *a1)
{
}

uint64_t sub_23679C(uint64_t a1, char *name)
{
  *(void *)a1 = name;
  *(_DWORD *)(a1 + 8) = 0;
  uint32_t v3 = notify_register_check(name, (int *)(a1 + 8));
  *(_BYTE *)(a1 + 12) = v3 == 0;
  if (v3)
  {
    float v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)a1;
      int v8 = 136315650;
      unint64_t v9 = "SystemNotifier.cpp";
      __int16 v10 = 1024;
      int v11 = 45;
      __int16 v12 = 2080;
      uint64_t v13 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Could not get a token for the notification status.  There will be no notifications for %s",  (uint8_t *)&v8,  0x1Cu);
    }
  }

  else
  {
    sub_3A400(a1, 0LL);
  }

  return a1;
}

uint64_t sub_2368A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = *(const void **)(a3 + 248);
  int v8 = v4;
  if (*(_BYTE *)(a3 + 256)) {
    BOOL v5 = v4 == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    CFRetain(v4);
  }
  sub_15869C(&cf, v4);
  sub_19DFC((uint64_t)&v8);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a3 + 480LL))(a3) & 1) != 0
    && ((_os_feature_enabled_impl("VirtualAudio", "pme_hfp_all_supported_devices") & 1) != 0 || sub_2043D4(a3)))
  {
    uint64_t v6 = sub_31F914();
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void sub_23695C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_236988@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Require PME Enabled");
}

void *sub_2369A0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_477FE8;
  return result;
}

void sub_2369C4(uint64_t a1, void *a2)
{
  *a2 = &off_477FE8;
}

BOOL sub_2369DC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_2369FC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_477FA0;
  return result;
}

void sub_236A20(uint64_t a1, void *a2)
{
  *a2 = &off_477FA0;
}

BOOL sub_236A38(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_236A58()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_477F58;
  return result;
}

void sub_236A7C(uint64_t a1, void *a2)
{
  *a2 = &off_477F58;
}

uint64_t sub_236A94(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_236AF4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_477F10;
  return result;
}

void sub_236B18(uint64_t a1, void *a2)
{
  *a2 = &off_477F10;
}

uint64_t sub_236B30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_236B48()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_477EC8;
  return result;
}

void sub_236B6C(uint64_t a1, void *a2)
{
  *a2 = &off_477EC8;
}

uint64_t sub_236B84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_236B9C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_477E80;
  return result;
}

void sub_236BC0(uint64_t a1, void *a2)
{
  *a2 = &off_477E80;
}

BOOL sub_236BD8(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_236BFC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_477E38;
  return result;
}

void sub_236C20(uint64_t a1, void *a2)
{
  *a2 = &off_477E38;
}

uint64_t sub_236C38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

void sub_236C48()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_492180);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_492180))
  {
    char v21 = operator new(0x18uLL);
    uint64_t v34 = 0x676C6F6273746174LL;
    int v35 = 0;
    LODWORD(v33) = 7;
    *((void *)&v33 + 1) = 1635020133LL;
    sub_F0C04((uint64_t)&v36, &v34, &v33, 0, 0);
    sub_237810(v21, (uint64_t)&v36, 1uLL);
    sub_2DBF5C((uint64_t)v37);
    sub_2DBF5C((uint64_t)&v33);
    qword_492178 = (uint64_t)v21;
    __cxa_guard_release(&qword_492180);
  }

  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_492190);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_492190))
  {
    uint64_t v22 = operator new(0x18uLL);
    uint64_t v34 = 0x676C6F6273746174LL;
    int v35 = 0;
    LODWORD(v33) = 7;
    *((void *)&v33 + 1) = 1635017068LL;
    sub_F0C04((uint64_t)&v36, &v34, &v33, 0, 0);
    sub_237810(v22, (uint64_t)&v36, 1uLL);
    sub_2DBF5C((uint64_t)v37);
    sub_2DBF5C((uint64_t)&v33);
    qword_492188 = (uint64_t)v22;
    __cxa_guard_release(&qword_492190);
  }

  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_4921A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_4921A0))
  {
    double v23 = operator new(0x18uLL);
    uint64_t v34 = 0x676C6F6273746174LL;
    int v35 = 0;
    LODWORD(v33) = 7;
    *((void *)&v33 + 1) = 1635021925LL;
    sub_F0C04((uint64_t)&v36, &v34, &v33, 0, 0);
    sub_237810(v23, (uint64_t)&v36, 1uLL);
    sub_2DBF5C((uint64_t)v37);
    sub_2DBF5C((uint64_t)&v33);
    qword_492198 = (uint64_t)v23;
    __cxa_guard_release(&qword_4921A0);
  }

  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_4921B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_4921B0))
  {
    double v24 = operator new(0x18uLL);
    uint64_t v34 = 0x676C6F6273746174LL;
    int v35 = 0;
    LODWORD(v33) = 7;
    *((void *)&v33 + 1) = 1635021682LL;
    sub_F0C04((uint64_t)&v36, &v34, &v33, 0, 0);
    sub_237810(v24, (uint64_t)&v36, 1uLL);
    sub_2DBF5C((uint64_t)v37);
    sub_2DBF5C((uint64_t)&v33);
    qword_4921A8 = (uint64_t)v24;
    __cxa_guard_release(&qword_4921B0);
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_4921C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_4921C0))
  {
    float v25 = operator new(0x80uLL);
    *(void *)&__int128 v36 = qword_492178;
    BYTE8(v36) = 1;
    sub_2CE400((uint64_t)v25, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&unk_402138, &v36, (uint64_t)&unk_402148);
    qword_4921B8 = (uint64_t)v25;
    __cxa_guard_release(&qword_4921C0);
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_4921D0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_4921D0))
  {
    uint64_t v26 = operator new(0x80uLL);
    *(void *)&__int128 v36 = &xmmword_4A21C8;
    BYTE8(v36) = 1;
    *(void *)&__int128 v33 = qword_492178;
    BYTE8(v33) = 1;
    sub_2CE400((uint64_t)v26, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&v36, &v33, (uint64_t)&unk_402148);
    qword_4921C8 = (uint64_t)v26;
    __cxa_guard_release(&qword_4921D0);
  }

  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_4921E0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_4921E0))
  {
    unsigned int v27 = operator new(0x80uLL);
    *(void *)&__int128 v36 = &xmmword_4A22A8;
    BYTE8(v36) = 1;
    *(void *)&__int128 v33 = qword_492178;
    BYTE8(v33) = 1;
    sub_2CE400((uint64_t)v27, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&v36, &v33, (uint64_t)&unk_402148);
    qword_4921D8 = (uint64_t)v27;
    __cxa_guard_release(&qword_4921E0);
  }

  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_4921F0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_4921F0))
  {
    unsigned int v28 = operator new(0x80uLL);
    *(void *)&__int128 v36 = qword_492188;
    BYTE8(v36) = 1;
    sub_2CE400((uint64_t)v28, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&unk_402138, &v36, (uint64_t)&unk_402148);
    qword_4921E8 = (uint64_t)v28;
    __cxa_guard_release(&qword_4921F0);
  }

  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_492200);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_492200))
  {
    int v29 = operator new(0x80uLL);
    *(void *)&__int128 v36 = qword_4921A8;
    BYTE8(v36) = 1;
    sub_2CE400((uint64_t)v29, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&unk_402138, &v36, (uint64_t)&unk_402148);
    qword_4921F8 = (uint64_t)v29;
    __cxa_guard_release(&qword_492200);
  }

  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_492210);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_492210))
  {
    float v30 = operator new(0x80uLL);
    *(void *)&__int128 v36 = qword_492198;
    BYTE8(v36) = 1;
    sub_2CE400((uint64_t)v30, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&unk_402138, &v36, (uint64_t)&unk_402148);
    qword_492208 = (uint64_t)v30;
    __cxa_guard_release(&qword_492210);
  }

  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_492220);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_492220))
  {
    double v31 = operator new(0x80uLL);
    *(void *)&__int128 v36 = &xmmword_4A79B0;
    BYTE8(v36) = 1;
    *(void *)&__int128 v33 = qword_492178;
    BYTE8(v33) = 1;
    sub_2CE400((uint64_t)v31, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&v36, &v33, (uint64_t)&unk_402148);
    qword_492218 = (uint64_t)v31;
    __cxa_guard_release(&qword_492220);
  }

  unsigned __int8 v11 = atomic_load((unsigned __int8 *)&qword_492230);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_492230))
  {
    float v32 = operator new(0x80uLL);
    *(void *)&__int128 v36 = &xmmword_4A7A90;
    BYTE8(v36) = 1;
    *(void *)&__int128 v33 = qword_492178;
    BYTE8(v33) = 1;
    sub_2CE400((uint64_t)v32, 0LL, "", &qword_402124, &qword_40212C, (uint64_t *)&v36, &v33, (uint64_t)&unk_402148);
    qword_492228 = (uint64_t)v32;
    __cxa_guard_release(&qword_492230);
  }

  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_492280);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_492280))
  {
    sub_23792C();
    __cxa_guard_release(&qword_492280);
  }

  unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_4922D0);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_4922D0))
  {
    sub_237980();
    __cxa_guard_release(&qword_4922D0);
  }

  unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_492320);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_492320))
  {
    sub_237AD8();
    __cxa_guard_release(&qword_492320);
  }

  unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_492370);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_492370))
  {
    sub_237C28();
    __cxa_guard_release(&qword_492370);
  }

  unsigned __int8 v16 = atomic_load((unsigned __int8 *)&qword_4923C0);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_4923C0))
  {
    sub_237F60();
    __cxa_guard_release(&qword_4923C0);
  }

  unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_492410);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_492410))
  {
    sub_237FBC();
    __cxa_guard_release(&qword_492410);
  }

  unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_492460);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_492460))
  {
    sub_238018();
    __cxa_guard_release(&qword_492460);
  }

  unsigned __int8 v19 = atomic_load((unsigned __int8 *)&qword_4924B0);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_4924B0))
  {
    sub_23809C();
    __cxa_guard_release(&qword_4924B0);
  }

  unsigned __int8 v20 = atomic_load((unsigned __int8 *)&qword_492500);
  if ((v20 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_492500))
    {
      sub_238120();
      __cxa_guard_release(&qword_492500);
    }
  }

void sub_237598(_Unwind_Exception *a1)
{
}

void *sub_237810(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    if (a3 >= 0x666666666666667LL) {
      sub_7A87C();
    }
    unsigned __int8 v6 = (char *)sub_F2BEC(a3);
    uint64_t v7 = 0LL;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[40 * v8];
    uint64_t v9 = a2 + 40 * a3;
    do
    {
      uint64_t v10 = a2 + v7;
      unsigned __int8 v11 = &v6[v7];
      uint64_t v12 = *(void *)(a2 + v7);
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + v7 + 8);
      *(void *)unsigned __int8 v11 = v12;
      sub_2DC450((uint64_t)&v6[v7 + 16], a2 + v7 + 16);
      *((_WORD *)v11 + 16) = *(_WORD *)(a2 + v7 + 32);
      v7 += 40LL;
    }

    while (v10 + 40 != v9);
    a1[1] = &v6[v7];
  }

  return a1;
}

void sub_2378F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_23792C()
{
  uint64_t v0 = sub_2D5694((uint64_t)&unk_492238, (uint64_t)&qword_4A9190, qword_4921E8);
  return sub_2D6838(v0, 2);
}

void sub_237968(_Unwind_Exception *a1)
{
}

uint64_t sub_237980()
{
  qword_492290 = 0LL;
  qword_492288 = (uint64_t)&qword_492290;
  qword_4922A8 = 0LL;
  qword_492298 = 0LL;
  unk_4922A0 = &qword_4922A8;
  qword_4922C8 = 0LL;
  qword_4922C0 = 0LL;
  qword_4922B0 = 0LL;
  unk_4922B8 = &qword_4922C0;
  sub_2D5228((uint64_t **)&qword_492288, (uint64_t)&qword_4A84E8, qword_4921F8);
  uint64_t v1 = 0x7672636700000000LL;
  __int128 v2 = *(_OWORD *)sub_2FC95C();
  int v3 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 0LL;
  sub_2D5228((uint64_t **)&qword_492288, (uint64_t)&v1, qword_4921F8);
  uint64_t v1 = 0x76726F6D00000000LL;
  __int128 v2 = *(_OWORD *)sub_2FC95C();
  int v3 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 0LL;
  sub_2D5228((uint64_t **)&qword_492288, (uint64_t)&v1, qword_4921F8);
  uint64_t v1 = 0x766D736700000000LL;
  __int128 v2 = *(_OWORD *)sub_2FC95C();
  int v3 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 0LL;
  sub_2D5228((uint64_t **)&qword_492288, (uint64_t)&v1, qword_4921B8);
  return sub_2D6A60((uint64_t)&qword_492288, (int *)&qword_4A84E8, 1);
}

void sub_237AA8(_Unwind_Exception *a1)
{
}

uint64_t sub_237AD8()
{
  qword_4922E0 = 0LL;
  qword_4922D8 = (uint64_t)&qword_4922E0;
  qword_4922F8 = 0LL;
  qword_4922E8 = 0LL;
  unk_4922F0 = &qword_4922F8;
  qword_492318 = 0LL;
  qword_492310 = 0LL;
  qword_492300 = 0LL;
  unk_492308 = &qword_492310;
  sub_2D5228((uint64_t **)&qword_4922D8, (uint64_t)&qword_4A9190, qword_4921B8);
  uint64_t v1 = 0x696D646600000001LL;
  *(void *)&__int128 v2 = 1LL;
  DWORD2(v2) = 0;
  int v3 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 0LL;
  sub_2D5228((uint64_t **)&qword_4922D8, (uint64_t)&v1, qword_4921C8);
  uint64_t v1 = 0x6D6F767000000001LL;
  *(void *)&__int128 v2 = 1LL;
  DWORD2(v2) = 0;
  int v3 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 0LL;
  sub_2D5F80((uint64_t **)&qword_4922D8, &v1, qword_4921D8);
  uint64_t v1 = 0x73706B6E00000001LL;
  __int128 v2 = *(_OWORD *)sub_2FC95C();
  int v3 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 0LL;
  sub_2D5228((uint64_t **)&qword_4922D8, (uint64_t)&v1, qword_492228);
  return sub_2D6838((uint64_t)&qword_4922D8, 2);
}

void sub_237C00(_Unwind_Exception *a1)
{
}

uint64_t sub_237C28()
{
  qword_492330 = 0LL;
  qword_492328 = (uint64_t)&qword_492330;
  qword_492348 = 0LL;
  qword_492338 = 0LL;
  unk_492340 = &qword_492348;
  qword_492368 = 0LL;
  qword_492360 = 0LL;
  qword_492350 = 0LL;
  unk_492358 = &qword_492360;
  sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&qword_4A9190, qword_4921F8);
  uint64_t v5 = 0x696D646600000001LL;
  *(void *)&__int128 v6 = 1LL;
  DWORD2(v6) = 0;
  int v7 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_4921F8);
  uint64_t v5 = 0x6D6F767000000001LL;
  *(void *)&__int128 v6 = 1LL;
  DWORD2(v6) = 0;
  int v7 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  sub_2D5F80((uint64_t **)&qword_492328, &v5, qword_4921F8);
  uint64_t v5 = 0x7672636700000001LL;
  __int128 v6 = *(_OWORD *)sub_2FC95C();
  int v7 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_4921F8);
  uint64_t v5 = 0x76726F6D00000001LL;
  __int128 v6 = *(_OWORD *)sub_2FC95C();
  int v7 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_4921F8);
  uint64_t v5 = 0x6D736D7400000001LL;
  __int128 v6 = *(_OWORD *)sub_2FC95C();
  int v7 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_4921F8);
  uint64_t v5 = 0x7261772000000001LL;
  __int128 v6 = *(_OWORD *)sub_2FC95C();
  int v7 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_4921F8);
  for (uint64_t i = 0LL; i != 20; i += 4LL)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv_1[i];
    LODWORD(v5) = 1;
    HIDWORD(v5) = v1;
    __int128 v6 = *(_OWORD *)sub_2FC95C();
    int v7 = 0;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v8 = 0LL;
    sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_492208);
  }

  for (uint64_t j = 0LL; j != 12; j += 4LL)
  {
    int v3 = *(_DWORD *)&aOvpvivpvcgpvcv_1[j + 20];
    LODWORD(v5) = 1;
    HIDWORD(v5) = v3;
    __int128 v6 = *(_OWORD *)sub_2FC95C();
    int v7 = 0;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v8 = 0LL;
    sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_492208);
  }

  uint64_t v5 = 0x766D736700000001LL;
  __int128 v6 = *(_OWORD *)sub_2FC95C();
  int v7 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  sub_2D5228((uint64_t **)&qword_492328, (uint64_t)&v5, qword_4921F8);
  return sub_2D6A60((uint64_t)&qword_492328, (int *)&qword_4A9190, 1);
}

void sub_237F08(_Unwind_Exception *a1)
{
}

uint64_t sub_237F60()
{
  uint64_t v0 = sub_2D5694((uint64_t)&unk_492378, (uint64_t)&qword_4A84E8, qword_492208);
  return sub_2D6A60(v0, (int *)&qword_4A84E8, 1);
}

void sub_237FA4(_Unwind_Exception *a1)
{
}

uint64_t sub_237FBC()
{
  uint64_t v0 = sub_2D5694((uint64_t)&unk_4923C8, (uint64_t)&qword_4A9190, qword_492208);
  return sub_2D6A60(v0, (int *)&qword_4A9190, 1);
}

void sub_238000(_Unwind_Exception *a1)
{
}

uint64_t sub_238018()
{
  qword_492420 = 0LL;
  qword_492418 = (uint64_t)&qword_492420;
  qword_492438 = 0LL;
  qword_492428 = 0LL;
  unk_492430 = &qword_492438;
  qword_492458 = 0LL;
  qword_492450 = 0LL;
  qword_492440 = 0LL;
  unk_492448 = &qword_492450;
  sub_2D5228((uint64_t **)&qword_492418, (uint64_t)&qword_4A9190, qword_492218);
  return sub_2D6838((uint64_t)&qword_492418, 2);
}

void sub_238084(_Unwind_Exception *a1)
{
}

uint64_t sub_23809C()
{
  qword_492470 = 0LL;
  qword_492468 = (uint64_t)&qword_492470;
  qword_492488 = 0LL;
  qword_492478 = 0LL;
  unk_492480 = &qword_492488;
  qword_4924A8 = 0LL;
  qword_4924A0 = 0LL;
  qword_492490 = 0LL;
  unk_492498 = &qword_4924A0;
  sub_2D5228((uint64_t **)&qword_492468, (uint64_t)&qword_4A9190, qword_4921F8);
  return sub_2D6838((uint64_t)&qword_492468, 1);
}

void sub_238108(_Unwind_Exception *a1)
{
}

uint64_t sub_238120()
{
  qword_4924C0 = 0LL;
  qword_4924B8 = (uint64_t)&qword_4924C0;
  qword_4924D8 = 0LL;
  qword_4924C8 = 0LL;
  unk_4924D0 = &qword_4924D8;
  qword_4924F8 = 0LL;
  qword_4924F0 = 0LL;
  qword_4924E0 = 0LL;
  unk_4924E8 = &qword_4924F0;
  sub_2D5228((uint64_t **)&qword_4924B8, (uint64_t)&qword_4A9190, qword_4921B8);
  return sub_2D6838((uint64_t)&qword_4924B8, 2);
}

void sub_23818C(_Unwind_Exception *a1)
{
}

void *sub_2381A4(uint64_t *a1)
{
  unsigned __int8 v14 = &qword_4A9200;
  LOBYTE(v15) = 0;
  LOBYTE(v16[0]) = 0;
  sub_238360(v3, &v13, 1LL);
  int v4 = 3;
  v6[0] = 0LL;
  v6[1] = 0LL;
  uint64_t v5 = v6;
  int v7 = 3;
  v9[1] = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = v9;
  v9[0] = 0LL;
  v12[0] = 0LL;
  v12[1] = 0LL;
  unsigned __int8 v11 = v12;
  sub_F23F0(&v13, (uint64_t)v3);
  int v15 = v4;
  sub_86550(v16, (uint64_t)&v5);
  int v17 = v7;
  sub_F2490(v18, &v8);
  v18[3] = v10;
  sub_F2538(v19, &v11);
  sub_238400(a1, (uint64_t)&v13, 1LL);
  sub_F20B8((void *)v19[1]);
  sub_32C8C((void *)v18[1]);
  sub_32C8C((void *)v16[1]);
  sub_68314(&v13);
  sub_F20B8(v12[0]);
  sub_32C8C(v9[0]);
  sub_32C8C(v6[0]);
  return sub_68314(v3);
}

void sub_238304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_F21A4((uint64_t)va1);
  sub_F21A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_238358()
{
}

void *sub_238360(void *a1, __int128 *a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    uint64_t v6 = 1LL;
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = operator new(0x38uLL);
      __int128 v9 = *a2;
      __int128 v10 = a2[1];
      v8[6] = *((void *)a2 + 4);
      *((_OWORD *)v8 + 1) = v9;
      *((_OWORD *)v8 + 2) = v10;
      void *v8 = v7;
      v8[1] = a1;
      v7[1] = v8;
      a1[2] = v6;
      a2 = (__int128 *)((char *)a2 + 40);
      ++v6;
      uint64_t v7 = v8;
      *a1 = v8;
      v5 -= 40LL;
    }

    while (v5);
  }

  return a1;
}

void sub_2383EC(_Unwind_Exception *a1)
{
}

uint64_t *sub_238400(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 120 * a3;
    do
    {
      uint64_t v6 = sub_F1214(a2);
      uint64_t v7 = *a1;
      void *v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 120LL;
      v5 -= 120LL;
    }

    while (v5);
  }

  return a1;
}

void sub_238470(_Unwind_Exception *a1)
{
}

void *sub_238484(uint64_t *a1)
{
  uint64_t v14 = &qword_4A9200;
  LOBYTE(v15) = 0;
  LOBYTE(v16[0]) = 0;
  sub_238360(v3, &v13, 1LL);
  int v4 = 3;
  v6[0] = 0LL;
  v6[1] = 0LL;
  uint64_t v5 = v6;
  int v7 = 3;
  v9[1] = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = v9;
  v9[0] = 0LL;
  v12[0] = 0LL;
  v12[1] = 0LL;
  uint64_t v11 = v12;
  sub_F23F0(&v13, (uint64_t)v3);
  int v15 = v4;
  sub_86550(v16, (uint64_t)&v5);
  int v17 = v7;
  sub_F2490(v18, &v8);
  v18[3] = v10;
  sub_F2538(v19, &v11);
  sub_238400(a1, (uint64_t)&v13, 1LL);
  sub_F20B8((void *)v19[1]);
  sub_32C8C((void *)v18[1]);
  sub_32C8C((void *)v16[1]);
  sub_68314(&v13);
  sub_F20B8(v12[0]);
  sub_32C8C(v9[0]);
  sub_32C8C(v6[0]);
  return sub_68314(v3);
}

void sub_2385E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_F21A4((uint64_t)va1);
  sub_F21A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_238638()
{
}

void sub_238644(uint64_t a1)
{
  int v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

BOOL sub_238658(uint64_t a1)
{
  return (*(_WORD *)(a1 + 184) & 1) == 0;
}

uint64_t sub_238668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(double *)a2 == 0.0 || (*(double *)a1 != 0.0 ? (BOOL v6 = *(double *)a2 == *(double *)a1) : (BOOL v6 = 1), v6))
  {
    int v7 = *(_DWORD *)(a2 + 8);
    if (!v7 || ((int v8 = *(_DWORD *)(a1 + 8)) != 0 ? (v9 = v7 == v8) : (v9 = 1), v9))
    {
      int v10 = *(_DWORD *)(a2 + 16);
      if (!v10 || (int v11 = *(_DWORD *)(a1 + 16)) == 0 || v10 == v11)
      {
        int v12 = *(_DWORD *)(a2 + 20);
        if (!v12 || (int v13 = *(_DWORD *)(a1 + 20)) == 0 || v12 == v13)
        {
          int v14 = *(_DWORD *)(a2 + 24);
          if (!v14 || (int v15 = *(_DWORD *)(a1 + 24)) == 0 || v14 == v15)
          {
            int v16 = *(_DWORD *)(a2 + 28);
            if (!v16 || (int v17 = *(_DWORD *)(a1 + 28)) == 0 || v16 == v17)
            {
              int v18 = *(_DWORD *)(a2 + 32);
              if (!v18 || (int v19 = *(_DWORD *)(a1 + 32)) == 0 || v18 == v19)
              {
                if (sub_2854C(a2, a1))
                {
                  unsigned __int8 v20 = (double *)(a1 + 40);
                  if (*(double *)a3 == 0.0 || *v20 == 0.0 || *(double *)a3 == *v20)
                  {
                    int v21 = *(_DWORD *)(a3 + 8);
                    if (!v21 || (int v22 = *(_DWORD *)(a1 + 48)) == 0 || v21 == v22)
                    {
                      int v23 = *(_DWORD *)(a3 + 16);
                      if (!v23 || (int v24 = *(_DWORD *)(a1 + 56)) == 0 || v23 == v24)
                      {
                        int v25 = *(_DWORD *)(a3 + 20);
                        if (!v25 || (int v26 = *(_DWORD *)(a1 + 60)) == 0 || v25 == v26)
                        {
                          int v27 = *(_DWORD *)(a3 + 24);
                          if (!v27 || (int v28 = *(_DWORD *)(a1 + 64)) == 0 || v27 == v28)
                          {
                            int v29 = *(_DWORD *)(a3 + 28);
                            if (!v29 || (int v30 = *(_DWORD *)(a1 + 68)) == 0 || v29 == v30)
                            {
                              int v31 = *(_DWORD *)(a3 + 32);
                              if ((!v31 || (int v32 = *(_DWORD *)(a1 + 72)) == 0 || v31 == v32)
                                && (sub_2854C(a3, (uint64_t)v20) & 1) != 0)
                              {
                                return 0LL;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  __int128 v34 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&inSourceFormat.mSampleRate = *(_OWORD *)a2;
  *(_OWORD *)&inSourceFormat.mBytesPerPacket = v34;
  *(void *)&inSourceFormat.mBitsPerChannel = *(void *)(a2 + 32);
  __int128 v35 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v36.mSampleRate = *(_OWORD *)a3;
  *(_OWORD *)&v36.mBytesPerPacket = v35;
  *(void *)&v36.mBitsPerChannel = *(void *)(a3 + 32);
  return sub_2FC98(a1, &inSourceFormat, &v36);
}

void sub_238850(std::string *a1, unsigned int **a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  int v4 = *a2;
  while (v4 != a2[1])
  {
    unsigned int v5 = *v4++;
    std::to_string(&v11, v5);
    if (v4 == a2[1]) {
      BOOL v6 = " }";
    }
    else {
      BOOL v6 = ", ";
    }
    int v7 = std::string::append(&v11, v6, 2uLL);
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t cap = v7->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      BOOL v9 = __p;
    }
    else {
      BOOL v9 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v10 = HIBYTE(cap);
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    std::string::append(a1, (const std::string::value_type *)v9, v10);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_238948( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

char *sub_238998(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  unsigned int v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *(char **)v7;
        BOOL v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        BOOL v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v7 = (char *)(a1 + 1);
LABEL_9:
    BOOL v9 = v7;
    int v7 = (char *)operator new(0x48uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 6) = v7 + 56;
    *(void *)int v7 = 0LL;
    *((void *)v7 + 1) = 0LL;
    *((void *)v7 + 2) = v9;
    const std::string::value_type *v6 = (uint64_t *)v7;
    std::string::size_type v10 = (uint64_t *)**a1;
    std::string v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      std::string v11 = *v6;
    }

    sub_7A420(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

uint64_t **sub_238A74(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v7 = a1 + 1;
LABEL_9:
    BOOL v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    char *v7 = 0LL;
    v7[1] = 0LL;
    v7[2] = v9;
    const std::string::value_type *v6 = (uint64_t *)v7;
    std::string::size_type v10 = (uint64_t *)**a1;
    std::string v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      std::string v11 = *v6;
    }

    sub_7A420(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

void sub_238B3C(void *a1)
{
  if (a1)
  {
    sub_238B3C(*a1);
    sub_238B3C(a1[1]);
    sub_32C8C((void *)a1[7]);
    operator delete(a1);
  }

uint64_t sub_238B7C()
{
  return 1987013737LL;
}

uint64_t sub_238B88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void sub_238B98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DC18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_238BA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DC18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_238BC8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_238BD8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_492790);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_492790))
    {
      uint64_t v1 = sub_753A8();
      sub_238C44(v1);
      __cxa_guard_release(&qword_492790);
    }
  }

void sub_238C2C(_Unwind_Exception *a1)
{
}

uint64_t sub_238C44(uint64_t result)
{
  switch((int)result)
  {
    case 125:
      return sub_238ECC(result);
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 136:
    case 137:
    case 142:
    case 143:
    case 144:
    case 145:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 178:
    case 181:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 194:
    case 195:
      goto LABEL_12;
    case 134:
    case 135:
    case 138:
    case 139:
    case 140:
    case 141:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 177:
    case 179:
    case 182:
    case 196:
      goto LABEL_2;
    case 180:
      goto LABEL_5;
    case 193:
      return sub_238ECC(24);
    default:
      if (((1LL << result) & 0x2FF0801E0600LL) != 0)
      {
LABEL_5:
        dword_492698 = 1;
        qword_4926A8 = 0LL;
        unk_4926B0 = 0LL;
        qword_4926A0 = 0LL;
        uint64_t v1 = operator new(8uLL);
        qword_4926A0 = (uint64_t)v1;
        void *v1 = 0LL;
        uint64_t result = (uint64_t)(v1 + 1);
        qword_4926A8 = result;
        unk_4926B0 = result;
        xmmword_4926B8 = 0u;
        unk_4926C8 = 0u;
        unk_4926D8 = 0u;
        strcpy((char *)&dword_4926E8, "tlfd");
        byte_4926F0 = 0;
        byte_492738 = 0;
        xmmword_492748 = 0u;
        unk_492758 = 0u;
        xmmword_492768 = 0u;
        unk_492778 = 0u;
        qword_492788 = 0LL;
      }

      else if (((1LL << result) & 0x400F7F000000LL) != 0)
      {
        return sub_238ECC(result);
      }

      else
      {
        if ((_DWORD)result)
        {
LABEL_11:
          if ((result - 4014) >= 2)
          {
LABEL_12:
            __int128 v2 = (os_log_t *)sub_138E8(13);
            uint64_t v3 = *v2;
            if (*v2)
            {
              if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
              {
                int v5 = 136315394;
                BOOL v6 = "ActuatorSettingsFactory_Aspen.cpp";
                __int16 v7 = 1024;
                int v8 = 159;
                _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Invalid Product Type",  (uint8_t *)&v5,  0x12u);
              }
            }

            exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Invalid Product Type");
          }
        }

void sub_238EB0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_238ECC(int a1)
{
  if ((v39 & 0x80u) == 0) {
    size_t v2 = v39;
  }
  else {
    size_t v2 = (size_t)v38[1];
  }
  uint64_t v3 = v36;
  sub_D0924((uint64_t)v36, v2 + 17);
  if (v37 < 0) {
    uint64_t v3 = (void **)v36[0];
  }
  if (v2)
  {
    if ((v39 & 0x80u) == 0) {
      int v4 = v38;
    }
    else {
      int v4 = (void **)v38[0];
    }
    memmove(v3, v4, v2);
  }

  strcpy((char *)v3 + v2, "_actuator_general");
  CFMutableStringRef v34 = sub_28A0D0();
  char v35 = 1;
  if (v37 >= 0) {
    int v5 = v36;
  }
  else {
    int v5 = (void **)v36[0];
  }
  sub_2FD190((os_log_s *)v40, (const char *)v5, (uint64_t *)&v34);
  if (v37 >= 0) {
    BOOL v6 = (char *)v36;
  }
  else {
    BOOL v6 = (char *)v36[0];
  }
  sub_239480((uint64_t)v27, v6);
  if (v37 >= 0) {
    __int16 v7 = v36;
  }
  else {
    __int16 v7 = (void **)v36[0];
  }
  sub_2FD7CC((uint64_t)&v44, (const char *)v7, 0, 0, (uint64_t)v40, 0x68617070u);
  sub_2FE37C((uint64_t)&v44, 2u, 1u);
  uint64_t v8 = sub_D1274((uint64_t)&v47, (uint64_t)&v44);
  BOOL v9 = sub_2FE168(v8);
  sub_D0C4C(v49);
  std::string::size_type v10 = (void **)v47;
  __int16 v47 = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_2FE1F0(v27, (uint64_t)v9);
  sub_D0C4C((void *)v45);
  std::string v11 = (void *)v44;
  *(void *)&__int128 v44 = 0LL;
  if (v11) {
    operator delete(v11);
  }
  if (v37 >= 0) {
    int v12 = v36;
  }
  else {
    int v12 = (void **)v36[0];
  }
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  int v46 = 1065353216;
  unsigned int v43 = 0;
  int v50 = 7;
  v51[0] = 1987013737LL;
  LODWORD(v47) = 1685090932;
  sub_2DC450((uint64_t)&v48, (uint64_t)&v50);
  sub_148DB8((uint64_t)&v44, (int)v47, &v47);
  sub_2DBF5C((uint64_t)&v48);
  sub_2DBF5C((uint64_t)&v50);
  sub_2FD930((uint64_t)&v44, (int *)&v43, (const char *)v12, 0, (uint64_t)v40, 1987013737);
  sub_2FDCC0((uint64_t)&v44, v43);
  int v41 = 7;
  uint64_t v42 = 1LL;
  int v50 = 64002;
  sub_2DC450((uint64_t)v51, (uint64_t)&v41);
  sub_149710((uint64_t)&v47, &v50, 1LL);
  sub_2FDDB8((uint64_t)&v44, (uint64_t)&v47);
  sub_D0C4C(v49);
  int v13 = (void **)v47;
  __int16 v47 = 0LL;
  if (v13) {
    operator delete(v13);
  }
  sub_2DBF5C((uint64_t)v51);
  sub_2DBF5C((uint64_t)&v41);
  sub_2FE37C((uint64_t)&v44, 1u, 1u);
  uint64_t v14 = sub_D1274((uint64_t)&v47, (uint64_t)&v44);
  int v15 = sub_2FE168(v14);
  sub_D0C4C(v49);
  int v16 = (void **)v47;
  __int16 v47 = 0LL;
  if (v16) {
    operator delete(v16);
  }
  sub_2FE1F0(v27, (uint64_t)v15);
  sub_D0C4C((void *)v45);
  int v17 = (void *)v44;
  *(void *)&__int128 v44 = 0LL;
  if (v17) {
    operator delete(v17);
  }
  dword_492698 = 1;
  qword_4926A8 = 0LL;
  unk_4926B0 = 0LL;
  qword_4926A0 = 0LL;
  int v18 = operator new(8uLL);
  qword_4926A0 = (uint64_t)v18;
  *int v18 = 0LL;
  qword_4926A8 = (uint64_t)(v18 + 1);
  unk_4926B0 = v18 + 1;
  sub_2394F8((uint64_t)&xmmword_4926B8, (uint64_t)v27);
  __int16 v47 = (char **)&v33;
  sub_178454((void ***)&v47);
  __int16 v47 = (char **)&v32;
  sub_178454((void ***)&v47);
  if (v31 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)&v29);
  if (v28 < 0) {
    operator delete(v27[3]);
  }
  __int16 v47 = v27;
  sub_1784C4((void ***)&v47);
  sub_19DFC((uint64_t)&v34);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  return sub_33EACC((uint64_t)v40, v19, v20, v21, v22, v23, v24, v25);
}

void sub_2392D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (qword_4926A0)
  {
    qword_4926A8 = qword_4926A0;
    operator delete((void *)qword_4926A0);
  }

  sub_239798((uint64_t)&a10);
  sub_19DFC((uint64_t)&a37);
  if (a44 < 0) {
    operator delete(__p);
  }
  sub_33EACC(v44 - 224, v46, v47, v48, v49, v50, v51, v52);
  _Unwind_Resume(a1);
}

uint64_t sub_2393DC(uint64_t a1, const char *a2)
{
  *(void *)a1 = CFStringCreateWithCString(0LL, a2, 0x600u);
  *(_BYTE *)(a1 + 8) = 1;
  *(void *)(a1 + 48) = 0LL;
  for (uint64_t i = 16LL; i != 48; i += 8LL)
    *(void *)(a1 + i) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  return a1;
}

void sub_23946C(_Unwind_Exception *a1)
{
}

uint64_t sub_239480(uint64_t a1, char *a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_7D084((void *)(a1 + 24), a2);
  strcpy((char *)(a1 + 48), "tlfd");
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + sub_19DFC(v37 - 192) = 0u;
  *(void *)(a1 + 208) = 0LL;
  return a1;
}

void sub_2394E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2394F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 != *(void *)a2)
  {
    sub_8D400((void *)a1, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
    *(void *)(a1 + 8) = sub_17BA18(a1 + 16, v4, v5, *(void **)(a1 + 8));
  }

  if (*(char *)(a2 + 47) < 0)
  {
    sub_24054((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + memset(buf, 0, 24) = v6;
  }

  int v7 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v7;
  sub_239814((char *)(a1 + 56), a2 + 56);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  if (*(char *)(a2 + 167) < 0)
  {
    sub_24054((_BYTE *)(a1 + 144), *(void **)(a2 + 144), *(void *)(a2 + 152));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v8;
  }

  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  uint64_t v9 = *(void *)(a2 + 168);
  uint64_t v10 = *(void *)(a2 + 176);
  if (v10 != v9)
  {
    sub_8D400((void *)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
    uint64_t v11 = *(void *)(a1 + 176);
    do
    {
      *(void *)uint64_t v11 = *(void *)v9;
      uint64_t v12 = *(void *)(v9 + 8);
      *(void *)(v11 + 8) = v12;
      if (v12)
      {
        int v13 = (unint64_t *)(v12 + 8);
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }

      *(_DWORD *)(v11 + 16) = *(_DWORD *)(v9 + 16);
      v9 += 24LL;
      v11 += 24LL;
    }

    while (v9 != v10);
    *(void *)(a1 + 176) = v11;
  }

  *(void *)(a1 + sub_19DFC(v37 - 192) = 0LL;
  *(void *)(a1 + sub_67FE8(v1 + 200) = 0LL;
  *(void *)(a1 + 208) = 0LL;
  uint64_t v16 = *(void *)(a2 + 192);
  uint64_t v15 = *(void *)(a2 + 200);
  if (v15 != v16)
  {
    sub_8D400((void *)(a1 + 192), 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3));
    uint64_t v17 = *(void *)(a1 + 200);
    do
    {
      *(void *)uint64_t v17 = *(void *)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      *(void *)(v17 + 8) = v18;
      if (v18)
      {
        uint64_t v19 = (unint64_t *)(v18 + 8);
        do
          unint64_t v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }

      *(_DWORD *)(v17 + 16) = *(_DWORD *)(v16 + 16);
      v16 += 24LL;
      v17 += 24LL;
    }

    while (v16 != v15);
    *(void *)(a1 + sub_67FE8(v1 + 200) = v17;
  }

  return a1;
}

void sub_239710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)v9;
  sub_1784C4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239798(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 192);
  sub_178454(&v3);
  uint64_t v3 = (void **)(a1 + 168);
  sub_178454(&v3);
  sub_830DC(a1 + 56);
  uint64_t v3 = (void **)a1;
  sub_1784C4(&v3);
  return a1;
}

char *sub_239814(char *__dst, uint64_t a2)
{
  *__dst = 0;
  __dst[72] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    sub_17B7BC(__dst, (__int128 *)a2);
    __dst[72] = 1;
  }

  return __dst;
}

void sub_239854(_Unwind_Exception *a1)
{
}

uint64_t sub_239870(uint64_t a1, int a2, CFDataRef *a3)
{
  switch(a2)
  {
    case 1635087726:
      CFDataRef v6 = CFDataCreate(0LL, *(const UInt8 **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
      uint64_t result = 0LL;
      *a3 = v6;
      break;
    case 1635148149:
      std::string __p = 0LL;
      __int128 v8 = 0LL;
      uint64_t v9 = 0LL;
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 32LL))(a1, &__p);
      *a3 = CFDataCreate(0LL, (const UInt8 *)__p, v8 - (_BYTE *)__p);
      if (__p)
      {
        __int128 v8 = __p;
        operator delete(__p);
      }

      return 0LL;
    case 1851878757:
      uint64_t v4 = *(const __CFData **)(a1 + 8);
      *a3 = v4;
      CFRetain(v4);
      return 0LL;
    default:
      return 1064333936LL;
  }

  return result;
}

void sub_239940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23995C(void *a1, int a2, CFTypeRef cf)
{
  if (a2 != 1635087726) {
    return 1064333936LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFDataGetTypeID()) {
    return 1886806380LL;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  unint64_t Length = CFDataGetLength((CFDataRef)cf);
  uint64_t v9 = (_BYTE *)a1[3];
  __int128 v8 = (_BYTE *)a1[4];
  int64_t v10 = v8 - v9;
  if (v8 == v9)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_7A87C();
    }
    uint64_t v11 = (char *)sub_8D44C(0xAAAAAAAAAAAAAAABLL * (v10 >> 3));
    memmove(v11, v9, v10);
    uint64_t v12 = &v11[8 * (v10 >> 3)];
  }

  if (Length > 0x17 || v11 < v12)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = &BytePtr[24 * (Length / 0x18)];
    uint64_t v16 = v11;
    while (1)
    {
      if (BytePtr >= v15)
      {
LABEL_16:
        (*(void (**)(void *, uint64_t))(*a1 + 88LL))(a1, v14);
        v16 += 24;
        goto LABEL_21;
      }

      if (v16 >= v12) {
        goto LABEL_17;
      }
      uint64_t v17 = *((void *)BytePtr + 2);
      if (*((void *)v16 + 2) != v17) {
        break;
      }
      BytePtr += 24;
      v16 += 24;
LABEL_20:
      uint64_t v14 = (v14 + 1);
LABEL_21:
      if (BytePtr >= v15 && v16 >= v12) {
        goto LABEL_23;
      }
    }

    if (v17) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, const UInt8 *))(*a1 + 80LL))(a1, v14, BytePtr);
    if ((_DWORD)v13) {
      goto LABEL_24;
    }
    BytePtr += 24;
    goto LABEL_20;
  }

void sub_239B0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239B24(void *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = (char *)a1[4];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-v4] >> 3);
  if (v5 >= a2)
  {
    unint64_t v6 = a3;
    uint64_t v9 = a2;
    int64_t v10 = (char *)(v4 + 24LL * a2);
    unint64_t v11 = a1[5];
    if ((unint64_t)v3 >= v11)
    {
      unint64_t v16 = v5 + 1;
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v4) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555LL) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        unint64_t v20 = (char *)sub_8D44C(v18);
      }

      else
      {
        unint64_t v20 = 0LL;
        uint64_t v19 = 0LL;
      }

      uint64_t v23 = &v20[24 * v9];
      uint64_t v24 = &v20[24 * v19];
      if (v19 == v9)
      {
        if (a2)
        {
          v23 -= 24 * ((unint64_t)(v9 + 1) >> 1);
        }

        else
        {
          uint64_t v23 = (char *)sub_8D44C(1uLL);
          uint64_t v24 = &v23[24 * v25];
          if (v20) {
            operator delete(v20);
          }
        }
      }

      __int128 v26 = *(_OWORD *)v6;
      *((void *)v23 + 2) = *(void *)(v6 + 16);
      *(_OWORD *)uint64_t v23 = v26;
      int v27 = (char *)a1[3];
      char v28 = v23;
      if (v27 != v10)
      {
        uint64_t v29 = v10;
        int v30 = v23;
        do
        {
          __int128 v31 = *(_OWORD *)(v29 - 24);
          char v28 = v30 - 24;
          *((void *)v30 - 1) = *((void *)v29 - 1);
          *(_OWORD *)(v30 - memset(buf, 0, 24) = v31;
          v29 -= 24;
          v30 -= 24;
        }

        while (v29 != v27);
      }

      uint64_t v32 = v23 + 24;
      uint64_t v33 = (char *)a1[4];
      int64_t v34 = v33 - v10;
      if (v33 != v10) {
        memmove(v32, v10, v33 - v10);
      }
      char v35 = (void *)a1[3];
      a1[3] = v28;
      a1[4] = &v32[v34];
      a1[5] = v24;
      if (v35) {
        operator delete(v35);
      }
    }

    else if (v10 == v3)
    {
      __int128 v22 = *(_OWORD *)a3;
      *((void *)v3 + 2) = *(void *)(a3 + 16);
      *(_OWORD *)uint64_t v3 = v22;
      a1[4] = v3 + 24;
    }

    else
    {
      uint64_t v12 = v10 + 24;
      uint64_t v13 = v3 - 24;
      uint64_t v14 = a1[4];
      while (v13 < v3)
      {
        __int128 v15 = *(_OWORD *)v13;
        *(void *)(v14 + 16) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v14 = v15;
        v14 += 24LL;
        v13 += 24;
      }

      a1[4] = v14;
      if (v3 != v12) {
        memmove(v10 + 24, v10, v3 - v12);
      }
      __int128 v21 = *(_OWORD *)v6;
      *((void *)v10 + 2) = *(void *)(v6 + 16);
      *(_OWORD *)int64_t v10 = v21;
    }
  }

  return 0LL;
}

void sub_239D6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_239D84(void *result, unsigned int a2)
{
  uint64_t v3 = result[3];
  uint64_t v2 = result[4];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) > a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3 + 24LL * a2;
    uint64_t v6 = v2 - (v5 + 24);
    if (v2 != v5 + 24) {
      uint64_t result = memmove((void *)v5, (const void *)(v5 + 24), v2 - (v5 + 24));
    }
    v4[4] = v5 + v6;
  }

  return result;
}

void *sub_239DF4(void *a1)
{
  *a1 = off_478260;
  AUPBUnregister(a1[2]);
  sub_239E48((uint64_t)a1, 0LL);
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_239E48(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = *(const void **)(a1 + 8);
  if (v4) {
    CFRelease(v4);
  }
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = &stru_486F70;
  }
  *(void *)(a1 + 8) = v5;
  CFRetain(v5);
  int v7 = 1851878757;
  return AUPBPropertiesChanged(*(void *)(a1 + 16), 1LL, &v7, 0LL, 0LL);
}

uint64_t sub_239EB8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
}

uint64_t sub_239EC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
}

uint64_t sub_239ED0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
}

uint64_t sub_239EDC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
}

uint64_t sub_239EE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
}

uint64_t sub_239EF4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
}

uint64_t sub_239F00(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
}

void sub_239F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        unint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1070;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetMultiChannelPreferenceUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

  sub_23CDE0(*(void *)(a1 + 88), a2, a3);
  uint64_t v8 = sub_138E8(10);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    uint64_t v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        unint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1074;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetMultiChannelPreferenceUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

uint64_t sub_23A09C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void sub_23A0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        unint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1124;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetHighQualityPCMPreferenceUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

  sub_23CDE0(*(void *)(a1 + 96), a2, a3);
  uint64_t v8 = sub_138E8(10);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    uint64_t v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        unint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1128;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetHighQualityPCMPreferenceUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

uint64_t sub_23A234(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_23A23C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v19 = 136316162;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 1157;
        __int16 v20 = 2048;
        unint64_t v21 = a1;
        __int16 v22 = 2048;
        unint64_t v23 = a2;
        __int16 v24 = 2048;
        uint64_t v25 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::AddHearingAidCompliancePreferenceUpdateListener(inProc %p, inClientData %p)",  v19,  0x30u);
      }
    }
  }

  uint64_t v8 = *(void **)(a1 + 280);
  if (v8)
  {
    uint64_t v9 = (void *)(a1 + 280);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = (void *)*v12;
    }

    while (*v12);
    if (v9 != (void *)(a1 + 280) && v9[4] <= a2)
    {
      int v13 = (os_log_t *)sub_138E8(10);
      __int16 v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v19 = 136315650;
          *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
          *(_WORD *)&v19[12] = 1024;
          *(_DWORD *)&v19[14] = 1159;
          __int16 v20 = 2048;
          unint64_t v21 = a2;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant registration for listener proc at %p will override previous listener",  v19,  0x1Cu);
        }
      }
    }
  }

  uint64_t v15 = operator new(0x70uLL);
  v15[2] = 0LL;
  *uint64_t v15 = off_478750;
  v15[1] = 0LL;
  sub_B1F7C((uint64_t)(v15 + 3), (uint64_t)"SettingListenerMutex");
  *(void *)uint64_t v19 = a2;
  *(void *)&v19[8] = v15;
  __int16 v16 = sub_23CEC8((uint64_t **)(a1 + 272), a2, (__int128 *)v19);
  if (*(void *)&v19[8]) {
    (*(void (**)(void))(**(void **)&v19[8] + 8LL))(*(void *)&v19[8]);
  }
  sub_23CDE0((uint64_t)v16[5], a2, a3);
  uint64_t v17 = sub_138E8(10);
  if ((*(_BYTE *)(v17 + 8) & 1) != 0)
  {
    __int16 v18 = *(os_log_s **)v17;
    if (*(void *)v17)
    {
      if (os_log_type_enabled(*(os_log_t *)v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v19 = 136316162;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 1163;
        __int16 v20 = 2048;
        unint64_t v21 = a1;
        __int16 v22 = 2048;
        unint64_t v23 = a2;
        __int16 v24 = 2048;
        uint64_t v25 = a3;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::AddHearingAidCompliancePreferenceUpdateListener(inProc %p, inClientData %p)",  v19,  0x30u);
      }
    }
  }

void sub_23A4DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A514(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_138E8(10);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        __int16 v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1169;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::RemoveHearingAidCompliancePreferenceUpdateListener(inProc %p)",  (uint8_t *)&v15,  0x26u);
      }
    }
  }

  uint64_t v6 = *(void **)(a1 + 280);
  if (!v6) {
    goto LABEL_16;
  }
  int v7 = (uint64_t *)(a1 + 280);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      int v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 != (uint64_t *)(a1 + 280) && v7[4] <= a2)
  {
    sub_23CE38((uint64_t **)(a1 + 272), v7);
  }

  else
  {
LABEL_16:
    BOOL v11 = (os_log_t *)sub_138E8(10);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315650;
      __int16 v16 = "SystemSettingsManager_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 1178;
      __int16 v19 = 2048;
      unint64_t v20 = a2;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "%25s:%-5d Proc at %p is not currently registered as a HAC listener. Ignoring.",  (uint8_t *)&v15,  0x1Cu);
    }
  }

  uint64_t v13 = sub_138E8(10);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    __int16 v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        __int16 v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1181;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::RemoveHearingAidCompliancePreferenceUpdateListener(inProc %p)",  (uint8_t *)&v15,  0x26u);
      }
    }
  }

uint64_t sub_23A744(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void sub_23A74C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v19 = 136316162;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 1221;
        __int16 v20 = 2048;
        unint64_t v21 = a1;
        __int16 v22 = 2048;
        unint64_t v23 = a2;
        __int16 v24 = 2048;
        uint64_t v25 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::AddANCPreferenceUpdateListener(inProc %p, inClientData %p)",  v19,  0x30u);
      }
    }
  }

  unint64_t v8 = *(void **)(a1 + 304);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 304);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unint64_t v8 = (void *)*v12;
    }

    while (*v12);
    if (v9 != (void *)(a1 + 304) && v9[4] <= a2)
    {
      uint64_t v13 = (os_log_t *)sub_138E8(10);
      __int16 v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v19 = 136315650;
          *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
          *(_WORD *)&v19[12] = 1024;
          *(_DWORD *)&v19[14] = 1223;
          __int16 v20 = 2048;
          unint64_t v21 = a2;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant registration for listener proc at %p will override previous listener",  v19,  0x1Cu);
        }
      }
    }
  }

  int v15 = operator new(0x70uLL);
  v15[2] = 0LL;
  *int v15 = off_478750;
  v15[1] = 0LL;
  sub_B1F7C((uint64_t)(v15 + 3), (uint64_t)"SettingListenerMutex");
  *(void *)__int16 v19 = a2;
  *(void *)&v19[8] = v15;
  __int16 v16 = sub_23CEC8((uint64_t **)(a1 + 296), a2, (__int128 *)v19);
  if (*(void *)&v19[8]) {
    (*(void (**)(void))(**(void **)&v19[8] + 8LL))(*(void *)&v19[8]);
  }
  sub_23CDE0((uint64_t)v16[5], a2, a3);
  uint64_t v17 = sub_138E8(10);
  if ((*(_BYTE *)(v17 + 8) & 1) != 0)
  {
    int v18 = *(os_log_s **)v17;
    if (*(void *)v17)
    {
      if (os_log_type_enabled(*(os_log_t *)v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v19 = 136316162;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 1227;
        __int16 v20 = 2048;
        unint64_t v21 = a1;
        __int16 v22 = 2048;
        unint64_t v23 = a2;
        __int16 v24 = 2048;
        uint64_t v25 = a3;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::AddANCPreferenceUpdateListener(inProc %p, inClientData %p)",  v19,  0x30u);
      }
    }
  }

void sub_23A9EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23AA24(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_138E8(10);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        __int16 v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1232;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::RemoveANCPreferenceUpdateListener(inProc %p)",  (uint8_t *)&v15,  0x26u);
      }
    }
  }

  uint64_t v6 = *(void **)(a1 + 304);
  if (!v6) {
    goto LABEL_16;
  }
  int v7 = (uint64_t *)(a1 + 304);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      int v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 != (uint64_t *)(a1 + 304) && v7[4] <= a2)
  {
    sub_23CE38((uint64_t **)(a1 + 296), v7);
  }

  else
  {
LABEL_16:
    BOOL v11 = (os_log_t *)sub_138E8(10);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315650;
      __int16 v16 = "SystemSettingsManager_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 1241;
      __int16 v19 = 2048;
      unint64_t v20 = a2;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "%25s:%-5d Proc at %p is not currently registered as a ANC listener. Ignoring.",  (uint8_t *)&v15,  0x1Cu);
    }
  }

  uint64_t v13 = sub_138E8(10);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    __int16 v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        __int16 v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1244;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::RemoveANCPreferenceUpdateListener(inProc %p)",  (uint8_t *)&v15,  0x26u);
      }
    }
  }

uint64_t sub_23AC54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_23AC5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_23AC64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_23AC6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_23AC74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_23AC7C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v18 = 136315906;
        *(void *)&uint64_t v18[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v18[12] = 1024;
        *(_DWORD *)&v18[14] = 1441;
        __int16 v19 = 2048;
        unint64_t v20 = a2;
        __int16 v21 = 2048;
        uint64_t v22 = a3;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p, inClientData %p", v18, 0x26u);
      }
    }
  }

  unint64_t v8 = *(void **)(a1 + 352);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 352);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unint64_t v8 = (void *)*v12;
    }

    while (*v12);
    if (v9 != (void *)(a1 + 352) && v9[4] <= a2)
    {
      uint64_t v13 = (os_log_t *)sub_138E8(10);
      __int16 v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v18 = 136315650;
          *(void *)&uint64_t v18[4] = "SystemSettingsManager_Aspen.cpp";
          *(_WORD *)&v18[12] = 1024;
          *(_DWORD *)&v18[14] = 1443;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant registration for listener proc at %p will override previous listener",  v18,  0x1Cu);
        }
      }
    }
  }

  int v15 = operator new(0x70uLL);
  v15[2] = 0LL;
  *int v15 = off_478750;
  v15[1] = 0LL;
  sub_B1F7C((uint64_t)(v15 + 3), (uint64_t)"SettingListenerMutex");
  *(void *)int v18 = a2;
  *(void *)&v18[8] = v15;
  __int16 v16 = sub_23CEC8((uint64_t **)(a1 + 344), a2, (__int128 *)v18);
  if (*(void *)&v18[8]) {
    (*(void (**)(void))(**(void **)&v18[8] + 8LL))(*(void *)&v18[8]);
  }
  return sub_23CDE0((uint64_t)v16[5], a2, a3);
}

void sub_23AE84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23AEBC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_138E8(10);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136315650;
        __int16 v12 = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1451;
        __int16 v15 = 2048;
        unint64_t v16 = a2;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p", (uint8_t *)&v11, 0x1Cu);
      }
    }
  }

  uint64_t v6 = *(void **)(a1 + 352);
  if (v6)
  {
    int v7 = (uint64_t *)(a1 + 352);
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = v6 + 1;
      }
      if (v9) {
        int v7 = v6;
      }
      uint64_t v6 = (void *)*v10;
    }

    while (*v10);
  }

uint64_t sub_23AFE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44);
}

void sub_23AFE8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v19 = 136316162;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 1187;
        __int16 v20 = 2048;
        unint64_t v21 = a1;
        __int16 v22 = 2048;
        unint64_t v23 = a2;
        __int16 v24 = 2048;
        uint64_t v25 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::AddLowPowerUpdateListener(inProc %p, inClientData %p)",  v19,  0x30u);
      }
    }
  }

  unint64_t v8 = *(void **)(a1 + 400);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 400);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unint64_t v8 = (void *)*v12;
    }

    while (*v12);
    if (v9 != (void *)(a1 + 400) && v9[4] <= a2)
    {
      __int16 v13 = (os_log_t *)sub_138E8(10);
      int v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v19 = 136315650;
          *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
          *(_WORD *)&v19[12] = 1024;
          *(_DWORD *)&v19[14] = 1190;
          __int16 v20 = 2048;
          unint64_t v21 = a2;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant registration for listener proc at %p will override previous listener",  v19,  0x1Cu);
        }
      }
    }
  }

  __int16 v15 = operator new(0x70uLL);
  v15[2] = 0LL;
  *__int16 v15 = off_478750;
  v15[1] = 0LL;
  sub_B1F7C((uint64_t)(v15 + 3), (uint64_t)"SettingListenerMutex");
  *(void *)__int16 v19 = a2;
  *(void *)&v19[8] = v15;
  unint64_t v16 = sub_23CEC8((uint64_t **)(a1 + 392), a2, (__int128 *)v19);
  if (*(void *)&v19[8]) {
    (*(void (**)(void))(**(void **)&v19[8] + 8LL))(*(void *)&v19[8]);
  }
  sub_23CDE0((uint64_t)v16[5], a2, a3);
  uint64_t v17 = sub_138E8(10);
  if ((*(_BYTE *)(v17 + 8) & 1) != 0)
  {
    int v18 = *(os_log_s **)v17;
    if (*(void *)v17)
    {
      if (os_log_type_enabled(*(os_log_t *)v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v19 = 136316162;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 1195;
        __int16 v20 = 2048;
        unint64_t v21 = a1;
        __int16 v22 = 2048;
        unint64_t v23 = a2;
        __int16 v24 = 2048;
        uint64_t v25 = a3;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::AddLowPowerModeUpdateListener(inProc %p, inClientData %p)",  v19,  0x30u);
      }
    }
  }

void sub_23B288( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23B2C0(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_138E8(10);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1201;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::RemoveLowPowerModeUpdateListener(inProc %p)",  (uint8_t *)&v15,  0x26u);
      }
    }
  }

  uint64_t v6 = *(void **)(a1 + 400);
  if (!v6) {
    goto LABEL_16;
  }
  int v7 = (uint64_t *)(a1 + 400);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      int v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 != (uint64_t *)(a1 + 400) && v7[4] <= a2)
  {
    sub_23CE38((uint64_t **)(a1 + 392), v7);
  }

  else
  {
LABEL_16:
    uint64_t v11 = sub_138E8(10);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      __int16 v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          int v15 = 136315650;
          unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
          __int16 v17 = 1024;
          int v18 = 1211;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Proc at %p is not currently registered as an LPM listener. Ignoring.",  (uint8_t *)&v15,  0x1Cu);
        }
      }
    }
  }

  uint64_t v13 = sub_138E8(10);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    int v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1215;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::RemoveLowPowerModeListener(inProc %p)",  (uint8_t *)&v15,  0x26u);
      }
    }
  }

void sub_23B4F8(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        int v7 = "SystemSettingsManager_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1357;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateLowPowerModeState()",  (uint8_t *)&v6,  0x1Cu);
      }
    }
  }

  uint64_t v4 = sub_138E8(10);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        int v7 = "SystemSettingsManager_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1368;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateLowPowerModeState()",  (uint8_t *)&v6,  0x1Cu);
      }
    }
  }

uint64_t sub_23B648(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_23B650(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

void sub_23B658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        uint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1516;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetExternalPowerSourceUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

  sub_23CDE0(*(void *)(a1 + 216), a2, a3);
  uint64_t v8 = sub_138E8(10);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    int v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        uint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1520;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetExternalPowerSourceUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

uint64_t sub_23B7E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

void sub_23B7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        uint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1526;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetReduceBassUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

  sub_23CDE0(*(void *)(a1 + 224), a2, a3);
  uint64_t v8 = sub_138E8(10);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    int v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        uint64_t v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1531;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetReduceBassUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

uint64_t sub_23B980()
{
  return *(void *)sub_2FC9D4();
}

uint64_t sub_23B99C(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 68));
  return v1 & 1;
}

uint64_t sub_23B9AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v18 = 136315906;
        *(void *)&uint64_t v18[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v18[12] = 1024;
        *(_DWORD *)&v18[14] = 1645;
        __int16 v19 = 2048;
        unint64_t v20 = a2;
        __int16 v21 = 2048;
        uint64_t v22 = a3;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p, inClientData %p", v18, 0x26u);
      }
    }
  }

  uint64_t v8 = *(void **)(a1 + 376);
  if (v8)
  {
    int v9 = (void *)(a1 + 376);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        int v9 = v8;
      }
      uint64_t v8 = (void *)*v12;
    }

    while (*v12);
    if (v9 != (void *)(a1 + 376) && v9[4] <= a2)
    {
      int v13 = (os_log_t *)sub_138E8(10);
      __int16 v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v18 = 136315650;
          *(void *)&uint64_t v18[4] = "SystemSettingsManager_Aspen.cpp";
          *(_WORD *)&v18[12] = 1024;
          *(_DWORD *)&v18[14] = 1647;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Redundant registration for listener proc at %p will override previous listener",  v18,  0x1Cu);
        }
      }
    }
  }

  uint64_t v15 = operator new(0x70uLL);
  v15[2] = 0LL;
  *uint64_t v15 = off_478750;
  v15[1] = 0LL;
  sub_B1F7C((uint64_t)(v15 + 3), (uint64_t)"SettingListenerMutex");
  *(void *)__int16 v18 = a2;
  *(void *)&v18[8] = v15;
  __int16 v16 = sub_23CEC8((uint64_t **)(a1 + 368), a2, (__int128 *)v18);
  if (*(void *)&v18[8]) {
    (*(void (**)(void))(**(void **)&v18[8] + 8LL))(*(void *)&v18[8]);
  }
  return sub_23CDE0((uint64_t)v16[5], a2, a3);
}

void sub_23BBB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BBEC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_138E8(10);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136315650;
        __int16 v12 = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1655;
        __int16 v15 = 2048;
        unint64_t v16 = a2;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p", (uint8_t *)&v11, 0x1Cu);
      }
    }
  }

  uint64_t v6 = *(void **)(a1 + 376);
  if (v6)
  {
    int v7 = (uint64_t *)(a1 + 376);
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = v6 + 1;
      }
      if (v9) {
        int v7 = v6;
      }
      uint64_t v6 = (void *)*v10;
    }

    while (*v10);
  }

BOOL sub_23BD10()
{
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"Assistant Enabled",  @"com.apple.assistant.support",  &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat) {
    return 0LL;
  }
  int v1 = AppBooleanValue;
  uint64_t v2 = (os_log_t *)sub_138E8(10);
  uint64_t v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      int v7 = "SystemSettingsManager_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 1678;
      __int16 v10 = 2080;
      int v11 = "com.apple.assistant.support/Assistant Enabled";
      __int16 v12 = 1024;
      int v13 = v1;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
    }
  }

  return v1 != 0;
}

uint64_t sub_23BE28(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 416);
}

uint64_t sub_23BE30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 417);
}

uint64_t sub_23BE38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void sub_23BE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(10);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        int v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1585;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetVibrationUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

  sub_23CDE0(*(void *)(a1 + 232), a2, a3);
  uint64_t v8 = sub_138E8(10);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    int v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136316162;
        int v11 = "SystemSettingsManager_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 1589;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetVibrationUpdateListener(inProc %p, inClientData %p)",  (uint8_t *)&v10,  0x30u);
      }
    }
  }

uint64_t sub_23BFD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_23BFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

BOOL sub_23BFE0(void *a1)
{
  uint64_t v2 = a1[56];
  if (v2) {
    char v3 = (*(uint64_t (**)(void))(*(void *)v2 + 16LL))(a1[56]) ^ 1;
  }
  else {
    char v3 = 1;
  }
  if (a1[53])
  {
    BOOL v4 = a1[54] != 0LL;
    if ((v3 & 1) != 0) {
      return v4;
    }
    goto LABEL_8;
  }

  BOOL v4 = 0LL;
  if ((v3 & 1) == 0) {
LABEL_8:
  }
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v4;
}

__n128 sub_23C05C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 448);
  if (v4)
  {
    int v5 = (*(uint64_t (**)(void))(*(void *)v4 + 16LL))(*(void *)(a1 + 448));
    __n128 result = *(__n128 *)(a1 + 424);
    *a2 = result;
    a2[1].n128_u64[0] = *(void *)(a1 + 440);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
    }
  }

  else
  {
    a2[1].n128_u64[0] = *(void *)(a1 + 440);
    __n128 result = *(__n128 *)(a1 + 424);
    *a2 = result;
  }

  return result;
}

uint64_t sub_23C0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 448);
  if (v8) {
    int v9 = (*(uint64_t (**)(void))(*(void *)v8 + 16LL))(*(void *)(a1 + 448));
  }
  else {
    int v9 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  char v11 = result;
  *(void *)(a1 + 4memset(buf, 0, 24) = a2;
  *(void *)(a1 + 432) = a3;
  *(void *)(a1 + 440) = a4;
  if (v9) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
  }
  if ((v11 & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
    if ((_DWORD)result)
    {
      uint64_t v12 = *(void *)(a1 + 448);
      if (v12) {
        int v13 = (*(uint64_t (**)(void))(*(void *)v12 + 16LL))(*(void *)(a1 + 448));
      }
      else {
        int v13 = 0;
      }
      __int16 v14 = (os_log_t *)sub_138E8(15);
      uint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = *(void *)(a1 + 472);
        int v27 = 136315650;
        char v28 = "SystemSettingsManager_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 1756;
        __int16 v31 = 2048;
        uint64_t v32 = v16;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "%25s:%-5d Dispatching %lu cached commands to the serializer (plus any others that come in before dispatching completes)",  (uint8_t *)&v27,  0x1Cu);
      }

      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
      if (!(_DWORD)result)
      {
        __int16 v24 = (os_log_t *)sub_138E8(13);
        uint64_t v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          int v27 = 136315394;
          char v28 = "SystemSettingsManager_Aspen.cpp";
          __int16 v29 = 1024;
          int v30 = 1759;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The serialization context is invalid; cannot di"
            "spatch commands",
            (uint8_t *)&v27,
            0x12u);
        }

        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_4865A0;
        exception[2] = 1852797029;
      }

      while (1)
      {
        if (!*(_BYTE *)(a1 + 480)) {
          return result;
        }
        uint64_t v17 = *(void *)(a1 + 448);
        int v18 = v17 ? (*(uint64_t (**)(void))(*(void *)v17 + 16LL))(*(void *)(a1 + 448)) : 0;
        uint64_t v19 = *(void *)(a1 + 472);
        if (v19) {
          break;
        }
        uint64_t v21 = 0LL;
        if (v18) {
          goto LABEL_25;
        }
LABEL_26:
        if (v21) {
          sub_23CCE4(v21);
        }
        uint64_t v23 = *(void *)(a1 + 448);
        if (v23) {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)v23 + 16LL))(*(void *)(a1 + 448));
        }
        else {
          uint64_t result = 0LL;
        }
        if (*(void *)(a1 + 472))
        {
          if ((_DWORD)result) {
LABEL_35:
          }
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
        }

        else
        {
          *(_BYTE *)(a1 + 480) = 0;
          if ((_DWORD)result) {
            goto LABEL_35;
          }
        }
      }

      unint64_t v20 = *(uint64_t **)(a1 + 464);
      uint64_t v21 = v20[2];
      uint64_t v22 = *v20;
      *(void *)(v22 + 8) = v20[1];
      *(void *)v20[1] = v22;
      *(void *)(a1 + 472) = v19 - 1;
      operator delete(v20);
      if (!v18) {
        goto LABEL_26;
      }
LABEL_25:
      (*(void (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
      goto LABEL_26;
    }
  }

  return result;
}

void sub_23C3FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23C464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 448);
  if (v4)
  {
    int v5 = (*(uint64_t (**)(void))(*(void *)v4 + 16LL))(*(void *)(a1 + 448));
    int v6 = v5;
    if (!*(_BYTE *)(a1 + 480))
    {
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
      }
      goto LABEL_10;
    }
  }

  else
  {
    if (!*(_BYTE *)(a1 + 480))
    {
LABEL_10:
      sub_23CCE4(a2);
      return;
    }

    int v6 = 0;
  }

  int v7 = operator new(0x18uLL);
  v7[1] = a1 + 456;
  v7[2] = a2;
  uint64_t v8 = *(void *)(a1 + 456);
  void *v7 = v8;
  *(void *)(v8 + 8) = v7;
  *(void *)(a1 + 456) = v7;
  ++*(void *)(a1 + 472);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
}

void sub_23C530(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23C558(uint64_t a1)
{
  uint64_t v1 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v2 = *(unsigned int *)(sub_2FC9D4() + 8);
  std::mutex::unlock(v1);
  return v2;
}

void sub_23C590(_Unwind_Exception *a1)
{
}

void sub_23C5A8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_23C5BC(a1);
  operator delete(v1);
}

uint64_t sub_23C5BC(uint64_t a1)
{
  *(void *)a1 = off_4782D0;
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    char v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v30 = 136315650;
        __int16 v31 = "SystemSettingsManager_Aspen.cpp";
        __int16 v32 = 1024;
        int v33 = 1017;
        __int16 v34 = 2048;
        uint64_t v35 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d +- SystemSettingsManager_Aspen[%p]::~SystemSettingsManager_Aspen()",  (uint8_t *)&v30,  0x1Cu);
      }
    }
  }

  std::mutex::~mutex((std::mutex *)(a1 + 488));
  sub_68314((void *)(a1 + 456));
  uint64_t v4 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_23C940(*(void **)(a1 + 400));
  sub_23C940(*(void **)(a1 + 376));
  sub_23C940(*(void **)(a1 + 352));
  sub_23C940(*(void **)(a1 + 328));
  sub_23C940(*(void **)(a1 + 304));
  sub_23C940(*(void **)(a1 + 280));
  uint64_t v5 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 224);
  *(void *)(a1 + 2memset(buf, 0, 24) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 200);
  *(void *)(a1 + sub_67FE8(v1 + 200) = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 192);
  *(void *)(a1 + sub_19DFC(v37 - 192) = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  uint64_t v25 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  uint64_t v26 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  uint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  uint64_t v28 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  return a1;
}

void sub_23C934(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_23C940(void *a1)
{
  if (a1)
  {
    sub_23C940(*a1);
    sub_23C940(a1[1]);
    uint64_t v2 = a1[5];
    a1[5] = 0LL;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    operator delete(a1);
  }

uint64_t sub_23C990(uint64_t a1)
{
  if (v16[0])
  {
    *(void *)AudioTimeStamp buf = CFStringCreateWithCString(0LL, "IO", 0x600u);
    buf[8] = 1;
    CFComparisonResult v2 = CFStringCompare(theString1[0], *(CFStringRef *)buf, 0LL);
    sub_19DFC((uint64_t)buf);
    if (v2)
    {
      *(void *)AudioTimeStamp buf = CFStringCreateWithCString(0LL, "Always", 0x600u);
      buf[8] = 1;
      BOOL v3 = CFStringCompare(theString1[0], *(CFStringRef *)buf, 0LL) == kCFCompareEqualTo;
      sub_19DFC((uint64_t)buf);
      int v4 = 2 * v3;
    }

    else
    {
      int v4 = 1;
    }
  }

  else
  {
    int v4 = 0;
  }

  uint64_t v5 = (os_log_t *)sub_138E8(10);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_7D084(__p, off_4787E8[v4]);
    uint64_t v7 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v19 = 1024;
    int v20 = 579;
    __int16 v21 = 2080;
    uint64_t v22 = "MaggieDebugLevel";
    __int16 v23 = 2080;
    uint64_t v24 = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t result = sub_19DFC((uint64_t)theString1);
  if (*(_DWORD *)(a1 + 48) != v4)
  {
    *(_DWORD *)(a1 + 48) = v4;
    uint64_t v9 = *(void **)(a1 + 344);
    uint64_t v10 = (void *)(a1 + 352);
    if (v9 != v10)
    {
      do
      {
        uint64_t result = sub_23CC04(v9[5]);
        uint64_t v11 = (void *)v9[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (void *)*v11;
          }

          while (v11);
        }

        else
        {
          do
          {
            uint64_t v12 = (void *)v9[2];
            BOOL v13 = *v12 == (void)v9;
            uint64_t v9 = v12;
          }

          while (!v13);
        }

        uint64_t v9 = v12;
      }

      while (v12 != v10);
    }
  }

  return result;
}

void sub_23CBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_23CC04(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
  int v4 = result;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 - 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    sub_34AA0(&v7, v2);
    uint64_t result = v5(v6);
    if (v8) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
    }
  }

  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  return result;
}

void sub_23CC9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a9 + 16LL))(a9);
  }
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CCE4(uint64_t a1)
{
  uint64_t v2 = sub_5954C();
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 312LL))(&v5);
  if (v6)
  {
    v6(a1, v7);
  }

  else
  {
    BOOL v3 = (os_log_t *)sub_138E8(15);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v9 = "SystemSettingsManager_Aspen.cpp";
      __int16 v10 = 1024;
      int v11 = 661;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot find valid serialization listener - abandoning command",  buf,  0x12u);
    }

    if (a1) {
      (*(void (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
    }
  }

uint64_t sub_23CDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 24;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
  *(void *)(v5 - 16) = a2;
  *(void *)(v5 - 8) = a3;
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }
  return result;
}

void sub_23CE38(uint64_t **a1, uint64_t *a2)
{
  BOOL v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      int v4 = v3;
      BOOL v3 = (uint64_t *)*v3;
    }

    while (v3);
  }

  else
  {
    uint64_t v5 = a2;
    do
    {
      int v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }

    while (!v6);
  }

  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_911E8(v7, a2);
  uint64_t v8 = a2[5];
  a2[5] = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  operator delete(a2);
}

uint64_t **sub_23CEC8(uint64_t **a1, unint64_t a2, __int128 *a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    __int128 v10 = *a3;
    *((void *)a3 + 1) = 0LL;
    *((_OWORD *)v7 + 2) = v10;
    uint64_t *v7 = 0LL;
    v7[1] = 0LL;
    v7[2] = v9;
    os_log_s *v6 = (uint64_t *)v7;
    int v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v6;
    }

    sub_7A420(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

uint64_t sub_23CF94(uint64_t a1)
{
  *(void *)a1 = off_478750;
  *(void *)(a1 + memset(buf, 0, 24) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 48));
  return a1;
}

void sub_23CFD8(char *a1)
{
  *(void *)a1 = off_478750;
  *((void *)a1 + 3) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 48));
  operator delete(a1);
}

void sub_23D01C(uint64_t a1)
{
}

uint64_t sub_23D024(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_478750;
  sub_B1F7C(a1 + 24, (uint64_t)"SettingListenerMutex");
  *(void *)a1 = off_478730;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a2;
  *(void *)(a1 + 128) = _Block_copy(a3);
  return a1;
}

void sub_23D0A0(_Unwind_Exception *a1)
{
  void *v1 = v3;
  sub_B1F00(v2);
  _Unwind_Resume(a1);
}

void sub_23D0B8(uint64_t a1)
{
}

void sub_23D0C0(uint64_t a1)
{
}

void sub_23D0C8(uint64_t a1)
{
}

void sub_23D0D0(uint64_t a1)
{
}

void sub_23D0D8(uint64_t a1)
{
}

void sub_23D0E0(uint64_t a1)
{
}

void sub_23D0E8(uint64_t a1)
{
}

void sub_23D0F0(uint64_t a1)
{
}

void sub_23D0F8(uint64_t a1)
{
}

void sub_23D100(uint64_t a1)
{
}

void sub_23D108(uint64_t a1)
{
}

void sub_23D110(uint64_t a1)
{
}

void sub_23D118(uint64_t a1)
{
}

void sub_23D120(uint64_t a1)
{
}

uint64_t sub_23D128(uint64_t a1)
{
  return sub_23C990(*(void *)(a1 + 32));
}

void sub_23D130(uint64_t a1)
{
}

void sub_23D138(uint64_t a1)
{
}

void sub_23D140(uint64_t a1)
{
}

void sub_23D148(uint64_t a1)
{
}

void sub_23D150(uint64_t a1)
{
}

void sub_23D158(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_t *)sub_138E8(10);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "SystemSettingsManager_Aspen.cpp";
    __int16 v6 = 1024;
    int v7 = 871;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating VolumeLimit state", (uint8_t *)&v4, 0x12u);
  }

  sub_23E2A8(v1);
}

void sub_23D21C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_t *)sub_138E8(10);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "SystemSettingsManager_Aspen.cpp";
    __int16 v6 = 1024;
    int v7 = 892;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating VolumeLimit state", (uint8_t *)&v4, 0x12u);
  }

  sub_23E2A8(v1);
}

BOOL sub_23D2E0(uint64_t a1)
{
  uint64_t v2 = *(const char **)(a1 + 120);
  uint64_t v3 = (int *)(a1 + 112);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000LL;
  handler[2] = sub_240FB4;
  handler[3] = &unk_478780;
  handler[4] = a1;
  return notify_register_dispatch(v2, v3, global_queue, handler) == 0;
}

void sub_23D36C(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v20 = 136315650;
        *(void *)&v20[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 1079;
        __int16 v23 = 2048;
        uint64_t v24 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateSilentModeState()",  v20,  0x1Cu);
      }
    }
  }

  uint64_t v4 = sub_240718(*(_DWORD *)(*(void *)(a1 + 80) + 112LL));
  int v5 = v4 != 0;
  if (*(_DWORD *)(a1 + 8) != v5)
  {
    *(_DWORD *)(a1 + 8) = v5;
    if (v4) {
      __int16 v6 = "enabled";
    }
    else {
      __int16 v6 = "disabled";
    }
    int v7 = (os_log_t *)sub_138E8(10);
    unint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v20 = 136315650;
      *(void *)&v20[4] = "SystemSettingsManager_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 1088;
      __int16 v23 = 2080;
      uint64_t v24 = v6;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Silent mode state updated. State is %s.", v20, 0x1Cu);
    }

    uint64_t v9 = sub_138E8(10);
    uint64_t v10 = sub_138E8(15);
    char v11 = 0;
    uint64_t v12 = 0LL;
    *(void *)int v20 = 0x100000002LL;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *(int *)&v20[4 * v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1LL;
      if ((v15 & 1) != 0)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_20;
      }
    }

    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
    if ((*(void *)(v9 + 8) & 1) != 0)
    {
LABEL_20:
      uint64_t v16 = *(os_log_s **)v9;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v20 = 136315650;
        *(void *)&v20[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 1092;
        __int16 v23 = 2080;
        uint64_t v24 = v6;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Queueing silent mode notification (%s).", v20, 0x1Cu);
      }
    }

void sub_23D690(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1102;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateMultiChannelPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.preferences-sounds");
  else {
    int v4 = 0;
  }
  int v17 = -1;
  if (!sub_14B98C(@"surround_sound", @"com.apple.preferences-sounds", &v17))
  {
    uint64_t v11 = sub_138E8(10);
    if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
      goto LABEL_18;
    }
    os_log_t v12 = *(os_log_t *)v11;
    if (!*(void *)v11 || !os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_18;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 294;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.preferences-sounds/surround_sound";
    unint64_t v8 = "%25s:%-5d No preference for %s. Using default.";
    uint64_t v9 = v12;
    os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
    goto LABEL_17;
  }

  int v5 = v17;
  if ((v17 - 3) >= 4)
  {
    __int16 v6 = (os_log_t *)sub_138E8(10);
    os_log_t v7 = *v6;
    if (!*v6 || !os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 288;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.preferences-sounds/surround_sound";
    unint64_t v8 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    uint64_t v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_17:
    _os_log_impl(&dword_0, v9, v10, v8, buf, 0x1Cu);
LABEL_18:
    int v5 = v4;
  }

  uint64_t v13 = (os_log_t *)sub_138E8(10);
  uint64_t v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 297;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.preferences-sounds/surround_sound";
    __int16 v24 = 1024;
    int v25 = v5;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
  }

  if (*(_DWORD *)(a1 + 12) != v5)
  {
    *(_DWORD *)(a1 + 12) = v5;
    sub_23CC04(*(void *)(a1 + 88));
  }

  uint64_t v15 = sub_138E8(10);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    uint64_t v16 = *(os_log_s **)v15;
    if (*(void *)v15)
    {
      if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1111;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateMultiChannelPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

void sub_23D9EC(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v24 = "SystemSettingsManager_Aspen.cpp";
        __int16 v25 = 1024;
        int v26 = 1134;
        __int16 v27 = 2048;
        uint64_t v28 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHighQualityPCMPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.preferences-sounds");
  int v22 = -1;
  if (!sub_14B98C(@"highQuality-enabled", @"com.apple.preferences-sounds", &v22))
  {
    uint64_t v10 = sub_138E8(10);
    uint64_t v4 = 1752260981LL;
    if ((*(_BYTE *)(v10 + 8) & 1) == 0) {
      goto LABEL_17;
    }
    os_log_t v11 = *(os_log_t *)v10;
    if (!*(void *)v10 || !os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 332;
    __int16 v27 = 2080;
    uint64_t v28 = "com.apple.preferences-sounds/highQuality-enabled";
    os_log_t v7 = "%25s:%-5d No preference for %s. Using default.";
    unint64_t v8 = v11;
    os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
LABEL_15:
    _os_log_impl(&dword_0, v8, v9, v7, buf, 0x1Cu);
    goto LABEL_17;
  }

  uint64_t v4 = 1752260981LL;
  if (v22)
  {
    if (v22 == 1) {
      goto LABEL_17;
    }
    int v5 = (os_log_t *)sub_138E8(10);
    os_log_t v6 = *v5;
    if (!*v5 || !os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 326;
    __int16 v27 = 2080;
    uint64_t v28 = "com.apple.preferences-sounds/highQuality-enabled";
    os_log_t v7 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    unint64_t v8 = v6;
    os_log_type_t v9 = OS_LOG_TYPE_ERROR;
    goto LABEL_15;
  }

  uint64_t v4 = 1752264550LL;
LABEL_17:
  os_log_t v12 = (os_log_t *)sub_138E8(10);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, v4);
    uint64_t v14 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 335;
    __int16 v27 = 2080;
    uint64_t v28 = "com.apple.preferences-sounds/highQuality-enabled";
    __int16 v29 = 2080;
    int v30 = v14;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }

  if (*(_DWORD *)(a1 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a1 + 16) = v4;
    sub_23CC04(*(void *)(a1 + 96));
    uint64_t v15 = sub_138E8(10);
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      uint64_t v16 = *(os_log_s **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, *(unsigned int *)(a1 + 16));
          int v17 = v21 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          __int16 v24 = "SystemSettingsManager_Aspen.cpp";
          __int16 v25 = 1024;
          int v26 = 1141;
          __int16 v27 = 2080;
          uint64_t v28 = (const char *)v17;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d mHighQualityPCMPrefState is now %s", buf, 0x1Cu);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  uint64_t v18 = sub_138E8(10);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
  {
    __int16 v19 = *(os_log_s **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v24 = "SystemSettingsManager_Aspen.cpp";
        __int16 v25 = 1024;
        int v26 = 1144;
        __int16 v27 = 2048;
        uint64_t v28 = (const char *)a1;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHighQualityPCMPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

void sub_23DE24(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        uint64_t v28 = "SystemSettingsManager_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 1250;
        __int16 v31 = 2048;
        __int16 v32 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHearingAidCompliancePreferenceState()",  buf,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  int v26 = -1;
  if (sub_14B98C(@"HearingAidCompliance", @"com.apple.Accessibility", &v26))
  {
    uint64_t v4 = 560488803LL;
    if (!v26) {
      goto LABEL_17;
    }
    if (v26 == 1)
    {
      uint64_t v4 = 543711587LL;
      goto LABEL_17;
    }

    uint64_t v10 = (os_log_t *)sub_138E8(10);
    os_log_t v11 = *v10;
    if (!*v10 || !os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    uint64_t v28 = "SystemSettingsManager_Aspen.cpp";
    __int16 v29 = 1024;
    int v30 = 364;
    __int16 v31 = 2080;
    __int16 v32 = "com.apple.Accessibility/HearingAidCompliance";
    os_log_t v7 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    unint64_t v8 = v11;
    os_log_type_t v9 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    uint64_t v5 = sub_138E8(10);
    uint64_t v4 = 560488803LL;
    if ((*(_BYTE *)(v5 + 8) & 1) == 0) {
      goto LABEL_17;
    }
    os_log_t v6 = *(os_log_t *)v5;
    if (!*(void *)v5 || !os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    uint64_t v28 = "SystemSettingsManager_Aspen.cpp";
    __int16 v29 = 1024;
    int v30 = 370;
    __int16 v31 = 2080;
    __int16 v32 = "com.apple.Accessibility/HearingAidCompliance";
    os_log_t v7 = "%25s:%-5d No preference for %s. Using default.";
    unint64_t v8 = v6;
    os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
  }

  _os_log_impl(&dword_0, v8, v9, v7, buf, 0x1Cu);
LABEL_17:
  os_log_t v12 = (os_log_t *)sub_138E8(10);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, v4);
    uint64_t v14 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    uint64_t v28 = "SystemSettingsManager_Aspen.cpp";
    __int16 v29 = 1024;
    int v30 = 373;
    __int16 v31 = 2080;
    __int16 v32 = "com.apple.Accessibility/HearingAidCompliance";
    __int16 v33 = 2080;
    __int16 v34 = v14;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  if (*(_DWORD *)(a1 + 20) != (_DWORD)v4)
  {
    *(_DWORD *)(a1 + 20) = v4;
    uint64_t v15 = *(void **)(a1 + 272);
    if (v15 != (void *)(a1 + 280))
    {
      do
      {
        sub_23CC04(v15[5]);
        uint64_t v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            int v17 = v16;
            uint64_t v16 = (void *)*v16;
          }

          while (v16);
        }

        else
        {
          do
          {
            int v17 = (void *)v15[2];
            BOOL v18 = *v17 == (void)v15;
            uint64_t v15 = v17;
          }

          while (!v18);
        }

        uint64_t v15 = v17;
      }

      while (v17 != (void *)(a1 + 280));
    }

    uint64_t v19 = sub_138E8(10);
    if ((*(_BYTE *)(v19 + 8) & 1) != 0)
    {
      __int16 v20 = *(os_log_s **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, *(unsigned int *)(a1 + 20));
          char v21 = v25 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v28 = "SystemSettingsManager_Aspen.cpp";
          __int16 v29 = 1024;
          int v30 = 1260;
          __int16 v31 = 2080;
          __int16 v32 = (const char *)v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d mHearingAidCompliancePrefState is now %s",  buf,  0x1Cu);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  uint64_t v22 = sub_138E8(10);
  if ((*(_BYTE *)(v22 + 8) & 1) != 0)
  {
    __int16 v23 = *(os_log_s **)v22;
    if (*(void *)v22)
    {
      if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        uint64_t v28 = "SystemSettingsManager_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 1263;
        __int16 v31 = 2048;
        __int16 v32 = (const char *)a1;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHearingAidCompliancePreferenceState()",  buf,  0x1Cu);
      }
    }
  }

void sub_23E2A8(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v60 = 1024;
        int v61 = 1373;
        __int16 v62 = 2048;
        *(void *)uint64_t v63 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateSystemAudioEffectsSettings()",  buf,  0x1Cu);
      }
    }
  }

  std::mutex::lock((std::mutex *)(a1 + 488));
  CFPreferencesAppSynchronize(@"com.apple.preferences-sounds");
  unsigned int v58 = -1;
  if (sub_14B98C(@"latenightmode", @"com.apple.preferences-sounds", &v58))
  {
    uint64_t v4 = v58;
    if (!v58)
    {
      os_log_t v5 = 0LL;
      goto LABEL_20;
    }

    if (v58 == 1)
    {
      uint64_t v4 = 1LL;
      os_log_t v5 = (os_log_t)(&dword_0 + 1);
      goto LABEL_20;
    }

    uint64_t v10 = (os_log_t *)sub_138E8(10);
    os_log_t v5 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v60 = 1024;
        int v61 = 151;
        __int16 v62 = 2080;
        *(void *)uint64_t v63 = "com.apple.preferences-sounds/latenightmode";
        os_log_t v7 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
        unint64_t v8 = v5;
        os_log_type_t v9 = OS_LOG_TYPE_ERROR;
        goto LABEL_17;
      }

      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v6 = sub_138E8(10);
    if ((*(_BYTE *)(v6 + 8) & 1) == 0) {
      goto LABEL_18;
    }
    os_log_t v5 = *(os_log_t *)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v60 = 1024;
        int v61 = 157;
        __int16 v62 = 2080;
        *(void *)uint64_t v63 = "com.apple.preferences-sounds/latenightmode";
        os_log_t v7 = "%25s:%-5d No preference for %s. Using default.";
        unint64_t v8 = v5;
        os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
LABEL_17:
        _os_log_impl(&dword_0, v8, v9, v7, buf, 0x1Cu);
      }

void sub_23EB78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_23EBD0(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1269;
        __int16 v25 = 2048;
        int v26 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateANCPreferenceState()",  (uint8_t *)&v21,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  LOBYTE(v21) = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"EarpieceNoiseCancellationPreference",  @"com.apple.Accessibility",  (Boolean *)&v21);
  if ((_BYTE)v21)
  {
    int v5 = AppBooleanValue == 0;
  }

  else
  {
    uint64_t v6 = sub_138E8(10);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      os_log_t v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v21 = 136315650;
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          __int16 v23 = 1024;
          int v24 = 395;
          __int16 v25 = 2080;
          int v26 = "com.apple.Accessibility/EarpieceNoiseCancellationPreference";
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d No preference for %s. Using default.",  (uint8_t *)&v21,  0x1Cu);
        }
      }
    }

    int v5 = 0;
  }

  unint64_t v8 = (os_log_t *)sub_138E8(10);
  os_log_type_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "Off";
    int v21 = 136315906;
    uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
    __int16 v23 = 1024;
    int v24 = 398;
    int v26 = "com.apple.Accessibility/EarpieceNoiseCancellationPreference";
    __int16 v25 = 2080;
    if (!v5) {
      uint64_t v10 = "On";
    }
    __int16 v27 = 2080;
    uint64_t v28 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", (uint8_t *)&v21, 0x26u);
  }

  if (*(_DWORD *)(a1 + 24) != v5)
  {
    *(_DWORD *)(a1 + memset(buf, 0, 24) = v5;
    os_log_t v11 = *(void **)(a1 + 296);
    if (v11 != (void *)(a1 + 304))
    {
      do
      {
        sub_23CC04(v11[5]);
        os_log_t v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            os_log_t v12 = (void *)*v12;
          }

          while (v12);
        }

        else
        {
          do
          {
            uint64_t v13 = (void *)v11[2];
            BOOL v14 = *v13 == (void)v11;
            os_log_t v11 = v13;
          }

          while (!v14);
        }

        os_log_t v11 = v13;
      }

      while (v13 != (void *)(a1 + 304));
    }

    uint64_t v15 = sub_138E8(10);
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      int v16 = *(os_log_s **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = "Off";
          int v18 = *(_DWORD *)(a1 + 24);
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          int v21 = 136315650;
          if (!v18) {
            uint64_t v17 = "On";
          }
          __int16 v23 = 1024;
          int v24 = 1279;
          __int16 v25 = 2080;
          int v26 = v17;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d mANCPrefState is now %s", (uint8_t *)&v21, 0x1Cu);
        }
      }
    }
  }

  uint64_t v19 = sub_138E8(10);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
  {
    __int16 v20 = *(os_log_s **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1282;
        __int16 v25 = 2048;
        int v26 = (const char *)a1;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateANCPreferenceState()",  (uint8_t *)&v21,  0x1Cu);
      }
    }
  }

void sub_23EF8C(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1288;
        __int16 v25 = 2048;
        int v26 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidRingtonePreferenceState()",  (uint8_t *)&v21,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  LOBYTE(v21) = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"HearingAidRingtoneStreamingPreference",  @"com.apple.Accessibility",  (Boolean *)&v21);
  if ((_BYTE)v21)
  {
    int v5 = AppBooleanValue == 0;
  }

  else
  {
    uint64_t v6 = sub_138E8(10);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      os_log_t v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v21 = 136315650;
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          __int16 v23 = 1024;
          int v24 = 420;
          __int16 v25 = 2080;
          int v26 = "com.apple.Accessibility/HearingAidRingtoneStreamingPreference";
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d No preference for %s. Using default.",  (uint8_t *)&v21,  0x1Cu);
        }
      }
    }

    int v5 = 0;
  }

  unint64_t v8 = (os_log_t *)sub_138E8(10);
  os_log_type_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "Do Not Play Ringtones To BTLE";
    int v21 = 136315906;
    uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
    __int16 v23 = 1024;
    int v24 = 423;
    int v26 = "com.apple.Accessibility/HearingAidRingtoneStreamingPreference";
    __int16 v25 = 2080;
    if (!v5) {
      uint64_t v10 = "Play Ringtones To BTLE";
    }
    __int16 v27 = 2080;
    uint64_t v28 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", (uint8_t *)&v21, 0x26u);
  }

  if (*(_DWORD *)(a1 + 28) != v5)
  {
    *(_DWORD *)(a1 + 28) = v5;
    os_log_t v11 = *(void **)(a1 + 320);
    if (v11 != (void *)(a1 + 328))
    {
      do
      {
        sub_23CC04(v11[5]);
        os_log_t v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            os_log_t v12 = (void *)*v12;
          }

          while (v12);
        }

        else
        {
          do
          {
            uint64_t v13 = (void *)v11[2];
            BOOL v14 = *v13 == (void)v11;
            os_log_t v11 = v13;
          }

          while (!v14);
        }

        os_log_t v11 = v13;
      }

      while (v13 != (void *)(a1 + 328));
    }

    uint64_t v15 = sub_138E8(10);
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      int v16 = *(os_log_s **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = "Do Not Play Ringtones To BTLE";
          int v18 = *(_DWORD *)(a1 + 28);
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          int v21 = 136315650;
          if (!v18) {
            uint64_t v17 = "Play Ringtones To BTLE";
          }
          __int16 v23 = 1024;
          int v24 = 1298;
          __int16 v25 = 2080;
          int v26 = v17;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d mBTLEHearingAidRingtonePrefState is now %s",  (uint8_t *)&v21,  0x1Cu);
        }
      }
    }
  }

  uint64_t v19 = sub_138E8(10);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
  {
    __int16 v20 = *(os_log_s **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1301;
        __int16 v25 = 2048;
        int v26 = (const char *)a1;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidRingtonePreferenceState()",  (uint8_t *)&v21,  0x1Cu);
      }
    }
  }

void sub_23F348(char *a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 136315650;
        uint64_t v15 = "SystemSettingsManager_Aspen.cpp";
        __int16 v16 = 1024;
        int v17 = 1307;
        __int16 v18 = 2048;
        uint64_t v19 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidSystemSoundsPreferenceState()",  (uint8_t *)&v14,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.HearingAids");
  LOBYTE(v14) = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"HearingAidSystemSoundsStream",  @"com.apple.HearingAids",  (Boolean *)&v14);
  if ((_BYTE)v14)
  {
    int v5 = AppBooleanValue == 0;
  }

  else
  {
    uint64_t v6 = sub_138E8(10);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      os_log_t v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v14 = 136315650;
          uint64_t v15 = "SystemSettingsManager_Aspen.cpp";
          __int16 v16 = 1024;
          int v17 = 445;
          __int16 v18 = 2080;
          uint64_t v19 = "com.apple.HearingAids/HearingAidSystemSoundsStream";
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d No preference for %s. Using default.",  (uint8_t *)&v14,  0x1Cu);
        }
      }
    }

    int v5 = 1;
  }

  unint64_t v8 = (os_log_t *)sub_138E8(10);
  os_log_type_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "Do Not Play System Sounds To BTLE";
    int v14 = 136315906;
    uint64_t v15 = "SystemSettingsManager_Aspen.cpp";
    __int16 v16 = 1024;
    int v17 = 448;
    uint64_t v19 = "com.apple.HearingAids/HearingAidSystemSoundsStream";
    __int16 v18 = 2080;
    if (!v5) {
      uint64_t v10 = "Play System Sounds To BTLE";
    }
    __int16 v20 = 2080;
    int v21 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", (uint8_t *)&v14, 0x26u);
  }

  if (*((_DWORD *)a1 + 8) != v5)
  {
    *((_DWORD *)a1 + 8) = v5;
    os_log_t v11 = operator new(0x10uLL);
    void v11[2] = 0;
    *(void *)os_log_t v11 = &off_474B90;
    (*(void (**)(char *))(*(void *)a1 + 328LL))(a1);
  }

  uint64_t v12 = sub_138E8(10);
  if ((*(_BYTE *)(v12 + 8) & 1) != 0)
  {
    uint64_t v13 = *(os_log_s **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 136315650;
        uint64_t v15 = "SystemSettingsManager_Aspen.cpp";
        __int16 v16 = 1024;
        int v17 = 1316;
        __int16 v18 = 2048;
        uint64_t v19 = a1;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidSystemSoundsPreferenceState()",  (uint8_t *)&v14,  0x1Cu);
      }
    }
  }

void sub_23F648(char *a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v20 = "SystemSettingsManager_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 1322;
        __int16 v23 = 2048;
        int v24 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHearingAidCallAudioRoutingPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.HearingAids");
  sub_7D084(&__p, "Automatic");
  if (sub_14B98C(@"HearingAidsCallAudioRoute", @"com.apple.HearingAids", &v18))
  {
    if (v18)
    {
      if (v18 == 1)
      {
        if (v17 < 0)
        {
          uint64_t v16 = 5LL;
          p_p = (char *)__p;
        }

        else
        {
          char v17 = 5;
          p_p = (char *)&__p;
        }

        strcpy(p_p, "Never");
        int v7 = 1;
        goto LABEL_21;
      }

void sub_23F9E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23FA14(char *a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v20 = "SystemSettingsManager_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 1337;
        __int16 v23 = 2048;
        int v24 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHearingAidMediaAudioRoutingPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.HearingAids");
  sub_7D084(&__p, "Automatic");
  if (sub_14B98C(@"HearingAidsMediaAudioRoute", @"com.apple.HearingAids", &v18))
  {
    if (v18)
    {
      if (v18 == 1)
      {
        if (v17 < 0)
        {
          uint64_t v16 = 5LL;
          p_p = (char *)__p;
        }

        else
        {
          char v17 = 5;
          p_p = (char *)&__p;
        }

        strcpy(p_p, "Never");
        int v7 = 1;
        goto LABEL_21;
      }

void sub_23FDB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23FDE0(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)qword_4927E8;
  uint64_t v3 = operator new(8uLL);
  *uint64_t v3 = a1;
  dispatch_async_f(v2, v3, (dispatch_function_t)sub_24088C);
}

void sub_23FE28(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        int v7 = "SystemSettingsManager_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1538;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateExternalPowerSourceState()",  (uint8_t *)&v6,  0x1Cu);
      }
    }
  }

  if (*(_DWORD *)(a1 + 56) != 2)
  {
    *(_DWORD *)(a1 + 56) = 2;
    sub_23CC04(*(void *)(a1 + 216));
  }

  uint64_t v4 = sub_138E8(10);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        int v7 = "SystemSettingsManager_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1562;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateExternalPowerSourceState()",  (uint8_t *)&v6,  0x1Cu);
      }
    }
  }

void sub_23FF94(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        __int16 v8 = "SystemSettingsManager_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 1595;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateVibrationState()",  (uint8_t *)&v7,  0x1Cu);
      }
    }
  }

  int v4 = sub_240718(*(_DWORD *)(*(void *)(a1 + 232) + 112LL)) != 0;
  if (*(_DWORD *)(a1 + 64) != v4)
  {
    *(_DWORD *)(a1 + 64) = v4;
    sub_23CC04(*(void *)(a1 + 232));
  }

  uint64_t v5 = sub_138E8(10);
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
  {
    int v6 = *(os_log_s **)v5;
    if (*(void *)v5)
    {
      if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        __int16 v8 = "SystemSettingsManager_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 1604;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateVibrationState()",  (uint8_t *)&v7,  0x1Cu);
      }
    }
  }

void sub_240110(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        int v24 = "SystemSettingsManager_Aspen.cpp";
        __int16 v25 = 1024;
        int v26 = 1626;
        __int16 v27 = 2048;
        uint64_t v28 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateVoiceOverEnabledState()",  buf,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"VoiceOverTouchEnabled",  @"com.apple.Accessibility",  &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat)
  {
    __int16 v9 = (unsigned __int8 *)(a1 + 68);
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(a1 + 68));
    if ((v11 & 1) == 0) {
      goto LABEL_25;
    }
    LOBYTE(v8) = 0;
    goto LABEL_13;
  }

  int v5 = AppBooleanValue;
  int v6 = (os_log_t *)sub_138E8(10);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 607;
    __int16 v27 = 2080;
    uint64_t v28 = "com.apple.Accessibility/VoiceOverTouchEnabled";
    __int16 v29 = 1024;
    int v30 = v5;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
  }

  BOOL v8 = v5 != 0;
  __int16 v9 = (unsigned __int8 *)(a1 + 68);
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 68));
  if (v8 != (v10 & 1))
  {
LABEL_13:
    atomic_store(v8, (unsigned __int8 *)(a1 + 68));
    uint64_t v12 = *(void **)(a1 + 368);
    if (v12 != (void *)(a1 + 376))
    {
      do
      {
        sub_23CC04(v12[5]);
        uint64_t v13 = (void *)v12[1];
        if (v13)
        {
          do
          {
            int v14 = v13;
            uint64_t v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            int v14 = (void *)v12[2];
            BOOL v15 = *v14 == (void)v12;
            uint64_t v12 = v14;
          }

          while (!v15);
        }

        uint64_t v12 = v14;
      }

      while (v14 != (void *)(a1 + 376));
    }

    uint64_t v16 = (os_log_t *)sub_138E8(10);
    char v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = "Enabled";
      unsigned __int8 v19 = atomic_load(v9);
      int v24 = "SystemSettingsManager_Aspen.cpp";
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      if ((v19 & 1) == 0) {
        int v18 = "Disabled";
      }
      __int16 v25 = 1024;
      int v26 = 1636;
      __int16 v27 = 2080;
      uint64_t v28 = v18;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VoiceOver is now %s", buf, 0x1Cu);
    }
  }

void sub_240440(uint64_t a1)
{
  uint64_t v2 = sub_138E8(10);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        int v14 = "SystemSettingsManager_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1609;
        __int16 v17 = 2048;
        int v18 = (const char *)a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateReduceBassState()",  buf,  0x1Cu);
      }
    }
  }

  CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
  if (sub_14B98C(@"EnableBassReduction", @"com.apple.audio.virtualaudio", &v12))
  {
    int v4 = v12 != 1;
  }

  else
  {
    uint64_t v5 = sub_138E8(10);
    if ((*(_BYTE *)(v5 + 8) & 1) != 0)
    {
      int v6 = *(os_log_s **)v5;
      if (*(void *)v5)
      {
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          int v14 = "SystemSettingsManager_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 641;
          __int16 v17 = 2080;
          int v18 = "com.apple.audio.virtualaudio/EnableBassReduction";
          _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", buf, 0x1Cu);
        }
      }
    }

    int v4 = 1;
  }

  int v7 = (os_log_t *)sub_138E8(10);
  BOOL v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = "Enabled";
    int v14 = "SystemSettingsManager_Aspen.cpp";
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    if (!v12) {
      __int16 v9 = "Disabled";
    }
    __int16 v15 = 1024;
    int v16 = 645;
    __int16 v17 = 2080;
    int v18 = "com.apple.audio.virtualaudio/EnableBassReduction";
    __int16 v19 = 2080;
    uint64_t v20 = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
  }

  if (*(_DWORD *)(a1 + 60) != v4)
  {
    *(_DWORD *)(a1 + 60) = v4;
    sub_23CC04(*(void *)(a1 + 224));
  }

  uint64_t v10 = sub_138E8(10);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
  {
    unsigned __int8 v11 = *(os_log_s **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        int v14 = "SystemSettingsManager_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1618;
        __int16 v17 = 2048;
        int v18 = (const char *)a1;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateReduceBassState()",  buf,  0x1Cu);
      }
    }
  }

uint64_t sub_240718(int a1)
{
  uint64_t state64 = 0LL;
  if (notify_get_state(a1, &state64))
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v7 = "SystemSettingsManager_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 754;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): notify_get_state() failed.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "notify_get_state() failed.");
  }

  return state64;
}

void sub_240818(_Unwind_Exception *a1)
{
}

void sub_240834()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4927F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_4927F0))
    {
      qword_4927E8 = (uint64_t)dispatch_queue_create("VirtualAudioCarDNDAssertStateQueue", 0LL);
      __cxa_guard_release(&qword_4927F0);
    }
  }

void sub_24088C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_138E8(10);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    int v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136315650;
        int v12 = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1497;
        __int16 v15 = 2048;
        int v16 = (const char *)v2;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateCarDNDAssertState()",  (uint8_t *)&v11,  0x1Cu);
      }
    }
  }

  sub_240834();
  dispatch_assert_queue_V2((dispatch_queue_t)qword_4927E8);
  if (*(_DWORD *)(v2 + 52) != 1)
  {
    *(_DWORD *)(v2 + 52) = 1;
    uint64_t v5 = (os_log_t *)sub_138E8(10);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = "Not Active";
        int v8 = *(_DWORD *)(v2 + 52);
        int v12 = "SystemSettingsManager_Aspen.cpp";
        int v11 = 136315650;
        if (!v8) {
          int v7 = "Active";
        }
        __int16 v13 = 1024;
        int v14 = 1504;
        __int16 v15 = 2080;
        int v16 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d mCarDNDAssertState is now %s",  (uint8_t *)&v11,  0x1Cu);
      }
    }
  }

  uint64_t v9 = sub_138E8(10);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    uint64_t v10 = *(os_log_s **)v9;
    if (*(void *)v9)
    {
      if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136315650;
        int v12 = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1508;
        __int16 v15 = 2048;
        int v16 = (const char *)v2;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateCarDNDAssertState()",  (uint8_t *)&v11,  0x1Cu);
      }
    }
  }

  operator delete(a1);
}

void sub_240AA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 1509;
      __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 1509;
        __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      __int16 v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 1509;
        __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x240A70LL);
}

uint64_t sub_240CF0()
{
  int v14 = -1;
  if (!sub_14B98C(@"enhancedialog", @"com.apple.preferences-sounds", &v14))
  {
    uint64_t v1 = sub_138E8(10);
    if ((*(_BYTE *)(v1 + 8) & 1) == 0) {
      goto LABEL_13;
    }
    os_log_t v2 = *(os_log_t *)v1;
    if (!*(void *)v1 || !os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_13;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    int v16 = "SystemSettingsManager_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 197;
    __int16 v19 = 2080;
    uint64_t v20 = "com.apple.preferences-sounds/enhancedialog";
    uint64_t v3 = "%25s:%-5d No preference for %s. Using default.";
    int v4 = v2;
    os_log_type_t v5 = OS_LOG_TYPE_DEBUG;
LABEL_12:
    _os_log_impl(&dword_0, v4, v5, v3, buf, 0x1Cu);
    goto LABEL_13;
  }

  if (!v14)
  {
LABEL_13:
    uint64_t v0 = 4LL;
    goto LABEL_14;
  }

  if (v14 != 1)
  {
    int v6 = (os_log_t *)sub_138E8(10);
    os_log_t v7 = *v6;
    if (!*v6 || !os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    int v16 = "SystemSettingsManager_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 190;
    __int16 v19 = 2080;
    uint64_t v20 = "com.apple.preferences-sounds/enhancedialog";
    uint64_t v3 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    int v4 = v7;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    goto LABEL_12;
  }

  uint64_t v0 = 5LL;
LABEL_14:
  int v8 = (os_log_t *)sub_138E8(10);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, v0);
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v16 = "SystemSettingsManager_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 201;
    __int16 v19 = 2080;
    uint64_t v20 = "com.apple.preferences-sounds/enhancedialog";
    __int16 v21 = 2080;
    int v22 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  return v0;
}

void *sub_240F5C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_4787B0;
  result[1] = v3;
  return result;
}

uint64_t sub_240F90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_4787B0;
  a2[1] = v2;
  return result;
}

void sub_240FAC(uint64_t a1)
{
}

uint64_t sub_240FB4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  v4[2] = sub_241018;
  uint64_t v4[3] = &unk_478760;
  v4[4] = v2;
  int v5 = a2;
  return sub_36C08((uint64_t)v4);
}

uint64_t sub_241018(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(a1 + 32) + 128LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 128LL),  *(unsigned int *)(a1 + 40));
}

void sub_241034(uint64_t a1)
{
  uint64_t v1 = (void *)sub_241048(a1);
  operator delete(v1);
}

uint64_t sub_241048(uint64_t a1)
{
  *(void *)a1 = off_478730;
  if (notify_cancel(*(_DWORD *)(a1 + 112)))
  {
    uint64_t v2 = (os_log_t *)sub_138E8(10);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        int v6 = "SystemSettingsManager_Aspen.cpp";
        __int16 v7 = 1024;
        int v8 = 746;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d notify_cancel() failed", (uint8_t *)&v5, 0x12u);
      }
    }
  }

  _Block_release(*(const void **)(a1 + 128));
  *(void *)a1 = off_478750;
  *(void *)(a1 + memset(buf, 0, 24) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 48));
  return a1;
}

void sub_241148(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_241160(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  AudioObjectID v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
  sub_F9584((uint64_t)v141, 1886216820LL, v3);
  (*(void (**)(_BYTE *__return_ptr))(**(void **)v2 + 128LL))(v152);
  char v149 = (__CFString *)CFStringCreateWithCString(0LL, "-btaudio", 0x600u);
  LOBYTE(v150) = 1;
  sub_1ACAAC((uint64_t)theString, (CFStringRef *)v152, (CFStringRef *)&v149);
  sub_19DFC((uint64_t)&v149);
  int v4 = (void *)sub_19DFC((uint64_t)v152);
  sub_48E98(v4, theString[0]);
  sub_7D084(&v149, "-tsco");
  if (v151 >= 0) {
    int v5 = (const std::string::value_type *)&v149;
  }
  else {
    int v5 = (const std::string::value_type *)v149;
  }
  if (v151 >= 0) {
    std::string::size_type v6 = HIBYTE(v151);
  }
  else {
    std::string::size_type v6 = (std::string::size_type)v150;
  }
  __int16 v7 = std::string::append((std::string *)v152, v5, v6);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t cap = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int16 v138 = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if (SHIBYTE(v151) < 0) {
    operator delete(v149);
  }
  if ((v156[3] & 0x80000000) != 0) {
    operator delete(*(void **)v152);
  }
  if ((byte_48E73B & 1) == 0)
  {
    if (sub_14B98C(@"AutoRouteToBluetoothSCO", @"com.apple.audio.virtualaudio", &v149))
    {
      uint64_t v9 = (os_log_t *)sub_138E8(13);
      uint64_t v10 = *v9;
      if (*v9)
      {
        BOOL v11 = os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT);
        int v12 = (int)v149;
        if (v11)
        {
          *(_DWORD *)uint64_t v152 = 136315906;
          *(void *)&v152[4] = "RunTimeDefaults.cpp";
          __int16 v153 = 1024;
          int v154 = 303;
          __int16 v155 = 2080;
          *(void *)uint64_t v156 = "AutoRouteToBluetoothSCO";
          *(_WORD *)&v156[8] = 1024;
          *(_DWORD *)&v156[10] = (_DWORD)v149;
          _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", v152, 0x22u);
        }
      }

      else
      {
        int v12 = (int)v149;
      }

      byte_48E73A = v12 != 0;
    }

    byte_48E73B = 1;
  }

  int v13 = byte_48E73A;
  uint64_t v14 = sub_138E8(17);
  uint64_t v15 = sub_138E8(28);
  char v16 = 0;
  uint64_t v17 = 0LL;
  *(void *)uint64_t v152 = 0x100000002LL;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = *(int *)&v152[4 * v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1LL;
    if ((v20 & 1) != 0) {
      goto LABEL_25;
    }
  }

  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
LABEL_25:
  __int16 v21 = *(os_log_s **)v14;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = v143;
    uint64_t v23 = v142;
    uint64_t v24 = v141[0];
    (*(void (**)(__CFString **__return_ptr))(**(void **)(a1 + 8) + 128LL))(&v149);
    if (v23) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = v24;
    }
    if (v22) {
      uint64_t v25 = v22;
    }
    *(_DWORD *)uint64_t v152 = 136316162;
    *(void *)&v152[4] = "BluetoothProfiles_Aspen.cpp";
    uint64_t v26 = "routable";
    __int16 v153 = 1024;
    int v154 = 567;
    *(void *)uint64_t v156 = v25;
    __int16 v155 = 2112;
    if (!v13) {
      uint64_t v26 = "non-routable";
    }
    *(_WORD *)&v156[8] = 2112;
    *(void *)&v156[10] = v149;
    __int16 v157 = 2080;
    uint64_t v158 = v26;
    _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a bluetooth headset input port with name %@ and UID %@, %s",  v152,  0x30u);
    sub_19DFC((uint64_t)&v149);
  }

  if (cap >= 0) {
    __int16 v27 = v138;
  }
  else {
    __int16 v27 = (void **)v138[0];
  }
  CFStringRef v134 = CFStringCreateWithCString(0LL, (const char *)v27, 0x600u);
  LOBYTE(v135) = 1;
  int v28 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492LL));
  __int16 v29 = (std::__shared_weak_count *)operator new(0x2B8uLL);
  v29->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0LL;
  v29->__vftable = (std::__shared_weak_count_vtbl *)off_478A78;
  uint64_t v31 = *(void *)(a1 + 8);
  sub_14FF7C((uint64_t)v152, 1886216820LL, v28);
  std::string::size_type v32 = v29 + 1;
  char v149 = 0LL;
  uint64_t v150 = 0LL;
  uint64_t v151 = 0LL;
  sub_224CC0( (uint64_t)&v29[1],  (uint64_t *)v152,  v31,  (uint64_t)&v149,  (uint64_t)v141,  (uint64_t *)&v134,  theString[0],  v13 != 0);
  sub_32C8C(*(void **)&v156[4]);
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)off_47CBC8;
  uint64_t v33 = sub_2F08F8((uint64_t)&v29[1]);
  if ((_DWORD)v33)
  {
    uint64_t v34 = sub_138E8(23);
    uint64_t v35 = sub_138E8(28);
    char v36 = 0;
    uint64_t v37 = 0LL;
    *(void *)uint64_t v152 = 0x100000002LL;
    uint64_t v38 = *(void *)(v34 + 8);
    while (1)
    {
      uint64_t v39 = *(int *)&v152[4 * v37];
      char v40 = v36;
      if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
        break;
      }
      char v36 = 1;
      uint64_t v37 = 1LL;
      if ((v40 & 1) != 0) {
        goto LABEL_45;
      }
    }

    if ((v38 & v39) == 0) {
      uint64_t v34 = v35;
    }
LABEL_45:
    char v41 = *(os_log_s **)v34;
    if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      shared_owners = (const __CFString *)v29[11].__shared_owners_;
      CFStringRef v147 = shared_owners;
      char shared_weak_owners = v29[11].__shared_weak_owners_;
      if (shared_weak_owners && shared_owners)
      {
        CFRetain(shared_owners);
        shared_owners = v147;
      }

      sub_48E98(&v149, shared_owners);
      int v43 = SHIBYTE(v151);
      uint64_t v44 = v149;
      sub_2CA1C(&__p, v33);
      uint64_t v45 = &v149;
      if (v43 < 0) {
        uint64_t v45 = (__CFString **)v44;
      }
      if (v146 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)uint64_t v152 = 136315906;
      *(void *)&v152[4] = "Port_BluetoothHFPInput_Aspen.cpp";
      __int16 v153 = 1024;
      int v154 = 87;
      __int16 v155 = 2080;
      *(void *)uint64_t v156 = v45;
      *(_WORD *)&v156[8] = 2080;
      *(void *)&v156[10] = p_p;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting sub port type for Bluetooth port %s: %s",  v152,  0x26u);
      if (v146 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v151) < 0) {
        operator delete(v149);
      }
      sub_19DFC((uint64_t)&v147);
    }

    ((void (*)(std::__shared_weak_count *, uint64_t))v32->__vftable[2].__get_deleter)(v29 + 1, v33);
  }

  char v136 = v29 + 1;
  uint64_t v137 = v29;
  uint64_t v47 = (std::__shared_weak_count *)v29[4].__shared_weak_owners_;
  if (!v47)
  {
    do
      unint64_t v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
    p_char shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
    do
      unint64_t v53 = __ldxr(p_shared_weak_owners);
    while (__stxr(v53 + 1, p_shared_weak_owners));
    v29[4].__shared_owners_ = (uint64_t)v32;
    v29[4].__shared_weak_owners_ = (uint64_t)v29;
    do
LABEL_71:
      unint64_t v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }

    goto LABEL_74;
  }

  if (v47->__shared_owners_ == -1)
  {
    do
      unint64_t v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
    os_log_t v49 = (unint64_t *)&v29->__shared_weak_owners_;
    do
      unint64_t v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v29[4].__shared_owners_ = (uint64_t)v32;
    v29[4].__shared_weak_owners_ = (uint64_t)v29;
    std::__shared_weak_count::__release_weak(v47);
    goto LABEL_71;
  }

LABEL_127:
  sub_19DFC((uint64_t)&v132);
  uint64_t v96 = (uint64_t)v136;
  sub_204854((uint64_t)v136, (uint64_t)v134);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 312LL))(*(void *)(a1 + 8)) & 0xFF00000000LL) != 0)
  {
    uint64_t v97 = *(void *)(a1 + 8);
    strcpy(v152, "rncebolg");
    v152[9] = 0;
    *(_WORD *)&v152[10] = 0;
    if (((*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v97 + 16LL))(v97, v152) & 1) == 0)
    {
      if (cap >= 0) {
        size_t v98 = HIBYTE(cap);
      }
      else {
        size_t v98 = (size_t)v138[1];
      }
      __int16 v99 = v152;
      sub_D0924((uint64_t)v152, v98 + 10);
      if (v156[3] < 0) {
        __int16 v99 = *(_BYTE **)v152;
      }
      if (v98)
      {
        if (cap >= 0) {
          unint64_t v100 = v138;
        }
        else {
          unint64_t v100 = (void **)v138[0];
        }
        memmove(v99, v100, v98);
      }

      strcpy(&v99[v98], "-reference");
      if (v156[3] >= 0) {
        __int16 v101 = v152;
      }
      else {
        __int16 v101 = *(const char **)v152;
      }
      std::string __p = (void *)CFStringCreateWithCString(0LL, v101, 0x600u);
      char v145 = 1;
      int v102 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492LL));
      sub_243658(&v149, *(void *)(a1 + 8), 1885890164LL, (uint64_t)v141, (uint64_t *)&__p, theString, 1, v102);
      sub_19DFC((uint64_t)&__p);
      std::string v103 = v149;
      sub_204854((uint64_t)v134, (uint64_t)v149);
      uint64_t v104 = v150;
      v131[0] = v103;
      v131[1] = v150;
      if (v150)
      {
        char v105 = (unint64_t *)&v150->__shared_owners_;
        do
          unint64_t v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }

      sub_243720(a1, v131);
      if (v104)
      {
        char v107 = (unint64_t *)&v104->__shared_owners_;
        do
          unint64_t v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }

      uint64_t v109 = v150;
      if (v150)
      {
        uint64_t v110 = (unint64_t *)&v150->__shared_owners_;
        do
          unint64_t v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }

      if ((v156[3] & 0x80000000) != 0) {
        operator delete(*(void **)v152);
      }
      uint64_t v96 = (uint64_t)v136;
    }
  }

  uint64_t v112 = v137;
  v130[0] = v96;
  v130[1] = v137;
  if (v137)
  {
    unint64_t v113 = (unint64_t *)&v137->__shared_owners_;
    do
      unint64_t v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }

  sub_243720(a1, v130);
  if (v112)
  {
    uint64_t v115 = (unint64_t *)&v112->__shared_owners_;
    do
      unint64_t v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

  uint64_t v117 = v135;
  v129[0] = v134;
  v129[1] = v135;
  if (v135)
  {
    __int128 v118 = (unint64_t *)&v135->__shared_owners_;
    do
      unint64_t v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }

  sub_243720(a1, v129);
  if (v117)
  {
    __int128 v120 = (unint64_t *)&v117->__shared_owners_;
    do
      unint64_t v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }

  __int128 v122 = v135;
  if (v135)
  {
    __int128 v123 = (unint64_t *)&v135->__shared_owners_;
    do
      unint64_t v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }

  uint64_t v125 = v137;
  if (v137)
  {
    uint64_t v126 = (unint64_t *)&v137->__shared_owners_;
    do
      unint64_t v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(v138[0]);
  }
  sub_1A6144(*(void **)(a1 + 8), 1668506479LL);
  sub_1A6144(*(void **)(a1 + 8), 1685283695LL);
  sub_19DFC((uint64_t)theString);
  sub_19DFC((uint64_t)&v143);
  sub_19DFC((uint64_t)&v142);
  sub_19DFC((uint64_t)v141);
  return 1LL;
}

    goto LABEL_129;
  }

void sub_241F64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, char a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, char a39)
{
  *(void *)(v39 + memset(buf, 0, 24) = &off_476B40;
  sub_225088(*(char **)(v39 + 672));
  sub_F9108(v40);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v39);
  operator delete(v42);
  sub_19DFC((uint64_t)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a28);
  sub_88540((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_2421A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  strcpy((char *)inAddress, "ocscbolg");
  BYTE9(inAddress[0]) = 0;
  WORD5(inAddress[0]) = 0;
  AudioObjectID v3 = (*(uint64_t (**)(void *))(*(void *)v2 + 120LL))(v2);
  AudioObjectRemovePropertyListener( v3,  (const AudioObjectPropertyAddress *)inAddress,  (AudioObjectPropertyListenerProc)sub_1A73C0,  v2);
  int v4 = *(void **)(a1 + 8);
  strcpy((char *)inAddress, "ocsdbolg");
  BYTE9(inAddress[0]) = 0;
  WORD5(inAddress[0]) = 0;
  AudioObjectID v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 120LL))(v4);
  AudioObjectRemovePropertyListener( v5,  (const AudioObjectPropertyAddress *)inAddress,  (AudioObjectPropertyListenerProc)sub_1A73C0,  v4);
  sub_2433A0((uint64_t)inAddress, (uint64_t)&qword_492868);
  sub_3710DC(&v20, *(void *)(a1 + 8), (uint64_t)inAddress);
  sub_EDD50(v22, &v20);
  sub_85B80(&v20);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v18);
  if (*(void *)&inAddress[0])
  {
    *((void *)&inAddress[0] + 1) = *(void *)&inAddress[0];
    operator delete(*(void **)&inAddress[0]);
  }

  for (uint64_t i = (uint64_t *)v22[1]; i != v22; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v7 = i[2];
    __int128 v8 = (std::__shared_weak_count *)i[3];
    uint64_t v20 = v7;
    __int16 v21 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      *((void *)&inAddress[0] + 1) = v8;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    else
    {
      *((void *)&inAddress[0] + 1) = 0LL;
    }

    *(void *)&inAddress[0] = v7;
    sub_243418(a1, (unint64_t *)inAddress);
    if (v8)
    {
      int v12 = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    uint64_t v14 = v21;
    if (v21)
    {
      uint64_t v15 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  sub_1BB88(v22);
}

void sub_242388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_85B80((uint64_t *)va1);
  sub_A0DB0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2423CC(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1835103843)
  {
    if (v2 != 1835103844 && v2 != 1987013732 && v2 != 1986290211) {
      return sub_1A4264(*(unsigned int **)(a1 + 8), a2);
    }
LABEL_14:
    AudioObjectID v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
    *(void *)&v9.mSelector = 0x6F757470766F6C64LL;
    v9.mElement = 0;
    return AudioObjectHasProperty(v7, &v9) != 0;
  }

  if (v2 == 1064725619)
  {
    int v3 = a2[1];
    int v4 = 1869968496;
    return v3 == v4;
  }

  if (v2 == 1684633187) {
    goto LABEL_14;
  }
  if (v2 != 1701015154) {
    return sub_1A4264(*(unsigned int **)(a1 + 8), a2);
  }
  int v3 = a2[1];
  int v4 = 1768845428;
  return v3 == v4;
}

BOOL sub_2424BC(uint64_t a1, int *a2)
{
  uint64_t v2 = 0LL;
  int v3 = *a2;
  if (*a2 <= 1835103843)
  {
    if (v3 != 1064725619 && v3 != 1684633187 && v3 != 1701015154) {
      return sub_1A4528(*(void *)(a1 + 8), a2);
    }
    return v2;
  }

  if (v3 == 1835103844 || v3 == 1986290211) {
    return v2;
  }
  if (v3 == 1987013732)
  {
    AudioObjectID v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
    *(void *)&v9.mSelector = 0x6F757470766F6C64LL;
    v9.mElement = 0;
    return AudioObjectHasProperty(v7, &v9) != 0;
  }

  return sub_1A4528(*(void *)(a1 + 8), a2);
}

uint64_t sub_24258C(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  AudioObjectID v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
  *(void *)&v13.mSelector = 0x6F757470766F6C64LL;
  v13.mElement = 0;
  Hasuint64_t Property = AudioObjectHasProperty(v8, &v13);
  int v10 = *a2;
  if (*a2 > 1835103843)
  {
    if (v10 != 1987013732)
    {
      if (v10 == 1986290211) {
        return 16 * (HasProperty != 0);
      }
      if (v10 != 1835103844) {
        return sub_1A45C0(*(void *)(a1 + 8), a2, a3, a4);
      }
    }

    return 4 * (HasProperty != 0);
  }

  uint64_t v11 = 4LL;
  if (v10 == 1064725619) {
    return v11;
  }
  if (v10 == 1684633187) {
    return 4 * (HasProperty != 0);
  }
  if (v10 != 1701015154) {
    return sub_1A45C0(*(void *)(a1 + 8), a2, a3, a4);
  }
  return v11;
}

void sub_2426A8(uint64_t a1, int *a2, UInt32 a3, const void *a4, UInt32 *a5, uint64_t a6)
{
  int v8 = *a2;
  if (*a2 <= 1835103843)
  {
    if (v8 != 1064725619)
    {
      if (v8 != 1684633187)
      {
        if (v8 == 1819046768)
        {
          *(_DWORD *)a6 = *(unsigned __int8 *)(a1 + 24);
          return;
        }

        goto LABEL_16;
      }

void sub_242A40(uint64_t *a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (*a2 == 1987013732)
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1) != a5)
    {
      UInt32 v23 = (os_log_t *)sub_138E8(13);
      float v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 757;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyVolumeDecibels",  (uint8_t *)buf,  0x12u);
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = 561211770;
    }

    float v8 = *a6;
    float v27 = *a6;
    uint64_t v9 = sub_138E8(17);
    uint64_t v10 = sub_138E8(28);
    char v11 = 0;
    uint64_t v12 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = (int)buf[v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1LL;
      if ((v15 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
LABEL_10:
    uint64_t v16 = sub_138E8(38);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v20 = (int)buf[v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0) {
        goto LABEL_16;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v9 = v16;
    }
LABEL_16:
    uint64_t v22 = *(os_log_s **)v9;
    if (v22)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void *__return_ptr))(*(void *)a1[1] + 128LL))(v26);
        buf[0] = 136315906;
        *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 761;
        __int16 v31 = 2048;
        double v32 = v8;
        __int16 v33 = 2112;
        uint64_t v34 = v26[0];
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting volume to %f dB on SCO device with UID %@",  (uint8_t *)buf,  0x26u);
        sub_19DFC((uint64_t)v26);
      }
    }

    strcpy((char *)buf, "dlovptuo");
    BYTE1(buf[2]) = 0;
    HIWORD(buf[2]) = 0;
    sub_1A5054(a1[1], buf, 0, 0LL, 4u, &v27);
    sub_67564((void *)(a1[1] + 632), (unsigned int *)&qword_492840);
  }

  else
  {
    sub_1A5054(a1[1], a2, a3, a4, a5, a6);
  }

void sub_242D64(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_242D70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v1 + 96LL))(v1, 0LL, 0LL);
  if (!v2)
  {
    char v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "BluetoothProfiles_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 63;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Bluetooth SCO device returned a NULL stream",  buf,  0x12u);
      }
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  int v3 = (*(uint64_t (**)(uint64_t, double **))(*(void *)v2 + 96LL))(v2, &v18);
  if (v3)
  {
    uint64_t v4 = sub_138E8(17);
    uint64_t v5 = sub_138E8(28);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_12;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_12:
    uint64_t v13 = *(os_log_s **)v4;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 128LL))(v17, v1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "BluetoothProfiles_Aspen.cpp";
      __int16 v22 = 1024;
      int v23 = 68;
      __int16 v24 = 1024;
      int v25 = v3;
      __int16 v26 = 2112;
      uint64_t v27 = v17[0];
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d getting stream formats from Bluetooth SCO device with UID %@",  buf,  0x22u);
      sub_19DFC((uint64_t)v17);
    }
  }

  if (v18 == v19)
  {
LABEL_19:
    uint64_t v15 = 0LL;
    if (!v18) {
      return v15;
    }
LABEL_20:
    uint64_t v19 = v18;
    operator delete(v18);
    return v15;
  }

  uint64_t v14 = v18;
  while (v14[5] <= 8000.0)
  {
    v14 += 7;
    if (v14 == v19) {
      goto LABEL_19;
    }
  }

  uint64_t v15 = 0x100000000LL;
  if (v18) {
    goto LABEL_20;
  }
  return v15;
}

void sub_242FD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_242FF4(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 16);
  uint64_t v4 = a1;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    char v6 = &v4;
    uint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_243050);
  }

uint64_t *sub_243044()
{
  return &qword_492868;
}

void sub_243050(uint64_t *****a1)
{
}

void sub_243070(uint64_t **a1, int a2, uint64_t a3)
{
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  int v6 = ((uint64_t (*)(uint64_t **, _DWORD *))(*a1)[4])(a1, buf);
  uint64_t v7 = a1[1];
  if (v6)
  {
    uint64_t v8 = operator new(0x1E8uLL);
    sub_1C88B8((uint64_t)v8, (uint64_t)v7, 1869968496LL, 0, 0, 74, 0LL);
    void *v8 = &off_478890;
    v8[10] = off_478960;
    *((_DWORD *)v8 + 120) = a2;
    sub_1D5AE0(v7, (uint64_t)v8);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v8 = operator new(0x50uLL);
    sub_EC558((uint64_t)v8);
    sub_1D5AE0(v7, (uint64_t)v8);
    char v10 = a1[1];
    uint64_t v9 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v9, 0);
    sub_1D5AE0(v10, (uint64_t)v9);
  }

  sub_1D55D4(a1[1], 1u, a3, (uint64_t)v8);
  sub_1D580C((uint64_t)a1[1], 1u, a3, (uint64_t)v9);
  uint64_t v11 = sub_138E8(17);
  uint64_t v12 = sub_138E8(28);
  char v13 = 0;
  uint64_t v14 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v15 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v16 = (int)buf[v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1LL;
    if ((v17 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v15 & v16) == 0) {
    uint64_t v11 = v12;
  }
LABEL_10:
  uint64_t v18 = *(os_log_s **)v11;
  if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, a3);
    if (v21 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
    __int16 v23 = 1024;
    int v24 = 232;
    __int16 v25 = 2080;
    __int16 v26 = v19;
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Created a bluetooth volume control for port type %s",  (uint8_t *)buf,  0x1Cu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_2432CC(_Unwind_Exception *a1)
{
}

void sub_2432FC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1C2A24(a1);
  operator delete(v1);
}

BOOL sub_243310(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)(a1 + 96) + 536LL));
  return v1 == *(_DWORD *)(a1 + 480) && sub_1C2978(a1);
}

uint64_t sub_243334(uint64_t a1)
{
  return sub_1C2A24(a1 - 80);
}

void sub_24333C(uint64_t a1)
{
  unsigned int v1 = (void *)sub_1C2A24(a1 - 80);
  operator delete(v1);
}

double sub_243354(uint64_t a1)
{
  *(void *)&v3.mSelector = 0x6F75747076646223LL;
  v3.mElement = 0;
  UInt32 v2 = 16;
  sub_232A4(a1, &v3, 0, 0LL, &v2, (float *)&v4);
  return v4;
}

uint64_t sub_2433A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_7A5B8((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  strcpy((char *)(a1 + 24), "cwdv");
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 3;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 48) = a1 + 56;
  *(_DWORD *)(a1 + 72) = 44739242;
  *(void *)(a1 + 80) = 0LL;
  return a1;
}

void sub_243418(uint64_t a1, unint64_t *a2)
{
  if (!sub_2435CC(a1, *(_DWORD *)(*a2 + 144)))
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v16 = "BluetoothProfiles_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 268;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  v14[0] = v5;
  v14[1] = (unint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  sub_36D53C(v4, v14);
  if (v6)
  {
    uint64_t v9 = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_2435A0(_Unwind_Exception *exception_object)
{
}

BOOL sub_2435CC(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v9 = 0LL;
  sub_7A5B8(&v9, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  if (v9 == v10)
  {
    BOOL v6 = 0LL;
    if (!v9) {
      return v6;
    }
    goto LABEL_9;
  }

  uint64_t v4 = v9 + 4;
  do
  {
    int v5 = *((_DWORD *)v4 - 1);
    BOOL v6 = v5 == a2;
    BOOL v7 = v5 == a2 || v4 == v10;
    v4 += 4;
  }

  while (!v7);
  if (v9) {
LABEL_9:
  }
    operator delete(v9);
  return v6;
}

void sub_243658( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, CFStringRef *a6, char a7, int a8)
{
  uint64_t v16 = operator new(0x2B8uLL);
  v16[1] = 0LL;
  v16[2] = 0LL;
  *uint64_t v16 = off_478A08;
  sub_2251F8(v16 + 3, a2, a3, a4, a5, a6, a7 != 0, a8);
  *a1 = v16 + 3;
  a1[1] = v16;
  sub_AFDAC((uint64_t)a1, v16 + 13, (uint64_t)(v16 + 3));
}

void sub_243708(_Unwind_Exception *a1)
{
}

void sub_243720(uint64_t a1, void *a2)
{
  if (!sub_2435CC(a1, *(_DWORD *)(*a2 + 144LL)))
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v17 = "BluetoothProfiles_Aspen.cpp";
      __int16 v18 = 1024;
      int v19 = 262;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = (void **)*a2;
  uint64_t v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  sub_3711D4(v4, &v14);
  unint64_t v8 = v15;
  if (v15)
  {
    uint64_t v9 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_2438AC(_Unwind_Exception *exception_object)
{
}

void sub_2438D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_478A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2438E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_478A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_243908(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_243918(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_478AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_243928(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_478AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_243948(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_243958(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_478A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_243968(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_478A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_243988(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_243998()
{
  return 0LL;
}

void sub_2439A4(uint64_t a1)
{
  unsigned int v1 = (void *)sub_2453A0(a1);
  operator delete(v1);
}

uint64_t sub_2439B8(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  AudioObjectID v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
  sub_245140(v2, v3);
  uint64_t v4 = *(void *)(a1 + 8);
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120LL))(v4);
  if ((sub_14E87C() & 1) != 0)
  {
    uint64_t v6 = 0x100000001LL;
  }

  else
  {
    v134[0] = v5;
    strcpy(buf, "pswsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v7 = sub_36EF4(v134, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
    *((void *)&v9 + 1) = v8;
    *(void *)&__int128 v9 = v7;
    uint64_t v6 = v9 >> 32;
  }

  *(_DWORD *)(v4 + 516) = v6;
  *(_BYTE *)(v4 + 520) = BYTE4(v6);
  uint64_t v10 = sub_138E8(17);
  uint64_t v11 = sub_138E8(28);
  char v12 = 0;
  uint64_t v13 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1LL;
    if ((v16 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_10:
  __int16 v17 = *(os_log_s **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120LL))(v4);
    if (*(_BYTE *)(v4 + 520) && *(_DWORD *)(v4 + 516)) {
      int v19 = "yes";
    }
    else {
      int v19 = "no";
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 394;
    __int16 v146 = 1024;
    *(_DWORD *)CFStringRef v147 = v18;
    *(_WORD *)&v147[4] = 2080;
    *(void *)&v147[6] = v19;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Software volume supported for Bluetooth device %u: %s",  buf,  0x22u);
  }

  AudioObjectID v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
  sub_F9584((uint64_t)v134, 1885892674LL, v20);
  (*(void (**)(_BYTE *__return_ptr))(**(void **)(a1 + 8) + 128LL))(buf);
  uint64_t inAddress = (uint64_t)CFStringCreateWithCString(0LL, "-btaudio", 0x600u);
  LOBYTE(inAddress_8) = 1;
  sub_1ACAAC((uint64_t)theString, (CFStringRef *)buf, (CFStringRef *)&inAddress);
  sub_19DFC((uint64_t)&inAddress);
  char v21 = (void *)sub_19DFC((uint64_t)buf);
  sub_48E98(v21, theString[0]);
  sub_7D084(&inAddress, "-tacl");
  if (v144 >= 0) {
    p_uint64_t inAddress = (const std::string::value_type *)&inAddress;
  }
  else {
    p_uint64_t inAddress = (const std::string::value_type *)inAddress;
  }
  if (v144 >= 0) {
    std::string::size_type v23 = HIBYTE(v144);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)inAddress_8;
  }
  int v24 = std::string::append((std::string *)buf, p_inAddress, v23);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  int64_t cap = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)char v131 = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)inAddress);
  }
  if ((v147[3] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ((byte_48E73D & 1) == 0)
  {
    if (sub_14B98C(@"AutoRouteToBluetoothA2DP", @"com.apple.audio.virtualaudio", &inAddress))
    {
      __int16 v26 = (os_log_t *)sub_138E8(13);
      uint64_t v27 = *v26;
      if (*v26)
      {
        BOOL v28 = os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT);
        int v29 = inAddress;
        if (v28)
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 328;
          __int16 v146 = 2080;
          *(void *)CFStringRef v147 = "AutoRouteToBluetoothA2DP";
          *(_WORD *)&v147[8] = 1024;
          *(_DWORD *)&v147[10] = inAddress;
          _os_log_impl(&dword_0, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }

      else
      {
        int v29 = inAddress;
      }

      byte_48E73C = v29 != 0;
    }

    byte_48E73D = 1;
  }

  int v30 = byte_48E73C;
  uint64_t v31 = sub_138E8(17);
  uint64_t v32 = sub_138E8(28);
  char v33 = 0;
  uint64_t v34 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v35 = *(void *)(v31 + 8);
  while (1)
  {
    uint64_t v36 = *(int *)&buf[4 * v34];
    char v37 = v33;
    if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
      break;
    }
    char v33 = 1;
    uint64_t v34 = 1LL;
    if ((v37 & 1) != 0) {
      goto LABEL_41;
    }
  }

  if ((v35 & v36) == 0) {
    uint64_t v31 = v32;
  }
LABEL_41:
  uint64_t v38 = *(os_log_s **)v31;
  if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v39 = v136;
    uint64_t v40 = v135;
    uint64_t v41 = *(void *)v134;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 128LL))(&inAddress);
    if (v40) {
      uint64_t v42 = v40;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v39) {
      uint64_t v42 = v39;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "BluetoothProfiles_Aspen.cpp";
    int v43 = "routable";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 321;
    *(void *)CFStringRef v147 = v42;
    __int16 v146 = 2112;
    if (!v30) {
      int v43 = "non-routable";
    }
    *(_WORD *)&v147[8] = 2112;
    *(void *)&v147[10] = inAddress;
    __int16 v148 = 2080;
    char v149 = v43;
    _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a bluetooth A2DP headphones port with name %@ and UID %@, %s",  buf,  0x30u);
    sub_19DFC((uint64_t)&inAddress);
  }

  if (cap >= 0) {
    uint64_t v44 = v131;
  }
  else {
    uint64_t v44 = (void **)v131[0];
  }
  CFStringRef v127 = CFStringCreateWithCString(0LL, (const char *)v44, 0x600u);
  char v128 = 1;
  int v45 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492LL));
  uint64_t v46 = (std::__shared_weak_count *)operator new(0x2C8uLL);
  v46->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
  v46->__shared_weak_owners_ = 0LL;
  v46->__vftable = (std::__shared_weak_count_vtbl *)off_478A40;
  uint64_t v48 = *(void *)(a1 + 8);
  sub_14FF7C((uint64_t)buf, 1885892674LL, v45);
  os_log_t v49 = v46 + 1;
  uint64_t inAddress = 0LL;
  inAddress_8 = 0LL;
  uint64_t v144 = 0LL;
  sub_224CC0( (uint64_t)&v46[1],  (uint64_t *)buf,  v48,  (uint64_t)&inAddress,  (uint64_t)v134,  (uint64_t *)&v127,  theString[0],  v30 != 0);
  sub_32C8C(*(void **)&v147[4]);
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)off_482EA0;
  int v50 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 120LL))(v48);
  CFStringRef v51 = CFStringCreateWithBytes(0LL, (const UInt8 *)"", 0LL, 0x8000100u, 0);
  if (!v51)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  os_log_type_t v52 = (const __CFString **)&v46[29];
  LODWORD(__p) = v50;
  uint64_t inAddress = 0x676C6F6264706964LL;
  LODWORD(inAddress_8) = 0;
  sub_15AC6C((uint64_t)buf, (AudioObjectID *)&__p, (AudioObjectPropertyAddress *)&inAddress);
  LOBYTE(inAddress) = 0;
  LOBYTE(inAddress_8) = 0;
  if (buf[16])
  {
    uint64_t inAddress = *(void *)&buf[8];
    *(void *)&buf[8] = 0LL;
    LOBYTE(inAddress_8) = 1;
  }

  sub_D9A9C((uint64_t)&buf[8]);
  sub_15AD84(&v46[29].__vftable, (uint64_t)&inAddress, v51);
  sub_D9A9C((uint64_t)&inAddress);
  CFRelease(v51);
  else {
    char v53 = 1;
  }
  LOBYTE(v46[29].__shared_owners_) = v53;
  BYTE1(v46[29].__shared_owners_) = 0;
  AudioObjectID v54 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 120LL))(v48);
  unint64_t v55 = sub_1A6D54(v54);
  BOOL v57 = (v56 & 0xFF00000000LL) == 0 || v55 == 0x100000001LL || (_DWORD)v55 == 1 || HIDWORD(v55) == 1;
  BYTE2(v46[29].__shared_owners_) = v57;
  uint64_t v59 = ((uint64_t (*)(std::__shared_weak_count *))v46[1].__vftable[13].__on_zero_shared_weak)(&v46[1]);
  if ((_DWORD)v59)
  {
    uint64_t v60 = sub_138E8(23);
    uint64_t v61 = sub_138E8(28);
    char v62 = 0;
    uint64_t v63 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v64 = *(void *)(v60 + 8);
    while (1)
    {
      uint64_t v65 = *(int *)&buf[4 * v63];
      char v66 = v62;
      if (((v64 & v65) != 0) != ((*(void *)(v61 + 8) & v65) != 0)) {
        break;
      }
      char v62 = 1;
      uint64_t v63 = 1LL;
      if ((v66 & 1) != 0) {
        goto LABEL_76;
      }
    }

    if ((v64 & v65) == 0) {
      uint64_t v60 = v61;
    }
LABEL_76:
    char v67 = *(os_log_s **)v60;
    if (v67 && os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      shared_owners = (const __CFString *)v46[11].__shared_owners_;
      CFStringRef v140 = shared_owners;
      char shared_weak_owners = v46[11].__shared_weak_owners_;
      if (shared_weak_owners && shared_owners)
      {
        CFRetain(shared_owners);
        shared_owners = v140;
      }

      sub_48E98(&inAddress, shared_owners);
      int v69 = SHIBYTE(v144);
      uint64_t v70 = inAddress;
      sub_2CA1C(&__p, v59);
      char v71 = &inAddress;
      if (v69 < 0) {
        char v71 = (uint64_t *)v70;
      }
      if (v139 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 112;
      __int16 v146 = 2080;
      *(void *)CFStringRef v147 = v71;
      *(_WORD *)&v147[8] = 2080;
      *(void *)&v147[10] = p_p;
      _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting sub port type for Bluetooth port %s: %s",  buf,  0x26u);
      if (v139 < 0) {
        operator delete(__p);
      }
      os_log_type_t v52 = (const __CFString **)&v46[29];
      if (SHIBYTE(v144) < 0) {
        operator delete((void *)inAddress);
      }
      sub_19DFC((uint64_t)&v140);
    }

    ((void (*)(std::__shared_weak_count *, uint64_t))v49->__vftable[2].__get_deleter)(v46 + 1, v59);
  }

  uint64_t v73 = sub_138E8(28);
  uint64_t v74 = sub_138E8(23);
  char v75 = 0;
  uint64_t v76 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v77 = *(void *)(v73 + 8);
  while (1)
  {
    uint64_t v78 = *(int *)&buf[4 * v76];
    char v79 = v75;
    if (((v77 & v78) != 0) != ((*(void *)(v74 + 8) & v78) != 0)) {
      break;
    }
    char v75 = 1;
    uint64_t v76 = 1LL;
    if ((v79 & 1) != 0) {
      goto LABEL_98;
    }
  }

  if ((v77 & v78) == 0) {
    uint64_t v73 = v74;
  }
LABEL_98:
  uint64_t v80 = *(os_log_s **)v73;
  if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    int v81 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 120LL))(v48);
    if (((unsigned int (*)(std::__shared_weak_count *))v49->__vftable[10].__get_deleter)(v46 + 1))
    {
      if (!*v52)
      {
        unint64_t v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v124, "Could not construct");
      }

      sub_48100((uint64_t)&inAddress, *v52);
      if (v144 >= 0) {
        char v82 = &inAddress;
      }
      else {
        char v82 = (uint64_t *)inAddress;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 116;
      __int16 v146 = 1024;
      *(_DWORD *)CFStringRef v147 = v81;
      *(_WORD *)&v147[4] = 2080;
      *(void *)&v147[6] = v82;
      _os_log_impl(&dword_0, v80, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
      if (SHIBYTE(v144) < 0) {
        operator delete((void *)inAddress);
      }
    }

    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 116;
      __int16 v146 = 1024;
      *(_DWORD *)CFStringRef v147 = v81;
      *(_WORD *)&v147[4] = 2080;
      *(void *)&v147[6] = "not supported";
      _os_log_impl(&dword_0, v80, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
    }
  }

  uint64_t v83 = sub_138E8(28);
  uint64_t v84 = sub_138E8(23);
  char v85 = 0;
  uint64_t v86 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v87 = *(void *)(v83 + 8);
  while (1)
  {
    uint64_t v88 = *(int *)&buf[4 * v86];
    char v89 = v85;
    if (((v87 & v88) != 0) != ((*(void *)(v84 + 8) & v88) != 0)) {
      break;
    }
    char v85 = 1;
    uint64_t v86 = 1LL;
    if ((v89 & 1) != 0) {
      goto LABEL_114;
    }
  }

  if ((v87 & v88) == 0) {
    uint64_t v83 = v84;
  }
LABEL_114:
  char v90 = *(os_log_s **)v83;
  if (v90 && os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
  {
    int v91 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 120LL))(v48);
    unsigned __int8 v92 = atomic_load((unsigned __int8 *)&v46[29].__shared_owners_ + 2);
    __int16 v93 = "yes";
    *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
    *(_DWORD *)&buf[14] = 118;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(_WORD *)&_BYTE buf[12] = 1024;
    if ((v92 & 1) == 0) {
      __int16 v93 = "no";
    }
    __int16 v146 = 1024;
    *(_DWORD *)CFStringRef v147 = v91;
    *(_WORD *)&v147[4] = 2080;
    *(void *)&v147[6] = v93;
    _os_log_impl(&dword_0, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u is in ear: %s.", buf, 0x22u);
  }

  uint64_t v129 = v46 + 1;
  uint64_t v130 = v46;
  unint64_t v94 = (std::__shared_weak_count *)v46[4].__shared_weak_owners_;
  if (v94)
  {
    if (v94->__shared_owners_ != -1) {
      goto LABEL_132;
    }
    do
      unint64_t v95 = __ldxr(p_shared_owners);
    while (__stxr(v95 + 1, p_shared_owners));
    p_char shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
    do
      unint64_t v97 = __ldxr(p_shared_weak_owners);
    while (__stxr(v97 + 1, p_shared_weak_owners));
    v46[4].__shared_owners_ = (uint64_t)v49;
    v46[4].__shared_weak_owners_ = (uint64_t)v46;
    std::__shared_weak_count::__release_weak(v94);
  }

  else
  {
    do
      unint64_t v98 = __ldxr(p_shared_owners);
    while (__stxr(v98 + 1, p_shared_owners));
    __int16 v99 = (unint64_t *)&v46->__shared_weak_owners_;
    do
      unint64_t v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
    v46[4].__shared_owners_ = (uint64_t)v49;
    v46[4].__shared_weak_owners_ = (uint64_t)v46;
  }

  do
    unint64_t v101 = __ldaxr(p_shared_owners);
  while (__stlxr(v101 - 1, p_shared_owners));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }

void sub_244884( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, char a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, char a37)
{
  if (*a10) {
    CFRelease(*a10);
  }
  *(void *)(v37 + memset(buf, 0, 24) = &off_476B40;
  sub_225088(*(char **)(v37 + 672));
  sub_F9108(v38);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v37);
  operator delete(v41);
  sub_19DFC((uint64_t)&a15);
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a26);
  sub_88540((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_244A78()
{
}

void sub_244A80(uint64_t a1)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v15);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }

  for (uint64_t i = (uint64_t *)v19[1]; i != v19; uint64_t i = (uint64_t *)i[1])
  {
    AudioObjectID v3 = (void *)i[2];
    uint64_t v4 = (std::__shared_weak_count *)i[3];
    __int16 v17 = v3;
    int v18 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      uint64_t v14 = v4;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    std::string __p = v3;
    sub_243418(a1, (unint64_t *)&__p);
    if (v4)
    {
      uint64_t v8 = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    uint64_t v10 = v18;
    if (v18)
    {
      uint64_t v11 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  sub_1BB88(v19);
}

void sub_244BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_244C24(uint64_t a1, int *a2)
{
  BOOL v4 = *a2 == 1937208176 || *a2 == 1937204590;
  if (v4 && (sub_14E87C() & 1) != 0) {
    return 1LL;
  }
  else {
    return sub_1A4264(*(unsigned int **)(a1 + 8), a2);
  }
}

BOOL sub_244C84(uint64_t a1, int *a2)
{
  if (*a2 == 1937204590)
  {
    if ((sub_14E87C() & 1) != 0) {
      return 1LL;
    }
  }

  else if (*a2 == 1937208176 && (sub_14E87C() & 1) != 0)
  {
    return 0LL;
  }

  return sub_1A4528(*(void *)(a1 + 8), a2);
}

uint64_t sub_244CF8(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  BOOL v8 = *a2 == 1937208176 || *a2 == 1937204590;
  if (v8 && (sub_14E87C() & 1) != 0) {
    return 4LL;
  }
  else {
    return sub_1A45C0(*(void *)(a1 + 8), a2, a3, a4);
  }
}

void sub_244D74(uint64_t a1, _DWORD *a2, UInt32 a3, const void *a4, UInt32 *a5, int *a6)
{
  BOOL v12 = *a2 == 1937208176 || *a2 == 1937204590;
  if (v12 && (sub_14E87C() & 1) != 0)
  {
    *a6 = 1;
    *a5 = 4;
  }

  else
  {
    sub_1A48C8(*(void *)(a1 + 8), (uint64_t)a2, a3, a4, a5, a6);
  }

void sub_244E18(uint64_t *a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  int v12 = *a2;
  if (*a2 == 1937204590)
  {
    if ((sub_14E87C() & 1) != 0) {
      return;
    }
LABEL_13:
    sub_1A5054(a1[1], a2, a3, a4, a5, a6);
    return;
  }

  if (v12 == 2004050279)
  {
    sub_1A5054(a1[1], a2, a3, a4, a5, a6);
    (*(void (**)(uint64_t *))(*a1 + 80))(a1);
    return;
  }

  if (v12 != 1937208176) {
    goto LABEL_13;
  }
  uint64_t v13 = (os_log_t *)sub_138E8(17);
  uint64_t v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, *a2);
    if (v17 >= 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    int v19 = "BluetoothProfiles_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 475;
    __int16 v22 = 2080;
    std::string::size_type v23 = v15;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property %s is read-only", buf, 0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

uint64_t sub_245018@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1 + 40;
  char v7 = 1;
  std::shared_timed_mutex::lock_shared((std::shared_timed_mutex *)(a1 + 40));
  BOOL v4 = *(const void **)(a1 + 24);
  if (v4) {
    CFRetain(v4);
  }
  sub_35F84(a2, v4);
  return sub_24532C((uint64_t)&v6);
}

void sub_24507C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_245090(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  AudioObjectID v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
  sub_245140(v1, v2);
}

void sub_2450C4(uint64_t a1)
{
  AudioObjectID v2 = (unint64_t *)(a1 + 16);
  uint64_t v4 = a1;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    uint64_t v6 = &v4;
    AudioObjectID v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_245120);
  }

uint64_t *sub_245114()
{
  return &qword_492850;
}

void sub_245120(uint64_t *****a1)
{
}

void sub_245140(uint64_t a1, AudioObjectID a2)
{
  uint64_t v4 = (std::shared_timed_mutex *)(a1 + 16);
  std::shared_timed_mutex::lock((std::shared_timed_mutex *)(a1 + 16));
  v9[0] = &off_47D068;
  v9[1] = 0LL;
  AudioObjectID v12 = a2;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6277736167LL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  sub_39EFC((uint64_t)buf, &v12, (AudioObjectPropertyAddress *)&__p);
  if (v16[10])
  {
    AudioObjectID v5 = *(const void **)&v16[2];
    *(void *)&v16[2] = 0LL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_47D068;
    __p.__r_.__value_.__s.__data_[16] = 1;
    sub_39FD8((const char **)((char *)&v14 + 4));
    __p.__r_.__value_.__l.__size_ = 0LL;
    sub_39FD8(&__p);
  }

  else
  {
    AudioObjectID v5 = 0LL;
  }

  v10[0] = &off_47D068;
  v10[1] = v5;
  sub_51B68(a1, v5);
  sub_39FD8(v10);
  sub_39FD8(v9);
  uint64_t v6 = (os_log_t *)sub_138E8(17);
  char v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_151A78(&__p, *(const __CFArray **)a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v14 = "BluetoothProfiles_Aspen.cpp";
    __int16 v15 = 1024;
    *(_DWORD *)char v16 = 516;
    *(_WORD *)&v16[4] = 2080;
    *(void *)&uint64_t v16[6] = p_p;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Updated aggregated devices: %s", buf, 0x1Cu);
  }

  std::shared_timed_mutex::unlock(v4);
}

void sub_2452E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_24532C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    std::shared_timed_mutex::unlock_shared(*(std::shared_timed_mutex **)a1);
  }
  return a1;
}

void sub_245360(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_478A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_245370(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_478A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_245390(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2453A0(uint64_t a1)
{
  *(void *)a1 = off_47C4C8;
  AudioObjectID v2 = (std::mutex *)(a1 + 40);
  uint64_t v3 = a1 + 24;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 152));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 104));
  std::mutex::~mutex(v2);
  sub_13818(v3);
  return a1;
}

uint64_t sub_245404(uint64_t *a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[1] + 88LL))(a1[1], 1LL);
  if (!v2)
  {
    uint64_t v11 = sub_138E8(17);
    uint64_t v12 = sub_138E8(28);
    char v13 = 0;
    uint64_t v14 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = (int)buf[v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1LL;
      if ((v17 & 1) != 0) {
        goto LABEL_164;
      }
    }

    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_164:
    uint64_t v126 = *(os_log_s **)v11;
    if (v126 && os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v151 = 1024;
      *(_DWORD *)uint64_t v152 = 805;
      _os_log_impl( &dword_0,  v126,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth LE device has no output streams",  (uint8_t *)buf,  0x12u);
    }
  }

  int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1[1] + 88LL))(a1[1], 0LL);
  if (v3)
  {
    uint64_t v4 = sub_138E8(17);
    uint64_t v5 = sub_138E8(28);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = (int)buf[v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    int v18 = *(os_log_s **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v151 = 1024;
      *(_DWORD *)uint64_t v152 = 808;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth LE device has input streams",  (uint8_t *)buf,  0x12u);
    }
  }

  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 312LL))(a1[1]) & 0xFF00000000LL;
  if (v19)
  {
    uint64_t v20 = sub_138E8(17);
    uint64_t v21 = sub_138E8(28);
    char v22 = 0;
    uint64_t v23 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v24 = *(void *)(v20 + 8);
    while (1)
    {
      uint64_t v25 = (int)buf[v23];
      char v26 = v22;
      if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
        break;
      }
      char v22 = 1;
      uint64_t v23 = 1LL;
      if ((v26 & 1) != 0) {
        goto LABEL_23;
      }
    }

    if ((v24 & v25) == 0) {
      uint64_t v20 = v21;
    }
LABEL_23:
    uint64_t v27 = *(os_log_s **)v20;
    if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v151 = 1024;
      *(_DWORD *)uint64_t v152 = 811;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth LE device has tap input stream",  (uint8_t *)buf,  0x12u);
    }
  }

  if (!v2)
  {
    __int128 v140 = 0uLL;
    goto LABEL_56;
  }

  AudioObjectID v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 120LL))(a1[1]);
  sub_F9584((uint64_t)v147, 1886152047LL, v28);
  uint64_t v29 = sub_138E8(17);
  uint64_t v30 = sub_138E8(28);
  char v31 = 0;
  uint64_t v32 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v33 = *(void *)(v29 + 8);
  while (1)
  {
    uint64_t v34 = (int)buf[v32];
    char v35 = v31;
    if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
      break;
    }
    char v31 = 1;
    uint64_t v32 = 1LL;
    if ((v35 & 1) != 0) {
      goto LABEL_34;
    }
  }

  if ((v33 & v34) == 0) {
    uint64_t v29 = v30;
  }
LABEL_34:
  uint64_t v36 = *(os_log_s **)v29;
  if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = *(void *)&v149[2];
    uint64_t v38 = *(void *)&v147[16];
    uint64_t v39 = *(void *)v147;
    (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 128LL))(__p);
    if (v38) {
      uint64_t v40 = v38;
    }
    else {
      uint64_t v40 = v39;
    }
    if (v37) {
      uint64_t v40 = v37;
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
    __int16 v151 = 1024;
    *(_DWORD *)uint64_t v152 = 821;
    *(_WORD *)&v152[4] = 2112;
    *(void *)&v152[6] = v40;
    *(_WORD *)&v152[14] = 2112;
    *(void **)&v152[16] = __p[0];
    _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating a bluetooth LE output port with name %@ and UID %@",  (uint8_t *)buf,  0x26u);
    sub_19DFC((uint64_t)__p);
  }

  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128LL))(&v141);
  int v41 = atomic_load((unsigned int *)(a1[1] + 492));
  uint64_t v42 = (std::__shared_weak_count *)operator new(0x2B8uLL);
  v42->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  v42->__shared_weak_owners_ = 0LL;
  v42->__vftable = (std::__shared_weak_count_vtbl *)off_478998;
  uint64_t v44 = a1[1];
  sub_14FF7C((uint64_t)buf, 1886152047LL, v41);
  int v45 = v42 + 1;
  __p[0] = 0LL;
  __p[1] = 0LL;
  int64_t cap = 0LL;
  CFStringRef theString = 0LL;
  char v144 = 1;
  sub_224CC0((uint64_t)&v42[1], (uint64_t *)buf, v44, (uint64_t)__p, (uint64_t)v147, (uint64_t *)&v141, 0LL, 1);
  sub_19DFC((uint64_t)&theString);
  sub_32C8C(*(void **)&v152[10]);
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)off_4821B0;
  *(void *)&__int128 v46 = v42 + 1;
  *((void *)&v46 + 1) = v42;
  char shared_weak_owners = (std::__shared_weak_count *)v42[4].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    do
      unint64_t v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
    p_char shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
    do
      unint64_t v53 = __ldxr(p_shared_weak_owners);
    while (__stxr(v53 + 1, p_shared_weak_owners));
    v42[4].__shared_owners_ = (uint64_t)v45;
    v42[4].__shared_weak_owners_ = (uint64_t)v42;
    do
LABEL_52:
      unint64_t v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      __int128 v131 = v46;
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      __int128 v46 = v131;
    }

    goto LABEL_55;
  }

  if (shared_weak_owners->__shared_owners_ == -1)
  {
    do
      unint64_t v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
    __int128 v130 = v46;
    os_log_t v49 = (unint64_t *)&v42->__shared_weak_owners_;
    do
      unint64_t v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v42[4].__shared_owners_ = (uint64_t)v45;
    v42[4].__shared_weak_owners_ = (uint64_t)v42;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    __int128 v46 = v130;
    goto LABEL_52;
  }

void sub_246290( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_88540(v39 - 160);
  sub_7A768((uint64_t)&a19);
  sub_7A768((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_24643C(uint64_t a1)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v15);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }

  for (uint64_t i = (uint64_t *)v19[1]; i != v19; uint64_t i = (uint64_t *)i[1])
  {
    int v3 = (void *)i[2];
    uint64_t v4 = (std::__shared_weak_count *)i[3];
    char v17 = v3;
    int v18 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      uint64_t v14 = v4;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    std::string __p = v3;
    sub_243418(a1, (unint64_t *)&__p);
    if (v4)
    {
      uint64_t v8 = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    char v10 = v18;
    if (v18)
    {
      uint64_t v11 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  sub_1BB88(v19);
}

void sub_24659C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2465E0(uint64_t a1, int *a2)
{
  if (*a2 == 1064725619) {
    return a2[1] == 1869968496;
  }
  else {
    return sub_1A4264(*(unsigned int **)(a1 + 8), a2);
  }
}

BOOL sub_246614(uint64_t a1, int *a2)
{
  return *a2 != 1064725619 && sub_1A4528(*(void *)(a1 + 8), a2);
}

uint64_t sub_246638(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  if (*a2 == 1064725619) {
    return 4LL;
  }
  else {
    return sub_1A45C0(*(void *)(a1 + 8), a2, a3, a4);
  }
}

void sub_24665C(uint64_t *a1, _DWORD *a2, uint64_t a3, const void *a4, UInt32 *a5, int *a6)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1) & 1) == 0)
  {
    char v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "BluetoothProfiles_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 959;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): unknown property",  (uint8_t *)&v19,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    int v16 = 2003332927;
    goto LABEL_14;
  }

  if (*a2 == 1064725619)
  {
    UInt32 v12 = *a5;
    if (v12 == (*(unsigned int (**)(uint64_t *, _DWORD *, uint64_t, const void *))(*a1 + 48))(a1, a2, a3, a4))
    {
      *a6 = 0;
      return;
    }

    char v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        uint64_t v20 = "BluetoothProfiles_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 964;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kVirtualAudioDevicePropertyHas KnowableVolumeLevels",  (uint8_t *)&v19,  0x12u);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    int v16 = 561211770;
LABEL_14:
    exception[2] = v16;
  }

  sub_1A48C8(a1[1], (uint64_t)a2, a3, a4, a5, a6);
}

void sub_246894(uint64_t *a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1) & 1) == 0)
  {
    UInt32 v12 = (os_log_t *)sub_138E8(13);
    char v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "BluetoothProfiles_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 977;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): unknown property",  (uint8_t *)&v15,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  sub_1A5054(a1[1], a2, a3, a4, a5, a6);
}

void sub_2469D0(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 16);
  uint64_t v4 = a1;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    unint64_t v6 = &v4;
    uint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_246A2C);
  }

uint64_t *sub_246A20()
{
  return &qword_492880;
}

void sub_246A2C(uint64_t *****a1)
{
}

void sub_246A4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4789D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_246A5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4789D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_246A7C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_246A8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_478998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_246A9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_478998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_246ABC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_246ACC(uint64_t a1)
{
  *(void *)a1 = off_483938;
  *(void *)(a1 + 80) = off_483A00;
  unint64_t v3 = (void **)(a1 + 96);
  sub_7A668(&v3);
  return sub_F3008(a1);
}

void sub_246B18(uint64_t a1)
{
  *(void *)a1 = off_483938;
  *(void *)(a1 + 80) = off_483A00;
  unint64_t v3 = (void **)(a1 + 96);
  sub_7A668(&v3);
  uint64_t v2 = (void *)sub_F3008(a1);
  operator delete(v2);
}

uint64_t sub_246B68(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104)) {
    return 0LL;
  }
  uint64_t v3 = sub_24863C(a1, *(_DWORD *)(a2 + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 16LL))(v3, a2);
}

uint64_t sub_246BB4(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unint64_t v6 = (os_log_t *)sub_138E8(13);
    unint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      char v10 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v11 = 1024;
      int v12 = 33;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  (uint8_t *)&v9,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  uint64_t v4 = sub_24863C(a1, *(_DWORD *)(a2 + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24LL))(v4, a2);
}

uint64_t sub_246CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    __int16 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 41;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  (uint8_t *)&v13,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  uint64_t v8 = sub_24863C(a1, *(_DWORD *)(a2 + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32LL))(v8, a2, a3, a4);
}

uint64_t sub_246E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      __int16 v21 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v22 = 1024;
      int v23 = 49;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  (uint8_t *)&v20,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    int v17 = 2003332927;
LABEL_12:
    exception[2] = v17;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) > *a5)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      __int16 v21 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v22 = 1024;
      int v23 = 50;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient.",  (uint8_t *)&v20,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    int v17 = 561211770;
    goto LABEL_12;
  }

  uint64_t v12 = sub_24863C(a1, *(_DWORD *)(a2 + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t))(*(void *)v12 + 40LL))( v12,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_247004(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    int v28 = 136315394;
    uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
    __int16 v30 = 1024;
    int v31 = 58;
    int v20 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element";
    goto LABEL_23;
  }

  if ((*(unsigned int (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 32LL))(a1, a2, a3, a4) > a5)
  {
    __int16 v21 = (os_log_t *)sub_138E8(13);
    __int16 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient.",  (uint8_t *)&v28,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    int v24 = 561211770;
LABEL_25:
    exception[2] = v24;
  }

  if (((*(uint64_t (**)(void *, uint64_t))(*a1 + 24LL))(a1, a2) & 1) == 0)
  {
    uint64_t v25 = (os_log_t *)sub_138E8(13);
    char v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 60;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Property is not settable.",  (uint8_t *)&v28,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    int v24 = 1970171760;
    goto LABEL_25;
  }

  int v12 = *(_DWORD *)(a2 + 8);
  if ((v12 + 1) > 1)
  {
    uint64_t v17 = sub_24863C((uint64_t)a1, v12);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 48LL))( v17,  a2,  a3,  a4,  a5,  a6);
  }

  uint64_t v14 = (uint64_t *)a1[12];
  int v13 = (uint64_t *)a1[13];
  if (v14 == v13)
  {
    uint64_t v27 = (os_log_t *)sub_138E8(13);
    int v19 = *v27;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    int v28 = 136315394;
    uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
    __int16 v30 = 1024;
    int v31 = 66;
    int v20 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty";
LABEL_23:
    _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v28, 0x12u);
LABEL_24:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    int v24 = 2003332927;
    goto LABEL_25;
  }

  do
  {
    uint64_t v15 = *v14;
    v14 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48LL))( v15,  a2,  a3,  a4,  a5,  a6);
  }

  while (v14 != v13);
  return result;
}

BOOL sub_247380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 96);
  uint64_t v5 = *(void **)(a1 + 104);
  if (v4 == v5)
  {
    int v19 = (os_log_t *)sub_138E8(13);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 81;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v9 = 1;
  do
  {
    uint64_t v10 = sub_138E8(18);
    uint64_t v11 = sub_138E8(38);
    char v12 = 0;
    uint64_t v13 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1LL;
      if ((v16 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_10:
    uint64_t v17 = *(os_log_s **)v10;
    if (v17)
    {
      int v9 = 0;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 88;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d A call to RegisterRelayedListener failed", buf, 0x12u);
    }

    int v9 = 0;
LABEL_14:
    v4 += 2;
  }

  while (v4 != v5);
  return v9 != 0;
}

BOOL sub_2475CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 96);
  uint64_t v5 = *(void **)(a1 + 104);
  if (v4 == v5)
  {
    int v19 = (os_log_t *)sub_138E8(13);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 99;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v9 = 1;
  do
  {
    uint64_t v10 = sub_138E8(18);
    uint64_t v11 = sub_138E8(38);
    char v12 = 0;
    uint64_t v13 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1LL;
      if ((v16 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_10:
    uint64_t v17 = *(os_log_s **)v10;
    if (v17)
    {
      int v9 = 0;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 106;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d A call to UnregisterRelayedListener failed",  buf,  0x12u);
    }

    int v9 = 0;
LABEL_14:
    v4 += 2;
  }

  while (v4 != v5);
  return v9 != 0;
}

uint64_t sub_247818(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2[1] <= *a2)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      double v16 = *a2;
      uint64_t v15 = *((void *)a2 + 1);
      int v21 = 136315906;
      __int16 v22 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 124;
      __int16 v25 = 2048;
      uint64_t v26 = v15;
      __int16 v27 = 2048;
      double v28 = v16;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Argument desiredVolumeCurveRangeDB's mMaximum (%f) <= mMinimum (%f)",  (uint8_t *)&v21,  0x26u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) <= mMinimum (%f)");
  }

  unint64_t v6 = *(uint64_t **)(a1 + 96);
  unint64_t v7 = *(uint64_t **)(a1 + 104);
  if (v6 == v7)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      __int16 v22 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 126;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  (uint8_t *)&v21,  0x12u);
    }

    int v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v20 = &off_4865A0;
    void v20[2] = 2003332927;
  }

  do
  {
    uint64_t v11 = *v6;
    v6 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, double *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 80LL))( v11,  a2,  a3,  a4,  a5);
  }

  while (v6 != v7);
  return result;
}

void sub_247A20(_Unwind_Exception *a1)
{
}

void sub_247A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t **)(a1 + 96);
  uint64_t v5 = *(uint64_t **)(a1 + 104);
  if (v4 == v5)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "MasterVolumeControl_HAL_Common.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 137;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  (uint8_t *)__p,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  do
  {
    uint64_t v9 = *v4;
    memset(__p, 0, sizeof(__p));
    sub_A9784(__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v9 + 88LL))(v9, __p, a3, a4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    v4 += 2;
  }

  while (v4 != v5);
}

void sub_247BAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_247BD0(uint64_t a1)
{
  uint64_t v1 = sub_24863C(a1, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96LL))(v1);
}

uint64_t sub_247BF0(uint64_t a1)
{
  uint64_t v1 = sub_24863C(a1, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 104LL))(v1);
}

BOOL sub_247C10(uint64_t a1, float a2)
{
  uint64_t v2 = *(void **)(a1 + 96);
  uint64_t v3 = *(void **)(a1 + 104);
  if (v2 == v3)
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    double v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 159;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v5 = 1;
  do
  {
    uint64_t v6 = sub_138E8(18);
    uint64_t v7 = sub_138E8(38);
    char v8 = 0;
    uint64_t v9 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1LL;
      if ((v12 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_10:
    uint64_t v13 = *(os_log_s **)v6;
    if (v13)
    {
      int v5 = 0;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 166;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d A call to StoreDefaultVolumeDecibels failed",  buf,  0x12u);
    }

    int v5 = 0;
LABEL_14:
    v2 += 2;
  }

  while (v2 != v3);
  return v5 != 0;
}

uint64_t sub_247E4C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 96);
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  if (v1 == v2)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 177;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  (uint8_t *)&v8,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  }

  while (v1 != v2);
  return result;
}

int64x2_t *sub_247F5C(int64x2_t *result, void *a2)
{
  if (!*a2)
  {
    __int16 v22 = (os_log_t *)sub_138E8(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v25 = 136315394;
      *(void *)&v25[4] = "MasterVolumeControl_HAL_Common.cpp";
      *(_WORD *)&v25[12] = 1024;
      *(_DWORD *)&v25[14] = 185;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [inSubVolumeControl is NULL]: Argument inSubVolumeControl is NULL",  v25,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "Argument inSubVolumeControl is NULL");
  }

  uint64_t v3 = result;
  uint64_t v4 = result + 7;
  unint64_t v5 = result[7].u64[0];
  uint64_t v6 = (_OWORD *)result[6].i64[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = result[6].i64[0];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 4;
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 3;
    else {
      unint64_t v12 = v11;
    }
    __int16 v27 = (uint64_t *)v4;
    uint64_t v13 = (char *)sub_7BE90(v12);
    uint64_t v15 = &v13[16 * v9];
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
    *a2 = 0LL;
    a2[1] = 0LL;
    uint64_t v17 = (void *)v3[6].i64[0];
    double v16 = (void *)v3[6].i64[1];
    if (v16 == v17)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v16);
      int v18 = &v13[16 * v9];
    }

    else
    {
      int v18 = &v13[16 * v9];
      do
      {
        __int128 v19 = *((_OWORD *)v16 - 1);
        v16 -= 2;
        *((_OWORD *)v18 - 1) = v19;
        v18 -= 16;
        *double v16 = 0LL;
        v16[1] = 0LL;
      }

      while (v16 != v17);
      int64x2_t v20 = v3[6];
    }

    uint64_t v7 = v15 + 16;
    v3[6].i64[0] = (uint64_t)v18;
    v3[6].i64[1] = (uint64_t)(v15 + 16);
    *(int64x2_t *)&v25[8] = v20;
    uint64_t v21 = v3[7].i64[0];
    v3[7].i64[0] = (uint64_t)&v13[16 * v14];
    uint64_t v26 = v21;
    *(void *)__int16 v25 = v20.i64[0];
    uint64_t result = (int64x2_t *)sub_A0D64((uint64_t)v25);
  }

  else
  {
    _OWORD *v6 = *(_OWORD *)a2;
    uint64_t v7 = v6 + 1;
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  v3[6].i64[1] = (uint64_t)v7;
  return result;
}

void sub_248138(_Unwind_Exception *exception_object)
{
}

void sub_248154(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v2 = *(__int128 **)(a1 + 96);
  uint64_t v3 = *(__int128 **)(a1 + 104);
  if (v2 != v3)
  {
    unint64_t v5 = 0LL;
    do
    {
      __int128 v6 = *v2;
      uint64_t v7 = *((void *)v2 + 1);
      uint64_t v8 = v5;
      if (v7)
      {
        uint64_t v9 = (unint64_t *)(v7 + 16);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        uint64_t v8 = a2[1];
      }

      unint64_t v11 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v11)
      {
        uint64_t v13 = *a2;
        uint64_t v14 = (v8 - *a2) >> 4;
        unint64_t v15 = v14 + 1;
        __int128 v24 = v6;
        uint64_t v16 = v11 - (void)v13;
        if (v16 >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17 >> 60) {
          sub_7A8C4();
        }
        int v18 = (char *)operator new(16 * v17);
        __int128 v19 = &v18[16 * v14];
        int64x2_t v20 = &v18[16 * v17];
        *(_OWORD *)__int128 v19 = v24;
        unint64_t v5 = v19 + 16;
        if (v8 == v13)
        {
          *a2 = v19;
          a2[1] = v5;
          a2[2] = v20;
          if (!v8) {
            goto LABEL_25;
          }
        }

        else
        {
          do
          {
            __int128 v21 = *((_OWORD *)v8 - 1);
            v8 -= 16;
            *((_OWORD *)v19 - 1) = v21;
            v19 -= 16;
            *(void *)uint64_t v8 = 0LL;
            *((void *)v8 + 1) = 0LL;
          }

          while (v8 != v13);
          __int16 v22 = *a2;
          uint64_t v8 = a2[1];
          *a2 = v19;
          a2[1] = v5;
          a2[2] = v20;
          if (v8 != v22)
          {
            do
            {
              __int16 v23 = (std::__shared_weak_count *)*((void *)v8 - 1);
              if (v23) {
                std::__shared_weak_count::__release_weak(v23);
              }
              v8 -= 16;
            }

            while (v8 != v22);
            uint64_t v8 = v22;
          }

          if (!v8) {
            goto LABEL_25;
          }
        }

        operator delete(v8);
      }

      else
      {
        *(_OWORD *)uint64_t v8 = v6;
        unint64_t v12 = v8 + 16;
        a2[1] = v12;
        unint64_t v5 = v12;
      }

void sub_2482E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_A0CF0((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_24830C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 96);
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  if (v1 == v2)
  {
    unint64_t v5 = (os_log_t *)sub_138E8(13);
    __int128 v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 204;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  (uint8_t *)&v8,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 80) + 16LL))(v3 + 80);
  }

  while (v1 != v2);
  return result;
}

uint64_t sub_24841C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 96);
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  if (v1 == v2)
  {
    unint64_t v5 = (os_log_t *)sub_138E8(13);
    __int128 v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 213;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  (uint8_t *)&v8,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 80) + 24LL))(v3 + 80);
  }

  while (v1 != v2);
  return result;
}

uint64_t sub_24852C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v2 = *(void *)(a1 + 104);
  if (v1 == v2) {
    return 1LL;
  }
  uint64_t v3 = v1 + 16;
  do
  {
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 - 16) + 80LL) + 32LL))(*(void *)(v3 - 16) + 80LL);
    if ((v4 & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 16LL;
  }

  while (!v5);
  return v4 ^ 1u;
}

uint64_t sub_248584(uint64_t a1)
{
  *(void *)(a1 - 80) = off_483938;
  uint64_t v1 = a1 - 80;
  *(void *)a1 = off_483A00;
  uint64_t v3 = (void **)(a1 + 16);
  sub_7A668(&v3);
  return sub_F3008(v1);
}

void sub_2485CC(uint64_t a1)
{
}

uint64_t sub_2485D4(uint64_t a1)
{
  return sub_24830C(a1 - 80);
}

uint64_t sub_2485DC(uint64_t a1)
{
  return sub_24841C(a1 - 80);
}

uint64_t sub_2485E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 1LL;
  }
  uint64_t v3 = v1 + 16;
  do
  {
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 - 16) + 80LL) + 32LL))(*(void *)(v3 - 16) + 80LL);
    if ((v4 & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 16LL;
  }

  while (!v5);
  return v4 ^ 1u;
}

uint64_t sub_24863C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 96);
  uint64_t v3 = *(void **)(a1 + 104);
  if (v2 == v3)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v12 = 1024;
      int v13 = 229;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): volume control list is empty",  (uint8_t *)&v10,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  while ((*(unsigned int (**)(void))(*(void *)*v2 + 152LL))(*v2) != a2)
  {
    v2 += 2;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }

  if (v2 == *(void **)(a1 + 104)) {
    uint64_t v2 = *(void **)(a1 + 96);
  }
  return *v2;
}

void sub_248784(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F3008(a1);
  operator delete(v1);
}

uint64_t sub_248798(uint64_t a1)
{
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 96);
  int v2 = 1;
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 88) + 48LL))( *(void *)(a1 + 88),  &v3,  0LL,  0LL,  4LL,  &v2);
}

uint64_t sub_2487F0(uint64_t a1)
{
  int v2 = 0;
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 96);
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 88) + 48LL))( *(void *)(a1 + 88),  &v3,  0LL,  0LL,  4LL,  &v2);
}

BOOL sub_248840(uint64_t a1)
{
  int v4 = 1836414053;
  uint64_t v5 = *(void *)(a1 + 96);
  int v2 = 4;
  int v3 = 0;
  (*(void (**)(void, int *, void, void, int *, int *))(**(void **)(a1 + 88) + 40LL))( *(void *)(a1 + 88),  &v4,  0LL,  0LL,  &v2,  &v3);
  return v3 == 1;
}

uint64_t sub_2488A4(uint64_t a1)
{
  return sub_F3008(a1 - 80);
}

void sub_2488AC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F3008(a1 - 80);
  operator delete(v1);
}

uint64_t sub_2488C4(uint64_t a1)
{
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 16);
  int v2 = 1;
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  &v3,  0LL,  0LL,  4LL,  &v2);
}

uint64_t sub_24891C(uint64_t a1)
{
  int v2 = 0;
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 16);
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  &v3,  0LL,  0LL,  4LL,  &v2);
}

BOOL sub_24896C(uint64_t a1)
{
  int v4 = 1836414053;
  uint64_t v5 = *(void *)(a1 + 16);
  int v2 = 4;
  int v3 = 0;
  (*(void (**)(void, int *, void, void, int *, int *))(**(void **)(a1 + 8) + 40LL))( *(void *)(a1 + 8),  &v4,  0LL,  0LL,  &v2,  &v3);
  return v3 == 1;
}

void *sub_2489D8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_478D48;
  return result;
}

void sub_2489FC(uint64_t a1, void *a2)
{
  *a2 = &off_478D48;
}

BOOL sub_248A14(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_248A34()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_478D00;
  return result;
}

void sub_248A58(uint64_t a1, void *a2)
{
  *a2 = &off_478D00;
}

BOOL sub_248A70(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_248A90()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_478CB8;
  return result;
}

void sub_248AB4(uint64_t a1, void *a2)
{
  *a2 = &off_478CB8;
}

uint64_t sub_248ACC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_248B2C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_478C70;
  return result;
}

void sub_248B50(uint64_t a1, void *a2)
{
  *a2 = &off_478C70;
}

uint64_t sub_248B68(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_248B80()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_478C28;
  return result;
}

void sub_248BA4(uint64_t a1, void *a2)
{
  *a2 = &off_478C28;
}

uint64_t sub_248BBC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_248BD4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_478BE0;
  return result;
}

void sub_248BF8(uint64_t a1, void *a2)
{
  *a2 = &off_478BE0;
}

BOOL sub_248C10(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_248C34()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_478B98;
  return result;
}

void sub_248C58(uint64_t a1, void *a2)
{
  *a2 = &off_478B98;
}

uint64_t sub_248C70(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

uint64_t sub_248C80(uint64_t a1, __int128 *a2)
{
  int v4 = sub_239814((char *)a1, (uint64_t)a2);
  sub_248F94(v4 + 80, (uint64_t)(a2 + 5));
  sub_239814((char *)(a1 + 128), (uint64_t)(a2 + 8));
  sub_248F94((_BYTE *)(a1 + 208), (uint64_t)(a2 + 13));
  memcpy((void *)(a1 + 256), a2 + 16, 0x10DuLL);
  sub_C590C((_BYTE *)(a1 + 528), a2 + 33);
  sub_C590C((_BYTE *)(a1 + 560), a2 + 35);
  sub_C590C((_BYTE *)(a1 + 592), a2 + 37);
  sub_C590C((_BYTE *)(a1 + 624), a2 + 39);
  __int128 v5 = a2[41];
  *(_OWORD *)(a1 + 665) = *(__int128 *)((char *)a2 + 665);
  *(_OWORD *)(a1 + 656) = v5;
  return a1;
}

void sub_248D54(_Unwind_Exception *a1)
{
  if (v1[248]) {
    sub_830A4(v4);
  }
  sub_830DC(v3);
  if (v1[120]) {
    sub_830A4(v2);
  }
  sub_830DC((uint64_t)v1);
  _Unwind_Resume(a1);
}

void *sub_248E08(void *result, uint64_t a2, char *__s)
{
  if (!*(_BYTE *)(a2 + 24)) {
    return sub_7D084(result, __s);
  }
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  result[2] = *(void *)(a2 + 16);
  return result;
}

uint64_t sub_248E40()
{
  uint64_t result = sub_177D54((uint64_t)&unk_4A3908);
  *(_OWORD *)(result + 6080) = 0u;
  *(_OWORD *)(result + 6064) = 0u;
  *(_OWORD *)(result + 6048) = 0u;
  strcpy((char *)(result + 6096), "tlfd");
  *(_BYTE *)(result + 6104) = 0;
  *(_BYTE *)(result + 6176) = 0;
  *(_OWORD *)(result + 6sub_19DFC(v37 - 192) = 0u;
  *(_OWORD *)(result + 6208) = 0u;
  *(_OWORD *)(result + 62memset(buf, 0, 24) = 0u;
  *(_OWORD *)(result + 6240) = 0u;
  *(_OWORD *)(result + 6256) = 0u;
  *(_OWORD *)(result + 6272) = 0u;
  *(_OWORD *)(result + 6288) = 0u;
  *(void *)(result + 6304) = 0LL;
  strcpy((char *)(result + 6312), "tlfd");
  *(_BYTE *)(result + 6320) = 0;
  *(_BYTE *)(result + 6392) = 0;
  *(void *)(result + 6472) = 0LL;
  *(_OWORD *)(result + 6440) = 0u;
  *(_OWORD *)(result + 6456) = 0u;
  *(_OWORD *)(result + 6408) = 0u;
  *(_OWORD *)(result + 64memset(buf, 0, 24) = 0u;
  return result;
}

uint64_t sub_248ED0()
{
  uint64_t result = sub_177D54((uint64_t)&unk_4A5260);
  *(_OWORD *)(result + 6080) = 0u;
  *(_OWORD *)(result + 6064) = 0u;
  *(_OWORD *)(result + 6048) = 0u;
  strcpy((char *)(result + 6096), "tlfd");
  *(_BYTE *)(result + 6104) = 0;
  *(_BYTE *)(result + 6176) = 0;
  *(_OWORD *)(result + 6sub_19DFC(v37 - 192) = 0u;
  *(_OWORD *)(result + 6208) = 0u;
  *(_OWORD *)(result + 62memset(buf, 0, 24) = 0u;
  *(_OWORD *)(result + 6240) = 0u;
  *(_OWORD *)(result + 6256) = 0u;
  *(_OWORD *)(result + 6272) = 0u;
  *(_OWORD *)(result + 6288) = 0u;
  *(void *)(result + 6304) = 0LL;
  strcpy((char *)(result + 6312), "tlfd");
  *(_BYTE *)(result + 6320) = 0;
  *(_BYTE *)(result + 6392) = 0;
  *(void *)(result + 6520) = 0LL;
  *(_OWORD *)(result + 6488) = 0u;
  *(_OWORD *)(result + 6504) = 0u;
  *(_OWORD *)(result + 6456) = 0u;
  *(_OWORD *)(result + 6472) = 0u;
  *(_OWORD *)(result + 64memset(buf, 0, 24) = 0u;
  *(_OWORD *)(result + 6440) = 0u;
  *(_OWORD *)(result + 6408) = 0u;
  strcpy((char *)(result + 6528), "tlfd");
  *(_BYTE *)(result + 6536) = 0;
  *(_BYTE *)(result + 6608) = 0;
  *(_OWORD *)(result + 66memset(buf, 0, 24) = 0u;
  *(_OWORD *)(result + 6640) = 0u;
  *(_OWORD *)(result + 6656) = 0u;
  *(_OWORD *)(result + 6672) = 0u;
  *(void *)(result + 6688) = 0LL;
  return result;
}

_BYTE *sub_248F94(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    sub_84854((uint64_t)a1, a2);
    a1[40] = 1;
  }

  return a1;
}

void sub_248FD4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 40)) {
    sub_830A4(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_248FF0(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_7ED44((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (sub_7F194(i + 16, a2)) {
        return i;
      }
    }

    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }

      else
      {
        v12 &= *(void *)&v5 - 1LL;
      }

      if (v12 != v9) {
        return 0LL;
      }
    }
  }

  return i;
}

uint64_t sub_2490E8(uint64_t a1, char *a2, int a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_7D084((void *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + sub_19DFC(v37 - 192) = 0u;
  *(void *)(a1 + 208) = 0LL;
  return a1;
}

void sub_249144(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_24915C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_178254(a1, a2);
  sub_178254(v4 + 216, a2 + 216);
  sub_178254(a1 + 432, a2 + 432);
  sub_178254(a1 + 648, a2 + 648);
  sub_178254(a1 + 864, a2 + 864);
  sub_178254(a1 + 1080, a2 + 1080);
  sub_178254(a1 + 1296, a2 + 1296);
  sub_178254(a1 + 1512, a2 + 1512);
  sub_178254(a1 + 1728, a2 + 1728);
  sub_178254(a1 + 1944, a2 + 1944);
  sub_178254(a1 + 2160, a2 + 2160);
  sub_178254(a1 + 2376, a2 + 2376);
  sub_178254(a1 + 2592, a2 + 2592);
  sub_178254(a1 + 2808, a2 + 2808);
  sub_178254(a1 + 3024, a2 + 3024);
  sub_178254(a1 + 3240, a2 + 3240);
  sub_178254(a1 + 3456, a2 + 3456);
  sub_178254(a1 + 3672, a2 + 3672);
  sub_178254(a1 + 3888, a2 + 3888);
  sub_178254(a1 + 4104, a2 + 4104);
  sub_178254(a1 + 4320, a2 + 4320);
  sub_178254(a1 + 4536, a2 + 4536);
  sub_178254(a1 + 4752, a2 + 4752);
  sub_178254(a1 + 4968, a2 + 4968);
  sub_178254(a1 + 5184, a2 + 5184);
  sub_178254(a1 + 5400, a2 + 5400);
  sub_178254(a1 + 5616, a2 + 5616);
  sub_178254(a1 + 5832, a2 + 5832);
  return a1;
}

void sub_2492EC(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 192);
  sub_178454(&v2);
  uint64_t v2 = (void **)(a1 + 168);
  sub_178454(&v2);
  sub_830DC(a1 + 56);
  uint64_t v2 = (void **)a1;
  sub_1784C4(&v2);
  operator delete((void *)a1);
}

void sub_249368(char *a1)
{
  if (a1)
  {
    sub_249368(*(void *)a1);
    sub_249368(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }

void *sub_2493B0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_7E420(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_24940C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_249428(uint64_t *a1, void *a2)
{
  a1[1] = 0LL;
  uint64_t v3 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  int8x8_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_24AB28(a1, v3, *((_DWORD *)v5 + 8), (uint64_t)(v5 + 4));
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int8x8_t v5 = v7;
        }

        while (!v8);
      }

      int8x8_t v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_2494BC(_Unwind_Exception *a1)
{
}

void sub_2494D0(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v6 = *(uint64_t **)a1;
    BOOL v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 8) = 0LL;
    if (v6[1]) {
      unint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v9 = v6;
    }
    if (!v9)
    {
      int64x2_t v20 = 0LL;
LABEL_29:
      sub_32C8C(v20);
      goto LABEL_30;
    }

    int v10 = sub_68080((uint64_t)v9);
    if (a2 != a3)
    {
      int v11 = v9;
      unint64_t v12 = a2;
      do
      {
        unint64_t v9 = v10;
        int v13 = *((_DWORD *)v12 + 7);
        *((_DWORD *)v11 + 7) = v13;
        uint64_t v14 = *v8;
        unint64_t v15 = (uint64_t **)(a1 + 8);
        uint64_t v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              unint64_t v15 = (uint64_t **)v14;
              if (v13 >= *((_DWORD *)v14 + 7)) {
                break;
              }
              uint64_t v14 = (uint64_t *)*v14;
              uint64_t v16 = v15;
              if (!*v15) {
                goto LABEL_14;
              }
            }

            uint64_t v14 = (uint64_t *)v14[1];
          }

          while (v14);
          uint64_t v16 = v15 + 1;
        }

uint64_t *sub_2496D0(uint64_t *result, uint64_t *a2)
{
  *uint64_t result = (uint64_t)result;
  result[1] = (uint64_t)result;
  result[2] = 0LL;
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v4 = *a2;
    uint64_t v3 = (uint64_t *)a2[1];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(*a2 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = *result;
    *(void *)(v6 + 8) = v3;
    *uint64_t v3 = v6;
    *uint64_t result = v4;
    *(void *)(v4 + 8) = result;
    result[2] = v2;
    a2[2] = 0LL;
  }

  *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
  result[4] = a2[4];
  uint64_t v7 = a2 + 5;
  uint64_t v8 = a2[5];
  result[5] = v8;
  unint64_t v9 = result + 5;
  uint64_t v10 = a2[6];
  result[6] = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    a2[4] = (uint64_t)v7;
    void *v7 = 0LL;
    a2[6] = 0LL;
  }

  else
  {
    result[4] = (uint64_t)v9;
  }

  *((_DWORD *)result + 14) = *((_DWORD *)a2 + 14);
  result[8] = a2[8];
  int v11 = a2 + 9;
  uint64_t v12 = a2[9];
  result[9] = v12;
  int v13 = result + 9;
  uint64_t v14 = a2[10];
  result[10] = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    a2[8] = (uint64_t)v11;
    *int v11 = 0LL;
    a2[10] = 0LL;
  }

  else
  {
    result[8] = (uint64_t)v13;
  }

  result[11] = a2[11];
  result[12] = a2[12];
  unint64_t v15 = a2 + 13;
  uint64_t v16 = a2[13];
  result[13] = v16;
  unint64_t v17 = result + 13;
  uint64_t v18 = a2[14];
  result[14] = v18;
  if (v18)
  {
    *(void *)(v16 + 16) = v17;
    a2[12] = (uint64_t)v15;
    *unint64_t v15 = 0LL;
    a2[14] = 0LL;
  }

  else
  {
    result[12] = (uint64_t)v17;
  }

  return result;
}

void sub_2497D8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 != *(_DWORD *)a3)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        *(void *)unint64_t v9 = "StandardUtilities.h";
        *(_WORD *)&v9[8] = 1024;
        *(_DWORD *)&v9[10] = 1052;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Mismatched Policy Values",  (uint8_t *)&v8,  0x12u);
      }
    }
  }

  sub_86550((uint64_t *)&v8, (uint64_t)(a2 + 2));
  sub_865A0((uint64_t *)&v8, *(void **)(a3 + 8), (void *)(a3 + 16));
  *(_DWORD *)a1 = *a2;
  sub_86550((uint64_t *)(a1 + 8), (uint64_t)&v8);
  sub_32C8C(*(void **)&v9[4]);
}

void sub_2498EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void *sub_249908(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x38uLL);
    int v8 = result;
    *uint64_t result = 0LL;
    result[1] = 0LL;
    __int128 v9 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)result + 1) = *(_OWORD *)a3;
    *((_OWORD *)result + 2) = v9;
    result[6] = *(void *)(a3 + 32);
    uint64_t v10 = a3 + 40;
    uint64_t v11 = 1LL;
    if (a3 + 40 != a4)
    {
      uint64_t v12 = result;
      do
      {
        uint64_t result = operator new(0x38uLL);
        *uint64_t result = v12;
        result[1] = 0LL;
        __int128 v13 = *(_OWORD *)(v10 + 16);
        *((_OWORD *)result + 1) = *(_OWORD *)v10;
        *((_OWORD *)result + 2) = v13;
        result[6] = *(void *)(v10 + 32);
        v12[1] = result;
        ++v11;
        v10 += 40LL;
        uint64_t v12 = result;
      }

      while (v10 != a4);
    }

    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v8;
    void *v8 = v14;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v11;
  }

  return result;
}

void sub_2499E0(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_249A00(_Unwind_Exception *a1)
{
}

uint64_t **sub_249A14(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t **)a1;
  a1[1] = 0LL;
  uint64_t v3 = a1 + 1;
  a1[2] = 0LL;
  *a1 = a1 + 1;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    __int128 v24 = a2 + 1;
    do
    {
      uint64_t v6 = v2[1];
      uint64_t v7 = v3;
      if (*v2 == v3) {
        goto LABEL_9;
      }
      int v8 = v2[1];
      __int128 v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          int v8 = (uint64_t *)v8[1];
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          __int128 v9 = v7;
        }

        while (v10);
      }

      unsigned int v11 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v7 + 8) < v11)
      {
LABEL_9:
        if (v6) {
          uint64_t v12 = (uint64_t **)v7;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v6) {
          __int128 v13 = (uint64_t **)(v7 + 1);
        }
        else {
          __int128 v13 = (uint64_t **)v3;
        }
      }

      else
      {
        uint64_t v12 = (uint64_t **)v3;
        __int128 v13 = (uint64_t **)v3;
        if (v6)
        {
          __int128 v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              unsigned int v22 = *((_DWORD *)v6 + 8);
              if (v11 >= v22) {
                break;
              }
              uint64_t v6 = *v12;
              __int128 v13 = v12;
              if (!*v12) {
                goto LABEL_16;
              }
            }

            if (v22 >= v11) {
              break;
            }
            __int128 v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }

      if (!*v13)
      {
LABEL_16:
        uint64_t v14 = (uint64_t *)operator new(0xB8uLL);
        v26[0] = v14;
        v26[1] = v3;
        char v27 = 0;
        *((_DWORD *)v14 + 8) = *((_DWORD *)v5 + 8);
        sub_24A3AC((uint64_t)(v14 + 5), (uint64_t)(v5 + 5));
        uint64_t v15 = v5[9];
        *((_WORD *)v14 + 40) = *((_WORD *)v5 + 40);
        v14[9] = v15;
        sub_24A428((uint64_t)(v14 + 11), (uint64_t)(v5 + 11));
        sub_86550(v14 + 15, (uint64_t)(v5 + 15));
        *((_BYTE *)v14 + 144) = 0;
        *((_BYTE *)v14 + 168) = 0;
        if (*((_BYTE *)v5 + 168))
        {
          v14[19] = 0LL;
          v14[20] = 0LL;
          v14[18] = (uint64_t)(v14 + 19);
          uint64_t v16 = (void *)v5[18];
          if (v16 != v5 + 19)
          {
            do
            {
              sub_24A484(v14 + 18, v14 + 19, *((_DWORD *)v16 + 8), (_DWORD *)v16 + 8);
              unint64_t v17 = (void *)v16[1];
              if (v17)
              {
                do
                {
                  uint64_t v18 = v17;
                  unint64_t v17 = (void *)*v17;
                }

                while (v17);
              }

              else
              {
                do
                {
                  uint64_t v18 = (void *)v16[2];
                  BOOL v10 = *v18 == (void)v16;
                  uint64_t v16 = v18;
                }

                while (!v10);
              }

              uint64_t v16 = v18;
            }

            while (v18 != v5 + 19);
          }

          *((_BYTE *)v14 + 168) = 1;
          uint64_t v4 = v24;
          uint64_t v2 = (uint64_t **)a1;
        }

        int v19 = *((_DWORD *)v5 + 44);
        *((_WORD *)v14 + 90) = *((_WORD *)v5 + 90);
        *((_DWORD *)v14 + 44) = v19;
        char v27 = 1;
        sub_32C38(v2, (uint64_t)v12, v13, v26[0]);
        v26[0] = 0LL;
        sub_24A368((uint64_t)v26);
      }

      int64x2_t v20 = (void *)v5[1];
      if (v20)
      {
        do
        {
          __int128 v21 = v20;
          int64x2_t v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          __int128 v21 = (void *)v5[2];
          BOOL v10 = *v21 == (void)v5;
          uint64_t v5 = v21;
        }

        while (!v10);
      }

      uint64_t v5 = v21;
    }

    while (v21 != v4);
  }

  return v2;
}

void sub_249C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  if (*(_BYTE *)(v4 + 112)) {
    sub_32C8C(*(void **)(v4 + 96));
  }
  if (*(_BYTE *)(v4 + 64))
  {
    int v8 = *v5;
    if (*v5)
    {
      *(void *)(v4 + 48) = v8;
      operator delete(v8);
    }
  }

  sub_24A368((uint64_t)va);
  sub_F16E4(*v6);
  _Unwind_Resume(a1);
}

uint64_t *sub_249D04(uint64_t *a1, void *a2)
{
  a1[1] = 0LL;
  uint64_t v3 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_24A0F4(a1, v3, *((_DWORD *)v5 + 8), (_DWORD *)v5 + 8);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }

        while (!v8);
      }

      uint64_t v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_249D98(_Unwind_Exception *a1)
{
}

uint64_t **sub_249DAC(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0LL;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0LL;
    uint64_t v7 = &a2[2 * a3];
    BOOL v8 = (uint64_t *)(a1 + 1);
    while (1)
    {
      __int128 v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      BOOL v10 = v6;
      unsigned int v11 = v4;
      if (v6)
      {
        do
        {
          __int128 v9 = v10;
          BOOL v10 = (uint64_t *)v10[1];
        }

        while (v10);
      }

      else
      {
        do
        {
          __int128 v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unsigned int v11 = v9;
        }

        while (v12);
      }

      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        uint64_t v14 = (uint64_t **)(v6 ? v9 : v4);
        uint64_t v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }

      else
      {
        uint64_t v14 = (uint64_t **)v4;
        uint64_t v15 = (uint64_t **)v4;
        if (v6)
        {
          uint64_t v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v6;
              unsigned int v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18) {
                break;
              }
              uint64_t v6 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }

            if (v18 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            uint64_t v6 = v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }

      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)v5;
        *uint64_t v16 = 0LL;
        v16[1] = 0LL;
        v16[2] = (uint64_t)v14;
        *uint64_t v15 = v16;
        unint64_t v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = *v15;
        }

        sub_7A420(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }

      v5 += 2;
      if (v5 == v7) {
        break;
      }
      BOOL v8 = *a1;
      uint64_t v6 = a1[1];
    }
  }

  return a1;
}

void sub_249F08(_Unwind_Exception *a1)
{
}

uint64_t *sub_249F1C(uint64_t *result, uint64_t a2)
{
  qword_4A8D18 = 0LL;
  qword_4A8D10 = 0LL;
  qword_4A8D08 = (uint64_t)&qword_4A8D10;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0LL;
    uint64_t v4 = &result[a2];
    uint64_t v5 = &qword_4A8D10;
    while (1)
    {
      if (v5 == &qword_4A8D10)
      {
        uint64_t v7 = &qword_4A8D10;
      }

      else
      {
        uint64_t v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = (uint64_t *)v6[1];
          }

          while (v6);
        }

        else
        {
          BOOL v8 = &qword_4A8D10;
          do
          {
            uint64_t v7 = (uint64_t *)v8[2];
            BOOL v9 = *v7 == (void)v8;
            BOOL v8 = v7;
          }

          while (v9);
        }

        unsigned int v10 = *(_DWORD *)v2;
        if (*((_DWORD *)v7 + 7) >= *(_DWORD *)v2)
        {
          if (v3)
          {
            BOOL v12 = &qword_4A8D10;
            while (1)
            {
              while (1)
              {
                unsigned int v11 = (uint64_t *)v3;
                unsigned int v14 = *(_DWORD *)(v3 + 28);
                if (v10 >= v14) {
                  break;
                }
                uint64_t v3 = *v11;
                BOOL v12 = v11;
                if (!*v11) {
                  goto LABEL_18;
                }
              }

              if (v14 >= v10) {
                break;
              }
              BOOL v12 = v11 + 1;
              uint64_t v3 = v11[1];
              if (!v3) {
                goto LABEL_18;
              }
            }
          }

          else
          {
            unsigned int v11 = &qword_4A8D10;
            BOOL v12 = &qword_4A8D10;
          }

          goto LABEL_17;
        }
      }

      if (v3) {
        unsigned int v11 = v7;
      }
      else {
        unsigned int v11 = &qword_4A8D10;
      }
      if (v3) {
        BOOL v12 = v7 + 1;
      }
      else {
        BOOL v12 = &qword_4A8D10;
      }
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        unsigned int v13 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v13 + 28) = *v2;
        *unsigned int v13 = 0LL;
        v13[1] = 0LL;
        CFStringRef v13[2] = (uint64_t)v11;
        *BOOL v12 = (uint64_t)v13;
        if (*(void *)qword_4A8D08)
        {
          qword_4A8D08 = *(void *)qword_4A8D08;
          unsigned int v13 = (uint64_t *)*v12;
        }

        uint64_t result = sub_7A420((uint64_t *)qword_4A8D10, v13);
        ++qword_4A8D18;
      }

      if (++v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_4A8D08;
      uint64_t v3 = qword_4A8D10;
    }
  }

  return result;
}

void sub_24A094(_Unwind_Exception *a1)
{
}

uint64_t sub_24A0AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t *sub_24A0F4(uint64_t *result, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v5 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 8), v6 > a3))
  {
    uint64_t v7 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      BOOL v9 = a2;
LABEL_16:
      if (v7) {
        BOOL v12 = (uint64_t **)v9;
      }
      else {
        BOOL v12 = (uint64_t **)a2;
      }
      if (v7) {
        unsigned int v10 = (uint64_t **)(v9 + 1);
      }
      else {
        unsigned int v10 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }

    if (v7)
    {
      BOOL v8 = (uint64_t *)*a2;
      do
      {
        BOOL v9 = v8;
        BOOL v8 = (uint64_t *)v8[1];
      }

      while (v8);
    }

    else
    {
      unsigned int v14 = a2;
      do
      {
        BOOL v9 = (uint64_t *)v14[2];
        BOOL v15 = *v9 == (void)v14;
        unsigned int v14 = v9;
      }

      while (v15);
    }

    if (*((_DWORD *)v9 + 8) < a3) {
      goto LABEL_16;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          BOOL v12 = (uint64_t **)v16;
          unsigned int v17 = *((_DWORD *)v16 + 8);
          if (v17 <= a3) {
            break;
          }
          uint64_t v16 = *v12;
          uint64_t v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }

        if (v17 >= a3) {
          break;
        }
        uint64_t v5 = v12 + 1;
        uint64_t v16 = v12[1];
        if (!v16) {
          goto LABEL_44;
        }
      }

uint64_t *sub_24A2AC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a2 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a3;
  uint64_t result = sub_86550((uint64_t *)v6 + 5, (uint64_t)(a3 + 2));
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_24A308(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_24A324(0, v2);
  _Unwind_Resume(a1);
}

void sub_24A324(char a1, void **a2)
{
  if (a1)
  {
    sub_32C8C(a2[6]);
  }

  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void sub_24A368(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_F238C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

uint64_t sub_24A3AC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + memset(buf, 0, 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    sub_7A5B8( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(_BYTE *)(a1 + memset(buf, 0, 24) = 1;
  }

  return a1;
}

void sub_24A404(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_24A428(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + memset(buf, 0, 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_86550((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + memset(buf, 0, 24) = 1;
  }

  return a1;
}

void sub_24A468(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_32C8C(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24A484(uint64_t *result, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v5 = (uint64_t **)result;
  unsigned int v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    BOOL v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      unsigned int v10 = a2;
LABEL_16:
      if (v8) {
        unsigned int v13 = (uint64_t **)v10;
      }
      else {
        unsigned int v13 = (uint64_t **)a2;
      }
      if (v8) {
        unsigned int v11 = (uint64_t **)(v10 + 1);
      }
      else {
        unsigned int v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        unsigned int v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      BOOL v15 = a2;
      do
      {
        unsigned int v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        BOOL v15 = v10;
      }

      while (v16);
    }

    if (*((_DWORD *)v10 + 8) < a3) {
      goto LABEL_16;
    }
    unsigned int v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v13 = (uint64_t **)v17;
          unsigned int v18 = *((_DWORD *)v17 + 8);
          if (v18 <= a3) {
            break;
          }
          unsigned int v17 = *v13;
          unsigned int v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v18 >= a3) {
          break;
        }
        unsigned int v6 = v13 + 1;
        unsigned int v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }

void sub_24A65C(_Unwind_Exception *a1)
{
}

void sub_24A670()
{
  unsigned int v0 = 1;
  sub_7A22C((uint64_t)v1, &v0, 1LL);
  byte_4A8D30 = 0;
  qword_4A8D28 = (uint64_t)off_483220;
  dword_4A8D38 = 2;
  sub_86550(qword_4A8D40, (uint64_t)v1);
  sub_32C8C(v2);
}

void sub_24A6DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_24A6F0(uint64_t a1)
{
  *(void *)a1 = off_483220;
  sub_32C8C(*(void **)(a1 + 32));
  return a1;
}

void sub_24A724(void **a1)
{
  *a1 = off_483220;
  sub_32C8C(a1[4]);
  operator delete(a1);
}

uint64_t sub_24A758@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 8)) {
    uint64_t v4 = "src";
  }
  else {
    uint64_t v4 = "dst";
  }
  sub_826EC(&v14, (uint64_t)v4, 3LL);
  sub_826EC(&v14, (uint64_t)"/prop ", 6LL);
  sub_2CA1C(v12, 1685021040LL);
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v12;
  }
  else {
    uint64_t v5 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = v13;
  }
  else {
    uint64_t v6 = (uint64_t)v12[1];
  }
  sub_826EC(&v14, (uint64_t)v5, v6);
  sub_826EC(&v14, (uint64_t)": ", 2LL);
  sub_24A9B8(__p, a1 + 16);
  if ((v11 & 0x80u) == 0) {
    unsigned int v7 = __p;
  }
  else {
    unsigned int v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  sub_826EC(&v14, (uint64_t)v7, v8);
  sub_826EC(&v14, (uint64_t)"]", 1LL);
  sub_82924(a2, (uint64_t)v15);
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf(v15);
  return std::ios::~ios(&v17);
}

void sub_24A8FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_829C0((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_24A948(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_5C2F8(a2);
  *((void *)&v6 + 1) = v4;
  *(void *)&__int128 v6 = v3;
  uint64_t v5 = v6 >> 32;
  unsigned int v7 = (_DWORD *)(a1 + 16);
  if ((v5 & 0xFF00000000LL) != 0) {
    return sub_54F20((uint64_t)v7, v5);
  }
  else {
    return *v7 == 3;
  }
}

uint64_t sub_24A9B8(void *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 2) {
    uint64_t v4 = "Require";
  }
  else {
    uint64_t v4 = "Forbid";
  }
  if (*(_DWORD *)a2 == 2) {
    uint64_t v5 = 7LL;
  }
  else {
    uint64_t v5 = 6LL;
  }
  sub_826EC(&v10, (uint64_t)v4, v5);
  sub_826EC(&v10, (uint64_t)": ", 2LL);
  sub_12476C(&__p, *(void **)(a2 + 8), (void *)(a2 + 16));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  sub_826EC(&v10, (uint64_t)p_p, size);
  sub_82924(a1, (uint64_t)v11);
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_24AAE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_829C0((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_24AB14(uint64_t a1, uint64_t a2)
{
  return sub_248C80(a1 + 32, (__int128 *)(a2 + 32));
}

uint64_t sub_24AB20(uint64_t a1)
{
  return sub_82FFC(a1 + 32);
}

uint64_t *sub_24AB28(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t **)result;
  __int128 v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v10 = a2;
LABEL_16:
      if (v8) {
        uint64_t v13 = (uint64_t **)v10;
      }
      else {
        uint64_t v13 = (uint64_t **)a2;
      }
      if (v8) {
        unsigned __int8 v11 = (uint64_t **)(v10 + 1);
      }
      else {
        unsigned __int8 v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      BOOL v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        BOOL v15 = v10;
      }

      while (v16);
    }

    if (*((_DWORD *)v10 + 8) < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v17;
          int v18 = *((_DWORD *)v17 + 8);
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          __int128 v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v18 >= a3) {
          break;
        }
        __int128 v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }

void sub_24ACF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_24AD04(_WORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_WORD *))(*(void *)a1 + 160LL))(a1);
  if ((_DWORD)result) {
    return (a1[92] & 1) == 0;
  }
  return result;
}

void sub_24AD40(uint64_t a1)
{
  uint64_t v1 = (void *)sub_277E80(a1);
  operator delete(v1);
}

void sub_24AD54(void *a1, unsigned int a2)
{
  unint64_t v3 = atomic_load(&qword_492FE8);
  if (v3 != -1LL)
  {
    *(void *)AudioObjectPropertyAddress buf = &v26;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::__call_once(&qword_492FE8, &__p, (void (__cdecl *)(void *))sub_26AFC8);
  }

  if ((byte_48E739 & 1) == 0)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v4 = getenv("AudioRoutingEngine");
    if (!v4) {
      goto LABEL_8;
    }
    sub_90AD0(&__p, v4);
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
LABEL_8:
      __int128 v6 = (const __CFString *)CFPreferencesCopyValue( @"AudioRoutingEngine",  @"com.apple.celestial",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
      if (v6)
      {
        sub_48E98(buf, v6);
        std::string __p = *(std::string *)buf;
        CFRelease(v6);
      }
    }

    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
      {
        byte_48E739 = 1;
LABEL_33:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_34;
      }

      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }

    else
    {
      std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
      if (!__p.__r_.__value_.__s.__size_)
      {
        byte_48E739 = 1;
        goto LABEL_34;
      }

      p_p = &__p;
    }

    BOOL v9 = (std::string *)((char *)p_p + v7);
    while (p_p != v9)
    {
      p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
      p_p = (std::string *)((char *)p_p + 1);
    }

    uint64_t v10 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      char v12 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 266;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "com.apple.celestial AudioRoutingEngine";
      __int16 v29 = 2080;
      __int16 v30 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %s.", buf, 0x26u);
    }

    int v13 = std::string::compare(&__p, "virtualaudio");
    if (!v13 || !std::string::compare(&__p, "none") || !std::string::compare(&__p, "mecca")) {
      byte_48E738 = v13 != 0;
    }
    byte_48E739 = 1;
  }

void sub_24B1D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24B20C(void *a1)
{
  int v154 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  UInt32 ioDataSize = 4;
  int outData = 0;
  *(void *)&inAddress.mSelector = 0x676C6F62696E6F74LL;
  inAddress.mElement = 0;
  AudioObjectGetPropertyData(1u, &inAddress, 0, 0LL, &ioDataSize, &outData);
  uint64_t v157 = 0LL;
  UInt32 ioDataSize = 4;
  uint64_t v156 = 0x676C6F626D61696ELL;
  AudioObjectGetPropertyData(1u, (const AudioObjectPropertyAddress *)&v156, 0, 0LL, &ioDataSize, (char *)&v157 + 4);
  if (outData) {
    BOOL v1 = HIDWORD(v157) == 1;
  }
  else {
    BOOL v1 = 1;
  }
  int v2 = v1;
  unint64_t v3 = (void *)a1[18];
  uint64_t v4 = (void *)a1[19];
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(void))(*(void *)*v3 + 400LL))(*v3);
      ++v3;
    }

    while (v3 != v4);
    for (uint64_t i = (uint64_t *)a1[18]; i != (uint64_t *)a1[19]; ++i)
    {
      uint64_t v6 = *i;
      if (!*i)
      {
        uint64_t v131 = sub_138E8(13);
        id v132 = sub_8C7D4(1, *(void **)v131, *(void *)(v131 + 8));
        __int128 v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
        __int128 v134 = v133;
        if (v133 && os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"VirtualAudio_PlugIn.mm";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 1923;
          _os_log_impl( &dword_0,  v134,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      std::string::size_type v7 = (os_log_s *)*(id *)sub_138E8(2);
      uint64_t v8 = v7;
      if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        unsigned __int32 v9 = *(_DWORD *)(v6 + 8);
        unint64_t v10 = *(void *)(v6 + 592);
        buf[0].n128_u32[0] = 136315906;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"VirtualAudio_PlugIn.mm";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 1926;
        buf[1].n128_u16[1] = 1024;
        buf[1].n128_u32[1] = v9;
        buf[1].n128_u16[4] = 2112;
        *(unint64_t *)((char *)&buf[1].n128_u64[1] + 2) = v10;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Preparing to destroy VirtualAudio_Device ID %u (%@).",  (uint8_t *)buf,  0x22u);
      }

      if (v2)
      {
        sub_6DD4();
        int v11 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
        if (v11) {
          (*(void (**)(void))(qword_48F828 + 24))();
        }
      }

      else
      {
        uint64_t v12 = *(void *)(v6 + 632);
        if (v12) {
          sub_C90D0(v12);
        }
        int v13 = (os_log_t *)sub_138E8(1);
        int v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v6 + 96LL))(v164, v6);
          uint64_t v15 = v164;
          if (v165 < 0) {
            uint64_t v15 = *(_BYTE **)v164;
          }
          buf[0].n128_u32[0] = 136315650;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"VirtualAudio_Device.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 578;
          buf[1].n128_u16[1] = 2080;
          *(unint64_t *)((char *)buf[1].n128_u64 + 4) = (unint64_t)v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Finalized VirtualAudio_Device: %s.",  (uint8_t *)buf,  0x1Cu);
          if (v165 < 0) {
            operator delete(*(void **)v164);
          }
        }
      }
    }
  }

  if ((v2 & 1) != 0)
  {
    if (qword_48CDB8 != -1) {
      dispatch_once(&qword_48CDB8, &stru_46DD20);
    }
    if (byte_48CDA8) {
      +[CiderService StopService](&OBJC_CLASS___CiderService, "StopService");
    }
    uint64_t v16 = a1[16];
    if (v16)
    {
      sub_6DD4();
      int v17 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
      uint64_t v18 = sub_546E0();
      int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16LL))(v18);
      if (*(void (**)(uint64_t, uint64_t))(v18 + 192) != sub_D63A4)
      {
        __int16 v151 = (os_log_t *)sub_138E8(13);
        uint64_t v152 = *v151;
        if (*v151 && os_log_type_enabled(*v151, OS_LOG_TYPE_ERROR))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"PortManager.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 415;
          _os_log_impl( &dword_0,  v152,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inProc does not match the client port listener.",  (uint8_t *)buf,  0x12u);
        }

        __int16 v153 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v153, "inProc does not match the client port listener.");
      }

      *(void *)(v18 + sub_19DFC(v37 - 192) = 0LL;
      *(void *)(v18 + sub_67FE8(v1 + 200) = 0LL;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v18 + 24LL))(v18);
      }
      uint64_t v20 = *(void *)(v16 + 56);
      memset(buf, 0, 24);
      uint64_t v21 = *(void **)(v16 + 40);
      if (v21 != (void *)(v16 + 48))
      {
        while (1)
        {
          sub_B8F68((uint64_t *)v164, v21 + 4, "", 148);
          unsigned int v22 = sub_D756C(v16, *(uint64_t *)v164, (os_unfair_lock_s ****)buf);
          unsigned int v23 = v22;
          __int128 v24 = *(std::__shared_weak_count **)&v164[8];
          if (!*(void *)&v164[8]) {
            goto LABEL_40;
          }
          __int16 v25 = (unint64_t *)(*(void *)&v164[8] + 8LL);
          do
            unint64_t v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
            if (!v23)
            {
LABEL_49:
              __int16 v29 = (os_log_t *)sub_138E8(13);
              __int16 v30 = *v29;
              if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v164 = 136315394;
                *(void *)&v164[4] = "VirtualAudio_PortManager.cpp";
                *(_WORD *)&v164[12] = 1024;
                *(_DWORD *)&v164[14] = 149;
                _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: error destroying port",  v164,  0x12u);
              }
            }
          }

          else
          {
LABEL_40:
            if (!v22) {
              goto LABEL_49;
            }
          }

          char v27 = (void *)v21[1];
          if (v27)
          {
            do
            {
              double v28 = v27;
              char v27 = (void *)*v27;
            }

            while (v27);
          }

          else
          {
            do
            {
              double v28 = (void *)v21[2];
              BOOL v1 = *v28 == (void)v21;
              uint64_t v21 = v28;
            }

            while (!v1);
          }

          uint64_t v21 = v28;
          if (v28 == (void *)(v16 + 48))
          {
            if (buf[0].n128_u64[1] != buf[0].n128_u64[0])
            {
              uint64_t v31 = sub_5954C();
              uint64_t v32 = operator new(0x28uLL);
              __n128 v33 = sub_D7C48((uint64_t)v32, buf);
              (*(void (**)(uint64_t, void *, __n128))(*(void *)v31 + 328LL))(v31, v32, v33);
            }

            break;
          }
        }
      }

      if (*(void *)(v16 + 56))
      {
        uint64_t v34 = (os_log_t *)sub_138E8(13);
        char v35 = *v34;
        if (*v34)
        {
          if (os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v164 = 136315394;
            *(void *)&v164[4] = "VirtualAudio_PortManager.cpp";
            *(_WORD *)&v164[12] = 1024;
            *(_DWORD *)&v164[14] = 156;
            _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: port vector not empty after teardown",  v164,  0x12u);
          }
        }
      }

      if (v20)
      {
        sub_6DD4();
        sub_34AA0(v164, (uint64_t)&qword_48F828);
        uint64_t v161 = 0x676C6F6270727473LL;
        int v162 = 0;
        (*(void (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v16 + 32) + 72LL))( *(void *)(v16 + 32),  1LL,  &v161,  1LL);
        if (v164[8]) {
          (*(void (**)(void))(**(void **)v164 + 16LL))(*(void *)v164);
        }
      }

      *(void *)v164 = buf;
      sub_D7DB0((void ***)v164);
      if (v17) {
        (*(void (**)(void))(qword_48F828 + 24))();
      }
    }

    uint64_t v36 = sub_5954C();
    (*(void (**)(uint64_t, void, void))(*(void *)v36 + 16LL))(v36, 0LL, 0LL);
    sub_2213CC();
    buf[1].n128_u64[1] = 0LL;
    sub_E4C70(buf);
    uint64_t v37 = (__n128 *)buf[1].n128_u64[1];
    if ((__n128 *)buf[1].n128_u64[1] == buf)
    {
      uint64_t v38 = 4LL;
      uint64_t v37 = buf;
    }

    else
    {
      if (!buf[1].n128_u64[1]) {
        goto LABEL_68;
      }
      uint64_t v38 = 5LL;
    }

    (*(void (**)(void))(v37->n128_u64[0] + 8 * v38))();
LABEL_68:
    uint64_t v39 = (os_log_t *)sub_138E8(6);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"SingletonFactory_Aspen.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 85;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Beginning destruction of singletons.",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v41 = sub_138E8(7);
    uint64_t v42 = sub_138E8(6);
    char v43 = 0;
    uint64_t v44 = 0LL;
    buf[0].n128_u64[0] = 0x100000002LL;
    uint64_t v45 = *(void *)(v41 + 8);
    while (1)
    {
      uint64_t v46 = buf[0].n128_i32[v44];
      char v47 = v43;
      if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
        break;
      }
      char v43 = 1;
      uint64_t v44 = 1LL;
      if ((v47 & 1) != 0) {
        goto LABEL_77;
      }
    }

    if ((v45 & v46) == 0) {
      uint64_t v41 = v42;
    }
LABEL_77:
    unint64_t v48 = *(os_log_s **)v41;
    if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"DeviceManager.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 103;
      _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to destroy DeviceManager.",  (uint8_t *)buf,  0x12u);
    }

    os_log_t v49 = (char *)qword_48D7B0;
    if (!qword_48D7B0)
    {
      uint64_t v136 = (os_log_t *)sub_138E8(13);
      uint64_t v137 = *v136;
      if (*v136 && os_log_type_enabled(*v136, OS_LOG_TYPE_ERROR))
      {
        buf[0].n128_u32[0] = 136315394;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"DeviceManager.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 105;
        _os_log_impl( &dword_0,  v137,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sDeviceManager is NULL]: sDeviceManager is NULL!",  (uint8_t *)buf,  0x12u);
      }

      char v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v138, "sDeviceManager is NULL!");
      goto LABEL_232;
    }

    int v50 = (*(uint64_t (**)(uint64_t))(*(void *)qword_48D7B0 + 16LL))(qword_48D7B0);
    (*(void (**)(void, void, void, int *))(**((void **)v49 + 11) + 16LL))( *((void *)v49 + 11),  0LL,  0LL,  &dword_48D7B8);
    sub_1BB88((uint64_t *)v49 + 13);
    if (v50) {
      (*(void (**)(char *))(*(void *)v49 + 24LL))(v49);
    }
    sub_1BB88((uint64_t *)v49 + 13);
    uint64_t v51 = *((void *)v49 + 11);
    *((void *)v49 + 11) = 0LL;
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
    }
    *(void *)os_log_t v49 = off_46E4E8;
    pthread_mutex_destroy((pthread_mutex_t *)(v49 + 24));
    operator delete(v49);
    qword_48D7B0 = 0LL;
    uint64_t v52 = sub_138E8(17);
    uint64_t v53 = sub_138E8(6);
    char v54 = 0;
    uint64_t v55 = 0LL;
    buf[0].n128_u64[0] = 0x100000002LL;
    uint64_t v56 = *(void *)(v52 + 8);
    while (1)
    {
      uint64_t v57 = buf[0].n128_i32[v55];
      char v58 = v54;
      if (((v56 & v57) != 0) != ((*(void *)(v53 + 8) & v57) != 0)) {
        break;
      }
      char v54 = 1;
      uint64_t v55 = 1LL;
      if ((v58 & 1) != 0) {
        goto LABEL_91;
      }
    }

    if ((v56 & v57) == 0) {
      uint64_t v52 = v53;
    }
LABEL_91:
    char v59 = *(os_log_s **)v52;
    if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"DeviceInfoListener.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 35;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to destroy DeviceInfoListener.",  (uint8_t *)buf,  0x12u);
    }

    if (!qword_4A9AC0)
    {
      __int128 v139 = (os_log_t *)sub_138E8(13);
      __int128 v140 = *v139;
      if (*v139 && os_log_type_enabled(*v139, OS_LOG_TYPE_ERROR))
      {
        buf[0].n128_u32[0] = 136315394;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"DeviceInfoListener.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 37;
        _os_log_impl( &dword_0,  v140,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sDeviceInfoListener is NULL]: sDeviceInfoListener is NULL!",  (uint8_t *)buf,  0x12u);
      }

      char v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v138, "sDeviceInfoListener is NULL!");
      goto LABEL_232;
    }

    (*(void (**)(uint64_t))(*(void *)qword_4A9AC0 + 8LL))(qword_4A9AC0);
    qword_4A9AC0 = 0LL;
    uint64_t v60 = sub_138E8(9);
    uint64_t v61 = sub_138E8(6);
    char v62 = 0;
    uint64_t v63 = 0LL;
    buf[0].n128_u64[0] = 0x100000002LL;
    uint64_t v64 = *(void *)(v60 + 8);
    while (1)
    {
      uint64_t v65 = buf[0].n128_i32[v63];
      char v66 = v62;
      if (((v64 & v65) != 0) != ((*(void *)(v61 + 8) & v65) != 0)) {
        break;
      }
      char v62 = 1;
      uint64_t v63 = 1LL;
      if ((v66 & 1) != 0) {
        goto LABEL_101;
      }
    }

    if ((v64 & v65) == 0) {
      uint64_t v60 = v61;
    }
LABEL_101:
    uint64_t v67 = *(os_log_s **)v60;
    if (v67 && os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"PortManager.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 259;
      _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to destroy PortManager.",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v68 = (char *)qword_48E228;
    if (!qword_48E228)
    {
      CFStringRef v141 = (os_log_t *)sub_138E8(13);
      char v142 = *v141;
      if (*v141 && os_log_type_enabled(*v141, OS_LOG_TYPE_ERROR))
      {
        buf[0].n128_u32[0] = 136315394;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"PortManager.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 261;
        _os_log_impl( &dword_0,  v142,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sPortManager is NULL]: sPortManager is NULL!",  (uint8_t *)buf,  0x12u);
      }

      char v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v138, "sPortManager is NULL!");
      goto LABEL_232;
    }

    if (*(void *)(qword_48E228 + 192) || *(void *)(qword_48E228 + 200))
    {
      int v69 = (os_log_t *)sub_138E8(9);
      uint64_t v70 = *v69;
      if (*v69)
      {
        if (os_log_type_enabled(*v69, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"PortManager.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 290;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d mClientListener is not NULL on destruction.",  (uint8_t *)buf,  0x12u);
        }
      }
    }

    if (*((_DWORD *)v68 + 114))
    {
      char v71 = (os_log_t *)sub_138E8(9);
      uint64_t v72 = *v71;
      if (*v71)
      {
        if (os_log_type_enabled(*v71, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"PortManager.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 291;
          _os_log_impl( &dword_0,  v72,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Notifications are suspended on destruction",  (uint8_t *)buf,  0x12u);
        }
      }
    }

    uint64_t v73 = *((void *)v68 + 26);
    unint64_t v74 = *((void *)v68 + 13);
    if (v73) {
      LODWORD(v73) = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 152LL))(v73);
    }
    if (v74 > v73)
    {
      char v75 = (os_log_t *)sub_138E8(9);
      unint64_t v76 = *v75;
      if (*v75)
      {
        if (os_log_type_enabled(*v75, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"PortManager.cpp";
          buf[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 297;
          _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d mConnectedPorts is not empty on destruction.",  (uint8_t *)buf,  0x12u);
        }
      }
    }

    sub_FFA7C(*((void **)v68 + 59));
    sub_85B80((uint64_t *)v68 + 54);
    sub_85B80((uint64_t *)v68 + 51);
    sub_EDF34(*((void **)v68 + 49));
    sub_3781A4((uint64_t)(v68 + 248));
    sub_85B80((uint64_t *)v68 + 28);
    sub_7A768((uint64_t)(v68 + 208));
    sub_1009A0((uint64_t)(v68 + 152));
    sub_83284((uint64_t)(v68 + 112));
    sub_68314((void *)v68 + 11);
    *(void *)uint64_t v68 = off_46E4E8;
    pthread_mutex_destroy((pthread_mutex_t *)(v68 + 24));
    operator delete(v68);
    qword_48E228 = 0LL;
    uint64_t v77 = sub_138E8(11);
    uint64_t v78 = sub_138E8(6);
    char v79 = 0;
    uint64_t v80 = 0LL;
    buf[0].n128_u64[0] = 0x100000002LL;
    uint64_t v81 = *(void *)(v77 + 8);
    while (1)
    {
      uint64_t v82 = buf[0].n128_i32[v80];
      char v83 = v79;
      if (((v81 & v82) != 0) != ((*(void *)(v78 + 8) & v82) != 0)) {
        break;
      }
      char v79 = 1;
      uint64_t v80 = 1LL;
      if ((v83 & 1) != 0) {
        goto LABEL_126;
      }
    }

    if ((v81 & v82) == 0) {
      uint64_t v77 = v78;
    }
LABEL_126:
    uint64_t v84 = *(os_log_s **)v77;
    if (v84 && os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    {
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"IAPManager.cpp";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 145;
      _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to destroy IAPManager.",  (uint8_t *)buf,  0x12u);
    }

    __int128 v85 = (char *)qword_490F28;
    if (!qword_490F28)
    {
      uint64_t v143 = (os_log_t *)sub_138E8(13);
      char v144 = *v143;
      if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_ERROR))
      {
        buf[0].n128_u32[0] = 136315394;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"IAPManager.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 147;
        _os_log_impl( &dword_0,  v144,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sIAPManager is NULL]: sIAPManager is NULL!",  (uint8_t *)buf,  0x12u);
      }

      char v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v138, "sIAPManager is NULL!");
      goto LABEL_232;
    }

    if (qword_490F30)
    {
      (*(void (**)(uint64_t))(*(void *)qword_490F30 + 8LL))(qword_490F30);
      __int128 v85 = (char *)qword_490F28;
      qword_490F30 = 0LL;
      if (!qword_490F28) {
        goto LABEL_169;
      }
    }

    else
    {
      qword_490F30 = 0LL;
    }

    int v86 = (*(uint64_t (**)(char *))(*(void *)v85 + 16LL))(v85);
    uint64_t v87 = sub_138E8(11);
    uint64_t v88 = sub_138E8(6);
    char v89 = 0;
    uint64_t v90 = 0LL;
    buf[0].n128_u64[0] = 0x100000002LL;
    uint64_t v91 = *(void *)(v87 + 8);
    while (1)
    {
      uint64_t v92 = buf[0].n128_i32[v90];
      char v93 = v89;
      if (((v91 & v92) != 0) != ((*(void *)(v88 + 8) & v92) != 0)) {
        break;
      }
      char v89 = 1;
      uint64_t v90 = 1LL;
      if ((v93 & 1) != 0)
      {
        if ((v91 & 1) == 0) {
          goto LABEL_145;
        }
        goto LABEL_142;
      }
    }

    if ((v91 & v92) == 0) {
      uint64_t v87 = v88;
    }
    if ((*(void *)(v87 + 8) & 1) != 0)
    {
LABEL_142:
      uint64_t v94 = *(os_log_s **)v87;
      if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        buf[0].n128_u32[0] = 136315650;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"IAPManager.cpp";
        buf[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 194;
        buf[1].n128_u16[1] = 2048;
        *(unint64_t *)((char *)buf[1].n128_u64 + 4) = (unint64_t)v85;
        _os_log_impl( &dword_0,  v94,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + IAPManager[%p]::~IAPManager()",  (uint8_t *)buf,  0x1Cu);
      }
    }

LABEL_197:
  if (v154) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
}

  Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v258 = 257;
  sub_13408((uint64_t)&Mutable, @"category", xmmword_492FD0);
  sub_13408((uint64_t)&Mutable, @"mode", SDWORD1(xmmword_492FD0));
  sub_254C74((uint64_t)buf, v252, &Mutable, (uint64_t)"internal update");
  sub_257FAC(&v255, v252, (uint64_t)buf);
  if (buf[2])
  {
    if (buf[2] == 2)
    {
      v229 = sub_138E8(13);
      v230 = sub_8C7D4(1, *(void **)v229, *(void *)(v229 + 8));
      v231 = (void *)objc_claimAutoreleasedReturnValue(v230);
      __int16 v232 = v231;
      if (v231)
      {
        v233 = v231;
        if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int outData = 136315394;
          *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&outData[12] = 1024;
          *(_DWORD *)&outData[14] = 1810;
          _os_log_impl( &dword_0,  v233,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Error setting route configuration via HandlePortUpdate.)",  outData,  0x12u);
        }
      }

      uint64_t v219 = __cxa_allocate_exception(0x10uLL);
    }

    else if (buf[2] == 1)
    {
      unsigned int v214 = sub_138E8(13);
      char v215 = sub_8C7D4(1, *(void **)v214, *(void *)(v214 + 8));
      char v216 = (void *)objc_claimAutoreleasedReturnValue(v215);
      v217 = v216;
      if (v216)
      {
        unint64_t v218 = v216;
        if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int outData = 136315394;
          *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&outData[12] = 1024;
          *(_DWORD *)&outData[14] = 1810;
          _os_log_impl( &dword_0,  v218,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Error setting route configuration via HandlePortUpdate.)",  outData,  0x12u);
        }
      }

      uint64_t v219 = __cxa_allocate_exception(0x10uLL);
      __int128 v85 = 1852797556;
    }

    else
    {
      v234 = sub_138E8(13);
      v235 = sub_8C7D4(1, *(void **)v234, *(void *)(v234 + 8));
      uint64_t v236 = (void *)objc_claimAutoreleasedReturnValue(v235);
      __int16 v237 = v236;
      if (v236)
      {
        int v238 = v236;
        if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int outData = 136315394;
          *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&outData[12] = 1024;
          *(_DWORD *)&outData[14] = 1810;
          _os_log_impl( &dword_0,  v238,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error setting route configuration via HandlePortUpdate.)",  outData,  0x12u);
        }
      }

      uint64_t v219 = __cxa_allocate_exception(0x10uLL);
      __int128 v85 = 2003329396;
    }

void sub_24CAC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  }
  if (a12) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  if (a11) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24CE98(uint64_t a1, unsigned int a2, int *a3, void *a4)
{
  if (a2)
  {
    uint64_t v5 = a2;
    while (1)
    {
      int v6 = *a3;
      a3 += 3;
      if (v6 == 1768845172) {
        break;
      }
      if (!--v5) {
        return 0LL;
      }
    }

    UInt32 ioDataSize = 4;
    int outData = 1;
    *(void *)&inAddress.mSelector = 0x676C6F62696E6F74LL;
    inAddress.mElement = 0;
    uint64_t PropertyData = AudioObjectGetPropertyData(1u, &inAddress, 0, 0LL, &ioDataSize, &outData);
    if ((_DWORD)PropertyData)
    {
      uint64_t v8 = (os_log_s *)*(id *)sub_138E8(2);
      unsigned __int32 v9 = v8;
      if (v8)
      {
        unint64_t v10 = v8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, PropertyData);
          if (v37 >= 0) {
            int v11 = __p;
          }
          else {
            int v11 = *(_BYTE **)__p;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1655;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = PropertyData;
          *(_WORD *)&_BYTE buf[24] = 2080;
          *(void *)&buf[26] = v11;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') reading kAudioHardwarePropertyIsInitingOrExiting property",  buf,  0x22u);
          if (SHIBYTE(v37) < 0) {
            operator delete(*(void **)__p);
          }
        }
      }

void sub_24D3E0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, os_signpost_id_t a19, __int128 buf, __int128 a21)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_24D9A4(&a19);
  if (a2 == 3)
  {
    unsigned int v23 = (unsigned int *)__cxa_begin_catch(a1);
    uint64_t v24 = sub_138E8(2);
    id v25 = sub_8C7D4(1, *(void **)v24, *(void *)(v24 + 8));
    unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if (v26)
    {
      char v27 = v26;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&__p, v23[2]);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1673;
        WORD1(a21) = 2080;
        *(void *)((char *)&a21 + 4) = p_p;
        _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown: %s", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }

    else
    {
      char v27 = 0LL;
    }

void sub_24D694(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_24DB54(*(void *)(a1 + 40));
  uint64_t v3 = v1;
  unint64_t v2 = atomic_load(&qword_492FE0);
  if (v2 != -1LL)
  {
    uint64_t v5 = &v3;
    uint64_t v4 = &v5;
    std::__call_once(&qword_492FE0, &v4, (void (__cdecl *)(void *))sub_250E0C);
  }

void sub_24D730( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    int v19 = __cxa_begin_catch(a1);
    id v20 = *(id *)sub_138E8(13);
    if (v20)
    {
      uint64_t v21 = (os_log_s *)v20;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        int v22 = v19[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a14) = 1024;
        DWORD1(a14) = v22;
        WORD4(a14) = 2080;
        *(void *)((char *)&a14 + 10) = "";
        a16 = 1024;
        a17 = 1871;
        unsigned int v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v24 = v21;
        uint32_t v25 = 40;
LABEL_13:
        _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }

  else
  {
    unint64_t v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      char v27 = v26;
      id v28 = *(id *)sub_138E8(13);
      if (v28)
      {
        uint64_t v21 = (os_log_s *)v28;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v27 + 16LL))(v27);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = v29;
          WORD6(a14) = 2080;
          *(void *)((char *)&a14 + 14) = "";
          HIWORD(a17) = 1024;
          a18 = 1871;
          unsigned int v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v24 = v21;
          uint32_t v25 = 44;
          goto LABEL_13;
        }

os_signpost_id_t *sub_24D9A4(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = (os_log_s *)*(id *)v2;
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        int v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 52;
        __int16 v14 = 2080;
        unsigned __int8 v15 = "kVAInitialization";
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    int v6 = (os_log_s *)(id)qword_493900;
    std::string::size_type v7 = v6;
    os_signpost_id_t v8 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "VA_Initialization",  (const char *)&unk_420CC6,  (uint8_t *)&v10,  2u);
    }
  }

  return a1;
}

void sub_24DB48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_24DB54(uint64_t result)
{
  if (*(_DWORD *)(result + 108)) {
    return result;
  }
  std::string::size_type v252 = result;
  *(_DWORD *)(result + 108) = 1;
  id v1 = *(id *)sub_138E8(2);
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (os_log_s *)v1;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1707;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ***** Beginning Deferred Initialization *****",  (uint8_t *)buf,  0x12u);
    }
  }

  sub_19A158();
  if (sub_56120() == 2
    || sub_56120() == 3
    || sub_56120() == 4
    || sub_56120() == 5
    || sub_56120() == 195
    || MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4
    || (unint64_t v213 = sub_1CA360((uint64_t)@"DeviceClassNumber"), HIDWORD(v213))
    && v213 == 11LL
    && sub_14F3AC())
  {
    uint64_t v4 = sub_32918();
    sub_395880(v4, v252 + 312);
    std::string __p = (void *)sub_32A7C8();
    v273 = "fedv";
    unsigned __int8 v5 = (dispatch_queue_s *)*((void *)__p + 21);
    *(void *)int outData = &__p;
    *(void *)v282 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
    *(void *)&buf[2] = 0x40000000LL;
    *(void *)&uint8_t buf[4] = sub_32C054;
    *(void *)&buf[6] = &unk_4819B0;
    v264 = v282;
    v265 = outData;
    dispatch_sync(v5, buf);
    std::string __p = (void *)sub_32A7C8();
    v273 = "wolv";
    int v6 = (dispatch_queue_s *)*((void *)__p + 21);
    *(void *)int outData = &__p;
    *(void *)v283 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
    *(void *)&buf[2] = 0x40000000LL;
    *(void *)&uint8_t buf[4] = sub_32C054;
    *(void *)&buf[6] = &unk_4819B0;
    v264 = v283;
    v265 = outData;
    dispatch_sync(v6, buf);
    std::string::size_type v7 = *(const void **)v282;
    if (*(void *)v282)
    {
      if (!*(void *)v283) {
        goto LABEL_36;
      }
      id v8 = *(id *)sub_138E8(2);
      unsigned __int32 v9 = v8;
      if (v8)
      {
        int v10 = (os_log_s *)v8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = CFCopyDescription(*(CFTypeRef *)v282);
          sub_48188((uint64_t)&__p, v11);
          if (v11) {
            CFRelease(v11);
          }
          p_p = &__p;
          if (SHIBYTE(v274) < 0) {
            p_p = __p;
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1728;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = p_p;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Created time sync clock device %s for default VAD",  (uint8_t *)buf,  0x1Cu);
          if (SHIBYTE(v274) < 0) {
            operator delete(__p);
          }
        }
      }

      id v13 = *(id *)sub_138E8(2);
      __int16 v14 = v13;
      if (v13)
      {
        unsigned __int8 v15 = (os_log_s *)v13;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = CFCopyDescription(*(CFTypeRef *)v283);
          sub_48188((uint64_t)&__p, v16);
          if (v16) {
            CFRelease(v16);
          }
          int v17 = &__p;
          if (SHIBYTE(v274) < 0) {
            int v17 = __p;
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1730;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v17;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Created time sync clock device %s for low-latency VAD",  (uint8_t *)buf,  0x1Cu);
          if (SHIBYTE(v274) < 0) {
            operator delete(__p);
          }
        }
      }

      uint64_t v18 = sub_32918();
      sub_395DD4(v18, v252 + 312);
    }

    if (*(void *)v283) {
      CFRelease(*(CFTypeRef *)v283);
    }
    std::string::size_type v7 = *(const void **)v282;
    if (!*(void *)v282) {
      goto LABEL_37;
    }
LABEL_36:
    CFRelease(v7);
  }

LABEL_151:
  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4)
  {
    uint64_t v125 = (os_log_t *)sub_138E8(20);
    uint64_t v126 = *v125;
    if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingSettingsFactory_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 658;
      HIWORD(buf[4]) = 1024;
      buf[5] = v56;
      _os_log_impl( &dword_0,  v126,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Product ID (%d): Unknown device. Defaulting to apple tv handlers",  (uint8_t *)buf,  0x18u);
    }

    sub_F2D6C(buf);
    sub_D62E0((uint64_t *)&__p);
    uint64_t v127 = *(void *)&buf[4];
    if (*(void *)&buf[4])
    {
      uint64_t v129 = *(void ***)buf;
      char v128 = *(void **)&buf[2];
      uint64_t v130 = **(void **)&buf[2];
      *(void *)(v130 + 8) = *(void *)(*(void *)buf + 8LL);
      *v129[1] = v130;
      uint64_t v131 = __p;
      *((void *)__p + 1) = v128;
      void *v128 = v131;
      v129[1] = &__p;
      std::string __p = v129;
      v274 = (_DWORD *)((char *)v274 + v127);
      *(void *)&uint8_t buf[4] = 0LL;
    }

    sub_D62E0((uint64_t *)buf);
  }

  id v132 = (os_log_t *)sub_138E8(20);
  __int128 v133 = *v132;
  if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315650;
    *(void *)&buf[1] = "RoutingSettingsFactory_Aspen.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 663;
    HIWORD(buf[4]) = 1024;
    buf[5] = v56;
    _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Product ID (%d): Could not find tvOS routing handlers",  (uint8_t *)buf,  0x18u);
  }

        std::terminate();
      }

      int v71 = v65 ^ 1;
      if (*(void *)(v50 + 576) == 1986291046LL) {
        int v71 = 1;
      }
      if (((v71 | v49) & 1) == 0)
      {
        unint64_t v74 = sub_138E8(13);
        char v75 = sub_8C7D4(1, *(void **)v74, *(void *)(v74 + 8));
        unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
        uint64_t v77 = v76;
        if (v76)
        {
          uint64_t v78 = v76;
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            uint64_t v109 = *(void *)(v50 + 576);
            sub_33464(&v104, (unsigned int *)&v109);
            char v79 = (v104.__r_.__value_.__s.__size_ & 0x80u) == 0
                ? &v104
                : (std::string *)v104.__r_.__value_.__r.__words[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7492;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v79;
            _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unexpected HAL speaker protection for VAD %s. Error as default route has *VP* speaker protection",  buf,  0x1Cu);
          }
        }

        uint64_t v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( v80,  "Unexpected HAL speaker protection for VAD %s. Error as default route has *VP* speaker protection");
      }

void sub_250708()
{
}

void sub_250714()
{
}

void sub_250720()
{
}

void sub_25072C(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(v2);
}

uint64_t sub_250E0C(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_250E74;
  void v3[3] = &unk_4791F0;
  v3[4] = v1;
  return CACentralStateDumpRegisterSubsystem(1LL, @"Virtual Audio", v3);
}

void sub_250E74(uint64_t a1, FILE *a2)
{
  uint64_t v3 = v6;
  for (uint64_t i = v7; v3 != i; v3 += 24LL)
  {
    unsigned __int8 v5 = (const char *)v3;
    fprintf(a2, "%s\n", v5);
  }

  id v8 = (void **)&v6;
  sub_8CD60(&v8);
}

void sub_250F04(void *a1, uint64_t a2)
{
  std::string::size_type v3 = (std::string::size_type)a1;
  if (*(_DWORD *)(a2 + 108) == 2)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    sub_82600((uint64_t)&v203);
    std::string::size_type v180 = v3;
    sub_826EC(&v203, (uint64_t)"Routing Information:", 20LL);
    sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
    unint64_t v4 = *(void *)(v3 + 16);
    unint64_t v5 = *(void *)(v3 + 8);
    if (v5 >= v4)
    {
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)v3) >> 3);
      unint64_t v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)v3) >> 3);
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0x555555555555555LL) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v10;
      }
      *((void *)&v197 + 1) = v3 + 16;
      if (v12) {
        unint64_t v12 = (unint64_t)sub_8D44C(v12);
      }
      else {
        uint64_t v13 = 0LL;
      }
      std::string::size_type v15 = v12 + 24 * v9;
      __dst.__r_.__value_.__r.__words[0] = v12;
      __dst.__r_.__value_.__l.__size_ = v15;
      *(void *)&__int128 v197 = v12 + 24 * v13;
      __int128 v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v15 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string::size_type v15 = v16;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__l.__cap_ = v15 + 24;
      sub_4802C((uint64_t *)v3, &__dst);
      uint64_t v17 = *(void *)(v3 + 8);
      sub_480A0((uint64_t)&__dst);
      int size = (char)__p.__r_.__value_.__s.__size_;
      *(void *)(v3 + 8) = v17;
      if (size < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v5 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v5 = v6;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v3 + 8) = v5 + 24;
    }

    *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words
    if (v206 < 0) {
      operator delete(v205);
    }
    std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
    std::ios::~ios(v207);
    sub_82600((uint64_t)&v203);
    sub_826EC(&v203, (uint64_t)"- Category: ", 12LL);
    sub_2CA1C(&v195, *(unsigned int *)(a2 + 224));
    if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v19 = &v195;
    }
    else {
      int v19 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v20 = v195.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v20 = v195.__r_.__value_.__l.__size_;
    }
    sub_826EC(&v203, (uint64_t)v19, v20);
    sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
    unint64_t v21 = *(void *)(v3 + 8);
    unint64_t v22 = *(void *)(v3 + 16);
    if (v21 >= v22)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(void *)v3) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(void *)v3) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555LL) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      *((void *)&v197 + 1) = v3 + 16;
      if (v27) {
        unint64_t v27 = (unint64_t)sub_8D44C(v27);
      }
      else {
        uint64_t v28 = 0LL;
      }
      std::string::size_type v29 = v27 + 24 * v24;
      __dst.__r_.__value_.__r.__words[0] = v27;
      __dst.__r_.__value_.__l.__size_ = v29;
      *(void *)&__int128 v197 = v27 + 24 * v28;
      __int128 v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v29 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string::size_type v29 = v30;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__l.__cap_ = v29 + 24;
      sub_4802C((uint64_t *)v3, &__dst);
      uint64_t v31 = *(void *)(v3 + 8);
      sub_480A0((uint64_t)&__dst);
      int v32 = (char)__p.__r_.__value_.__s.__size_;
      *(void *)(v3 + 8) = v31;
      if (v32 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v21 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v21 = v23;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v3 + 8) = v21 + 24;
    }

    v203.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
    if (v206 < 0) {
      operator delete(v205);
    }
    std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
    std::ios::~ios(v207);
    sub_82600((uint64_t)&v203);
    sub_826EC(&v203, (uint64_t)"- Mode: ", 8LL);
    sub_2CA1C(&v195, *(unsigned int *)(a2 + 228));
    if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __n128 v33 = &v195;
    }
    else {
      __n128 v33 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = v195.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v34 = v195.__r_.__value_.__l.__size_;
    }
    sub_826EC(&v203, (uint64_t)v33, v34);
    sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
    unint64_t v35 = *(void *)(v3 + 8);
    unint64_t v36 = *(void *)(v3 + 16);
    if (v35 >= v36)
    {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)v3) >> 3);
      unint64_t v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *(void *)v3) >> 3);
      if (2 * v40 > v39) {
        unint64_t v39 = 2 * v40;
      }
      if (v40 >= 0x555555555555555LL) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v39;
      }
      *((void *)&v197 + 1) = v3 + 16;
      if (v41) {
        unint64_t v41 = (unint64_t)sub_8D44C(v41);
      }
      else {
        uint64_t v42 = 0LL;
      }
      std::string::size_type v43 = v41 + 24 * v38;
      __dst.__r_.__value_.__r.__words[0] = v41;
      __dst.__r_.__value_.__l.__size_ = v43;
      *(void *)&__int128 v197 = v41 + 24 * v42;
      __int128 v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v43 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string::size_type v43 = v44;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__l.__cap_ = v43 + 24;
      sub_4802C((uint64_t *)v3, &__dst);
      uint64_t v45 = *(void *)(v3 + 8);
      sub_480A0((uint64_t)&__dst);
      int v46 = (char)__p.__r_.__value_.__s.__size_;
      *(void *)(v3 + 8) = v45;
      if (v46 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v35 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v35 = v37;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v3 + 8) = v35 + 24;
    }

    v203.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
    if (v206 < 0) {
      operator delete(v205);
    }
    std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
    std::ios::~ios(v207);
    sub_82600((uint64_t)&v203);
    sub_826EC(&v203, (uint64_t)"- Silent Mode State: ", 21LL);
    char v47 = (uint64_t (***)(void))sub_5954C();
    int v48 = (**v47)(v47);
    if (v48) {
      id v49 = "Enabled";
    }
    else {
      id v49 = "Disabled";
    }
    if (v48) {
      uint64_t v50 = 7LL;
    }
    else {
      uint64_t v50 = 8LL;
    }
    sub_826EC(&v203, (uint64_t)v49, v50);
    sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
    unint64_t v51 = *(void *)(v3 + 8);
    unint64_t v52 = *(void *)(v3 + 16);
    if (v51 >= v52)
    {
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(void *)v3) >> 3);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)v3) >> 3);
      if (2 * v56 > v55) {
        unint64_t v55 = 2 * v56;
      }
      if (v56 >= 0x555555555555555LL) {
        unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v57 = v55;
      }
      *((void *)&v197 + 1) = v3 + 16;
      if (v57) {
        unint64_t v57 = (unint64_t)sub_8D44C(v57);
      }
      else {
        uint64_t v58 = 0LL;
      }
      std::string::size_type v59 = v57 + 24 * v54;
      __dst.__r_.__value_.__r.__words[0] = v57;
      __dst.__r_.__value_.__l.__size_ = v59;
      *(void *)&__int128 v197 = v57 + 24 * v58;
      __int128 v60 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v59 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string::size_type v59 = v60;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__l.__cap_ = v59 + 24;
      sub_4802C((uint64_t *)v3, &__dst);
      uint64_t v61 = *(void *)(v3 + 8);
      sub_480A0((uint64_t)&__dst);
      int v62 = (char)__p.__r_.__value_.__s.__size_;
      *(void *)(v3 + 8) = v61;
      if (v62 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v51 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v51 = v53;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v3 + 8) = v51 + 24;
    }

    v203.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
    if (v206 < 0) {
      operator delete(v205);
    }
    std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
    std::ios::~ios(v207);
    uint64_t v63 = *(void *)(a2 + 112);
    v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
    *(_OWORD *)&v203.__r_.__value_.__r.__words[1] = (unint64_t)&v203;
    sub_13B3F8((uint64_t)&v188, v63, (uint64_t)&v203);
    sub_85B80((uint64_t *)&v203);
    if (v189[1])
    {
      uint64_t v64 = v188;
      v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
      v195.__r_.__value_.__l.__size_ = (std::string::size_type)&v195;
      v195.__r_.__value_.__l.__cap_ = 0LL;
      if (v188 != v189)
      {
        do
        {
          uint64_t v65 = operator new(0x20uLL);
          void *v65 = 0LL;
          v65[1] = 0LL;
          sub_FA4C0(v65 + 2, v64 + 4);
          std::string::size_type v66 = v195.__r_.__value_.__r.__words[0];
          void *v65 = v195.__r_.__value_.__r.__words[0];
          v65[1] = &v195;
          *(void *)(v66 + 8) = v65;
          v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
          ++v195.__r_.__value_.__l.__cap_;
          uint64_t v67 = (void *)v64[1];
          if (v67)
          {
            do
            {
              uint64_t v68 = (void **)v67;
              uint64_t v67 = (void *)*v67;
            }

            while (v67);
          }

          else
          {
            do
            {
              uint64_t v68 = (void **)v64[2];
              BOOL v69 = *v68 == v64;
              uint64_t v64 = v68;
            }

            while (!v69);
          }

          uint64_t v64 = v68;
        }

        while (v68 != v189);
      }

      sub_82600((uint64_t)&v203);
      sub_826EC(&v203, (uint64_t)"- Override VirtualAudio_Port ID(s): ", 36LL);
      memset(&__dst, 0, sizeof(__dst));
      strcpy((char *)&v197, "cwdv");
      BYTE8(v197) = 0;
      int v198 = 3;
      v200[0] = 0LL;
      v200[1] = 0LL;
      BOOL v199 = v200;
      int v201 = 44739242;
      CFTypeRef cf = 0LL;
      sub_252EDC((uint64_t *)&v184, a2, (uint64_t)&v195, (uint64_t)&__dst);
      sub_2DA7F4(&v187, &v184);
      if ((v187.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v70 = &v187;
      }
      else {
        uint64_t v70 = (std::string *)v187.__r_.__value_.__r.__words[0];
      }
      if ((v187.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v71 = v187.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v71 = v187.__r_.__value_.__l.__size_;
      }
      sub_826EC(&v203, (uint64_t)v70, v71);
      sub_252E30(&v194, (uint64_t)&v203.__r_.__value_.__l.__size_);
      unint64_t v72 = *(void *)(v3 + 8);
      unint64_t v73 = *(void *)(v3 + 16);
      if (v72 >= v73)
      {
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *(void *)v3) >> 3);
        unint64_t v76 = v75 + 1;
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A87C();
        }
        unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *(void *)v3) >> 3);
        if (2 * v77 > v76) {
          unint64_t v76 = 2 * v77;
        }
        if (v77 >= 0x555555555555555LL) {
          unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v78 = v76;
        }
        std::string::size_type v192 = v3 + 16;
        if (v78) {
          unint64_t v78 = (unint64_t)sub_8D44C(v78);
        }
        else {
          uint64_t v79 = 0LL;
        }
        std::string::size_type v80 = v78 + 24 * v75;
        __p.__r_.__value_.__r.__words[0] = v78;
        __p.__r_.__value_.__l.__size_ = v80;
        unint64_t v191 = v78 + 24 * v79;
        __int128 v81 = *(_OWORD *)&v194.__r_.__value_.__l.__data_;
        *(void *)(v80 + 16) = v194.__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string::size_type v80 = v81;
        memset(&v194, 0, sizeof(v194));
        __p.__r_.__value_.__l.__cap_ = v80 + 24;
        sub_4802C((uint64_t *)v3, &__p);
        uint64_t v82 = *(void *)(v3 + 8);
        sub_480A0((uint64_t)&__p);
        int v83 = (char)v194.__r_.__value_.__s.__size_;
        *(void *)(v3 + 8) = v82;
        if (v83 < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
      }

      else
      {
        __int128 v74 = *(_OWORD *)&v194.__r_.__value_.__l.__data_;
        *(void *)(v72 + 16) = v194.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v72 = v74;
        memset(&v194, 0, sizeof(v194));
        *(void *)(v3 + 8) = v72 + 24;
      }

      sub_32C8C(*(void **)v185);
      if (cf) {
        CFRelease(cf);
      }
      sub_32C8C(v200[0]);
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }

      v203.__r_.__value_.__r.__words[0] = v183;
      *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
      if (v206 < 0) {
        operator delete(v205);
      }
      std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
      std::ios::~ios(v207);
      sub_85B80((uint64_t *)&v195);
    }

    sub_82600((uint64_t)&v203);
    sub_826EC(&v203, (uint64_t)"- Activation Trigger: ", 22LL);
    sub_2CA1C(&v195, *(unsigned int *)(a2 + 240));
    if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v84 = &v195;
    }
    else {
      uint64_t v84 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v85 = v195.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v85 = v195.__r_.__value_.__l.__size_;
    }
    sub_826EC(&v203, (uint64_t)v84, v85);
    sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
    unint64_t v86 = *(void *)(v3 + 8);
    unint64_t v87 = *(void *)(v3 + 16);
    if (v86 >= v87)
    {
      unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - *(void *)v3) >> 3);
      unint64_t v90 = v89 + 1;
      if (v89 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *(void *)v3) >> 3);
      if (2 * v91 > v90) {
        unint64_t v90 = 2 * v91;
      }
      if (v91 >= 0x555555555555555LL) {
        unint64_t v92 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v92 = v90;
      }
      *((void *)&v197 + 1) = v3 + 16;
      if (v92) {
        unint64_t v92 = (unint64_t)sub_8D44C(v92);
      }
      else {
        uint64_t v93 = 0LL;
      }
      std::string::size_type v94 = v92 + 24 * v89;
      __dst.__r_.__value_.__r.__words[0] = v92;
      __dst.__r_.__value_.__l.__size_ = v94;
      *(void *)&__int128 v197 = v92 + 24 * v93;
      __int128 v95 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v94 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string::size_type v94 = v95;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__l.__cap_ = v94 + 24;
      sub_4802C((uint64_t *)v3, &__dst);
      uint64_t v96 = *(void *)(v3 + 8);
      sub_480A0((uint64_t)&__dst);
      int v97 = (char)__p.__r_.__value_.__s.__size_;
      *(void *)(v3 + 8) = v96;
      if (v97 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v88 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v86 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v86 = v88;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v3 + 8) = v86 + 24;
    }

    v203.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
    if (v206 < 0) {
      operator delete(v205);
    }
    std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
    std::ios::~ios(v207);
    if (*(char *)(a2 + 271) < 0)
    {
      if (!*(void *)(a2 + 256))
      {
LABEL_184:
        sub_252FB4((uint64_t *)&v187, a2);
        sub_25453C( (uint64_t *)v3,  *(std::string **)(v3 + 8),  (const std::string *)v187.__r_.__value_.__l.__data_,  (__int128 *)v187.__r_.__value_.__l.__size_,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187.__r_.__value_.__l.__size_ - v187.__r_.__value_.__r.__words[0]) >> 3));
        uint64_t v181 = sub_32A7C8();
        sub_7D084(&v203, "\nTimeSyncClockDeviceManager: ");
        id v184 = 0LL;
        *(void *)unint64_t v185 = 0LL;
        int v186 = 0LL;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
        __dst.__r_.__value_.__s.__data_[8] = 0;
        id v184 = (std::string *)operator new(0x18uLL);
        *(void *)unint64_t v185 = v184;
        int v186 = (char *)&v184[1];
        *(void *)unint64_t v185 = sub_14AA58((uint64_t)&v186, (__int128 *)&v203, v204, (char *)v184);
        sub_82600((uint64_t)&v203);
        sub_826EC(&v203, (uint64_t)"TimeSyncDeviceTypeMap (", 23LL);
        std::ostream::operator<<(&v203, *(void *)(v181 + 88));
        sub_826EC(&v203, (uint64_t)"):", 2LL);
        sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
        uint64_t v113 = *(_OWORD **)v185;
        if (*(void *)v185 >= (unint64_t)v186)
        {
          unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v185 - (void)v184) >> 3);
          unint64_t v116 = v115 + 1;
          if (v115 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_7A87C();
          }
          else {
            unint64_t v117 = v116;
          }
          *((void *)&v197 + 1) = &v186;
          if (v117) {
            unint64_t v117 = (unint64_t)sub_8D44C(v117);
          }
          else {
            uint64_t v118 = 0LL;
          }
          std::string::size_type v119 = v117 + 24 * v115;
          __dst.__r_.__value_.__r.__words[0] = v117;
          __dst.__r_.__value_.__l.__size_ = v119;
          *(void *)&__int128 v197 = v117 + 24 * v118;
          __int128 v120 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v119 + 16) = __p.__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string::size_type v119 = v120;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__l.__cap_ = v119 + 24;
          sub_4802C((uint64_t *)&v184, &__dst);
          uint64_t v121 = *(void *)v185;
          sub_480A0((uint64_t)&__dst);
          *(void *)unint64_t v185 = v121;
        }

        else
        {
          __int128 v114 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v185 + 16LL) = __p.__r_.__value_.__l.__cap_;
          *uint64_t v113 = v114;
          memset(&__p, 0, sizeof(__p));
          *(void *)unint64_t v185 = (char *)v113 + 24;
        }

        v203.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
        if (v206 < 0) {
          operator delete(v205);
        }
        std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
        std::ios::~ios(v207);
        uint64_t v122 = *(unsigned int **)(v181 + 72);
        if (v122 != (unsigned int *)(v181 + 80))
        {
          do
          {
            sub_82600((uint64_t)&v203);
            sub_826EC(&v203, (uint64_t)"- ", 2LL);
            sub_33464(&v195, v122 + 8);
            if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v123 = &v195;
            }
            else {
              uint64_t v123 = (std::string *)v195.__r_.__value_.__r.__words[0];
            }
            if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v124 = v195.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v124 = v195.__r_.__value_.__l.__size_;
            }
            sub_826EC(&v203, (uint64_t)v123, v124);
            sub_826EC(&v203, (uint64_t)": ", 2LL);
            std::ostream::operator<<(&v203, *((void *)v122 + 5));
            uint64_t v125 = (const void *)(*(uint64_t (**)(void, void))(**(void **)(v181 + 24) + 48LL))( *(void *)(v181 + 24),  *((void *)v122 + 5));
            sub_7F234(&v193, v125);
            if (!v193)
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }

            sub_48100((uint64_t)&v194, (const __CFString *)v193);
            if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v126 = &v194;
            }
            else {
              uint64_t v126 = (std::string *)v194.__r_.__value_.__r.__words[0];
            }
            if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v127 = v194.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v127 = v194.__r_.__value_.__l.__size_;
            }
            sub_826EC(&v203, (uint64_t)v126, v127);
            sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
            char v128 = *(_OWORD **)v185;
            if (*(void *)v185 >= (unint64_t)v186)
            {
              unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v185 - (void)v184) >> 3);
              unint64_t v131 = v130 + 1;
              if (v130 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_7A87C();
              }
              else {
                unint64_t v132 = v131;
              }
              *((void *)&v197 + 1) = &v186;
              if (v132) {
                unint64_t v132 = (unint64_t)sub_8D44C(v132);
              }
              else {
                uint64_t v133 = 0LL;
              }
              std::string::size_type v134 = v132 + 24 * v130;
              __dst.__r_.__value_.__r.__words[0] = v132;
              __dst.__r_.__value_.__l.__size_ = v134;
              *(void *)&__int128 v197 = v132 + 24 * v133;
              __int128 v135 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v134 + 16) = __p.__r_.__value_.__l.__cap_;
              *(_OWORD *)std::string::size_type v134 = v135;
              memset(&__p, 0, sizeof(__p));
              __dst.__r_.__value_.__l.__cap_ = v134 + 24;
              sub_4802C((uint64_t *)&v184, &__dst);
              uint64_t v136 = *(void *)v185;
              sub_480A0((uint64_t)&__dst);
              *(void *)unint64_t v185 = v136;
              std::string::size_type v3 = v180;
            }

            else
            {
              __int128 v129 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(*(void *)v185 + 16LL) = __p.__r_.__value_.__l.__cap_;
              _OWORD *v128 = v129;
              memset(&__p, 0, sizeof(__p));
              *(void *)unint64_t v185 = (char *)v128 + 24;
            }

            if (v193) {
              CFRelease(v193);
            }
            v203.__r_.__value_.__r.__words[0] = v183;
            *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
            if (v206 < 0) {
              operator delete(v205);
            }
            std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
            std::ios::~ios(v207);
            uint64_t v137 = (unsigned int *)*((void *)v122 + 1);
            if (v137)
            {
              do
              {
                char v138 = v137;
                uint64_t v137 = *(unsigned int **)v137;
              }

              while (v137);
            }

            else
            {
              do
              {
                char v138 = (unsigned int *)*((void *)v122 + 2);
                BOOL v69 = *(void *)v138 == (void)v122;
                uint64_t v122 = v138;
              }

              while (!v69);
            }

            uint64_t v122 = v138;
          }

          while (v138 != (unsigned int *)(v181 + 80));
        }

        sub_82600((uint64_t)&v203);
        sub_826EC(&v203, (uint64_t)"PendingRequests (", 17LL);
        std::ostream::operator<<(&v203, (uint64_t)(*(void *)(v181 + 104) - *(void *)(v181 + 96)) >> 4);
        sub_826EC(&v203, (uint64_t)"):", 2LL);
        sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
        __int128 v139 = *(_OWORD **)v185;
        if (*(void *)v185 >= (unint64_t)v186)
        {
          unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v185 - (void)v184) >> 3);
          unint64_t v142 = v141 + 1;
          if (v141 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_7A87C();
          }
          else {
            unint64_t v143 = v142;
          }
          *((void *)&v197 + 1) = &v186;
          if (v143) {
            unint64_t v143 = (unint64_t)sub_8D44C(v143);
          }
          else {
            uint64_t v144 = 0LL;
          }
          std::string::size_type v145 = v143 + 24 * v141;
          __dst.__r_.__value_.__r.__words[0] = v143;
          __dst.__r_.__value_.__l.__size_ = v145;
          *(void *)&__int128 v197 = v143 + 24 * v144;
          __int128 v146 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v145 + 16) = __p.__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string::size_type v145 = v146;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__l.__cap_ = v145 + 24;
          sub_4802C((uint64_t *)&v184, &__dst);
          uint64_t v147 = *(void *)v185;
          sub_480A0((uint64_t)&__dst);
          *(void *)unint64_t v185 = v147;
        }

        else
        {
          __int128 v140 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v185 + 16LL) = __p.__r_.__value_.__l.__cap_;
          *__int128 v139 = v140;
          memset(&__p, 0, sizeof(__p));
          *(void *)unint64_t v185 = (char *)v139 + 24;
        }

        v203.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
        if (v206 < 0) {
          operator delete(v205);
        }
        std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
        std::ios::~ios(v207);
        uint64_t v149 = *(void *)(v181 + 96);
        for (uint64_t i = *(void *)(v181 + 104); v149 != i; v149 += 16LL)
        {
          sub_82600((uint64_t)&v203);
          sub_826EC(&v203, (uint64_t)"- ", 2LL);
          sub_33464(&v195, (unsigned int *)v149);
          if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v150 = &v195;
          }
          else {
            uint64_t v150 = (std::string *)v195.__r_.__value_.__r.__words[0];
          }
          if ((v195.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v151 = v195.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v151 = v195.__r_.__value_.__l.__size_;
          }
          sub_826EC(&v203, (uint64_t)v150, v151);
          std::ostream::operator<<(&v203, *(void *)(v149 + 8));
          sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
          int v152 = *(_OWORD **)v185;
          if (*(void *)v185 >= (unint64_t)v186)
          {
            unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v185 - (void)v184) >> 3);
            unint64_t v155 = v154 + 1;
            if (v154 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_7A87C();
            }
            else {
              unint64_t v156 = v155;
            }
            *((void *)&v197 + 1) = &v186;
            if (v156) {
              unint64_t v156 = (unint64_t)sub_8D44C(v156);
            }
            else {
              uint64_t v157 = 0LL;
            }
            std::string::size_type v158 = v156 + 24 * v154;
            __dst.__r_.__value_.__r.__words[0] = v156;
            __dst.__r_.__value_.__l.__size_ = v158;
            *(void *)&__int128 v197 = v156 + 24 * v157;
            __int128 v159 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v158 + 16) = __p.__r_.__value_.__l.__cap_;
            *(_OWORD *)std::string::size_type v158 = v159;
            memset(&__p, 0, sizeof(__p));
            __dst.__r_.__value_.__l.__cap_ = v158 + 24;
            sub_4802C((uint64_t *)&v184, &__dst);
            uint64_t v160 = *(void *)v185;
            sub_480A0((uint64_t)&__dst);
            *(void *)unint64_t v185 = v160;
            std::string::size_type v3 = v180;
          }

          else
          {
            __int128 v153 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(*(void *)v185 + 16LL) = __p.__r_.__value_.__l.__cap_;
            _OWORD *v152 = v153;
            memset(&__p, 0, sizeof(__p));
            *(void *)unint64_t v185 = (char *)v152 + 24;
          }

          v203.__r_.__value_.__r.__words[0] = v183;
          *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
          if (v206 < 0) {
            operator delete(v205);
          }
          std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
          std::ios::~ios(v207);
        }

        sub_82600((uint64_t)&v203);
        sub_826EC(&v203, (uint64_t)"Available clock devices (", 25LL);
        std::ostream::operator<<( &v203,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v181 + 128) - *(void *)(v181 + 120)) >> 3));
        sub_826EC(&v203, (uint64_t)"):", 2LL);
        sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
        uint64_t v161 = *(_OWORD **)v185;
        if (*(void *)v185 >= (unint64_t)v186)
        {
          unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v185 - (void)v184) >> 3);
          unint64_t v164 = v163 + 1;
          if (v163 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_7A87C();
          }
          else {
            unint64_t v165 = v164;
          }
          *((void *)&v197 + 1) = &v186;
          if (v165) {
            unint64_t v165 = (unint64_t)sub_8D44C(v165);
          }
          else {
            uint64_t v166 = 0LL;
          }
          std::string::size_type v167 = v165 + 24 * v163;
          __dst.__r_.__value_.__r.__words[0] = v165;
          __dst.__r_.__value_.__l.__size_ = v167;
          *(void *)&__int128 v197 = v165 + 24 * v166;
          __int128 v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v167 + 16) = __p.__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string::size_type v167 = v168;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__l.__cap_ = v167 + 24;
          sub_4802C((uint64_t *)&v184, &__dst);
          uint64_t v169 = *(void *)v185;
          sub_480A0((uint64_t)&__dst);
          *(void *)unint64_t v185 = v169;
        }

        else
        {
          __int128 v162 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v185 + 16LL) = __p.__r_.__value_.__l.__cap_;
          *uint64_t v161 = v162;
          memset(&__p, 0, sizeof(__p));
          *(void *)unint64_t v185 = (char *)v161 + 24;
        }

        v203.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
        if (v206 < 0) {
          operator delete(v205);
        }
        std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
        std::ios::~ios(v207);
        sub_25453C( (uint64_t *)&v184,  *(std::string **)v185,  *(const std::string **)(v181 + 120),  *(__int128 **)(v181 + 128),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v181 + 128) - *(void *)(v181 + 120)) >> 3));
        sub_82600((uint64_t)&v203);
        sub_826EC(&v203, (uint64_t)"Log messages (", 14LL);
        std::ostream::operator<<( &v203,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v181 + 152) - *(void *)(v181 + 144)) >> 3));
        sub_826EC(&v203, (uint64_t)"):", 2LL);
        sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
        id v170 = *(std::string **)v185;
        if (*(void *)v185 >= (unint64_t)v186)
        {
          unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v185 - (void)v184) >> 3);
          unint64_t v173 = v172 + 1;
          if (v172 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_7A87C();
          }
          else {
            unint64_t v174 = v173;
          }
          *((void *)&v197 + 1) = &v186;
          if (v174) {
            unint64_t v174 = (unint64_t)sub_8D44C(v174);
          }
          else {
            uint64_t v175 = 0LL;
          }
          std::string::size_type v176 = v174 + 24 * v172;
          __dst.__r_.__value_.__r.__words[0] = v174;
          __dst.__r_.__value_.__l.__size_ = v176;
          *(void *)&__int128 v197 = v174 + 24 * v175;
          __int128 v177 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v176 + 16) = __p.__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string::size_type v176 = v177;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__l.__cap_ = v176 + 24;
          sub_4802C((uint64_t *)&v184, &__dst);
          unint64_t v178 = *(std::string **)v185;
          sub_480A0((uint64_t)&__dst);
          *(void *)unint64_t v185 = v178;
        }

        else
        {
          __int128 v171 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v185 + 16LL) = __p.__r_.__value_.__l.__cap_;
          *(_OWORD *)&v170->__r_.__value_.__l.__data_ = v171;
          memset(&__p, 0, sizeof(__p));
          *(void *)unint64_t v185 = v170 + 1;
        }

        v203.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
        if (v206 < 0) {
          operator delete(v205);
        }
        std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
        std::ios::~ios(v207);
        sub_25453C( (uint64_t *)&v184,  *(std::string **)v185,  *(const std::string **)(v181 + 144),  *(__int128 **)(v181 + 152),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v181 + 152) - *(void *)(v181 + 144)) >> 3));
        sub_25453C( (uint64_t *)v3,  *(std::string **)(v3 + 8),  v184,  *(__int128 **)v185,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v185 - (void)v184) >> 3));
        v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
        sub_8CD60((void ***)&v203);
        v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
        sub_8CD60((void ***)&v203);
        sub_FF3B8(v189[0]);
        return;
      }
    }

    else if (!*(_BYTE *)(a2 + 271))
    {
      goto LABEL_184;
    }

    sub_82600((uint64_t)&v203);
    sub_826EC(&v203, (uint64_t)"- Activation Device: ", 21LL);
    int v98 = *(char *)(a2 + 271);
    if (v98 >= 0) {
      uint64_t v99 = a2 + 248;
    }
    else {
      uint64_t v99 = *(void *)(a2 + 248);
    }
    if (v98 >= 0) {
      uint64_t v100 = *(unsigned __int8 *)(a2 + 271);
    }
    else {
      uint64_t v100 = *(void *)(a2 + 256);
    }
    sub_826EC(&v203, v99, v100);
    sub_252E30(&__p, (uint64_t)&v203.__r_.__value_.__l.__size_);
    unint64_t v101 = *(void *)(v3 + 8);
    unint64_t v102 = *(void *)(v3 + 16);
    if (v101 >= v102)
    {
      unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - *(void *)v3) >> 3);
      unint64_t v105 = v104 + 1;
      if (v104 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - *(void *)v3) >> 3);
      if (2 * v106 > v105) {
        unint64_t v105 = 2 * v106;
      }
      if (v106 >= 0x555555555555555LL) {
        unint64_t v107 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v107 = v105;
      }
      *((void *)&v197 + 1) = v3 + 16;
      if (v107) {
        unint64_t v107 = (unint64_t)sub_8D44C(v107);
      }
      else {
        uint64_t v108 = 0LL;
      }
      std::string::size_type v109 = v107 + 24 * v104;
      __dst.__r_.__value_.__r.__words[0] = v107;
      __dst.__r_.__value_.__l.__size_ = v109;
      *(void *)&__int128 v197 = v107 + 24 * v108;
      __int128 v110 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v109 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string::size_type v109 = v110;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__l.__cap_ = v109 + 24;
      sub_4802C((uint64_t *)v3, &__dst);
      uint64_t v111 = *(void *)(v3 + 8);
      sub_480A0((uint64_t)&__dst);
      int v112 = (char)__p.__r_.__value_.__s.__size_;
      *(void *)(v3 + 8) = v111;
      if (v112 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v103 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v101 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v101 = v103;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v3 + 8) = v101 + 24;
    }

    v203.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v182;
    if (v206 < 0) {
      operator delete(v205);
    }
    std::streambuf::~streambuf(&v203.__r_.__value_.__r.__words[1]);
    std::ios::~ios(v207);
    goto LABEL_184;
  }

  sub_7D084(&v203, "VirtualAudio PlugIn is not initialized yet. Initialization state: ");
  std::to_string(&__dst, *(_DWORD *)(a2 + 108));
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v8 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v8 = __dst.__r_.__value_.__l.__size_;
  }
  std::string::append(&v203, (const std::string::value_type *)p_dst, v8);
  else {
    std::string __dst = v203;
  }
  *(void *)std::string::size_type v3 = 0LL;
  *(void *)(v3 + 8) = 0LL;
  *(void *)(v3 + 16) = 0LL;
  __p.__r_.__value_.__r.__words[0] = v3;
  __p.__r_.__value_.__s.__data_[8] = 0;
  __int16 v14 = (char *)operator new(0x18uLL);
  *(void *)std::string::size_type v3 = v14;
  *(void *)(v3 + 8) = v14;
  *(void *)(v3 + 16) = v14 + 24;
  *(void *)(v3 + 8) = sub_14AA58(v3 + 16, (__int128 *)&__dst, &v197, v14);
}

void sub_252A80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_252E30(std::string *a1, uint64_t a2)
{
  uint64_t v4 = sub_82A44(a2);
  if (v5)
  {
    __int128 v6 = (void *)(a2 + 64);
    std::string::size_type v7 = v4 - (void)v6;
  }

  else
  {
    std::string::size_type v7 = 0LL;
  }

  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
  a1->__r_.__value_.__l.__cap_ = *(void *)(a2 + 80);
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  std::string::resize(a1, v7 + v5, 0);
  std::string::erase(a1, 0LL, v7);
  sub_100748(a2);
}

void sub_252EC0(_Unwind_Exception *exception_object)
{
}

void sub_252EDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_B8E40(&v9, a3, "", 1487);
  for (uint64_t i = v10; i != &v9; uint64_t i = (uint64_t *)i[1])
  {
    unsigned int v8 = sub_578E8(*(void *)(a2 + 128), i[2], a4);
    if (v8) {
      sub_57ADC(a1, v8, v8);
    }
  }

  sub_1BB88(&v9);
}

void sub_252F90(_Unwind_Exception *a1)
{
}

void sub_252FB4(uint64_t *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  char v152 = 0;
  sub_6DD4();
  if ((*(unsigned int (**)(void))(qword_48F828 + 32))())
  {
    char v151 = v152;
    sub_82600((uint64_t)buf);
    sub_826EC(buf, (uint64_t)"VirtualAudio_Devices (", 22LL);
    std::ostream::operator<<(buf, (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
    sub_826EC(buf, (uint64_t)"):", 2LL);
    sub_252E30(__p, (uint64_t)&buf[8]);
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[1];
    if (v4 >= v3)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555LL) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      *(void *)&v154[32] = a1 + 2;
      if (v18) {
        unint64_t v18 = (unint64_t)sub_8D44C(v18);
      }
      else {
        uint64_t v19 = 0LL;
      }
      unint64_t v20 = v18 + 24 * v15;
      *(void *)unint64_t v154 = v18;
      *(void *)&v154[8] = v20;
      *(void *)&v154[24] = v18 + 24 * v19;
      __int128 v21 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *(void *)(v20 + 16) = __p[0].__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v20 = v21;
      memset(__p, 0, 24);
      *(void *)&v154[16] = v20 + 24;
      sub_4802C(a1, v154);
      uint64_t v22 = a1[1];
      sub_480A0((uint64_t)v154);
      int size = (char)__p[0].__r_.__value_.__s.__size_;
      a1[1] = v22;
      if (size < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v5 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *(void *)(v4 + 16) = __p[0].__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v4 = v5;
      memset(__p, 0, 24);
      a1[1] = v4 + 24;
    }

    if (v161 < 0) {
      operator delete(v159);
    }
    std::streambuf::~streambuf(&buf[8]);
    std::ios::~ios(v162);
    unint64_t v24 = *(uint64_t **)(a2 + 144);
    uint64_t v140 = a2;
    unint64_t v141 = *(uint64_t **)(a2 + 152);
    if (v24 != v141)
    {
      do
      {
        uint64_t v25 = *v24;
        strcpy(v154, "trsnbolg");
        v154[9] = 0;
        *(_WORD *)&v154[10] = 0;
        sub_2548AC((uint64_t)buf, v25);
        int v26 = *(_DWORD *)buf;
        if (*(_DWORD *)buf) {
          BOOL v27 = 1;
        }
        else {
          BOOL v27 = buf[16] == 0;
        }
        if (v27)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_4865A0;
          exception[2] = v26;
        }

        double v28 = *(double *)&buf[8];
        sub_82600((uint64_t)buf);
        sub_826EC(buf, (uint64_t)"- VirtualAudio_Device: ", 23LL);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v25 + 96LL))(&v153, v25);
        if ((v153.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v29 = &v153;
        }
        else {
          std::string::size_type v29 = (std::string *)v153.__r_.__value_.__r.__words[0];
        }
        if ((v153.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v30 = v153.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v30 = v153.__r_.__value_.__l.__size_;
        }
        sub_826EC(buf, (uint64_t)v29, v30);
        sub_826EC(buf, (uint64_t)"; running: ", 11LL);
        uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 512LL))(v25);
        std::ostream::operator<<(buf, v31);
        sub_826EC(buf, (uint64_t)"; sr: ", 6LL);
        std::ostream::operator<<(buf, v28);
        sub_252E30(__p, (uint64_t)&buf[8]);
        unint64_t v32 = a1[1];
        unint64_t v33 = a1[2];
        unint64_t v142 = v24;
        if (v32 >= v33)
        {
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *a1) >> 3);
          unint64_t v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_7A87C();
          }
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a1) >> 3);
          if (2 * v37 > v36) {
            unint64_t v36 = 2 * v37;
          }
          if (v37 >= 0x555555555555555LL) {
            unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v38 = v36;
          }
          *(void *)&v154[32] = a1 + 2;
          if (v38) {
            unint64_t v38 = (unint64_t)sub_8D44C(v38);
          }
          else {
            uint64_t v39 = 0LL;
          }
          unint64_t v40 = v38 + 24 * v35;
          *(void *)unint64_t v154 = v38;
          *(void *)&v154[8] = v40;
          *(void *)&v154[24] = v38 + 24 * v39;
          __int128 v41 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *(void *)(v40 + 16) = __p[0].__r_.__value_.__l.__cap_;
          *(_OWORD *)unint64_t v40 = v41;
          memset(__p, 0, 24);
          *(void *)&v154[16] = v40 + 24;
          sub_4802C(a1, v154);
          uint64_t v42 = a1[1];
          sub_480A0((uint64_t)v154);
          int v43 = (char)__p[0].__r_.__value_.__s.__size_;
          a1[1] = v42;
          if (v43 < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
        }

        else
        {
          __int128 v34 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *(void *)(v32 + 16) = __p[0].__r_.__value_.__l.__cap_;
          *(_OWORD *)unint64_t v32 = v34;
          memset(__p, 0, 24);
          a1[1] = v32 + 24;
        }

        *(void *)AudioObjectPropertyAddress buf = v144;
        *(void *)&buf[*(void *)(v144 - 24)] = v145;
        if (v161 < 0) {
          operator delete(v159);
        }
        std::streambuf::~streambuf(&buf[8]);
        std::ios::~ios(v162);
        char v44 = 0;
        uint64_t v45 = 0LL;
        __int16 v150 = 1;
        do
        {
          char v143 = v44;
          if (*((_BYTE *)&v150 + v45)) {
            uint64_t v46 = 504LL;
          }
          else {
            uint64_t v46 = 528LL;
          }
          if (*((_BYTE *)&v150 + v45)) {
            uint64_t v47 = 496LL;
          }
          else {
            uint64_t v47 = 520LL;
          }
          if (*((_BYTE *)&v150 + v45)) {
            uint64_t v48 = v25 + 496;
          }
          else {
            uint64_t v48 = v25 + 520;
          }
          uint64_t v49 = *(void *)(v25 + v47);
          if (((*(void *)(v25 + v46) - v49) & 0x7FFFFFFF8LL) != 0)
          {
            unint64_t v50 = 0LL;
            while (1)
            {
              uint64_t v51 = v50 >= (*(void *)(v48 + 8) - v49) >> 3 ? 0LL : *(void *)(v49 + 8 * v50);
              strcpy((char *)&v153, "tmfsbolg");
              v153.__r_.__value_.__s.__data_[9] = 0;
              WORD1(v153.__r_.__value_.__r.__words[1]) = 0;
              if ((sub_2F4E5C(v51) & 1) == 0) {
                break;
              }
              LODWORD(v148.__r_.__value_.__l.__data_) = sub_2F4EB4(v51);
              if (!LODWORD(v148.__r_.__value_.__l.__data_))
              {
                int v52 = 2003329396;
                goto LABEL_204;
              }

              memset(buf, 0, sizeof(buf));
              int v52 = sub_2F4F0C(v51);
              if (v52) {
                goto LABEL_204;
              }
              *(_OWORD *)unint64_t v154 = *(_OWORD *)&buf[1];
              *(_OWORD *)&v154[16] = *(_OWORD *)&buf[17];
              *(void *)&v154[31] = *(void *)&buf[32];
              __p[0].__r_.__value_.__s.__data_[0] = buf[0];
              *(_OWORD *)((char *)&__p[0].__r_.__value_.__l.__data_ + 1) = *(_OWORD *)&buf[1];
              *(_OWORD *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 1) = *(_OWORD *)&v154[16];
              __p[1].__r_.__value_.__l.__size_ = *(void *)&buf[32];
              sub_82600((uint64_t)buf);
              sub_826EC(buf, (uint64_t)"  - VirtualAudio_Stream: ", 25LL);
              (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v51 + 96LL))(&v148, v51);
              if ((v148.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                __int128 v53 = &v148;
              }
              else {
                __int128 v53 = (std::string *)v148.__r_.__value_.__r.__words[0];
              }
              if ((v148.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                uint64_t v54 = v148.__r_.__value_.__s.__size_;
              }
              else {
                uint64_t v54 = v148.__r_.__value_.__l.__size_;
              }
              sub_826EC(buf, (uint64_t)v53, v54);
              sub_826EC(buf, (uint64_t)"; fmt: ", 7LL);
              sub_2CC00(&v147, (uint64_t)__p);
              if ((v147.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                unint64_t v55 = &v147;
              }
              else {
                unint64_t v55 = (std::string *)v147.__r_.__value_.__r.__words[0];
              }
              if ((v147.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                uint64_t v56 = v147.__r_.__value_.__s.__size_;
              }
              else {
                uint64_t v56 = v147.__r_.__value_.__l.__size_;
              }
              sub_826EC(buf, (uint64_t)v55, v56);
              sub_252E30(&v153, (uint64_t)&buf[8]);
              unint64_t v57 = a1[1];
              unint64_t v58 = a1[2];
              if (v57 >= v58)
              {
                unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *a1) >> 3);
                unint64_t v61 = v60 + 1;
                if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_7A87C();
                }
                unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *a1) >> 3);
                if (2 * v62 > v61) {
                  unint64_t v61 = 2 * v62;
                }
                if (v62 >= 0x555555555555555LL) {
                  unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v63 = v61;
                }
                *(void *)&v154[32] = a1 + 2;
                if (v63) {
                  unint64_t v63 = (unint64_t)sub_8D44C(v63);
                }
                else {
                  uint64_t v64 = 0LL;
                }
                unint64_t v65 = v63 + 24 * v60;
                *(void *)unint64_t v154 = v63;
                *(void *)&v154[8] = v65;
                *(void *)&v154[24] = v63 + 24 * v64;
                __int128 v66 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
                *(void *)(v65 + 16) = v153.__r_.__value_.__l.__cap_;
                *(_OWORD *)unint64_t v65 = v66;
                memset(&v153, 0, sizeof(v153));
                *(void *)&v154[16] = v65 + 24;
                sub_4802C(a1, v154);
                uint64_t v67 = a1[1];
                sub_480A0((uint64_t)v154);
                int v68 = (char)v153.__r_.__value_.__s.__size_;
                a1[1] = v67;
                if (v68 < 0) {
                  operator delete(v153.__r_.__value_.__l.__data_);
                }
              }

              else
              {
                __int128 v59 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
                *(void *)(v57 + 16) = v153.__r_.__value_.__l.__cap_;
                *(_OWORD *)unint64_t v57 = v59;
                memset(&v153, 0, sizeof(v153));
                a1[1] = v57 + 24;
              }

              *(void *)AudioObjectPropertyAddress buf = v144;
              *(void *)&buf[*(void *)(v144 - 24)] = v145;
              if (v161 < 0) {
                operator delete(v159);
              }
              std::streambuf::~streambuf(&buf[8]);
              std::ios::~ios(v162);
              ++v50;
              uint64_t v49 = *(void *)(v25 + v47);
            }

            int v52 = 2003332927;
LABEL_204:
            unint64_t v130 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v130 = &off_4865A0;
            void v130[2] = v52;
          }

void sub_254240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int a37, __int16 a38, char a39, void *a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  a49 = a20;
  *(uint64_t *)((char *)&a49 + *(void *)(a20 - 24)) = a21;
  if (a63 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf(&a50);
  std::ios::~ios(&a66);
  sub_254868(&a39);
  a27 = a22;
  sub_8CD60((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_25453C(uint64_t *a1, std::string *a2, const std::string *a3, __int128 *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2;
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    uint64_t v11 = (char *)a1[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) >= a5)
    {
      uint64_t v19 = v11 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (char *)a2) >> 3)) >= a5)
      {
        unint64_t v20 = (__int128 *)&a3[a5];
        __int128 v21 = (char *)a1[1];
      }

      else
      {
        unint64_t v20 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((v11 - (char *)a2) >> 3));
        __int128 v21 = sub_14AA58((uint64_t)(a1 + 2), v20, a4, v11);
        a1[1] = (uint64_t)v21;
        if (v19 < 1) {
          return;
        }
      }

      uint64_t v22 = &v7[a5];
      __int128 v23 = &v21[-24 * a5];
      unint64_t v24 = v21;
      if (v23 < v11)
      {
        unint64_t v24 = v21;
        do
        {
          __int128 v25 = *(_OWORD *)v23;
          *((void *)v24 + 2) = *((void *)v23 + 2);
          *(_OWORD *)unint64_t v24 = v25;
          v24 += 24;
          *((void *)v23 + 1) = 0LL;
          *((void *)v23 + 2) = 0LL;
          *(void *)__int128 v23 = 0LL;
          v23 += 24;
        }

        while (v23 < v11);
      }

      a1[1] = (uint64_t)v24;
      if (v21 != (char *)v22)
      {
        int v26 = v21 - 24;
        uint64_t v27 = 8 * ((v21 - (char *)v22) >> 3);
        do
        {
          if (v26[23] < 0) {
            operator delete(*(void **)v26);
          }
          double v28 = (__int128 *)((char *)&v7[-1] + v27);
          __int128 v29 = *v28;
          *((void *)v26 + 2) = *(void *)((char *)&v7->__r_.__value_.__l + v27 - 8);
          *(_OWORD *)int v26 = v29;
          v26 -= 24;
          v7->__r_.__value_.__s.__data_[v27 - 1] = 0;
          *(_BYTE *)double v28 = 0;
          v27 -= 24LL;
        }

        while (v27);
      }

      for (; v6 != (const std::string *)v20; ++v7)
        std::string::operator=(v7, v6++);
    }

    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a5 - 0x5555555555555555LL * ((uint64_t)&v11[-*a1] >> 3);
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v13) {
        uint64_t v16 = a5 - 0x5555555555555555LL * ((uint64_t)&v11[-*a1] >> 3);
      }
      if (v15 >= 0x555555555555555LL) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v43 = v10;
      if (v17) {
        unint64_t v17 = (unint64_t)sub_8D44C(v17);
      }
      else {
        uint64_t v18 = 0LL;
      }
      unint64_t v30 = v17 + 24 * v14;
      unint64_t v40 = v17;
      *(void *)&__int128 v41 = v30;
      *((void *)&v41 + 1) = v30;
      unint64_t v42 = v17 + 24 * v18;
      uint64_t v31 = 3 * a5;
      uint64_t v32 = v30 + 24 * a5;
      uint64_t v33 = 8 * v31;
      do
      {
        if ((char)v6->__r_.__value_.__s.__size_ < 0)
        {
          sub_24054((_BYTE *)v30, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
        }

        else
        {
          __int128 v34 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
          *(void *)(v30 + 16) = v6->__r_.__value_.__l.__cap_;
          *(_OWORD *)unint64_t v30 = v34;
        }

        v30 += 24LL;
        ++v6;
        v33 -= 24LL;
      }

      while (v33);
      *((void *)&v41 + 1) = v32;
      *(void *)&__int128 v41 = sub_8D9BC(v10, (uint64_t)v7, (uint64_t)v7, *a1, *a1, v41, v41);
      unint64_t v35 = (std::string *)a1[1];
      uint64_t v46 = v32;
      uint64_t v47 = v32;
      v44[0] = v10;
      v44[1] = &v46;
      v44[2] = &v47;
      if (v7 != v35)
      {
        do
        {
          __int128 v36 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
          *(void *)(v32 + 16) = v7->__r_.__value_.__l.__cap_;
          *(_OWORD *)uint64_t v32 = v36;
          v32 += 24LL;
          v7->__r_.__value_.__l.__size_ = 0LL;
          v7->__r_.__value_.__l.__cap_ = 0LL;
          v7->__r_.__value_.__r.__words[0] = 0LL;
          ++v7;
        }

        while (v7 != v35);
        uint64_t v47 = v32;
      }

      char v45 = 1;
      sub_8D490((uint64_t)v44);
      __int128 v37 = *(_OWORD *)a1;
      uint64_t v38 = v42;
      *a1 = v41;
      a1[1] = v32;
      __int128 v41 = v37;
      uint64_t v39 = a1[2];
      a1[2] = v38;
      unint64_t v42 = v39;
      unint64_t v40 = v37;
      sub_480A0((uint64_t)&v40);
    }
  }

void sub_254844( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

_BYTE *sub_254868(_BYTE *a1)
{
  if (*a1)
  {
    sub_6DD4();
    (*(void (**)(void))(qword_48F828 + 24))();
  }

  return a1;
}

uint64_t sub_2548AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_2F4E5C(a2);
  if ((result & 1) != 0)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    uint64_t result = sub_2F4EB4(a2);
    if ((_DWORD)result)
    {
      uint64_t result = sub_2F4F0C(a2);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        *(void *)(a1 + 8) = v5;
        *(_BYTE *)(a1 + 16) = 1;
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }

  return result;
}

void sub_254978(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_734C4(v2[1]);
    operator delete(v2);
  }

void sub_2549B4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    unint64_t v3 = (void *)v2[3];
    if (v3)
    {
      v2[4] = (uint64_t)v3;
      operator delete(v3);
    }

    sub_9156C(v2 + 2);
    sub_9156C(v2 + 1);
    sub_9156C(v2);
    operator delete(v2);
  }

void sub_254A10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_6DD4();
    int v3 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    sub_6DD4();
    if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
    {
      unint64_t v4 = (os_log_t *)sub_138E8(8);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v9 = 136315394;
          *(void *)&v9[4] = "RoutingManager.cpp";
          __int16 v10 = 1024;
          int v11 = 1926;
          _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to acquire routing mutex.", v9, 0x12u);
        }
      }
    }

    if (v3) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
    sub_32C8C(*(void **)(v2 + 568));
    sub_32C8C(*(void **)(v2 + 536));
    *(void *)uint64_t v9 = v2 + 504;
    sub_A0CF0((void ***)v9);
    sub_85D64(*(void **)(v2 + 488));
    sub_DDEE4((uint64_t *)(v2 + 456));
    *(void *)uint64_t v9 = v2 + 392;
    sub_8F2D4((void ***)v9);
    sub_51FA0(v2 + 344);
    sub_51FA0(v2 + 304);
    sub_51FA0(v2 + 264);
    *(void *)uint64_t v9 = v2 + 240;
    sub_8C8F0((void ***)v9);
    *(void *)uint64_t v9 = v2 + 216;
    sub_8C8F0((void ***)v9);
    sub_FF3B8(*(void **)(v2 + 160));
    sub_32C8C(*(void **)(v2 + 128));
    sub_1112F0(*(void **)(v2 + 104));
    sub_1112B0(*(void **)(v2 + 80));
    sub_32C8C(*(void **)(v2 + 56));
    uint64_t v6 = *(void *)(v2 + 24);
    *(void *)(v2 + memset(buf, 0, 24) = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t v7 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0LL;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v8 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0LL;
    if (v8) {
      sub_129F68(v8);
    }
    operator delete((void *)v2);
  }

void sub_254C64(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_254C74(uint64_t a1, uint64_t a2, const __CFDictionary **a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 144);
  uint64_t v6 = *(void *)(a2 + 152);
  if (v5 != v6)
  {
    uint64_t v7 = v5 + 8;
    do
    {
      BOOL v8 = sub_24320(*(void *)(*(void *)(v7 - 8) + 640LL));
      if (v8) {
        break;
      }
      BOOL v116 = v7 == v6;
      v7 += 8LL;
    }

    while (!v116);
    if (v8)
    {
      uint64_t v369 = sub_138E8(13);
      id v370 = sub_8C7D4(1, *(void **)v369, *(void *)(v369 + 8));
      __int128 v371 = (os_log_s *)objc_claimAutoreleasedReturnValue(v370);
      v372 = v371;
      if (v371 && os_log_type_enabled(v371, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3714;
        _os_log_impl( &dword_0,  v372,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
  }

  if (!*a3)
  {
    uint64_t v358 = sub_138E8(13);
    id v359 = sub_8C7D4(1, *(void **)v358, *(void *)(v358 + 8));
    v360 = (os_log_s *)objc_claimAutoreleasedReturnValue(v359);
    uint64_t v361 = v360;
    if (v360 && os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3715;
      _os_log_impl( &dword_0,  v361,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    v362 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v362, "Precondition failure.");
  }

  id v9 = *(id *)sub_138E8(2);
  __int16 v10 = v9;
  if (v9)
  {
    int v11 = (os_log_s *)v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3718;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = a4;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change initiated [ %s ]. Route configuration:",  (uint8_t *)buf,  0x1Cu);
    }
  }

  uint64_t v12 = *a3;
  sub_7D084(__p, "  ");
  sub_1533B4(&v431, v12, 1, (const void **)__p);
  if (v430 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = v432; (uint64_t *)i != &v431; uint64_t i = *(void *)(i + 8))
  {
    id v14 = *(id *)sub_138E8(2);
    unint64_t v15 = v14;
    if (v14)
    {
      uint64_t v16 = (os_log_s *)v14;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v17 = (void *)(i + 16);
        buf[0] = 136315650;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3724;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v17;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", (uint8_t *)buf, 0x1Cu);
      }
    }
  }

  sub_49A70(&v391, a2, a3, 1, 1);
  if (v428[16])
  {
    uint64_t v18 = *(void **)(a2 + 120);
    sub_E1FDC((uint64_t)&v441, v18);
    uint64_t v19 = sub_138E8(2);
    uint64_t v20 = sub_138E8(34);
    char v21 = 0;
    uint64_t v22 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v23 = *(void *)(v19 + 8);
    while (1)
    {
      uint64_t v24 = (int)buf[v22];
      char v25 = v21;
      if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
        break;
      }
      char v21 = 1;
      uint64_t v22 = 1LL;
      if ((v25 & 1) != 0) {
        goto LABEL_29;
      }
    }

    if ((v23 & v24) == 0) {
      uint64_t v19 = v20;
    }
LABEL_29:
    int v26 = *(os_log_s **)v19;
    if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_SessionManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 24;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Clearing Audio Session information",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v27 = (unsigned int *)(v18 + 1);
    sub_734C4((void *)v18[1]);
    *uint64_t v18 = v18 + 1;
    v18[2] = 0LL;
    v18[1] = 0LL;
    double v28 = v427;
    if (v427 != v428)
    {
      do
      {
        unsigned int v29 = *((_DWORD *)v28 + 8);
        unint64_t v30 = (uint64_t *)*((void *)&v441 + 1);
        if (*((void *)&v441 + 1))
        {
          uint64_t v31 = (__int128 *)((char *)&v441 + 8);
          uint64_t v32 = (uint64_t *)*((void *)&v441 + 1);
          do
          {
            uint64_t v33 = v32;
            __int128 v34 = v31;
            unsigned int v35 = *((_DWORD *)v32 + 8);
            if (v35 >= v29) {
              uint64_t v31 = v32;
            }
            else {
              ++v32;
            }
            uint64_t v32 = (uint64_t *)*v32;
          }

          while (v32);
          if (v31 != (__int128 *)((char *)&v441 + 8))
          {
            if (v35 < v29) {
              uint64_t v33 = v34;
            }
            if (v29 >= *((_DWORD *)v33 + 8))
            {
              while (1)
              {
                while (1)
                {
                  unsigned int v36 = *((_DWORD *)v30 + 8);
                  if (v29 >= v36) {
                    break;
                  }
                  unint64_t v30 = (uint64_t *)*v30;
                  if (!v30) {
                    goto LABEL_641;
                  }
                }

                if (v36 >= v29) {
                  break;
                }
                unint64_t v30 = (uint64_t *)v30[1];
                if (!v30) {
LABEL_641:
                }
                  sub_8F9A4("map::at:  key not found");
              }

              if (*((_BYTE *)v30 + 136))
              {
                uint64_t v37 = *(uint64_t *)((char *)v30 + 132);
                if ((v37 & 0xFF00000000LL) == 0) {
                  sub_8DEEC();
                }
                *((_DWORD *)v28 + 33) = v37;
                v28[136] = 1;
              }
            }
          }
        }

        uint64_t v38 = sub_8C9B8((uint64_t **)v18, v29, (_DWORD *)v28 + 8);
        sub_8CB08((uint64_t)(v38 + 5), (uint64_t)(v28 + 40));
        if (*((void *)&v441 + 1))
        {
          unsigned int v39 = *((_DWORD *)v28 + 8);
          unint64_t v40 = (uint64_t *)&v441 + 1;
          uint64_t v41 = *((void *)&v441 + 1);
          do
          {
            unint64_t v42 = (uint64_t *)v41;
            uint64_t v43 = v40;
            unsigned int v44 = *(_DWORD *)(v41 + 32);
            char v45 = (uint64_t **)(v41 + 8);
            if (v44 >= v39) {
              unint64_t v40 = (uint64_t *)v41;
            }
            else {
              v41 += 8LL;
            }
            uint64_t v41 = *(void *)v41;
          }

          while (v41);
          if (v40 != (uint64_t *)((char *)&v441 + 8))
          {
            uint64_t v46 = v44 >= v39 ? v42 : v43;
            if (v39 >= *((_DWORD *)v46 + 8))
            {
              if (v44 < v39) {
                char v45 = (uint64_t **)(v43 + 1);
              }
              uint64_t v47 = *v45;
              uint64_t v48 = v40;
              if (*v45)
              {
                do
                {
                  uint64_t v49 = v47;
                  uint64_t v47 = (uint64_t *)*v47;
                }

                while (v47);
              }

              else
              {
                do
                {
                  uint64_t v49 = (uint64_t *)v48[2];
                  BOOL v116 = *v49 == (void)v48;
                  uint64_t v48 = v49;
                }

                while (!v116);
              }

              v442 = (uint64_t *)((char *)v442 - 1);
              sub_911E8(*((uint64_t **)&v441 + 1), v40);
              if (v44 >= v39) {
                uint64_t v50 = (uint64_t)(v42 + 5);
              }
              else {
                uint64_t v50 = (uint64_t)(v43 + 5);
              }
              sub_8CC80(v50);
              operator delete(v40);
            }
          }
        }

        uint64_t v51 = (void *)*((void *)v28 + 1);
        if (v51)
        {
          do
          {
            int v52 = v51;
            uint64_t v51 = (void *)*v51;
          }

          while (v51);
        }

        else
        {
          do
          {
            int v52 = (_BYTE *)*((void *)v28 + 2);
            BOOL v116 = *(void *)v52 == (void)v28;
            double v28 = v52;
          }

          while (!v116);
        }

        double v28 = v52;
      }

      while (v52 != v428);
    }

    __int128 v53 = (_OWORD *)v441;
    if ((__int128 *)v441 != (__int128 *)((char *)&v441 + 8))
    {
      do
      {
        if (sub_8F800((uint64_t)v53 + 40))
        {
          unsigned int v54 = *((_DWORD *)v53 + 8);
          *((_BYTE *)v53 + 240) = 0;
          unint64_t v55 = sub_8C9B8((uint64_t **)v18, v54, (_DWORD *)v53 + 8);
          sub_8CB08((uint64_t)(v55 + 5), (uint64_t)v53 + 40);
        }

        uint64_t v56 = (void *)*((void *)v53 + 1);
        if (v56)
        {
          do
          {
            unint64_t v57 = v56;
            uint64_t v56 = (void *)*v56;
          }

          while (v56);
        }

        else
        {
          do
          {
            unint64_t v57 = (_OWORD *)*((void *)v53 + 2);
            BOOL v116 = *(void *)v57 == (void)v53;
            __int128 v53 = v57;
          }

          while (!v116);
        }

        __int128 v53 = v57;
      }

      while (v57 != (__int128 *)((char *)&v441 + 8));
    }

    uint64_t v58 = sub_138E8(2);
    uint64_t v59 = sub_138E8(34);
    char v60 = 0;
    uint64_t v61 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v62 = *(void *)(v58 + 8);
    while (1)
    {
      uint64_t v63 = (int)buf[v61];
      char v64 = v60;
      if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
        break;
      }
      char v60 = 1;
      uint64_t v61 = 1LL;
      if ((v64 & 1) != 0) {
        goto LABEL_97;
      }
    }

    if ((v62 & v63) == 0) {
      uint64_t v58 = v59;
    }
LABEL_97:
    unint64_t v65 = *(os_log_s **)v58;
    if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v66 = v18[2];
      uint64_t v67 = (unsigned int *)*v18;
      memset(&v385, 0, sizeof(v385));
      std::string::append(&v385, "{ ", 2uLL);
      if (v67 != v27)
      {
        while (1)
        {
          sub_E2164(&v433, v67 + 8);
          if ((v433.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v68 = &v433;
          }
          else {
            int v68 = (std::string *)v433.__r_.__value_.__r.__words[0];
          }
          if ((v433.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v433.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v433.__r_.__value_.__l.__size_;
          }
          std::string::append(&v385, (const std::string::value_type *)v68, size);
          uint64_t v70 = (unsigned int *)*((void *)v67 + 1);
          if (v70)
          {
            do
            {
              uint64_t v71 = v70;
              uint64_t v70 = *(unsigned int **)v70;
            }

            while (v70);
          }

          else
          {
            do
            {
              uint64_t v71 = (unsigned int *)*((void *)v67 + 2);
              BOOL v116 = *(void *)v71 == (void)v67;
              uint64_t v67 = v71;
            }

            while (!v116);
          }

          if (v71 == v27) {
            break;
          }
          std::string::append(&v385, ", ", 2uLL);
          uint64_t v67 = v71;
        }
      }

      std::string::append(&v385, " }", 2uLL);
      if ((v385.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v72 = &v385;
      }
      else {
        uint64_t v72 = (std::string *)v385.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "VirtualAudio_SessionManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 54;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v66;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v72;
      _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Active Audio Sessions: %zu, %s",  (uint8_t *)buf,  0x26u);
    }

    sub_734C4(*((void **)&v441 + 1));
    uint64_t v73 = *(void **)(a2 + 120);
    BOOL v76 = (void *)*v73;
    unsigned int v75 = v73 + 1;
    uint64_t v74 = v76;
    if (v76 != v75)
    {
      v379 = *(void **)(a2 + 120);
      unint64_t v77 = 0LL;
      unsigned int v78 = 0LL;
      BOOL v79 = 0LL;
      while (!sub_33CA6C((uint64_t)(v74 + 5)) || !*((_BYTE *)v74 + 240))
      {
LABEL_162:
        uint64_t v110 = (void *)v74[1];
        if (v110)
        {
          do
          {
            uint64_t v111 = v110;
            uint64_t v110 = (void *)*v110;
          }

          while (v110);
        }

        else
        {
          do
          {
            uint64_t v111 = (void *)v74[2];
            BOOL v116 = *v111 == (void)v74;
            uint64_t v74 = v111;
          }

          while (!v116);
        }

        uint64_t v74 = v111;
        if (v111 == v75)
        {
          uint64_t v74 = (void *)*v379;
          goto LABEL_170;
        }
      }

      sub_8F968(buf, (const void *)v74[31], v74[32]);
      std::string::size_type v80 = *(uint64_t **)buf;
      if ((uint64_t)(*(void *)&buf[2] - *(void *)buf) >= 1)
      {
        uint64_t v81 = (uint64_t)(*(void *)&buf[2] - *(void *)buf) >> 3;
        uint64_t v82 = (char *)v78 - (char *)v77;
        __int128 v83 = (char *)v77 + (((char *)v78 - (char *)v77) & 0xFFFFFFFFFFFFFFF8LL);
        if (v81 > v79 - v78)
        {
          uint64_t v84 = v82 >> 3;
          unint64_t v85 = (v82 >> 3) + v81;
          if (v85 >> 61) {
            sub_7A87C();
          }
          else {
            unint64_t v86 = v85;
          }
          unint64_t v87 = (uint64_t *)((char *)v77 + (((char *)v78 - (char *)v77) & 0xFFFFFFFFFFFFFFF8LL));
          if (v86)
          {
            unint64_t v88 = (uint64_t *)sub_7DC90(v86);
            uint64_t v90 = v89;
            uint64_t v91 = v77;
          }

          else
          {
            uint64_t v91 = v77;
            unint64_t v88 = 0LL;
            uint64_t v90 = 0LL;
          }

          unint64_t v77 = &v88[v84];
          unint64_t v102 = &v77[v81];
          uint64_t v103 = 8 * v81;
          uint64_t v104 = v77;
          do
          {
            uint64_t v105 = *v80++;
            *v104++ = v105;
            v103 -= 8LL;
          }

          while (v103);
          if (v78 != v91)
          {
            uint64_t v106 = v84;
            do
            {
              v88[v106 - 1] = v91[v106 - 1];
              --v106;
            }

            while (v106 * 8);
            unint64_t v77 = v88;
          }

          int64_t v107 = (char *)v78 - (char *)v87;
          if (v78 != v87)
          {
            int v108 = v102;
            uint64_t v109 = v90;
            memmove(v102, v87, (char *)v78 - (char *)v87);
            unint64_t v102 = v108;
            uint64_t v90 = v109;
          }

          BOOL v79 = &v88[v90];
          unsigned int v78 = (uint64_t *)((char *)v102 + v107);
          if (v91) {
            operator delete(v91);
          }
          goto LABEL_160;
        }

        uint64_t v92 = (char *)v78 - v83;
        uint64_t v93 = ((char *)v78 - v83) >> 3;
        if (v93 >= v81)
        {
          uint64_t v95 = *(void *)buf + 8 * v81;
          unint64_t v97 = v78;
LABEL_140:
          unint64_t v98 = &v97[-v81];
          __int128 v99 = v97;
          while (v98 < v78)
          {
            uint64_t v100 = *v98++;
            *v99++ = v100;
          }

          unint64_t v101 = (uint64_t *)&v83[8 * v81];
          if (v97 != v101) {
            memmove(&v97[-(v97 - v101)], v83, (char *)v97 - (char *)v101);
          }
          unsigned int v78 = v99;
          goto LABEL_160;
        }

        uint64_t v94 = v79;
        uint64_t v95 = *(void *)buf + 8 * v93;
        uint64_t v96 = *(void *)&buf[2] - v95;
        if (*(void *)&buf[2] != v95) {
          memmove(v78, (const void *)(*(void *)buf + 8 * v93), *(void *)&buf[2] - v95);
        }
        unint64_t v97 = (uint64_t *)((char *)v78 + v96);
        if (v92 >= 1)
        {
          BOOL v79 = v94;
          __int128 v83 = (char *)v77 + (((char *)v78 - (char *)v77) & 0xFFFFFFFFFFFFFFF8LL);
          goto LABEL_140;
        }

        unsigned int v78 = (uint64_t *)((char *)v78 + v96);
        BOOL v79 = v94;
      }

LABEL_160:
      if (*(void *)buf) {
        operator delete(*(void **)buf);
      }
      goto LABEL_162;
    }

    unint64_t v77 = 0LL;
    unsigned int v78 = 0LL;
LABEL_170:
    if (v74 != v75)
    {
      do
      {
        buf[0] = *((_DWORD *)v74 + 8);
        sub_8D9F8((uint64_t)&buf[2], (uint64_t)(v74 + 5));
        if (v450)
        {
          v433.__r_.__value_.__r.__words[0] = *(void *)&buf[4];
          uint64_t v434 = 0LL;
          *(_OWORD *)&v433.__r_.__value_.__r.__words[1] = 0uLL;
          sub_8DC78( &v433.__r_.__value_.__s.__data_[8],  *(__int128 **)&buf[6],  *(__int128 **)&buf[8],  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)&buf[6]) >> 3));
          memset(v435, 0, sizeof(v435));
          sub_8DC78(v435, v446, v447, 0xAAAAAAAAAAAAAAABLL * (((char *)v447 - (char *)v446) >> 3));
          uint64_t v436 = 0LL;
          v437 = 0LL;
          uint64_t v438 = 0LL;
          sub_8D668(&v436, v448, v449, (v449 - (uint64_t)v448) >> 3);
          sub_483AC(a2, (unsigned __int8 *)&v433);
          sub_57B74((CFDictionaryRef *)&v385, a2, (__int128 **)&v433);
          sub_5AC9C((uint64_t *)&v385, v77, v78, 8LL);
          if (v385.__r_.__value_.__r.__words[0]) {
            CFRelease(v385.__r_.__value_.__l.__data_);
          }
          if (v436)
          {
            v437 = v436;
            operator delete(v436);
          }

          *(void *)&__int128 v441 = v435;
          sub_8CD60((void ***)&v441);
          *(void *)&__int128 v441 = &v433.__r_.__value_.__l.__size_;
          sub_8CD60((void ***)&v441);
        }

        sub_8CC80((uint64_t)&buf[2]);
        uint64_t v112 = (void *)v74[1];
        if (v112)
        {
          do
          {
            unint64_t v113 = v112;
            uint64_t v112 = (void *)*v112;
          }

          while (v112);
        }

        else
        {
          do
          {
            unint64_t v113 = (void *)v74[2];
            BOOL v116 = *v113 == (void)v74;
            uint64_t v74 = v113;
          }

          while (!v116);
        }

        uint64_t v74 = v113;
      }

      while (v113 != v75);
    }

    if (v77) {
      operator delete(v77);
    }
    if (*a3 && CFDictionaryGetCount(*a3) == 1 && (sub_7051C() & 1) == 0)
    {
      sub_72210((uint64_t)buf, 1920099684LL);
      uint64_t v136 = sub_128D9C(a1, (uint64_t)buf);
      *(_BYTE *)(v136 + 40) = 0;
      *(_BYTE *)(v136 + 784) = 0;
      uint64_t v137 = *(uint64_t **)&buf[4];
      if (!*(void *)&buf[4]) {
        goto LABEL_554;
      }
      goto LABEL_553;
    }
  }

  uint64_t v114 = *(void *)(a2 + 112);
  if (v428[25])
  {
    int v115 = 0;
    *(_BYTE *)(v114 + 385) = 0;
  }

  else
  {
    int v115 = *(unsigned __int8 *)(v114 + 385);
  }

  BOOL v116 = v392 == 1768776806 && v391 == 1668505974;
  if (!v116 || v115 == 0) {
    int v118 = v392;
  }
  else {
    int v118 = 1835361382;
  }
  int v392 = v118;
  unint64_t v119 = (char *)(a2 + 448);
  if (*(_BYTE *)(a2 + 472))
  {
    sub_75418(buf, a2);
    int v120 = buf[0];
    sub_52EF0((uint64_t)buf);
    if (v391 != v120)
    {
      sub_75418(buf, a2);
      int v121 = buf[1];
      sub_52EF0((uint64_t)buf);
      if (v392 != v121)
      {
        id v122 = *(id *)sub_138E8(2);
        uint64_t v123 = v122;
        if (v122)
        {
          int v124 = (os_log_s *)v122;
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
          {
            sub_91FF0(&v433, *(unsigned int **)(a2 + 448), *(unsigned int **)(a2 + 456));
            uint64_t v125 = (v433.__r_.__value_.__s.__size_ & 0x80u) == 0
                 ? &v433
                 : (std::string *)v433.__r_.__value_.__r.__words[0];
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3754;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v125;
            _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Undoing route-to-builtin-speaker ports by making ports %s routable",  (uint8_t *)buf,  0x1Cu);
          }
        }

        uint64_t v126 = *(unsigned int **)(a2 + 448);
        for (std::string::size_type j = *(unsigned int **)(a2 + 456); v126 != j; ++v126)
        {
          unsigned int v128 = *v126;
          sub_92EF8();
          uint64_t v129 = sub_28AFEC(v128);
          if (v129)
          {
            sub_DD4F0((uint64_t *)&v404, v129, v129);
          }

          else
          {
            unint64_t v130 = (os_log_s *)*(id *)sub_138E8(2);
            unint64_t v131 = v130;
            if (v130 && os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
            {
              buf[0] = 136315650;
              *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 894;
              HIWORD(buf[4]) = 1024;
              buf[5] = v128;
              _os_log_impl( &dword_0,  v131,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not get port for id %u",  (uint8_t *)buf,  0x18u);
            }
          }
        }

        if (*(_BYTE *)(a2 + 472))
        {
          unint64_t v132 = *(void **)v119;
          if (*(void *)v119)
          {
            *(void *)(a2 + 456) = v132;
            operator delete(v132);
          }

          *(_BYTE *)(a2 + 472) = 0;
        }
      }
    }
  }

  if (v426)
  {
    if (*(unsigned __int8 *)(a2 + 472) == v426)
    {
      goto LABEL_237;
    }

    if (*(_BYTE *)(a2 + 472))
    {
      uint64_t v133 = *(void **)v119;
      if (*(void *)v119)
      {
        uint64_t v134 = a2;
        *(void *)(a2 + 456) = v133;
        operator delete(v133);
        char v135 = 0;
LABEL_236:
        *(_BYTE *)(v134 + 472) = v135;
        goto LABEL_237;
      }

      char v135 = 0;
    }

    else
    {
      *(void *)unint64_t v119 = 0LL;
      *(void *)(a2 + 456) = 0LL;
      *(void *)(a2 + 464) = 0LL;
      sub_7A5B8(v119, v424, v425, (v425 - (uint64_t)v424) >> 2);
      char v135 = 1;
    }

    uint64_t v134 = a2;
    goto LABEL_236;
  }

LABEL_290:
  int v392 = sub_5603C(*(void *)(a2 + 112), v392, 0x76646566u);
  else {
    sub_13ABDC(*(void **)(a2 + 112), 14);
  }
  if (*(void *)(a2 + 280))
  {
    id v166 = *(id *)sub_138E8(2);
    std::string::size_type v167 = v166;
    if (v166)
    {
      __int128 v168 = (os_log_s *)v166;
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&v433, **(unsigned int **)(a2 + 280));
        uint64_t v169 = (v433.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v433 : (std::string *)v433.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3789;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v169;
        _os_log_impl( &dword_0,  v168,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Persisting Alternate VAD '%s' between route changes",  (uint8_t *)buf,  0x1Cu);
      }
    }

    uint64_t v170 = *(void *)(a2 + 280);
    if (*(_DWORD *)v170 == 1986884979) {
      int v171 = 19;
    }
    else {
      int v171 = 20;
    }
    sub_268A74(&v385, *(void *)(a2 + 128), **(_DWORD **)(v170 + 8));
    if (**(_DWORD **)(a2 + 280) == 1986095474)
    {
      id v172 = *(id *)sub_138E8(2);
      unint64_t v173 = v172;
      if (v172)
      {
        unint64_t v174 = (os_log_s *)v172;
        if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
        {
          sub_1263EC(&v433, (os_unfair_lock_s **)&v385);
          int v175 = (char)v433.__r_.__value_.__s.__size_;
          std::string::size_type v176 = v433.__r_.__value_.__r.__words[0];
          sub_2CA1C(&v441, 1986291046LL);
          __int128 v177 = &v433;
          if (v175 < 0) {
            __int128 v177 = (std::string *)v176;
          }
          if (SHIBYTE(v442) >= 0) {
            unint64_t v178 = &v441;
          }
          else {
            unint64_t v178 = (__int128 *)v441;
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3801;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v177;
          LOWORD(buf[7]) = 2080;
          *(void *)((char *)&buf[7] + 2) = v178;
          _os_log_impl( &dword_0,  v174,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Disallowing ports %s for VAD '%s'",  (uint8_t *)buf,  0x26u);
          if (SHIBYTE(v442) < 0) {
            operator delete((void *)v441);
          }
        }
      }

      __int128 v441 = *(_OWORD *)&v385.__r_.__value_.__l.__data_;
      if (v385.__r_.__value_.__l.__size_)
      {
        uint64_t v179 = (unint64_t *)(v385.__r_.__value_.__l.__size_ + 16);
        do
          unint64_t v180 = __ldxr(v179);
        while (__stxr(v180 + 1, v179));
      }

      sub_268D3C((uint64_t)&v433, (unint64_t *)&v441, 1LL);
      uint64_t v181 = &v397;
      std::string::size_type v182 = v397;
      if (!v397) {
        goto LABEL_332;
      }
      std::string::size_type v183 = &v397;
      do
      {
        id v184 = v182;
        unint64_t v185 = v183;
        unsigned int v186 = *((_DWORD *)v182 + 8);
        std::string v187 = (uint64_t **)(v182 + 1);
        if (v186 >= 0x76646566)
        {
          std::string v187 = (uint64_t **)v184;
          std::string::size_type v183 = (uint64_t **)v184;
        }

        std::string::size_type v182 = *v187;
      }

      while (v182);
      if (v183 != &v397 && (v186 >= 0x76646566 ? (id v188 = v184) : (id v188 = v185), v188[8] <= 0x76646566u))
      {
        uint64_t v326 = (uint64_t *)(v185 + 5);
        v327 = v184 + 5;
        if (v186 >= 0x76646566) {
          v328 = v327;
        }
        else {
          v328 = v326;
        }
        sub_120C78(v328, v433.__r_.__value_.__l.__data_, &v433.__r_.__value_.__l.__size_);
      }

      else
      {
LABEL_332:
        buf[0] = 1986291046;
        sub_121604((uint64_t *)&buf[2], (uint64_t)&v433);
        int v189 = v397;
        uint64_t v190 = &v397;
        if (v397)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v190 = (uint64_t **)v189;
              unsigned int v191 = *((_DWORD *)v189 + 8);
              if (buf[0] >= v191) {
                break;
              }
              int v189 = *v190;
              uint64_t v181 = v190;
              if (!*v190) {
                goto LABEL_339;
              }
            }

            if (v191 >= buf[0]) {
              break;
            }
            int v189 = v190[1];
            if (!v189)
            {
              uint64_t v181 = v190 + 1;
              goto LABEL_339;
            }
          }
        }

        else
        {
LABEL_339:
          std::string::size_type v192 = (uint64_t *)operator new(0x40uLL);
          CFTypeRef v193 = v192;
          int v194 = buf[0];
          uint64_t v195 = *(void *)&buf[4];
          uint64_t v196 = *(void *)&buf[2];
          v192[6] = *(void *)&buf[4];
          __int128 v197 = (char *)(v192 + 6);
          *((_DWORD *)v192 + 8) = v194;
          v192[5] = v196;
          uint64_t v198 = *(void *)&buf[6];
          v192[7] = *(void *)&buf[6];
          if (v198)
          {
            *(void *)(v195 + 16) = v197;
            *(void *)&buf[2] = &buf[4];
            *(void *)&uint8_t buf[4] = 0LL;
            *(void *)&buf[6] = 0LL;
          }

          else
          {
            v192[5] = (uint64_t)v197;
          }

          *std::string::size_type v192 = 0LL;
          v192[1] = 0LL;
          v192[2] = (uint64_t)v190;
          void *v181 = v192;
          if (*v396)
          {
            unint64_t v396 = (void *)*v396;
            CFTypeRef v193 = *v181;
          }

          sub_7A420(v397, v193);
          ++v398;
        }

        sub_FF3B8(*(void **)&buf[4]);
      }

      sub_FF3B8((void *)v433.__r_.__value_.__l.__size_);
      if (*((void *)&v441 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v441 + 1));
      }
    }

    sub_13ABDC(*(void **)(a2 + 112), v171);
    if (v385.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v385.__r_.__value_.__l.__size_);
    }
  }

  sub_75418(buf, a2);
  sub_52EF0((uint64_t)buf);
  BOOL v199 = v402;
  if (v402 != v403)
  {
    uint64_t v200 = v392;
    do
    {
      uint64_t v201 = *((void *)v199 + 4);
      if (v201)
      {
        uint64_t v202 = *((unsigned int *)v199 + 10);
        sub_B8CBC((uint64_t *)buf, (uint64_t *)(v201 + 88), "", 163);
        (*(void (**)(void, uint64_t, uint64_t, _BYTE *, uint64_t))(**(void **)buf + 216LL))( *(void *)buf,  v200,  v202,  v199 + 44,  1LL);
        std::string v203 = *(std::__shared_weak_count **)&buf[2];
        if (*(void *)&buf[2])
        {
          v204 = (unint64_t *)(*(void *)&buf[2] + 8LL);
          do
            unint64_t v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
      }

      char v206 = (void *)*((void *)v199 + 1);
      if (v206)
      {
        do
        {
          uint64_t v207 = v206;
          char v206 = (void *)*v206;
        }

        while (v206);
      }

      else
      {
        do
        {
          uint64_t v207 = (_BYTE *)*((void *)v199 + 2);
          BOOL v116 = *(void *)v207 == (void)v199;
          BOOL v199 = v207;
        }

        while (!v116);
      }

      BOOL v199 = v207;
    }

    while (v207 != v403);
  }

  if (*(_BYTE *)(a2 + 168) && sub_1CBD44() && (sub_264FD8(&v391) & 1) == 0)
  {
    id v208 = *(id *)sub_138E8(2);
    id v209 = v208;
    if (v208)
    {
      uint64_t v210 = (os_log_s *)v208;
      if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
      {
        int v211 = *(unsigned __int8 *)(a2 + 168);
        sub_2CA1C(&v433, 1836084597LL);
        char v212 = (v433.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v433 : (std::string *)v433.__r_.__value_.__r.__words[0];
        buf[0] = 136315906;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3831;
        HIWORD(buf[4]) = 1024;
        buf[5] = v211;
        LOWORD(buf[6]) = 2080;
        *(void *)((char *)&buf[6] + 2) = v212;
        _os_log_impl( &dword_0,  v210,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PolicyMute: %d, Setting output mode to %s",  (uint8_t *)buf,  0x22u);
      }
    }

    if (!v394) {
      char v394 = 1;
    }
    int v393 = 1836084597;
  }

  unint64_t v213 = v404;
  if (v404 != v405)
  {
    do
    {
      sub_D5D90(v213[4], 1LL);
      uint64_t v214 = (void *)v213[1];
      if (v214)
      {
        do
        {
          id v215 = v214;
          uint64_t v214 = (void *)*v214;
        }

        while (v214);
      }

      else
      {
        do
        {
          id v215 = (_BYTE *)v213[2];
          BOOL v116 = *(void *)v215 == (void)v213;
          unint64_t v213 = v215;
        }

        while (!v116);
      }

      unint64_t v213 = v215;
    }

    while (v215 != v405);
  }

  char v216 = v406;
  if (v406 != v407)
  {
    do
    {
      sub_D5D90(v216[4], 0LL);
      v217 = (void *)v216[1];
      if (v217)
      {
        do
        {
          unint64_t v218 = v217;
          v217 = (void *)*v217;
        }

        while (v217);
      }

      else
      {
        do
        {
          unint64_t v218 = (_BYTE *)v216[2];
          BOOL v116 = *(void *)v218 == (void)v216;
          char v216 = v218;
        }

        while (!v116);
      }

      char v216 = v218;
    }

    while (v218 != v407);
  }

  sub_86550(v390, (uint64_t)&v409);
  sub_268DB4((uint64_t)v390, 0);
  sub_32C8C((void *)v390[1]);
  sub_86550(v389, (uint64_t)&v408);
  sub_268DB4((uint64_t)v389, 1);
  sub_32C8C((void *)v389[1]);
  uint64_t v219 = *(_BYTE **)(a2 + 216);
  int v220 = v401;
  if (v413)
  {
    if (theDict)
    {
LABEL_414:
      uint64_t v225 = sub_138E8(13);
      id v226 = sub_8C7D4(1, *(void **)v225, *(void *)(v225 + 8));
      uint64_t v227 = (os_log_s *)objc_claimAutoreleasedReturnValue(v226);
      unint64_t v228 = v227;
      if (v227 && os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 293;
        _os_log_impl( &dword_0,  v228,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      uint64_t v229 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v229, "Precondition failure.");
    }

    if (v401) {
      goto LABEL_414;
    }
  }

      id v208 = sub_138E8(16);
      id v209 = sub_138E8(33);
      uint64_t v210 = 0;
      int v211 = 0LL;
      v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
      char v212 = *(void *)(v208 + 8);
      while (1)
      {
        unint64_t v213 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v211);
        uint64_t v214 = v210;
        if (((v212 & v213) != 0) != ((*(void *)(v209 + 8) & v213) != 0)) {
          break;
        }
        uint64_t v210 = 1;
        int v211 = 1LL;
        if ((v214 & 1) != 0)
        {
          if ((v212 & 1) == 0) {
            goto LABEL_305;
          }
          goto LABEL_298;
        }
      }

      if ((v212 & v213) == 0) {
        id v208 = v209;
      }
      if ((*(void *)(v208 + 8) & 1) != 0)
      {
LABEL_298:
        id v215 = *(os_log_s **)v208;
        if (*(void *)v208 && os_log_type_enabled(*(os_log_t *)v208, OS_LOG_TYPE_DEBUG))
        {
          sub_23FE8((uint64_t)__src, (os_unfair_lock_t)(*v519 + 8));
          char v216 = __src[5] >= 0 ? __src : *(_DWORD **)__src;
          LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
          WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 188;
          WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v216;
          _os_log_impl(&dword_0, v215, OS_LOG_TYPE_DEBUG, "%25s:%-5d - mDevice: %s", (uint8_t *)v554, 0x1Cu);
          if (SHIBYTE(__src[5]) < 0) {
            operator delete(*(void **)__src);
          }
        }
      }

LABEL_429:
  sub_262608(a2);
  *(void *)&__int128 v441 = off_4709D0;
  *((void *)&v441 + 1) = 1LL;
  v442 = 0LL;
  char v443 = 0;
  char v444 = 0;
  uint64_t v388 = 0LL;
  uint64_t v387 = 0LL;
  v386 = (uint64_t *)&v387;
  v233 = v404;
  if (v404 != v405)
  {
    do
    {
      buf[0] = 1717793397;
      uint64_t v234 = sub_269CE4(&v386, 0x66637275u, buf);
      uint64_t v235 = v233[4];
      uint64_t v236 = *(void *)(v235 + 88);
      __int16 v237 = *(std::__shared_weak_count **)(v235 + 96);
      if (v237)
      {
        p_char shared_weak_owners = (unint64_t *)&v237->__shared_weak_owners_;
        do
          unint64_t v239 = __ldxr(p_shared_weak_owners);
        while (__stxr(v239 + 1, p_shared_weak_owners));
      }

      sub_85C34((uint64_t *)v234 + 5, v236, (uint64_t)v237);
      if (v237) {
        std::__shared_weak_count::__release_weak(v237);
      }
      id v240 = (void *)v233[1];
      if (v240)
      {
        do
        {
          v241 = v240;
          id v240 = (void *)*v240;
        }

        while (v240);
      }

      else
      {
        do
        {
          v241 = (_BYTE *)v233[2];
          BOOL v116 = *(void *)v241 == (void)v233;
          v233 = v241;
        }

        while (!v116);
      }

      v233 = v241;
    }

    while (v241 != v405);
  }

  unint64_t v242 = v406;
  if (v406 != v407)
  {
    do
    {
      buf[0] = 1717793397;
      unsigned __int8 v243 = sub_269CE4(&v386, 0x66637275u, buf);
      uint64_t v244 = v242[4];
      uint64_t v245 = *(void *)(v244 + 88);
      id v246 = *(std::__shared_weak_count **)(v244 + 96);
      if (v246)
      {
        v247 = (unint64_t *)&v246->__shared_weak_owners_;
        do
          unint64_t v248 = __ldxr(v247);
        while (__stxr(v248 + 1, v247));
      }

      sub_85C34((uint64_t *)v243 + 5, v245, (uint64_t)v246);
      if (v246) {
        std::__shared_weak_count::__release_weak(v246);
      }
      v249 = (void *)v242[1];
      if (v249)
      {
        do
        {
          v250 = v249;
          v249 = (void *)*v249;
        }

        while (v249);
      }

      else
      {
        do
        {
          v250 = (_BYTE *)v242[2];
          BOOL v116 = *(void *)v250 == (void)v242;
          unint64_t v242 = v250;
        }

        while (!v116);
      }

      unint64_t v242 = v250;
    }

    while (v250 != v407);
  }

  uint64_t v251 = *(void *)(a2 + 112);
  int v252 = v415;
  *(_BYTE *)(v251 + 452) = v416;
  *(_DWORD *)(v251 + 448) = v252;
  uint64_t v254 = *(void *)(a2 + 112);
  uint64_t v253 = *(void *)(a2 + 120);
  sub_6DD4();
  int v255 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    unint64_t v363 = (os_log_t *)sub_138E8(13);
    v364 = *v363;
    if (*v363 && os_log_type_enabled(*v363, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1958;
      _os_log_impl( &dword_0,  v364,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)buf,  0x12u);
    }

    unint64_t v365 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v365, "Unable to acquire routing mutex.");
    v366 = (void (*)(void *))&std::runtime_error::~runtime_error;
    goto LABEL_654;
  }

  if (v400)
  {
    sub_6DD4();
    int v256 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    if ((sub_7051C() & 1) != 0)
    {
      uint64_t v257 = sub_138E8(8);
      uint64_t v258 = sub_138E8(34);
      char v259 = 0;
      uint64_t v260 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v261 = *(void *)(v257 + 8);
      while (1)
      {
        uint64_t v262 = (int)buf[v260];
        char v263 = v259;
        if (((v261 & v262) != 0) != ((*(void *)(v258 + 8) & v262) != 0)) {
          break;
        }
        char v259 = 1;
        uint64_t v260 = 1LL;
        if ((v263 & 1) != 0) {
          goto LABEL_468;
        }
      }

      if ((v261 & v262) == 0) {
        uint64_t v257 = v258;
      }
LABEL_468:
      v264 = *(os_log_s **)v257;
      if (v264 && os_log_type_enabled(v264, OS_LOG_TYPE_INFO))
      {
        sub_135904(&v433, *(unsigned int **)v253, (unsigned int *)(v253 + 8));
        v265 = (v433.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v433 : (std::string *)v433.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 4312;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v265;
        _os_log_impl(&dword_0, v264, OS_LOG_TYPE_INFO, "%25s:%-5d Session update with map %s.", (uint8_t *)buf, 0x1Cu);
      }

      sub_6EF6C(v440, (void *)v253);
      sub_132308((uint64_t ***)&v433, (void *)(v254 + 72));
      sub_128F3C( (uint64_t)buf,  v254,  (_OWORD *)(v254 + 32),  v254 + 48,  (uint64_t)&v433,  v254 + 120,  *(_DWORD *)(v254 + 144),  (void *)(v254 + 152),  v254 + 176,  (const void ***)(v254 + 216),  *(_BYTE *)(v254 + 384),  v440,  1918989155,  (__int128 *)(v254 + 416),  (void *)(v254 + 448));
      sub_12FFA0((uint64_t)&v385, (std::__shared_weak_count *)v254, (uint64_t)buf, 0);
      if (LODWORD(v385.__r_.__value_.__r.__words[1]))
      {
        uint64_t v266 = sub_138E8(8);
        uint64_t v267 = sub_138E8(34);
        char v268 = 0;
        uint64_t v269 = 0LL;
        *(void *)v451 = 0x100000002LL;
        uint64_t v270 = *(void *)(v266 + 8);
        while (1)
        {
          uint64_t v271 = *(int *)&v451[4 * v269];
          char v272 = v268;
          if (((v270 & v271) != 0) != ((*(void *)(v267 + 8) & v271) != 0)) {
            break;
          }
          char v268 = 1;
          uint64_t v269 = 1LL;
          if ((v272 & 1) != 0) {
            goto LABEL_487;
          }
        }

        if ((v270 & v271) == 0) {
          uint64_t v266 = v267;
        }
LABEL_487:
        int v280 = *(os_log_s **)v266;
        if (v280 && os_log_type_enabled(v280, OS_LOG_TYPE_ERROR))
        {
          sub_135904(&v439, *(unsigned int **)v253, (unsigned int *)(v253 + 8));
          CFTypeRef v281 = (v439.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &v439
               : (std::string *)v439.__r_.__value_.__r.__words[0];
          *(_DWORD *)v451 = 136315906;
          *(void *)&v451[4] = "RoutingManager.cpp";
          __int16 v452 = 1024;
          int v453 = 4326;
          __int16 v454 = 2080;
          v455 = v281;
          __int16 v456 = 1024;
          int v457 = v385.__r_.__value_.__r.__words[1];
          _os_log_impl( &dword_0,  v280,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Audio session update with map '%s' failed with result %d.",  v451,  0x22u);
        }
      }

      sub_128D54((uint64_t)buf);
      sub_11AD14(*(void **)v435);
      sub_FF3B8((void *)v433.__r_.__value_.__l.__size_);
      *(void *)AudioObjectPropertyAddress buf = v440;
      sub_8F2D4((void ***)buf);
      if (v256) {
        goto LABEL_495;
      }
    }

    else
    {
      sub_72210((uint64_t)&v385, 1920099684LL);
      if (v256) {
LABEL_495:
      }
        (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }

    if (!v255) {
      goto LABEL_498;
    }
    goto LABEL_497;
  }

  if (v399)
  {
    if (v388)
    {
      *(void *)&uint8_t buf[4] = 0LL;
      *(void *)&buf[2] = 0LL;
      *(void *)AudioObjectPropertyAddress buf = &buf[2];
      sub_12A970((uint64_t)&v385, v254, &v386, buf);
      sub_FF3B8(*(void **)&buf[2]);
      if (!v255) {
        goto LABEL_498;
      }
LABEL_497:
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
      goto LABEL_498;
    }

    v377 = (os_log_t *)sub_138E8(13);
    __int128 v378 = *v377;
    if (*v377 && os_log_type_enabled(*v377, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1969;
      _os_log_impl( &dword_0,  v378,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    unint64_t v365 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error((std::logic_error *)v365, "Precondition failure.");
    v366 = (void (*)(void *))&std::logic_error::~logic_error;
LABEL_654:
    __cxa_throw(v365, v367, v366);
  }

  if (v388)
  {
    uint64_t v273 = sub_138E8(8);
    uint64_t v274 = sub_138E8(34);
    char v275 = 0;
    uint64_t v276 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v277 = *(void *)(v273 + 8);
    while (1)
    {
      uint64_t v278 = (int)buf[v276];
      char v279 = v275;
      if (((v277 & v278) != 0) != ((*(void *)(v274 + 8) & v278) != 0)) {
        break;
      }
      char v275 = 1;
      uint64_t v276 = 1LL;
      if ((v279 & 1) != 0) {
        goto LABEL_566;
      }
    }

    if ((v277 & v278) == 0) {
      uint64_t v273 = v274;
    }
LABEL_566:
    v329 = *(os_log_s **)v273;
    if (v329 && os_log_type_enabled(v329, OS_LOG_TYPE_INFO))
    {
      sub_FD164(&v433, &v386);
      v330 = (v433.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v433 : (std::string *)v433.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1982;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v330;
      _os_log_impl(&dword_0, v329, OS_LOG_TYPE_INFO, "%25s:%-5d Port update with port map %s.", (uint8_t *)buf, 0x1Cu);
    }

    *(void *)AudioObjectPropertyAddress buf = buf;
    *(void *)&buf[2] = buf;
    *(void *)&uint8_t buf[4] = 0LL;
    v331 = v387;
    if (v387)
    {
      v332 = &v387;
      do
      {
        v333 = v331;
        v334 = v332;
        unsigned int v335 = *((_DWORD *)v331 + 8);
        v336 = v331 + 1;
        if (v335 >= 0x66637275)
        {
          v336 = v333;
          v332 = (void **)v333;
        }

        v331 = (void *)*v336;
      }

      while (v331);
      if (v332 != &v387)
      {
        unint64_t v337 = v335 >= 0x66637275 ? v333 : v334;
        if (*((_DWORD *)v337 + 8) < 0x66637276u)
        {
          uint64_t v338 = v334 + 5;
          v339 = v333 + 5;
          if (v335 >= 0x66637275) {
            v340 = v339;
          }
          else {
            v340 = v338;
          }
          sub_12964C((uint64_t *)&v433, (uint64_t *)v254, v340, (uint64_t *)buf);
          sub_85B80((uint64_t *)&v433);
        }
      }
    }

    sub_85B80((uint64_t *)buf);
  }

  int v341 = v391;
  int v342 = v392;
  int v343 = sub_133B00(v254);
  int v344 = sub_133C98(v254);
  if (v343 > 1668313714)
  {
    char v346 = 1;
    if (v343 == 1668703084 || v343 == 1668576377) {
      goto LABEL_610;
    }
    unsigned __int16 v345 = 29299;
    goto LABEL_595;
  }

  if (v343 != 1668301427 && v343 != 1668309362)
  {
    unsigned __int16 v345 = 29250;
LABEL_595:
    if (v343 != (v345 | 0x63700000))
    {
LABEL_609:
      char v346 = 0;
      goto LABEL_610;
    }
  }

  char v346 = 1;
  if (v344 > 1919776354)
  {
    if (v344 > 1987081832)
    {
      if (v344 == 1987081833) {
        goto LABEL_610;
      }
      unsigned __int16 v348 = 30319;
    }

    else
    {
      if (v344 == 1919776355) {
        goto LABEL_610;
      }
      unsigned __int16 v348 = 26467;
    }

    int v347 = v348 | 0x76700000;
  }

  else if (v344 > 1768779618)
  {
    if (v344 == 1768779619) {
      goto LABEL_610;
    }
    int v347 = 1768781411;
  }

  else
  {
    if (v344 == 1735222132) {
      goto LABEL_610;
    }
    int v347 = 1768057203;
  }

  if (v344 != v347) {
    goto LABEL_609;
  }
LABEL_610:
  if (v341 > 1668313714)
  {
    if (v341 == 1668703084 || v341 == 1668576377) {
      goto LABEL_631;
    }
    unsigned __int16 v349 = 29299;
  }

  else
  {
    if (v341 == 1668301427 || v341 == 1668309362) {
      goto LABEL_618;
    }
    unsigned __int16 v349 = 29250;
  }

  if (v341 != (v349 | 0x63700000)) {
    goto LABEL_633;
  }
LABEL_618:
  if (v342 > 1919776354)
  {
    if (v342 > 1987081832)
    {
      if (v342 == 1987081833) {
        goto LABEL_631;
      }
      unsigned __int16 v351 = 30319;
    }

    else
    {
      if (v342 == 1919776355) {
        goto LABEL_631;
      }
      unsigned __int16 v351 = 26467;
    }

    int v350 = v351 | 0x76700000;
  }

  else
  {
    if (v342 <= 1768779618)
    {
      if (v342 != 1735222132)
      {
        int v350 = 1768057203;
        goto LABEL_630;
      }

LABEL_631:
      if ((v346 & 1) != 0) {
        goto LABEL_636;
      }
      uint64_t v352 = 13LL;
      goto LABEL_635;
    }

    if (v342 == 1768779619) {
      goto LABEL_631;
    }
    int v350 = 1768781411;
  }

LABEL_630:
  if (v342 == v350) {
    goto LABEL_631;
  }
LABEL_633:
  if ((v346 & 1) == 0) {
    goto LABEL_636;
  }
  uint64_t v352 = 14LL;
LABEL_635:
  unint64_t v353 = (void *)sub_5954C();
  int v354 = (*(uint64_t (**)(void))(*v353 + 8 * v352))();
  sub_133E30((uint64_t *)v254, v354);
LABEL_636:
  uint64_t v355 = v395;
  sub_6EF6C((uint64_t *)buf, (void *)v253);
  if (v355) {
    int v356 = 1919907442;
  }
  else {
    int v356 = 1919970403;
  }
  sub_12DC98((uint64_t)&v385, v254, (uint64_t)&v391, (uint64_t *)buf, v356);
  *(void *)v451 = buf;
  sub_8F2D4((void ***)v451);
  if (v255) {
    goto LABEL_497;
  }
LABEL_498:
  sub_725DC((uint64_t)&v441, (uint64_t)&v385);
  v385.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
  int64_t cap = (void *)v385.__r_.__value_.__l.__cap_;
  if (v385.__r_.__value_.__l.__cap_)
  {
    sub_10AF78((uint64_t *)(v385.__r_.__value_.__l.__cap_ + 16));
    operator delete(cap);
  }

  if (CFDictionaryContainsKey(*a3, @"reporter IDs"))
  {
    v283 = (const __CFArray *)sub_8D6E0(*a3, "reporter IDs");
    if (v283)
    {
      __int16 v284 = v283;
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v284))
      {
        int v286 = CFArrayGetCount(v284);
        memset(buf, 0, 24);
        sub_47A08((void **)buf, v286);
        if (v286 >= 1)
        {
          CFIndex v287 = 0LL;
          uint64_t v288 = v286;
          unint64_t v289 = *(void *)&buf[4];
          __n128 v290 = *(const __CFNumber ***)&buf[2];
          v291 = *(const __CFNumber ***)buf;
          do
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v284, v287);
            unint64_t v293 = sub_47A9C(ValueAtIndex);
            if (!v294)
            {
              unint64_t v357 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v357, "Could not convert");
            }

            v295 = v293;
            if ((unint64_t)v290 >= v289)
            {
              uint64_t v296 = v290 - v291;
              unint64_t v297 = v296 + 1;
              else {
                unint64_t v298 = v297;
              }
              if (v298) {
                unint64_t v298 = (unint64_t)sub_7DC90(v298);
              }
              else {
                uint64_t v299 = 0LL;
              }
              v300 = (const __CFNumber **)(v298 + 8 * v296);
              uint64_t *v300 = v295;
              v301 = v300 + 1;
              while (v290 != v291)
              {
                v302 = *--v290;
                *--v300 = v302;
              }

              unint64_t v289 = v298 + 8 * v299;
              if (v291) {
                operator delete(v291);
              }
              v291 = v300;
              __n128 v290 = v301;
            }

            else
            {
              *v290++ = v293;
            }

            ++v287;
          }

          while (v287 != v288);
          *(void *)&uint8_t buf[4] = v289;
          *(void *)&buf[2] = v290;
          *(void *)AudioObjectPropertyAddress buf = v291;
        }

        v303 = *(void **)(a2 + 288);
        if (v303)
        {
          *(void *)(a2 + 296) = v303;
          operator delete(v303);
        }

        v304 = *(uint64_t **)buf;
        *(void *)(a2 + 288) = *(void *)buf;
        unint64_t v305 = *(uint64_t **)&buf[2];
        *(_OWORD *)(a2 + 296) = *(_OWORD *)&buf[2];
        for (uint64_t k = v305; v304 != k; ++v304)
        {
          uint64_t v307 = *v304;
          uint64_t v308 = (os_log_s *)*(id *)sub_138E8(2);
          v309 = v308;
          if (v308 && os_log_type_enabled(v308, OS_LOG_TYPE_INFO))
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 7747;
            HIWORD(buf[4]) = 2048;
            *(void *)&buf[5] = v307;
            _os_log_impl( &dword_0,  v309,  OS_LOG_TYPE_INFO,  "%25s:%-5d Client set reporter ID: %lld",  (uint8_t *)buf,  0x1Cu);
          }
        }

        goto LABEL_532;
      }

      v375 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v375, "Could not convert");
    }

    else
    {
      v375 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v375, "Could not find item");
    }
  }

LABEL_554:
  sub_52EF0((uint64_t)&v391);
  return sub_1532B4(&v431);
}

void sub_257AB8(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  sub_EDF34((void *)STACK[0x380]);
  sub_7058C(&STACK[0x758]);
  sub_52EF0((uint64_t)&STACK[0x3C0]);
  sub_1532B4(&STACK[0x6C0]);
  _Unwind_Resume(a1);
}

void sub_257FAC(unsigned int *a1, std::string::size_type a2, uint64_t a3)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unint64_t v4 = (os_log_s *)*(id *)sub_138E8(13);
    uint64_t v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_DWORD buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3894;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread.",  buf,  0x12u);
    }
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)AudioObjectPropertyAddress buf = Mutable;
  *(_WORD *)&_DWORD buf[8] = 257;
  *a1 = 2003329396;
  *((void *)a1 + 1) = Mutable;
  uint64_t v77 = (uint64_t)(a1 + 2);
  *((_WORD *)a1 + 8) = 257;
  if (Mutable) {
    CFRetain(Mutable);
  }
  sub_13850((uint64_t)buf);
  if (!*(_DWORD *)(a3 + 8))
  {
    if (sub_72348(*(unsigned int *)(a3 + 12)))
    {
      int v76 = *(_DWORD *)(a3 + 12);
      sub_6DD4();
      if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
      {
        uint64_t v32 = (os_log_s *)*(id *)sub_138E8(13);
        uint64_t v33 = v32;
        if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4510;
          _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread.",  buf,  0x12u);
        }
      }

      __int128 v34 = *(void **)(a2 + 144);
      oslog = (uint64_t **)(a2 + 144);
      for (uint64_t i = *(void **)(a2 + 152); v34 != i; ++v34)
      {
        uint64_t v36 = *v34;
        uint64_t v37 = (*(uint64_t (**)(void))(*(void *)*v34 + 528LL))(*v34);
        uint64_t v38 = pthread_self();
        unsigned int v39 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v37 + 16));
        if (!pthread_equal(v38, v39))
        {
          unint64_t v40 = pthread_self();
          uint64_t v41 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v37 + 104));
          if (!pthread_equal(v40, v41)) {
            continue;
          }
        }

        unint64_t v42 = (os_log_s *)*(id *)sub_138E8(13);
        uint64_t v43 = v42;
        if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          int v44 = *(_DWORD *)(v36 + 8);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4514;
          __int16 v90 = 1024;
          *(_DWORD *)uint64_t v91 = v44;
          *(_WORD *)&v91[4] = 2048;
          *(void *)&v91[6] = v36;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The IO monitor for device ID %u (%p) is held by this thread.",  buf,  0x22u);
        }
      }

      if (v76 == 1919186544)
      {
        sub_268514((uint64_t)&value, a2, *(void **)(a2 + 120));
      }

      else
      {
        value = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
        __int16 v86 = 257;
      }

      if (*(void *)(a2 + 192))
      {
        uint64_t v61 = (os_log_s *)*(id *)sub_138E8(13);
        uint64_t v62 = v61;
        if (v61 && os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4520;
          _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: route changes in progress!.",  buf,  0x12u);
        }
      }

      sub_6DD4();
      (*(void (**)(void))(qword_48F828 + 24))();
      CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      LOWORD(v83) = 257;
      sub_13408((uint64_t)&theDict, @"route change reason", *(_DWORD *)(a3 + 12));
      int v63 = sub_133B00(*(void *)(a2 + 112));
      sub_133C98(*(void *)(a2 + 112));
      if (v63 == 1668509810) {
        int v64 = 1668309362;
      }
      else {
        int v64 = v63;
      }
      sub_13408((uint64_t)&theDict, @"category", v64);
      int v65 = sub_133C98(*(void *)(a2 + 112));
      sub_13408((uint64_t)&theDict, @"mode", v65);
      if (*(_BYTE *)(a3 + 784) && *(_BYTE *)(a3 + 592))
      {
        uint64_t v66 = *(const void **)(a3 + 576);
        *(void *)AudioObjectPropertyAddress buf = v66;
        *(_WORD *)&_DWORD buf[8] = *(_WORD *)(a3 + 584);
        if (buf[8] && v66)
        {
          CFRetain(v66);
          uint64_t v66 = *(const void **)buf;
        }

        if (v66
          && CFDictionaryGetCount((CFDictionaryRef)v66)
          && **(_BYTE **)(a2 + 216)
          && BYTE1(v83)
          && *(void *)buf
          && theDict)
        {
          CFDictionarySetValue(theDict, @"voice processing configuration", *(const void **)buf);
        }

        sub_13850((uint64_t)buf);
      }

      if (v76 == 1919186544)
      {
        uint64_t v67 = value;
        if (!value)
        {
          int v68 = (os_log_s *)*(id *)sub_138E8(13);
          uint64_t v69 = v68;
          if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_DWORD buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4544;
            _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid current devices",  buf,  0x12u);
          }

          uint64_t v67 = value;
        }

        if (BYTE1(v83) && v67 && theDict) {
          CFDictionarySetValue(theDict, @"active devices", v67);
        }
      }

      if (*(_BYTE *)(a3 + 784))
      {
        sub_2626F4((uint64_t)buf, oslog, *(unsigned int **)(a3 + 600), *(unsigned int **)(a3 + 608));
        sub_32C8C(*(void **)&buf[8]);
      }

      unsigned int v70 = sub_264118(*(unsigned int *)(a3 + 8));
      LODWORD(__p.__r_.__value_.__l.__data_) = v70;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)theDict;
      LOWORD(__p.__r_.__value_.__r.__words[2]) = v83;
      if ((_BYTE)v83 && theDict) {
        CFRetain(theDict);
      }
      sub_13850((uint64_t)&theDict);
      sub_13818((uint64_t)&value);
      *a1 = v70;
      sub_13888(v77, (uint64_t)&__p.__r_.__value_.__l.__size_);
      sub_13850((uint64_t)&__p.__r_.__value_.__l.__size_);
      id v71 = *(id *)sub_138E8(2);
      if (!v71) {
        goto LABEL_128;
      }
      uint64_t v46 = (os_log_s *)v71;
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_127;
      }
      sub_1548D4(&__p, *a1);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_DWORD buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3911;
      __int16 v90 = 2080;
      *(void *)uint64_t v91 = p_p;
      uint64_t v48 = "%25s:%-5d Route did not change. Returning result: %s.";
    }

    else
    {
      sub_25A284((uint64_t)buf, a2, a3);
      *a1 = *(_DWORD *)buf;
      sub_13888(v77, (uint64_t)&buf[8]);
      sub_13850((uint64_t)&buf[8]);
      id v45 = *(id *)sub_138E8(2);
      if (!v45) {
        goto LABEL_128;
      }
      uint64_t v46 = (os_log_s *)v45;
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_127;
      }
      sub_1548D4(&__p, *a1);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v47 = &__p;
      }
      else {
        uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_DWORD buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3917;
      __int16 v90 = 2080;
      *(void *)uint64_t v91 = v47;
      uint64_t v48 = "%25s:%-5d Route change succeeded. Returning result: %s.";
    }

    uint64_t v59 = v46;
    uint32_t v60 = 28;
    goto LABEL_125;
  }

  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v7 = (os_log_s *)*(id *)sub_138E8(13);
    BOOL v8 = v7;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_DWORD buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4564;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread.",  buf,  0x12u);
    }
  }

  uint64_t v9 = *(void *)(a2 + 144);
  for (uint64_t j = *(void *)(a2 + 152); v9 != j; v9 += 8LL)
  {
    int v11 = *(_DWORD **)v9;
    value = *(void **)(*(void *)v9 + 576LL);
    uint64_t v12 = sub_71A5C(a2 + 176, value, HIDWORD(value));
    uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 528LL))(v11);
    id v14 = pthread_self();
    unint64_t v15 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v13 + 16));
    int v16 = pthread_equal(v14, v15);
    if (a2 + 184 == v12)
    {
      if (!v16)
      {
        char v25 = pthread_self();
        int v26 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v13 + 104));
        if (!pthread_equal(v25, v26)) {
          continue;
        }
      }

      id v27 = *(id *)sub_138E8(13);
      if (!v27) {
        goto LABEL_35;
      }
      uint64_t v20 = (os_log_s *)v27;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        sub_33464(&__p, (unsigned int *)&value);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          double v28 = &__p;
        }
        else {
          double v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v29 = v11[2];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4575;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = v28;
        *(_WORD *)&v91[8] = 1024;
        *(_DWORD *)&v91[10] = v29;
        __int16 v92 = 2048;
        uint64_t v93 = v11;
        uint64_t v23 = v20;
        uint64_t v24 = "%25s:%-5d ASSERTION FAILURE: route is not changing on device %s, but the IO monitor for device ID %u (%p"
              ") is already held by this thread.";
LABEL_32:
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x2Cu);
      }
    }

    else
    {
      if (v16) {
        continue;
      }
      unint64_t v17 = pthread_self();
      uint64_t v18 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v13 + 104));
      if (pthread_equal(v17, v18)) {
        continue;
      }
      id v19 = *(id *)sub_138E8(13);
      if (!v19)
      {
LABEL_35:
        uint64_t v20 = 0LL;
        goto LABEL_36;
      }

      uint64_t v20 = (os_log_s *)v19;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        sub_33464(&__p, (unsigned int *)&value);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v21 = &__p;
        }
        else {
          char v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v22 = v11[2];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4572;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = v21;
        *(_WORD *)&v91[8] = 1024;
        *(_DWORD *)&v91[10] = v22;
        __int16 v92 = 2048;
        uint64_t v93 = v11;
        uint64_t v23 = v20;
        uint64_t v24 = "%25s:%-5d ASSERTION FAILURE: route is changing on device %s, but the IO monitor for device ID %u (%p) is"
              " not held by this thread.";
        goto LABEL_32;
      }
    }

LABEL_36:
  }

  sub_6DD4();
  (*(void (**)(void))(qword_48F828 + 24))();
  if (*(void *)(a2 + 192))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_479388;
    __p.__r_.__value_.__l.__size_ = a2;
    unint64_t v88 = &__p;
    sub_35678(buf, 1, (uint64_t)&__p);
    unint64_t v30 = v88;
    if (v88 == &__p)
    {
      uint64_t v31 = 4LL;
      unint64_t v30 = &__p;
    }

    else
    {
      if (!v88)
      {
LABEL_66:
        CFMutableDictionaryRef theDict = 0LL;
        uint64_t v83 = 0LL;
        uint64_t v84 = 0LL;
        uint64_t v49 = *(unint64_t ***)(a2 + 144);
        uint64_t v50 = *(unint64_t ***)(a2 + 152);
        if (v49 == v50)
        {
          uint64_t v53 = 0LL;
          CFMutableDictionaryRef v52 = 0LL;
        }

        else
        {
          do
          {
            uint64_t v51 = *v49;
            if (a2 + 184 != sub_71A5C(a2 + 176, *((_DWORD *)*v49 + 144), *((_DWORD *)*v49 + 145))) {
              sub_C603C(v51, (uint64_t *)&theDict);
            }
            ++v49;
          }

          while (v49 != v50);
          CFMutableDictionaryRef v52 = theDict;
          uint64_t v53 = v83;
        }

        sub_E3100((uint64_t)v52, v53);
        value = &theDict;
        sub_E2D18((void ***)&value);
        sub_35B78((uint64_t)buf);
        goto LABEL_73;
      }

      uint64_t v31 = 5LL;
    }

    (*(void (**)(void))(v30->__r_.__value_.__r.__words[0] + 8 * v31))();
    goto LABEL_66;
  }

void sub_258F28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, void **a25)
{
  a25 = (void **)&a22;
  sub_E2D18(&a25);
  sub_35B78(v25 - 160);
  sub_13850(a16);
  _Unwind_Resume(v26);
}

void sub_2590B8(uint64_t a1)
{
  int v14 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  sub_252FB4(&v15, a1);
  uint64_t v2 = v15;
  for (uint64_t i = v16; v2 != i; v2 += 24LL)
  {
    uint64_t v4 = sub_138E8(2);
    uint64_t v5 = sub_138E8(13);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_8:
    int v11 = (os_log_s *)*(id *)v4;
    uint64_t v12 = v11;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = v2;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v18 = 1024;
      int v19 = 7160;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }

  *(void *)AudioObjectPropertyAddress buf = &v15;
  sub_8CD60((void ***)buf);
  if (v14) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
}

void sub_2592A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_259304()
{
  uint64_t result = dword_493068;
  if (dword_493068)
  {
    int inData = 1;
    *(void *)&inAddress.mSelector = 0x676C6F6273687570LL;
    inAddress.mElement = 0;
    uint64_t result = AudioObjectSetPropertyData(dword_493068, &inAddress, 0, 0LL, 4u, &inData);
    int v1 = result;
    if ((_DWORD)result)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = v1;
    }
  }

  return result;
}

void sub_2593E0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_2593F8( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (a2)
  {
    if (a2 == 3)
    {
      unint64_t v17 = __cxa_begin_catch(a1);
      id v18 = *(id *)sub_138E8(13);
      int v19 = v18;
      if (v18)
      {
        __int16 v20 = (os_log_s *)v18;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          int v21 = v17[2];
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 429;
          WORD1(a12) = 1024;
          DWORD1(a12) = v21;
          WORD4(a12) = 2080;
          *(void *)((char *)&a12 + 10) = "";
          a14 = 1024;
          a15 = 958;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).",  (uint8_t *)&buf,  0x28u);
        }
      }
    }

    else
    {
      int v22 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v23 = v22;
        id v24 = *(id *)sub_138E8(13);
        int v19 = v24;
        if (v24)
        {
          uint64_t v25 = (os_log_s *)v24;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
            LODWORD(buf) = 136316162;
            *(void *)((char *)&buf + 4) = "StandardUtilities.h";
            WORD6(buf) = 1024;
            *(_DWORD *)((char *)&buf + 14) = 430;
            WORD1(a12) = 2080;
            *(void *)((char *)&a12 + 4) = v26;
            WORD6(a12) = 2080;
            *(void *)((char *)&a12 + 14) = "";
            HIWORD(a15) = 1024;
            a16 = 958;
            _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).",  (uint8_t *)&buf,  0x2Cu);
          }
        }
      }

      else
      {
        id v27 = *(id *)sub_138E8(13);
        int v19 = v27;
        if (v27)
        {
          double v28 = (os_log_s *)v27;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 136315906;
            *(void *)((char *)&buf + 4) = "StandardUtilities.h";
            WORD6(buf) = 1024;
            *(_DWORD *)((char *)&buf + 14) = 431;
            WORD1(a12) = 2080;
            *(void *)((char *)&a12 + 4) = "";
            WORD6(a12) = 1024;
            *(_DWORD *)((char *)&a12 + 14) = 958;
            _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).",  (uint8_t *)&buf,  0x22u);
          }
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x259380LL);
  }

  JUMPOUT(0x2593E8LL);
}

void sub_259644()
{
}

void sub_259650()
{
}

void sub_25965C()
{
}

void sub_25966C()
{
}

uint64_t sub_259674(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = sub_138E8(13);
    id v3 = sub_8C7D4(1, *(void **)v2, *(void *)(v2 + 8));
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualAudio_PlugIn.mm";
      __int16 v9 = 1024;
      int v10 = 2245;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_259794(a1);
}

void sub_259778(_Unwind_Exception *a1)
{
}

uint64_t sub_259794(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t result = sub_72A04(1987276900, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = sub_5954C();
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 272LL))(v5);
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v4 + 1008) + 352LL))( *(void *)(v4 + 1008),  1685287015LL,  1752200291LL,  0LL);
    if ((_DWORD)result)
    {
      int v7 = (os_log_t *)sub_138E8(2);
      __int16 v9 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        int v11 = "VirtualAudio_Utilities.cpp";
        __int16 v12 = 1024;
        int v13 = 728;
        __int16 v14 = 1024;
        BOOL v15 = v6 == 1;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d qqq SetHapticVibrationParameterOnDSP vibrating = %d",  (uint8_t *)&v10,  0x18u);
      }

      v8.n128_u32[0] = 0;
      if (v6 == 1) {
        v8.n128_f32[0] = 1.0;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, __n128))(**(void **)(v4 + 1008) + 368LL))( *(void *)(v4 + 1008),  1685287015LL,  1752200291LL,  0LL,  v8);
    }
  }

  if (v2) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

void sub_259930(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_259968(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = sub_138E8(13);
    id v3 = sub_8C7D4(1, *(void **)v2, *(void *)(v2 + 8));
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      __n128 v8 = "VirtualAudio_PlugIn.mm";
      __int16 v9 = 1024;
      int v10 = 2128;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_259A88(a1);
}

void sub_259A6C(_Unwind_Exception *a1)
{
}

uint64_t sub_259A88(uint64_t a1)
{
  uint64_t v2 = sub_5954C();
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200LL))(v2);
  uint64_t v4 = (os_log_s *)*(id *)sub_138E8(2);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = "Disabled";
    __int16 v12 = "VirtualAudio_PlugIn.mm";
    int v11 = 136315650;
    if (!v3) {
      int v6 = "Enabled";
    }
    __int16 v13 = 1024;
    int v14 = 2167;
    __int16 v15 = 2080;
    uint64_t v16 = v6;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Notification received Reduce bass user preference is : %s",  (uint8_t *)&v11,  0x1Cu);
  }

  sub_6DD4();
  uint64_t result = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v8 = result;
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v9 = *(void *)(a1 + 152);
  while (v10 != v9)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)v10 + 1008LL) + 352LL))( *(void *)(*(void *)v10 + 1008LL),  1685287015LL,  1650550370LL,  0LL);
    if ((_DWORD)result)
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, float))(**(void **)(*(void *)v10 + 1008LL)
                                                                                  + 368LL))( *(void *)(*(void *)v10 + 1008LL),  1685287015LL,  1650550370LL,  0LL,  (float)v3);
      break;
    }

    v10 += 8LL;
  }

  if (v8) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

void sub_259C38(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_259C7C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = sub_138E8(13);
    id v3 = sub_8C7D4(1, *(void **)v2, *(void *)(v2 + 8));
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_PlugIn.mm";
      __int16 v9 = 1024;
      int v10 = 2104;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_259F3C(a1);
}

void sub_259D80(_Unwind_Exception *a1)
{
}

uint64_t sub_259D9C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = sub_138E8(13);
    id v3 = sub_8C7D4(1, *(void **)v2, *(void *)(v2 + 8));
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_PlugIn.mm";
      __int16 v9 = 1024;
      int v10 = 2112;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_259F3C(a1);
}

void sub_259EA0(_Unwind_Exception *a1)
{
}

uint64_t sub_259EBC()
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828);
  if ((_DWORD)result)
  {
    sub_6DD4();
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }

  return result;
}

void *sub_259F0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 784)) {
    sub_52EF0(a1 + 40);
  }
  return sub_7058C((void *)a1);
}

uint64_t sub_259F3C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  int v19 = result;
  id v3 = *(unint64_t ***)(a1 + 144);
  for (uint64_t i = *(unint64_t ***)(a1 + 152); v3 != i; ++v3)
  {
    uint64_t v4 = *v3;
    unint64_t v5 = (*v3)[66] - (*v3)[65];
    if ((v5 & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v6 = 0LL;
      uint64_t v7 = (v5 >> 3) - 1LL;
      do
      {
        unint64_t v8 = v4[65];
        else {
          uint64_t v9 = *(void *)(v8 + 8 * v6);
        }
        if (!*(void *)(v9 + 120))
        {
          __int16 v13 = (os_log_t *)sub_138E8(13);
          int v14 = *v13;
          if (*v13)
          {
            if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              id v24 = "VirtualAudio_Stream.cpp";
              __int16 v25 = 1024;
              int v26 = 397;
              _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: underlying stream is NULL",  buf,  0x12u);
            }
          }
        }

        BOOL v10 = sub_27DB40(*(uint64_t **)(v9 + 120));
        int v12 = v7 == v6++ || v10;
      }

      while (v12 != 1);
      if (v10)
      {
        uint64_t result = _os_feature_enabled_impl("VirtualAudio", "ac3_format_in_parrot");
        if ((result & 1) != 0) {
          continue;
        }
      }
    }

    id v15 = *(id *)sub_138E8(2);
    uint64_t v16 = v15;
    if (v15)
    {
      unint64_t v17 = (os_log_s *)v15;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v21 = v4[72];
        sub_33464(&__p, (unsigned int *)&v21);
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        id v24 = "VirtualAudio_PlugIn.mm";
        __int16 v25 = 1024;
        int v26 = 2141;
        __int16 v27 = 2048;
        double v28 = v4;
        __int16 v29 = 2080;
        unint64_t v30 = p_p;
        _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Changing stream format preference for VAD %p (%s)",  buf,  0x26u);
      }
    }

    uint64_t result = (uint64_t)sub_C6254(v4);
  }

  if (v19) {
    return (*(uint64_t (**)(void))(qword_48F828 + 24))();
  }
  return result;
}

void sub_25A1E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_25A240(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    id v3 = *v2;
    uint64_t *v2 = 0LL;
    if (v3) {
      operator delete(v3);
    }
    operator delete(v2);
  }

void sub_25A284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    id v3 = *(id *)sub_138E8(13);
    uint64_t v4 = v3;
    if (v3)
    {
      unint64_t v5 = (os_log_s *)v3;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4034;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread.",  buf,  0x12u);
      }
    }
  }

  uint64_t v6 = *(void *)(a3 + 16);
  sub_128E30(v6);
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v6;
  uint64_t v7 = sub_116648((uint64_t *)&buf[16], v6 + 16);
  LOBYTE(v547) = *(_BYTE *)(v6 + 40);
  if (*(_DWORD *)(a3 + 12) == 1918989155 || *(void *)(a2 + 192))
  {
LABEL_13:
    sub_10AF78(v7);
  }

  else
  {
    for (uint64_t i = v545; (uint64_t *)i != v7; uint64_t i = *(void *)(i + 8))
    {
      if (*(_DWORD *)(i + 128) == 3) {
        goto LABEL_13;
      }
    }

    sub_10AF78(v7);
    id v9 = *(id *)sub_138E8(13);
    BOOL v10 = v9;
    if (v9)
    {
      int v11 = (os_log_s *)v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4036;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: No route changes in progress.",  buf,  0x12u);
      }
    }
  }

  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v447 = sub_138E8(13);
    id v448 = sub_8C7D4(1, *(void **)v447, *(void *)(v447 + 8));
    uint64_t v449 = (os_log_s *)objc_claimAutoreleasedReturnValue(v448);
    char v450 = v449;
    if (v449 && os_log_type_enabled(v449, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4037;
      _os_log_impl(&dword_0, v450, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v12 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v12)
  {
    uint64_t v452 = sub_138E8(13);
    id v453 = sub_8C7D4(1, *(void **)v452, *(void *)(v452 + 8));
    __int16 v454 = (os_log_s *)objc_claimAutoreleasedReturnValue(v453);
    v455 = v454;
    if (v454 && os_log_type_enabled(v454, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4038;
      _os_log_impl(&dword_0, v455, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    __int16 v456 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v456, "Precondition failure.");
  }

  if (sub_72348(v12))
  {
    uint64_t v457 = sub_138E8(13);
    id v458 = sub_8C7D4(1, *(void **)v457, *(void *)(v457 + 8));
    v459 = (os_log_s *)objc_claimAutoreleasedReturnValue(v458);
    v460 = v459;
    if (v459 && os_log_type_enabled(v459, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4039;
      _os_log_impl(&dword_0, v460, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unsigned __int8 v461 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v461, "Precondition failure.");
  }

  if (!*(void *)(sub_128E30(*(void *)(a3 + 16)) + 32))
  {
    uint64_t v462 = sub_138E8(13);
    id v463 = sub_8C7D4(1, *(void **)v462, *(void *)(v462 + 8));
    std::string v464 = (os_log_s *)objc_claimAutoreleasedReturnValue(v463);
    std::string v465 = v464;
    if (v464 && os_log_type_enabled(v464, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4040;
      _os_log_impl(&dword_0, v465, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    std::string v466 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v466, "Precondition failure.");
  }

  uint64_t v13 = sub_128E30(*(void *)(a3 + 16));
  sub_116648(&v517, v13 + 16);
  uint64_t v14 = (uint64_t)v518;
  if (v518 != &v517)
  {
    while (*(int *)(v14 + 128) > 0)
    {
      uint64_t v14 = *(void *)(v14 + 8);
    }

    id v15 = &v517;
    while (1)
    {
      id v15 = (uint64_t *)*v15;
      if (*((int *)v15 + 32) >= 1)
      {
        unint64_t v16 = -1LL;
        unint64_t v17 = (uint64_t *)v14;
        do
        {
          unint64_t v17 = (uint64_t *)v17[1];
          ++v16;
        }

        while (v17 != v15);
        uint64_t v18 = v16 + 2;
        if (v16 < 2)
        {
LABEL_38:
          int v22 = 0LL;
          unint64_t v19 = 0LL;
        }

        else
        {
          if (v18 >= 0xE38E38E38E38E3LL) {
            unint64_t v19 = 0xE38E38E38E38E3LL;
          }
          else {
            unint64_t v19 = v16 + 2;
          }
          while (1)
          {
            __int16 v20 = operator new(144 * v19, &std::nothrow);
            if (v20) {
              break;
            }
            BOOL v21 = v19 > 1;
            v19 >>= 1;
            if (!v21) {
              goto LABEL_38;
            }
          }

          int v22 = v20;
        }

        sub_25F848(v14, (uint64_t)v15, v18, (unint64_t)v22, v19);
        if (v22) {
          operator delete(v22);
        }
        break;
      }
    }
  }

LABEL_364:
      if (++v184 == v185) {
        goto LABEL_477;
      }
    }

    int v205 = sub_133C98(*(void *)(a2 + 112));
    uint64_t v206 = *v184;
    if (v205 > 1936749156)
    {
      if (v205 == 1937007472) {
        goto LABEL_373;
      }
      unsigned __int16 v207 = 29285;
    }

    else
    {
      if (v205 == 1835229549) {
        goto LABEL_373;
      }
      unsigned __int16 v207 = 25456;
    }

    if (v205 != (v207 | 0x73700000)) {
      goto LABEL_419;
    }
LABEL_373:
    if (*(_DWORD *)(v206 + 576) != 1986291305) {
      goto LABEL_419;
    }
    unint64_t v208 = *(void *)(v206 + 504) - *(void *)(v206 + 496);
    if ((v208 & 0x7FFFFFFF8LL) == 0) {
      goto LABEL_419;
    }
    exception_object = (_Unwind_Exception *)v185;
    uint64_t v209 = v187;
    uint64_t v210 = v188;
    uint64_t v211 = 0LL;
    unint64_t v212 = (v208 >> 3);
    BOOL v213 = 1;
    do
    {
      uint64_t v214 = *(void *)(*(void *)(v206 + 496) + 8 * v211);
      uint64_t v519 = 0x696E707474617073LL;
      LODWORD(v520) = 0;
      BOOL v213 = ++v211 < v212;
    }

    while (v212 != v211);
    id v188 = v210;
    uint64_t v187 = v209;
    unint64_t v185 = (uint64_t *)exception_object;
    if (!v213)
    {
      uint64_t v206 = *v184;
LABEL_419:
      sub_C1D5C((void *)v206, 1, 0);
      uint64_t v245 = sub_138E8(2);
      uint64_t v246 = sub_138E8(35);
      char v247 = 0;
      uint64_t v248 = 0LL;
      *(void *)v539 = 0x100000002LL;
      uint64_t v249 = *(void *)(v245 + 8);
      while (1)
      {
        uint64_t v250 = *(int *)&v539[4 * v248];
        char v251 = v247;
        if (((v249 & v250) != 0) != ((*(void *)(v246 + 8) & v250) != 0)) {
          break;
        }
        char v247 = 1;
        uint64_t v248 = 1LL;
        if ((v251 & 1) != 0) {
          goto LABEL_425;
        }
      }

      if ((v249 & v250) == 0) {
        uint64_t v245 = v246;
      }
LABEL_425:
      uint64_t v252 = sub_138E8(36);
      char v253 = 0;
      uint64_t v254 = 0LL;
      *(void *)v539 = 0x100000002LL;
      uint64_t v255 = *(void *)(v245 + 8);
      while (1)
      {
        uint64_t v256 = *(int *)&v539[4 * v254];
        char v257 = v253;
        if (((v255 & v256) != 0) != ((*(void *)(v252 + 8) & v256) != 0)) {
          break;
        }
        char v253 = 1;
        uint64_t v254 = 1LL;
        if ((v257 & 1) != 0) {
          goto LABEL_431;
        }
      }

      if ((v255 & v256) == 0) {
        uint64_t v245 = v252;
      }
LABEL_431:
      uint64_t v258 = (os_log_s *)*(id *)v245;
      v204 = v258;
      if (v258)
      {
        __int128 v197 = v258;
        if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
        {
          sub_33464(&v552, (unsigned int *)&v535);
          char v259 = &v552;
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            char v259 = (std::string *)v552.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v539 = 136315650;
          *(void *)&v539[4] = v188;
          *(_WORD *)&v539[12] = 1024;
          *(_DWORD *)&v539[14] = 4197;
          *(_WORD *)&v539[18] = 2080;
          *(void *)&v539[20] = v259;
          _os_log_impl( &dword_0,  v197,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Virtual devices share a physical device. Told the %s device to ignore sample rate changes.",  v539,  0x1Cu);
        }

LABEL_477:
  int v283 = *(_DWORD *)(a3 + 12);
  if (v283 > 1919904884)
  {
    __int16 v284 = v493;
    if (v283 > 1919970402)
    {
      if (v283 != 1919970403)
      {
        int v285 = 1919971701;
        goto LABEL_489;
      }
    }

    else
    {
      if (v283 == 1919904885) {
        goto LABEL_490;
      }
      if (v283 != 1919907442) {
        goto LABEL_492;
      }
    }

    int v288 = *(_DWORD *)(a2 + 8);
    strcpy(v539, "xtcrbolg");
    v539[9] = 0;
    *(_WORD *)&v539[10] = 0;
    unint64_t v289 = (unint64_t *)sub_E2D90((uint64_t *)&buf[8], v288);
    sub_87EB4(v289, (int *)v539);
    int v290 = *(_DWORD *)(a2 + 8);
    strcpy(v539, "fctrbolg");
    v539[9] = 0;
    *(_WORD *)&v539[10] = 0;
    v291 = (unint64_t *)sub_E2D90((uint64_t *)&buf[8], v290);
    sub_87EB4(v291, (int *)v539);
    int v292 = *(_DWORD *)(a2 + 8);
    strcpy(v539, "dpuibolg");
    v539[9] = 0;
    *(_WORD *)&v539[10] = 0;
    unint64_t v293 = (unint64_t *)sub_E2D90((uint64_t *)&buf[8], v292);
    sub_87EB4(v293, (int *)v539);
    goto LABEL_492;
  }

  __int16 v284 = v493;
  if (v283 <= 1919184753)
  {
    if (v283 != 1919050611)
    {
      int v285 = 1919118966;
      goto LABEL_489;
    }

LABEL_539:
      sub_13408((uint64_t)v522, @"device type", v307);
      if (*v304) {
        sub_13408((uint64_t)v522, @"audio session id", *v304);
      }
      if (&v512 == (uint64_t **)sub_71A5C((uint64_t)&v511, v307, HIDWORD(v307)))
      {
        id v313 = *(id *)sub_138E8(13);
        v314 = v313;
        if (v313)
        {
          uint64_t v315 = (os_log_s *)v313;
          if (os_log_type_enabled(v315, OS_LOG_TYPE_ERROR))
          {
            sub_33464(&value, (unsigned int *)&v508);
            uint64_t v316 = &value;
            if ((value.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v316 = (std::string *)value.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v539 = 136315650;
            *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 4359;
            *(_WORD *)&v539[18] = 2080;
            *(void *)&v539[20] = v316;
            _os_log_impl( &dword_0,  v315,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unable to find reconfiguration context for device %s",  v539,  0x1Cu);
          }
        }
      }

      if ((*(_DWORD *)(sub_71A5C((uint64_t)&v511, v307, HIDWORD(v307)) + 36) - 5) >= 0xFFFFFFFE)
      {
        for (std::string::size_type k = v552.__r_.__value_.__l.__size_; k; std::string::size_type k = *(void *)k)
        {
          unsigned int v319 = *(_DWORD *)(k + 28);
          unsigned int v320 = *(_DWORD *)(k + 32);
          BOOL v321 = v320 > HIDWORD(v307);
          if (v319 != (_DWORD)v307) {
            BOOL v321 = v319 > v307;
          }
          if (!v321)
          {
            BOOL v322 = v320 < HIDWORD(v307);
            BOOL v32 = v319 == (_DWORD)v307;
            BOOL v323 = v319 < v307;
            if (v32) {
              BOOL v323 = v322;
            }
            if (!v323) {
              goto LABEL_551;
            }
            k += 8LL;
          }
        }

        int v317 = 1;
      }

      else
      {
LABEL_551:
        int v317 = 0;
      }

      sub_134C4((uint64_t)v522, @"persisted", v317);
      value.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable( 0LL,  0LL,  &kCFTypeArrayCallBacks);
      LOWORD(value.__r_.__value_.__r.__words[1]) = 257;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      __int16 v507 = 257;
      sub_B8E40(v505, (uint64_t)v501, "", 4367);
      for (uint64_t m = (uint64_t *)v505[1]; m != v505; uint64_t m = (uint64_t *)m[1])
      {
        uint64_t v325 = m[2];
        __int16 v326 = *(_WORD *)(v325 + 184);
        if ((v326 & 0x10) != 0)
        {
          memset(v539, 0, 24);
          strcpy(&v539[24], "cwdv");
          v539[32] = 0;
          *(_DWORD *)&v539[40] = 3;
          v541[0] = 0LL;
          v541[1] = 0LL;
          v540 = v541;
          CFTypeRef cf = 0LL;
          int v542 = 44731050;
          int v327 = sub_578E8(*(void *)(a2 + 128), v325, (uint64_t)v539);
          if ((v326 & 1) != 0) {
            p_CFMutableDictionaryRef Mutable = &value;
          }
          else {
            p_CFMutableDictionaryRef Mutable = (std::string *)&Mutable;
          }
          sub_1378C((uint64_t)p_Mutable, v327);
          if (cf) {
            CFRelease(cf);
          }
          sub_32C8C(v541[0]);
          if (*(void *)v539)
          {
            *(void *)&v539[8] = *(void *)v539;
            operator delete(*(void **)v539);
          }
        }
      }

      sub_1BB88(v505);
      v329 = v522[0];
      if (BYTE1(v522[1]))
      {
        v303 = v305;
        if (!value.__r_.__value_.__r.__words[0]
          || !v522[0]
          || (CFDictionarySetValue(v522[0], @"input ports", value.__r_.__value_.__l.__data_),
              v329 = v522[0],
              BYTE1(v522[1])))
        {
          if (Mutable && v329)
          {
            CFDictionarySetValue(v329, @"output ports", Mutable);
            v329 = v522[0];
          }
        }
      }

      else
      {
        v303 = v305;
      }

      if (theArray && HIBYTE(v527[0])) {
        CFArrayAppendValue(theArray, v329);
      }
      sub_13818((uint64_t)&Mutable);
      sub_13818((uint64_t)&value);
      sub_13850((uint64_t)v522);
      ++v304;
    }

    while (v304 != (int *)exception_objecta);
    v304 = (int *)v519;
LABEL_586:
    if (v304)
    {
      double v520 = *(double *)&v304;
      operator delete(v304);
    }

    v303 += 2;
  }

  while (v303 != v493);
LABEL_589:
  if (HIBYTE(v510) && theArray && theDict) {
    CFDictionarySetValue(theDict, @"active devices", theArray);
  }
  uint64_t v498 = a2 + 80;
  v330 = v550;
  if (v550 != v551)
  {
    do
    {
      uint64_t v331 = *((unsigned int *)v330 + 7);
      uint64_t v332 = sub_138E8(13);
      if ((*(_BYTE *)(v332 + 8) & 1) != 0)
      {
        v333 = *(os_log_s **)v332;
        if (*(void *)v332)
        {
          if (os_log_type_enabled(*(os_log_t *)v332, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v539 = 136315650;
            *(void *)&v539[4] = "VirtualAudio_Utilities.cpp";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 363;
            *(_WORD *)&v539[18] = 1024;
            *(_DWORD *)&v539[20] = v331;
            _os_log_impl( &dword_0,  v333,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Changing visibility of object ID %u.",  v539,  0x18u);
          }
        }
      }

      uint64_t v519 = 0x676C6F6268646E71LL;
      LODWORD(v520) = 0;
      if (AudioObjectPropertiesChanged(v498, v331, 1LL, &v519))
      {
        v334 = (os_log_t *)sub_138E8(13);
        unsigned int v335 = *v334;
        if (*v334)
        {
          if (os_log_type_enabled(*v334, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v539 = 136315394;
            *(void *)&v539[4] = "VirtualAudio_Utilities.cpp";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 366;
            _os_log_impl( &dword_0,  v335,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theResult): error informing the HAL of changed visibility of objects",  v539,  0x12u);
          }
        }
      }

      v336 = (void *)v330[1];
      if (v336)
      {
        do
        {
          unint64_t v337 = v336;
          v336 = (void *)*v336;
        }

        while (v336);
      }

      else
      {
        do
        {
          unint64_t v337 = (void *)v330[2];
          BOOL v32 = *v337 == (void)v330;
          v330 = v337;
        }

        while (!v32);
      }

      v330 = v337;
    }

    while (v337 != v551);
  }

  uint64_t v338 = v547;
  if (v548 != v547)
  {
    uint64_t v339 = 0LL;
    unsigned int v340 = 0;
    do
    {
      int v341 = (void *)(v338 + 56 * v339);
      uint64_t v342 = *(unsigned int *)v341;
      int v343 = v341 + 1;
      uint64_t v344 = v341[2];
      if (v344 == v341[1])
      {
        uint64_t v350 = v341[2];
      }

      else
      {
        unint64_t v345 = 0LL;
        unsigned int v346 = 1;
        do
        {
          uint64_t v347 = sub_138E8(13);
          if ((*(_BYTE *)(v347 + 8) & 1) != 0)
          {
            unsigned __int16 v348 = *(os_log_s **)v347;
            if (*(void *)v347)
            {
              if (os_log_type_enabled(*(os_log_t *)v347, OS_LOG_TYPE_DEBUG))
              {
                int v349 = *(_DWORD *)(*v343 + 4 * v345);
                *(_DWORD *)v539 = 136315906;
                *(void *)&v539[4] = "VirtualAudio_Utilities.cpp";
                *(_WORD *)&v539[12] = 1024;
                *(_DWORD *)&v539[14] = 380;
                *(_WORD *)&v539[18] = 1024;
                *(_DWORD *)&v539[20] = v349;
                *(_WORD *)&v539[24] = 1024;
                *(_DWORD *)&v539[26] = v342;
                _os_log_impl( &dword_0,  v348,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Publishing object ID %u (owning object ID: %u).",  v539,  0x1Eu);
              }
            }
          }

          unint64_t v345 = v346;
          uint64_t v344 = *v343;
          uint64_t v350 = v341[2];
          ++v346;
        }

        while (v345 < (v350 - *v343) >> 2);
      }

      uint64_t v352 = v341[4];
      uint64_t v351 = v341[5];
      unint64_t v353 = v341 + 4;
      if (v351 == v352)
      {
        unint64_t v359 = 0LL;
      }

      else
      {
        uint64_t v354 = 0LL;
        unsigned int v355 = 1;
        do
        {
          uint64_t v356 = sub_138E8(13);
          if ((*(_BYTE *)(v356 + 8) & 1) != 0)
          {
            unint64_t v357 = *(os_log_s **)v356;
            if (*(void *)v356)
            {
              if (os_log_type_enabled(*(os_log_t *)v356, OS_LOG_TYPE_DEBUG))
              {
                int v358 = *(_DWORD *)(*v353 + 4 * v354);
                *(_DWORD *)v539 = 136315906;
                *(void *)&v539[4] = "VirtualAudio_Utilities.cpp";
                *(_WORD *)&v539[12] = 1024;
                *(_DWORD *)&v539[14] = 384;
                *(_WORD *)&v539[18] = 1024;
                *(_DWORD *)&v539[20] = v358;
                *(_WORD *)&v539[24] = 1024;
                *(_DWORD *)&v539[26] = v342;
                _os_log_impl( &dword_0,  v357,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Unpublishing object ID %u (owning object ID: %u).",  v539,  0x1Eu);
              }
            }
          }

          uint64_t v354 = v355;
          uint64_t v351 = *v353;
          unint64_t v359 = (v353[1] - *v353) >> 2;
          BOOL v21 = v359 > v355++;
        }

        while (v21);
        uint64_t v344 = *v343;
        uint64_t v350 = v343[1];
      }

      if (AudioObjectsPublishedAndDied( v498,  v342,  (unint64_t)(v350 - v344) >> 2,  v344,  v359,  v351))
      {
        v360 = (os_log_t *)sub_138E8(13);
        uint64_t v361 = *v360;
        if (*v360)
        {
          if (os_log_type_enabled(*v360, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v539 = 136315394;
            *(void *)&v539[4] = "VirtualAudio_Utilities.cpp";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 388;
            _os_log_impl( &dword_0,  v361,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theResult): error publishing and destroying objects",  v539,  0x12u);
          }
        }
      }

      uint64_t v338 = v547;
      uint64_t v339 = ++v340;
    }

    while (0x6DB6DB6DB6DB6DB7LL * ((v548 - v547) >> 3) > (unint64_t)v340);
  }

  sub_263084(a2, a3);
  sub_8DF20(v536);
  sub_13818((uint64_t)&theArray);
  sub_32C8C((void *)v552.__r_.__value_.__l.__size_);
  v533[0] = &off_4792B0;
  v533[1] = a2;
  v534 = v533;
  sub_35678(&v535, 1, (uint64_t)v533);
  v362 = v534;
  if (v534 == v533)
  {
    uint64_t v363 = 4LL;
    v362 = v533;
LABEL_637:
    (*(void (**)(void))(*v362 + 8 * v363))();
  }

  else if (v534)
  {
    uint64_t v363 = 5LL;
    goto LABEL_637;
  }

  v529[0] = &off_4792F8;
  v530 = v529;
  sub_35678(&value, 1, (uint64_t)v529);
  v364 = v530;
  if (v530 == v529)
  {
    uint64_t v365 = 4LL;
    v364 = v529;
LABEL_642:
    (*(void (**)(void))(*v364 + 8 * v365))();
  }

  else if (v530)
  {
    uint64_t v365 = 5LL;
    goto LABEL_642;
  }

  v524[0] = &off_479340;
  v524[1] = &v514;
  v525 = v524;
  sub_35678(&theArray, 1, (uint64_t)v524);
  v366 = v525;
  if (v525 == v524)
  {
    uint64_t v367 = 4LL;
    v366 = v524;
LABEL_647:
    (*(void (**)(void))(*v366 + 8 * v367))();
  }

  else if (v525)
  {
    uint64_t v367 = 5LL;
    goto LABEL_647;
  }

  v368 = operator new(0x18uLL);
  uint64_t v369 = *(void *)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  v368[2] = 1;
  *(void *)v368 = &off_479108;
  v502 = v368;
  *((void *)v368 + 2) = v369;
  if (!v369)
  {
    uint64_t v473 = sub_138E8(13);
    id v474 = sub_8C7D4(1, *(void **)v473, *(void *)(v473 + 8));
    uint64_t v475 = (os_log_s *)objc_claimAutoreleasedReturnValue(v474);
    v476 = v475;
    if (v475 && os_log_type_enabled(v475, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v539 = 136315394;
      *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v539[12] = 1024;
      *(_DWORD *)&v539[14] = 395;
      _os_log_impl(&dword_0, v476, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v539, 0x12u);
    }

    v477 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v477, "Precondition failure.");
  }

  if (v528)
  {
    (*(void (**)(_WORD *))(*(void *)v528 + 48LL))(v528);
    id v370 = v528;
    v528 = 0LL;
    if (v370 == v527)
    {
      uint64_t v371 = 4LL;
      id v370 = v527;
LABEL_654:
      (*(void (**)(void))(*(void *)v370 + 8 * v371))();
    }

    else if (v370)
    {
      uint64_t v371 = 5LL;
      goto LABEL_654;
    }
  }

  if (v532)
  {
    (*(void (**)(std::string *))(v532->__r_.__value_.__r.__words[0] + 48))(v532);
    v372 = v532;
    v532 = 0LL;
    if (v372 == (std::string *)&value.__r_.__value_.__r.__words[1])
    {
      uint64_t v373 = 4LL;
      v372 = (std::string *)&value.__r_.__value_.__r.__words[1];
LABEL_660:
      (*(void (**)(void))(v372->__r_.__value_.__r.__words[0] + 8 * v373))();
    }

    else if (v372)
    {
      uint64_t v373 = 5LL;
      goto LABEL_660;
    }
  }

  if (v491 != v492)
  {
    std::string::size_type v374 = (unint64_t **)v491;
    do
      sub_C5E24(*v374++, (uint64_t *)&buf[8]);
    while (v374 != (unint64_t **)v492);
  }

  if (__p != v490)
  {
    v375 = (unint64_t **)__p;
    do
    {
      memset(v539, 0, 24);
      sub_C5E24(*v375, (uint64_t *)v539);
      v552.__r_.__value_.__r.__words[0] = (std::string::size_type)v539;
      sub_E2D18((void ***)&v552);
      ++v375;
    }

    while (v375 != (unint64_t **)v490);
  }

  sub_E3100(*(uint64_t *)&buf[8], *(uint64_t *)&buf[16]);
  uint64_t v376 = sub_32918();
  v552.__r_.__value_.__r.__words[0] = 0x706D627470687062LL;
  sub_7A22C((uint64_t)v539, (unsigned int *)&v552, 2LL);
  LODWORD(v522[0]) = 3;
  sub_395F90(v376, (uint64_t)"fedv", (uint64_t)v539, (unsigned int *)v522);
  sub_32C8C(*(void **)&v539[8]);
  uint64_t v377 = sub_5954C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v377 + 304LL))(v377))
  {
    uint64_t v378 = sub_138E8(2);
    uint64_t v379 = sub_138E8(15);
    char v380 = 0;
    uint64_t v381 = 0LL;
    *(void *)v539 = 0x100000002LL;
    uint64_t v382 = *(void *)(v378 + 8);
    while (1)
    {
      uint64_t v383 = *(int *)&v539[4 * v381];
      char v384 = v380;
      if (((v382 & v383) != 0) != ((*(void *)(v379 + 8) & v383) != 0)) {
        break;
      }
      char v380 = 1;
      uint64_t v381 = 1LL;
      if ((v384 & 1) != 0)
      {
        if ((v382 & 1) == 0) {
          goto LABEL_687;
        }
        goto LABEL_683;
      }
    }

    if ((v382 & v383) == 0) {
      uint64_t v378 = v379;
    }
    if ((*(void *)(v378 + 8) & 1) != 0)
    {
LABEL_683:
      uint64_t v388 = (os_log_s *)*(id *)v378;
      if (v388)
      {
        v389 = v388;
        if (os_log_type_enabled(v388, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v539 = 136315394;
          *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v539[12] = 1024;
          *(_DWORD *)&v539[14] = 4473;
          _os_log_impl( &dword_0,  v389,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Queueing destroyed (plug-in) objects tracker.",  v539,  0x12u);
        }
      }
    }

LABEL_687:
    uint64_t v390 = sub_5954C();
    int v391 = v502;
    v502 = 0LL;
    (*(void (**)(uint64_t, void *))(*(void *)v390 + 328LL))(v390, v391);
  }

  else
  {
    if (++dword_49306C >= 2)
    {
      std::string v385 = (os_log_s *)*(id *)sub_138E8(2);
      v386 = v385;
      if (v385 && os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v539 = 136315394;
        *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v539[12] = 1024;
        *(_DWORD *)&v539[14] = 4480;
        _os_log_impl( &dword_0,  v386,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Manually destroying objects because the serialization context is not valid.",  v539,  0x12u);
      }
    }

    sub_263ED4((uint64_t)v502, (uint64_t)&v552);
    int64_t cap = (void *)v552.__r_.__value_.__l.__cap_;
    if (v552.__r_.__value_.__l.__cap_)
    {
      sub_10AF78((uint64_t *)(v552.__r_.__value_.__l.__cap_ + 16));
      operator delete(cap);
    }
  }

  uint64_t v392 = *(void *)(a2 + 144);
  uint64_t v393 = *(void *)(a2 + 152);
  if (v392 == v393)
  {
    uint64_t v398 = 0LL;
    unint64_t v396 = 0LL;
  }

  else
  {
    unint64_t v394 = 0LL;
    uint64_t v395 = 0LL;
    unint64_t v396 = 0LL;
    do
    {
      int v397 = *(_DWORD *)(*(void *)v392 + 8LL);
      if ((unint64_t)v395 >= v394)
      {
        uint64_t v399 = (v395 - v396) >> 2;
        unint64_t v400 = v399 + 1;
        else {
          unint64_t v401 = v400;
        }
        if (v401) {
          unint64_t v401 = (unint64_t)sub_7A890(v401);
        }
        else {
          uint64_t v402 = 0LL;
        }
        unint64_t v403 = (char *)(v401 + 4 * v399);
        *(_DWORD *)unint64_t v403 = v397;
        uint64_t v398 = (uint64_t)(v403 + 4);
        while (v395 != v396)
        {
          int v404 = *((_DWORD *)v395 - 1);
          v395 -= 4;
          *((_DWORD *)v403 - 1) = v404;
          v403 -= 4;
        }

        unint64_t v394 = v401 + 4 * v402;
        if (v396) {
          operator delete(v396);
        }
        unint64_t v396 = v403;
      }

      else
      {
        *(_DWORD *)uint64_t v395 = v397;
        uint64_t v398 = (uint64_t)(v395 + 4);
      }

      v392 += 8LL;
      uint64_t v395 = (char *)v398;
    }

    while (v392 != v393);
  }

  v522[0] = *(CFMutableDictionaryRef *)(a2 + 136);
  v522[1] = 0LL;
  __int128 v523 = 0uLL;
  sub_7A5B8(&v522[1], v396, v398, (v398 - (uint64_t)v396) >> 2);
  v405 = (dispatch_queue_s *)sub_869B4();
  __int128 v504 = *(_OWORD *)v522;
  __int128 v499 = v523;
  v522[1] = 0LL;
  __int128 v523 = 0uLL;
  v406 = operator new(0x20uLL);
  _OWORD *v406 = v504;
  v406[1] = v499;
  *(void *)v539 = 0LL;
  dispatch_async_f(v405, v406, (dispatch_function_t)sub_915B4);
  sub_91C10((void **)v539);
  if (v396) {
    operator delete(v396);
  }
  if (v538)
  {
    ((void (*)(void **))(*v538)[6])(v538);
    v407 = v538;
    v538 = 0LL;
    if (v407 == &v536)
    {
      uint64_t v408 = 4LL;
      v407 = &v536;
LABEL_717:
      ((void (*)(void))(*v407)[v408])();
    }

    else if (v407)
    {
      uint64_t v408 = 5LL;
      goto LABEL_717;
    }
  }

  *(_DWORD *)a1 = sub_264118(*(unsigned int *)(a3 + 8));
  CFMutableDictionaryRef v409 = theDict;
  *(void *)(a1 + 8) = theDict;
  int v410 = v510;
  *(_WORD *)(a1 + 16) = v510;
  if (v410 && v409) {
    CFRetain(v409);
  }
  if (v502) {
    operator delete(v502);
  }
  sub_35B78((uint64_t)&theArray);
  sub_35B78((uint64_t)&value);
  sub_35B78((uint64_t)&v535);
  sub_13850((uint64_t)&theDict);
  sub_32C8C(v512);
  if (v489) {
    operator delete(v489);
  }
  if (v491) {
    operator delete(v491);
  }
  if (v514)
  {
    v515 = (uint64_t *)v514;
    operator delete(v514);
  }

  if (__p) {
    operator delete(__p);
  }
  sub_E43E8((uint64_t)buf);
  sub_10AF78(&v517);
}

void sub_25E6C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a18) {
    operator delete(a18);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }

  if (a17) {
    operator delete(a17);
  }
  sub_E43E8((uint64_t)&STACK[0x2D0]);
  sub_10AF78(&a49);
  _Unwind_Resume(v64);
}

void sub_25F414( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {

    sub_13850((uint64_t)&a55);
    if (__p) {
      operator delete(__p);
    }
    sub_8DF20((void *)STACK[0x250]);
    sub_13818((uint64_t)&a64);
    sub_32C8C(*(void **)(v65 - 184));
    if (a2 == 3)
    {
      uint64_t v67 = (unsigned int *)__cxa_begin_catch(a1);
      id v68 = *(id *)sub_138E8(2);
      id v69 = v68;
      if (v68)
      {
        unsigned int v70 = (os_log_s *)v68;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C((void *)(v65 - 192), v67[2]);
          else {
            unint64_t v71 = *(void *)(v65 - 192);
          }
          LODWORD(STACK[0x270]) = 136315650;
          STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
          LOWORD(STACK[0x27C]) = 1024;
          LODWORD(STACK[0x27E]) = 4391;
          LOWORD(STACK[0x282]) = 2080;
          STACK[0x284] = v71;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException thrown during device creation, reconfiguration, and preparation for destruction: '%s'.",  (uint8_t *)&STACK[0x270],  0x1Cu);
        }
      }
    }

    else
    {
      uint64_t v72 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v73 = v72;
        id v74 = *(id *)sub_138E8(2);
        id v69 = v74;
        if (v74)
        {
          uint64_t v75 = (os_log_s *)v74;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            uint64_t v76 = (*(uint64_t (**)(void *))(*(void *)v73 + 16LL))(v73);
            LODWORD(STACK[0x270]) = 136315650;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4396;
            LOWORD(STACK[0x282]) = 2080;
            STACK[0x284] = v76;
            _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception thrown during device creation, reconfiguration, and preparation for destruction: %s.",  (uint8_t *)&STACK[0x270],  0x1Cu);
          }
        }
      }

      else
      {
        id v77 = *(id *)sub_138E8(2);
        id v69 = v77;
        if (v77)
        {
          uint64_t v78 = (os_log_s *)v77;
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            LODWORD(STACK[0x270]) = 136315394;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4401;
            _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception thrown during device creation, reconfiguration, and preparation for destruction.",  (uint8_t *)&STACK[0x270],  0x12u);
          }
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x25CFE8LL);
  }

  _Unwind_Resume(v79);
}

void sub_25F430(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x25F43CLL);
  }
  _Unwind_Resume(v2);
}

void sub_25F444(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x25F450LL);
  }
  _Unwind_Resume(v2);
}

void sub_25F458(uint64_t a1, int a2)
{
  if (a2)
  {

    JUMPOUT(0x25F588LL);
  }

  _Unwind_Resume(v3);
}

void sub_25F474( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    sub_13850((uint64_t)&a55);
    if (a52) {
      operator delete(a52);
    }
    sub_8DF20((void *)STACK[0x250]);
    sub_13818((uint64_t)&a64);
    sub_32C8C(*(void **)(v64 - 184));
    if (a2 == 3)
    {
      uint64_t v67 = (unsigned int *)__cxa_begin_catch(a1);
      id v68 = *(id *)sub_138E8(2);
      id v69 = v68;
      if (v68)
      {
        unsigned int v70 = (os_log_s *)v68;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C((void *)(v64 - 192), v67[2]);
          else {
            unint64_t v71 = *(void *)(v64 - 192);
          }
          LODWORD(STACK[0x270]) = 136315650;
          STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
          LOWORD(STACK[0x27C]) = 1024;
          LODWORD(STACK[0x27E]) = 4391;
          LOWORD(STACK[0x282]) = 2080;
          STACK[0x284] = v71;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException thrown during device creation, reconfiguration, and preparation for destruction: '%s'.",  (uint8_t *)&STACK[0x270],  0x1Cu);
        }
      }
    }

    else
    {
      uint64_t v72 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v73 = v72;
        id v74 = *(id *)sub_138E8(2);
        id v69 = v74;
        if (v74)
        {
          uint64_t v75 = (os_log_s *)v74;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            uint64_t v76 = (*(uint64_t (**)(void *))(*(void *)v73 + 16LL))(v73);
            LODWORD(STACK[0x270]) = 136315650;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4396;
            LOWORD(STACK[0x282]) = 2080;
            STACK[0x284] = v76;
            _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception thrown during device creation, reconfiguration, and preparation for destruction: %s.",  (uint8_t *)&STACK[0x270],  0x1Cu);
          }
        }
      }

      else
      {
        id v77 = *(id *)sub_138E8(2);
        id v69 = v77;
        if (v77)
        {
          uint64_t v78 = (os_log_s *)v77;
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            LODWORD(STACK[0x270]) = 136315394;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4401;
            _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception thrown during device creation, reconfiguration, and preparation for destruction.",  (uint8_t *)&STACK[0x270],  0x12u);
          }
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x25CFE8LL);
  }

  _Unwind_Resume(v79);
}

void sub_25F7F0()
{
  __cxa_end_catch();
  JUMPOUT(0x25EDB8LL);
}

uint64_t sub_25F848(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1;
  if (a3 == 3)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    if (*(int *)(v9 + 128) < 1)
    {
      sub_268164((__int128 *)(v9 + 16), (__int128 *)(a2 + 16));
      int v11 = (uint64_t *)(v9 + 136);
      sub_2682F0((__int128 *)(v9 + 136), (uint64_t *)(a2 + 136));
      sub_268164((__int128 *)(v6 + 16), (__int128 *)(v9 + 16));
      unint64_t v8 = (__int128 *)(v6 + 136);
      goto LABEL_7;
    }

    sub_268164((__int128 *)(a1 + 16), (__int128 *)(v9 + 16));
    BOOL v10 = (__int128 *)(v6 + 136);
    unint64_t v8 = (__int128 *)(v9 + 136);
    sub_2682F0(v10, (uint64_t *)(v9 + 136));
    sub_268164((__int128 *)(v9 + 16), (__int128 *)(a2 + 16));
LABEL_6:
    int v11 = (uint64_t *)(a2 + 136);
    uint64_t v9 = a2;
LABEL_7:
    sub_2682F0(v8, v11);
    return v9;
  }

  if (a3 == 2)
  {
    sub_268164((__int128 *)(a1 + 16), (__int128 *)(a2 + 16));
    unint64_t v8 = (__int128 *)(v6 + 136);
    goto LABEL_6;
  }

  if (a5 >= a3)
  {
    sub_268364(a4, (__int128 *)(a1 + 16));
    unint64_t v18 = a4 + 144;
    uint64_t v19 = *(void *)(v6 + 8);
    if (v19 == a2)
    {
      sub_26840C(v6 + 16, (__int128 *)(a2 + 16));
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v20 = 1LL;
    }

    else
    {
      uint64_t v20 = 1LL;
      do
      {
        BOOL v21 = (__int128 *)(v19 + 16);
        if (*(int *)(v19 + 128) < 1)
        {
          sub_268364(v18, v21);
          ++v20;
          v18 += 144LL;
        }

        else
        {
          sub_26840C(v6 + 16, v21);
          uint64_t v6 = *(void *)(v6 + 8);
        }

        uint64_t v19 = *(void *)(v19 + 8);
      }

      while (v19 != a2);
      sub_26840C(v6 + 16, (__int128 *)(a2 + 16));
      uint64_t v9 = *(void *)(v6 + 8);
      if (v18 <= a4)
      {
LABEL_42:
        if (a4 && v20)
        {
          uint64_t v30 = (uint64_t *)(a4 + 120);
          do
          {
            sub_85B80(v30);
            uint64_t v31 = (void *)*(v30 - 4);
            if (v31)
            {
              *(v30 - 3) = (uint64_t)v31;
              operator delete(v31);
            }

            sub_32C8C((void *)*(v30 - 6));
            v30 += 18;
            --v20;
          }

          while (v20);
        }

        return v9;
      }
    }

    double v28 = (__int128 *)a4;
    uint64_t v29 = v9;
    do
    {
      sub_26840C(v29 + 16, v28);
      v28 += 9;
      uint64_t v29 = *(void *)(v29 + 8);
    }

    while ((unint64_t)v28 < v18);
    goto LABEL_42;
  }

  if (a3 >= 0) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = a3 + 1;
  }
  uint64_t v15 = v14 >> 1;
  if (a3 <= -2)
  {
    uint64_t v22 = v14 >> 1;
    uint64_t v16 = a1;
    do
      uint64_t v16 = *(void *)v16;
    while (!__CFADD__(v22++, 1LL));
  }

  else
  {
    uint64_t v16 = a1;
    if ((unint64_t)(a3 + 1) >= 3)
    {
      unint64_t v17 = v15 + 1;
      uint64_t v16 = a1;
      do
      {
        uint64_t v16 = *(void *)(v16 + 8);
        --v17;
      }

      while (v17 > 1);
    }
  }

  id v24 = *(int **)v16;
  uint64_t v25 = v15;
  if (*(int *)(*(void *)v16 + 128LL) > 0)
  {
LABEL_33:
    uint64_t v6 = sub_25F848(a1);
  }

  else
  {
    while (v24 != (int *)a1)
    {
      --v25;
      id v24 = *(int **)v24;
      if (v24[32] >= 1) {
        goto LABEL_33;
      }
    }
  }

  uint64_t v26 = a3 - v15;
  if (*(int *)(v16 + 128) < 1)
  {
    uint64_t v27 = v16;
LABEL_50:
    uint64_t v9 = sub_25F848(v27);
  }

  else
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v27 = v16;
    while (1)
    {
      uint64_t v27 = *(void *)(v27 + 8);
      if (v27 == a2) {
        break;
      }
      --v26;
    }
  }

  if (v6 != v16)
  {
    if (v16 != v9)
    {
      uint64_t v32 = v16;
      while (1)
      {
        sub_268164((__int128 *)(v6 + 16), (__int128 *)(v32 + 16));
        sub_2682F0((__int128 *)(v6 + 136), (uint64_t *)(v32 + 136));
        uint64_t v6 = *(void *)(v6 + 8);
        uint64_t v32 = *(void *)(v32 + 8);
        if (v32 == v9) {
          break;
        }
        if (v6 == v16) {
          uint64_t v16 = v32;
        }
      }

      if (v6 == v16) {
        return v16;
      }
      uint64_t v33 = v6;
      uint64_t v34 = v16;
      do
      {
        while (1)
        {
          sub_268164((__int128 *)(v33 + 16), (__int128 *)(v34 + 16));
          sub_2682F0((__int128 *)(v33 + 136), (uint64_t *)(v34 + 136));
          uint64_t v33 = *(void *)(v33 + 8);
          uint64_t v34 = *(void *)(v34 + 8);
          if (v34 == v9) {
            break;
          }
          if (v33 == v16) {
            uint64_t v16 = v34;
          }
        }

        uint64_t v34 = v16;
      }

      while (v33 != v16);
    }

    return v6;
  }

  return v9;
}

void *sub_25FBC0(void *result, int a2, char **a3)
{
  unint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    while (1)
    {
      uint64_t v6 = *(void *)v5;
      if (*(void *)v5)
      {
        if (*(_DWORD *)(v6 + 580) == a2 && *(_DWORD *)(v6 + 576) == (_DWORD)result) {
          break;
        }
      }

      v5 += 8;
      if (v5 == v4)
      {
        unint64_t v5 = a3[1];
        break;
      }
    }
  }

  int64_t v8 = v4 - (v5 + 8);
  if (v4 != v5 + 8) {
    uint64_t result = memmove(v5, v5 + 8, v4 - (v5 + 8));
  }
  a3[1] = &v5[v8];
  return result;
}

void sub_25FC3C(void *a1, uint64_t a2, unsigned int *a3, int a4, int a5, void *a6)
{
  int v232 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  uint64_t v238 = a3;
  if (!*a3)
  {
    uint64_t v205 = sub_138E8(13);
    id v206 = sub_8C7D4(1, *(void **)v205, *(void *)(v205 + 8));
    unsigned __int16 v207 = (os_log_s *)objc_claimAutoreleasedReturnValue(v206);
    unint64_t v208 = v207;
    if (v207 && os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1900;
      _os_log_impl(&dword_0, v208, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned __int32 v239 = 0;
  int v9 = AudioObjectCreate(a2 + 80, 1LL, 1633969526LL, &v239);
  if (v9)
  {
    uint64_t v210 = sub_138E8(13);
    id v211 = sub_8C7D4(1, *(void **)v210, *(void *)(v210 + 8));
    unint64_t v212 = (os_log_s *)objc_claimAutoreleasedReturnValue(v211);
    BOOL v213 = v212;
    if (v212 && os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1905;
      _os_log_impl( &dword_0,  v213,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: AudioObjectCreate failed to create a device ID for a new virtual audio device.",  buf,  0x12u);
    }

    uint64_t v214 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v214 = &off_4865A0;
    v214[2] = v9;
  }

  BOOL v10 = operator new(0x448uLL);
  uint64_t v241 = *(void *)a3;
  uint64_t v11 = v241;
  unsigned __int32 v233 = v239;
  sub_2F4FC8((uint64_t)v10, v239, 1633969526, a2);
  uint64_t v234 = v11;
  *BOOL v10 = off_47B908;
  sub_B1F7C((uint64_t)(v10 + 42), (uint64_t)"DeviceStateMutex");
  v10[59] = 0LL;
  *(_OWORD *)(v10 + 55) = 0u;
  *(_OWORD *)(v10 + 57) = 0u;
  *(_OWORD *)(v10 + 53) = 0u;
  *((_DWORD *)v10 + 120) = 1;
  *((_BYTE *)v10 + 484) = 0;
  *((_DWORD *)v10 + 122) = 512;
  *((_OWORD *)v10 + 31) = 0u;
  *((_OWORD *)v10 + 32) = 0u;
  *((_OWORD *)v10 + 33) = 0u;
  *((_OWORD *)v10 + 34) = 0u;
  v10[70] = 0LL;
  (*(void (**)(void *))(*v10 + 424LL))(v10);
  int v236 = a5;
  uint64_t v237 = a2;
  uint64_t v12 = (char *)operator new(0x60uLL);
  *(void *)uint64_t v12 = off_480150;
  *((void *)v12 + 1) = v10;
  *((_DWORD *)v12 + 4) = 0;
  *(_OWORD *)(v12 + memset(buf, 0, 24) = 0u;
  uint64_t v13 = (const __CFString **)(v12 + 24);
  *(_OWORD *)(v12 + 72) = 0u;
  uint64_t v14 = v12 + 72;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((void *)v12 + 11) = 0LL;
  sub_31A6E0();
  int v15 = (*(uint64_t (**)(uint64_t *))(qword_49DB28 + 16))(&qword_49DB28);
  unsigned int v16 = dword_49DB20++;
  uint64_t v17 = qword_49DB10;
  if (qword_49DB10)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v18 = (uint64_t *)v17;
        unsigned int v19 = *(_DWORD *)(v17 + 32);
        if (v16 >= v19) {
          break;
        }
        uint64_t v17 = *v18;
        uint64_t v20 = v18;
        if (!*v18) {
          goto LABEL_11;
        }
      }

      if (v19 >= v16) {
        break;
      }
      uint64_t v17 = v18[1];
      if (!v17)
      {
        uint64_t v20 = v18 + 1;
        goto LABEL_11;
      }
    }
  }

  else
  {
    uint64_t v20 = &qword_49DB10;
    unint64_t v18 = &qword_49DB10;
LABEL_11:
    BOOL v21 = operator new(0x30uLL);
    v21[8] = v16;
    *((void *)v21 + 5) = v12;
    *(void *)BOOL v21 = 0LL;
    *((void *)v21 + 1) = 0LL;
    *((void *)v21 + 2) = v18;
    uint64_t *v20 = (uint64_t)v21;
    if (*(void *)qword_49DB08)
    {
      qword_49DB08 = *(void *)qword_49DB08;
      BOOL v21 = (_DWORD *)*v20;
    }

    sub_7A420((uint64_t *)qword_49DB10, (uint64_t *)v21);
    ++qword_49DB18;
  }

  if (v15) {
    (*(void (**)(uint64_t *))(qword_49DB28 + 24))(&qword_49DB28);
  }
  *((_DWORD *)v12 + 4) = v16;
  *(void *)char v247 = (*(uint64_t (**)(void))(**((void **)v12 + 1) + 176LL))(*((void *)v12 + 1));
  v247[8] = 1;
  CFStringRef v22 = CFStringCreateWithFormat( 0LL,  0LL,  @"com.apple.audio.CoreAudio.PreferredStereoChannels.%s.%@",  "Input",  *(void *)v247);
  *uint64_t v13 = v22;
  if (!v22)
  {
    int v215 = (os_log_t *)sub_138E8(13);
    uint64_t v216 = *v215;
    if (!*v215 || !os_log_type_enabled(*v215, OS_LOG_TYPE_ERROR)) {
      goto LABEL_321;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 163;
    id v217 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [mInputStereoPrefsKey is NULL]: couldn't create t"
           "he input stereo prefs key";
LABEL_320:
    _os_log_impl(&dword_0, v216, OS_LOG_TYPE_ERROR, v217, buf, 0x12u);
    goto LABEL_321;
  }

  CFStringRef v23 = CFStringCreateWithFormat( 0LL,  0LL,  @"com.apple.audio.CoreAudio.PreferredStereoChannels.%s.%@",  "Output",  *(void *)v247);
  *((void *)v12 + 4) = v23;
  if (!v23)
  {
    unint64_t v218 = (os_log_t *)sub_138E8(13);
    uint64_t v216 = *v218;
    if (!*v218 || !os_log_type_enabled(*v218, OS_LOG_TYPE_ERROR)) {
      goto LABEL_321;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 166;
    id v217 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [mOutputStereoPrefsKey is NULL]: couldn't create "
           "the output stereo prefs key";
    goto LABEL_320;
  }

  CFStringRef v24 = CFStringCreateWithFormat( 0LL,  0LL,  @"com.apple.audio.CoreAudio.PreferredChannelLayout.%s.%@",  "Input",  *(void *)v247);
  *((void *)v12 + 5) = v24;
  if (!v24)
  {
    uint64_t v219 = (os_log_t *)sub_138E8(13);
    uint64_t v216 = *v219;
    if (!*v219 || !os_log_type_enabled(*v219, OS_LOG_TYPE_ERROR)) {
      goto LABEL_321;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 169;
    id v217 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [mInputChannelLayoutPrefsKey is NULL]: couldn't c"
           "reate the input channel layout prefs key";
    goto LABEL_320;
  }

  CFStringRef v25 = CFStringCreateWithFormat( 0LL,  0LL,  @"com.apple.audio.CoreAudio.PreferredChannelLayout.%s.%@",  "Output",  *(void *)v247);
  *((void *)v12 + 6) = v25;
  if (!v25)
  {
    int v220 = (os_log_t *)sub_138E8(13);
    uint64_t v216 = *v220;
    if (*v220 && os_log_type_enabled(*v220, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 172;
      id v217 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [mOutputChannelLayoutPrefsKey is NULL]: couldn'"
             "t create the output channel layout prefs key";
      goto LABEL_320;
    }

LABEL_325:
    uint64_t v224 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v224, "Precondition failure.");
    goto LABEL_338;
  }

  id v53 = (os_log_t *)sub_138E8(1);
  unsigned int v54 = *v53;
  if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, void *))(*v10 + 96LL))(__p, v10);
    CFMutableDictionaryRef v55 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 497;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v55;
    _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Constructed VirtualAudio_Device: %s.", buf, 0x1Cu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  *(void *)(v10[58] + 4sub_14BBA4((uint64_t)v16, @"MaggieDebugLevel", 0LL) = 0LL;
  int v56 = (char *)operator new(0x30uLL);
  *(void *)int v56 = &off_46E378;
  *((void *)v56 + 1) = v10;
  *((void *)v56 + 2) = 0LL;
  unint64_t v57 = (void **)(v56 + 16);
  *((void *)v56 + 3) = 0LL;
  *((void *)v56 + 4) = 0LL;
  *((_DWORD *)v56 + 10) = 38;
  uint64_t v58 = sub_7A890(1uLL);
  uint64_t v59 = (char *)*((void *)v56 + 2);
  uint32_t v60 = (char *)*((void *)v56 + 3);
  uint64_t v62 = (char *)&v58[v61];
  _DWORD *v58 = 1684633187;
  id v63 = (char *)(v58 + 1);
  uint64_t v64 = v58;
  while (v60 != v59)
  {
    int v65 = *((_DWORD *)v60 - 1);
    v60 -= 4;
    *--uint64_t v64 = v65;
  }

  *((void *)v56 + 2) = v64;
  *((void *)v56 + 3) = v63;
  *((void *)v56 + 4) = v62;
  if (v59)
  {
    operator delete(v59);
    uint64_t v62 = (char *)*((void *)v56 + 4);
  }

  *((void *)v56 + 3) = v63;
  if (v63 >= v62)
  {
    uint64_t v67 = (char *)*v57;
    uint64_t v68 = (v63 - (_BYTE *)*v57) >> 2;
    unint64_t v69 = v68 + 1;
    uint64_t v70 = v62 - v67;
    if (v70 >> 1 > v69) {
      unint64_t v69 = v70 >> 1;
    }
    BOOL v71 = (unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v72 = v69;
    }
    if (v72)
    {
      unint64_t v72 = (unint64_t)sub_7A890(v72);
      uint64_t v67 = (char *)*((void *)v56 + 2);
      id v63 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v73 = 0LL;
    }

    id v74 = (_DWORD *)(v72 + 4 * v68);
    uint64_t v62 = (char *)(v72 + 4 * v73);
    _DWORD *v74 = 1986229104;
    int v66 = (char *)(v74 + 1);
    while (v63 != v67)
    {
      int v75 = *((_DWORD *)v63 - 1);
      v63 -= 4;
      *--id v74 = v75;
    }

    *((void *)v56 + 2) = v74;
    *((void *)v56 + 3) = v66;
    *((void *)v56 + 4) = v62;
    if (v67)
    {
      operator delete(v67);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    v58[1] = 1986229104;
    int v66 = (char *)(v58 + 2);
  }

  *((void *)v56 + 3) = v66;
  if (v66 >= v62)
  {
    id v77 = (char *)*v57;
    uint64_t v78 = (v66 - (_BYTE *)*v57) >> 2;
    unint64_t v79 = v78 + 1;
    uint64_t v80 = v62 - v77;
    if (v80 >> 1 > v79) {
      unint64_t v79 = v80 >> 1;
    }
    BOOL v71 = (unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v81 = v79;
    }
    if (v81)
    {
      unint64_t v81 = (unint64_t)sub_7A890(v81);
      id v77 = (char *)*((void *)v56 + 2);
      int v66 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v82 = 0LL;
    }

    uint64_t v83 = (_DWORD *)(v81 + 4 * v78);
    uint64_t v62 = (char *)(v81 + 4 * v82);
    _DWORD *v83 = 1836478308;
    uint64_t v76 = (char *)(v83 + 1);
    while (v66 != v77)
    {
      int v84 = *((_DWORD *)v66 - 1);
      v66 -= 4;
      *--uint64_t v83 = v84;
    }

    *((void *)v56 + 2) = v83;
    *((void *)v56 + 3) = v76;
    *((void *)v56 + 4) = v62;
    if (v77)
    {
      operator delete(v77);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)int v66 = 1836478308;
    uint64_t v76 = v66 + 4;
  }

  *((void *)v56 + 3) = v76;
  if (v76 >= v62)
  {
    std::string::size_type v86 = (char *)*v57;
    uint64_t v87 = (v76 - (_BYTE *)*v57) >> 2;
    unint64_t v88 = v87 + 1;
    uint64_t v89 = v62 - v86;
    if (v89 >> 1 > v88) {
      unint64_t v88 = v89 >> 1;
    }
    BOOL v71 = (unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      unint64_t v90 = (unint64_t)sub_7A890(v90);
      std::string::size_type v86 = (char *)*((void *)v56 + 2);
      uint64_t v76 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v91 = 0LL;
    }

    std::string::size_type v92 = (_DWORD *)(v90 + 4 * v87);
    uint64_t v62 = (char *)(v90 + 4 * v91);
    *std::string::size_type v92 = 1064725619;
    uint64_t v85 = (char *)(v92 + 1);
    while (v76 != v86)
    {
      int v93 = *((_DWORD *)v76 - 1);
      v76 -= 4;
      *--std::string::size_type v92 = v93;
    }

    *((void *)v56 + 2) = v92;
    *((void *)v56 + 3) = v85;
    *((void *)v56 + 4) = v62;
    if (v86)
    {
      operator delete(v86);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v76 = 1064725619;
    uint64_t v85 = v76 + 4;
  }

  *((void *)v56 + 3) = v85;
  if (v85 >= v62)
  {
    uint64_t v95 = (char *)*v57;
    uint64_t v96 = (v85 - (_BYTE *)*v57) >> 2;
    unint64_t v97 = v96 + 1;
    uint64_t v98 = v62 - v95;
    if (v98 >> 1 > v97) {
      unint64_t v97 = v98 >> 1;
    }
    BOOL v71 = (unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v99 = v97;
    }
    if (v99)
    {
      unint64_t v99 = (unint64_t)sub_7A890(v99);
      uint64_t v95 = (char *)*((void *)v56 + 2);
      uint64_t v85 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v100 = 0LL;
    }

    std::string::size_type v101 = (_DWORD *)(v99 + 4 * v96);
    uint64_t v62 = (char *)(v99 + 4 * v100);
    *std::string::size_type v101 = 1986098020;
    uint64_t v94 = (char *)(v101 + 1);
    while (v85 != v95)
    {
      int v102 = *((_DWORD *)v85 - 1);
      v85 -= 4;
      *--std::string::size_type v101 = v102;
    }

    *((void *)v56 + 2) = v101;
    *((void *)v56 + 3) = v94;
    *((void *)v56 + 4) = v62;
    if (v95)
    {
      operator delete(v95);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v85 = 1986098020;
    uint64_t v94 = v85 + 4;
  }

  *((void *)v56 + 3) = v94;
  if (v94 >= v62)
  {
    BOOL v104 = (char *)*v57;
    uint64_t v105 = (v94 - (_BYTE *)*v57) >> 2;
    unint64_t v106 = v105 + 1;
    uint64_t v107 = v62 - v104;
    if (v107 >> 1 > v106) {
      unint64_t v106 = v107 >> 1;
    }
    BOOL v71 = (unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v108 = v106;
    }
    if (v108)
    {
      unint64_t v108 = (unint64_t)sub_7A890(v108);
      BOOL v104 = (char *)*((void *)v56 + 2);
      uint64_t v94 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v109 = 0LL;
    }

    id v110 = (_DWORD *)(v108 + 4 * v105);
    uint64_t v62 = (char *)(v108 + 4 * v109);
    *id v110 = 1986817377;
    unsigned int v103 = (char *)(v110 + 1);
    while (v94 != v104)
    {
      int v111 = *((_DWORD *)v94 - 1);
      v94 -= 4;
      *--id v110 = v111;
    }

    *((void *)v56 + 2) = v110;
    *((void *)v56 + 3) = v103;
    *((void *)v56 + 4) = v62;
    if (v104)
    {
      operator delete(v104);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v94 = 1986817377;
    unsigned int v103 = v94 + 4;
  }

  *((void *)v56 + 3) = v103;
  if (v103 >= v62)
  {
    unint64_t v113 = (char *)*v57;
    uint64_t v114 = (v103 - (_BYTE *)*v57) >> 2;
    unint64_t v115 = v114 + 1;
    uint64_t v116 = v62 - v113;
    if (v116 >> 1 > v115) {
      unint64_t v115 = v116 >> 1;
    }
    BOOL v71 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v117 = v115;
    }
    if (v117)
    {
      unint64_t v117 = (unint64_t)sub_7A890(v117);
      unint64_t v113 = (char *)*((void *)v56 + 2);
      unsigned int v103 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v118 = 0LL;
    }

    uint64_t v119 = (_DWORD *)(v117 + 4 * v114);
    uint64_t v62 = (char *)(v117 + 4 * v118);
    _DWORD *v119 = 1936878960;
    uint64_t v112 = (char *)(v119 + 1);
    while (v103 != v113)
    {
      int v120 = *((_DWORD *)v103 - 1);
      v103 -= 4;
      *--uint64_t v119 = v120;
    }

    *((void *)v56 + 2) = v119;
    *((void *)v56 + 3) = v112;
    *((void *)v56 + 4) = v62;
    if (v113)
    {
      operator delete(v113);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)unsigned int v103 = 1936878960;
    uint64_t v112 = v103 + 4;
  }

  *((void *)v56 + 3) = v112;
  if (v112 >= v62)
  {
    id v122 = (char *)*v57;
    uint64_t v123 = (v112 - (_BYTE *)*v57) >> 2;
    unint64_t v124 = v123 + 1;
    uint64_t v125 = v62 - v122;
    if (v125 >> 1 > v124) {
      unint64_t v124 = v125 >> 1;
    }
    BOOL v71 = (unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v126 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v126 = v124;
    }
    if (v126)
    {
      unint64_t v126 = (unint64_t)sub_7A890(v126);
      id v122 = (char *)*((void *)v56 + 2);
      uint64_t v112 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v127 = 0LL;
    }

    uint64_t v128 = (_DWORD *)(v126 + 4 * v123);
    uint64_t v62 = (char *)(v126 + 4 * v127);
    _DWORD *v128 = 1919774835;
    int v121 = (char *)(v128 + 1);
    while (v112 != v122)
    {
      int v129 = *((_DWORD *)v112 - 1);
      v112 -= 4;
      *--uint64_t v128 = v129;
    }

    *((void *)v56 + 2) = v128;
    *((void *)v56 + 3) = v121;
    *((void *)v56 + 4) = v62;
    if (v122)
    {
      operator delete(v122);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v112 = 1919774835;
    int v121 = v112 + 4;
  }

  *((void *)v56 + 3) = v121;
  if (v121 >= v62)
  {
    uint64_t v131 = (char *)*v57;
    uint64_t v132 = (v121 - (_BYTE *)*v57) >> 2;
    unint64_t v133 = v132 + 1;
    uint64_t v134 = v62 - v131;
    if (v134 >> 1 > v133) {
      unint64_t v133 = v134 >> 1;
    }
    BOOL v71 = (unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v135 = v133;
    }
    if (v135)
    {
      unint64_t v135 = (unint64_t)sub_7A890(v135);
      uint64_t v131 = (char *)*((void *)v56 + 2);
      int v121 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v136 = 0LL;
    }

    uint64_t v137 = (_DWORD *)(v135 + 4 * v132);
    uint64_t v62 = (char *)(v135 + 4 * v136);
    *uint64_t v137 = 1918987632;
    unint64_t v130 = (char *)(v137 + 1);
    while (v121 != v131)
    {
      int v138 = *((_DWORD *)v121 - 1);
      v121 -= 4;
      *--uint64_t v137 = v138;
    }

    *((void *)v56 + 2) = v137;
    *((void *)v56 + 3) = v130;
    *((void *)v56 + 4) = v62;
    if (v131)
    {
      operator delete(v131);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)int v121 = 1918987632;
    unint64_t v130 = v121 + 4;
  }

  *((void *)v56 + 3) = v130;
  if (v130 >= v62)
  {
    uint64_t v140 = (char *)*v57;
    uint64_t v141 = (v130 - (_BYTE *)*v57) >> 2;
    unint64_t v142 = v141 + 1;
    uint64_t v143 = v62 - v140;
    if (v143 >> 1 > v142) {
      unint64_t v142 = v143 >> 1;
    }
    BOOL v71 = (unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v144 = v142;
    }
    if (v144)
    {
      unint64_t v144 = (unint64_t)sub_7A890(v144);
      uint64_t v140 = (char *)*((void *)v56 + 2);
      unint64_t v130 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v145 = 0LL;
    }

    __int128 v146 = (_DWORD *)(v144 + 4 * v141);
    uint64_t v62 = (char *)(v144 + 4 * v145);
    *__int128 v146 = 1668443504;
    uint64_t v139 = (char *)(v146 + 1);
    while (v130 != v140)
    {
      int v147 = *((_DWORD *)v130 - 1);
      v130 -= 4;
      *--__int128 v146 = v147;
    }

    *((void *)v56 + 2) = v146;
    *((void *)v56 + 3) = v139;
    *((void *)v56 + 4) = v62;
    if (v140)
    {
      operator delete(v140);
      uint64_t v62 = (char *)*((void *)v56 + 4);
    }
  }

  else
  {
    *(_DWORD *)unint64_t v130 = 1668443504;
    uint64_t v139 = v130 + 4;
  }

  *((void *)v56 + 3) = v139;
  if (v139 >= v62)
  {
    uint64_t v149 = (char *)*v57;
    uint64_t v150 = (v139 - (_BYTE *)*v57) >> 2;
    unint64_t v151 = v150 + 1;
    uint64_t v152 = v62 - v149;
    if (v152 >> 1 > v151) {
      unint64_t v151 = v152 >> 1;
    }
    BOOL v71 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v71) {
      unint64_t v153 = v151;
    }
    if (v153)
    {
      unint64_t v153 = (unint64_t)sub_7A890(v153);
      uint64_t v149 = (char *)*((void *)v56 + 2);
      uint64_t v139 = (char *)*((void *)v56 + 3);
    }

    else
    {
      uint64_t v154 = 0LL;
    }

    unint64_t v155 = (_DWORD *)(v153 + 4 * v150);
    unint64_t v156 = v153 + 4 * v154;
    _DWORD *v155 = 1668705648;
    std::string v148 = v155 + 1;
    while (v139 != v149)
    {
      int v157 = *((_DWORD *)v139 - 1);
      v139 -= 4;
      *--unint64_t v155 = v157;
    }

    *((void *)v56 + 2) = v155;
    *((void *)v56 + 3) = v148;
    *((void *)v56 + 4) = v156;
    if (v149) {
      operator delete(v149);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v139 = 1668705648;
    std::string v148 = v139 + 4;
  }

  *((void *)v56 + 3) = v148;
  v10[115] = v56;
  sub_2F505C(v10, (uint64_t)v56);
  uint64_t v158 = sub_BB1C4((uint64_t)v10, 1986817381LL, 1869968496, 0);
  if (v158) {
    v10[116] = v158;
  }
  char v159 = sub_BB1C4((uint64_t)v10, 1836414053LL, 1869968496, 0);
  if (v159) {
    v10[120] = v159;
  }
  char v160 = sub_BB1C4((uint64_t)v10, 1986817381LL, 1768845428, 0);
  if (v160) {
    v10[121] = v160;
  }
  uint64_t v161 = sub_BB1C4((uint64_t)v10, 1836414053LL, 1768845428, 0);
  if (v161) {
    v10[122] = v161;
  }
  if ((byte_48E83C & 1) == 0)
  {
    if (sub_14B98C(@"LogAudioOverloads", @"com.apple.audio.virtualaudio", __p))
    {
      id v162 = (os_log_t *)sub_138E8(13);
      unint64_t v163 = *v162;
      if (*v162)
      {
        BOOL v164 = os_log_type_enabled(*v162, OS_LOG_TYPE_DEFAULT);
        int v165 = (int)__p[0];
        if (v164)
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1456;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = "LogAudioOverloads";
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = __p[0];
          _os_log_impl(&dword_0, v163, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }

      else
      {
        int v165 = (int)__p[0];
      }

      byte_48E83B = v165 != 0;
    }

    byte_48E83C = 1;
  }

  if (byte_48E83B)
  {
    unint64_t v166 = (char *)operator new(0x28uLL);
    AudioObjectID v167 = *((_DWORD *)v10 + 2);
    (*(void (**)(std::string *__return_ptr, void *))(*v10 + 96LL))(&v244, v10);
    __int128 v168 = std::string::insert(&v244, 0LL, "Audio overload on Virtual Audio Device: ", 0x28uLL);
    uint64_t v170 = (void *)v168->__r_.__value_.__r.__words[0];
    unint64_t size = v168->__r_.__value_.__l.__size_;
    v240[0] = v168->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v240 + 3) = *(_DWORD *)((char *)&v168->__r_.__value_.__r.__words[2] + 3);
    int v171 = (char)v168->__r_.__value_.__s.__size_;
    v168->__r_.__value_.__l.__size_ = 0LL;
    v168->__r_.__value_.__l.__cap_ = 0LL;
    v168->__r_.__value_.__r.__words[0] = 0LL;
    *(_DWORD *)unint64_t v166 = v167;
    *(void *)(v166 + 4) = 0x676C6F626F766572LL;
    *((_DWORD *)v166 + 3) = 0;
    if (v171 < 0)
    {
      sub_24054(v166 + 16, v170, size);
      AudioObjectID v167 = *(_DWORD *)v166;
    }

    else
    {
      *((void *)v166 + 2) = v170;
      *((void *)v166 + 3) = size;
      *((_DWORD *)v166 + 8) = v240[0];
      *(_DWORD *)(v166 + 35) = *(_DWORD *)((char *)v240 + 3);
      v166[39] = v171;
    }

    uint64_t v172 = AudioObjectAddPropertyListener( v167,  (const AudioObjectPropertyAddress *)(v166 + 4),  (AudioObjectPropertyListenerProc)sub_BA498,  v166);
    if ((_DWORD)v172)
    {
      unint64_t v173 = (os_log_t *)sub_138E8(13);
      unint64_t v174 = *v173;
      if (*v173)
      {
        if (os_log_type_enabled(*v173, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v172);
          int v175 = SHIBYTE(__p[2]);
          std::string::size_type v176 = (void **)__p[0];
          uint64_t v242 = *(void *)(v166 + 4);
          int v243 = *((_DWORD *)v166 + 3);
          sub_613AC((uint64_t)v247, (unsigned int *)&v242);
          __int128 v177 = __p;
          if (v175 < 0) {
            __int128 v177 = v176;
          }
          if (v251 >= 0) {
            uint64_t v178 = v247;
          }
          else {
            uint64_t v178 = *(_BYTE **)v247;
          }
          int v179 = *(_DWORD *)v166;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 364;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v177;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = v172;
          *(_WORD *)&buf[34] = 2080;
          *(void *)&buf[36] = v178;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v179;
          _os_log_impl( &dword_0,  v174,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %s (%d) registering listener for property %s on object %u",  buf,  0x32u);
          if (SHIBYTE(v251) < 0) {
            operator delete(*(void **)v247);
          }
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    sub_B9718(v10 + 133, (uint64_t)v166);
    if (v171 < 0) {
      operator delete(v170);
    }
  }

  sub_BA7E4((uint64_t)v10);
  sub_BA95C((uint64_t)v10);
  sub_7D084(&v244, "VAD Audio IO workgroup interval");
  memset(&buf[4], 0, 60);
  *(_DWORD *)AudioObjectPropertyAddress buf = 799564724;
  int v180 = os_workgroup_attr_set_telemetry_flavor(buf, 1LL);
  if (v180)
  {
    id v181 = *(id *)sub_138E8(13);
    std::string::size_type v182 = v181;
    if (v181)
    {
      std::string::size_type v183 = (os_log_s *)v181;
      if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
      {
        id v184 = __error();
        unint64_t v185 = strerror(*v184);
        *(_DWORD *)char v247 = 136315906;
        *(void *)&v247[4] = "OS_WorkgroupInterval.mm";
        __int16 v248 = 1024;
        int v249 = 46;
        __int16 v250 = 1024;
        int v251 = v180;
        __int16 v252 = 2080;
        char v253 = v185;
        _os_log_impl( &dword_0,  v183,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PV_CreateOSWorkgroupInterval: Failed to set telemetry flavor with code: %d - %s",  v247,  0x22u);
      }
    }

    uint64_t v246 = 0LL;
    memset(&__p[1], 0, 48);
  }

  else
  {
    sub_7D084(v247, "com.apple.coreaudio.hal.iothread");
    caulk::mach::os_workgroup_interval_managed::make_with_workload_id(__p, &v244, v247, buf, 4LL);
    if (SHIBYTE(v251) < 0) {
      operator delete(*(void **)v247);
    }
  }

  uint64_t v186 = operator new(0x40uLL);
  v186[1] = 0u;
  v186[2] = 0u;
  *(_OWORD *)((char *)v186 + 41) = 0u;
  uint64_t v187 = __p[1];
  *((void *)v186 + 1) = v187;
  __p[1] = 0LL;
  caulk::mach::details::release_os_object(0LL, v188);
  unint64_t v189 = (void *)*((void *)v186 + 6);
  __int128 v190 = v186[1];
  __int128 v191 = v186[2];
  __int128 v192 = *(_OWORD *)&__p[4];
  v186[1] = *(_OWORD *)&__p[2];
  v186[2] = v192;
  *((void **)v186 + 6) = __p[6];
  *(_OWORD *)&std::string __p[2] = v190;
  *(_OWORD *)&__p[4] = v191;
  __p[6] = v189;
  *((_BYTE *)v186 + 56) = v246;
  LOBYTE(v246) = 0;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)__p);
  uint64_t v193 = v10[135];
  v10[135] = v186;
  if (v193) {
    (*(void (**)(uint64_t))(*(void *)v193 + 8LL))(v193);
  }
  if (!*(void *)(v10[135] + 8LL))
  {
    char v227 = (os_log_t *)sub_138E8(13);
    uint64_t v228 = *v227;
    if (*v227 && os_log_type_enabled(*v227, OS_LOG_TYPE_ERROR))
    {
      sub_33464((std::string *)__p, (unsigned int *)v10 + 144);
      char v229 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4805;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v229;
      _os_log_impl( &dword_0,  v228,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Error during creating workgroup interval for VAD %s",  buf,  0x1Cu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v224 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v224, "Error during creating workgroup interval for VAD %s");
LABEL_338:
  }

  BOOL v194 = (os_log_t *)sub_138E8(1);
  uint64_t v195 = *v194;
  if (*v194 && os_log_type_enabled(*v194, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v196 = *(void *)(v10[135] + 8LL);
    sub_33464((std::string *)__p, (unsigned int *)v10 + 144);
    __int128 v197 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4801;
    *(_WORD *)&_BYTE buf[18] = 2048;
    *(void *)&buf[20] = v196;
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&buf[30] = v197;
    _os_log_impl(&dword_0, v195, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created workgroup interval handle %p for %s", buf, 0x26u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v198 = (os_log_t *)sub_138E8(1);
  BOOL v199 = *v198;
  if (*v198 && os_log_type_enabled(*v198, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, void *))(*v10 + 96LL))(__p, v10);
    uint64_t v200 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 520;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v200;
    _os_log_impl(&dword_0, v199, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initialized VirtualAudio_Device: %s.", buf, 0x1Cu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  *a1 = v10;
  id v201 = *(id *)sub_138E8(2);
  id v202 = v201;
  if (v201)
  {
    std::string v203 = (os_log_s *)v201;
    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
    {
      sub_33464((std::string *)__p, v238);
      v204 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1911;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v204;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)&buf[30] = v239;
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v10;
      _os_log_impl( &dword_0,  v203,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created VirtualAudio_Device [%s] with ID %u at address 0x%p.",  buf,  0x2Cu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  sub_E326C(a6, 1, v239);
  if (v232) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
}

void sub_261A64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, CFTypeRef *a16, void **a17, uint64_t a18, uint64_t *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (v43[39] < 0) {
    operator delete(*v46);
  }
  if (v47 < 0) {
    operator delete(v45);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  operator delete(v43);
  uint64_t v49 = *(void *)(v44 + 1080);
  *(void *)(v44 + 1080) = 0LL;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
  }
  sub_B9718(a19, 0LL);
  sub_32C8C(*(void **)(v44 + 1048));
  sub_32C8C(*(void **)(v44 + 1024));
  uint64_t v50 = *(void **)(v44 + 984);
  if (v50)
  {
    *(void *)(v44 + 992) = v50;
    operator delete(v50);
  }

  uint64_t v51 = *(void **)(v44 + 936);
  if (v51)
  {
    *(void *)(v44 + 944) = v51;
    operator delete(v51);
  }

  *(void *)(v44 + 8memset(buf, 0, 24) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v44 + 848));
  *(void *)(v44 + 736) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v44 + 760));
  *(void *)(v44 + 648) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v44 + 672));
  sub_32C8C(*a17);
  if (*a16) {
    CFRelease(*a16);
  }
  sub_2C2244(v44);
  operator delete((void *)v44);
  if (a13) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_261ED4(uint64_t a1, uint64_t a2)
{
  int v53 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  sub_75418(buf, a1);
  __int128 v4 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  sub_52EF0((uint64_t)buf);
  *(_OWORD *)uint64_t v64 = v4;
  if (!sub_264FD8(v64))
  {
    if (!*(void *)(a1 + 112)) {
      goto LABEL_65;
    }
    uint64_t v8 = *(void *)(a1 + 144);
    uint64_t v7 = *(void *)(a1 + 152);
    if (v8 == v7) {
      goto LABEL_65;
    }
    uint64_t v54 = *(void *)(a1 + 152);
    while (1)
    {
      v63[0] = 0LL;
      v63[1] = 0LL;
      uint64_t v62 = v63;
      int v9 = sub_135A44(*(void **)(a1 + 112), *(_DWORD *)(*(void *)(*(void *)v8 + 1008LL) + 276LL), (uint64_t *)&v62);
      if (v9) {
        break;
      }
      BOOL v10 = v63[0];
      if (!v63[0]) {
        goto LABEL_26;
      }
      uint64_t v11 = v63;
      do
      {
        uint64_t v12 = v10;
        uint64_t v13 = v11;
        int v14 = *((_DWORD *)v10 + 7);
        if (v14 >= 1667854445) {
          uint64_t v11 = (void **)v10;
        }
        else {
          ++v10;
        }
        BOOL v10 = (void *)*v10;
      }

      while (v10);
      if (v11 == v63 || (v14 >= 1667854445 ? (int v15 = (int *)v12) : (int v15 = (int *)v13), v15[7] >= 1667854446))
      {
LABEL_26:
        uint64_t v16 = 0LL;
      }

      else
      {
        if (v14 < 1667854445) {
          uint64_t v12 = v13;
        }
        if (*((_BYTE *)v12 + 32)) {
          uint64_t v16 = a2;
        }
        else {
          uint64_t v16 = 0LL;
        }
      }

      uint64_t v17 = **(void **)(a1 + 112);
      uint64_t v20 = *(void *)(v17 + 160);
      uint64_t v18 = v17 + 160;
      uint64_t v19 = v20;
      if (!v20) {
        goto LABEL_40;
      }
      unsigned int v21 = *(_DWORD *)(*(void *)v8 + 576LL);
      uint64_t v22 = v18;
      do
      {
        unsigned int v23 = *(_DWORD *)(v19 + 32);
        BOOL v24 = v23 >= v21;
        if (v23 >= v21) {
          CFStringRef v25 = (uint64_t *)v19;
        }
        else {
          CFStringRef v25 = (uint64_t *)(v19 + 8);
        }
        if (v24) {
          uint64_t v22 = v19;
        }
        uint64_t v19 = *v25;
      }

      while (*v25);
      if (v22 == v18)
      {
LABEL_40:
        double v28 = &dword_4019A0;
      }

      else
      {
        unsigned int v26 = *(_DWORD *)(v22 + 32);
        uint64_t v27 = (int *)(v22 + 40);
        if (v26 <= v21) {
          double v28 = v27;
        }
        else {
          double v28 = &dword_4019A0;
        }
      }

      int v60 = *v28;
      memset(v61, 0, 24);
      sub_2650A4( v61,  *((const void **)v28 + 1),  *((void *)v28 + 2),  (uint64_t)(*((void *)v28 + 2) - *((void *)v28 + 1)) >> 3);
      if (v60)
      {
        if (v60 == 2) {
          uint64_t v16 = v16;
        }
        else {
          uint64_t v16 = 0LL;
        }
      }

      id v29 = *(id *)sub_138E8(2);
      uint64_t v30 = v29;
      if (v29)
      {
        uint64_t v31 = (os_log_s *)v29;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v58 = *(void *)(*(void *)v8 + 576LL);
          sub_33464(&v59, (unsigned int *)&v58);
          if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v32 = &v59;
          }
          else {
            uint64_t v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          uint64_t v33 = a1;
          sub_75418(buf, a1);
          __int128 v34 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
          sub_52EF0((uint64_t)buf);
          __int128 v56 = v34;
          sub_2DB6FC(&__p, (unsigned int *)&v56);
          int size = (char)__p.__r_.__value_.__s.__size_;
          std::string::size_type v36 = __p.__r_.__value_.__r.__words[0];
          v55[0] = *(void *)(*(void *)(*(void *)v8 + 1008LL) + 276LL);
          v55[1] = 0LL;
          sub_2DB6FC(buf, (unsigned int *)v55);
          p_p = &__p;
          if (size < 0) {
            p_p = (std::string *)v36;
          }
          uint64_t v38 = buf;
          if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v38 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v64 = 136316418;
          *(void *)&v64[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v64[12] = 1024;
          *(_DWORD *)&v64[14] = 2413;
          __int16 v65 = 1024;
          int v66 = v16;
          __int16 v67 = 2080;
          uint64_t v68 = v32;
          __int16 v69 = 2080;
          uint64_t v70 = p_p;
          __int16 v71 = 2080;
          unint64_t v72 = v38;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applying PolicyMute %d to VAD %s, category mode: current: %s, vad: %s",  v64,  0x36u);
          a1 = v33;
          uint64_t v7 = v54;
        }
      }

      (*(void (**)(void, uint64_t))(**(void **)(*(void *)v8 + 1008LL) + 216LL))( *(void *)(*(void *)v8 + 1008LL),  v16);
      if (v61[0]) {
        operator delete(v61[0]);
      }
      sub_32C8C(v63[0]);
      v8 += 8LL;
      if (v8 == v7)
      {
        a2 = a2;
        goto LABEL_65;
      }
    }

    if (v9 == 2)
    {
      uint64_t v45 = sub_138E8(13);
      int v44 = 1852793716;
      id v46 = sub_8C7D4(1, *(void **)v45, *(void *)(v45 + 8));
      int v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      uint64_t v43 = v47;
      if (!v47 || !os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        goto LABEL_80;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2397;
      int v48 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (Routing category info lookup failed.)";
    }

    else
    {
      if (v9 == 1)
      {
        uint64_t v40 = sub_138E8(13);
        id v41 = sub_8C7D4(1, *(void **)v40, *(void *)(v40 + 8));
        uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        uint64_t v43 = v42;
        int v44 = 1852797556;
        if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2397;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (Routing category info lookup failed.)",  (uint8_t *)buf,  0x12u);
          int v44 = 1852797556;
        }

void sub_262544( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_262608(uint64_t result)
{
  int v8 = **(unsigned __int8 **)(result + 216);
  uint64_t v6 = 0x676C6F626476706ELL;
  int v7 = 0;
  uint64_t v1 = *(uint64_t **)(result + 144);
  for (uint64_t i = *(uint64_t **)(result + 152); v1 != i; ++v1)
  {
    uint64_t v3 = *v1;
    if (*v1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 40LL))(*v1, &v6);
      if ((_DWORD)result)
      {
        strcpy(v9, "npvdbolg");
        v9[9] = 0;
        __int16 v10 = 0;
        uint64_t result = sub_2F4F68(v3, (uint64_t)v9, 0LL, 0LL, 4LL, (uint64_t)&v8);
        if ((_DWORD)result)
        {
          int v4 = result;
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_4865A0;
          exception[2] = v4;
        }
      }
    }
  }

  return result;
}

void sub_2626F4(uint64_t a1, uint64_t **a2, unsigned int *a3, unsigned int *a4)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3 != a4)
  {
    unint64_t v5 = a3;
    char v8 = 0;
    while (1)
    {
      int v9 = (uint64_t *)(v5 + 1);
      if ((v8 & 1) != 0 && v5[1] != 1651861092) {
        goto LABEL_5;
      }
      uint64_t v10 = sub_138E8(2);
      if ((*(_BYTE *)(v10 + 8) & 1) != 0)
      {
        id v11 = *(id *)v10;
        if (v11)
        {
          uint64_t v12 = (os_log_s *)v11;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(v35, *v5);
            int v13 = SHIBYTE(v36);
            int v14 = (void **)v35[0];
            uint64_t v37 = *v9;
            unsigned int v38 = v5[3];
            sub_613AC((uint64_t)__p, (unsigned int *)&v37);
            int v15 = v35;
            if (v13 < 0) {
              int v15 = v14;
            }
            uint64_t v16 = __p;
            if (v40 < 0) {
              uint64_t v16 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v42 = "VirtualAudio_PlugIn.mm";
            __int16 v43 = 1024;
            int v44 = 4972;
            __int16 v45 = 2080;
            id v46 = v15;
            __int16 v47 = 2080;
            int v48 = v16;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Processing device hint for device type %s and property %s.",  buf,  0x26u);
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v36) < 0) {
              operator delete(v35[0]);
            }
          }
        }
      }

      uint64_t v17 = sub_72A04(*v5, 0, *a2, a2[1]);
      if (!v17) {
        break;
      }
      uint64_t v18 = v17;
      if (*(_DWORD *)v9 == 1853059700)
      {
        if (v5[8] != 8)
        {
          uint64_t v30 = sub_138E8(13);
          id v31 = sub_8C7D4(1, *(void **)v30, *(void *)(v30 + 8));
          uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          uint64_t v33 = v32;
          if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v42 = "VirtualAudio_PlugIn.mm";
            __int16 v43 = 1024;
            int v44 = 4990;
            _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }

        sub_772C4((BOOL *)v35, v17, **((double **)v5 + 5));
        int v19 = LOBYTE(v35[0]);
        sub_32C8C(v36);
        if (v19)
        {
          v35[0] = *(void **)(v18 + 576);
          sub_1163D8((uint64_t **)a1, v35[0], HIDWORD(v35[0]), (uint64_t *)v35);
        }
      }

      uint64_t v20 = AudioObjectSetPropertyData( *(_DWORD *)(v18 + 8),  (const AudioObjectPropertyAddress *)(v5 + 1),  v5[4],  *((const void **)v5 + 3),  v5[8],  *((const void **)v5 + 5));
      if (!(_DWORD)v20) {
        goto LABEL_6;
      }
      uint64_t v21 = sub_138E8(2);
      if ((*(_BYTE *)(v21 + 8) & 1) != 0)
      {
        id v22 = *(id *)v21;
        if (v22)
        {
          unsigned int v23 = (os_log_s *)v22;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v37 = *v9;
            unsigned int v38 = v5[3];
            sub_613AC((uint64_t)v35, (unsigned int *)&v37);
            int v24 = SHIBYTE(v36);
            CFStringRef v25 = (void **)v35[0];
            sub_2CA1C(__p, v20);
            unsigned int v26 = v35;
            if (v24 < 0) {
              unsigned int v26 = v25;
            }
            uint64_t v27 = __p;
            if (v40 < 0) {
              uint64_t v27 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v42 = "VirtualAudio_PlugIn.mm";
            __int16 v43 = 1024;
            int v44 = 5004;
            __int16 v45 = 2080;
            id v46 = v26;
            __int16 v47 = 2080;
            int v48 = v27;
            _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Failed to apply device hint for property %s with status %s.",  buf,  0x26u);
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v36) < 0) {
              operator delete(v35[0]);
            }
          }

LABEL_42:
        }
      }

void sub_262E70(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_7A0E8(a1);
  }

  _Unwind_Resume(a1);
}

void sub_262EC0(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    int v7 = *(uint64_t **)(a2 + 8);
    unint64_t v5 = (uint64_t *)(a2 + 8);
    uint64_t v6 = v7;
    if (!v7) {
      goto LABEL_22;
    }
    char v8 = v5;
    int v9 = v6;
    do
    {
      unsigned int v10 = *((_DWORD *)v9 + 8);
      BOOL v11 = v10 >= a3;
      if (v10 >= a3) {
        uint64_t v12 = (uint64_t **)v9;
      }
      else {
        uint64_t v12 = (uint64_t **)(v9 + 1);
      }
      if (v11) {
        char v8 = v9;
      }
      int v9 = *v12;
    }

    while (*v12);
    if (v8 == v5 || *((_DWORD *)v8 + 8) > a3) {
      goto LABEL_22;
    }
    while (1)
    {
      while (1)
      {
        unsigned int v13 = *((_DWORD *)v6 + 8);
        if (v13 <= a3) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        if (!v6) {
          goto LABEL_18;
        }
      }

      if (v13 >= a3) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6) {
LABEL_18:
      }
        sub_8F9A4("map::at:  key not found");
    }

    if (v6 + 5 == a1 || (sub_7E6D4((char *)a1, (char *)v6[5], v6[6], (v6[6] - v6[5]) >> 2), *a1 == a1[1]))
    {
LABEL_22:
      int v15 = (os_log_s *)*(id *)sub_138E8(2);
      uint64_t v16 = v15;
      if (v15)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315650;
          uint64_t v18 = "VirtualAudio_PlugIn.mm";
          __int16 v19 = 1024;
          int v20 = 536;
          __int16 v21 = 1024;
          unsigned int v22 = a3;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d No sessions IDs found for context ID %u",  (uint8_t *)&v17,  0x18u);
        }
      }
    }
  }

  else
  {
    int v14 = operator new(4uLL);
    *int v14 = 0;
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)(v14 + 1);
    a1[2] = (uint64_t)(v14 + 1);
  }

void sub_26305C(_Unwind_Exception *exception_object)
{
}

void sub_263084(uint64_t a1, uint64_t a2)
{
  int v3 = v79;
  sub_2CA1C(v76, v80);
  double v4 = v82;
  if (!v83) {
    double v4 = 0.0;
  }
  std::to_string(&v75, v4);
  if (v3) {
    unint64_t v5 = "Failed";
  }
  else {
    unint64_t v5 = "Succeeded";
  }
  if (v3) {
    CFIndex v6 = 6LL;
  }
  else {
    CFIndex v6 = 9LL;
  }
  CFTypeRef cf = CFStringCreateWithBytes(0LL, (const UInt8 *)v5, v6, 0x8000100u, 0);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_7D084(v69, "Result");
  CFRetain(cf);
  *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = *(_OWORD *)v69;
  std::string::size_type v7 = v70;
  v69[0] = 0LL;
  v69[1] = 0LL;
  std::string::size_type v70 = 0LL;
  CFTypeRef v71 = 0LL;
  valuePtr.__r_.__value_.__l.__cap_ = v7;
  CFTypeRef v88 = cf;
  if ((v77 & 0x80u) == 0) {
    char v8 = v76;
  }
  else {
    char v8 = (void **)v76[0];
  }
  if (v8)
  {
    if ((v77 & 0x80u) == 0) {
      CFIndex v9 = v77;
    }
    else {
      CFIndex v9 = (CFIndex)v76[1];
    }
    CFStringRef v10 = CFStringCreateWithBytes(0LL, (const UInt8 *)v8, v9, 0x8000100u, 0);
    CFTypeRef v64 = v10;
    if (!v10)
    {
      BOOL v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
    }
  }

  else
  {
    CFStringRef v10 = 0LL;
    CFTypeRef v64 = 0LL;
  }

  sub_7D084(v65, "route change reason");
  if (v10) {
    CFRetain(v10);
  }
  __int128 v89 = *(_OWORD *)v65;
  uint64_t v90 = v66;
  v65[0] = 0LL;
  v65[1] = 0LL;
  uint64_t v66 = 0LL;
  CFTypeRef v67 = 0LL;
  CFStringRef v91 = v10;
  if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v12 = &v75;
  }
  else {
    uint64_t v12 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex size = v75.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex size = v75.__r_.__value_.__l.__size_;
    }
    CFTypeRef v60 = CFStringCreateWithBytes(0LL, (const UInt8 *)v12, size, 0x8000100u, 0);
    if (!v60)
    {
      int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
    }
  }

  else
  {
    CFTypeRef v60 = 0LL;
  }

  sub_2005A4(__p, "route_change_time_ms", &v60);
  int v15 = 0LL;
  uint64_t v16 = 0LL;
  __int128 v92 = *(_OWORD *)__p;
  CFTypeRef v17 = v63;
  uint64_t v93 = v62;
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v62 = 0LL;
  CFTypeRef v63 = 0LL;
  CFTypeRef v94 = v17;
  uint64_t v73 = 0LL;
  unint64_t v74 = 0LL;
  unint64_t v72 = &v73;
  while (1)
  {
    uint64_t v18 = (char *)&valuePtr + 32 * v16;
    __int16 v19 = &v73;
    if (v72 != &v73)
    {
      int v20 = v15;
      __int16 v21 = &v73;
      if (v15)
      {
        do
        {
          __int16 v19 = (uint64_t **)v20;
          int v20 = (uint64_t *)v20[1];
        }

        while (v20);
      }

      else
      {
        do
        {
          __int16 v19 = (uint64_t **)v21[2];
          BOOL v22 = *v19 == (uint64_t *)v21;
          __int16 v21 = v19;
        }

        while (v22);
      }

      if ((sub_845A0(v19 + 4, (void **)&valuePtr.__r_.__value_.__l.__data_ + 4 * v16) & 0x80) == 0)
      {
        unsigned int v23 = (uint64_t **)sub_845D8((uint64_t)&v72, &v86, (void **)&valuePtr.__r_.__value_.__l.__data_ + 4 * v16);
        goto LABEL_42;
      }
    }

    if (v15)
    {
      std::string::size_type v86 = v19;
      unsigned int v23 = v19 + 1;
LABEL_42:
      if (*v23) {
        goto LABEL_53;
      }
      goto LABEL_45;
    }

    std::string::size_type v86 = &v73;
    unsigned int v23 = &v73;
LABEL_45:
    int v24 = (uint64_t *)operator new(0x40uLL);
    v84[0] = v24;
    v84[1] = &v73;
    char v85 = 0;
    CFStringRef v25 = v24 + 4;
    if (v18[23] < 0)
    {
      sub_24054(v25, *(void **)v18, *((void *)v18 + 1));
    }

    else
    {
      *(_OWORD *)CFStringRef v25 = *(_OWORD *)v18;
      v24[6] = *((void *)v18 + 2);
    }

    unsigned int v26 = (char *)&valuePtr + 32 * v16;
    uint64_t v27 = *((void *)v26 + 3);
    if (v27) {
      CFRetain(*((CFTypeRef *)v26 + 3));
    }
    v24[7] = v27;
    char v85 = 1;
    uint64_t v28 = v86;
    *int v24 = 0LL;
    v24[1] = 0LL;
    void v24[2] = (uint64_t)v28;
    *unsigned int v23 = v24;
    if (*v72)
    {
      unint64_t v72 = (uint64_t **)*v72;
      int v24 = *v23;
    }

    sub_7A420(v73, v24);
    ++v74;
    v84[0] = 0LL;
    sub_2008F4((uint64_t)v84);
LABEL_53:
    if (++v16 == 3) {
      break;
    }
    int v15 = v73;
  }

  for (uint64_t i = 0LL; i != -96; i -= 32LL)
  {
    uint64_t v30 = (void **)((char *)&valuePtr.__r_.__value_.__l.__data_ + i);
    id v31 = *(CFTypeRef *)((char *)&v94 + i);
    if (v31) {
      CFRelease(v31);
    }
  }

  if (v63) {
    CFRelease(v63);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(__p[0]);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[0]);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!v3 && v81)
  {
    uint64_t v32 = (unsigned int *)sub_128E30((uint64_t)v81);
    uint64_t v33 = v32[1];
    if (*v32 == 1668509810) {
      uint64_t v34 = 1668309362LL;
    }
    else {
      uint64_t v34 = *v32;
    }
    sub_2CA1C(&valuePtr, v34);
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string valuePtr = &valuePtr;
    }
    else {
      p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (p_valuePtr)
    {
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        CFIndex v36 = valuePtr.__r_.__value_.__s.__size_;
      }
      else {
        CFIndex v36 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v37 = CFStringCreateWithBytes(0LL, (const UInt8 *)p_valuePtr, v36, 0x8000100u, 0);
      v65[0] = (void *)v37;
      if (!v37)
      {
        CFMutableDictionaryRef v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
      }

      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_93:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }

    else
    {
      CFStringRef v37 = 0LL;
      v65[0] = 0LL;
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
        goto LABEL_93;
      }
    }

    sub_7D084(&valuePtr, "category");
    if (v37) {
      CFRetain(v37);
    }
    CFTypeRef v88 = v37;
    sub_20050C((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (__int128 *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    sub_2CA1C(&valuePtr, v33);
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v38 = &valuePtr;
    }
    else {
      unsigned int v38 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (v38)
    {
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        CFIndex v39 = valuePtr.__r_.__value_.__s.__size_;
      }
      else {
        CFIndex v39 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v40 = CFStringCreateWithBytes(0LL, (const UInt8 *)v38, v39, 0x8000100u, 0);
      __p[0] = (void *)v40;
      if (!v40)
      {
        __int128 v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
      }

      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_109:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }

    else
    {
      CFStringRef v40 = 0LL;
      __p[0] = 0LL;
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
        goto LABEL_109;
      }
    }

    sub_7D084(&valuePtr, "mode");
    if (v40) {
      CFRetain(v40);
    }
    CFTypeRef v88 = v40;
    sub_20050C((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (__int128 *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    sub_2DAC94(&valuePtr, (unsigned int **)(a1 + 376), v33);
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      id v41 = &valuePtr;
    }
    else {
      id v41 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (v41)
    {
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        CFIndex v42 = valuePtr.__r_.__value_.__s.__size_;
      }
      else {
        CFIndex v42 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v43 = CFStringCreateWithBytes(0LL, (const UInt8 *)v41, v42, 0x8000100u, 0);
      v84[0] = v43;
      if (!v43)
      {
        unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
      }

      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_125:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }

    else
    {
      CFStringRef v43 = 0LL;
      v84[0] = 0LL;
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
        goto LABEL_125;
      }
    }

    sub_7D084(&valuePtr, "active devices");
    if (v43) {
      CFRetain(v43);
    }
    CFTypeRef v88 = v43;
    sub_20050C((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (__int128 *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    sub_8DCFC((uint64_t)v69, *(void **)(a1 + 120));
    sub_264840(&valuePtr, (unsigned int **)(a1 + 376), (uint64_t)v69);
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v44 = &valuePtr;
    }
    else {
      int v44 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (v44)
    {
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        CFIndex v45 = valuePtr.__r_.__value_.__s.__size_;
      }
      else {
        CFIndex v45 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v46 = CFStringCreateWithBytes(0LL, (const UInt8 *)v44, v45, 0x8000100u, 0);
      std::string::size_type v86 = (uint64_t **)v46;
      if (!v46)
      {
        uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "Could not construct");
      }

      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_141:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }

    else
    {
      CFStringRef v46 = 0LL;
      std::string::size_type v86 = 0LL;
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80) != 0) {
        goto LABEL_141;
      }
    }

    sub_8DF20((void *)v69[1]);
    sub_7D084(&valuePtr, "active on demand devices");
    if (v46) {
      CFRetain(v46);
    }
    CFTypeRef v88 = v46;
    sub_20050C((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (__int128 *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(sub_128E30((uint64_t)v81) + 40);
    CFNumberRef v47 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    v69[0] = v47;
    if (!v47)
    {
      uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v54, "Could not construct");
    }

    sub_7D084(&valuePtr, "expanse session");
    CFRetain(v47);
    CFTypeRef v88 = v47;
    sub_20050C((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (__int128 *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    CFRelease(v47);
    if (v46) {
      CFRelease(v46);
    }
    if (v43) {
      CFRelease(v43);
    }
    if (v40) {
      CFRelease(v40);
    }
    if (v37) {
      CFRelease(v37);
    }
  }

  memset(&valuePtr, 0, sizeof(valuePtr));
  sub_7DCF4(&valuePtr, v74);
  int v48 = (uint64_t *)v72;
  if (v72 != &v73)
  {
    do
    {
      sub_20067C(&valuePtr, (const UInt8 *)v48 + 32, (const void **)v48 + 7);
      uint64_t v49 = (uint64_t *)v48[1];
      if (v49)
      {
        do
        {
          id v50 = (uint64_t **)v49;
          uint64_t v49 = (uint64_t *)*v49;
        }

        while (v49);
      }

      else
      {
        do
        {
          id v50 = (uint64_t **)v48[2];
          BOOL v22 = *v50 == v48;
          int v48 = (uint64_t *)v50;
        }

        while (!v22);
      }

      int v48 = (uint64_t *)v50;
    }

    while (v50 != &v73);
  }

  CFDictionaryRef v51 = sub_7C1F4((void ***)&valuePtr);
  v69[0] = &valuePtr;
  sub_7CFCC((void ***)v69);
  CFDictionaryRef v59 = v51;
  sub_5AC9C((uint64_t *)&v59, *(uint64_t **)(a1 + 288), *(uint64_t **)(a1 + 296), 10LL);
  if (v51) {
    CFRelease(v51);
  }
  sub_200798(v73);
  uint64_t v78 = off_4709D0;
  CFMutableDictionaryRef v52 = v81;
  if (v81)
  {
    sub_10AF78(v81 + 2);
    operator delete(v52);
  }

void sub_263B30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, const void *a18, uint64_t a19, uint64_t a20, uint64_t a21, CFTypeRef cf, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  sub_7058C(&a42);
  _Unwind_Resume(a1);
}

BOOL sub_263ED4@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_138E8(2);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    unint64_t v5 = (os_log_s *)*(id *)v4;
    if (v5)
    {
      CFIndex v6 = v5;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        int v15 = 136315650;
        uint64_t v16 = "VirtualAudio_PlugIn.mm";
        __int16 v17 = 1024;
        int v18 = 410;
        __int16 v19 = 2048;
        uint64_t v20 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Destroying objects for VirtualAudio_DestroyedObjectTracker %p.",  (uint8_t *)&v15,  0x1Cu);
      }
    }
  }

  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    if (dword_493058++)
    {
      CFIndex v9 = (os_log_s *)*(id *)sub_138E8(2);
      CFStringRef v10 = v9;
      if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315394;
        uint64_t v16 = "VirtualAudio_PlugIn.mm";
        __int16 v17 = 1024;
        int v18 = 414;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Destruction is executing while the routing mutex is not held. While this indicates a logic error (th is should not be possible), it should have no direct implications.",  (uint8_t *)&v15,  0x12u);
      }
    }
  }

  sub_6DD4();
  if ((*(unsigned int (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828))
  {
    BOOL v11 = operator new(0x10uLL);
    sub_6DD4();
    sub_B20B8(v11, (uint64_t)&qword_48F828);
  }

  else
  {
    BOOL v11 = 0LL;
  }

  uint64_t v12 = *(uint64_t **)(a1 + 16);
  if (v12)
  {
    unsigned int v13 = sub_E38D4(v12);
    operator delete(v13);
  }

  if (v11)
  {
    if (v11[8]) {
      (*(void (**)(void))(**(void **)v11 + 16LL))(*(void *)v11);
    }
    operator delete(v11);
  }

  return sub_72210(a2, 1920099684LL);
}

void sub_2640EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_264118(uint64_t a1)
{
  if (a1 >= 3)
  {
    uint64_t v3 = sub_138E8(13);
    id v4 = sub_8C7D4(1, *(void **)v3, *(void *)(v3 + 8));
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    CFIndex v6 = v5;
    if (v5)
    {
      uint64_t v7 = v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, a1);
        if (v11 >= 0) {
          char v8 = __p;
        }
        else {
          char v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unsigned int v13 = "VirtualAudio_PlugIn.mm";
        __int16 v14 = 1024;
        int v15 = 517;
        __int16 v16 = 2080;
        __int16 v17 = v8;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Unsupported result returned from RoutingManager: %s",  buf,  0x1Cu);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003329396;
  }

  return dword_4021C8[a1];
}

void sub_264280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2642A4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = std::string::insert(&v6, 0LL, "Destroying objects for VirtualAudio_DestroyedObjectTracker ", 0x3BuLL);
  __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__l.__cap_ = v3->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v5 = std::string::append(&v7, ".", 1uLL);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_264398( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2643DC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_479340;
  result[1] = v3;
  return result;
}

uint64_t sub_264410(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_479340;
  a2[1] = v2;
  return result;
}

void sub_26442C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  if (*(void **)v1 != v3)
  {
    do
    {
      __int128 v4 = (unint64_t *)(*(uint64_t (**)(void))(*(void *)*v2 + 528LL))(*v2);
      sub_79C14(v4);
      ++v2;
    }

    while (v2 != v3);
  }

void sub_264710(_Unwind_Exception *a1)
{
}

void sub_264718(_Unwind_Exception *a1)
{
}

void sub_264724(_Unwind_Exception *a1)
{
}

void sub_264730(_Unwind_Exception *a1)
{
}

void sub_26473C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x264744LL);
  }
  sub_7A0E8(a1);
}

void *sub_26475C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4792F8;
  return result;
}

void sub_264780(uint64_t a1, void *a2)
{
  *a2 = &off_4792F8;
}

uint64_t sub_264798()
{
  return (*(uint64_t (**)(void))(qword_48F828 + 24))();
}

void *sub_2647C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_4792B0;
  result[1] = v3;
  return result;
}

uint64_t sub_2647F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_4792B0;
  a2[1] = v2;
  return result;
}

void sub_264814(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)v1[23];
  v1 += 23;
  sub_32C8C(v2);
  *(v1 - 1) = v1;
  void *v1 = 0LL;
  v1[1] = 0LL;
}

std::string *sub_264840(std::string *a1, unsigned int **a2, uint64_t a3)
{
  std::string v6 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    char v7 = 1;
    uint64_t v30 = a2[1];
    do
    {
      if (*v6 == 1987011684)
      {
        if ((v7 & 1) == 0) {
          std::string::append(a1, ", ", 2uLL);
        }
        sub_262EC0((uint64_t *)&v36, a3, v6[1]);
        char v8 = v36;
        uint64_t v32 = v37;
        if (v36 != v37)
        {
          do
          {
            std::string::append(a1, "{ ", 2uLL);
            sub_2CA1C(&v34, *v6);
            CFIndex v9 = std::string::append(&v34, "_", 1uLL);
            __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
            v35.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v10;
            v9->__r_.__value_.__l.__size_ = 0LL;
            v9->__r_.__value_.__l.__cap_ = 0LL;
            v9->__r_.__value_.__r.__words[0] = 0LL;
            std::to_string(&v33, *v8);
            if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              char v11 = &v33;
            }
            else {
              char v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
            }
            if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type size = v33.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type size = v33.__r_.__value_.__l.__size_;
            }
            unsigned int v13 = std::string::append(&v35, (const std::string::value_type *)v11, size);
            __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
            v38.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
            v13->__r_.__value_.__l.__size_ = 0LL;
            v13->__r_.__value_.__l.__cap_ = 0LL;
            v13->__r_.__value_.__r.__words[0] = 0LL;
            int v15 = std::string::append(&v38, ", ", 2uLL);
            __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            int64_t cap = v15->__r_.__value_.__l.__cap_;
            __int128 v39 = v16;
            v15->__r_.__value_.__l.__size_ = 0LL;
            v15->__r_.__value_.__l.__cap_ = 0LL;
            v15->__r_.__value_.__r.__words[0] = 0LL;
            if (cap >= 0) {
              __int16 v17 = (const std::string::value_type *)&v39;
            }
            else {
              __int16 v17 = (const std::string::value_type *)v39;
            }
            if (cap >= 0) {
              std::string::size_type v18 = HIBYTE(cap);
            }
            else {
              std::string::size_type v18 = *((void *)&v39 + 1);
            }
            std::string::append(a1, v17, v18);
            if (SHIBYTE(cap) < 0) {
              operator delete((void *)v39);
            }
            sub_9DCB8((uint64_t *)&v35, (void *)v6 + 1);
            *(void *)&__int128 v39 = &v39;
            *((void *)&v39 + 1) = &v39;
            int64_t cap = 0LL;
            v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
            *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = (unint64_t)&v38;
            for (uint64_t i = (std::string *)v35.__r_.__value_.__l.__size_;
                  i != &v35;
                  uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
            {
              std::string::size_type v20 = i->__r_.__value_.__l.__cap_;
              if (*(_DWORD *)(v20 + 144) != 1885433888)
              {
                __int16 v21 = *(_WORD *)(v20 + 184);
                if ((v21 & 1) != 0) {
                  BOOL v22 = (std::string *)&v39;
                }
                else {
                  BOOL v22 = &v38;
                }
                unsigned int v23 = operator new(0x20uLL);
                void v23[2] = i->__r_.__value_.__l.__cap_;
                std::string::pointer data = i[1].__r_.__value_.__l.__data_;
                v23[3] = data;
                if (data)
                {
                  CFStringRef v25 = (unint64_t *)(data + 8);
                  do
                    unint64_t v26 = __ldxr(v25);
                  while (__stxr(v26 + 1, v25));
                }

                std::string::size_type v27 = v22->__r_.__value_.__r.__words[0];
                *unsigned int v23 = v22->__r_.__value_.__r.__words[0];
                v23[1] = v22;
                *(void *)(v27 + 8) = v23;
                v22->__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
                if ((v21 & 1) != 0) {
                  uint64_t v28 = (std::string *)&v39;
                }
                else {
                  uint64_t v28 = &v38;
                }
                ++v28->__r_.__value_.__l.__cap_;
              }
            }

            v34.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
            sub_264CB4((std::string **)&v34, (uint64_t)&v39);
            std::string::append(a1, ", ", 2uLL);
            sub_264CB4((std::string **)&v34, (uint64_t)&v38);
            sub_1BB88((uint64_t *)&v38);
            sub_1BB88((uint64_t *)&v39);
            sub_1BB88((uint64_t *)&v35);
            std::string::append(a1, " }", 2uLL);
            ++v8;
          }

          while (v8 != v32);
          char v8 = v36;
        }

        if (v8)
        {
          CFStringRef v37 = v8;
          operator delete(v8);
        }

        char v7 = 0;
        unint64_t v5 = v30;
      }

      v6 += 8;
    }

    while (v6 != v5);
  }

  return std::string::append(a1, " ]", 2uLL);
}

void sub_264B94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *__p, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
}

uint64_t sub_264C74(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

std::string *sub_264CB4(std::string **a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    char v5 = 0;
    do
    {
      if ((v5 & 1) != 0) {
        std::string::append(*a1, ", ", 2uLL);
      }
      sub_2CA1C(&__p, *(unsigned int *)(*(void *)(v4 + 16) + 144LL));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(*a1, (const std::string::value_type *)p_p, size);
      std::string::append(*a1, "(", 3uLL);
      sub_2CA1C(&__p, *(unsigned int *)(*(void *)(v4 + 16) + 264LL));
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v8 = &__p;
      }
      else {
        char v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(*a1, (const std::string::value_type *)v8, v9);
      if (sub_204570(*(_DWORD *)(*(void *)(v4 + 16) + 144LL), *(void *)(*(void *)(v4 + 16) + 192LL))) {
        std::string::append(*a1, "_b204", 5uLL);
      }
      std::string::append(*a1, ")", 2uLL);
      if (sub_59468(*(void *)(v4 + 16)))
      {
        std::string::append(*a1, "(", 3uLL);
        unsigned int v10 = sub_59468(*(void *)(v4 + 16));
        std::to_string(&__p, v10);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v11 = &__p;
        }
        else {
          char v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v12 = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(*a1, (const std::string::value_type *)v11, v12);
        std::string::append(*a1, ")", 2uLL);
      }

      uint64_t v13 = *(void *)(*(void *)(v4 + 16) + 136LL);
      if ((v13 & 0xFF00000000LL) != 0 && (_DWORD)v13)
      {
        std::string::append(*a1, "(", 3uLL);
        sub_2CA1C(&__p, v13);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v14 = &__p;
        }
        else {
          __int128 v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v15 = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(*a1, (const std::string::value_type *)v14, v15);
        std::string::append(*a1, ")", 2uLL);
        if (sub_F7070(*(void *)(v4 + 16), v13))
        {
          uint64_t v16 = *(void *)(v4 + 16);
          __p.__r_.__value_.__s.__data_[0] = 0;
          __p.__r_.__value_.__s.__data_[4] = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(void *)v16 + 248LL))(v16, v13, &__p);
          std::string::append(*a1, "(", 3uLL);
          sub_2CA1C(&__p, v17);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v18 = &__p;
          }
          else {
            std::string::size_type v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v19 = __p.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(*a1, (const std::string::value_type *)v18, v19);
          std::string::append(*a1, ")", 2uLL);
        }
      }

      uint64_t v4 = *(void *)(v4 + 8);
      char v5 = 1;
    }

    while (v4 != a2);
  }

  return std::string::append(*a1, " ]", 2uLL);
}

void sub_264FAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_264FD8(_DWORD *a1)
{
  uint64_t v2 = sub_5954C();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 264LL))(v2);
  if ((_DWORD)result)
  {
    if ((sub_7531C() & 1) != 0 || (uint64_t result = sub_1CBD44(), (_DWORD)result))
    {
      uint64_t result = 1LL;
      if (*a1 != 1668576377 && *a1 != 1668703084)
      {
        int v4 = a1[1];
        if (v4 <= 1987077986)
        {
          if (v4 == 1768057203) {
            return result;
          }
          int v5 = 1919776355;
          goto LABEL_12;
        }

        if (v4 != 1987077987 && v4 != 1987081833)
        {
          int v5 = 1987081839;
LABEL_12:
          if (v4 != v5) {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

void *sub_2650A4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >> 61) {
      sub_7A87C();
    }
    uint64_t result = operator new(8 * a4);
    char v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = &result[a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }

  return result;
}

void sub_265128(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_265144(uint64_t a1)
{
  std::string __p = 0LL;
  unsigned int v10 = 0LL;
  uint64_t v11 = 0LL;
  strcpy(v12, "cwdv");
  v12[8] = 0;
  int v13 = 3;
  v15[0] = 0LL;
  v15[1] = 0LL;
  __int128 v14 = v15;
  CFTypeRef cf = 0LL;
  int v16 = 44731018;
  sub_73504(&v7, *(void *)(a1 + 128), (uint64_t)&__p);
  for (uint64_t i = v8; (uint64_t *)i != &v7; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = sub_6A92C(*(void *)(a1 + 128), *(_DWORD *)(i + 16));
    sub_B8CBC(&v18, (uint64_t *)(v3 + 88), "", 155);
    (*(void (**)(uint64_t))(*(void *)v18 + 224LL))(v18);
    int v4 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

  sub_68314(&v7);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v15[0]);
  if (__p)
  {
    unsigned int v10 = __p;
    operator delete(__p);
  }

void sub_26528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_2652C0(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v2 = (void *)*a2;
  uint64_t v54 = a2 + 1;
  int v4 = (void *)(a1 + 16);
  do
  {
    uint64_t v5 = v2[4];
    if ((sub_2F4E5C(v5) & 1) == 0)
    {
      uint64_t v8 = 0LL;
      buf[0] = 0;
      p_p = &__p;
      BOOL v10 = 1;
      goto LABEL_21;
    }

    *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
    _DWORD buf[8] = 0;
    _BYTE buf[32] = 0;
    unsigned int v6 = sub_2F4EB4(v5);
    unsigned int v59 = v6;
    if (!v6)
    {
      BOOL v10 = 0;
      uint64_t v11 = 0LL;
      __int128 v55 = 0uLL;
      buf[0] = 0;
LABEL_19:
      *(_OWORD *)AudioObjectPropertyAddress buf = v55;
      *(void *)&buf[16] = v11;
      _BYTE buf[24] = 1;
      uint64_t v8 = (_BYTE *)*((void *)&v55 + 1);
      p_p = (void **)buf;
      uint64_t v52 = 0LL;
      goto LABEL_21;
    }

    sub_8683C(&__p, v6 >> 2);
    *(_DWORD *)AudioObjectPropertyAddress buf = sub_2F4F0C(v5);
    if (*(_DWORD *)buf)
    {
      int v7 = 0;
      LOBYTE(v55) = 0;
    }

    else
    {
      sub_908DC((uint64_t)&buf[8], (uint64_t)&__p);
      LOBYTE(v55) = 0;
      if (buf[32])
      {
        __int128 v55 = *(_OWORD *)&buf[8];
        uint64_t v52 = *(void *)&buf[24];
        memset(&buf[8], 0, 24);
        int v7 = 1;
      }

      else
      {
        int v7 = 0;
      }
    }

    int v12 = v7;
    if (__p)
    {
      unint64_t v57 = __p;
      operator delete(__p);
      int v12 = buf[32];
    }

    if (v12 && *(void *)&buf[8])
    {
      *(void *)&buf[16] = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }

    buf[0] = 0;
    BOOL v10 = v7 == 0;
    if (v7)
    {
      uint64_t v11 = v52;
      goto LABEL_19;
    }

    uint64_t v8 = 0LL;
    p_p = &__p;
LABEL_21:
    std::string __p = 0LL;
    unint64_t v57 = 0LL;
    uint64_t v58 = 0LL;
    int v13 = (char *)*p_p;
    p_p[1] = 0LL;
    p_p[2] = 0LL;
    std::string *p_p = 0LL;
    if (__p) {
      operator delete(__p);
    }
    if (!v10 && *(void *)buf) {
      operator delete(*(void **)buf);
    }
    id v14 = *(id *)sub_138E8(2);
    std::string::size_type v15 = v14;
    if (v14)
    {
      int v16 = (os_log_s *)v14;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 96LL))(&__p, v5);
        uint64_t v17 = &__p;
        if (v58 < 0) {
          uint64_t v17 = __p;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 867;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v17;
        *(_WORD *)&_BYTE buf[28] = 2048;
        *(void *)&buf[30] = (v8 - v13) >> 2;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Partners for port %s : %zd", buf, 0x26u);
        if (SHIBYTE(v58) < 0) {
          operator delete(__p);
        }
      }
    }

    uint64_t v18 = v8 - v13;
    if (v8 - v13 >= 1)
    {
      std::string::size_type v19 = *(char **)(a1 + 8);
      uint64_t v20 = v18 >> 2;
      if (v18 >> 2 <= (uint64_t)(*v4 - (void)v19) >> 2)
      {
        if (v20 <= 0)
        {
          unint64_t v26 = *(char **)(a1 + 8);
          std::string::size_type v27 = &v26[-4 * v20];
          uint64_t v28 = v26;
          while (v27 < v19)
          {
            int v29 = *(_DWORD *)v27;
            v27 += 4;
            *(_DWORD *)uint64_t v28 = v29;
            v28 += 4;
          }

          uint64_t v30 = &v19[4 * v20];
          *(void *)(a1 + 8) = v28;
          if (v26 != v30) {
            memmove(&v26[-4 * ((v26 - v30) >> 2)], v19, v26 - v30);
          }
          if (&v13[4 * v20] != v13) {
            memmove(v19, v13, 4 * v20);
          }
        }

        else
        {
          if (v8 != v13) {
            memmove(*(void **)(a1 + 8), v13, v8 - v13);
          }
          *(void *)(a1 + 8) = &v19[v8 - v13];
        }
      }

      else
      {
        uint64_t v21 = (uint64_t)&v19[-*(void *)a1] >> 2;
        uint64_t v22 = *v4 - *(void *)a1;
        uint64_t v23 = v22 >> 1;
        else {
          unint64_t v24 = v23;
        }
        *(void *)&_BYTE buf[32] = v4;
        if (v24) {
          unint64_t v24 = (unint64_t)sub_7A890(v24);
        }
        else {
          uint64_t v25 = 0LL;
        }
        id v31 = (_DWORD *)(v24 + 4 * v21);
        *(void *)AudioObjectPropertyAddress buf = v24;
        *(void *)&_DWORD buf[8] = v31;
        *(void *)&_BYTE buf[24] = v24 + 4 * v25;
        uint64_t v32 = 4 * v20;
        std::string v33 = v13;
        std::string v34 = &v31[v20];
        do
        {
          int v35 = *(_DWORD *)v33;
          v33 += 4;
          *v31++ = v35;
          v32 -= 4LL;
        }

        while (v32);
        *(void *)&buf[16] = v34;
        sub_1876D4((void **)a1, (uint64_t)buf, v19);
        if (*(void *)buf) {
          operator delete(*(void **)buf);
        }
      }
    }

    if (v13) {
      operator delete(v13);
    }
    CFIndex v36 = (uint64_t *)v2[1];
    if (v36)
    {
      do
      {
        CFStringRef v37 = v36;
        CFIndex v36 = (uint64_t *)*v36;
      }

      while (v36);
    }

    else
    {
      do
      {
        CFStringRef v37 = (uint64_t *)v2[2];
        BOOL v38 = *v37 == (void)v2;
        uint64_t v2 = v37;
      }

      while (!v38);
    }

    uint64_t v2 = v37;
  }

  while (v37 != v54);
  uint64_t v39 = *(unsigned int **)a1;
  CFStringRef v40 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 != v40)
  {
    do
    {
      unsigned int v41 = *v39;
      sub_92EF8();
      uint64_t v42 = sub_28AFEC(v41);
      if (!v42)
      {
        uint64_t v47 = sub_138E8(13);
        id v48 = sub_8C7D4(1, *(void **)v47, *(void *)(v47 + 8));
        uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        id v50 = v49;
        if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 875;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v41;
          _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: no virtual audio port object with the specified ID (%u)",  buf,  0x18u);
        }

        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_4865A0;
        exception[2] = 560947818;
      }

      id v43 = *(id *)sub_138E8(2);
      int v44 = v43;
      if (v43)
      {
        CFIndex v45 = (os_log_s *)v43;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v42 + 96LL))(&__p, v42);
          CFStringRef v46 = &__p;
          if (v58 < 0) {
            CFStringRef v46 = __p;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 876;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl(&dword_0, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Added %s to port list", buf, 0x1Cu);
          if (SHIBYTE(v58) < 0) {
            operator delete(__p);
          }
        }
      }

      sub_DD4F0(a2, v42, v42);
      ++v39;
    }

    while (v39 != v40);
  }

void sub_26596C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2659E8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    sub_13888(a1, a2);
  }

  else
  {
    uint64_t v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    int v4 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
    if (v4) {
      BOOL v5 = v3 == 0LL;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      CFRetain(v3);
    }
    *(_BYTE *)(a1 + 16) = 1;
  }

  return a1;
}

void *sub_265A4C(unint64_t a1)
{
  if (a1 >= 0x555555555555556LL) {
    sub_7A8C4();
  }
  return operator new(48 * a1);
}

uint64_t sub_265A90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

BOOL sub_265AC8(_DWORD *a1)
{
  uint64_t v2 = operator new(8uLL);
  *(void *)uint64_t v2 = 0x63766D6763766D20LL;
  uint64_t v3 = operator new(4uLL);
  *uint64_t v3 = 1885565807;
  std::string __p = v3;
  uint64_t v11 = v3 + 1;
  int v12 = v3 + 1;
  strcpy(v13, "cwdv");
  v13[8] = 0;
  int v14 = 3;
  v16[0] = 0LL;
  v16[1] = 0LL;
  std::string::size_type v15 = v16;
  int v17 = 44739242;
  CFTypeRef cf = 0LL;
  uint64_t v4 = sub_546E0();
  v19[0] = &off_479168;
  uint64_t v20 = v19;
  sub_FF3FC(v9, v4, (unsigned int **)&__p, (uint64_t)v19);
  BOOL v5 = v20;
  if (v20 == v19)
  {
    uint64_t v6 = 4LL;
    BOOL v5 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (v9[2]) {
    BOOL v7 = *v2 == *a1 || v2[1] == *a1;
  }
  else {
    BOOL v7 = 0LL;
  }
  sub_85B80(v9);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v16[0]);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }

  operator delete(v2);
  return v7;
}

void sub_265C60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_265CC8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_265D00(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_734C4(v2);
  }

  return a1;
}

void sub_265D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = buf;
  int v5 = *(_DWORD *)(a2 + 152);
  if ((sub_6E138(v5) & 1) == 0)
  {
    uint64_t v155 = sub_138E8(13);
    id v156 = sub_8C7D4(1, *(void **)v155, *(void *)(v155 + 8));
    int v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
    uint64_t v158 = v157;
    if (v157 && os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
    {
      v194[0] = 136315394;
      *(void *)&v194[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(v194[3]) = 1024;
      *(_DWORD *)((char *)&v194[3] + 2) = 3559;
      _os_log_impl( &dword_0,  v158,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)v194,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v6 = *(_DWORD *)(a2 + 184);
  if (v6 == 1936747378)
  {
LABEL_8:
    memset(v194, 0, sizeof(v194));
    strcpy(v195, "cwdv");
    char v196 = 0;
    int v197 = 3;
    BOOL v199 = 0LL;
    uint64_t v200 = 0LL;
    uint64_t v198 = &v199;
    int v201 = 44739242;
    CFStringRef v202 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x7073706B706D6269LL;
    sub_909D8((char *)v194, (char *)buf, (uint64_t)&buf[2], 2uLL);
    uint64_t v7 = sub_546E0();
    *(void *)AudioObjectPropertyAddress buf = &off_479168;
    *(void *)&buf[6] = buf;
    sub_FF3FC((uint64_t *)&__src, v7, (unsigned int **)v194, (uint64_t)buf);
    uint64_t v8 = *(_DWORD **)&buf[6];
    if (*(_DWORD **)&buf[6] == buf)
    {
      uint64_t v9 = 4LL;
      uint64_t v8 = buf;
    }

    else
    {
      if (!*(void *)&buf[6]) {
        goto LABEL_13;
      }
      uint64_t v9 = 5LL;
    }

    (*(void (**)(void))(*(void *)v8 + 8 * v9))();
LABEL_13:
    uint64_t v10 = sub_138E8(2);
    uint64_t v11 = sub_138E8(13);
    char v12 = 0;
    uint64_t v13 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = (int)buf[v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1LL;
      if ((v16 & 1) != 0) {
        goto LABEL_19;
      }
    }

    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_19:
    id v17 = *(id *)v10;
    uint64_t v18 = v17;
    if (v17)
    {
      std::string::size_type v19 = (os_log_s *)v17;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        sub_2D9F18(&__p, (uint64_t)&__src);
        uint64_t v20 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3267;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v20;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - VirtualAudio_Port: built-in mic and speaker are added to the override list: %s.",  (uint8_t *)buf,  0x1Cu);
      }
    }

    shared_owners = v175[0];
    if ((void **)v175[0] != &__src)
    {
      uint64_t v22 = (uint64_t **)(a2 + 16);
      uint64_t v23 = (uint64_t **)(a2 + 24);
      do
      {
        sub_103AA0( v22,  v23,  (unint64_t *)&shared_owners->__shared_weak_owners_,  &shared_owners->__shared_weak_owners_);
        shared_owners = (std::__shared_weak_count *)shared_owners->__shared_owners_;
      }

      while (shared_owners != (std::__shared_weak_count *)&__src);
    }

    sub_85B80((uint64_t *)&__src);
    if (v202) {
      CFRelease(v202);
    }
LABEL_32:
    sub_32C8C(v199);
    unint64_t v24 = *(void **)v194;
    if (*(void *)v194)
    {
      *(void *)&v194[2] = *(void *)v194;
      goto LABEL_215;
    }

    return;
  }

  if (v6 == 1651275109) {
    goto LABEL_69;
  }
  if (v6 != 1635087471) {
    return;
  }
  switch(v5)
  {
    case 1668047476:
      goto LABEL_69;
    case 1668047728:
      memset(v194, 0, sizeof(v194));
      strcpy(v195, "cwdv");
      char v196 = 0;
      int v197 = 3;
      BOOL v199 = 0LL;
      uint64_t v200 = 0LL;
      uint64_t v198 = &v199;
      int v201 = 44739242;
      CFStringRef v202 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x7073746F70737469LL;
      sub_909D8((char *)v194, (char *)buf, (uint64_t)&buf[2], 2uLL);
      uint64_t v25 = sub_546E0();
      *(void *)AudioObjectPropertyAddress buf = &off_479168;
      *(void *)&buf[6] = buf;
      sub_FFB0C((uint64_t *)&__p, v25, v194, (uint64_t)buf);
      unint64_t v26 = *(_DWORD **)&buf[6];
      if (*(_DWORD **)&buf[6] == buf)
      {
        uint64_t v27 = 4LL;
        unint64_t v26 = buf;
      }

      else
      {
        if (!*(void *)&buf[6])
        {
LABEL_131:
          memset(buf, 0, 24);
          strcpy((char *)&buf[6], "cwdv");
          LOBYTE(v186) = 0;
          *(_DWORD *)&v188[2] = 3;
          __int128 v190 = 0LL;
          uint64_t v191 = 0LL;
          unint64_t v189 = &v190;
          int v192 = 44739242;
          CFTypeRef v193 = 0LL;
          __src = (void *)0x70687062706D6274LL;
          sub_909D8((char *)buf, (char *)&__src, (uint64_t)v175, 2uLL);
          if (sub_14EBAC())
          {
            sub_203048(v169, buf);
            if (v170) {
              p_p = (std::string *)v169;
            }
            else {
              p_p = &__p;
            }
          }

          else
          {
            v169[0] = (uint64_t)v169;
            v169[1] = (uint64_t)v169;
            uint64_t v170 = 0LL;
            p_p = &__p;
          }

          sub_B8E40((uint64_t *)&v183, (uint64_t)p_p, "", 3458);
          uint64_t v90 = (uint64_t *)v184;
          if (v184 != (std::__shared_weak_count *)&v183)
          {
            do
            {
              uint64_t v91 = v90[2];
              __src = 0LL;
              v175[0] = 0LL;
              v175[1] = 0LL;
              strcpy((char *)&v176, "cwdv");
              char v177 = 0;
              int v178 = 3;
              v180[0] = 0LL;
              v180[1] = 0LL;
              int v179 = v180;
              CFTypeRef cf = 0LL;
              int v181 = 44731050;
              int v92 = sub_578E8(*(void *)(a1 + 128), v91, (uint64_t)&__src);
              sub_267DA8(*(void *)(a1 + 128), v92, a2);
              if (cf) {
                CFRelease(cf);
              }
              sub_32C8C(v180[0]);
              if (__src)
              {
                v175[0] = (std::__shared_weak_count *)__src;
                operator delete(__src);
              }

              uint64_t v90 = (uint64_t *)v90[1];
            }

            while (v90 != (uint64_t *)&v183);
          }

          sub_1BB88((uint64_t *)&v183);
          sub_85B80(v169);
          if (v193) {
            CFRelease(v193);
          }
          sub_32C8C(v190);
          if (*(void *)buf)
          {
            *(void *)&buf[2] = *(void *)buf;
            operator delete(*(void **)buf);
          }

          sub_85B80((uint64_t *)&__p);
          if (v202) {
            CFRelease(v202);
          }
          goto LABEL_32;
        }

        uint64_t v27 = 5LL;
      }

      (*(void (**)(void))(*(void *)v26 + 8 * v27))();
      goto LABEL_131;
    case 1668051824:
      goto LABEL_8;
  }

  uint64_t v28 = operator new(4uLL);
  *(void *)BOOL v194 = v28;
  *uint64_t v28 = 1885892674;
  *(void *)&v194[2] = v28 + 1;
  *(void *)&v194[4] = v28 + 1;
  strcpy(v195, "cwdv");
  char v196 = 0;
  int v197 = 3;
  BOOL v199 = 0LL;
  uint64_t v200 = 0LL;
  uint64_t v198 = &v199;
  int v201 = 44739242;
  CFStringRef v202 = 0LL;
  uint64_t v29 = sub_546E0();
  *(void *)AudioObjectPropertyAddress buf = &off_475CE8;
  *(void *)&buf[6] = buf;
  sub_FFB0C((uint64_t *)&__src, v29, v194, (uint64_t)buf);
  uint64_t v30 = *(_DWORD **)&buf[6];
  if (*(_DWORD **)&buf[6] == buf)
  {
    uint64_t v31 = 4LL;
    uint64_t v30 = buf;
    goto LABEL_41;
  }

  if (*(void *)&buf[6])
  {
    uint64_t v31 = 5LL;
LABEL_41:
    (*(void (**)(void))(*(void *)v30 + 8 * v31))();
  }

  for (uint64_t i = v175[0]; ; uint64_t i = (std::__shared_weak_count *)i->__shared_owners_)
  {
    if (i == (std::__shared_weak_count *)&__src)
    {
      char v39 = 0;
      goto LABEL_55;
    }

    std::string v33 = (std::__shared_weak_count *)i[1].__vftable;
    if (v33)
    {
      std::string v34 = std::__shared_weak_count::lock(v33);
      if (v34)
      {
        int v35 = v34;
        uint64_t shared_weak_owners = i->__shared_weak_owners_;
        if (shared_weak_owners) {
          LOBYTE(v4) = sub_202EE8(i->__shared_weak_owners_);
        }
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          unint64_t v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
  }

  char v39 = 1;
LABEL_55:
  sub_85B80((uint64_t *)&__src);
  if (v202) {
    CFRelease(v202);
  }
  sub_32C8C(v199);
  if (*(void *)v194)
  {
    *(void *)&v194[2] = *(void *)v194;
    operator delete(*(void **)v194);
  }

  if ((v39 & 1) != 0)
  {
    CFStringRef v40 = operator new(8uLL);
    void *v40 = 0x706D627470687062LL;
    *(void *)BOOL v194 = v40;
    *(void *)&v194[2] = v40 + 1;
    *(void *)&v194[4] = v40 + 1;
    strcpy(v195, "cwdv");
    char v196 = 0;
    int v197 = 3;
    BOOL v199 = 0LL;
    uint64_t v200 = 0LL;
    uint64_t v198 = &v199;
    int v201 = 44739242;
    CFStringRef v202 = 0LL;
    uint64_t v41 = sub_546E0();
    *(void *)AudioObjectPropertyAddress buf = &off_479168;
    *(void *)&buf[6] = buf;
    sub_FFB0C((uint64_t *)&__src, v41, v194, (uint64_t)buf);
    uint64_t v42 = *(_DWORD **)&buf[6];
    if (*(_DWORD **)&buf[6] == buf)
    {
      uint64_t v43 = 4LL;
      uint64_t v42 = buf;
    }

    else
    {
      if (!*(void *)&buf[6])
      {
LABEL_219:
        sub_B8E40((uint64_t *)buf, (uint64_t)&__src, "", 3242);
        for (uint64_t j = *(void *)&buf[2]; (_DWORD *)j != buf; uint64_t j = *(void *)(j + 8))
        {
          int v116 = sub_578E8(*(void *)(a1 + 128), *(void *)(j + 16), (uint64_t)v194);
          sub_2679FC(*(void *)(a1 + 128), v116, a2);
        }

        sub_1BB88((uint64_t *)buf);
        sub_85B80((uint64_t *)&__src);
        if (v202) {
          CFRelease(v202);
        }
        goto LABEL_32;
      }

      uint64_t v43 = 5LL;
    }

    (*(void (**)(void))(*(void *)v42 + 8 * v43))();
    goto LABEL_219;
  }

  int v44 = *(_DWORD *)(a2 + 152);
  if (v44 != 1668049007)
  {
    if (v44 == 1668051817)
    {
      uint64_t v45 = sub_138E8(2);
      uint64_t v46 = sub_138E8(13);
      char v47 = 0;
      uint64_t v48 = 0LL;
      *(void *)BOOL v194 = 0x100000002LL;
      uint64_t v49 = *(void *)(v45 + 8);
      while (1)
      {
        uint64_t v50 = (int)v194[v48];
        char v51 = v47;
        if (((v49 & v50) != 0) != ((*(void *)(v46 + 8) & v50) != 0)) {
          break;
        }
        char v47 = 1;
        uint64_t v48 = 1LL;
        if ((v51 & 1) != 0) {
          goto LABEL_236;
        }
      }

      if ((v49 & v50) == 0) {
        uint64_t v45 = v46;
      }
LABEL_236:
      unint64_t v124 = (os_log_s *)*(id *)v45;
      uint64_t v125 = v124;
      if (v124 && os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
      {
        v194[0] = 136315394;
        *(void *)&v194[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(v194[3]) = 1024;
        *(_DWORD *)((char *)&v194[3] + 2) = 3492;
        _os_log_impl( &dword_0,  v125,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - kVirtualAudioPortTypeReceiverBuiltIn is added to disallowed port types.",  (uint8_t *)v194,  0x12u);
      }

      v194[0] = 1886545251;
      sub_32A38((uint64_t **)(a2 + 88), (uint64_t *)(a2 + 96), 0x70726563u, v194);
      sub_13B6B0((uint64_t **)(a2 + 112), 0x70726563u);
      return;
    }

    if (*(void *)(a2 + 456)
      || *(_DWORD *)(a2 + 188) != 1768842095
      || MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 6)
    {
      return;
    }

    uint64_t v52 = operator new(8uLL);
    *uint64_t v52 = 0x706D627470687062LL;
    uint64_t v117 = (uint64_t)(v52 + 1);
    if (*(_DWORD *)(a2 + 632))
    {
      uint64_t v118 = sub_7A890(4uLL);
      uint64_t v119 = v118;
      v118[2] = 1885892674;
      uint64_t v117 = (uint64_t)(v118 + 3);
      for (uint64_t k = 1LL; k != -1; --k)
        v118[k] = *(_DWORD *)((char *)v52 + k * 4);
      operator delete(v52);
      uint64_t v52 = v119;
    }

    memset(v194, 0, sizeof(v194));
    sub_7A5B8(v194, v52, v117, (v117 - (uint64_t)v52) >> 2);
    strcpy(v195, "cwdv");
    char v196 = 0;
    int v197 = 3;
    BOOL v199 = 0LL;
    uint64_t v200 = 0LL;
    uint64_t v198 = &v199;
    int v201 = 44739242;
    CFStringRef v202 = 0LL;
    uint64_t v121 = sub_546E0();
    *(void *)AudioObjectPropertyAddress buf = &off_479168;
    *(void *)&buf[6] = buf;
    sub_FFB0C((uint64_t *)&__p, v121, v194, (uint64_t)buf);
    sub_B8E40((uint64_t *)&__src, (uint64_t)&__p, "", 3288);
    sub_85B80((uint64_t *)&__p);
    id v122 = *(_DWORD **)&buf[6];
    if (*(_DWORD **)&buf[6] == buf)
    {
      uint64_t v123 = 4LL;
      id v122 = buf;
    }

    else
    {
      if (!*(void *)&buf[6])
      {
LABEL_242:
        for (uint64_t m = v175[0]; m != (std::__shared_weak_count *)&__src; uint64_t m = (std::__shared_weak_count *)m->__shared_owners_)
        {
          int v127 = (*(uint64_t (**)(uint64_t))(*(void *)m->__shared_weak_owners_ + 400LL))(m->__shared_weak_owners_);
          BOOL v128 = v127 == 1;
          if (v127 == 1) {
            goto LABEL_247;
          }
        }

        BOOL v128 = 0;
LABEL_247:
        uint64_t v129 = sub_5954C();
        int v130 = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 176LL))(v129);
        uint64_t v131 = v175[0];
        if ((void **)v175[0] != &__src)
        {
          BOOL v161 = v130 == 0;
          if (v130) {
            char v132 = 1;
          }
          else {
            char v132 = v128;
          }
          char v162 = v132;
          do
          {
            int v133 = sub_578E8(*(void *)(a1 + 128), v131->__shared_weak_owners_, (uint64_t)v194);
            if ((*(unsigned int (**)(uint64_t))(*(void *)v131->__shared_weak_owners_ + 400LL))(v131->__shared_weak_owners_) == 1)
            {
              uint64_t v134 = sub_138E8(2);
              uint64_t v135 = sub_138E8(13);
              char v136 = 0;
              uint64_t v137 = 0LL;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
              uint64_t v138 = *(void *)(v134 + 8);
              while (1)
              {
                uint64_t v139 = (int)buf[v137];
                char v140 = v136;
                if (((v138 & v139) != 0) != ((*(void *)(v135 + 8) & v139) != 0)) {
                  break;
                }
                char v136 = 1;
                uint64_t v137 = 1LL;
                if ((v140 & 1) != 0) {
                  goto LABEL_264;
                }
              }

              if ((v138 & v139) == 0) {
                uint64_t v134 = v135;
              }
LABEL_264:
              std::string v148 = (os_log_s *)*(id *)v134;
              uint64_t v149 = v148;
              if (v148 && os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
              {
                buf[0] = 136315650;
                *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 3300;
                HIWORD(buf[4]) = 1024;
                buf[5] = v133;
                _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - VirtualAudio_Port: not changing routability of %u (in ear).",  (uint8_t *)buf,  0x18u);
              }
            }

            else if ((v162 & 1) != 0)
            {
              uint64_t v141 = sub_138E8(2);
              uint64_t v142 = sub_138E8(13);
              char v143 = 0;
              uint64_t v144 = 0LL;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
              uint64_t v145 = *(void *)(v141 + 8);
              while (1)
              {
                uint64_t v146 = (int)buf[v144];
                char v147 = v143;
                if (((v145 & v146) != 0) != ((*(void *)(v142 + 8) & v146) != 0)) {
                  break;
                }
                char v143 = 1;
                uint64_t v144 = 1LL;
                if ((v147 & 1) != 0) {
                  goto LABEL_273;
                }
              }

              if ((v145 & v146) == 0) {
                uint64_t v141 = v142;
              }
LABEL_273:
              id v150 = *(id *)v141;
              unint64_t v151 = v150;
              if (v150)
              {
                uint64_t v152 = (os_log_s *)v150;
                if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
                {
                  int v153 = (*(uint64_t (**)(uint64_t))(*(void *)v131->__shared_weak_owners_ + 400LL))(v131->__shared_weak_owners_);
                  int v154 = (*(uint64_t (**)(uint64_t))(*(void *)v131->__shared_weak_owners_ + 160LL))(v131->__shared_weak_owners_);
                  buf[0] = 136316418;
                  *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 3313;
                  HIWORD(buf[4]) = 1024;
                  buf[5] = v133;
                  LOWORD(buf[6]) = 1024;
                  *(_DWORD *)((char *)&buf[6] + 2) = v161;
                  HIWORD(buf[7]) = 1024;
                  int v186 = v153;
                  __int16 v187 = 1024;
                  *(_DWORD *)id v188 = v154;
                  _os_log_impl( &dword_0,  v152,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - VirtualAudio_Port: %u (DnDState=%u, InEarState=%u, IsRoutable=%u) is added to the unroutable list.",  (uint8_t *)buf,  0x2Au);
                }
              }

              sub_2679FC(*(void *)(a1 + 128), v133, a2);
            }

            else if (((*(uint64_t (**)(uint64_t))(*(void *)v131->__shared_weak_owners_ + 112LL))(v131->__shared_weak_owners_) & 0xFF00000000LL) != 0 {
                   && (*(unsigned int (**)(uint64_t))(*(void *)v131->__shared_weak_owners_ + 112LL))(v131->__shared_weak_owners_) == 1701869160)
            }
            {
              sub_267DA8(*(void *)(a1 + 128), v133, a2);
            }

            uint64_t v131 = (std::__shared_weak_count *)v131->__shared_owners_;
          }

          while (v131 != (std::__shared_weak_count *)&__src);
        }

        sub_1BB88((uint64_t *)&__src);
        if (v202) {
          CFRelease(v202);
        }
        sub_32C8C(v199);
        if (*(void *)v194)
        {
          *(void *)&v194[2] = *(void *)v194;
          operator delete(*(void **)v194);
        }

        if (v52) {
          goto LABEL_214;
        }
        return;
      }

      uint64_t v123 = 5LL;
    }

    (*(void (**)(void))(*(void *)v122 + 8 * v123))();
    goto LABEL_242;
  }

LABEL_194:
  *(void *)AudioObjectPropertyAddress buf = buf;
  *(void *)&buf[2] = buf;
  *(void *)&uint8_t buf[4] = 0LL;
  unint64_t v106 = v164;
  if (v164 == &v163) {
    goto LABEL_213;
  }
  do
  {
    sub_B8F68((uint64_t *)v194, v106 + 2, "", 3430);
    int v107 = (*(uint64_t (**)(void))(**(void **)v194 + 408LL))(*(void *)v194);
    int v108 = v107;
    uint64_t v109 = *(std::__shared_weak_count **)&v194[2];
    if (!*(void *)&v194[2]) {
      goto LABEL_199;
    }
    id v110 = (unint64_t *)(*(void *)&v194[2] + 8LL);
    do
      unint64_t v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (v111)
    {
LABEL_199:
      if (!v107) {
        goto LABEL_201;
      }
LABEL_200:
      sub_85C34((uint64_t *)buf, v106[2], v106[3]);
      goto LABEL_201;
    }

    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
    if (v108) {
      goto LABEL_200;
    }
LABEL_201:
    unint64_t v106 = (uint64_t *)v106[1];
  }

  while (v106 != &v163);
  if (*(void *)&buf[4])
  {
    sub_32C8C(*(void **)(a2 + 448));
    *(void *)(a2 + 448) = 0LL;
    *(void *)(a2 + 456) = 0LL;
    *(void *)(a2 + 440) = a2 + 448;
    sub_B8E40((uint64_t *)&__src, (uint64_t)buf, "", 3438);
    for (iuint64_t i = v175[0]; ii != (std::__shared_weak_count *)&__src; iuint64_t i = (std::__shared_weak_count *)ii->__shared_owners_)
    {
      uint64_t v113 = ii->__shared_weak_owners_;
      memset(v194, 0, sizeof(v194));
      strcpy(v195, "cwdv");
      char v196 = 0;
      int v197 = 3;
      BOOL v199 = 0LL;
      uint64_t v200 = 0LL;
      uint64_t v198 = &v199;
      CFStringRef v202 = 0LL;
      int v201 = 44731050;
      int v114 = sub_578E8(*(void *)(a1 + 128), v113, (uint64_t)v194);
      sub_267DA8(*(void *)(a1 + 128), v114, a2);
      if (v202) {
        CFRelease(v202);
      }
      sub_32C8C(v199);
      if (*(void *)v194)
      {
        *(void *)&v194[2] = *(void *)v194;
        operator delete(*(void **)v194);
      }
    }

    sub_1BB88((uint64_t *)&__src);
  }

void sub_267548( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, std::__shared_weak_count *a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, std::__shared_weak_count *a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2679FC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = sub_6A92C(a1, a2);
  if (!v5)
  {
    uint64_t v19 = sub_138E8(13);
    id v20 = sub_8C7D4(1, *(void **)v19, *(void *)(v19 + 8));
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    uint64_t v22 = v21;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v27 = 1024;
      int v28 = 3334;
      __int16 v29 = 1024;
      LODWORD(v30) = a2;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [vaPort is NULL]: Lookup of VirtualAudio port with id %u failed",  buf,  0x18u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Lookup of VirtualAudio port with id %u failed");
  }

  unint64_t v6 = v5;
  uint64_t v7 = sub_138E8(2);
  uint64_t v8 = sub_138E8(13);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_8:
  id v14 = *(id *)v7;
  uint64_t v15 = v14;
  if (v14)
  {
    char v16 = (os_log_s *)v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, unint64_t))(*(void *)v6 + 96LL))(__p, v6);
      if (v25 >= 0) {
        id v17 = __p;
      }
      else {
        id v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v27 = 1024;
      int v28 = 3337;
      __int16 v29 = 2080;
      uint64_t v30 = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - VirtualAudio_Port: %s is added to the unroutable list.",  buf,  0x1Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  sub_267C98((uint64_t **)(a3 + 440), v6);
  return sub_DD4F0((uint64_t *)(a3 + 464), v6, v6);
}

void sub_267C6C(_Unwind_Exception *a1)
{
}

void sub_267C98(uint64_t **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v5 = v4;
    unint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        char v9 = (uint64_t **)v6;
      }
      else {
        char v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      unint64_t v6 = *v9;
    }

    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }

        while (v10);
      }

      else
      {
        uint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }

        while (!v13);
      }

      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_911E8(v3, v5);
      operator delete(v5);
    }
  }

void *sub_267D64()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479168;
  return result;
}

void sub_267D88(uint64_t a1, void *a2)
{
  *a2 = &off_479168;
}

uint64_t sub_267DA0()
{
  return 1LL;
}

void sub_267DA8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = sub_6A92C(a1, a2);
  if (!v5)
  {
    uint64_t v18 = sub_138E8(13);
    id v19 = sub_8C7D4(1, *(void **)v18, *(void *)(v18 + 8));
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    uint64_t v21 = v20;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v26 = 1024;
      int v27 = 3347;
      __int16 v28 = 1024;
      LODWORD(v29) = a2;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [vaPort is NULL]: Lookup of VirtualAudio port with id %u failed",  buf,  0x18u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Lookup of VirtualAudio port with id %u failed");
  }

  unint64_t v6 = v5;
  uint64_t v7 = sub_138E8(2);
  uint64_t v8 = sub_138E8(13);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_8:
  id v14 = *(id *)v7;
  uint64_t v15 = v14;
  if (v14)
  {
    char v16 = (os_log_s *)v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, unint64_t))(*(void *)v6 + 96LL))(__p, v6);
      if (v24 >= 0) {
        id v17 = __p;
      }
      else {
        id v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v26 = 1024;
      int v27 = 3350;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - VirtualAudio_Port: %s is added to the routable list.",  buf,  0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  sub_DD4F0((uint64_t *)(a3 + 440), v6, v6);
  sub_267C98((uint64_t **)(a3 + 464), v6);
}

void sub_268018(_Unwind_Exception *a1)
{
}

void *sub_26804C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479220;
  return result;
}

void sub_268070(uint64_t a1, void *a2)
{
  *a2 = &off_479220;
}

BOOL sub_268088(uint64_t a1, uint64_t a2)
{
  return sub_2034B8(a2) != 2;
}

void *sub_2680A8(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      sub_7A87C();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    uint64_t v15 = result + 2;
    uint64_t v4 = (char *)sub_7DC90(a2);
    uint64_t v7 = *v2;
    unint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
    }

    else
    {
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
        *(void *)unint64_t v6 = 0LL;
      }

      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }

    void *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
    int64x2_t v13 = v10;
    uint64_t v11 = v2[2];
    v2[2] = &v4[8 * v5];
    id v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_AD86C((uint64_t)&v12);
  }

  return result;
}

void sub_268164(__int128 *a1, __int128 *a2)
{
  __int128 v17 = *a1;
  __int128 v18 = a1[1];
  __int128 v19 = a1[2];
  __int128 v20 = a1[3];
  uint64_t v5 = (void *)*((void *)a1 + 8);
  uint64_t v4 = a1 + 4;
  unint64_t v6 = (void *)a1 + 9;
  uint64_t v7 = (void *)*((void *)a1 + 9);
  uint64_t v21 = v5;
  uint64_t v22 = v7;
  uint64_t v23 = *((void *)a1 + 10);
  if (v23)
  {
    v7[2] = &v22;
    void *v4 = v6;
    void *v6 = 0LL;
    *((void *)a1 + 10) = 0LL;
  }

  else
  {
    uint64_t v21 = &v22;
  }

  __int128 v24 = *(__int128 *)((char *)a1 + 88);
  uint64_t v25 = *((void *)a1 + 13);
  *((void *)a1 + 12) = 0LL;
  *((void *)a1 + 13) = 0LL;
  *((void *)a1 + 11) = 0LL;
  int v26 = *((_DWORD *)a1 + 28);
  __int128 v8 = a2[3];
  __int128 v10 = *a2;
  __int128 v9 = a2[1];
  a1[2] = a2[2];
  a1[3] = v8;
  *a1 = v10;
  a1[1] = v9;
  sub_2684AC(v4, (void *)a2 + 8);
  uint64_t v11 = (void **)a2 + 11;
  uint64_t v12 = (void *)*((void *)a1 + 11);
  if (v12)
  {
    *((void *)a1 + 12) = v12;
    operator delete(v12);
    *((void *)a1 + 11) = 0LL;
    *((void *)a1 + 12) = 0LL;
    *((void *)a1 + 13) = 0LL;
  }

  *(__int128 *)((char *)a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *((void *)a1 + 13) = *((void *)a2 + 13);
  *uint64_t v11 = 0LL;
  *((void *)a2 + 12) = 0LL;
  *((void *)a2 + 13) = 0LL;
  *((_DWORD *)a1 + 28) = *((_DWORD *)a2 + 28);
  *a2 = v17;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = v20;
  uint64_t v13 = (uint64_t)a2 + 72;
  sub_32C8C(*((void **)a2 + 9));
  id v14 = v22;
  *((void *)a2 + 8) = v21;
  *((void *)a2 + 9) = v14;
  uint64_t v15 = v23;
  *((void *)a2 + 10) = v23;
  if (v15)
  {
    unint64_t v14[2] = v13;
    id v14 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
  }

  else
  {
    *((void *)a2 + 8) = v13;
  }

  char v16 = *v11;
  if (*v11)
  {
    *((void *)a2 + 12) = v16;
    operator delete(v16);
    id v14 = v22;
  }

  *(__int128 *)((char *)a2 + 88) = v24;
  *((void *)a2 + 13) = v25;
  uint64_t v25 = 0LL;
  __int128 v24 = 0uLL;
  *((_DWORD *)a2 + 28) = v26;
  sub_32C8C(v14);
}

__int128 *sub_2682F0(__int128 *result, uint64_t *a2)
{
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v2;
  __int128 v3 = *result;
  *uint64_t result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((void *)result + 2))
  {
    **((void **)result + 1) = result;
    uint64_t v4 = *(__int128 **)result;
  }

  else
  {
    *(void *)uint64_t result = result;
    uint64_t v4 = result;
  }

  *((void *)v4 + 1) = result;
  if (a2[2])
  {
    *(void *)a2[1] = a2;
    uint64_t v5 = (uint64_t *)*a2;
  }

  else
  {
    *a2 = (uint64_t)a2;
    uint64_t v5 = a2;
  }

  v5[1] = (uint64_t)a2;
  return result;
}

uint64_t sub_268364(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  __int128 v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  unint64_t v6 = (void *)a2 + 9;
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = a1 + 72;
  uint64_t v9 = *((void *)a2 + 10);
  *(void *)(a1 + 80) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *((void *)a2 + 8) = v6;
    void *v6 = 0LL;
    *((void *)a2 + 10) = 0LL;
  }

  else
  {
    *(void *)(a1 + 64) = v8;
  }

  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 12) = 0LL;
  *((void *)a2 + 13) = 0LL;
  *((void *)a2 + 11) = 0LL;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(void *)(a1 + 120) = a1 + 120;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 136) = 0LL;
  sub_CCA0C(a1 + 120, (uint64_t *)(a1 + 120), (void *)a2 + 15);
  return a1;
}

uint64_t sub_26840C(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  __int128 v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  sub_2684AC((void *)(a1 + 64), (void *)a2 + 8);
  uint64_t v7 = *(void **)(a1 + 88);
  if (v7)
  {
    *(void *)(a1 + 96) = v7;
    operator delete(v7);
    *(void *)(a1 + 88) = 0LL;
    *(void *)(a1 + 96) = 0LL;
    *(void *)(a1 + 104) = 0LL;
  }

  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0LL;
  *((void *)a2 + 12) = 0LL;
  *((void *)a2 + 13) = 0LL;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  sub_85B80((uint64_t *)(a1 + 120));
  sub_CCA0C(a1 + 120, (uint64_t *)(a1 + 120), (void *)a2 + 15);
  return a1;
}

void sub_2684AC(void *a1, void *a2)
{
  __int128 v4 = a1 + 1;
  sub_32C8C((void *)a1[1]);
  *a1 = *a2;
  __int128 v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *__int128 v5 = 0LL;
    a2[2] = 0LL;
  }

  else
  {
    *a1 = v4;
  }

void sub_268514(uint64_t a1, uint64_t a2, void *a3)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    __int128 v5 = (os_log_s *)*(id *)sub_138E8(13);
    uint64_t v6 = v5;
    if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v35 = 1024;
      int v36 = 4738;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread.",  buf,  0x12u);
    }
  }

  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  *(void *)a1 = Mutable;
  *(_WORD *)(a1 + 8) = 257;
  sub_8DCFC((uint64_t)v32, a3);
  uint64_t v8 = *(uint64_t **)(a2 + 144);
  int v26 = *(uint64_t **)(a2 + 152);
  if (v8 == v26) {
    goto LABEL_47;
  }
  do
  {
    sub_262EC0((uint64_t *)&v30, (uint64_t)v32, *(_DWORD *)(*v8 + 580));
    __int128 v10 = v30;
    uint64_t v9 = v31;
    if (v30 == v31) {
      goto LABEL_44;
    }
    do
    {
      uint64_t v11 = *v8;
      uint64_t v12 = *(void *)(*v8 + 576);
      uint64_t v29 = v12;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 112LL))(v11))
      {
        uint64_t v13 = sub_138E8(2);
        if ((*(_BYTE *)(v13 + 8) & 1) != 0)
        {
          id v14 = *(id *)v13;
          if (v14)
          {
            uint64_t v15 = (os_log_s *)v14;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              sub_33464(&__p, (unsigned int *)&v29);
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              __int16 v35 = 1024;
              int v36 = 4750;
              __int16 v37 = 2080;
              unint64_t v38 = p_p;
              _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VAD %s is marked hidden, excluding from Device Descriptions",  buf,  0x1Cu);
            }
          }
        }

        goto LABEL_42;
      }

      *(void *)AudioObjectPropertyAddress buf = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      *(_WORD *)&_DWORD buf[8] = 257;
      sub_13408((uint64_t)buf, @"device ID", *(_DWORD *)(*v8 + 8));
      if (buf[9])
      {
        __int128 v17 = *(const void **)(*v8 + 592);
        if (v17) {
          BOOL v18 = *(void *)buf == 0LL;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18) {
          goto LABEL_24;
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"device UID", v17);
        if (buf[9])
        {
          __int128 v17 = *(const void **)(*v8 + 592);
LABEL_24:
          if (v17) {
            BOOL v19 = *(void *)buf == 0LL;
          }
          else {
            BOOL v19 = 1;
          }
          if (!v19) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"device name", v17);
          }
        }
      }

      sub_13408((uint64_t)buf, @"device type", v12);
      if (*v10) {
        sub_13408((uint64_t)buf, @"audio session id", *v10);
      }
      sub_134C4((uint64_t)buf, @"persisted", 1);
      __int128 v20 = *(void **)sub_135A0(*v8, 0);
      uint64_t v21 = sub_135A0(*v8, 0);
      sub_136E0((uint64_t)&__p, v20, (void *)(v21 + 8));
      if (buf[9] && __p.__r_.__value_.__r.__words[0] && *(void *)buf) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"input ports", __p.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = *(void **)sub_135A0(*v8, 1);
      uint64_t v23 = sub_135A0(*v8, 1);
      sub_136E0((uint64_t)value, v22, (void *)(v23 + 8));
      __int128 v24 = *(const void **)buf;
      if (buf[9] && value[0] && *(void *)buf)
      {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"output ports", value[0]);
        __int128 v24 = *(const void **)buf;
      }

      if (Mutable) {
        CFArrayAppendValue(Mutable, v24);
      }
      sub_13818((uint64_t)value);
      sub_13818((uint64_t)&__p);
      sub_13850((uint64_t)buf);
LABEL_42:
      ++v10;
    }

    while (v10 != v9);
    __int128 v10 = v30;
LABEL_44:
    if (v10)
    {
      uint64_t v31 = v10;
      operator delete(v10);
    }

    ++v8;
  }

  while (v8 != v26);
LABEL_47:
  sub_8DF20(v33);
}

void sub_26895C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
}

void *sub_2689F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_479388;
  result[1] = v3;
  return result;
}

uint64_t sub_268A2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_479388;
  a2[1] = v2;
  return result;
}

void sub_268A48(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)v1[23];
  v1 += 23;
  sub_32C8C(v2);
  *(v1 - 1) = v1;
  void *v1 = 0LL;
  v1[1] = 0LL;
}

void sub_268A74(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_6A92C(a2, a3);
  if (!v5)
  {
    uint64_t v18 = sub_138E8(13);
    id v19 = sub_8C7D4(1, *(void **)v18, *(void *)(v18 + 8));
    __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    uint64_t v21 = v20;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 977;
      __int16 v27 = 1024;
      LODWORD(v28) = a3;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): No virtual audio port found with port id %u",  buf,  0x18u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No virtual audio port found with port id %u");
  }

  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 96);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(v5 + 88);
  *(void *)&_DWORD buf[8] = v6;
  if (v6)
  {
    p_uint64_t shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  sub_B8CBC(v25, (uint64_t *)buf, "", 979);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v9 = sub_138E8(2);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    id v10 = *(id *)v9;
    if (v10)
    {
      uint64_t v11 = (os_log_s *)v10;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(const void **)(v25[0] + 248);
        uint64_t v23 = v12;
        char v24 = *(_BYTE *)(v25[0] + 256);
        if (v24 && v12) {
          CFRetain(v12);
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 980;
        __int16 v27 = 2112;
        __int16 v28 = v12;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Requested port is %@", buf, 0x1Cu);
        sub_19DFC((uint64_t)&v23);
      }
    }
  }

  uint64_t v13 = (std::__shared_weak_count *)v25[1];
  *a1 = v25[0];
  a1[1] = v13;
  if (v13)
  {
    id v14 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_268CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  sub_7A768((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_268D3C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  __int128 v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_1039A8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 16LL;
    }

    while (v6);
  }

  return a1;
}

void sub_268DA0(_Unwind_Exception *a1)
{
}

uint64_t sub_268DB4(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    BOOL v4 = v2 != 1 || a2 == 0;
    if (!v4)
    {
      uint64_t v48 = sub_138E8(13);
      id v49 = sub_8C7D4(1, *(void **)v48, *(void *)(v48 + 8));
      uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      char v51 = v50;
      if (v50)
      {
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4663;
          _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    uint64_t v5 = (void *)result;
    CFMutableArrayRef theArray = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    __int16 v55 = 257;
    if (a2)
    {
      uint64_t v6 = (void *)*v5;
      if ((void *)*v5 != v5 + 1)
      {
        do
        {
          sub_92EF8();
          uint64_t v7 = sub_28AFEC(*((_DWORD *)v6 + 7));
          unint64_t v8 = *(std::__shared_weak_count **)(v7 + 96);
          if (v8)
          {
            uint64_t v9 = *(void *)(v7 + 88);
            p_uint64_t shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
            do
              unint64_t v11 = __ldxr(p_shared_weak_owners);
            while (__stxr(v11 + 1, p_shared_weak_owners));
            uint64_t v12 = std::__shared_weak_count::lock(v8);
            *(void *)&_DWORD buf[8] = v12;
            if (v12)
            {
              uint64_t v13 = v12;
              *(void *)AudioObjectPropertyAddress buf = v9;
              std::__shared_weak_count::__release_weak(v8);
              if (v9)
              {
                (*(void (**)(std::string *__return_ptr))(**(void **)(v9 + 192) + 128LL))(&value);
                if (theArray && HIBYTE(v55)) {
                  CFArrayAppendValue(theArray, value.__r_.__value_.__l.__data_);
                }
                sub_19DFC((uint64_t)&value);
              }

              p_shared_owners = (unint64_t *)&v13->__shared_owners_;
              do
                unint64_t v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (v15) {
                goto LABEL_24;
              }
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            }

            else
            {
              uint64_t v13 = v8;
            }

            std::__shared_weak_count::__release_weak(v13);
          }

void sub_269368( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_2693E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_53F04(a1, a2);
  *(_BYTE *)(v4 + 408) = *(_BYTE *)(a2 + 408);
  uint64_t v5 = (uint64_t **)(v4 + 424);
  *(void *)(v4 + 4memset(buf, 0, 24) = 0LL;
  *(void *)(v4 + 432) = 0LL;
  *(void *)(v4 + 416) = v4 + 424;
  uint64_t v6 = *(void **)(a2 + 416);
  if (v6 != (void *)(a2 + 424))
  {
    do
    {
      uint64_t v7 = v6 + 4;
      unint64_t v8 = *v5;
      uint64_t v9 = v5;
      id v10 = *v5;
      unint64_t v11 = v5;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t **)v10;
          id v10 = (uint64_t *)v10[1];
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v9 = (uint64_t **)v11[2];
          BOOL v12 = *v9 == (uint64_t *)v11;
          unint64_t v11 = v9;
        }

        while (v12);
      }

      unint64_t v13 = *v7;
      if ((unint64_t)v9[4] < *v7)
      {
LABEL_8:
        if (v8) {
          id v14 = v9;
        }
        else {
          id v14 = v5;
        }
        if (v8) {
          unint64_t v15 = v9 + 1;
        }
        else {
          unint64_t v15 = v5;
        }
      }

      else
      {
        id v14 = v5;
        unint64_t v15 = v5;
        if (v8)
        {
          unint64_t v15 = v5;
          while (1)
          {
            while (1)
            {
              id v14 = (uint64_t **)v8;
              unint64_t v20 = v8[4];
              if (v13 >= v20) {
                break;
              }
              unint64_t v8 = *v14;
              unint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_15;
              }
            }

            if (v20 >= v13) {
              break;
            }
            unint64_t v15 = v14 + 1;
            unint64_t v8 = v14[1];
            if (!v8) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v15)
      {
LABEL_15:
        char v16 = operator new(0x38uLL);
        __int128 v17 = *(_OWORD *)v7;
        uint64_t v16[6] = v6[6];
        *((_OWORD *)v16 + 2) = v17;
        sub_32C38((uint64_t **)(a1 + 416), (uint64_t)v14, v15, v16);
      }

      uint64_t v18 = (void *)v6[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          uint64_t v19 = (void *)v6[2];
          BOOL v12 = *v19 == (void)v6;
          uint64_t v6 = v19;
        }

        while (!v12);
      }

      uint64_t v6 = v19;
    }

    while (v19 != (void *)(a2 + 424));
  }

  sub_269B70(a1 + 440, (void *)(a2 + 440));
  sub_269B70(a1 + 464, (void *)(a2 + 464));
  sub_86550((uint64_t *)(a1 + 488), a2 + 488);
  sub_86550((uint64_t *)(a1 + 512), a2 + 512);
  sub_E5784((_BYTE *)(a1 + 536), a2 + 536);
  *(void *)(a1 + 576) = 0LL;
  *(_OWORD *)(a1 + 560) = 0u;
  uint64_t v21 = *(_BYTE **)(a2 + 560);
  uint64_t v22 = *(_BYTE **)(a2 + 568);
  int64_t v23 = v22 - v21;
  if (v22 != v21)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v23 >> 4) >= 0x555555555555556LL) {
      sub_7A87C();
    }
    char v24 = (char *)sub_265A4C(0xAAAAAAAAAAAAAAABLL * (v23 >> 4));
    *(void *)(a1 + 560) = v24;
    *(void *)(a1 + 568) = v24;
    *(void *)(a1 + 576) = &v24[48 * v25];
    memmove(v24, v21, v23);
    *(void *)(a1 + 568) = &v24[16 * (v23 >> 4)];
  }

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  sub_E5784((_BYTE *)(a1 + 592), a2 + 592);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  uint64_t v26 = *(void *)(a2 + 624);
  if (v26) {
    CFRetain(*(CFTypeRef *)(a2 + 624));
  }
  *(void *)(a1 + 6memset(buf, 0, 24) = v26;
  int v27 = *(_DWORD *)(a2 + 632);
  *(_BYTE *)(a1 + 636) = *(_BYTE *)(a2 + 636);
  *(_DWORD *)(a1 + 632) = v27;
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  uint64_t v28 = *(void *)(a2 + 648);
  *(void *)(a1 + 648) = v28;
  if (v28)
  {
    uint64_t v29 = (unint64_t *)(v28 + 16);
    do
      unint64_t v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }

  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  uint64_t v31 = *(void *)(a2 + 664);
  *(void *)(a1 + 664) = v31;
  if (v31)
  {
    uint64_t v32 = (unint64_t *)(v31 + 16);
    do
      unint64_t v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }

  sub_24A3AC(a1 + 672, a2 + 672);
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  if (*(_BYTE *)(a2 + 728))
  {
    sub_E1FDC(a1 + 704, (void *)(a2 + 704));
    *(_BYTE *)(a1 + 728) = 1;
  }

  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  return a1;
}

void sub_269704(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 728)) {
    sub_734C4(*(void **)(v1 + 712));
  }
  if (*(_BYTE *)(v1 + 696))
  {
    uint64_t v7 = *v4;
    if (*v4)
    {
      *(void *)(v1 + 680) = v7;
      operator delete(v7);
    }
  }

  sub_265CC8(v1 + 632);
  sub_7A6D8((const void **)(v1 + 624));
  if (*(_BYTE *)(v1 + 608)) {
    sub_13850(v3);
  }
  unint64_t v8 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 568) = v8;
    operator delete(v8);
  }

  if (*(_BYTE *)(v1 + 552)) {
    sub_13850(v2);
  }
  sub_32C8C(*(void **)(v1 + 520));
  sub_32C8C(*(void **)(v1 + 496));
  sub_32C8C(*(void **)(v1 + 472));
  sub_32C8C(*(void **)(v1 + 448));
  sub_32C8C(*(void **)(v1 + 424));
  sub_53068(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2697F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_52CCC(a1, a2);
  *(_BYTE *)(v4 + 408) = *(_BYTE *)(a2 + 408);
  *(void *)(v4 + 416) = *(void *)(a2 + 416);
  uint64_t v5 = v4 + 424;
  uint64_t v6 = *(void *)(a2 + 424);
  *(void *)(v4 + 4memset(buf, 0, 24) = v6;
  uint64_t v7 = *(void *)(a2 + 432);
  *(void *)(v4 + 432) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v5;
    *(void *)(a2 + 416) = a2 + 424;
    *(void *)(a2 + 4memset(buf, 0, 24) = 0LL;
    *(void *)(a2 + 432) = 0LL;
  }

  else
  {
    *(void *)(a1 + 416) = v5;
  }

  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  uint64_t v8 = a1 + 448;
  uint64_t v9 = *(void *)(a2 + 448);
  *(void *)(a1 + 448) = v9;
  uint64_t v10 = *(void *)(a2 + 456);
  *(void *)(a1 + 456) = v10;
  if (v10)
  {
    *(void *)(v9 + 16) = v8;
    *(void *)(a2 + 440) = a2 + 448;
    *(void *)(a2 + 448) = 0LL;
    *(void *)(a2 + 456) = 0LL;
  }

  else
  {
    *(void *)(a1 + 440) = v8;
  }

  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  uint64_t v11 = a1 + 472;
  uint64_t v12 = *(void *)(a2 + 472);
  *(void *)(a1 + 472) = v12;
  uint64_t v13 = *(void *)(a2 + 480);
  *(void *)(a1 + 480) = v13;
  if (v13)
  {
    *(void *)(v12 + 16) = v11;
    *(void *)(a2 + 464) = a2 + 472;
    *(void *)(a2 + 472) = 0LL;
    *(void *)(a2 + 480) = 0LL;
  }

  else
  {
    *(void *)(a1 + 464) = v11;
  }

  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  uint64_t v14 = a1 + 496;
  uint64_t v15 = *(void *)(a2 + 496);
  *(void *)(a1 + 496) = v15;
  uint64_t v16 = *(void *)(a2 + 504);
  *(void *)(a1 + 504) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v14;
    *(void *)(a2 + 488) = a2 + 496;
    *(void *)(a2 + 496) = 0LL;
    *(void *)(a2 + 504) = 0LL;
  }

  else
  {
    *(void *)(a1 + 488) = v14;
  }

  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  uint64_t v17 = a1 + 520;
  uint64_t v18 = *(void *)(a2 + 520);
  *(void *)(a1 + 520) = v18;
  uint64_t v19 = *(void *)(a2 + 528);
  *(void *)(a1 + 528) = v19;
  if (v19)
  {
    *(void *)(v18 + 16) = v17;
    *(void *)(a2 + 512) = a2 + 520;
    *(void *)(a2 + 520) = 0LL;
    *(void *)(a2 + 528) = 0LL;
  }

  else
  {
    *(void *)(a1 + 512) = v17;
  }

  sub_269B1C((_BYTE *)(a1 + 536), a2 + 536);
  *(void *)(a1 + 576) = 0LL;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0LL;
  *(_OWORD *)(a2 + 560) = 0u;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  sub_269B1C((_BYTE *)(a1 + 592), a2 + 592);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 6memset(buf, 0, 24) = *(void *)(a2 + 624);
  *(void *)(a2 + 6memset(buf, 0, 24) = 0LL;
  int v20 = *(_DWORD *)(a2 + 632);
  *(_BYTE *)(a1 + 636) = *(_BYTE *)(a2 + 636);
  *(_DWORD *)(a1 + 632) = v20;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(void *)(a2 + 648) = 0LL;
  *(void *)(a2 + 640) = 0LL;
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(void *)(a2 + 664) = 0LL;
  *(void *)(a2 + 656) = 0LL;
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  if (*(_BYTE *)(a2 + 696))
  {
    *(void *)(a1 + 688) = 0LL;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(void *)(a1 + 688) = *(void *)(a2 + 688);
    *(void *)(a2 + 688) = 0LL;
    *(_OWORD *)(a2 + 672) = 0u;
    *(_BYTE *)(a1 + 696) = 1;
  }

  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  if (*(_BYTE *)(a2 + 728))
  {
    *(void *)(a1 + 704) = *(void *)(a2 + 704);
    uint64_t v21 = a1 + 712;
    uint64_t v22 = *(void *)(a2 + 712);
    *(void *)(a1 + 712) = v22;
    uint64_t v23 = *(void *)(a2 + 720);
    *(void *)(a1 + 720) = v23;
    if (v23)
    {
      *(void *)(v22 + 16) = v21;
      *(void *)(a2 + 704) = a2 + 712;
      *(void *)(a2 + 712) = 0LL;
      *(void *)(a2 + 720) = 0LL;
    }

    else
    {
      *(void *)(a1 + 704) = v21;
    }

    *(_BYTE *)(a1 + 728) = 1;
  }

  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  return a1;
}

void sub_269A68(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 568) = v5;
    operator delete(v5);
  }

  if (*(_BYTE *)(v1 + 552)) {
    sub_13850(v2);
  }
  sub_32C8C(*(void **)(v1 + 520));
  sub_32C8C(*(void **)(v1 + 496));
  sub_32C8C(*(void **)(v1 + 472));
  sub_32C8C(*(void **)(v1 + 448));
  sub_32C8C(*(void **)(v1 + 424));
  sub_53068(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_269ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_128D9C(a1, a2);
  sub_2693E4(v5 + 40, a3);
  *(_BYTE *)(a1 + 784) = 1;
  return a1;
}

void sub_269B08(_Unwind_Exception *a1)
{
}

_BYTE *sub_269B1C(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16)) {
    sub_E6604((uint64_t)a1, a2);
  }
  return a1;
}

void sub_269B54(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 16)) {
    sub_13850(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_269B70(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }

        while (v10);
      }

      unint64_t v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = (uint64_t **)v7;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v6) {
          uint64_t v13 = (uint64_t **)(v7 + 1);
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
      }

      else
      {
        uint64_t v12 = (uint64_t **)v3;
        uint64_t v13 = (uint64_t **)v3;
        if (v6)
        {
          uint64_t v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              unint64_t v17 = v6[4];
              if (v11 >= v17) {
                break;
              }
              uint64_t v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }

            if (v17 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v13)
      {
LABEL_15:
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v5[4];
        sub_32C38((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }

      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }

        while (!v10);
      }

      uint64_t v5 = v16;
    }

    while (v16 != v4);
  }

  return a1;
}

void sub_269CD0(_Unwind_Exception *a1)
{
}

uint64_t **sub_269CE4(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    BOOL v10 = operator new(0x40uLL);
    v12[1] = v6;
    v10[8] = *a3;
    *((void *)v10 + 5) = v10 + 10;
    *((void *)v10 + 6) = v10 + 10;
    *((void *)v10 + 7) = 0LL;
    char v13 = 1;
    sub_32C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0LL;
    sub_EE1A4((uint64_t)v12);
    return (uint64_t **)v10;
  }

  return v8;
}

_BYTE *sub_269DB4(_BYTE *result, uint64_t a2)
{
  if (result[16] == *(_BYTE *)(a2 + 16))
  {
    if (result[16]) {
      return (_BYTE *)sub_13888((uint64_t)result, a2);
    }
  }

  else if (result[16])
  {
    uint64_t result = (_BYTE *)sub_13850((uint64_t)result);
    result[16] = 0;
  }

  else
  {
    return sub_E6604((uint64_t)result, a2);
  }

  return result;
}

void sub_269DFC(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (void *)(v4 + 176);
    do
    {
      uint64_t v23 = *(void *)((char *)v3 + 28);
      uint64_t v6 = sub_72A04(v23, SHIDWORD(v23), *(uint64_t **)(v4 + 144), *(uint64_t **)(v4 + 152));
      if (v6)
      {
        uint64_t v7 = v6;
        id v8 = *(id *)sub_138E8(31);
        unsigned int v9 = v8;
        if (v8)
        {
          BOOL v10 = (os_log_s *)v8;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            int v11 = *(_DWORD *)(v7 + 8);
            sub_33464(&__p, (unsigned int *)&v23);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4627;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = v11;
            __int16 v25 = 2048;
            uint64_t v26 = v7;
            __int16 v27 = 2080;
            uint64_t v28 = p_p;
            _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Notifying device %u (%p) of VAD '%s' that route change failed.",  buf,  0x2Cu);
          }
        }

        memset(buf, 0, sizeof(buf));
        sub_6DD4();
        sub_B20B8(&__p, (uint64_t)&qword_48F828);
        sub_C603C((unint64_t *)v7, (uint64_t *)buf);
        if (__p.__r_.__value_.__s.__data_[8]) {
          (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 16LL))(__p.__r_.__value_.__r.__words[0]);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        sub_E2D18((void ***)&__p);
      }

      uint64_t v13 = sub_71A5C(v4 + 176, v23, HIDWORD(v23));
      if (v4 + 184 != v13)
      {
        uint64_t v14 = (uint64_t *)v13;
        uint64_t v15 = *(void **)(v13 + 8);
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = (void *)*v15;
          }

          while (v15);
        }

        else
        {
          unint64_t v17 = (void *)v13;
          do
          {
            uint64_t v16 = (void *)v17[2];
            BOOL v18 = *v16 == (void)v17;
            unint64_t v17 = v16;
          }

          while (!v18);
        }

        if (*v5 == v13) {
          *uint64_t v5 = v16;
        }
        uint64_t v19 = *(uint64_t **)(v4 + 184);
        --*(void *)(v4 + 192);
        sub_911E8(v19, v14);
        operator delete(v14);
      }

      int v20 = (void *)v3[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          int v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          uint64_t v21 = (void *)v3[2];
          BOOL v18 = *v21 == (void)v3;
          uint64_t v3 = v21;
        }

        while (!v18);
      }

      uint64_t v3 = v21;
    }

    while (v21 != v2);
  }

void sub_26A318(_Unwind_Exception *a1)
{
}

void sub_26A324(_Unwind_Exception *a1)
{
}

void sub_26A330(_Unwind_Exception *a1)
{
}

void sub_26A33C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_26A378(uint64_t a1, uint64_t **a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v4 = (os_log_s *)*(id *)sub_138E8(13);
    uint64_t v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3944;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread.",  buf,  0x12u);
    }
  }

  uint64_t v7 = v3[18];
  uint64_t v6 = v3[19];
  if (v7 != v6)
  {
    id v8 = a3 + 1;
    while (1)
    {
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_36;
      }
      BOOL v10 = *(_DWORD **)v7;
      unsigned int v11 = *(_DWORD *)(*(void *)v7 + 576LL);
      unsigned int v12 = *(_DWORD *)(*(void *)v7 + 580LL);
      uint64_t v13 = a3 + 1;
      do
      {
        unsigned int v14 = *(_DWORD *)(v9 + 28);
        BOOL v16 = v14 == v11;
        BOOL v15 = v14 < v11;
        if (v16) {
          BOOL v15 = *(_DWORD *)(v9 + 32) < v12;
        }
        BOOL v16 = !v15;
        if (v15) {
          unint64_t v17 = (uint64_t *)(v9 + 8);
        }
        else {
          unint64_t v17 = (uint64_t *)v9;
        }
        if (v16) {
          uint64_t v13 = (uint64_t *)v9;
        }
        uint64_t v9 = *v17;
      }

      while (*v17);
      if (v13 == v8) {
        goto LABEL_36;
      }
      unsigned int v18 = *((_DWORD *)v13 + 7);
      BOOL v19 = *((_DWORD *)v13 + 8) > v12;
      BOOL v16 = v18 == v11;
      BOOL v20 = v18 > v11;
      if (v16) {
        BOOL v20 = v19;
      }
      if (v20) {
        goto LABEL_36;
      }
      BOOL v21 = v3 + 23 == (void *)sub_71A5C((uint64_t)(v3 + 22), v11, v12);
      uint64_t v22 = (*(uint64_t (**)(_DWORD *))(*(void *)v10 + 528LL))(v10);
      uint64_t v23 = pthread_self();
      char v24 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v22 + 16));
      int v25 = pthread_equal(v23, v24);
      if (v21) {
        break;
      }
      if (v25) {
        goto LABEL_36;
      }
      uint64_t v26 = pthread_self();
      __int16 v27 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v22 + 104));
      if (pthread_equal(v26, v27)) {
        goto LABEL_36;
      }
      uint64_t v28 = (os_log_s *)*(id *)sub_138E8(13);
      uint64_t v29 = v28;
      if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v30 = v10[2];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3953;
        __int16 v112 = 1024;
        int v113 = v30;
        __int16 v114 = 2048;
        unint64_t v115 = v10;
        uint64_t v31 = v29;
        uint64_t v32 = "%25s:%-5d ASSERTION FAILURE: deviceRouteChangeInProgess is true, but the IO monitor for device ID %u (%p"
              ") is not held by this thread.";
LABEL_34:
        _os_log_impl(&dword_0, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x22u);
      }

void sub_26AE20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26)
{
  if (a24) {
    sub_13850((uint64_t)&a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_26AF10(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = sub_117CFC(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), *a2, a2[1], (uint64_t *)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }

    while (!v6);
  }

  *(void *)(a1 + 8) = v5;
  return a1;
}

void *sub_26AF80()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479268;
  return result;
}

void sub_26AFA4(uint64_t a1, void *a2)
{
  *a2 = &off_479268;
}

uint64_t sub_26AFBC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int16 *)(a2 + 184) >> 4) & 1;
}

void sub_26AFC8()
{
  unsigned int v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315394;
      uint64_t v3 = "Log.cpp";
      __int16 v4 = 1024;
      int v5 = 115;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Virtual Audio logging has been initialized.",  (uint8_t *)&v2,  0x12u);
    }
  }

uint64_t sub_26B088(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  uint64_t v3 = 0x676C6F6268657973LL;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v1 + 72LL))(v1, 1LL, &v3, 1LL);
}

uint64_t sub_26B0D4(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = a2 + 1;
  int v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v7 = sub_6A92C(*(void *)(a1 + 128), *((_DWORD *)v4 + 7));
    if (v7)
    {
      id v8 = *(std::__shared_weak_count **)(v7 + 96);
      if (v8)
      {
        uint64_t v9 = *(void *)(v7 + 88);
        p_uint64_t shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          unint64_t v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        unsigned int v12 = std::__shared_weak_count::lock(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v12) {
          break;
        }
      }
    }

uint64_t sub_26B218(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v6 = sub_5954C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 304LL))(v6) & 1) == 0)
  {
    uint64_t v23 = sub_138E8(13);
    id v24 = sub_8C7D4(1, *(void **)v23, *(void *)(v23 + 8));
    int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    uint64_t v26 = v25;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2530;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Attempt to change routes prior to establishing a valid s erialization context.",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003329396;
  }

  sub_6DD4();
  (*(void (**)(void))(qword_48F828 + 16))();
  std::string::size_type v52 = a2;
  *(void *)AudioObjectPropertyAddress buf = &off_479098;
  *(void *)&_DWORD buf[8] = &v52;
  *(void *)&uint8_t buf[24] = buf;
  sub_35678(v53, 0, (uint64_t)buf);
  uint64_t v7 = *(void **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = buf;
    goto LABEL_6;
  }

  if (*(void *)&buf[24])
  {
    uint64_t v8 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_RouteChange", 0xEuLL) == &qword_4938E0)
  {
    os_signpost_id_t v11 = 0LL;
  }

  else
  {
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v11 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    uint64_t v13 = (os_log_s *)(id)qword_493900;
    unint64_t v14 = v13;
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      *(_WORD *)AudioObjectPropertyAddress buf = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v14,  OS_SIGNPOST_INTERVAL_BEGIN,  v11,  "VA_RouteChange",  "Route configuration change",  buf,  2u);
    }
  }

  os_signpost_id_t v42 = v11;
  uint64_t v15 = sub_138E8(42);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    BOOL v16 = (os_log_s *)*(id *)v15;
    if (v16)
    {
      BOOL v17 = v16;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 85;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = "kRouteChange";
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }

  uint64_t v18 = *(void *)(a3 + 24);
  if (!v18) {
    sub_82CEC();
  }
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v18 + 48LL))(buf);
  *(double *)&uint8_t buf[24] = (double)((std::chrono::system_clock::now().__d_.__rep_ - v9.__d_.__rep_) / 1000);
  char v50 = 1;
  sub_257FAC(&v38, a2, (uint64_t)buf);
  if (v38)
  {
    uint64_t v28 = sub_138E8(13);
    id v29 = sub_8C7D4(1, *(void **)v28, *(void *)(v28 + 8));
    int v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    uint64_t v31 = v30;
    if (v30)
    {
      uint64_t v32 = v30;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v38);
        unint64_t v33 = v37 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)int v43 = 136315650;
        int v44 = "VirtualAudio_PlugIn.mm";
        __int16 v45 = 1024;
        int v46 = 2549;
        __int16 v47 = 2080;
        uint64_t v48 = v33;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (routeUpdateInfo.first): Route change failed: %s.",  v43,  0x1Cu);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    int v34 = __cxa_allocate_exception(0x10uLL);
    unsigned int v35 = v38;
    *(void *)int v34 = &off_4865A0;
    v34[2] = v35;
  }

  *(_DWORD *)a1 = *(_DWORD *)&buf[12];
  CFTypeRef v19 = cf;
  *(void *)(a1 + 8) = cf;
  int v20 = v40;
  *(_BYTE *)(a1 + 16) = v40;
  *(_BYTE *)(a1 + 17) = v41;
  if (v20 && v19) {
    CFRetain(v19);
  }
  sub_13850((uint64_t)&cf);
  if (v51[744]) {
    sub_52EF0((uint64_t)v51);
  }
  *(void *)AudioObjectPropertyAddress buf = off_4709D0;
  BOOL v21 = *(void **)&buf[16];
  if (*(void *)&buf[16])
  {
    sub_10AF78((uint64_t *)(*(void *)&buf[16] + 16LL));
    operator delete(v21);
  }

  sub_271E5C(&v42);
  return sub_35B78((uint64_t)v53);
}

void sub_26B774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  os_signpost_id_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);

  sub_13850((uint64_t)va);
  sub_259F0C((uint64_t)va2);
  sub_271E5C((os_signpost_id_t *)va1);
  sub_35B78(v6);
  _Unwind_Resume(a1);
}

os_log_s *sub_26B810(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_E5784(v43, *(void *)(a1 + 216) + 8LL);
  sub_E57D8((uint64_t)buf, a1 + 224, (uint64_t)v43, *(unsigned int *)(a1 + 492), a1 + 440);
  uint64_t v3 = **(void **)(a1 + 112);
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v4 = v3 + 8;
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v4;
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 >= *(_DWORD *)buf;
    if (v8 >= *(_DWORD *)buf) {
      unsigned __int8 v10 = (uint64_t *)v5;
    }
    else {
      unsigned __int8 v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }

  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= *(_DWORD *)buf)
  {
    unsigned __int16 v31 = sub_2D4E44(v7 + 80, v47);
    if ((_BYTE)v31) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = v31 >= 0x100u;
    }
    char v11 = !v32;
  }

  else
  {
LABEL_12:
    char v11 = 1;
  }

  sub_32C8C(*(void **)&v51[4]);
  if (v43[16]) {
    sub_13850((uint64_t)v43);
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v18 = sub_138E8(2);
    if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    {
      CFTypeRef v19 = (os_log_s *)*(id *)v18;
      int v20 = v19;
      if (!v19) {
        goto LABEL_62;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v47 = "VirtualAudio_PlugIn.mm";
        __int16 v48 = 1024;
        int v49 = 1958;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ignoring all beam former preferences based on current category and mode",  buf,  0x12u);
      }
    }

    goto LABEL_61;
  }

  uint64_t v12 = *(void *)(a1 + 216);
  if (*(_BYTE *)v12 && *(void *)(v12 + 32))
  {
    uint64_t v13 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
    unint64_t v14 = sub_271894(a1, v13);
    if (HIDWORD(v14))
    {
      float v15 = *(float *)&v14;
      if (*(float *)&v14 != (float)*(unsigned int *)(*(void *)(a1 + 216) + 48LL))
      {
        uint64_t v16 = (os_log_s *)*(id *)sub_138E8(2);
        uint64_t v17 = v16;
        if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v47 = "VirtualAudio_PlugIn.mm";
          __int16 v48 = 1024;
          int v49 = 2001;
          __int16 v50 = 2048;
          *(double *)uint64_t v51 = v15;
          _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "%25s:%-5d Setting beam direction (%f) on VP", buf, 0x1Cu);
        }

        sub_271D48(*(void *)(a1 + 216), v15);
LABEL_68:
        int v20 = (os_log_s *)(&dword_0 + 1);
        if (!v2) {
          return v20;
        }
        goto LABEL_63;
      }
    }

    goto LABEL_61;
  }

  BOOL v21 = *(uint64_t **)(a1 + 144);
  uint64_t v22 = *(uint64_t **)(a1 + 152);
  uint64_t v23 = sub_72A04(1986291305, 0, v21, v22);
  if (v23)
  {
    uint64_t v24 = v23;
    if (((*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(v23 + 1008) + 352LL))( *(void *)(v23 + 1008),  1650814258LL,  0LL,  0LL) & 1) != 0) {
      goto LABEL_33;
    }
    BOOL v21 = *(uint64_t **)(a1 + 144);
    uint64_t v22 = *(uint64_t **)(a1 + 152);
  }

  uint64_t v24 = sub_72A04(1986291046, 0, v21, v22);
  if (!v24)
  {
    uint64_t v38 = sub_138E8(13);
    id v39 = sub_8C7D4(1, *(void **)v38, *(void *)(v38 + 8));
    unsigned __int8 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    char v41 = v40;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v47 = "VirtualAudio_PlugIn.mm";
      __int16 v48 = 1024;
      int v49 = 2056;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [deviceToUpdate is NULL]: VAD is Null on Setting Beam Direction",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VAD is Null on Setting Beam Direction");
  }

void sub_26BF68(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_26C00C(uint64_t **a1)
{
  int v2 = (os_log_s *)*(id *)sub_138E8(2);
  uint64_t v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "VirtualAudio_PlugIn.mm";
    __int16 v8 = 1024;
    int v9 = 1060;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "%25s:%-5d PV_OverlayTunings for devices", (uint8_t *)&v6, 0x12u);
  }

  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  while (v5 != v4)
  {
    if (*v5) {
      sub_C250C(*v5);
    }
    ++v5;
  }

void sub_26C0F4(void *__p)
{
  int v2 = (void *)__p[1];
  if (v2)
  {
    std::string __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_26C124(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = sub_72A04(1986291046, 0, a1, a2);
  uint64_t v3 = operator new(8uLL);
  *uint64_t v3 = 0xC2F0000000000000LL;
  uint64_t v4 = (os_log_s *)*(id *)sub_138E8(2);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    uint64_t v7 = "VirtualAudio_PlugIn.mm";
    __int16 v8 = 1024;
    int v9 = 7341;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring Earplug DSP", (uint8_t *)&v6, 0x12u);
  }

  (*(void (**)(void, uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(**(void **)(v2 + 1008) + 400LL))( *(void *)(v2 + 1008),  1886156135LL,  64002LL,  v3,  8LL,  1LL,  0LL);
  operator delete(v3);
}

void sub_26C258(_Unwind_Exception *a1)
{
}

void sub_26C278(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 4)
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v68 = 0LL;
    int __val = 2;
    strcpy(buf, "rpscgcrv");
    _BYTE buf[12] = 0;
    *(void *)&buf[16] = &buf[24];
    *(void *)&uint8_t buf[24] = 0LL;
    unsigned int v72 = 0LL;
    unsigned int v73 = 0LL;
    uint64_t v70 = 0LL;
    uint64_t v71 = &v72;
    unsigned int v74 = &v75;
    uint64_t v75 = 0LL;
    v78[0] = 0LL;
    v78[1] = 0LL;
    CFTypeRef cf = 0LL;
    char v77 = v78;
    v79[0] = 0LL;
    v79[1] = 0LL;
    v78[2] = v79;
    char v80 = 0;
    char v81 = 0;
    memset(&v84, 0, sizeof(v84));
    uint64_t v85 = 0x756E64656175746FLL;
    __int128 v86 = 0u;
    __int128 v87 = 0u;
    __int128 v88 = 0u;
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    uint64_t v91 = 1065353216LL;
    __int128 v92 = 0u;
    __int128 v93 = 0u;
    uint64_t v94 = 1065353216LL;
    __int128 v95 = 0u;
    __int128 v96 = 0u;
    uint64_t v97 = 1065353216LL;
    char v98 = 0;
    char v99 = 0;
    char v101 = 0;
    char v102 = 0;
    int v100 = 0;
    int v13 = *(_DWORD *)(a2 + 240);
    int v82 = 1668248944;
    int v83 = v13;
    std::string::operator=(&v84, (const std::string *)(a2 + 248));
    uint64_t v85 = *(void *)(a2 + 272);
    sub_6E1CC((uint64_t)&v64, *(uint64_t **)(a2 + 112), (uint64_t)buf, &qword_492FB0, 0);
    int __val = (int)v64.__r_.__value_.__l.__data_;
    unint64_t v14 = (uint64_t *)__p[0];
    if (__p[0])
    {
      float v15 = (uint64_t *)__p[1];
      uint64_t v16 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v17 = v15 - 4;
          sub_85B80(v15 - 3);
          float v15 = v17;
        }

        while (v17 != v14);
        uint64_t v16 = __p[0];
      }

      __p[1] = v14;
      operator delete(v16);
    }

    *(_OWORD *)std::string __p = *(_OWORD *)&v64.__r_.__value_.__r.__words[1];
    uint64_t v68 = v65;
    uint64_t v65 = 0LL;
    *(_OWORD *)&v64.__r_.__value_.__r.__words[1] = 0uLL;
    p_std::string::size_type size = &v64.__r_.__value_.__l.__size_;
    sub_135F74((void ***)&p_size);
    sub_53068((uint64_t)buf);
    if (__val)
    {
      id v18 = *(id *)sub_138E8(1);
      CFTypeRef v19 = v18;
      if (v18)
      {
        int v20 = (os_log_s *)v18;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          std::to_string(&v64, __val);
          BOOL v21 = (v64.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v64 : (std::string *)v64.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7623;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Couldn't find active ports for speech recognition: '%s'.",  buf,  0x1Cu);
        }
      }

      *(_DWORD *)a1 = 1936289391;
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + memset(buf, 0, 24) = 0LL;
      *(void *)(a1 + 8) = 0LL;
      goto LABEL_111;
    }

    memset(&v64, 0, sizeof(v64));
    uint64_t v22 = __p[0];
    if (__p[0] != __p[1])
    {
      while (v22[1] || *v22 != 1986291046)
      {
        v22 += 8;
        if (v22 == __p[1]) {
          goto LABEL_36;
        }
      }
    }

    if (v22 == __p[1])
    {
LABEL_36:
      uint64_t v24 = sub_138E8(13);
      id v25 = sub_8C7D4(1, *(void **)v24, *(void *)(v24 + 8));
      float v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      uint64_t v27 = v26;
      if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7635;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to find default VAD",  buf,  0x12u);
      }

      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to find default VAD");
    }

    memset(buf, 0, 24);
    strcpy(&buf[24], "cwdv");
    LOBYTE(v70) = 0;
    LODWORD(v71) = 3;
    unsigned int v73 = 0LL;
    unsigned int v74 = 0LL;
    unsigned int v72 = &v73;
    CFTypeRef cf = 0LL;
    LODWORD(v75) = 44731034;
    sub_252EDC((uint64_t *)&p_size, a2, (uint64_t)(v22 + 2), (uint64_t)buf);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v73);
    if (*(void *)buf)
    {
      *(void *)&_DWORD buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    id v29 = __p[0];
    int v30 = __p[1];
    if (__p[0] != __p[1])
    {
      while (v29[1] || *v29 != 1987276900)
      {
        v29 += 8;
        if (v29 == __p[1])
        {
          id v29 = __p[1];
          break;
        }
      }
    }

    uint64_t v32 = sub_138E8(8);
    if ((*(_BYTE *)(v32 + 8) & 1) != 0)
    {
      id v33 = *(id *)v32;
      if (v33)
      {
        int v34 = (os_log_s *)v33;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(&v61, *(unsigned int *)(a2 + 240));
          uint64_t v35 = (v61.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v61 : (std::string *)v61.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7651;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v35;
          _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Using mClientRequestedActivationInfo %s.",  buf,  0x1Cu);
        }
      }
    }

    char v37 = __p[0];
    int v36 = __p[1];
    if (__p[0] != __p[1])
    {
      while (v37[1] || *v37 != 1987277417)
      {
        v37 += 8;
        if (v37 == __p[1])
        {
          char v37 = __p[1];
          break;
        }
      }
    }

    int v39 = *(_DWORD *)(a2 + 240);
    if (v39 > 1752396913)
    {
      if (v39 == 1918986611 || v39 == 1752396914)
      {
        int v43 = (os_log_s *)*(id *)sub_138E8(2);
        uint64_t v44 = v43;
        if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7664;
          _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d activation trigger is raiseToSpeak or HS Training",  buf,  0x12u);
        }

        if (v29 == v30) {
          int v45 = -2569;
        }
        else {
          int v45 = 1269;
        }
        unsigned int v41 = v45 + 1936289391;
        goto LABEL_90;
      }
    }

    else if (v39 == 1651795060 || v39 == 1751414371)
    {
      goto LABEL_74;
    }

    int v54 = sub_E450C(*(_DWORD *)(a2 + 240)) ^ 1;
    if (v39 == 1684108899) {
      LOBYTE(v54) = 0;
    }
    if ((v54 & 1) != 0)
    {
      if (v37 == v36)
      {
        if (sub_27164C(p_size, v63, a2))
        {
          unsigned int v41 = 1936289391;
          if (sub_271710(p_size, v63, a2))
          {
            sub_271300((uint64_t)buf, a2, &p_size);
            if ((_BYTE)v70) {
              unsigned int v41 = *(_DWORD *)buf;
            }
            else {
              unsigned int v41 = 1936289391;
            }
            if ((_BYTE)v70)
            {
              if ((buf[31] & 0x80000000) != 0) {
                sub_24054(&v61, *(void **)&buf[8], *(unint64_t *)&buf[16]);
              }
              else {
                std::string v61 = *(std::string *)&buf[8];
              }
            }

            else
            {
              sub_7D084(&v61, "");
            }

            std::string v64 = v61;
            if ((_BYTE)v70 && (buf[31] & 0x80000000) != 0) {
              operator delete(*(void **)&buf[8]);
            }
          }
        }

        else
        {
          unsigned int v41 = 1936289391;
        }
      }

      else
      {
        memset(buf, 0, 24);
        strcpy(&buf[24], "cwdv");
        LOBYTE(v70) = 0;
        LODWORD(v71) = 3;
        unsigned int v73 = 0LL;
        unsigned int v74 = 0LL;
        unsigned int v72 = &v73;
        CFTypeRef cf = 0LL;
        LODWORD(v75) = 44731034;
        sub_252EDC((uint64_t *)&v61, a2, (uint64_t)(v37 + 2), (uint64_t)buf);
        sub_A0DB0((uint64_t)buf);
        sub_271300((uint64_t)buf, a2, &v61);
        if ((_BYTE)v70) {
          unsigned int v41 = *(_DWORD *)buf;
        }
        else {
          unsigned int v41 = 1936289391;
        }
        if ((_BYTE)v70)
        {
          if ((buf[31] & 0x80000000) != 0) {
            sub_24054(&__dst, *(void **)&buf[8], *(unint64_t *)&buf[16]);
          }
          else {
            std::string __dst = *(std::string *)&buf[8];
          }
        }

        else
        {
          sub_7D084(&__dst, "");
        }

        std::string v64 = __dst;
        if ((_BYTE)v70 && (buf[31] & 0x80000000) != 0) {
          operator delete(*(void **)&buf[8]);
        }
        sub_32C8C((void *)v61.__r_.__value_.__l.__size_);
      }

      goto LABEL_90;
    }

void sub_26CDFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void **buf, void *__p, __int16 a34, __int16 a35, int a36, int a37, __int16 a38, char a39, char a40, char a41)
{
  if (a41 && a40 < 0) {
    operator delete(__p);
  }
  sub_32C8C(a19);
  if (a26 < 0) {
    operator delete(a21);
  }
  AudioObjectPropertyAddress buf = a10;
  sub_135F74(&buf);
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v41 + 24LL))(v41);
  }
  _Unwind_Resume(a1);
}

void sub_26D1F4(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t a4, int a5)
{
  if (!sub_1CBD44())
  {
    sub_6DD4();
    if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
    {
      int v39 = (os_log_s *)*(id *)sub_138E8(13);
      unsigned __int8 v40 = v39;
      if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7435;
        _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The routing mutex is not held by this thread",  buf,  0x12u);
      }
    }

    uint64_t v41 = sub_72A04(1986291046, 0, *a2, a2[1]);
    if (!v41)
    {
      uint64_t v94 = sub_138E8(13);
      id v95 = sub_8C7D4(1, *(void **)v94, *(void *)(v94 + 8));
      __int128 v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
      uint64_t v97 = v96;
      if (v96 && os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7438;
        _os_log_impl( &dword_0,  v97,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No default VAD present",  buf,  0x12u);
      }

      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No default VAD present");
    }

    int v42 = (void *)sub_135A0(v41, 1);
    int v43 = sub_26B0D4(a1, v42, 1886613611);
    uint64_t v44 = *a2;
    int v45 = a2[1];
    if (*a2 == v45) {
      return;
    }
    unint64_t v46 = HIDWORD(a3);
    BOOL v48 = (_DWORD)a3 == 1668703084 || (_DWORD)a3 == 1668576377;
    BOOL v99 = v48;
    int v49 = v43 ^ 1;
    while (1)
    {
      uint64_t v50 = *v44;
      uint64_t v51 = sub_135A0(*v44, 1);
      sub_86550((uint64_t *)&__p, v51);
      int v52 = sub_14D9C8();
      if ((_DWORD)v46 == 1918990112) {
        int v53 = v52;
      }
      else {
        int v53 = 0;
      }
      *(void *)AudioObjectPropertyAddress buf = 0x273706163LL;
      *(_DWORD *)&_DWORD buf[8] = 0;
      unint64_t v54 = sub_B8C00(v50);
      *((void *)&v57 + 1) = v55;
      *(void *)&__int128 v57 = v54;
      uint64_t v56 = v57 >> 32;
      if ((v56 & 0xFF00000000LL) != 0) {
        int v58 = v56;
      }
      else {
        int v58 = 0;
      }
      id v59 = *(id *)sub_138E8(2);
      unint64_t v60 = v59;
      if (v59)
      {
        std::string v61 = (os_log_s *)v59;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v109 = *(void *)(v50 + 576);
          sub_33464(&v104, (unsigned int *)&v109);
          uint64_t v62 = &v104;
          if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v62 = (std::string *)v104.__r_.__value_.__r.__words[0];
          }
          if (v58) {
            int v63 = v53;
          }
          else {
            int v63 = 1;
          }
          BOOL v26 = v63 == 0;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          std::string v64 = "active";
          if (!v26) {
            std::string v64 = "none";
          }
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7453;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v62;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = v64;
          _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VA/HAL Speaker protection for VAD '%s' is %s.",  buf,  0x26u);
        }
      }

      if ((sub_7531C() & 1) == 0) {
        break;
      }
      int v65 = 0;
LABEL_118:
      int v67 = v65 ^ 1;
      if (v58) {
        int v67 = 0;
      }
      if (*(void *)(v50 + 576) == 1986291046LL) {
        BOOL v68 = v67;
      }
      else {
        BOOL v68 = v58 == 0;
      }
      if (v53)
      {
        if (v58)
        {
          __int16 v69 = (os_log_s *)*(id *)sub_138E8(2);
          uint64_t v70 = v69;
          if (v69 && os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7470;
            _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d RawModeDisablesSpeakerProcessing is active, but Speaker Protection is also active in HAL",  buf,  0x12u);
          }
        }
      }

      else if (v68 && sub_753A8())
      {
        char v81 = *(void **)sub_138E8(2);
        int v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)AudioObjectPropertyAddress buf = 0;
          _os_log_fault_impl( &dword_0,  (os_log_t)v81,  OS_LOG_TYPE_FAULT,  "Speaker Protection is not active on speaker route",  buf,  2u);
        }

void sub_26DF64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_26E06C(uint64_t a1)
{
  uint64_t v2 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (!v2 || (uint64_t v3 = v2, !sub_C4704(*(void *)(v2 + 1008), 0)))
  {
    sub_2712D0();
    return;
  }

  uint64_t v4 = sub_72A04(1987277417, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  uint64_t v5 = v4;
  if (v4) {
    int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112LL))(v4);
  }
  else {
    int v52 = 1;
  }
  uint64_t v6 = sub_135A0(v3, 1);
  sub_86550((uint64_t *)&v53, v6);
  uint64_t v7 = v53;
  if (v53 == v54)
  {
    int v22 = 0;
    goto LABEL_33;
  }

  while (1)
  {
    uint64_t v8 = sub_6A92C(*(void *)(a1 + 128), *((_DWORD *)v7 + 7));
    if (!v8) {
      goto LABEL_24;
    }
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 96);
    if (!v9) {
      goto LABEL_24;
    }
    uint64_t v10 = *(void *)(v8 + 88);
    p_uint64_t shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    unint64_t v13 = std::__shared_weak_count::lock(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v13) {
      goto LABEL_24;
    }
    if (!v10)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }

      goto LABEL_24;
    }

    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 480LL))(v10);
    char v15 = v14;
    CFStringRef v16 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17) {
      break;
    }
    if ((v14 & 1) != 0) {
      goto LABEL_87;
    }
LABEL_24:
    int v20 = v7[1];
    if (v20)
    {
      do
      {
        BOOL v21 = (void **)v20;
        int v20 = (void *)*v20;
      }

      while (v20);
    }

    else
    {
      do
      {
        BOOL v21 = (void **)v7[2];
        BOOL v33 = *v21 == v7;
        uint64_t v7 = v21;
      }

      while (!v33);
    }

    uint64_t v7 = v21;
    if (v21 == v54)
    {
      int v22 = 0;
      goto LABEL_31;
    }
  }

  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if ((v15 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_87:
  int v22 = 1;
LABEL_31:
  uint64_t v7 = v53;
LABEL_33:
  if (v7 != v54)
  {
    do
    {
      uint64_t v23 = sub_6A92C(*(void *)(a1 + 128), *((_DWORD *)v7 + 7));
      if (v23)
      {
        uint64_t v24 = *(std::__shared_weak_count **)(v23 + 96);
        if (v24)
        {
          uint64_t v25 = *(void *)(v23 + 88);
          BOOL v26 = (unint64_t *)&v24->__shared_weak_owners_;
          do
            unint64_t v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          __int128 v28 = std::__shared_weak_count::lock(v24);
          std::__shared_weak_count::__release_weak(v24);
          if (v28)
          {
            if (v25)
            {
              uint64_t v29 = *(void *)(v25 + 192);
              strcpy(buf, "empsbolg");
              buf[9] = 0;
              *(_WORD *)&buf[10] = 0;
              unint64_t v30 = sub_5C2F8(v29);
              *((void *)&v32 + 1) = v31;
              *(void *)&__int128 v32 = v30;
              BOOL v33 = ((v32 >> 32) & 0xFF00000000LL) == 0 || (v30 & 0x100000000LL) == 0;
              if (v33)
              {
                sub_75418(buf, a1);
                uint64_t v35 = *(void *)buf;
                uint64_t v34 = *(void *)&buf[8];
                sub_52EF0((uint64_t)buf);
                v55[0] = v35;
                v55[1] = v34;
                sub_204C7C(v25);
              }

              else
              {
                uint64_t v38 = (os_log_s *)*(id *)sub_138E8(17);
                int v39 = v38;
                if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2281;
                  _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PME running on far end. Bypassing source side processing.",  buf,  0x12u);
                }
              }

              unsigned __int8 v40 = (unint64_t *)&v28->__shared_owners_;
              do
                unint64_t v37 = __ldaxr(v40);
              while (__stlxr(v37 - 1, v40));
            }

            else
            {
              std::string::size_type v36 = (unint64_t *)&v28->__shared_owners_;
              do
                unint64_t v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
            }

            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
      }

      uint64_t v41 = v7[1];
      if (v41)
      {
        do
        {
          int v42 = (void **)v41;
          uint64_t v41 = (void *)*v41;
        }

        while (v41);
      }

      else
      {
        do
        {
          int v42 = (void **)v7[2];
          BOOL v33 = *v42 == v7;
          uint64_t v7 = v42;
        }

        while (!v33);
      }

      uint64_t v7 = v42;
    }

    while (v42 != v54);
  }

  if (v22)
  {
    sub_75418(buf, a1);
    uint64_t v43 = *(void *)buf;
    sub_52EF0((uint64_t)buf);
    uint64_t v44 = (os_log_s *)*(id *)sub_138E8(2);
    int v45 = v44;
    if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2301;
      __int16 v58 = 1024;
      int v59 = v43;
      __int16 v60 = 1024;
      int v61 = HIDWORD(v43);
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Port Subtype supported by PME for route category %u and mode %u",  buf,  0x1Eu);
    }

    sub_C8264(v3);
    if (v5) {
      sub_C8264(v5);
    }
  }

  else
  {
    unint64_t v46 = (os_log_s *)*(id *)sub_138E8(2);
    unsigned int v47 = v46;
    if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2318;
      _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Port Subtype is not supported by PME - Clearing PME state",  buf,  0x12u);
    }

    sub_2712D0();
  }

  sub_E47FC(v3);
  if (v5) {
    sub_E47FC(v5);
  }
  if (v52)
  {
    if (*(_BYTE *)(v3 + 1074))
    {
      BOOL v48 = *(void **)(v3 + 1040);
      if (v48 != (void *)(v3 + 1048))
      {
        do
        {
          int v49 = *((_DWORD *)v48 + 7);
          *(void *)AudioObjectPropertyAddress buf = 0x6F757470766F6C6DLL;
          *(_DWORD *)&_DWORD buf[8] = v49;
          LODWORD(v55[0]) = 0;
          unsigned int v56 = 4;
          (*(void (**)(uint64_t, _BYTE *, void, void, unsigned int *, void *))(*(void *)v3 + 56LL))( v3,  buf,  0LL,  0LL,  &v56,  v55);
          (*(void (**)(uint64_t, _BYTE *, void, void, void, void *, void))(*(void *)v3 + 64LL))( v3,  buf,  0LL,  0LL,  v56,  v55,  0LL);
          uint64_t v50 = (void *)v48[1];
          if (v50)
          {
            do
            {
              uint64_t v51 = v50;
              uint64_t v50 = (void *)*v50;
            }

            while (v50);
          }

          else
          {
            do
            {
              uint64_t v51 = (void *)v48[2];
              BOOL v33 = *v51 == (void)v48;
              BOOL v48 = v51;
            }

            while (!v33);
          }

          BOOL v48 = v51;
        }

        while (v51 != (void *)(v3 + 1048));
      }
    }

    else
    {
      strcpy(buf, "mlovptuo");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v55[0]) = 0;
      unsigned int v56 = 4;
      (*(void (**)(uint64_t, _BYTE *, void, void, unsigned int *, void *))(*(void *)v3 + 56LL))( v3,  buf,  0LL,  0LL,  &v56,  v55);
      (*(void (**)(uint64_t, _BYTE *, void, void, void, void *, void))(*(void *)v3 + 64LL))( v3,  buf,  0LL,  0LL,  v56,  v55,  0LL);
    }
  }

  sub_32C8C(v54[0]);
}

void sub_26E718( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_26E7BC(uint64_t a1)
{
  uint64_t v1 = v3;
  sub_52EF0((uint64_t)&v3);
  return v1;
}

void sub_26E804(uint64_t a1, unint64_t a2, int a3, CFTypeRef cf)
{
  if (cf)
  {
    CFRetain(cf);
    sub_3617C(&cfa, cf);
  }

  else
  {
    CFTypeRef cfa = 0LL;
  }

  if ((int)a2 > 1668313665)
  {
    if ((_DWORD)a2 == 1668313715) {
      goto LABEL_10;
    }
    unsigned __int16 v7 = 29250;
  }

  else
  {
    if ((_DWORD)a2 == 1668301427) {
      goto LABEL_10;
    }
    unsigned __int16 v7 = 24946;
  }

  if ((_DWORD)a2 != (v7 | 0x63700000)) {
    goto LABEL_19;
  }
LABEL_10:
  unint64_t v8 = HIDWORD(a2);
  if ((int)v8 > 1936749156)
  {
    if ((_DWORD)v8 != 1937007472)
    {
      unsigned __int16 v9 = 29285;
LABEL_15:
      if ((_DWORD)v8 != (v9 | 0x73700000)) {
        goto LABEL_19;
      }
    }
  }

  else if ((_DWORD)v8 != 1835229549)
  {
    unsigned __int16 v9 = 25456;
    goto LABEL_15;
  }

  BOOL v11 = *(uint64_t **)(a1 + 144);
  uint64_t v10 = *(uint64_t **)(a1 + 152);
  uint64_t v12 = sub_72A04(1986291305, 0, v11, v10);
  if (!v12) {
    uint64_t v12 = sub_72A04(1986291046, 0, v11, v10);
  }
  sub_C6E94(v12, (const __CFDictionary *)cfa, v8);
LABEL_19:
  if (cfa) {
    CFRelease(cfa);
  }
}

void sub_26E950(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_26E970(uint64_t a1, __int128 *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &off_4837E8;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7)
  {
    uint64_t v6 = (void *)(a1 + 40);
    goto LABEL_5;
  }

  if (v7 != a3)
  {
    *(void *)(a1 + 40) = v7;
LABEL_5:
    void *v6 = 0LL;
    goto LABEL_7;
  }

  *(void *)(a1 + 40) = v5;
  (*(void (**)(void, uint64_t))(*(void *)*v6 + 24LL))(*v6, v5);
LABEL_7:
  unint64_t v8 = (_BYTE *)(a1 + 48);
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(v8, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v9 = *a2;
    *(void *)(a1 + 64) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v8 = v9;
  }

  return a1;
}

void sub_26EA1C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 + 40);
  if (v4 == v1)
  {
    uint64_t v5 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
    uint64_t v1 = *(void **)(v2 + 40);
  }

  (*(void (**)(void *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_26EA58(uint64_t *a1)
{
  std::string __p = a1;
  uint64_t v50 = *a1;
  BOOL v1 = sub_14DB2C();
  int v2 = sub_14DE1C("EnableHALMediaMonitor");
  uint64_t v3 = (os_log_s *)*(id *)sub_138E8(2);
  uint64_t v4 = v3;
  if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v54 = 1024;
    int v55 = 7961;
    __int16 v56 = 1024;
    LODWORD(v57[0]) = v1;
    WORD2(v57[0]) = 1024;
    *(_DWORD *)((char *)v57 + 6) = v2 > 0;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlugInHUPhandler VAD capture=%d HAL capture=%d\n",  buf,  0x1Eu);
  }

  uint64_t v5 = sub_138E8(2);
  uint64_t v6 = sub_138E8(13);
  char v7 = 0;
  uint64_t v8 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1LL;
    if ((v11 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_10:
  uint64_t v12 = (os_log_s *)*(id *)v5;
  unint64_t v13 = v12;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v54 = 1024;
    int v55 = 7133;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",  buf,  0x12u);
  }

  uint64_t v14 = sub_138E8(2);
  uint64_t v15 = sub_138E8(13);
  char v16 = 0;
  uint64_t v17 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = *(int *)&buf[4 * v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1LL;
    if ((v20 & 1) != 0) {
      goto LABEL_19;
    }
  }

  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
LABEL_19:
  BOOL v21 = (os_log_s *)*(id *)v14;
  int v22 = v21;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v54 = 1024;
    int v55 = 7134;
    _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ***** Logging Current VA State *****", buf, 0x12u);
  }

  sub_250F04(&v51, v50);
  uint64_t v23 = v51;
  for (uint64_t i = v52; v23 != i; v23 += 3)
  {
    uint64_t v25 = sub_138E8(2);
    uint64_t v26 = sub_138E8(13);
    char v27 = 0;
    uint64_t v28 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *(int *)&buf[4 * v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1LL;
      if ((v31 & 1) != 0) {
        goto LABEL_29;
      }
    }

    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_29:
    __int128 v32 = (os_log_s *)*(id *)v25;
    BOOL v33 = v32;
    if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = v23;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v54 = 1024;
      int v55 = 7139;
      __int16 v56 = 2080;
      v57[0] = v34;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }

  uint64_t v35 = sub_138E8(2);
  uint64_t v36 = sub_138E8(13);
  char v37 = 0;
  uint64_t v38 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v39 = *(void *)(v35 + 8);
  while (1)
  {
    uint64_t v40 = *(int *)&buf[4 * v38];
    char v41 = v37;
    if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
      break;
    }
    char v37 = 1;
    uint64_t v38 = 1LL;
    if ((v41 & 1) != 0) {
      goto LABEL_41;
    }
  }

  if ((v39 & v40) == 0) {
    uint64_t v35 = v36;
  }
LABEL_41:
  int v42 = (os_log_s *)*(id *)v35;
  uint64_t v43 = v42;
  if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v54 = 1024;
    int v55 = 7143;
    _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<",  buf,  0x12u);
  }

  *(void *)AudioObjectPropertyAddress buf = &v51;
  sub_8CD60((void ***)buf);
  uint64_t v44 = (os_log_s *)*(id *)sub_138E8(2);
  int v45 = v44;
  if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v54 = 1024;
    int v55 = 7731;
    _os_log_impl(&dword_0, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d updating stream capture settings", buf, 0x12u);
  }

  unint64_t v46 = *(void **)(v50 + 144);
  unsigned int v47 = *(void **)(v50 + 152);
  while (v46 != v47)
  {
    (*(void (**)(void))(*(void *)*v46 + 800LL))(*v46);
    ++v46;
  }

  uint64_t v48 = sub_5954C();
  (*(void (**)(uint64_t))(*(void *)v48 + 336LL))(v48);
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8
    && (+[CiderService ServiceIsRunning](&OBJC_CLASS___CiderService, "ServiceIsRunning", __p) & 1) == 0)
  {
    +[CiderService StartService](&OBJC_CLASS___CiderService, "StartService");
  }

  operator delete(__p);
}

void sub_26F038( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, __int128 buf, __int128 a18, __int16 a19, __int16 a20, int a21, uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  *(void *)&AudioObjectPropertyAddress buf = &a14;
  sub_8CD60((void ***)&buf);
  if (a2 == 3)
  {
    uint64_t v24 = __cxa_begin_catch(exception_object);
    id v25 = *(id *)sub_138E8(13);
    if (v25)
    {
      uint64_t v26 = (os_log_s *)v25;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = v24[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a18) = 1024;
        DWORD1(a18) = v27;
        WORD4(a18) = 2080;
        *(void *)((char *)&a18 + 10) = "";
        a20 = 1024;
        a21 = 98;
        uint64_t v28 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v29 = v26;
        uint32_t v30 = 40;
LABEL_13:
        _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }

  else
  {
    char v31 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int128 v32 = v31;
      id v33 = *(id *)sub_138E8(13);
      if (v33)
      {
        uint64_t v26 = (os_log_s *)v33;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v32 + 16LL))(v32);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a18) = 2080;
          *(void *)((char *)&a18 + 4) = v34;
          WORD6(a18) = 2080;
          *(void *)((char *)&a18 + 14) = "";
          HIWORD(a21) = 1024;
          LODWORD(a22) = 98;
          uint64_t v28 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v29 = v26;
          uint32_t v30 = 44;
          goto LABEL_13;
        }

uint64_t sub_26F2F0(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_26F328(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

__n128 sub_26F368(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &off_4795C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_26F3A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_4795C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + memset(buf, 0, 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_26F3D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1];
  *(void *)AudioObjectPropertyAddress buf = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_WORD *)&_DWORD buf[8] = 257;
  sub_49A70(v53, v4, (const __CFDictionary **)buf, 0, 0);
  sub_13850((uint64_t)buf);
  uint64_t v5 = *(void *)(v4 + 112);
  char v7 = (uint64_t *)a1[2];
  uint64_t v6 = (std::string::size_type *)a1[3];
  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unsigned int v47 = (os_log_t *)sub_138E8(13);
    uint64_t v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v59 = 1024;
      int v60 = 5508;
      _os_log_impl(&dword_0, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(_BYTE *)(v5 + 384))
  {
    BOOL v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21)
    {
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v59 = 1024;
        int v60 = 5509;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: This method should only be used in the context of a current expanse route",  buf,  0x12u);
      }
    }
  }

  uint64_t v8 = (std::__shared_weak_count *)v6[1];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    if (v9)
    {
      uint64_t v10 = v9;
      std::string::size_type v11 = *v6;
      __p[0].__r_.__value_.__r.__words[0] = v11;
      if (v11)
      {
        uint64_t v12 = *(const __CFString **)(v11 + 248);
        CFStringRef v56 = v12;
        int v13 = *(unsigned __int8 *)(v11 + 256);
        LOBYTE(v57) = v13;
        if (v13) {
          BOOL v14 = v12 == 0LL;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14) {
          CFRetain(v12);
        }
        uint64_t v15 = (void *)(v5 + 72);
        uint64_t v16 = sub_13B774(v5 + 72, &v56);
        if (v5 + 80 != v16)
        {
          uint64_t v17 = sub_13B774(v5 + 72, (CFStringRef *)(v16 + 32));
          uint64_t v18 = (uint64_t *)v17;
          if (v5 + 80 != v17)
          {
            uint64_t v19 = *(void **)(v17 + 8);
            if (v19)
            {
              do
              {
                char v20 = v19;
                uint64_t v19 = (void *)*v19;
              }

              while (v19);
            }

            else
            {
              uint64_t v23 = (void *)v17;
              do
              {
                char v20 = (void *)v23[2];
                BOOL v14 = *v20 == (void)v23;
                uint64_t v23 = v20;
              }

              while (!v14);
            }

            if (*v15 == v17) {
              *uint64_t v15 = v20;
            }
            uint64_t v24 = *(uint64_t **)(v5 + 80);
            --*(void *)(v5 + 88);
            sub_911E8(v24, v18);
            sub_19DFC((uint64_t)(v18 + 4));
            operator delete(v18);
          }
        }

        id v25 = (os_log_t *)sub_138E8(8);
        uint64_t v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          __int16 v59 = 1024;
          int v60 = 5520;
          __int16 v61 = 2112;
          CFStringRef v62 = v56;
          _os_log_impl(&dword_0, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RouteToPartner: Allowing port %@", buf, 0x1Cu);
        }

        sub_19DFC((uint64_t)&v56);
      }

      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  uint64_t v29 = (std::__shared_weak_count *)v7[1];
  if (v29)
  {
    uint32_t v30 = std::__shared_weak_count::lock(v29);
    __int128 v57 = v30;
    if (v30)
    {
      char v31 = v30;
      uint64_t v32 = *v7;
      CFStringRef v56 = (CFStringRef)v32;
      if (v32)
      {
        id v33 = *(const void **)(v32 + 248);
        *(void *)AudioObjectPropertyAddress buf = v33;
        _DWORD buf[8] = *(_BYTE *)(v32 + 256);
        if (buf[8]) {
          BOOL v34 = v33 == 0LL;
        }
        else {
          BOOL v34 = 1;
        }
        if (!v34) {
          CFRetain(v33);
        }
        sub_118354((uint64_t **)(v5 + 72), (CFStringRef *)buf, (uint64_t)buf);
        sub_19DFC((uint64_t)buf);
        id v35 = (os_log_t *)sub_138E8(8);
        uint64_t v36 = *v35;
        if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
        {
          char v37 = *(const __CFString **)(v32 + 248);
          __int16 v54 = v37;
          char v55 = *(_BYTE *)(v32 + 256);
          if (v55 && v37) {
            CFRetain(v37);
          }
          sub_2CA1C(__p, *(unsigned int *)(v32 + 144));
          if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v38 = __p;
          }
          else {
            uint64_t v38 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          __int16 v59 = 1024;
          int v60 = 5527;
          __int16 v61 = 2112;
          CFStringRef v62 = v37;
          __int16 v63 = 2080;
          std::string v64 = v38;
          _os_log_impl(&dword_0, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallowing current port (%@, %s)", buf, 0x26u);
          sub_19DFC((uint64_t)&v54);
        }
      }

      uint64_t v39 = (unint64_t *)&v31->__shared_owners_;
      do
        unint64_t v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }

  char v41 = (os_log_t *)sub_138E8(8);
  int v42 = *v41;
  if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_DEFAULT))
  {
    sub_111330(__p, v5 + 72);
    uint64_t v43 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    __int16 v59 = 1024;
    int v60 = 5530;
    __int16 v61 = 2080;
    CFStringRef v62 = (CFStringRef)v43;
    _os_log_impl(&dword_0, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d All disallowed ports : %s", buf, 0x1Cu);
  }

  sub_139BE4((uint64_t)v51, v5, 1919907442);
  sub_2693E4((uint64_t)__p, (uint64_t)v53);
  int data = (int)__p[0].__r_.__value_.__l.__data_;
  if (LODWORD(__p[0].__r_.__value_.__l.__data_) == 1668509810LL) {
    int data = 1668309362;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = data;
  sub_2697F0((uint64_t)buf, (uint64_t)__p);
  sub_269ACC(a2, (uint64_t)v51, (uint64_t)buf);
  sub_52EF0((uint64_t)buf);
  sub_52EF0((uint64_t)__p);
  v51[0] = off_4709D0;
  int v45 = v52;
  if (v52)
  {
    sub_10AF78(v52 + 2);
    operator delete(v45);
  }

  return sub_52EF0((uint64_t)v53);
}

void sub_26FA08(_Unwind_Exception *a1)
{
}

void *sub_26FAC0(void *a1)
{
  *a1 = &off_479580;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_26FB04(void *__p)
{
  *std::string __p = &off_479580;
  int v2 = (std::__shared_weak_count *)__p[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)__p[4];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(__p);
}

void *sub_26FB48(uint64_t a1)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_479580;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  *((_BYTE *)result + 20) = *(_BYTE *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 32);
  result[3] = *(void *)(a1 + 24);
  result[4] = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  uint64_t v7 = *(void *)(a1 + 48);
  result[5] = *(void *)(a1 + 40);
  result[6] = v7;
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(v7 + 16);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return result;
}

uint64_t sub_26FBCC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = &off_479580;
  *(void *)(a2 + 8) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_BYTE *)(a2 + 20) = *(_BYTE *)(result + 20);
  *(_DWORD *)(a2 + 16) = v3;
  uint64_t v4 = *(void *)(result + 32);
  *(void *)(a2 + memset(buf, 0, 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  uint64_t v7 = *(void *)(result + 48);
  *(void *)(a2 + 40) = *(void *)(result + 40);
  *(void *)(a2 + 48) = v7;
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(v7 + 16);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return result;
}

void sub_26FC30(uint64_t a1)
{
}

void sub_26FC38(void *a1)
{
}

void sub_26FC60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 404) = *(_BYTE *)(a1 + 20);
  *(_DWORD *)(v2 + 400) = v3;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    unint64_t v6 = (unint64_t *)(v4 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = *(std::__shared_weak_count **)(v2 + 416);
  *(void *)(v2 + 408) = v5;
  *(void *)(v2 + 416) = v4;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    std::string::size_type v11 = (unint64_t *)(v9 + 16);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  int v13 = *(std::__shared_weak_count **)(v2 + 432);
  *(void *)(v2 + 4memset(buf, 0, 24) = v10;
  *(void *)(v2 + 432) = v9;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  BOOL v14 = (os_log_s *)*(id *)sub_138E8(2);
  uint64_t v15 = v14;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315394;
    uint64_t v17 = "VirtualAudio_PlugIn.mm";
    __int16 v18 = 1024;
    int v19 = 7061;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Resetting state as routing to partner failed",  (uint8_t *)&v16,  0x12u);
  }
}

void sub_26FD94(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_26FDD8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_479538;
  return result;
}

void sub_26FDFC(uint64_t a1, void *a2)
{
  *a2 = &off_479538;
}

uint64_t sub_26FE14()
{
  return (*(uint64_t (**)(void))(qword_48F828 + 24))();
}

uint64_t sub_26FE38(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_128CC0((uint64_t **)a1, v4, *a2, a2);
      a2 += 8;
      v6 -= 32LL;
    }

    while (v6);
  }

  return a1;
}

void sub_26FE9C(_Unwind_Exception *a1)
{
}

__n128 sub_26FEB8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_479658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_26FEF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_479658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + memset(buf, 0, 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_26FF20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 112LL);
  int v31 = **(_DWORD **)(a1 + 16);
  sub_270360((uint64_t)v32, &v31, 1LL);
  uint64_t v5 = *(os_unfair_lock_s ****)(a1 + 24);
  uint64_t v6 = (os_log_t *)sub_138E8(2);
  unint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_125438(&__p, v5);
    uint64_t v8 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)int v45 = "RoutingManager.cpp";
    *(_WORD *)&v45[8] = 1024;
    *(_DWORD *)&v45[10] = 4071;
    __int16 v46 = 2080;
    unsigned int v47 = v8;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Undo disallowed ports : %s", buf, 0x1Cu);
  }

  std::string::size_type v11 = *v5;
  uint64_t v9 = v5 + 1;
  uint64_t v10 = v11;
  if (v11 != (os_unfair_lock_s **)v9)
  {
    unint64_t v12 = v4 + 13;
    do
    {
      uint64_t v13 = *((unsigned int *)v10 + 8);
      sub_11801C((uint64_t)&v36, v10 + 5);
      uint64_t v14 = *v12;
      if (!*v12) {
        goto LABEL_21;
      }
      uint64_t v15 = v4 + 13;
      do
      {
        unsigned int v16 = *(_DWORD *)(v14 + 32);
        BOOL v17 = v16 >= v13;
        else {
          __int16 v18 = (uint64_t *)(v14 + 8);
        }
        if (v17) {
          uint64_t v15 = (uint64_t *)v14;
        }
        uint64_t v14 = *v18;
      }

      while (*v18);
      if (v15 != v12 && *((_DWORD *)v15 + 8) <= v13)
      {
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        int v22 = (CFStringRef *)v15[5];
        int v42 = (CFStringRef *)(v15 + 6);
        uint64_t v43 = v22;
        unint64_t v40 = &v37;
        uint64_t v41 = v36;
        v39.n128_u64[0] = (unint64_t)&__p;
        v39.n128_u64[1] = (unint64_t)&__p.__r_.__value_.__l.__size_;
        sub_135088((uint64_t)buf, &v43, &v42, (uint64_t)&v41, &v40, &v39);
        if (__p.__r_.__value_.__l.__cap_)
        {
        }

        else
        {
          uint64_t v23 = (uint64_t *)v15[1];
          uint64_t v24 = v15;
          if (v23)
          {
            do
            {
              id v25 = v23;
              uint64_t v23 = (uint64_t *)*v23;
            }

            while (v23);
          }

          else
          {
            do
            {
              id v25 = (uint64_t *)v24[2];
              BOOL v26 = *v25 == (void)v24;
              uint64_t v24 = v25;
            }

            while (!v26);
          }

          int v27 = (uint64_t *)v4[13];
          --v4[14];
          sub_911E8(v27, v15);
          sub_1112B0((void *)v15[6]);
          operator delete(v15);
        }

        sub_1112B0((void *)__p.__r_.__value_.__l.__size_);
      }

      else
      {
LABEL_21:
        int v19 = (os_log_t *)sub_138E8(13);
        char v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&__p, v13);
          BOOL v21 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)int v45 = "PortTypes.h";
          *(_WORD *)&v45[8] = 1024;
          *(_DWORD *)&v45[10] = 111;
          __int16 v46 = 2080;
          unsigned int v47 = v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Could not find entry for VAD '%s'",  buf,  0x1Cu);
        }
      }

      sub_1112B0(v37);
      unint64_t v28 = v10[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = (os_unfair_lock_s ***)v28;
          unint64_t v28 = *(os_unfair_lock_s **)&v28->_os_unfair_lock_opaque;
        }

        while (v28);
      }

      else
      {
        do
        {
          uint64_t v29 = (os_unfair_lock_s ***)v10[2];
          BOOL v26 = *v29 == v10;
          uint64_t v10 = (os_unfair_lock_s **)v29;
        }

        while (!v26);
      }

      uint64_t v10 = (os_unfair_lock_s **)v29;
    }

    while (v29 != v9);
  }

  sub_13AE18((uint64_t *)buf, (uint64_t)v32);
  sub_139E34((uint64_t)v34, (uint64_t)v4, 0, buf);
  sub_32C8C(*(void **)&v45[4]);
  sub_128D9C(a2, (uint64_t)v34);
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 784) = 0;
  v34[0] = off_4709D0;
  uint32_t v30 = v35;
  if (v35)
  {
    sub_10AF78(v35 + 2);
    operator delete(v30);
  }

  sub_32C8C(v33);
}

void sub_270300( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
}

uint64_t sub_270360(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_13A76C((uint64_t **)a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4LL;
    }

    while (v6);
  }

  return a1;
}

void sub_2703C4(_Unwind_Exception *a1)
{
}

uint64_t sub_2703D8(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)__n128 result = &off_47D068;
  *(void *)(result + 8) = 0LL;
  if (theDict)
  {
    uint64_t v3 = result;
    std::string value = 0LL;
    __n128 result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if ((_DWORD)result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0LL;
      __n128 result = CFArrayGetTypeID();
      if (v4 == result)
      {
        uint64_t v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }

        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0LL;
        }

        return sub_783AC(v6, v7);
      }
    }
  }

  return result;
}

__n128 sub_27048C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_479610;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + memset(buf, 0, 24) = result;
  return result;
}

__n128 sub_2704CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_479610;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + memset(buf, 0, 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2704F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (**(_DWORD **)(a1 + 8) == 1986095474)
  {
    CFTypeID v4 = *(uint64_t **)(a1 + 16);
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    *(void *)AudioObjectPropertyAddress buf = v6;
    *(void *)&_DWORD buf[8] = v5;
    if (v5)
    {
      uint64_t v7 = (unint64_t *)(v5 + 16);
      do
        unint64_t v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }

    sub_268D3C((uint64_t)&v51, (unint64_t *)buf, 1LL);
    LODWORD(v57) = 1986291046;
    __int16 v58 = v51;
    __int16 v59 = v52;
    int v60 = (uint64_t **)v53;
    if (v53)
    {
      v52[2] = &v59;
      uint64_t v51 = (uint64_t (**)())&v52;
      int v52 = 0LL;
      uint64_t v53 = 0LL;
    }

    else
    {
      __int16 v58 = (uint64_t (**)())&v59;
    }

    sub_26FE38((uint64_t)&v54, (unsigned int *)&v57, 1LL);
    sub_FF3B8(v59);
    sub_FF3B8(v52);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }

  else
  {
    v55[0] = 0LL;
    v55[1] = 0LL;
    __int16 v54 = v55;
  }

  uint64_t v9 = *(void *)(v3 + 112);
  int v48 = **(_DWORD **)(a1 + 32);
  sub_270360((uint64_t)v49, &v48, 1LL);
  uint64_t v45 = v9 + 72;
  sub_13AECC(&v57, (CFStringRef **)(v9 + 72));
  uint64_t v46 = v9;
  unint64_t v12 = *(uint64_t ***)(v9 + 96);
  std::string::size_type v11 = (uint64_t **)(v9 + 96);
  uint64_t v10 = v12;
  __int16 v61 = 0LL;
  uint64_t v62 = 0LL;
  int v60 = &v61;
  uint64_t v13 = v11 + 1;
  if (v12 != v11 + 1)
  {
    do
    {
      uint64_t v14 = sub_1181CC(&v60, (uint64_t *)&v61, (uint64_t **)buf, (uint64_t *)&__p, *((_DWORD *)v10 + 8));
      if (!*v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = (uint64_t)operator new(0x40uLL);
        *(_DWORD *)(v16 + 32) = *((_DWORD *)v10 + 8);
        sub_13AECC((uint64_t *)(v16 + 40), (CFStringRef **)v10 + 5);
        uint64_t v17 = *(void *)buf;
        *(void *)uint64_t v16 = 0LL;
        *(void *)(v16 + 8) = 0LL;
        *(void *)(v16 + 16) = v17;
        *uint64_t v15 = v16;
        if (*v60)
        {
          int v60 = (uint64_t **)*v60;
          uint64_t v16 = *v15;
        }

        sub_7A420(v61, (uint64_t *)v16);
        ++v62;
      }

      __int16 v18 = v10[1];
      if (v18)
      {
        do
        {
          int v19 = (uint64_t **)v18;
          __int16 v18 = (uint64_t *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          int v19 = (uint64_t **)v10[2];
          BOOL v20 = *v19 == (uint64_t *)v10;
          uint64_t v10 = v19;
        }

        while (!v20);
      }

      uint64_t v10 = v19;
    }

    while (v19 != v13);
  }

  BOOL v21 = v54;
  if (v54 != v55)
  {
    do
    {
      sub_11801C((uint64_t)&__p, v21 + 5);
      unsigned int v22 = *((_DWORD *)v21 + 8);
      uint64_t v23 = *v13;
      if (!*v13) {
        goto LABEL_34;
      }
      uint64_t v24 = v11 + 1;
      do
      {
        unsigned int v25 = *((_DWORD *)v23 + 8);
        BOOL v26 = v25 >= v22;
        if (v25 >= v22) {
          int v27 = (uint64_t **)v23;
        }
        else {
          int v27 = (uint64_t **)(v23 + 1);
        }
        if (v26) {
          uint64_t v24 = (uint64_t **)v23;
        }
        uint64_t v23 = *v27;
      }

      while (*v27);
      if (v24 != v13 && *((_DWORD *)v24 + 8) <= v22)
      {
        sub_13AF1C( (uint64_t *)v24 + 5,  (CFStringRef *)__p.__r_.__value_.__l.__data_,  (CFStringRef **)&__p.__r_.__value_.__l.__size_);
      }

      else
      {
LABEL_34:
        *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)v21 + 8);
        sub_13AECC((uint64_t *)&buf[8], (CFStringRef **)&__p);
        unint64_t v28 = *v13;
        uint64_t v29 = v11 + 1;
        uint32_t v30 = v11 + 1;
        if (*v13)
        {
          while (1)
          {
            while (1)
            {
              uint32_t v30 = (uint64_t **)v28;
              unsigned int v31 = *((_DWORD *)v28 + 8);
              if (*(_DWORD *)buf >= v31) {
                break;
              }
              unint64_t v28 = *v30;
              uint64_t v29 = v30;
              if (!*v30) {
                goto LABEL_41;
              }
            }

            if (v31 >= *(_DWORD *)buf) {
              break;
            }
            unint64_t v28 = v30[1];
            if (!v28)
            {
              uint64_t v29 = v30 + 1;
              goto LABEL_41;
            }
          }
        }

        else
        {
LABEL_41:
          uint64_t v32 = operator new(0x40uLL);
          int v33 = *(_DWORD *)buf;
          uint64_t v35 = *(void *)&buf[8];
          uint64_t v34 = *(void *)&buf[16];
          v32[6] = *(void *)&buf[16];
          uint64_t v36 = (char *)(v32 + 6);
          *((_DWORD *)v32 + 8) = v33;
          v32[5] = v35;
          uint64_t v37 = *(void *)&buf[24];
          v32[7] = *(void *)&buf[24];
          if (v37)
          {
            *(void *)(v34 + 16) = v36;
            *(void *)&_DWORD buf[8] = &buf[16];
            *(void *)&buf[16] = 0LL;
            *(void *)&uint8_t buf[24] = 0LL;
          }

          else
          {
            v32[5] = v36;
          }

          sub_32C38(v11, (uint64_t)v30, v29, v32);
        }

        sub_1112B0(*(void **)&buf[16]);
      }

      sub_1112B0((void *)__p.__r_.__value_.__l.__size_);
      uint64_t v38 = v21[1];
      if (v38)
      {
        do
        {
          __n128 v39 = (void **)v38;
          uint64_t v38 = (void *)*v38;
        }

        while (v38);
      }

      else
      {
        do
        {
          __n128 v39 = (void **)v21[2];
          BOOL v20 = *v39 == v21;
          BOOL v21 = v39;
        }

        while (!v20);
      }

      BOOL v21 = v39;
    }

    while (v39 != v55);
  }

  unint64_t v40 = (os_log_t *)sub_138E8(8);
  uint64_t v41 = *v40;
  if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEFAULT))
  {
    sub_111330(&__p, v45);
    int v42 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4097;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v42;
    _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallowed Ports: %s", buf, 0x1Cu);
  }

  sub_13AE18((uint64_t *)buf, (uint64_t)v49);
  sub_13AE68((uint64_t)&v51, v46, (uint64_t)buf);
  sub_32C8C(*(void **)&buf[8]);
  sub_1112F0(v61);
  sub_1112B0(v58);
  uint64_t v43 = sub_128D9C(a2, (uint64_t)&v51);
  *(_BYTE *)(v43 + 40) = 0;
  *(_BYTE *)(v43 + 784) = 0;
  uint64_t v51 = off_4709D0;
  uint64_t v44 = (void *)v53;
  if (v53)
  {
    sub_10AF78((uint64_t *)(v53 + 16));
    operator delete(v44);
  }

  sub_32C8C(v50);
  sub_11AD14(v55[0]);
}

void sub_2709F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28)
{
}

uint64_t sub_270AC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == (void *)(a1 + 16))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 16);
    goto LABEL_7;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void sub_270B20(void **__p)
{
  uint64_t v2 = (void **)__p[5];
  if (v2 == __p + 2)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = __p + 2;
    goto LABEL_7;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_7:
    (*((void (**)(void))*v2 + v3))();
  }

  operator delete(__p);
}

uint64_t sub_270B80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1) {
    sub_82CEC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_270BA4(uint64_t a1)
{
  return std::operator+<char>("Generic route update command: ", a1 + 48);
}

__n128 sub_270BBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_4794F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_270BF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_4794F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_270C14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 112LL);
  if (*(_BYTE *)(a1 + 16))
  {
    uint64_t v10 = 0x700000006LL;
    sub_270360((uint64_t)&v7, (int *)&v10, 2LL);
    sub_13AE68(a2, v3, (uint64_t)&v7);
    CFTypeID v4 = v8;
  }

  else
  {
    uint64_t v9 = 0x700000006LL;
    sub_270360((uint64_t)v5, (int *)&v9, 2LL);
    sub_13AE18(&v7, (uint64_t)v5);
    sub_139E34(a2, v3, 0, &v7);
    sub_32C8C(v8);
    CFTypeID v4 = v6;
  }

  sub_32C8C(v4);
}

void sub_270CEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
}

__n128 sub_270D30(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_4794A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_270D68(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_4794A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_270D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_254C74(a2, *(void *)(a1 + 8), *(const __CFDictionary ***)(a1 + 16), (uint64_t)"client request");
}

void *sub_270DA4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_479460;
  result[1] = v3;
  return result;
}

uint64_t sub_270DD8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_479460;
  a2[1] = v2;
  return result;
}

uint64_t sub_270DF4(uint64_t a1, unsigned __int8 *a2)
{
  return sub_261ED4(*(void *)(a1 + 8), *a2);
}

void *sub_270E00(void *a1)
{
  *a1 = &off_479138;
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_270E5C(char *__p)
{
  *(void *)std::string __p = &off_479138;
  uint64_t v2 = __p + 32;
  uint64_t v3 = (char *)*((void *)__p + 7);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

uint64_t sub_270EB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  sub_6DD4();
  int v7 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v8 = sub_138E8(8);
  uint64_t v9 = sub_138E8(34);
  char v10 = 0;
  uint64_t v11 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1LL;
    if ((v14 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
LABEL_7:
  uint64_t v15 = *(os_log_s **)v8;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = BYTE4(v6) ? v6 : 1852796517LL;
    sub_2CA1C(__p, v16);
    uint64_t v17 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    __int16 v24 = 1024;
    *(_DWORD *)unsigned int v25 = 3745;
    *(_WORD *)&v25[4] = 1024;
    *(_DWORD *)&v25[6] = v4;
    __int16 v26 = 2080;
    int v27 = v17;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Policy Mute Settings Update %d, new output mode = %s",  buf,  0x22u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_72210(a2, 1920099684LL);
  *(_DWORD *)(v5 + 40) = v6;
  *(_BYTE *)(v5 + 44) = BYTE4(v6);
  sub_139BE4((uint64_t)buf, v5, 1919970403);
  sub_725DC(a2, (uint64_t)buf);
  *(void *)AudioObjectPropertyAddress buf = off_4709D0;
  __int16 v18 = *(void **)&v25[2];
  if (*(void *)&v25[2])
  {
    sub_10AF78((uint64_t *)(*(void *)&v25[2] + 16LL));
    operator delete(v18);
  }

  if (v7) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  uint64_t result = sub_72348(*(unsigned int *)(a2 + 12));
  if ((_DWORD)result)
  {
    buf[0] = *(_BYTE *)(a1 + 12);
    uint64_t v20 = *(void *)(a1 + 56);
    if (!v20) {
      sub_82CEC();
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v20 + 48LL))(v20, buf);
  }

  return result;
}

void sub_27111C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_27118C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = std::string::insert(&v6, 0LL, "Route change for PolicyMute (", 0x1DuLL);
  __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__l.__cap_ = v3->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v5 = std::string::append(&v7, ")", 1uLL);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_271238( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_271274(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_479418;
  result[1] = v3;
  return result;
}

uint64_t sub_2712A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_479418;
  a2[1] = v2;
  return result;
}

uint64_t sub_2712C4(uint64_t a1, unsigned __int8 *a2)
{
  return sub_261ED4(*(void *)(a1 + 8), *a2);
}

uint64_t sub_2712D0()
{
  uint64_t result = sub_2FC9D4();
  if (!*(_DWORD *)(result + 8))
  {
    uint64_t result = sub_2FC9D4();
    *(void *)result &= ~2uLL;
  }

  return result;
}

void sub_271300(uint64_t a1, uint64_t a2, void *a3)
{
  LOBYTE(__p[0]) = 0;
  char v31 = 0;
  uint64_t v5 = a3 + 1;
  std::string v6 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    while (1)
    {
      uint64_t v7 = sub_6A92C(*(void *)(a2 + 128), *((_DWORD *)v6 + 7));
      if (v7)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 + 96);
        uint64_t v32 = *(_DWORD **)(v7 + 88);
        int v33 = v8;
        if (v8)
        {
          p_uint64_t shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
          do
            unint64_t v10 = __ldxr(p_shared_weak_owners);
          while (__stxr(v10 + 1, p_shared_weak_owners));
        }

        sub_B8CBC((uint64_t *)&v27, (uint64_t *)&v32, "", 7539);
        char v11 = (*(uint64_t (**)(void))(*(void *)v27 + 416LL))(v27);
        uint64_t v12 = (std::__shared_weak_count *)*((void *)&v27 + 1);
        if (*((void *)&v27 + 1))
        {
          uint64_t v13 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
          do
            unint64_t v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }

        if (v33) {
          std::__shared_weak_count::__release_weak(v33);
        }
        if ((v11 & 1) != 0) {
          break;
        }
      }

      uint64_t v15 = (void *)v6[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          uint64_t v16 = (void *)v6[2];
          BOOL v17 = *v16 == (void)v6;
          std::string v6 = v16;
        }

        while (!v17);
      }

      std::string v6 = v16;
      if (v16 == v5)
      {
        int v18 = 1936289391;
        goto LABEL_46;
      }
    }
  }

  int v18 = 1936289391;
  if (v6 != v5)
  {
    uint64_t v19 = sub_6A92C(*(void *)(a2 + 128), *((_DWORD *)v6 + 7));
    if (v19)
    {
      uint64_t v20 = *(std::__shared_weak_count **)(v19 + 96);
      *(void *)&__int128 v27 = *(void *)(v19 + 88);
      *((void *)&v27 + 1) = v20;
      if (v20)
      {
        BOOL v21 = (unint64_t *)&v20->__shared_weak_owners_;
        do
          unint64_t v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }

      sub_B8CBC((uint64_t *)&v32, (uint64_t *)&v27, "", 7547);
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      if (v32)
      {
        (*(void (**)(__int128 *__return_ptr))(*(void *)v32 + 440LL))(&v27);
        if (v31)
        {
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)std::string __p = v27;
          uint64_t v30 = v28;
        }

        else
        {
          *(_OWORD *)std::string __p = v27;
          uint64_t v30 = v28;
          char v31 = 1;
        }

        if (v32[66] == 1781740087)
        {
          int v18 = 1936024681;
        }

        else
        {
          uint64_t v23 = (void *)HIBYTE(v30);
          if (v30 < 0) {
            uint64_t v23 = __p[1];
          }
          if (v23) {
            int v18 = 1936679529;
          }
          else {
            int v18 = 1936289391;
          }
        }
      }

      __int16 v24 = v33;
      if (v33)
      {
        p_shared_owners = &v33->__shared_owners_;
        do
          unint64_t v26 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v26 - 1, (unint64_t *)p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }

void sub_2715AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20, __int16 a21, char a22, char a23, uint64_t a24)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_27164C(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return 0LL;
  }
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  uint64_t v9 = a1;
  while (1)
  {
    uint64_t v10 = sub_6A92C(*(void *)(a3 + 128), *((_DWORD *)v9 + 7));
    if (v10)
    {
      uint64_t v15 = 0x676C6F6264706964LL;
      int v16 = 0;
    }

    char v11 = (void *)v9[1];
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        char v11 = (void *)*v11;
      }

      while (v11);
    }

    else
    {
      do
      {
        uint64_t v12 = (void *)v9[2];
        BOOL v13 = *v12 == (void)v9;
        uint64_t v9 = v12;
      }

      while (!v13);
    }

    uint64_t v9 = v12;
    if (v12 == a2) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_271710(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1;
  while (1)
  {
    uint64_t v6 = sub_6A92C(*(void *)(a3 + 128), *((_DWORD *)v5 + 7));
    if (!v6) {
      goto LABEL_19;
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 96);
    if (!v7) {
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)(v6 + 88);
    p_uint64_t shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    char v11 = std::__shared_weak_count::lock(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v11) {
      goto LABEL_19;
    }
    if (!v8)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }

      goto LABEL_19;
    }

    BOOL v12 = sub_202EE8(v8);
    BOOL v13 = v12;
    unint64_t v14 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15) {
      break;
    }
    if (v12) {
      return 0LL;
    }
LABEL_19:
    uint64_t v18 = (void *)v5[1];
    if (v18)
    {
      do
      {
        uint64_t v19 = v18;
        uint64_t v18 = (void *)*v18;
      }

      while (v18);
    }

    else
    {
      do
      {
        uint64_t v19 = (void *)v5[2];
        BOOL v20 = *v19 == (void)v5;
        uint64_t v5 = v19;
      }

      while (!v20);
    }

    uint64_t v5 = v19;
    if (v19 == a2) {
      return 1LL;
    }
  }

  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v13) {
    goto LABEL_19;
  }
  return 0LL;
}

void sub_271858(_Unwind_Exception *exception_object)
{
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_271894(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)sub_135A0(a2, 0);
  unint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)*v3;
  if ((void *)*v3 == v3 + 1)
  {
    unsigned int v39 = 0;
    uint64_t v40 = 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    unint64_t v44 = 0LL;
    uint64_t v43 = a1;
    do
    {
      uint64_t v8 = (_BYTE *)sub_6A92C(*(void *)(a1 + 128), *((_DWORD *)v5 + 7));
      uint64_t v9 = v8;
      if (v8 && v8[105])
      {
        uint64_t v10 = (*(uint64_t (**)(_BYTE *))(*(void *)v8 + 112LL))(v8);
        id v11 = *(id *)sub_138E8(2);
        BOOL v12 = v11;
        if (v11)
        {
          BOOL v13 = (os_log_s *)v11;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = *((void *)v9 + 11);
            unint64_t v15 = (std::__shared_weak_count *)*((void *)v9 + 12);
            if (BYTE4(v10)) {
              double v16 = *(float *)&v10;
            }
            else {
              double v16 = -1.0;
            }
            uint64_t v45 = v14;
            uint64_t v46 = v15;
            if (v15)
            {
              p_uint64_t shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
              do
                unint64_t v18 = __ldxr(p_shared_weak_owners);
              while (__stxr(v18 + 1, p_shared_weak_owners));
            }

            sub_B8CBC((uint64_t *)&v47, &v45, "", 1977);
            sub_23FE8((uint64_t)&__p, v47 + 2);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v51 = "VirtualAudio_PlugIn.mm";
            __int16 v52 = 1024;
            int v53 = 1977;
            __int16 v54 = 2048;
            double v55 = v16;
            __int16 v56 = 2080;
            uint64_t v57 = p_p;
            _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "%25s:%-5d In ApplyBeamFormerPreference, beam direction preference (%f) for port %s",  buf,  0x26u);
            BOOL v20 = v48;
            a1 = v43;
            if (v48)
            {
              p_shared_owners = (unint64_t *)&v48->__shared_owners_;
              do
                unint64_t v22 = __ldaxr(p_shared_owners);
              while (__stlxr(v22 - 1, p_shared_owners));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }

            if (v46) {
              std::__shared_weak_count::__release_weak(v46);
            }
          }
        }

        if (BYTE4(v10))
        {
          if ((unint64_t)v7 >= v44)
          {
            uint64_t v23 = (v7 - v6) >> 2;
            unint64_t v24 = v23 + 1;
            else {
              unint64_t v25 = v24;
            }
            if (v25) {
              unint64_t v25 = (unint64_t)sub_7A890(v25);
            }
            else {
              uint64_t v26 = 0LL;
            }
            __int128 v27 = (char *)(v25 + 4 * v23);
            *(_DWORD *)__int128 v27 = v10;
            uint64_t v28 = v27 + 4;
            while (v7 != v6)
            {
              int v29 = *((_DWORD *)v7 - 1);
              v7 -= 4;
              *((_DWORD *)v27 - 1) = v29;
              v27 -= 4;
            }

            unint64_t v44 = v25 + 4 * v26;
            if (v6) {
              operator delete(v6);
            }
            uint64_t v6 = v27;
            uint64_t v7 = v28;
            a1 = v43;
          }

          else
          {
            *(_DWORD *)uint64_t v7 = v10;
            v7 += 4;
          }
        }
      }

      uint64_t v30 = (void *)v5[1];
      if (v30)
      {
        do
        {
          char v31 = v30;
          uint64_t v30 = (void *)*v30;
        }

        while (v30);
      }

      else
      {
        do
        {
          char v31 = (void *)v5[2];
          BOOL v32 = *v31 == (void)v5;
          uint64_t v5 = v31;
        }

        while (!v32);
      }

      uint64_t v5 = v31;
    }

    while (v31 != v4);
    if (v6 != v7)
    {
      if ((unint64_t)(v7 - v6) >= 5)
      {
        id v33 = *(id *)sub_138E8(2);
        uint64_t v34 = v33;
        if (v33)
        {
          uint64_t v35 = (os_log_s *)v33;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v47 = *(os_unfair_lock_s **)(a2 + 576);
            sub_33464(&__p, (unsigned int *)&v47);
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v36 = &__p;
            }
            else {
              uint64_t v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            uint64_t v51 = "VirtualAudio_PlugIn.mm";
            __int16 v52 = 1024;
            int v53 = 1988;
            __int16 v54 = 2080;
            double v55 = *(double *)&v36;
            _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d More than one beam form port preference on VAD: '%s'.",  buf,  0x1Cu);
          }
        }
      }

      unsigned int v37 = *(_DWORD *)v6;
      uint64_t v38 = 0x100000000LL;
      goto LABEL_63;
    }

    unsigned int v37 = 0;
    uint64_t v38 = 0LL;
    unsigned int v39 = 0;
    uint64_t v40 = 0LL;
    if (v6)
    {
LABEL_63:
      operator delete(v6);
      unsigned int v39 = v37;
      uint64_t v40 = v38;
    }
  }

  return v40 & 0x100000000LL | v39;
}

void sub_271CD8(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_271D48(uint64_t a1, float a2)
{
  unint64_t v4 = (os_log_s *)*(id *)sub_138E8(2);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(a1 + 48);
    int v9 = 136315906;
    uint64_t v10 = "VirtualAudio_PlugIn.mm";
    __int16 v11 = 1024;
    int v12 = 329;
    __int16 v13 = 2048;
    double v14 = a2;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting beam index to %f (was %u).", (uint8_t *)&v9, 0x22u);
  }

  uint64_t result = a2;
  *(_DWORD *)(a1 + 48) = result;
  if (*(_BYTE *)a1)
  {
    uint64_t v8 = *(uint64_t (**)(void))(a1 + 32);
    if (v8) {
      return v8();
    }
  }

  return result;
}

os_signpost_id_t *sub_271E5C(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = (os_log_s *)*(id *)v2;
    if (v3)
    {
      unint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        __int16 v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 85;
        __int16 v14 = 2080;
        __int16 v15 = "kRouteChange";
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    int v6 = (os_log_s *)(id)qword_493900;
    uint64_t v7 = v6;
    os_signpost_id_t v8 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "VA_RouteChange",  (const char *)&unk_420CC6,  (uint8_t *)&v10,  2u);
    }
  }

  return a1;
}

void sub_272000(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void *sub_272014(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_479098;
  result[1] = v3;
  return result;
}

uint64_t sub_272048(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_479098;
  a2[1] = v2;
  return result;
}

void sub_272064(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *(void *)(*v1 + 144);
  for (uint64_t i = *(void *)(*v1 + 152); v3 != i; v3 += 8LL)
  {
    unint64_t v4 = *(_DWORD **)v3;
    uint64_t v5 = *v1;
    if (v5 + 184 != sub_71A5C(*v1 + 176, *(_DWORD *)(*(void *)v3 + 576LL), *(_DWORD *)(*(void *)v3 + 580LL)))
    {
      uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 528LL))(v4);
      uint64_t v7 = pthread_self();
      os_signpost_id_t v8 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v6 + 16));
      if (pthread_equal(v7, v8)
        || (int v9 = pthread_self(),
            int v10 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v6 + 104)),
            pthread_equal(v9, v10)))
      {
        __int16 v11 = (unint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 528LL))(v4);
        sub_79C14(v11);
        __int16 v12 = (os_log_s *)*(id *)sub_138E8(2);
        int v13 = v12;
        if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = v4[2];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v23 = "VirtualAudio_PlugIn.mm";
          __int16 v24 = 1024;
          int v25 = 2474;
          __int16 v26 = 1024;
          LODWORD(v27) = v14;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d The IO monitor for device %u was left held after handling a route change. Unlocked it.",  buf,  0x18u);
        }
      }
    }
  }

  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) != 0)
  {
    sub_6DD4();
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    __int16 v15 = (os_log_s *)*(id *)sub_138E8(2);
    int v16 = v15;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v23 = "VirtualAudio_PlugIn.mm";
      __int16 v24 = 1024;
      int v25 = 2497;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d The routing mutex was left held after handling a route change. Unlocked it.",  buf,  0x12u);
    }
  }

  uint64_t v17 = *v1;
  if (*(void *)(*v1 + 192))
  {
    unint64_t v18 = (os_log_s *)*(id *)sub_138E8(2);
    uint64_t v19 = v18;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v23 = "VirtualAudio_PlugIn.mm";
      __int16 v24 = 1024;
      int v25 = 2514;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VirtualAudio_Plugin belived it had changing devices after handling a route change. Clear it.",  buf,  0x12u);
    }

    uint64_t v17 = *v1;
  }

  BOOL v21 = *(void **)(v17 + 184);
  BOOL v20 = (void *)(v17 + 184);
  sub_32C8C(v21);
  *(v20 - 1) = v20;
  void *v20 = 0LL;
  v20[1] = 0LL;
}

void sub_2724F8(_Unwind_Exception *a1)
{
}

void sub_272504(_Unwind_Exception *a1)
{
}

void sub_272510(_Unwind_Exception *a1)
{
}

void sub_27251C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, __int128 a16)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v17 = __cxa_begin_catch(a1);
      unint64_t v18 = (os_log_s *)*(id *)sub_138E8(2);
      uint64_t v19 = v18;
      if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v20 = v17[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 2501;
        WORD1(a16) = 1024;
        DWORD1(a16) = v20;
        _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException: %d.", (uint8_t *)&buf, 0x18u);
      }
    }

    else
    {
      BOOL v21 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        unint64_t v22 = v21;
        uint64_t v23 = (os_log_s *)*(id *)sub_138E8(2);
        uint64_t v19 = v23;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v22 + 16LL))(v22);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 2505;
          WORD1(a16) = 2080;
          *(void *)((char *)&a16 + 4) = v24;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception: %s.",  (uint8_t *)&buf,  0x1Cu);
        }
      }

      else
      {
        int v25 = (os_log_s *)*(id *)sub_138E8(2);
        uint64_t v19 = v25;
        if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 2509;
          _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception.", (uint8_t *)&buf, 0x12u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x272424LL);
  }

  _Unwind_Resume(a1);
}

void sub_272704(_Unwind_Exception *a1)
{
}

void sub_272710(_Unwind_Exception *a1)
{
}

void sub_27271C(_Unwind_Exception *a1)
{
}

void sub_272728(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_27274C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_4793D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_272784(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_4793D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2727A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = **(_DWORD ***)(a1 + 16);
  if (v3[2]) {
    goto LABEL_17;
  }
  uint64_t v4 = sub_138E8(2);
  uint64_t v5 = sub_138E8(34);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_8:
  id v11 = *(id *)v4;
  __int16 v12 = v11;
  if (v11)
  {
    int v13 = (os_log_s *)v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v3 + 24LL))(__p, v3);
      int v14 = SHIBYTE(v80) >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v82 = 1024;
      *(_DWORD *)uint64_t v83 = 3872;
      *(_WORD *)&v83[4] = 2080;
      *(void *)&v83[6] = "internal update";
      __int16 v84 = 2080;
      uint64_t v85 = v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change initiated [ %s ]. Cause: %s.",  buf,  0x26u);
      if (SHIBYTE(v80) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  if (v3[2])
  {
LABEL_17:
    uint64_t v15 = sub_138E8(2);
    uint64_t v16 = sub_138E8(34);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0) {
        goto LABEL_23;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
LABEL_23:
    id v22 = *(id *)v15;
    uint64_t v23 = v22;
    if (v22)
    {
      uint64_t v24 = (os_log_s *)v22;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v3 + 24LL))(__p, v3);
        int v25 = SHIBYTE(v80) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = 3875;
        *(_WORD *)&v83[4] = 2080;
        *(void *)&v83[6] = "internal update";
        __int16 v84 = 2080;
        uint64_t v85 = v25;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Route configuration change initiated [ %s ]. Cause: %s.",  buf,  0x26u);
        if (SHIBYTE(v80) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(void *)v3 + 16LL))(buf, v3);
  sub_128D9C(a2, (uint64_t)buf);
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 784) = 0;
  *(void *)AudioObjectPropertyAddress buf = off_4709D0;
  __int16 v26 = *(void **)&v83[2];
  if (*(void *)&v83[2])
  {
    sub_10AF78((uint64_t *)(*(void *)&v83[2] + 16LL));
    operator delete(v26);
  }

  if (*(_DWORD *)(a2 + 8))
  {
    sub_72210((uint64_t)__p, 1920099684LL);
    sub_128D9C((uint64_t)buf, (uint64_t)__p);
    LOBYTE(v86) = 0;
    unsigned __int8 v155 = 0;
    sub_725DC(a2, (uint64_t)buf);
    if (*(unsigned __int8 *)(a2 + 784) == v155)
    {
      if (!*(_BYTE *)(a2 + 784))
      {
LABEL_112:
        *(void *)AudioObjectPropertyAddress buf = off_4709D0;
        char v77 = *(void **)&v83[2];
        if (*(void *)&v83[2])
        {
          sub_10AF78((uint64_t *)(*(void *)&v83[2] + 16LL));
          operator delete(v77);
        }

        uint64_t v78 = v80;
        if (v80)
        {
          sub_10AF78(v80 + 2);
          operator delete(v78);
        }

        return;
      }

      *(_OWORD *)(a2 + 40) = v86;
      uint64_t v27 = a2 + 64;
      sub_FF3B8(*(void **)(a2 + 64));
      uint64_t v28 = v88;
      *(void *)(a2 + 56) = v87;
      *(void *)(a2 + 64) = v28;
      uint64_t v29 = v89;
      *(void *)(a2 + 72) = v89;
      if (v29)
      {
        *(void *)(v28 + 16) = v27;
        __int128 v87 = &v88;
        uint64_t v88 = 0LL;
        uint64_t v89 = 0LL;
      }

      else
      {
        *(void *)(a2 + 56) = v27;
      }

      uint64_t v30 = a2 + 88;
      sub_FF3B8(*(void **)(a2 + 88));
      uint64_t v31 = v91;
      *(void *)(a2 + 80) = v90;
      *(void *)(a2 + 88) = v31;
      uint64_t v32 = v92;
      *(void *)(a2 + 96) = v92;
      if (v32)
      {
        *(void *)(v31 + 16) = v30;
        __int128 v90 = &v91;
        uint64_t v91 = 0LL;
        uint64_t v92 = 0LL;
      }

      else
      {
        *(void *)(a2 + 80) = v30;
      }

      uint64_t v33 = a2 + 112;
      sub_11AD14(*(void **)(a2 + 112));
      uint64_t v34 = v94;
      *(void *)(a2 + 104) = v93;
      *(void *)(a2 + 112) = v34;
      uint64_t v35 = v95;
      *(void *)(a2 + 120) = v95;
      if (v35)
      {
        *(void *)(v34 + 16) = v33;
        __int128 v93 = &v94;
        uint64_t v94 = 0LL;
        uint64_t v95 = 0LL;
      }

      else
      {
        *(void *)(a2 + 104) = v33;
      }

      uint64_t v36 = a2 + 136;
      sub_32C8C(*(void **)(a2 + 136));
      uint64_t v37 = v97;
      *(void *)(a2 + 128) = v96;
      *(void *)(a2 + 136) = v37;
      uint64_t v38 = v98;
      *(void *)(a2 + 144) = v98;
      if (v38)
      {
        *(void *)(v37 + 16) = v36;
        __int128 v96 = &v97;
        uint64_t v97 = 0LL;
        uint64_t v98 = 0LL;
      }

      else
      {
        *(void *)(a2 + 128) = v36;
      }

      uint64_t v39 = a2 + 160;
      sub_32C8C(*(void **)(a2 + 160));
      uint64_t v40 = v100;
      *(void *)(a2 + 152) = v99;
      *(void *)(a2 + 160) = v40;
      uint64_t v41 = v101;
      *(void *)(a2 + 168) = v101;
      if (v41)
      {
        *(void *)(v40 + 16) = v39;
        BOOL v99 = &v100;
        uint64_t v100 = 0LL;
        uint64_t v101 = 0LL;
      }

      else
      {
        *(void *)(a2 + 152) = v39;
      }

      *(void *)(a2 + 176) = v102;
      int v42 = v104;
      *(_DWORD *)(a2 + 184) = v103;
      *(_DWORD *)(a2 + sub_19DFC(v37 - 192) = v42;
      uint64_t v43 = (void **)(a2 + 200);
      *(_OWORD *)uint64_t v43 = v105;
      uint64_t v44 = v107;
      *(void *)(a2 + 216) = v106;
      HIBYTE(v106) = 0;
      LOBYTE(v105) = 0;
      *(void *)(a2 + 2memset(buf, 0, 24) = v44;
      sub_51F40((void **)(a2 + 232));
      *(_OWORD *)(a2 + 232) = v108;
      *(void *)(a2 + 248) = v109;
      uint64_t v109 = 0LL;
      __int128 v108 = 0uLL;
      sub_51F40((void **)(a2 + 256));
      *(_OWORD *)(a2 + 256) = v110;
      *(void *)(a2 + 272) = v111;
      uint64_t v111 = 0LL;
      __int128 v110 = 0uLL;
      sub_52024(a2 + 280, v112);
      sub_52024(a2 + 320, v113);
      sub_52024(a2 + 360, v114);
      *(void *)(a2 + 400) = v114[5];
      *(_DWORD *)(a2 + 408) = v115;
      uint64_t v45 = (void **)(a2 + 416);
      if (*(unsigned __int8 *)(a2 + 440) == v118)
      {
        if (*(_BYTE *)(a2 + 440))
        {
          *(_OWORD *)uint64_t v45 = v116;
          *(void *)(a2 + 432) = v117;
          HIBYTE(v117) = 0;
          LOBYTE(v116) = 0;
        }
      }

      else if (*(_BYTE *)(a2 + 440))
      {
        *(_BYTE *)(a2 + 440) = 0;
      }

      else
      {
        *(_OWORD *)uint64_t v45 = v116;
        *(void *)(a2 + 432) = v117;
        uint64_t v117 = 0LL;
        __int128 v116 = 0uLL;
        *(_BYTE *)(a2 + 440) = 1;
      }

      *(_BYTE *)(a2 + 448) = v119;
      uint64_t v46 = a2 + 464;
      sub_32C8C(*(void **)(a2 + 464));
      uint64_t v47 = v121;
      *(void *)(a2 + 456) = v120;
      *(void *)(a2 + 464) = v47;
      uint64_t v48 = v122;
      *(void *)(a2 + 472) = v122;
      if (v48)
      {
        *(void *)(v47 + 16) = v46;
        int v120 = &v121;
        uint64_t v121 = 0LL;
        uint64_t v122 = 0LL;
      }

      else
      {
        *(void *)(a2 + 456) = v46;
      }

      uint64_t v49 = a2 + 488;
      sub_32C8C(*(void **)(a2 + 488));
      uint64_t v50 = v124;
      *(void *)(a2 + 480) = v123;
      *(void *)(a2 + 488) = v50;
      uint64_t v51 = v125;
      *(void *)(a2 + 496) = v125;
      if (v51)
      {
        *(void *)(v50 + 16) = v49;
        uint64_t v123 = &v124;
        uint64_t v124 = 0LL;
        uint64_t v125 = 0LL;
      }

      else
      {
        *(void *)(a2 + 480) = v49;
      }

      uint64_t v52 = a2 + 512;
      sub_32C8C(*(void **)(a2 + 512));
      uint64_t v53 = v127;
      *(void *)(a2 + 504) = v126;
      *(void *)(a2 + 512) = v53;
      uint64_t v54 = v128;
      *(void *)(a2 + 520) = v128;
      if (v54)
      {
        *(void *)(v53 + 16) = v52;
        unint64_t v126 = &v127;
        uint64_t v127 = 0LL;
        uint64_t v128 = 0LL;
      }

      else
      {
        *(void *)(a2 + 504) = v52;
      }

      uint64_t v55 = a2 + 536;
      sub_32C8C(*(void **)(a2 + 536));
      *(void *)(a2 + 528) = v129;
      uint64_t v56 = v130;
      *(void *)(a2 + 536) = v130;
      uint64_t v57 = v131;
      *(void *)(a2 + 544) = v131;
      if (v57)
      {
        *(void *)(v56 + 16) = v55;
        uint64_t v129 = &v130;
        uint64_t v130 = 0LL;
        uint64_t v131 = 0LL;
      }

      else
      {
        *(void *)(a2 + 528) = v55;
      }

      uint64_t v58 = a2 + 560;
      sub_32C8C(*(void **)(a2 + 560));
      *(void *)(a2 + 552) = v132;
      uint64_t v59 = v133;
      *(void *)(a2 + 560) = v133;
      uint64_t v60 = v134;
      *(void *)(a2 + 568) = v134;
      if (v60)
      {
        *(void *)(v59 + 16) = v58;
        char v132 = &v133;
        uint64_t v133 = 0LL;
        uint64_t v134 = 0LL;
      }

      else
      {
        *(void *)(a2 + 552) = v58;
      }

      sub_269DB4((_BYTE *)(a2 + 576), (uint64_t)&v135);
      __int16 v61 = (void *)(a2 + 600);
      uint64_t v62 = *(void **)(a2 + 600);
      if (v62)
      {
        *(void *)(a2 + 608) = v62;
        operator delete(v62);
        *__int16 v61 = 0LL;
        *(void *)(a2 + 608) = 0LL;
        *(void *)(a2 + 616) = 0LL;
      }

      *(_OWORD *)__int16 v61 = v136;
      *(void *)(a2 + 616) = v137;
      uint64_t v137 = 0LL;
      __int128 v136 = 0uLL;
      *(_DWORD *)(a2 + 6memset(buf, 0, 24) = v138;
      *(_BYTE *)(a2 + 628) = v139;
      sub_269DB4((_BYTE *)(a2 + 632), (uint64_t)v140);
      *(_DWORD *)(a2 + 656) = v140[6];
      *(_BYTE *)(a2 + 660) = v141;
      uint64_t v63 = *(void *)(a2 + 664);
      *(void *)(a2 + 664) = v142;
      uint64_t v142 = v63;
      *(_DWORD *)(a2 + 672) = v143;
      *(_BYTE *)(a2 + 676) = v144;
      __int128 v64 = v145;
      __int128 v145 = 0uLL;
      int v65 = *(std::__shared_weak_count **)(a2 + 688);
      *(_OWORD *)(a2 + 680) = v64;
      if (v65) {
        std::__shared_weak_count::__release_weak(v65);
      }
      __int128 v66 = v146;
      __int128 v146 = 0uLL;
      int v67 = *(std::__shared_weak_count **)(a2 + 704);
      *(_OWORD *)(a2 + 696) = v66;
      if (v67) {
        std::__shared_weak_count::__release_weak(v67);
      }
      BOOL v68 = (void **)(a2 + 712);
      if (*(unsigned __int8 *)(a2 + 736) == v149)
      {
        if (*(_BYTE *)(a2 + 736))
        {
          __int16 v69 = *v68;
          if (*v68)
          {
            *(void *)(a2 + 720) = v69;
            operator delete(v69);
            *BOOL v68 = 0LL;
            *(void *)(a2 + 720) = 0LL;
            *(void *)(a2 + 728) = 0LL;
          }

          *(_OWORD *)BOOL v68 = v147;
          *(void *)(a2 + 728) = v148;
          uint64_t v148 = 0LL;
          __int128 v147 = 0uLL;
        }
      }

      else if (*(_BYTE *)(a2 + 736))
      {
        uint64_t v70 = *v68;
        if (*v68)
        {
          *(void *)(a2 + 720) = v70;
          operator delete(v70);
        }

        *(_BYTE *)(a2 + 736) = 0;
      }

      else
      {
        *(_OWORD *)BOOL v68 = v147;
        *(void *)(a2 + 728) = v148;
        uint64_t v148 = 0LL;
        __int128 v147 = 0uLL;
        *(_BYTE *)(a2 + 736) = 1;
      }

      if (*(unsigned __int8 *)(a2 + 768) == v153)
      {
        if (*(_BYTE *)(a2 + 768))
        {
          uint64_t v71 = a2 + 752;
          sub_734C4(*(void **)(a2 + 752));
          *(void *)(a2 + 744) = v150;
          uint64_t v72 = v151;
          *(void *)(a2 + 752) = v151;
          uint64_t v73 = v152;
          *(void *)(a2 + 760) = v152;
          if (v73)
          {
            *(void *)(v72 + 16) = v71;
            id v150 = &v151;
            uint64_t v151 = 0LL;
            uint64_t v152 = 0LL;
          }

          else
          {
            *(void *)(a2 + 744) = v71;
          }
        }
      }

      else if (*(_BYTE *)(a2 + 768))
      {
        sub_734C4(*(void **)(a2 + 752));
        *(_BYTE *)(a2 + 768) = 0;
      }

      else
      {
        *(void *)(a2 + 744) = v150;
        uint64_t v74 = a2 + 752;
        uint64_t v75 = v151;
        *(void *)(a2 + 752) = v151;
        uint64_t v76 = v152;
        *(void *)(a2 + 760) = v152;
        if (v76)
        {
          *(void *)(v75 + 16) = v74;
          id v150 = &v151;
          uint64_t v151 = 0LL;
          uint64_t v152 = 0LL;
        }

        else
        {
          *(void *)(a2 + 744) = v74;
        }

        *(_BYTE *)(a2 + 768) = 1;
      }

      *(void *)(a2 + 776) = v154;
    }

    else if (*(_BYTE *)(a2 + 784))
    {
      sub_52EF0(a2 + 40);
      *(_BYTE *)(a2 + 784) = 0;
    }

    else
    {
      sub_2697F0(a2 + 40, (uint64_t)&v86);
      *(_BYTE *)(a2 + 784) = 1;
    }

    if (v155) {
      sub_52EF0((uint64_t)&v86);
    }
    goto LABEL_112;
  }

void sub_273178(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_273254(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)*(id *)sub_138E8(2);
  uint64_t v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(v1 + 108);
    int v5 = 136315650;
    char v6 = "VirtualAudio_PlugIn.mm";
    __int16 v7 = 1024;
    int v8 = 5471;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlugIn initialized ? %d", (uint8_t *)&v5, 0x18u);
  }
}

unint64_t sub_273328(uint64_t a1, int a2, unsigned int *a3)
{
  if ((a2 | 4) != 4)
  {
    uint64_t v10 = sub_138E8(13);
    id v11 = sub_8C7D4(1, *(void **)v10, *(void *)(v10 + 8));
    __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = v12;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "VirtualAudio_PlugIn.mm";
      __int16 v17 = 1024;
      int v18 = 2436;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v15,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((a2 == 0) != (a3 == 0LL))
  {
    uint64_t v5 = sub_138E8(13);
    id v6 = sub_8C7D4(1, *(void **)v5, *(void *)(v5 + 8));
    __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    int v8 = v7;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "VirtualAudio_PlugIn.mm";
      __int16 v17 = 1024;
      int v18 = 2437;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v15,  0x12u);
    }

    __int16 v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "Precondition failure.");
  }

  uint64_t v3 = (unsigned int *)(a1 + 224);
  if (a3) {
    uint64_t v3 = a3;
  }
  return *v3 | ((unint64_t)*(unsigned int *)(a1 + 228) << 32);
}

void sub_27351C(_Unwind_Exception *a1)
{
}

uint64_t sub_27353C( uint64_t a1, _OWORD *a2, void *a3, uint64_t a4, uint64_t ***a5, uint64_t a6, uint64_t a7, char a8)
{
  *(_OWORD *)a1 = *a2;
  sub_128B98(a1 + 16, a3);
  *(void *)(a1 + 48) = 0LL;
  int v14 = (uint64_t **)(a1 + 48);
  int v15 = (uint64_t ***)(a1 + 40);
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = a1 + 72;
  sub_86550((uint64_t *)(a1 + 88), a4);
  sub_86550((uint64_t *)(a1 + 112), a6);
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = 1668248944;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)a7;
  if (*(char *)(a7 + 31) < 0)
  {
    sub_24054((_BYTE *)(a1 + 160), *(void **)(a7 + 8), *(void *)(a7 + 16));
  }

  else
  {
    __int128 v16 = *(_OWORD *)(a7 + 8);
    *(void *)(a1 + 176) = *(void *)(a7 + 24);
    *(_OWORD *)(a1 + 160) = v16;
  }

  uint64_t v17 = *(void *)(a7 + 32);
  *(_OWORD *)(a1 + sub_19DFC(v37 - 192) = 0u;
  *(void *)(a1 + 184) = v17;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 352) = 0LL;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 2memset(buf, 0, 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  *(_WORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 370) = a8;
  *(_BYTE *)(a1 + 371) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (v15 != a5)
  {
    uint64_t v20 = *a5;
    int v18 = (uint64_t **)(a5 + 1);
    uint64_t v19 = v20;
    if (*(void *)(a1 + 56))
    {
      char v21 = *v15;
      *int v15 = v14;
      (*v14)[2] = 0LL;
      *int v14 = 0LL;
      *(void *)(a1 + 56) = 0LL;
      if (v21[1]) {
        id v22 = v21[1];
      }
      else {
        id v22 = (uint64_t *)v21;
      }
      uint64_t v44 = a1 + 40;
      uint64_t v45 = v22;
      uint64_t v46 = (unint64_t *)v22;
      if (!v22 || (uint64_t v45 = sub_68080((uint64_t)v22), v19 == v18))
      {
        uint64_t v32 = v19;
      }

      else
      {
        do
        {
          uint64_t v24 = (uint64_t)v19[4];
          uint64_t v23 = (uint64_t)v19[5];
          if (v23)
          {
            int v25 = (unint64_t *)(v23 + 16);
            do
              unint64_t v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }

          uint64_t v27 = (std::__shared_weak_count *)v22[5];
          v22[4] = v24;
          v22[5] = v23;
          if (v27) {
            std::__shared_weak_count::__release_weak(v27);
          }
          uint64_t v28 = *v14;
          uint64_t v29 = (uint64_t **)(a1 + 48);
          uint64_t v30 = (uint64_t **)(a1 + 48);
          if (*v14)
          {
            do
            {
              while (1)
              {
                uint64_t v29 = (uint64_t **)v28;
                uint64_t v28 = *v29;
                uint64_t v30 = v29;
                if (!*v29) {
                  goto LABEL_22;
                }
              }

              uint64_t v28 = v29[1];
            }

            while (v28);
            uint64_t v30 = v29 + 1;
          }

void sub_273898(_Unwind_Exception *a1)
{
}

void sub_273930(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  CFMutableArrayRef theArray = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  *(void *)a1 = theArray;
  *(_WORD *)(a1 + 8) = 257;
  sub_8DCFC((uint64_t)v47, a4);
  uint64_t v8 = *a3;
  uint64_t v21 = a3[1];
  if (*a3 != v21)
  {
    do
    {
      sub_262EC0((uint64_t *)&v45, (uint64_t)v47, *(_DWORD *)(v8 + 4));
      __int16 v9 = v45;
      uint64_t v24 = v46;
      if (v45 != v46)
      {
        uint64_t v22 = v8;
        uint64_t v23 = v8 + 8;
        do
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          __int16 v44 = 257;
          sub_13408((uint64_t)&Mutable, @"device type", *(_DWORD *)v8);
          if (*v9) {
            sub_13408((uint64_t)&Mutable, @"audio session id", *v9);
          }
          unint64_t v26 = v9;
          uint64_t v10 = sub_72A04(*(_DWORD *)v8, *(_DWORD *)(v8 + 4), *(uint64_t **)(a2 + 144), *(uint64_t **)(a2 + 152));
          id v11 = (int *)v8;
          uint64_t v12 = v10;
          sub_72A50(&v42, v11);
          if (HIBYTE(v44) && v42 && Mutable) {
            CFDictionarySetValue(Mutable, @"device UID", v42);
          }
          if (v12 && ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 112LL))(v12) & 1) == 0)
          {
            sub_13408((uint64_t)&Mutable, @"device ID", *(_DWORD *)(v12 + 8));
            if (HIBYTE(v44))
            {
              int v13 = *(const void **)(v12 + 592);
              if (v13)
              {
                if (Mutable) {
                  CFDictionarySetValue(Mutable, @"device name", v13);
                }
              }
            }

            sub_134C4((uint64_t)&Mutable, @"persisted", 1);
          }

          CFMutableArrayRef v40 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
          __int16 v41 = 257;
          std::string value = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
          __int16 v39 = 257;
          sub_B8E40(&v36, v23, "", 4721);
          for (uint64_t i = v37; i != &v36; uint64_t i = (uint64_t *)i[1])
          {
            uint64_t v15 = i[2];
            __int16 v16 = *(_WORD *)(v15 + 184);
            std::string __p = 0LL;
            uint64_t v28 = 0LL;
            uint64_t v29 = 0LL;
            strcpy(v30, "cwdv");
            v30[8] = 0;
            int v31 = 3;
            v33[0] = 0LL;
            v33[1] = 0LL;
            uint64_t v32 = v33;
            CFTypeRef cf = 0LL;
            int v34 = 44731050;
            int v17 = sub_578E8(*(void *)(a2 + 128), v15, (uint64_t)&__p);
            if ((v16 & 1) != 0) {
              p_std::string value = (void **)&v40;
            }
            else {
              p_std::string value = &value;
            }
            sub_1378C((uint64_t)p_value, v17);
            if (cf) {
              CFRelease(cf);
            }
            sub_32C8C(v33[0]);
            if (__p)
            {
              uint64_t v28 = __p;
              operator delete(__p);
            }
          }

          sub_1BB88(&v36);
          uint64_t v19 = Mutable;
          if (HIBYTE(v44))
          {
            uint64_t v8 = v22;
            uint64_t v20 = v26;
            if (!v40
              || !Mutable
              || (CFDictionarySetValue(Mutable, @"input ports", v40), uint64_t v19 = Mutable, HIBYTE(v44)))
            {
              if (value && v19)
              {
                CFDictionarySetValue(v19, @"output ports", value);
                uint64_t v19 = Mutable;
              }
            }
          }

          else
          {
            uint64_t v8 = v22;
            uint64_t v20 = v26;
          }

          if (theArray) {
            CFArrayAppendValue(theArray, v19);
          }
          sub_13818((uint64_t)&value);
          sub_13818((uint64_t)&v40);
          if (v42) {
            CFRelease(v42);
          }
          sub_13850((uint64_t)&Mutable);
          __int16 v9 = v20 + 1;
        }

        while (v9 != v24);
        __int16 v9 = v45;
      }

      if (v9)
      {
        uint64_t v46 = v9;
        operator delete(v9);
      }

      v8 += 32LL;
    }

    while (v8 != v21);
  }

  sub_8DF20(v48);
}

void sub_273CCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, CFTypeRef cf, char a28, uint64_t a29, uint64_t a30, char a31)
{
}

BOOL sub_273D9C(uint64_t a1, uint64_t a2)
{
  return ((a2 << 63 >> 63) & a1) != 0;
}

CFArrayRef sub_273DAC(uint64_t *a1, CFArrayRef *a2, uint64_t a3, __n128 a4)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  BOOL v164 = a1;
  a1[2] = 0LL;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (v5)
  {
    id v6 = sub_153968(a3);
    __int16 v7 = v164;
    v6[1] = v164;
    uint64_t v8 = *v7;
    void *v6 = *v7;
    *(void *)(v8 + 8) = v6;
    uint64_t *v7 = (uint64_t)v6;
    ++v7[2];
  }

  unsigned int v9 = 0;
  a4.n128_u64[0] = 136315906LL;
  __n128 v162 = a4;
  a4.n128_u64[0] = 136315650LL;
  __n128 v163 = a4;
  char v160 = a2;
  while (1)
  {
    __n128 result = *a2;
    if (*a2) {
      __n128 result = (const __CFArray *)CFArrayGetCount(result);
    }
    id v188 = 0LL;
    sub_1A0F08(a2, v9, &v188);
    int v186 = v188;
    __int16 v187 = 0;
    sub_7D084(&v183, "");
    unsigned int v182 = 0;
    if (sub_51A88(v186, @"device ID", &v182))
    {
      std::to_string((std::string *)v189, v182);
      id v11 = std::string::insert((std::string *)v189, 0LL, "- Device ID: ", 0xDuLL);
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v11->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 size = v11->__r_.__value_.__s.__size_;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      int v14 = operator new(0x28uLL);
      std::string::size_type v15 = v194.__r_.__value_.__r.__words[0];
      unint64_t v14[2] = v12;
      v14[3] = v15;
      *(void *)((char *)v14 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((_BYTE *)v14 + 39) = size;
      __int16 v16 = v164;
      uint64_t v17 = *v164;
      *int v14 = *v164;
      v14[1] = v16;
      *(void *)(v17 + 8) = v14;
      *__int16 v16 = (uint64_t)v14;
      ++v16[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
      if (v185 < 0)
      {
        uint64_t v184 = 2LL;
        int v18 = v183;
      }

      else
      {
        char v185 = 2;
        int v18 = (char *)&v183;
      }

      strcpy(v18, "  ");
    }

    unsigned int v181 = 0;
    if (sub_51A88(v186, @"device type", &v181))
    {
      if (v185 >= 0) {
        size_t v19 = v185;
      }
      else {
        size_t v19 = v184;
      }
      sub_D0924((uint64_t)v189, v19 + 15);
      if (v191[3] >= 0) {
        uint64_t v20 = v189;
      }
      else {
        uint64_t v20 = *(_BYTE **)v189;
      }
      if (v19)
      {
        if (v185 >= 0) {
          uint64_t v21 = (void **)&v183;
        }
        else {
          uint64_t v21 = (void **)v183;
        }
        memmove(v20, v21, v19);
      }

      strcpy(&v20[v19], "- Device Type: ");
      sub_2CA1C(&v194, v181);
      if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v22 = &v194;
      }
      else {
        uint64_t v22 = (std::string *)v194.__r_.__value_.__r.__words[0];
      }
      if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v23 = v194.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v23 = v194.__r_.__value_.__l.__size_;
      }
      uint64_t v24 = std::string::append((std::string *)v189, (const std::string::value_type *)v22, v23);
      std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
      *(void *)&__int128 inAddress = v24->__r_.__value_.__l.__size_;
      *(void *)((char *)&inAddress + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v26 = v24->__r_.__value_.__s.__size_;
      v24->__r_.__value_.__l.__size_ = 0LL;
      v24->__r_.__value_.__l.__cap_ = 0LL;
      v24->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v27 = operator new(0x28uLL);
      uint64_t v28 = inAddress;
      v27[2] = v25;
      v27[3] = v28;
      *(void *)((char *)v27 + 31) = *(void *)((char *)&inAddress + 7);
      *((_BYTE *)v27 + 39) = v26;
      uint64_t v29 = v164;
      uint64_t v30 = *v164;
      *uint64_t v27 = *v164;
      v27[1] = v29;
      *(void *)(v30 + 8) = v27;
      uint64_t *v29 = (uint64_t)v27;
      ++v29[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }

    int v180 = 0LL;
    if (sub_51EE8(v186, @"device UID", (const __CFDictionary **)&v180))
    {
      sub_48E98(v189, v180);
      int v31 = std::string::insert((std::string *)v189, 0LL, "  - Device UID: ", 0x10uLL);
      std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v33 = v31->__r_.__value_.__s.__size_;
      v31->__r_.__value_.__l.__size_ = 0LL;
      v31->__r_.__value_.__l.__cap_ = 0LL;
      v31->__r_.__value_.__r.__words[0] = 0LL;
      int v34 = operator new(0x28uLL);
      std::string::size_type v35 = v194.__r_.__value_.__r.__words[0];
      void v34[2] = v32;
      v34[3] = v35;
      *(void *)((char *)v34 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((_BYTE *)v34 + 39) = v33;
      uint64_t v36 = v164;
      uint64_t v37 = *v164;
      *int v34 = *v164;
      v34[1] = v36;
      *(void *)(v37 + 8) = v34;
      uint64_t *v36 = (uint64_t)v34;
      ++v36[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }

    int v179 = 0LL;
    if (sub_51EE8(v186, @"device name", (const __CFDictionary **)&v179))
    {
      sub_48E98(v189, v179);
      uint64_t v38 = std::string::insert((std::string *)v189, 0LL, "  - Device Name: ", 0x11uLL);
      std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
      v38->__r_.__value_.__l.__size_ = 0LL;
      v38->__r_.__value_.__l.__cap_ = 0LL;
      v38->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v41 = operator new(0x28uLL);
      std::string::size_type v42 = v194.__r_.__value_.__r.__words[0];
      UInt32 v41[2] = v39;
      void v41[3] = v42;
      *(void *)((char *)v41 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((_BYTE *)v41 + 39) = v40;
      uint64_t v43 = v164;
      uint64_t v44 = *v164;
      void *v41 = *v164;
      v41[1] = v43;
      *(void *)(v44 + 8) = v41;
      uint64_t *v43 = (uint64_t)v41;
      ++v43[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }

    unsigned int v178 = 0;
    if (sub_51A88(v186, @"audio session id", &v178))
    {
      if (v185 >= 0) {
        size_t v45 = v185;
      }
      else {
        size_t v45 = v184;
      }
      sub_D0924((uint64_t)v189, v45 + 14);
      if (v191[3] >= 0) {
        uint64_t v46 = v189;
      }
      else {
        uint64_t v46 = *(_BYTE **)v189;
      }
      if (v45)
      {
        if (v185 >= 0) {
          uint64_t v47 = (void **)&v183;
        }
        else {
          uint64_t v47 = (void **)v183;
        }
        memmove(v46, v47, v45);
      }

      strcpy(&v46[v45], "- Context ID: ");
      sub_2CA1C(&v194, v178);
      if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v48 = &v194;
      }
      else {
        uint64_t v48 = (std::string *)v194.__r_.__value_.__r.__words[0];
      }
      if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v49 = v194.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v49 = v194.__r_.__value_.__l.__size_;
      }
      uint64_t v50 = std::string::append((std::string *)v189, (const std::string::value_type *)v48, v49);
      std::string::size_type v51 = v50->__r_.__value_.__r.__words[0];
      *(void *)&__int128 inAddress = v50->__r_.__value_.__l.__size_;
      *(void *)((char *)&inAddress + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v52 = v50->__r_.__value_.__s.__size_;
      v50->__r_.__value_.__l.__size_ = 0LL;
      v50->__r_.__value_.__l.__cap_ = 0LL;
      v50->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v53 = operator new(0x28uLL);
      uint64_t v54 = inAddress;
      v53[2] = v51;
      v53[3] = v54;
      *(void *)((char *)v53 + 31) = *(void *)((char *)&inAddress + 7);
      *((_BYTE *)v53 + 39) = v52;
      uint64_t v55 = v164;
      uint64_t v56 = *v164;
      void *v53 = *v164;
      v53[1] = v55;
      *(void *)(v56 + 8) = v53;
      *uint64_t v55 = (uint64_t)v53;
      ++v55[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }

    char v177 = 0;
    if (sub_52C24(v186, @"persisted", &v177))
    {
      uint64_t v57 = v177 ? "True" : "False";
      uint64_t v58 = (std::string *)sub_7D084(v189, v57);
      uint64_t v59 = std::string::insert(v58, 0LL, "  - Device Persisted: ", 0x16uLL);
      std::string::size_type v60 = v59->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v59->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v59->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v61 = v59->__r_.__value_.__s.__size_;
      v59->__r_.__value_.__l.__size_ = 0LL;
      v59->__r_.__value_.__l.__cap_ = 0LL;
      v59->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v62 = operator new(0x28uLL);
      std::string::size_type v63 = v194.__r_.__value_.__r.__words[0];
      v62[2] = v60;
      v62[3] = v63;
      *(void *)((char *)v62 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((_BYTE *)v62 + 39) = v61;
      __int128 v64 = v164;
      uint64_t v65 = *v164;
      void *v62 = *v164;
      v62[1] = v64;
      *(void *)(v65 + 8) = v62;
      *__int128 v64 = (uint64_t)v62;
      ++v64[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }

    std::string::size_type v176 = 0LL;
    if (sub_529CC(v186, @"input ports", &v176))
    {
      v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v176;
      LOWORD(v194.__r_.__value_.__r.__words[1]) = 0;
      sub_1541E8((uint64_t)v189, (CFArrayRef *)&v194);
      __int128 v66 = (void *)sub_13818((uint64_t)&v194);
      sub_7D084(v66, "  - Input Ports: { ");
      int v67 = *(_DWORD **)v189;
      if (*(void *)&v189[8] != *(void *)v189)
      {
        uint64_t v68 = 0LL;
        unint64_t v69 = (uint64_t)(*(void *)&v189[8] - *(void *)v189) >> 2;
        for (unsigned int i = 1; ; ++i)
        {
          LODWORD(v166) = 0;
          uint64_t v175 = 0x400000000LL;
          uint64_t v174 = 0x676C6F6270747970LL;
          AudioObjectGetPropertyData( v67[v68],  (const AudioObjectPropertyAddress *)&v174,  0,  0LL,  (UInt32 *)&v175 + 1,  &v166);
          std::to_string(&v170, v67[v68]);
          uint64_t v71 = std::string::insert(&v170, 0LL, "(", 1uLL);
          __int128 v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__l.__cap_ = v71->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v72;
          v71->__r_.__value_.__l.__size_ = 0LL;
          v71->__r_.__value_.__l.__cap_ = 0LL;
          v71->__r_.__value_.__r.__words[0] = 0LL;
          uint64_t v73 = std::string::append(&v171, ":", 1uLL);
          __int128 v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v172.__r_.__value_.__l.__cap_ = v73->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0LL;
          v73->__r_.__value_.__l.__cap_ = 0LL;
          v73->__r_.__value_.__r.__words[0] = 0LL;
          sub_2CA1C(&v167, v166);
          if ((v169 & 0x80u) == 0) {
            uint64_t v75 = (const std::string::value_type *)&v167;
          }
          else {
            uint64_t v75 = v167;
          }
          if ((v169 & 0x80u) == 0) {
            std::string::size_type v76 = v169;
          }
          else {
            std::string::size_type v76 = v168;
          }
          char v77 = std::string::append(&v172, v75, v76);
          __int128 v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v173.__r_.__value_.__l.__cap_ = v77->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0LL;
          v77->__r_.__value_.__l.__cap_ = 0LL;
          v77->__r_.__value_.__r.__words[0] = 0LL;
          BOOL v79 = std::string::append(&v173, ")", 1uLL);
          __int128 v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          int64_t cap = v79->__r_.__value_.__l.__cap_;
          __int128 inAddress = v80;
          v79->__r_.__value_.__l.__size_ = 0LL;
          v79->__r_.__value_.__l.__cap_ = 0LL;
          v79->__r_.__value_.__r.__words[0] = 0LL;
          if (cap >= 0) {
            p___int128 inAddress = (const std::string::value_type *)&inAddress;
          }
          else {
            p___int128 inAddress = (const std::string::value_type *)inAddress;
          }
          if (cap >= 0) {
            std::string::size_type v82 = HIBYTE(cap);
          }
          else {
            std::string::size_type v82 = *((void *)&inAddress + 1);
          }
          std::string::append(&v194, p_inAddress, v82);
          if (SHIBYTE(cap) < 0) {
            operator delete((void *)inAddress);
          }
          if (v69 <= i) {
            break;
          }
          std::string::append(&v194, ", ", 2uLL);
          uint64_t v68 = i;
        }
      }

      std::string::append(&v194, " }", 2uLL);
      uint64_t v83 = sub_153968((uint64_t)&v194);
      __int16 v84 = v164;
      v83[1] = v164;
      uint64_t v85 = *v84;
      void *v83 = *v84;
      *(void *)(v85 + 8) = v83;
      *__int16 v84 = (uint64_t)v83;
      ++v84[2];
      if (((char)v194.__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        if (!v67) {
          goto LABEL_104;
        }
LABEL_103:
        operator delete(v67);
        goto LABEL_104;
      }

      operator delete(v194.__r_.__value_.__l.__data_);
      if (v67) {
        goto LABEL_103;
      }
    }

void sub_274DF4(_Unwind_Exception *a1)
{
}

void sub_275024(os_signpost_id_t *a1)
{
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_ActiveNonWirelessPorts", 0x19uLL) == &qword_4938E0)
  {
    os_signpost_id_t v3 = 0LL;
  }

  else
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    uint64_t v5 = (os_log_s *)(id)qword_493900;
    id v6 = v5;
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_BEGIN,  v3,  "VA_ActiveNonWirelessPorts",  "Query for kActiveNonWirelessPortsForRouteConfiguration",  (uint8_t *)&v10,  2u);
    }
  }

  *a1 = v3;
  uint64_t v7 = sub_138E8(42);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    uint64_t v8 = (os_log_s *)*(id *)v7;
    if (v8)
    {
      unsigned int v9 = v8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        id v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 55;
        __int16 v14 = 2080;
        std::string::size_type v15 = "kActiveNonWirelessPorts";
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

os_signpost_id_t *sub_275238(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    os_signpost_id_t v3 = (os_log_s *)*(id *)v2;
    if (v3)
    {
      unsigned __int8 v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        id v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 55;
        __int16 v14 = 2080;
        std::string::size_type v15 = "kActiveNonWirelessPorts";
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    id v6 = (os_log_s *)(id)qword_493900;
    uint64_t v7 = v6;
    os_signpost_id_t v8 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "VA_ActiveNonWirelessPorts",  (const char *)&unk_420CC6,  (uint8_t *)&v10,  2u);
    }
  }

  return a1;
}

void sub_2753DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

BOOL sub_2753E8(uint64_t a1, CFDictionaryRef *a2)
{
  if (CFDictionaryContainsKey(*a2, @"overridden ports"))
  {
    uint64_t v124 = sub_138E8(13);
    id v125 = sub_8C7D4(1, *(void **)v124, *(void *)(v124 + 8));
    uint64_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);
    unint64_t v127 = v126;
    if (v126 && os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4785;
      _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.",  v207,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (CFDictionaryContainsKey(*a2, @"routable ports"))
  {
    uint64_t v129 = sub_138E8(13);
    id v130 = sub_8C7D4(1, *(void **)v129, *(void *)(v129 + 8));
    uint64_t v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
    char v132 = v131;
    if (v131 && os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4789;
      _os_log_impl( &dword_0,  v132,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.",  v207,  0x12u);
    }

    uint64_t v133 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v133 = &off_4865A0;
    v133[2] = 1852797029;
  }

  if (CFDictionaryContainsKey(*a2, @"unroutable ports"))
  {
    uint64_t v134 = sub_138E8(13);
    id v135 = sub_8C7D4(1, *(void **)v134, *(void *)(v134 + 8));
    uint64_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
    uint64_t v137 = v136;
    if (v136 && os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4793;
      _os_log_impl( &dword_0,  v137,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.",  v207,  0x12u);
    }

    uint64_t v138 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v138 = &off_4865A0;
    v138[2] = 1852797029;
  }

  if (CFDictionaryContainsKey(*a2, @"preferred sub-ports"))
  {
    uint64_t v139 = sub_138E8(13);
    id v140 = sub_8C7D4(1, *(void **)v139, *(void *)(v139 + 8));
    char v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
    uint64_t v142 = v141;
    if (v141 && os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4797;
      _os_log_impl( &dword_0,  v142,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support  kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.",  v207,  0x12u);
    }

    int v143 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v143 = &off_4865A0;
    v143[2] = 1852797029;
  }

  if (CFDictionaryContainsKey(*a2, @"active data sources"))
  {
    uint64_t v144 = sub_138E8(13);
    id v145 = sub_8C7D4(1, *(void **)v144, *(void *)(v144 + 8));
    char v146 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
    uint64_t v147 = v146;
    if (v146 && os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4801;
      _os_log_impl( &dword_0,  v147,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support  kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.",  v207,  0x12u);
    }

    uint64_t v148 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v148 = &off_4865A0;
    v148[2] = 1852797029;
  }

  if (CFDictionaryContainsKey(*a2, @"voice processing configuration"))
  {
    uint64_t v149 = sub_138E8(13);
    id v150 = sub_8C7D4(1, *(void **)v149, *(void *)(v149 + 8));
    uint64_t v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
    char v152 = v151;
    if (v151 && os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4805;
      _os_log_impl( &dword_0,  v152,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support  kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.",  v207,  0x12u);
    }

    uint64_t v153 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v153 = &off_4865A0;
    v153[2] = 1852797029;
  }

  if (CFDictionaryContainsKey(*a2, @"sub-port preferences"))
  {
    uint64_t v154 = sub_138E8(13);
    id v155 = sub_8C7D4(1, *(void **)v154, *(void *)(v154 + 8));
    char v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
    id v157 = v156;
    if (v156 && os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4809;
      _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support  kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.",  v207,  0x12u);
    }

    uint64_t v158 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v158 = &off_4865A0;
    v158[2] = 1852797029;
  }

  if (CFDictionaryContainsKey(*a2, @"screen dark policy enabled"))
  {
    uint64_t v159 = sub_138E8(13);
    id v160 = sub_8C7D4(1, *(void **)v159, *(void *)(v159 + 8));
    unsigned int v161 = (os_log_s *)objc_claimAutoreleasedReturnValue(v160);
    __n128 v162 = v161;
    if (v161 && os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4813;
      _os_log_impl( &dword_0,  v162,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInPropertyRouteConfigurationIsDisr uptive doesn't support  kVirtualAudioPlugInRouteConfigurationScreenDarkPolicyEnabledKey.",  v207,  0x12u);
    }

    __n128 v163 = __cxa_allocate_exception(0x10uLL);
    *(void *)__n128 v163 = &off_4865A0;
    v163[2] = 1852797029;
  }

  uint64_t v4 = sub_72A04(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (!v4)
  {
    uint64_t v164 = sub_138E8(13);
    id v165 = sub_8C7D4(1, *(void **)v164, *(void *)(v164 + 8));
    uint64_t v166 = (os_log_s *)objc_claimAutoreleasedReturnValue(v165);
    AudioObjectID v167 = v166;
    if (v166 && os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v207 = 136315394;
      unint64_t v208 = "VirtualAudio_PlugIn.mm";
      __int16 v209 = 1024;
      int v210 = 4817;
      _os_log_impl( &dword_0,  v167,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [defaultDevice is NULL]: No default VAD could be found!",  v207,  0x12u);
    }

    std::string::size_type v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v168, "No default VAD could be found!");
  }

  uint64_t v5 = sub_135A0(v4, 1);
  sub_86550((uint64_t *)&v197, v5);
  sub_49A70(v207, a1, a2, 0, 1);
  uint64_t v6 = v211;
  if (v211 <= 1684108898)
  {
    if (v211 <= 1668047727)
    {
      if (v211 <= 1651794543)
      {
        if (v211 == 845504882 || v211 == 1635087471) {
          goto LABEL_56;
        }
        int v9 = 1635213689;
        goto LABEL_46;
      }

      if (v211 == 1651794544 || v211 == 1651795060)
      {
LABEL_51:
        uint64_t v10 = sub_138E8(2);
        uint64_t v11 = sub_138E8(34);
        char v12 = 0;
        uint64_t v13 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v14 = *(void *)(v10 + 8);
        while (1)
        {
          uint64_t v15 = *(int *)&buf[4 * v13];
          char v16 = v12;
          if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
            break;
          }
          char v12 = 1;
          uint64_t v13 = 1LL;
          if ((v16 & 1) != 0)
          {
            if ((v14 & 1) == 0) {
              goto LABEL_77;
            }
            goto LABEL_69;
          }
        }

        if ((v14 & v15) == 0) {
          uint64_t v10 = v11;
        }
        if ((*(void *)(v10 + 8) & 1) != 0)
        {
LABEL_69:
          id v21 = *(id *)v10;
          if (v21)
          {
            uint64_t v22 = (os_log_s *)v21;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              sub_2CA1C(&__p, v211);
              std::string::size_type v23 = SHIBYTE(v195) >= 0 ? &__p : (void **)__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4946;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&buf[20] = v23;
              _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d The initiation context trigger value: %s would be disruptive",  buf,  0x1Cu);
              if (SHIBYTE(v195) < 0) {
                operator delete(__p);
              }
            }
          }
        }

LABEL_207:
  BOOL v24 = 1LL;
  if (v192 == 1 && v198[1] == (void *)((char *)&dword_0 + 1))
  {
    uint64_t v91 = v197;
    if (v197 != v198)
    {
      __int128 v92 = v190;
      while (*((_DWORD *)v91 + 7) == *((_DWORD *)v92 + 7))
      {
        __int128 v93 = (void *)v91[1];
        __int128 v94 = v91;
        if (v93)
        {
          do
          {
            uint64_t v91 = v93;
            __int128 v93 = (void *)*v93;
          }

          while (v93);
        }

        else
        {
          do
          {
            uint64_t v91 = (void *)v94[2];
            BOOL v56 = *v91 == (void)v94;
            __int128 v94 = v91;
          }

          while (!v56);
        }

        uint64_t v95 = (void *)v92[1];
        if (v95)
        {
          do
          {
            std::string::size_type v96 = v95;
            uint64_t v95 = (void *)*v95;
          }

          while (v95);
        }

        else
        {
          do
          {
            std::string::size_type v96 = (void *)v92[2];
            BOOL v56 = *v96 == (void)v92;
            __int128 v92 = v96;
          }

          while (!v56);
        }

        __int128 v92 = v96;
        if (v91 == v198) {
          goto LABEL_223;
        }
      }

      goto LABEL_252;
    }

      char v114 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v114, "Precondition failure.");
    }

    id v88 = v87[6];
    if (!v88) {
LABEL_199:
    }
      sub_82CEC();
    (*(void (**)(uint64_t, unsigned int *, std::string *, void **))(*(void *)v88 + 48LL))( v88,  v82 + 2,  a3,  v125);
  }

  if (*(void *)(v118 + 296))
  {
    unint64_t v89 = (os_log_t *)sub_138E8(20);
    __int128 v90 = *v89;
    if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v91 = CFCopyDescription(*(CFTypeRef *)(v118 + 296));
      sub_48188((uint64_t)&__dst, v91);
      if (v91) {
        CFRelease(v91);
      }
      p_dst = &__dst;
      if ((__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 215;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = p_dst;
      _os_log_impl(&dword_0, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding custom macros (%s) to DSPInfoMap", buf, 0x1Cu);
    }

    sub_2DC034((uint64_t)&__dst, *(CFTypeRef *)(v118 + 296));
    *(_DWORD *)AudioObjectPropertyAddress buf = 1835233903;
    sub_2DC450((uint64_t)&buf[8], (uint64_t)&__dst);
    sub_148DB8((uint64_t)v125, *(int *)buf, buf);
    sub_2DBF5C((uint64_t)&buf[8]);
    sub_2DBF5C((uint64_t)&__dst);
  }

  __int128 v93 = sub_D1274((uint64_t)buf, (uint64_t)v125);
  __int128 v94 = sub_2FE168(v93);
  sub_D0C4C(*(void **)&buf[16]);
  uint64_t v95 = *(void **)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  if (v95) {
    operator delete(v95);
  }
  sub_2FE1F0((char **)a1, (uint64_t)v94);
  if (*(_BYTE *)(a1 + 128))
  {
    std::string::operator=(v115, a3);
    std::string::operator=((std::string *)(a1 + 80), v116);
    std::string::operator=((std::string *)(a1 + 104), a3 + 2);
  }

  else
  {
    sub_17B7BC((char *)v115, (__int128 *)a3);
    *(_BYTE *)(a1 + 128) = 1;
  }

  std::string::size_type v96 = *(unsigned int **)(v118 + 160);
  unint64_t v97 = *(unsigned int **)(v118 + 168);
  while (v96 != v97)
  {
    char v98 = sub_394B78(*v96);
    if (!v98)
    {
      uint64_t v112 = (os_log_t *)sub_138E8(13);
      uint64_t v113 = *v112;
      if (*v112)
      {
        if (os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 191;
          _os_log_impl( &dword_0,  v113,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      goto LABEL_207;
    }

    int v99 = v98[6];
    if (!v99) {
      goto LABEL_199;
    }
    (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(void *)v99 + 48LL))(v99, v118, a3, a1);
    ++v96;
  }

  __int128 v100 = (os_log_t *)sub_138E8(20);
  uint64_t v101 = *v100;
  if (*v100 && os_log_type_enabled(*v100, OS_LOG_TYPE_DEFAULT))
  {
    int v103 = *(void *)(a1 + 168);
    std::string::size_type v102 = *(void *)(a1 + 176);
    sub_153340((uint64_t *)&v130, (uint64_t)v125);
    sub_7D084(&v137, "\n");
    sub_1518D0(&__dst, (uint64_t)&v130, (uint64_t)&v137);
    id v104 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    if ((__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      id v104 = &__dst;
    }
    *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 437;
    *(_WORD *)&_BYTE buf[18] = 2048;
    *(void *)&buf[20] = 0xAAAAAAAAAAAAAAABLL * ((v102 - v103) >> 3);
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&buf[30] = v104;
    _os_log_impl( &dword_0,  v101,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Created DSPChainConfig with %lu software volume properties, and with map: %s",  buf,  0x26u);
    sub_1532B4(&v130);
  }

  sub_D0C4C((void *)v126);
  uint64_t v105 = v125[0];
  v125[0] = 0LL;
  if (v105) {
    operator delete(v105);
  }
}

LABEL_223:
    LODWORD(v199.__r_.__value_.__l.__data_) = *((_DWORD *)v190 + 7);
    strcpy(buf, "pytpbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v97 = sub_36EF4((AudioObjectID *)&v199, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
    int v99 = v97;
    if ((_DWORD)v97 || !v98)
    {
      char v177 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v177 = &off_4865A0;
      v177[2] = v99;
    }

    BOOL v24 = HIDWORD(v97) != 1885892727 && HIDWORD(v97) != 1886613611;
  }

                  sub_2DE074(*(unsigned int *)(a1 + 56));
                  uint64_t v13 = outData;
                  goto LABEL_226;
                }

                sub_2E1C14((uint64_t)&v144, (uint64_t)&v130);
                if (DWORD2(v145)) {
                  goto LABEL_73;
                }
                memset(v124, 0, 24);
                uint64_t v62 = (void *)v144;
                sub_7A5B8( v124,  (const void *)v144,  *((uint64_t *)&v144 + 1),  (uint64_t)(*((void *)&v144 + 1) - v144) >> 2);
                v118.__m_ = 0LL;
                *(void *)&v118.__owns_ = 0LL;
                *(void *)&uint64_t v119 = 0LL;
                sub_7A5B8(&v118, *a2, (uint64_t)a2[1], a2[1] - *a2);
                uint64_t v71 = *(void **)v124;
                uint64_t v72 = v118.__m_;
                if (*(void *)&v124[8] - *(void *)v124 == *(void *)&v118.__owns_ - (unint64_t)v118.__m_)
                {
                  char v73 = memcmp(*(const void **)v124, v118.__m_, *(void *)&v124[8] - *(void *)v124) == 0;
                  if (!v72)
                  {
LABEL_198:
                    if (v71)
                    {
                      *(void *)&v124[8] = v71;
                      operator delete(v71);
                      a1 = v105;
                      if (v73)
                      {
LABEL_202:
                        uint64_t v85 = sub_138E8(13);
                        if ((*(_BYTE *)(v85 + 8) & 1) != 0)
                        {
                          std::string::size_type v25 = *(os_log_s **)v85;
                          if (!*(void *)v85) {
                            goto LABEL_145;
                          }
                          if (os_log_type_enabled(*(os_log_t *)v85, OS_LOG_TYPE_DEBUG))
                          {
                            buf.mSelector = 136315650;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            char v152 = 1024;
                            uint64_t v153 = 219;
                            uint64_t v154 = 1024;
                            *(_DWORD *)id v155 = v18;
                            _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
                          }
                        }

                        LODWORD(v25) = 0;
LABEL_145:
                        if (v62) {
                          operator delete(v62);
                        }
                        goto LABEL_147;
                      }
                    }

                    else
                    {
                      a1 = v105;
                      if (v73) {
                        goto LABEL_202;
                      }
                    }

LABEL_253:
  sub_32C8C(v183[0]);
  sub_32C8C(v185);
  sub_32C8C(v188);
  sub_32C8C(v191);
  *(void *)AudioObjectPropertyAddress buf = &v194;
  sub_135F74((void ***)buf);
  sub_734C4((void *)v196[1]);
LABEL_254:
  uint64_t v108 = sub_138E8(2);
  uint64_t v109 = sub_138E8(34);
  char v110 = 0;
  uint64_t v111 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v112 = *(void *)(v108 + 8);
  while (1)
  {
    uint64_t v113 = *(int *)&buf[4 * v111];
    char v114 = v110;
    if (((v112 & v113) != 0) != ((*(void *)(v109 + 8) & v113) != 0)) {
      break;
    }
    char v110 = 1;
    uint64_t v111 = 1LL;
    if ((v114 & 1) != 0)
    {
      if ((v112 & 1) == 0) {
        goto LABEL_268;
      }
      goto LABEL_262;
    }
  }

  if ((v112 & v113) == 0) {
    uint64_t v108 = v109;
  }
  if ((*(void *)(v108 + 8) & 1) != 0)
  {
LABEL_262:
    uint64_t v115 = (os_log_s *)*(id *)v108;
    if (v115)
    {
      uint64_t v116 = v115;
      if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
      {
        char v117 = "not be";
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v24) {
          char v117 = "be";
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4951;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v117;
        _os_log_impl( &dword_0,  v116,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d The proposed route configuration would %s disruptive",  buf,  0x1Cu);
      }
    }
  }

void sub_276EBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void **a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
  sub_32C8C(a11);
  sub_32C8C(a14);
  sub_32C8C(a17);
  sub_32C8C(a20);
  a19 = (void **)&a23;
  sub_135F74(&a19);
  sub_734C4(a27);
  sub_52EF0((uint64_t)&a47);
  sub_32C8C(a30);
  _Unwind_Resume(a1);
}

void *sub_27703C(void *result, void *a2)
{
  if ((_DWORD)result != 1735159650)
  {
    os_signpost_id_t v3 = (void *)a2[1];
    uint64_t v4 = a2;
    if (v3 == a2) {
      return sub_11C618((uint64_t)a2, v4, a2);
    }
    int v5 = (int)result;
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v3[3];
      if (!v6) {
        break;
      }
      int v7 = std::__shared_weak_count::lock(v6);
      if (!v7) {
        break;
      }
      unsigned __int16 v8 = v7;
      uint64_t v9 = v3[2];
      if (v9)
      {
        if (v5 == 1768845428)
        {
          if ((*(_WORD *)(v9 + 184) & 1) != 0) {
            goto LABEL_10;
          }
        }

        else if (v5 == 1869968496 && (*(_WORD *)(v9 + 184) & 1) == 0)
        {
LABEL_10:
          char v10 = 0;
          goto LABEL_13;
        }
      }

      char v10 = 1;
LABEL_13:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
      }

      if ((v10 & 1) != 0) {
        break;
      }
      os_signpost_id_t v3 = (void *)v3[1];
      if (v3 == a2)
      {
        uint64_t v4 = a2;
        return sub_11C618((uint64_t)a2, v4, a2);
      }
    }

    uint64_t v4 = a2;
    if (v3 != a2)
    {
      uint64_t v13 = (void *)v3[1];
      if (v13 != a2)
      {
        uint64_t v4 = v3;
        while (1)
        {
          uint64_t v14 = (std::__shared_weak_count *)v13[3];
          if (!v14) {
            goto LABEL_41;
          }
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          if (!v15) {
            goto LABEL_41;
          }
          char v16 = v15;
          uint64_t v17 = (__int128 *)(v13 + 2);
          uint64_t v18 = v13[2];
          if (!v18) {
            break;
          }
          if (v5 == 1768845428)
          {
            if ((*(_WORD *)(v18 + 184) & 1) == 0) {
              break;
            }
          }

          else if (v5 != 1869968496 || (*(_WORD *)(v18 + 184) & 1) != 0)
          {
            break;
          }

          char v19 = 0;
LABEL_32:
          uint64_t v20 = (unint64_t *)&v15->__shared_owners_;
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (v21)
          {
            if ((v19 & 1) == 0) {
              goto LABEL_38;
            }
          }

          else
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v16);
            if ((v19 & 1) == 0)
            {
LABEL_38:
              __int128 v22 = *v17;
              *(void *)uint64_t v17 = 0LL;
              void v13[3] = 0LL;
              std::string::size_type v23 = (std::__shared_weak_count *)v4[3];
              *((_OWORD *)v4 + 1) = v22;
              if (v23) {
                std::__shared_weak_count::__release_weak(v23);
              }
              uint64_t v4 = (void *)v4[1];
            }
          }

void sub_277230(os_signpost_id_t *a1)
{
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_BuiltInPorts", 0xFuLL) == &qword_4938E0)
  {
    os_signpost_id_t v3 = 0LL;
  }

  else
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    int v5 = (os_log_s *)(id)qword_493900;
    uint64_t v6 = v5;
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_BEGIN,  v3,  "VA_BuiltInPorts",  "Query for kVirtualAudioPlugInPropertyBuiltInPortsForCategory",  (uint8_t *)&v10,  2u);
    }
  }

  *a1 = v3;
  uint64_t v7 = sub_138E8(42);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    unsigned __int16 v8 = (os_log_s *)*(id *)v7;
    if (v8)
    {
      uint64_t v9 = v8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        uint64_t v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 58;
        __int16 v14 = 2080;
        uint64_t v15 = "kBuiltInPorts";
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

os_signpost_id_t *sub_277444(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    os_signpost_id_t v3 = (os_log_s *)*(id *)v2;
    if (v3)
    {
      unsigned __int8 v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        uint64_t v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 58;
        __int16 v14 = 2080;
        uint64_t v15 = "kBuiltInPorts";
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    uint64_t v6 = (os_log_s *)(id)qword_493900;
    uint64_t v7 = v6;
    os_signpost_id_t v8 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "VA_BuiltInPorts",  (const char *)&unk_420CC6,  (uint8_t *)&v10,  2u);
    }
  }

  return a1;
}

void sub_2775E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_2775F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  while (a2 != a3)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t result = sub_1378C(a1, *(_DWORD *)(a2 + 16));
    a2 = v7;
  }

  return result;
}

void sub_277660(_Unwind_Exception *a1)
{
}

void sub_277674(os_signpost_id_t *a1)
{
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_ConnectedPorts", 0x11uLL) == &qword_4938E0)
  {
    os_signpost_id_t v3 = 0LL;
  }

  else
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    unsigned __int8 v5 = (os_log_s *)(id)qword_493900;
    uint64_t v6 = v5;
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_BEGIN,  v3,  "VA_ConnectedPorts",  "Query for ConnectedPortsForRouteConfiguration",  (uint8_t *)&v10,  2u);
    }
  }

  *a1 = v3;
  uint64_t v7 = sub_138E8(42);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    os_signpost_id_t v8 = (os_log_s *)*(id *)v7;
    if (v8)
    {
      uint64_t v9 = v8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        uint64_t v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 61;
        __int16 v14 = 2080;
        uint64_t v15 = "kConnectedPorts";
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

os_signpost_id_t *sub_277888(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    os_signpost_id_t v3 = (os_log_s *)*(id *)v2;
    if (v3)
    {
      unsigned __int8 v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        uint64_t v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 61;
        __int16 v14 = 2080;
        uint64_t v15 = "kConnectedPorts";
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    uint64_t v6 = (os_log_s *)(id)qword_493900;
    uint64_t v7 = v6;
    os_signpost_id_t v8 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "VA_ConnectedPorts",  (const char *)&unk_420CC6,  (uint8_t *)&v10,  2u);
    }
  }

  return a1;
}

void sub_277A2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

CFNumberRef *sub_277A38(CFNumberRef *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_277AB8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_277AE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    CFNumberRef v3 = *(uint64_t **)a1;
    unsigned __int8 v4 = __p;
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v3++;
      *v4++ = v6;
      v5 -= 8LL;
    }

    while (v5);
  }

  CFArrayRef v7 = sub_7E39C((const void **)__p, (uint64_t)v10);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }

  return v7;
}

void sub_277B58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_277B74(uint64_t a1, CFTypeRef cf)
{
  CFNumberRef v3 = CFCopyDescription(cf);
  sub_48188(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_277BB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_277BD4(uint64_t result, _DWORD *a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  unint64_t v4 = *a2;
  if (v3 > v4 >> 2)
  {
    uint64_t v7 = sub_138E8(13);
    id v8 = sub_8C7D4(1, *(void **)v7, *(void *)(v7 + 8));
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    int v10 = v9;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "StandardUtilities.h";
      __int16 v19 = 1024;
      int v20 = 170;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): provided list exceeds the size of the provided array.",  (uint8_t *)&v17,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "provided list exceeds the size of the provided array.");
  }

  if (!(_DWORD)v4)
  {
    uint64_t v12 = sub_138E8(13);
    id v13 = sub_8C7D4(1, *(void **)v12, *(void *)(v12 + 8));
    __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    uint64_t v15 = v14;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "StandardUtilities.h";
      __int16 v19 = 1024;
      int v20 = 171;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): ioDataSize is 0.",  (uint8_t *)&v17,  0x12u);
    }

    char v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "ioDataSize is 0.");
  }

  uint64_t v5 = *(void *)(result + 8);
  if (v5 != result)
  {
    unsigned int v6 = 0;
    do
    {
      *(_DWORD *)(a3 + 4LL * v6++) = *(_DWORD *)(v5 + 16);
      uint64_t v5 = *(void *)(v5 + 8);
    }

    while (v5 != result);
  }

  *a2 = 4 * v3;
  return result;
}

void sub_277DCC(_Unwind_Exception *a1)
{
}

double sub_277DEC(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  *(void *)&__int128 v12 = a4;
  *((void *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      sub_26AF10((uint64_t)&v12, v5 + 7);
      id v8 = (unsigned int *)*((void *)v5 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          id v8 = *(unsigned int **)v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (unsigned int *)*((void *)v5 + 2);
          BOOL v10 = *(void *)v9 == (void)v5;
          uint64_t v5 = v9;
        }

        while (!v10);
      }

      uint64_t v5 = v9;
    }

    while (v9 != a3);
    uint64_t v5 = a3;
  }

  *(void *)a1 = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 8) = v12;
  return result;
}

uint64_t sub_277E80(uint64_t a1)
{
  *(void *)a1 = off_478FC0;
  uint64_t v2 = *(void **)(a1 + 496);
  *(void *)(a1 + 496) = 0LL;

  sub_25A240((void ***)(a1 + 480), 0LL);
  if (*(_BYTE *)(a1 + 472))
  {
    unint64_t v3 = *(void **)(a1 + 448);
    if (v3)
    {
      *(void *)(a1 + 456) = v3;
      operator delete(v3);
    }
  }

  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 432);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 416);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v11 = (void **)(a1 + 376);
  sub_135F74(&v11);
  sub_32C8C(*(void **)(a1 + 344));
  sub_32C8C(*(void **)(a1 + 320));
  unsigned int v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }

  uint64_t v7 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = 0LL;
  if (v7) {
    sub_26C0F4(v7);
  }
  sub_277FB0((_BYTE **)(a1 + 216));
  sub_32C8C(*(void **)(a1 + 184));
  id v8 = *(void **)(a1 + 144);
  if (v8)
  {
    *(void *)(a1 + 152) = v8;
    operator delete(v8);
  }

  sub_2549B4((uint64_t **)(a1 + 136), 0LL);
  uint64_t v9 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  sub_254978((void ***)(a1 + 120), 0LL);
  sub_254A10((uint64_t *)(a1 + 112), 0LL);
  return sub_2E2800(a1);
}

void sub_277FB0(_BYTE **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    if (v1[24]) {
      sub_13850((uint64_t)(v1 + 8));
    }
    operator delete(v1);
  }

char *New_VirtualAudio_PlugIn(uint64_t a1, const void *a2)
{
  CFUUIDRef v3 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0xF8u,  0xBBu,  0x1Cu,  0x28u,  0xBAu,  0xE8u,  0x11u,  0xD6u,  0x9Cu,  0x31u,  0,  3u,  0x93u,  0x15u,  0xCDu,  0x46u);
  if (!CFEqual(a2, v3)) {
    return 0LL;
  }
  unint64_t v4 = (char *)operator new(0x1F8uLL);
  *((void *)v4 + 1) = 0x61706C6700000000LL;
  *((void *)v4 + 2) = v4;
  *((_DWORD *)v4 + 6) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *(void *)unint64_t v4 = off_47C160;
  *((void *)v4 + 10) = &unk_48C110;
  uint64_t v5 = v4 + 80;
  *((void *)v4 + 11) = CFRetain(a2);
  v4[96] = 1;
  *((_DWORD *)v4 + 26) = 0;
  CFPlugInAddInstanceForFactory((CFUUIDRef)a2);
  if ((byte_493FB0 & 1) == 0)
  {
    strcpy((char *)&inAddress, "resubolg");
    BYTE1(inAddress.mElement) = 0;
    HIWORD(inAddress.mElement) = 0;
    AudioObjectAddPropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_289F64, 0LL);
    sub_289F64(1, 1u, (int *)&inAddress);
    inAddress.mSelector = 1886221684;
    AudioObjectAddPropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_289F64, 0LL);
    sub_289F64(1, 1u, (int *)&inAddress);
    inAddress.mSelector = 1937010031;
    AudioObjectAddPropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_289F64, 0LL);
    sub_289F64(1, 1u, (int *)&inAddress);
    byte_493FB0 = 1;
  }

  *(void *)unint64_t v4 = off_478FC0;
  *((void *)v4 + 23) = 0LL;
  *((void *)v4 + memset(buf, 0, 24) = 0LL;
  *(_OWORD *)(v4 + 108) = 0u;
  *(_OWORD *)(v4 + 1memset(buf, 0, 24) = 0u;
  *(_OWORD *)(v4 + 140) = 0u;
  *(_OWORD *)(v4 + 153) = 0u;
  *((void *)v4 + 22) = v4 + 184;
  unsigned int v6 = operator new(0x38uLL);
  _BYTE *v6 = 0;
  v6[8] = 0;
  v6[24] = 0;
  *((void *)v6 + 4) = 0LL;
  *((void *)v6 + 5) = 0LL;
  *((_DWORD *)v6 + 12) = 0;
  *((void *)v4 + 31) = 0LL;
  *((void *)v4 + 27) = v6;
  *((_OWORD *)v4 + 14) = xmmword_492FD0;
  *((_DWORD *)v4 + 60) = 1852796517;
  *((void *)v4 + 32) = 0LL;
  *((void *)v4 + 33) = 0LL;
  *((void *)v4 + 34) = 0x756E64656175746FLL;
  *((void *)v4 + 40) = 0LL;
  *((void *)v4 + 41) = 0LL;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *((void *)v4 + 39) = v4 + 320;
  inAddress.mSelector = 1;
  sub_15FFCC((uint64_t *)v4 + 42, (int *)&inAddress, 1LL);
  *((void *)v4 + 45) = sub_2784D8;
  *((void *)v4 + 46) = v4;
  v4[444] = 0;
  v4[448] = 0;
  v4[472] = 0;
  *((void *)v4 + 60) = 0LL;
  *((_DWORD *)v4 + 123) = 0;
  *((void *)v4 + 48) = 0LL;
  *((void *)v4 + 49) = 0LL;
  *((void *)v4 + 47) = 0LL;
  *(void *)(v4 + 397) = 0LL;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 4memset(buf, 0, 24) = 0u;
  v4[440] = 0;
  *((void *)v4 + 62) = dispatch_queue_create("VA Initialization Queue", 0LL);
  if (!*((void *)v4 + 27))
  {
    uint64_t v7 = (os_log_s *)*(id *)sub_138E8(13);
    id v8 = v7;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      inAddress.mSelector = 136315394;
      *(void *)&inAddress.mScope = "VirtualAudio_PlugIn.mm";
      __int16 v11 = 1024;
      int v12 = 1469;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mVoiceProcessingHandler is uninitialized.",  (uint8_t *)&inAddress,  0x12u);
    }
  }

  *((void *)v4 + 25) = 0LL;
  *((void *)v4 + 26) = 0LL;
  (*(void (**)(char *))(*(void *)v4 + 120LL))(v4);
  return v5;
}

void sub_278398( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_2784D8(int *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 != 1)
  {
    uint64_t v23 = sub_138E8(13);
    id v24 = sub_8C7D4(1, *(void **)v23, *(void *)(v23 + 8));
    std::string::size_type v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    unsigned __int8 v26 = v25;
    if (v25)
    {
      uint64_t v27 = v25;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        sub_396420(&__str, a3);
        uint64_t v28 = (__str.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? &__str
            : (std::string *)__str.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        __int16 v42 = 1024;
        int v43 = 5018;
        __int16 v44 = 2080;
        size_t v45 = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Listener updated about %s, instead of time sync device creation!",  buf,  0x1Cu);
      }
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Listener updated about %s, instead of time sync device creation!");
  }

  if (*a1 != 1986291046 && *a1 != 1986817911)
  {
    uint64_t v30 = sub_138E8(13);
    id v31 = sub_8C7D4(1, *(void **)v30, *(void *)(v30 + 8));
    std::string::size_type v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    unsigned __int8 v33 = v32;
    if (v32)
    {
      int v34 = v32;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&__str, *a1);
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        __int16 v42 = 1024;
        int v43 = 5022;
        __int16 v44 = 2080;
        size_t v45 = p_str;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Listener updated about time sync device creation, but virtual audio device type is %s instead of Default or Low-Latency",  buf,  0x1Cu);
      }
    }

    uint64_t v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v36,  "Listener updated about time sync device creation, but virtual audio device type is %s instead of Default or Low-Latency");
  }

  sub_6DD4();
  int v7 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v8 = sub_72A04(*a1, a1[1], *(uint64_t **)(a4 + 144), *(uint64_t **)(a4 + 152));
  if (v8)
  {
    uint64_t v9 = v8;
    sub_6DD4();
    int v10 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    uint64_t v11 = *(void *)(v9 + 1008);
    int v12 = (uint64_t *)(v11 + 268);
    *(void *)AudioObjectPropertyAddress buf = *(void *)(v11 + 268);
    sub_2899B8((uint64_t)&__str, (uint64_t *)buf);
    if (v40)
    {
      id v13 = (os_log_t *)sub_138E8(16);
      __int16 v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = &__str;
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v42 = 1024;
        int v43 = 728;
        __int16 v44 = 2080;
        size_t v45 = v15;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Clock to TimeSync %s", buf, 0x1Cu);
      }

      char v16 = (os_log_t *)sub_138E8(16);
      int v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = &__str;
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v42 = 1024;
        int v43 = 950;
        __int16 v44 = 2080;
        size_t v45 = v18;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d gPTP clock is %s", buf, 0x1Cu);
      }

      std::string::operator=((std::string *)(v11 + 368), &__str);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 448LL))(v11))
      {
        atomic_store(1u, (unsigned __int8 *)(v11 + 365));
      }

      else
      {
        atomic_store(0, (unsigned __int8 *)(v11 + 365));
        buf[0] = 0;
        char v46 = 0;
        sub_1D6C38(v11, (uint64_t)buf);
      }
    }

    else
    {
      __int16 v19 = (os_log_t *)sub_138E8(16);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = *v12;
        sub_33464(&__p, (unsigned int *)&v37);
        unint64_t v21 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v42 = 1024;
        int v43 = 724;
        __int16 v44 = 2080;
        size_t v45 = v21;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TimeSync clock is not valid for device %s",  buf,  0x1Cu);
      }
    }

    if (v10) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
  }

  if (v7) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

void sub_278A24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

id *sub_278AE8(id *a1)
{
  id v2 = *a1;
  *a1 = 0LL;

  return a1;
}

uint64_t sub_278B1C(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v9 = v8;
  uint64_t v10 = a1[27];
  if (*(_BYTE *)v10)
  {
    BOOL v11 = *(void *)(v10 + 32) && (_DWORD)a3 == 1650814258;
    if (v11 && (_DWORD)a4 == 0)
    {
      uint64_t v28 = 1LL;
      if (!v8) {
        return v28;
      }
LABEL_30:
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
      return v28;
    }
  }

  uint64_t v13 = a1[18];
  if (a1[19] == v13)
  {
LABEL_25:
    uint64_t v28 = 0LL;
    if (!v9) {
      return v28;
    }
    goto LABEL_30;
  }

  uint64_t v14 = 0LL;
  unsigned int v15 = 0;
LABEL_11:
  char v16 = 0;
  uint64_t v17 = 0LL;
  uint64_t v18 = *(void *)(v13 + 8 * v14);
  __int16 v30 = 256;
  while (1)
  {
    char v19 = v16;
    uint64_t v20 = sub_135A0(v18, *((unsigned __int8 *)&v30 + v17));
    uint64_t v23 = *(void *)(v20 + 8);
    uint64_t v21 = v20 + 8;
    uint64_t v22 = v23;
    if (v23)
    {
      uint64_t v24 = v21;
      do
      {
        unsigned int v25 = *(_DWORD *)(v22 + 28);
        BOOL v26 = v25 >= a2;
        if (v25 >= a2) {
          uint64_t v27 = (uint64_t *)v22;
        }
        else {
          uint64_t v27 = (uint64_t *)(v22 + 8);
        }
        if (v26) {
          uint64_t v24 = v22;
        }
        uint64_t v22 = *v27;
      }

      while (*v27);
      if (v24 != v21 && *(_DWORD *)(v24 + 28) <= a2) {
        break;
      }
    }

    char v16 = 1;
    uint64_t v17 = 1LL;
    if ((v19 & 1) != 0)
    {
      uint64_t v13 = a1[18];
      uint64_t v14 = ++v15;
      goto LABEL_25;
    }
  }

  uint64_t v28 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v18 + 1008) + 352LL))( *(void *)(v18 + 1008),  a3,  a4,  0LL);
  if (v9) {
    goto LABEL_30;
  }
  return v28;
}

void sub_278CA4(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) != 0) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_278CCC(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void))(qword_48F828 + 16))();
  int v9 = v8;
  uint64_t v10 = a1[27];
  if (*(_BYTE *)v10)
  {
    BOOL v11 = *(void *)(v10 + 32) && (_DWORD)a3 == 1650814258;
    if (v11 && (_DWORD)a4 == 0)
    {
      float v33 = (float)*(unsigned int *)(v10 + 48);
      if (!v8) {
        return v33;
      }
      goto LABEL_31;
    }
  }

  uint64_t v13 = a1[18];
  if (a1[19] == v13) {
    goto LABEL_26;
  }
  uint64_t v14 = 0LL;
  unsigned int v15 = 0;
LABEL_11:
  char v16 = 0;
  uint64_t v17 = 0LL;
  uint64_t v18 = *(void *)(v13 + 8 * v14);
  LOWORD(v35) = 256;
  while (1)
  {
    char v19 = v16;
    uint64_t v20 = sub_135A0(v18, *((unsigned __int8 *)&v35 + v17));
    uint64_t v23 = *(void *)(v20 + 8);
    uint64_t v21 = v20 + 8;
    uint64_t v22 = v23;
    if (v23)
    {
      uint64_t v24 = v21;
      do
      {
        unsigned int v25 = *(_DWORD *)(v22 + 28);
        BOOL v26 = v25 >= a2;
        if (v25 >= a2) {
          uint64_t v27 = (uint64_t *)v22;
        }
        else {
          uint64_t v27 = (uint64_t *)(v22 + 8);
        }
        if (v26) {
          uint64_t v24 = v22;
        }
        uint64_t v22 = *v27;
      }

      while (*v27);
      if (v24 != v21
        && *(_DWORD *)(v24 + 28) <= a2
        && (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v18 + 1008) + 352LL))( *(void *)(v18 + 1008),  a3,  a4,  0LL))
      {
        break;
      }
    }

    char v16 = 1;
    uint64_t v17 = 1LL;
    if ((v19 & 1) != 0)
    {
      uint64_t v13 = a1[18];
      uint64_t v14 = ++v15;
      if (v15 >= (unint64_t)((a1[19] - v13) >> 3))
      {
LABEL_26:
        uint64_t v28 = sub_138E8(13);
        id v29 = sub_8C7D4(1, *(void **)v28, *(void *)(v28 + 8));
        __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        id v31 = v30;
        if (v30)
        {
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            int v35 = 136315650;
            uint64_t v36 = "VirtualAudio_PlugIn.mm";
            __int16 v37 = 1024;
            int v38 = 1577;
            __int16 v39 = 1024;
            unsigned int v40 = a2;
            _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Unable to locate a VirtualAudio_Device that u ses VirtualAudioPortID %u.",  (uint8_t *)&v35,  0x18u);
          }
        }

        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_4865A0;
        exception[2] = 1852797029;
      }

      goto LABEL_11;
    }
  }

  float v33 = (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(v18 + 1008) + 360LL))( *(void *)(v18 + 1008),  a3,  a4,  0LL);
  if (v9) {
LABEL_31:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  return v33;
}

void sub_278F5C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_278FB0(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v2 = v4;
  sub_52EF0((uint64_t)&v4);
  return v2;
}

uint64_t sub_279004(uint64_t a1)
{
  *(void *)a1 = off_483850;
  *(void *)(a1 + 80) = off_4838C8;
  CFUUIDRef v3 = (void **)(a1 + 88);
  sub_7A668(&v3);
  return sub_F3008(a1);
}

void sub_279050(uint64_t a1)
{
  *(void *)a1 = off_483850;
  *(void *)(a1 + 80) = off_4838C8;
  CFUUIDRef v3 = (void **)(a1 + 88);
  sub_7A668(&v3);
  uint64_t v2 = (void *)sub_F3008(a1);
  operator delete(v2);
}

uint64_t sub_2790A0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 88);
  if (v1 == *(uint64_t **)(a1 + 96))
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    unsigned int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "MasterMuteControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 24;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): mute control list is empty",  (uint8_t *)&v8,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }

  while (v1 != *(uint64_t **)(a1 + 96));
  return result;
}

uint64_t sub_2791B8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 88);
  if (v1 == *(uint64_t **)(a1 + 96))
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    unsigned int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "MasterMuteControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 35;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): mute control list is empty",  (uint8_t *)&v8,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }

  while (v1 != *(uint64_t **)(a1 + 96));
  return result;
}

uint64_t sub_2792D0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 88);
  if (v1 == *(void **)(a1 + 96)) {
    return 1LL;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v1 + 32LL))(*v1);
    if ((result & 1) == 0) {
      break;
    }
    v1 += 2;
  }

  while (v1 != *(void **)(a1 + 96));
  return result;
}

uint64_t sub_279324(uint64_t a1)
{
  *(void *)(a1 - 80) = off_483850;
  uint64_t v1 = a1 - 80;
  *(void *)a1 = off_4838C8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_7A668(&v3);
  return sub_F3008(v1);
}

void sub_27936C(uint64_t a1)
{
}

uint64_t sub_279374(uint64_t a1)
{
  return sub_2790A0(a1 - 80);
}

uint64_t sub_27937C(uint64_t a1)
{
  return sub_2791B8(a1 - 80);
}

uint64_t sub_279384(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1 == *(void **)(a1 + 16)) {
    return 1LL;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v1 + 32LL))(*v1);
    if ((result & 1) == 0) {
      break;
    }
    v1 += 2;
  }

  while (v1 != *(void **)(a1 + 16));
  return result;
}

void sub_2793D8(void *a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      unsigned int v25 = "MasterMuteControl_HAL_Common.cpp";
      __int16 v26 = 1024;
      int v27 = 64;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [inSubMuteControl is NULL]: Argument inSubMuteControl is NULL",  (uint8_t *)&v24,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "Argument inSubMuteControl is NULL");
  }

  uint64_t v5 = (_OWORD *)a1[12];
  unint64_t v4 = a1[13];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[11];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 4;
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 3;
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
      sub_7A8C4();
    }
    int v12 = (char *)operator new(16 * v11);
    uint64_t v13 = &v12[16 * v8];
    *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
    *a2 = 0LL;
    a2[1] = 0LL;
    unsigned int v15 = (void *)a1[11];
    uint64_t v14 = (void *)a1[12];
    if (v14 == v15)
    {
      int64x2_t v18 = vdupq_n_s64((unint64_t)v14);
      char v16 = &v12[16 * v8];
    }

    else
    {
      char v16 = &v12[16 * v8];
      do
      {
        __int128 v17 = *((_OWORD *)v14 - 1);
        v14 -= 2;
        *((_OWORD *)v16 - 1) = v17;
        v16 -= 16;
        *uint64_t v14 = 0LL;
        v14[1] = 0LL;
      }

      while (v14 != v15);
      int64x2_t v18 = *(int64x2_t *)(a1 + 11);
    }

    unsigned int v6 = v13 + 16;
    a1[11] = v16;
    a1[12] = v13 + 16;
    a1[13] = &v12[16 * v11];
    uint64_t v19 = v18.i64[1];
    uint64_t v20 = (void *)v18.i64[0];
    if (v20) {
      operator delete(v20);
    }
  }

  else
  {
    *uint64_t v5 = *(_OWORD *)a2;
    unsigned int v6 = v5 + 1;
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  a1[12] = v6;
}

void sub_2795C8(_Unwind_Exception *exception_object)
{
}

void sub_2795E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_28020C(a1);
  operator delete(v1);
}

uint64_t sub_2795FC(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = 1LL;
  if (*a2 > 1936092512)
  {
    if (v3 <= 1936092531)
    {
      if (v3 != 1936092513)
      {
        int v5 = 1936092515;
LABEL_8:
        if (v3 == v5) {
          return v4;
        }
        goto LABEL_17;
      }

      return 0LL;
    }

    if (v3 == 1936092532) {
      return v4;
    }
    int v6 = 1936482676;
  }

  else
  {
    if (v3 <= 1885762591)
    {
      if (v3 != 1685025633)
      {
        int v5 = 1718641517;
        goto LABEL_8;
      }

      return 0LL;
    }

    if (v3 == 1885762592) {
      return v4;
    }
    int v6 = 1885762657;
  }

  if (v3 == v6) {
    return 0LL;
  }
LABEL_17:
  sub_27D9BC(&v11, (uint64_t *)(a1 + 80), "", 501);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v11 + 24LL))(v11, a2);
  uint64_t v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v4;
}

void sub_279748( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_27975C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  if (sub_59C20(a1, a2, a3, a4) > a5)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v27 = 136315394;
      *(void *)&v27[4] = "VirtualStream.cpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 654;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): data size too small for specified property",  v27,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 561211770;
  }

  int v12 = *a2;
  if (*a2 > 1936092514)
  {
    if (v12 == 1936092515)
    {
      *(_BYTE *)(a1 + 401) = *(_DWORD *)a6 != 0;
      return;
    }

    int v13 = 1936092532;
  }

  else
  {
    if (v12 == 1718641517)
    {
      *(_BYTE *)(a1 + 728) = *(_DWORD *)a6 != 0;
      return;
    }

    int v13 = 1885762592;
  }

  if (v12 == v13)
  {
    int v14 = sub_27F0CC(a1, a6, 0);
    if (*(_BYTE *)(a1 + 400))
    {
      if (v14)
      {
        int v15 = v14;
        char v16 = (os_log_t *)sub_138E8(13);
        __int128 v17 = *v16;
        if (*v16)
        {
          if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int v27 = 136315394;
            *(void *)&v27[4] = "VirtualStream.cpp";
            *(_WORD *)&v27[12] = 1024;
            *(_DWORD *)&v27[14] = 664;
            _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: error setting current stream format",  v27,  0x12u);
          }
        }

        int64x2_t v18 = __cxa_allocate_exception(0x10uLL);
        *(void *)int64x2_t v18 = &off_4865A0;
        v18[2] = v15;
      }
    }

    else if (v14)
    {
      int v25 = v14;
      __int16 v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v26 = &off_4865A0;
      void v26[2] = v25;
    }
  }

  else
  {
    sub_27D9BC((uint64_t *)v27, (uint64_t *)(a1 + 80), "", 680);
    (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, __int128 *))(**(void **)v27 + 48LL))( *(void *)v27,  a2,  a3,  a4,  a5,  a6);
    uint64_t v19 = *(std::__shared_weak_count **)&v27[8];
    if (*(void *)&v27[8])
    {
      uint64_t v20 = (unint64_t *)(*(void *)&v27[8] + 8LL);
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }

void sub_279A60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_279A7C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_7D084(&v31, __str);
  uint64_t v4 = std::string::insert(&v31, 0LL, "[ addr: ", 8uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v7 = HIBYTE(cap);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  else {
    uint64_t v8 = "in";
  }
  sub_7D084(&v31, v8);
  uint64_t v9 = std::string::insert(&v31, 0LL, "; dir: ", 7uLL);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t cap = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v12 = HIBYTE(cap);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::to_string(&v31, *(_DWORD *)(a1 + 184));
  int v13 = std::string::insert(&v31, 0LL, "; pref virt chans: ", 0x13uLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t cap = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v15 = __p;
  }
  else {
    int v15 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v16 = HIBYTE(cap);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::to_string(&v31, *(_DWORD *)(a1 + 188));
  __int128 v17 = std::string::insert(&v31, 0LL, "; forced virt chans: ", 0x15uLL);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t cap = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v20 = HIBYTE(cap);
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v19, v20);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  *(void *)std::string __str = 0LL;
  int v35 = 0LL;
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 88);
  if (v21 && (v22 = std::__shared_weak_count::lock(v21), (int v35 = v22) != 0LL))
  {
    uint64_t v23 = v22;
    int v24 = *(os_unfair_lock_s **)(a1 + 80);
    *(void *)std::string __str = v24;
    if (v24)
    {
      sub_23FE8((uint64_t)&v31, v24 + 2);
      goto LABEL_50;
    }
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  sub_7D084(&v31, "nullptr");
LABEL_50:
  int v25 = std::string::insert(&v31, 0LL, "; actual strm: ", 0xFuLL);
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  int64_t cap = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v27 = __p;
  }
  else {
    int v27 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v28 = HIBYTE(cap);
  }
  else {
    std::string::size_type v28 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::string::append(a2, " ]", 2uLL);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

void sub_279E1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, char a23)
{
}

uint64_t sub_279ED0(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *(void *)a2;
  int v30 = a2[2];
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  int v6 = (uint64_t **)(a1 + 32);
  sub_1885D4(a1 + 32, (unsigned int *)&v29, (unsigned int *)&v29);
  if (*a2 == 1936482676) {
    return 1LL;
  }
  __int128 v26 = 0LL;
  int v27 = 0LL;
  std::string::size_type v7 = (std::__shared_weak_count *)a1[11];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    int v27 = v8;
    if (v8)
    {
      uint64_t v9 = (void *)a1[10];
      __int128 v26 = v9;
      if (v9)
      {
        uint64_t v10 = sub_F31A4((uint64_t)v9, a2, (uint64_t)sub_27FE10, (uint64_t)a1, *a2 != 1936092532);
        goto LABEL_11;
      }
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v11 = (os_log_t *)sub_138E8(22);
  std::string::size_type v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    int v34 = "VirtualStream.cpp";
    __int16 v35 = 1024;
    int v36 = 984;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d VirtualStream::RegisterRelayedListener() underlying stream is nullptr",  buf,  0x12u);
  }

  uint64_t v10 = 560947818LL;
  if (!v8) {
    goto LABEL_15;
  }
LABEL_11:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    if ((_DWORD)v10) {
      goto LABEL_15;
    }
    return 1LL;
  }

  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!(_DWORD)v10) {
    return 1LL;
  }
LABEL_15:
  int v15 = (os_log_t *)sub_138E8(22);
  std::string::size_type v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v26, v10);
    int v17 = v28;
    __int128 v18 = (void **)v26;
    uint64_t v22 = *(void *)a2;
    int v23 = a2[2];
    sub_613AC((uint64_t)__p, (unsigned int *)&v22);
    uint64_t v19 = &v26;
    if (v17 < 0) {
      uint64_t v19 = v18;
    }
    if (v25 >= 0) {
      std::string::size_type v20 = __p;
    }
    else {
      std::string::size_type v20 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    int v34 = "VirtualStream.cpp";
    __int16 v35 = 1024;
    int v36 = 990;
    __int16 v37 = 2080;
    int v38 = v19;
    __int16 v39 = 2080;
    unsigned int v40 = v20;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' adding listener on actual stream for property %s",  buf,  0x26u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v26);
    }
  }

  sub_18803C(v6, (unsigned int *)&v29, (unsigned int *)&v29);
  return 0LL;
}

void sub_27A188( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (v15 < 0) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_27A1BC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 1936482676)
  {
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = a2[2];
    *(void *)&v21[2] = a3;
    uint64_t v22 = a4;
    sub_18803C((uint64_t **)(a1 + 256), (unsigned int *)buf, (unsigned int *)buf);
    return 1LL;
  }

  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v9)
  {
    uint64_t v10 = 0LL;
LABEL_14:
    int v15 = (os_log_t *)sub_138E8(22);
    std::string::size_type v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      __int16 v20 = 1024;
      *(_DWORD *)unint64_t v21 = 1017;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VirtualStream::UnregisterRelayedListener() underlying stream is nullptr - This is expected if the stre am was destroyed before UnregisterRelayedListener is called",  buf,  0x12u);
    }

    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    return 0LL;
  }

  uint64_t v10 = std::__shared_weak_count::lock(v9);
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if (!v11) {
    goto LABEL_14;
  }
  int v12 = sub_F35C8(v11, a2, (uint64_t)sub_27FE10, a1);
  int v13 = (unint64_t *)&v10->__shared_owners_;
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  if (!v12)
  {
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = a2[2];
    *(void *)&v21[2] = a3;
    uint64_t v22 = a4;
    sub_18803C((uint64_t **)(a1 + 256), (unsigned int *)buf, (unsigned int *)buf);
    return 1LL;
  }

  return 0LL;
}

void sub_27A3AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_27A3CC(uint64_t a1)
{
  uint64_t v2 = sub_27AFB4(a1);
  if ((_DWORD)v2)
  {
    uint64_t v33 = v2;
    int v34 = (os_log_t *)sub_138E8(13);
    __int16 v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__p, v33);
      int v36 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 415;
      __int16 v42 = 2080;
      int v43 = v36;
      _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (err): Aborting initialization due to error '%s' while attempting to initialize stream formats",  buf,  0x1Cu);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v33;
  }

  sub_27FBD4(a1, 1);
  int v3 = (os_log_t *)sub_138E8(22);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
    __int128 v5 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v6 = *(void *)(a1 + 96);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 419;
    __int16 v42 = 2080;
    int v43 = v5;
    __int16 v44 = 2048;
    uint64_t v45 = v6;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VirtualStream created: %s for aggregate device %p.",  buf,  0x26u);
  }

  std::string::size_type v7 = (os_log_t *)sub_138E8(22);
  uint64_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
  {
    sub_27FCFC(&__p, *(void *)(a1 + 232), *(void *)(a1 + 240));
    uint64_t v9 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 420;
    __int16 v42 = 2080;
    int v43 = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d - mClientStreamFormats: %s.", buf, 0x1Cu);
  }

  uint64_t v10 = (os_log_t *)sub_138E8(22);
  uint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    sub_27FCFC(&__p, *(void *)(a1 + 208), *(void *)(a1 + 216));
    int v12 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 421;
    __int16 v42 = 2080;
    int v43 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - mPhysicalStreamFormats: %s.", buf, 0x1Cu);
  }

  uint64_t v13 = *(void *)(a1 + 136);
  if (!*(_BYTE *)(v13 + 392))
  {
    (*(void (**)(uint64_t, void))(*(void *)v13 + 16LL))(v13, *(void *)(a1 + 424));
    uint64_t v13 = *(void *)(a1 + 136);
  }

  sub_1996D0(buf, *(void *)(v13 + 1040), *(std::__shared_weak_count **)(v13 + 1048));
  unint64_t v14 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)buf;
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  __int128 v15 = *(_OWORD *)(*(void *)(a1 + 136) + 1056LL);
  uint64_t v16 = *(void *)(*(void *)(a1 + 136) + 1064LL);
  if (v16)
  {
    int v17 = (unint64_t *)(v16 + 16);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v15;
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = *(void *)(a1 + 136);
  if (!*(_BYTE *)(v20 + 448) && !*(void *)(v20 + 584) && !*(void *)(v20 + 672))
  {
    if (*(void *)(a1 + 128))
    {
      uint64_t v21 = *(void *)(a1 + 120);
      uint64_t v22 = *(std::__shared_weak_count **)(v21 + 24);
      if (v22)
      {
        int v23 = std::__shared_weak_count::lock(v22);
        *(void *)&_DWORD buf[8] = v23;
        if (v23)
        {
          int v24 = v23;
          uint64_t v25 = *(void *)(v21 + 16);
          *(void *)AudioObjectPropertyAddress buf = v25;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 144) == 1886745455
              && ((uint64_t v26 = *(void *)(v25 + 192),
                   unsigned int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 440LL))(v26, 1LL),
                   int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 88LL))(v26, 1LL),
                   v27 <= 2)
                ? (BOOL v29 = v28 == 1)
                : (BOOL v29 = 0),
                  v29)
              || *(_DWORD *)(v25 + 264) == 1970496068)
            {
              (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(v25 + 192) + 448LL))(&v39);
              (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v25 + 144LL))(&__p, v25);
              int v30 = (const void *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0]) {
                CFRetain(__p.__r_.__value_.__l.__data_);
              }
              sub_7F234(&cf, v30);
              sub_19DFC((uint64_t)&__p);
              sub_90BC0();
              (*(void (**)(void))(qword_48CD58 + 48))();
              if (cf) {
                CFRelease(cf);
              }
              if (v39) {
                CFRelease(v39);
              }
            }
          }

          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            unint64_t v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
    }
  }

  sub_CC160(a1);
}

void sub_27A90C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, char a21)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_27A974(uint64_t a1, void *a2)
{
  uint64_t v8 = a1 + 440;
  char v9 = 1;
  sub_92F80(a1 + 440);
  if (*a2 != a2[1])
  {
    __int128 v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v11 = "VirtualStream.cpp";
      __int16 v12 = 1024;
      int v13 = 694;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): specified StreamFormatList is not empty",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "specified StreamFormatList is not empty");
  }

  if ((void *)(a1 + 232) != a2) {
    sub_27FA48( a2,  *(char **)(a1 + 232),  *(char **)(a1 + 240),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3));
  }
  sub_93128((uint64_t)&v8);
  return 0LL;
}

void sub_27AAC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_27AAF0(uint64_t a1, void *a2, int a3)
{
  uint64_t v10 = a1 + 440;
  char v11 = 1;
  sub_92F80(a1 + 440);
  if (a3 != 1936092513)
  {
    std::string::size_type v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v13 = "VirtualStream.cpp";
      __int16 v14 = 1024;
      int v15 = 707;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  sub_27A974(a1, a2);
  sub_93128((uint64_t)&v10);
  return 0LL;
}

void sub_27AC2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_27AC54(uint64_t a1, __int128 *a2)
{
  return sub_27F0CC(a1, a2, 0);
}

uint64_t sub_27AC5C(uint64_t a1, __int128 *a2, int a3)
{
  if (a3 != 1936092532)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    __int128 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualStream.cpp";
      __int16 v9 = 1024;
      int v10 = 835;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  return sub_27F0CC(a1, a2, 0);
}

void sub_27AD5C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_27AD78(uint64_t a1, __int128 *a2)
{
  return sub_27F0CC(a1, a2, 1);
}

uint64_t sub_27AD80(uint64_t a1, __int128 *a2, int a3)
{
  if (a3 != 1936092532)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    __int128 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualStream.cpp";
      __int16 v9 = 1024;
      int v10 = 848;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  (uint8_t *)&v7,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  return sub_27F0CC(a1, a2, 1);
}

void sub_27AE80(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_27AE9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_85A90(a2, (void *)(a1 + 112));
}

void sub_27AEA8(uint64_t a1)
{
  uint64_t v1 = sub_27AFB4(a1);
  if ((_DWORD)v1)
  {
    uint64_t v2 = v1;
    int v3 = (os_log_t *)sub_138E8(22);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v2);
        if (v7 >= 0) {
          __int128 v5 = __p;
        }
        else {
          __int128 v5 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __int16 v9 = "VirtualStream.cpp";
        __int16 v10 = 1024;
        int v11 = 898;
        __int16 v12 = 2080;
        int v13 = v5;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Received error '%s' when attempting to refresh stream formats",  buf,  0x1Cu);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

uint64_t sub_27AFB4(uint64_t a1)
{
  uint64_t v309 = a1 + 440;
  char v310 = 1;
  sub_190270(a1 + 440);
  v307[0] = 0LL;
  v307[1] = 0LL;
  id v308 = 0LL;
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 176LL))(*(void *)(a1 + 136));
  int v3 = (uint64_t *)(a1 + 80);
  if (!v2)
  {
    sub_27D9BC((uint64_t *)buf, v3, "", 1147);
    uint64_t v10 = *(void *)buf;
    uint64_t v11 = *(void *)(a1 + 136);
    else {
      uint64_t v12 = 1885762657LL;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 104LL))(v10, v307, v12);
    char v7 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_17;
    }
    int v13 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v9 = __ldaxr(v13);
    while (__stlxr(v9 - 1, v13));
    goto LABEL_15;
  }

  sub_27D9BC((uint64_t *)buf, v3, "", 1142);
  uint64_t v4 = *(void *)buf;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 176LL))(v5);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v4 + 104LL))(v4, v307, 1936092513LL);
  char v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v8 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
LABEL_15:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

LABEL_254:
  char v132 = (os_log_t *)sub_138E8(22);
  uint64_t v133 = *v132;
  if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = "cull < 24-bit";
    uint64_t v135 = *(void *)(a1 + 96);
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    if (v114 == 1) {
      uint64_t v134 = "cull > 16-bit";
    }
    *(_DWORD *)&buf[14] = 1163;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v134;
    *(_WORD *)&_BYTE buf[28] = 2048;
    *(void *)&buf[30] = a1;
    *(_WORD *)&buf[38] = 2048;
    *(void *)&uint8_t buf[40] = v135;
    _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d culling policy is %s for virtual stream %p of aggregate device %p.",  buf,  0x30u);
  }

  uint64_t v136 = (double *)v307[0];
  if (v307[1] != v307[0])
  {
    while (1)
    {
      if (v114 == 1)
      {
        if (*((_DWORD *)v136 + 8) <= 0x10u) {
          goto LABEL_306;
        }
        goto LABEL_265;
      }

      if (!v114) {
        break;
      }
      uint64_t v148 = (os_log_t *)sub_138E8(13);
      uint64_t v149 = *v148;
      if (*v148 && os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 144;
        _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unhandled case in switch",  buf,  0x12u);
      }

LABEL_451:
  uint64_t v260 = (os_log_t *)sub_138E8(22);
  unint64_t v261 = *v260;
  if (*v260 && os_log_type_enabled(*v260, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v262 = *(void *)(a1 + 96);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1238;
    *(_WORD *)&_BYTE buf[18] = 2048;
    *(void *)&buf[20] = a1;
    *(_WORD *)&_BYTE buf[28] = 2048;
    *(void *)&buf[30] = v262;
    _os_log_impl( &dword_0,  v261,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Virtualized-to-physical format mappings for virtual stream %p of aggregate device %p:",  buf,  0x26u);
  }

  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    uint64_t v263 = 0LL;
    unsigned int v264 = 1;
    do
    {
      v265 = (os_log_t *)sub_138E8(22);
      uint64_t v266 = *v265;
      if (*v265 && os_log_type_enabled(*v265, OS_LOG_TYPE_DEFAULT))
      {
        sub_1548E8((std::string *)v319, *(void *)(a1 + 232) + 56 * v263);
        uint64_t v267 = v319;
        if (v319[23] < 0) {
          uint64_t v267 = *(_BYTE **)v319;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1242;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v264 - 1;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = v267;
        _os_log_impl(&dword_0, v266, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   %uv: %s", buf, 0x22u);
        if ((v319[23] & 0x80000000) != 0) {
          operator delete(*(void **)v319);
        }
      }

      uint64_t v268 = (os_log_t *)sub_138E8(22);
      unint64_t v269 = *v268;
      if (*v268 && os_log_type_enabled(*v268, OS_LOG_TYPE_DEFAULT))
      {
        sub_1548E8((std::string *)v319, *(void *)(a1 + 208) + 56 * v263);
        unint64_t v270 = v319;
        if (v319[23] < 0) {
          unint64_t v270 = *(_BYTE **)v319;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1244;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v264 - 1;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = v270;
        _os_log_impl(&dword_0, v269, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   %ua: %s", buf, 0x22u);
        if ((v319[23] & 0x80000000) != 0) {
          operator delete(*(void **)v319);
        }
      }

      uint64_t v263 = v264;
      BOOL v141 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) > (unint64_t)v264++;
    }

    while (v141);
  }

  uint64_t v6 = sub_27E044((uint64_t *)a1, (uint64_t)buf);
  if ((_DWORD)v6)
  {
    uint64_t v271 = (os_log_t *)sub_138E8(22);
    char v272 = *v271;
    if (!*v271 || !os_log_type_enabled(*v271, OS_LOG_TYPE_ERROR)) {
      goto LABEL_501;
    }
    sub_2CA1C(__p, v6);
    uint64_t v273 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)unsigned int v319 = 136315650;
    *(void *)&v319[4] = "VirtualStream.cpp";
    *(_WORD *)&v319[12] = 1024;
    *(_DWORD *)&v319[14] = 1253;
    *(_WORD *)&v319[18] = 2080;
    *(void *)&v319[20] = v273;
    _os_log_impl( &dword_0,  v272,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' ensuring valid physical stream format",  v319,  0x1Cu);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_501;
    }
    uint64_t v21 = *(void **)__p;
    goto LABEL_500;
  }

  uint64_t v6 = sub_27988(a1, (uint64_t)buf, (uint64_t)v319);
  if ((_DWORD)v6)
  {
    uint64_t v274 = (os_log_t *)sub_138E8(22);
    uint64_t v275 = *v274;
    if (*v274 && os_log_type_enabled(*v274, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v313, v6);
      int v276 = SBYTE3(v317);
      uint64_t v277 = *(_BYTE **)v313;
      sub_2CC00(&v311, (uint64_t)buf);
      int v278 = v313;
      if (v276 < 0) {
        int v278 = v277;
      }
      if ((v311.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v279 = &v311;
      }
      else {
        uint64_t v279 = (std::string *)v311.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 1263;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v278;
      *(_WORD *)&_BYTE __p[28] = 2080;
      *(void *)&__p[30] = v279;
      _os_log_impl( &dword_0,  v275,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' getting client format for physical format %s",  __p,  0x26u);
      if (SBYTE3(v317) < 0)
      {
        uint64_t v21 = *(void **)v313;
        goto LABEL_500;
      }
    }
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    *(_OWORD *)&__p[16] = *(_OWORD *)&buf[16];
    *(void *)&__p[32] = *(void *)&buf[32];
    if (*(_DWORD *)&buf[8] == 1819304813 && (__p[12] & 0x40) == 0)
    {
      *(_DWORD *)&_BYTE __p[12] = 9;
      *(_DWORD *)&__p[16] = 4 * *(_DWORD *)&__p[28];
      *(_DWORD *)&__p[20] = 1;
      *(_DWORD *)&__p[24] = 4 * *(_DWORD *)&__p[28];
      *(_DWORD *)&__p[32] = 32;
    }

    uint64_t v6 = sub_27E4C0(a1, (uint64_t)__p, (__int128 *)v319);
    if ((_DWORD)v6)
    {
      int v280 = (os_log_t *)sub_138E8(22);
      int v281 = *v280;
      if (*v280)
      {
        if (os_log_type_enabled(*v280, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(&v311, v6);
          v282 = (v311.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &v311
               : (std::string *)v311.__r_.__value_.__r.__words[0];
          *(_DWORD *)id v313 = 136315650;
          *(void *)&v313[4] = "VirtualStream.cpp";
          __int16 v314 = 1024;
          int v315 = 1274;
          __int16 v316 = 2080;
          int v317 = v282;
          _os_log_impl(&dword_0, v281, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' configuring the DSP chain", v313, 0x1Cu);
          if ((char)v311.__r_.__value_.__s.__size_ < 0)
          {
            uint64_t v21 = (void *)v311.__r_.__value_.__r.__words[0];
            goto LABEL_500;
          }
        }
      }
    }
  }

LABEL_501:
  if (v307[0])
  {
    v307[1] = v307[0];
    operator delete(v307[0]);
  }

  sub_19032C(&v309);
  return v6;
}

void sub_27D804( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19032C(&a16);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_27D9BC(uint64_t *a1, uint64_t *a2, const char *a3, int a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  char v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        __int16 v14 = strrchr(a3, 47);
        if (v14) {
          int v13 = v14 + 1;
        }
        else {
          int v13 = a3;
        }
      }

      else
      {
        int v13 = 0LL;
      }

      int v16 = 136315906;
      int v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not lock weak ptr (%s:%d).",  (uint8_t *)&v16,  0x22u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }

  return result;
}

void sub_27DB18(_Unwind_Exception *a1)
{
}

BOOL sub_27DB40(uint64_t *a1)
{
  uint64_t v1 = a1 + 14;
  int v2 = (uint64_t *)a1[15];
  if (v2 == a1 + 14) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v4 = (std::__shared_weak_count *)v2[3];
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = v2[2];
        if (v7) {
          BOOL v8 = *(_DWORD *)(v7 + 144) == 1885889645;
        }
        else {
          BOOL v8 = 0;
        }
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v6);
        }

        if (v8) {
          break;
        }
      }
    }

    int v2 = (uint64_t *)v2[1];
    if (v2 == v1) {
      return 0LL;
    }
  }

  unint64_t v12 = sub_5C2F8(a1[13]);
  *((void *)&v15 + 1) = v13;
  *(void *)&__int128 v15 = v12;
  uint64_t v14 = v15 >> 32;
  return (v14 & 0xFF00000000LL) != 0 && (_DWORD)v14 != 0;
}

void sub_27DC38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0xFF00000000LL) == 0) {
    return;
  }
  int v4 = a2;
  uint64_t v6 = (os_log_t *)sub_138E8(22);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    sub_27E6F8(&__p, *a1, a1[1]);
    BOOL v8 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    BOOL v29 = "VirtualStream.cpp";
    __int16 v30 = 1024;
    int v31 = 278;
    __int16 v32 = 2080;
    uint64_t v33 = v8;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format list before culling: %s", buf, 0x1Cu);
  }

  if (v4 != 2)
  {
    if (v4 == 1)
    {
      double v9 = 48000.0;
    }

    else
    {
      if (v4)
      {
        int v17 = (os_log_t *)sub_138E8(22);
        __int16 v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          BOOL v29 = "VirtualStream.cpp";
          __int16 v30 = 1024;
          int v31 = 294;
          __int16 v32 = 1024;
          LODWORD(v33) = v4;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unexpected sample rate policy value %d",  buf,  0x18u);
        }

        goto LABEL_15;
      }

      double v9 = 16000.0;
    }

    sub_27E80C(a1, v9);
    goto LABEL_15;
  }

  if (!a3)
  {
    uint64_t v24 = (os_log_t *)sub_138E8(13);
    unint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      BOOL v29 = "VirtualStream.cpp";
      __int16 v30 = 1024;
      int v31 = 290;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inAggregateDevice is NULL]: AggregateDevice was not specified for kCul lNonMatching sample rate culling policy.",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "AggregateDevice was not specified for kCullNonMatching sample rate culling policy.");
  }

  (*(void (**)(uint64_t))(*(void *)a3 + 104LL))(a3);
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  while (1)
  {
    if (v15 == v14) {
      goto LABEL_15;
    }
LABEL_33:
    v15 += 56LL;
  }

void sub_27E028(_Unwind_Exception *a1)
{
}

uint64_t sub_27E044(uint64_t *a1, uint64_t a2)
{
  int v4 = a1 + 10;
  sub_27D9BC((uint64_t *)buf, a1 + 10, "", 1447);
  uint64_t v5 = *(void *)buf;
  uint64_t v6 = a1[17];
  else {
    uint64_t v7 = 1885762592LL;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(void *)v5 + 120LL))(v5, &v57, v7);
  uint64_t v9 = v8;
  unint64_t v10 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_9;
  }
  uint64_t v11 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((_DWORD)v9) {
      return v9;
    }
  }

  else
  {
LABEL_9:
    if ((_DWORD)v8) {
      return v9;
    }
  }

  uint64_t v14 = a1[26];
  uint64_t v13 = a1[27];
  uint64_t v15 = v13;
  if (v14 != v13)
  {
    uint64_t v51 = a2;
    double v16 = *(double *)&v57;
    int v17 = DWORD2(v57);
    int v18 = v58;
    int v19 = DWORD1(v58);
    int v21 = DWORD2(v58);
    int v20 = HIDWORD(v58);
    uint64_t v15 = a1[26];
    int v22 = v59;
    while (1)
    {
      if (*(double *)v15 == 0.0 || (v16 != 0.0 ? (BOOL v23 = *(double *)v15 == v16) : (BOOL v23 = 1), v23))
      {
        int v24 = *(_DWORD *)(v15 + 8);
        BOOL v25 = !v24 || v17 == 0;
        if (v25 || v24 == v17)
        {
          int v27 = *(_DWORD *)(v15 + 16);
          BOOL v28 = !v27 || v18 == 0;
          if (v28 || v27 == v18)
          {
            int v30 = *(_DWORD *)(v15 + 20);
            if (!v30 || !v19 || v30 == v19)
            {
              int v31 = *(_DWORD *)(v15 + 24);
              if (!v31 || !v21 || v31 == v21)
              {
                int v32 = *(_DWORD *)(v15 + 28);
                if (!v32 || !v20 || v32 == v20)
                {
                  int v33 = *(_DWORD *)(v15 + 32);
                  if (!v33 || !v22 || v33 == v22)
                  {
                    int v50 = v22;
                    int v34 = sub_2854C(v15, (uint64_t)&v57);
                    int v22 = v50;
                    if (v34)
                    {
                    }
                  }
                }
              }
            }
          }
        }
      }

      v15 += 56LL;
      if (v15 == v13)
      {
        uint64_t v15 = v13;
        break;
      }
    }

    a2 = v51;
  }

  if (v13 == v15)
  {
    sub_280EDC((uint64_t)v55, v14, v13, (uint64_t *)&v57);
    unint64_t v37 = (os_log_t *)sub_138E8(22);
    uint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = &v54;
      sub_2CC00(&v54, (uint64_t)&v57);
      if ((v54.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v39 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      sub_27E6F8(&v53, a1[26], a1[27]);
      int size = (char)v53.__r_.__value_.__s.__size_;
      std::string::size_type v41 = v53.__r_.__value_.__r.__words[0];
      sub_2CC00(&__p, (uint64_t)v55);
      BOOL v42 = &v53;
      if (size < 0) {
        BOOL v42 = (std::string *)v41;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1461;
      __int16 v61 = 2080;
      uint64_t v62 = v39;
      __int16 v63 = 2080;
      int v64 = v42;
      __int16 v65 = 2080;
      __int128 v66 = p_p;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [POTENTIAL_VA_RACE] Physical stream format list does not contain current physical stream format: %s. C urrent physical stream formats: %s. Setting closest matching physical format in physical stream format list:     %s",  buf,  0x30u);
    }

    __int128 v57 = v55[0];
    __int128 v58 = v55[1];
    uint64_t v59 = v56;
    sub_27D9BC((uint64_t *)buf, v4, "", 1466);
    uint64_t v44 = *(void *)buf;
    uint64_t v45 = a1[17];
    else {
      uint64_t v46 = 1885762592LL;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(void *)v44 + 152LL))(v44, &v57, v46);
    uint64_t v47 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  if (a2 && !(_DWORD)v9)
  {
    __int128 v35 = v58;
    *(_OWORD *)a2 = v57;
    *(_OWORD *)(a2 + 16) = v35;
    *(void *)(a2 + 32) = v59;
  }

  return v9;
}

void sub_27E470( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_27E4C0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if (*((_DWORD *)a3 + 2) != 1819304813 || *(_DWORD *)(a2 + 8) != 1819304813) {
    return 0LL;
  }
  double v7 = (double)sub_6BA08(a1) / *(double *)a2;
  char v8 = sub_6ADEC(a1);
  uint64_t v9 = *(void *)(a1 + 136);
  if ((v8 & 1) != 0)
  {
    __int128 v10 = a3[1];
    v27[0] = *a3;
    v27[1] = v10;
    uint64_t v28 = *((void *)a3 + 4);
    uint64_t v11 = operator new(0x28uLL);
    int v32 = v11 + 5;
    int v33 = (char *)(v11 + 5);
    v11[4] = *((void *)a3 + 4);
    __int128 v12 = a3[1];
    *(_OWORD *)uint64_t v11 = *a3;
    *((_OWORD *)v11 + 1) = v12;
    int v31 = v11;
    __int128 v13 = *(_OWORD *)(a2 + 16);
    v25[0] = *(_OWORD *)a2;
    v25[1] = v13;
    uint64_t v26 = *(void *)(a2 + 32);
    int v14 = (*(uint64_t (**)(uint64_t, _OWORD *, void **, _OWORD *, double))(*(void *)v9 + 136LL))( v9,  v27,  &v31,  v25,  v7);
  }

  else
  {
    __int128 v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v15;
    uint64_t v35 = *(void *)(a2 + 32);
    double v16 = operator new(0x28uLL);
    int v32 = v16 + 5;
    int v33 = (char *)(v16 + 5);
    uint64_t v17 = *((void *)a3 + 4);
    v16[4] = v17;
    __int128 v19 = *a3;
    __int128 v18 = a3[1];
    *(_OWORD *)double v16 = *a3;
    *((_OWORD *)v16 + 1) = v18;
    int v31 = v16;
    v29[0] = v19;
    v29[1] = v18;
    uint64_t v30 = v17;
    int v14 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, _OWORD *, double))(*(void *)v9 + 136LL))( v9,  buf,  &v31,  v29,  v7);
  }

  int v20 = v14;
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }

  if (!v20) {
    return 0LL;
  }
  int v21 = (os_log_t *)sub_138E8(22);
  uint64_t v22 = 2003329396LL;
  BOOL v23 = *v21;
  if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1501;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = v20;
    _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", buf, 0x18u);
  }

  return v22;
}

void sub_27E6CC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

std::string *sub_27E6F8(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_1548E8(&__p, a2);
      uint64_t v6 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      a2 += 56LL;
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_27E7D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t *sub_27E80C(uint64_t *result, double a2)
{
  uint64_t v3 = *result;
  int v2 = (__int128 *)result[1];
  if ((__int128 *)*result != v2)
  {
    do
    {
      if (*(double *)v3 == 0.0)
      {
        if (*(double *)(v3 + 40) >= a2 && *(double *)(v3 + 48) <= a2)
        {
LABEL_11:
          if ((__int128 *)v3 == v2 || (uint64_t v5 = (__int128 *)(v3 + 56), (__int128 *)(v3 + 56) == v2))
          {
LABEL_25:
            return result;
          }

          while (2)
          {
            if (*(double *)v5 == 0.0)
            {
              if (*((double *)v5 + 5) >= a2 && *((double *)v5 + 6) <= a2)
              {
LABEL_23:
                uint64_t v5 = (__int128 *)((char *)v5 + 56);
                if (v5 == v2)
                {
                  int v2 = (__int128 *)result[1];
                  goto LABEL_25;
                }

                continue;
              }
            }

            else if (*(double *)v5 < a2)
            {
              goto LABEL_23;
            }

            break;
          }

          __int128 v7 = *v5;
          __int128 v8 = v5[1];
          __int128 v9 = v5[2];
          *(void *)(v3 + 48) = *((void *)v5 + 6);
          *(_OWORD *)(v3 + 16) = v8;
          *(_OWORD *)(v3 + 32) = v9;
          *(_OWORD *)uint64_t v3 = v7;
          v3 += 56LL;
          goto LABEL_23;
        }
      }

      else if (*(double *)v3 < a2)
      {
        goto LABEL_11;
      }

      v3 += 56LL;
    }

    while ((__int128 *)v3 != v2);
  }

  return result;
}

void sub_27E908(std::string *a1, uint64_t a2)
{
  if (*(_BYTE *)a2)
  {
    std::string::append(&v12, "cull AC-3", 9uLL);
    if (!*(_BYTE *)(a2 + 16))
    {
LABEL_11:
      if (!*(_BYTE *)(a2 + 5))
      {
LABEL_14:
        if (!*(_BYTE *)(a2 + 1))
        {
LABEL_27:
          if (!*(_BYTE *)(a2 + 2))
          {
LABEL_30:
            if (!*(_BYTE *)(a2 + 49))
            {
LABEL_33:
              if (!*(_BYTE *)(a2 + 48)) {
                goto LABEL_36;
              }
              std::string::append(&v12, "; ", 2uLL);
              goto LABEL_35;
            }

            std::string::append(&v12, "; ", 2uLL);
LABEL_32:
            std::string::append(&v12, "is on parrot device", 0x13uLL);
            goto LABEL_33;
          }

          std::string::append(&v12, "; ", 2uLL);
LABEL_29:
          std::string::append(&v12, "cull stereo and mono LPCM", 0x19uLL);
          goto LABEL_30;
        }

        std::string::append(&v12, "; ", 2uLL);
LABEL_16:
        std::string::append(&v12, "cull multi-channel LPCM", 0x17uLL);
        if (!*(_BYTE *)(a2 + 3) || !*(_BYTE *)(a2 + 4))
        {
          std::string::append(&v12, ", except ", 9uLL);
          if (*(_BYTE *)(a2 + 3))
          {
            int v4 = "8-channel";
            std::string::size_type v5 = 9LL;
          }

          else
          {
            if (*(_BYTE *)(a2 + 4)) {
              int v4 = "6-channel";
            }
            else {
              int v4 = "6- and 8-channel";
            }
            if (*(_BYTE *)(a2 + 4)) {
              std::string::size_type v5 = 9LL;
            }
            else {
              std::string::size_type v5 = 16LL;
            }
          }

          std::string::append(&v12, v4, v5);
        }

        goto LABEL_27;
      }

      std::string::append(&v12, "; ", 2uLL);
LABEL_13:
      std::string::append(&v12, "cull Atmos", 0xAuLL);
      goto LABEL_14;
    }

    std::string::append(&v12, "; ", 2uLL);
LABEL_10:
    std::string::append(&v12, "cull non-48k AC-3", 0x11uLL);
    goto LABEL_11;
  }

  if (*(_BYTE *)(a2 + 1) || *(_BYTE *)(a2 + 2) || *(_BYTE *)(a2 + 3) || *(_BYTE *)(a2 + 4) || *(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(a2 + 16)) {
      goto LABEL_10;
    }
    if (*(_BYTE *)(a2 + 5)) {
      goto LABEL_13;
    }
    if (*(_BYTE *)(a2 + 1)) {
      goto LABEL_16;
    }
    if (*(_BYTE *)(a2 + 2)) {
      goto LABEL_29;
    }
    if (*(_BYTE *)(a2 + 49)) {
      goto LABEL_32;
    }
    if (*(_BYTE *)(a2 + 48))
    {
LABEL_35:
      std::string::append(&v12, "in call like route", 0x12uLL);
      goto LABEL_36;
    }

    __int128 v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 1853;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: unexpected empty string for MultiChannelCullingPolicy",  __p,  0x12u);
    }
  }

  else
  {
    v12.__r_.__value_.__s.__size_ = 9;
    strcpy((char *)&v12, "cull none");
  }

void sub_27EC98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_27ECF0(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_BYTE *)(a1 + 44))
  {
    BOOL v5 = v3 == 1819304813 && (*(_DWORD *)(a2 + 12) & 1) == 0;
    if (v5 && v4 == *(_DWORD *)(a1 + 40)) {
      return 0LL;
    }
    goto LABEL_38;
  }

  if (v3 <= 1836343667)
  {
    if (v3 <= 1667443506)
    {
      if (v3 != 1633889587 && v3 != 1667326771) {
        goto LABEL_47;
      }
      goto LABEL_27;
    }

    if (v3 != 1667443507 && v3 != 1667509043)
    {
      if (v3 != 1667588915) {
        goto LABEL_47;
      }
LABEL_27:
      if (!*(_BYTE *)a1)
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
        if (!*(_BYTE *)(a1 + 16)) {
          return v6;
        }
        double v9 = *(double *)(a1 + 8);
      }

      goto LABEL_38;
    }

uint64_t sub_27EF8C(char a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = *(_DWORD *)(a2 + 8) == 1819304813;
  }
  else {
    BOOL v2 = 0;
  }
  unsigned int v3 = v2;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0) {
    unsigned int v3 = 0;
  }
  if (*(_DWORD *)(a2 + 28) < 3u) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if ((_DWORD)v4 == 1)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(22);
    std::string::size_type v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        sub_1548E8(&__p, a2);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        std::string v12 = "VirtualStream.cpp";
        __int16 v13 = 1024;
        int v14 = 1756;
        __int16 v15 = 2080;
        double v16 = p_p;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culled stream format: %s", buf, 0x1Cu);
      }
    }
  }

  return v4;
}

uint64_t sub_27F0CC(uint64_t a1, __int128 *a2, char a3)
{
  v61.__r_.__value_.__r.__words[0] = a1 + 440;
  v61.__r_.__value_.__s.__data_[8] = 1;
  sub_92F80(a1 + 440);
  if (!sub_28298( *(void *)(a1 + 232),  *(void *)(a1 + 240),  (uint64_t)a2,  *(void *)(a1 + 208),  *(void *)(a1 + 216),  (uint64_t)v62))
  {
    if (!*(_BYTE *)(a1 + 400)) {
      goto LABEL_38;
    }
    __int128 v10 = (os_log_t *)sub_138E8(22);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 96);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1419;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&buf[20] = a1;
      *(_WORD *)&_BYTE buf[28] = 2048;
      *(void *)&buf[30] = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to translate client format to physical format for virtual stream %p of aggregate device %p.",  buf,  0x26u);
    }

    __int16 v13 = (os_log_t *)sub_138E8(22);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2CC00((std::string *)__p, (uint64_t)a2);
      __int16 v15 = SBYTE3(v68) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1420;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d - Given client format: %s", buf, 0x1Cu);
      if (SBYTE3(v68) < 0) {
        operator delete(*(void **)__p);
      }
    }

    double v16 = (os_log_t *)sub_138E8(22);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1421;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d - Cached formats:", buf, 0x12u);
    }

    if (*(void *)(a1 + 216) == *(void *)(a1 + 208))
    {
LABEL_38:
      sub_93128((uint64_t)&v61);
    }

    else
    {
      uint64_t v59 = a2;
      uint64_t v18 = 0LL;
      unsigned int v19 = 0;
      do
      {
        __int16 v20 = (os_log_t *)sub_138E8(22);
        int v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          sub_1548E8((std::string *)__p, *(void *)(a1 + 232) + 56 * v18);
          uint64_t v22 = SBYTE3(v68) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1425;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v19;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v22;
          _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d   %uv: %s", buf, 0x22u);
          if (SBYTE3(v68) < 0) {
            operator delete(*(void **)__p);
          }
        }

        BOOL v23 = (os_log_t *)sub_138E8(22);
        int v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          sub_1548E8((std::string *)__p, *(void *)(a1 + 208) + 56 * v18);
          BOOL v25 = SBYTE3(v68) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1426;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v19;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v25;
          _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d   %ua: %s", buf, 0x22u);
          if (SBYTE3(v68) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v18 = ++v19;
      }

      while (0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) > (unint64_t)v19);
      sub_93128((uint64_t)&v61);
      a2 = v59;
    }

    uint64_t v26 = 2003329396LL;
    int v27 = (os_log_t *)sub_138E8(22);
    os_log_t v28 = *v27;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR)) {
      return v26;
    }
    sub_2CA1C(__p, 2003329396LL);
    int v29 = SBYTE3(v68);
    uint64_t v30 = *(_BYTE **)__p;
    sub_2CC00(&v61, (uint64_t)a2);
    int v31 = __p;
    if (v29 < 0) {
      int v31 = v30;
    }
    if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v32 = &v61;
    }
    else {
      int v32 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 863;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v31;
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&buf[30] = v32;
    int v33 = "%25s:%-5d Error '%s' getting physical format for client format %s";
    int v34 = v28;
    goto LABEL_69;
  }

  sub_93128((uint64_t)&v61);
  uint64_t v6 = (uint64_t *)(a1 + 80);
  if ((a3 & 1) != 0)
  {
    sub_27D9BC((uint64_t *)buf, v6, "", 869);
    uint64_t v7 = *(void *)buf;
    uint64_t v8 = *(void *)(a1 + 136);
    else {
      uint64_t v9 = 1885762592LL;
    }
    uint64_t v26 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v7 + 152LL))(v7, v62, v9);
    uint64_t v38 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v39 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_59;
    }

void sub_27F9BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_27FA48(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0x6DB6DB6DB6DB6DB7LL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 > 0x492492492492492LL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x249249249249249LL ? 0x492492492492492LL : v11;
    if (v12 > 0x492492492492492LL) {
LABEL_23:
    }
      sub_7A87C();
    uint64_t result = sub_177AE0(v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[7 * v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memmove(result, v6, v14);
    }
    __int16 v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }

  __int16 v15 = (void **)(result + 1);
  double v16 = (_BYTE *)result[1];
  if (0x6DB6DB6DB6DB6DB7LL * ((v16 - v9) >> 3) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }

  uint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }

  size_t v14 = a3 - v17;
  if (v14)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }

void sub_27FBD4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_138E8(22);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    BOOL v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(unsigned __int8 *)(a1 + 400);
        unint64_t v10 = "VirtualStream.cpp";
        int v9 = 136316162;
        if (v6 == a2) {
          uint64_t v7 = "(Redundant) ";
        }
        else {
          uint64_t v7 = "";
        }
        uint64_t v8 = "false";
        __int16 v11 = 1024;
        int v12 = 945;
        size_t v14 = v7;
        __int16 v13 = 2080;
        if (a2) {
          uint64_t v8 = "true";
        }
        __int16 v15 = 2080;
        double v16 = v8;
        __int16 v17 = 2048;
        uint64_t v18 = a1;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %ssetting trustworthiness flag to %s on stream at %p",  (uint8_t *)&v9,  0x30u);
      }
    }
  }

  *(_BYTE *)(a1 + 400) = a2;
}

std::string *sub_27FCFC(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_1548E8(&__p, a2);
      int v6 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      a2 += 56LL;
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_27FDD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_27FE10(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(a4 + 80);
  sub_27D9BC((uint64_t *)buf, (uint64_t *)(a4 + 80), "", 1513);
  uint64_t v10 = *(void *)buf;
  int v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v11 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v10 != a1)
  {
    __int16 v13 = (os_log_t *)sub_138E8(13);
    size_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1513;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: got an unexpected Object pointer in callback",  buf,  0x12u);
      }
    }
  }

  sub_27D9BC((uint64_t *)buf, v8, "", 1515);
  uint64_t v16 = *(void *)buf;
  uint64_t v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v17 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (v16 == a1 && a2)
  {
    uint64_t v19 = a2;
    __int16 v20 = (void *)(a4 + 256);
    do
    {
      uint64_t v32 = *a3;
      int v33 = *((_DWORD *)a3 + 2);
      if (sub_67420(v20, (uint64_t)&v32))
      {
        uint64_t v30 = *a3;
        int v31 = *((_DWORD *)a3 + 2);
        sub_67564(v20, (unsigned int *)&v30);
        if (*(_DWORD *)a3 == 1936092532)
        {
          uint64_t v28 = 0x676C6F62736C6174LL;
          int v29 = 0;
        }
      }

      else
      {
        int v21 = (os_log_t *)sub_138E8(22);
        uint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = *a3;
          int v25 = *((_DWORD *)a3 + 2);
          sub_613AC((uint64_t)__p, (unsigned int *)&v24);
          BOOL v23 = __p;
          if (v27 < 0) {
            BOOL v23 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1549;
          __int16 v35 = 2080;
          uint64_t v36 = v23;
          _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Unregistered relay property address %s", buf, 0x1Cu);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      a3 = (uint64_t *)((char *)a3 + 12);
      --v19;
    }

    while (v19);
  }

void sub_2801E0(_Unwind_Exception *a1)
{
}

void sub_2801F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_28020C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2 && *(void *)(v2 + 8) != -1LL) {
    sub_2802C8((void *)a1);
  }
  sub_196138(a1 + 440);
  sub_67FE8(a1 + 344);
  *(void *)(a1 + 256) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 280));
  unsigned int v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 208);
  if (v4)
  {
    *(void *)(a1 + 216) = v4;
    operator delete(v4);
  }

  BOOL v5 = *(std::__shared_weak_count **)(a1 + 176);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 160);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_7A768(a1 + 136);
  sub_85B80((uint64_t *)(a1 + 112));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return sub_F3008(a1);
}

void sub_2802C8(void *a1)
{
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
  {
    unsigned int v3 = 0LL;
    goto LABEL_30;
  }

  unsigned int v3 = std::__shared_weak_count::lock(v2);
  uint64_t v26 = v3;
  if (!v3 || (uint64_t v4 = a1[10], (v25 = v4) == 0))
  {
LABEL_30:
    uint64_t v16 = (os_log_t *)sub_138E8(22);
    __int16 v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v28 = "VirtualStream.cpp";
      __int16 v29 = 1024;
      int v30 = 391;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d UnregisterAllPropertyListeners() underlying stream is nullptr",  buf,  0x12u);
    }

void sub_280588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_2805B4( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 72) = 0LL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + memset(buf, 0, 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &off_4796A0;
  *(void *)(a1 + 80) = *a2;
  uint64_t v13 = a2[1];
  *(void *)(a1 + 88) = v13;
  if (v13)
  {
    size_t v14 = (unint64_t *)(v13 + 16);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  *(void *)(a1 + 96) = a3;
  *(void *)(a1 + 104) = a4;
  sub_85A90((uint64_t *)(a1 + 112), a5);
  if (*a6)
  {
    *(void *)(a1 + 136) = *a6;
    *(void *)(a1 + 144) = a6[1];
    *a6 = 0LL;
    a6[1] = 0LL;
  }

  else
  {
    sub_1FF224(&__p, (uint64_t)a5);
    memset(v23, 0, sizeof(v23));
    sub_19628C((void *)(a1 + 136), (uint64_t)&__p, 1684434036LL, v23);
  }

  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 184) = *(void *)a8;
  __int128 v16 = *(_OWORD *)(a8 + 8);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + sub_19DFC(v37 - 192) = v16;
  *(_OWORD *)(a1 + 2memset(buf, 0, 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  sub_189C20(a1 + 256);
  *(_WORD *)(a1 + 400) = 0;
  *(void *)(a1 + 404) = *(void *)(a8 + 24);
  *(void *)(a1 + 412) = *(void *)(a8 + 32);
  *(void *)(a1 + 4memset(buf, 0, 24) = a7;
  uint64_t v17 = *(void *)(a1 + 136);
  if (v17
    && (*(_BYTE *)(v17 + 448) || *(void *)(v17 + 584) || *(void *)(v17 + 672))
    && (unint64_t v18 = sub_2EDB8(v17), (v19 = HIDWORD(v18)) != 0))
  {
    unint64_t v20 = v18 >> 8;
  }

  else
  {
    unint64_t v18 = *(unsigned int *)(a8 + 40) | ((unint64_t)*(unsigned __int8 *)(a8 + 44) << 32);
    unint64_t v20 = v18 >> 8;
    LOBYTE(v19) = *(_BYTE *)(a8 + 44);
  }

  *(void *)(a1 + 432) = v18 | ((unint64_t)v19 << 32) | ((_DWORD)v20 << 8);
  sub_93AF4(a1 + 440);
  *(_BYTE *)(a1 + 728) = 0;
  return a1;
}

void sub_28077C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_85B80(v15);
  uint64_t v17 = *(std::__shared_weak_count **)(v14 + 88);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  sub_F3008(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_280834(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2 && *(_BYTE *)(v2 + 52)) {
    sub_199F9C(*(void *)(a1 + 136), 0);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 160LL))(*(void *)(a1 + 136));
}

uint64_t sub_280878(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 - a2;
  if (a3 == a2)
  {
    __int16 v69 = (os_log_t *)sub_138E8(13);
    unsigned int v70 = *v69;
    if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "StreamUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 77;
      _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inFormatList is empty",  buf,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inFormatList is empty");
  }

  int v6 = *(_DWORD *)(a4 + 8);
  int v7 = *(_DWORD *)(a4 + 12);
  int v9 = *(_DWORD *)(a4 + 28);
  int v8 = *(_DWORD *)(a4 + 32);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a2;
  *(_OWORD *)&buf[16] = v10;
  *(void *)__int128 v80 = *(void *)(a2 + 32);
  *(_OWORD *)&v80[8] = *(_OWORD *)(a2 + 40);
  if (*(_DWORD *)&buf[8] && v6 && *(_DWORD *)&buf[8] != v6) {
    goto LABEL_157;
  }
  if (*(_DWORD *)&buf[16])
  {
    int v12 = *(_DWORD *)(a4 + 16);
    if (v12)
    {
      if (*(_DWORD *)&buf[16] != v12) {
        goto LABEL_157;
      }
    }
  }

  if (*(_DWORD *)&buf[20])
  {
    int v13 = *(_DWORD *)(a4 + 20);
    if (v13)
    {
      if (*(_DWORD *)&buf[20] != v13) {
        goto LABEL_157;
      }
    }
  }

  if (*(_DWORD *)&buf[24])
  {
    int v14 = *(_DWORD *)(a4 + 24);
    if (v14)
    {
      if (*(_DWORD *)&buf[24] != v14) {
        goto LABEL_157;
      }
    }
  }

  if (*(_DWORD *)&buf[28] && v9 && *(_DWORD *)&buf[28] != v9 || *(_DWORD *)v80 && v8 && *(_DWORD *)v80 != v8) {
    goto LABEL_157;
  }
  uint64_t v65 = result;
  uint64_t v66 = a4;
  if (sub_2854C((uint64_t)buf, a4))
  {
    BOOL v67 = *(double *)(v66 + 40) >= *(double *)&v80[8];
  }

  else
  {
    BOOL v67 = 0;
  }

  uint64_t result = v65;
  a4 = v66;
  if (!v67)
  {
LABEL_157:
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7LL * (v4 >> 3);
    if (v15 >= 2)
    {
      __int128 v16 = &buf[16];
      double v17 = *(double *)(a4 + 40);
      double v18 = *(double *)(a4 + 48);
      double v19 = *(double *)a4;
      int v20 = *(_DWORD *)(a4 + 16);
      int v21 = *(_DWORD *)(a4 + 20);
      int v22 = *(_DWORD *)(a4 + 24);
      int v24 = *(_DWORD *)&buf[8];
      int v23 = *(_DWORD *)&buf[12];
      int v25 = *(_DWORD *)&buf[28];
      int v26 = *(_DWORD *)v80;
      char v27 = (double *)(a2 + 104);
      unint64_t v28 = 2LL;
      double v30 = *(double *)&v80[8];
      double v29 = *(double *)&v80[16];
      do
      {
        double v31 = *(v27 - 6);
        int v32 = *((_DWORD *)v27 - 10);
        int v33 = *((_DWORD *)v27 - 9);
        int v34 = *((_DWORD *)v27 - 5);
        uint64_t v35 = *((void *)v27 - 2);
        double v36 = *(v27 - 1);
        double v37 = *v27;
        BOOL v38 = v24 == v6;
        BOOL v39 = v32 == v6 && v24 != v6;
        if (v32 == v6) {
          BOOL v38 = v24 != v6;
        }
        int v40 = v17 >= v30;
        if (v18 > v29) {
          int v40 = 0;
        }
        BOOL v41 = v17 >= v36;
        if (v18 > v37) {
          BOOL v41 = 0;
        }
        int v42 = v41 & ~v40;
        BOOL v43 = v40 & !v41;
        if (v38) {
          BOOL v43 = v24 == v6 && v32 != v6;
        }
        else {
          BOOL v39 = v42;
        }
        BOOL v44 = v25 == v9;
        BOOL v45 = v25 != v9;
        int v46 = v34 - v9;
        if (v34 == v9) {
          BOOL v44 = 0;
        }
        else {
          BOOL v45 = 0;
        }
        if (v43)
        {
          BOOL v44 = v43;
          BOOL v45 = v39;
        }

        if (!v39)
        {
          BOOL v43 = v44;
          BOOL v39 = v45;
        }

        BOOL v47 = v26 == v8;
        BOOL v48 = v26 != v8;
        if ((_DWORD)v35 == v8) {
          BOOL v47 = 0;
        }
        else {
          BOOL v48 = 0;
        }
        if (v43)
        {
          BOOL v47 = v43;
          BOOL v48 = v39;
        }

        if (v39)
        {
          BOOL v49 = v39;
        }

        else
        {
          BOOL v43 = v47;
          BOOL v49 = v48;
        }

        BOOL v50 = v23 == v7;
        BOOL v51 = v23 != v7;
        if (v33 == v7) {
          BOOL v50 = 0;
        }
        else {
          BOOL v51 = 0;
        }
        if (v43)
        {
          BOOL v50 = v43;
          BOOL v51 = v49;
        }

        if (v49)
        {
          BOOL v50 = v43;
          BOOL v52 = v49;
        }

        else
        {
          BOOL v52 = v51;
        }

        if (v52 || v50)
        {
          if (!v52) {
            goto LABEL_132;
          }
          goto LABEL_73;
        }

        if (v17 < v30 || v18 > v29)
        {
          BOOL v54 = v29 >= v17;
          if (v30 > v18) {
            BOOL v54 = 0;
          }
          if (v30 >= v17) {
            double v55 = v30;
          }
          else {
            double v55 = v17;
          }
          if (v18 >= v29) {
            double v56 = v29;
          }
          else {
            double v56 = v18;
          }
          if (v37 < v17 || v36 > v18)
          {
            if (!v54)
            {
              double v59 = v29 - v17;
              if (v29 >= v17) {
                double v59 = v30 - v18;
              }
              double v60 = v37 - v17;
              if (v37 >= v17) {
                double v60 = v36 - v18;
              }
              if (v59 < 0.0 == v60 >= 0.0)
              {
                if (v60 >= 0.0) {
                  goto LABEL_73;
                }
              }

              else if (fabs(v60) < fabs(v59))
              {
                goto LABEL_73;
              }
            }
          }

          else
          {
            if (!v54) {
              goto LABEL_73;
            }
            double v57 = v18 >= v37 ? *v27 : v18;
            double v58 = v36 >= v17 ? *(v27 - 1) : v17;
            if (v57 - v58 > v56 - v55) {
              goto LABEL_73;
            }
          }
        }

        int v53 = v25 - v9;
        if (v25 == v9) {
          goto LABEL_122;
        }
        if ((v46 ^ v53) < 0)
        {
          if (v46 < 0) {
            goto LABEL_122;
          }
        }

        else
        {
          if (v46 < 0) {
            int v46 = v9 - v34;
          }
          if (v53 < 0) {
            int v53 = v9 - v25;
          }
          if (v46 >= v53)
          {
LABEL_122:
            int v61 = v26 - v8;
            if (v26 == v8)
            {
              int v26 = v8;
              goto LABEL_132;
            }

            int v62 = v35 - v8;
            if ((((_DWORD)v35 - v8) ^ v61) < 0)
            {
              if (v62 < 0) {
                goto LABEL_132;
              }
            }

            else
            {
              if (v62 < 0) {
                int v62 = v8 - v35;
              }
              if (v61 < 0) {
                int v61 = v8 - v26;
              }
            }
          }
        }

void sub_280EC0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_280EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v6 = *((_OWORD *)a4 + 1);
  v12[0] = *(_OWORD *)a4;
  v12[1] = v6;
  uint64_t v13 = a4[4];
  uint64_t v14 = *a4;
  uint64_t v15 = v14;
  uint64_t result = sub_280878((uint64_t)v16, a2, a3, (uint64_t)v12);
  __int128 v8 = v17;
  __int128 v9 = v18;
  __int128 v21 = v17;
  __int128 v22 = v18;
  double v10 = v19;
  double v11 = v20;
  *(double *)a1 = v10;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + memset(buf, 0, 24) = v9;
  return result;
}

unint64_t sub_280F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + memset(buf, 0, 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 0;
  int v21 = 1;
  int v22 = a5;
  __int128 v23 = *(_OWORD *)sub_2FC95C();
  int v24 = 0;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  unint64_t v10 = sub_2D7980(a2, (uint64_t)&v21);
  int v11 = BYTE4(v10);
  if (!BYTE4(v10))
  {
    int v21 = 0;
    int v22 = a5;
    __int128 v23 = *(_OWORD *)sub_2FC95C();
    int v24 = 0;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v25 = 0LL;
    unint64_t v10 = sub_2D7980(a2, (uint64_t)&v21);
    int v11 = BYTE4(v10);
    if (!BYTE4(v10))
    {
      unint64_t v10 = sub_2D0BB4(a3, a5);
      int v11 = BYTE4(v10);
    }
  }

  if (v11) {
    int v12 = v10;
  }
  else {
    int v12 = 0;
  }
  *(_DWORD *)a1 = v12;
  int v21 = 1;
  int v22 = a5;
  __int128 v23 = *(_OWORD *)sub_2FC95C();
  int v24 = 0;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  unint64_t v13 = sub_2D7BD8(a2, (uint64_t)&v21);
  int v14 = BYTE4(v13);
  if (!BYTE4(v13))
  {
    int v21 = 0;
    int v22 = a5;
    __int128 v23 = *(_OWORD *)sub_2FC95C();
    int v24 = 0;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v25 = 0LL;
    unint64_t v13 = sub_2D7BD8(a2, (uint64_t)&v21);
    int v14 = BYTE4(v13);
    if (!BYTE4(v13))
    {
      unint64_t v13 = sub_2D0D68(a3, a5);
      int v14 = BYTE4(v13);
    }
  }

  if (v14) {
    int v15 = v13;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 4) = v15;
  int v21 = 1;
  int v22 = a5;
  __int128 v23 = *(_OWORD *)sub_2FC95C();
  int v24 = 0;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  *(void *)(a1 + 8) = sub_2D8088(a2, (uint64_t)&v21);
  *(_BYTE *)(a1 + 16) = v16;
  if (!v16)
  {
    int v21 = 0;
    int v22 = a5;
    __int128 v23 = *(_OWORD *)sub_2FC95C();
    int v24 = 0;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v25 = 0LL;
    *(void *)(a1 + 8) = sub_2D8088(a2, (uint64_t)&v21);
    *(_BYTE *)(a1 + 16) = v17;
  }

  uint64_t v18 = sub_2D1450(a3, a5, a4);
  *(_DWORD *)(a1 + memset(buf, 0, 24) = v18;
  *(_BYTE *)(a1 + 28) = BYTE4(v18);
  uint64_t v19 = sub_2D1828(a3, a5, a4);
  *(_DWORD *)(a1 + 32) = v19;
  *(_BYTE *)(a1 + 36) = BYTE4(v19);
  int v21 = 1;
  int v22 = a5;
  __int128 v23 = *(_OWORD *)sub_2FC95C();
  int v24 = 0;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  unint64_t result = sub_2D7E30(a2, (uint64_t)&v21);
  *(_DWORD *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 44) = BYTE4(result);
  if (!HIDWORD(result))
  {
    int v21 = 0;
    int v22 = a5;
    __int128 v23 = *(_OWORD *)sub_2FC95C();
    int v24 = 0;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v25 = 0LL;
    unint64_t result = sub_2D7E30(a2, (uint64_t)&v21);
    *(_DWORD *)(a1 + 40) = result;
    *(_BYTE *)(a1 + 44) = BYTE4(result);
    if (!HIDWORD(result))
    {
      unint64_t result = sub_2D1BF8(a3, a5);
      *(_DWORD *)(a1 + 40) = result;
      *(_BYTE *)(a1 + 44) = BYTE4(result);
    }
  }

  return result;
}

void sub_2811E8(uint64_t *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  uint64_t v6 = a4 + 32;
  uint64_t v7 = 8LL;
  if (a2) {
    uint64_t v7 = 32LL;
  }
  else {
    uint64_t v6 = a4 + 8;
  }
  uint64_t v8 = *(void *)(a4 + v7);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 8) - v8) >> 3) <= a3)
  {
    double v29 = (os_log_t *)sub_138E8(13);
    double v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      int v32 = 136315394;
      int v33 = "StreamUtilities.cpp";
      __int16 v34 = 1024;
      int v35 = 41;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): invalid stream index",  (uint8_t *)&v32,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid stream index");
  }

  __int128 v9 = (void *)(v8 + 24LL * a3);
  unint64_t v10 = (void *)v9[1];
  if (v9 != v10)
  {
    uint64_t v11 = a5 + 16;
    int v12 = (uint64_t *)(a5 + 24);
    do
    {
      uint64_t v14 = v10[2];
      unint64_t v13 = (std::__shared_weak_count *)v10[3];
      if (v13)
      {
        p_uint64_t shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
        do
          unint64_t v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
      }

      char v17 = v12;
      do
      {
        uint64_t v18 = *v17;
        if (v11 == *v17)
        {
          uint64_t v26 = (os_log_t *)sub_138E8(13);
          uint64_t v27 = *v26;
          if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
          {
            int v32 = 136315394;
            int v33 = "StreamUtilities.cpp";
            __int16 v34 = 1024;
            int v35 = 61;
            _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [matchingConnection is NULL]: could not find matching connection",  (uint8_t *)&v32,  0x12u);
          }

          unint64_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v28, "could not find matching connection");
        }

        if (v13 && (uint64_t v19 = std::__shared_weak_count::lock(v13)) != 0LL)
        {
          double v20 = v19;
          if (v14)
          {
            uint64_t v21 = v18 + 16;
            if (!sub_1F6C84(v14, (void *)(v18 + 16))) {
              uint64_t v21 = 0LL;
            }
          }

          else
          {
            uint64_t v21 = 0LL;
          }

          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            unint64_t v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }

        else
        {
          uint64_t v21 = 0LL;
        }

        char v17 = (uint64_t *)(v18 + 8);
      }

      while (!v21);
      int v24 = operator new(0x18uLL);
      v24[1] = a1;
      void v24[2] = v21;
      uint64_t v25 = *a1;
      *int v24 = *a1;
      *(void *)(v25 + 8) = v24;
      *a1 = (uint64_t)v24;
      ++a1[2];
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      unint64_t v10 = (void *)v10[1];
    }

    while (v9 != v10);
  }

void sub_2814E4(_Unwind_Exception *a1)
{
}

uint64_t sub_28153C( uint64_t a1, unsigned int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int *a7)
{
  unsigned int v9 = a5;
  unsigned int v10 = a4;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)*a6 + 264LL))(v117, *a6, a4, a5);
  sub_27D9BC(&v101, (uint64_t *)v117, "", 341);
  if (*(void *)&v117[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v117[8]);
  }
  uint64_t v97 = a1;
  if (!v101)
  {
    BOOL v88 = (os_log_t *)sub_138E8(13);
    unint64_t v89 = *v88;
    if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v117 = 136315394;
      *(void *)&v117[4] = "StreamUtilities.cpp";
      *(_WORD *)&v117[12] = 1024;
      *(_DWORD *)&v117[14] = 342;
      _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [physicalStream is NULL]: physical stream is NULL",  v117,  0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "physical stream is NULL");
  }

  uint64_t v13 = 1LL;
  if (v10)
  {
    uint64_t v13 = 4LL;
    uint64_t v14 = a6 + 4;
  }

  else
  {
    uint64_t v14 = a6 + 1;
  }

  uint64_t v15 = a6[v13];
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - v15) >> 3) <= v9)
  {
    __int128 v91 = (os_log_t *)sub_138E8(13);
    __int128 v92 = *v91;
    if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v117 = 136315394;
      *(void *)&v117[4] = "StreamUtilities.cpp";
      *(_WORD *)&v117[12] = 1024;
      *(_DWORD *)&v117[14] = 346;
      _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): invalid stream index",  v117,  0x12u);
    }

    __int128 v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "invalid stream index");
  }

  uint64_t v100 = 0LL;
  uint64_t v16 = v10;
  kdebug_trace(553912325LL, v10, 0LL, 0LL, 0LL);
  __int128 v99 = 0uLL;
  sub_2811E8((uint64_t *)v109, v10, v9, (uint64_t)a6, (uint64_t)a7);
  if (!v110) {
    goto LABEL_75;
  }
  if (v110 != 1 && (v10 & 1) == 0)
  {
    char v94 = (os_log_t *)sub_138E8(13);
    uint64_t v95 = *v94;
    if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v117 = 136315394;
      *(void *)&v117[4] = "StreamUtilities.cpp";
      *(_WORD *)&v117[12] = 1024;
      *(_DWORD *)&v117[14] = 385;
      _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): input stream has more than one associated connection",  v117,  0x12u);
    }

    BOOL v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v96, "input stream has more than one associated connection");
  }

  char v17 = (unint64_t *)*((void *)v109[1] + 2);
  if (v10) {
    uint64_t v18 = a6 + 4;
  }
  else {
    uint64_t v18 = a6 + 1;
  }
  uint64_t v19 = *v18;
  double v20 = (void *)(v19 + 24LL * v9);
  if ((v10 & 1) == 0)
  {
    int v22 = (std::__shared_weak_count *)v17[1];
    unint64_t v107 = *v17;
    __int128 v108 = v22;
    if (v22)
    {
      p_uint64_t shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
      do
        unint64_t v24 = __ldxr(p_shared_weak_owners);
      while (__stxr(v24 + 1, p_shared_weak_owners));
    }

    uint64_t v25 = sub_1B6A5C((uint64_t)(a6 + 7), &v107);
    std::string __p = 0LL;
    uint64_t v105 = 0LL;
    uint64_t v106 = 0LL;
    if (a6 + 8 != v25) {
      sub_7A5B8(&__p, (const void *)v25[6], v25[7], (v25[7] - v25[6]) >> 2);
    }
    uint64_t v34 = v17[7];
    unsigned int v116 = a2;
    sub_1FEAFC(v117, a2, a3, v34, v20[1], v20[2], (uint64_t)&__p);
    int v35 = BYTE4(v119);
    uint64_t v16 = v10;
    if (BYTE4(v119))
    {
      int v113 = 0LL;
      uint64_t v114 = 0LL;
      uint64_t v115 = 0LL;
      sub_DA744( &v113,  *(const void **)v117,  *(uint64_t *)&v117[8],  (uint64_t)(*(void *)&v117[8] - *(void *)v117) >> 3);
      double v36 = (uint64_t *)v113;
      uint64_t v37 = v114 - (void)v113;
      if ((unint64_t)(v114 - (void)v113) >= 9)
      {
        uint64_t v38 = sub_138E8(20);
        uint64_t v39 = sub_138E8(24);
        char v40 = 0;
        uint64_t v41 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v42 = *(void *)(v38 + 8);
        while (1)
        {
          uint64_t v43 = *(int *)&buf[4 * v41];
          char v44 = v40;
          if (((v42 & v43) != 0) != ((*(void *)(v39 + 8) & v43) != 0)) {
            break;
          }
          char v40 = 1;
          uint64_t v41 = 1LL;
          if ((v44 & 1) != 0) {
            goto LABEL_41;
          }
        }

        if ((v42 & v43) == 0) {
          uint64_t v38 = v39;
        }
LABEL_41:
        BOOL v45 = *(os_log_s **)v38;
        if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1371;
          *(_WORD *)&_BYTE buf[18] = 2048;
          *(void *)&buf[20] = v37 >> 3;
          _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_INFO,  "%25s:%-5d Get DSP properties returned a list of %lu entries. We currently base DSP on the first entry only.",  buf,  0x1Cu);
        }
      }

      uint64_t v46 = *v36;
      uint64_t v16 = v10;
      if (*v36 && *(void *)v46 != *(void *)(v46 + 8) && (unint64_t)(v105 - (void)__p) <= 0xB)
      {
        uint64_t v100 = *v36;
        if (*(_BYTE *)(v46 + 52))
        {
          uint64_t v111 = *(void *)a7;
          uint64_t v112 = (std::__shared_weak_count *)v46;
          sub_1F77FC();
          sub_90C4C((uint64_t)buf, (int *)&v111);
          if (buf[16])
          {
            uint64_t v47 = *(void *)buf;
            if (*(void *)buf) {
              sub_199F9C(*(uint64_t *)buf, 1);
            }
            BOOL v48 = *(std::__shared_weak_count **)&buf[8];
            *(void *)&__int128 v103 = v47;
            *((void *)&v103 + 1) = *(void *)&buf[8];
            if (*(void *)&buf[8])
            {
              BOOL v49 = (unint64_t *)(*(void *)&buf[8] + 8LL);
              do
                unint64_t v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
              do
                unint64_t v51 = __ldaxr(v49);
              while (__stlxr(v51 - 1, v49));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }

          else
          {
            sub_1F786C((uint64_t *)&v103, (uint64_t **)&v113, v20, a7, (int *)&v116);
            sub_1F77FC();
            sub_90EEC((unsigned int *)&v111, (uint64_t *)&v103);
          }
        }

        else
        {
          int v86 = (os_log_t *)sub_138E8(24);
          BOOL v87 = *v86;
          if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1399;
            _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_INFO,  "%25s:%-5d Creating input DSP Chain, not caching.",  buf,  0x12u);
          }

          sub_1F786C((uint64_t *)&v103, (uint64_t **)&v113, v20, a7, (int *)&v116);
        }

        if (v113) {
          operator delete(v113);
        }
        if (!BYTE4(v119))
        {
LABEL_61:
          __int128 v52 = v103;
          __int128 v103 = 0uLL;
          int v53 = (std::__shared_weak_count *)*((void *)&v99 + 1);
          __int128 v99 = v52;
          if (v53)
          {
            p_shared_owners = (unint64_t *)&v53->__shared_owners_;
            do
              unint64_t v55 = __ldaxr(p_shared_owners);
            while (__stlxr(v55 - 1, p_shared_owners));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }

          double v56 = (std::__shared_weak_count *)*((void *)&v103 + 1);
          if (*((void *)&v103 + 1))
          {
            double v57 = (unint64_t *)(*((void *)&v103 + 1) + 8LL);
            do
              unint64_t v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }

          if (__p) {
            operator delete(__p);
          }
          int v33 = v108;
          if (v108) {
            goto LABEL_74;
          }
          goto LABEL_75;
        }

void sub_2820E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, std::__shared_weak_count *a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, void *__p, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, void *a41, std::__shared_weak_count *a42, uint64_t a43, char a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a44 && a41) {
    operator delete(a41);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  sub_68314(&a26);
  sub_7A768((uint64_t)&a13);
  sub_7A768((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *sub_2822A8()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &off_479910;
  return result;
}

void sub_2822CC(uint64_t a1, void *a2)
{
  *a2 = &off_479910;
}

BOOL sub_2822E4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_282304()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &off_4798C8;
  return result;
}

void sub_282328(uint64_t a1, void *a2)
{
  *a2 = &off_4798C8;
}

BOOL sub_282340(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_282360()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &off_479880;
  return result;
}

void sub_282384(uint64_t a1, void *a2)
{
  *a2 = &off_479880;
}

uint64_t sub_28239C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_2823FC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479838;
  return result;
}

void sub_282420(uint64_t a1, void *a2)
{
  *a2 = &off_479838;
}

uint64_t sub_282438(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_282450()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4797F0;
  return result;
}

void sub_282474(uint64_t a1, void *a2)
{
  *a2 = &off_4797F0;
}

uint64_t sub_28248C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_2824A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4797A8;
  return result;
}

void sub_2824C8(uint64_t a1, void *a2)
{
  *a2 = &off_4797A8;
}

BOOL sub_2824E0(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_282504()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479760;
  return result;
}

void sub_282528(uint64_t a1, void *a2)
{
  *a2 = &off_479760;
}

uint64_t sub_282540(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

std::string *sub_282550@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "[ ", 2uLL);
  unsigned int v3 = (*(uint64_t (**)(const void *))(*(void *)a1 + 120LL))(a1);
  std::to_string(&v51, v3);
  uint64_t v4 = std::string::insert(&v51, 0LL, "id: ", 4uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v52, "; ", 2uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  __int128 __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v9 = HIBYTE(cap);
  }
  else {
    std::string::size_type v9 = *((void *)&__p + 1);
  }
  std::string::append(a2, p_p, v9);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  snprintf((char *)&__str, 0x13uLL, "%p", a1);
  sub_7D084(&v51, (char *)&__str);
  unsigned int v10 = std::string::insert(&v51, 0LL, "addr: ", 6uLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  int v12 = std::string::append(&v52, "; ", 2uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t cap = v12->__r_.__value_.__l.__cap_;
  __int128 __p = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v14 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v14 = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v15 = HIBYTE(cap);
  }
  else {
    std::string::size_type v15 = *((void *)&__p + 1);
  }
  std::string::append(a2, v14, v15);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  (*(void (**)(std::string *__return_ptr, const void *))(*(void *)a1 + 128LL))(&__str, a1);
  sub_48E98(&v51, (CFStringRef)__str.__r_.__value_.__l.__data_);
  uint64_t v16 = std::string::insert(&v51, 0LL, "uid: ", 6uLL);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v18 = std::string::append(&v52, "; ", 3uLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t cap = v18->__r_.__value_.__l.__cap_;
  __int128 __p = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    double v20 = (const std::string::value_type *)&__p;
  }
  else {
    double v20 = (const std::string::value_type *)__p;
  }
  if (cap >= 0) {
    std::string::size_type v21 = HIBYTE(cap);
  }
  else {
    std::string::size_type v21 = *((void *)&__p + 1);
  }
  std::string::append(a2, v20, v21);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)__p);
  }
  sub_19DFC((uint64_t)&__str);
  sub_7D084(&v46, "{ ");
  char v22 = 0;
  uint64_t v23 = 0LL;
  __int16 v55 = 256;
  do
  {
    char v45 = v22;
    int v24 = *((unsigned __int8 *)&v55 + v23);
    unsigned int v25 = (*(uint64_t (**)(const void *, void))(*(void *)a1 + 88LL))(a1, *((unsigned __int8 *)&v55 + v23));
    if (v25)
    {
      uint64_t v26 = 0LL;
      if (v24) {
        uint64_t v27 = "o/";
      }
      else {
        uint64_t v27 = "i/";
      }
      do
      {
        unint64_t v28 = (unsigned int *)(*(uint64_t (**)(const void *, BOOL, uint64_t))(*(void *)a1 + 96LL))( a1,  v24 != 0,  v26);
        std::to_string(&__str, v28[20]);
        unint64_t v29 = std::string::insert(&__str, 0LL, v27, 2uLL);
        __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0LL;
        v29->__r_.__value_.__l.__cap_ = 0LL;
        v29->__r_.__value_.__r.__words[0] = 0LL;
        double v31 = std::string::append(&v51, "/", 1uLL);
        __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0LL;
        v31->__r_.__value_.__l.__cap_ = 0LL;
        v31->__r_.__value_.__r.__words[0] = 0LL;
        snprintf(__s, 0x13uLL, "%p", v28);
        sub_7D084(v49, __s);
        if ((v50 & 0x80u) == 0) {
          int v33 = v49;
        }
        else {
          int v33 = (void **)v49[0];
        }
        if ((v50 & 0x80u) == 0) {
          std::string::size_type v34 = v50;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v49[1];
        }
        int v35 = std::string::append(&v52, (const std::string::value_type *)v33, v34);
        __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t cap = v35->__r_.__value_.__l.__cap_;
        __int128 __p = v36;
        v35->__r_.__value_.__l.__size_ = 0LL;
        v35->__r_.__value_.__l.__cap_ = 0LL;
        v35->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          uint64_t v37 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v37 = (const std::string::value_type *)__p;
        }
        if (cap >= 0) {
          std::string::size_type v38 = HIBYTE(cap);
        }
        else {
          std::string::size_type v38 = *((void *)&__p + 1);
        }
        std::string::append(&v46, v37, v38);
        if (SHIBYTE(cap) < 0) {
          operator delete((void *)__p);
        }
        uint64_t v26 = (v26 + 1);
      }

      while (v25 != (_DWORD)v26);
    }

    char v22 = 1;
    uint64_t v23 = 1LL;
  }

  while ((v45 & 1) == 0);
  std::string::append(&v46, " }", 2uLL);
  uint64_t v39 = std::string::insert(&v46, 0LL, "streams: ", 9uLL);
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  int64_t v48 = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)uint64_t v47 = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if (v48 >= 0) {
    uint64_t v41 = v47;
  }
  else {
    uint64_t v41 = (void **)v47[0];
  }
  if (v48 >= 0) {
    std::string::size_type v42 = HIBYTE(v48);
  }
  else {
    std::string::size_type v42 = (std::string::size_type)v47[1];
  }
  std::string::append(a2, (const std::string::value_type *)v41, v42);
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_282B00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_282C8C(uint64_t a1, CFUUIDBytes a2, void *a3)
{
  if (!a1)
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    std::string::size_type v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf2 = 136315394;
      *(void *)&cf2[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 95;
      uint64_t v16 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_QueryInterfa"
            "ce: no plug-in";
LABEL_19:
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, v16, cf2, 0x12u);
    }

void sub_283048( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x282F08LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2830C8(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    unsigned int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      CFUUIDRef v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 38;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_AddRef: no plug-in",  (uint8_t *)&v5,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 80) + 120LL))(a1 - 80);
}

void sub_2831C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2830F8LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2831F0(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    unsigned int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      CFUUIDRef v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 66;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_Release: no plug-in",  (uint8_t *)&v5,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 80) + 128LL))(a1 - 80);
}

void sub_2832F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x283220LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_283318(uint64_t a1)
{
  if (a1) {
    return 0LL;
  }
  uint64_t v1 = 1852797029LL;
  unsigned int v3 = (os_log_t *)sub_138E8(13);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    CFUUIDRef v6 = "HP_HardwarePlugInInterface.cpp";
    __int16 v7 = 1024;
    int v8 = 144;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HP_HardwarePlugIn_Initialize: no plug-in",  (uint8_t *)&v5,  0x12u);
  }

  return v1;
}

uint64_t sub_2833E8(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    unsigned int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      CFUUIDRef v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 185;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_Teardown: no plug-in",  (uint8_t *)&v5,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  (*(void (**)(uint64_t))(*(void *)(a1 - 80) + 112LL))(a1 - 80);
  return 0LL;
}

void sub_2834F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x28341CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_283534(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    __int128 v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      __int128 v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 620;
      std::string::size_type v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceAddIOP"
            "roc: no plug-in";
LABEL_17:
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0x12u);
    }

void sub_283790(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2835B8LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2837E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    CFUUIDRef v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int128 v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 649;
      __int128 v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceRemove"
            "IOProc: no plug-in";
LABEL_17:
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x12u);
    }

void sub_283A30(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x28385CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_283A84(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    __int128 v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    __int16 v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 799;
    std::string::size_type v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceRead: no plug-in";
LABEL_21:
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v19, 0x12u);
    goto LABEL_22;
  }

  if (!a3)
  {
    int v16 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    __int16 v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 800;
    std::string::size_type v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inStartTime is NULL]: HP_HardwarePlugIn_DeviceRea"
          "d: no start time";
    goto LABEL_21;
  }

  if (!a4)
  {
    __int128 v17 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      __int16 v20 = "HP_HardwarePlugInInterface.cpp";
      __int16 v21 = 1024;
      int v22 = 801;
      std::string::size_type v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outData is NULL]: HP_HardwarePlugIn_DeviceRead:"
            " no place for the data";
      goto LABEL_21;
    }

void sub_283D40(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x283B0CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_283D9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    CFUUIDRef v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int128 v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 829;
      __int128 v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceGetCur"
            "rentTime: no plug-in";
LABEL_17:
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x12u);
    }

void sub_283FE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x283E14LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_28403C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    __int128 v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    __int16 v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 858;
    std::string::size_type v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceTranslat"
          "eTime: no plug-in";
LABEL_21:
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v19, 0x12u);
    goto LABEL_22;
  }

  if (!a3)
  {
    int v16 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    __int16 v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 859;
    std::string::size_type v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inTime is NULL]: HP_HardwarePlugIn_DeviceTranslat"
          "eTime: no input time stamp";
    goto LABEL_21;
  }

  if (!a4)
  {
    __int128 v17 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      __int16 v20 = "HP_HardwarePlugInInterface.cpp";
      __int16 v21 = 1024;
      int v22 = 860;
      std::string::size_type v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outTime is NULL]: HP_HardwarePlugIn_DeviceTrans"
            "lateTime: no place for the return data";
      goto LABEL_21;
    }

void sub_2842F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2840C4LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_284354(uint64_t a1, unsigned int a2, int a3, int a4, int a5, _DWORD *a6, _BYTE *a7)
{
  if (!a1)
  {
    unsigned int v25 = (os_log_t *)sub_138E8(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v33 = "HP_HardwarePlugInInterface.cpp";
      __int16 v34 = 1024;
      int v35 = 919;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceGetPropert yInfo: no plug-in",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  __int128 v13 = (_DWORD *)sub_28AFEC(a2);
  uint64_t v14 = v13;
  if (!v13 || ((v15 = v13[3], v15 != 1633773415) ? (BOOL v16 = v15 == 1633969526) : (BOOL v16 = 1), !v16))
  {
    int v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22)
    {
      if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v33 = "HP_HardwarePlugInInterface.cpp";
        __int16 v34 = 1024;
        int v35 = 923;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceGetPropertyI nfo: no device with given ID",  buf,  0x12u);
      }
    }

    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_4865A0;
    void v24[2] = 560947818;
  }

  uint64_t v17 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16LL))(v13);
  uint64_t v18 = v17;
  if (v17) {
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16LL))(v17);
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 1768845428;
  }
  else {
    int v20 = 1869968496;
  }
  v31[0] = a5;
  v31[1] = v20;
  v31[2] = a3;
  if (((*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v14 + 32LL))(v14, v31) & 1) == 0)
  {
    unint64_t v28 = (os_log_t *)sub_138E8(13);
    unint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v33 = "HP_HardwarePlugInInterface.cpp";
      __int16 v34 = 1024;
      int v35 = 939;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): HP_HardwarePlugIn_DeviceGetPropertyInfo: no such property",  buf,  0x12u);
    }

    __int128 v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v30 = &off_4865A0;
    v30[2] = 2003332927;
  }

  if (a6) {
    *a6 = (*(uint64_t (**)(_DWORD *, _DWORD *, void, void))(*(void *)v14 + 48LL))(v14, v31, 0LL, 0LL);
  }
  if (a7) {
    *a7 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v14 + 40LL))(v14, v31);
  }
  if (v18 && v19) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24LL))(v18);
  }
  return 0LL;
}

void sub_2846E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x28449CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_284764(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    int v24 = (os_log_t *)sub_138E8(13);
    unsigned int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      __int128 v30 = "HP_HardwarePlugInInterface.cpp";
      __int16 v31 = 1024;
      int v32 = 976;
      uint64_t v26 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceGetPro"
            "perty: no plug-in";
LABEL_26:
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&v29, 0x12u);
    }

void sub_284A80(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x284898LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_284B04( uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v27 = (os_log_t *)sub_138E8(13);
    unint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int v30 = 136315394;
      __int16 v31 = "HP_HardwarePlugInInterface.cpp";
      __int16 v32 = 1024;
      int v33 = 1026;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceSetProperty: no plug-in",  (uint8_t *)&v30,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  int v15 = (_DWORD *)sub_28AFEC(a2);
  uint64_t v16 = v15;
  if (!v15 || ((int v17 = v15[3], v17 != 1633773415) ? (v18 = v17 == 1633969526) : (v18 = 1), !v18))
  {
    int v24 = (os_log_t *)sub_138E8(13);
    unsigned int v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        int v30 = 136315394;
        __int16 v31 = "HP_HardwarePlugInInterface.cpp";
        __int16 v32 = 1024;
        int v33 = 1030;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceSetProperty: no device with given ID",  (uint8_t *)&v30,  0x12u);
      }
    }

    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v26 = &off_4865A0;
    void v26[2] = 560947818;
  }

  uint64_t v19 = (*(uint64_t (**)(_DWORD *))(*(void *)v15 + 16LL))(v15);
  uint64_t v20 = v19;
  if (v19) {
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16LL))(v19);
  }
  else {
    int v21 = 0;
  }
  if (a5) {
    int v22 = 1768845428;
  }
  else {
    int v22 = 1869968496;
  }
  int v30 = a6;
  __int16 v31 = (const char *)__PAIR64__(a4, v22);
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 64LL))( v16,  &v30,  0LL,  0LL,  a7,  a8,  a3);
  if (v20 && v21) {
    (*(void (**)(uint64_t))(*(void *)v20 + 24LL))(v20);
  }
  return 0LL;
}

void sub_284DC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x284C38LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_284E40(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5, _BYTE *a6)
{
  if (!a1)
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 1077;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_StreamGetPropert yInfo: no plug-in",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  CFUUIDRef v11 = (_DWORD *)sub_28AFEC(a2);
  uint64_t v12 = v11;
  if (!v11 || v11[3] != 1634956402)
  {
    int v17 = (os_log_t *)sub_138E8(13);
    BOOL v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 1081;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theStream is NULL]: HP_HardwarePlugIn_StreamGetPropertyInf o: no device with given ID",  buf,  0x12u);
    }

    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_4865A0;
    v19[2] = 560947818;
  }

  uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 16LL))(v11);
  uint64_t v14 = v13;
  if (v13) {
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16LL))(v13);
  }
  else {
    int v15 = 0;
  }
  v26[0] = a4;
  v26[1] = 1735159650;
  void v26[2] = a3;
  if (((*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v12 + 32LL))(v12, v26) & 1) == 0)
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 1096;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): HP_HardwarePlugIn_StreamGetPropertyInfo: no such property",  buf,  0x12u);
    }

    unsigned int v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v25 = &off_4865A0;
    _OWORD v25[2] = 2003332927;
  }

  if (a5) {
    *a5 = (*(uint64_t (**)(_DWORD *, _DWORD *, void, void))(*(void *)v12 + 48LL))(v12, v26, 0LL, 0LL);
  }
  if (a6) {
    *a6 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v12 + 40LL))(v12, v26);
  }
  if (v14 && v15) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
  }
  return 0LL;
}

void sub_2851AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x284F64LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_285228(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (!a1)
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      uint64_t v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1133;
      int v22 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_StreamGetPro"
            "perty: no plug-in";
LABEL_22:
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v25, 0x12u);
    }

void sub_285518(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x285334LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_28559C(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    int v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      uint64_t v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1182;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_StreamSetProperty: no plug-in",  (uint8_t *)&v25,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v13 = (_DWORD *)sub_28AFEC(a2);
  uint64_t v14 = v13;
  if (!v13 || v13[3] != 1634956402)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      uint64_t v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1186;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theStream is NULL]: HP_HardwarePlugIn_StreamSetProperty: n o device with given ID",  (uint8_t *)&v25,  0x12u);
    }

    int v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v21 = &off_4865A0;
    v21[2] = 560947818;
  }

  uint64_t v15 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16LL))(v13);
  uint64_t v16 = v15;
  if (v15) {
    int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16LL))(v15);
  }
  else {
    int v17 = 0;
  }
  int v25 = a5;
  LODWORD(v26) = 1735159650;
  HIDWORD(v26) = a4;
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 64LL))( v14,  &v25,  0LL,  0LL,  a6,  a7,  a3);
  if (v16 && v17) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24LL))(v16);
  }
  return 0LL;
}

void sub_28583C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2856B0LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2858B8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    __int16 v27 = (os_log_t *)sub_138E8(13);
    int v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v33 = 1024;
      int v34 = 717;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceStartAtTime: no plug-in",  buf,  0x12u);
    }

    int v26 = 1852797029;
LABEL_34:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v26;
  }

  sub_92EF8();
  uint64_t v9 = sub_28AFEC(a2);
  if (!v9 || ((uint64_t v10 = v9, v11 = *(_DWORD *)(v9 + 12), v11 != 1633773415) ? (v12 = v11 == 1633969526) : (v12 = 1), !v12))
  {
    int v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
        __int16 v33 = 1024;
        int v34 = 721;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceStartAtTime: no device with given ID",  buf,  0x12u);
      }
    }

    int v26 = 560227702;
    goto LABEL_34;
  }

  uint64_t v13 = sub_138E8(5);
  uint64_t v14 = sub_138E8(31);
  char v15 = 0;
  uint64_t v16 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&buf[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1LL;
    if ((v19 & 1) != 0) {
      goto LABEL_14;
    }
  }

  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
LABEL_14:
  uint64_t v20 = *(os_log_s **)v13;
  if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 96LL))(__p, v10);
    int v21 = v31 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v33 = 1024;
    int v34 = 724;
    __int16 v35 = 2048;
    uint64_t v36 = a3;
    __int16 v37 = 2080;
    std::string::size_type v38 = v21;
    _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client request to start IO proc ID %p on VAD: '%s'.",  buf,  0x26u);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v22 = *(void *)v10;
  if (a3 && a4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 360))(v10, a3, a4, a5);
  }
  else {
    (*(void (**)(uint64_t, uint64_t))(v22 + 344))(v10, a3);
  }
  return 0LL;
}

void sub_285BE4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, __int16 a17, __int16 a18, __int128 a19)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v21 = (os_log_t *)sub_138E8(5);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 739;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
        goto LABEL_20;
      }

      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96LL))(&__p, v19);
      uint64_t v23 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 739;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
      if (a15 < 0) {
        goto LABEL_18;
      }
    }
  }

  else
  {
    int v24 = (os_log_t *)sub_138E8(5);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 746;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
        goto LABEL_20;
      }

      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96LL))(&__p, v19);
      int v26 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 746;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.",  (uint8_t *)&buf,  0x26u);
      if (a15 < 0) {
LABEL_18:
      }
        operator delete(__p);
    }
  }

uint64_t sub_285EE4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 888;
      char v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceGetNea"
            "restStartTime: no plug-in";
LABEL_17:
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0x12u);
    }

void sub_286140(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x285F68LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_286194(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    unsigned int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 158;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_Initialize: no plug-in",  (uint8_t *)&v5,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  (*(void (**)(uint64_t))(*(void *)(a1 - 80) + 104LL))(a1 - 80);
  return 0LL;
}

void sub_28629C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2861C8LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2862E0(uint64_t a1, unsigned int a2)
{
  if (!a1)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      BOOL v12 = "HP_HardwarePlugInInterface.cpp";
      __int16 v13 = 1024;
      int v14 = 212;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_ObjectShow: no plug-in",  (uint8_t *)&v11,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  uint64_t v3 = sub_28AFEC(a2);
  if (!v3)
  {
    int v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      BOOL v12 = "HP_HardwarePlugInInterface.cpp";
      __int16 v13 = 1024;
      int v14 = 216;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theObject is NULL]: HP_HardwarePlugIn_ObjectShow: no objec t with given ID",  (uint8_t *)&v11,  0x12u);
    }

    uint64_t v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v10 = &off_4865A0;
    void v10[2] = 560947818;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
}

void sub_286498(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x286324LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2864C4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a1)
  {
    char v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 487;
    uint64_t v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceCreateIO"
          "ProcID: no plug-in";
LABEL_21:
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v21, 0x12u);
    goto LABEL_22;
  }

  if (!a3)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 488;
    uint64_t v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: HP_HardwarePlugIn_DeviceCreateIO"
          "ProcID: no IOProc to add";
    goto LABEL_21;
  }

  if (!a5)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 489;
      uint64_t v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIOProcID is NULL]: HP_HardwarePlugIn_DeviceC"
            "reateIOProcID: nowhere to put the return value";
      goto LABEL_21;
    }

void sub_286788(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x286554LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2867E8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    BOOL v12 = (os_log_t *)sub_138E8(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "HP_HardwarePlugInInterface.cpp";
      __int16 v17 = 1024;
      int v18 = 592;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceDestroyIOP rocID: no plug-in",  (uint8_t *)&v15,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 1852797029;
  }

  sub_92EF8();
  int v5 = (_DWORD *)sub_28AFEC(a2);
  if (!v5 || ((v6 = v5[3], v6 != 1633773415) ? (BOOL v7 = v6 == 1633969526) : (BOOL v7 = 1), !v7))
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315394;
        uint64_t v16 = "HP_HardwarePlugInInterface.cpp";
        __int16 v17 = 1024;
        int v18 = 596;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: HP_HardwarePlugIn_DeviceAddIOProc: n o device with given ID",  (uint8_t *)&v15,  0x12u);
      }
    }

    int v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v11 = &off_4865A0;
    void v11[2] = 560227702;
  }

  (*(void (**)(_DWORD *, uint64_t))(*(void *)v5 + 304LL))(v5, a3);
  return 0LL;
}

void sub_2869D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x286858LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_286A1C(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 519;
    __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceCreateIO"
          "ProcIDWithBlock: no plug-in";
LABEL_21:
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v21, 0x12u);
    goto LABEL_22;
  }

  if (!a5)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 520;
    __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): HP_HardwarePlugIn_DeviceCreateIOProcIDWithBlock: "
          "no IOBlock to add";
    goto LABEL_21;
  }

  if (!a2)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 521;
      __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIOProcID is NULL]: HP_HardwarePlugIn_DeviceC"
            "reateIOProcIDWithBlock: nowhere to put the return value";
      goto LABEL_21;
    }

void sub_286CE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x286AACLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_286D40(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a1)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 552;
    __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: HP_HardwarePlugIn_DeviceCreateIO"
          "ProcIDWithClockedProc: no plug-in";
LABEL_21:
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v21, 0x12u);
    goto LABEL_22;
  }

  if (!a3)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 553;
    __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: HP_HardwarePlugIn_DeviceCreateIO"
          "ProcIDWithClockedProc: no IOProc to add";
    goto LABEL_21;
  }

  if (!a5)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 554;
      __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIOProcID is NULL]: HP_HardwarePlugIn_DeviceC"
            "reateIOProcIDWithClockedProc: nowhere to put the return value";
      goto LABEL_21;
    }

void sub_287004(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x286DD0LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_287064()
{
  return 1970171760LL;
}

uint64_t sub_287070(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  pthread_t v8 = v2;
  uint64_t v3 = (std::recursive_mutex *)(a1 + 168);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  uint64_t v4 = *(_opaque_pthread_t **)(a1 + 232);
  if (v2)
  {
    if (v4 && v2 == v4) {
      goto LABEL_7;
    }
  }

  else if (!v4)
  {
LABEL_7:
    sub_92F80(a1);
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
    return 1LL;
  }

  if (sub_93344(a1)) {
    goto LABEL_7;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1)) {
    return 0LL;
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  BOOL v7 = sub_93574((float *)(a1 + 248), (unint64_t)v2, &v8);
  uint64_t v5 = 1LL;
  v7[3] = 1LL;
  std::recursive_mutex::unlock(v3);
  return v5;
}

void sub_28713C(_Unwind_Exception *a1)
{
}

uint64_t sub_287158(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    pthread_t v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0LL;
    }
  }

  return a1;
}

BOOL sub_287194(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)a1 + 304LL))(&cf);
  if (cf)
  {
    (*(void (**)(CFArrayRef *__return_ptr, uint64_t))(*(void *)a1 + 304LL))(&theArray, a1);
    if (!theArray)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    BOOL v2 = (unint64_t)CFArrayGetCount(theArray) < 2;
    if (theArray) {
      CFRelease(theArray);
    }
    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    BOOL v2 = 1LL;
  }

  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4)
  {
    CFTypeRef cf = (CFTypeRef)0x676C6F6269616170LL;
    int v20 = 0;
    unint64_t v4 = sub_5C2F8(a1);
    *((void *)&v7 + 1) = v5;
    *(void *)&__int128 v7 = v4;
    uint64_t v6 = v7 >> 32;
    BOOL v9 = (v6 & 0xFF00000000LL) == 0 || (_DWORD)v6 != 1;
    CFTypeRef cf = (CFTypeRef)0x676C6F6264636174LL;
    int v20 = 0;
    unint64_t v10 = sub_5C2F8(a1);
    *((void *)&v13 + 1) = v11;
    *(void *)&__int128 v13 = v10;
    uint64_t v12 = v13 >> 32;
    int v15 = (v12 & 0xFF00000000LL) == 0 || (_DWORD)v12 != 1 || v9;
    return v2 & v15;
  }

  return v2;
}

void sub_2872E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, const void *);
  sub_7A6D8((const void **)va);
  sub_7A6D8((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_287328(unsigned __int8 *a1)
{
  inAddress.mSelector = 1;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F62636C6B23LL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  sub_90764((uint64_t)buf, &inAddress.mSelector, (AudioObjectPropertyAddress *)&__p, 0, 0LL);
  if (buf[32])
  {
    uint64_t v3 = *(unsigned int **)&buf[8];
    unint64_t v4 = *(unsigned int **)&buf[16];
    uint64_t v5 = (os_log_t *)sub_138E8(16);
    uint64_t v1 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_91FF0(&__p, v3, v4);
      uint64_t v6 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 176;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v6;
      _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Clock IDs: %s", buf, 0x1Cu);
    }

    __int128 v7 = v3;
    if (v3 != v4)
    {
      uint64_t v1 = (os_log_s *)&buf[8];
      __int128 v7 = v3;
      while (1)
      {
        AudioObjectID v8 = *v7;
        inAddress.mElement = 0;
        AudioObjectID v36 = v8;
        *(void *)&inAddress.mSelector = 0x676C6F6263756964LL;
        sub_C80E0((uint64_t)buf, &v36, &inAddress, 0, 0LL);
        if (!buf[24]) {
          goto LABEL_43;
        }
        std::string::size_type v9 = *(void *)&buf[16];
        *(void *)&buf[16] = 0LL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_483688;
        __p.__r_.__value_.__l.__size_ = v9;
        __p.__r_.__value_.__s.__data_[16] = 1;
        sub_39FD8(&buf[8]);
        if (!__p.__r_.__value_.__s.__data_[16]) {
          goto LABEL_43;
        }
        unint64_t v10 = (os_log_t *)sub_138E8(16);
        uint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
        {
          AudioObjectID v12 = *v7;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 183;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v12;
          *(_WORD *)&uint8_t buf[24] = 2112;
          *(void *)&buf[26] = __p.__r_.__value_.__l.__size_;
          _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \tClock UID   %d : %@", buf, 0x22u);
        }

        sub_48E98(buf, (CFStringRef)__p.__r_.__value_.__l.__size_);
        if (buf[23] >= 0) {
          uint64_t v13 = buf[23];
        }
        else {
          uint64_t v13 = *(void *)&buf[8];
        }
        uint64_t v14 = a1[23];
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0LL) {
          uint64_t v14 = *((void *)a1 + 1);
        }
        if (v13 != v14) {
          break;
        }
        if (v15 >= 0) {
          uint64_t v16 = a1;
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)a1;
        }
        if ((buf[23] & 0x80) != 0)
        {
          int v26 = *(void **)buf;
          BOOL v25 = memcmp(*(const void **)buf, v16, *(size_t *)&buf[8]) == 0;
          goto LABEL_38;
        }

        if (buf[23])
        {
          uint64_t v17 = buf[23] - 1LL;
          int v18 = buf;
          do
          {
            int v20 = *v18++;
            int v19 = v20;
            int v22 = *v16++;
            int v21 = v22;
            BOOL v24 = v17-- != 0;
            BOOL v25 = v19 == v21;
          }

          while (v19 == v21 && v24);
          if ((buf[23] & 0x80) != 0) {
            goto LABEL_36;
          }
        }

        else
        {
          BOOL v25 = 1;
        }

void sub_2877AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2877F0( uint64_t a1, int *a2, unint64_t a3, os_unfair_lock_s *a4, unsigned int a5, unsigned int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v101 = (os_log_t *)sub_138E8(13);
    uint64_t v102 = *v101;
    if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 266;
      _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inAggregateTopology is empty.",  cStr,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inAggregateTopology is empty.");
  }

  if (!sub_28909C())
  {
    id v104 = (os_log_t *)sub_138E8(13);
    uint64_t v105 = *v104;
    if (*v104 && os_log_type_enabled(*v104, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 267;
      _os_log_impl( &dword_0,  v105,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HAL v5 plugin ID is 0.",  cStr,  0x12u);
    }

    uint64_t v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v106, "HAL v5 plugin ID is 0.");
  }

  inQualifierData[0] = *(void **)a2;
  sub_33464(&__p, (unsigned int *)inQualifierData);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  snprintf((char *)&__str, 0x100uLL, "VAD %s AggDev", (const char *)p_p);
  snprintf(cStr, 0x100uLL, "%s %u", (const char *)&__str, dword_48C108);
  ++dword_48C108;
  uint64_t v16 = (void *)CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x600u);
  std::string value = v16;
  char v136 = 1;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v16 = value;
  }

  if (!v16)
  {
    unint64_t v107 = (os_log_t *)sub_138E8(13);
    __int128 v108 = *v107;
    if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 270;
      _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to create a valid UID for the aggregate device.",  cStr,  0x12u);
    }

    __int128 v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v109, "Unable to create a valid UID for the aggregate device.");
  }

  sub_72A50((CFStringRef *)&v134, a2);
  uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 8) + 24LL) + 16LL);
  int v120 = a7;
  if (a4)
  {
    BOOL v18 = v17 == (void)a4;
    uint64_t v17 = (uint64_t)a4;
    if (!v18)
    {
      int v19 = (os_log_t *)sub_138E8(16);
      int v20 = *v19;
      uint64_t v17 = (uint64_t)a4;
      if (*v19)
      {
        uint64_t v17 = (uint64_t)a4;
        if (os_log_type_enabled(*v19, OS_LOG_TYPE_INFO))
        {
          sub_23FE8( (uint64_t)&__str,  (os_unfair_lock_t)(*(void *)(*(void *)(*(void *)(a1 + 8) + 24LL) + 16LL) + 8LL));
          int v21 = v142;
          int v22 = __str;
          sub_23FE8((uint64_t)&__p, a4 + 2);
          p_str = &__str;
          if (v21 < 0) {
            p_str = (CFStringRef **)v22;
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            BOOL v24 = &__p;
          }
          else {
            BOOL v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)cStr = 136315906;
          *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
          *(_WORD *)&cStr[12] = 1024;
          *(_DWORD *)&cStr[14] = 277;
          __int16 v144 = 2080;
          *(void *)id v145 = p_str;
          *(_WORD *)&v145[8] = 2080;
          *(void *)&v145[10] = v24;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_INFO,  "%25s:%-5d Overrode default master device (%s) with device %s.",  cStr,  0x26u);
          a7 = v120;
          if (v142 < 0) {
            operator delete(__str);
          }
          uint64_t v17 = (uint64_t)a4;
        }
      }
    }
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef theDict = Mutable;
  __int16 v133 = 257;
  if (value && Mutable) {
    CFDictionarySetValue(Mutable, @"uid", value);
  }
  if (theDict) {
    CFDictionarySetValue(theDict, @"name", @"VAD Aggregate Device");
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v17 + 128LL))(cStr, v17);
  if (*(void *)cStr && theDict) {
    CFDictionarySetValue(theDict, @"master", *(const void **)cStr);
  }
  sub_19DFC((uint64_t)cStr);
  if ((a10 & 0xFF00000000LL) != 0) {
    sub_13408((uint64_t)&theDict, @"isolated use case", a10);
  }
  if (*a2 == 1986818404) {
    sub_134C4((uint64_t)&theDict, @"LDCM", 1);
  }
  if (a11) {
    sub_13408((uint64_t)&theDict, @"use legacy reference stream offset", 1);
  }
  strcpy(cStr, "dklcbolg");
  cStr[9] = 0;
  *(_WORD *)&cStr[10] = 0;
  uint64_t v116 = v17;
  else {
    unint64_t v26 = 0LL;
  }
  BOOL v123 = 0;
  CFTypeRef cf = 0LL;
  if (*(_BYTE *)(a9 + 56) && HIDWORD(a3)) {
    BOOL v123 = sub_287194((uint64_t)a4, a8);
  }
  if (*(_BYTE *)(a9 + 24) || v123)
  {
    BOOL v27 = *(unsigned __int8 *)(a9 + 24) == 0;
    if (*(_BYTE *)(a9 + 24)) {
      uint64_t v28 = a9;
    }
    else {
      uint64_t v28 = a9 + 32;
    }
    unint64_t v29 = sub_287328((unsigned __int8 *)v28);
    if (*(char *)(v28 + 23) < 0)
    {
      if (!*(void *)(a9 + 32LL * v27))
      {
        CFStringRef v31 = 0LL;
LABEL_53:
        CFTypeRef cf = v31;
        if (HIDWORD(v29))
        {
          __int16 v32 = (os_log_t *)sub_138E8(16);
          __int16 v33 = *v32;
          if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(&__str, *a2);
            int v34 = v142 >= 0 ? (CFStringRef *)&__str : __str;
            *(_DWORD *)cStr = 136315906;
            *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
            *(_WORD *)&cStr[12] = 1024;
            *(_DWORD *)&cStr[14] = 335;
            __int16 v144 = 2112;
            *(void *)id v145 = v31;
            *(_WORD *)&v145[8] = 2080;
            *(void *)&v145[10] = v34;
            _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Adding external clock %@ to aggregate device dictionary for %s. This implies that drift correcti on will be enabled on subdevices.",  cStr,  0x26u);
            if (v142 < 0) {
              operator delete(__str);
            }
          }

          if (HIBYTE(v133) && v31 && theDict) {
            CFDictionarySetValue(theDict, @"clock", v31);
          }
          LODWORD(sub_7D084(&v6, __str) = v29;
          strcpy(cStr, "dklcbolg");
          cStr[9] = 0;
          *(_WORD *)&cStr[10] = 0;
          unint64_t v35 = sub_36EF4((AudioObjectID *)&__str, (const AudioObjectPropertyAddress *)cStr, 0, 0LL);
          int v37 = v35;
          if ((_DWORD)v35 || !v36)
          {
            uint64_t v115 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v115 = &off_4865A0;
            v115[2] = v37;
          }

          unint64_t v26 = HIDWORD(v35);
        }

        goto LABEL_68;
      }

      CFIndex v30 = *(void *)(v28 + 8);
      uint64_t v28 = *(void *)(a9 + 32LL * v27);
    }

    else
    {
      CFIndex v30 = *(unsigned __int8 *)(v28 + 23);
    }

    CFStringRef v31 = CFStringCreateWithBytes(0LL, (const UInt8 *)v28, v30, 0x8000100u, 0);
    if (!v31)
    {
      uint64_t v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v114, "Could not construct");
    }

    goto LABEL_53;
  }

void sub_288E3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, os_signpost_id_t a29, uint64_t a30, char a31, uint64_t a32, const void *a33, __int16 a34, uint64_t a35, const void *a36, __int16 a37)
{
}

uint64_t sub_28909C()
{
  uint64_t result = dword_4938F8;
  if (!dword_4938F8)
  {
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    *(void *)&inAddress.mSelector = 0x676C6F6262696470LL;
    inQualifierData = @"com.apple.audio.V5";
    OSStatus PropertyData = AudioObjectGetPropertyData(1u, &inAddress, 8u, &inQualifierData, &ioDataSize, &dword_4938F8);
    if (PropertyData)
    {
      OSStatus v5 = PropertyData;
      BOOL v2 = (os_log_t *)sub_138E8(13);
      uint64_t v3 = *v2;
      if (*v2)
      {
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unint64_t v10 = "AggregateDeviceUtilities.cpp";
          __int16 v11 = 1024;
          int v12 = 60;
          _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: HAL error when attempting to retrieve plugin ID.",  buf,  0x12u);
        }
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_4865A0;
      exception[2] = v5;
    }

    return dword_4938F8;
  }

  return result;
}

unint64_t sub_2891DC(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(a1);
  if ((_DWORD)v1 || !v2)
  {
    int v4 = v1;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v4;
  }

  return HIDWORD(v1);
}

os_signpost_id_t *sub_28925C(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        std::string::size_type v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 88;
        __int16 v12 = 2080;
        uint64_t v13 = "kAggregateCreation";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_AggregateCreation",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_2893E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_2893F4(int a1)
{
  int outData = a1;
  if (a1)
  {
    *(void *)&inAddress.mSelector = 0x676C6F6264616767LL;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    AudioObjectID v1 = sub_28909C();
    uint64_t PropertyData = AudioObjectGetPropertyData(v1, &inAddress, 0, 0LL, &ioDataSize, &outData);
    if ((_DWORD)PropertyData)
    {
      uint64_t v3 = (os_log_t *)sub_138E8(16);
      unsigned __int8 v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, PropertyData);
          if (v7 >= 0) {
            os_signpost_id_t v5 = __p;
          }
          else {
            os_signpost_id_t v5 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v12 = "AggregateDeviceUtilities.cpp";
          __int16 v13 = 1024;
          int v14 = 431;
          __int16 v15 = 2080;
          uint64_t v16 = v5;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL returned error '%s' when attempting to destroy the aggregate device.",  buf,  0x1Cu);
          if (v7 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

AudioDeviceIOProcID sub_289538(void *a1, AudioObjectID a2, OSStatus (__cdecl *a3)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a4)
{
  int v8 = operator new(0x10uLL);
  AudioDeviceIOProcID result = sub_2895AC(a2, a3, a4);
  *(void *)int v8 = result;
  v8[2] = a2;
  *a1 = v8;
  return result;
}

void sub_289598(_Unwind_Exception *a1)
{
}

AudioDeviceIOProcID sub_2895AC(AudioObjectID a1, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  AudioDeviceIOProcID outIOProcID = 0LL;
  OSStatus v3 = AudioDeviceCreateIOProcID(a1, a2, a3, &outIOProcID);
  if (v3)
  {
    os_signpost_id_t v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v13 = "AggregateDeviceUtilities.cpp";
      __int16 v14 = 1024;
      int v15 = 493;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: error creating IOProc ID",  buf,  0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = v3;
  }

  AudioDeviceIOProcID result = outIOProcID;
  if (!outIOProcID)
  {
    int v8 = (os_log_t *)sub_138E8(13);
    std::string::size_type v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v13 = "AggregateDeviceUtilities.cpp";
        __int16 v14 = 1024;
        int v15 = 494;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [outIOProcID is NULL]: got a NULL IOProc ID",  buf,  0x12u);
      }
    }

    __int16 v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "got a NULL IOProc ID");
  }

  return result;
}

void sub_289750(_Unwind_Exception *a1)
{
}

uint64_t sub_28976C( uint64_t result, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  if (!(_DWORD)result && a2)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    OSStatus v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "AggregateDeviceUtilities.cpp";
      __int16 v7 = 1024;
      int v8 = 501;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to destroy a non-zero IO Proc ID using an invalid device ID",  (uint8_t *)&v5,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to destroy a non-zero IO Proc ID using an invalid device ID");
  }

  if ((_DWORD)result)
  {
    if (a2) {
      return AudioDeviceDestroyIOProcID(result, a2);
    }
  }

  return result;
}

void sub_289890(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2898AC(uint64_t a1)
{
  if (*(void *)a1) {
    sub_28976C( *(unsigned int *)(a1 + 8),  *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))a1);
  }
  return a1;
}

uint64_t sub_2898E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      unint64_t v4 = sub_5C2F8(v3);
      *((void *)&v6 + 1) = v5;
      *(void *)&__int128 v6 = v4;
      unint64_t v7 = sub_5C2F8(*(void *)(v1 + 16));
      uint64_t v9 = DWORD1(v6);
      if (((v6 >> 32) & 0xFF00000000LL) != 0 && v9 != 0) {
        break;
      }
      *((void *)&v11 + 1) = v8;
      *(void *)&__int128 v11 = v7;
      if (((v11 >> 32) & 0xFF00000000LL) != 0 && HIDWORD(v7) != 0LL) {
        break;
      }
    }

    uint64_t v1 = *(void *)(v1 + 8);
    if (v1 == a1) {
      return 0LL;
    }
  }

  return 1LL;
}

void sub_2899B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_32A7C8();
  sub_7D084(v7, "GetTimeSyncClockUIDForVAD");
  uint64_t v5 = *a2;
  v10[0] = v4;
  v10[1] = v5;
  if (SHIBYTE(v8) < 0)
  {
    sub_24054(&__p, v7[0], (unint64_t)v7[1]);
  }

  else
  {
    __int128 __p = *(_OWORD *)v7;
    uint64_t v12 = v8;
  }

  __int128 v6 = *(dispatch_queue_s **)(v4 + 168);
  __int16 v13 = v10;
  CFTypeRef cf = 0LL;
  *(void *)&blocuint64_t k = _NSConcreteStackBlock;
  *((void *)&block + 1) = 0x40000000LL;
  int v15 = sub_32C8A0;
  uint64_t v16 = &unk_4819D0;
  p_CFTypeRef cf = &cf;
  BOOL v18 = &v13;
  dispatch_sync(v6, &block);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  if (cf)
  {
    sub_151A20((uint64_t)&block, (const __CFString *)cf);
    *(_OWORD *)a1 = block;
    *(void *)(a1 + 16) = v15;
    *(_BYTE *)(a1 + memset(buf, 0, 24) = 1;
    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + memset(buf, 0, 24) = 0;
  }

void sub_289AE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_289B14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_BYTE *)a1)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3 != v2)
    {
      int v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(v3 + 24) + 16LL);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 88LL))(v5, 1LL))
        {
          if (v4 == *(_DWORD *)(a1 + 16)) {
            return v5;
          }
          ++v4;
        }

        uint64_t v3 = *(void *)(v3 + 8);
      }

      while (v3 != *(void *)(a1 + 8));
    }

    return 0LL;
  }

  uint64_t v6 = *(void *)(v2 + 8);
  if (v6 == v2) {
    return 0LL;
  }
  int v7 = 0;
  while (2)
  {
    sub_90418(v10, v6 + 16);
    for (unint64_t i = (void *)v10[1]; i != v10; unint64_t i = (void *)i[1])
    {
      uint64_t v5 = i[2];
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v5 + 88LL))(v5, 0LL))
      {
        if (v7 == *(_DWORD *)(a1 + 16))
        {
          sub_68314(v10);
          return v5;
        }

        ++v7;
      }
    }

    sub_68314(v10);
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 != *(void *)(a1 + 8)) {
      continue;
    }
    break;
  }

  return v5;
}

void sub_289C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_289C50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == a1) {
    goto LABEL_6;
  }
  while (((*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 24) + 16LL) + 352LL))(*(void *)(*(void *)(v2 + 24) + 16LL)) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a1) {
      goto LABEL_6;
    }
  }

  if (v2 == a1) {
LABEL_6:
  }
    uint64_t v2 = *(void *)(a1 + 8);
  return *(void *)(*(void *)(v2 + 24) + 16LL);
}

void *sub_289CBC()
{
  AudioDeviceIOProcID result = operator new(0x10uLL);
  *AudioDeviceIOProcID result = &off_479B98;
  return result;
}

void sub_289CE0(uint64_t a1, void *a2)
{
  *a2 = &off_479B98;
}

BOOL sub_289CF8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_289D18()
{
  AudioDeviceIOProcID result = operator new(0x10uLL);
  *AudioDeviceIOProcID result = &off_479B50;
  return result;
}

void sub_289D3C(uint64_t a1, void *a2)
{
  *a2 = &off_479B50;
}

BOOL sub_289D54(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_289D74()
{
  AudioDeviceIOProcID result = operator new(0x10uLL);
  *AudioDeviceIOProcID result = &off_479B08;
  return result;
}

void sub_289D98(uint64_t a1, void *a2)
{
  *a2 = &off_479B08;
}

uint64_t sub_289DB0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_289E10()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479AC0;
  return result;
}

void sub_289E34(uint64_t a1, void *a2)
{
  *a2 = &off_479AC0;
}

uint64_t sub_289E4C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_289E64()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479A78;
  return result;
}

void sub_289E88(uint64_t a1, void *a2)
{
  *a2 = &off_479A78;
}

uint64_t sub_289EA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_289EB8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479A30;
  return result;
}

void sub_289EDC(uint64_t a1, void *a2)
{
  *a2 = &off_479A30;
}

BOOL sub_289EF4(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_289F18()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_4799E8;
  return result;
}

void sub_289F3C(uint64_t a1, void *a2)
{
  *a2 = &off_4799E8;
}

uint64_t sub_289F54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

uint64_t sub_289F64(int a1, unsigned int a2, int *a3)
{
  if (a1 == 1 && a2)
  {
    uint64_t v17 = v8;
    uint64_t v18 = v7;
    uint64_t v19 = v6;
    uint64_t v20 = v5;
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    uint64_t v10 = a2;
    do
    {
      int v12 = *a3;
      a3 += 3;
      int v11 = v12;
      if (v12 == 1886221684)
      {
        *(void *)&inAddress.mSelector = 0x676C6F62706D7574LL;
        inAddress.mElement = 0;
        UInt32 ioDataSize = 4;
        int outData = 1;
        AudioObjectGetPropertyData(1u, &inAddress, 0, 0LL, &ioDataSize, &outData);
        byte_48C10D = outData != 0;
      }

      else if (v11 == 1937010031)
      {
        *(void *)&inAddress.mSelector = 0x676C6F6273746D6FLL;
        inAddress.mElement = 0;
        UInt32 ioDataSize = 4;
        int outData = 1;
        AudioObjectGetPropertyData(1u, &inAddress, 0, 0LL, &ioDataSize, &outData);
      }

      else if (v11 == 1970496882)
      {
        *(void *)&inAddress.mSelector = 0x676C6F6275736572LL;
        inAddress.mElement = 0;
        UInt32 ioDataSize = 4;
        int outData = 1;
        AudioObjectGetPropertyData(1u, &inAddress, 0, 0LL, &ioDataSize, &outData);
        byte_48C10C = outData != 0;
      }

      --v10;
    }

    while (v10);
  }

  return 0LL;
}

CFMutableStringRef sub_28A0D0()
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (!Mutable) {
    return 0LL;
  }
  uint64_t v1 = Mutable;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  *(_OWORD *)cStr = 0u;
  __int128 v11 = 0u;
  CFStringRef v8 = (CFStringRef)(&stru_20 + 32);
  sysctlbyname("hw.model", cStr, (size_t *)&v8, 0LL, 0LL);
  CFStringAppendCString(v1, cStr, 0);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, v1);
  CFRelease(v1);
  if (MutableCopy)
  {
    uint64_t v3 = @"AP";
    if (CFStringHasSuffix(MutableCopy, @"AP")
      || (uint64_t v3 = @"DEV", CFStringHasSuffix(MutableCopy, @"DEV"))
      || (uint64_t v3 = @"ap", CFStringHasSuffix(MutableCopy, @"ap"))
      || (uint64_t v3 = @"dev", CFStringHasSuffix(MutableCopy, @"dev")))
    {
      CFStringTrim(MutableCopy, v3);
    }

    *(void *)cStr = 0LL;
    cStr[8] = 1;
    uint64_t v4 = MGGetProductType();
    if (v4 == 952317141)
    {
      CFStringRef v8 = CFStringCreateWithCString(0LL, "u", 0x600u);
      char v9 = 1;
      sub_6A8C0((uint64_t)cStr, (uint64_t)&v8);
    }

    else
    {
      if (v4 != 2081274472 && v4 != 2468178735LL) {
        goto LABEL_16;
      }
      CFStringRef v8 = CFStringCreateWithCString(0LL, "m", 0x600u);
      char v9 = 1;
      sub_6A8C0((uint64_t)cStr, (uint64_t)&v8);
    }

    sub_19DFC((uint64_t)&v8);
LABEL_16:
    uint64_t v5 = *(const __CFString **)cStr;
    if (*(void *)cStr && CFStringHasSuffix(MutableCopy, *(CFStringRef *)cStr))
    {
      CFIndex Length = CFStringGetLength(MutableCopy);
      v14.length = CFStringGetLength(v5);
      v14.locatiouint64_t n = Length - v14.length;
      CFStringFindAndReplace(MutableCopy, v5, &stru_486F70, v14, 1uLL);
    }

    sub_19DFC((uint64_t)cStr);
  }

  return MutableCopy;
}

void sub_28A344( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_28A388(void *a1)
{
  uint64_t v1 = sub_239DF4(a1);
  operator delete(v1);
}

void sub_28A39C(uint64_t a1, void *a2)
{
  a2[1] = *a2;
  sub_654FC();
  unint64_t v24 = 0LL;
  (*(void (**)(uint64_t *, unint64_t *))(qword_4913D0 + 16))(&qword_4913D0, &v24);
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  int v23 = 0;
  if (v24)
  {
    uint64_t v3 = 0LL;
    for (unsigned int i = 0; i < v24; v3 = ++i)
    {
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t *))(qword_4913D0 + 32))(&qword_4913D0, v3, &v21))
      {
        int v6 = v21;
        int v5 = HIDWORD(v21);
        int v7 = v22;
        char v9 = (_DWORD *)a2[1];
        unint64_t v8 = a2[2];
        if ((unint64_t)v9 >= v8)
        {
          __int128 v11 = (_DWORD *)*a2;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a2) >> 2);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0x1555555555555555LL) {
            sub_7A87C();
          }
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 2);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x1555555555555555LL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v15 = (unint64_t)sub_87E70(v15);
            __int128 v11 = (_DWORD *)*a2;
            char v9 = (_DWORD *)a2[1];
          }

          else
          {
            uint64_t v16 = 0LL;
          }

          uint64_t v17 = (_DWORD *)(v15 + 12 * v12);
          *uint64_t v17 = v6;
          v17[1] = v5;
          void v17[2] = v7;
          uint64_t v18 = v17;
          if (v9 != v11)
          {
            do
            {
              uint64_t v19 = *(void *)(v9 - 3);
              v9 -= 3;
              int v20 = v9[2];
              *(void *)(v18 - 3) = v19;
              v18 -= 3;
              v18[2] = v20;
            }

            while (v9 != v11);
            __int128 v11 = (_DWORD *)*a2;
          }

          uint64_t v10 = v17 + 3;
          *a2 = v18;
          a2[1] = v17 + 3;
          a2[2] = v15 + 12 * v16;
          if (v11) {
            operator delete(v11);
          }
        }

        else
        {
          _DWORD *v9 = v21;
          v9[1] = v5;
          uint64_t v10 = v9 + 3;
          void v9[2] = v7;
        }

        a2[1] = v10;
      }
    }
  }

uint64_t sub_28A53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  char v9 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)a2 + 40LL))( a2,  a3,  a6,  &v9,  a4,  a5);
  if (a7) {
    *a7 = v9;
  }
  return result;
}

uint64_t sub_28A598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48LL))( a2,  a3,  a6,  a7,  a4,  a5);
}

uint64_t sub_28A5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56LL))( a2,  a3,  a6,  a7,  a4,  a5);
}

uint64_t sub_28A5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64LL))(a2, a3, a6);
}

uint64_t sub_28A600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72LL))(a2, a3, a4, a5);
}

uint64_t sub_28A61C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 4);
  sub_654FC();
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, void))(qword_4913D0 + 40))( &v19,  &qword_4913D0,  v5,  0LL);
  if (v19)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16LL))(v19);
    if (!(_DWORD)v6)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v17 = v19;
      uint64_t v18 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }

      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v7 + 32LL))(v7, &v17, a2);
      uint64_t v10 = v18;
      if (v18)
      {
        __int128 v11 = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }

  else
  {
    uint64_t v6 = 1063351615LL;
  }

  unint64_t v13 = v20;
  if (v20)
  {
    unint64_t v14 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return v6;
}

void sub_28A74C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_28A770(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned int *))(**(void **)(a1 + 48) + 48LL))( *(void *)(a1 + 48),  a2,  &v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 40LL))(*(void *)(a1 + 48), v4);
  }
  return result;
}

void *sub_28A7C4(void *result, unsigned int a2)
{
  uint64_t v2 = result[3];
  if (0xAAAAAAAAAAAAAAABLL * ((result[4] - v2) >> 3) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = a2;
    uint64_t result = (void *)AUPBUnregisterAU(result[2], *(void *)(v2 + 24LL * a2 + 16));
    uint64_t v6 = v3[3];
    uint64_t v5 = v3[4];
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) > v4)
    {
      uint64_t v7 = v6 + 24LL * v4;
      uint64_t v8 = v5 - (v7 + 24);
      if (v5 != v7 + 24) {
        uint64_t result = memmove((void *)v7, (const void *)(v7 + 24), v5 - (v7 + 24));
      }
      v3[4] = v7 + v8;
    }
  }

  return result;
}

_BYTE *sub_28A860(unsigned int a1, uint64_t a2)
{
  __int16 v33 = &unk_49D240;
  char v34 = 1;
  sub_190270((uint64_t)&unk_49D240);
  uint64_t v5 = (char *)operator new(0x128uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = a2;
  *(_OWORD *)(v5 + memset(buf, 0, 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + sub_67FE8(v1 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  sub_93AF4((uint64_t)(v5 + 8));
  unint64_t v6 = a1;
  unint64_t v7 = *((void *)&xmmword_49D360 + 1);
  if (*((void *)&xmmword_49D360 + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_49D360 + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = a1;
    }

    else
    {
      unint64_t v2 = (DWORD2(xmmword_49D360) - 1) & a1;
    }

    unint64_t v9 = *(void ***)(xmmword_49D360 + 8 * v2);
    if (v9)
    {
      for (unsigned int i = *v9; i; unsigned int i = *(void **)i)
      {
        unint64_t v11 = *((void *)i + 1);
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1) {
            goto LABEL_74;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((void *)&xmmword_49D360 + 1)) {
              v11 %= *((void *)&xmmword_49D360 + 1);
            }
          }

          else
          {
            v11 &= *((void *)&xmmword_49D360 + 1) - 1LL;
          }

          if (v11 != v2) {
            break;
          }
        }
      }
    }
  }

  unsigned int i = operator new(0x20uLL);
  *(void *)unsigned int i = 0LL;
  *((void *)i + 1) = a1;
  *((_DWORD *)i + 4) = a1;
  *((void *)i + 3) = 0LL;
  float v12 = (float)(unint64_t)(qword_49D378 + 1);
  if (v7 && (float)(*(float *)&dword_49D380 * (float)v7) >= v12)
  {
    unint64_t v6 = v2;
    goto LABEL_64;
  }

  BOOL v13 = 1LL;
  if (v7 >= 3) {
    BOOL v13 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v14 = v13 | (2 * v7);
  unint64_t v15 = vcvtps_u32_f32(v12 / *(float *)&dword_49D380);
  if (v14 <= v15) {
    int8x8_t prime = (int8x8_t)v15;
  }
  else {
    int8x8_t prime = (int8x8_t)v14;
  }
  if (*(void *)&prime == 1LL)
  {
    int8x8_t prime = (int8x8_t)2LL;
  }

  else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)&xmmword_49D360 + 1);
  }

  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v23 = vcvtps_u32_f32((float)(unint64_t)qword_49D378 / *(float *)&dword_49D380);
    if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      unint64_t v23 = std::__next_prime(v23);
    }

    else
    {
      uint64_t v25 = 1LL << -(char)__clz(v23 - 1);
      if (v23 >= 2) {
        unint64_t v23 = v25;
      }
    }

    if (*(void *)&prime <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)&xmmword_49D360 + 1);
      goto LABEL_60;
    }

    if (!*(void *)&prime)
    {
      __int16 v32 = (void *)xmmword_49D360;
      *(void *)&xmmword_49D360 = 0LL;
      if (v32) {
        operator delete(v32);
      }
      unint64_t v7 = 0LL;
      *((void *)&xmmword_49D360 + 1) = 0LL;
      goto LABEL_60;
    }
  }

  if (*(void *)&prime >> 61) {
    sub_7A8C4();
  }
  uint64_t v17 = operator new(8LL * *(void *)&prime);
  uint64_t v18 = (void *)xmmword_49D360;
  *(void *)&xmmword_49D360 = v17;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = 0LL;
  *((int8x8_t *)&xmmword_49D360 + 1) = prime;
  do
    *(void *)(xmmword_49D360 + 8 * v19++) = 0LL;
  while (*(void *)&prime != v19);
  int v20 = (void **)qword_49D370;
  if (qword_49D370)
  {
    unint64_t v21 = *(void *)(qword_49D370 + 8);
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(prime);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&prime) {
        v21 %= *(void *)&prime;
      }
    }

    else
    {
      v21 &= *(void *)&prime - 1LL;
    }

    *(void *)(xmmword_49D360 + 8 * v21) = &qword_49D370;
    for (uint64_t j = *v20; j; v21 = v27)
    {
      unint64_t v27 = j[1];
      if (v22.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&prime) {
          v27 %= *(void *)&prime;
        }
      }

      else
      {
        v27 &= *(void *)&prime - 1LL;
      }

      if (v27 != v21)
      {
        if (!*(void *)(xmmword_49D360 + 8 * v27))
        {
          *(void *)(xmmword_49D360 + 8 * v27) = v20;
          goto LABEL_56;
        }

        std::__shared_weak_count *v20 = (void *)*j;
        *uint64_t j = **(void **)(xmmword_49D360 + 8 * v27);
        **(void **)(xmmword_49D360 + 8 * v27) = j;
        uint64_t j = v20;
      }

      unint64_t v27 = v21;
LABEL_56:
      int v20 = (void **)j;
      uint64_t j = (void *)*j;
    }
  }

  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }

  else
  {
    unint64_t v6 = ((_DWORD)v7 - 1) & v6;
  }

void sub_28ACFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_28AD44(void **a1, void *a2)
{
  unint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_196138((uint64_t)v2 + 8);
    operator delete(v2);
  }

void sub_28AD80(char a1, void **__p)
{
  if (a1) {
    sub_28AD44(__p + 3, 0LL);
  }
  if (__p) {
    operator delete(__p);
  }
}

_BYTE *sub_28ADC4(uint64_t a1)
{
  unint64_t v14 = &unk_49D240;
  char v15 = 1;
  sub_190270((uint64_t)&unk_49D240);
  unint64_t v2 = sub_93068(*(_DWORD *)(a1 + 8));
  if (v2)
  {
    uint64_t v3 = v2;
    unint64_t v4 = *((void *)&xmmword_49D360 + 1);
    unint64_t v5 = v2[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_49D360 + 8));
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *((void *)&xmmword_49D360 + 1)) {
        v5 %= *((void *)&xmmword_49D360 + 1);
      }
    }

    else
    {
      v5 &= *((void *)&xmmword_49D360 + 1) - 1LL;
    }

    unint64_t v7 = *(uint64_t **)(xmmword_49D360 + 8 * v5);
    do
    {
      uint8x8_t v8 = v7;
      unint64_t v7 = (uint64_t *)*v7;
    }

    while (v7 != v2);
    if (v8 == &qword_49D370) {
      goto LABEL_19;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *((void *)&xmmword_49D360 + 1)) {
        v9 %= *((void *)&xmmword_49D360 + 1);
      }
    }

    else
    {
      v9 &= *((void *)&xmmword_49D360 + 1) - 1LL;
    }

    if (v9 != v5)
    {
LABEL_19:
      if (!*v2) {
        goto LABEL_20;
      }
      unint64_t v10 = *(void *)(*v2 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *((void *)&xmmword_49D360 + 1)) {
          v10 %= *((void *)&xmmword_49D360 + 1);
        }
      }

      else
      {
        v10 &= *((void *)&xmmword_49D360 + 1) - 1LL;
      }

      if (v10 != v5) {
LABEL_20:
      }
        *(void *)(xmmword_49D360 + 8 * v5) = 0LL;
    }

    uint64_t v11 = *v2;
    if (*v2)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= v4) {
          v12 %= v4;
        }
      }

      else
      {
        v12 &= v4 - 1;
      }

      if (v12 != v5)
      {
        *(void *)(xmmword_49D360 + 8 * v12) = v8;
        uint64_t v11 = *v2;
      }
    }

    uint64_t *v8 = v11;
    uint64_t *v2 = 0LL;
    --qword_49D378;
    sub_28AD44((void **)v2 + 3, 0LL);
    operator delete(v3);
  }

  return sub_19032C(&v14);
}

_BYTE *sub_28AF60(uint64_t *a1)
{
  unint64_t v5 = &unk_49D240;
  char v6 = 1;
  sub_190270((uint64_t)&unk_49D240);
  unint64_t v2 = sub_93068(*(_DWORD *)(*a1 + 8));
  if (v2)
  {
    sub_190270(v2[3] + 8);
    uint64_t v3 = *a1;
    *a1 = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return sub_19032C(&v5);
}

void sub_28AFD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_28AFEC(unsigned int a1)
{
  unint64_t v9 = &unk_49D240;
  char v10 = 1;
  sub_92F80((uint64_t)&unk_49D240);
  if (!*((void *)&xmmword_49D360 + 1)) {
    goto LABEL_17;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_49D360 + 8));
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = a1;
  }

  else
  {
    unint64_t v3 = (DWORD2(xmmword_49D360) - 1) & a1;
  }

  unint64_t v4 = *(uint64_t ***)(xmmword_49D360 + 8 * v3);
  if (!v4 || (unint64_t v5 = *v4) == 0LL)
  {
LABEL_17:
    uint64_t v8 = 0LL;
    goto LABEL_18;
  }

  while (1)
  {
    unint64_t v6 = v5[1];
    if (v6 == a1) {
      break;
    }
    if (v2.u32[0] > 1uLL)
    {
      if (v6 >= *((void *)&xmmword_49D360 + 1)) {
        v6 %= *((void *)&xmmword_49D360 + 1);
      }
    }

    else
    {
      v6 &= *((void *)&xmmword_49D360 + 1) - 1LL;
    }

    if (v6 != v3) {
      goto LABEL_17;
    }
LABEL_16:
    unint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      goto LABEL_17;
    }
  }

  if (*((_DWORD *)v5 + 4) != a1) {
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)v5[3];
LABEL_18:
  sub_93128((uint64_t)&v9);
  return v8;
}

void sub_28B0F8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_28E234(a1);
  operator delete(v1);
}

uint64_t sub_28B10C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t result = 1LL;
  if ((int)a2->mSelector > 1953790308)
  {
    if (mSelector == 1953790309) {
      return result;
    }
    if (mSelector != 1986225268 && mSelector != 1986225266)
    {
LABEL_5:
      sub_1BB60((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }

  else if (mSelector != 1668576114)
  {
    if (mSelector == 1853059619) {
      return result;
    }
    if (mSelector != 1953002354) {
      goto LABEL_5;
    }
  }

  return sub_162EB4();
}

BOOL sub_28B1CC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  BOOL result = 0LL;
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1953790308)
  {
    if (mSelector == 1986225268 || mSelector == 1986225266) {
      return result;
    }
    if (mSelector != 1953790309) {
      return sub_36854C(a1, a2);
    }
    return 1LL;
  }

  if (mSelector == 1668576114) {
    return 1LL;
  }
  if (mSelector != 1853059619 && mSelector != 1953002354) {
    return sub_36854C(a1, a2);
  }
  return result;
}

uint64_t sub_28B254(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    unint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      BOOL v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint8x8_t v24 = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 249;
      __int16 v27 = 2080;
      uint64_t v28 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    char v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      if (v22 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint8x8_t v24 = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 250;
      __int16 v27 = 2080;
      uint64_t v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      __int16 v32 = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_4865A0;
    v18[2] = 561211770;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1953790308)
  {
    uint64_t result = 4LL;
    if (mSelector == 1953790309 || mSelector == 1986225268) {
      return result;
    }
    int v9 = 1986225266;
  }

  else
  {
    if (mSelector == 1668576114) {
      return 8LL;
    }
    if (mSelector == 1853059619) {
      return 16LL;
    }
    int v9 = 1953002354;
  }

  if (mSelector == v9) {
    return 8LL;
  }
  return sub_21524(a1, a2, a3, a4);
}

void sub_28B594( uint64_t *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v40 = (os_log_t *)sub_138E8(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v92);
      uint64_t v42 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 285;
      __int16 v99 = 2080;
      uint64_t v100 = (const char *)v42;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    char v44 = (os_log_t *)sub_138E8(13);
    uint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v92);
      std::string v46 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 286;
      __int16 v99 = 2080;
      uint64_t v100 = (const char *)v46;
      __int16 v101 = 1024;
      LODWORD(v102[0]) = a3;
      WORD2(v102[0]) = 2048;
      *(void *)((char *)v102 + 6) = a4;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v47 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v47 = &off_4865A0;
    v47[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v48 = (os_log_t *)sub_138E8(13);
    BOOL v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v92);
      unsigned __int8 v50 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 287;
      __int16 v99 = 2080;
      uint64_t v100 = "outData";
      __int16 v101 = 2080;
      v102[0] = v50;
      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }

    int v51 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v51 = &off_4865A0;
    void v51[2] = 561211770;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1953790308)
  {
    if (mSelector == 1853059619)
    {
      UInt32 v28 = *a5;
      if (v28 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4))
      {
        CFDictionaryRef v84 = (os_log_t *)sub_138E8(13);
        unsigned __int8 v85 = *v84;
        if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
        {
          uint64_t v92 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_613AC((uint64_t)__p, (unsigned int *)&v92);
          int v86 = v95;
          unsigned __int8 v87 = (void **)__p[0];
          UInt32 v88 = *a5;
          int v89 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4);
          __int128 v90 = __p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
          if (v86 < 0) {
            __int128 v90 = v87;
          }
          __int16 v97 = 1024;
          int v98 = 312;
          __int16 v99 = 2080;
          uint64_t v100 = (const char *)v90;
          __int16 v101 = 1024;
          LODWORD(v102[0]) = v88;
          WORD2(v102[0]) = 1024;
          *(_DWORD *)((char *)v102 + 6) = v89;
          _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v95 < 0) {
            operator delete(__p[0]);
          }
        }

        __int128 v91 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int128 v91 = &off_4865A0;
        v91[2] = 561211770;
      }

      uint64_t v29 = a1[80];
      UInt32 v30 = (std::mutex *)(v29 + 8);
      std::mutex::lock((std::mutex *)(v29 + 8));
      unint64_t v31 = (unint64_t)*(unsigned __int8 *)(v29 + 76) << 32;
      std::mutex::unlock(v30);
      if (v31)
      {
        double v32 = sub_162F84(a1[80]);
        *(double *)a6 = v32;
        *(double *)(a6 + 8) = v32;
        return;
      }

      goto LABEL_26;
    }

    if (mSelector != 1953002354)
    {
LABEL_26:
      sub_232A4((uint64_t)a1, a2, a3, a4, a5, (float *)a6);
      return;
    }

    UInt32 v24 = *a5;
    if (v24 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4))
    {
      unint64_t v76 = (os_log_t *)sub_138E8(13);
      uint64_t v77 = *v76;
      if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v92);
        int v78 = v95;
        uint64_t v79 = (void **)__p[0];
        UInt32 v80 = *a5;
        int v81 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4);
        uint64_t v82 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        if (v78 < 0) {
          uint64_t v82 = v79;
        }
        __int16 v97 = 1024;
        int v98 = 306;
        __int16 v99 = 2080;
        uint64_t v100 = (const char *)v82;
        __int16 v101 = 1024;
        LODWORD(v102[0]) = v80;
        WORD2(v102[0]) = 1024;
        *(_DWORD *)((char *)v102 + 6) = v81;
        _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v83 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v83 = &off_4865A0;
      v83[2] = 561211770;
    }

    double v25 = sub_163084(a1[80]);
LABEL_22:
    *(double *)a6 = v25;
    return;
  }

  if (mSelector == 1953790309)
  {
    UInt32 v26 = *a5;
    if (v26 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4))
    {
      std::string v52 = (os_log_t *)sub_138E8(13);
      unint64_t v53 = *v52;
      if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v92);
        int v54 = v95;
        __int16 v55 = (void **)__p[0];
        UInt32 v56 = *a5;
        int v57 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4);
        unint64_t v58 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        if (v54 < 0) {
          unint64_t v58 = v55;
        }
        __int16 v97 = 1024;
        int v98 = 326;
        __int16 v99 = 2080;
        uint64_t v100 = (const char *)v58;
        __int16 v101 = 1024;
        LODWORD(v102[0]) = v56;
        WORD2(v102[0]) = 1024;
        *(_DWORD *)((char *)v102 + 6) = v57;
        _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }

      double v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v59 = &off_4865A0;
      v59[2] = 561211770;
    }

    *(_DWORD *)a6 = sub_163FD0(*(void *)a1[80]);
    return;
  }

  if (mSelector == 1986225266)
  {
    UInt32 v27 = *a5;
    if (v27 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4))
    {
      double v60 = (os_log_t *)sub_138E8(13);
      std::string::size_type v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v92);
        int v62 = v95;
        uint64_t v63 = (void **)__p[0];
        UInt32 v64 = *a5;
        int v65 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4);
        unsigned int v66 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        if (v62 < 0) {
          unsigned int v66 = v63;
        }
        __int16 v97 = 1024;
        int v98 = 301;
        __int16 v99 = 2080;
        uint64_t v100 = (const char *)v66;
        __int16 v101 = 1024;
        LODWORD(v102[0]) = v64;
        WORD2(v102[0]) = 1024;
        *(_DWORD *)((char *)v102 + 6) = v65;
        _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v67 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v67 = &off_4865A0;
      void v67[2] = 561211770;
    }

    double v25 = sub_162F84(a1[80]);
    goto LABEL_22;
  }

  if (mSelector != 1986225268) {
    goto LABEL_26;
  }
  UInt32 v13 = *a5;
  if (v13 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4))
  {
    __int128 v68 = (os_log_t *)sub_138E8(13);
    __int16 v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v92);
      int v70 = v95;
      uint64_t v71 = (void **)__p[0];
      UInt32 v72 = *a5;
      int v73 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))( a1,  a2,  a3,  a4);
      int v74 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      if (v70 < 0) {
        int v74 = v71;
      }
      __int16 v97 = 1024;
      int v98 = 293;
      __int16 v99 = 2080;
      uint64_t v100 = (const char *)v74;
      __int16 v101 = 1024;
      LODWORD(v102[0]) = v72;
      WORD2(v102[0]) = 1024;
      *(_DWORD *)((char *)v102 + 6) = v73;
      _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v75 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v75 = &off_4865A0;
    v75[2] = 561211770;
  }

  uint64_t v14 = a1[80];
  char v15 = (std::mutex *)(v14 + 8);
  std::mutex::lock((std::mutex *)(v14 + 8));
  uint64_t v16 = *(void *)(v14 + 72);
  std::mutex::unlock(v15);
  if ((v16 & 0xFF00000000LL) == 0)
  {
    uint64_t v17 = sub_138E8(1);
    uint64_t v18 = sub_138E8(12);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *(int *)&buf[4 * v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_29;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_29:
    uint64_t v33 = sub_138E8(39);
    char v34 = 0;
    uint64_t v35 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v36 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v37 = *(int *)&buf[4 * v35];
      char v38 = v34;
      if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
        break;
      }
      char v34 = 1;
      uint64_t v35 = 1LL;
      if ((v38 & 1) != 0) {
        goto LABEL_35;
      }
    }

    if ((v36 & v37) == 0) {
      uint64_t v17 = v33;
    }
LABEL_35:
    uint64_t v39 = *(os_log_s **)v17;
    if (v39)
    {
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        __int16 v97 = 1024;
        int v98 = 295;
        _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d No Vocoder Format ID", buf, 0x12u);
      }
    }

    LODWORD(v16) = 0;
  }

  *(_DWORD *)a6 = v16;
}

void sub_28C20C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_28C240( uint64_t **a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if ((((uint64_t (*)(uint64_t **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v35 = (os_log_t *)sub_138E8(13);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v51);
      uint64_t v37 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 339;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v37;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v55 < 0) {
        operator delete(__p);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v39 = (os_log_t *)sub_138E8(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v51);
      uint64_t v41 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 340;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v41;
      __int16 v57 = 1024;
      LODWORD(v58[0]) = a3;
      WORD2(v58[0]) = 2048;
      *(void *)((char *)v58 + 6) = a4;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v55 < 0) {
        operator delete(__p);
      }
    }

    uint64_t v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v42 = &off_4865A0;
    v42[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v43 = (os_log_t *)sub_138E8(13);
    char v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v51);
      uint64_t v45 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 341;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = "inData";
      __int16 v57 = 2080;
      v58[0] = v45;
      _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v55 < 0) {
        operator delete(__p);
      }
    }

    std::string v46 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v46 = &off_4865A0;
    v46[2] = 561211770;
  }

  if ((((uint64_t (*)(uint64_t **, const AudioObjectPropertyAddress *))(*a1)[3])(a1, a2) & 1) == 0)
  {
    uint64_t v47 = (os_log_t *)sub_138E8(13);
    uint64_t v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v51);
      BOOL v49 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 342;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v49;
      _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v55 < 0) {
        operator delete(__p);
      }
    }

    unsigned __int8 v50 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned __int8 v50 = &off_4865A0;
    v50[2] = 1852797029;
  }

  if (a2->mSelector == 1668576114)
  {
    if (a5 != 8)
    {
      uint64_t v18 = (os_log_t *)sub_138E8(13);
      char v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 360;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid data passed with kVirtualAudioPlugInPropertyConfirmVocoderSampleRate property",  buf,  0x12u);
        }
      }
    }

    double v20 = *(double *)a6;
    uint64_t v21 = sub_138E8(17);
    uint64_t v22 = sub_138E8(12);
    char v23 = 0;
    uint64_t v24 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v25 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v26 = *(int *)&buf[4 * v24];
      char v27 = v23;
      if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
        break;
      }
      char v23 = 1;
      uint64_t v24 = 1LL;
      if ((v27 & 1) != 0) {
        goto LABEL_30;
      }
    }

    if ((v25 & v26) == 0) {
      uint64_t v21 = v22;
    }
LABEL_30:
    uint64_t v28 = sub_138E8(39);
    char v29 = 0;
    uint64_t v30 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v31 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v32 = *(int *)&buf[4 * v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1LL;
      if ((v33 & 1) != 0)
      {
        if ((v31 & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_38;
      }
    }

    if ((v31 & v32) == 0) {
      uint64_t v21 = v28;
    }
    if ((*(void *)(v21 + 8) & 1) != 0)
    {
LABEL_38:
      char v34 = *(os_log_s **)v21;
      if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 363;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(double *)&buf[20] = v20;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Confirming Telephony Hardware Sample Rate %f",  buf,  0x1Cu);
      }
    }

BOOL sub_28CA70( uint64_t a1, AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  uint64_t v8 = qword_4940C0;
  uint64_t v9 = qword_4940C8;
  if (qword_4940C0 == qword_4940C8)
  {
    BOOL v10 = 0;
  }

  else
  {
    do
    {
      BOOL v10 = sub_67420((void *)(a1 + 496), v8);
      if (v10) {
        break;
      }
      v8 += 12LL;
    }

    while (v8 != v9);
  }

  uint64_t v12 = *(void *)&a2->mSelector;
  uint64_t v30 = (uint64_t (***)())a4;
  *(void *)AudioObjectPropertyAddress buf = v12;
  *(_DWORD *)&_DWORD buf[8] = a2->mElement;
  char v27 = *(uint64_t (***)())&a2->mSelector;
  LODWORD(v28) = a2->mElement;
  char v29 = a3;
  sub_1885D4((void *)(a1 + 496), (unsigned int *)buf, (unsigned int *)&v27);
  if (v10) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(a1 + 640);
  char v27 = &off_479E38;
  uint64_t v28 = a1;
  uint64_t v30 = &v27;
  uint64_t v14 = sub_138E8(12);
  uint64_t v15 = sub_138E8(39);
  char v16 = 0;
  uint64_t v17 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = *(int *)&buf[4 * v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1LL;
    if ((v20 & 1) != 0)
    {
      if ((v18 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }

  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
  if ((*(void *)(v14 + 8) & 1) != 0)
  {
LABEL_17:
    uint64_t v21 = *(os_log_s **)v14;
    if (v21)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
        __int16 v32 = 1024;
        int v33 = 693;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Registering Telephony callback", buf, 0x12u);
      }
    }
  }

void sub_28CD44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_28CD94( uint64_t a1, AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (!sub_28DE20(a2))
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

  *(void *)AudioObjectPropertyAddress buf = *(void *)&a2->mSelector;
  *(_DWORD *)&_DWORD buf[8] = a2->mElement;
  BOOL result = sub_67420((void *)(a1 + 496), (uint64_t)buf);
  if (!result) {
    return result;
  }
  uint64_t v22 = *(void *)&a2->mSelector;
  AudioObjectPropertyElement mElement = a2->mElement;
  *(void *)AudioObjectPropertyAddress buf = *(void *)&a2->mSelector;
  *(_DWORD *)&_DWORD buf[8] = a2->mElement;
  *(void *)&void v26[2] = a3;
  char v27 = a4;
  sub_18803C((uint64_t **)(a1 + 496), (unsigned int *)&v22, (unsigned int *)buf);
  uint64_t v9 = qword_4940C0;
  uint64_t v10 = qword_4940C8;
  while (v9 != v10)
  {
    if (sub_67420((void *)(a1 + 496), v9)) {
      return 1LL;
    }
    v9 += 12LL;
  }

  uint64_t v11 = *(void *)(a1 + 640);
  uint64_t v12 = sub_138E8(12);
  uint64_t v13 = sub_138E8(39);
  char v14 = 0;
  uint64_t v15 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1LL;
    if ((v18 & 1) != 0)
    {
      if ((v16 & 1) == 0) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
  }

  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
  if ((*(void *)(v12 + 8) & 1) != 0)
  {
LABEL_16:
    uint64_t v19 = *(os_log_s **)v12;
    if (v19)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
        __int16 v25 = 1024;
        *(_DWORD *)uint64_t v26 = 699;
        _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unregistering Telephony callback", buf, 0x12u);
      }
    }
  }

uint64_t sub_28CFD0(uint64_t **a1, double a2)
{
  if (((double (*)(uint64_t **))(*a1)[13])(a1) == a2)
  {
    uint64_t v4 = sub_138E8(12);
    uint64_t v5 = sub_138E8(39);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)std::string v46 = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&v46[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    char v20 = *(os_log_s **)v4;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string v46 = 136315650;
      *(void *)&v46[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v47 = 1024;
      int v48 = 90;
      __int16 v49 = 2048;
      double v50 = a2;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_INFO,  "%25s:%-5d Current sample rate %f is same as target rate to set to, nothing to do here!",  v46,  0x1Cu);
    }

    return 0LL;
  }

  uint64_t v11 = sub_369618((uint64_t)a1, a2);
  if (!(_DWORD)v11)
  {
    uint64_t v21 = a1[80];
    uint64_t v22 = (std::mutex *)(v21 + 1);
    std::mutex::lock((std::mutex *)(v21 + 1));
    unint64_t v23 = (unint64_t)*((unsigned __int8 *)v21 + 76) << 32;
    std::mutex::unlock(v22);
    if (v23)
    {
      uint64_t v24 = sub_138E8(17);
      uint64_t v25 = sub_138E8(12);
      char v26 = 0;
      uint64_t v27 = 0LL;
      *(void *)std::string v46 = 0x100000002LL;
      uint64_t v28 = *(void *)(v24 + 8);
      while (1)
      {
        uint64_t v29 = *(int *)&v46[4 * v27];
        char v30 = v26;
        if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
          break;
        }
        char v26 = 1;
        uint64_t v27 = 1LL;
        if ((v30 & 1) != 0) {
          goto LABEL_34;
        }
      }

      if ((v28 & v29) == 0) {
        uint64_t v24 = v25;
      }
LABEL_34:
      uint64_t v38 = sub_138E8(39);
      char v39 = 0;
      uint64_t v40 = 0LL;
      *(void *)std::string v46 = 0x100000002LL;
      uint64_t v41 = *(void *)(v24 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&v46[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1LL;
        if ((v43 & 1) != 0)
        {
          if ((v41 & 1) == 0) {
            goto LABEL_45;
          }
          goto LABEL_42;
        }
      }

      if ((v41 & v42) == 0) {
        uint64_t v24 = v38;
      }
      if ((*(void *)(v24 + 8) & 1) != 0)
      {
LABEL_42:
        char v44 = *(os_log_s **)v24;
        if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string v46 = 136315650;
          *(void *)&v46[4] = "Device_Baseband_Voice_Aspen.cpp";
          __int16 v47 = 1024;
          int v48 = 102;
          __int16 v49 = 2048;
          double v50 = a2;
          _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully set baseband hardware sample rate to %f",  v46,  0x1Cu);
        }
      }

uint64_t sub_28D3E8(os_unfair_lock_s *a1)
{
  uint64_t v43 = 0x707472756D646473LL;
  int v44 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v43))
  {
    LODWORD(v35) = 1634742884;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, CFStringRef *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                                  + 48LL))( a1,  &v43,  0LL,  0LL,  4LL,  &v35);
  }

  uint64_t v41 = 0x676C6F6263737263LL;
  int v42 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v41))
  {
    LODWORD(v35) = 1650602615;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, CFStringRef *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                                  + 48LL))( a1,  &v41,  0LL,  0LL,  4LL,  &v35);
  }

  CFStringRef v2 = CFStringCreateWithCString(0LL, "Baseband Downlink", 0x600u);
  *(void *)AudioObjectPropertyAddress buf = v2;
  _DWORD buf[8] = 1;
  CFStringRef v35 = v2;
  char v36 = 1;
  if (v2) {
    CFRetain(v2);
  }
  uint64_t v37 = 0LL;
  char v38 = 1;
  char v39 = 0LL;
  char v40 = 1;
  sub_19DFC((uint64_t)buf);
  unint64_t v3 = (os_log_t *)sub_138E8(17);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = v39;
    char v6 = v37;
    CFStringRef v7 = v35;
    (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v46,  a1);
    if (v6) {
      CFStringRef v8 = v6;
    }
    else {
      CFStringRef v8 = v7;
    }
    if (v5) {
      CFStringRef v8 = v5;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 137;
    *(_WORD *)&_BYTE buf[18] = 2112;
    *(void *)&buf[20] = v8;
    __int16 v50 = 2112;
    *(void *)uint64_t v51 = *(void *)v46;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a baseband downlink port with name %@ and UID %@",  buf,  0x26u);
    sub_19DFC((uint64_t)v46);
  }

  memset(buf, 0, 24);
  (*(void (**)(__int128 *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v33,  a1);
  memset(v46, 0, 24);
  sub_28DC5C(&v29, &qword_494060, (uint64_t)a1, (uint64_t)buf, (uint64_t)&v35, (uint64_t)&v33, (char **)v46);
  __int128 v34 = v29;
  __int128 v29 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v34);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v34 + 1);
  if (*((void *)&v34 + 1))
  {
    char v10 = (unint64_t *)(*((void *)&v34 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  v31[0] = (void **)v46;
  sub_7A668(v31);
  sub_19DFC((uint64_t)&v33);
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  sub_28DD6C((uint64_t *)a1, 0, qword_494060);
  CFStringRef v15 = CFStringCreateWithCString(0LL, "Baseband Uplink", 0x600u);
  *(void *)std::string v46 = v15;
  v46[8] = 1;
  *(void *)AudioObjectPropertyAddress buf = v15;
  _DWORD buf[8] = 1;
  if (v15) {
    CFRetain(v15);
  }
  *(void *)&buf[16] = 0LL;
  uint8_t buf[24] = 1;
  *(void *)&void v51[2] = 0LL;
  char v52 = 1;
  sub_19DFC((uint64_t)v46);
  uint64_t v16 = (os_log_t *)sub_138E8(17);
  uint64_t v17 = *v16;
  if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)&v51[2];
    uint64_t v19 = *(void *)&buf[16];
    uint64_t v20 = *(void *)buf;
    (*(void (**)(__int128 *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v29,  a1);
    if (v19) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v20;
    }
    if (v18) {
      uint64_t v21 = v18;
    }
    *(_DWORD *)std::string v46 = 136315906;
    *(void *)&v46[4] = "Device_Baseband_Voice_Aspen.cpp";
    *(_WORD *)&_BYTE v46[12] = 1024;
    *(_DWORD *)&v46[14] = 144;
    *(_WORD *)&v46[18] = 2112;
    *(void *)&v46[20] = v21;
    __int16 v47 = 2112;
    uint64_t v48 = v29;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a baseband uplink port with name %@ and UID %@",  v46,  0x26u);
    sub_19DFC((uint64_t)&v29);
  }

  memset(v46, 0, 24);
  (*(void (**)(void ***__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v31,  a1);
  __int128 v29 = 0uLL;
  uint64_t v30 = 0LL;
  sub_28DC5C(&v33, &qword_494090, (uint64_t)a1, (uint64_t)v46, (uint64_t)buf, (uint64_t)v31, (char **)&v29);
  __int128 v32 = v33;
  __int128 v33 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v32);
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    unint64_t v23 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (*((void *)&v33 + 1))
  {
    char v26 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v45 = (void **)&v29;
  sub_7A668(&v45);
  sub_19DFC((uint64_t)v31);
  if (*(void *)v46) {
    operator delete(*(void **)v46);
  }
  sub_28DD6C((uint64_t *)a1, 1u, qword_494090);
  sub_19DFC((uint64_t)&v51[2]);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  sub_19DFC((uint64_t)&v39);
  sub_19DFC((uint64_t)&v37);
  sub_19DFC((uint64_t)&v35);
  return 1LL;
}

void sub_28D968( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_28DA3C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886743662 && a2 != 1885629550)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(17);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      char v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v14 = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 167;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    CFStringRef v7 = (os_log_t *)sub_138E8(13);
    CFStringRef v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v14 = "Device_Baseband_Voice_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 168;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
      }
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_28DBF4(_Unwind_Exception *a1)
{
}

double sub_28DC10(uint64_t a1, double a2)
{
  else {
    return sub_1CF660(a1, a2);
  }
}

void sub_28DC5C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  uint64_t v14 = operator new(0x228uLL);
  v14[1] = 0LL;
  unint64_t v14[2] = 0LL;
  *uint64_t v14 = off_485B80;
  sub_7D084(__p, "");
  sub_F9638((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (__int128 *)__p);
  v14[3] = &off_46FD40;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;
  sub_AFDAC((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_28DD3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t *sub_28DD6C(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  char v6 = operator new(0x50uLL);
  sub_EC558((uint64_t)v6);
  sub_1D5AE0(a1, (uint64_t)v6);
  CFStringRef v7 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v7, 0);
  sub_1D5AE0(a1, (uint64_t)v7);
  sub_1D580C((uint64_t)a1, a2, a3, (uint64_t)v7);
  return sub_1D55D4(a1, a2, a3, (uint64_t)v6);
}

void sub_28DE00(_Unwind_Exception *a1)
{
}

uint64_t sub_28DE20(_DWORD *a1)
{
  uint64_t v1 = (_DWORD *)qword_4940C0;
  if (qword_4940C0 == qword_4940C8) {
    return 0LL;
  }
  while (a1[1] != v1[1] || *a1 != *v1 || a1[2] != v1[2])
  {
    v1 += 3;
    if (v1 == (_DWORD *)qword_4940C8) {
      return 0LL;
    }
  }

  return 1LL;
}

void *sub_28DE84(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_479E38;
  result[1] = v3;
  return result;
}

uint64_t sub_28DEB8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_479E38;
  a2[1] = v2;
  return result;
}

void *sub_28DED4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = (int)*a2;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = sub_138E8(17);
  uint64_t v6 = sub_138E8(12);
  char v7 = 0;
  uint64_t v8 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = (int)buf[v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1LL;
    if ((v11 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  uint64_t v12 = sub_138E8(39);
  char v13 = 0;
  uint64_t v14 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v15 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v16 = (int)buf[v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1LL;
    if ((v17 & 1) != 0)
    {
      if ((v15 & 1) == 0) {
        goto LABEL_28;
      }
      goto LABEL_15;
    }
  }

  if ((v15 & v16) == 0) {
    uint64_t v5 = v12;
  }
  if ((*(void *)(v5 + 8) & 1) != 0)
  {
LABEL_15:
    uint64_t v18 = *(os_log_s **)v5;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      if (v2 >= 3)
      {
        uint64_t v20 = (os_log_t *)sub_138E8(13);
        uint64_t v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "CoreTelephonyInterface.h";
          __int16 v30 = 1024;
          int v31 = 98;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid TelephonyValueChangeType",  (uint8_t *)buf,  0x12u);
        }

        uint64_t v19 = "Invalid TelephonyValueChangeType";
      }

      else
      {
        uint64_t v19 = (&off_4865B8)[v2];
      }

      sub_7D084(__p, v19);
      if (v28 >= 0) {
        uint64_t v22 = __p;
      }
      else {
        uint64_t v22 = (void **)__p[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 473;
      __int16 v32 = 2080;
      __int128 v33 = v22;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Handling Telephony callback for %s",  (uint8_t *)buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_28E218(_Unwind_Exception *a1)
{
}

uint64_t sub_28E234(uint64_t a1)
{
  *(void *)a1 = off_479C50;
  sub_67FE8(a1 + 584);
  *(void *)(a1 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 520));
  return sub_36F1E0(a1);
}

void *sub_28E288()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_47A030;
  return result;
}

void sub_28E2AC(uint64_t a1, void *a2)
{
  *a2 = &off_47A030;
}

BOOL sub_28E2C4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_28E2E4()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_479FE8;
  return result;
}

void sub_28E308(uint64_t a1, void *a2)
{
  *a2 = &off_479FE8;
}

BOOL sub_28E320(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_28E340()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_479FA0;
  return result;
}

void sub_28E364(uint64_t a1, void *a2)
{
  *a2 = &off_479FA0;
}

uint64_t sub_28E37C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_28E3DC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479F58;
  return result;
}

void sub_28E400(uint64_t a1, void *a2)
{
  *a2 = &off_479F58;
}

uint64_t sub_28E418(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_28E430()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479F10;
  return result;
}

void sub_28E454(uint64_t a1, void *a2)
{
  *a2 = &off_479F10;
}

uint64_t sub_28E46C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_28E484()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479EC8;
  return result;
}

void sub_28E4A8(uint64_t a1, void *a2)
{
  *a2 = &off_479EC8;
}

BOOL sub_28E4C0(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

void *sub_28E4E4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_479E80;
  return result;
}

void sub_28E508(uint64_t a1, void *a2)
{
  *a2 = &off_479E80;
}

uint64_t sub_28E520(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

uint64_t sub_28E530()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_496140);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_496140))
  {
    sub_179320((uint64_t)&unk_494718, (std::string::size_type)v331);
    __cxa_guard_release(&qword_496140);
  }

  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_497A98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_497A98))
  {
    sub_17B060(&unk_496148, v331);
    __cxa_guard_release(&qword_497A98);
  }

  v205[0] = 0;
  v205[4] = 0;
  v205[8] = 0;
  v205[12] = 0;
  *(_DWORD *)&v205[16] = sub_1CC154();
  v205[20] = 1;
  __int128 v206 = 0u;
  __int128 v207 = 0u;
  __int128 v208 = 0u;
  LODWORD(v209) = 257;
  BYTE4(v209) = (unsigned __int16)sub_8339C((uint64_t)@"XxnEk9uiIk5vCdbWEGt7lA") > 0x100u;
  BYTE5(v209) = 1;
  *(void *)((char *)&v209 + 6) = 0LL;
  HIWORD(v209) = 0;
  int v210 = 16777473;
  v212[1] = 0LL;
  v212[0] = 0LL;
  __int128 v211 = v212;
  __int16 v213 = 0;
  char v214 = 0;
  int v215 = -1044381696;
  char v216 = 1;
  int v217 = -1044381696;
  char v218 = 1;
  int v219 = 0;
  char v220 = 1;
  int v221 = -1056964608;
  char v222 = 1;
  int v223 = -1033371648;
  char v224 = 1;
  int v225 = 0;
  char v226 = 1;
  int v227 = -1033371648;
  char v228 = 1;
  int v229 = 0;
  char v230 = 1;
  int v231 = -1044381696;
  char v232 = 1;
  int v233 = 0;
  char v234 = 1;
  int v235 = -1033371648;
  char v236 = 1;
  int v237 = 0;
  char v238 = 1;
  int v239 = -1033371648;
  char v240 = 1;
  int v241 = -1055916032;
  char v242 = 1;
  int v243 = -1033371648;
  char v244 = 1;
  int v245 = 0;
  char v246 = 1;
  int v247 = -1055916032;
  char v248 = 1;
  int v249 = -1033371648;
  char v250 = 1;
  int v251 = -1055916032;
  char v252 = 1;
  int v253 = -1033371648;
  char v254 = 1;
  int v255 = 0;
  char v256 = 1;
  int v257 = -1055916032;
  char v258 = 1;
  int v259 = -1043333120;
  char v260 = 1;
  int v261 = 0x40000000;
  char v262 = 1;
  int v263 = 16777472;
  int v264 = 0;
  char v265 = 1;
  int v266 = 0;
  char v267 = 1;
  int v268 = 1103626240;
  char v269 = 1;
  int v270 = 0;
  char v271 = 1;
  int v272 = 1094713344;
  char v273 = 1;
  int v274 = 1094713344;
  char v275 = 1;
  int v276 = 1094713344;
  char v277 = 1;
  int v278 = -1061158912;
  char v279 = 1;
  int v280 = 1107296256;
  char v281 = 1;
  int v282 = 1107296256;
  char v283 = 1;
  int v284 = 1092616192;
  char v285 = 1;
  int v286 = 0;
  char v287 = 1;
  int v288 = 0;
  char v289 = 1;
  int v290 = 16777472;
  v291[0] = 0;
  v291[72] = 0;
  v291[80] = 0;
  v291[120] = 0;
  v291[128] = 0;
  v291[200] = 0;
  v291[208] = 0;
  v291[248] = 0;
  v291[256] = 0;
  v291[260] = 0;
  v291[264] = 0;
  v291[268] = 0;
  v291[272] = 0;
  v291[276] = 0;
  v291[280] = 0;
  v291[284] = 0;
  v291[288] = 0;
  v291[292] = 0;
  v291[296] = 0;
  v291[300] = 0;
  v291[304] = 0;
  v291[308] = 0;
  v291[312] = 0;
  v291[316] = 0;
  v291[320] = 0;
  v291[324] = 0;
  v291[328] = 0;
  v291[332] = 0;
  v291[336] = 0;
  v291[340] = 0;
  v291[344] = 0;
  v291[348] = 0;
  v291[352] = 0;
  v291[356] = 0;
  v291[360] = 0;
  v291[364] = 0;
  v291[368] = 0;
  v291[372] = 0;
  v291[376] = 0;
  v291[380] = 0;
  v291[384] = 0;
  v291[388] = 0;
  v291[392] = 1;
  v291[396] = 0;
  v291[400] = 0;
  v291[404] = 0;
  v291[408] = 0;
  v291[412] = 0;
  v291[416] = 0;
  v291[420] = 0;
  v291[424] = 0;
  v291[428] = 0;
  v291[432] = 0;
  __int16 v292 = 0;
  char v293 = 0;
  char v294 = 0;
  char v295 = 0;
  char v296 = 0;
  char v297 = 0;
  char v298 = 0;
  char v299 = 0;
  char v300 = 0;
  char v301 = 0;
  char v302 = 0;
  char v303 = 0;
  char v304 = 0;
  char v305 = 0;
  char v306 = 0;
  char v307 = 0;
  char v308 = 0;
  char v309 = 0;
  char v310 = 0;
  char v311 = 0;
  char v312 = 0;
  char v313 = 0;
  char v314 = 0;
  char v315 = 0;
  char v316 = 0;
  char v317 = 0;
  char v318 = 0;
  char v319 = 0;
  char v320 = 0;
  char v321 = 0;
  char v322 = 0;
  int v323 = 256;
  char v324 = 0;
  char v325 = 0;
  char v326 = 0;
  char v327 = 0;
  char v328 = 0;
  char v329 = 0;
  __int16 v330 = 0;
  __int128 v202 = 0u;
  __int128 v203 = 0u;
  int v204 = 1065353216;
  sub_7D084(&v404, "");
  sub_7D084(&v350, "");
  sub_7D084(&v398, off_48C220);
  sub_7D084(&v391, "AU");
  sub_7D084(&__p, "VAD");
  sub_836D4((char *)&v199, &v404, (uint64_t)&v350, &v398, &v391, &__p);
  if (SHIBYTE(v405) < 0) {
    operator delete((void *)v404);
  }
  sub_7D084(&v398, "graph_configurations.plist");
  sub_392B64((std::__fs::filesystem::path *)&v350, &v398);
  sub_38FDAC((uint64_t)&v404, (uint64_t)&v350);
  int v204 = (int)v407;
  sub_84700(&v202, v405);
  std::string::operator=(&v199, &v408);
  std::string::operator=(&v200, &v409);
  std::string::operator=(&v201, &v410);
  sub_83134(v405);
  uint64_t v2 = (void *)v404;
  *(void *)&__int128 v404 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  __int128 v196 = 0u;
  __int128 v197 = 0u;
  int v198 = 1065353216;
  sub_7D084(&v404, "");
  sub_7D084(&v350, "");
  sub_7D084(&v398, off_48C220);
  sub_7D084(&v391, "AU");
  sub_7D084(&__p, off_48C218[0]);
  sub_836D4((char *)&v193, &v404, (uint64_t)&v350, &v398, &v391, &__p);
  if (SHIBYTE(v405) < 0) {
    operator delete((void *)v404);
  }
  sub_7D084(&v391, "graph_configurations.plist");
  sub_1CAFFC(&__dst);
  sub_7D084(&v350, "HAL");
  sub_392C0C((std::__fs::filesystem::path *)&v398, &__dst, &v350, &v391);
  sub_38FDAC((uint64_t)&v404, (uint64_t)&v398);
  int v198 = (int)v407;
  sub_84700(&v196, v405);
  std::string::operator=(&v193, &v408);
  std::string::operator=(&v194, &v409);
  std::string::operator=(&v195, &v410);
  sub_83134(v405);
  uint64_t v3 = (void *)v404;
  *(void *)&__int128 v404 = 0LL;
  if (v3) {
    operator delete(v3);
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_497B78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_497B78))
  {
    xmmword_497AB0 = 0u;
    unk_497AC0 = 0u;
    xmmword_497AA0 = 0u;
    strcpy((char *)&dword_497AD0, "tlfd");
    byte_497AD8 = 0;
    byte_497B20 = 0;
    xmmword_497B30 = 0u;
    unk_497B40 = 0u;
    xmmword_497B50 = 0u;
    *(_OWORD *)&qword_497B60 = 0u;
    qword_497B70 = 0LL;
    __cxa_guard_release(&qword_497B78);
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_497C58);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_497C58))
  {
    xmmword_497B90 = 0u;
    unk_497BA0 = 0u;
    xmmword_497B80 = 0u;
    strcpy((char *)&dword_497BB0, "tlfd");
    byte_497BB8 = 0;
    byte_497C00 = 0;
    xmmword_497C10 = 0u;
    unk_497C20 = 0u;
    xmmword_497C30 = 0u;
    *(_OWORD *)&qword_497C40 = 0u;
    qword_497C50 = 0LL;
    __cxa_guard_release(&qword_497C58);
  }

  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_497D38);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_497D38))
  {
    xmmword_497C70 = 0u;
    unk_497C80 = 0u;
    xmmword_497C60 = 0u;
    strcpy((char *)&dword_497C90, "tlfd");
    byte_497C98 = 0;
    byte_497CE0 = 0;
    xmmword_497CF0 = 0u;
    unk_497D00 = 0u;
    xmmword_497D10 = 0u;
    *(_OWORD *)&qword_497D20 = 0u;
    qword_497D30 = 0LL;
    __cxa_guard_release(&qword_497D38);
  }

  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_497E18);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_497E18))
  {
    xmmword_497D50 = 0u;
    unk_497D60 = 0u;
    xmmword_497D40 = 0u;
    strcpy((char *)&dword_497D70, "tlfd");
    byte_497D78 = 0;
    byte_497DC0 = 0;
    xmmword_497DD0 = 0u;
    unk_497DE0 = 0u;
    xmmword_497DF0 = 0u;
    *(_OWORD *)&qword_497E00 = 0u;
    qword_497E10 = 0LL;
    __cxa_guard_release(&qword_497E18);
  }

  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_497EF8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_497EF8))
  {
    xmmword_497E30 = 0u;
    unk_497E40 = 0u;
    xmmword_497E20 = 0u;
    strcpy((char *)&dword_497E50, "tlfd");
    byte_497E58 = 0;
    byte_497EA0 = 0;
    xmmword_497EB0 = 0u;
    unk_497EC0 = 0u;
    xmmword_497ED0 = 0u;
    *(_OWORD *)&qword_497EE0 = 0u;
    qword_497EF0 = 0LL;
    __cxa_guard_release(&qword_497EF8);
  }

  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_497FD8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_497FD8))
  {
    xmmword_497F10 = 0u;
    unk_497F20 = 0u;
    xmmword_497F00 = 0u;
    strcpy((char *)&dword_497F30, "tlfd");
    byte_497F38 = 0;
    byte_497F80 = 0;
    xmmword_497F90 = 0u;
    unk_497FA0 = 0u;
    xmmword_497FB0 = 0u;
    *(_OWORD *)&qword_497FC0 = 0u;
    qword_497FD0 = 0LL;
    __cxa_guard_release(&qword_497FD8);
  }

  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_4980B8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_4980B8))
  {
    xmmword_497FF0 = 0u;
    unk_498000 = 0u;
    xmmword_497FE0 = 0u;
    strcpy((char *)&dword_498010, "tlfd");
    byte_498018 = 0;
    byte_498060 = 0;
    xmmword_498070 = 0u;
    unk_498080 = 0u;
    xmmword_498090 = 0u;
    *(_OWORD *)&qword_4980A0 = 0u;
    qword_4980B0 = 0LL;
    __cxa_guard_release(&qword_4980B8);
  }

  unsigned __int8 v11 = atomic_load((unsigned __int8 *)&qword_498198);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_498198))
  {
    xmmword_4980D0 = 0u;
    unk_4980E0 = 0u;
    xmmword_4980C0 = 0u;
    strcpy((char *)&dword_4980F0, "tlfd");
    byte_4980F8 = 0;
    byte_498140 = 0;
    xmmword_498150 = 0u;
    unk_498160 = 0u;
    xmmword_498170 = 0u;
    *(_OWORD *)&qword_498180 = 0u;
    qword_498190 = 0LL;
    __cxa_guard_release(&qword_498198);
  }

  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_498278);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_498278))
  {
    xmmword_4981B0 = 0u;
    unk_4981C0 = 0u;
    xmmword_4981A0 = 0u;
    strcpy((char *)&dword_4981D0, "tlfd");
    byte_4981D8 = 0;
    byte_498220 = 0;
    xmmword_498230 = 0u;
    unk_498240 = 0u;
    xmmword_498250 = 0u;
    *(_OWORD *)&qword_498260 = 0u;
    qword_498270 = 0LL;
    __cxa_guard_release(&qword_498278);
  }

  unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_498430);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_498430))
  {
    for (uint64_t i = 0LL; i != 432; i += 216LL)
    {
      uint64_t v105 = (char *)&unk_498280 + i;
      *((_OWORD *)v105 + 1) = 0uLL;
      *((_OWORD *)v105 + 2) = 0uLL;
      *(_OWORD *)uint64_t v105 = 0uLL;
      strcpy((char *)&unk_498280 + i + 48, "tlfd");
      v105[56] = 0;
      v105[128] = 0;
      *((_OWORD *)v105 + 9) = 0uLL;
      *((_OWORD *)v105 + 10) = 0uLL;
      *((_OWORD *)v105 + 11) = 0uLL;
      *((_OWORD *)v105 + 12) = 0uLL;
      *((void *)v105 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_498430);
  }

  unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_4985E8);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_4985E8))
  {
    for (uint64_t j = 0LL; j != 432; j += 216LL)
    {
      unint64_t v107 = (char *)&unk_498438 + j;
      *((_OWORD *)v107 + 1) = 0uLL;
      *((_OWORD *)v107 + 2) = 0uLL;
      *(_OWORD *)unint64_t v107 = 0uLL;
      strcpy((char *)&unk_498438 + j + 48, "tlfd");
      v107[56] = 0;
      v107[128] = 0;
      *((_OWORD *)v107 + 9) = 0uLL;
      *((_OWORD *)v107 + 10) = 0uLL;
      *((_OWORD *)v107 + 11) = 0uLL;
      *((_OWORD *)v107 + 12) = 0uLL;
      *((void *)v107 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_4985E8);
  }

  unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_4987A0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_4987A0))
  {
    for (uint64_t k = 0LL; k != 432; k += 216LL)
    {
      __int128 v109 = (char *)&unk_4985F0 + k;
      *((_OWORD *)v109 + 1) = 0uLL;
      *((_OWORD *)v109 + 2) = 0uLL;
      *(_OWORD *)__int128 v109 = 0uLL;
      strcpy((char *)&unk_4985F0 + k + 48, "tlfd");
      v109[56] = 0;
      v109[128] = 0;
      *((_OWORD *)v109 + 9) = 0uLL;
      *((_OWORD *)v109 + 10) = 0uLL;
      *((_OWORD *)v109 + 11) = 0uLL;
      *((_OWORD *)v109 + 12) = 0uLL;
      *((void *)v109 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_4987A0);
  }

  unsigned __int8 v16 = atomic_load((unsigned __int8 *)&qword_498958);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_498958))
  {
    for (uint64_t m = 0LL; m != 432; m += 216LL)
    {
      uint64_t v111 = (char *)&unk_4987A8 + m;
      *((_OWORD *)v111 + 1) = 0uLL;
      *((_OWORD *)v111 + 2) = 0uLL;
      *(_OWORD *)uint64_t v111 = 0uLL;
      strcpy((char *)&unk_4987A8 + m + 48, "tlfd");
      v111[56] = 0;
      v111[128] = 0;
      *((_OWORD *)v111 + 9) = 0uLL;
      *((_OWORD *)v111 + 10) = 0uLL;
      *((_OWORD *)v111 + 11) = 0uLL;
      *((_OWORD *)v111 + 12) = 0uLL;
      *((void *)v111 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_498958);
  }

  unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_498B10);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_498B10))
  {
    for (uint64_t n = 0LL; n != 432; n += 216LL)
    {
      int v113 = (char *)&unk_498960 + n;
      *((_OWORD *)v113 + 1) = 0uLL;
      *((_OWORD *)v113 + 2) = 0uLL;
      *(_OWORD *)int v113 = 0uLL;
      strcpy((char *)&unk_498960 + n + 48, "tlfd");
      v113[56] = 0;
      v113[128] = 0;
      *((_OWORD *)v113 + 9) = 0uLL;
      *((_OWORD *)v113 + 10) = 0uLL;
      *((_OWORD *)v113 + 11) = 0uLL;
      *((_OWORD *)v113 + 12) = 0uLL;
      *((void *)v113 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_498B10);
  }

  unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_498CC8);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_498CC8))
  {
    for (iuint64_t i = 0LL; ii != 432; ii += 216LL)
    {
      uint64_t v115 = (char *)&unk_498B18 + ii;
      *((_OWORD *)v115 + 1) = 0uLL;
      *((_OWORD *)v115 + 2) = 0uLL;
      *(_OWORD *)uint64_t v115 = 0uLL;
      strcpy((char *)&unk_498B18 + ii + 48, "tlfd");
      v115[56] = 0;
      v115[128] = 0;
      *((_OWORD *)v115 + 9) = 0uLL;
      *((_OWORD *)v115 + 10) = 0uLL;
      *((_OWORD *)v115 + 11) = 0uLL;
      *((_OWORD *)v115 + 12) = 0uLL;
      *((void *)v115 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_498CC8);
  }

  unsigned __int8 v19 = atomic_load((unsigned __int8 *)&qword_498E80);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_498E80))
  {
    for (juint64_t j = 0LL; jj != 432; jj += 216LL)
    {
      char v117 = (char *)&unk_498CD0 + jj;
      *((_OWORD *)v117 + 1) = 0uLL;
      *((_OWORD *)v117 + 2) = 0uLL;
      *(_OWORD *)char v117 = 0uLL;
      strcpy((char *)&unk_498CD0 + jj + 48, "tlfd");
      v117[56] = 0;
      v117[128] = 0;
      *((_OWORD *)v117 + 9) = 0uLL;
      *((_OWORD *)v117 + 10) = 0uLL;
      *((_OWORD *)v117 + 11) = 0uLL;
      *((_OWORD *)v117 + 12) = 0uLL;
      *((void *)v117 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_498E80);
  }

  unsigned __int8 v20 = atomic_load((unsigned __int8 *)&qword_499038);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_499038))
  {
    for (kuint64_t k = 0LL; kk != 432; kk += 216LL)
    {
      uint64_t v119 = &byte_498E88[kk];
      *((_OWORD *)v119 + 1) = 0uLL;
      *((_OWORD *)v119 + 2) = 0uLL;
      *(_OWORD *)uint64_t v119 = 0uLL;
      strcpy(&byte_498E88[kk + 48], "tlfd");
      v119[56] = 0;
      v119[128] = 0;
      *((_OWORD *)v119 + 9) = 0uLL;
      *((_OWORD *)v119 + 10) = 0uLL;
      *((_OWORD *)v119 + 11) = 0uLL;
      *((_OWORD *)v119 + 12) = 0uLL;
      *((void *)v119 + 26) = 0LL;
    }

    __cxa_guard_release(&qword_499038);
  }

  sub_7D084(&v350, "speaker_protection");
  sub_395660((uint64_t)&v404, &v196, (unsigned __int8 *)&v350, &v193);
  sub_178254((uint64_t)&xmmword_497AA0, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "speaker_protection_raw");
  sub_395660((uint64_t)&v404, &v196, (unsigned __int8 *)&v350, &v193);
  sub_178254((uint64_t)&xmmword_497B80, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "speaker_general");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_497C60, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "speaker_spoken_word");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_497FE0, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "speaker_local_systemsound");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_4980C0, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "speaker_movie");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_4981A0, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "speaker_siri");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_497F00, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "speaker_measurement");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_497E20, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_29478C((std::string *)&xmmword_497FE0);
  sub_29478C((std::string *)&xmmword_4980C0);
  sub_29478C((std::string *)&xmmword_4981A0);
  if ((sub_14D9C8() & 1) == 0)
  {
    sub_7D084(&v350, "speaker_raw");
    sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
    sub_178254((uint64_t)&xmmword_497D40, (uint64_t)&v404);
    v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
    sub_178454((void ***)&v398);
    v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
    sub_178454((void ***)&v398);
    if (SHIBYTE(v415) < 0) {
      operator delete(v413);
    }
    sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
    if (v408.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(v406);
    }
    v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
    sub_1784C4((void ***)&v398);
    sub_17B380( (uint64_t)&unk_4985F0,  (char **)xmmword_497D40,  *((char ***)&xmmword_497D40 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497D40 + 1) - xmmword_497D40) >> 3));
    std::string::operator=(&stru_498608, (const std::string *)((char *)&xmmword_497D50 + 8));
    dword_498620 = dword_497D70;
    byte_498624 = byte_497D74;
    sub_17B4F4((std::string *)&unk_498628, (std::string *)&byte_497D78);
    dword_498678 = dword_497DC8;
    std::string::operator=(&stru_498680, (const std::string *)&xmmword_497DD0);
    sub_17B57C( (uint64_t)&unk_498698,  (uint64_t *)qword_497DE8,  (uint64_t *)xmmword_497DF0,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497DF0 - qword_497DE8) >> 3));
    sub_17B57C( (uint64_t)&unk_4986B0,  (uint64_t *)qword_497E00,  *(uint64_t **)algn_497E08,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497E08 - qword_497E00) >> 3));
    if (&unk_4986C8 != (_UNKNOWN *)&xmmword_497B80) {
      sub_17B380( (uint64_t)&unk_4986C8,  (char **)xmmword_497B80,  *((char ***)&xmmword_497B80 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497B80 + 1) - xmmword_497B80) >> 3));
    }
    std::string::operator=(&stru_4986E0, (const std::string *)((char *)&xmmword_497B90 + 8));
    dword_4986F8 = dword_497BB0;
    byte_4986FC = byte_497BB4;
    sub_17B4F4((std::string *)&unk_498700, (std::string *)&byte_497BB8);
    dword_498750 = dword_497C08;
    std::string::operator=(&stru_498758, (const std::string *)&xmmword_497C10);
    if (&unk_4986C8 != (_UNKNOWN *)&xmmword_497B80)
    {
      sub_17B57C( (uint64_t)&unk_498770,  (uint64_t *)qword_497C28,  (uint64_t *)xmmword_497C30,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497C30 - qword_497C28) >> 3));
      sub_17B57C( (uint64_t)&unk_498788,  (uint64_t *)qword_497C40,  *(uint64_t **)algn_497C48,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497C48 - qword_497C40) >> 3));
    }
  }

  if (&unk_498358 != (_UNKNOWN *)&xmmword_497AA0) {
    sub_17B380( (uint64_t)&unk_498358,  (char **)xmmword_497AA0,  *((char ***)&xmmword_497AA0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497AA0 + 1) - xmmword_497AA0) >> 3));
  }
  std::string::operator=(&stru_498370, (const std::string *)((char *)&xmmword_497AB0 + 8));
  dword_498388 = dword_497AD0;
  byte_49838C = byte_497AD4;
  sub_17B4F4((std::string *)&unk_498390, (std::string *)&byte_497AD8);
  dword_4983E0 = dword_497B28;
  std::string::operator=((std::string *)&algn_4983E4[4], (const std::string *)&xmmword_497B30);
  if (&unk_498358 != (_UNKNOWN *)&xmmword_497AA0)
  {
    sub_17B57C( (uint64_t)&unk_498400,  (uint64_t *)qword_497B48,  (uint64_t *)xmmword_497B50,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497B50 - qword_497B48) >> 3));
    sub_17B57C( (uint64_t)&unk_498418,  (uint64_t *)qword_497B60,  *(uint64_t **)algn_497B68,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497B68 - qword_497B60) >> 3));
  }

  if (&unk_498880 != (_UNKNOWN *)&xmmword_497AA0) {
    sub_17B380( (uint64_t)&unk_498880,  (char **)xmmword_497AA0,  *((char ***)&xmmword_497AA0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497AA0 + 1) - xmmword_497AA0) >> 3));
  }
  std::string::operator=(&stru_498898, (const std::string *)((char *)&xmmword_497AB0 + 8));
  dword_4988B0 = dword_497AD0;
  byte_4988B4 = byte_497AD4;
  sub_17B4F4((std::string *)&unk_4988B8, (std::string *)&byte_497AD8);
  dword_498908 = dword_497B28;
  std::string::operator=(&stru_498910, (const std::string *)&xmmword_497B30);
  if (&unk_498880 != (_UNKNOWN *)&xmmword_497AA0)
  {
    sub_17B57C( (uint64_t)&unk_498928,  (uint64_t *)qword_497B48,  (uint64_t *)xmmword_497B50,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497B50 - qword_497B48) >> 3));
    sub_17B57C( (uint64_t)&unk_498940,  (uint64_t *)qword_497B60,  *(uint64_t **)algn_497B68,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497B68 - qword_497B60) >> 3));
  }

  if (&unk_498510 != (_UNKNOWN *)&xmmword_497AA0) {
    sub_17B380( (uint64_t)&unk_498510,  (char **)xmmword_497AA0,  *((char ***)&xmmword_497AA0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497AA0 + 1) - xmmword_497AA0) >> 3));
  }
  std::string::operator=(&stru_498528, (const std::string *)((char *)&xmmword_497AB0 + 8));
  dword_498540 = dword_497AD0;
  byte_498544 = byte_497AD4;
  sub_17B4F4((std::string *)&unk_498548, (std::string *)&byte_497AD8);
  dword_498598 = dword_497B28;
  std::string::operator=(&stru_4985A0, (const std::string *)&xmmword_497B30);
  if (&unk_498510 != (_UNKNOWN *)&xmmword_497AA0)
  {
    sub_17B57C( (uint64_t)&unk_4985B8,  (uint64_t *)qword_497B48,  (uint64_t *)xmmword_497B50,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497B50 - qword_497B48) >> 3));
    sub_17B57C( (uint64_t)&unk_4985D0,  (uint64_t *)qword_497B60,  *(uint64_t **)algn_497B68,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497B68 - qword_497B60) >> 3));
  }

  if (&unk_498F60 != (_UNKNOWN *)&xmmword_497AA0) {
    sub_17B380( (uint64_t)&unk_498F60,  (char **)xmmword_497AA0,  *((char ***)&xmmword_497AA0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497AA0 + 1) - xmmword_497AA0) >> 3));
  }
  std::string::operator=(&stru_498F78, (const std::string *)((char *)&xmmword_497AB0 + 8));
  dword_498F90 = dword_497AD0;
  byte_498F94 = byte_497AD4;
  sub_17B4F4((std::string *)&unk_498F98, (std::string *)&byte_497AD8);
  dword_498FE8 = dword_497B28;
  std::string::operator=(&stru_498FF0, (const std::string *)&xmmword_497B30);
  if (&unk_498F60 != (_UNKNOWN *)&xmmword_497AA0)
  {
    sub_17B57C( (uint64_t)&unk_499008,  (uint64_t *)qword_497B48,  (uint64_t *)xmmword_497B50,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497B50 - qword_497B48) >> 3));
    sub_17B57C( (uint64_t)&unk_499020,  (uint64_t *)qword_497B60,  *(uint64_t **)algn_497B68,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497B68 - qword_497B60) >> 3));
  }

  if (&unk_498A38 != (_UNKNOWN *)&xmmword_497AA0) {
    sub_17B380( (uint64_t)&unk_498A38,  (char **)xmmword_497AA0,  *((char ***)&xmmword_497AA0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497AA0 + 1) - xmmword_497AA0) >> 3));
  }
  std::string::operator=(&stru_498A50, (const std::string *)((char *)&xmmword_497AB0 + 8));
  dword_498A68 = dword_497AD0;
  byte_498A6C = byte_497AD4;
  sub_17B4F4((std::string *)&unk_498A70, (std::string *)&byte_497AD8);
  dword_498AC0 = dword_497B28;
  std::string::operator=((std::string *)&algn_498AC4[4], (const std::string *)&xmmword_497B30);
  if (&unk_498A38 != (_UNKNOWN *)&xmmword_497AA0)
  {
    sub_17B57C( (uint64_t)&unk_498AE0,  (uint64_t *)qword_497B48,  (uint64_t *)xmmword_497B50,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497B50 - qword_497B48) >> 3));
    sub_17B57C( (uint64_t)&unk_498AF8,  (uint64_t *)qword_497B60,  *(uint64_t **)algn_497B68,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497B68 - qword_497B60) >> 3));
  }

  if (&unk_498BF0 != (_UNKNOWN *)&xmmword_497AA0) {
    sub_17B380( (uint64_t)&unk_498BF0,  (char **)xmmword_497AA0,  *((char ***)&xmmword_497AA0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497AA0 + 1) - xmmword_497AA0) >> 3));
  }
  std::string::operator=(&stru_498C08, (const std::string *)((char *)&xmmword_497AB0 + 8));
  dword_498C20 = dword_497AD0;
  byte_498C24 = byte_497AD4;
  sub_17B4F4((std::string *)&unk_498C28, (std::string *)&byte_497AD8);
  dword_498C78 = dword_497B28;
  std::string::operator=(&stru_498C80, (const std::string *)&xmmword_497B30);
  if (&unk_498BF0 != (_UNKNOWN *)&xmmword_497AA0)
  {
    sub_17B57C( (uint64_t)&unk_498C98,  (uint64_t *)qword_497B48,  (uint64_t *)xmmword_497B50,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497B50 - qword_497B48) >> 3));
    sub_17B57C( (uint64_t)&unk_498CB0,  (uint64_t *)qword_497B60,  *(uint64_t **)algn_497B68,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497B68 - qword_497B60) >> 3));
  }

  if (&unk_498DA8 != (_UNKNOWN *)&xmmword_497AA0) {
    sub_17B380( (uint64_t)&unk_498DA8,  (char **)xmmword_497AA0,  *((char ***)&xmmword_497AA0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497AA0 + 1) - xmmword_497AA0) >> 3));
  }
  std::string::operator=(&stru_498DC0, (const std::string *)((char *)&xmmword_497AB0 + 8));
  dword_498DD8 = dword_497AD0;
  byte_498DDC = byte_497AD4;
  sub_17B4F4((std::string *)&unk_498DE0, (std::string *)&byte_497AD8);
  dword_498E30 = dword_497B28;
  std::string::operator=(&stru_498E38, (const std::string *)&xmmword_497B30);
  if (&unk_498DA8 != (_UNKNOWN *)&xmmword_497AA0)
  {
    sub_17B57C( (uint64_t)&unk_498E50,  (uint64_t *)qword_497B48,  (uint64_t *)xmmword_497B50,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497B50 - qword_497B48) >> 3));
    sub_17B57C( (uint64_t)&unk_498E68,  (uint64_t *)qword_497B60,  *(uint64_t **)algn_497B68,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497B68 - qword_497B60) >> 3));
  }

  sub_17B380( (uint64_t)&unk_498280,  (char **)xmmword_497C60,  *((char ***)&xmmword_497C60 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497C60 + 1) - xmmword_497C60) >> 3));
  std::string::operator=(&stru_498298, (const std::string *)((char *)&xmmword_497C70 + 8));
  dword_4982B0 = dword_497C90;
  byte_4982B4 = byte_497C94;
  sub_17B4F4((std::string *)&unk_4982B8, (std::string *)&byte_497C98);
  dword_498308 = dword_497CE8;
  std::string::operator=(&stru_498310, (const std::string *)&xmmword_497CF0);
  sub_17B57C( (uint64_t)&unk_498328,  (uint64_t *)qword_497D08,  (uint64_t *)xmmword_497D10,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497D10 - qword_497D08) >> 3));
  sub_17B57C( (uint64_t)&unk_498340,  (uint64_t *)qword_497D20,  qword_497D28,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)qword_497D28 - qword_497D20) >> 3));
  sub_17B380( (uint64_t)&unk_498438,  (char **)xmmword_497F00,  *((char ***)&xmmword_497F00 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497F00 + 1) - xmmword_497F00) >> 3));
  std::string::operator=(&stru_498450, (const std::string *)((char *)&xmmword_497F10 + 8));
  dword_498468 = dword_497F30;
  byte_49846C = byte_497F34;
  sub_17B4F4((std::string *)&unk_498470, (std::string *)&byte_497F38);
  dword_4984C0 = dword_497F88;
  std::string::operator=((std::string *)&algn_4984C4[4], (const std::string *)&xmmword_497F90);
  sub_17B57C( (uint64_t)&unk_4984E0,  (uint64_t *)qword_497FA8,  (uint64_t *)xmmword_497FB0,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497FB0 - qword_497FA8) >> 3));
  sub_17B57C( (uint64_t)&unk_4984F8,  (uint64_t *)qword_497FC0,  *(uint64_t **)algn_497FC8,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497FC8 - qword_497FC0) >> 3));
  sub_17B380( (uint64_t)&unk_4987A8,  (char **)xmmword_497E20,  *((char ***)&xmmword_497E20 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497E20 + 1) - xmmword_497E20) >> 3));
  std::string::operator=(&stru_4987C0, (const std::string *)((char *)&xmmword_497E30 + 8));
  dword_4987D8 = dword_497E50;
  byte_4987DC = byte_497E54;
  sub_17B4F4((std::string *)&unk_4987E0, (std::string *)&byte_497E58);
  dword_498830 = dword_497EA8;
  std::string::operator=(&stru_498838, (const std::string *)&xmmword_497EB0);
  sub_17B57C( (uint64_t)&unk_498850,  (uint64_t *)qword_497EC8,  (uint64_t *)xmmword_497ED0,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497ED0 - qword_497EC8) >> 3));
  sub_17B57C( (uint64_t)&unk_498868,  (uint64_t *)qword_497EE0,  *(uint64_t **)algn_497EE8,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_497EE8 - qword_497EE0) >> 3));
  sub_17B380( (uint64_t)&unk_498960,  (char **)xmmword_497FE0,  *((char ***)&xmmword_497FE0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497FE0 + 1) - xmmword_497FE0) >> 3));
  std::string::operator=(&stru_498978, (const std::string *)((char *)&xmmword_497FF0 + 8));
  dword_498990 = dword_498010;
  byte_498994 = byte_498014;
  sub_17B4F4((std::string *)&unk_498998, (std::string *)&byte_498018);
  dword_4989E8 = dword_498068;
  std::string::operator=(&stru_4989F0, (const std::string *)&xmmword_498070);
  sub_17B57C( (uint64_t)&unk_498A08,  (uint64_t *)qword_498088,  (uint64_t *)xmmword_498090,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_498090 - qword_498088) >> 3));
  sub_17B57C( (uint64_t)&unk_498A20,  (uint64_t *)qword_4980A0,  *(uint64_t **)algn_4980A8,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_4980A8 - qword_4980A0) >> 3));
  sub_17B380( (uint64_t)&unk_498B18,  (char **)xmmword_4980C0,  *((char ***)&xmmword_4980C0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_4980C0 + 1) - xmmword_4980C0) >> 3));
  std::string::operator=(&stru_498B30, (const std::string *)((char *)&xmmword_4980D0 + 8));
  dword_498B48 = dword_4980F0;
  byte_498B4C = byte_4980F4;
  sub_17B4F4((std::string *)&unk_498B50, (std::string *)&byte_4980F8);
  dword_498BA0 = dword_498148;
  std::string::operator=((std::string *)&algn_498BA4[4], (const std::string *)&xmmword_498150);
  sub_17B57C( (uint64_t)&unk_498BC0,  (uint64_t *)qword_498168,  (uint64_t *)xmmword_498170,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_498170 - qword_498168) >> 3));
  sub_17B57C( (uint64_t)&unk_498BD8,  (uint64_t *)qword_498180,  *(uint64_t **)algn_498188,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_498188 - qword_498180) >> 3));
  sub_17B380( (uint64_t)&unk_498CD0,  (char **)xmmword_4981A0,  *((char ***)&xmmword_4981A0 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_4981A0 + 1) - xmmword_4981A0) >> 3));
  std::string::operator=(&stru_498CE8, (const std::string *)((char *)&xmmword_4981B0 + 8));
  dword_498D00 = dword_4981D0;
  byte_498D04 = byte_4981D4;
  sub_17B4F4((std::string *)&unk_498D08, (std::string *)&byte_4981D8);
  dword_498D58 = dword_498228;
  std::string::operator=(&stru_498D60, (const std::string *)&xmmword_498230);
  sub_17B57C( (uint64_t)&unk_498D78,  (uint64_t *)qword_498248,  (uint64_t *)xmmword_498250,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_498250 - qword_498248) >> 3));
  sub_17B57C( (uint64_t)&unk_498D90,  (uint64_t *)qword_498260,  *(uint64_t **)algn_498268,  0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_498268 - qword_498260) >> 3));
  sub_2490E8((uint64_t)&v404, "SPPHolder", 1668049011);
  sub_178254((uint64_t)byte_498E88, (uint64_t)&v404);
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v350);
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v350);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v350);
  unsigned __int8 v21 = atomic_load((unsigned __int8 *)&qword_499118);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_499118))
  {
    xmmword_499050 = 0u;
    unk_499060 = 0u;
    xmmword_499040 = 0u;
    strcpy((char *)&dword_499070, "tlfd");
    byte_499078 = 0;
    byte_4990C0 = 0;
    xmmword_4990D0 = 0u;
    unk_4990E0 = 0u;
    xmmword_4990F0 = 0u;
    unk_499100 = 0u;
    qword_499110 = 0LL;
    __cxa_guard_release(&qword_499118);
  }

  unsigned __int8 v22 = atomic_load((unsigned __int8 *)&qword_4991F8);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_4991F8))
  {
    xmmword_499130 = 0u;
    unk_499140 = 0u;
    xmmword_499120 = 0u;
    strcpy((char *)&dword_499150, "tlfd");
    byte_499158 = 0;
    byte_4991A0 = 0;
    xmmword_4991B0 = 0u;
    unk_4991C0 = 0u;
    xmmword_4991D0 = 0u;
    unk_4991E0 = 0u;
    qword_4991F0 = 0LL;
    __cxa_guard_release(&qword_4991F8);
  }

  unsigned __int8 v23 = atomic_load((unsigned __int8 *)&qword_4992D8);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_4992D8))
  {
    xmmword_499210 = 0u;
    unk_499220 = 0u;
    xmmword_499200 = 0u;
    strcpy((char *)&dword_499230, "tlfd");
    byte_499238 = 0;
    byte_499280 = 0;
    xmmword_499290 = 0u;
    unk_4992A0 = 0u;
    xmmword_4992B0 = 0u;
    unk_4992C0 = 0u;
    qword_4992D0 = 0LL;
    __cxa_guard_release(&qword_4992D8);
  }

  unsigned __int8 v24 = atomic_load((unsigned __int8 *)&qword_4993B8);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_4993B8))
  {
    xmmword_4992F0 = 0u;
    unk_499300 = 0u;
    xmmword_4992E0 = 0u;
    strcpy((char *)&dword_499310, "tlfd");
    byte_499318 = 0;
    byte_499360 = 0;
    xmmword_499370 = 0u;
    unk_499380 = 0u;
    xmmword_499390 = 0u;
    unk_4993A0 = 0u;
    qword_4993B0 = 0LL;
    __cxa_guard_release(&qword_4993B8);
  }

  unsigned __int8 v25 = atomic_load((unsigned __int8 *)&qword_499498);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_499498))
  {
    xmmword_4993D0 = 0u;
    unk_4993E0 = 0u;
    xmmword_4993C0 = 0u;
    strcpy((char *)&dword_4993F0, "tlfd");
    byte_4993F8 = 0;
    byte_499440 = 0;
    xmmword_499450 = 0u;
    unk_499460 = 0u;
    xmmword_499470 = 0u;
    unk_499480 = 0u;
    qword_499490 = 0LL;
    __cxa_guard_release(&qword_499498);
  }

  unsigned __int8 v26 = atomic_load((unsigned __int8 *)&qword_499578);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_499578))
  {
    xmmword_4994B0 = 0u;
    unk_4994C0 = 0u;
    xmmword_4994A0 = 0u;
    strcpy((char *)&dword_4994D0, "tlfd");
    byte_4994D8 = 0;
    byte_499520 = 0;
    xmmword_499530 = 0u;
    unk_499540 = 0u;
    xmmword_499550 = 0u;
    unk_499560 = 0u;
    qword_499570 = 0LL;
    __cxa_guard_release(&qword_499578);
  }

  unsigned __int8 v27 = atomic_load((unsigned __int8 *)&qword_499658);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_499658))
  {
    xmmword_499590 = 0u;
    unk_4995A0 = 0u;
    xmmword_499580 = 0u;
    strcpy((char *)&dword_4995B0, "tlfd");
    byte_4995B8 = 0;
    byte_499600 = 0;
    xmmword_499610 = 0u;
    unk_499620 = 0u;
    xmmword_499630 = 0u;
    unk_499640 = 0u;
    qword_499650 = 0LL;
    __cxa_guard_release(&qword_499658);
  }

  sub_7D084(&v350, "mic_general");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_499120, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "beamformed_mic_general");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_499040, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "mic_measurement");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_499200, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "beamformed_mic_measurement");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_4992E0, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "mic_raw");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_4993C0, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "siri_barge_in");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_4994A0, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  sub_7D084(&v350, "generic_echo_cancelled_input");
  sub_395660((uint64_t)&v404, &v202, (unsigned __int8 *)&v350, &v199);
  sub_178254((uint64_t)&xmmword_499580, (uint64_t)&v404);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
  sub_178454((void ***)&v398);
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  sub_178454((void ***)&v398);
  if (SHIBYTE(v415) < 0) {
    operator delete(v413);
  }
  sub_830DC((uint64_t)&v408.__r_.__value_.__l.__cap_);
  if (v408.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v406);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  sub_1784C4((void ***)&v398);
  unsigned __int8 v28 = atomic_load((unsigned __int8 *)&qword_499668);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_499668))
  {
    int v120 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &unk_498280;
    BYTE8(v404) = 1;
    sub_2D20C0( (uint64_t)v120,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499660 = (uint64_t)v120;
    __cxa_guard_release(&qword_499668);
  }

  unsigned __int8 v29 = atomic_load((unsigned __int8 *)&qword_499678);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_499678))
  {
    uint64_t v121 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &unk_498438;
    BYTE8(v404) = 1;
    sub_2D20C0( (uint64_t)v121,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499670 = (uint64_t)v121;
    __cxa_guard_release(&qword_499678);
  }

  unsigned __int8 v30 = atomic_load((unsigned __int8 *)&qword_499688);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_499688))
  {
    __int16 v122 = operator new(0x80uLL);
    if (sub_14D9C8())
    {
      BYTE8(v404) = 0;
      *(void *)&__int128 v404 = 0LL;
    }

    else
    {
      *(void *)&__int128 v404 = &unk_4985F0;
      BYTE8(v404) = 1;
    }

    sub_2D20C0( (uint64_t)v122,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499680 = (uint64_t)v122;
    __cxa_guard_release(&qword_499688);
  }

  unsigned __int8 v31 = atomic_load((unsigned __int8 *)&qword_499698);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_499698))
  {
    BOOL v123 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &unk_4987A8;
    BYTE8(v404) = 1;
    sub_2D20C0( (uint64_t)v123,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499690 = (uint64_t)v123;
    __cxa_guard_release(&qword_499698);
  }

  unsigned __int8 v32 = atomic_load((unsigned __int8 *)&qword_4996A8);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_4996A8))
  {
    __int16 v124 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &unk_498960;
    BYTE8(v404) = 1;
    sub_2D20C0( (uint64_t)v124,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_4996A0 = (uint64_t)v124;
    __cxa_guard_release(&qword_4996A8);
  }

  unsigned __int8 v33 = atomic_load((unsigned __int8 *)&qword_4996B8);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_4996B8))
  {
    id v125 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &unk_498B18;
    BYTE8(v404) = 1;
    sub_2D20C0( (uint64_t)v125,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_4996B0 = (uint64_t)v125;
    __cxa_guard_release(&qword_4996B8);
  }

  unsigned __int8 v34 = atomic_load((unsigned __int8 *)&qword_4996C8);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_4996C8))
  {
    __int16 v126 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &unk_498CD0;
    BYTE8(v404) = 1;
    sub_2D20C0( (uint64_t)v126,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_4996C0 = (uint64_t)v126;
    __cxa_guard_release(&qword_4996C8);
  }

  unsigned __int8 v35 = atomic_load((unsigned __int8 *)&qword_4996D8);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_4996D8))
  {
    char v127 = operator new(0x80uLL);
    *(void *)&__int128 v404 = byte_498E88;
    BYTE8(v404) = 1;
    sub_2D20C0( (uint64_t)v127,  0LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_4996D0 = (uint64_t)v127;
    __cxa_guard_release(&qword_4996D8);
  }

  unsigned __int8 v36 = atomic_load((unsigned __int8 *)&qword_4996E8);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_4996E8))
  {
    __int16 v128 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &xmmword_499120;
    BYTE8(v404) = 1;
    sub_2CE400( (uint64_t)v128,  0x1666E7431LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_4996E0 = (uint64_t)v128;
    __cxa_guard_release(&qword_4996E8);
  }

  unsigned __int8 v37 = atomic_load((unsigned __int8 *)&qword_4996F8);
  if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_4996F8))
  {
    CFMutableArrayRef v129 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &xmmword_499040;
    BYTE8(v404) = 1;
    sub_2CE400( (uint64_t)v129,  0x16265616DLL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_4996F0 = (uint64_t)v129;
    __cxa_guard_release(&qword_4996F8);
  }

  unsigned __int8 v38 = atomic_load((unsigned __int8 *)&qword_499708);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_499708))
  {
    __int16 v130 = operator new(0x80uLL);
    sub_2CE400( (uint64_t)v130,  0x1616C6C20LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&unk_4022E8,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499700 = (uint64_t)v130;
    __cxa_guard_release(&qword_499708);
  }

  unsigned __int8 v39 = atomic_load((unsigned __int8 *)&qword_499718);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_499718))
  {
    unint64_t v131 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &xmmword_499200;
    BYTE8(v404) = 1;
    sub_2CE400( (uint64_t)v131,  0x1666E7431LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499710 = (uint64_t)v131;
    __cxa_guard_release(&qword_499718);
  }

  unsigned __int8 v40 = atomic_load((unsigned __int8 *)&qword_499728);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_499728))
  {
    char v132 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &xmmword_4992E0;
    BYTE8(v404) = 1;
    sub_2CE400( (uint64_t)v132,  0x16265616DLL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499720 = (uint64_t)v132;
    __cxa_guard_release(&qword_499728);
  }

  unsigned __int8 v41 = atomic_load((unsigned __int8 *)&qword_499738);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_499738))
  {
    __int16 v133 = operator new(0x80uLL);
    sub_2CE400( (uint64_t)v133,  0x1616C6C20LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&unk_4022E8,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499730 = (uint64_t)v133;
    __cxa_guard_release(&qword_499738);
  }

  unsigned __int8 v42 = atomic_load((unsigned __int8 *)&qword_499748);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_499748))
  {
    CFTypeRef v134 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &xmmword_4993C0;
    BYTE8(v404) = 1;
    sub_2CE400( (uint64_t)v134,  0x1666E7431LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499740 = (uint64_t)v134;
    __cxa_guard_release(&qword_499748);
  }

  unsigned __int8 v43 = atomic_load((unsigned __int8 *)&qword_499758);
  if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_499758))
  {
    uint64_t v135 = operator new(0x80uLL);
    sub_2CE400( (uint64_t)v135,  0x1616C6C20LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&unk_4022E8,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499750 = (uint64_t)v135;
    __cxa_guard_release(&qword_499758);
  }

  unsigned __int8 v44 = atomic_load((unsigned __int8 *)&qword_499768);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_499768))
  {
    char v136 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &xmmword_4994A0;
    BYTE8(v404) = 1;
    sub_2CE400( (uint64_t)v136,  0x1616C6C20LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499760 = (uint64_t)v136;
    __cxa_guard_release(&qword_499768);
  }

  unsigned __int8 v45 = atomic_load((unsigned __int8 *)&qword_499778);
  if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_499778))
  {
    uint64_t v137 = operator new(0x80uLL);
    sub_2CE400( (uint64_t)v137,  0x1616C6C20LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&unk_4022E8,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499770 = (uint64_t)v137;
    __cxa_guard_release(&qword_499778);
  }

  unsigned __int8 v46 = atomic_load((unsigned __int8 *)&qword_499788);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_499788))
  {
    char v138 = operator new(0x80uLL);
    *(void *)&__int128 v404 = &xmmword_499580;
    BYTE8(v404) = 1;
    sub_2CE400( (uint64_t)v138,  0x1616C6C20LL,  "",  &qword_402294,  &qword_40229C,  (uint64_t *)&v404,  &xmmword_4022A8,  (uint64_t)&unk_4022B8);
    qword_499780 = (uint64_t)v138;
    __cxa_guard_release(&qword_499788);
  }

  unsigned __int8 v47 = atomic_load((unsigned __int8 *)&qword_4998D0);
  if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_4998D0))
  {
    sub_DA7BC(v192, (uint64_t)&unk_4022B8);
    sub_17BB0C((uint64_t)&qword_499790, (uint64_t)&unk_494718, 0LL, 0LL, 0LL, (uint64_t)v192);
    if (v192[40]) {
      sub_D0C14((uint64_t)v192);
    }
    __cxa_guard_release(&qword_4998D0);
  }

  uint64_t v48 = qword_4996E0;
  uint64_t v49 = qword_4996F0;
  uint64_t v50 = qword_499700;
  uint64_t v51 = operator new(0x18uLL);
  v191[2] = v51 + 3;
  void *v51 = v48;
  v51[1] = v49;
  void v51[2] = v50;
  v191[0] = v51;
  v191[1] = v51 + 3;
  uint64_t v52 = qword_499710;
  uint64_t v53 = qword_499720;
  uint64_t v54 = qword_499730;
  char v55 = operator new(0x18uLL);
  v190[2] = v55 + 3;
  *char v55 = v52;
  v55[1] = v53;
  _OWORD v55[2] = v54;
  v190[0] = v55;
  v190[1] = v55 + 3;
  uint64_t v56 = qword_499740;
  uint64_t v57 = qword_499750;
  unint64_t v58 = operator new(0x10uLL);
  v189[2] = v58 + 2;
  void *v58 = v56;
  v58[1] = v57;
  v189[0] = v58;
  v189[1] = v58 + 2;
  uint64_t v59 = qword_499770;
  double v60 = operator new(8uLL);
  void *v60 = v59;
  v188[2] = v60 + 1;
  v188[0] = v60;
  v188[1] = v60 + 1;
  LODWORD(v350.__r_.__value_.__l.__data_) = 1718514737;
  sub_852D0(&v404, (__int32 *)&v350, 1LL);
  sub_2D22C4(v184, (uint64_t)&v404, (uint64_t)v191);
  if ((void)v404)
  {
    *((void *)&v404 + 1) = v404;
    operator delete((void *)v404);
  }

  LODWORD(v350.__r_.__value_.__l.__data_) = 1718514737;
  sub_852D0(&v404, (__int32 *)&v350, 1LL);
  sub_2D22C4(v180, (uint64_t)&v404, (uint64_t)v190);
  if ((void)v404)
  {
    *((void *)&v404 + 1) = v404;
    operator delete((void *)v404);
  }

  LODWORD(v350.__r_.__value_.__l.__data_) = 1718514737;
  sub_852D0(&v404, (__int32 *)&v350, 1LL);
  sub_2D22C4(v176, (uint64_t)&v404, (uint64_t)v189);
  if ((void)v404)
  {
    *((void *)&v404 + 1) = v404;
    operator delete((void *)v404);
  }

  LODWORD(v350.__r_.__value_.__l.__data_) = 1634495520;
  sub_852D0(&v404, (__int32 *)&v350, 1LL);
  sub_2D22C4(v172, (uint64_t)&v404, (uint64_t)v188);
  if ((void)v404)
  {
    *((void *)&v404 + 1) = v404;
    operator delete((void *)v404);
  }

  LODWORD(v398.__r_.__value_.__l.__data_) = 1634495520;
  sub_852D0(&v404, (__int32 *)&v398, 1LL);
  uint64_t v61 = qword_499760;
  int v62 = operator new(8uLL);
  void *v62 = v61;
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)(v62 + 1);
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  v350.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 1);
  sub_2D22C4(v168, (uint64_t)&v404, (uint64_t)&v350);
  operator delete(v62);
  if ((void)v404)
  {
    *((void *)&v404 + 1) = v404;
    operator delete((void *)v404);
  }

  LODWORD(v398.__r_.__value_.__l.__data_) = 1634495520;
  sub_852D0(&v404, (__int32 *)&v398, 1LL);
  uint64_t v63 = qword_499780;
  UInt32 v64 = operator new(8uLL);
  *UInt32 v64 = v63;
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)(v64 + 1);
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
  v350.__r_.__value_.__l.__size_ = (std::string::size_type)(v64 + 1);
  sub_2D22C4(v164, (uint64_t)&v404, (uint64_t)&v350);
  operator delete(v64);
  if ((void)v404)
  {
    *((void *)&v404 + 1) = v404;
    operator delete((void *)v404);
  }

  unsigned __int8 v65 = atomic_load((unsigned __int8 *)&qword_4998F0);
  if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_4998F0))
  {
    qword_4998E8 = 0LL;
    qword_4998E0 = 0LL;
    qword_4998D8 = (uint64_t)&qword_4998E0;
    __cxa_guard_release(&qword_4998F0);
  }

  sub_2D3928((uint64_t **)&qword_4998D8, 1768776806LL, (uint64_t)v184);
  sub_2D3928((uint64_t **)&qword_4998D8, 1836281204LL, (uint64_t)v180);
  sub_2D3928((uint64_t **)&qword_4998D8, 1918990112LL, (uint64_t)v176);
  sub_2D3928((uint64_t **)&qword_4998D8, 1987208039LL, (uint64_t)v168);
  sub_2D3928((uint64_t **)&qword_4998D8, 1987211117LL, (uint64_t)v168);
  sub_2D3928((uint64_t **)&qword_4998D8, 1986556788LL, (uint64_t)v168);
  sub_2D3928((uint64_t **)&qword_4998D8, 1987212137LL, (uint64_t)v168);
  sub_2D3928((uint64_t **)&qword_4998D8, 1701017120LL, (uint64_t)v164);
  unsigned __int8 v66 = atomic_load((unsigned __int8 *)&qword_499910);
  if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_499910))
  {
    qword_499908 = 0LL;
    qword_499900 = 0LL;
    qword_4998F8 = (uint64_t)&qword_499900;
    __cxa_guard_release(&qword_499910);
  }

  sub_2D3928((uint64_t **)&qword_4998F8, 1768776806LL, (uint64_t)v184);
  sub_2D3928((uint64_t **)&qword_4998F8, 1836281204LL, (uint64_t)v180);
  sub_2D3928((uint64_t **)&qword_4998F8, 1918990112LL, (uint64_t)v176);
  for (muint64_t m = 0LL; mm != 20; mm += 4LL)
    sub_2D3928((uint64_t **)&qword_4998F8, *(unsigned int *)&aOvpvivpvcgpvcv[mm], (uint64_t)v172);
  dword_499948 = 2;
  byte_49994C = 1;
  unsigned __int8 v68 = atomic_load((unsigned __int8 *)&qword_4999C0);
  if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_4999C0))
  {
    sub_2D5760((uint64_t **)&unk_499978, &qword_4998D8);
    __cxa_guard_release(&qword_4999C0);
  }

  unsigned __int8 v69 = atomic_load((unsigned __int8 *)&qword_499A10);
  if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_499A10))
  {
    sub_2D5760((uint64_t **)&unk_4999C8, &qword_4998F8);
    __cxa_guard_release(&qword_499A10);
  }

  unsigned __int8 v70 = atomic_load((unsigned __int8 *)&qword_499B18);
  if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_499B18))
  {
    sub_17C91C((uint64_t)&qword_499A18, (uint64_t)&unk_496148, 0LL, 0LL);
    __cxa_guard_release(&qword_499B18);
  }

  unsigned __int8 v71 = atomic_load((unsigned __int8 *)&qword_499B68);
  if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_499B68))
  {
    sub_29487C();
    __cxa_guard_release(&qword_499B68);
  }

  unsigned __int8 v72 = atomic_load((unsigned __int8 *)&qword_499BB8);
  if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_499BB8))
  {
    sub_2948F0();
    __cxa_guard_release(&qword_499BB8);
  }

  unsigned __int8 v73 = atomic_load((unsigned __int8 *)&qword_499C08);
  if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_499C08))
  {
    sub_295044();
    __cxa_guard_release(&qword_499C08);
  }

  unsigned __int8 v74 = atomic_load((unsigned __int8 *)&qword_499C58);
  if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_499C58))
  {
    sub_295350();
    __cxa_guard_release(&qword_499C58);
  }

  *(_OWORD *)uint64_t v154 = *(_OWORD *)v205;
  *(void *)&v154[13] = *(void *)&v205[13];
  memset(v155, 0, sizeof(v155));
  sub_7A5B8(v155, (const void *)v206, *((uint64_t *)&v206 + 1), (uint64_t)(*((void *)&v206 + 1) - v206) >> 2);
  memset(v156, 0, sizeof(v156));
  sub_7A5B8(v156, *((const void **)&v207 + 1), v208, (uint64_t)(v208 - *((void *)&v207 + 1)) >> 2);
  __int128 v157 = v209;
  int v158 = v210;
  sub_86550(v159, (uint64_t)&v211);
  __int16 v160 = v213;
  char v161 = v214;
  char v162 = 1;
  sub_295580(&v404, v154);
  memset(v163, 0, sizeof(v163));
  sub_F10CC(v163, (const void *)v404, *((uint64_t *)&v404 + 1), (uint64_t)(*((void *)&v404 + 1) - v404) >> 2);
  if ((void)v404)
  {
    *((void *)&v404 + 1) = v404;
    operator delete((void *)v404);
  }

  sub_F1144((uint64_t)v154);
  uint64_t v75 = operator new(0x10uLL);
  *(_OWORD *)uint64_t v75 = xmmword_4032C0;
  unint64_t v76 = operator new(0xCuLL);
  char v152 = v76 + 3;
  uint64_t v153 = (char *)(v76 + 3);
  *(void *)unint64_t v76 = 0x200000005LL;
  v76[2] = 18;
  uint64_t v151 = v76;
  uint64_t v77 = operator new(0xCuLL);
  uint64_t v149 = v77 + 3;
  uint64_t v150 = (char *)(v77 + 3);
  *(void *)uint64_t v77 = 0x120000001DLL;
  v77[2] = 5;
  uint64_t v148 = v77;
  sub_2953FC(v75, v75 + 4, (uint64_t)&v151);
  sub_2953FC(v75, v75 + 4, (uint64_t)&v148);
  unsigned __int8 v78 = atomic_load((unsigned __int8 *)&qword_499C78);
  BOOL v141 = v75;
  if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_499C78))
  {
    sub_2971C0(qword_499C60, (unsigned int **)v163, v151, (uint64_t)v152);
    __cxa_guard_release(&qword_499C78);
  }

  unsigned __int8 v79 = atomic_load((unsigned __int8 *)&qword_499C98);
  if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_499C98))
  {
    sub_2971C0(qword_499C80, (unsigned int **)v163, v148, (uint64_t)v149);
    __cxa_guard_release(&qword_499C98);
  }

  strcpy((char *)&v350, " papapap");
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v351) = 0;
  LOBYTE(v352) = 0;
  sub_238360(&v404, (__int128 *)&v350, 1LL);
  LODWORD(v406) = 3;
  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
  v407 = &v408;
  LODWORD(v408.__r_.__value_.__r.__words[2]) = 3;
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
  v410.__r_.__value_.__r.__words[0] = (std::string::size_type)qword_499C80;
  uint64_t v411 = 0LL;
  v410.__r_.__value_.__l.__cap_ = 0LL;
  v410.__r_.__value_.__l.__size_ = (std::string::size_type)&v410.__r_.__value_.__l.__cap_;
  strcpy((char *)&v398, " paplpap");
  v398.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v399) = 0;
  LOBYTE(v400) = 0;
  sub_238360(v412, (__int128 *)&v398, 1LL);
  LODWORD(v413) = 3;
  uint64_t v416 = 0LL;
  uint64_t v415 = 0LL;
  char v414 = &v415;
  int v417 = 3;
  uint64_t v419 = 0LL;
  uint64_t v418 = &v419;
  uint64_t v420 = 0LL;
  uint64_t v421 = qword_499C80;
  uint64_t v424 = 0LL;
  uint64_t v423 = 0LL;
  uint64_t v422 = &v423;
  strcpy((char *)&v391, " papBphp");
  v391.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_499B70;
  LOBYTE(v392) = 0;
  LOBYTE(v393) = 0;
  sub_238360(v425, (__int128 *)&v391, 1LL);
  int v426 = 3;
  uint64_t v429 = 0LL;
  uint64_t v428 = 0LL;
  __int128 v427 = &v428;
  int v430 = 3;
  uint64_t v432 = 0LL;
  id v431 = &v432;
  uint64_t v433 = 0LL;
  uint64_t v434 = qword_499C80;
  uint64_t v437 = 0LL;
  uint64_t v436 = 0LL;
  v435 = &v436;
  strcpy((char *)&__p, " papbphp");
  __p.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_499B70;
  LOBYTE(v386) = 0;
  LOBYTE(v387) = 0;
  sub_238360(v438, (__int128 *)&__p, 1LL);
  int v439 = dword_494280;
  sub_86550((uint64_t *)&v440, (uint64_t)&algn_494284[4]);
  int v443 = 3;
  uint64_t v445 = 0LL;
  char v444 = &v445;
  uint64_t v446 = 0LL;
  uint64_t v447 = qword_499C80;
  uint64_t v450 = 0LL;
  uint64_t v449 = 0LL;
  id v448 = &v449;
  strcpy((char *)&v377, " papoelp");
  uint64_t v378 = &qword_499B70;
  char v379 = 0;
  char v380 = 0;
  sub_238360(v451, &v377, 1LL);
  int v452 = 3;
  uint64_t v455 = 0LL;
  uint64_t v454 = 0LL;
  id v453 = &v454;
  int v456 = 3;
  uint64_t v459 = 0LL;
  uint64_t v458 = 0LL;
  uint64_t v457 = &v458;
  v460 = qword_499C80;
  uint64_t v463 = 0LL;
  uint64_t v462 = 0LL;
  unsigned __int8 v461 = &v462;
  strcpy((char *)&v369, " papkpsp");
  id v370 = &qword_499BC0;
  char v371 = 0;
  char v372 = 0;
  sub_238360(v464, &v369, 1LL);
  int v465 = 3;
  uint64_t v468 = 0LL;
  uint64_t v467 = 0LL;
  std::string v466 = &v467;
  int v469 = 3;
  uint64_t v472 = 0LL;
  uint64_t v471 = 0LL;
  v470 = &v471;
  uint64_t v473 = qword_499C60;
  uint64_t v476 = 0LL;
  uint64_t v475 = 0LL;
  id v474 = &v475;
  strcpy((char *)&v361, " paplunp");
  v362 = &qword_4A9200;
  char v363 = 0;
  char v364 = 0;
  sub_238360(v477, &v361, 1LL);
  int v478 = 3;
  v480[1] = 0LL;
  v480[0] = 0LL;
  id v479 = v480;
  int v481 = 3;
  uint64_t v483 = 0LL;
  v485 = 0LL;
  uint64_t v484 = 0LL;
  v482 = &v483;
  uint64_t v488 = 0LL;
  uint64_t v487 = 0LL;
  v486 = &v487;
  sub_238400(v147, (uint64_t)&v404, 7LL);
  std::string::size_type v140 = 0x7068704270617020LL;
  uint64_t v80 = 840LL;
  do
  {
    sub_F20B8(*(void **)&v403[v80]);
    sub_32C8C(*(void **)&v401[v80 - 8]);
    sub_32C8C(*(void **)((char *)&v398.__r_.__value_.__l.__data_ + v80));
    sub_68314(&v394[v80]);
    v80 -= 120LL;
  }

  while (v80);
  strcpy((char *)&v398, "tbmp pap");
  v398.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_499B70;
  LOBYTE(v399) = 0;
  LOBYTE(v400) = 0;
  sub_238360(&v404, (__int128 *)&v398, 1LL);
  LODWORD(v406) = 3;
  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
  v407 = &v408;
  LODWORD(v408.__r_.__value_.__r.__words[2]) = 3;
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
  v410.__r_.__value_.__r.__words[0] = (std::string::size_type)qword_499C80;
  uint64_t v411 = 0LL;
  v410.__r_.__value_.__l.__cap_ = 0LL;
  v410.__r_.__value_.__l.__size_ = (std::string::size_type)&v410.__r_.__value_.__l.__cap_;
  strcpy((char *)&v350, "ibmp pap");
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)&unk_499978;
  LOBYTE(v351) = 0;
  LOBYTE(v352) = 0;
  strcpy((char *)v353, "ptsp pap");
  uint64_t v354 = &qword_4A9200;
  char v355 = 0;
  char v356 = 0;
  sub_238360(v412, (__int128 *)&v350, 2LL);
  sub_2497D8((uint64_t)&v413, &dword_4943E0, (uint64_t)&dword_494460);
  int v417 = 3;
  uint64_t v419 = 0LL;
  uint64_t v418 = &v419;
  uint64_t v420 = 0LL;
  uint64_t v421 = qword_499C60;
  uint64_t v424 = 0LL;
  uint64_t v423 = 0LL;
  uint64_t v422 = &v423;
  strcpy((char *)&v391, "ibmp pap");
  v391.__r_.__value_.__l.__cap_ = (std::string::size_type)&unk_499978;
  LOBYTE(v392) = 0;
  LOBYTE(v393) = 0;
  sub_238360(v425, (__int128 *)&v391, 1LL);
  int v426 = 3;
  uint64_t v429 = 0LL;
  uint64_t v428 = 0LL;
  __int128 v427 = &v428;
  int v430 = 3;
  uint64_t v432 = 0LL;
  id v431 = &v432;
  uint64_t v433 = 0LL;
  uint64_t v434 = qword_499C60;
  uint64_t v437 = 0LL;
  uint64_t v436 = 0LL;
  v435 = &v436;
  qmemcpy(v139, "ilnp pap paplunp", sizeof(v139));
  strcpy((char *)&__p, "ilnp pap");
  __p.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v386) = 0;
  LOBYTE(v387) = 0;
  sub_238360(v438, (__int128 *)&__p, 1LL);
  int v439 = 3;
  uint64_t v442 = 0LL;
  uint64_t v441 = 0LL;
  uint64_t v440 = &v441;
  int v443 = 3;
  uint64_t v445 = 0LL;
  char v444 = &v445;
  uint64_t v446 = 0LL;
  uint64_t v447 = qword_499C60;
  uint64_t v450 = 0LL;
  uint64_t v449 = 0LL;
  id v448 = &v449;
  sub_238400(v146, (uint64_t)&v404, 4LL);
  uint64_t v81 = 480LL;
  do
  {
    sub_F20B8(*(void **)&v403[v81]);
    sub_32C8C(*(void **)&v401[v81 - 8]);
    sub_32C8C(*(void **)((char *)&v398.__r_.__value_.__l.__data_ + v81));
    sub_68314(&v394[v81]);
    v81 -= 120LL;
  }

  while (v81);
  strcpy((char *)&v398, " papapap");
  v398.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v399) = 0;
  LOBYTE(v400) = 0;
  strcpy(v401, "ibmp pap");
  uint64_t v402 = &unk_4999C8;
  v403[0] = 0;
  v403[8] = 0;
  sub_238360(&v404, (__int128 *)&v398, 2LL);
  LODWORD(v406) = 3;
  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
  v407 = &v408;
  LODWORD(v408.__r_.__value_.__r.__words[2]) = 3;
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
  v410.__r_.__value_.__r.__words[0] = (std::string::size_type)qword_499C80;
  uint64_t v411 = 0LL;
  v410.__r_.__value_.__l.__cap_ = 0LL;
  v410.__r_.__value_.__l.__size_ = (std::string::size_type)&v410.__r_.__value_.__l.__cap_;
  strcpy((char *)&v391, " paplpap");
  v391.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v392) = 0;
  LOBYTE(v393) = 0;
  strcpy(v394, "ibmp pap");
  uint64_t v395 = &unk_4999C8;
  char v396 = 0;
  char v397 = 0;
  sub_238360(v412, (__int128 *)&v391, 2LL);
  LODWORD(v413) = 3;
  uint64_t v416 = 0LL;
  uint64_t v415 = 0LL;
  char v414 = &v415;
  int v417 = 3;
  uint64_t v419 = 0LL;
  uint64_t v418 = &v419;
  uint64_t v420 = 0LL;
  uint64_t v421 = qword_499C80;
  uint64_t v424 = 0LL;
  uint64_t v423 = 0LL;
  uint64_t v422 = &v423;
  strcpy((char *)&__p, " papbphp");
  __p.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_499B70;
  LOBYTE(v386) = 0;
  LOBYTE(v387) = 0;
  strcpy((char *)v388, "tbmp pap");
  v388[2] = &qword_4A9200;
  char v389 = 0;
  char v390 = 0;
  sub_238360(v425, (__int128 *)&__p, 2LL);
  int v426 = 3;
  uint64_t v429 = 0LL;
  uint64_t v428 = 0LL;
  __int128 v427 = &v428;
  int v430 = 3;
  uint64_t v432 = 0LL;
  id v431 = &v432;
  uint64_t v433 = 0LL;
  uint64_t v434 = qword_499C80;
  uint64_t v437 = 0LL;
  uint64_t v436 = 0LL;
  v435 = &v436;
  *(void *)&__int128 v377 = v140;
  BYTE8(v377) = 0;
  uint64_t v378 = &qword_499B70;
  char v379 = 0;
  char v380 = 0;
  strcpy(v381, "ibmp pap");
  uint64_t v382 = &unk_4999C8;
  char v383 = 0;
  char v384 = 0;
  sub_238360(v438, &v377, 2LL);
  int v439 = 3;
  uint64_t v442 = 0LL;
  uint64_t v441 = 0LL;
  uint64_t v440 = &v441;
  int v443 = 3;
  uint64_t v445 = 0LL;
  char v444 = &v445;
  uint64_t v446 = 0LL;
  uint64_t v447 = qword_499C80;
  uint64_t v450 = 0LL;
  uint64_t v449 = 0LL;
  id v448 = &v449;
  strcpy((char *)&v369, " papbphp");
  id v370 = &qword_499B70;
  char v371 = 0;
  char v372 = 0;
  strcpy(v373, "ibmp pap");
  std::string::size_type v374 = &unk_4999C8;
  char v375 = 0;
  char v376 = 0;
  sub_238360(v451, &v369, 2LL);
  int v452 = 3;
  uint64_t v455 = 0LL;
  uint64_t v454 = 0LL;
  id v453 = &v454;
  int v456 = 3;
  uint64_t v459 = 0LL;
  uint64_t v458 = 0LL;
  uint64_t v457 = &v458;
  v460 = qword_499C80;
  uint64_t v463 = 0LL;
  uint64_t v462 = 0LL;
  unsigned __int8 v461 = &v462;
  strcpy((char *)&v361, " papoelp");
  v362 = &qword_4A9200;
  char v363 = 0;
  char v364 = 0;
  strcpy(v365, "ielp pap");
  v366 = &qword_4A9200;
  char v367 = 0;
  char v368 = 0;
  sub_238360(v464, &v361, 2LL);
  int v465 = 3;
  uint64_t v468 = 0LL;
  uint64_t v467 = 0LL;
  std::string v466 = &v467;
  int v469 = 3;
  uint64_t v472 = 0LL;
  uint64_t v471 = 0LL;
  v470 = &v471;
  uint64_t v473 = qword_499C80;
  uint64_t v476 = 0LL;
  uint64_t v475 = 0LL;
  id v474 = &v475;
  strcpy((char *)&v350, " papkpsp");
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_499BC0;
  LOBYTE(v351) = 0;
  LOBYTE(v352) = 0;
  strcpy((char *)v353, "ibmp pap");
  uint64_t v354 = (uint64_t *)&unk_4999C8;
  char v355 = 0;
  char v356 = 0;
  strcpy(v357, "ptsp pap");
  int v358 = &unk_4999C8;
  char v359 = 0;
  char v360 = 0;
  sub_238360(v477, (__int128 *)&v350, 3LL);
  int v478 = dword_494200;
  sub_86550((uint64_t *)&v479, (uint64_t)&algn_494204[4]);
  int v481 = 3;
  uint64_t v484 = 0LL;
  uint64_t v483 = 0LL;
  v482 = &v483;
  v485 = qword_499C60;
  uint64_t v488 = 0LL;
  uint64_t v487 = 0LL;
  v486 = &v487;
  strcpy((char *)&v342, " papkpsp");
  int v343 = &qword_499BC0;
  char v344 = 0;
  char v345 = 0;
  strcpy(v346, "ibmp pap");
  uint64_t v347 = &unk_4999C8;
  char v348 = 0;
  char v349 = 0;
  sub_238360(v489, &v342, 2LL);
  int v490 = 3;
  v492[1] = 0LL;
  v492[0] = 0LL;
  v491 = v492;
  int v493 = 3;
  v495[1] = 0LL;
  v495[0] = 0LL;
  v494 = v495;
  v495[2] = qword_499C60;
  v496[1] = 0LL;
  v496[0] = 0LL;
  v495[3] = v496;
  *(void *)&__int128 v333 = v139[1];
  BYTE8(v333) = 0;
  v334 = &qword_4A9200;
  char v335 = 0;
  char v336 = 0;
  uint64_t v337 = v139[0];
  char v338 = 0;
  uint64_t v339 = &qword_4A9200;
  char v340 = 0;
  char v341 = 0;
  sub_238360(v497, &v333, 2LL);
  int v498 = 3;
  v500[1] = 0LL;
  v500[0] = 0LL;
  __int128 v499 = v500;
  int v501 = 3;
  memset(v503, 0, 24);
  v502 = v503;
  v504[1] = 0LL;
  v504[0] = 0LL;
  v503[3] = v504;
  sub_238400(v145, (uint64_t)&v404, 9LL);
  uint64_t v82 = 1080LL;
  do
  {
    sub_F20B8(*(void **)&v403[v82]);
    sub_32C8C(*(void **)&v401[v82 - 8]);
    sub_32C8C(*(void **)((char *)&v398.__r_.__value_.__l.__data_ + v82));
    sub_68314(&v394[v82]);
    v82 -= 120LL;
  }

  while (v82);
  sub_2954FC((uint64_t *)&v377, (uint64_t)v147);
  sub_2954FC((uint64_t *)&v369, (uint64_t)v147);
  v350.__r_.__value_.__r.__words[0] = v140;
  v350.__r_.__value_.__s.__data_[8] = 0;
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_499B70;
  LOBYTE(v351) = 0;
  LOBYTE(v352) = 0;
  sub_238360(&v404, (__int128 *)&v350, 1LL);
  LODWORD(v406) = 3;
  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
  v407 = &v408;
  LODWORD(v408.__r_.__value_.__r.__words[2]) = 3;
  v410.__r_.__value_.__r.__words[0] = 0LL;
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
  uint64_t v411 = 0LL;
  v410.__r_.__value_.__l.__cap_ = 0LL;
  v410.__r_.__value_.__l.__size_ = (std::string::size_type)&v410.__r_.__value_.__l.__cap_;
  strcpy((char *)&v398, " papkpsp");
  v398.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_499C10;
  LOBYTE(v399) = 0;
  LOBYTE(v400) = 0;
  sub_238360(v412, (__int128 *)&v398, 1LL);
  LODWORD(v413) = 3;
  uint64_t v416 = 0LL;
  uint64_t v415 = 0LL;
  char v414 = &v415;
  int v417 = 3;
  uint64_t v421 = 0LL;
  uint64_t v420 = 0LL;
  uint64_t v419 = 0LL;
  uint64_t v418 = &v419;
  uint64_t v424 = 0LL;
  uint64_t v423 = 0LL;
  uint64_t v422 = &v423;
  v391.__r_.__value_.__r.__words[0] = v139[1];
  v391.__r_.__value_.__s.__data_[8] = 0;
  v391.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v392) = 0;
  LOBYTE(v393) = 0;
  sub_238360(v425, (__int128 *)&v391, 1LL);
  int v426 = 3;
  uint64_t v429 = 0LL;
  uint64_t v428 = 0LL;
  __int128 v427 = &v428;
  int v430 = 3;
  uint64_t v434 = 0LL;
  uint64_t v433 = 0LL;
  uint64_t v432 = 0LL;
  id v431 = &v432;
  uint64_t v437 = 0LL;
  uint64_t v436 = 0LL;
  v435 = &v436;
  sub_238400((uint64_t *)&v361, (uint64_t)&v404, 3LL);
  uint64_t v83 = 360LL;
  do
  {
    sub_F20B8(*(void **)&v403[v83]);
    sub_32C8C(*(void **)&v401[v83 - 8]);
    sub_32C8C(*(void **)((char *)&v398.__r_.__value_.__l.__data_ + v83));
    sub_68314(&v394[v83]);
    v83 -= 120LL;
  }

  while (v83);
  sub_2381A4((uint64_t *)&v342);
  strcpy((char *)&v350, "ikhp pap");
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v351) = 0;
  LOBYTE(v352) = 0;
  sub_238360(&v404, (__int128 *)&v350, 1LL);
  LODWORD(v406) = 3;
  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
  v407 = &v408;
  LODWORD(v408.__r_.__value_.__r.__words[2]) = 3;
  v410.__r_.__value_.__r.__words[0] = 0LL;
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
  uint64_t v411 = 0LL;
  v410.__r_.__value_.__l.__cap_ = 0LL;
  v410.__r_.__value_.__l.__size_ = (std::string::size_type)&v410.__r_.__value_.__l.__cap_;
  v398.__r_.__value_.__r.__words[0] = v139[0];
  v398.__r_.__value_.__s.__data_[8] = 0;
  v398.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v399) = 0;
  LOBYTE(v400) = 0;
  sub_238360(v412, (__int128 *)&v398, 1LL);
  LODWORD(v413) = 3;
  uint64_t v416 = 0LL;
  uint64_t v415 = 0LL;
  char v414 = &v415;
  int v417 = 3;
  uint64_t v421 = 0LL;
  uint64_t v420 = 0LL;
  uint64_t v419 = 0LL;
  uint64_t v418 = &v419;
  uint64_t v424 = 0LL;
  uint64_t v423 = 0LL;
  uint64_t v422 = &v423;
  sub_238400((uint64_t *)&v333, (uint64_t)&v404, 2LL);
  for (nuint64_t n = 0LL; nn != -30; nn -= 15LL)
  {
    sub_F20B8(*(void **)((char *)&v423 + nn * 8));
    sub_32C8C(*(void **)((char *)&v419 + nn * 8));
    sub_32C8C(*(void **)((char *)&v415 + nn * 8));
    sub_68314(&v412[nn]);
  }

  strcpy((char *)&v350, " papnipl");
  v350.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v351) = 0;
  LOBYTE(v352) = 0;
  sub_238360(&v404, (__int128 *)&v350, 1LL);
  LODWORD(v406) = 3;
  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
  v407 = &v408;
  LODWORD(v408.__r_.__value_.__r.__words[2]) = 3;
  v410.__r_.__value_.__r.__words[0] = 0LL;
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
  uint64_t v411 = 0LL;
  v410.__r_.__value_.__l.__cap_ = 0LL;
  v410.__r_.__value_.__l.__size_ = (std::string::size_type)&v410.__r_.__value_.__l.__cap_;
  strcpy((char *)&v398, " papniph");
  v398.__r_.__value_.__l.__cap_ = (std::string::size_type)&qword_4A9200;
  LOBYTE(v399) = 0;
  LOBYTE(v400) = 0;
  sub_238360(v412, (__int128 *)&v398, 1LL);
  LODWORD(v413) = 3;
  uint64_t v416 = 0LL;
  uint64_t v415 = 0LL;
  char v414 = &v415;
  int v417 = 3;
  uint64_t v421 = 0LL;
  uint64_t v420 = 0LL;
  uint64_t v419 = 0LL;
  uint64_t v418 = &v419;
  uint64_t v424 = 0LL;
  uint64_t v423 = 0LL;
  uint64_t v422 = &v423;
  sub_238400(v144, (uint64_t)&v404, 2LL);
  for (uint64_t i1 = 0LL; i1 != -30; i1 -= 15LL)
  {
    sub_F20B8(*(void **)((char *)&v423 + i1 * 8));
    sub_32C8C(*(void **)((char *)&v419 + i1 * 8));
    sub_32C8C(*(void **)((char *)&v415 + i1 * 8));
    sub_68314(&v412[i1]);
  }

  uint64_t v86 = 0LL;
  v142[0] = (uint64_t)v142;
  v142[1] = (uint64_t)v142;
  uint64_t v143 = 0LL;
  do
  {
    int v87 = *(_DWORD *)&aTelptfhpt2aptl[v86];
    *(void *)&__int128 v404 = &v404;
    *((void *)&v404 + 1) = &v404;
    v405 = 0LL;
    LODWORD(v406) = 3;
    *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
    v407 = &v408;
    LODWORD(v408.__r_.__value_.__r.__words[2]) = 3;
    *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
    v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
    v410.__r_.__value_.__r.__words[0] = 0LL;
    v410.__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v411 = 0LL;
    v410.__r_.__value_.__l.__size_ = (std::string::size_type)&v410.__r_.__value_.__l.__cap_;
    UInt32 v88 = (char *)operator new(0x38uLL);
    strcpy(v88 + 16, "ibmp pap");
    *((void *)v88 + 4) = &qword_4A9200;
    v88[40] = 0;
    v88[48] = 0;
    *(void *)UInt32 v88 = &v404;
    *((void *)v88 + 1) = &v404;
    *((void *)&v404 + 1) = v88;
    *(void *)&__int128 v404 = v88;
    v405 = (void *)(&dword_0 + 1);
    int v89 = operator new(0x38uLL);
    *((_DWORD *)v89 + 4) = v87;
    strcpy((char *)v89 + 20, " pap");
    *((void *)v89 + 4) = &qword_4A9200;
    *((_BYTE *)v89 + 40) = 0;
    *((_BYTE *)v89 + 48) = 0;
    *(void *)int v89 = v88;
    *((void *)v89 + 1) = &v404;
    *((void *)v88 + 1) = v89;
    *(void *)&__int128 v404 = v89;
    v405 = (void *)(&dword_0 + 2);
    __int128 v90 = sub_F1214((uint64_t)&v404);
    uint64_t v91 = v142[0];
    void *v90 = v142[0];
    v90[1] = v142;
    *(void *)(v91 + 8) = v90;
    v142[0] = (uint64_t)v90;
    ++v143;
    sub_F20B8((void *)v410.__r_.__value_.__l.__cap_);
    sub_32C8C((void *)v409.__r_.__value_.__l.__size_);
    sub_32C8C(v408.__r_.__value_.__l.__data_);
    sub_68314(&v404);
    v86 += 4LL;
  }

  while (v86 != 28);
  *(_OWORD *)&v350.__r_.__value_.__r.__words[1] = 0uLL;
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v350.__r_.__value_.__l.__size_;
  v353[0] = 0LL;
  uint64_t v352 = 0LL;
  uint64_t v351 = &v352;
  sub_2D3FC4((uint64_t **)&v350, 0x696D6466u, 1);
  sub_2D410C((uint64_t **)&v350, 0x696D6466u, 1);
  for (uint64_t i2 = 0LL; i2 != 20; i2 += 4LL)
  {
    unsigned int v93 = *(_DWORD *)&aOvpvivpvcgpvcv[i2];
    sub_2D3FC4((uint64_t **)&v350, v93, 0);
    sub_2D410C((uint64_t **)&v350, v93, 0);
  }

  sub_2D3FC4((uint64_t **)&v350, 0x76726367u, 0);
  sub_2D3FC4((uint64_t **)&v350, 0x76726F6Du, 0);
  sub_2D3FC4((uint64_t **)&v350, 0x766D7367u, 0);
  sub_2D410C((uint64_t **)&v350, 0x76726367u, 0);
  sub_2D410C((uint64_t **)&v350, 0x76726F6Du, 0);
  sub_2D410C((uint64_t **)&v350, 0x766D7367u, 0);
  sub_249A14(&v398, &v350);
  sub_249D04(&v399, &v351);
  v391.__r_.__value_.__r.__words[0] = 0x7061707770617061LL;
  sub_7A22C((uint64_t)&v404, (unsigned int *)&v391, 2LL);
  sub_2D4664((uint64_t **)&v398, (uint64_t)&v404);
  sub_32C8C(*((void **)&v404 + 1));
  v391.__r_.__value_.__r.__words[0] = 0x7068704270617061LL;
  sub_7A22C((uint64_t)&v404, (unsigned int *)&v391, 2LL);
  sub_2D44EC((uint64_t **)&v398, 0x696D6466u, (uint64_t)&v404);
  sub_32C8C(*((void **)&v404 + 1));
  v391.__r_.__value_.__r.__words[0] = 0x706C656F706C6569LL;
  sub_7A22C((uint64_t)&v404, (unsigned int *)&v391, 2LL);
  sub_2D44EC((uint64_t **)&v398, 0x696D7672u, (uint64_t)&v404);
  sub_32C8C(*((void **)&v404 + 1));
  LODWORD(v391.__r_.__value_.__l.__data_) = 1885433953;
  sub_7A22C((uint64_t)&v404, (unsigned int *)&v391, 1LL);
  sub_2D44EC((uint64_t **)&v398, 0x76726367u, (uint64_t)&v404);
  sub_32C8C(*((void **)&v404 + 1));
  LODWORD(v391.__r_.__value_.__l.__data_) = 1885433953;
  sub_7A22C((uint64_t)&v404, (unsigned int *)&v391, 1LL);
  sub_2D44EC((uint64_t **)&v398, 0x76687374u, (uint64_t)&v404);
  sub_32C8C(*((void **)&v404 + 1));
  v391.__r_.__value_.__r.__words[0] = 0x7061707770617061LL;
  sub_7A22C((uint64_t)&v404, (unsigned int *)&v391, 2LL);
  sub_2D44EC((uint64_t **)&v398, 0x65637620u, (uint64_t)&v404);
  sub_32C8C(*((void **)&v404 + 1));
  v391.__r_.__value_.__r.__words[0] = 0x7061707770617061LL;
  sub_7A22C((uint64_t)&v404, (unsigned int *)&v391, 2LL);
  sub_2D44EC((uint64_t **)&v398, 0x6563696Du, (uint64_t)&v404);
  sub_32C8C(*((void **)&v404 + 1));
  sub_249A14(&v391, &v398);
  sub_249D04(&v392, &v399);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  v388[0] = 0LL;
  uint64_t v387 = 0LL;
  v386 = &v387;
  qword_48F0B0 = 0LL;
  qword_48F0B8 = 0LL;
  qword_48F0C0 = 0LL;
  qword_48F0A8 = (uint64_t)&qword_48F0B0;
  qword_48F0C8 = 0LL;
  qword_48F0D0 = 0LL;
  qword_48F0E8 = 0LL;
  qword_48F0E0 = 0LL;
  qword_48F0D8 = (uint64_t)&qword_48F0E0;
  qword_48F0F8 = 0LL;
  qword_48F100 = 0LL;
  qword_48F110 = 0LL;
  qword_48F0F0 = &qword_48F0F8;
  unk_48F108 = &qword_48F110;
  qword_48F130 = 0LL;
  qword_48F128 = 0LL;
  qword_48F118 = 0LL;
  qword_48F120 = &qword_48F128;
  LOBYTE(qword_48F138) = 0;
  BYTE4(qword_48F138) = 0;
  qword_48F150 = 0LL;
  qword_48F148 = 0LL;
  qword_48F140 = (uint64_t)&qword_48F148;
  sub_2D202C((uint64_t)&v404, (uint64_t)v147, 1668510820, 0, 0, 1, 1, 0, 0);
  sub_F1540(0x63736176u, 1668505974, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D1F40((uint64_t)&v404, (uint64_t)v146, &v350, 1668510820, 0, 1, 0, 1, 1, 0);
  sub_F1540(0x63726563u, 1668441443, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D1F40((uint64_t)&v404, (uint64_t)v145, &v398, 1668510820, 0, 1, 1, 1, 0, 0);
  sub_F1540(0x63706172u, 1668309362, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D202C((uint64_t)&v404, (uint64_t)&v377, 1668510820, 0, 0, 1, 0, 1, 0);
  sub_F1540(0x63616C6Du, 1667329133, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D1F40((uint64_t)&v404, (uint64_t)&v369, &v391, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x63737072u, 1668509810, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D1F40((uint64_t)&v404, (uint64_t)&v361, &__p, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x6369736Fu, 1667855215, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D202C((uint64_t)&v404, (uint64_t)&v342, 1668510820, 0, 0, 1, 1, 0, 1);
  sub_F1540(0x636D7573u, 1668117875, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D202C((uint64_t)&v404, (uint64_t)&v333, 1668510820, 0, 1, 0, 1, 0, 1);
  sub_F1540(0x63686177u, 1667785079, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D202C((uint64_t)&v404, (uint64_t)v142, 1668510820, 0, 1, 0, 0, 1, 1);
  sub_F1540(0x63737263u, 1668510307, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_2D202C((uint64_t)&v404, (uint64_t)v144, 1668510820, 0, 1, 0, 0, 1, 1);
  sub_F1540(0x63696E6Au, 1667853930, (uint64_t)&v404);
  sub_F16A4((void *)v409.__r_.__value_.__l.__size_);
  sub_F16E4((void *)v408.__r_.__value_.__l.__size_);
  sub_F1724((uint64_t *)&v404);
  sub_F16A4(v387);
  sub_F16E4((void *)__p.__r_.__value_.__l.__size_);
  sub_F16A4(v393);
  sub_F16E4((void *)v391.__r_.__value_.__l.__size_);
  sub_F16A4(v400);
  sub_F16E4((void *)v398.__r_.__value_.__l.__size_);
  sub_F16A4(v352);
  sub_F16E4((void *)v350.__r_.__value_.__l.__size_);
  sub_F1724(v142);
  sub_F1724(v144);
  sub_F1724((uint64_t *)&v333);
  sub_F1724((uint64_t *)&v342);
  sub_F1724((uint64_t *)&v361);
  sub_F1724((uint64_t *)&v369);
  sub_F1724((uint64_t *)&v377);
  sub_F1724(v145);
  sub_F1724(v146);
  sub_F1724(v147);
  if (v148)
  {
    uint64_t v149 = v148;
    operator delete(v148);
  }

  if (v151)
  {
    char v152 = v151;
    operator delete(v151);
  }

  operator delete(v141);
  if (v163[0]) {
    operator delete(v163[0]);
  }
  sub_32C8C(v167);
  if (v165)
  {
    uint64_t v166 = v165;
    operator delete(v165);
  }

  if (v164[0])
  {
    v164[1] = v164[0];
    operator delete(v164[0]);
  }

  sub_32C8C(v171);
  if (v169)
  {
    uint64_t v170 = v169;
    operator delete(v169);
  }

  if (v168[0])
  {
    v168[1] = v168[0];
    operator delete(v168[0]);
  }

  sub_32C8C(v175);
  if (v173)
  {
    id v174 = v173;
    operator delete(v173);
  }

  if (v172[0])
  {
    v172[1] = v172[0];
    operator delete(v172[0]);
  }

  sub_32C8C(v179);
  if (v177)
  {
    int v178 = v177;
    operator delete(v177);
  }

  if (v176[0])
  {
    v176[1] = v176[0];
    operator delete(v176[0]);
  }

  sub_32C8C(v183);
  if (v181)
  {
    uint64_t v182 = v181;
    operator delete(v181);
  }

  if (v180[0])
  {
    v180[1] = v180[0];
    operator delete(v180[0]);
  }

  sub_32C8C(v187);
  if (v185)
  {
    double v186 = v185;
    operator delete(v185);
  }

  if (v184[0])
  {
    v184[1] = v184[0];
    operator delete(v184[0]);
  }

  if (v188[0]) {
    operator delete(v188[0]);
  }
  if (v189[0]) {
    operator delete(v189[0]);
  }
  if (v190[0]) {
    operator delete(v190[0]);
  }
  if (v191[0]) {
    operator delete(v191[0]);
  }
  sub_83134((void *)v197);
  char v94 = (void *)v196;
  *(void *)&__int128 v196 = 0LL;
  if (v94) {
    operator delete(v94);
  }
  sub_83134((void *)v203);
  char v95 = (void *)v202;
  *(void *)&__int128 v202 = 0LL;
  if (v95) {
    operator delete(v95);
  }
  sub_82FFC((uint64_t)v291);
  sub_32C8C(v212[0]);
  if (*((void *)&v207 + 1))
  {
    *(void *)&__int128 v208 = *((void *)&v207 + 1);
    operator delete(*((void **)&v207 + 1));
  }

  if ((void)v206)
  {
    *((void *)&v206 + 1) = v206;
    operator delete((void *)v206);
  }

  return sub_33EACC((uint64_t)v331, v96, v97, v98, v99, v100, v101, v102);
}

void sub_293B40(_Unwind_Exception *a1)
{
}

std::string *sub_29478C(std::string *result)
{
  if (result->__r_.__value_.__r.__words[0] == result->__r_.__value_.__l.__size_)
  {
    unsigned __int8 v1 = result;
    if (result != (std::string *)&xmmword_497C60) {
      sub_17B380( (uint64_t)result,  (char **)xmmword_497C60,  *((char ***)&xmmword_497C60 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_497C60 + 1) - xmmword_497C60) >> 3));
    }
    std::string::operator=(v1 + 1, (const std::string *)((char *)&xmmword_497C70 + 8));
    char v2 = byte_497C94;
    LODWORD(v1[2].__r_.__value_.__l.__data_) = dword_497C90;
    v1[2].__r_.__value_.__s.__data_[4] = v2;
    sub_17B4F4((std::string *)((char *)v1 + 56), (std::string *)&byte_497C98);
    LODWORD(v1[5].__r_.__value_.__r.__words[2]) = dword_497CE8;
    uint64_t result = std::string::operator=(v1 + 6, (const std::string *)&xmmword_497CF0);
    if (v1 != (std::string *)&xmmword_497C60)
    {
      sub_17B57C( (uint64_t)&v1[7],  (uint64_t *)qword_497D08,  (uint64_t *)xmmword_497D10,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_497D10 - qword_497D08) >> 3));
      return (std::string *)sub_17B57C( (uint64_t)&v1[8],  (uint64_t *)qword_497D20,  qword_497D28,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)qword_497D28 - qword_497D20) >> 3));
    }
  }

  return result;
}

uint64_t sub_29487C()
{
  qword_499B28 = 0LL;
  qword_499B20 = (uint64_t)&qword_499B28;
  qword_499B40 = 0LL;
  qword_499B30 = 0LL;
  unk_499B38 = &qword_499B40;
  qword_499B60 = 0LL;
  qword_499B58 = 0LL;
  qword_499B48 = 0LL;
  unk_499B50 = &qword_499B58;
  return sub_2D5228((uint64_t **)&qword_499B20, (uint64_t)&qword_4A9190, qword_499790);
}

void sub_2948D8(_Unwind_Exception *a1)
{
}

void sub_2948F0()
{
  qword_499B78 = 0LL;
  qword_499B70 = (uint64_t)&qword_499B78;
  qword_499B90 = 0LL;
  qword_499B80 = 0LL;
  unk_499B88 = &qword_499B90;
  qword_499BB0 = 0LL;
  qword_499BA8 = 0LL;
  qword_499B98 = 0LL;
  unk_499BA0 = &qword_499BA8;
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)&qword_4A9190, qword_499790);
  uint64_t v29 = 0x696D646600000001LL;
  uint64_t v30 = 2LL;
  int v31 = 0;
  int v32 = 0;
  unsigned __int8 v34 = 0LL;
  uint64_t v35 = 0LL;
  unsigned __int8 v33 = 0LL;
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)&v29, qword_499A18);
  sub_2D6400((uint64_t)&qword_499B70, (int *)&qword_4A9190, (uint64_t)"", 0);
  uint64_t v29 = 0x696D646600000001LL;
  uint64_t v30 = 1LL;
  int v31 = 0;
  int v32 = 0;
  unsigned __int8 v34 = 0LL;
  uint64_t v35 = 0LL;
  unsigned __int8 v33 = 0LL;
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)&v29, qword_4997A0);
  uint64_t v29 = 0x696D646600000001LL;
  uint64_t v30 = 3LL;
  int v31 = 0;
  int v32 = 0;
  unsigned __int8 v34 = 0LL;
  uint64_t v35 = 0LL;
  unsigned __int8 v33 = 0LL;
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)&v29, qword_499A28);
  uint64_t v29 = 0x6D6F767000000001LL;
  uint64_t v30 = 1LL;
  int v31 = 0;
  int v32 = 0;
  unsigned __int8 v34 = 0LL;
  uint64_t v35 = 0LL;
  unsigned __int8 v33 = 0LL;
  sub_2D5F80((uint64_t **)&qword_499B70, &v29, qword_4997B0);
  uint64_t v29 = 0x6D6F767000000001LL;
  uint64_t v30 = 3LL;
  int v31 = 0;
  int v32 = 0;
  unsigned __int8 v34 = 0LL;
  uint64_t v35 = 0LL;
  unsigned __int8 v33 = 0LL;
  sub_2D5F80((uint64_t **)&qword_499B70, &v29, qword_499A38);
  sub_DB44C((uint64_t)&v29, 1, 1768776806, 1633759844);
  DWORD2(v23[0]) = 0;
  *(void *)&v23[0] = 2LL;
  sub_17E44C((uint64_t)v26, 1768776806, v23, 1633759844);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)&v29, qword_4997C0);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)v26, qword_499A48);
  sub_2D6400((uint64_t)&qword_499B70, (int *)&v29, (uint64_t)&unk_402210, 0);
  sub_2D6400((uint64_t)&qword_499B70, v26, (uint64_t)&unk_402210, 0);
  sub_2D6400((uint64_t)&qword_499B70, (int *)&v29, (uint64_t)&unk_402240, 1);
  sub_2D6400((uint64_t)&qword_499B70, v26, (uint64_t)&unk_402240, 1);
  DWORD2(v20[0]) = 0;
  *(void *)&v20[0] = 1LL;
  sub_17E44C((uint64_t)v23, 1768776806, v20, 1633759844);
  DWORD2(v17[0]) = 0;
  *(void *)&v17[0] = 3LL;
  sub_17E44C((uint64_t)v20, 1768776806, v17, 1633759844);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)v23, qword_4997C8);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)v20, qword_499A50);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v23, (uint64_t)&unk_402210, 0);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v20, (uint64_t)&unk_402210, 0);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v23, (uint64_t)&unk_402240, 1);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v20, (uint64_t)&unk_402240, 1);
  DWORD2(v14[0]) = 0;
  *(void *)&v14[0] = 1LL;
  sub_17E44C((uint64_t)v17, 1836021360, v14, 1633759844);
  DWORD2(v11[0]) = 0;
  *(void *)&v11[0] = 3LL;
  sub_17E44C((uint64_t)v14, 1836021360, v11, 1633759844);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)v17, qword_4997D0);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)v14, qword_499A58);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v17, (uint64_t)&unk_402210, 0);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v14, (uint64_t)&unk_402210, 0);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v17, (uint64_t)&unk_402240, 1);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v14, (uint64_t)&unk_402240, 1);
  sub_DB44C((uint64_t)v11, 1, 1751212899, 1634231920);
  LODWORD(v3) = 0;
  uint64_t v2 = 2LL;
  sub_17E44C((uint64_t)v8, 1751212899, &v2, 1634231920);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)v11, qword_4997C0);
  sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)v8, qword_499A48);
  sub_2D6400((uint64_t)&qword_499B70, (int *)v11, (uint64_t)&unk_402210, 0);
  sub_2D6400((uint64_t)&qword_499B70, v8, (uint64_t)&unk_402210, 0);
  for (uint64_t i = 0LL; i != 20; i += 4LL)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv[i];
    LODWORD(v2) = 1;
    HIDWORD(v2) = v1;
    __int128 v3 = *(_OWORD *)sub_2FC95C();
    int v4 = 0;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v5 = 0LL;
    sub_2D5228((uint64_t **)&qword_499B70, (uint64_t)&v2, (uint64_t)&unk_4A7CD8);
    LODWORD(v2) = 1;
    HIDWORD(v2) = v1;
    __int128 v3 = *(_OWORD *)sub_2FC95C();
    int v4 = 0;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v5 = 0LL;
    sub_2D6400((uint64_t)&qword_499B70, (int *)&v2, (uint64_t)"", 0);
  }

  if (__p)
  {
    unsigned __int8 v10 = __p;
    operator delete(__p);
  }

  if (v12)
  {
    unsigned __int8 v13 = v12;
    operator delete(v12);
  }

  if (v15)
  {
    unsigned __int8 v16 = v15;
    operator delete(v15);
  }

  if (v18)
  {
    unsigned __int8 v19 = v18;
    operator delete(v18);
  }

  if (v21)
  {
    unsigned __int8 v22 = v21;
    operator delete(v21);
  }

  if (v24)
  {
    unsigned __int8 v25 = v24;
    operator delete(v24);
  }

  if (v27)
  {
    unsigned __int8 v28 = v27;
    operator delete(v27);
  }

  if (v33)
  {
    unsigned __int8 v34 = v33;
    operator delete(v33);
  }

void sub_294F38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a56) {
    operator delete(a56);
  }
  uint64_t v59 = *(void **)(v57 - 176);
  if (v59)
  {
    *(void *)(v57 - 168) = v59;
    operator delete(v59);
  }

  double v60 = *(void **)(v57 - 120);
  if (v60)
  {
    *(void *)(v57 - 112) = v60;
    operator delete(v60);
  }

  sub_F2A64((void **)&qword_499B70);
  _Unwind_Resume(a1);
}

uint64_t sub_295044()
{
  qword_499BC8 = 0LL;
  qword_499BC0 = (uint64_t)&qword_499BC8;
  qword_499BE0 = 0LL;
  qword_499BD0 = 0LL;
  unk_499BD8 = &qword_499BE0;
  qword_499C00 = 0LL;
  qword_499BF8 = 0LL;
  qword_499BE8 = 0LL;
  unk_499BF0 = &qword_499BF8;
  sub_2D5228((uint64_t **)&qword_499BC0, (uint64_t)&qword_4A9190, qword_499660);
  uint64_t v3 = 0x6D736D7400000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_499BC0, (uint64_t)&v3, qword_499690);
  uint64_t v3 = 0x6D6F767000000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_499BC0, (uint64_t)&v3, qword_4996C0);
  uint64_t v3 = 0x73706B6E00000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_499BC0, (uint64_t)&v3, qword_4996A0);
  uint64_t v3 = 0x766C737300000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_499BC0, (uint64_t)&v3, qword_4996B0);
  sub_2D6400((uint64_t)&qword_499BC0, (int *)&qword_4A9190, (uint64_t)&dword_499948, 0);
  uint64_t v3 = 0x7261772000000001LL;
  __int128 v4 = *(_OWORD *)sub_2FC95C();
  int v5 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_2D5228((uint64_t **)&qword_499BC0, (uint64_t)&v3, qword_499680);
  if (sub_14D9C8())
  {
    uint64_t v3 = 0x7261772000000001LL;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    sub_2D6400((uint64_t)&qword_499BC0, (int *)&v3, (uint64_t)&unk_499918, 0);
  }

  for (uint64_t i = 0LL; i != 20; i += 4LL)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv[i];
    LODWORD(v3) = 1;
    HIDWORD(v3) = v1;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    sub_2D5228((uint64_t **)&qword_499BC0, (uint64_t)&v3, qword_4996D0);
    LODWORD(v3) = 1;
    HIDWORD(v3) = v1;
    __int128 v4 = *(_OWORD *)sub_2FC95C();
    int v5 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t result = sub_2D6400((uint64_t)&qword_499BC0, (int *)&v3, (uint64_t)&unk_499918, 0);
  }

  return result;
}

void sub_2952F8(_Unwind_Exception *a1)
{
}

uint64_t sub_295350()
{
  qword_499C18 = 0LL;
  qword_499C10 = (uint64_t)&qword_499C18;
  qword_499C30 = 0LL;
  qword_499C20 = 0LL;
  unk_499C28 = &qword_499C30;
  qword_499C50 = 0LL;
  qword_499C48 = 0LL;
  qword_499C38 = 0LL;
  unk_499C40 = &qword_499C48;
  sub_2D5228((uint64_t **)&qword_499C10, (uint64_t)&qword_4A9190, qword_499670);
  sub_2D6A60((uint64_t)&qword_499C10, (int *)&qword_4A9190, 2);
  return sub_2D6400((uint64_t)&qword_499C10, (int *)&qword_4A9190, (uint64_t)&dword_499948, 0);
}

void sub_2953E4(_Unwind_Exception *a1)
{
}

void sub_2953FC(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    uint64_t v6 = *(_DWORD **)(a3 + 8);
    do
    {
      unint64_t v7 = *(void *)(a3 + 16);
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v9 = *(_DWORD **)a3;
        uint64_t v10 = ((uint64_t)v6 - *(void *)a3) >> 2;
        unint64_t v11 = v10 + 1;
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v13 = (unint64_t)sub_7A890(v13);
          uint64_t v9 = *(_DWORD **)a3;
          uint64_t v6 = *(_DWORD **)(a3 + 8);
        }

        else
        {
          uint64_t v14 = 0LL;
        }

        unsigned __int8 v15 = (_DWORD *)(v13 + 4 * v10);
        *unsigned __int8 v15 = *v5;
        uint64_t v8 = v15 + 1;
        while (v6 != v9)
        {
          int v16 = *--v6;
          *--unsigned __int8 v15 = v16;
        }

        *(void *)a3 = v15;
        *(void *)(a3 + 8) = v8;
        *(void *)(a3 + 16) = v13 + 4 * v14;
        if (v9) {
          operator delete(v9);
        }
      }

      else
      {
        _DWORD *v6 = *v5;
        uint64_t v8 = v6 + 1;
      }

      *(void *)(a3 + 8) = v8;
      ++v5;
      uint64_t v6 = v8;
    }

    while (v5 != a2);
  }

uint64_t *sub_2954FC(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    int v5 = sub_F1214(i + 16);
    uint64_t v6 = *a1;
    *int v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }

  return a1;
}

void sub_29556C(_Unwind_Exception *a1)
{
}

void sub_295580(void *a1, unsigned __int8 *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2[128])
  {
    int v3 = a2[73];
    if (a2[73]) {
      int v3 = a2[72];
    }
    if (a2[77])
    {
      int v4 = a2[76];
      if (v3) {
        goto LABEL_6;
      }
    }

    else
    {
      int v4 = 0;
      if (v3)
      {
LABEL_6:
        int v5 = operator new(4uLL);
        *int v5 = 15;
        uint64_t v6 = (char *)(v5 + 1);
        *a1 = v5;
        a1[1] = v5 + 1;
        a1[2] = v5 + 1;
        if (!v4) {
          goto LABEL_12;
        }
LABEL_11:
        unint64_t v7 = a1 + 1;
        uint64_t v8 = v6;
        goto LABEL_16;
      }
    }

    if (v4)
    {
      uint64_t v6 = 0LL;
      goto LABEL_11;
    }
  }

void sub_29691C(_Unwind_Exception *a1)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void *sub_2969BC(int a1)
{
  if (a1 > 1668505973)
  {
    if (a1 <= 1668703083)
    {
      if (a1 != 1668505974)
      {
        if (a1 == 1668509810)
        {
          unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_499DA0);
          if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_499DA0)) {
            return qword_499D88;
          }
          *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4023D4;
          *(_OWORD *)&buf[16] = unk_4023E4;
          __int128 v18 = xmmword_4023F4;
          sub_F1194(qword_499D88, buf, 0xCuLL);
          uint64_t v8 = qword_499D88;
          unsigned __int8 v9 = &qword_499DA0;
          goto LABEL_40;
        }

        if (a1 != 1668576377) {
          goto LABEL_41;
        }
        goto LABEL_22;
      }

void sub_296E6C(_Unwind_Exception *a1)
{
}

std::string *sub_296EEC(std::string *a1, unsigned int **a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[", 1uLL);
  unsigned __int8 v4 = *a2;
  while (v4 != a2[1])
  {
    unsigned int v6 = *v4++;
    uint64_t v5 = v6;
    unsigned __int8 v7 = "????";
    if (v6 <= 0x1E) {
      unsigned __int8 v7 = off_47A698[v5];
    }
    sub_7D084(__p, v7);
    if ((v12 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((v12 & 0x80u) == 0) {
      std::string::size_type v9 = v12;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    std::string::append(a1, (const std::string::value_type *)v8, v9);
    if (v4 == a2[1]) {
      break;
    }
    std::string::append(a1, ", ", 2uLL);
  }

  return std::string::append(a1, "]", 1uLL);
}

void sub_296FF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_297030(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  if (*a2 - 3 >= 0x13 && (v3 > 0x1E || ((1 << v3) & 0x4F800003) == 0)) {
    return 0LL;
  }
  unsigned int v6 = *(_DWORD **)a1;
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    while (*v6 != v3)
    {
      if (++v6 == v5)
      {
        unsigned int v6 = *(_DWORD **)(a1 + 8);
        break;
      }
    }
  }

  if (v6 != v5) {
    return 0LL;
  }
  uint64_t v8 = sub_138E8(20);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    std::string::size_type v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *a2;
        else {
          unint64_t v11 = off_47A698[v10];
        }
        sub_7D084(__p, v11);
        if (v14 >= 0) {
          unsigned __int8 v12 = __p;
        }
        else {
          unsigned __int8 v12 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        char v16 = "AlternateVAD.cpp";
        __int16 v17 = 1024;
        int v18 = 1407;
        __int16 v19 = 2080;
        int v20 = v12;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removing %s", buf, 0x1Cu);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 1LL;
}

void sub_2971C0(uint64_t *a1, unsigned int **a2, const void *a3, uint64_t a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v463 = 0LL;
  __int128 v462 = 0uLL;
  sub_F10CC(&v462, a3, a4, (a4 - (uint64_t)a3) >> 2);
  uint64_t v6 = sub_138E8(20);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    unsigned __int8 v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        sub_296EEC((std::string *)__p, (unsigned int **)&v462);
        uint64_t v8 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v473 = "AlternateVAD.cpp";
        __int16 v474 = 1024;
        int v475 = 1362;
        __int16 v476 = 2080;
        v477 = v8;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Removing Unsupported Alternate VAD specification types from %s",  buf,  0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }

  uint64_t v9 = sub_138E8(20);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    uint64_t v10 = *(os_log_s **)v9;
    if (*(void *)v9)
    {
      if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
      {
        sub_296EEC((std::string *)__p, a2);
        unint64_t v11 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v473 = "AlternateVAD.cpp";
        __int16 v474 = 1024;
        int v475 = 1363;
        __int16 v476 = 2080;
        v477 = v11;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Supported Alternate VAD specification types are: %s",  buf,  0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }

  unint64_t v13 = (unsigned int *)*((void *)&v462 + 1);
  unsigned __int8 v12 = (unsigned int *)v462;
  if ((void)v462 != *((void *)&v462 + 1))
  {
    while ((sub_297030((uint64_t)a2, v12) & 1) == 0)
    {
      if (++v12 == v13) {
        goto LABEL_29;
      }
    }

    if (v12 != v13)
    {
      for (uint64_t i = v12 + 1; i != v13; ++i)
      {
      }
    }
  }

  if (v12 != v13) {
    *((void *)&v462 + 1) = v12;
  }
LABEL_29:
  uint64_t v15 = sub_138E8(20);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    char v16 = *(os_log_s **)v15;
    if (*(void *)v15)
    {
      if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
      {
        sub_296EEC((std::string *)__p, (unsigned int **)&v462);
        __int16 v17 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v473 = "AlternateVAD.cpp";
        __int16 v474 = 1024;
        int v475 = 1418;
        __int16 v476 = 2080;
        v477 = v17;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resulting Alternate VAD specification types: %s",  buf,  0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }

  __int128 v461 = v462;
  __int128 v464 = v462;
  uint64_t v465 = v463;
  uint64_t v463 = 0LL;
  __int128 v462 = 0uLL;
  int v18 = (os_log_t *)sub_138E8(20);
  __int16 v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
  {
    sub_296EEC((std::string *)__p, (unsigned int **)&v464);
    int v20 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v473 = "AlternateVAD.cpp";
    __int16 v474 = 1024;
    int v475 = 1427;
    __int16 v476 = 2080;
    v477 = v20;
    _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "%25s:%-5d Creating alternate vad specification for %s", buf, 0x1Cu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  unint64_t v21 = (_DWORD *)v461;
  if ((void)v461 != *((void *)&v461 + 1))
  {
    unsigned __int8 v22 = a1 + 1;
    unsigned __int8 v23 = a1 + 2;
    while (2)
    {
      switch(*v21)
      {
        case 0:
          sub_29F968((uint64_t)buf, 0);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v81 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v81 <= v73 + 1) {
            unint64_t v81 = v73 + 1;
          }
          else {
            unint64_t v75 = v81;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 1:
          sub_29F968((uint64_t)buf, 1);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v82 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v82 <= v73 + 1) {
            unint64_t v82 = v73 + 1;
          }
          else {
            unint64_t v75 = v82;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 2:
          unsigned __int8 v40 = atomic_load((unsigned __int8 *)&qword_499FE0);
          if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_499FE0))
          {
            byte_499FD8 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4;
            __cxa_guard_release(&qword_499FE0);
          }

          if (byte_499FD8)
          {
            if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 4)
            {
              uint64_t v423 = (os_log_t *)sub_138E8(13);
              uint64_t v424 = *v423;
              if (*v423 && os_log_type_enabled(*v423, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = 788;
                _os_log_impl( &dword_0,  v424,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
              }

              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }

            unsigned __int8 v41 = atomic_load((unsigned __int8 *)&qword_49A360);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_49A360))
            {
              LODWORD(v486[0]) = 1885889645;
              sub_1873F8(&v499, v486, 1uLL);
              *(void *)std::string __p = &off_47A078;
              *(void *)&__p[24] = __p;
              v509[0] = &off_47A0C0;
              __int16 v510 = v509;
              v507[0] = &off_47A108;
              uint64_t v508 = v507;
              __int128 v504 = 0LL;
              v505[0] = &off_47A150;
              v506 = v505;
              sub_29F540( (uint64_t)&unk_49A1A8,  2,  (uint64_t)&v499,  1,  1987279212,  1668505974,  1986818931,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
              uint64_t v233 = v504;
              if (v504 == v503)
              {
                uint64_t v234 = 4LL;
                uint64_t v233 = v503;
LABEL_1177:
                (*v233)[v234]();
              }

              else if (v504)
              {
                uint64_t v234 = 5LL;
                goto LABEL_1177;
              }

              unint64_t v357 = v506;
              if (v506 == v505)
              {
                uint64_t v358 = 4LL;
                unint64_t v357 = v505;
LABEL_1182:
                (*(void (**)(void))(*v357 + 8 * v358))();
              }

              else if (v506)
              {
                uint64_t v358 = 5LL;
                goto LABEL_1182;
              }

              char v359 = v508;
              if (v508 == v507)
              {
                uint64_t v360 = 4LL;
                char v359 = v507;
LABEL_1187:
                (*(void (**)(void))(*v359 + 8 * v360))();
              }

              else if (v508)
              {
                uint64_t v360 = 5LL;
                goto LABEL_1187;
              }

              __int128 v361 = v510;
              if (v510 == v509)
              {
                uint64_t v362 = 4LL;
                __int128 v361 = v509;
LABEL_1192:
                (*(void (**)(void))(*v361 + 8 * v362))();
              }

              else if (v510)
              {
                uint64_t v362 = 5LL;
                goto LABEL_1192;
              }

              char v363 = *(void **)&__p[24];
              if (*(_BYTE **)&__p[24] == __p)
              {
                uint64_t v364 = 4LL;
                char v363 = __p;
LABEL_1197:
                (*(void (**)(void))(*v363 + 8 * v364))();
              }

              else if (*(void *)&__p[24])
              {
                uint64_t v364 = 5LL;
                goto LABEL_1197;
              }

              if (v499)
              {
                unint64_t v500 = v499;
                operator delete(v499);
              }

              __cxa_guard_release(&qword_49A360);
            }

            sub_71648((uint64_t)buf, (uint64_t)&unk_49A1A8);
            goto LABEL_348;
          }

          unsigned __int8 v98 = atomic_load((unsigned __int8 *)&qword_49A1A0);
          if ((v98 & 1) != 0 || !__cxa_guard_acquire(&qword_49A1A0)) {
            goto LABEL_347;
          }
          v486[0] = 0x7073706B70687077LL;
          sub_1873F8(&v499, v486, 2uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A198;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_499FE8,  2,  (uint64_t)&v499,  1,  1987279212,  1668505974,  1986818931,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          int v243 = v504;
          if (v504 == v503)
          {
            uint64_t v244 = 4LL;
            int v243 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1299;
            }
            uint64_t v244 = 5LL;
          }

          (*v243)[v244]();
LABEL_1299:
          char v397 = v506;
          if (v506 == v505)
          {
            uint64_t v398 = 4LL;
            char v397 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1304;
            }
            uint64_t v398 = 5LL;
          }

          (*(void (**)(void))(*v397 + 8 * v398))();
LABEL_1304:
          uint64_t v399 = v508;
          if (v508 == v507)
          {
            uint64_t v400 = 4LL;
            uint64_t v399 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1309;
            }
            uint64_t v400 = 5LL;
          }

          (*(void (**)(void))(*v399 + 8 * v400))();
LABEL_1309:
          unint64_t v401 = v510;
          if (v510 == v509)
          {
            uint64_t v402 = 4LL;
            unint64_t v401 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1314;
            }
            uint64_t v402 = 5LL;
          }

          (*(void (**)(void))(*v401 + 8 * v402))();
LABEL_1314:
          unint64_t v403 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v404 = 4LL;
            unint64_t v403 = __p;
            goto LABEL_1318;
          }

          if (*(void *)&__p[24])
          {
            uint64_t v404 = 5LL;
LABEL_1318:
            (*(void (**)(void))(*v403 + 8 * v404))();
          }

          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49A1A0);
LABEL_347:
          sub_71648((uint64_t)buf, (uint64_t)&unk_499FE8);
LABEL_348:
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v99 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v99 <= v73 + 1) {
            unint64_t v99 = v73 + 1;
          }
          else {
            unint64_t v75 = v99;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (!v75)
          {
            uint64_t v201 = 0LL;
            goto LABEL_726;
          }

LABEL_695:
          unint64_t v75 = (unint64_t)sub_8F5F8(v75);
LABEL_726:
          *(void *)std::string __p = v75;
          *(void *)&__p[8] = v75 + 440 * v73;
          *(void *)&__p[16] = *(void *)&__p[8];
          *(void *)&__p[24] = v75 + 440 * v201;
          sub_71648(*(uint64_t *)&__p[8], (uint64_t)buf);
          *(void *)&__p[16] += 440LL;
          sub_126574(a1, __p);
          uint64_t v199 = *v22;
          sub_126644((uint64_t)__p);
LABEL_727:
          uint64_t *v22 = v199;
          sub_8F164((uint64_t)buf);
LABEL_728:
          if (++v21 == *((_DWORD **)&v461 + 1))
          {
            unint64_t v21 = (_DWORD *)v464;
            break;
          }

          continue;
        case 3:
          if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 1)
          {
            uint64_t v420 = (os_log_t *)sub_138E8(13);
            uint64_t v421 = *v420;
            if (*v420 && os_log_type_enabled(*v420, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 772;
              _os_log_impl( &dword_0,  v421,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            uint64_t v422 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v422, "Precondition failure.");
          }

          unsigned __int8 v57 = atomic_load((unsigned __int8 *)&qword_499FD0);
          if ((v57 & 1) != 0 || !__cxa_guard_acquire(&qword_499FD0)) {
            goto LABEL_146;
          }
          v486[0] = 0x70646C6E70756C6ELL;
          sub_1873F8(&v499, v486, 2uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_499E18,  3,  (uint64_t)&v499,  1,  1986224492,  1667394407,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          uint64_t v225 = v504;
          if (v504 == v503)
          {
            uint64_t v226 = 4LL;
            uint64_t v225 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1035;
            }
            uint64_t v226 = 5LL;
          }

          (*v225)[v226]();
LABEL_1035:
          char v311 = v506;
          if (v506 == v505)
          {
            uint64_t v312 = 4LL;
            char v311 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1055;
            }
            uint64_t v312 = 5LL;
          }

          (*(void (**)(void))(*v311 + 8 * v312))();
LABEL_1055:
          char v319 = v508;
          if (v508 == v507)
          {
            uint64_t v320 = 4LL;
            char v319 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1075;
            }
            uint64_t v320 = 5LL;
          }

          (*(void (**)(void))(*v319 + 8 * v320))();
LABEL_1075:
          char v327 = v510;
          if (v510 == v509)
          {
            uint64_t v328 = 4LL;
            char v327 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1095;
            }
            uint64_t v328 = 5LL;
          }

          (*(void (**)(void))(*v327 + 8 * v328))();
LABEL_1095:
          char v335 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v336 = 4LL;
            char v335 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_1115;
            }
            uint64_t v336 = 5LL;
          }

          (*(void (**)(void))(*v335 + 8 * v336))();
LABEL_1115:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_499FD0);
LABEL_146:
          sub_71648((uint64_t)buf, (uint64_t)&unk_499E18);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v92 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v92 <= v73 + 1) {
            unint64_t v92 = v73 + 1;
          }
          else {
            unint64_t v75 = v92;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 4:
          if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
          {
            int v430 = (os_log_t *)sub_138E8(13);
            id v431 = *v430;
            if (*v430 && os_log_type_enabled(*v430, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 514;
              _os_log_impl( &dword_0,  v431,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            uint64_t v432 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v432, "Precondition failure.");
          }

          unsigned __int8 v58 = atomic_load((unsigned __int8 *)&qword_49B7D0);
          if ((v58 & 1) != 0 || !__cxa_guard_acquire(&qword_49B7D0)) {
            goto LABEL_151;
          }
          qmemcpy(v486, "iwmpibmpisup", 12);
          sub_1873F8(&v499, v486, 3uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A420;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49B618,  4,  (uint64_t)&v499,  0,  1987276900,  1668441443,  1987208039,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          unint64_t v227 = v504;
          if (v504 == v503)
          {
            uint64_t v228 = 4LL;
            unint64_t v227 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1040;
            }
            uint64_t v228 = 5LL;
          }

          (*v227)[v228]();
LABEL_1040:
          char v313 = v506;
          if (v506 == v505)
          {
            uint64_t v314 = 4LL;
            char v313 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1060;
            }
            uint64_t v314 = 5LL;
          }

          (*(void (**)(void))(*v313 + 8 * v314))();
LABEL_1060:
          char v321 = v508;
          if (v508 == v507)
          {
            uint64_t v322 = 4LL;
            char v321 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1080;
            }
            uint64_t v322 = 5LL;
          }

          (*(void (**)(void))(*v321 + 8 * v322))();
LABEL_1080:
          char v329 = v510;
          if (v510 == v509)
          {
            uint64_t v330 = 4LL;
            char v329 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1100;
            }
            uint64_t v330 = 5LL;
          }

          (*(void (**)(void))(*v329 + 8 * v330))();
LABEL_1100:
          uint64_t v337 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v338 = 4LL;
            uint64_t v337 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_1120;
            }
            uint64_t v338 = 5LL;
          }

          (*(void (**)(void))(*v337 + 8 * v338))();
LABEL_1120:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49B7D0);
LABEL_151:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49B618);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v93 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v93 <= v73 + 1) {
            unint64_t v93 = v73 + 1;
          }
          else {
            unint64_t v75 = v93;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 5:
          if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
          {
            uint64_t v428 = (os_log_t *)sub_138E8(13);
            uint64_t v429 = *v428;
            if (*v428 && os_log_type_enabled(*v428, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 460;
              _os_log_impl( &dword_0,  v429,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

LABEL_1426:
            uint64_t v454 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v454, "Precondition failure.");
          }

          if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 6)
          {
            if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
            {
              int v452 = (os_log_t *)sub_138E8(13);
              id v453 = *v452;
              if (*v452 && os_log_type_enabled(*v452, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = 439;
                _os_log_impl( &dword_0,  v453,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
              }

              goto LABEL_1426;
            }

            if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 6)
            {
              uint64_t v438 = (os_log_t *)sub_138E8(13);
              int v439 = *v438;
              if (*v438 && os_log_type_enabled(*v438, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = 440;
                _os_log_impl( &dword_0,  v439,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
              }

              goto LABEL_1426;
            }

            unsigned __int8 v45 = atomic_load((unsigned __int8 *)&qword_49B1C0);
            if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_49B1C0))
            {
              *(_OWORD *)std::string __p = xmmword_403300;
              sub_1873F8(qword_49B1A8, __p, 4uLL);
              __cxa_guard_release(&qword_49B1C0);
            }

            unsigned __int8 v46 = atomic_load((unsigned __int8 *)&qword_49B380);
            if ((v46 & 1) != 0 || !__cxa_guard_acquire(&qword_49B380)) {
              goto LABEL_111;
            }
            *(void *)std::string __p = &off_47A078;
            *(void *)&__p[24] = __p;
            v509[0] = &off_47A0C0;
            __int16 v510 = v509;
            v507[0] = &off_47A108;
            uint64_t v508 = v507;
            v505[0] = &off_47A150;
            v506 = v505;
            v503[0] = &off_47A2B8;
            __int128 v504 = v503;
            sub_29F540( (uint64_t)&unk_49B1C8,  5,  (uint64_t)qword_49B1A8,  1,  1987276900,  1668441443,  1987208039,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
            unint64_t v239 = v504;
            if (v504 == v503)
            {
              uint64_t v240 = 4LL;
              unint64_t v239 = v503;
            }

            else
            {
              if (!v504) {
                goto LABEL_1251;
              }
              uint64_t v240 = 5LL;
            }

            (*v239)[v240]();
LABEL_1251:
            uint64_t v381 = v506;
            if (v506 == v505)
            {
              uint64_t v382 = 4LL;
              uint64_t v381 = v505;
            }

            else
            {
              if (!v506) {
                goto LABEL_1256;
              }
              uint64_t v382 = 5LL;
            }

            (*(void (**)(void))(*v381 + 8 * v382))();
LABEL_1256:
            char v383 = v508;
            if (v508 == v507)
            {
              uint64_t v384 = 4LL;
              char v383 = v507;
            }

            else
            {
              if (!v508) {
                goto LABEL_1261;
              }
              uint64_t v384 = 5LL;
            }

            (*(void (**)(void))(*v383 + 8 * v384))();
LABEL_1261:
            std::string v385 = v510;
            if (v510 == v509)
            {
              uint64_t v386 = 4LL;
              std::string v385 = v509;
            }

            else
            {
              if (!v510) {
                goto LABEL_1266;
              }
              uint64_t v386 = 5LL;
            }

            (*(void (**)(void))(*v385 + 8 * v386))();
LABEL_1266:
            uint64_t v387 = *(void **)&__p[24];
            if (*(_BYTE **)&__p[24] == __p)
            {
              uint64_t v388 = 4LL;
              uint64_t v387 = __p;
            }

            else
            {
              if (!*(void *)&__p[24])
              {
LABEL_1271:
                __cxa_guard_release(&qword_49B380);
LABEL_111:
                sub_71648((uint64_t)buf, (uint64_t)&unk_49B1C8);
                goto LABEL_276;
              }

              uint64_t v388 = 5LL;
            }

            (*(void (**)(void))(*v387 + 8 * v388))();
            goto LABEL_1271;
          }

          unsigned __int8 v87 = atomic_load((unsigned __int8 *)&qword_49AFE0);
          if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_49AFE0))
          {
            *(_OWORD *)std::string __p = xmmword_403300;
            sub_1873F8(qword_49AFC8, __p, 4uLL);
            __cxa_guard_release(&qword_49AFE0);
          }

          unsigned __int8 v88 = atomic_load((unsigned __int8 *)&qword_49B1A0);
          if ((v88 & 1) != 0 || !__cxa_guard_acquire(&qword_49B1A0)) {
            goto LABEL_275;
          }
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          v505[0] = &off_47A150;
          v506 = v505;
          v503[0] = &off_47A2B8;
          __int128 v504 = v503;
          sub_29F540( (uint64_t)&unk_49AFE8,  5,  (uint64_t)qword_49AFC8,  1,  1987276900,  1668441443,  1987208039,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          uint64_t v235 = v504;
          if (v504 == v503)
          {
            uint64_t v236 = 4LL;
            uint64_t v235 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1203;
            }
            uint64_t v236 = 5LL;
          }

          (*v235)[v236]();
LABEL_1203:
          uint64_t v365 = v506;
          if (v506 == v505)
          {
            uint64_t v366 = 4LL;
            uint64_t v365 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1208;
            }
            uint64_t v366 = 5LL;
          }

          (*(void (**)(void))(*v365 + 8 * v366))();
LABEL_1208:
          char v367 = v508;
          if (v508 == v507)
          {
            uint64_t v368 = 4LL;
            char v367 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1213;
            }
            uint64_t v368 = 5LL;
          }

          (*(void (**)(void))(*v367 + 8 * v368))();
LABEL_1213:
          __int128 v369 = v510;
          if (v510 == v509)
          {
            uint64_t v370 = 4LL;
            __int128 v369 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1218;
            }
            uint64_t v370 = 5LL;
          }

          (*(void (**)(void))(*v369 + 8 * v370))();
LABEL_1218:
          char v371 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v372 = 4LL;
            char v371 = __p;
          }

          else
          {
            if (!*(void *)&__p[24])
            {
LABEL_1223:
              __cxa_guard_release(&qword_49B1A0);
LABEL_275:
              sub_71648((uint64_t)buf, (uint64_t)&unk_49AFE8);
LABEL_276:
              uint64_t v24 = *v22;
              uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
              unint64_t v96 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
              if (v96 <= v73 + 1) {
                unint64_t v96 = v73 + 1;
              }
              else {
                unint64_t v75 = v96;
              }
              *(void *)&__int128 v490 = a1 + 2;
              if (!v75)
              {
                uint64_t v201 = 0LL;
                goto LABEL_726;
              }

              goto LABEL_695;
            }

            uint64_t v372 = 5LL;
          }

          (*(void (**)(void))(*v371 + 8 * v372))();
          goto LABEL_1223;
        case 6:
          if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
          {
            int v426 = (os_log_t *)sub_138E8(13);
            __int128 v427 = *v426;
            if (*v426 && os_log_type_enabled(*v426, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 223;
              _os_log_impl( &dword_0,  v427,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

LABEL_1418:
            id v448 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v448, "Precondition failure.");
          }

          if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 6)
          {
            if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
            {
              uint64_t v446 = (os_log_t *)sub_138E8(13);
              uint64_t v447 = *v446;
              if (*v446 && os_log_type_enabled(*v446, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = 212;
                _os_log_impl( &dword_0,  v447,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
              }

              goto LABEL_1418;
            }

            if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 6)
            {
              uint64_t v436 = (os_log_t *)sub_138E8(13);
              uint64_t v437 = *v436;
              if (*v436 && os_log_type_enabled(*v436, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = 213;
                _os_log_impl( &dword_0,  v437,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
              }

              goto LABEL_1418;
            }

            unsigned __int8 v49 = atomic_load((unsigned __int8 *)&qword_49AA60);
            if ((v49 & 1) != 0 || !__cxa_guard_acquire(&qword_49AA60)) {
              goto LABEL_127;
            }
            v486[0] = 0x70757369706D6269LL;
            sub_1873F8(&v499, v486, 2uLL);
            *(void *)std::string __p = &off_47A078;
            *(void *)&__p[24] = __p;
            __int16 v510 = v509;
            uint64_t v508 = v507;
            v509[0] = &off_47A0C0;
            v505[0] = &off_47A150;
            v506 = v505;
            v507[0] = &off_47A108;
            sub_29FDE8(v503);
            sub_29F540( (uint64_t)&unk_49A8A8,  6,  (uint64_t)&v499,  1,  1987276900,  1668441443,  1987211117,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
            unint64_t v241 = v504;
            if (v504 == v503)
            {
              uint64_t v242 = 4LL;
              unint64_t v241 = v503;
            }

            else
            {
              if (!v504) {
                goto LABEL_1274;
              }
              uint64_t v242 = 5LL;
            }

            (*v241)[v242]();
LABEL_1274:
            char v389 = v506;
            if (v506 == v505)
            {
              uint64_t v390 = 4LL;
              char v389 = v505;
            }

            else
            {
              if (!v506) {
                goto LABEL_1279;
              }
              uint64_t v390 = 5LL;
            }

            (*(void (**)(void))(*v389 + 8 * v390))();
LABEL_1279:
            std::string v391 = v508;
            if (v508 == v507)
            {
              uint64_t v392 = 4LL;
              std::string v391 = v507;
            }

            else
            {
              if (!v508) {
                goto LABEL_1284;
              }
              uint64_t v392 = 5LL;
            }

            (*(void (**)(void))(*v391 + 8 * v392))();
LABEL_1284:
            uint64_t v393 = v510;
            if (v510 == v509)
            {
              uint64_t v394 = 4LL;
              uint64_t v393 = v509;
            }

            else
            {
              if (!v510) {
                goto LABEL_1289;
              }
              uint64_t v394 = 5LL;
            }

            (*(void (**)(void))(*v393 + 8 * v394))();
LABEL_1289:
            uint64_t v395 = *(void **)&__p[24];
            if (*(_BYTE **)&__p[24] == __p)
            {
              uint64_t v396 = 4LL;
              uint64_t v395 = __p;
            }

            else
            {
              if (!*(void *)&__p[24])
              {
LABEL_1294:
                if (v499)
                {
                  unint64_t v500 = v499;
                  operator delete(v499);
                }

                __cxa_guard_release(&qword_49AA60);
LABEL_127:
                sub_71648((uint64_t)buf, (uint64_t)&unk_49A8A8);
                goto LABEL_280;
              }

              uint64_t v396 = 5LL;
            }

            (*(void (**)(void))(*v395 + 8 * v396))();
            goto LABEL_1294;
          }

          unsigned __int8 v89 = atomic_load((unsigned __int8 *)&qword_49A8A0);
          if ((v89 & 1) != 0 || !__cxa_guard_acquire(&qword_49A8A0)) {
            goto LABEL_279;
          }
          LODWORD(v486[0]) = 1886216809;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          __int16 v510 = v509;
          uint64_t v508 = v507;
          v509[0] = &off_47A0C0;
          v505[0] = &off_47A150;
          v506 = v505;
          v507[0] = &off_47A108;
          sub_29FDE8(v503);
          sub_29F540( (uint64_t)&unk_49A6E8,  6,  (uint64_t)&v499,  1,  1987276900,  1668441443,  1987211117,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          uint64_t v237 = v504;
          if (v504 == v503)
          {
            uint64_t v238 = 4LL;
            uint64_t v237 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1226;
            }
            uint64_t v238 = 5LL;
          }

          (*v237)[v238]();
LABEL_1226:
          uint64_t v373 = v506;
          if (v506 == v505)
          {
            uint64_t v374 = 4LL;
            uint64_t v373 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1231;
            }
            uint64_t v374 = 5LL;
          }

          (*(void (**)(void))(*v373 + 8 * v374))();
LABEL_1231:
          char v375 = v508;
          if (v508 == v507)
          {
            uint64_t v376 = 4LL;
            char v375 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1236;
            }
            uint64_t v376 = 5LL;
          }

          (*(void (**)(void))(*v375 + 8 * v376))();
LABEL_1236:
          __int128 v377 = v510;
          if (v510 == v509)
          {
            uint64_t v378 = 4LL;
            __int128 v377 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1241;
            }
            uint64_t v378 = 5LL;
          }

          (*(void (**)(void))(*v377 + 8 * v378))();
LABEL_1241:
          char v379 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v380 = 4LL;
            char v379 = __p;
          }

          else
          {
            if (!*(void *)&__p[24])
            {
LABEL_1246:
              if (v499)
              {
                unint64_t v500 = v499;
                operator delete(v499);
              }

              __cxa_guard_release(&qword_49A8A0);
LABEL_279:
              sub_71648((uint64_t)buf, (uint64_t)&unk_49A6E8);
LABEL_280:
              uint64_t v24 = *v22;
              uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
              unint64_t v97 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
              if (v97 <= v73 + 1) {
                unint64_t v97 = v73 + 1;
              }
              else {
                unint64_t v75 = v97;
              }
              *(void *)&__int128 v490 = a1 + 2;
              if (!v75)
              {
                uint64_t v201 = 0LL;
                goto LABEL_726;
              }

              goto LABEL_695;
            }

            uint64_t v380 = 5LL;
          }

          (*(void (**)(void))(*v379 + 8 * v380))();
          goto LABEL_1246;
        case 7:
          if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
          {
            uint64_t v433 = (os_log_t *)sub_138E8(13);
            uint64_t v434 = *v433;
            if (*v433 && os_log_type_enabled(*v433, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 407;
              _os_log_impl( &dword_0,  v434,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            v435 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v435, "Precondition failure.");
          }

          unsigned __int8 v50 = atomic_load((unsigned __int8 *)&qword_49B420);
          if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_49B420))
          {
            *(void *)std::string __p = 0x706D6269706D6274LL;
            sub_1873F8(qword_49B408, __p, 2uLL);
            __cxa_guard_release(&qword_49B420);
          }

          unsigned __int8 v51 = atomic_load((unsigned __int8 *)&qword_49B430);
          if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_49B430))
          {
            else {
              int v218 = 1987212137;
            }
            dword_49B428 = v218;
            __cxa_guard_release(&qword_49B430);
          }

          unsigned __int8 v52 = atomic_load((unsigned __int8 *)&qword_49B5F0);
          if ((v52 & 1) != 0 || !__cxa_guard_acquire(&qword_49B5F0)) {
            goto LABEL_133;
          }
          int v460 = dword_49B428;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          v509[0] = &off_47A0C0;
          int v219 = sub_1CC090();
          char v220 = (char *)&unk_47A338;
          if (v219) {
            char v220 = (char *)&unk_47A2F0;
          }
          v505[0] = v220 + 16;
          v506 = v505;
          sub_29FE94(v503);
          sub_29F540( (uint64_t)&unk_49B438,  7,  (uint64_t)qword_49B408,  1,  1987276900,  1668441443,  v460,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          uint64_t v221 = v504;
          if (v504 == v503)
          {
            uint64_t v222 = 4LL;
            uint64_t v221 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1130;
            }
            uint64_t v222 = 5LL;
          }

          (*v221)[v222]();
LABEL_1130:
          char v341 = v506;
          if (v506 == v505)
          {
            uint64_t v342 = 4LL;
            char v341 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1135;
            }
            uint64_t v342 = 5LL;
          }

          (*(void (**)(void))(*v341 + 8 * v342))();
LABEL_1135:
          int v343 = v508;
          if (v508 == v507)
          {
            uint64_t v344 = 4LL;
            int v343 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1140;
            }
            uint64_t v344 = 5LL;
          }

          (*(void (**)(void))(*v343 + 8 * v344))();
LABEL_1140:
          char v345 = v510;
          if (v510 == v509)
          {
            uint64_t v346 = 4LL;
            char v345 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1145;
            }
            uint64_t v346 = 5LL;
          }

          (*(void (**)(void))(*v345 + 8 * v346))();
LABEL_1145:
          uint64_t v347 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v348 = 4LL;
            uint64_t v347 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_1150;
            }
            uint64_t v348 = 5LL;
          }

          (*(void (**)(void))(*v347 + 8 * v348))();
LABEL_1150:
          __cxa_guard_release(&qword_49B5F0);
LABEL_133:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49B438);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v90 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v90 <= v73 + 1) {
            unint64_t v90 = v73 + 1;
          }
          else {
            unint64_t v75 = v90;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 8:
          if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
          {
            uint64_t v440 = (os_log_t *)sub_138E8(13);
            uint64_t v441 = *v440;
            if (*v440 && os_log_type_enabled(*v440, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 348;
              _os_log_impl( &dword_0,  v441,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            uint64_t v442 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v442, "Precondition failure.");
          }

          unsigned __int8 v60 = atomic_load((unsigned __int8 *)&qword_49AC40);
          if ((v60 & 1) != 0 || !__cxa_guard_acquire(&qword_49AC40)) {
            goto LABEL_159;
          }
          LODWORD(v486[0]) = 1886216809;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          v509[0] = &off_47A0C0;
          sub_33E22C((uint64_t)v505, 1936290409);
          sub_33E5E8(v503, 1936290409);
          sub_29F540( (uint64_t)&unk_49AA88,  8,  (uint64_t)&v499,  1,  1987277668,  1668510307,  1987208039,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0x173697269LL);
          unint64_t v229 = v504;
          if (v504 == v503)
          {
            uint64_t v230 = 4LL;
            unint64_t v229 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1045;
            }
            uint64_t v230 = 5LL;
          }

          (*v229)[v230]();
LABEL_1045:
          char v315 = v506;
          if (v506 == v505)
          {
            uint64_t v316 = 4LL;
            char v315 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1065;
            }
            uint64_t v316 = 5LL;
          }

          (*(void (**)(void))(*v315 + 8 * v316))();
LABEL_1065:
          int v323 = v508;
          if (v508 == v507)
          {
            uint64_t v324 = 4LL;
            int v323 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1085;
            }
            uint64_t v324 = 5LL;
          }

          (*(void (**)(void))(*v323 + 8 * v324))();
LABEL_1085:
          uint64_t v331 = v510;
          if (v510 == v509)
          {
            uint64_t v332 = 4LL;
            uint64_t v331 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1105;
            }
            uint64_t v332 = 5LL;
          }

          (*(void (**)(void))(*v331 + 8 * v332))();
LABEL_1105:
          uint64_t v339 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v340 = 4LL;
            uint64_t v339 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_1125;
            }
            uint64_t v340 = 5LL;
          }

          (*(void (**)(void))(*v339 + 8 * v340))();
LABEL_1125:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49AC40);
LABEL_159:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49AA88);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v94 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v94 <= v73 + 1) {
            unint64_t v94 = v73 + 1;
          }
          else {
            unint64_t v75 = v94;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 9:
          unsigned __int8 v59 = atomic_load((unsigned __int8 *)&qword_49AE00);
          if ((v59 & 1) != 0 || !__cxa_guard_acquire(&qword_49AE00)) {
            goto LABEL_154;
          }
          LODWORD(v486[0]) = 1886216809;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          __int16 v510 = v509;
          uint64_t v508 = v507;
          v509[0] = &off_47A0C0;
          v505[0] = &off_47A150;
          v506 = v505;
          v507[0] = &off_47A108;
          sub_33E5E8(v503, 1836346212);
          sub_29F540( (uint64_t)&unk_49AC48,  9,  (uint64_t)&v499,  1,  1987276148,  1668510307,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0x16D746B64LL);
          unint64_t v212 = v504;
          if (v504 == v503)
          {
            uint64_t v213 = 4LL;
            unint64_t v212 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_915;
            }
            uint64_t v213 = 5LL;
          }

          (*v212)[v213]();
LABEL_915:
          char v273 = v506;
          if (v506 == v505)
          {
            uint64_t v274 = 4LL;
            char v273 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_930;
            }
            uint64_t v274 = 5LL;
          }

          (*(void (**)(void))(*v273 + 8 * v274))();
LABEL_930:
          char v279 = v508;
          if (v508 == v507)
          {
            uint64_t v280 = 4LL;
            char v279 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_945;
            }
            uint64_t v280 = 5LL;
          }

          (*(void (**)(void))(*v279 + 8 * v280))();
LABEL_945:
          char v285 = v510;
          if (v510 == v509)
          {
            uint64_t v286 = 4LL;
            char v285 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_960;
            }
            uint64_t v286 = 5LL;
          }

          (*(void (**)(void))(*v285 + 8 * v286))();
LABEL_960:
          v291 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v292 = 4LL;
            v291 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_975;
            }
            uint64_t v292 = 5LL;
          }

          (*(void (**)(void))(*v291 + 8 * v292))();
LABEL_975:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49AE00);
LABEL_154:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49AC48);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v83 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v83 <= v73 + 1) {
            unint64_t v83 = v73 + 1;
          }
          else {
            unint64_t v75 = v83;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0xA:
          unsigned __int8 v33 = atomic_load((unsigned __int8 *)&qword_49AFC0);
          if ((v33 & 1) != 0 || !__cxa_guard_acquire(&qword_49AFC0)) {
            goto LABEL_74;
          }
          LODWORD(v486[0]) = 1886216809;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          __int16 v510 = v509;
          uint64_t v508 = v507;
          v509[0] = &off_47A0C0;
          v505[0] = &off_47A150;
          v506 = v505;
          v507[0] = &off_47A108;
          sub_33E5E8(v503, 1936614497);
          sub_29F540( (uint64_t)&unk_49AE08,  10,  (uint64_t)&v499,  1,  1987277665,  1668510307,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0x1736E6461LL);
          __int128 v202 = v504;
          if (v504 == v503)
          {
            uint64_t v203 = 4LL;
            __int128 v202 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_830;
            }
            uint64_t v203 = 5LL;
          }

          (*v202)[v203]();
LABEL_830:
          uint64_t v245 = v506;
          if (v506 == v505)
          {
            uint64_t v246 = 4LL;
            uint64_t v245 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_845;
            }
            uint64_t v246 = 5LL;
          }

          (*(void (**)(void))(*v245 + 8 * v246))();
LABEL_845:
          unint64_t v251 = v508;
          if (v508 == v507)
          {
            uint64_t v252 = 4LL;
            unint64_t v251 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_860;
            }
            uint64_t v252 = 5LL;
          }

          (*(void (**)(void))(*v251 + 8 * v252))();
LABEL_860:
          int v257 = v510;
          if (v510 == v509)
          {
            uint64_t v258 = 4LL;
            int v257 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_875;
            }
            uint64_t v258 = 5LL;
          }

          (*(void (**)(void))(*v257 + 8 * v258))();
LABEL_875:
          int v263 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v264 = 4LL;
            int v263 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_890;
            }
            uint64_t v264 = 5LL;
          }

          (*(void (**)(void))(*v263 + 8 * v264))();
LABEL_890:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49AFC0);
LABEL_74:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49AE08);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v76 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v76 <= v73 + 1) {
            unint64_t v76 = v73 + 1;
          }
          else {
            unint64_t v75 = v76;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0xB:
          unsigned __int8 v47 = atomic_load((unsigned __int8 *)&qword_49C7B0);
          if ((v47 & 1) != 0 || !__cxa_guard_acquire(&qword_49C7B0)) {
            goto LABEL_113;
          }
          LODWORD(v486[0]) = 1886216809;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          v509[0] = &off_47A0C0;
          sub_33E22C((uint64_t)v505, 1935962992);
          sub_33E5E8(v503, 1935962992);
          sub_29F540( (uint64_t)&unk_49C5F8,  11,  (uint64_t)&v499,  1,  1987274852,  1668510307,  1987208039,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0x173647370LL);
          __int128 v208 = v504;
          if (v504 == v503)
          {
            uint64_t v209 = 4LL;
            __int128 v208 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_905;
            }
            uint64_t v209 = 5LL;
          }

          (*v208)[v209]();
LABEL_905:
          char v269 = v506;
          if (v506 == v505)
          {
            uint64_t v270 = 4LL;
            char v269 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_920;
            }
            uint64_t v270 = 5LL;
          }

          (*(void (**)(void))(*v269 + 8 * v270))();
LABEL_920:
          char v275 = v508;
          if (v508 == v507)
          {
            uint64_t v276 = 4LL;
            char v275 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_935;
            }
            uint64_t v276 = 5LL;
          }

          (*(void (**)(void))(*v275 + 8 * v276))();
LABEL_935:
          char v281 = v510;
          if (v510 == v509)
          {
            uint64_t v282 = 4LL;
            char v281 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_950;
            }
            uint64_t v282 = 5LL;
          }

          (*(void (**)(void))(*v281 + 8 * v282))();
LABEL_950:
          char v287 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v288 = 4LL;
            char v287 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_965;
            }
            uint64_t v288 = 5LL;
          }

          (*(void (**)(void))(*v287 + 8 * v288))();
LABEL_965:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49C7B0);
LABEL_113:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49C5F8);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v79 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v79 <= v73 + 1) {
            unint64_t v79 = v73 + 1;
          }
          else {
            unint64_t v75 = v79;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0xC:
          if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
          {
            int v443 = (os_log_t *)sub_138E8(13);
            char v444 = *v443;
            if (*v443 && os_log_type_enabled(*v443, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 425;
              _os_log_impl( &dword_0,  v444,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

LABEL_1408:
            uint64_t v445 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v445, "Precondition failure.");
          }

          if (sub_56120() != 2
            && sub_56120() != 3
            && sub_56120() != 4
            && sub_56120() != 5
            && sub_56120() != 195)
          {
            uint64_t v455 = (os_log_t *)sub_138E8(13);
            int v456 = *v455;
            if (*v455 && os_log_type_enabled(*v455, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 430;
              _os_log_impl( &dword_0,  v456,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            goto LABEL_1408;
          }

          unsigned __int8 v36 = atomic_load((unsigned __int8 *)&qword_49B990);
          if ((v36 & 1) != 0 || !__cxa_guard_acquire(&qword_49B990)) {
            goto LABEL_90;
          }
          v486[0] = 0x70757369706D6269LL;
          sub_1873F8(&v499, v486, 2uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49B7D8,  12,  (uint64_t)&v499,  1,  1987276900,  1668441443,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          int v231 = v504;
          if (v504 == v503)
          {
            uint64_t v232 = 4LL;
            int v231 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1153;
            }
            uint64_t v232 = 5LL;
          }

          (*v231)[v232]();
LABEL_1153:
          char v349 = v506;
          if (v506 == v505)
          {
            uint64_t v350 = 4LL;
            char v349 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1158;
            }
            uint64_t v350 = 5LL;
          }

          (*(void (**)(void))(*v349 + 8 * v350))();
LABEL_1158:
          uint64_t v351 = v508;
          if (v508 == v507)
          {
            uint64_t v352 = 4LL;
            uint64_t v351 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1163;
            }
            uint64_t v352 = 5LL;
          }

          (*(void (**)(void))(*v351 + 8 * v352))();
LABEL_1163:
          unint64_t v353 = v510;
          if (v510 == v509)
          {
            uint64_t v354 = 4LL;
            unint64_t v353 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1168;
            }
            uint64_t v354 = 5LL;
          }

          (*(void (**)(void))(*v353 + 8 * v354))();
LABEL_1168:
          char v355 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v356 = 4LL;
            char v355 = __p;
          }

          else
          {
            if (!*(void *)&__p[24])
            {
LABEL_1173:
              if (v499)
              {
                unint64_t v500 = v499;
                operator delete(v499);
              }

              __cxa_guard_release(&qword_49B990);
LABEL_90:
              sub_71648((uint64_t)buf, (uint64_t)&unk_49B7D8);
              uint64_t v24 = *v22;
              if ((unint64_t)*v22 < *v23)
              {
LABEL_687:
                sub_71648(*v22, (uint64_t)buf);
                uint64_t v199 = v24 + 440;
                uint64_t *v22 = v199;
                goto LABEL_727;
              }

              uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
              unint64_t v95 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
              if (v95 <= v73 + 1) {
                unint64_t v95 = v73 + 1;
              }
              else {
                unint64_t v75 = v95;
              }
              *(void *)&__int128 v490 = a1 + 2;
              if (!v75)
              {
                uint64_t v201 = 0LL;
                goto LABEL_726;
              }

              goto LABEL_695;
            }

            uint64_t v356 = 5LL;
          }

          (*(void (**)(void))(*v355 + 8 * v356))();
          goto LABEL_1173;
        case 0xD:
          if ((MGGetBoolAnswer(@"cBy4BcYs5YWtFHbBpt4C6A") & 1) == 0)
          {
            uint64_t v411 = (os_log_t *)sub_138E8(13);
            id v412 = *v411;
            if (*v411 && os_log_type_enabled(*v411, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 61;
              _os_log_impl( &dword_0,  v412,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            char v413 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v413, "Precondition failure.");
          }

          unsigned __int8 v27 = atomic_load((unsigned __int8 *)&qword_49C270);
          if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_49C270))
          {
            sub_238BD8();
            if (dword_492698)
            {
              v509[0] = 0x706E756C70616374LL;
              sub_1873F8(qword_49C258, v509, 2uLL);
            }

            else
            {
              *(_OWORD *)std::string __p = xmmword_4032F0;
              sub_1873F8(qword_49C258, __p, 4uLL);
            }

            __cxa_guard_release(&qword_49C270);
          }

          unsigned __int8 v28 = atomic_load((unsigned __int8 *)&qword_49C430);
          if ((v28 & 1) != 0 || !__cxa_guard_acquire(&qword_49C430)) {
            goto LABEL_63;
          }
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49C278,  13,  (uint64_t)qword_49C258,  0,  1987738234,  1667394407,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          char v214 = v504;
          if (v504 == v503)
          {
            uint64_t v215 = 4LL;
            char v214 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_982;
            }
            uint64_t v215 = 5LL;
          }

          (*v214)[v215]();
LABEL_982:
          char v293 = v506;
          if (v506 == v505)
          {
            uint64_t v294 = 4LL;
            char v293 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_987;
            }
            uint64_t v294 = 5LL;
          }

          (*(void (**)(void))(*v293 + 8 * v294))();
LABEL_987:
          char v295 = v508;
          if (v508 == v507)
          {
            uint64_t v296 = 4LL;
            char v295 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_992;
            }
            uint64_t v296 = 5LL;
          }

          (*(void (**)(void))(*v295 + 8 * v296))();
LABEL_992:
          char v297 = v510;
          if (v510 == v509)
          {
            uint64_t v298 = 4LL;
            char v297 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_997;
            }
            uint64_t v298 = 5LL;
          }

          (*(void (**)(void))(*v297 + 8 * v298))();
LABEL_997:
          char v299 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v300 = 4LL;
            char v299 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_1002;
            }
            uint64_t v300 = 5LL;
          }

          (*(void (**)(void))(*v299 + 8 * v300))();
LABEL_1002:
          __cxa_guard_release(&qword_49C430);
LABEL_63:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49C278);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v85 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v85 <= v73 + 1) {
            unint64_t v85 = v73 + 1;
          }
          else {
            unint64_t v75 = v85;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0xE:
          if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 1
            && MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 3
            && MGGetSInt32Answer(@"DeviceClassNumber", 0LL) != 2)
          {
            uint64_t v449 = (os_log_t *)sub_138E8(13);
            uint64_t v450 = *v449;
            if (*v449 && os_log_type_enabled(*v449, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 40;
              _os_log_impl( &dword_0,  v450,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            v451 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v451, "Precondition failure.");
          }

          unsigned __int8 v53 = atomic_load((unsigned __int8 *)&qword_49C5F0);
          if ((v53 & 1) != 0 || !__cxa_guard_acquire(&qword_49C5F0)) {
            goto LABEL_139;
          }
          LODWORD(v486[0]) = 1886613611;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A660;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49C438,  14,  (uint64_t)&v499,  1,  1987276897,  1667657072,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          uint64_t v223 = v504;
          if (v504 == v503)
          {
            uint64_t v224 = 4LL;
            uint64_t v223 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1030;
            }
            uint64_t v224 = 5LL;
          }

          (*v223)[v224]();
LABEL_1030:
          char v309 = v506;
          if (v506 == v505)
          {
            uint64_t v310 = 4LL;
            char v309 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1050;
            }
            uint64_t v310 = 5LL;
          }

          (*(void (**)(void))(*v309 + 8 * v310))();
LABEL_1050:
          char v317 = v508;
          if (v508 == v507)
          {
            uint64_t v318 = 4LL;
            char v317 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1070;
            }
            uint64_t v318 = 5LL;
          }

          (*(void (**)(void))(*v317 + 8 * v318))();
LABEL_1070:
          char v325 = v510;
          if (v510 == v509)
          {
            uint64_t v326 = 4LL;
            char v325 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1090;
            }
            uint64_t v326 = 5LL;
          }

          (*(void (**)(void))(*v325 + 8 * v326))();
LABEL_1090:
          __int128 v333 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v334 = 4LL;
            __int128 v333 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_1110;
            }
            uint64_t v334 = 5LL;
          }

          (*(void (**)(void))(*v333 + 8 * v334))();
LABEL_1110:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49C5F0);
LABEL_139:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49C438);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v91 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v91 <= v73 + 1) {
            unint64_t v91 = v73 + 1;
          }
          else {
            unint64_t v75 = v91;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0xF:
          uint64_t v54 = operator new(8uLL);
          *uint64_t v54 = 0x706E6C6970686B69LL;
          int v501 = v54 + 1;
          __int128 v499 = v54;
          unint64_t v500 = v54 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  15,  (uint64_t)&v499,  0,  1986552183,  1667785079,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          int v55 = v504;
          if (v504 == v503)
          {
            uint64_t v56 = 4LL;
            int v55 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_422;
            }
            uint64_t v56 = 5LL;
          }

          (*v55)[v56]();
LABEL_422:
          __int16 v118 = v506;
          if (v506 == v505)
          {
            uint64_t v119 = 4LL;
            __int16 v118 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_427;
            }
            uint64_t v119 = 5LL;
          }

          (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_427:
          int v120 = v508;
          if (v508 == v507)
          {
            uint64_t v121 = 4LL;
            int v120 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_432;
            }
            uint64_t v121 = 5LL;
          }

          (*(void (**)(void))(*v120 + 8 * v121))();
LABEL_432:
          uint64_t v122 = v510;
          if (v510 == v509)
          {
            uint64_t v123 = 4LL;
            uint64_t v122 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_437;
            }
            uint64_t v123 = 5LL;
          }

          (*(void (**)(void))(*v122 + 8 * v123))();
LABEL_437:
          uint64_t v124 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v125 = 4LL;
            uint64_t v124 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_442;
            }
            uint64_t v125 = 5LL;
          }

          (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_442:
          operator delete(v54);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v126 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v126 <= v73 + 1) {
            unint64_t v126 = v73 + 1;
          }
          else {
            unint64_t v75 = v126;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x10:
          unint64_t v61 = operator new(0x10uLL);
          *unint64_t v61 = xmmword_4032E0;
          int v501 = v61 + 1;
          __int128 v499 = v61;
          unint64_t v500 = v61 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  16,  (uint64_t)&v499,  0,  1986818404,  1668051300,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          uint64_t v62 = v504;
          if (v504 == v503)
          {
            uint64_t v63 = 4LL;
            uint64_t v62 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_454;
            }
            uint64_t v63 = 5LL;
          }

          (*v62)[v63]();
LABEL_454:
          char v127 = v506;
          if (v506 == v505)
          {
            uint64_t v128 = 4LL;
            char v127 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_459;
            }
            uint64_t v128 = 5LL;
          }

          (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_459:
          CFMutableArrayRef v129 = v508;
          if (v508 == v507)
          {
            uint64_t v130 = 4LL;
            CFMutableArrayRef v129 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_464;
            }
            uint64_t v130 = 5LL;
          }

          (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_464:
          uint64_t v131 = v510;
          if (v510 == v509)
          {
            uint64_t v132 = 4LL;
            uint64_t v131 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_469;
            }
            uint64_t v132 = 5LL;
          }

          (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_469:
          uint64_t v133 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v134 = 4LL;
            uint64_t v133 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_474;
            }
            uint64_t v134 = 5LL;
          }

          (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_474:
          operator delete(v61);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v135 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v135 <= v73 + 1) {
            unint64_t v135 = v73 + 1;
          }
          else {
            unint64_t v75 = v135;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x11:
          sub_29FF50((uint64_t)buf, 0);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v84 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v84 <= v73 + 1) {
            unint64_t v84 = v73 + 1;
          }
          else {
            unint64_t v75 = v84;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x12:
          sub_29FF50((uint64_t)buf, 1);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v74 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v74 <= v73 + 1) {
            unint64_t v74 = v73 + 1;
          }
          else {
            unint64_t v75 = v74;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x13:
          uint64_t v37 = operator new(4uLL);
          _DWORD *v37 = 1885433975;
          int v501 = v37 + 1;
          __int128 v499 = v37;
          unint64_t v500 = v37 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  19,  (uint64_t)&v499,  1,  1986884979,  1668117875,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          unint64_t v38 = v504;
          if (v504 == v503)
          {
            uint64_t v39 = 4LL;
            unint64_t v38 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_359;
            }
            uint64_t v39 = 5LL;
          }

          (*v38)[v39]();
LABEL_359:
          unint64_t v100 = v506;
          if (v506 == v505)
          {
            uint64_t v101 = 4LL;
            unint64_t v100 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_364;
            }
            uint64_t v101 = 5LL;
          }

          (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_364:
          uint64_t v102 = v508;
          if (v508 == v507)
          {
            uint64_t v103 = 4LL;
            uint64_t v102 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_369;
            }
            uint64_t v103 = 5LL;
          }

          (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_369:
          uint64_t v104 = v510;
          if (v510 == v509)
          {
            uint64_t v105 = 4LL;
            uint64_t v104 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_374;
            }
            uint64_t v105 = 5LL;
          }

          (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_374:
          uint64_t v106 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v107 = 4LL;
            uint64_t v106 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_379;
            }
            uint64_t v107 = 5LL;
          }

          (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_379:
          operator delete(v37);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v108 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v108 <= v73 + 1) {
            unint64_t v108 = v73 + 1;
          }
          else {
            unint64_t v75 = v108;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x14:
          unint64_t v64 = operator new(4uLL);
          *unint64_t v64 = 1885433953;
          int v501 = v64 + 1;
          __int128 v499 = v64;
          unint64_t v500 = v64 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  20,  (uint64_t)&v499,  1,  1986095474,  1667328370,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          int v65 = v504;
          if (v504 == v503)
          {
            uint64_t v66 = 4LL;
            int v65 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_485;
            }
            uint64_t v66 = 5LL;
          }

          (*v65)[v66]();
LABEL_485:
          char v136 = v506;
          if (v506 == v505)
          {
            uint64_t v137 = 4LL;
            char v136 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_490;
            }
            uint64_t v137 = 5LL;
          }

          (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_490:
          char v138 = v508;
          if (v508 == v507)
          {
            uint64_t v139 = 4LL;
            char v138 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_495;
            }
            uint64_t v139 = 5LL;
          }

          (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_495:
          uint64_t v140 = v510;
          if (v510 == v509)
          {
            uint64_t v141 = 4LL;
            uint64_t v140 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_500;
            }
            uint64_t v141 = 5LL;
          }

          (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_500:
          uint64_t v142 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v143 = 4LL;
            uint64_t v142 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_505;
            }
            uint64_t v143 = 5LL;
          }

          (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_505:
          operator delete(v64);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v144 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v144 <= v73 + 1) {
            unint64_t v144 = v73 + 1;
          }
          else {
            unint64_t v75 = v144;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x15:
          if (sub_56120() != 2
            && sub_56120() != 3
            && sub_56120() != 4
            && sub_56120() != 5
            && sub_56120() != 195)
          {
            uint64_t v457 = (os_log_t *)sub_138E8(13);
            uint64_t v458 = *v457;
            if (*v457 && os_log_type_enabled(*v457, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 945;
              _os_log_impl( &dword_0,  v458,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            uint64_t v459 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v459, "Precondition failure.");
          }

          uint64_t v25 = operator new(4uLL);
          _DWORD *v25 = 1886613611;
          v467[1] = v25 + 1;
          v467[2] = v25 + 1;
          v467[0] = v25;
          uint64_t v488 = 0x6D636466696D6466LL;
          sub_8ED70(v466, (uint64_t)&v488, 2LL);
          v486[0] = &off_47A078;
          uint64_t v487 = v486;
          v484[0] = &off_47A0C0;
          v485 = v484;
          v482[0] = &off_47A108;
          uint64_t v483 = v482;
          v480[0] = &off_47A150;
          int v481 = v480;
          id v479 = 0LL;
          v470[0] = 0LL;
          v470[1] = 0LL;
          int v469 = v470;
          sub_71894(v468, (uint64_t)v466);
          uint64_t v26 = (uint64_t)v487;
          if (!v487) {
            goto LABEL_59;
          }
          if (v487 == v486)
          {
            __int16 v510 = v509;
            (*(void (**)(uint64_t, void *))(v486[0] + 24LL))((uint64_t)v486, v509);
          }

          else
          {
            uint64_t v26 = (*(uint64_t (**)(void))(*v487 + 16LL))();
LABEL_59:
            __int16 v510 = (void *)v26;
          }

          uint64_t v172 = (uint64_t)v485;
          if (!v485) {
            goto LABEL_613;
          }
          if (v485 == v484)
          {
            uint64_t v508 = v507;
            (*(void (**)(uint64_t, void *))(v484[0] + 24LL))((uint64_t)v484, v507);
          }

          else
          {
            uint64_t v172 = (*(uint64_t (**)(void))(*v485 + 16LL))();
LABEL_613:
            uint64_t v508 = (void *)v172;
          }

          uint64_t v173 = (uint64_t)v483;
          if (!v483) {
            goto LABEL_618;
          }
          if (v483 == v482)
          {
            v506 = v505;
            (*(void (**)(uint64_t, void *))(v482[0] + 24LL))((uint64_t)v482, v505);
          }

          else
          {
            uint64_t v173 = (*(uint64_t (**)(void))(*v483 + 16LL))();
LABEL_618:
            v506 = (void *)v173;
          }

          uint64_t v174 = (uint64_t)v481;
          if (!v481) {
            goto LABEL_623;
          }
          if (v481 == v480)
          {
            __int128 v504 = v503;
            (*(void (**)(uint64_t, void *))(v480[0] + 24LL))((uint64_t)v480, v503);
          }

          else
          {
            uint64_t v174 = (*(uint64_t (**)(void))(*v481 + 16LL))();
LABEL_623:
            __int128 v504 = (uint64_t (***)())v174;
          }

          uint64_t v175 = (uint64_t)v479;
          if (!v479) {
            goto LABEL_628;
          }
          if (v479 == v478)
          {
            v502 = &v499;
            (*(void (**)(void *, void **))(v478[0] + 24LL))(v478, &v499);
          }

          else
          {
            uint64_t v175 = (*(uint64_t (**)(void))(*v479 + 16LL))();
LABEL_628:
            v502 = (void **)v175;
          }

          *(_OWORD *)&v495[8] = 0u;
          uint64_t v493 = 1065353216LL;
          *(_OWORD *)v491 = 0u;
          __int128 v492 = 0u;
          __int128 v490 = 0u;
          memset(__p, 0, sizeof(__p));
          *(_OWORD *)v494 = 0u;
          *(_OWORD *)v495 = 0u;
          *(_DWORD *)&v495[16] = 1065353216;
          *(_OWORD *)v496 = 0u;
          __int128 v497 = 0u;
          uint64_t v498 = 1065353216LL;
          sub_8EE00( (uint64_t)buf,  0,  21,  (uint64_t)v467,  (uint64_t)&v469,  1,  1986817911,  1668050807,  (uint64_t)v468,  0,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  (uint64_t)&v499,  (const void ***)__p,  0LL);
          sub_51FD8((char *)v497);
          uint64_t v176 = v496[0];
          v496[0] = 0LL;
          if (v176) {
            operator delete(v176);
          }
          sub_51FD8(*(char **)v495);
          unint64_t v177 = v494[0];
          v494[0] = 0LL;
          if (v177) {
            operator delete(v177);
          }
          sub_51FD8((char *)v492);
          uint64_t v178 = v491[0];
          v491[0] = 0LL;
          if (v178) {
            operator delete(v178);
          }
          uint64_t v471 = (void **)&__p[24];
          sub_8C8F0(&v471);
          uint64_t v471 = (void **)__p;
          sub_8C8F0(&v471);
          unint64_t v179 = v502;
          if (v502 == &v499)
          {
            uint64_t v180 = 4LL;
            unint64_t v179 = &v499;
          }

          else
          {
            if (!v502) {
              goto LABEL_641;
            }
            uint64_t v180 = 5LL;
          }

          (*((void (**)(void))*v179 + v180))();
LABEL_641:
          uint64_t v181 = v504;
          if (v504 == v503)
          {
            uint64_t v182 = 4LL;
            uint64_t v181 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_646;
            }
            uint64_t v182 = 5LL;
          }

          (*v181)[v182]();
LABEL_646:
          __int128 v183 = v506;
          if (v506 == v505)
          {
            uint64_t v184 = 4LL;
            __int128 v183 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_651;
            }
            uint64_t v184 = 5LL;
          }

          (*(void (**)(void))(*v183 + 8 * v184))();
LABEL_651:
          uint64_t v185 = v508;
          if (v508 == v507)
          {
            uint64_t v186 = 4LL;
            uint64_t v185 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_656;
            }
            uint64_t v186 = 5LL;
          }

          (*(void (**)(void))(*v185 + 8 * v186))();
LABEL_656:
          uint64_t v187 = v510;
          if (v510 == v509)
          {
            uint64_t v188 = 4LL;
            uint64_t v187 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_661;
            }
            uint64_t v188 = 5LL;
          }

          (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_661:
          sub_68314(v468);
          sub_32C8C(v470[0]);
          uint64_t v189 = v479;
          if (v479 == v478)
          {
            uint64_t v190 = 4LL;
            uint64_t v189 = v478;
          }

          else
          {
            if (!v479) {
              goto LABEL_666;
            }
            uint64_t v190 = 5LL;
          }

          (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_666:
          unint64_t v191 = v481;
          if (v481 == v480)
          {
            uint64_t v192 = 4LL;
            unint64_t v191 = v480;
          }

          else
          {
            if (!v481) {
              goto LABEL_671;
            }
            uint64_t v192 = 5LL;
          }

          (*(void (**)(void))(*v191 + 8 * v192))();
LABEL_671:
          unint64_t v193 = v483;
          if (v483 == v482)
          {
            uint64_t v194 = 4LL;
            unint64_t v193 = v482;
          }

          else
          {
            if (!v483) {
              goto LABEL_676;
            }
            uint64_t v194 = 5LL;
          }

          (*(void (**)(void))(*v193 + 8 * v194))();
LABEL_676:
          std::string v195 = v485;
          if (v485 == v484)
          {
            uint64_t v196 = 4LL;
            std::string v195 = v484;
          }

          else
          {
            if (!v485) {
              goto LABEL_681;
            }
            uint64_t v196 = 5LL;
          }

          (*(void (**)(void))(*v195 + 8 * v196))();
LABEL_681:
          uint64_t v197 = v487;
          if (v487 == v486)
          {
            uint64_t v198 = 4LL;
            uint64_t v197 = v486;
          }

          else
          {
            if (!v487) {
              goto LABEL_686;
            }
            uint64_t v198 = 5LL;
          }

          (*(void (**)(void))(*v197 + 8 * v198))();
LABEL_686:
          sub_68314(v466);
          operator delete(v25);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v200 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v200 <= v73 + 1) {
            unint64_t v200 = v73 + 1;
          }
          else {
            unint64_t v75 = v200;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x16:
          unsigned __int8 v35 = atomic_load((unsigned __int8 *)&qword_49A520);
          if ((v35 & 1) != 0 || !__cxa_guard_acquire(&qword_49A520)) {
            goto LABEL_80;
          }
          LODWORD(v486[0]) = 1886613611;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A1E0;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49A368,  22,  (uint64_t)&v499,  1,  1987279212,  1668505974,  1986818931,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          __int128 v206 = v504;
          if (v504 == v503)
          {
            uint64_t v207 = 4LL;
            __int128 v206 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_840;
            }
            uint64_t v207 = 5LL;
          }

          (*v206)[v207]();
LABEL_840:
          uint64_t v249 = v506;
          if (v506 == v505)
          {
            uint64_t v250 = 4LL;
            uint64_t v249 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_855;
            }
            uint64_t v250 = 5LL;
          }

          (*(void (**)(void))(*v249 + 8 * v250))();
LABEL_855:
          int v255 = v508;
          if (v508 == v507)
          {
            uint64_t v256 = 4LL;
            int v255 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_870;
            }
            uint64_t v256 = 5LL;
          }

          (*(void (**)(void))(*v255 + 8 * v256))();
LABEL_870:
          unint64_t v261 = v510;
          if (v510 == v509)
          {
            uint64_t v262 = 4LL;
            unint64_t v261 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_885;
            }
            uint64_t v262 = 5LL;
          }

          (*(void (**)(void))(*v261 + 8 * v262))();
LABEL_885:
          char v267 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v268 = 4LL;
            char v267 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_900;
            }
            uint64_t v268 = 5LL;
          }

          (*(void (**)(void))(*v267 + 8 * v268))();
LABEL_900:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49A520);
LABEL_80:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49A368);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v78 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v78 <= v73 + 1) {
            unint64_t v78 = v73 + 1;
          }
          else {
            unint64_t v75 = v78;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x17:
          if ((sub_7531C() & 1) == 0)
          {
            int v417 = (os_log_t *)sub_138E8(13);
            uint64_t v418 = *v417;
            if (*v417 && os_log_type_enabled(*v417, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 615;
              _os_log_impl( &dword_0,  v418,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            uint64_t v419 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v419, "Precondition failure.");
          }

          unsigned __int8 v32 = atomic_load((unsigned __int8 *)&qword_49C090);
          if ((v32 & 1) != 0 || !__cxa_guard_acquire(&qword_49C090)) {
            goto LABEL_71;
          }
          LODWORD(v486[0]) = 1886613611;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A588;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A5D0;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49BED8,  23,  (uint64_t)&v499,  1,  1987277417,  1667855215,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          int v216 = v504;
          if (v504 == v503)
          {
            uint64_t v217 = 4LL;
            int v216 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_1005;
            }
            uint64_t v217 = 5LL;
          }

          (*v216)[v217]();
LABEL_1005:
          char v301 = v506;
          if (v506 == v505)
          {
            uint64_t v302 = 4LL;
            char v301 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_1010;
            }
            uint64_t v302 = 5LL;
          }

          (*(void (**)(void))(*v301 + 8 * v302))();
LABEL_1010:
          char v303 = v508;
          if (v508 == v507)
          {
            uint64_t v304 = 4LL;
            char v303 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_1015;
            }
            uint64_t v304 = 5LL;
          }

          (*(void (**)(void))(*v303 + 8 * v304))();
LABEL_1015:
          char v305 = v510;
          if (v510 == v509)
          {
            uint64_t v306 = 4LL;
            char v305 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_1020;
            }
            uint64_t v306 = 5LL;
          }

          (*(void (**)(void))(*v305 + 8 * v306))();
LABEL_1020:
          char v307 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v308 = 4LL;
            char v307 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_1025;
            }
            uint64_t v308 = 5LL;
          }

          (*(void (**)(void))(*v307 + 8 * v308))();
LABEL_1025:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49C090);
LABEL_71:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49BED8);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v86 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v86 <= v73 + 1) {
            unint64_t v86 = v73 + 1;
          }
          else {
            unint64_t v75 = v86;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x18:
          unsigned __int8 v48 = atomic_load((unsigned __int8 *)&qword_49C250);
          if ((v48 & 1) != 0 || !__cxa_guard_acquire(&qword_49C250)) {
            goto LABEL_116;
          }
          LODWORD(v486[0]) = 1886613611;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A618;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49C098,  24,  (uint64_t)&v499,  1,  1987277417,  1667855215,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          unint64_t v210 = v504;
          if (v504 == v503)
          {
            uint64_t v211 = 4LL;
            unint64_t v210 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_910;
            }
            uint64_t v211 = 5LL;
          }

          (*v210)[v211]();
LABEL_910:
          char v271 = v506;
          if (v506 == v505)
          {
            uint64_t v272 = 4LL;
            char v271 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_925;
            }
            uint64_t v272 = 5LL;
          }

          (*(void (**)(void))(*v271 + 8 * v272))();
LABEL_925:
          char v277 = v508;
          if (v508 == v507)
          {
            uint64_t v278 = 4LL;
            char v277 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_940;
            }
            uint64_t v278 = 5LL;
          }

          (*(void (**)(void))(*v277 + 8 * v278))();
LABEL_940:
          char v283 = v510;
          if (v510 == v509)
          {
            uint64_t v284 = 4LL;
            char v283 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_955;
            }
            uint64_t v284 = 5LL;
          }

          (*(void (**)(void))(*v283 + 8 * v284))();
LABEL_955:
          char v289 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v290 = 4LL;
            char v289 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_970;
            }
            uint64_t v290 = 5LL;
          }

          (*(void (**)(void))(*v289 + 8 * v290))();
LABEL_970:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49C250);
LABEL_116:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49C098);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v80 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v80 <= v73 + 1) {
            unint64_t v80 = v73 + 1;
          }
          else {
            unint64_t v75 = v80;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x19:
          if ((sub_93B80() & 1) == 0)
          {
            v405 = (os_log_t *)sub_138E8(13);
            v406 = *v405;
            if (*v405 && os_log_type_enabled(*v405, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 951;
              _os_log_impl( &dword_0,  v406,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            v407 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v407, "Precondition failure.");
          }

          uint64_t v29 = operator new(0x10uLL);
          _OWORD *v29 = xmmword_4032D0;
          int v501 = v29 + 1;
          __int128 v499 = v29;
          unint64_t v500 = v29 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  25,  (uint64_t)&v499,  1,  1986293108,  1668309362,  1836281204,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          uint64_t v30 = v504;
          if (v504 == v503)
          {
            uint64_t v31 = 4LL;
            uint64_t v30 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_517;
            }
            uint64_t v31 = 5LL;
          }

          (*v30)[v31]();
LABEL_517:
          id v145 = v506;
          if (v506 == v505)
          {
            uint64_t v146 = 4LL;
            id v145 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_522;
            }
            uint64_t v146 = 5LL;
          }

          (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_522:
          int v147 = v508;
          if (v508 == v507)
          {
            uint64_t v148 = 4LL;
            int v147 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_527;
            }
            uint64_t v148 = 5LL;
          }

          (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_527:
          uint64_t v149 = v510;
          if (v510 == v509)
          {
            uint64_t v150 = 4LL;
            uint64_t v149 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_532;
            }
            uint64_t v150 = 5LL;
          }

          (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_532:
          uint64_t v151 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v152 = 4LL;
            uint64_t v151 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_537;
            }
            uint64_t v152 = 5LL;
          }

          (*(void (**)(void))(*v151 + 8 * v152))();
LABEL_537:
          operator delete(v29);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v153 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v153 <= v73 + 1) {
            unint64_t v153 = v73 + 1;
          }
          else {
            unint64_t v75 = v153;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x1A:
          if ((sub_93B80() & 1) == 0)
          {
            std::string v408 = (os_log_t *)sub_138E8(13);
            std::string v409 = *v408;
            if (*v408 && os_log_type_enabled(*v408, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 968;
              _os_log_impl( &dword_0,  v409,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            std::string v410 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v410, "Precondition failure.");
          }

          uint64_t v70 = operator new(0x10uLL);
          *uint64_t v70 = xmmword_4032D0;
          int v501 = v70 + 1;
          __int128 v499 = v70;
          unint64_t v500 = v70 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  26,  (uint64_t)&v499,  1,  1986290544,  1668309362,  1768781426,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          unint64_t v71 = v504;
          if (v504 == v503)
          {
            uint64_t v72 = 4LL;
            unint64_t v71 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_580;
            }
            uint64_t v72 = 5LL;
          }

          (*v71)[v72]();
LABEL_580:
          double v163 = v506;
          if (v506 == v505)
          {
            uint64_t v164 = 4LL;
            double v163 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_585;
            }
            uint64_t v164 = 5LL;
          }

          (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_585:
          unint64_t v165 = v508;
          if (v508 == v507)
          {
            uint64_t v166 = 4LL;
            unint64_t v165 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_590;
            }
            uint64_t v166 = 5LL;
          }

          (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_590:
          unint64_t v167 = v510;
          if (v510 == v509)
          {
            uint64_t v168 = 4LL;
            unint64_t v167 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_595;
            }
            uint64_t v168 = 5LL;
          }

          (*(void (**)(void))(*v167 + 8 * v168))();
LABEL_595:
          uint64_t v169 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v170 = 4LL;
            uint64_t v169 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_600;
            }
            uint64_t v170 = 5LL;
          }

          (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_600:
          operator delete(v70);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v171 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v171 <= v73 + 1) {
            unint64_t v171 = v73 + 1;
          }
          else {
            unint64_t v75 = v171;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x1B:
          if ((sub_1CC1C4() & 1) == 0)
          {
            char v414 = (os_log_t *)sub_138E8(13);
            uint64_t v415 = *v414;
            if (*v414 && os_log_type_enabled(*v414, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 985;
              _os_log_impl( &dword_0,  v415,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
            }

            uint64_t v416 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v416, "Precondition failure.");
          }

          uint64_t v67 = operator new(4uLL);
          *uint64_t v67 = 1886216809;
          int v501 = v67 + 1;
          __int128 v499 = v67;
          unint64_t v500 = v67 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  27,  (uint64_t)&v499,  1,  1987276899,  1668441443,  1936745328,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          unsigned __int8 v68 = v504;
          if (v504 == v503)
          {
            uint64_t v69 = 4LL;
            unsigned __int8 v68 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_548;
            }
            uint64_t v69 = 5LL;
          }

          (*v68)[v69]();
LABEL_548:
          uint64_t v154 = v506;
          if (v506 == v505)
          {
            uint64_t v155 = 4LL;
            uint64_t v154 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_553;
            }
            uint64_t v155 = 5LL;
          }

          (*(void (**)(void))(*v154 + 8 * v155))();
LABEL_553:
          uint64_t v156 = v508;
          if (v508 == v507)
          {
            uint64_t v157 = 4LL;
            uint64_t v156 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_558;
            }
            uint64_t v157 = 5LL;
          }

          (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_558:
          unint64_t v158 = v510;
          if (v510 == v509)
          {
            uint64_t v159 = 4LL;
            unint64_t v158 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_563;
            }
            uint64_t v159 = 5LL;
          }

          (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_563:
          unint64_t v160 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v161 = 4LL;
            unint64_t v160 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_568;
            }
            uint64_t v161 = 5LL;
          }

          (*(void (**)(void))(*v160 + 8 * v161))();
LABEL_568:
          operator delete(v67);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v162 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v162 <= v73 + 1) {
            unint64_t v162 = v73 + 1;
          }
          else {
            unint64_t v75 = v162;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x1D:
          unsigned __int8 v34 = atomic_load((unsigned __int8 *)&qword_49A6E0);
          if ((v34 & 1) != 0 || !__cxa_guard_acquire(&qword_49A6E0)) {
            goto LABEL_77;
          }
          LODWORD(v486[0]) = 1885892674;
          sub_1873F8(&v499, v486, 1uLL);
          *(void *)std::string __p = &off_47A228;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)&unk_49A528,  29,  (uint64_t)&v499,  1,  1987279212,  1668505974,  1986818931,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          int v204 = v504;
          if (v504 == v503)
          {
            uint64_t v205 = 4LL;
            int v204 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_835;
            }
            uint64_t v205 = 5LL;
          }

          (*v204)[v205]();
LABEL_835:
          uint64_t v247 = v506;
          if (v506 == v505)
          {
            uint64_t v248 = 4LL;
            uint64_t v247 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_850;
            }
            uint64_t v248 = 5LL;
          }

          (*(void (**)(void))(*v247 + 8 * v248))();
LABEL_850:
          unsigned __int8 v253 = v508;
          if (v508 == v507)
          {
            uint64_t v254 = 4LL;
            unsigned __int8 v253 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_865;
            }
            uint64_t v254 = 5LL;
          }

          (*(void (**)(void))(*v253 + 8 * v254))();
LABEL_865:
          unint64_t v259 = v510;
          if (v510 == v509)
          {
            uint64_t v260 = 4LL;
            unint64_t v259 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_880;
            }
            uint64_t v260 = 5LL;
          }

          (*(void (**)(void))(*v259 + 8 * v260))();
LABEL_880:
          int v265 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v266 = 4LL;
            int v265 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_895;
            }
            uint64_t v266 = 5LL;
          }

          (*(void (**)(void))(*v265 + 8 * v266))();
LABEL_895:
          if (v499)
          {
            unint64_t v500 = v499;
            operator delete(v499);
          }

          __cxa_guard_release(&qword_49A6E0);
LABEL_77:
          sub_71648((uint64_t)buf, (uint64_t)&unk_49A528);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v77 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v77 <= v73 + 1) {
            unint64_t v77 = v73 + 1;
          }
          else {
            unint64_t v75 = v77;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        case 0x1E:
          unsigned __int8 v42 = operator new(4uLL);
          *unsigned __int8 v42 = 1819306350;
          int v501 = v42 + 1;
          __int128 v499 = v42;
          unint64_t v500 = v42 + 1;
          *(void *)std::string __p = &off_47A078;
          *(void *)&__p[24] = __p;
          v509[0] = &off_47A0C0;
          __int16 v510 = v509;
          v507[0] = &off_47A108;
          uint64_t v508 = v507;
          __int128 v504 = 0LL;
          v505[0] = &off_47A150;
          v506 = v505;
          sub_29F540( (uint64_t)buf,  30,  (uint64_t)&v499,  1,  1986881902,  1667853930,  1768776806,  0,  (uint64_t)__p,  (uint64_t)v509,  (uint64_t)v507,  (uint64_t)v505,  (uint64_t)v503,  0LL);
          unint64_t v43 = v504;
          if (v504 == v503)
          {
            uint64_t v44 = 4LL;
            unint64_t v43 = v503;
          }

          else
          {
            if (!v504) {
              goto LABEL_391;
            }
            uint64_t v44 = 5LL;
          }

          (*v43)[v44]();
LABEL_391:
          __int128 v109 = v506;
          if (v506 == v505)
          {
            uint64_t v110 = 4LL;
            __int128 v109 = v505;
          }

          else
          {
            if (!v506) {
              goto LABEL_396;
            }
            uint64_t v110 = 5LL;
          }

          (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_396:
          uint64_t v111 = v508;
          if (v508 == v507)
          {
            uint64_t v112 = 4LL;
            uint64_t v111 = v507;
          }

          else
          {
            if (!v508) {
              goto LABEL_401;
            }
            uint64_t v112 = 5LL;
          }

          (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_401:
          uint64_t v113 = v510;
          if (v510 == v509)
          {
            uint64_t v114 = 4LL;
            uint64_t v113 = v509;
          }

          else
          {
            if (!v510) {
              goto LABEL_406;
            }
            uint64_t v114 = 5LL;
          }

          (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_406:
          uint64_t v115 = *(void **)&__p[24];
          if (*(_BYTE **)&__p[24] == __p)
          {
            uint64_t v116 = 4LL;
            uint64_t v115 = __p;
          }

          else
          {
            if (!*(void *)&__p[24]) {
              goto LABEL_411;
            }
            uint64_t v116 = 5LL;
          }

          (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_411:
          operator delete(v42);
          uint64_t v24 = *v22;
          uint64_t v73 = 0x6FB586FB586FB587LL * ((v24 - *a1) >> 3);
          unint64_t v117 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v117 <= v73 + 1) {
            unint64_t v117 = v73 + 1;
          }
          else {
            unint64_t v75 = v117;
          }
          *(void *)&__int128 v490 = a1 + 2;
          if (v75) {
            goto LABEL_695;
          }
          uint64_t v201 = 0LL;
          goto LABEL_726;
        default:
          goto LABEL_728;
      }

      break;
    }
  }

  if (v21) {
    operator delete(v21);
  }
}

void sub_29D8BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  if (__p) {
    operator delete(__p);
  }
  sub_8F2D4((void ***)&a45);
  _Unwind_Resume(a1);
}

void sub_29F528( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (!a25) {
    JUMPOUT(0x29F514LL);
  }
  JUMPOUT(0x29F510LL);
}

uint64_t sub_29F540( uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v48[0] = 0LL;
  v48[1] = 0LL;
  unsigned __int8 v47 = v48;
  int v45 = a7;
  sub_8ED70(v46, (uint64_t)&v45, 1LL);
  sub_82AF0((uint64_t)v58, a9);
  sub_82AF0((uint64_t)v56, a10);
  sub_82AF0((uint64_t)v54, a11);
  sub_82AF0((uint64_t)v52, a12);
  sub_82AF0((uint64_t)v50, a13);
  *(_OWORD *)std::string __p = 0u;
  __int128 v43 = 0u;
  __int128 v37 = 0u;
  *(_OWORD *)unsigned __int8 v36 = 0u;
  memset(v35, 0, sizeof(v35));
  uint64_t v38 = 1065353216LL;
  *(_OWORD *)uint64_t v39 = 0u;
  __int128 v40 = 0u;
  uint64_t v41 = 1065353216LL;
  uint64_t v44 = 1065353216LL;
  sub_8EE00( a1,  0,  a2,  a3,  (uint64_t)&v47,  a4,  a5,  a6,  (uint64_t)v46,  a8,  (uint64_t)v58,  (uint64_t)v56,  (uint64_t)v54,  (uint64_t)v52,  (uint64_t)v50,  (const void ***)v35,  a14);
  sub_51FD8((char *)v43);
  unint64_t v21 = __p[0];
  __p[0] = 0LL;
  if (v21) {
    operator delete(v21);
  }
  sub_51FD8((char *)v40);
  unsigned __int8 v22 = v39[0];
  v39[0] = 0LL;
  if (v22) {
    operator delete(v22);
  }
  sub_51FD8((char *)v37);
  unsigned __int8 v23 = v36[0];
  v36[0] = 0LL;
  if (v23) {
    operator delete(v23);
  }
  unsigned __int8 v49 = (void **)&v35[1] + 1;
  sub_8C8F0(&v49);
  unsigned __int8 v49 = (void **)v35;
  sub_8C8F0(&v49);
  uint64_t v24 = v51;
  if (v51 == v50)
  {
    uint64_t v25 = 4LL;
    uint64_t v24 = v50;
  }

  else
  {
    if (!v51) {
      goto LABEL_12;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_12:
  uint64_t v26 = v53;
  if (v53 == v52)
  {
    uint64_t v27 = 4LL;
    uint64_t v26 = v52;
  }

  else
  {
    if (!v53) {
      goto LABEL_17;
    }
    uint64_t v27 = 5LL;
  }

  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_17:
  unsigned __int8 v28 = v55;
  if (v55 == v54)
  {
    uint64_t v29 = 4LL;
    unsigned __int8 v28 = v54;
  }

  else
  {
    if (!v55) {
      goto LABEL_22;
    }
    uint64_t v29 = 5LL;
  }

  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_22:
  uint64_t v30 = v57;
  if (v57 == v56)
  {
    uint64_t v31 = 4LL;
    uint64_t v30 = v56;
  }

  else
  {
    if (!v57) {
      goto LABEL_27;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_27:
  unsigned __int8 v32 = v59;
  if (v59 == v58)
  {
    uint64_t v33 = 4LL;
    unsigned __int8 v32 = v58;
    goto LABEL_31;
  }

  if (v59)
  {
    uint64_t v33 = 5LL;
LABEL_31:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }

  sub_68314(v46);
  sub_32C8C(v48[0]);
  return a1;
}

void sub_29F824( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45)
{
  unsigned __int8 v47 = *(void **)(v45 - 224);
  if (v47 == (void *)(v45 - 248))
  {
    uint64_t v48 = 4LL;
    unsigned __int8 v47 = (void *)(v45 - 248);
  }

  else
  {
    if (!v47) {
      goto LABEL_6;
    }
    uint64_t v48 = 5LL;
  }

  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_6:
  unsigned __int8 v49 = *(void **)(v45 - 192);
  if (v49 == (void *)(v45 - 216))
  {
    uint64_t v50 = 4LL;
    unsigned __int8 v49 = (void *)(v45 - 216);
  }

  else
  {
    if (!v49) {
      goto LABEL_11;
    }
    uint64_t v50 = 5LL;
  }

  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_11:
  unsigned __int8 v51 = *(void **)(v45 - 160);
  if (v51 == (void *)(v45 - 184))
  {
    uint64_t v52 = 4LL;
    unsigned __int8 v51 = (void *)(v45 - 184);
  }

  else
  {
    if (!v51) {
      goto LABEL_16;
    }
    uint64_t v52 = 5LL;
  }

  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_16:
  unsigned __int8 v53 = *(void **)(v45 - 128);
  if (v53 == (void *)(v45 - 152))
  {
    uint64_t v54 = 4LL;
    unsigned __int8 v53 = (void *)(v45 - 152);
  }

  else
  {
    if (!v53) {
      goto LABEL_21;
    }
    uint64_t v54 = 5LL;
  }

  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_21:
  int v55 = *(void **)(v45 - 96);
  if (v55 == (void *)(v45 - 120))
  {
    uint64_t v56 = 4LL;
    int v55 = (void *)(v45 - 120);
  }

  else
  {
    if (!v55) {
      goto LABEL_26;
    }
    uint64_t v56 = 5LL;
  }

  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_26:
  sub_68314(&a41);
  sub_32C8C(a45);
  _Unwind_Resume(a1);
}

void sub_29F960()
{
}

void sub_29F968(uint64_t a1, int a2)
{
  if (a2 != 1 && (MGGetBoolAnswer(@"StarkCapability") & 1) == 0)
  {
    int v18 = (os_log_t *)sub_138E8(13);
    __int16 v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 780;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = sub_138E8(20);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = " not";
        *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (!a2) {
          uint64_t v6 = "";
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 781;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v6;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating Remote Alternate VAD Specification that is%s mandatory",  buf,  0x1Cu);
      }
    }
  }

  unsigned __int8 v7 = operator new(4uLL);
  _DWORD *v7 = 1886614625;
  *(void *)&buf[16] = v7 + 1;
  *(void *)&_DWORD buf[8] = v7 + 1;
  v29[0] = &off_47A078;
  uint64_t v30 = v29;
  *(void *)AudioObjectPropertyAddress buf = v7;
  v27[0] = &off_47A0C0;
  unsigned __int8 v28 = v27;
  v25[0] = &off_47A108;
  uint64_t v26 = v25;
  unsigned __int8 v22 = 0LL;
  v23[0] = &off_47A150;
  uint64_t v24 = v23;
  sub_29F540( a1,  a2 != 0,  (uint64_t)buf,  a2,  1987279218,  1668505974,  1768776806,  0,  (uint64_t)v29,  (uint64_t)v27,  (uint64_t)v25,  (uint64_t)v23,  (uint64_t)v21,  0LL);
  uint64_t v8 = v22;
  if (v22 == v21)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_14;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_14:
  uint64_t v10 = v24;
  if (v24 == v23)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_19;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_19:
  unsigned __int8 v12 = v26;
  if (v26 == v25)
  {
    uint64_t v13 = 4LL;
    unsigned __int8 v12 = v25;
  }

  else
  {
    if (!v26) {
      goto LABEL_24;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_24:
  char v14 = v28;
  if (v28 == v27)
  {
    uint64_t v15 = 4LL;
    char v14 = v27;
  }

  else
  {
    if (!v28) {
      goto LABEL_29;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_29:
  char v16 = v30;
  if (v30 == v29)
  {
    uint64_t v17 = 4LL;
    char v16 = v29;
    goto LABEL_33;
  }

  if (v30)
  {
    uint64_t v17 = 5LL;
LABEL_33:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  operator delete(v7);
}

void sub_29FCD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
}

void *sub_29FDE8(void *result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_49AA80);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = result;
    int v3 = __cxa_guard_acquire(&qword_49AA80);
    uint64_t result = v2;
    if (v3)
    {
      int v4 = 1886216809;
      sub_1873F8(&qword_49AA68, &v4, 1uLL);
      __cxa_guard_release(&qword_49AA80);
      uint64_t result = v2;
    }
  }

  *uint64_t result = &off_47A270;
  result[3] = result;
  return result;
}

void sub_29FE7C(_Unwind_Exception *a1)
{
}

void sub_29FE94(uint64_t (***a1)())
{
  if ((sub_1CC090() & 1) != 0)
  {
    uint64_t v2 = &off_47A390;
  }

  else
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_49B610);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_49B610))
    {
      qword_49B5F8 = 0LL;
      qword_49B600 = 0LL;
      qword_49B608 = 0LL;
      int v4 = operator new(8uLL);
      qword_49B5F8 = (uint64_t)v4;
      void *v4 = 0x706D6269706D6274LL;
      qword_49B600 = (uint64_t)(v4 + 1);
      qword_49B608 = (uint64_t)(v4 + 1);
      __cxa_guard_release(&qword_49B610);
    }

    uint64_t v2 = &off_47A3D8;
  }

  *a1 = v2;
  a1[3] = (uint64_t (**)())a1;
}

void sub_29FF38(_Unwind_Exception *a1)
{
}

void *sub_29FF50(uint64_t a1, int a2)
{
  if ((MGGetBoolAnswer(@"assistant") & 1) == 0 && (sub_93B80() & 1) == 0)
  {
    uint64_t v26 = (os_log_t *)sub_138E8(13);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      __int16 v95 = 1024;
      int v96 = 662;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!a2)
  {
    v84[0] = &off_47A468;
    unint64_t v85 = v84;
    unint64_t v83 = v82;
    unint64_t v81 = v80;
    v82[0] = &off_47A4B0;
    v78[0] = &off_47A540;
    unint64_t v79 = v78;
    v80[0] = &off_47A4F8;
    if (sub_56120() == 2
      || sub_56120() == 3
      || sub_56120() == 4
      || sub_56120() == 5
      || sub_56120() == 195)
    {
      unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_49BB50);
      if ((v7 & 1) != 0 || !__cxa_guard_acquire(&qword_49BB50))
      {
        uint64_t v8 = &unk_49B998;
        goto LABEL_20;
      }

      v98[0] = 0x7068646D7073706BLL;
      sub_1873F8(&__p, v98, 2uLL);
      unint64_t v97 = buf;
      v92[0] = &off_47A0C0;
      unint64_t v93 = v92;
      *(void *)AudioObjectPropertyAddress buf = &off_47A078;
      v90[0] = &off_47A108;
      unint64_t v91 = v90;
      unsigned __int8 v87 = 0LL;
      v88[0] = &off_47A150;
      unsigned __int8 v89 = v88;
      sub_29F540( (uint64_t)&unk_49B998,  17,  (uint64_t)&__p,  0,  1987277417,  1667855215,  1768776806,  0,  (uint64_t)buf,  (uint64_t)v92,  (uint64_t)v90,  (uint64_t)v88,  (uint64_t)v86,  0LL);
      uint64_t v29 = v87;
      if (v87 == v86)
      {
        uint64_t v30 = 4LL;
        uint64_t v29 = v86;
      }

      else
      {
        if (!v87) {
          goto LABEL_120;
        }
        uint64_t v30 = 5LL;
      }

      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_120:
      uint64_t v44 = v89;
      if (v89 == v88)
      {
        uint64_t v45 = 4LL;
        uint64_t v44 = v88;
      }

      else
      {
        if (!v89) {
          goto LABEL_125;
        }
        uint64_t v45 = 5LL;
      }

      (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_125:
      unsigned __int8 v46 = v91;
      if (v91 == v90)
      {
        uint64_t v47 = 4LL;
        unsigned __int8 v46 = v90;
      }

      else
      {
        if (!v91) {
          goto LABEL_130;
        }
        uint64_t v47 = 5LL;
      }

      (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_130:
      uint64_t v48 = v93;
      if (v93 == v92)
      {
        uint64_t v49 = 4LL;
        uint64_t v48 = v92;
      }

      else
      {
        if (!v93) {
          goto LABEL_135;
        }
        uint64_t v49 = 5LL;
      }

      (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_135:
      uint64_t v50 = v97;
      if (v97 == buf)
      {
        uint64_t v51 = 4LL;
        uint64_t v50 = buf;
      }

      else
      {
        if (!v97)
        {
LABEL_140:
          if (__p)
          {
            uint64_t v69 = __p;
            operator delete(__p);
          }

          uint64_t v52 = &unk_49B998;
          unsigned __int8 v53 = &qword_49BB50;
LABEL_143:
          __cxa_guard_release(v53);
          uint64_t v8 = v52;
LABEL_20:
          sub_71648(a1, (uint64_t)v8);
          uint64_t v9 = v79;
          if (v79 == v78)
          {
            uint64_t v10 = 4LL;
            uint64_t v9 = v78;
          }

          else
          {
            if (!v79) {
              goto LABEL_39;
            }
            uint64_t v10 = 5LL;
          }

          (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_39:
          uint64_t v17 = v81;
          if (v81 == v80)
          {
            uint64_t v18 = 4LL;
            uint64_t v17 = v80;
          }

          else
          {
            if (!v81) {
              goto LABEL_44;
            }
            uint64_t v18 = 5LL;
          }

          (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_44:
          __int16 v19 = v83;
          if (v83 == v82)
          {
            uint64_t v20 = 4LL;
            __int16 v19 = v82;
          }

          else
          {
            if (!v83) {
              goto LABEL_49;
            }
            uint64_t v20 = 5LL;
          }

          (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_49:
          uint64_t result = v85;
          if (v85 == v84)
          {
            uint64_t v16 = 4LL;
            uint64_t result = v84;
            return (void *)(*(uint64_t (**)(void))(*result + 8 * v16))();
          }

          goto LABEL_50;
        }

        uint64_t v51 = 5LL;
      }

      (*(void (**)(void))(*v50 + 8 * v51))();
      goto LABEL_140;
    }

    unsigned __int8 v21 = atomic_load((unsigned __int8 *)&qword_49BD10);
    if ((v21 & 1) != 0 || !__cxa_guard_acquire(&qword_49BD10))
    {
      uint64_t v8 = &unk_49BB58;
      goto LABEL_20;
    }

    qmemcpy(v98, "oaspBphpwphp", 12);
    sub_1873F8(&__p, v98, 3uLL);
    uint64_t v54 = (uint64_t)v85;
    if (v85)
    {
      if (v85 == v84)
      {
        unint64_t v97 = buf;
        (*(void (**)(uint64_t, void *))(v84[0] + 24LL))((uint64_t)v84, buf);
LABEL_150:
        uint64_t v55 = (uint64_t)v83;
        if (v83)
        {
          if (v83 == v82)
          {
            unint64_t v93 = v92;
            (*(void (**)(void *, void *))(v82[0] + 24LL))(v82, v92);
LABEL_155:
            uint64_t v56 = (uint64_t)v81;
            if (v81)
            {
              if (v81 == v80)
              {
                unint64_t v91 = v90;
                (*(void (**)(void *, void *))(v80[0] + 24LL))(v80, v90);
LABEL_160:
                uint64_t v57 = (uint64_t)v79;
                if (v79)
                {
                  if (v79 == v78)
                  {
                    unsigned __int8 v89 = v88;
                    (*(void (**)(uint64_t, void *))(v78[0] + 24LL))((uint64_t)v78, v88);
LABEL_165:
                    unsigned __int8 v87 = 0LL;
                    sub_29F540( (uint64_t)&unk_49BB58,  17,  (uint64_t)&__p,  0,  1987277417,  1667855215,  1768776806,  1,  (uint64_t)buf,  (uint64_t)v92,  (uint64_t)v90,  (uint64_t)v88,  (uint64_t)v86,  0LL);
                    unsigned __int8 v58 = v87;
                    if (v87 == v86)
                    {
                      uint64_t v59 = 4LL;
                      unsigned __int8 v58 = v86;
                    }

                    else
                    {
                      if (!v87) {
                        goto LABEL_170;
                      }
                      uint64_t v59 = 5LL;
                    }

                    (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_170:
                    unsigned __int8 v60 = v89;
                    if (v89 == v88)
                    {
                      uint64_t v61 = 4LL;
                      unsigned __int8 v60 = v88;
                    }

                    else
                    {
                      if (!v89) {
                        goto LABEL_175;
                      }
                      uint64_t v61 = 5LL;
                    }

                    (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_175:
                    uint64_t v62 = v91;
                    if (v91 == v90)
                    {
                      uint64_t v63 = 4LL;
                      uint64_t v62 = v90;
                    }

                    else
                    {
                      if (!v91) {
                        goto LABEL_180;
                      }
                      uint64_t v63 = 5LL;
                    }

                    (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_180:
                    unint64_t v64 = v93;
                    if (v93 == v92)
                    {
                      uint64_t v65 = 4LL;
                      unint64_t v64 = v92;
                    }

                    else
                    {
                      if (!v93) {
                        goto LABEL_185;
                      }
                      uint64_t v65 = 5LL;
                    }

                    (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_185:
                    uint64_t v66 = v97;
                    if (v97 == buf)
                    {
                      uint64_t v67 = 4LL;
                      uint64_t v66 = buf;
                    }

                    else
                    {
                      if (!v97)
                      {
LABEL_190:
                        if (__p)
                        {
                          uint64_t v69 = __p;
                          operator delete(__p);
                        }

                        uint64_t v52 = &unk_49BB58;
                        unsigned __int8 v53 = &qword_49BD10;
                        goto LABEL_143;
                      }

                      uint64_t v67 = 5LL;
                    }

                    (*(void (**)(void))(*v66 + 8 * v67))();
                    goto LABEL_190;
                  }

                  uint64_t v57 = (*(uint64_t (**)(void))(*v79 + 16LL))();
                }

                unsigned __int8 v89 = (void *)v57;
                goto LABEL_165;
              }

              uint64_t v56 = (*(uint64_t (**)(void))(*v81 + 16LL))();
            }

            unint64_t v91 = (void *)v56;
            goto LABEL_160;
          }

          uint64_t v55 = (*(uint64_t (**)(void))(*v83 + 16LL))();
        }

        unint64_t v93 = (void *)v55;
        goto LABEL_155;
      }

      uint64_t v54 = (*(uint64_t (**)(void *))(*v85 + 16LL))(v85);
    }

    unint64_t v97 = (_BYTE *)v54;
    goto LABEL_150;
  }

  v76[0] = &off_47A468;
  unint64_t v77 = v76;
  unint64_t v75 = v74;
  uint64_t v73 = v72;
  v74[0] = &off_47A4B0;
  v70[0] = &off_47A540;
  unint64_t v71 = v70;
  v72[0] = &off_47A4F8;
  if (sub_56120() == 2
    || sub_56120() == 3
    || sub_56120() == 4
    || sub_56120() == 5
    || sub_56120() == 195)
  {
    unsigned __int8 v22 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      __int16 v95 = 1024;
      int v96 = 565;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "Precondition failure.");
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_49BED0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_49BED0))
  {
    qmemcpy(v98, "oaspBphpwphp", 12);
    sub_1873F8(&__p, v98, 3uLL);
    uint64_t v25 = (uint64_t)v77;
    if (v77)
    {
      if (v77 == v76)
      {
        unint64_t v97 = buf;
        (*(void (**)(uint64_t, void *))(v76[0] + 24LL))((uint64_t)v76, buf);
LABEL_75:
        uint64_t v31 = (uint64_t)v75;
        if (v75)
        {
          if (v75 == v74)
          {
            unint64_t v93 = v92;
            (*(void (**)(void *, void *))(v74[0] + 24LL))(v74, v92);
LABEL_80:
            uint64_t v32 = (uint64_t)v73;
            if (v73)
            {
              if (v73 == v72)
              {
                unint64_t v91 = v90;
                (*(void (**)(void *, void *))(v72[0] + 24LL))(v72, v90);
LABEL_85:
                uint64_t v33 = (uint64_t)v71;
                if (v71)
                {
                  if (v71 == v70)
                  {
                    unsigned __int8 v89 = v88;
                    (*(void (**)(uint64_t, void *))(v70[0] + 24LL))((uint64_t)v70, v88);
LABEL_90:
                    unsigned __int8 v87 = 0LL;
                    sub_29F540( (uint64_t)&unk_49BD18,  18,  (uint64_t)&__p,  1,  1987277417,  1667855215,  1768776806,  1,  (uint64_t)buf,  (uint64_t)v92,  (uint64_t)v90,  (uint64_t)v88,  (uint64_t)v86,  0LL);
                    unsigned __int8 v34 = v87;
                    if (v87 == v86)
                    {
                      uint64_t v35 = 4LL;
                      unsigned __int8 v34 = v86;
                    }

                    else
                    {
                      if (!v87) {
                        goto LABEL_95;
                      }
                      uint64_t v35 = 5LL;
                    }

                    (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_95:
                    unsigned __int8 v36 = v89;
                    if (v89 == v88)
                    {
                      uint64_t v37 = 4LL;
                      unsigned __int8 v36 = v88;
                    }

                    else
                    {
                      if (!v89) {
                        goto LABEL_100;
                      }
                      uint64_t v37 = 5LL;
                    }

                    (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_100:
                    uint64_t v38 = v91;
                    if (v91 == v90)
                    {
                      uint64_t v39 = 4LL;
                      uint64_t v38 = v90;
                    }

                    else
                    {
                      if (!v91) {
                        goto LABEL_105;
                      }
                      uint64_t v39 = 5LL;
                    }

                    (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_105:
                    __int128 v40 = v93;
                    if (v93 == v92)
                    {
                      uint64_t v41 = 4LL;
                      __int128 v40 = v92;
                    }

                    else
                    {
                      if (!v93) {
                        goto LABEL_110;
                      }
                      uint64_t v41 = 5LL;
                    }

                    (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_110:
                    unsigned __int8 v42 = v97;
                    if (v97 == buf)
                    {
                      uint64_t v43 = 4LL;
                      unsigned __int8 v42 = buf;
                    }

                    else
                    {
                      if (!v97)
                      {
LABEL_115:
                        if (__p)
                        {
                          uint64_t v69 = __p;
                          operator delete(__p);
                        }

                        __cxa_guard_release(&qword_49BED0);
                        goto LABEL_10;
                      }

                      uint64_t v43 = 5LL;
                    }

                    (*(void (**)(void))(*v42 + 8 * v43))();
                    goto LABEL_115;
                  }

                  uint64_t v33 = (*(uint64_t (**)(void))(*v71 + 16LL))();
                }

                unsigned __int8 v89 = (void *)v33;
                goto LABEL_90;
              }

              uint64_t v32 = (*(uint64_t (**)(void))(*v73 + 16LL))();
            }

            unint64_t v91 = (void *)v32;
            goto LABEL_85;
          }

          uint64_t v31 = (*(uint64_t (**)(void))(*v75 + 16LL))();
        }

        unint64_t v93 = (void *)v31;
        goto LABEL_80;
      }

      uint64_t v25 = (*(uint64_t (**)(void))(*v77 + 16LL))();
    }

    unint64_t v97 = (_BYTE *)v25;
    goto LABEL_75;
  }

void sub_2A0B04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, char *a38, char a39, uint64_t a40, uint64_t a41, char *a42, char a43, uint64_t a44, uint64_t a45, char *a46)
{
  uint64_t v48 = *(void **)(v46 - 136);
  if (v48 == (void *)(v46 - 160))
  {
    uint64_t v49 = 4LL;
    uint64_t v48 = (void *)(v46 - 160);
  }

  else
  {
    if (!v48) {
      goto LABEL_6;
    }
    uint64_t v49 = 5LL;
  }

  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_6:
  uint64_t v50 = *(void **)(v46 - 104);
  if (v50 == (void *)(v46 - 128))
  {
    uint64_t v51 = 4LL;
    uint64_t v50 = (void *)(v46 - 128);
  }

  else
  {
    if (!v50) {
      goto LABEL_11;
    }
    uint64_t v51 = 5LL;
  }

  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_11:
  uint64_t v52 = *(void **)(v46 - 72);
  if (v52 == (void *)(v46 - 96))
  {
    uint64_t v53 = 4LL;
    uint64_t v52 = (void *)(v46 - 96);
  }

  else
  {
    if (!v52) {
      goto LABEL_16;
    }
    uint64_t v53 = 5LL;
  }

  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_16:
  if (__p) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_49BD10);
  uint64_t v54 = a38;
  if (a38 == &a35)
  {
    uint64_t v55 = 4LL;
    uint64_t v54 = &a35;
  }

  else
  {
    if (!a38) {
      goto LABEL_23;
    }
    uint64_t v55 = 5LL;
  }

  (*(void (**)(void))(*(void *)v54 + 8 * v55))();
LABEL_23:
  uint64_t v56 = a42;
  if (a42 == &a39)
  {
    uint64_t v57 = 4LL;
    uint64_t v56 = &a39;
  }

  else
  {
    if (!a42) {
      goto LABEL_28;
    }
    uint64_t v57 = 5LL;
  }

  (*(void (**)(void))(*(void *)v56 + 8 * v57))();
LABEL_28:
  unsigned __int8 v58 = a46;
  if (a46 == &a43)
  {
    uint64_t v59 = 4LL;
    unsigned __int8 v58 = &a43;
  }

  else
  {
    if (!a46) {
      goto LABEL_33;
    }
    uint64_t v59 = 5LL;
  }

  (*(void (**)(void))(*(void *)v58 + 8 * v59))();
LABEL_33:
  unsigned __int8 v60 = *(void **)(v46 - 232);
  if (v60 == (void *)(v46 - 256))
  {
    uint64_t v61 = 4LL;
    unsigned __int8 v60 = (void *)(v46 - 256);
  }

  else
  {
    if (!v60) {
      goto LABEL_38;
    }
    uint64_t v61 = 5LL;
  }

  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_38:
  _Unwind_Resume(a1);
}

void *sub_2A1034()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A660;
  return result;
}

void sub_2A1058(uint64_t a1, void *a2)
{
  *a2 = &off_47A660;
}

uint64_t sub_2A1070(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if ((sub_7531C() & 1) != 0 || !sub_7192C(1886613611, *a2, a2[1])) {
    return 1LL;
  }
  uint64_t result = sub_1CBD44();
  if ((_DWORD)result) {
    return *(_BYTE *)(a3 + 12) && *(_DWORD *)(a3 + 8) == 1836084597;
  }
  return result;
}

void *sub_2A10E0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A618;
  return result;
}

void sub_2A1104(uint64_t a1, void *a2)
{
  *a2 = &off_47A618;
}

BOOL sub_2A111C(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  int v5 = sub_7531C();
  if (*a3 == 1668509810 || v5 != 0)
  {
    unsigned __int8 v7 = a2[1];
    if (*a2 == v7) {
      return sub_7192C(1885565807, *a2, v7);
    }
    uint64_t v8 = *a2;
    while (*(_DWORD *)(*v8 + 4) || *(_DWORD *)*v8 != 1987277417)
    {
      if (++v8 == v7) {
        return sub_7192C(1885565807, *a2, v7);
      }
    }
  }

  return 0LL;
}

void *sub_2A11B4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A5D0;
  return result;
}

void sub_2A11D8(uint64_t a1, void *a2)
{
  *a2 = &off_47A5D0;
}

uint64_t sub_2A11F0(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t result = 0LL;
  int v5 = *(_DWORD *)(a3 + 4);
  if (v5 <= 1987077986)
  {
    BOOL v6 = v5 == 1768057203;
    int v7 = 1919776355;
  }

  else
  {
    BOOL v6 = v5 == 1987077987 || v5 == 1987081833;
    int v7 = 1987081839;
  }

  if (!v6 && v5 != v7)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (*a2 == v10)
    {
LABEL_18:
      if (v5 == 1987208039 && sub_7192C(1885892674, v9, v10))
      {
        if (sub_1F66B8(1701869160, *a2, a2[1])) {
          return sub_14F9C4() == 2;
        }
        else {
          return sub_1F66B8(1701868400, *a2, a2[1]);
        }
      }

      else
      {
        return 1LL;
      }
    }

    else
    {
      uint64_t v11 = *a2;
      while (*(_DWORD *)(*v11 + 4) || *(_DWORD *)*v11 != 1987277417)
      {
        if (++v11 == v10) {
          goto LABEL_18;
        }
      }

      return 0LL;
    }
  }

  return result;
}

void *sub_2A1318()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A588;
  return result;
}

void sub_2A133C(uint64_t a1, void *a2)
{
  *a2 = &off_47A588;
}

BOOL sub_2A1354(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  return v2 == 1987208039 || v2 == 1987211117;
}

void *sub_2A137C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A540;
  return result;
}

void sub_2A13A0(uint64_t a1, void *a2)
{
  *a2 = &off_47A540;
}

uint64_t sub_2A13B8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) == 1986098036 || sub_7192C(1885892706, *a2, a2[1])) {
    return 0LL;
  }
  else {
    return sub_1F6954(*a2, a2[1]) ^ 1;
  }
}

void *sub_2A141C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A4F8;
  return result;
}

void sub_2A1440(uint64_t a1, void *a2)
{
  *a2 = &off_47A4F8;
}

BOOL sub_2A1458(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  return v2 == 1987211117 || v2 == 1987208039;
}

void *sub_2A1480()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A4B0;
  return result;
}

void sub_2A14A4(uint64_t a1, void *a2)
{
  *a2 = &off_47A4B0;
}

uint64_t sub_2A14BC(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 != 1986357346 && v2 != 1651794544) {
    return 1LL;
  }
  LODWORD(result) = sub_E450C(*a2);
  if (v2 == 1684108899) {
    return 1LL;
  }
  else {
    return result;
  }
}

void *sub_2A151C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A468;
  return result;
}

void sub_2A1540(uint64_t a1, void *a2)
{
  *a2 = &off_47A468;
}

BOOL sub_2A1558(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  int v4 = a2[36];
  if (v4 == 1885433888) {
    return 1LL;
  }
  BOOL v9 = sub_1F7024((uint64_t)a2, *a4, a4[1]);
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a2 + 416LL))(a2)
    || v4 == 1885892674 && (sub_1F6EF0((uint64_t)a2) & 1) == 0 && v9)
  {
    return 0LL;
  }

  int v11 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 != 1651795060 && v11 != 1751414371)
  {
    int v12 = sub_E450C(*(_DWORD *)a3);
    if (v11 != 1684108899 && !v12)
    {
      if (v9) {
        return 1LL;
      }
      uint64_t v35 = 0LL;
      uint64_t v36 = 0LL;
      unsigned __int8 v34 = &v35;
      uint64_t v13 = *a4;
      uint64_t v14 = a4[1];
      if (*a4 == v14)
      {
LABEL_18:
        uint64_t v16 = 0LL;
        BOOL v5 = 1LL;
LABEL_19:
        sub_FF3B8(v16);
        return v5;
      }

      while (1)
      {
        uint64_t v15 = *(void *)v13;
        if (!*(_DWORD *)(*(void *)v13 + 4LL) && *(_DWORD *)v15 == 1986291046) {
          break;
        }
        v13 += 8LL;
        if (v13 == v14) {
          goto LABEL_18;
        }
      }

      __p[0] = &off_475C58;
      uint64_t v41 = __p;
      sub_1F6154((uint64_t)&v37, (void *)(v15 + 16), (uint64_t)__p);
      uint64_t v32 = v41;
      if (v41 == __p)
      {
        uint64_t v33 = 4LL;
        uint64_t v32 = __p;
      }

      else
      {
        if (!v41)
        {
LABEL_56:
          sub_120C78((uint64_t *)&v34, v37, &v38);
          sub_FF3B8(v38);
          uint64_t v16 = v35;
          BOOL v5 = v36 == 0;
          goto LABEL_19;
        }

        uint64_t v33 = 5LL;
      }

      (*((void (**)(void))*v32 + v33))();
      goto LABEL_56;
    }

    int v11 = *(_DWORD *)a3;
  }

  uint64_t v17 = *(unsigned __int8 *)(a3 + 31);
  if ((v17 & 0x80u) != 0LL) {
    uint64_t v17 = *(void *)(a3 + 16);
  }
  if (v17) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v11 == 1986357346;
  }
  if (v18) {
    return a2[36] == 1886609775;
  }
  (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a2 + 440LL))(__p, a2);
  uint64_t v19 = *(unsigned __int8 *)(a3 + 31);
  if ((v19 & 0x80u) == 0LL) {
    uint64_t v20 = (void *)*(unsigned __int8 *)(a3 + 31);
  }
  else {
    uint64_t v20 = *(void **)(a3 + 16);
  }
  unint64_t v21 = v40;
  int v22 = (char)v40;
  if ((v40 & 0x80u) != 0) {
    unint64_t v21 = (unint64_t)__p[1];
  }
  if (v20 == (void *)v21)
  {
    unsigned __int8 v23 = (const void **)(a3 + 8);
    if ((v40 & 0x80u) == 0) {
      uint64_t v24 = __p;
    }
    else {
      uint64_t v24 = (void **)__p[0];
    }
    if ((v19 & 0x80) != 0)
    {
      BOOL v5 = memcmp(*v23, v24, *(void *)(a3 + 16)) == 0;
    }

    else if (*(_BYTE *)(a3 + 31))
    {
      uint64_t v25 = v19 - 1;
      do
      {
        int v27 = *(unsigned __int8 *)v23;
        unsigned __int8 v23 = (const void **)((char *)v23 + 1);
        int v26 = v27;
        int v29 = *(unsigned __int8 *)v24;
        uint64_t v24 = (void **)((char *)v24 + 1);
        int v28 = v29;
        BOOL v31 = v25-- != 0;
        BOOL v5 = v26 == v28;
      }

      while (v26 == v28 && v31);
    }

    else
    {
      BOOL v5 = 1LL;
    }
  }

  else
  {
    BOOL v5 = 0LL;
  }

  if (v22 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_2A1840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void *sub_2A18A0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A420;
  return result;
}

void sub_2A18C4(uint64_t a1, void *a2)
{
  *a2 = &off_47A420;
}

uint64_t sub_2A18DC(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4)
{
  int v4 = *(_DWORD *)(a3 + 4);
  if (v4 != 1986098036 && v4 != 1987208039)
  {
    int v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "AlternateVAD.cpp";
        __int16 v16 = 1024;
        int v17 = 520;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
      }
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (sub_14F9C4() != 1 && sub_7192C(1885892674, *a2, a2[1]) && sub_1F66B8(1701869160, *a2, a2[1]))
  {
    int v8 = *a4;
    uint64_t result = 1LL;
    if (*a4 > 1751414370)
    {
      if (v8 != 1986357346)
      {
        int v10 = 1751414371;
LABEL_14:
        if (v8 != v10) {
          return result;
        }
      }
    }

    else if (v8 != 1651794544)
    {
      int v10 = 1651795060;
      goto LABEL_14;
    }
  }

  if (!sub_7192C(1886614639, *a2, a2[1]) || (uint64_t result = 1LL, *a4 != 1752132965) && *a4 != 1987012963)
  {
    LODWORD(result) = sub_1F6954(*a2, a2[1]);
    if (*a4 == 1651794544) {
      return 0LL;
    }
    else {
      return result;
    }
  }

  return result;
}

void sub_2A1AD0(_Unwind_Exception *exception_object)
{
}

void *sub_2A1AF4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A3D8;
  return result;
}

void sub_2A1B18(uint64_t a1, void *a2)
{
  *a2 = &off_47A3D8;
}

BOOL sub_2A1B30(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unsigned __int8 v3 = (int *)qword_49B5F8;
  if (qword_49B5F8 == qword_49B600) {
    return 0LL;
  }
  while (1)
  {
    if (*(void *)(a2 + 8) != a2)
    {
      int v4 = *v3;
      uint64_t v5 = *(void *)(a2 + 8);
      do
      {
        BOOL v6 = *(_DWORD *)(v5 + 16) == v4 || *(_DWORD *)(v5 + 20) == v4;
        char v7 = v6;
        if (v6) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }

      while (v5 != a2);
      if ((v7 & 1) != 0) {
        break;
      }
    }
  }

  return v3 != (int *)qword_49B600 && sub_7192C(*v3, *a3, a3[1]);
}

void *sub_2A1BAC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A390;
  return result;
}

void sub_2A1BD0(uint64_t a1, void *a2)
{
  *a2 = &off_47A390;
}

BOOL sub_2A1BE8(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  do
  {
    BOOL v5 = *(_DWORD *)(v4 + 16) == 1886216820 || *(_DWORD *)(v4 + 20) == 1886216820;
    int v6 = v5;
    if (v5) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }

  while (v4 != a2);
  if (v6) {
    return sub_7192C(1886216820, *a3, a3[1]);
  }
  if (v3 == a2) {
    return 0LL;
  }
  do
  {
    BOOL v8 = *(_DWORD *)(v3 + 16) == 1886216809 || *(_DWORD *)(v3 + 20) == 1886216809;
    BOOL result = v8;
    if (v8) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }

  while (v3 != a2);
  return result;
}

void *sub_2A1C74()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_47A348;
  return result;
}

void sub_2A1C98(uint64_t a1, void *a2)
{
  *a2 = &off_47A348;
}

uint64_t sub_2A1CB0(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  BOOL v4 = *a3 == 1668576377 || *a3 == 1668703084;
  if (v4
    || ((result = 0LL, int v6 = a3[1], v6 <= 1987077986)
      ? (BOOL v7 = v6 == 1768057203, v8 = 1919776355)
      : (v6 != 1987077987 ? (BOOL v7 = v6 == 1987081839) : (BOOL v7 = 1), v8 = 1987081833),
        !v7 ? (BOOL v9 = v6 == v8) : (BOOL v9 = 1),
        v9))
  {
    if (sub_7192C(1886216820, *a2, a2[1])
      && sub_1F649C((_DWORD **)*a2, (_DWORD **)a2[1], 1)
      && (sub_1F6E54(*a2, a2[1]) & 1) != 0)
    {
      return 1LL;
    }

    else
    {
      uint64_t result = sub_7192C(1886613611, *a2, a2[1]);
      if ((_DWORD)result)
      {
        uint64_t result = sub_7192C(1886216809, *a2, a2[1]);
        if ((_DWORD)result) {
          return MGGetBoolAnswer(@"DeviceSupportsSiriBargeIn");
        }
      }
    }
  }

  return result;
}

void *sub_2A1DC4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A300;
  return result;
}

void sub_2A1DE8(uint64_t a1, void *a2)
{
  *a2 = &off_47A300;
}

uint64_t sub_2A1E00(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  BOOL v4 = *a3 == 1668576377 || *a3 == 1668703084;
  if (v4
    || ((int v5 = a3[1], result = 1LL, v5 <= 1987077986)
      ? (BOOL v7 = v5 == 1768057203, v8 = 1919776355)
      : (v5 != 1987077987 ? (BOOL v7 = v5 == 1987081839) : (BOOL v7 = 1), v8 = 1987081833),
        !v7 ? (BOOL v9 = v5 == v8) : (BOOL v9 = 1),
        v9))
  {
    if (sub_7192C(1886216820, *a2, a2[1]))
    {
      uint64_t result = sub_1F649C((_DWORD **)*a2, (_DWORD **)a2[1], 1);
      if ((_DWORD)result) {
        return sub_1F6E54(*a2, a2[1]);
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

void *sub_2A1ED4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A2B8;
  return result;
}

void sub_2A1EF8(uint64_t a1, void *a2)
{
  *a2 = &off_47A2B8;
}

uint64_t sub_2A1F10(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, int *a5)
{
  if (*a5 == 1987012963)
  {
LABEL_2:
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_49B3A0);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_49B3A0))
    {
      qword_49B388 = 0LL;
      qword_49B390 = 0LL;
      qword_49B398 = 0LL;
      uint64_t v41 = operator new(8uLL);
      qword_49B388 = (uint64_t)v41;
      void *v41 = 0x70757369706D6269LL;
      qword_49B390 = (uint64_t)(v41 + 1);
      qword_49B398 = (uint64_t)(v41 + 1);
      __cxa_guard_release(&qword_49B3A0);
    }

    BOOL v7 = (int *)qword_49B388;
    if (qword_49B388 != qword_49B390)
    {
      do
      {
        if (*(void *)(a2 + 8) == a2)
        {
          uint64_t result = 0LL;
        }

        else
        {
          int v8 = *v7;
          uint64_t v9 = *(void *)(a2 + 8);
          do
          {
            BOOL v10 = *(_DWORD *)(v9 + 16) == v8 || *(_DWORD *)(v9 + 20) == v8;
            uint64_t result = v10;
            if (v10) {
              break;
            }
            uint64_t v9 = *(void *)(v9 + 8);
          }

          while (v9 != a2);
        }

        if ((result & 1) != 0) {
          break;
        }
        ++v7;
      }

      while (v7 != (int *)qword_49B390);
      return result;
    }

    return 0LL;
  }

  uint64_t v15 = sub_546E0();
  std::string __p = 0LL;
  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  strcpy(v48, "cwdv");
  v48[8] = 0;
  int v49 = 3;
  v51[0] = 0LL;
  v51[1] = 0LL;
  uint64_t v50 = v51;
  int v52 = 44739242;
  CFTypeRef cf = 0LL;
  v55[0] = &off_475CE8;
  uint64_t v56 = v55;
  sub_FFB0C(v54, v15, &__p, (uint64_t)v55);
  __int16 v16 = v56;
  if (v56 == v55)
  {
    uint64_t v17 = 4LL;
    __int16 v16 = v55;
    goto LABEL_23;
  }

  if (v56)
  {
    uint64_t v17 = 5LL;
LABEL_23:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v51[0]);
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }

  for (uint64_t i = (uint64_t *)v54[1]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v54)
    {
      sub_85B80(v54);
      unsigned __int8 v25 = atomic_load((unsigned __int8 *)&qword_49B400);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_49B400))
      {
        qword_49B3E8 = 0LL;
        qword_49B3F0 = 0LL;
        qword_49B3F8 = 0LL;
        unsigned __int8 v42 = operator new(8uLL);
        qword_49B3E8 = (uint64_t)v42;
        *unsigned __int8 v42 = 0x7068706270687042LL;
        qword_49B3F0 = (uint64_t)(v42 + 1);
        qword_49B3F8 = (uint64_t)(v42 + 1);
        __cxa_guard_release(&qword_49B400);
      }

      int v27 = (int *)qword_49B3E8;
      uint64_t v26 = qword_49B3F0;
      while (v27 != (int *)v26)
      {
        if (sub_7192C(*v27, *a3, a3[1]))
        {
          int v28 = *a5;
          BOOL v30 = *a5 == 1752132965 || v28 == 1969840752 || v28 == 1886352244;
          if (v30
            && (sub_1F66B8(1701869160, *a3, a3[1])
             || !sub_1F649C((_DWORD **)*a3, (_DWORD **)a3[1], 0) && !sub_1F602C(*a3, a3[1])))
          {
            goto LABEL_2;
          }

          goto LABEL_62;
        }

        ++v27;
      }

      goto LABEL_62;
    }

    uint64_t v19 = (std::__shared_weak_count *)i[3];
    if (v19)
    {
      uint64_t v20 = std::__shared_weak_count::lock(v19);
      if (v20)
      {
        unint64_t v21 = v20;
        uint64_t v22 = i[2];
        if (v22)
        {
          else {
            LOBYTE(v22) = 0;
          }
        }

        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          unint64_t v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }

        if ((v22 & 1) != 0) {
          break;
        }
      }
    }
  }

  sub_85B80(v54);
  if (*(_DWORD *)(a4 + 4) != 1986098036 || *a5 == 1751414371 || *a5 == 1651795060) {
    goto LABEL_2;
  }
LABEL_62:
  if (sub_7192C(1885892706, *a3, a3[1]))
  {
    unsigned __int8 v31 = atomic_load((unsigned __int8 *)&qword_49B3C0);
    if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_49B3C0))
    {
      qword_49B3A8 = 0LL;
      qword_49B3B0 = 0LL;
      qword_49B3B8 = 0LL;
      uint64_t v43 = operator new(0x10uLL);
      qword_49B3A8 = (uint64_t)v43;
      _OWORD *v43 = xmmword_403300;
      qword_49B3B0 = (uint64_t)(v43 + 1);
      qword_49B3B8 = (uint64_t)(v43 + 1);
      __cxa_guard_release(&qword_49B3C0);
    }

    uint64_t v32 = (int *)qword_49B3A8;
    if (qword_49B3A8 == qword_49B3B0) {
      return 0LL;
    }
    do
    {
      if (*(void *)(a2 + 8) == a2)
      {
        uint64_t result = 0LL;
      }

      else
      {
        int v33 = *v32;
        uint64_t v34 = *(void *)(a2 + 8);
        do
        {
          BOOL v35 = *(_DWORD *)(v34 + 16) == v33 || *(_DWORD *)(v34 + 20) == v33;
          uint64_t result = v35;
          if (v35) {
            break;
          }
          uint64_t v34 = *(void *)(v34 + 8);
        }

        while (v34 != a2);
      }

      if ((result & 1) != 0) {
        break;
      }
      ++v32;
    }

    while (v32 != (int *)qword_49B3B0);
  }

  else
  {
    unsigned __int8 v36 = atomic_load((unsigned __int8 *)&qword_49B3E0);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_49B3E0))
    {
      qword_49B3C8 = 0LL;
      qword_49B3D0 = 0LL;
      qword_49B3D8 = 0LL;
      uint64_t v44 = operator new(0xCuLL);
      qword_49B3D0 = (uint64_t)v44 + 12;
      qword_49B3D8 = (uint64_t)v44 + 12;
      qmemcpy(v44, "iwmpibmpisup", 12);
      qword_49B3C8 = (uint64_t)v44;
      __cxa_guard_release(&qword_49B3E0);
    }

    uint64_t v37 = (int *)qword_49B3C8;
    if (qword_49B3C8 == qword_49B3D0) {
      return 0LL;
    }
    do
    {
      if (*(void *)(a2 + 8) == a2)
      {
        uint64_t result = 0LL;
      }

      else
      {
        int v38 = *v37;
        uint64_t v39 = *(void *)(a2 + 8);
        do
        {
          BOOL v40 = *(_DWORD *)(v39 + 16) == v38 || *(_DWORD *)(v39 + 20) == v38;
          uint64_t result = v40;
          if (v40) {
            break;
          }
          uint64_t v39 = *(void *)(v39 + 8);
        }

        while (v39 != a2);
      }

      if ((result & 1) != 0) {
        break;
      }
      ++v37;
    }

    while (v37 != (int *)qword_49B3D0);
  }

  return result;
}

void sub_2A2478(_Unwind_Exception *a1)
{
}

void *sub_2A2554()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A270;
  return result;
}

void sub_2A2578(uint64_t a1, void *a2)
{
  *a2 = &off_47A270;
}

uint64_t sub_2A2590(uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4)
{
  else {
    BOOL v7 = 0;
  }
  if (v7
    && sub_7192C(1885892706, *a3, a3[1])
    && sub_1F649C((_DWORD **)*a3, (_DWORD **)a3[1], 1)
    && sub_1F6E54(*a3, a3[1]))
  {
    uint64_t v8 = *(void *)(a2 + 8);
    if (v8 != a2)
    {
      do
      {
        BOOL v9 = *(_DWORD *)(v8 + 16) == 1886216820 || *(_DWORD *)(v8 + 20) == 1886216820;
        uint64_t result = v9;
        if (v9) {
          break;
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }

      while (v8 != a2);
      return result;
    }

    return 0LL;
  }

  int v11 = (int *)qword_49AA68;
  if (qword_49AA68 == *(void *)algn_49AA70) {
    return 0LL;
  }
  do
  {
    if (*(void *)(a2 + 8) == a2)
    {
      uint64_t result = 0LL;
    }

    else
    {
      int v12 = *v11;
      uint64_t v13 = *(void *)(a2 + 8);
      do
      {
        BOOL v14 = *(_DWORD *)(v13 + 16) == v12 || *(_DWORD *)(v13 + 20) == v12;
        uint64_t result = v14;
        if (v14) {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }

      while (v13 != a2);
    }

    if ((result & 1) != 0) {
      break;
    }
    ++v11;
  }

  while (v11 != *(int **)algn_49AA70);
  return result;
}

void *sub_2A26C0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A228;
  return result;
}

void sub_2A26E4(uint64_t a1, void *a2)
{
  *a2 = &off_47A228;
}

uint64_t sub_2A26FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t result = _os_feature_enabled_impl("VirtualAudio", "system_local_vad_builtinspeaker_a2dp");
  if ((_DWORD)result)
  {
    int v7 = *(_DWORD *)(a2 + 144);
    if (v7 == 1885433888)
    {
      return 1LL;
    }

    else if (v7 == 1885892674)
    {
      uint64_t result = sub_7192C(1885892674, *a4, a4[1]);
      if ((_DWORD)result) {
        return sub_1F6EF0(a2);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *sub_2A2790()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A1E0;
  return result;
}

void sub_2A27B4(uint64_t a1, void *a2)
{
  *a2 = &off_47A1E0;
}

BOOL sub_2A27CC(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = sub_5954C();
  int v4 = (**(uint64_t (***)(uint64_t))v3)(v3);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 224LL))(v3);
  return v4 == 1 && v5 != 0 && sub_7192C(1886287212, *a2, a2[1]);
}

void *sub_2A284C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A198;
  return result;
}

void sub_2A2870(uint64_t a1, void *a2)
{
  *a2 = &off_47A198;
}

uint64_t sub_2A2888(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  int v4 = a2[1];
  if (*a2 == v4)
  {
LABEL_5:
    unsigned __int8 v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 990;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No Default VAD found in list of concrete routes",  buf,  0x12u);
      }
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No Default VAD found in list of concrete routes");
  }

  while (1)
  {
    uint64_t v5 = *v3;
    if (!*(_DWORD *)(*v3 + 4) && *(_DWORD *)v5 == 1986291046) {
      break;
    }
    if (++v3 == v4) {
      goto LABEL_5;
    }
  }

  BOOL v9 = (void *)(v5 + 16);
  BOOL v10 = *(void **)(v5 + 24);
  memset(__p, 0, 24);
  __int128 v11 = 0uLL;
  if (v10 != (void *)(v5 + 16))
  {
    while (1)
    {
      memset(buf, 0, 24);
      int v12 = __p[0];
      uint64_t v13 = __p[1];
      v72[0] = (std::__shared_weak_count *)buf;
      LOBYTE(v72[1]) = 0;
      int64_t v14 = (char *)__p[1] - (char *)__p[0];
      if (__p[1] != __p[0])
      {
        if (v14 < 0) {
          sub_7A87C();
        }
        uint64_t v15 = sub_7BE90(v14 >> 4);
        *(void *)AudioObjectPropertyAddress buf = v15;
        *(void *)&buf[16] = &v15[2 * v16];
        do
        {
          *uint64_t v15 = *v12;
          uint64_t v17 = v12[1];
          v15[1] = v17;
          if (v17)
          {
            BOOL v18 = (unint64_t *)(v17 + 16);
            do
              unint64_t v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }

          v12 += 2;
          v15 += 2;
        }

        while (v12 != v13);
        *(void *)&_DWORD buf[8] = v15;
      }

      uint64_t v20 = (__int128 *)(v10 + 4);
      sub_B8CBC((uint64_t *)v72, v10 + 4, "", 996);
      unint64_t v21 = v72[1];
      int v22 = (int)v72[0][6].__vftable;
      if (v72[1])
      {
        p_shared_owners = &v72[1]->__shared_owners_;
        do
          unint64_t v24 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v24 - 1, (unint64_t *)p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      unsigned __int8 v25 = *(void **)&buf[16];
      if (v22 == 1885433888) {
        goto LABEL_51;
      }
      uint64_t v26 = *(void *)&buf[8];
      if (*(void *)&buf[8] < *(void *)&buf[16])
      {
        **(void **)&_DWORD buf[8] = v10[4];
        uint64_t v27 = v10[5];
        *(void *)(v26 + 8) = v27;
        if (v27)
        {
          int v28 = (unint64_t *)(v27 + 16);
          do
            unint64_t v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }

        BOOL v30 = (char *)(v26 + 16);
        goto LABEL_50;
      }

      uint64_t v31 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
      unint64_t v32 = v31 + 1;
      uint64_t v33 = *(void *)&buf[16] - *(void *)buf;
      else {
        unint64_t v34 = v32;
      }
      BOOL v35 = (char *)sub_7BE90(v34);
      uint64_t v37 = &v35[16 * v31];
      __int128 v38 = *v20;
      *(_OWORD *)uint64_t v37 = *v20;
      if (*((void *)&v38 + 1))
      {
        uint64_t v39 = (unint64_t *)(*((void *)&v38 + 1) + 16LL);
        do
          unint64_t v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }

      BOOL v30 = v37 + 16;
      uint64_t v41 = *(void **)buf;
      unsigned __int8 v42 = *(void **)&buf[8];
      if (*(void *)&buf[8] == *(void *)buf)
      {
        *(void *)AudioObjectPropertyAddress buf = v37;
        *(void *)&_DWORD buf[8] = v37 + 16;
        *(void *)&buf[16] = &v35[16 * v36];
        if (!v42) {
          goto LABEL_50;
        }
      }

      else
      {
        do
        {
          uint64_t v43 = *(v42 - 2);
          v42 -= 2;
          *((void *)v37 - 2) = v43;
          v37 -= 16;
          uint64_t v44 = v42[1];
          *((void *)v37 + 1) = v44;
          if (v44)
          {
            uint64_t v45 = (unint64_t *)(v44 + 16);
            do
              unint64_t v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
        }

        while (v42 != v41);
        uint64_t v47 = *(void **)buf;
        unsigned __int8 v42 = *(void **)&buf[8];
        *(void *)AudioObjectPropertyAddress buf = v37;
        *(void *)&_DWORD buf[8] = v30;
        *(void *)&buf[16] = &v35[16 * v36];
        if (v42 != v47)
        {
          do
          {
            uint64_t v48 = (std::__shared_weak_count *)*(v42 - 1);
            if (v48) {
              std::__shared_weak_count::__release_weak(v48);
            }
            v42 -= 2;
          }

          while (v42 != v47);
          unsigned __int8 v42 = v47;
        }

        if (!v42) {
          goto LABEL_50;
        }
      }

      operator delete(v42);
LABEL_50:
      *(void *)&_DWORD buf[8] = v30;
      unsigned __int8 v25 = *(void **)&buf[16];
LABEL_51:
      *(_OWORD *)uint64_t v72 = *(_OWORD *)buf;
      uint64_t v73 = v25;
      unint64_t v74 = buf;
      memset(buf, 0, 24);
      sub_1F68CC((void ***)&v74);
      if (__p[0])
      {
        int v49 = (char *)__p[1];
        uint64_t v50 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            uint64_t v51 = (std::__shared_weak_count *)*((void *)v49 - 1);
            if (v51) {
              std::__shared_weak_count::__release_weak(v51);
            }
            v49 -= 16;
          }

          while (v49 != __p[0]);
          uint64_t v50 = __p[0];
        }

        __p[1] = __p[0];
        operator delete(v50);
      }

      *(_OWORD *)std::string __p = *(_OWORD *)v72;
      std::string __p[2] = v73;
      v72[1] = 0LL;
      uint64_t v73 = 0LL;
      v72[0] = 0LL;
      *(void *)AudioObjectPropertyAddress buf = v72;
      sub_1F68CC((void ***)buf);
      BOOL v10 = (void *)v10[1];
      if (v10 == v9)
      {
        __int128 v11 = *(_OWORD *)__p;
        int v52 = __p[2];
        goto LABEL_63;
      }
    }
  }

  int v52 = 0LL;
LABEL_63:
  __int128 v69 = v11;
  uint64_t v70 = v52;
  memset(__p, 0, 24);
  *(void *)AudioObjectPropertyAddress buf = __p;
  sub_1F68CC((void ***)buf);
  uint64_t v53 = (std::__shared_weak_count **)v69;
  if ((void)v69 != *((void *)&v69 + 1))
  {
    while (1)
    {
      uint64_t v54 = v53[1];
      v72[0] = *v53;
      v72[1] = v54;
      if (v54)
      {
        p_uint64_t shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
        do
          unint64_t v56 = __ldxr(p_shared_weak_owners);
        while (__stxr(v56 + 1, p_shared_weak_owners));
      }

      sub_B8CBC((uint64_t *)buf, (uint64_t *)v72, "", 808);
      int v57 = *(_DWORD *)(*(void *)buf + 144LL);
      if (v57 == 1885892674) {
        break;
      }
      if (v57 == 1886152047)
      {
        if ((sub_1CBD44() & 1) != 0)
        {
          uint64_t v59 = 0LL;
        }

        else
        {
          uint64_t v62 = sub_5954C();
          uint64_t v59 = (*(unsigned int (**)(uint64_t))(*(void *)v62 + 96LL))(v62) != 0;
        }

        goto LABEL_92;
      }

      if (v57 == 1886613611)
      {
        if ((!_os_feature_enabled_impl("VirtualAudio", "system_local_vad_builtinspeaker_a2dp")
           || (sub_7531C() & 1) == 0)
          && sub_56120() != 2
          && sub_56120() != 3
          && sub_56120() != 4
          && sub_56120() != 5)
        {
          BOOL v58 = sub_56120() == 195;
          goto LABEL_86;
        }

void sub_2A2EB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20, uint64_t a21, uint64_t a22, char a23, std::__shared_weak_count *a24)
{
  unsigned __int8 v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  a15 = &a11;
  sub_1F68CC((void ***)&a15);
  _Unwind_Resume(a1);
}

void *sub_2A2F80()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_47A108;
  return result;
}

void sub_2A2FA4(uint64_t a1, void *a2)
{
  *a2 = &off_47A108;
}

uint64_t sub_2A2FBC()
{
  return 1LL;
}

void *sub_2A2FC4(unsigned int **a1, uint64_t *a2)
{
  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  uint64_t v4 = *a2;
  if (byte_48E8E0)
  {
    memset(v70, 0, sizeof(v70));
    sub_F10CC(v70, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
    unint64_t v5 = a2[4];
    if (v5)
    {
      if (v5 >> 62) {
        sub_7A87C();
      }
      unsigned __int8 v6 = (const void *)a2[3];
      int v7 = (char *)sub_7A890(a2[4]);
      memmove(v7, v6, 4 * v5);
      uint64_t v8 = &v7[4 * v5];
    }

    else
    {
      uint64_t v8 = 0LL;
      int v7 = 0LL;
    }

    sub_2A3978(v71, (uint64_t)v70, v7, v8);
    unint64_t v13 = a2[2];
    if (v13)
    {
      if (v13 >> 62) {
        sub_7A87C();
      }
      int64_t v14 = (const void *)a2[1];
      uint64_t v15 = (char *)sub_7A890(a2[2]);
      memmove(v15, v14, 4 * v13);
      uint64_t v16 = (unsigned int *)&v15[4 * v13];
    }

    else
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
    }

    sub_2A3BB8(__p, (uint64_t)v71, (unsigned int *)v15, v16);
    uint64_t v17 = operator new(4uLL);
    *uint64_t v17 = 2;
    sub_2A3978(&v73, (uint64_t)__p, v17, v17 + 1);
    operator delete(v17);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (v15) {
      operator delete(v15);
    }
    if (v71[0])
    {
      v71[1] = v71[0];
      operator delete(v71[0]);
    }

    if (v7) {
      operator delete(v7);
    }
    BOOL v18 = (void *)v70[0];
    if (v70[0])
    {
      unint64_t v19 = (void **)v70;
LABEL_38:
      v19[1] = v18;
      operator delete(v18);
    }
  }

  else
  {
    memset(v68, 0, sizeof(v68));
    sub_F10CC(v68, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
    unint64_t v9 = a2[4];
    if (v9)
    {
      if (v9 >> 62) {
        sub_7A87C();
      }
      BOOL v10 = (const void *)a2[3];
      __int128 v11 = (char *)sub_7A890(a2[4]);
      memmove(v11, v10, 4 * v9);
      int v12 = &v11[4 * v9];
    }

    else
    {
      __int128 v11 = 0LL;
      int v12 = 0LL;
    }

    sub_2A3978(v69, (uint64_t)v68, v11, v12);
    unint64_t v20 = a2[2];
    if (v20)
    {
      if (v20 >> 62) {
        sub_7A87C();
      }
      unint64_t v21 = (const void *)a2[1];
      int v22 = (char *)sub_7A890(a2[2]);
      memmove(v22, v21, 4 * v20);
      unsigned __int8 v23 = (unsigned int *)&v22[4 * v20];
    }

    else
    {
      int v22 = 0LL;
      unsigned __int8 v23 = 0LL;
    }

    sub_2A3BB8(&v73, (uint64_t)v69, (unsigned int *)v22, v23);
    if (v22) {
      operator delete(v22);
    }
    if (v69[0])
    {
      v69[1] = v69[0];
      operator delete(v69[0]);
    }

    if (v11) {
      operator delete(v11);
    }
    BOOL v18 = v68[0];
    if (v68[0])
    {
      unint64_t v19 = v68;
      goto LABEL_38;
    }
  }

  unint64_t v24 = 126 - 2 * __clz(v74 - v73);
  if (v74 == v73) {
    uint64_t v25 = 0LL;
  }
  else {
    uint64_t v25 = v24;
  }
  sub_2A3E84(v73, v74, v25, 1);
  unsigned __int8 v26 = atomic_load((unsigned __int8 *)&qword_499E10);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_499E10))
  {
    xmmword_499DE8 = 0u;
    *(_OWORD *)&qword_499DF8 = 0u;
    dword_499E08 = 1065353216;
    __cxa_guard_release(&qword_499E10);
  }

  unint64_t v27 = (os_log_t *)sub_138E8(17);
  int v28 = *v27;
  if (*v27)
  {
    BOOL v29 = os_log_type_enabled(*v27, OS_LOG_TYPE_DEBUG);
    uint64_t v31 = v73;
    BOOL v30 = v74;
    if (v29)
    {
      memset(&v67, 0, sizeof(v67));
      std::string::append(&v67, "{ ", 2uLL);
      if (v31 != v30)
      {
        unint64_t v32 = v31;
        while (1)
        {
          std::to_string(&v75, *v32);
          if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v33 = &v75;
          }
          else {
            uint64_t v33 = (std::string *)v75.__r_.__value_.__r.__words[0];
          }
          if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v75.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v75.__r_.__value_.__l.__size_;
          }
          std::string::append(&v67, (const std::string::value_type *)v33, size);
          if (++v32 == v30) {
            break;
          }
          std::string::append(&v67, ", ", 2uLL);
        }
      }

      std::string::append(&v67, " }", 2uLL);
      if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v35 = &v67;
      }
      else {
        BOOL v35 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1540;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v35;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d AltVAD types: %s", buf, 0x1Cu);
    }
  }

  else
  {
    uint64_t v31 = v73;
    BOOL v30 = v74;
  }

  unint64_t v36 = v30 - v31;
  if (v30 != v31)
  {
    uint64_t v37 = v31;
    do
    {
      uint64_t v38 = *v37++;
      v36 ^= v38;
    }

    while (v37 != v30);
  }

  if (*((void *)&xmmword_499DE8 + 1))
  {
    uint8x8_t v39 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_499DE8 + 8));
    v39.i16[0] = vaddlv_u8(v39);
    if (v39.u32[0] > 1uLL)
    {
      unint64_t v40 = v36;
      if (v36 >= *((void *)&xmmword_499DE8 + 1)) {
        unint64_t v40 = v36 % *((void *)&xmmword_499DE8 + 1);
      }
    }

    else
    {
      unint64_t v40 = (*((void *)&xmmword_499DE8 + 1) - 1LL) & v36;
    }

    uint64_t v41 = *(void **)(xmmword_499DE8 + 8 * v40);
    if (v41)
    {
      for (uint64_t i = (void *)*v41; i; uint64_t i = (void *)*i)
      {
        unint64_t v43 = i[1];
        if (v43 == v36)
        {
          uint64_t v45 = i[2];
          uint64_t v44 = i[3];
          if (v44 - v45 == (char *)v30 - (char *)v31)
          {
            if (v45 == v44) {
              goto LABEL_92;
            }
            uint64_t v46 = 0LL;
            while (*(_DWORD *)(v45 + v46 * 4) == v31[v46])
            {
              if (v45 + ++v46 * 4 == v44) {
                goto LABEL_92;
              }
            }
          }
        }

        else
        {
          if (v39.u32[0] > 1uLL)
          {
            if (v43 >= *((void *)&xmmword_499DE8 + 1)) {
              v43 %= *((void *)&xmmword_499DE8 + 1);
            }
          }

          else
          {
            v43 &= *((void *)&xmmword_499DE8 + 1) - 1LL;
          }

          if (v43 != v40) {
            break;
          }
        }
      }
    }
  }

  sub_2971C0((uint64_t *)buf, a1, v31, (uint64_t)v30);
  uint64_t v47 = sub_2A44B0(v31, v30, (uint64_t)&v73);
  uint64_t v48 = v47;
  int v49 = (void **)(v47 + 5);
  uint64_t v50 = (void *)v47[5];
  if (v50)
  {
    uint64_t v51 = v47[6];
    int v52 = v50;
    if ((void *)v51 != v50)
    {
      do
        uint64_t v51 = sub_8F164(v51 - 440);
      while ((void *)v51 != v50);
      int v52 = *v49;
      uint64_t v31 = v73;
      BOOL v30 = v74;
    }

    v48[6] = v50;
    operator delete(v52);
    char *v49 = 0LL;
    v49[1] = 0LL;
    v49[2] = 0LL;
  }

  *(_OWORD *)(v48 + 5) = *(_OWORD *)buf;
  v48[7] = *(void *)&buf[16];
  memset(buf, 0, 24);
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_8F2D4((void ***)&v75);
LABEL_92:
  uint64_t v53 = sub_2A44B0(v31, v30, (uint64_t)&v73);
  uint64_t v54 = v73;
  char v66 = v74;
  sub_2971C0((uint64_t *)&v75, a1, v73, (uint64_t)v74);
  uint64_t v55 = v53[5];
  for (uint64_t j = v53[6]; v55 != j; v55 += 440LL)
  {
    int v57 = (os_log_t *)sub_138E8(17);
    BOOL v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(&v67, *(unsigned int *)(v55 + 60));
      uint64_t v59 = (v67.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v67 : (std::string *)v67.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1552;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v59;
      _os_log_impl(&dword_0, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d AltVAD: %s", buf, 0x1Cu);
    }

    std::string::size_type v60 = v75.__r_.__value_.__r.__words[0];
    if (v75.__r_.__value_.__r.__words[0] == v75.__r_.__value_.__l.__size_)
    {
LABEL_108:
      uint64_t v63 = (os_log_t *)sub_138E8(13);
      unint64_t v64 = *v63;
      if (*v63)
      {
        if (os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1553;
          _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    while (*(_DWORD *)(v55 + 60) != *(_DWORD *)(v60 + 60))
    {
      v60 += 440LL;
      if (v60 == v75.__r_.__value_.__l.__size_) {
        goto LABEL_108;
      }
    }
  }

  BOOL v61 = sub_2A44B0(v54, v66, (uint64_t)&v73);
  *(void *)AudioObjectPropertyAddress buf = &v75;
  sub_8F2D4((void ***)buf);
  if (v54) {
    operator delete(v54);
  }
  return v61 + 5;
}

void sub_2A380C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  if (v35) {
    operator delete(v35);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v34) {
    operator delete(v34);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A3978(void *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (a3 == a4)
  {
    uint64_t v8 = *(unsigned int **)(a2 + 8);
  }

  else
  {
    int v7 = a3;
    uint64_t v8 = *(unsigned int **)(a2 + 8);
    do
    {
      unint64_t v9 = *(unsigned int **)a2;
      if (*(unsigned int **)a2 != v8)
      {
        while (*v9 != *v7)
        {
          if (++v9 == v8)
          {
            unint64_t v9 = v8;
            break;
          }
        }
      }

      if (v9 != v8)
      {
        uint64_t v10 = sub_138E8(20);
        if ((*(_BYTE *)(v10 + 8) & 1) != 0)
        {
          __int128 v11 = *(os_log_s **)v10;
          if (*(void *)v10)
          {
            if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v12 = *v7;
              unint64_t v13 = "????";
              sub_7D084(v21, v13);
              int v14 = v22;
              uint64_t v15 = (void **)v21[0];
              sub_296EEC(&__p, (unsigned int **)a2);
              uint64_t v16 = v21;
              if (v14 < 0) {
                uint64_t v16 = v15;
              }
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              unint64_t v24 = "AlternateVAD.cpp";
              __int16 v25 = 1024;
              int v26 = 1007;
              __int16 v27 = 2080;
              int v28 = v16;
              __int16 v29 = 2080;
              BOOL v30 = p_p;
              _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Removing Alternate VAD Specification Type %s from %s",  buf,  0x26u);
              if (v22 < 0) {
                operator delete(v21[0]);
              }
            }
          }
        }

        BOOL v18 = *(unsigned int **)(a2 + 8);
        int64_t v19 = (char *)v18 - (char *)(v9 + 1);
        if (v18 != v9 + 1) {
          memmove(v9, v9 + 1, (char *)v18 - (char *)(v9 + 1));
        }
        uint64_t v8 = (unsigned int *)((char *)v9 + v19);
        *(void *)(a2 + 8) = (char *)v9 + v19;
      }

      ++v7;
    }

    while (v7 != a4);
  }

  *a1 = *(void *)a2;
  a1[1] = v8;
  a1[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
}

void sub_2A3B94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A3BB8(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  if (a3 == a4)
  {
    uint64_t v8 = *(unsigned int **)(a2 + 8);
  }

  else
  {
    int v7 = a3;
    uint64_t v8 = *(unsigned int **)(a2 + 8);
    do
    {
      unint64_t v9 = *(unsigned int **)a2;
      if (*(unsigned int **)a2 != v8)
      {
        while (*v9 != *v7)
        {
          if (++v9 == v8)
          {
            unint64_t v9 = v8;
            break;
          }
        }
      }

      if (v9 == v8)
      {
        uint64_t v10 = sub_138E8(20);
        if ((*(_BYTE *)(v10 + 8) & 1) != 0)
        {
          __int128 v11 = *(os_log_s **)v10;
          if (*(void *)v10)
          {
            if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v12 = *v7;
              unint64_t v13 = "????";
              sub_7D084(v29, v13);
              int v14 = v30;
              uint64_t v15 = (void **)v29[0];
              sub_296EEC(&__p, (unsigned int **)a2);
              uint64_t v16 = v29;
              if (v14 < 0) {
                uint64_t v16 = v15;
              }
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              unint64_t v32 = "AlternateVAD.cpp";
              __int16 v33 = 1024;
              int v34 = 1022;
              __int16 v35 = 2080;
              unint64_t v36 = v16;
              __int16 v37 = 2080;
              uint64_t v38 = p_p;
              _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Add Alternate VAD Specification Type %s to %s",  buf,  0x26u);
              if (v30 < 0) {
                operator delete(v29[0]);
              }
            }
          }
        }

        int64_t v19 = *(unsigned int **)(a2 + 8);
        unint64_t v18 = *(void *)(a2 + 16);
        if ((unint64_t)v19 >= v18)
        {
          unint64_t v20 = *(unsigned int **)a2;
          uint64_t v21 = ((uint64_t)v19 - *(void *)a2) >> 2;
          unint64_t v22 = v21 + 1;
          uint64_t v23 = v18 - (void)v20;
          if (v23 >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            unint64_t v24 = (unint64_t)sub_7A890(v24);
            unint64_t v20 = *(unsigned int **)a2;
            int64_t v19 = *(unsigned int **)(a2 + 8);
          }

          else
          {
            uint64_t v25 = 0LL;
          }

          int v26 = (unsigned int *)(v24 + 4 * v21);
          unsigned int *v26 = *v7;
          uint64_t v8 = v26 + 1;
          while (v19 != v20)
          {
            unsigned int v27 = *--v19;
            *--int v26 = v27;
          }

          *(void *)a2 = v26;
          *(void *)(a2 + 8) = v8;
          *(void *)(a2 + 16) = v24 + 4 * v25;
          if (v20) {
            operator delete(v20);
          }
        }

        else
        {
          unsigned int *v19 = *v7;
          uint64_t v8 = v19 + 1;
        }

        *(void *)(a2 + 8) = v8;
      }

      ++v7;
    }

    while (v7 != a4);
  }

  *a1 = *(void *)a2;
  a1[1] = v8;
  a1[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
}

void sub_2A3E60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_2A3E84(int *result, int *a2, uint64_t a3, char a4)
{
  int v7 = result;
LABEL_2:
  uint64_t v8 = a2 - 1;
  unint64_t v9 = v7;
  while (2)
  {
    int v7 = v9;
    uint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        int v38 = *v9;
        if (*v8 < *v9)
        {
          int *v9 = *v8;
          int *v8 = v38;
        }

        return result;
      case 3uLL:
        return sub_2A49C0(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return sub_2A4A30(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return sub_2A4AAC(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 <= 95)
        {
          uint8x8_t v39 = v9 + 1;
          BOOL v41 = v9 == a2 || v39 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v41)
            {
              uint64_t v42 = 4LL;
              unint64_t v43 = v9;
              do
              {
                int v45 = *v43;
                int v44 = v43[1];
                unint64_t v43 = v39;
                if (v44 < v45)
                {
                  uint64_t v46 = v42;
                  while (1)
                  {
                    *(int *)((char *)v9 + v46) = v45;
                    uint64_t v47 = v46 - 4;
                    if (v46 == 4) {
                      break;
                    }
                    int v45 = *(int *)((char *)v9 + v46 - 8);
                    v46 -= 4LL;
                    if (v44 >= v45)
                    {
                      uint64_t v48 = (int *)((char *)v9 + v47);
                      goto LABEL_73;
                    }
                  }

                  uint64_t v48 = v9;
LABEL_73:
                  *uint64_t v48 = v44;
                }

                uint8x8_t v39 = v43 + 1;
                v42 += 4LL;
              }

              while (v43 + 1 != a2);
            }
          }

          else if (!v41)
          {
            do
            {
              int v74 = *v7;
              int v73 = v7[1];
              int v7 = v39;
              if (v73 < v74)
              {
                do
                {
                  int *v39 = v74;
                  int v74 = *(v39 - 2);
                  --v39;
                }

                while (v73 < v74);
                int *v39 = v73;
              }

              uint8x8_t v39 = v7 + 1;
            }

            while (v7 + 1 != a2);
          }

          return result;
        }

        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v49 = (v11 - 2) >> 1;
            int64_t v50 = v49;
            do
            {
              int64_t v51 = v50;
              if (v49 >= v50)
              {
                uint64_t v52 = (2 * v50) | 1;
                uint64_t v53 = &v9[v52];
                if (2 * v51 + 2 >= (uint64_t)v11)
                {
                  int v54 = *v53;
                }

                else
                {
                  int v54 = v53[1];
                  BOOL v55 = *v53 < v54;
                  if (*v53 > v54) {
                    int v54 = *v53;
                  }
                  if (v55)
                  {
                    ++v53;
                    uint64_t v52 = 2 * v51 + 2;
                  }
                }

                unint64_t v56 = &v9[v51];
                int v57 = *v56;
                if (v54 >= *v56)
                {
                  do
                  {
                    *unint64_t v56 = v54;
                    unint64_t v56 = v53;
                    if (v49 < v52) {
                      break;
                    }
                    uint64_t v58 = (2 * v52) | 1;
                    uint64_t v53 = &v9[v58];
                    uint64_t v52 = 2 * v52 + 2;
                    if (v52 >= (uint64_t)v11)
                    {
                      int v54 = *v53;
                      uint64_t v52 = v58;
                    }

                    else
                    {
                      int v54 = *v53;
                      uint64_t result = v53 + 1;
                      int v59 = v53[1];
                      if (*v53 <= v59) {
                        int v54 = v53[1];
                      }
                      if (*v53 >= v59) {
                        uint64_t v52 = v58;
                      }
                      else {
                        ++v53;
                      }
                    }
                  }

                  while (v54 >= v57);
                  *unint64_t v56 = v57;
                }
              }

              int64_t v50 = v51 - 1;
            }

            while (v51);
            uint64_t v60 = (unint64_t)v10 >> 2;
            do
            {
              uint64_t v61 = 0LL;
              int v62 = *v9;
              uint64_t v63 = v9;
              do
              {
                unint64_t v64 = &v63[v61 + 1];
                uint64_t v65 = (2 * v61) | 1;
                uint64_t v61 = 2 * v61 + 2;
                if (v61 >= v60)
                {
                  int v66 = *v64;
                  uint64_t v61 = v65;
                }

                else
                {
                  int v66 = *v64;
                  int v67 = v64[1];
                  if (*v64 <= v67) {
                    int v66 = v64[1];
                  }
                  if (*v64 >= v67) {
                    uint64_t v61 = v65;
                  }
                  else {
                    ++v64;
                  }
                }

                int *v63 = v66;
                uint64_t v63 = v64;
              }

              while (v61 <= (uint64_t)((unint64_t)(v60 - 2) >> 1));
              if (v64 == --a2)
              {
                *unint64_t v64 = v62;
              }

              else
              {
                *unint64_t v64 = *a2;
                *a2 = v62;
                uint64_t v68 = (char *)v64 - (char *)v9 + 4;
                if (v68 >= 5)
                {
                  unint64_t v69 = (((unint64_t)v68 >> 2) - 2) >> 1;
                  uint64_t v70 = &v9[v69];
                  int v71 = *v70;
                  int v72 = *v64;
                  if (*v70 < *v64)
                  {
                    do
                    {
                      *unint64_t v64 = v71;
                      unint64_t v64 = v70;
                      if (!v69) {
                        break;
                      }
                      unint64_t v69 = (v69 - 1) >> 1;
                      uint64_t v70 = &v9[v69];
                      int v71 = *v70;
                    }

                    while (*v70 < v72);
                    *unint64_t v64 = v72;
                  }
                }
              }

              BOOL v55 = v60-- <= 2;
            }

            while (!v55);
          }

          return result;
        }

        unint64_t v12 = v11 >> 1;
        unint64_t v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x201)
        {
          uint64_t result = sub_2A49C0(&v7[v11 >> 1], v7, a2 - 1);
        }

        else
        {
          sub_2A49C0(v7, &v7[v11 >> 1], a2 - 1);
          sub_2A49C0(v7 + 1, v13 - 1, a2 - 2);
          sub_2A49C0(v7 + 2, &v7[v12 + 1], a2 - 3);
          uint64_t result = sub_2A49C0(v13 - 1, v13, &v7[v12 + 1]);
          int v14 = *v7;
          int *v7 = *v13;
          *unint64_t v13 = v14;
        }

        --a3;
        int v15 = *v7;
        uint64_t v16 = v7;
        if ((a4 & 1) == 0)
        {
          uint64_t v16 = v7;
          if (*(v7 - 1) >= v15)
          {
            if (v15 >= *v8)
            {
              char v30 = v7 + 1;
              do
              {
                unint64_t v9 = v30;
                if (v30 >= a2) {
                  break;
                }
                ++v30;
              }

              while (v15 >= *v9);
            }

            else
            {
              unint64_t v9 = v7;
              do
              {
                int v29 = v9[1];
                ++v9;
              }

              while (v15 >= v29);
            }

            uint64_t v31 = a2;
            if (v9 < a2)
            {
              uint64_t v31 = a2;
              do
                int v32 = *--v31;
              while (v15 < v32);
            }

            if (v9 < v31)
            {
              int v33 = *v9;
              int v34 = *v31;
              do
              {
                int *v9 = v34;
                *uint64_t v31 = v33;
                do
                {
                  int v35 = v9[1];
                  ++v9;
                  int v33 = v35;
                }

                while (v15 >= v35);
                do
                {
                  int v36 = *--v31;
                  int v34 = v36;
                }

                while (v15 < v36);
              }

              while (v9 < v31);
            }

            __int16 v37 = v9 - 1;
            if (v9 - 1 != v7) {
              int *v7 = *v37;
            }
            a4 = 0;
            int *v37 = v15;
            continue;
          }
        }

        do
        {
          uint64_t v17 = v16;
          int v19 = v16[1];
          ++v16;
          int v18 = v19;
        }

        while (v19 < v15);
        unint64_t v20 = a2;
        if (v17 == v7)
        {
          unint64_t v20 = a2;
          do
          {
            if (v16 >= v20) {
              break;
            }
            int v22 = *--v20;
          }

          while (v22 >= v15);
        }

        else
        {
          do
            int v21 = *--v20;
          while (v21 >= v15);
        }

        if (v16 < v20)
        {
          int v23 = *v20;
          unint64_t v24 = v16;
          uint64_t v25 = v20;
          do
          {
            *unint64_t v24 = v23;
            int *v25 = v18;
            do
            {
              uint64_t v17 = v24;
              int v26 = v24[1];
              ++v24;
              int v18 = v26;
            }

            while (v26 < v15);
            do
            {
              int v27 = *--v25;
              int v23 = v27;
            }

            while (v27 >= v15);
          }

          while (v24 < v25);
        }

        if (v17 != v7) {
          int *v7 = *v17;
        }
        *uint64_t v17 = v15;
        if (v16 < v20)
        {
LABEL_29:
          uint64_t result = (int *)sub_2A3E84(v7, v17, a3, a4 & 1);
          a4 = 0;
          unint64_t v9 = v17 + 1;
          continue;
        }

        BOOL v28 = sub_2A4B4C(v7, v17);
        unint64_t v9 = v17 + 1;
        uint64_t result = (int *)sub_2A4B4C(v17 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28) {
            continue;
          }
          goto LABEL_29;
        }

        a2 = v17;
        if (!v28) {
          goto LABEL_2;
        }
        return result;
    }
  }

void *sub_2A44B0(int *a1, int *a2, uint64_t a3)
{
  unint64_t v5 = a2 - a1;
  if (a2 != a1)
  {
    unsigned __int8 v6 = a1;
    do
    {
      uint64_t v7 = *v6++;
      v5 ^= v7;
    }

    while (v6 != a2);
  }

  unint64_t v8 = *((void *)&xmmword_499DE8 + 1);
  if (*((void *)&xmmword_499DE8 + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_499DE8 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= *((void *)&xmmword_499DE8 + 1)) {
        unint64_t v3 = v5 % *((void *)&xmmword_499DE8 + 1);
      }
    }

    else
    {
      unint64_t v3 = (*((void *)&xmmword_499DE8 + 1) - 1LL) & v5;
    }

    uint64_t v10 = *(void ***)(xmmword_499DE8 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v5)
        {
          int v14 = (char *)i[2];
          unint64_t v13 = (char *)i[3];
          if (v13 - v14 == (char *)a2 - (char *)a1)
          {
            if (v14 == v13) {
              return i;
            }
            for (uint64_t j = a1; *(_DWORD *)v14 == *j; ++j)
            {
              v14 += 4;
              if (v14 == v13) {
                return i;
              }
            }
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= *((void *)&xmmword_499DE8 + 1)) {
              v12 %= *((void *)&xmmword_499DE8 + 1);
            }
          }

          else
          {
            v12 &= *((void *)&xmmword_499DE8 + 1) - 1LL;
          }

          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v16 = operator new(0x40uLL);
  v37[0] = (uint64_t)v16;
  v37[1] = (uint64_t)&qword_499DF8;
  char v38 = 0;
  *uint64_t v16 = 0LL;
  v16[1] = v5;
  uint64_t v16[3] = 0LL;
  v16[4] = 0LL;
  v16[2] = 0LL;
  sub_F10CC(v16 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  v16[5] = 0LL;
  uint64_t v16[6] = 0LL;
  v16[7] = 0LL;
  char v38 = 1;
  float v17 = (float)(unint64_t)(qword_499E00 + 1);
  if (!v8 || (float)(*(float *)&dword_499E08 * (float)v8) < v17)
  {
    BOOL v18 = 1LL;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&dword_499E08);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }

    unint64_t v8 = *((void *)&xmmword_499DE8 + 1);
    if (*(void *)&prime > *((void *)&xmmword_499DE8 + 1)) {
      goto LABEL_37;
    }
    if (*(void *)&prime < *((void *)&xmmword_499DE8 + 1))
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)qword_499E00 / *(float *)&dword_499E08);
      if (*((void *)&xmmword_499DE8 + 1) < 3uLL
        || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_499DE8 + 8)),
            v29.i16[0] = vaddlv_u8(v29),
            v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }

      else
      {
        uint64_t v30 = 1LL << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }

      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&xmmword_499DE8 + 1);
      }

      else
      {
        if (prime)
        {
LABEL_37:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          int v22 = operator new(8LL * *(void *)&prime);
          int v23 = (void *)xmmword_499DE8;
          *(void *)&xmmword_499DE8 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0LL;
          *((int8x8_t *)&xmmword_499DE8 + 1) = prime;
          do
            *(void *)(xmmword_499DE8 + 8 * v24++) = 0LL;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void **)qword_499DF8;
          if (qword_499DF8)
          {
            unint64_t v26 = *(void *)(qword_499DF8 + 8);
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }

            else
            {
              v26 &= *(void *)&prime - 1LL;
            }

            *(void *)(xmmword_499DE8 + 8 * v26) = &qword_499DF8;
            for (uint64_t k = *v25; k; v26 = v32)
            {
              unint64_t v32 = k[1];
              if (v27.u32[0] > 1uLL)
              {
                if (v32 >= *(void *)&prime) {
                  v32 %= *(void *)&prime;
                }
              }

              else
              {
                v32 &= *(void *)&prime - 1LL;
              }

              if (v32 != v26)
              {
                if (!*(void *)(xmmword_499DE8 + 8 * v32))
                {
                  *(void *)(xmmword_499DE8 + 8 * v32) = v25;
                  goto LABEL_62;
                }

                int *v25 = (void *)*k;
                *uint64_t k = **(void **)(xmmword_499DE8 + 8 * v32);
                **(void **)(xmmword_499DE8 + 8 * v32) = k;
                uint64_t k = v25;
              }

              unint64_t v32 = v26;
LABEL_62:
              uint64_t v25 = (void **)k;
              uint64_t k = (void *)*k;
            }
          }

          unint64_t v8 = (unint64_t)prime;
          goto LABEL_66;
        }

        int v36 = (void *)xmmword_499DE8;
        *(void *)&xmmword_499DE8 = 0LL;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0LL;
        *((void *)&xmmword_499DE8 + 1) = 0LL;
      }
    }

void sub_2A4940(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_2A4958(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      unint64_t v3 = (void **)(v1 + 40);
      sub_8F2D4(&v3);
      int v2 = *(void **)(v1 + 16);
      if (v2)
      {
        *(void *)(v1 + memset(buf, 0, 24) = v2;
        operator delete(v2);
      }
    }

    operator delete((void *)v1);
  }

int *sub_2A49C0(int *result, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *result;
  int v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      int v6 = *result;
      if (*a2 < *result)
      {
        *uint64_t result = *a2;
        *a2 = v6;
      }
    }
  }

  else
  {
    if (v5 >= v3)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*a3 >= v4) {
        return result;
      }
      *a2 = *a3;
    }

    else
    {
      *uint64_t result = v5;
    }

    *a3 = v4;
  }

  return result;
}

int *sub_2A4A30(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = sub_2A49C0(a1, a2, a3);
  int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }

  return result;
}

int *sub_2A4AAC(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = sub_2A4A30(a1, a2, a3, a4);
  int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }

  return result;
}

BOOL sub_2A4B4C(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }

      return result;
    case 3LL:
      sub_2A49C0(a1, a1 + 1, a2 - 1);
      return 1LL;
    case 4LL:
      sub_2A4A30(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1LL;
    case 5LL:
      sub_2A4AAC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1LL;
    default:
      unint64_t v8 = a1 + 2;
      sub_2A49C0(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v10 = 0;
      uint64_t v11 = 12LL;
      break;
  }

  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4LL;
        if (v12 >= v13)
        {
          uint64_t v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }

      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }

    unint64_t v8 = v9;
    v11 += 4LL;
    if (++v9 == a2) {
      return 1LL;
    }
  }

uint64_t sub_2A4CAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 633);
}

void sub_2A4CB4(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

void sub_2A4CC0(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

void *sub_2A4CCC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_47D988;
  v4[1] = 0LL;
  v4[2] = 0LL;
  uint64_t v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2A4D10(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    int v3 = (void *)sub_28020C(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_2A4D2C(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  int v5 = (char *)a1[2];
  if (v4 < v5)
  {
    *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *((void *)v4 + 3) = *(void *)(a2 + 24);
    int v6 = v4 + 32;
    goto LABEL_17;
  }

  uint64_t v7 = (v4 - (_BYTE *)*a1) >> 5;
  unint64_t v8 = v7 + 1;
  uint64_t v9 = v5 - (_BYTE *)*a1;
  if (v9 >> 4 > v8) {
    unint64_t v8 = v9 >> 4;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10 >> 59) {
    sub_7A8C4();
  }
  uint64_t v11 = (char *)operator new(32 * v10);
  int v12 = &v11[32 * v7];
  int v13 = &v11[32 * v10];
  *(_DWORD *)int v12 = *(_DWORD *)a2;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *((void *)v12 + 3) = *(void *)(a2 + 24);
  int v6 = v12 + 32;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  uint64_t v16 = 0LL;
  do
  {
    float v17 = &v12[v16];
    BOOL v18 = &v15[v16];
    *((_DWORD *)v17 - 8) = *(_DWORD *)&v15[v16 - 32];
    *(_OWORD *)(v17 - memset(buf, 0, 24) = *(_OWORD *)&v15[v16 - 24];
    *((void *)v18 - 3) = 0LL;
    *((void *)v18 - 2) = 0LL;
    *((void *)v17 - 1) = *(void *)&v15[v16 - 8];
    v16 -= 32LL;
  }

  while (&v15[v16] != v14);
  unint64_t v19 = &v12[v16];
  uint64_t v15 = (char *)*a1;
  unint64_t v20 = (char *)a1[1];
  *a1 = v19;
  a1[1] = v6;
  a1[2] = v13;
  if (v20 != v15)
  {
    do
    {
      int v21 = v20 - 32;
      sub_7A768((uint64_t)(v20 - 24));
      unint64_t v20 = v21;
    }

    while (v21 != v15);
  }

  if (v15) {
LABEL_16:
  }
    operator delete(v15);
LABEL_17:
  a1[1] = v6;
}